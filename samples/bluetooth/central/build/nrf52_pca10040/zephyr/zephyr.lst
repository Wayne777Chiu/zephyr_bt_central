
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002d08 	.word	0x20002d08

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 000124eb 00001aa1 00001aa1     .....$..........
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 000144fd 00000000 000018ed     .....D..........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 000124b1     .............$..
     13c:	00000000 000018ed 20003ed8 00014801     .........>. .H..
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 000124e5 00000000 000018ed     .....$..........
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00015d85 	.word	0x00015d85
     5b0:	00015dae 	.word	0x00015dae
     5b4:	00015d8c 	.word	0x00015d8c
     5b8:	00015d93 	.word	0x00015d93
     5bc:	00015d9d 	.word	0x00015d9d
     5c0:	00015da7 	.word	0x00015da7

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 fbe2 	bl	4d94 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fc7b 	bl	4ef4 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00015dd1 	.word	0x00015dd1
     604:	20000000 	.word	0x20000000
     608:	00015def 	.word	0x00015def

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 fbbb 	bl	4d94 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f004 f9f8 	bl	4a24 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fdd8 	bl	41fc <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00015e1a 	.word	0x00015e1a
     664:	00015d28 	.word	0x00015d28
     668:	00000671 	.word	0x00000671
     66c:	00015e38 	.word	0x00015e38

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fe03 	bl	42a0 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 fb75 	bl	4d98 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	00015dfe 	.word	0x00015dfe
     6bc:	00015d2e 	.word	0x00015d2e

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 fd2a 	bl	411c <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fe9a 	bl	4418 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 fd82 	bl	41fc <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00015e5b 	.word	0x00015e5b
     70c:	00015e7b 	.word	0x00015e7b
     710:	20003a48 	.word	0x20003a48
     714:	00015d36 	.word	0x00015d36
     718:	00000671 	.word	0x00000671
     71c:	00015e38 	.word	0x00015e38
     720:	00015e92 	.word	0x00015e92

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a7c 	.word	0x20003a7c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f014 fcf2 	bl	1528c <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a80 	.word	0x20003a80

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a80 	.word	0x20003a80

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f013 fc71 	bl	148dc <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	00015ec0 	.word	0x00015ec0

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f013 fc36 	bl	148dc <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	00015eca 	.word	0x00015eca
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f014 f801 	bl	1537c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003e98 	.word	0x20003e98
    1394:	20000010 	.word	0x20000010
    1398:	20003e94 	.word	0x20003e94

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003e98 	.word	0x20003e98
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f013 fa60 	bl	148dc <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	00015eec 	.word	0x00015eec
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003e98 	.word	0x20003e98
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	200019a8 	.word	0x200019a8
    14c4:	20003e98 	.word	0x20003e98

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f013 fe8c 	bl	151f0 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	20001970 	.word	0x20001970
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	20001970 	.word	0x20001970
    1530:	0001a9c0 	.word	0x0001a9c0
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	20001970 	.word	0x20001970
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f013 fe72 	bl	1528c <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	00016045 	.word	0x00016045

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	0001608f 	.word	0x0001608f
    1630:	e000ed00 	.word	0xe000ed00
    1634:	000160a6 	.word	0x000160a6
    1638:	000160b8 	.word	0x000160b8
    163c:	000160cc 	.word	0x000160cc
    1640:	000160e5 	.word	0x000160e5
    1644:	000160f6 	.word	0x000160f6
    1648:	00016116 	.word	0x00016116

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	00016146 	.word	0x00016146
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	0001615f 	.word	0x0001615f
    16c8:	00016173 	.word	0x00016173
    16cc:	0001618e 	.word	0x0001618e
    16d0:	000161ad 	.word	0x000161ad
    16d4:	000161d3 	.word	0x000161d3
    16d8:	000161ee 	.word	0x000161ee

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	00015f0c 	.word	0x00015f0c
    175c:	e000ed00 	.word	0xe000ed00
    1760:	000160a6 	.word	0x000160a6
    1764:	000160b8 	.word	0x000160b8
    1768:	00015f23 	.word	0x00015f23
    176c:	000160e5 	.word	0x000160e5
    1770:	00015f3d 	.word	0x00015f3d
    1774:	00015f59 	.word	0x00015f59
    1778:	00016116 	.word	0x00016116

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	00015fa0 	.word	0x00015fa0
    1824:	00015fb8 	.word	0x00015fb8
    1828:	00015fda 	.word	0x00015fda
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	00015ffa 	.word	0x00015ffa
    183c:	00015f72 	.word	0x00015f72
    1840:	00015f87 	.word	0x00015f87
    1844:	00016031 	.word	0x00016031

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f013 f813 	bl	14928 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	20001970 	.word	0x20001970

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f013 ff4a 	bl	157b4 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f013 fc6a 	bl	1528c <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	0001621a 	.word	0x0001621a
    19e4:	00016298 	.word	0x00016298
    19e8:	00016240 	.word	0x00016240
    19ec:	0001625a 	.word	0x0001625a
    19f0:	00016275 	.word	0x00016275

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f013 fe05 	bl	15610 <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f013 fe02 	bl	15610 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f013 fe05 	bl	15630 <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	000162d8 	.word	0x000162d8
    1a44:	000162d4 	.word	0x000162d4
    1a48:	000162e9 	.word	0x000162e9
    1a4c:	20001970 	.word	0x20001970
    1a50:	00016309 	.word	0x00016309

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f013 fe3c 	bl	156e0 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f013 fbb9 	bl	151f0 <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f013 ba67 	b.w	14f64 <_reschedule>
    1a96:	bf00      	nop
    1a98:	20001970 	.word	0x20001970
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f012 ff3a 	blne	14928 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	20001970 	.word	0x20001970
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002e48 	.word	0x20002e48

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f012 ff34 	bl	14988 <_bss_zero>
	_data_copy();
    1b20:	f012 ff3c 	bl	1499c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f012 ff5e 	bl	149e4 <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003a5c 	.word	0x20003a5c
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>
	...

00001c9c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	f04f 0320 	mov.w	r3, #32
    1ca2:	f3ef 8511 	mrs	r5, BASEPRI
    1ca6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <bt_hex+0x60>)
    1cac:	4e14      	ldr	r6, [pc, #80]	; (1d00 <bt_hex+0x64>)
    1cae:	7823      	ldrb	r3, [r4, #0]
    1cb0:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cb4:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cb6:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cba:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cbc:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cbe:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cc2:	2940      	cmp	r1, #64	; 0x40
    1cc4:	bf28      	it	cs
    1cc6:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cc8:	4d0e      	ldr	r5, [pc, #56]	; (1d04 <bt_hex+0x68>)
    1cca:	3801      	subs	r0, #1
    1ccc:	4613      	mov	r3, r2
    1cce:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cd2:	42b3      	cmp	r3, r6
    1cd4:	d104      	bne.n	1ce0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cdc:	4610      	mov	r0, r2
    1cde:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	7844      	ldrb	r4, [r0, #1]
    1ce2:	0924      	lsrs	r4, r4, #4
    1ce4:	3302      	adds	r3, #2
    1ce6:	5d2c      	ldrb	r4, [r5, r4]
    1ce8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1cec:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1cf0:	f004 040f 	and.w	r4, r4, #15
    1cf4:	5d2c      	ldrb	r4, [r5, r4]
    1cf6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1cfa:	e7ea      	b.n	1cd2 <bt_hex+0x36>
    1cfc:	20000074 	.word	0x20000074
    1d00:	20000075 	.word	0x20000075
    1d04:	0001634c 	.word	0x0001634c

00001d08 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d08:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <bt_addr_str+0x40>)
    1d0c:	4c0f      	ldr	r4, [pc, #60]	; (1d4c <bt_addr_str+0x44>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d14:	3301      	adds	r3, #1
{
    1d16:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	7943      	ldrb	r3, [r0, #5]
    1d22:	9204      	str	r2, [sp, #16]
    1d24:	7842      	ldrb	r2, [r0, #1]
    1d26:	9203      	str	r2, [sp, #12]
    1d28:	7882      	ldrb	r2, [r0, #2]
    1d2a:	9202      	str	r2, [sp, #8]
    1d2c:	78c2      	ldrb	r2, [r0, #3]
    1d2e:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d34:	7902      	ldrb	r2, [r0, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	2112      	movs	r1, #18
    1d3a:	4a05      	ldr	r2, [pc, #20]	; (1d50 <bt_addr_str+0x48>)
    1d3c:	4620      	mov	r0, r4
    1d3e:	f7ff f933 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d42:	4620      	mov	r0, r4
    1d44:	b006      	add	sp, #24
    1d46:	bd10      	pop	{r4, pc}
    1d48:	20000072 	.word	0x20000072
    1d4c:	20000018 	.word	0x20000018
    1d50:	0001632e 	.word	0x0001632e

00001d54 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a1d      	ldr	r2, [pc, #116]	; (1dcc <bt_addr_le_str+0x78>)
    1d58:	491d      	ldr	r1, [pc, #116]	; (1dd0 <bt_addr_le_str+0x7c>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d60:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d62:	f003 0301 	and.w	r3, r3, #1
    1d66:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d68:	7803      	ldrb	r3, [r0, #0]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d6c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d70:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d72:	440e      	add	r6, r1
    1d74:	ad07      	add	r5, sp, #28
    1d76:	2b03      	cmp	r3, #3
    1d78:	d821      	bhi.n	1dbe <bt_addr_le_str+0x6a>
    1d7a:	e8df f003 	tbb	[pc, r3]
    1d7e:	1a02      	.short	0x1a02
    1d80:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff ff05 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d8a:	7862      	ldrb	r2, [r4, #1]
    1d8c:	9204      	str	r2, [sp, #16]
    1d8e:	78a2      	ldrb	r2, [r4, #2]
    1d90:	9203      	str	r2, [sp, #12]
    1d92:	78e2      	ldrb	r2, [r4, #3]
    1d94:	9202      	str	r2, [sp, #8]
    1d96:	7922      	ldrb	r2, [r4, #4]
    1d98:	9201      	str	r2, [sp, #4]
    1d9a:	7962      	ldrb	r2, [r4, #5]
    1d9c:	9200      	str	r2, [sp, #0]
    1d9e:	79a3      	ldrb	r3, [r4, #6]
    1da0:	9505      	str	r5, [sp, #20]
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <bt_addr_le_str+0x84>)
    1da4:	211b      	movs	r1, #27
    1da6:	4630      	mov	r0, r6
    1da8:	f7ff f8fe 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dac:	4630      	mov	r0, r6
    1dae:	b00a      	add	sp, #40	; 0x28
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1db2:	490a      	ldr	r1, [pc, #40]	; (1ddc <bt_addr_le_str+0x88>)
    1db4:	e7e6      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1db6:	490a      	ldr	r1, [pc, #40]	; (1de0 <bt_addr_le_str+0x8c>)
    1db8:	e7e4      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dba:	490a      	ldr	r1, [pc, #40]	; (1de4 <bt_addr_le_str+0x90>)
    1dbc:	e7e2      	b.n	1d84 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dbe:	4a0a      	ldr	r2, [pc, #40]	; (1de8 <bt_addr_le_str+0x94>)
    1dc0:	210a      	movs	r1, #10
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff f8f0 	bl	fa8 <snprintk>
    1dc8:	e7df      	b.n	1d8a <bt_addr_le_str+0x36>
    1dca:	bf00      	nop
    1dcc:	20000073 	.word	0x20000073
    1dd0:	2000003c 	.word	0x2000003c
    1dd4:	00015d85 	.word	0x00015d85
    1dd8:	00015dae 	.word	0x00015dae
    1ddc:	00015d8c 	.word	0x00015d8c
    1de0:	00015d93 	.word	0x00015d93
    1de4:	00015d9d 	.word	0x00015d9d
    1de8:	00015da7 	.word	0x00015da7

00001dec <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dec:	b530      	push	{r4, r5, lr}
    1dee:	b085      	sub	sp, #20
    1df0:	4604      	mov	r4, r0
    1df2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1df4:	4668      	mov	r0, sp
    1df6:	2203      	movs	r2, #3
    1df8:	f7ff ff00 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1dfc:	220d      	movs	r2, #13
    1dfe:	2100      	movs	r1, #0
    1e00:	f10d 0003 	add.w	r0, sp, #3
    1e04:	f7ff ff26 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e08:	4620      	mov	r0, r4
    1e0a:	466a      	mov	r2, sp
    1e0c:	4669      	mov	r1, sp
    1e0e:	f007 fb75 	bl	94fc <bt_encrypt_le>
	if (err) {
    1e12:	4604      	mov	r4, r0
    1e14:	b920      	cbnz	r0, 1e20 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e16:	2203      	movs	r2, #3
    1e18:	4669      	mov	r1, sp
    1e1a:	4628      	mov	r0, r5
    1e1c:	f7ff feee 	bl	1bfc <memcpy>

	return 0;
}
    1e20:	4620      	mov	r0, r4
    1e22:	b005      	add	sp, #20
    1e24:	bd30      	pop	{r4, r5, pc}

00001e26 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e26:	b513      	push	{r0, r1, r4, lr}
    1e28:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e2a:	aa01      	add	r2, sp, #4
    1e2c:	3103      	adds	r1, #3
    1e2e:	f7ff ffdd 	bl	1dec <ah>
	if (err) {
    1e32:	b948      	cbnz	r0, 1e48 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e34:	2203      	movs	r2, #3
    1e36:	a901      	add	r1, sp, #4
    1e38:	4620      	mov	r0, r4
    1e3a:	f7ff feca 	bl	1bd2 <memcmp>
    1e3e:	fab0 f080 	clz	r0, r0
    1e42:	0940      	lsrs	r0, r0, #5
}
    1e44:	b002      	add	sp, #8
    1e46:	bd10      	pop	{r4, pc}
		return false;
    1e48:	2000      	movs	r0, #0
    1e4a:	e7fb      	b.n	1e44 <bt_rpa_irk_matches+0x1e>

00001e4c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e4e:	1ccd      	adds	r5, r1, #3
{
    1e50:	4606      	mov	r6, r0
    1e52:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e54:	4628      	mov	r0, r5
    1e56:	2103      	movs	r1, #3
    1e58:	f007 fb34 	bl	94c4 <bt_rand>
	if (err) {
    1e5c:	b960      	cbnz	r0, 1e78 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e5e:	7963      	ldrb	r3, [r4, #5]
    1e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e68:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e6a:	4622      	mov	r2, r4
    1e6c:	4629      	mov	r1, r5
    1e6e:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e74:	f7ff bfba 	b.w	1dec <ah>
}
    1e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e7c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e7c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e7e:	7802      	ldrb	r2, [r0, #0]
    1e80:	2a01      	cmp	r2, #1
{
    1e82:	4604      	mov	r4, r0
    1e84:	460b      	mov	r3, r1
	switch (src->type) {
    1e86:	d017      	beq.n	1eb8 <uuid_to_uuid128+0x3c>
    1e88:	d303      	bcc.n	1e92 <uuid_to_uuid128+0x16>
    1e8a:	2a02      	cmp	r2, #2
    1e8c:	d02c      	beq.n	1ee8 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1e8e:	bcf0      	pop	{r4, r5, r6, r7}
    1e90:	4770      	bx	lr
		*dst = uuid128_base;
    1e92:	4a18      	ldr	r2, [pc, #96]	; (1ef4 <uuid_to_uuid128+0x78>)
    1e94:	460d      	mov	r5, r1
    1e96:	f102 0710 	add.w	r7, r2, #16
    1e9a:	6810      	ldr	r0, [r2, #0]
    1e9c:	6851      	ldr	r1, [r2, #4]
    1e9e:	462e      	mov	r6, r5
    1ea0:	c603      	stmia	r6!, {r0, r1}
    1ea2:	3208      	adds	r2, #8
    1ea4:	42ba      	cmp	r2, r7
    1ea6:	4635      	mov	r5, r6
    1ea8:	d1f7      	bne.n	1e9a <uuid_to_uuid128+0x1e>
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1eae:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1eb0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1eb2:	0a12      	lsrs	r2, r2, #8
    1eb4:	739a      	strb	r2, [r3, #14]
    1eb6:	e7ea      	b.n	1e8e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1eb8:	4a0e      	ldr	r2, [pc, #56]	; (1ef4 <uuid_to_uuid128+0x78>)
    1eba:	460d      	mov	r5, r1
    1ebc:	f102 0710 	add.w	r7, r2, #16
    1ec0:	6810      	ldr	r0, [r2, #0]
    1ec2:	6851      	ldr	r1, [r2, #4]
    1ec4:	462e      	mov	r6, r5
    1ec6:	c603      	stmia	r6!, {r0, r1}
    1ec8:	3208      	adds	r2, #8
    1eca:	42ba      	cmp	r2, r7
    1ecc:	4635      	mov	r5, r6
    1ece:	d1f7      	bne.n	1ec0 <uuid_to_uuid128+0x44>
    1ed0:	7812      	ldrb	r2, [r2, #0]
    1ed2:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ed4:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1ed6:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1edc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1ede:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ee0:	0a12      	lsrs	r2, r2, #8
    1ee2:	7399      	strb	r1, [r3, #14]
    1ee4:	741a      	strb	r2, [r3, #16]
    1ee6:	e7d2      	b.n	1e8e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1ee8:	4601      	mov	r1, r0
    1eea:	2211      	movs	r2, #17
    1eec:	4618      	mov	r0, r3
}
    1eee:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1ef0:	f7ff be84 	b.w	1bfc <memcpy>
    1ef4:	0001637a 	.word	0x0001637a

00001ef8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1efc:	7801      	ldrb	r1, [r0, #0]
    1efe:	7822      	ldrb	r2, [r4, #0]
    1f00:	428a      	cmp	r2, r1
{
    1f02:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f04:	d00e      	beq.n	1f24 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f06:	4669      	mov	r1, sp
    1f08:	f7ff ffb8 	bl	1e7c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f0c:	a905      	add	r1, sp, #20
    1f0e:	4620      	mov	r0, r4
    1f10:	f7ff ffb4 	bl	1e7c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f14:	2210      	movs	r2, #16
    1f16:	f10d 0115 	add.w	r1, sp, #21
    1f1a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f1e:	f7ff fe58 	bl	1bd2 <memcmp>
    1f22:	e00a      	b.n	1f3a <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f24:	2a01      	cmp	r2, #1
    1f26:	d00a      	beq.n	1f3e <bt_uuid_cmp+0x46>
    1f28:	d304      	bcc.n	1f34 <bt_uuid_cmp+0x3c>
    1f2a:	2a02      	cmp	r2, #2
    1f2c:	d00a      	beq.n	1f44 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f2e:	f06f 0015 	mvn.w	r0, #21
    1f32:	e002      	b.n	1f3a <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f34:	8840      	ldrh	r0, [r0, #2]
    1f36:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f38:	1ac0      	subs	r0, r0, r3
}
    1f3a:	b00a      	add	sp, #40	; 0x28
    1f3c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f3e:	6840      	ldr	r0, [r0, #4]
    1f40:	6863      	ldr	r3, [r4, #4]
    1f42:	e7f9      	b.n	1f38 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f44:	2210      	movs	r2, #16
    1f46:	1c61      	adds	r1, r4, #1
    1f48:	3001      	adds	r0, #1
    1f4a:	e7e8      	b.n	1f1e <bt_uuid_cmp+0x26>

00001f4c <bt_uuid_to_str>:

#if defined(CONFIG_BT_DEBUG)
void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
    1f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t tmp1, tmp5;
	u16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
    1f4e:	7805      	ldrb	r5, [r0, #0]
    1f50:	2d01      	cmp	r5, #1
{
    1f52:	b08b      	sub	sp, #44	; 0x2c
    1f54:	4604      	mov	r4, r0
    1f56:	460e      	mov	r6, r1
    1f58:	4617      	mov	r7, r2
	switch (uuid->type) {
    1f5a:	d00f      	beq.n	1f7c <bt_uuid_to_str+0x30>
    1f5c:	d306      	bcc.n	1f6c <bt_uuid_to_str+0x20>
    1f5e:	2d02      	cmp	r5, #2
    1f60:	d00e      	beq.n	1f80 <bt_uuid_to_str+0x34>

		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
			 tmp5, tmp4, tmp3, tmp2, tmp1, tmp0);
		break;
	default:
		memset(str, 0, len);
    1f62:	2100      	movs	r1, #0
    1f64:	4630      	mov	r0, r6
    1f66:	f7ff fe75 	bl	1c54 <memset>
    1f6a:	e005      	b.n	1f78 <bt_uuid_to_str+0x2c>
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
    1f6c:	8843      	ldrh	r3, [r0, #2]
		snprintk(str, len, "%04x", BT_UUID_32(uuid)->val);
    1f6e:	4a20      	ldr	r2, [pc, #128]	; (1ff0 <bt_uuid_to_str+0xa4>)
    1f70:	4639      	mov	r1, r7
    1f72:	4630      	mov	r0, r6
    1f74:	f7ff f818 	bl	fa8 <snprintk>
		return;
	}
}
    1f78:	b00b      	add	sp, #44	; 0x2c
    1f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(str, len, "%04x", BT_UUID_32(uuid)->val);
    1f7c:	6843      	ldr	r3, [r0, #4]
    1f7e:	e7f6      	b.n	1f6e <bt_uuid_to_str+0x22>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
    1f80:	462a      	mov	r2, r5
    1f82:	1c41      	adds	r1, r0, #1
    1f84:	a806      	add	r0, sp, #24
    1f86:	f7ff fe39 	bl	1bfc <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
    1f8a:	1ce1      	adds	r1, r4, #3
    1f8c:	2204      	movs	r2, #4
    1f8e:	a808      	add	r0, sp, #32
    1f90:	f7ff fe34 	bl	1bfc <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
    1f94:	462a      	mov	r2, r5
    1f96:	1de1      	adds	r1, r4, #7
    1f98:	f10d 001a 	add.w	r0, sp, #26
    1f9c:	f7ff fe2e 	bl	1bfc <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
    1fa0:	462a      	mov	r2, r5
    1fa2:	f104 0109 	add.w	r1, r4, #9
    1fa6:	a807      	add	r0, sp, #28
    1fa8:	f7ff fe28 	bl	1bfc <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
    1fac:	462a      	mov	r2, r5
    1fae:	f104 010b 	add.w	r1, r4, #11
    1fb2:	f10d 001e 	add.w	r0, sp, #30
    1fb6:	f7ff fe21 	bl	1bfc <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
    1fba:	f104 010d 	add.w	r1, r4, #13
    1fbe:	2204      	movs	r2, #4
    1fc0:	a809      	add	r0, sp, #36	; 0x24
    1fc2:	f7ff fe1b 	bl	1bfc <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
    1fc6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1fca:	9304      	str	r3, [sp, #16]
    1fcc:	9b08      	ldr	r3, [sp, #32]
    1fce:	9303      	str	r3, [sp, #12]
    1fd0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    1fd4:	9302      	str	r3, [sp, #8]
    1fd6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    1fda:	9301      	str	r3, [sp, #4]
    1fdc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    1fe0:	9300      	str	r3, [sp, #0]
    1fe2:	4a04      	ldr	r2, [pc, #16]	; (1ff4 <bt_uuid_to_str+0xa8>)
    1fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fe6:	4639      	mov	r1, r7
    1fe8:	4630      	mov	r0, r6
    1fea:	f7fe ffdd 	bl	fa8 <snprintk>
		break;
    1fee:	e7c3      	b.n	1f78 <bt_uuid_to_str+0x2c>
    1ff0:	00016375 	.word	0x00016375
    1ff4:	0001635d 	.word	0x0001635d

00001ff8 <bt_uuid_str>:

const char *bt_uuid_str(const struct bt_uuid *uuid)
{
    1ff8:	b510      	push	{r4, lr}
	static char str[37];

	bt_uuid_to_str(uuid, str, sizeof(str));
    1ffa:	4c03      	ldr	r4, [pc, #12]	; (2008 <bt_uuid_str+0x10>)
    1ffc:	2225      	movs	r2, #37	; 0x25
    1ffe:	4621      	mov	r1, r4
    2000:	f7ff ffa4 	bl	1f4c <bt_uuid_to_str>

	return str;
}
    2004:	4620      	mov	r0, r4
    2006:	bd10      	pop	{r4, pc}
    2008:	20000279 	.word	0x20000279

0000200c <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    200c:	4770      	bx	lr
	...

00002010 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    2010:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    2012:	4d0b      	ldr	r5, [pc, #44]	; (2040 <ver_str+0x30>)
{
    2014:	4606      	mov	r6, r0
	const char * const str[] = {
    2016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2018:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    201a:	466c      	mov	r4, sp
    201c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    201e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2022:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    2026:	2e09      	cmp	r6, #9
	const char * const str[] = {
    2028:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    202c:	bf9b      	ittet	ls
    202e:	ab0a      	addls	r3, sp, #40	; 0x28
    2030:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    2034:	4803      	ldrhi	r0, [pc, #12]	; (2044 <ver_str+0x34>)
		return str[ver];
    2036:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    203a:	b00a      	add	sp, #40	; 0x28
    203c:	bd70      	pop	{r4, r5, r6, pc}
    203e:	bf00      	nop
    2040:	00015d3c 	.word	0x00015d3c
    2044:	00017678 	.word	0x00017678

00002048 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2048:	2207      	movs	r2, #7
    204a:	f7ff bdd7 	b.w	1bfc <memcpy>

0000204e <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    204e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    2050:	f3bf 8f5b 	dmb	ish
    2054:	e850 3f00 	ldrex	r3, [r0]
    2058:	ea43 0201 	orr.w	r2, r3, r1
    205c:	e840 2e00 	strex	lr, r2, [r0]
    2060:	f1be 0f00 	cmp.w	lr, #0
    2064:	d1f6      	bne.n	2054 <atomic_or+0x6>
    2066:	f3bf 8f5b 	dmb	ish
    206a:	4618      	mov	r0, r3
    206c:	f85d fb04 	ldr.w	pc, [sp], #4

00002070 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    2070:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    2072:	f3bf 8f5b 	dmb	ish
    2076:	e850 3f00 	ldrex	r3, [r0]
    207a:	ea03 0201 	and.w	r2, r3, r1
    207e:	e840 2e00 	strex	lr, r2, [r0]
    2082:	f1be 0f00 	cmp.w	lr, #0
    2086:	d1f6      	bne.n	2076 <atomic_and+0x6>
    2088:	f3bf 8f5b 	dmb	ish
    208c:	4618      	mov	r0, r3
    208e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00002094 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    2094:	78c3      	ldrb	r3, [r0, #3]
    2096:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    2098:	f241 3288 	movw	r2, #5000	; 0x1388
    209c:	f100 0170 	add.w	r1, r0, #112	; 0x70
    20a0:	bf08      	it	eq
    20a2:	2200      	moveq	r2, #0
    20a4:	4801      	ldr	r0, [pc, #4]	; (20ac <update_conn_param+0x18>)
    20a6:	f013 bc5b 	b.w	15960 <k_delayed_work_submit_to_queue>
    20aa:	bf00      	nop
    20ac:	200019b0 	.word	0x200019b0

000020b0 <hci_cmd_done>:
{
    20b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20b4:	b087      	sub	sp, #28
    20b6:	4615      	mov	r5, r2
    20b8:	4688      	mov	r8, r1
    20ba:	4607      	mov	r7, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    20bc:	f013 f8e6 	bl	1528c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    20c0:	4e2c      	ldr	r6, [pc, #176]	; (2174 <hci_cmd_done+0xc4>)
    20c2:	9001      	str	r0, [sp, #4]
    20c4:	4b2c      	ldr	r3, [pc, #176]	; (2178 <hci_cmd_done+0xc8>)
    20c6:	4a2d      	ldr	r2, [pc, #180]	; (217c <hci_cmd_done+0xcc>)
    20c8:	492d      	ldr	r1, [pc, #180]	; (2180 <hci_cmd_done+0xd0>)
    20ca:	9605      	str	r6, [sp, #20]
    20cc:	9504      	str	r5, [sp, #16]
    20ce:	f8cd 800c 	str.w	r8, [sp, #12]
    20d2:	9702      	str	r7, [sp, #8]
    20d4:	9600      	str	r6, [sp, #0]
    20d6:	482b      	ldr	r0, [pc, #172]	; (2184 <hci_cmd_done+0xd4>)
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20d8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2198 <hci_cmd_done+0xe8>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    20dc:	f7fe ff56 	bl	f8c <printk>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20e0:	79a8      	ldrb	r0, [r5, #6]
    20e2:	f011 ff95 	bl	14010 <net_buf_pool_get>
    20e6:	4581      	cmp	r9, r0
    20e8:	d013      	beq.n	2112 <hci_cmd_done+0x62>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    20ea:	79ac      	ldrb	r4, [r5, #6]
    20ec:	4620      	mov	r0, r4
    20ee:	f011 ff8f 	bl	14010 <net_buf_pool_get>
    20f2:	9605      	str	r6, [sp, #20]
    20f4:	9003      	str	r0, [sp, #12]
    20f6:	f8cd 9010 	str.w	r9, [sp, #16]
    20fa:	9402      	str	r4, [sp, #8]
    20fc:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2100:	4b1d      	ldr	r3, [pc, #116]	; (2178 <hci_cmd_done+0xc8>)
    2102:	4a21      	ldr	r2, [pc, #132]	; (2188 <hci_cmd_done+0xd8>)
    2104:	491e      	ldr	r1, [pc, #120]	; (2180 <hci_cmd_done+0xd0>)
    2106:	4821      	ldr	r0, [pc, #132]	; (218c <hci_cmd_done+0xdc>)
    2108:	f7fe ff40 	bl	f8c <printk>
}
    210c:	b007      	add	sp, #28
    210e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    2112:	4628      	mov	r0, r5
    2114:	f011 ff82 	bl	1401c <net_buf_id>
    2118:	4c1d      	ldr	r4, [pc, #116]	; (2190 <hci_cmd_done+0xe0>)
    211a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    211e:	8843      	ldrh	r3, [r0, #2]
    2120:	42bb      	cmp	r3, r7
    2122:	d00f      	beq.n	2144 <hci_cmd_done+0x94>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2124:	4628      	mov	r0, r5
    2126:	f011 ff79 	bl	1401c <net_buf_id>
    212a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    212e:	9603      	str	r6, [sp, #12]
    2130:	8843      	ldrh	r3, [r0, #2]
    2132:	9302      	str	r3, [sp, #8]
    2134:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2138:	4b0f      	ldr	r3, [pc, #60]	; (2178 <hci_cmd_done+0xc8>)
    213a:	4a13      	ldr	r2, [pc, #76]	; (2188 <hci_cmd_done+0xd8>)
    213c:	4910      	ldr	r1, [pc, #64]	; (2180 <hci_cmd_done+0xd0>)
    213e:	4815      	ldr	r0, [pc, #84]	; (2194 <hci_cmd_done+0xe4>)
    2140:	f7fe ff24 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    2144:	4628      	mov	r0, r5
    2146:	f011 ff69 	bl	1401c <net_buf_id>
    214a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    214e:	6843      	ldr	r3, [r0, #4]
    2150:	2b00      	cmp	r3, #0
    2152:	d0db      	beq.n	210c <hci_cmd_done+0x5c>
		cmd(buf)->status = status;
    2154:	4628      	mov	r0, r5
    2156:	f011 ff61 	bl	1401c <net_buf_id>
    215a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    215e:	4628      	mov	r0, r5
    2160:	f011 ff5c 	bl	1401c <net_buf_id>
    2164:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2168:	6840      	ldr	r0, [r0, #4]
}
    216a:	b007      	add	sp, #28
    216c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2170:	f013 b89b 	b.w	152aa <_impl_k_sem_give>
    2174:	00015e19 	.word	0x00015e19
    2178:	000164db 	.word	0x000164db
    217c:	0001723a 	.word	0x0001723a
    2180:	00017241 	.word	0x00017241
    2184:	00017244 	.word	0x00017244
    2188:	0001727c 	.word	0x0001727c
    218c:	00017283 	.word	0x00017283
    2190:	200002a0 	.word	0x200002a0
    2194:	000172c8 	.word	0x000172c8
    2198:	20003f94 	.word	0x20003f94

0000219c <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    219c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    219e:	f3bf 8f5b 	dmb	ish
    21a2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    21a6:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    21aa:	f001 011f 	and.w	r1, r1, #31
    21ae:	4108      	asrs	r0, r1
}
    21b0:	f000 0001 	and.w	r0, r0, #1
    21b4:	4770      	bx	lr
	...

000021b8 <bt_hci_cmd_create>:
{
    21b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    21bc:	b086      	sub	sp, #24
    21be:	4606      	mov	r6, r0
    21c0:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    21c2:	f013 f863 	bl	1528c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    21c6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2268 <bt_hci_cmd_create+0xb0>
    21ca:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 226c <bt_hci_cmd_create+0xb4>
    21ce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2270 <bt_hci_cmd_create+0xb8>
    21d2:	4d20      	ldr	r5, [pc, #128]	; (2254 <bt_hci_cmd_create+0x9c>)
    21d4:	9504      	str	r5, [sp, #16]
    21d6:	4653      	mov	r3, sl
    21d8:	464a      	mov	r2, r9
    21da:	9001      	str	r0, [sp, #4]
    21dc:	9500      	str	r5, [sp, #0]
    21de:	4641      	mov	r1, r8
    21e0:	9703      	str	r7, [sp, #12]
    21e2:	9602      	str	r6, [sp, #8]
    21e4:	481c      	ldr	r0, [pc, #112]	; (2258 <bt_hci_cmd_create+0xa0>)
    21e6:	f7fe fed1 	bl	f8c <printk>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    21ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    21ee:	481b      	ldr	r0, [pc, #108]	; (225c <bt_hci_cmd_create+0xa4>)
    21f0:	f011 ffa2 	bl	14138 <net_buf_alloc_fixed>
    21f4:	4604      	mov	r4, r0
    21f6:	f013 f849 	bl	1528c <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    21fa:	464a      	mov	r2, r9
    21fc:	4653      	mov	r3, sl
    21fe:	9503      	str	r5, [sp, #12]
    2200:	9001      	str	r0, [sp, #4]
    2202:	9500      	str	r5, [sp, #0]
    2204:	4641      	mov	r1, r8
    2206:	9402      	str	r4, [sp, #8]
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2208:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    220c:	4814      	ldr	r0, [pc, #80]	; (2260 <bt_hci_cmd_create+0xa8>)
	cmd(buf)->opcode = opcode;
    220e:	4d15      	ldr	r5, [pc, #84]	; (2264 <bt_hci_cmd_create+0xac>)
	BT_DBG("buf %p", buf);
    2210:	f7fe febc 	bl	f8c <printk>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2214:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2218:	2100      	movs	r1, #0
    221a:	4640      	mov	r0, r8
    221c:	f011 ffab 	bl	14176 <net_buf_simple_reserve>
    2220:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    2224:	4620      	mov	r0, r4
    2226:	f011 fef9 	bl	1401c <net_buf_id>
    222a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    222e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    2230:	4620      	mov	r0, r4
    2232:	f011 fef3 	bl	1401c <net_buf_id>
    2236:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    223a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    223c:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2240:	4640      	mov	r0, r8
    2242:	f011 ffdb 	bl	141fc <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    2246:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    2248:	7087      	strb	r7, [r0, #2]
}
    224a:	4620      	mov	r0, r4
    224c:	b006      	add	sp, #24
    224e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2252:	bf00      	nop
    2254:	00015e19 	.word	0x00015e19
    2258:	000167f5 	.word	0x000167f5
    225c:	20003f94 	.word	0x20003f94
    2260:	00016825 	.word	0x00016825
    2264:	200002a0 	.word	0x200002a0
    2268:	0001638b 	.word	0x0001638b
    226c:	0001723a 	.word	0x0001723a
    2270:	00017241 	.word	0x00017241

00002274 <bt_hci_cmd_send_sync>:
{
    2274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2278:	4681      	mov	r9, r0
    227a:	b08d      	sub	sp, #52	; 0x34
    227c:	4615      	mov	r5, r2
	if (!buf) {
    227e:	460c      	mov	r4, r1
    2280:	b921      	cbnz	r1, 228c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    2282:	f7ff ff99 	bl	21b8 <bt_hci_cmd_create>
		if (!buf) {
    2286:	4604      	mov	r4, r0
    2288:	2800      	cmp	r0, #0
    228a:	d053      	beq.n	2334 <bt_hci_cmd_send_sync+0xc0>
    228c:	f012 fffe 	bl	1528c <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2290:	4e2a      	ldr	r6, [pc, #168]	; (233c <bt_hci_cmd_send_sync+0xc8>)
    2292:	9605      	str	r6, [sp, #20]
    2294:	89a3      	ldrh	r3, [r4, #12]
    2296:	9304      	str	r3, [sp, #16]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2298:	f10d 0818 	add.w	r8, sp, #24
    229c:	4b28      	ldr	r3, [pc, #160]	; (2340 <bt_hci_cmd_send_sync+0xcc>)
    229e:	9001      	str	r0, [sp, #4]
    22a0:	4a28      	ldr	r2, [pc, #160]	; (2344 <bt_hci_cmd_send_sync+0xd0>)
    22a2:	4929      	ldr	r1, [pc, #164]	; (2348 <bt_hci_cmd_send_sync+0xd4>)
    22a4:	f8cd 900c 	str.w	r9, [sp, #12]
    22a8:	9402      	str	r4, [sp, #8]
    22aa:	9600      	str	r6, [sp, #0]
    22ac:	4827      	ldr	r0, [pc, #156]	; (234c <bt_hci_cmd_send_sync+0xd8>)
	cmd(buf)->sync = &sync_sem;
    22ae:	4f28      	ldr	r7, [pc, #160]	; (2350 <bt_hci_cmd_send_sync+0xdc>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    22b0:	f7fe fe6c 	bl	f8c <printk>
    22b4:	2201      	movs	r2, #1
    22b6:	2100      	movs	r1, #0
    22b8:	4640      	mov	r0, r8
    22ba:	f012 ffed 	bl	15298 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    22be:	4620      	mov	r0, r4
    22c0:	f011 feac 	bl	1401c <net_buf_id>
    22c4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    22c8:	f8c0 8004 	str.w	r8, [r0, #4]
	net_buf_ref(buf);
    22cc:	4620      	mov	r0, r4
    22ce:	f011 ff91 	bl	141f4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    22d2:	4621      	mov	r1, r4
    22d4:	481f      	ldr	r0, [pc, #124]	; (2354 <bt_hci_cmd_send_sync+0xe0>)
    22d6:	f011 ff52 	bl	1417e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    22da:	f242 7110 	movw	r1, #10000	; 0x2710
    22de:	4640      	mov	r0, r8
    22e0:	f013 f80b 	bl	152fa <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    22e4:	f012 ffd2 	bl	1528c <_impl_k_current_get>
    22e8:	4680      	mov	r8, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    22ea:	4620      	mov	r0, r4
    22ec:	f011 fe96 	bl	1401c <net_buf_id>
    22f0:	9604      	str	r6, [sp, #16]
    22f2:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    22f6:	9303      	str	r3, [sp, #12]
    22f8:	4a12      	ldr	r2, [pc, #72]	; (2344 <bt_hci_cmd_send_sync+0xd0>)
    22fa:	4b11      	ldr	r3, [pc, #68]	; (2340 <bt_hci_cmd_send_sync+0xcc>)
    22fc:	4912      	ldr	r1, [pc, #72]	; (2348 <bt_hci_cmd_send_sync+0xd4>)
    22fe:	4816      	ldr	r0, [pc, #88]	; (2358 <bt_hci_cmd_send_sync+0xe4>)
    2300:	e88d 0340 	stmia.w	sp, {r6, r8, r9}
    2304:	f7fe fe42 	bl	f8c <printk>
	if (cmd(buf)->status) {
    2308:	4620      	mov	r0, r4
    230a:	f011 fe87 	bl	1401c <net_buf_id>
    230e:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    2312:	b138      	cbz	r0, 2324 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    2314:	4620      	mov	r0, r4
    2316:	f011 ff3f 	bl	14198 <net_buf_unref>
		err = -EIO;
    231a:	f06f 0004 	mvn.w	r0, #4
}
    231e:	b00d      	add	sp, #52	; 0x34
    2320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (rsp) {
    2324:	b10d      	cbz	r5, 232a <bt_hci_cmd_send_sync+0xb6>
			*rsp = buf;
    2326:	602c      	str	r4, [r5, #0]
    2328:	e7f9      	b.n	231e <bt_hci_cmd_send_sync+0xaa>
			net_buf_unref(buf);
    232a:	4620      	mov	r0, r4
    232c:	f011 ff34 	bl	14198 <net_buf_unref>
		err = 0;
    2330:	4628      	mov	r0, r5
    2332:	e7f4      	b.n	231e <bt_hci_cmd_send_sync+0xaa>
			return -ENOBUFS;
    2334:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2338:	e7f1      	b.n	231e <bt_hci_cmd_send_sync+0xaa>
    233a:	bf00      	nop
    233c:	00015e19 	.word	0x00015e19
    2340:	000163ad 	.word	0x000163ad
    2344:	0001723a 	.word	0x0001723a
    2348:	00017241 	.word	0x00017241
    234c:	0001689d 	.word	0x0001689d
    2350:	200002a0 	.word	0x200002a0
    2354:	20003b4c 	.word	0x20003b4c
    2358:	000168ce 	.word	0x000168ce

0000235c <set_le_scan_enable>:
{
    235c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    235e:	2102      	movs	r1, #2
{
    2360:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2362:	f242 000c 	movw	r0, #8204	; 0x200c
    2366:	f7ff ff27 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    236a:	4604      	mov	r4, r0
    236c:	b330      	cbz	r0, 23bc <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    236e:	2102      	movs	r1, #2
    2370:	3008      	adds	r0, #8
    2372:	f011 ff43 	bl	141fc <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2376:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2378:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    237a:	d116      	bne.n	23aa <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    237c:	210b      	movs	r1, #11
    237e:	4811      	ldr	r0, [pc, #68]	; (23c4 <set_le_scan_enable+0x68>)
    2380:	f7ff ff0c 	bl	219c <atomic_test_bit>
    2384:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    2386:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2388:	4621      	mov	r1, r4
    238a:	2200      	movs	r2, #0
    238c:	f242 000c 	movw	r0, #8204	; 0x200c
    2390:	f7ff ff70 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2394:	4604      	mov	r4, r0
    2396:	b930      	cbnz	r0, 23a6 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2398:	2d01      	cmp	r5, #1
    239a:	d109      	bne.n	23b0 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    239c:	f44f 7180 	mov.w	r1, #256	; 0x100
    23a0:	4808      	ldr	r0, [pc, #32]	; (23c4 <set_le_scan_enable+0x68>)
    23a2:	f7ff fe54 	bl	204e <atomic_or>
}
    23a6:	4620      	mov	r0, r4
    23a8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    23aa:	2300      	movs	r3, #0
    23ac:	7043      	strb	r3, [r0, #1]
    23ae:	e7ea      	b.n	2386 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    23b0:	f46f 7180 	mvn.w	r1, #256	; 0x100
    23b4:	4803      	ldr	r0, [pc, #12]	; (23c4 <set_le_scan_enable+0x68>)
    23b6:	f7ff fe5b 	bl	2070 <atomic_and>
    23ba:	e7f4      	b.n	23a6 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    23bc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    23c0:	e7f1      	b.n	23a6 <set_le_scan_enable+0x4a>
    23c2:	bf00      	nop
    23c4:	20003af8 	.word	0x20003af8

000023c8 <set_random_address>:
{
    23c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    23ca:	4605      	mov	r5, r0
    23cc:	f012 ff5e 	bl	1528c <_impl_k_current_get>
    23d0:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    23d2:	4628      	mov	r0, r5
    23d4:	f7ff fc98 	bl	1d08 <bt_addr_str>
    23d8:	4b1a      	ldr	r3, [pc, #104]	; (2444 <set_random_address+0x7c>)
	return memcmp(a, b, sizeof(*a));
    23da:	4e1b      	ldr	r6, [pc, #108]	; (2448 <set_random_address+0x80>)
    23dc:	9303      	str	r3, [sp, #12]
    23de:	e88d 0018 	stmia.w	sp, {r3, r4}
    23e2:	9002      	str	r0, [sp, #8]
    23e4:	4b19      	ldr	r3, [pc, #100]	; (244c <set_random_address+0x84>)
    23e6:	4a1a      	ldr	r2, [pc, #104]	; (2450 <set_random_address+0x88>)
    23e8:	491a      	ldr	r1, [pc, #104]	; (2454 <set_random_address+0x8c>)
    23ea:	481b      	ldr	r0, [pc, #108]	; (2458 <set_random_address+0x90>)
    23ec:	f7fe fdce 	bl	f8c <printk>
    23f0:	2206      	movs	r2, #6
    23f2:	f106 0108 	add.w	r1, r6, #8
    23f6:	4628      	mov	r0, r5
    23f8:	f7ff fbeb 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    23fc:	4604      	mov	r4, r0
    23fe:	b1d8      	cbz	r0, 2438 <set_random_address+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2400:	2106      	movs	r1, #6
    2402:	f242 0005 	movw	r0, #8197	; 0x2005
    2406:	f7ff fed7 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    240a:	4604      	mov	r4, r0
    240c:	b1b8      	cbz	r0, 243e <set_random_address+0x76>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    240e:	2206      	movs	r2, #6
    2410:	4629      	mov	r1, r5
    2412:	3008      	adds	r0, #8
    2414:	f011 fef8 	bl	14208 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2418:	4621      	mov	r1, r4
    241a:	2200      	movs	r2, #0
    241c:	f242 0005 	movw	r0, #8197	; 0x2005
    2420:	f7ff ff28 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2424:	4604      	mov	r4, r0
    2426:	b938      	cbnz	r0, 2438 <set_random_address+0x70>
	memcpy(dst, src, sizeof(*dst));
    2428:	2206      	movs	r2, #6
    242a:	4629      	mov	r1, r5
    242c:	f106 0008 	add.w	r0, r6, #8
    2430:	f7ff fbe4 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2434:	2301      	movs	r3, #1
    2436:	71f3      	strb	r3, [r6, #7]
}
    2438:	4620      	mov	r0, r4
    243a:	b004      	add	sp, #16
    243c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    243e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2442:	e7f9      	b.n	2438 <set_random_address+0x70>
    2444:	00015e19 	.word	0x00015e19
    2448:	20003a88 	.word	0x20003a88
    244c:	000163c2 	.word	0x000163c2
    2450:	0001723a 	.word	0x0001723a
    2454:	00017241 	.word	0x00017241
    2458:	00017580 	.word	0x00017580

0000245c <le_set_private_addr>:
{
    245c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    245e:	2106      	movs	r1, #6
    2460:	4668      	mov	r0, sp
    2462:	f007 f82f 	bl	94c4 <bt_rand>
	if (err) {
    2466:	b940      	cbnz	r0, 247a <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2468:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    246c:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    246e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2472:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2476:	f7ff ffa7 	bl	23c8 <set_random_address>
}
    247a:	b003      	add	sp, #12
    247c:	f85d fb04 	ldr.w	pc, [sp], #4

00002480 <set_advertise_enable>:
{
    2480:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2482:	2101      	movs	r1, #1
{
    2484:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2486:	f242 000a 	movw	r0, #8202	; 0x200a
    248a:	f7ff fe95 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    248e:	4604      	mov	r4, r0
    2490:	b1d8      	cbz	r0, 24ca <set_advertise_enable+0x4a>
    2492:	3008      	adds	r0, #8
	if (enable) {
    2494:	b18d      	cbz	r5, 24ba <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2496:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2498:	f011 febf 	bl	1421a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    249c:	4621      	mov	r1, r4
    249e:	2200      	movs	r2, #0
    24a0:	f242 000a 	movw	r0, #8202	; 0x200a
    24a4:	f7ff fee6 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    24a8:	4604      	mov	r4, r0
    24aa:	b920      	cbnz	r0, 24b6 <set_advertise_enable+0x36>
	if (enable) {
    24ac:	b13d      	cbz	r5, 24be <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    24ae:	2140      	movs	r1, #64	; 0x40
    24b0:	4807      	ldr	r0, [pc, #28]	; (24d0 <set_advertise_enable+0x50>)
    24b2:	f7ff fdcc 	bl	204e <atomic_or>
}
    24b6:	4620      	mov	r0, r4
    24b8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    24ba:	4629      	mov	r1, r5
    24bc:	e7ec      	b.n	2498 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    24be:	f06f 0140 	mvn.w	r1, #64	; 0x40
    24c2:	4803      	ldr	r0, [pc, #12]	; (24d0 <set_advertise_enable+0x50>)
    24c4:	f7ff fdd4 	bl	2070 <atomic_and>
    24c8:	e7f5      	b.n	24b6 <set_advertise_enable+0x36>
		return -ENOBUFS;
    24ca:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24ce:	e7f2      	b.n	24b6 <set_advertise_enable+0x36>
    24d0:	20003af8 	.word	0x20003af8

000024d4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    24d4:	8802      	ldrh	r2, [r0, #0]
    24d6:	8843      	ldrh	r3, [r0, #2]
    24d8:	429a      	cmp	r2, r3
{
    24da:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    24dc:	d818      	bhi.n	2510 <bt_le_conn_params_valid+0x3c>
    24de:	2a05      	cmp	r2, #5
    24e0:	d916      	bls.n	2510 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    24e2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    24e6:	d813      	bhi.n	2510 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    24e8:	8884      	ldrh	r4, [r0, #4]
    24ea:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    24ee:	d20f      	bcs.n	2510 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    24f0:	88c1      	ldrh	r1, [r0, #6]
    24f2:	f1a1 020a 	sub.w	r2, r1, #10
    24f6:	b292      	uxth	r2, r2
    24f8:	f640 4076 	movw	r0, #3190	; 0xc76
    24fc:	4282      	cmp	r2, r0
    24fe:	d807      	bhi.n	2510 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2500:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    2504:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2508:	bfb4      	ite	lt
    250a:	2001      	movlt	r0, #1
    250c:	2000      	movge	r0, #0
    250e:	bd10      	pop	{r4, pc}
		return false;
    2510:	2000      	movs	r0, #0
}
    2512:	bd10      	pop	{r4, pc}

00002514 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2514:	2301      	movs	r3, #1
{
    2516:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2518:	2106      	movs	r1, #6
{
    251a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    251c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2520:	f006 ffd0 	bl	94c4 <bt_rand>
	if (err) {
    2524:	b918      	cbnz	r0, 252e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    2526:	79a3      	ldrb	r3, [r4, #6]
    2528:	f063 033f 	orn	r3, r3, #63	; 0x3f
    252c:	71a3      	strb	r3, [r4, #6]
}
    252e:	bd10      	pop	{r4, pc}

00002530 <bt_set_static_addr>:
{
    2530:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2532:	4c11      	ldr	r4, [pc, #68]	; (2578 <bt_set_static_addr+0x48>)
    2534:	7823      	ldrb	r3, [r4, #0]
    2536:	2b01      	cmp	r3, #1
    2538:	d104      	bne.n	2544 <bt_set_static_addr+0x14>
    253a:	79a3      	ldrb	r3, [r4, #6]
    253c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2540:	2bc0      	cmp	r3, #192	; 0xc0
    2542:	d00d      	beq.n	2560 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    2544:	4b0d      	ldr	r3, [pc, #52]	; (257c <bt_set_static_addr+0x4c>)
    2546:	9301      	str	r3, [sp, #4]
    2548:	9300      	str	r3, [sp, #0]
    254a:	4a0d      	ldr	r2, [pc, #52]	; (2580 <bt_set_static_addr+0x50>)
    254c:	4b0d      	ldr	r3, [pc, #52]	; (2584 <bt_set_static_addr+0x54>)
    254e:	490e      	ldr	r1, [pc, #56]	; (2588 <bt_set_static_addr+0x58>)
    2550:	480e      	ldr	r0, [pc, #56]	; (258c <bt_set_static_addr+0x5c>)
    2552:	f7fe fd1b 	bl	f8c <printk>
    2556:	f06f 0515 	mvn.w	r5, #21
}
    255a:	4628      	mov	r0, r5
    255c:	b003      	add	sp, #12
    255e:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    2560:	1c60      	adds	r0, r4, #1
    2562:	f7ff ff31 	bl	23c8 <set_random_address>
	if (err) {
    2566:	4605      	mov	r5, r0
    2568:	2800      	cmp	r0, #0
    256a:	d1f6      	bne.n	255a <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    256c:	2104      	movs	r1, #4
    256e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    2572:	f7ff fd6c 	bl	204e <atomic_or>
	return 0;
    2576:	e7f0      	b.n	255a <bt_set_static_addr+0x2a>
    2578:	20003a88 	.word	0x20003a88
    257c:	00015e19 	.word	0x00015e19
    2580:	000171f2 	.word	0x000171f2
    2584:	00016639 	.word	0x00016639
    2588:	00017241 	.word	0x00017241
    258c:	000171f9 	.word	0x000171f9

00002590 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    2590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2594:	4d1d      	ldr	r5, [pc, #116]	; (260c <bt_dev_show_info+0x7c>)
    2596:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2628 <bt_dev_show_info+0x98>
    259a:	4f1d      	ldr	r7, [pc, #116]	; (2610 <bt_dev_show_info+0x80>)
    259c:	4e1d      	ldr	r6, [pc, #116]	; (2614 <bt_dev_show_info+0x84>)
    259e:	4c1e      	ldr	r4, [pc, #120]	; (2618 <bt_dev_show_info+0x88>)
{
    25a0:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    25a2:	4628      	mov	r0, r5
    25a4:	f7ff fbd6 	bl	1d54 <bt_addr_le_str>
    25a8:	4643      	mov	r3, r8
    25aa:	463a      	mov	r2, r7
    25ac:	4631      	mov	r1, r6
    25ae:	9001      	str	r0, [sp, #4]
    25b0:	9402      	str	r4, [sp, #8]
    25b2:	9400      	str	r4, [sp, #0]
    25b4:	4819      	ldr	r0, [pc, #100]	; (261c <bt_dev_show_info+0x8c>)
    25b6:	f7fe fce9 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    25ba:	f895 900e 	ldrb.w	r9, [r5, #14]
    25be:	4648      	mov	r0, r9
    25c0:	f7ff fd26 	bl	2010 <ver_str>
    25c4:	8aab      	ldrh	r3, [r5, #20]
    25c6:	9304      	str	r3, [sp, #16]
    25c8:	8a2b      	ldrh	r3, [r5, #16]
    25ca:	9303      	str	r3, [sp, #12]
    25cc:	463a      	mov	r2, r7
    25ce:	4643      	mov	r3, r8
    25d0:	4631      	mov	r1, r6
    25d2:	f8cd 9008 	str.w	r9, [sp, #8]
    25d6:	9001      	str	r0, [sp, #4]
    25d8:	9405      	str	r4, [sp, #20]
    25da:	9400      	str	r4, [sp, #0]
    25dc:	4810      	ldr	r0, [pc, #64]	; (2620 <bt_dev_show_info+0x90>)
    25de:	f7fe fcd5 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    25e2:	f895 900f 	ldrb.w	r9, [r5, #15]
    25e6:	4648      	mov	r0, r9
    25e8:	f7ff fd12 	bl	2010 <ver_str>
    25ec:	8a6b      	ldrh	r3, [r5, #18]
    25ee:	9303      	str	r3, [sp, #12]
    25f0:	9001      	str	r0, [sp, #4]
    25f2:	9404      	str	r4, [sp, #16]
    25f4:	f8cd 9008 	str.w	r9, [sp, #8]
    25f8:	9400      	str	r4, [sp, #0]
    25fa:	4643      	mov	r3, r8
    25fc:	463a      	mov	r2, r7
    25fe:	4631      	mov	r1, r6
    2600:	4808      	ldr	r0, [pc, #32]	; (2624 <bt_dev_show_info+0x94>)
    2602:	f7fe fcc3 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    2606:	b007      	add	sp, #28
    2608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    260c:	20003a88 	.word	0x20003a88
    2610:	000166f7 	.word	0x000166f7
    2614:	00017241 	.word	0x00017241
    2618:	00015e19 	.word	0x00015e19
    261c:	000166fe 	.word	0x000166fe
    2620:	0001671b 	.word	0x0001671b
    2624:	00016769 	.word	0x00016769
    2628:	0001665a 	.word	0x0001665a

0000262c <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    262c:	b510      	push	{r4, lr}
    262e:	4604      	mov	r4, r0
    2630:	b086      	sub	sp, #24
    2632:	f012 fe2b 	bl	1528c <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2636:	7d22      	ldrb	r2, [r4, #20]
    2638:	4b0b      	ldr	r3, [pc, #44]	; (2668 <bt_send+0x3c>)
    263a:	9204      	str	r2, [sp, #16]
    263c:	89a2      	ldrh	r2, [r4, #12]
    263e:	9305      	str	r3, [sp, #20]
    2640:	9203      	str	r2, [sp, #12]
    2642:	9001      	str	r0, [sp, #4]
    2644:	9300      	str	r3, [sp, #0]
    2646:	9402      	str	r4, [sp, #8]
    2648:	4b08      	ldr	r3, [pc, #32]	; (266c <bt_send+0x40>)
    264a:	4a09      	ldr	r2, [pc, #36]	; (2670 <bt_send+0x44>)
    264c:	4909      	ldr	r1, [pc, #36]	; (2674 <bt_send+0x48>)
    264e:	480a      	ldr	r0, [pc, #40]	; (2678 <bt_send+0x4c>)
    2650:	f7fe fc9c 	bl	f8c <printk>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2654:	4b09      	ldr	r3, [pc, #36]	; (267c <bt_send+0x50>)
    2656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    265a:	691b      	ldr	r3, [r3, #16]
    265c:	4620      	mov	r0, r4
}
    265e:	b006      	add	sp, #24
    2660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    2664:	4718      	bx	r3
    2666:	bf00      	nop
    2668:	00015e19 	.word	0x00015e19
    266c:	00016680 	.word	0x00016680
    2670:	0001723a 	.word	0x0001723a
    2674:	00017241 	.word	0x00017241
    2678:	000171c7 	.word	0x000171c7
    267c:	20003a88 	.word	0x20003a88

00002680 <bt_hci_cmd_send>:
{
    2680:	b570      	push	{r4, r5, r6, lr}
    2682:	4605      	mov	r5, r0
    2684:	b086      	sub	sp, #24
	if (!buf) {
    2686:	460c      	mov	r4, r1
    2688:	b921      	cbnz	r1, 2694 <bt_hci_cmd_send+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    268a:	f7ff fd95 	bl	21b8 <bt_hci_cmd_create>
		if (!buf) {
    268e:	4604      	mov	r4, r0
    2690:	2800      	cmp	r0, #0
    2692:	d02c      	beq.n	26ee <bt_hci_cmd_send+0x6e>
    2694:	f012 fdfa 	bl	1528c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);
    2698:	4e16      	ldr	r6, [pc, #88]	; (26f4 <bt_hci_cmd_send+0x74>)
    269a:	9604      	str	r6, [sp, #16]
    269c:	89a3      	ldrh	r3, [r4, #12]
    269e:	9303      	str	r3, [sp, #12]
    26a0:	9001      	str	r0, [sp, #4]
    26a2:	4b15      	ldr	r3, [pc, #84]	; (26f8 <bt_hci_cmd_send+0x78>)
    26a4:	9502      	str	r5, [sp, #8]
    26a6:	9600      	str	r6, [sp, #0]
    26a8:	4a14      	ldr	r2, [pc, #80]	; (26fc <bt_hci_cmd_send+0x7c>)
    26aa:	4915      	ldr	r1, [pc, #84]	; (2700 <bt_hci_cmd_send+0x80>)
    26ac:	4815      	ldr	r0, [pc, #84]	; (2704 <bt_hci_cmd_send+0x84>)
    26ae:	f7fe fc6d 	bl	f8c <printk>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    26b2:	f640 4335 	movw	r3, #3125	; 0xc35
    26b6:	429d      	cmp	r5, r3
    26b8:	d113      	bne.n	26e2 <bt_hci_cmd_send+0x62>
		err = bt_send(buf);
    26ba:	4620      	mov	r0, r4
    26bc:	f7ff ffb6 	bl	262c <bt_send>
		if (err) {
    26c0:	4605      	mov	r5, r0
    26c2:	b158      	cbz	r0, 26dc <bt_hci_cmd_send+0x5c>
			BT_ERR("Unable to send to driver (err %d)", err);
    26c4:	9001      	str	r0, [sp, #4]
    26c6:	9602      	str	r6, [sp, #8]
    26c8:	9600      	str	r6, [sp, #0]
    26ca:	4b0b      	ldr	r3, [pc, #44]	; (26f8 <bt_hci_cmd_send+0x78>)
    26cc:	4a0e      	ldr	r2, [pc, #56]	; (2708 <bt_hci_cmd_send+0x88>)
    26ce:	490c      	ldr	r1, [pc, #48]	; (2700 <bt_hci_cmd_send+0x80>)
    26d0:	480e      	ldr	r0, [pc, #56]	; (270c <bt_hci_cmd_send+0x8c>)
    26d2:	f7fe fc5b 	bl	f8c <printk>
			net_buf_unref(buf);
    26d6:	4620      	mov	r0, r4
    26d8:	f011 fd5e 	bl	14198 <net_buf_unref>
}
    26dc:	4628      	mov	r0, r5
    26de:	b006      	add	sp, #24
    26e0:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    26e2:	4621      	mov	r1, r4
    26e4:	480a      	ldr	r0, [pc, #40]	; (2710 <bt_hci_cmd_send+0x90>)
    26e6:	f011 fd4a 	bl	1417e <net_buf_put>
	return 0;
    26ea:	2500      	movs	r5, #0
    26ec:	e7f6      	b.n	26dc <bt_hci_cmd_send+0x5c>
			return -ENOBUFS;
    26ee:	f06f 0536 	mvn.w	r5, #54	; 0x36
    26f2:	e7f3      	b.n	26dc <bt_hci_cmd_send+0x5c>
    26f4:	00015e19 	.word	0x00015e19
    26f8:	0001639d 	.word	0x0001639d
    26fc:	0001723a 	.word	0x0001723a
    2700:	00017241 	.word	0x00017241
    2704:	00016841 	.word	0x00016841
    2708:	000171f2 	.word	0x000171f2
    270c:	0001686b 	.word	0x0001686b
    2710:	20003b4c 	.word	0x20003b4c

00002714 <start_le_scan>:
{
    2714:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2716:	4605      	mov	r5, r0
    2718:	460e      	mov	r6, r1
    271a:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    271c:	2100      	movs	r1, #0
    271e:	2207      	movs	r2, #7
    2720:	4668      	mov	r0, sp
    2722:	f7ff fa97 	bl	1c54 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    2726:	4821      	ldr	r0, [pc, #132]	; (27ac <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    2728:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    272c:	2300      	movs	r3, #0
    272e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2732:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    2734:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    2736:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    273a:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    273e:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2742:	d10a      	bne.n	275a <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2744:	2106      	movs	r1, #6
    2746:	3070      	adds	r0, #112	; 0x70
    2748:	f7ff fd28 	bl	219c <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    274c:	b928      	cbnz	r0, 275a <start_le_scan+0x46>
			err = le_set_private_addr();
    274e:	f7ff fe85 	bl	245c <le_set_private_addr>
			if (err) {
    2752:	4604      	mov	r4, r0
    2754:	b9f0      	cbnz	r0, 2794 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2756:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    275a:	2107      	movs	r1, #7
    275c:	f242 000b 	movw	r0, #8203	; 0x200b
    2760:	f7ff fd2a 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    2764:	4604      	mov	r4, r0
    2766:	b1f0      	cbz	r0, 27a6 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2768:	2207      	movs	r2, #7
    276a:	4669      	mov	r1, sp
    276c:	3008      	adds	r0, #8
    276e:	f011 fd4b 	bl	14208 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2772:	4621      	mov	r1, r4
    2774:	f242 000b 	movw	r0, #8203	; 0x200b
    2778:	f7ff ff82 	bl	2680 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    277c:	2001      	movs	r0, #1
    277e:	f7ff fded 	bl	235c <set_le_scan_enable>
	if (err) {
    2782:	4604      	mov	r4, r0
    2784:	b930      	cbnz	r0, 2794 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2786:	2d01      	cmp	r5, #1
    2788:	d107      	bne.n	279a <start_le_scan+0x86>
    278a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    278e:	4808      	ldr	r0, [pc, #32]	; (27b0 <start_le_scan+0x9c>)
    2790:	f7ff fc5d 	bl	204e <atomic_or>
}
    2794:	4620      	mov	r0, r4
    2796:	b002      	add	sp, #8
    2798:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    279a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    279e:	4804      	ldr	r0, [pc, #16]	; (27b0 <start_le_scan+0x9c>)
    27a0:	f7ff fc66 	bl	2070 <atomic_and>
    27a4:	e7f6      	b.n	2794 <start_le_scan+0x80>
		return -ENOBUFS;
    27a6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    27aa:	e7f3      	b.n	2794 <start_le_scan+0x80>
    27ac:	20003a88 	.word	0x20003a88
    27b0:	20003af8 	.word	0x20003af8

000027b4 <bt_le_scan_update>:
{
    27b4:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    27b6:	2109      	movs	r1, #9
{
    27b8:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    27ba:	4816      	ldr	r0, [pc, #88]	; (2814 <bt_le_scan_update+0x60>)
    27bc:	f7ff fcee 	bl	219c <atomic_test_bit>
    27c0:	4602      	mov	r2, r0
    27c2:	b108      	cbz	r0, 27c8 <bt_le_scan_update+0x14>
		return 0;
    27c4:	2000      	movs	r0, #0
    27c6:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    27c8:	2108      	movs	r1, #8
    27ca:	4812      	ldr	r0, [pc, #72]	; (2814 <bt_le_scan_update+0x60>)
    27cc:	f7ff fce6 	bl	219c <atomic_test_bit>
    27d0:	b9d0      	cbnz	r0, 2808 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    27d2:	2101      	movs	r1, #1
    27d4:	2000      	movs	r0, #0
    27d6:	f002 f907 	bl	49e8 <bt_conn_lookup_state_le>
		if (!conn) {
    27da:	4604      	mov	r4, r0
    27dc:	2800      	cmp	r0, #0
    27de:	d0f1      	beq.n	27c4 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    27e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    27e4:	480b      	ldr	r0, [pc, #44]	; (2814 <bt_le_scan_update+0x60>)
    27e6:	f7ff fc32 	bl	204e <atomic_or>
		bt_conn_unref(conn);
    27ea:	4620      	mov	r0, r4
    27ec:	f002 f91a 	bl	4a24 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    27f0:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    27f2:	bf15      	itete	ne
    27f4:	2230      	movne	r2, #48	; 0x30
    27f6:	2212      	moveq	r2, #18
    27f8:	2160      	movne	r1, #96	; 0x60
    27fa:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    27fe:	2000      	movs	r0, #0
}
    2800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2804:	f7ff bf86 	b.w	2714 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2808:	4610      	mov	r0, r2
    280a:	f7ff fda7 	bl	235c <set_le_scan_enable>
		if (err) {
    280e:	2800      	cmp	r0, #0
    2810:	d0df      	beq.n	27d2 <bt_le_scan_update+0x1e>
    2812:	bd38      	pop	{r3, r4, r5, pc}
    2814:	20003af8 	.word	0x20003af8

00002818 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    2818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    281c:	4e71      	ldr	r6, [pc, #452]	; (29e4 <bt_init+0x1cc>)
    281e:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    2822:	6899      	ldr	r1, [r3, #8]
    2824:	f011 0101 	ands.w	r1, r1, #1
{
    2828:	b08f      	sub	sp, #60	; 0x3c
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    282a:	d131      	bne.n	2890 <bt_init+0x78>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    282c:	aa0c      	add	r2, sp, #48	; 0x30
    282e:	f640 4003 	movw	r0, #3075	; 0xc03
    2832:	f7ff fd1f 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2836:	4605      	mov	r5, r0
    2838:	2800      	cmp	r0, #0
    283a:	f040 80ce 	bne.w	29da <bt_init+0x1c2>
	u8_t status = buf->data[0];
    283e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2840:	689b      	ldr	r3, [r3, #8]
    2842:	781c      	ldrb	r4, [r3, #0]
    2844:	f012 fd22 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u", status);
    2848:	4b67      	ldr	r3, [pc, #412]	; (29e8 <bt_init+0x1d0>)
    284a:	9303      	str	r3, [sp, #12]
    284c:	9001      	str	r0, [sp, #4]
    284e:	9300      	str	r3, [sp, #0]
    2850:	9402      	str	r4, [sp, #8]
    2852:	4b66      	ldr	r3, [pc, #408]	; (29ec <bt_init+0x1d4>)
    2854:	4a66      	ldr	r2, [pc, #408]	; (29f0 <bt_init+0x1d8>)
    2856:	4967      	ldr	r1, [pc, #412]	; (29f4 <bt_init+0x1dc>)
    2858:	4867      	ldr	r0, [pc, #412]	; (29f8 <bt_init+0x1e0>)
    285a:	f7fe fb97 	bl	f8c <printk>
	if (status) {
    285e:	b9a4      	cbnz	r4, 288a <bt_init+0x72>
	scan_dev_found_cb = NULL;
    2860:	4b66      	ldr	r3, [pc, #408]	; (29fc <bt_init+0x1e4>)
    2862:	601c      	str	r4, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2864:	4633      	mov	r3, r6
    2866:	f3bf 8f5b 	dmb	ish
    286a:	f853 2f70 	ldr.w	r2, [r3, #112]!
    286e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2872:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2876:	f3bf 8f5b 	dmb	ish
    287a:	e853 1f00 	ldrex	r1, [r3]
    287e:	e843 2000 	strex	r0, r2, [r3]
    2882:	2800      	cmp	r0, #0
    2884:	d1f9      	bne.n	287a <bt_init+0x62>
    2886:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    288a:	980c      	ldr	r0, [sp, #48]	; 0x30
    288c:	f011 fc84 	bl	14198 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2890:	aa0c      	add	r2, sp, #48	; 0x30
    2892:	2100      	movs	r1, #0
    2894:	f241 0003 	movw	r0, #4099	; 0x1003
    2898:	f7ff fcec 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    289c:	4605      	mov	r5, r0
    289e:	2800      	cmp	r0, #0
    28a0:	f040 809b 	bne.w	29da <bt_init+0x1c2>
    28a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    28a6:	4c50      	ldr	r4, [pc, #320]	; (29e8 <bt_init+0x1d0>)
    28a8:	689f      	ldr	r7, [r3, #8]
    28aa:	f012 fcef 	bl	1528c <_impl_k_current_get>
    28ae:	9403      	str	r4, [sp, #12]
    28b0:	f817 3b01 	ldrb.w	r3, [r7], #1
    28b4:	9302      	str	r3, [sp, #8]
    28b6:	9001      	str	r0, [sp, #4]
    28b8:	4b51      	ldr	r3, [pc, #324]	; (2a00 <bt_init+0x1e8>)
    28ba:	4a4d      	ldr	r2, [pc, #308]	; (29f0 <bt_init+0x1d8>)
    28bc:	494d      	ldr	r1, [pc, #308]	; (29f4 <bt_init+0x1dc>)
    28be:	9400      	str	r4, [sp, #0]
    28c0:	484d      	ldr	r0, [pc, #308]	; (29f8 <bt_init+0x1e0>)
    28c2:	f7fe fb63 	bl	f8c <printk>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    28c6:	2208      	movs	r2, #8
    28c8:	4639      	mov	r1, r7
    28ca:	484e      	ldr	r0, [pc, #312]	; (2a04 <bt_init+0x1ec>)
    28cc:	f7ff f996 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    28d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    28d2:	f011 fc61 	bl	14198 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    28d6:	4629      	mov	r1, r5
    28d8:	aa0c      	add	r2, sp, #48	; 0x30
    28da:	f241 0001 	movw	r0, #4097	; 0x1001
    28de:	f7ff fcc9 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    28e2:	4605      	mov	r5, r0
    28e4:	2800      	cmp	r0, #0
    28e6:	d178      	bne.n	29da <bt_init+0x1c2>
    28e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    28ea:	689d      	ldr	r5, [r3, #8]
    28ec:	f012 fcce 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    28f0:	9403      	str	r4, [sp, #12]
    28f2:	782b      	ldrb	r3, [r5, #0]
    28f4:	493f      	ldr	r1, [pc, #252]	; (29f4 <bt_init+0x1dc>)
    28f6:	9302      	str	r3, [sp, #8]
    28f8:	9001      	str	r0, [sp, #4]
    28fa:	4b43      	ldr	r3, [pc, #268]	; (2a08 <bt_init+0x1f0>)
    28fc:	4a3c      	ldr	r2, [pc, #240]	; (29f0 <bt_init+0x1d8>)
    28fe:	9400      	str	r4, [sp, #0]
    2900:	483d      	ldr	r0, [pc, #244]	; (29f8 <bt_init+0x1e0>)
    2902:	f7fe fb43 	bl	f8c <printk>
	bt_dev.hci_version = rp->hci_version;
    2906:	786b      	ldrb	r3, [r5, #1]
    2908:	73b3      	strb	r3, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    290a:	78ea      	ldrb	r2, [r5, #3]
    290c:	78ab      	ldrb	r3, [r5, #2]
	net_buf_unref(rsp);
    290e:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2910:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2914:	8233      	strh	r3, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2916:	792b      	ldrb	r3, [r5, #4]
    2918:	73f3      	strb	r3, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    291a:	7a2a      	ldrb	r2, [r5, #8]
    291c:	79eb      	ldrb	r3, [r5, #7]
    291e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2922:	8273      	strh	r3, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2924:	79aa      	ldrb	r2, [r5, #6]
    2926:	796b      	ldrb	r3, [r5, #5]
    2928:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    292c:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    292e:	f011 fc33 	bl	14198 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2932:	2103      	movs	r1, #3
    2934:	4835      	ldr	r0, [pc, #212]	; (2a0c <bt_init+0x1f4>)
    2936:	f7ff fc31 	bl	219c <atomic_test_bit>
    293a:	4601      	mov	r1, r0
    293c:	bb00      	cbnz	r0, 2980 <bt_init+0x168>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    293e:	aa0c      	add	r2, sp, #48	; 0x30
    2940:	f241 0009 	movw	r0, #4105	; 0x1009
    2944:	f7ff fc96 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2948:	4605      	mov	r5, r0
    294a:	2800      	cmp	r0, #0
    294c:	d145      	bne.n	29da <bt_init+0x1c2>
    294e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2950:	689f      	ldr	r7, [r3, #8]
    2952:	f012 fc9b 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2956:	9403      	str	r4, [sp, #12]
    2958:	f817 3b01 	ldrb.w	r3, [r7], #1
    295c:	9302      	str	r3, [sp, #8]
    295e:	9001      	str	r0, [sp, #4]
    2960:	4b2b      	ldr	r3, [pc, #172]	; (2a10 <bt_init+0x1f8>)
    2962:	4a23      	ldr	r2, [pc, #140]	; (29f0 <bt_init+0x1d8>)
    2964:	4923      	ldr	r1, [pc, #140]	; (29f4 <bt_init+0x1dc>)
    2966:	9400      	str	r4, [sp, #0]
    2968:	4823      	ldr	r0, [pc, #140]	; (29f8 <bt_init+0x1e0>)
    296a:	f7fe fb0f 	bl	f8c <printk>
    296e:	2206      	movs	r2, #6
    2970:	4639      	mov	r1, r7
    2972:	4828      	ldr	r0, [pc, #160]	; (2a14 <bt_init+0x1fc>)
    2974:	f7ff f942 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    2978:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    297a:	7035      	strb	r5, [r6, #0]
		net_buf_unref(rsp);
    297c:	f011 fc0c 	bl	14198 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2980:	aa0c      	add	r2, sp, #48	; 0x30
    2982:	2100      	movs	r1, #0
    2984:	f241 0002 	movw	r0, #4098	; 0x1002
    2988:	f7ff fc74 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    298c:	4605      	mov	r5, r0
    298e:	bb20      	cbnz	r0, 29da <bt_init+0x1c2>
    2990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2992:	689f      	ldr	r7, [r3, #8]
    2994:	f012 fc7a 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2998:	9403      	str	r4, [sp, #12]
    299a:	f817 3b01 	ldrb.w	r3, [r7], #1
    299e:	9302      	str	r3, [sp, #8]
    29a0:	9001      	str	r0, [sp, #4]
    29a2:	4b1d      	ldr	r3, [pc, #116]	; (2a18 <bt_init+0x200>)
    29a4:	4a12      	ldr	r2, [pc, #72]	; (29f0 <bt_init+0x1d8>)
    29a6:	4913      	ldr	r1, [pc, #76]	; (29f4 <bt_init+0x1dc>)
    29a8:	9400      	str	r4, [sp, #0]
    29aa:	4813      	ldr	r0, [pc, #76]	; (29f8 <bt_init+0x1e0>)
    29ac:	f7fe faee 	bl	f8c <printk>
	memcpy(bt_dev.supported_commands, rp->commands,
    29b0:	4639      	mov	r1, r7
    29b2:	2240      	movs	r2, #64	; 0x40
    29b4:	4819      	ldr	r0, [pc, #100]	; (2a1c <bt_init+0x204>)
    29b6:	f7ff f921 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    29ba:	980c      	ldr	r0, [sp, #48]	; 0x30
    29bc:	f011 fbec 	bl	14198 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    29c0:	7eb3      	ldrb	r3, [r6, #26]
    29c2:	0659      	lsls	r1, r3, #25
    29c4:	d432      	bmi.n	2a2c <bt_init+0x214>
		BT_ERR("Non-LE capable controller detected!");
    29c6:	9401      	str	r4, [sp, #4]
    29c8:	9400      	str	r4, [sp, #0]
    29ca:	4b15      	ldr	r3, [pc, #84]	; (2a20 <bt_init+0x208>)
    29cc:	4a15      	ldr	r2, [pc, #84]	; (2a24 <bt_init+0x20c>)
    29ce:	4909      	ldr	r1, [pc, #36]	; (29f4 <bt_init+0x1dc>)
    29d0:	4815      	ldr	r0, [pc, #84]	; (2a28 <bt_init+0x210>)
    29d2:	f7fe fadb 	bl	f8c <printk>
		return -ENODEV;
    29d6:	f06f 0512 	mvn.w	r5, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    29da:	4628      	mov	r0, r5
    29dc:	b00f      	add	sp, #60	; 0x3c
    29de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    29e2:	bf00      	nop
    29e4:	20003a88 	.word	0x20003a88
    29e8:	00015e19 	.word	0x00015e19
    29ec:	000164c8 	.word	0x000164c8
    29f0:	0001723a 	.word	0x0001723a
    29f4:	00017241 	.word	0x00017241
    29f8:	00016922 	.word	0x00016922
    29fc:	200002fc 	.word	0x200002fc
    2a00:	000165f7 	.word	0x000165f7
    2a04:	20003a9e 	.word	0x20003a9e
    2a08:	00016558 	.word	0x00016558
    2a0c:	20003af8 	.word	0x20003af8
    2a10:	00016570 	.word	0x00016570
    2a14:	20003a89 	.word	0x20003a89
    2a18:	000165d6 	.word	0x000165d6
    2a1c:	20003aa6 	.word	0x20003aa6
    2a20:	00016631 	.word	0x00016631
    2a24:	000171f2 	.word	0x000171f2
    2a28:	00016941 	.word	0x00016941
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2a2c:	4629      	mov	r1, r5
    2a2e:	aa0c      	add	r2, sp, #48	; 0x30
    2a30:	f242 0003 	movw	r0, #8195	; 0x2003
    2a34:	f7ff fc1e 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2a38:	4605      	mov	r5, r0
    2a3a:	2800      	cmp	r0, #0
    2a3c:	d1cd      	bne.n	29da <bt_init+0x1c2>
    2a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a40:	689f      	ldr	r7, [r3, #8]
    2a42:	f012 fc23 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a46:	9403      	str	r4, [sp, #12]
    2a48:	f817 3b01 	ldrb.w	r3, [r7], #1
    2a4c:	9302      	str	r3, [sp, #8]
    2a4e:	9001      	str	r0, [sp, #4]
    2a50:	4bb3      	ldr	r3, [pc, #716]	; (2d20 <bt_init+0x508>)
    2a52:	4ab4      	ldr	r2, [pc, #720]	; (2d24 <bt_init+0x50c>)
    2a54:	49b4      	ldr	r1, [pc, #720]	; (2d28 <bt_init+0x510>)
    2a56:	9400      	str	r4, [sp, #0]
    2a58:	48b4      	ldr	r0, [pc, #720]	; (2d2c <bt_init+0x514>)
    2a5a:	f7fe fa97 	bl	f8c <printk>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2a5e:	2208      	movs	r2, #8
    2a60:	4639      	mov	r1, r7
    2a62:	48b3      	ldr	r0, [pc, #716]	; (2d30 <bt_init+0x518>)
    2a64:	f7ff f8ca 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a68:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a6a:	f011 fb95 	bl	14198 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2a6e:	4629      	mov	r1, r5
    2a70:	aa0c      	add	r2, sp, #48	; 0x30
    2a72:	f242 0002 	movw	r0, #8194	; 0x2002
    2a76:	f7ff fbfd 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2a7a:	4605      	mov	r5, r0
    2a7c:	2800      	cmp	r0, #0
    2a7e:	d1ac      	bne.n	29da <bt_init+0x1c2>
    2a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a82:	689d      	ldr	r5, [r3, #8]
    2a84:	f012 fc02 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a88:	9403      	str	r4, [sp, #12]
    2a8a:	782b      	ldrb	r3, [r5, #0]
    2a8c:	9302      	str	r3, [sp, #8]
    2a8e:	9001      	str	r0, [sp, #4]
    2a90:	4ba8      	ldr	r3, [pc, #672]	; (2d34 <bt_init+0x51c>)
    2a92:	9400      	str	r4, [sp, #0]
    2a94:	4aa3      	ldr	r2, [pc, #652]	; (2d24 <bt_init+0x50c>)
    2a96:	49a4      	ldr	r1, [pc, #656]	; (2d28 <bt_init+0x510>)
    2a98:	48a4      	ldr	r0, [pc, #656]	; (2d2c <bt_init+0x514>)
    2a9a:	f7fe fa77 	bl	f8c <printk>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2a9e:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    2aa2:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2aa6:	b1bb      	cbz	r3, 2ad8 <bt_init+0x2c0>
    2aa8:	f012 fbf0 	bl	1528c <_impl_k_current_get>
	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);
    2aac:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2ab0:	9404      	str	r4, [sp, #16]
    2ab2:	9303      	str	r3, [sp, #12]
    2ab4:	78eb      	ldrb	r3, [r5, #3]
    2ab6:	9302      	str	r3, [sp, #8]
    2ab8:	9001      	str	r0, [sp, #4]
    2aba:	4a9a      	ldr	r2, [pc, #616]	; (2d24 <bt_init+0x50c>)
    2abc:	499a      	ldr	r1, [pc, #616]	; (2d28 <bt_init+0x510>)
    2abe:	9400      	str	r4, [sp, #0]
    2ac0:	4b9c      	ldr	r3, [pc, #624]	; (2d34 <bt_init+0x51c>)
    2ac2:	489d      	ldr	r0, [pc, #628]	; (2d38 <bt_init+0x520>)
    2ac4:	f7fe fa62 	bl	f8c <printk>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2ac8:	78ea      	ldrb	r2, [r5, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2aca:	489c      	ldr	r0, [pc, #624]	; (2d3c <bt_init+0x524>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2acc:	2a02      	cmp	r2, #2
    2ace:	bf28      	it	cs
    2ad0:	2202      	movcs	r2, #2
    2ad2:	4611      	mov	r1, r2
    2ad4:	f012 fbe0 	bl	15298 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2ad8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ada:	f011 fb5d 	bl	14198 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2ade:	7eb5      	ldrb	r5, [r6, #26]
    2ae0:	f015 0520 	ands.w	r5, r5, #32
    2ae4:	f000 8100 	beq.w	2ce8 <bt_init+0x4d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2ae8:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    2aec:	071a      	lsls	r2, r3, #28
    2aee:	d523      	bpl.n	2b38 <bt_init+0x320>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2af0:	aa0c      	add	r2, sp, #48	; 0x30
    2af2:	2100      	movs	r1, #0
    2af4:	f242 001c 	movw	r0, #8220	; 0x201c
    2af8:	f7ff fbbc 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2afc:	4605      	mov	r5, r0
    2afe:	2800      	cmp	r0, #0
    2b00:	f47f af6b 	bne.w	29da <bt_init+0x1c2>
    2b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b06:	689d      	ldr	r5, [r3, #8]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2b08:	f012 fbc0 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2b0c:	9403      	str	r4, [sp, #12]
    2b0e:	782b      	ldrb	r3, [r5, #0]
    2b10:	9302      	str	r3, [sp, #8]
    2b12:	9001      	str	r0, [sp, #4]
    2b14:	4b8a      	ldr	r3, [pc, #552]	; (2d40 <bt_init+0x528>)
    2b16:	4a83      	ldr	r2, [pc, #524]	; (2d24 <bt_init+0x50c>)
    2b18:	9400      	str	r4, [sp, #0]
    2b1a:	4983      	ldr	r1, [pc, #524]	; (2d28 <bt_init+0x510>)
    2b1c:	4883      	ldr	r0, [pc, #524]	; (2d2c <bt_init+0x514>)
    2b1e:	f7fe fa35 	bl	f8c <printk>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2b22:	462b      	mov	r3, r5
		net_buf_unref(rsp);
    2b24:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b26:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2b2a:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2b2c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    2b30:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    2b34:	f011 fb30 	bl	14198 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2b38:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    2b3c:	069b      	lsls	r3, r3, #26
    2b3e:	f100 8115 	bmi.w	2d6c <bt_init+0x554>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2b42:	2108      	movs	r1, #8
    2b44:	f242 0001 	movw	r0, #8193	; 0x2001
    2b48:	f7ff fb36 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    2b4c:	4605      	mov	r5, r0
    2b4e:	2800      	cmp	r0, #0
    2b50:	f000 80d1 	beq.w	2cf6 <bt_init+0x4de>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2b54:	2108      	movs	r1, #8
    2b56:	4408      	add	r0, r1
    2b58:	f011 fb50 	bl	141fc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2b5c:	f896 1078 	ldrb.w	r1, [r6, #120]	; 0x78
    2b60:	078f      	lsls	r7, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2b62:	bf4c      	ite	mi
    2b64:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2b66:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2b68:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2b6a:	f896 1079 	ldrb.w	r1, [r6, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2b6e:	bf48      	it	mi
    2b70:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2b74:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2b78:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    2b7c:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2b80:	bf18      	it	ne
    2b82:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2b86:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2b88:	bf08      	it	eq
    2b8a:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2b8e:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2b90:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2b94:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2b96:	2200      	movs	r2, #0
    2b98:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2b9a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2b9c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2b9e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2ba0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2ba2:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2ba4:	4629      	mov	r1, r5
    2ba6:	f242 0001 	movw	r0, #8193	; 0x2001
    2baa:	f7ff fb63 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2bae:	4605      	mov	r5, r0
    2bb0:	2800      	cmp	r0, #0
    2bb2:	f47f af12 	bne.w	29da <bt_init+0x1c2>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2bb6:	7eb3      	ldrb	r3, [r6, #26]
    2bb8:	069a      	lsls	r2, r3, #26
    2bba:	d43f      	bmi.n	2c3c <bt_init+0x424>
	if (bt_dev.le.mtu) {
    2bbc:	f8b6 1088 	ldrh.w	r1, [r6, #136]	; 0x88
    2bc0:	2900      	cmp	r1, #0
    2bc2:	d13b      	bne.n	2c3c <bt_init+0x424>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2bc4:	aa0c      	add	r2, sp, #48	; 0x30
    2bc6:	f241 0005 	movw	r0, #4101	; 0x1005
    2bca:	f7ff fb53 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2bce:	4605      	mov	r5, r0
    2bd0:	2800      	cmp	r0, #0
    2bd2:	f47f af02 	bne.w	29da <bt_init+0x1c2>
    2bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2bd8:	689d      	ldr	r5, [r3, #8]
    2bda:	f012 fb57 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2bde:	9403      	str	r4, [sp, #12]
    2be0:	782b      	ldrb	r3, [r5, #0]
    2be2:	9302      	str	r3, [sp, #8]
    2be4:	9001      	str	r0, [sp, #4]
    2be6:	4b57      	ldr	r3, [pc, #348]	; (2d44 <bt_init+0x52c>)
    2be8:	9400      	str	r4, [sp, #0]
    2bea:	4a4e      	ldr	r2, [pc, #312]	; (2d24 <bt_init+0x50c>)
    2bec:	494e      	ldr	r1, [pc, #312]	; (2d28 <bt_init+0x510>)
    2bee:	484f      	ldr	r0, [pc, #316]	; (2d2c <bt_init+0x514>)
    2bf0:	f7fe f9cc 	bl	f8c <printk>
	if (bt_dev.le.mtu) {
    2bf4:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2bf8:	b9eb      	cbnz	r3, 2c36 <bt_init+0x41e>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2bfa:	78aa      	ldrb	r2, [r5, #2]
    2bfc:	786b      	ldrb	r3, [r5, #1]
    2bfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2c02:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2c06:	88ad      	ldrh	r5, [r5, #4]
    2c08:	f012 fb40 	bl	1528c <_impl_k_current_get>
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2c0c:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2c10:	9303      	str	r3, [sp, #12]
    2c12:	9001      	str	r0, [sp, #4]
    2c14:	4a43      	ldr	r2, [pc, #268]	; (2d24 <bt_init+0x50c>)
    2c16:	4944      	ldr	r1, [pc, #272]	; (2d28 <bt_init+0x510>)
    2c18:	9404      	str	r4, [sp, #16]
    2c1a:	9502      	str	r5, [sp, #8]
    2c1c:	9400      	str	r4, [sp, #0]
    2c1e:	4b49      	ldr	r3, [pc, #292]	; (2d44 <bt_init+0x52c>)
    2c20:	4849      	ldr	r0, [pc, #292]	; (2d48 <bt_init+0x530>)
    2c22:	f7fe f9b3 	bl	f8c <printk>
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2c26:	2d02      	cmp	r5, #2
    2c28:	462a      	mov	r2, r5
    2c2a:	bf28      	it	cs
    2c2c:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2c2e:	4611      	mov	r1, r2
    2c30:	4842      	ldr	r0, [pc, #264]	; (2d3c <bt_init+0x524>)
    2c32:	f012 fb31 	bl	15298 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2c36:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c38:	f011 faae 	bl	14198 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2c3c:	2108      	movs	r1, #8
    2c3e:	f640 4001 	movw	r0, #3073	; 0xc01
    2c42:	f7ff fab9 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    2c46:	4605      	mov	r5, r0
    2c48:	2800      	cmp	r0, #0
    2c4a:	d054      	beq.n	2cf6 <bt_init+0x4de>
	ev = net_buf_add(buf, sizeof(*ev));
    2c4c:	2108      	movs	r1, #8
    2c4e:	4408      	add	r0, r1
    2c50:	f011 fad4 	bl	141fc <net_buf_simple_add>
	dst[0] = val;
    2c54:	2310      	movs	r3, #16
    2c56:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2c58:	2388      	movs	r3, #136	; 0x88
    2c5a:	7043      	strb	r3, [r0, #1]
    2c5c:	2302      	movs	r3, #2
	dst[0] = val;
    2c5e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2c60:	70c3      	strb	r3, [r0, #3]
    2c62:	2320      	movs	r3, #32
	dst[0] = val;
    2c64:	7082      	strb	r2, [r0, #2]
    2c66:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2c68:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2c6a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2c6c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2c6e:	4629      	mov	r1, r5
    2c70:	f640 4001 	movw	r0, #3073	; 0xc01
    2c74:	f7ff fafe 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2c78:	4605      	mov	r5, r0
    2c7a:	2800      	cmp	r0, #0
    2c7c:	f47f aead 	bne.w	29da <bt_init+0x1c2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2c80:	4601      	mov	r1, r0
    2c82:	aa0c      	add	r2, sp, #48	; 0x30
    2c84:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2c88:	f7ff faf4 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2c8c:	2800      	cmp	r0, #0
    2c8e:	f000 809a 	beq.w	2dc6 <bt_init+0x5ae>
		BT_WARN("Vendor HCI extensions not available");
    2c92:	4b2e      	ldr	r3, [pc, #184]	; (2d4c <bt_init+0x534>)
    2c94:	4a2e      	ldr	r2, [pc, #184]	; (2d50 <bt_init+0x538>)
    2c96:	4924      	ldr	r1, [pc, #144]	; (2d28 <bt_init+0x510>)
    2c98:	482e      	ldr	r0, [pc, #184]	; (2d54 <bt_init+0x53c>)
    2c9a:	9401      	str	r4, [sp, #4]
    2c9c:	9400      	str	r4, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    2c9e:	f7fe f975 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2ca2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2ca4:	2207      	movs	r2, #7
    2ca6:	a90c      	add	r1, sp, #48	; 0x30
    2ca8:	482b      	ldr	r0, [pc, #172]	; (2d58 <bt_init+0x540>)
    2caa:	930c      	str	r3, [sp, #48]	; 0x30
    2cac:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2cb0:	f7fe ff8f 	bl	1bd2 <memcmp>
    2cb4:	2800      	cmp	r0, #0
    2cb6:	f040 8100 	bne.w	2eba <bt_init+0x6a2>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2cba:	f012 fae7 	bl	1528c <_impl_k_current_get>
		BT_DBG("No public address. Trying to set static random.");
    2cbe:	4b27      	ldr	r3, [pc, #156]	; (2d5c <bt_init+0x544>)
    2cc0:	9001      	str	r0, [sp, #4]
    2cc2:	9402      	str	r4, [sp, #8]
    2cc4:	9400      	str	r4, [sp, #0]
    2cc6:	4a17      	ldr	r2, [pc, #92]	; (2d24 <bt_init+0x50c>)
    2cc8:	4917      	ldr	r1, [pc, #92]	; (2d28 <bt_init+0x510>)
    2cca:	4825      	ldr	r0, [pc, #148]	; (2d60 <bt_init+0x548>)
    2ccc:	f7fe f95e 	bl	f8c <printk>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2cd0:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    2cd4:	07db      	lsls	r3, r3, #31
    2cd6:	f100 8111 	bmi.w	2efc <bt_init+0x6e4>
		BT_WARN("Read Static Addresses command not available");
    2cda:	9401      	str	r4, [sp, #4]
    2cdc:	9400      	str	r4, [sp, #0]
    2cde:	4b21      	ldr	r3, [pc, #132]	; (2d64 <bt_init+0x54c>)
    2ce0:	4a1b      	ldr	r2, [pc, #108]	; (2d50 <bt_init+0x538>)
    2ce2:	4911      	ldr	r1, [pc, #68]	; (2d28 <bt_init+0x510>)
    2ce4:	4820      	ldr	r0, [pc, #128]	; (2d68 <bt_init+0x550>)
    2ce6:	e116      	b.n	2f16 <bt_init+0x6fe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2ce8:	2102      	movs	r1, #2
    2cea:	f640 406d 	movw	r0, #3181	; 0xc6d
    2cee:	f7ff fa63 	bl	21b8 <bt_hci_cmd_create>
		if (!buf) {
    2cf2:	4607      	mov	r7, r0
    2cf4:	b910      	cbnz	r0, 2cfc <bt_init+0x4e4>
		return -ENOBUFS;
    2cf6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2cfa:	e66e      	b.n	29da <bt_init+0x1c2>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2cfc:	2102      	movs	r1, #2
    2cfe:	3008      	adds	r0, #8
    2d00:	f011 fa7c 	bl	141fc <net_buf_simple_add>
		cp_le->le = 0x01;
    2d04:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2d06:	7045      	strb	r5, [r0, #1]
		cp_le->le = 0x01;
    2d08:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2d0a:	462a      	mov	r2, r5
    2d0c:	4639      	mov	r1, r7
    2d0e:	f640 406d 	movw	r0, #3181	; 0xc6d
    2d12:	f7ff faaf 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2d16:	4605      	mov	r5, r0
    2d18:	2800      	cmp	r0, #0
    2d1a:	f43f aee5 	beq.w	2ae8 <bt_init+0x2d0>
    2d1e:	e65c      	b.n	29da <bt_init+0x1c2>
    2d20:	00016585 	.word	0x00016585
    2d24:	0001723a 	.word	0x0001723a
    2d28:	00017241 	.word	0x00017241
    2d2c:	00016922 	.word	0x00016922
    2d30:	20003b00 	.word	0x20003b00
    2d34:	000165b9 	.word	0x000165b9
    2d38:	00016975 	.word	0x00016975
    2d3c:	20003b14 	.word	0x20003b14
    2d40:	00016614 	.word	0x00016614
    2d44:	0001659f 	.word	0x0001659f
    2d48:	000169a9 	.word	0x000169a9
    2d4c:	0001666b 	.word	0x0001666b
    2d50:	0001727c 	.word	0x0001727c
    2d54:	000169e1 	.word	0x000169e1
    2d58:	20003a88 	.word	0x20003a88
    2d5c:	00016677 	.word	0x00016677
    2d60:	00016b15 	.word	0x00016b15
    2d64:	0001664c 	.word	0x0001664c
    2d68:	00016bc3 	.word	0x00016bc3
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2d6c:	aa0c      	add	r2, sp, #48	; 0x30
    2d6e:	2100      	movs	r1, #0
    2d70:	f242 002f 	movw	r0, #8239	; 0x202f
    2d74:	f7ff fa7e 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2d78:	4605      	mov	r5, r0
    2d7a:	2800      	cmp	r0, #0
    2d7c:	f47f ae2d 	bne.w	29da <bt_init+0x1c2>
		rp = (void *)rsp->data;
    2d80:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d82:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2d84:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2d88:	f8b3 9003 	ldrh.w	r9, [r3, #3]
		net_buf_unref(rsp);
    2d8c:	f011 fa04 	bl	14198 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2d90:	2104      	movs	r1, #4
    2d92:	f242 0024 	movw	r0, #8228	; 0x2024
    2d96:	f7ff fa0f 	bl	21b8 <bt_hci_cmd_create>
		if (!buf) {
    2d9a:	4607      	mov	r7, r0
    2d9c:	2800      	cmp	r0, #0
    2d9e:	d0aa      	beq.n	2cf6 <bt_init+0x4de>
		cp = net_buf_add(buf, sizeof(*cp));
    2da0:	2104      	movs	r1, #4
    2da2:	3008      	adds	r0, #8
    2da4:	f011 fa2a 	bl	141fc <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2da8:	462a      	mov	r2, r5
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2daa:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2dae:	f8a0 9002 	strh.w	r9, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2db2:	4639      	mov	r1, r7
    2db4:	f242 0024 	movw	r0, #8228	; 0x2024
    2db8:	f7ff fa5c 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2dbc:	4605      	mov	r5, r0
    2dbe:	2800      	cmp	r0, #0
    2dc0:	f43f aebf 	beq.w	2b42 <bt_init+0x32a>
    2dc4:	e609      	b.n	29da <bt_init+0x1c2>
	rp.info = (void *)rsp->data;
    2dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2dc8:	4971      	ldr	r1, [pc, #452]	; (2f90 <bt_init+0x778>)
	rp.info = (void *)rsp->data;
    2dca:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2dcc:	4871      	ldr	r0, [pc, #452]	; (2f94 <bt_init+0x77c>)
    2dce:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    2dd2:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2dd4:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2dd6:	bf96      	itet	ls
    2dd8:	4a6f      	ldrls	r2, [pc, #444]	; (2f98 <bt_init+0x780>)
	return "unknown";
    2dda:	4a70      	ldrhi	r2, [pc, #448]	; (2f9c <bt_init+0x784>)
		return plat_str[platform];
    2ddc:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2de0:	9201      	str	r2, [sp, #4]
    2de2:	4b6f      	ldr	r3, [pc, #444]	; (2fa0 <bt_init+0x788>)
    2de4:	4a6f      	ldr	r2, [pc, #444]	; (2fa4 <bt_init+0x78c>)
    2de6:	9403      	str	r4, [sp, #12]
    2de8:	9400      	str	r4, [sp, #0]
    2dea:	f7fe f8cf 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2dee:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2df2:	f8b5 2003 	ldrh.w	r2, [r5, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2df6:	2b02      	cmp	r3, #2
    2df8:	d13a      	bne.n	2e70 <bt_init+0x658>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2dfa:	2a02      	cmp	r2, #2
    2dfc:	d838      	bhi.n	2e70 <bt_init+0x658>
		return nordic_str[variant];
    2dfe:	4b6a      	ldr	r3, [pc, #424]	; (2fa8 <bt_init+0x790>)
    2e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2e04:	9202      	str	r2, [sp, #8]
    2e06:	9301      	str	r3, [sp, #4]
    2e08:	4a66      	ldr	r2, [pc, #408]	; (2fa4 <bt_init+0x78c>)
    2e0a:	4b65      	ldr	r3, [pc, #404]	; (2fa0 <bt_init+0x788>)
    2e0c:	4960      	ldr	r1, [pc, #384]	; (2f90 <bt_init+0x778>)
    2e0e:	9403      	str	r4, [sp, #12]
    2e10:	9400      	str	r4, [sp, #0]
    2e12:	4866      	ldr	r0, [pc, #408]	; (2fac <bt_init+0x794>)
    2e14:	f7fe f8ba 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e18:	796b      	ldrb	r3, [r5, #5]
    2e1a:	9406      	str	r4, [sp, #24]
    2e1c:	f8d5 1009 	ldr.w	r1, [r5, #9]
    2e20:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2e22:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e24:	f8b5 1007 	ldrh.w	r1, [r5, #7]
		return var_str[variant];
    2e28:	bf98      	it	ls
    2e2a:	4a61      	ldrls	r2, [pc, #388]	; (2fb0 <bt_init+0x798>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e2c:	9104      	str	r1, [sp, #16]
    2e2e:	79a9      	ldrb	r1, [r5, #6]
		return var_str[variant];
    2e30:	bf94      	ite	ls
    2e32:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2e36:	4a59      	ldrhi	r2, [pc, #356]	; (2f9c <bt_init+0x784>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e38:	9103      	str	r1, [sp, #12]
    2e3a:	9302      	str	r3, [sp, #8]
    2e3c:	4954      	ldr	r1, [pc, #336]	; (2f90 <bt_init+0x778>)
    2e3e:	4b58      	ldr	r3, [pc, #352]	; (2fa0 <bt_init+0x788>)
    2e40:	9201      	str	r2, [sp, #4]
    2e42:	9400      	str	r4, [sp, #0]
    2e44:	4a57      	ldr	r2, [pc, #348]	; (2fa4 <bt_init+0x78c>)
    2e46:	485b      	ldr	r0, [pc, #364]	; (2fb4 <bt_init+0x79c>)
    2e48:	f7fe f8a0 	bl	f8c <printk>
	net_buf_unref(rsp);
    2e4c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e4e:	f011 f9a3 	bl	14198 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2e52:	aa0c      	add	r2, sp, #48	; 0x30
    2e54:	2100      	movs	r1, #0
    2e56:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2e5a:	f7ff fa0b 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2e5e:	4605      	mov	r5, r0
    2e60:	b140      	cbz	r0, 2e74 <bt_init+0x65c>
		BT_WARN("Failed to read supported vendor features");
    2e62:	9401      	str	r4, [sp, #4]
    2e64:	9400      	str	r4, [sp, #0]
    2e66:	4b4e      	ldr	r3, [pc, #312]	; (2fa0 <bt_init+0x788>)
    2e68:	4a53      	ldr	r2, [pc, #332]	; (2fb8 <bt_init+0x7a0>)
    2e6a:	4949      	ldr	r1, [pc, #292]	; (2f90 <bt_init+0x778>)
    2e6c:	4853      	ldr	r0, [pc, #332]	; (2fbc <bt_init+0x7a4>)
    2e6e:	e716      	b.n	2c9e <bt_init+0x486>
		return "unknown";
    2e70:	4b4a      	ldr	r3, [pc, #296]	; (2f9c <bt_init+0x784>)
    2e72:	e7c7      	b.n	2e04 <bt_init+0x5ec>
	rp.cmds = (void *)rsp->data;
    2e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2e76:	4852      	ldr	r0, [pc, #328]	; (2fc0 <bt_init+0x7a8>)
    2e78:	6899      	ldr	r1, [r3, #8]
    2e7a:	2202      	movs	r2, #2
    2e7c:	3101      	adds	r1, #1
    2e7e:	f7fe febd 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2e82:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e84:	f011 f988 	bl	14198 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2e88:	aa0c      	add	r2, sp, #48	; 0x30
    2e8a:	4629      	mov	r1, r5
    2e8c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2e90:	f7ff f9f0 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2e94:	b130      	cbz	r0, 2ea4 <bt_init+0x68c>
		BT_WARN("Failed to read supported vendor commands");
    2e96:	9401      	str	r4, [sp, #4]
    2e98:	9400      	str	r4, [sp, #0]
    2e9a:	4b41      	ldr	r3, [pc, #260]	; (2fa0 <bt_init+0x788>)
    2e9c:	4a46      	ldr	r2, [pc, #280]	; (2fb8 <bt_init+0x7a0>)
    2e9e:	493c      	ldr	r1, [pc, #240]	; (2f90 <bt_init+0x778>)
    2ea0:	4848      	ldr	r0, [pc, #288]	; (2fc4 <bt_init+0x7ac>)
    2ea2:	e6fc      	b.n	2c9e <bt_init+0x486>
	rp.feat = (void *)rsp->data;
    2ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2ea6:	4848      	ldr	r0, [pc, #288]	; (2fc8 <bt_init+0x7b0>)
    2ea8:	6899      	ldr	r1, [r3, #8]
    2eaa:	2201      	movs	r2, #1
    2eac:	4411      	add	r1, r2
    2eae:	f7fe fea5 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2eb2:	980c      	ldr	r0, [sp, #48]	; 0x30
    2eb4:	f011 f970 	bl	14198 <net_buf_unref>
    2eb8:	e6f3      	b.n	2ca2 <bt_init+0x48a>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2eba:	4b44      	ldr	r3, [pc, #272]	; (2fcc <bt_init+0x7b4>)
    2ebc:	6818      	ldr	r0, [r3, #0]
    2ebe:	889a      	ldrh	r2, [r3, #4]
    2ec0:	900a      	str	r0, [sp, #40]	; 0x28
    2ec2:	799b      	ldrb	r3, [r3, #6]
    2ec4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2ec8:	a90a      	add	r1, sp, #40	; 0x28
    2eca:	2207      	movs	r2, #7
    2ecc:	4840      	ldr	r0, [pc, #256]	; (2fd0 <bt_init+0x7b8>)
    2ece:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2ed2:	f7fe fe7e 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2ed6:	2800      	cmp	r0, #0
    2ed8:	f43f aeef 	beq.w	2cba <bt_init+0x4a2>
		bt_dev_show_info();
    2edc:	f7ff fb58 	bl	2590 <bt_dev_show_info>
		err = bt_conn_init();
    2ee0:	f002 f9f0 	bl	52c4 <bt_conn_init>
		if (err) {
    2ee4:	4605      	mov	r5, r0
    2ee6:	2800      	cmp	r0, #0
    2ee8:	f47f ad77 	bne.w	29da <bt_init+0x1c2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2eec:	2102      	movs	r1, #2
    2eee:	4839      	ldr	r0, [pc, #228]	; (2fd4 <bt_init+0x7bc>)
    2ef0:	f7ff f8ad 	bl	204e <atomic_or>
	bt_le_scan_update(false);
    2ef4:	4628      	mov	r0, r5
    2ef6:	f7ff fc5d 	bl	27b4 <bt_le_scan_update>
    2efa:	e56e      	b.n	29da <bt_init+0x1c2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2efc:	aa09      	add	r2, sp, #36	; 0x24
    2efe:	2100      	movs	r1, #0
    2f00:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2f04:	f7ff f9b6 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2f08:	b140      	cbz	r0, 2f1c <bt_init+0x704>
			BT_WARN("Failed to read static addresses");
    2f0a:	4b33      	ldr	r3, [pc, #204]	; (2fd8 <bt_init+0x7c0>)
    2f0c:	4a2a      	ldr	r2, [pc, #168]	; (2fb8 <bt_init+0x7a0>)
    2f0e:	4920      	ldr	r1, [pc, #128]	; (2f90 <bt_init+0x778>)
    2f10:	4832      	ldr	r0, [pc, #200]	; (2fdc <bt_init+0x7c4>)
    2f12:	9401      	str	r4, [sp, #4]
    2f14:	9400      	str	r4, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    2f16:	f7fe f839 	bl	f8c <printk>
    2f1a:	e026      	b.n	2f6a <bt_init+0x752>
		rp = (void *)rsp->data;
    2f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f1e:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2f20:	784b      	ldrb	r3, [r1, #1]
    2f22:	b1bb      	cbz	r3, 2f54 <bt_init+0x73c>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2f24:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2f26:	2206      	movs	r2, #6
    2f28:	3102      	adds	r1, #2
    2f2a:	482d      	ldr	r0, [pc, #180]	; (2fe0 <bt_init+0x7c8>)
    2f2c:	7033      	strb	r3, [r6, #0]
    2f2e:	f7fe fe65 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    2f32:	9809      	ldr	r0, [sp, #36]	; 0x24
    2f34:	f011 f930 	bl	14198 <net_buf_unref>
		return bt_set_static_addr();
    2f38:	f7ff fafa 	bl	2530 <bt_set_static_addr>
    2f3c:	4605      	mov	r5, r0
		if (err) {
    2f3e:	2800      	cmp	r0, #0
    2f40:	d0cc      	beq.n	2edc <bt_init+0x6c4>
			BT_ERR("Unable to set identity address");
    2f42:	9401      	str	r4, [sp, #4]
    2f44:	9400      	str	r4, [sp, #0]
    2f46:	4b27      	ldr	r3, [pc, #156]	; (2fe4 <bt_init+0x7cc>)
    2f48:	4a27      	ldr	r2, [pc, #156]	; (2fe8 <bt_init+0x7d0>)
    2f4a:	4911      	ldr	r1, [pc, #68]	; (2f90 <bt_init+0x778>)
    2f4c:	4827      	ldr	r0, [pc, #156]	; (2fec <bt_init+0x7d4>)
    2f4e:	f7fe f81d 	bl	f8c <printk>
    2f52:	e542      	b.n	29da <bt_init+0x1c2>
		BT_WARN("No static addresses stored in controller");
    2f54:	9401      	str	r4, [sp, #4]
    2f56:	9400      	str	r4, [sp, #0]
    2f58:	4b1f      	ldr	r3, [pc, #124]	; (2fd8 <bt_init+0x7c0>)
    2f5a:	4a17      	ldr	r2, [pc, #92]	; (2fb8 <bt_init+0x7a0>)
    2f5c:	490c      	ldr	r1, [pc, #48]	; (2f90 <bt_init+0x778>)
    2f5e:	4824      	ldr	r0, [pc, #144]	; (2ff0 <bt_init+0x7d8>)
    2f60:	f7fe f814 	bl	f8c <printk>
		net_buf_unref(rsp);
    2f64:	9809      	ldr	r0, [sp, #36]	; 0x24
    2f66:	f011 f917 	bl	14198 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2f6a:	4819      	ldr	r0, [pc, #100]	; (2fd0 <bt_init+0x7b8>)
    2f6c:	f7ff fad2 	bl	2514 <bt_addr_le_create_static>
		if (err) {
    2f70:	4605      	mov	r5, r0
    2f72:	2800      	cmp	r0, #0
    2f74:	d1e5      	bne.n	2f42 <bt_init+0x72a>
		BT_WARN("Using temporary static random address %s",
    2f76:	481a      	ldr	r0, [pc, #104]	; (2fe0 <bt_init+0x7c8>)
    2f78:	f7fe fec6 	bl	1d08 <bt_addr_str>
    2f7c:	9402      	str	r4, [sp, #8]
    2f7e:	9001      	str	r0, [sp, #4]
    2f80:	9400      	str	r4, [sp, #0]
    2f82:	4b15      	ldr	r3, [pc, #84]	; (2fd8 <bt_init+0x7c0>)
    2f84:	4a0c      	ldr	r2, [pc, #48]	; (2fb8 <bt_init+0x7a0>)
    2f86:	4902      	ldr	r1, [pc, #8]	; (2f90 <bt_init+0x778>)
    2f88:	481a      	ldr	r0, [pc, #104]	; (2ff4 <bt_init+0x7dc>)
    2f8a:	f7fd ffff 	bl	f8c <printk>
    2f8e:	e7d3      	b.n	2f38 <bt_init+0x720>
    2f90:	00017241 	.word	0x00017241
    2f94:	00016a15 	.word	0x00016a15
    2f98:	00017570 	.word	0x00017570
    2f9c:	00017678 	.word	0x00017678
    2fa0:	0001666b 	.word	0x0001666b
    2fa4:	000166f7 	.word	0x000166f7
    2fa8:	00017564 	.word	0x00017564
    2fac:	00016a3e 	.word	0x00016a3e
    2fb0:	00017668 	.word	0x00017668
    2fb4:	00016a66 	.word	0x00016a66
    2fb8:	0001727c 	.word	0x0001727c
    2fbc:	00016aa3 	.word	0x00016aa3
    2fc0:	20003ae7 	.word	0x20003ae7
    2fc4:	00016adc 	.word	0x00016adc
    2fc8:	20003ae6 	.word	0x20003ae6
    2fcc:	00015d64 	.word	0x00015d64
    2fd0:	20003a88 	.word	0x20003a88
    2fd4:	20003af8 	.word	0x20003af8
    2fd8:	0001664c 	.word	0x0001664c
    2fdc:	00016b5a 	.word	0x00016b5a
    2fe0:	20003a89 	.word	0x20003a89
    2fe4:	00016677 	.word	0x00016677
    2fe8:	000171f2 	.word	0x000171f2
    2fec:	00016c38 	.word	0x00016c38
    2ff0:	00016b8a 	.word	0x00016b8a
    2ff4:	00016bff 	.word	0x00016bff

00002ff8 <init_work>:

static void init_work(struct k_work *work)
{
    2ff8:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2ffa:	f7ff fc0d 	bl	2818 <bt_init>
	if (ready_cb) {
    2ffe:	4b03      	ldr	r3, [pc, #12]	; (300c <init_work+0x14>)
    3000:	681b      	ldr	r3, [r3, #0]
    3002:	b113      	cbz	r3, 300a <init_work+0x12>
		ready_cb(err);
	}
}
    3004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    3008:	4718      	bx	r3
    300a:	bd10      	pop	{r4, pc}
    300c:	200002f8 	.word	0x200002f8

00003010 <hci_le_set_phy.isra.27>:
static int hci_le_set_phy(struct bt_conn *conn)
    3010:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3012:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    3014:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3016:	f242 0032 	movw	r0, #8242	; 0x2032
    301a:	f7ff f8cd 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    301e:	4605      	mov	r5, r0
    3020:	b198      	cbz	r0, 304a <hci_le_set_phy.isra.27+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    3022:	2107      	movs	r1, #7
    3024:	3008      	adds	r0, #8
    3026:	f011 f8e9 	bl	141fc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    302a:	8823      	ldrh	r3, [r4, #0]
    302c:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    302e:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3030:	2302      	movs	r3, #2
	cp->all_phys = 0;
    3032:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3034:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3036:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    3038:	7144      	strb	r4, [r0, #5]
    303a:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    303c:	4629      	mov	r1, r5
    303e:	f242 0032 	movw	r0, #8242	; 0x2032
    3042:	f7ff fb1d 	bl	2680 <bt_hci_cmd_send>
	return 0;
    3046:	4620      	mov	r0, r4
    3048:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    304a:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    304e:	bd38      	pop	{r3, r4, r5, pc}

00003050 <hci_le_set_data_len.isra.28>:
static int hci_le_set_data_len(struct bt_conn *conn)
    3050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3052:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    3054:	aa01      	add	r2, sp, #4
    3056:	2100      	movs	r1, #0
    3058:	f242 002f 	movw	r0, #8239	; 0x202f
    305c:	f7ff f90a 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    3060:	b9d8      	cbnz	r0, 309a <hci_le_set_data_len.isra.28+0x4a>
	rp = (void *)rsp->data;
    3062:	9801      	ldr	r0, [sp, #4]
    3064:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    3066:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    306a:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    306e:	f011 f893 	bl	14198 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    3072:	2106      	movs	r1, #6
    3074:	f242 0022 	movw	r0, #8226	; 0x2022
    3078:	f7ff f89e 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    307c:	4604      	mov	r4, r0
    307e:	b170      	cbz	r0, 309e <hci_le_set_data_len.isra.28+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    3080:	2106      	movs	r1, #6
    3082:	3008      	adds	r0, #8
    3084:	f011 f8ba 	bl	141fc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3088:	883b      	ldrh	r3, [r7, #0]
    308a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    308c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    308e:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    3090:	4621      	mov	r1, r4
    3092:	f242 0022 	movw	r0, #8226	; 0x2022
    3096:	f7ff faf3 	bl	2680 <bt_hci_cmd_send>
}
    309a:	b003      	add	sp, #12
    309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    309e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    30a2:	e7fa      	b.n	309a <hci_le_set_data_len.isra.28+0x4a>

000030a4 <le_enh_conn_complete>:
{
    30a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30a8:	b08d      	sub	sp, #52	; 0x34
    30aa:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30ac:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    30b0:	4e70      	ldr	r6, [pc, #448]	; (3274 <le_enh_conn_complete+0x1d0>)
    30b2:	f012 f8eb 	bl	1528c <_impl_k_current_get>
    30b6:	1d2c      	adds	r4, r5, #4
    30b8:	4681      	mov	r9, r0
    30ba:	4620      	mov	r0, r4
    30bc:	f895 a000 	ldrb.w	sl, [r5]
    30c0:	f895 b003 	ldrb.w	fp, [r5, #3]
    30c4:	f7fe fe46 	bl	1d54 <bt_addr_le_str>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30c8:	fa1f f887 	uxth.w	r8, r7
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    30cc:	9005      	str	r0, [sp, #20]
    30ce:	4b6a      	ldr	r3, [pc, #424]	; (3278 <le_enh_conn_complete+0x1d4>)
    30d0:	9606      	str	r6, [sp, #24]
    30d2:	f8cd b010 	str.w	fp, [sp, #16]
    30d6:	f8cd 800c 	str.w	r8, [sp, #12]
    30da:	e88d 0640 	stmia.w	sp, {r6, r9, sl}
    30de:	4a67      	ldr	r2, [pc, #412]	; (327c <le_enh_conn_complete+0x1d8>)
    30e0:	4967      	ldr	r1, [pc, #412]	; (3280 <le_enh_conn_complete+0x1dc>)
    30e2:	4868      	ldr	r0, [pc, #416]	; (3284 <le_enh_conn_complete+0x1e0>)
    30e4:	f7fd ff52 	bl	f8c <printk>
	if (evt->status) {
    30e8:	782b      	ldrb	r3, [r5, #0]
    30ea:	b183      	cbz	r3, 310e <le_enh_conn_complete+0x6a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    30ec:	2102      	movs	r1, #2
    30ee:	2000      	movs	r0, #0
    30f0:	f001 fc7a 	bl	49e8 <bt_conn_lookup_state_le>
		if (!conn) {
    30f4:	4604      	mov	r4, r0
    30f6:	b138      	cbz	r0, 3108 <le_enh_conn_complete+0x64>
		conn->err = evt->status;
    30f8:	782b      	ldrb	r3, [r5, #0]
    30fa:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    30fc:	2100      	movs	r1, #0
    30fe:	f001 fd47 	bl	4b90 <bt_conn_set_state>
		bt_conn_unref(conn);
    3102:	4620      	mov	r0, r4
    3104:	f001 fc8e 	bl	4a24 <bt_conn_unref>
}
    3108:	b00d      	add	sp, #52	; 0x34
    310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    310e:	4621      	mov	r1, r4
    3110:	a80a      	add	r0, sp, #40	; 0x28
    3112:	f7fe ff99 	bl	2048 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3116:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    311a:	3b02      	subs	r3, #2
    311c:	b2db      	uxtb	r3, r3
    311e:	2b01      	cmp	r3, #1
    3120:	d828      	bhi.n	3174 <le_enh_conn_complete+0xd0>
    3122:	2206      	movs	r2, #6
    3124:	f105 0111 	add.w	r1, r5, #17
    3128:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    312c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    3130:	f7fe fd64 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    3134:	2301      	movs	r3, #1
    3136:	f88d 3020 	strb.w	r3, [sp, #32]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    313a:	2102      	movs	r1, #2
    313c:	a80a      	add	r0, sp, #40	; 0x28
    313e:	f001 fc53 	bl	49e8 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3142:	78eb      	ldrb	r3, [r5, #3]
    3144:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    3146:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3148:	d109      	bne.n	315e <le_enh_conn_complete+0xba>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    314a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    314e:	484e      	ldr	r0, [pc, #312]	; (3288 <le_enh_conn_complete+0x1e4>)
    3150:	f7fe ff8e 	bl	2070 <atomic_and>
		if (!conn) {
    3154:	b99c      	cbnz	r4, 317e <le_enh_conn_complete+0xda>
			conn = bt_conn_add_le(&id_addr);
    3156:	a80a      	add	r0, sp, #40	; 0x28
    3158:	f001 fb9a 	bl	4890 <bt_conn_add_le>
    315c:	4604      	mov	r4, r0
	if (!conn) {
    315e:	b974      	cbnz	r4, 317e <le_enh_conn_complete+0xda>
		BT_ERR("Unable to add new conn for handle %u", handle);
    3160:	9602      	str	r6, [sp, #8]
    3162:	e88d 0140 	stmia.w	sp, {r6, r8}
    3166:	4b44      	ldr	r3, [pc, #272]	; (3278 <le_enh_conn_complete+0x1d4>)
    3168:	4a48      	ldr	r2, [pc, #288]	; (328c <le_enh_conn_complete+0x1e8>)
    316a:	4945      	ldr	r1, [pc, #276]	; (3280 <le_enh_conn_complete+0x1dc>)
    316c:	4848      	ldr	r0, [pc, #288]	; (3290 <le_enh_conn_complete+0x1ec>)
    316e:	f7fd ff0d 	bl	f8c <printk>
		return;
    3172:	e7c9      	b.n	3108 <le_enh_conn_complete+0x64>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    3174:	4621      	mov	r1, r4
    3176:	a808      	add	r0, sp, #32
    3178:	f7fe ff66 	bl	2048 <bt_addr_le_copy>
    317c:	e7dd      	b.n	313a <le_enh_conn_complete+0x96>
	conn->handle   = handle;
    317e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3180:	a90a      	add	r1, sp, #40	; 0x28
	conn->handle   = handle;
    3182:	f820 7b44 	strh.w	r7, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3186:	f7fe ff5f 	bl	2048 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    318a:	7e2a      	ldrb	r2, [r5, #24]
    318c:	7deb      	ldrb	r3, [r5, #23]
    318e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3192:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3196:	7eaa      	ldrb	r2, [r5, #26]
    3198:	7e6b      	ldrb	r3, [r5, #25]
    319a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    319e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    31a2:	7eeb      	ldrb	r3, [r5, #27]
    31a4:	7f2a      	ldrb	r2, [r5, #28]
    31a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    31aa:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    31ae:	78ee      	ldrb	r6, [r5, #3]
    31b0:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    31b2:	2e01      	cmp	r6, #1
    31b4:	d11a      	bne.n	31ec <le_enh_conn_complete+0x148>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    31b6:	4f37      	ldr	r7, [pc, #220]	; (3294 <le_enh_conn_complete+0x1f0>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    31b8:	a908      	add	r1, sp, #32
    31ba:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    31be:	f7fe ff43 	bl	2048 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    31c2:	4639      	mov	r1, r7
    31c4:	f104 0052 	add.w	r0, r4, #82	; 0x52
    31c8:	f7fe ff3e 	bl	2048 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    31cc:	2107      	movs	r1, #7
    31ce:	f107 0070 	add.w	r0, r7, #112	; 0x70
    31d2:	f7fe ffe3 	bl	219c <atomic_test_bit>
    31d6:	b148      	cbz	r0, 31ec <le_enh_conn_complete+0x148>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    31d8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    31dc:	2200      	movs	r2, #0
    31de:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    31e2:	4313      	orrs	r3, r2
    31e4:	d002      	beq.n	31ec <le_enh_conn_complete+0x148>
			set_advertise_enable(true);
    31e6:	4630      	mov	r0, r6
    31e8:	f7ff f94a 	bl	2480 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    31ec:	2103      	movs	r1, #3
    31ee:	4620      	mov	r0, r4
    31f0:	f001 fcce 	bl	4b90 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    31f4:	7a63      	ldrb	r3, [r4, #9]
    31f6:	2b03      	cmp	r3, #3
    31f8:	d118      	bne.n	322c <le_enh_conn_complete+0x188>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    31fa:	78eb      	ldrb	r3, [r5, #3]
    31fc:	b123      	cbz	r3, 3208 <le_enh_conn_complete+0x164>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    31fe:	4b25      	ldr	r3, [pc, #148]	; (3294 <le_enh_conn_complete+0x1f0>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3200:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3204:	0719      	lsls	r1, r3, #28
    3206:	d518      	bpl.n	323a <le_enh_conn_complete+0x196>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    3208:	2102      	movs	r1, #2
    320a:	f242 0016 	movw	r0, #8214	; 0x2016
    320e:	f7fe ffd3 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    3212:	4605      	mov	r5, r0
    3214:	b188      	cbz	r0, 323a <le_enh_conn_complete+0x196>
	cp = net_buf_add(buf, sizeof(*cp));
    3216:	2102      	movs	r1, #2
    3218:	3008      	adds	r0, #8
    321a:	f010 ffef 	bl	141fc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    321e:	8823      	ldrh	r3, [r4, #0]
    3220:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    3222:	4629      	mov	r1, r5
    3224:	f242 0016 	movw	r0, #8214	; 0x2016
    3228:	f7ff fa2a 	bl	2680 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    322c:	4620      	mov	r0, r4
    322e:	f001 fbf9 	bl	4a24 <bt_conn_unref>
	bt_le_scan_update(false);
    3232:	2000      	movs	r0, #0
    3234:	f7ff fabe 	bl	27b4 <bt_le_scan_update>
    3238:	e766      	b.n	3108 <le_enh_conn_complete+0x64>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    323a:	4d16      	ldr	r5, [pc, #88]	; (3294 <le_enh_conn_complete+0x1f0>)
    323c:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3240:	07d2      	lsls	r2, r2, #31
    3242:	d508      	bpl.n	3256 <le_enh_conn_complete+0x1b2>
		err = hci_le_set_phy(conn);
    3244:	4620      	mov	r0, r4
    3246:	f7ff fee3 	bl	3010 <hci_le_set_phy.isra.27>
		if (!err) {
    324a:	b920      	cbnz	r0, 3256 <le_enh_conn_complete+0x1b2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    324c:	2180      	movs	r1, #128	; 0x80
    324e:	1d20      	adds	r0, r4, #4
    3250:	f7fe fefd 	bl	204e <atomic_or>
    3254:	e7ea      	b.n	322c <le_enh_conn_complete+0x188>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    3256:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    325a:	069b      	lsls	r3, r3, #26
    325c:	d506      	bpl.n	326c <le_enh_conn_complete+0x1c8>
		err = hci_le_set_data_len(conn);
    325e:	4620      	mov	r0, r4
    3260:	f7ff fef6 	bl	3050 <hci_le_set_data_len.isra.28>
		if (!err) {
    3264:	b910      	cbnz	r0, 326c <le_enh_conn_complete+0x1c8>
    3266:	f44f 7180 	mov.w	r1, #256	; 0x100
    326a:	e7f0      	b.n	324e <le_enh_conn_complete+0x1aa>
	update_conn_param(conn);
    326c:	4620      	mov	r0, r4
    326e:	f7fe ff11 	bl	2094 <update_conn_param>
    3272:	e7db      	b.n	322c <le_enh_conn_complete+0x188>
    3274:	00015e19 	.word	0x00015e19
    3278:	0001640c 	.word	0x0001640c
    327c:	0001723a 	.word	0x0001723a
    3280:	00017241 	.word	0x00017241
    3284:	000174d9 	.word	0x000174d9
    3288:	20003af8 	.word	0x20003af8
    328c:	000171f2 	.word	0x000171f2
    3290:	0001750d 	.word	0x0001750d
    3294:	20003a88 	.word	0x20003a88

00003298 <le_conn_param_neg_reply>:
{
    3298:	b570      	push	{r4, r5, r6, lr}
    329a:	4606      	mov	r6, r0
    329c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    329e:	f242 0021 	movw	r0, #8225	; 0x2021
    32a2:	2103      	movs	r1, #3
    32a4:	f7fe ff88 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    32a8:	4604      	mov	r4, r0
    32aa:	b160      	cbz	r0, 32c6 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    32ac:	2103      	movs	r1, #3
    32ae:	3008      	adds	r0, #8
    32b0:	f010 ffa4 	bl	141fc <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    32b4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    32b6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    32b8:	4621      	mov	r1, r4
    32ba:	f242 0021 	movw	r0, #8225	; 0x2021
}
    32be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    32c2:	f7ff b9dd 	b.w	2680 <bt_hci_cmd_send>
}
    32c6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    32ca:	bd70      	pop	{r4, r5, r6, pc}

000032cc <hci_tx_thread>:
{
    32cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32d0:	b089      	sub	sp, #36	; 0x24
    32d2:	f011 ffdb 	bl	1528c <_impl_k_current_get>
	BT_DBG("Started");
    32d6:	4c81      	ldr	r4, [pc, #516]	; (34dc <hci_tx_thread+0x210>)
    32d8:	9001      	str	r0, [sp, #4]
    32da:	9402      	str	r4, [sp, #8]
    32dc:	9400      	str	r4, [sp, #0]
    32de:	4b80      	ldr	r3, [pc, #512]	; (34e0 <hci_tx_thread+0x214>)
    32e0:	4a80      	ldr	r2, [pc, #512]	; (34e4 <hci_tx_thread+0x218>)
    32e2:	4981      	ldr	r1, [pc, #516]	; (34e8 <hci_tx_thread+0x21c>)
    32e4:	4881      	ldr	r0, [pc, #516]	; (34ec <hci_tx_thread+0x220>)
		events[0].state = K_POLL_STATE_NOT_READY;
    32e6:	f8df a210 	ldr.w	sl, [pc, #528]	; 34f8 <hci_tx_thread+0x22c>
	BT_DBG("Started");
    32ea:	f7fd fe4f 	bl	f8c <printk>
		events[0].state = K_POLL_STATE_NOT_READY;
    32ee:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    32f2:	487f      	ldr	r0, [pc, #508]	; (34f0 <hci_tx_thread+0x224>)
		events[0].state = K_POLL_STATE_NOT_READY;
    32f4:	f36f 1307 	bfc	r3, #4, #4
    32f8:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    32fc:	f001 fbda 	bl	4ab4 <bt_conn_prepare_events>
    3300:	f100 0801 	add.w	r8, r0, #1
    3304:	f011 ffc2 	bl	1528c <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    3308:	4a76      	ldr	r2, [pc, #472]	; (34e4 <hci_tx_thread+0x218>)
    330a:	9001      	str	r0, [sp, #4]
    330c:	4976      	ldr	r1, [pc, #472]	; (34e8 <hci_tx_thread+0x21c>)
    330e:	9403      	str	r4, [sp, #12]
    3310:	f8cd 8008 	str.w	r8, [sp, #8]
    3314:	9400      	str	r4, [sp, #0]
    3316:	4b72      	ldr	r3, [pc, #456]	; (34e0 <hci_tx_thread+0x214>)
    3318:	4876      	ldr	r0, [pc, #472]	; (34f4 <hci_tx_thread+0x228>)
    331a:	f7fd fe37 	bl	f8c <printk>

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    331e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3322:	4641      	mov	r1, r8
    3324:	4874      	ldr	r0, [pc, #464]	; (34f8 <hci_tx_thread+0x22c>)
    3326:	f012 fc01 	bl	15b2c <_impl_k_poll>
		BT_ASSERT(err == 0);
    332a:	b168      	cbz	r0, 3348 <hci_tx_thread+0x7c>
    332c:	4b6c      	ldr	r3, [pc, #432]	; (34e0 <hci_tx_thread+0x214>)
    332e:	4a73      	ldr	r2, [pc, #460]	; (34fc <hci_tx_thread+0x230>)
    3330:	496d      	ldr	r1, [pc, #436]	; (34e8 <hci_tx_thread+0x21c>)
    3332:	4873      	ldr	r0, [pc, #460]	; (3500 <hci_tx_thread+0x234>)
    3334:	9401      	str	r4, [sp, #4]
    3336:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf);
    3338:	f7fd fe28 	bl	f8c <printk>
    333c:	4040      	eors	r0, r0
    333e:	f380 8811 	msr	BASEPRI, r0
    3342:	f04f 0004 	mov.w	r0, #4
    3346:	df02      	svc	2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3348:	f011 ffa0 	bl	1528c <_impl_k_current_get>
	BT_DBG("count %d", count);
    334c:	9403      	str	r4, [sp, #12]
    334e:	9001      	str	r0, [sp, #4]
    3350:	f8cd 8008 	str.w	r8, [sp, #8]
    3354:	9400      	str	r4, [sp, #0]
    3356:	4b6b      	ldr	r3, [pc, #428]	; (3504 <hci_tx_thread+0x238>)
    3358:	4a62      	ldr	r2, [pc, #392]	; (34e4 <hci_tx_thread+0x218>)
    335a:	4963      	ldr	r1, [pc, #396]	; (34e8 <hci_tx_thread+0x21c>)
    335c:	486a      	ldr	r0, [pc, #424]	; (3508 <hci_tx_thread+0x23c>)
    335e:	4d66      	ldr	r5, [pc, #408]	; (34f8 <hci_tx_thread+0x22c>)
		BT_DBG("ev->state %u", ev->state);
    3360:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 3504 <hci_tx_thread+0x238>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3364:	4e69      	ldr	r6, [pc, #420]	; (350c <hci_tx_thread+0x240>)
	BT_DBG("count %d", count);
    3366:	f7fd fe11 	bl	f8c <printk>
	for (; count; ev++, count--) {
    336a:	f1b8 0f00 	cmp.w	r8, #0
    336e:	d102      	bne.n	3376 <hci_tx_thread+0xaa>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3370:	f011 ff5c 	bl	1522c <_impl_k_yield>
    3374:	e7bb      	b.n	32ee <hci_tx_thread+0x22>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3376:	f011 ff89 	bl	1528c <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    337a:	7b6b      	ldrb	r3, [r5, #13]
    337c:	9001      	str	r0, [sp, #4]
    337e:	091b      	lsrs	r3, r3, #4
    3380:	9302      	str	r3, [sp, #8]
    3382:	9403      	str	r4, [sp, #12]
    3384:	465b      	mov	r3, fp
    3386:	9400      	str	r4, [sp, #0]
    3388:	4a56      	ldr	r2, [pc, #344]	; (34e4 <hci_tx_thread+0x218>)
    338a:	4957      	ldr	r1, [pc, #348]	; (34e8 <hci_tx_thread+0x21c>)
    338c:	4860      	ldr	r0, [pc, #384]	; (3510 <hci_tx_thread+0x244>)
    338e:	f7fd fdfd 	bl	f8c <printk>
		switch (ev->state) {
    3392:	7b6b      	ldrb	r3, [r5, #13]
    3394:	091b      	lsrs	r3, r3, #4
    3396:	2b01      	cmp	r3, #1
    3398:	f240 8081 	bls.w	349e <hci_tx_thread+0x1d2>
    339c:	2b04      	cmp	r3, #4
    339e:	f040 8092 	bne.w	34c6 <hci_tx_thread+0x1fa>
			if (ev->tag == BT_EVENT_CMD_TX) {
    33a2:	f895 900c 	ldrb.w	r9, [r5, #12]
    33a6:	f1b9 0f00 	cmp.w	r9, #0
    33aa:	d17c      	bne.n	34a6 <hci_tx_thread+0x1da>
    33ac:	f011 ff6e 	bl	1528c <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    33b0:	4b58      	ldr	r3, [pc, #352]	; (3514 <hci_tx_thread+0x248>)
    33b2:	9001      	str	r0, [sp, #4]
    33b4:	4a4b      	ldr	r2, [pc, #300]	; (34e4 <hci_tx_thread+0x218>)
    33b6:	494c      	ldr	r1, [pc, #304]	; (34e8 <hci_tx_thread+0x21c>)
    33b8:	9402      	str	r4, [sp, #8]
    33ba:	9400      	str	r4, [sp, #0]
    33bc:	4856      	ldr	r0, [pc, #344]	; (3518 <hci_tx_thread+0x24c>)
    33be:	f7fd fde5 	bl	f8c <printk>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    33c2:	4649      	mov	r1, r9
    33c4:	4855      	ldr	r0, [pc, #340]	; (351c <hci_tx_thread+0x250>)
    33c6:	f010 febd 	bl	14144 <net_buf_get>
	BT_ASSERT(buf);
    33ca:	4607      	mov	r7, r0
    33cc:	b930      	cbnz	r0, 33dc <hci_tx_thread+0x110>
    33ce:	9401      	str	r4, [sp, #4]
    33d0:	9400      	str	r4, [sp, #0]
    33d2:	4b50      	ldr	r3, [pc, #320]	; (3514 <hci_tx_thread+0x248>)
    33d4:	4a49      	ldr	r2, [pc, #292]	; (34fc <hci_tx_thread+0x230>)
    33d6:	4944      	ldr	r1, [pc, #272]	; (34e8 <hci_tx_thread+0x21c>)
    33d8:	4851      	ldr	r0, [pc, #324]	; (3520 <hci_tx_thread+0x254>)
    33da:	e7ad      	b.n	3338 <hci_tx_thread+0x6c>
    33dc:	f011 ff56 	bl	1528c <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    33e0:	4b4c      	ldr	r3, [pc, #304]	; (3514 <hci_tx_thread+0x248>)
    33e2:	9001      	str	r0, [sp, #4]
    33e4:	4a3f      	ldr	r2, [pc, #252]	; (34e4 <hci_tx_thread+0x218>)
    33e6:	4940      	ldr	r1, [pc, #256]	; (34e8 <hci_tx_thread+0x21c>)
    33e8:	9402      	str	r4, [sp, #8]
    33ea:	9400      	str	r4, [sp, #0]
    33ec:	484d      	ldr	r0, [pc, #308]	; (3524 <hci_tx_thread+0x258>)
    33ee:	f7fd fdcd 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    33f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33f6:	484c      	ldr	r0, [pc, #304]	; (3528 <hci_tx_thread+0x25c>)
    33f8:	f011 ff7f 	bl	152fa <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    33fc:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
    3400:	b16b      	cbz	r3, 341e <hci_tx_thread+0x152>
		BT_ERR("Uncleared pending sent_cmd");
    3402:	4b44      	ldr	r3, [pc, #272]	; (3514 <hci_tx_thread+0x248>)
    3404:	4a3d      	ldr	r2, [pc, #244]	; (34fc <hci_tx_thread+0x230>)
    3406:	4938      	ldr	r1, [pc, #224]	; (34e8 <hci_tx_thread+0x21c>)
    3408:	9401      	str	r4, [sp, #4]
    340a:	9400      	str	r4, [sp, #0]
    340c:	4847      	ldr	r0, [pc, #284]	; (352c <hci_tx_thread+0x260>)
    340e:	f7fd fdbd 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    3412:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    3416:	f010 febf 	bl	14198 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    341a:	f8c6 90c0 	str.w	r9, [r6, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    341e:	4638      	mov	r0, r7
    3420:	f010 fee8 	bl	141f4 <net_buf_ref>
    3424:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3428:	f011 ff30 	bl	1528c <_impl_k_current_get>
    342c:	9007      	str	r0, [sp, #28]
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    342e:	4638      	mov	r0, r7
    3430:	f010 fdf4 	bl	1401c <net_buf_id>
    3434:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3540 <hci_tx_thread+0x274>
    3438:	9404      	str	r4, [sp, #16]
    343a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    343e:	9703      	str	r7, [sp, #12]
    3440:	8842      	ldrh	r2, [r0, #2]
    3442:	9b07      	ldr	r3, [sp, #28]
    3444:	9202      	str	r2, [sp, #8]
    3446:	9301      	str	r3, [sp, #4]
    3448:	9400      	str	r4, [sp, #0]
    344a:	4b32      	ldr	r3, [pc, #200]	; (3514 <hci_tx_thread+0x248>)
    344c:	4a25      	ldr	r2, [pc, #148]	; (34e4 <hci_tx_thread+0x218>)
    344e:	4926      	ldr	r1, [pc, #152]	; (34e8 <hci_tx_thread+0x21c>)
    3450:	4837      	ldr	r0, [pc, #220]	; (3530 <hci_tx_thread+0x264>)
    3452:	f7fd fd9b 	bl	f8c <printk>
	err = bt_send(buf);
    3456:	4638      	mov	r0, r7
    3458:	f7ff f8e8 	bl	262c <bt_send>
	if (err) {
    345c:	b1f8      	cbz	r0, 349e <hci_tx_thread+0x1d2>
		BT_ERR("Unable to send to driver (err %d)", err);
    345e:	4b2d      	ldr	r3, [pc, #180]	; (3514 <hci_tx_thread+0x248>)
    3460:	4a26      	ldr	r2, [pc, #152]	; (34fc <hci_tx_thread+0x230>)
    3462:	4921      	ldr	r1, [pc, #132]	; (34e8 <hci_tx_thread+0x21c>)
    3464:	9001      	str	r0, [sp, #4]
    3466:	9402      	str	r4, [sp, #8]
    3468:	9400      	str	r4, [sp, #0]
    346a:	4832      	ldr	r0, [pc, #200]	; (3534 <hci_tx_thread+0x268>)
    346c:	f7fd fd8e 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3470:	482d      	ldr	r0, [pc, #180]	; (3528 <hci_tx_thread+0x25c>)
    3472:	f011 ff1a 	bl	152aa <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    3476:	4638      	mov	r0, r7
    3478:	f010 fdd0 	bl	1401c <net_buf_id>
    347c:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3480:	2200      	movs	r2, #0
    3482:	211f      	movs	r1, #31
    3484:	8840      	ldrh	r0, [r0, #2]
    3486:	f7fe fe13 	bl	20b0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    348a:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    348e:	f010 fe83 	bl	14198 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3492:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3494:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    3496:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
		net_buf_unref(buf);
    349a:	f010 fe7d 	bl	14198 <net_buf_unref>
	for (; count; ev++, count--) {
    349e:	3514      	adds	r5, #20
    34a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    34a4:	e761      	b.n	336a <hci_tx_thread+0x9e>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    34a6:	f1b9 0f01 	cmp.w	r9, #1
    34aa:	d104      	bne.n	34b6 <hci_tx_thread+0x1ea>
					conn = CONTAINER_OF(ev->fifo,
    34ac:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    34ae:	3818      	subs	r0, #24
    34b0:	f001 f8ea 	bl	4688 <bt_conn_notify_tx>
    34b4:	e7f3      	b.n	349e <hci_tx_thread+0x1d2>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    34b6:	f1b9 0f02 	cmp.w	r9, #2
    34ba:	d1f0      	bne.n	349e <hci_tx_thread+0x1d2>
					conn = CONTAINER_OF(ev->fifo,
    34bc:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    34be:	3828      	subs	r0, #40	; 0x28
    34c0:	f001 fe4e 	bl	5160 <bt_conn_process_tx>
    34c4:	e7eb      	b.n	349e <hci_tx_thread+0x1d2>
		switch (ev->state) {
    34c6:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    34c8:	9402      	str	r4, [sp, #8]
    34ca:	9400      	str	r4, [sp, #0]
    34cc:	465b      	mov	r3, fp
    34ce:	4a1a      	ldr	r2, [pc, #104]	; (3538 <hci_tx_thread+0x26c>)
    34d0:	4905      	ldr	r1, [pc, #20]	; (34e8 <hci_tx_thread+0x21c>)
    34d2:	481a      	ldr	r0, [pc, #104]	; (353c <hci_tx_thread+0x270>)
    34d4:	f7fd fd5a 	bl	f8c <printk>
    34d8:	e7e1      	b.n	349e <hci_tx_thread+0x1d2>
    34da:	bf00      	nop
    34dc:	00015e19 	.word	0x00015e19
    34e0:	0001654a 	.word	0x0001654a
    34e4:	0001723a 	.word	0x0001723a
    34e8:	00017241 	.word	0x00017241
    34ec:	0001730b 	.word	0x0001730b
    34f0:	20003b74 	.word	0x20003b74
    34f4:	00017328 	.word	0x00017328
    34f8:	20003b60 	.word	0x20003b60
    34fc:	000171f2 	.word	0x000171f2
    3500:	0001735b 	.word	0x0001735b
    3504:	0001653b 	.word	0x0001653b
    3508:	00017385 	.word	0x00017385
    350c:	20003a88 	.word	0x20003a88
    3510:	000173a3 	.word	0x000173a3
    3514:	00016532 	.word	0x00016532
    3518:	000173c5 	.word	0x000173c5
    351c:	20003b4c 	.word	0x20003b4c
    3520:	000173ee 	.word	0x000173ee
    3524:	00017413 	.word	0x00017413
    3528:	20003b30 	.word	0x20003b30
    352c:	0001743e 	.word	0x0001743e
    3530:	00017469 	.word	0x00017469
    3534:	0001686b 	.word	0x0001686b
    3538:	0001727c 	.word	0x0001727c
    353c:	000174a8 	.word	0x000174a8
    3540:	200002a0 	.word	0x200002a0

00003544 <bt_recv>:
{
    3544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3548:	b097      	sub	sp, #92	; 0x5c
    354a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    354c:	f011 fe9e 	bl	1528c <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    3550:	4ead      	ldr	r6, [pc, #692]	; (3808 <bt_recv+0x2c4>)
    3552:	89a3      	ldrh	r3, [r4, #12]
    3554:	9303      	str	r3, [sp, #12]
    3556:	9001      	str	r0, [sp, #4]
    3558:	9604      	str	r6, [sp, #16]
    355a:	9402      	str	r4, [sp, #8]
    355c:	9600      	str	r6, [sp, #0]
    355e:	4bab      	ldr	r3, [pc, #684]	; (380c <bt_recv+0x2c8>)
    3560:	4aab      	ldr	r2, [pc, #684]	; (3810 <bt_recv+0x2cc>)
    3562:	49ac      	ldr	r1, [pc, #688]	; (3814 <bt_recv+0x2d0>)
    3564:	48ac      	ldr	r0, [pc, #688]	; (3818 <bt_recv+0x2d4>)
    3566:	f7fd fd11 	bl	f8c <printk>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    356a:	7d27      	ldrb	r7, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    356c:	2f01      	cmp	r7, #1
    356e:	4635      	mov	r5, r6
    3570:	d05b      	beq.n	362a <bt_recv+0xe6>
    3572:	2f03      	cmp	r7, #3
    3574:	f040 8420 	bne.w	3db8 <bt_recv+0x874>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3578:	68a7      	ldr	r7, [r4, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    357a:	887d      	ldrh	r5, [r7, #2]
    357c:	f011 fe86 	bl	1528c <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    3580:	4aa3      	ldr	r2, [pc, #652]	; (3810 <bt_recv+0x2cc>)
    3582:	9001      	str	r0, [sp, #4]
    3584:	4ba5      	ldr	r3, [pc, #660]	; (381c <bt_recv+0x2d8>)
    3586:	49a3      	ldr	r1, [pc, #652]	; (3814 <bt_recv+0x2d0>)
    3588:	9603      	str	r6, [sp, #12]
    358a:	9402      	str	r4, [sp, #8]
    358c:	9600      	str	r6, [sp, #0]
    358e:	48a4      	ldr	r0, [pc, #656]	; (3820 <bt_recv+0x2dc>)
    3590:	f7fd fcfc 	bl	f8c <printk>
	handle = sys_le16_to_cpu(hdr->handle);
    3594:	883b      	ldrh	r3, [r7, #0]
	flags = bt_acl_flags(handle);
    3596:	0b1f      	lsrs	r7, r3, #12
	acl(buf)->handle = bt_acl_handle(handle);
    3598:	f3c3 030b 	ubfx	r3, r3, #0, #12
    359c:	82e3      	strh	r3, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    359e:	23ff      	movs	r3, #255	; 0xff
    35a0:	7563      	strb	r3, [r4, #21]
	net_buf_pull(buf, sizeof(*hdr));
    35a2:	2104      	movs	r1, #4
    35a4:	f104 0008 	add.w	r0, r4, #8
    35a8:	f010 fe47 	bl	1423a <net_buf_simple_pull>
    35ac:	f011 fe6e 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);
    35b0:	8ae3      	ldrh	r3, [r4, #22]
    35b2:	9302      	str	r3, [sp, #8]
    35b4:	9001      	str	r0, [sp, #4]
    35b6:	4b99      	ldr	r3, [pc, #612]	; (381c <bt_recv+0x2d8>)
    35b8:	9605      	str	r6, [sp, #20]
    35ba:	9704      	str	r7, [sp, #16]
    35bc:	9503      	str	r5, [sp, #12]
    35be:	9600      	str	r6, [sp, #0]
    35c0:	4a93      	ldr	r2, [pc, #588]	; (3810 <bt_recv+0x2cc>)
    35c2:	4994      	ldr	r1, [pc, #592]	; (3814 <bt_recv+0x2d0>)
    35c4:	4897      	ldr	r0, [pc, #604]	; (3824 <bt_recv+0x2e0>)
    35c6:	f7fd fce1 	bl	f8c <printk>
	if (buf->len != len) {
    35ca:	89a3      	ldrh	r3, [r4, #12]
    35cc:	429d      	cmp	r5, r3
    35ce:	d00d      	beq.n	35ec <bt_recv+0xa8>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    35d0:	9301      	str	r3, [sp, #4]
    35d2:	9603      	str	r6, [sp, #12]
    35d4:	9502      	str	r5, [sp, #8]
    35d6:	9600      	str	r6, [sp, #0]
    35d8:	4b90      	ldr	r3, [pc, #576]	; (381c <bt_recv+0x2d8>)
    35da:	4a93      	ldr	r2, [pc, #588]	; (3828 <bt_recv+0x2e4>)
    35dc:	498d      	ldr	r1, [pc, #564]	; (3814 <bt_recv+0x2d0>)
    35de:	4893      	ldr	r0, [pc, #588]	; (382c <bt_recv+0x2e8>)
    35e0:	f7fd fcd4 	bl	f8c <printk>
	net_buf_unref(buf);
    35e4:	4620      	mov	r0, r4
    35e6:	f010 fdd7 	bl	14198 <net_buf_unref>
    35ea:	e01a      	b.n	3622 <bt_recv+0xde>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    35ec:	8ae0      	ldrh	r0, [r4, #22]
    35ee:	f001 f9cb 	bl	4988 <bt_conn_lookup_handle>
	if (!conn) {
    35f2:	4605      	mov	r5, r0
    35f4:	b950      	cbnz	r0, 360c <bt_recv+0xc8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    35f6:	8ae3      	ldrh	r3, [r4, #22]
    35f8:	9301      	str	r3, [sp, #4]
    35fa:	4a8b      	ldr	r2, [pc, #556]	; (3828 <bt_recv+0x2e4>)
    35fc:	4b87      	ldr	r3, [pc, #540]	; (381c <bt_recv+0x2d8>)
    35fe:	4985      	ldr	r1, [pc, #532]	; (3814 <bt_recv+0x2d0>)
    3600:	488b      	ldr	r0, [pc, #556]	; (3830 <bt_recv+0x2ec>)
    3602:	9602      	str	r6, [sp, #8]
    3604:	9600      	str	r6, [sp, #0]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3606:	f7fd fcc1 	bl	f8c <printk>
    360a:	e7eb      	b.n	35e4 <bt_recv+0xa0>
	acl(buf)->id = bt_conn_get_id(conn);
    360c:	f001 fe4e 	bl	52ac <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    3610:	463a      	mov	r2, r7
	acl(buf)->id = bt_conn_get_id(conn);
    3612:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    3614:	4621      	mov	r1, r4
    3616:	4628      	mov	r0, r5
    3618:	f000 ff06 	bl	4428 <bt_conn_recv>
	bt_conn_unref(conn);
    361c:	4628      	mov	r0, r5
    361e:	f001 fa01 	bl	4a24 <bt_conn_unref>
		return 0;
    3622:	2000      	movs	r0, #0
}
    3624:	b017      	add	sp, #92	; 0x5c
    3626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    362a:	f8d4 8008 	ldr.w	r8, [r4, #8]
    362e:	f011 fe2d 	bl	1528c <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    3632:	9603      	str	r6, [sp, #12]
    3634:	f898 3000 	ldrb.w	r3, [r8]
    3638:	9302      	str	r3, [sp, #8]
    363a:	9001      	str	r0, [sp, #4]
    363c:	4b7d      	ldr	r3, [pc, #500]	; (3834 <bt_recv+0x2f0>)
    363e:	9600      	str	r6, [sp, #0]
    3640:	4a73      	ldr	r2, [pc, #460]	; (3810 <bt_recv+0x2cc>)
    3642:	4974      	ldr	r1, [pc, #464]	; (3814 <bt_recv+0x2d0>)
    3644:	487c      	ldr	r0, [pc, #496]	; (3838 <bt_recv+0x2f4>)
    3646:	f7fd fca1 	bl	f8c <printk>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    364a:	f898 3000 	ldrb.w	r3, [r8]
    364e:	2b13      	cmp	r3, #19
    3650:	f200 83c1 	bhi.w	3dd6 <bt_recv+0x892>
    3654:	409f      	lsls	r7, r3
    3656:	f417 2f0c 	tst.w	r7, #573440	; 0x8c000
    365a:	f000 83bc 	beq.w	3dd6 <bt_recv+0x892>
    365e:	9601      	str	r6, [sp, #4]
    3660:	9600      	str	r6, [sp, #0]
    3662:	4b74      	ldr	r3, [pc, #464]	; (3834 <bt_recv+0x2f0>)
    3664:	4a70      	ldr	r2, [pc, #448]	; (3828 <bt_recv+0x2e4>)
    3666:	496b      	ldr	r1, [pc, #428]	; (3814 <bt_recv+0x2d0>)
    3668:	4874      	ldr	r0, [pc, #464]	; (383c <bt_recv+0x2f8>)
    366a:	f7fd fc8f 	bl	f8c <printk>
    366e:	4040      	eors	r0, r0
    3670:	f380 8811 	msr	BASEPRI, r0
    3674:	f04f 0004 	mov.w	r0, #4
    3678:	df02      	svc	2
    367a:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    367c:	f8b7 9001 	ldrh.w	r9, [r7, #1]
    3680:	f011 fe04 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    3684:	9505      	str	r5, [sp, #20]
    3686:	78fb      	ldrb	r3, [r7, #3]
    3688:	9304      	str	r3, [sp, #16]
    368a:	f8cd 900c 	str.w	r9, [sp, #12]
    368e:	783b      	ldrb	r3, [r7, #0]
    3690:	9302      	str	r3, [sp, #8]
    3692:	9001      	str	r0, [sp, #4]
    3694:	9500      	str	r5, [sp, #0]
    3696:	4b6a      	ldr	r3, [pc, #424]	; (3840 <bt_recv+0x2fc>)
    3698:	4a5d      	ldr	r2, [pc, #372]	; (3810 <bt_recv+0x2cc>)
    369a:	495e      	ldr	r1, [pc, #376]	; (3814 <bt_recv+0x2d0>)
    369c:	4869      	ldr	r0, [pc, #420]	; (3844 <bt_recv+0x300>)
    369e:	f7fd fc75 	bl	f8c <printk>
	if (evt->status) {
    36a2:	f897 8000 	ldrb.w	r8, [r7]
    36a6:	f1b8 0f00 	cmp.w	r8, #0
    36aa:	d19b      	bne.n	35e4 <bt_recv+0xa0>
	conn = bt_conn_lookup_handle(handle);
    36ac:	4648      	mov	r0, r9
    36ae:	f001 f96b 	bl	4988 <bt_conn_lookup_handle>
	if (!conn) {
    36b2:	4606      	mov	r6, r0
    36b4:	b9c0      	cbnz	r0, 36e8 <bt_recv+0x1a4>
		BT_ERR("Unable to look up conn with handle %u", handle);
    36b6:	9502      	str	r5, [sp, #8]
    36b8:	e88d 0220 	stmia.w	sp, {r5, r9}
    36bc:	4b60      	ldr	r3, [pc, #384]	; (3840 <bt_recv+0x2fc>)
    36be:	4a5a      	ldr	r2, [pc, #360]	; (3828 <bt_recv+0x2e4>)
    36c0:	4954      	ldr	r1, [pc, #336]	; (3814 <bt_recv+0x2d0>)
    36c2:	4861      	ldr	r0, [pc, #388]	; (3848 <bt_recv+0x304>)
    36c4:	f7fd fc62 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    36c8:	2107      	movs	r1, #7
    36ca:	4860      	ldr	r0, [pc, #384]	; (384c <bt_recv+0x308>)
    36cc:	f7fe fd66 	bl	219c <atomic_test_bit>
    36d0:	2800      	cmp	r0, #0
    36d2:	d087      	beq.n	35e4 <bt_recv+0xa0>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    36d4:	2106      	movs	r1, #6
    36d6:	485d      	ldr	r0, [pc, #372]	; (384c <bt_recv+0x308>)
    36d8:	f7fe fd60 	bl	219c <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    36dc:	2800      	cmp	r0, #0
    36de:	d181      	bne.n	35e4 <bt_recv+0xa0>
		set_advertise_enable(true);
    36e0:	2001      	movs	r0, #1
    36e2:	f7fe fecd 	bl	2480 <set_advertise_enable>
    36e6:	e77d      	b.n	35e4 <bt_recv+0xa0>
	conn->err = evt->reason;
    36e8:	78fb      	ldrb	r3, [r7, #3]
    36ea:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    36ec:	4958      	ldr	r1, [pc, #352]	; (3850 <bt_recv+0x30c>)
    36ee:	4859      	ldr	r0, [pc, #356]	; (3854 <bt_recv+0x310>)
    36f0:	f011 ff8c 	bl	1560c <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    36f4:	4641      	mov	r1, r8
    36f6:	4630      	mov	r0, r6
    36f8:	f001 fa4a 	bl	4b90 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    36fc:	78b5      	ldrb	r5, [r6, #2]
	conn->handle = 0;
    36fe:	f8a6 8000 	strh.w	r8, [r6]
	if (conn->type != BT_CONN_TYPE_LE) {
    3702:	b10d      	cbz	r5, 3708 <bt_recv+0x1c4>
	bt_conn_unref(conn);
    3704:	4630      	mov	r0, r6
    3706:	e0e7      	b.n	38d8 <bt_recv+0x394>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    3708:	4629      	mov	r1, r5
    370a:	1d30      	adds	r0, r6, #4
    370c:	f7fe fd46 	bl	219c <atomic_test_bit>
    3710:	b130      	cbz	r0, 3720 <bt_recv+0x1dc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3712:	4630      	mov	r0, r6
    3714:	2101      	movs	r1, #1
    3716:	f001 fa3b 	bl	4b90 <bt_conn_set_state>
		bt_le_scan_update(false);
    371a:	4628      	mov	r0, r5
    371c:	f7ff f84a 	bl	27b4 <bt_le_scan_update>
	bt_conn_unref(conn);
    3720:	4630      	mov	r0, r6
    3722:	f001 f97f 	bl	4a24 <bt_conn_unref>
    3726:	e7cf      	b.n	36c8 <bt_recv+0x184>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3728:	68a6      	ldr	r6, [r4, #8]
    372a:	f011 fdaf 	bl	1528c <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    372e:	9503      	str	r5, [sp, #12]
    3730:	7833      	ldrb	r3, [r6, #0]
    3732:	9302      	str	r3, [sp, #8]
    3734:	9001      	str	r0, [sp, #4]
    3736:	4b48      	ldr	r3, [pc, #288]	; (3858 <bt_recv+0x314>)
    3738:	4a35      	ldr	r2, [pc, #212]	; (3810 <bt_recv+0x2cc>)
    373a:	4936      	ldr	r1, [pc, #216]	; (3814 <bt_recv+0x2d0>)
    373c:	9500      	str	r5, [sp, #0]
    373e:	4847      	ldr	r0, [pc, #284]	; (385c <bt_recv+0x318>)
    3740:	f7fd fc24 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3744:	2101      	movs	r1, #1
    3746:	4638      	mov	r0, r7
    3748:	f010 fd77 	bl	1423a <net_buf_simple_pull>
	switch (evt->subevent) {
    374c:	7836      	ldrb	r6, [r6, #0]
    374e:	1e73      	subs	r3, r6, #1
    3750:	2b0b      	cmp	r3, #11
    3752:	f200 8321 	bhi.w	3d98 <bt_recv+0x854>
    3756:	e8df f013 	tbh	[pc, r3, lsl #1]
    375a:	000c      	.short	0x000c
    375c:	0089022f 	.word	0x0089022f
    3760:	031f00c2 	.word	0x031f00c2
    3764:	015700fb 	.word	0x015700fb
    3768:	021301c2 	.word	0x021301c2
    376c:	031f0087 	.word	0x031f0087
    3770:	0189      	.short	0x0189
    3772:	68a6      	ldr	r6, [r4, #8]
    3774:	f011 fd8a 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u role %u %s", evt->status, evt->role,
    3778:	1d37      	adds	r7, r6, #4
    377a:	4680      	mov	r8, r0
    377c:	4638      	mov	r0, r7
    377e:	f896 9000 	ldrb.w	r9, [r6]
    3782:	f896 a003 	ldrb.w	sl, [r6, #3]
    3786:	f7fe fae5 	bl	1d54 <bt_addr_le_str>
    378a:	4a21      	ldr	r2, [pc, #132]	; (3810 <bt_recv+0x2cc>)
    378c:	9505      	str	r5, [sp, #20]
    378e:	9004      	str	r0, [sp, #16]
    3790:	e88d 0720 	stmia.w	sp, {r5, r8, r9, sl}
    3794:	4b32      	ldr	r3, [pc, #200]	; (3860 <bt_recv+0x31c>)
    3796:	491f      	ldr	r1, [pc, #124]	; (3814 <bt_recv+0x2d0>)
    3798:	4832      	ldr	r0, [pc, #200]	; (3864 <bt_recv+0x320>)
    379a:	f7fd fbf7 	bl	f8c <printk>
	enh.status         = evt->status;
    379e:	7833      	ldrb	r3, [r6, #0]
    37a0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	enh.handle         = evt->handle;
    37a4:	f8b6 3001 	ldrh.w	r3, [r6, #1]
    37a8:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.role           = evt->role;
    37ac:	78f3      	ldrb	r3, [r6, #3]
    37ae:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	enh.interval       = evt->interval;
    37b2:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    37b6:	f8ad 304f 	strh.w	r3, [sp, #79]	; 0x4f
	enh.latency        = evt->latency;
    37ba:	f8b6 300d 	ldrh.w	r3, [r6, #13]
    37be:	f8ad 3051 	strh.w	r3, [sp, #81]	; 0x51
	enh.supv_timeout   = evt->supv_timeout;
    37c2:	f8b6 300f 	ldrh.w	r3, [r6, #15]
    37c6:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	enh.clock_accuracy = evt->clock_accuracy;
    37ca:	7c73      	ldrb	r3, [r6, #17]
    37cc:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    37d0:	4639      	mov	r1, r7
    37d2:	a80f      	add	r0, sp, #60	; 0x3c
    37d4:	f7fe fc38 	bl	2048 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    37d8:	2500      	movs	r5, #0
    37da:	2206      	movs	r2, #6
    37dc:	a90a      	add	r1, sp, #40	; 0x28
    37de:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    37e2:	950a      	str	r5, [sp, #40]	; 0x28
    37e4:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    37e8:	f7fe fa08 	bl	1bfc <memcpy>
    37ec:	2206      	movs	r2, #6
    37ee:	a90c      	add	r1, sp, #48	; 0x30
    37f0:	f10d 0049 	add.w	r0, sp, #73	; 0x49
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    37f4:	950c      	str	r5, [sp, #48]	; 0x30
    37f6:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    37fa:	f7fe f9ff 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    37fe:	a80e      	add	r0, sp, #56	; 0x38
		le_enh_conn_complete((void *)buf->data);
    3800:	f7ff fc50 	bl	30a4 <le_enh_conn_complete>
    3804:	e6ee      	b.n	35e4 <bt_recv+0xa0>
    3806:	bf00      	nop
    3808:	00015e19 	.word	0x00015e19
    380c:	00016688 	.word	0x00016688
    3810:	0001723a 	.word	0x0001723a
    3814:	00017241 	.word	0x00017241
    3818:	00016c67 	.word	0x00016c67
    381c:	000163d5 	.word	0x000163d5
    3820:	00016825 	.word	0x00016825
    3824:	00016c8a 	.word	0x00016c8a
    3828:	000171f2 	.word	0x000171f2
    382c:	00016cb9 	.word	0x00016cb9
    3830:	00016ced 	.word	0x00016ced
    3834:	00016528 	.word	0x00016528
    3838:	00016d1f 	.word	0x00016d1f
    383c:	00016fe7 	.word	0x00016fe7
    3840:	000163f7 	.word	0x000163f7
    3844:	00016d41 	.word	0x00016d41
    3848:	00016d74 	.word	0x00016d74
    384c:	20003af8 	.word	0x20003af8
    3850:	00016daa 	.word	0x00016daa
    3854:	0000200d 	.word	0x0000200d
    3858:	00016516 	.word	0x00016516
    385c:	00016dae 	.word	0x00016dae
    3860:	00016421 	.word	0x00016421
    3864:	00016dd3 	.word	0x00016dd3
    3868:	68a0      	ldr	r0, [r4, #8]
    386a:	e7c9      	b.n	3800 <bt_recv+0x2bc>
    386c:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    386e:	f8b6 8001 	ldrh.w	r8, [r6, #1]
    3872:	f011 fd0b 	bl	1528c <_impl_k_current_get>
	BT_DBG("status %u, handle %u", evt->status, handle);
    3876:	9504      	str	r5, [sp, #16]
    3878:	f8cd 800c 	str.w	r8, [sp, #12]
    387c:	7833      	ldrb	r3, [r6, #0]
    387e:	9302      	str	r3, [sp, #8]
    3880:	9001      	str	r0, [sp, #4]
    3882:	4bad      	ldr	r3, [pc, #692]	; (3b38 <bt_recv+0x5f4>)
    3884:	4aad      	ldr	r2, [pc, #692]	; (3b3c <bt_recv+0x5f8>)
    3886:	49ae      	ldr	r1, [pc, #696]	; (3b40 <bt_recv+0x5fc>)
    3888:	9500      	str	r5, [sp, #0]
    388a:	48ae      	ldr	r0, [pc, #696]	; (3b44 <bt_recv+0x600>)
    388c:	f7fd fb7e 	bl	f8c <printk>
	conn = bt_conn_lookup_handle(handle);
    3890:	4640      	mov	r0, r8
    3892:	f001 f879 	bl	4988 <bt_conn_lookup_handle>
	if (!conn) {
    3896:	4607      	mov	r7, r0
    3898:	b938      	cbnz	r0, 38aa <bt_recv+0x366>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    389a:	e88d 0120 	stmia.w	sp, {r5, r8}
    389e:	4ba6      	ldr	r3, [pc, #664]	; (3b38 <bt_recv+0x5f4>)
    38a0:	9502      	str	r5, [sp, #8]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    38a2:	4aa9      	ldr	r2, [pc, #676]	; (3b48 <bt_recv+0x604>)
    38a4:	49a6      	ldr	r1, [pc, #664]	; (3b40 <bt_recv+0x5fc>)
    38a6:	48a9      	ldr	r0, [pc, #676]	; (3b4c <bt_recv+0x608>)
    38a8:	e6ad      	b.n	3606 <bt_recv+0xc2>
	if (!evt->status) {
    38aa:	7833      	ldrb	r3, [r6, #0]
    38ac:	b99b      	cbnz	r3, 38d6 <bt_recv+0x392>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    38ae:	7932      	ldrb	r2, [r6, #4]
    38b0:	78f3      	ldrb	r3, [r6, #3]
    38b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    38b6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    38ba:	79b2      	ldrb	r2, [r6, #6]
    38bc:	7973      	ldrb	r3, [r6, #5]
    38be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    38c2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    38c6:	79f3      	ldrb	r3, [r6, #7]
    38c8:	7a32      	ldrb	r2, [r6, #8]
    38ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    38ce:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    38d2:	f000 fd6d 	bl	43b0 <notify_le_param_updated>
	bt_conn_unref(conn);
    38d6:	4638      	mov	r0, r7
	bt_conn_unref(conn);
    38d8:	f001 f8a4 	bl	4a24 <bt_conn_unref>
    38dc:	e682      	b.n	35e4 <bt_recv+0xa0>
    38de:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    38e0:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    38e4:	4640      	mov	r0, r8
    38e6:	f001 f84f 	bl	4988 <bt_conn_lookup_handle>
	if (!conn) {
    38ea:	4606      	mov	r6, r0
    38ec:	b920      	cbnz	r0, 38f8 <bt_recv+0x3b4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    38ee:	9502      	str	r5, [sp, #8]
    38f0:	e88d 0120 	stmia.w	sp, {r5, r8}
    38f4:	4b96      	ldr	r3, [pc, #600]	; (3b50 <bt_recv+0x60c>)
    38f6:	e7d4      	b.n	38a2 <bt_recv+0x35e>
	if (!evt->status) {
    38f8:	783b      	ldrb	r3, [r7, #0]
    38fa:	b923      	cbnz	r3, 3906 <bt_recv+0x3c2>
		memcpy(conn->le.features, evt->features,
    38fc:	2208      	movs	r2, #8
    38fe:	1cf9      	adds	r1, r7, #3
    3900:	3064      	adds	r0, #100	; 0x64
    3902:	f7fe f97b 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    3906:	4d93      	ldr	r5, [pc, #588]	; (3b54 <bt_recv+0x610>)
    3908:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    390c:	07d2      	lsls	r2, r2, #31
    390e:	d50c      	bpl.n	392a <bt_recv+0x3e6>
    3910:	f896 3065 	ldrb.w	r3, [r6, #101]	; 0x65
    3914:	07db      	lsls	r3, r3, #31
    3916:	d508      	bpl.n	392a <bt_recv+0x3e6>
		err = hci_le_set_phy(conn);
    3918:	4630      	mov	r0, r6
    391a:	f7ff fb79 	bl	3010 <hci_le_set_phy.isra.27>
		if (!err) {
    391e:	b920      	cbnz	r0, 392a <bt_recv+0x3e6>
    3920:	2180      	movs	r1, #128	; 0x80
    3922:	1d30      	adds	r0, r6, #4
    3924:	f7fe fb93 	bl	204e <atomic_or>
    3928:	e6ec      	b.n	3704 <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    392a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    392e:	069f      	lsls	r7, r3, #26
    3930:	f140 8098 	bpl.w	3a64 <bt_recv+0x520>
    3934:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    3938:	069d      	lsls	r5, r3, #26
    393a:	f140 8093 	bpl.w	3a64 <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    393e:	4630      	mov	r0, r6
    3940:	f7ff fb86 	bl	3050 <hci_le_set_data_len.isra.28>
		if (!err) {
    3944:	2800      	cmp	r0, #0
    3946:	f040 808d 	bne.w	3a64 <bt_recv+0x520>
    394a:	f44f 7180 	mov.w	r1, #256	; 0x100
    394e:	e7e8      	b.n	3922 <bt_recv+0x3de>
    3950:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3952:	78d9      	ldrb	r1, [r3, #3]
    3954:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    3956:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3958:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    395c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3960:	7959      	ldrb	r1, [r3, #5]
    3962:	791a      	ldrb	r2, [r3, #4]
    3964:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3968:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
	param.latency = sys_le16_to_cpu(evt->latency);
    396c:	799a      	ldrb	r2, [r3, #6]
    396e:	79d9      	ldrb	r1, [r3, #7]
    3970:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3974:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3978:	7a1a      	ldrb	r2, [r3, #8]
    397a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    397c:	b2be      	uxth	r6, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    397e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    3982:	4630      	mov	r0, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3984:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	conn = bt_conn_lookup_handle(handle);
    3988:	f000 fffe 	bl	4988 <bt_conn_lookup_handle>
	if (!conn) {
    398c:	4680      	mov	r8, r0
    398e:	b968      	cbnz	r0, 39ac <bt_recv+0x468>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3990:	9502      	str	r5, [sp, #8]
    3992:	e88d 0060 	stmia.w	sp, {r5, r6}
    3996:	4b70      	ldr	r3, [pc, #448]	; (3b58 <bt_recv+0x614>)
    3998:	4a6b      	ldr	r2, [pc, #428]	; (3b48 <bt_recv+0x604>)
    399a:	4969      	ldr	r1, [pc, #420]	; (3b40 <bt_recv+0x5fc>)
    399c:	486b      	ldr	r0, [pc, #428]	; (3b4c <bt_recv+0x608>)
    399e:	f7fd faf5 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    39a2:	2102      	movs	r1, #2
    39a4:	4630      	mov	r0, r6
    39a6:	f7ff fc77 	bl	3298 <le_conn_param_neg_reply>
    39aa:	e61b      	b.n	35e4 <bt_recv+0xa0>
	if (!le_param_req(conn, &param)) {
    39ac:	a90e      	add	r1, sp, #56	; 0x38
    39ae:	f000 fd13 	bl	43d8 <le_param_req>
    39b2:	b928      	cbnz	r0, 39c0 <bt_recv+0x47c>
		err = le_conn_param_neg_reply(handle,
    39b4:	211e      	movs	r1, #30
    39b6:	4630      	mov	r0, r6
    39b8:	f7ff fc6e 	bl	3298 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    39bc:	4640      	mov	r0, r8
    39be:	e78b      	b.n	38d8 <bt_recv+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    39c0:	210e      	movs	r1, #14
    39c2:	f242 0020 	movw	r0, #8224	; 0x2020
    39c6:	f7fe fbf7 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    39ca:	4606      	mov	r6, r0
    39cc:	2800      	cmp	r0, #0
    39ce:	d0f5      	beq.n	39bc <bt_recv+0x478>
	cp = net_buf_add(buf, sizeof(*cp));
    39d0:	210e      	movs	r1, #14
    39d2:	3008      	adds	r0, #8
    39d4:	f010 fc12 	bl	141fc <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    39d8:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    39da:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    39dc:	2100      	movs	r1, #0
    39de:	f7fe f939 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    39e2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    39e6:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    39e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    39ec:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    39ee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    39f2:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    39f4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
	cp->handle = sys_cpu_to_le16(handle);
    39f8:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    39fa:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    39fc:	4631      	mov	r1, r6
    39fe:	f242 0020 	movw	r0, #8224	; 0x2020
    3a02:	f7fe fe3d 	bl	2680 <bt_hci_cmd_send>
    3a06:	e7d9      	b.n	39bc <bt_recv+0x478>
    3a08:	68a3      	ldr	r3, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3a0a:	f8b3 b000 	ldrh.w	fp, [r3]
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    3a0e:	885f      	ldrh	r7, [r3, #2]
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    3a10:	f8b3 9006 	ldrh.w	r9, [r3, #6]
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    3a14:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    3a18:	f8b3 a008 	ldrh.w	sl, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
    3a1c:	4658      	mov	r0, fp
    3a1e:	f000 ffb3 	bl	4988 <bt_conn_lookup_handle>
	if (!conn) {
    3a22:	4606      	mov	r6, r0
    3a24:	b920      	cbnz	r0, 3a30 <bt_recv+0x4ec>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a26:	9502      	str	r5, [sp, #8]
    3a28:	e88d 0820 	stmia.w	sp, {r5, fp}
    3a2c:	4b4b      	ldr	r3, [pc, #300]	; (3b5c <bt_recv+0x618>)
    3a2e:	e738      	b.n	38a2 <bt_recv+0x35e>
    3a30:	f011 fc2c 	bl	1528c <_impl_k_current_get>
	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
    3a34:	4b49      	ldr	r3, [pc, #292]	; (3b5c <bt_recv+0x618>)
    3a36:	9001      	str	r0, [sp, #4]
    3a38:	4a40      	ldr	r2, [pc, #256]	; (3b3c <bt_recv+0x5f8>)
    3a3a:	4941      	ldr	r1, [pc, #260]	; (3b40 <bt_recv+0x5fc>)
    3a3c:	9506      	str	r5, [sp, #24]
    3a3e:	f8cd a014 	str.w	sl, [sp, #20]
    3a42:	f8cd 9010 	str.w	r9, [sp, #16]
    3a46:	f8cd 800c 	str.w	r8, [sp, #12]
    3a4a:	9702      	str	r7, [sp, #8]
    3a4c:	9500      	str	r5, [sp, #0]
    3a4e:	4844      	ldr	r0, [pc, #272]	; (3b60 <bt_recv+0x61c>)
    3a50:	f7fd fa9c 	bl	f8c <printk>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a54:	f46f 7180 	mvn.w	r1, #256	; 0x100
    3a58:	1d30      	adds	r0, r6, #4
    3a5a:	f7fe fb09 	bl	2070 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3a5e:	05c0      	lsls	r0, r0, #23
    3a60:	f57f ae50 	bpl.w	3704 <bt_recv+0x1c0>
	update_conn_param(conn);
    3a64:	4630      	mov	r0, r6
    3a66:	f7fe fb15 	bl	2094 <update_conn_param>
    3a6a:	e64b      	b.n	3704 <bt_recv+0x1c0>
    3a6c:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3a6e:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3a72:	4640      	mov	r0, r8
    3a74:	f000 ff88 	bl	4988 <bt_conn_lookup_handle>
	if (!conn) {
    3a78:	4606      	mov	r6, r0
    3a7a:	b920      	cbnz	r0, 3a86 <bt_recv+0x542>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a7c:	9502      	str	r5, [sp, #8]
    3a7e:	e88d 0120 	stmia.w	sp, {r5, r8}
    3a82:	4b38      	ldr	r3, [pc, #224]	; (3b64 <bt_recv+0x620>)
    3a84:	e70d      	b.n	38a2 <bt_recv+0x35e>
    3a86:	f011 fc01 	bl	1528c <_impl_k_current_get>
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3a8a:	9505      	str	r5, [sp, #20]
    3a8c:	793b      	ldrb	r3, [r7, #4]
    3a8e:	9304      	str	r3, [sp, #16]
    3a90:	78fb      	ldrb	r3, [r7, #3]
    3a92:	9303      	str	r3, [sp, #12]
    3a94:	783b      	ldrb	r3, [r7, #0]
    3a96:	9302      	str	r3, [sp, #8]
    3a98:	9001      	str	r0, [sp, #4]
    3a9a:	9500      	str	r5, [sp, #0]
    3a9c:	4b31      	ldr	r3, [pc, #196]	; (3b64 <bt_recv+0x620>)
    3a9e:	4a27      	ldr	r2, [pc, #156]	; (3b3c <bt_recv+0x5f8>)
    3aa0:	4927      	ldr	r1, [pc, #156]	; (3b40 <bt_recv+0x5fc>)
    3aa2:	4831      	ldr	r0, [pc, #196]	; (3b68 <bt_recv+0x624>)
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3aa4:	1d35      	adds	r5, r6, #4
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3aa6:	f7fd fa71 	bl	f8c <printk>
    3aaa:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3aae:	4628      	mov	r0, r5
    3ab0:	f7fe fade 	bl	2070 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3ab4:	0601      	lsls	r1, r0, #24
    3ab6:	f57f ae25 	bpl.w	3704 <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3aba:	4b26      	ldr	r3, [pc, #152]	; (3b54 <bt_recv+0x610>)
    3abc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3ac0:	069a      	lsls	r2, r3, #26
    3ac2:	d5cf      	bpl.n	3a64 <bt_recv+0x520>
    3ac4:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    3ac8:	069b      	lsls	r3, r3, #26
    3aca:	d5cb      	bpl.n	3a64 <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    3acc:	4630      	mov	r0, r6
    3ace:	f7ff fabf 	bl	3050 <hci_le_set_data_len.isra.28>
		if (!err) {
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d1c6      	bne.n	3a64 <bt_recv+0x520>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
    3ada:	4628      	mov	r0, r5
    3adc:	e722      	b.n	3924 <bt_recv+0x3e0>
    3ade:	68a6      	ldr	r6, [r4, #8]
    3ae0:	f011 fbd4 	bl	1528c <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3ae4:	9503      	str	r5, [sp, #12]
    3ae6:	7833      	ldrb	r3, [r6, #0]
    3ae8:	9302      	str	r3, [sp, #8]
    3aea:	9001      	str	r0, [sp, #4]
    3aec:	4b1f      	ldr	r3, [pc, #124]	; (3b6c <bt_recv+0x628>)
    3aee:	4a13      	ldr	r2, [pc, #76]	; (3b3c <bt_recv+0x5f8>)
    3af0:	4913      	ldr	r1, [pc, #76]	; (3b40 <bt_recv+0x5fc>)
    3af2:	9500      	str	r5, [sp, #0]
    3af4:	481e      	ldr	r0, [pc, #120]	; (3b70 <bt_recv+0x62c>)
    3af6:	f7fd fa49 	bl	f8c <printk>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3afa:	f06f 0120 	mvn.w	r1, #32
    3afe:	481d      	ldr	r0, [pc, #116]	; (3b74 <bt_recv+0x630>)
    3b00:	f7fe fab6 	bl	2070 <atomic_and>
	if (!evt->status) {
    3b04:	7833      	ldrb	r3, [r6, #0]
    3b06:	b943      	cbnz	r3, 3b1a <bt_recv+0x5d6>
		memcpy(pub_key, evt->key, 64);
    3b08:	1c71      	adds	r1, r6, #1
    3b0a:	2240      	movs	r2, #64	; 0x40
    3b0c:	481a      	ldr	r0, [pc, #104]	; (3b78 <bt_recv+0x634>)
    3b0e:	f7fe f875 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3b12:	2110      	movs	r1, #16
    3b14:	4817      	ldr	r0, [pc, #92]	; (3b74 <bt_recv+0x630>)
    3b16:	f7fe fa9a 	bl	204e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3b1a:	4b18      	ldr	r3, [pc, #96]	; (3b7c <bt_recv+0x638>)
    3b1c:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3b1e:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3b20:	2d00      	cmp	r5, #0
    3b22:	f43f ad5f 	beq.w	35e4 <bt_recv+0xa0>
		cb->func(evt->status ? NULL : evt->key);
    3b26:	7832      	ldrb	r2, [r6, #0]
    3b28:	682b      	ldr	r3, [r5, #0]
    3b2a:	2a00      	cmp	r2, #0
    3b2c:	bf0c      	ite	eq
    3b2e:	4638      	moveq	r0, r7
    3b30:	2000      	movne	r0, #0
    3b32:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3b34:	686d      	ldr	r5, [r5, #4]
    3b36:	e7f3      	b.n	3b20 <bt_recv+0x5dc>
    3b38:	0001648d 	.word	0x0001648d
    3b3c:	0001723a 	.word	0x0001723a
    3b40:	00017241 	.word	0x00017241
    3b44:	00016dfd 	.word	0x00016dfd
    3b48:	000171f2 	.word	0x000171f2
    3b4c:	00016e27 	.word	0x00016e27
    3b50:	00016439 	.word	0x00016439
    3b54:	20003a88 	.word	0x20003a88
    3b58:	0001647b 	.word	0x0001647b
    3b5c:	00016451 	.word	0x00016451
    3b60:	00016e5b 	.word	0x00016e5b
    3b64:	00016464 	.word	0x00016464
    3b68:	00016e97 	.word	0x00016e97
    3b6c:	000164a5 	.word	0x000164a5
    3b70:	00016ed6 	.word	0x00016ed6
    3b74:	20003af8 	.word	0x20003af8
    3b78:	200002b4 	.word	0x200002b4
    3b7c:	200002f4 	.word	0x200002f4
    3b80:	68a6      	ldr	r6, [r4, #8]
    3b82:	f011 fb83 	bl	1528c <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3b86:	9503      	str	r5, [sp, #12]
    3b88:	7833      	ldrb	r3, [r6, #0]
    3b8a:	9500      	str	r5, [sp, #0]
	if (dh_key_cb) {
    3b8c:	4da0      	ldr	r5, [pc, #640]	; (3e10 <bt_recv+0x8cc>)
	BT_DBG("status: 0x%x", evt->status);
    3b8e:	9302      	str	r3, [sp, #8]
    3b90:	9001      	str	r0, [sp, #4]
    3b92:	4aa0      	ldr	r2, [pc, #640]	; (3e14 <bt_recv+0x8d0>)
    3b94:	4ba0      	ldr	r3, [pc, #640]	; (3e18 <bt_recv+0x8d4>)
    3b96:	49a1      	ldr	r1, [pc, #644]	; (3e1c <bt_recv+0x8d8>)
    3b98:	48a1      	ldr	r0, [pc, #644]	; (3e20 <bt_recv+0x8dc>)
    3b9a:	f7fd f9f7 	bl	f8c <printk>
	if (dh_key_cb) {
    3b9e:	682a      	ldr	r2, [r5, #0]
    3ba0:	2a00      	cmp	r2, #0
    3ba2:	f43f ad1f 	beq.w	35e4 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3ba6:	7833      	ldrb	r3, [r6, #0]
    3ba8:	b923      	cbnz	r3, 3bb4 <bt_recv+0x670>
    3baa:	1c70      	adds	r0, r6, #1
    3bac:	4790      	blx	r2
		dh_key_cb = NULL;
    3bae:	2300      	movs	r3, #0
    3bb0:	602b      	str	r3, [r5, #0]
    3bb2:	e517      	b.n	35e4 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3bb4:	2000      	movs	r0, #0
    3bb6:	e7f9      	b.n	3bac <bt_recv+0x668>
	u8_t num_reports = net_buf_pull_u8(buf);
    3bb8:	4638      	mov	r0, r7
    3bba:	f010 fb46 	bl	1424a <net_buf_simple_pull_u8>
    3bbe:	4680      	mov	r8, r0
    3bc0:	f011 fb64 	bl	1528c <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3bc4:	9503      	str	r5, [sp, #12]
    3bc6:	9001      	str	r0, [sp, #4]
    3bc8:	f8cd 8008 	str.w	r8, [sp, #8]
    3bcc:	9500      	str	r5, [sp, #0]
    3bce:	4b95      	ldr	r3, [pc, #596]	; (3e24 <bt_recv+0x8e0>)
    3bd0:	4a90      	ldr	r2, [pc, #576]	; (3e14 <bt_recv+0x8d0>)
    3bd2:	4992      	ldr	r1, [pc, #584]	; (3e1c <bt_recv+0x8d8>)
    3bd4:	4894      	ldr	r0, [pc, #592]	; (3e28 <bt_recv+0x8e4>)
    3bd6:	f7fd f9d9 	bl	f8c <printk>
	while (num_reports--) {
    3bda:	f1b8 0f00 	cmp.w	r8, #0
    3bde:	f43f ad01 	beq.w	35e4 <bt_recv+0xa0>
		info = (void *)buf->data;
    3be2:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3be4:	2109      	movs	r1, #9
    3be6:	4638      	mov	r0, r7
    3be8:	f010 fb27 	bl	1423a <net_buf_simple_pull>
		rssi = info->data[info->length];
    3bec:	7a33      	ldrb	r3, [r6, #8]
    3bee:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3bf0:	f106 0901 	add.w	r9, r6, #1
		rssi = info->data[info->length];
    3bf4:	f993 a009 	ldrsb.w	sl, [r3, #9]
    3bf8:	f011 fb48 	bl	1528c <_impl_k_current_get>
    3bfc:	4683      	mov	fp, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3bfe:	4648      	mov	r0, r9
    3c00:	f7fe f8a8 	bl	1d54 <bt_addr_le_str>
    3c04:	9506      	str	r5, [sp, #24]
    3c06:	f8cd a014 	str.w	sl, [sp, #20]
    3c0a:	7a33      	ldrb	r3, [r6, #8]
    3c0c:	9304      	str	r3, [sp, #16]
    3c0e:	7833      	ldrb	r3, [r6, #0]
    3c10:	9303      	str	r3, [sp, #12]
    3c12:	9002      	str	r0, [sp, #8]
    3c14:	4b83      	ldr	r3, [pc, #524]	; (3e24 <bt_recv+0x8e0>)
    3c16:	4981      	ldr	r1, [pc, #516]	; (3e1c <bt_recv+0x8d8>)
    3c18:	4a7e      	ldr	r2, [pc, #504]	; (3e14 <bt_recv+0x8d0>)
    3c1a:	4884      	ldr	r0, [pc, #528]	; (3e2c <bt_recv+0x8e8>)
    3c1c:	e88d 0820 	stmia.w	sp, {r5, fp}
    3c20:	f7fd f9b4 	bl	f8c <printk>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3c24:	7873      	ldrb	r3, [r6, #1]
    3c26:	3b02      	subs	r3, #2
    3c28:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3c2a:	4649      	mov	r1, r9
    3c2c:	a80e      	add	r0, sp, #56	; 0x38
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3c2e:	f200 809d 	bhi.w	3d6c <bt_recv+0x828>
			bt_addr_le_copy(&id_addr, &info->addr);
    3c32:	f7fe fa09 	bl	2048 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3c36:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3c3a:	3b02      	subs	r3, #2
    3c3c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		if (scan_dev_found_cb) {
    3c40:	f8df b218 	ldr.w	fp, [pc, #536]	; 3e5c <bt_recv+0x918>
    3c44:	f8db 3000 	ldr.w	r3, [fp]
    3c48:	b1bb      	cbz	r3, 3c7a <bt_recv+0x736>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3c4a:	4638      	mov	r0, r7
    3c4c:	f010 fb0d 	bl	1426a <net_buf_simple_headroom>
	state->len = buf->len;
    3c50:	89a3      	ldrh	r3, [r4, #12]
    3c52:	9309      	str	r3, [sp, #36]	; 0x24
			buf->len = info->length;
    3c54:	7a33      	ldrb	r3, [r6, #8]
    3c56:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3c58:	9008      	str	r0, [sp, #32]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3c5a:	463b      	mov	r3, r7
    3c5c:	7832      	ldrb	r2, [r6, #0]
    3c5e:	f8db b000 	ldr.w	fp, [fp]
    3c62:	4651      	mov	r1, sl
    3c64:	a80e      	add	r0, sp, #56	; 0x38
    3c66:	47d8      	blx	fp
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3c68:	6923      	ldr	r3, [r4, #16]
    3c6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    3c6e:	fa13 f382 	uxtah	r3, r3, r2
    3c72:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3c74:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3c78:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3c7a:	2109      	movs	r1, #9
    3c7c:	486c      	ldr	r0, [pc, #432]	; (3e30 <bt_recv+0x8ec>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3c7e:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3c80:	f7fe fa8c 	bl	219c <atomic_test_bit>
    3c84:	4683      	mov	fp, r0
    3c86:	2800      	cmp	r0, #0
    3c88:	d166      	bne.n	3d58 <bt_recv+0x814>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3c8a:	2a01      	cmp	r2, #1
    3c8c:	d864      	bhi.n	3d58 <bt_recv+0x814>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3c8e:	2101      	movs	r1, #1
    3c90:	a80e      	add	r0, sp, #56	; 0x38
    3c92:	f000 fea9 	bl	49e8 <bt_conn_lookup_state_le>
	if (!conn) {
    3c96:	4682      	mov	sl, r0
    3c98:	2800      	cmp	r0, #0
    3c9a:	d05d      	beq.n	3d58 <bt_recv+0x814>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3c9c:	2108      	movs	r1, #8
    3c9e:	4864      	ldr	r0, [pc, #400]	; (3e30 <bt_recv+0x8ec>)
    3ca0:	f7fe fa7c 	bl	219c <atomic_test_bit>
    3ca4:	2800      	cmp	r0, #0
    3ca6:	d164      	bne.n	3d72 <bt_recv+0x82e>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3ca8:	2102      	movs	r1, #2
    3caa:	4861      	ldr	r0, [pc, #388]	; (3e30 <bt_recv+0x8ec>)
    3cac:	f7fe fa76 	bl	219c <atomic_test_bit>
    3cb0:	b110      	cbz	r0, 3cb8 <bt_recv+0x774>
			set_random_address(&bt_dev.id_addr.a);
    3cb2:	4860      	ldr	r0, [pc, #384]	; (3e34 <bt_recv+0x8f0>)
    3cb4:	f7fe fb88 	bl	23c8 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3cb8:	495f      	ldr	r1, [pc, #380]	; (3e38 <bt_recv+0x8f4>)
    3cba:	f10a 004b 	add.w	r0, sl, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3cbe:	f10a 0b52 	add.w	fp, sl, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3cc2:	f7fe f9c1 	bl	2048 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3cc6:	4649      	mov	r1, r9
    3cc8:	4658      	mov	r0, fp
    3cca:	f7fe f9bd 	bl	2048 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3cce:	2119      	movs	r1, #25
    3cd0:	f242 000d 	movw	r0, #8205	; 0x200d
    3cd4:	f7fe fa70 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    3cd8:	4603      	mov	r3, r0
    3cda:	2800      	cmp	r0, #0
    3cdc:	d04e      	beq.n	3d7c <bt_recv+0x838>
	cp = net_buf_add(buf, sizeof(*cp));
    3cde:	2119      	movs	r1, #25
    3ce0:	3008      	adds	r0, #8
    3ce2:	9309      	str	r3, [sp, #36]	; 0x24
    3ce4:	f010 fa8a 	bl	141fc <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3ce8:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3cea:	4681      	mov	r9, r0
	memset(cp, 0, sizeof(*cp));
    3cec:	2100      	movs	r1, #0
    3cee:	f7fd ffb1 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3cf2:	2200      	movs	r2, #0
    3cf4:	2160      	movs	r1, #96	; 0x60
    3cf6:	f889 1000 	strb.w	r1, [r9]
    3cfa:	f889 2001 	strb.w	r2, [r9, #1]
	cp->scan_window = cp->scan_interval;
    3cfe:	f889 1002 	strb.w	r1, [r9, #2]
    3d02:	f889 2003 	strb.w	r2, [r9, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3d06:	4659      	mov	r1, fp
    3d08:	f109 0005 	add.w	r0, r9, #5
	cp->scan_window = cp->scan_interval;
    3d0c:	9208      	str	r2, [sp, #32]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3d0e:	f7fe f99b 	bl	2048 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3d12:	f89a 104b 	ldrb.w	r1, [sl, #75]	; 0x4b
    3d16:	f889 100c 	strb.w	r1, [r9, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3d1a:	f8ba 105c 	ldrh.w	r1, [sl, #92]	; 0x5c
    3d1e:	f8a9 100d 	strh.w	r1, [r9, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3d22:	f8ba 105e 	ldrh.w	r1, [sl, #94]	; 0x5e
    3d26:	f8a9 100f 	strh.w	r1, [r9, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3d2a:	f8ba 1060 	ldrh.w	r1, [sl, #96]	; 0x60
    3d2e:	f8a9 1011 	strh.w	r1, [r9, #17]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3d34:	f8ba 1062 	ldrh.w	r1, [sl, #98]	; 0x62
    3d38:	f8a9 1013 	strh.w	r1, [r9, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3d3c:	9a08      	ldr	r2, [sp, #32]
    3d3e:	4619      	mov	r1, r3
    3d40:	f242 000d 	movw	r0, #8205	; 0x200d
    3d44:	f7fe fa96 	bl	2274 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3d48:	b9c0      	cbnz	r0, 3d7c <bt_recv+0x838>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3d4a:	4650      	mov	r0, sl
    3d4c:	2102      	movs	r1, #2
    3d4e:	f000 ff1f 	bl	4b90 <bt_conn_set_state>
	bt_conn_unref(conn);
    3d52:	4650      	mov	r0, sl
    3d54:	f000 fe66 	bl	4a24 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3d58:	7a31      	ldrb	r1, [r6, #8]
    3d5a:	4638      	mov	r0, r7
    3d5c:	3101      	adds	r1, #1
    3d5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3d62:	f010 fa6a 	bl	1423a <net_buf_simple_pull>
    3d66:	fa5f f888 	uxtb.w	r8, r8
    3d6a:	e736      	b.n	3bda <bt_recv+0x696>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3d6c:	f7fe f96c 	bl	2048 <bt_addr_le_copy>
    3d70:	e766      	b.n	3c40 <bt_recv+0x6fc>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3d72:	4658      	mov	r0, fp
    3d74:	f7fe faf2 	bl	235c <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3d78:	2800      	cmp	r0, #0
    3d7a:	d095      	beq.n	3ca8 <bt_recv+0x764>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3d7c:	231f      	movs	r3, #31
    3d7e:	f88a 3008 	strb.w	r3, [sl, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3d82:	2100      	movs	r1, #0
    3d84:	4650      	mov	r0, sl
    3d86:	f000 ff03 	bl	4b90 <bt_conn_set_state>
	bt_conn_unref(conn);
    3d8a:	4650      	mov	r0, sl
    3d8c:	f000 fe4a 	bl	4a24 <bt_conn_unref>
	bt_le_scan_update(false);
    3d90:	2000      	movs	r0, #0
    3d92:	f7fe fd0f 	bl	27b4 <bt_le_scan_update>
    3d96:	e7df      	b.n	3d58 <bt_recv+0x814>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3d98:	89a7      	ldrh	r7, [r4, #12]
    3d9a:	68a0      	ldr	r0, [r4, #8]
    3d9c:	4639      	mov	r1, r7
    3d9e:	f7fd ff7d 	bl	1c9c <bt_hex>
    3da2:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3da6:	9003      	str	r0, [sp, #12]
    3da8:	4b24      	ldr	r3, [pc, #144]	; (3e3c <bt_recv+0x8f8>)
    3daa:	4a25      	ldr	r2, [pc, #148]	; (3e40 <bt_recv+0x8fc>)
    3dac:	491b      	ldr	r1, [pc, #108]	; (3e1c <bt_recv+0x8d8>)
    3dae:	4825      	ldr	r0, [pc, #148]	; (3e44 <bt_recv+0x900>)
    3db0:	9504      	str	r5, [sp, #16]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3db2:	f7fd f8eb 	bl	f8c <printk>
    3db6:	e415      	b.n	35e4 <bt_recv+0xa0>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3db8:	4b23      	ldr	r3, [pc, #140]	; (3e48 <bt_recv+0x904>)
    3dba:	4a24      	ldr	r2, [pc, #144]	; (3e4c <bt_recv+0x908>)
    3dbc:	4917      	ldr	r1, [pc, #92]	; (3e1c <bt_recv+0x8d8>)
    3dbe:	9602      	str	r6, [sp, #8]
    3dc0:	e88d 00c0 	stmia.w	sp, {r6, r7}
    3dc4:	4822      	ldr	r0, [pc, #136]	; (3e50 <bt_recv+0x90c>)
    3dc6:	f7fd f8e1 	bl	f8c <printk>
		net_buf_unref(buf);
    3dca:	4620      	mov	r0, r4
    3dcc:	f010 f9e4 	bl	14198 <net_buf_unref>
		return -EINVAL;
    3dd0:	f06f 0015 	mvn.w	r0, #21
    3dd4:	e426      	b.n	3624 <bt_recv+0xe0>
	net_buf_pull(buf, sizeof(*hdr));
    3dd6:	f104 0708 	add.w	r7, r4, #8
    3dda:	2102      	movs	r1, #2
    3ddc:	4638      	mov	r0, r7
    3dde:	f010 fa2c 	bl	1423a <net_buf_simple_pull>
	switch (hdr->evt) {
    3de2:	f898 6000 	ldrb.w	r6, [r8]
    3de6:	2e05      	cmp	r6, #5
    3de8:	f43f ac47 	beq.w	367a <bt_recv+0x136>
    3dec:	2e3e      	cmp	r6, #62	; 0x3e
    3dee:	f43f ac9b 	beq.w	3728 <bt_recv+0x1e4>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3df2:	89a7      	ldrh	r7, [r4, #12]
    3df4:	68a0      	ldr	r0, [r4, #8]
    3df6:	4639      	mov	r1, r7
    3df8:	f7fd ff50 	bl	1c9c <bt_hex>
    3dfc:	9504      	str	r5, [sp, #16]
    3dfe:	9003      	str	r0, [sp, #12]
    3e00:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3e04:	4b13      	ldr	r3, [pc, #76]	; (3e54 <bt_recv+0x910>)
    3e06:	4a0e      	ldr	r2, [pc, #56]	; (3e40 <bt_recv+0x8fc>)
    3e08:	4904      	ldr	r1, [pc, #16]	; (3e1c <bt_recv+0x8d8>)
    3e0a:	4813      	ldr	r0, [pc, #76]	; (3e58 <bt_recv+0x914>)
    3e0c:	e7d1      	b.n	3db2 <bt_recv+0x86e>
    3e0e:	bf00      	nop
    3e10:	200002b0 	.word	0x200002b0
    3e14:	0001723a 	.word	0x0001723a
    3e18:	000164b6 	.word	0x000164b6
    3e1c:	00017241 	.word	0x00017241
    3e20:	00016ed6 	.word	0x00016ed6
    3e24:	00016508 	.word	0x00016508
    3e28:	00016ef8 	.word	0x00016ef8
    3e2c:	00016f26 	.word	0x00016f26
    3e30:	20003af8 	.word	0x20003af8
    3e34:	20003a89 	.word	0x20003a89
    3e38:	20003a88 	.word	0x20003a88
    3e3c:	00016516 	.word	0x00016516
    3e40:	0001727c 	.word	0x0001727c
    3e44:	00016f5c 	.word	0x00016f5c
    3e48:	00016688 	.word	0x00016688
    3e4c:	000171f2 	.word	0x000171f2
    3e50:	00016fc3 	.word	0x00016fc3
    3e54:	00016528 	.word	0x00016528
    3e58:	00016f91 	.word	0x00016f91
    3e5c:	200002fc 	.word	0x200002fc

00003e60 <bt_recv_prio>:
{
    3e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3e64:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3e66:	6887      	ldr	r7, [r0, #8]
    3e68:	4c80      	ldr	r4, [pc, #512]	; (406c <bt_recv_prio+0x20c>)
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3e6a:	2b01      	cmp	r3, #1
{
    3e6c:	b089      	sub	sp, #36	; 0x24
    3e6e:	4605      	mov	r5, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3e70:	d00d      	beq.n	3e8e <bt_recv_prio+0x2e>
    3e72:	4b7f      	ldr	r3, [pc, #508]	; (4070 <bt_recv_prio+0x210>)
    3e74:	4a7f      	ldr	r2, [pc, #508]	; (4074 <bt_recv_prio+0x214>)
    3e76:	4980      	ldr	r1, [pc, #512]	; (4078 <bt_recv_prio+0x218>)
    3e78:	4880      	ldr	r0, [pc, #512]	; (407c <bt_recv_prio+0x21c>)
    3e7a:	9401      	str	r4, [sp, #4]
    3e7c:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3e7e:	f7fd f885 	bl	f8c <printk>
    3e82:	4040      	eors	r0, r0
    3e84:	f380 8811 	msr	BASEPRI, r0
    3e88:	f04f 0004 	mov.w	r0, #4
    3e8c:	df02      	svc	2
    3e8e:	8982      	ldrh	r2, [r0, #12]
    3e90:	2a01      	cmp	r2, #1
    3e92:	d806      	bhi.n	3ea2 <bt_recv_prio+0x42>
    3e94:	9401      	str	r4, [sp, #4]
    3e96:	9400      	str	r4, [sp, #0]
    3e98:	4b75      	ldr	r3, [pc, #468]	; (4070 <bt_recv_prio+0x210>)
    3e9a:	4a76      	ldr	r2, [pc, #472]	; (4074 <bt_recv_prio+0x214>)
    3e9c:	4976      	ldr	r1, [pc, #472]	; (4078 <bt_recv_prio+0x218>)
    3e9e:	4878      	ldr	r0, [pc, #480]	; (4080 <bt_recv_prio+0x220>)
    3ea0:	e7ed      	b.n	3e7e <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3ea2:	783a      	ldrb	r2, [r7, #0]
    3ea4:	2a13      	cmp	r2, #19
    3ea6:	f200 80d9 	bhi.w	405c <bt_recv_prio+0x1fc>
    3eaa:	4093      	lsls	r3, r2
    3eac:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3eb0:	f000 80d4 	beq.w	405c <bt_recv_prio+0x1fc>
	net_buf_pull(buf, sizeof(*hdr));
    3eb4:	f100 0608 	add.w	r6, r0, #8
    3eb8:	2102      	movs	r1, #2
    3eba:	4630      	mov	r0, r6
    3ebc:	f010 f9bd 	bl	1423a <net_buf_simple_pull>
	switch (hdr->evt) {
    3ec0:	783b      	ldrb	r3, [r7, #0]
    3ec2:	2b0f      	cmp	r3, #15
    3ec4:	d02c      	beq.n	3f20 <bt_recv_prio+0xc0>
    3ec6:	2b13      	cmp	r3, #19
    3ec8:	d049      	beq.n	3f5e <bt_recv_prio+0xfe>
    3eca:	2b0e      	cmp	r3, #14
    3ecc:	f040 80bc 	bne.w	4048 <bt_recv_prio+0x1e8>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3ed0:	68ab      	ldr	r3, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3ed2:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3ed6:	f893 8000 	ldrb.w	r8, [r3]
    3eda:	f011 f9d7 	bl	1528c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3ede:	4b69      	ldr	r3, [pc, #420]	; (4084 <bt_recv_prio+0x224>)
    3ee0:	4a69      	ldr	r2, [pc, #420]	; (4088 <bt_recv_prio+0x228>)
    3ee2:	9001      	str	r0, [sp, #4]
    3ee4:	4964      	ldr	r1, [pc, #400]	; (4078 <bt_recv_prio+0x218>)
    3ee6:	9403      	str	r4, [sp, #12]
    3ee8:	9702      	str	r7, [sp, #8]
    3eea:	9400      	str	r4, [sp, #0]
    3eec:	4867      	ldr	r0, [pc, #412]	; (408c <bt_recv_prio+0x22c>)
    3eee:	f7fd f84d 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3ef2:	2103      	movs	r1, #3
    3ef4:	4630      	mov	r0, r6
    3ef6:	f010 f9a0 	bl	1423a <net_buf_simple_pull>
	status = buf->data[0];
    3efa:	68ab      	ldr	r3, [r5, #8]
	hci_cmd_done(opcode, status, buf);
    3efc:	462a      	mov	r2, r5
    3efe:	7819      	ldrb	r1, [r3, #0]
    3f00:	4638      	mov	r0, r7
    3f02:	f7fe f8d5 	bl	20b0 <hci_cmd_done>
	if (ncmd) {
    3f06:	f1b8 0f00 	cmp.w	r8, #0
    3f0a:	d002      	beq.n	3f12 <bt_recv_prio+0xb2>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3f0c:	4860      	ldr	r0, [pc, #384]	; (4090 <bt_recv_prio+0x230>)
    3f0e:	f011 f9cc 	bl	152aa <_impl_k_sem_give>
	net_buf_unref(buf);
    3f12:	4628      	mov	r0, r5
    3f14:	f010 f940 	bl	14198 <net_buf_unref>
}
    3f18:	2000      	movs	r0, #0
    3f1a:	b009      	add	sp, #36	; 0x24
    3f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3f20:	68af      	ldr	r7, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3f22:	f8b7 8002 	ldrh.w	r8, [r7, #2]
	u8_t ncmd = evt->ncmd;
    3f26:	f897 9001 	ldrb.w	r9, [r7, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3f2a:	f011 f9af 	bl	1528c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3f2e:	4a56      	ldr	r2, [pc, #344]	; (4088 <bt_recv_prio+0x228>)
    3f30:	9001      	str	r0, [sp, #4]
    3f32:	4b58      	ldr	r3, [pc, #352]	; (4094 <bt_recv_prio+0x234>)
    3f34:	4950      	ldr	r1, [pc, #320]	; (4078 <bt_recv_prio+0x218>)
    3f36:	9403      	str	r4, [sp, #12]
    3f38:	f8cd 8008 	str.w	r8, [sp, #8]
    3f3c:	9400      	str	r4, [sp, #0]
    3f3e:	4853      	ldr	r0, [pc, #332]	; (408c <bt_recv_prio+0x22c>)
    3f40:	f7fd f824 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3f44:	2104      	movs	r1, #4
    3f46:	4630      	mov	r0, r6
    3f48:	f010 f977 	bl	1423a <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3f4c:	462a      	mov	r2, r5
    3f4e:	7839      	ldrb	r1, [r7, #0]
    3f50:	4640      	mov	r0, r8
    3f52:	f7fe f8ad 	bl	20b0 <hci_cmd_done>
	if (ncmd) {
    3f56:	f1b9 0f00 	cmp.w	r9, #0
    3f5a:	d0da      	beq.n	3f12 <bt_recv_prio+0xb2>
    3f5c:	e7d6      	b.n	3f0c <bt_recv_prio+0xac>
    3f5e:	f8d5 b008 	ldr.w	fp, [r5, #8]
		BT_DBG("handle %u count %u", handle, count);
    3f62:	f8df 9114 	ldr.w	r9, [pc, #276]	; 4078 <bt_recv_prio+0x218>
    3f66:	f011 f991 	bl	1528c <_impl_k_current_get>
	BT_DBG("num_handles %u", evt->num_handles);
    3f6a:	9403      	str	r4, [sp, #12]
    3f6c:	f89b 3000 	ldrb.w	r3, [fp]
    3f70:	9302      	str	r3, [sp, #8]
    3f72:	9001      	str	r0, [sp, #4]
    3f74:	9400      	str	r4, [sp, #0]
    3f76:	4b48      	ldr	r3, [pc, #288]	; (4098 <bt_recv_prio+0x238>)
    3f78:	4a43      	ldr	r2, [pc, #268]	; (4088 <bt_recv_prio+0x228>)
    3f7a:	493f      	ldr	r1, [pc, #252]	; (4078 <bt_recv_prio+0x218>)
    3f7c:	4847      	ldr	r0, [pc, #284]	; (409c <bt_recv_prio+0x23c>)
    3f7e:	f7fd f805 	bl	f8c <printk>
	for (i = 0; i < evt->num_handles; i++) {
    3f82:	f04f 0800 	mov.w	r8, #0
    3f86:	f89b 3000 	ldrb.w	r3, [fp]
    3f8a:	4598      	cmp	r8, r3
    3f8c:	dac1      	bge.n	3f12 <bt_recv_prio+0xb2>
    3f8e:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3f92:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3f96:	f8b3 7003 	ldrh.w	r7, [r3, #3]
    3f9a:	f011 f977 	bl	1528c <_impl_k_current_get>
		BT_DBG("handle %u count %u", handle, count);
    3f9e:	9404      	str	r4, [sp, #16]
    3fa0:	9001      	str	r0, [sp, #4]
    3fa2:	9703      	str	r7, [sp, #12]
    3fa4:	f8cd a008 	str.w	sl, [sp, #8]
    3fa8:	9400      	str	r4, [sp, #0]
    3faa:	4b3b      	ldr	r3, [pc, #236]	; (4098 <bt_recv_prio+0x238>)
    3fac:	4a36      	ldr	r2, [pc, #216]	; (4088 <bt_recv_prio+0x228>)
    3fae:	483c      	ldr	r0, [pc, #240]	; (40a0 <bt_recv_prio+0x240>)
    3fb0:	4649      	mov	r1, r9
    3fb2:	f7fc ffeb 	bl	f8c <printk>
	__asm__ volatile(
    3fb6:	f04f 0320 	mov.w	r3, #32
    3fba:	f3ef 8211 	mrs	r2, BASEPRI
    3fbe:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    3fc2:	4650      	mov	r0, sl
    3fc4:	9207      	str	r2, [sp, #28]
    3fc6:	f000 fcdf 	bl	4988 <bt_conn_lookup_handle>
		if (!conn) {
    3fca:	4606      	mov	r6, r0
    3fcc:	b970      	cbnz	r0, 3fec <bt_recv_prio+0x18c>
			BT_ERR("No connection for handle %u", handle);
    3fce:	9402      	str	r4, [sp, #8]
    3fd0:	e88d 0410 	stmia.w	sp, {r4, sl}
    3fd4:	4b30      	ldr	r3, [pc, #192]	; (4098 <bt_recv_prio+0x238>)
    3fd6:	4a27      	ldr	r2, [pc, #156]	; (4074 <bt_recv_prio+0x214>)
    3fd8:	4832      	ldr	r0, [pc, #200]	; (40a4 <bt_recv_prio+0x244>)
    3fda:	4649      	mov	r1, r9
    3fdc:	f7fc ffd6 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3fe0:	9b07      	ldr	r3, [sp, #28]
    3fe2:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < evt->num_handles; i++) {
    3fe6:	f108 0801 	add.w	r8, r8, #1
    3fea:	e7cc      	b.n	3f86 <bt_recv_prio+0x126>
    3fec:	9b07      	ldr	r3, [sp, #28]
    3fee:	f383 8811 	msr	BASEPRI, r3
			k_fifo_put(&conn->tx_notify, node);
    3ff2:	f100 0a18 	add.w	sl, r0, #24
		while (count--) {
    3ff6:	b1d7      	cbz	r7, 402e <bt_recv_prio+0x1ce>
	__asm__ volatile(
    3ff8:	f04f 0320 	mov.w	r3, #32
    3ffc:	f3ef 8011 	mrs	r0, BASEPRI
    4000:	f383 8811 	msr	BASEPRI, r3
    4004:	6931      	ldr	r1, [r6, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    4006:	b129      	cbz	r1, 4014 <bt_recv_prio+0x1b4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4008:	6972      	ldr	r2, [r6, #20]
	return node->next;
    400a:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    400c:	6133      	str	r3, [r6, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    400e:	4291      	cmp	r1, r2
	list->tail = node;
    4010:	bf08      	it	eq
    4012:	6173      	streq	r3, [r6, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4014:	f380 8811 	msr	BASEPRI, r0
    4018:	3f01      	subs	r7, #1
    401a:	b2bf      	uxth	r7, r7
			if (!node) {
    401c:	b959      	cbnz	r1, 4036 <bt_recv_prio+0x1d6>
				BT_ERR("packets count mismatch");
    401e:	9401      	str	r4, [sp, #4]
    4020:	9400      	str	r4, [sp, #0]
    4022:	4b1d      	ldr	r3, [pc, #116]	; (4098 <bt_recv_prio+0x238>)
    4024:	4a13      	ldr	r2, [pc, #76]	; (4074 <bt_recv_prio+0x214>)
    4026:	4820      	ldr	r0, [pc, #128]	; (40a8 <bt_recv_prio+0x248>)
    4028:	4649      	mov	r1, r9
    402a:	f7fc ffaf 	bl	f8c <printk>
		bt_conn_unref(conn);
    402e:	4630      	mov	r0, r6
    4030:	f000 fcf8 	bl	4a24 <bt_conn_unref>
    4034:	e7d7      	b.n	3fe6 <bt_recv_prio+0x186>
			k_fifo_put(&conn->tx_notify, node);
    4036:	4650      	mov	r0, sl
    4038:	f010 fe72 	bl	14d20 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    403c:	4630      	mov	r0, r6
    403e:	f000 f9b3 	bl	43a8 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4042:	f011 f932 	bl	152aa <_impl_k_sem_give>
    4046:	e7d6      	b.n	3ff6 <bt_recv_prio+0x196>
		net_buf_unref(buf);
    4048:	4628      	mov	r0, r5
    404a:	f010 f8a5 	bl	14198 <net_buf_unref>
		BT_ASSERT(0);
    404e:	9401      	str	r4, [sp, #4]
    4050:	9400      	str	r4, [sp, #0]
    4052:	4b07      	ldr	r3, [pc, #28]	; (4070 <bt_recv_prio+0x210>)
    4054:	4a07      	ldr	r2, [pc, #28]	; (4074 <bt_recv_prio+0x214>)
    4056:	4908      	ldr	r1, [pc, #32]	; (4078 <bt_recv_prio+0x218>)
    4058:	4814      	ldr	r0, [pc, #80]	; (40ac <bt_recv_prio+0x24c>)
    405a:	e710      	b.n	3e7e <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    405c:	9401      	str	r4, [sp, #4]
    405e:	9400      	str	r4, [sp, #0]
    4060:	4b03      	ldr	r3, [pc, #12]	; (4070 <bt_recv_prio+0x210>)
    4062:	4a04      	ldr	r2, [pc, #16]	; (4074 <bt_recv_prio+0x214>)
    4064:	4904      	ldr	r1, [pc, #16]	; (4078 <bt_recv_prio+0x218>)
    4066:	4812      	ldr	r0, [pc, #72]	; (40b0 <bt_recv_prio+0x250>)
    4068:	e709      	b.n	3e7e <bt_recv_prio+0x1e>
    406a:	bf00      	nop
    406c:	00015e19 	.word	0x00015e19
    4070:	00016690 	.word	0x00016690
    4074:	000171f2 	.word	0x000171f2
    4078:	00017241 	.word	0x00017241
    407c:	00017026 	.word	0x00017026
    4080:	0001706a 	.word	0x0001706a
    4084:	000164e8 	.word	0x000164e8
    4088:	0001723a 	.word	0x0001723a
    408c:	000170a4 	.word	0x000170a4
    4090:	20003b30 	.word	0x20003b30
    4094:	000164f9 	.word	0x000164f9
    4098:	000163dd 	.word	0x000163dd
    409c:	000170c7 	.word	0x000170c7
    40a0:	000170eb 	.word	0x000170eb
    40a4:	00017113 	.word	0x00017113
    40a8:	0001713f 	.word	0x0001713f
    40ac:	00017166 	.word	0x00017166
    40b0:	00017189 	.word	0x00017189

000040b4 <bt_hci_driver_register>:
{
    40b4:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    40b6:	4b13      	ldr	r3, [pc, #76]	; (4104 <bt_hci_driver_register+0x50>)
    40b8:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
    40bc:	b085      	sub	sp, #20
    40be:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    40c0:	b9cc      	cbnz	r4, 40f6 <bt_hci_driver_register+0x42>
	if (!drv->open || !drv->send) {
    40c2:	68c2      	ldr	r2, [r0, #12]
    40c4:	b1d2      	cbz	r2, 40fc <bt_hci_driver_register+0x48>
    40c6:	6902      	ldr	r2, [r0, #16]
    40c8:	b1c2      	cbz	r2, 40fc <bt_hci_driver_register+0x48>
	bt_dev.drv = drv;
    40ca:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    40ce:	f011 f8dd 	bl	1528c <_impl_k_current_get>
    40d2:	4a0d      	ldr	r2, [pc, #52]	; (4108 <bt_hci_driver_register+0x54>)
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    40d4:	682b      	ldr	r3, [r5, #0]
    40d6:	9203      	str	r2, [sp, #12]
    40d8:	2b00      	cmp	r3, #0
    40da:	bf08      	it	eq
    40dc:	4613      	moveq	r3, r2
    40de:	9302      	str	r3, [sp, #8]
    40e0:	9001      	str	r0, [sp, #4]
    40e2:	9200      	str	r2, [sp, #0]
    40e4:	4b09      	ldr	r3, [pc, #36]	; (410c <bt_hci_driver_register+0x58>)
    40e6:	4a0a      	ldr	r2, [pc, #40]	; (4110 <bt_hci_driver_register+0x5c>)
    40e8:	490a      	ldr	r1, [pc, #40]	; (4114 <bt_hci_driver_register+0x60>)
    40ea:	480b      	ldr	r0, [pc, #44]	; (4118 <bt_hci_driver_register+0x64>)
    40ec:	f7fc ff4e 	bl	f8c <printk>
	return 0;
    40f0:	4620      	mov	r0, r4
}
    40f2:	b005      	add	sp, #20
    40f4:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    40f6:	f06f 0044 	mvn.w	r0, #68	; 0x44
    40fa:	e7fa      	b.n	40f2 <bt_hci_driver_register+0x3e>
		return -EINVAL;
    40fc:	f06f 0015 	mvn.w	r0, #21
    4100:	e7f7      	b.n	40f2 <bt_hci_driver_register+0x3e>
    4102:	bf00      	nop
    4104:	20003a88 	.word	0x20003a88
    4108:	00015e19 	.word	0x00015e19
    410c:	0001669d 	.word	0x0001669d
    4110:	0001723a 	.word	0x0001723a
    4114:	00017241 	.word	0x00017241
    4118:	000168ff 	.word	0x000168ff

0000411c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    411c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    411e:	4d2a      	ldr	r5, [pc, #168]	; (41c8 <bt_enable+0xac>)
    4120:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    4124:	b086      	sub	sp, #24
    4126:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    4128:	b96b      	cbnz	r3, 4146 <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    412a:	4b28      	ldr	r3, [pc, #160]	; (41cc <bt_enable+0xb0>)
    412c:	9301      	str	r3, [sp, #4]
    412e:	9300      	str	r3, [sp, #0]
    4130:	4a27      	ldr	r2, [pc, #156]	; (41d0 <bt_enable+0xb4>)
    4132:	4b28      	ldr	r3, [pc, #160]	; (41d4 <bt_enable+0xb8>)
    4134:	4928      	ldr	r1, [pc, #160]	; (41d8 <bt_enable+0xbc>)
    4136:	4829      	ldr	r0, [pc, #164]	; (41dc <bt_enable+0xc0>)
    4138:	f7fc ff28 	bl	f8c <printk>
		return -ENODEV;
    413c:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    4140:	4620      	mov	r0, r4
    4142:	b006      	add	sp, #24
    4144:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4146:	2101      	movs	r1, #1
    4148:	f105 0070 	add.w	r0, r5, #112	; 0x70
    414c:	f7fd ff7f 	bl	204e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4150:	f010 0001 	ands.w	r0, r0, #1
    4154:	d134      	bne.n	41c0 <bt_enable+0xa4>
	ready_cb = cb;
    4156:	4b22      	ldr	r3, [pc, #136]	; (41e0 <bt_enable+0xc4>)

    4158:	4922      	ldr	r1, [pc, #136]	; (41e4 <bt_enable+0xc8>)
    415a:	601e      	str	r6, [r3, #0]
    415c:	f06f 0308 	mvn.w	r3, #8
    4160:	9005      	str	r0, [sp, #20]
    4162:	9004      	str	r0, [sp, #16]
    4164:	9303      	str	r3, [sp, #12]
    4166:	9002      	str	r0, [sp, #8]
    4168:	9001      	str	r0, [sp, #4]
    416a:	9000      	str	r0, [sp, #0]
    416c:	4b1e      	ldr	r3, [pc, #120]	; (41e8 <bt_enable+0xcc>)
    416e:	481f      	ldr	r0, [pc, #124]	; (41ec <bt_enable+0xd0>)
    4170:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    4174:	f011 fa96 	bl	156a4 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    4178:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    417c:	68db      	ldr	r3, [r3, #12]
    417e:	4798      	blx	r3
	if (err) {
    4180:	4604      	mov	r4, r0
    4182:	b150      	cbz	r0, 419a <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    4184:	4b11      	ldr	r3, [pc, #68]	; (41cc <bt_enable+0xb0>)
    4186:	9302      	str	r3, [sp, #8]
    4188:	e88d 0018 	stmia.w	sp, {r3, r4}
    418c:	4a10      	ldr	r2, [pc, #64]	; (41d0 <bt_enable+0xb4>)
    418e:	4b11      	ldr	r3, [pc, #68]	; (41d4 <bt_enable+0xb8>)
    4190:	4911      	ldr	r1, [pc, #68]	; (41d8 <bt_enable+0xbc>)
    4192:	4817      	ldr	r0, [pc, #92]	; (41f0 <bt_enable+0xd4>)
    4194:	f7fc fefa 	bl	f8c <printk>
		return err;
    4198:	e7d2      	b.n	4140 <bt_enable+0x24>
	if (!cb) {
    419a:	b926      	cbnz	r6, 41a6 <bt_enable+0x8a>
}
    419c:	b006      	add	sp, #24
    419e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    41a2:	f7fe bb39 	b.w	2818 <bt_init>
    41a6:	2101      	movs	r1, #1
    41a8:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    41ac:	f7fd ff4f 	bl	204e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    41b0:	07c3      	lsls	r3, r0, #31
    41b2:	d4c5      	bmi.n	4140 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    41b4:	f105 0164 	add.w	r1, r5, #100	; 0x64
    41b8:	480e      	ldr	r0, [pc, #56]	; (41f4 <bt_enable+0xd8>)
    41ba:	f010 fdb1 	bl	14d20 <k_queue_append>
    41be:	e7bf      	b.n	4140 <bt_enable+0x24>
		return -EALREADY;
    41c0:	f06f 0444 	mvn.w	r4, #68	; 0x44
    41c4:	e7bc      	b.n	4140 <bt_enable+0x24>
    41c6:	bf00      	nop
    41c8:	20003a88 	.word	0x20003a88
    41cc:	00015e19 	.word	0x00015e19
    41d0:	000171f2 	.word	0x000171f2
    41d4:	000166b4 	.word	0x000166b4
    41d8:	00017241 	.word	0x00017241
    41dc:	000167a0 	.word	0x000167a0
    41e0:	200002f8 	.word	0x200002f8
    41e4:	20001a30 	.word	0x20001a30
    41e8:	000032cd 	.word	0x000032cd
    41ec:	20000300 	.word	0x20000300
    41f0:	000167c9 	.word	0x000167c9
    41f4:	200019b0 	.word	0x200019b0

000041f8 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    41f8:	2000      	movs	r0, #0
    41fa:	4770      	bx	lr

000041fc <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    41fc:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    41fe:	7803      	ldrb	r3, [r0, #0]
    4200:	2b01      	cmp	r3, #1
{
    4202:	4605      	mov	r5, r0
    4204:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4206:	d810      	bhi.n	422a <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    4208:	7843      	ldrb	r3, [r0, #1]
    420a:	2b01      	cmp	r3, #1
    420c:	d80d      	bhi.n	422a <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    420e:	8841      	ldrh	r1, [r0, #2]
    4210:	1f0b      	subs	r3, r1, #4
    4212:	b29b      	uxth	r3, r3
    4214:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    4218:	4283      	cmp	r3, r0
    421a:	d806      	bhi.n	422a <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    421c:	88aa      	ldrh	r2, [r5, #4]
    421e:	1f13      	subs	r3, r2, #4
    4220:	b29b      	uxth	r3, r3
    4222:	4283      	cmp	r3, r0
    4224:	d801      	bhi.n	422a <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    4226:	4291      	cmp	r1, r2
    4228:	d22b      	bcs.n	4282 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    422a:	f06f 0415 	mvn.w	r4, #21
    422e:	e00e      	b.n	424e <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4230:	2108      	movs	r1, #8
    4232:	4819      	ldr	r0, [pc, #100]	; (4298 <bt_le_scan_start+0x9c>)
    4234:	f7fd ffb2 	bl	219c <atomic_test_bit>
    4238:	b158      	cbz	r0, 4252 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    423a:	4610      	mov	r0, r2
    423c:	f7fe f88e 	bl	235c <set_le_scan_enable>
		if (err) {
    4240:	4604      	mov	r4, r0
    4242:	b130      	cbz	r0, 4252 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4244:	f46f 7100 	mvn.w	r1, #512	; 0x200
    4248:	4813      	ldr	r0, [pc, #76]	; (4298 <bt_le_scan_start+0x9c>)
    424a:	f7fd ff11 	bl	2070 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    424e:	4620      	mov	r0, r4
    4250:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    4252:	786b      	ldrb	r3, [r5, #1]
    4254:	b17b      	cbz	r3, 4276 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4256:	f44f 6100 	mov.w	r1, #2048	; 0x800
    425a:	480f      	ldr	r0, [pc, #60]	; (4298 <bt_le_scan_start+0x9c>)
    425c:	f7fd fef7 	bl	204e <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    4260:	88aa      	ldrh	r2, [r5, #4]
    4262:	8869      	ldrh	r1, [r5, #2]
    4264:	7828      	ldrb	r0, [r5, #0]
    4266:	f7fe fa55 	bl	2714 <start_le_scan>
	if (err) {
    426a:	4604      	mov	r4, r0
    426c:	2800      	cmp	r0, #0
    426e:	d1e9      	bne.n	4244 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    4270:	4b0a      	ldr	r3, [pc, #40]	; (429c <bt_le_scan_start+0xa0>)
    4272:	601e      	str	r6, [r3, #0]
	return 0;
    4274:	e7eb      	b.n	424e <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4276:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    427a:	4807      	ldr	r0, [pc, #28]	; (4298 <bt_le_scan_start+0x9c>)
    427c:	f7fd fef8 	bl	2070 <atomic_and>
    4280:	e7ee      	b.n	4260 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4282:	f44f 7100 	mov.w	r1, #512	; 0x200
    4286:	4804      	ldr	r0, [pc, #16]	; (4298 <bt_le_scan_start+0x9c>)
    4288:	f7fd fee1 	bl	204e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    428c:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    4290:	d0ce      	beq.n	4230 <bt_le_scan_start+0x34>
		return -EALREADY;
    4292:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4296:	e7da      	b.n	424e <bt_le_scan_start+0x52>
    4298:	20003af8 	.word	0x20003af8
    429c:	200002fc 	.word	0x200002fc

000042a0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    42a0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    42a2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    42a6:	4807      	ldr	r0, [pc, #28]	; (42c4 <bt_le_scan_stop+0x24>)
    42a8:	f7fd fee2 	bl	2070 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    42ac:	0583      	lsls	r3, r0, #22
    42ae:	d506      	bpl.n	42be <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    42b0:	4b05      	ldr	r3, [pc, #20]	; (42c8 <bt_le_scan_stop+0x28>)
    42b2:	2000      	movs	r0, #0
    42b4:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    42b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    42ba:	f7fe ba7b 	b.w	27b4 <bt_le_scan_update>
}
    42be:	f06f 0044 	mvn.w	r0, #68	; 0x44
    42c2:	bd08      	pop	{r3, pc}
    42c4:	20003af8 	.word	0x20003af8
    42c8:	200002fc 	.word	0x200002fc

000042cc <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    42cc:	b538      	push	{r3, r4, r5, lr}
    42ce:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    42d0:	4805      	ldr	r0, [pc, #20]	; (42e8 <bt_buf_get_rx+0x1c>)
    42d2:	f00f ff31 	bl	14138 <net_buf_alloc_fixed>
#endif

	if (buf) {
    42d6:	4604      	mov	r4, r0
    42d8:	b120      	cbz	r0, 42e4 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    42da:	2100      	movs	r1, #0
    42dc:	3008      	adds	r0, #8
    42de:	f00f ff4a 	bl	14176 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    42e2:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    42e4:	4620      	mov	r0, r4
    42e6:	bd38      	pop	{r3, r4, r5, pc}
    42e8:	20003fb4 	.word	0x20003fb4

000042ec <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    42ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    42ee:	4606      	mov	r6, r0
	__asm__ volatile(
    42f0:	f04f 0320 	mov.w	r3, #32
    42f4:	f3ef 8211 	mrs	r2, BASEPRI
    42f8:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    42fc:	4b13      	ldr	r3, [pc, #76]	; (434c <bt_buf_get_cmd_complete+0x60>)
	bt_dev.sent_cmd = NULL;
    42fe:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    4300:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    4304:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4308:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    430c:	f010 ffbe 	bl	1528c <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    4310:	4b0f      	ldr	r3, [pc, #60]	; (4350 <bt_buf_get_cmd_complete+0x64>)
    4312:	9303      	str	r3, [sp, #12]
    4314:	9001      	str	r0, [sp, #4]
    4316:	9300      	str	r3, [sp, #0]
    4318:	9402      	str	r4, [sp, #8]
    431a:	4b0e      	ldr	r3, [pc, #56]	; (4354 <bt_buf_get_cmd_complete+0x68>)
    431c:	4a0e      	ldr	r2, [pc, #56]	; (4358 <bt_buf_get_cmd_complete+0x6c>)
    431e:	490f      	ldr	r1, [pc, #60]	; (435c <bt_buf_get_cmd_complete+0x70>)
    4320:	480f      	ldr	r0, [pc, #60]	; (4360 <bt_buf_get_cmd_complete+0x74>)
    4322:	f7fc fe33 	bl	f8c <printk>

	if (buf) {
    4326:	b934      	cbnz	r4, 4336 <bt_buf_get_cmd_complete+0x4a>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4328:	4631      	mov	r1, r6
    432a:	2001      	movs	r0, #1
}
    432c:	b004      	add	sp, #16
    432e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4332:	f7ff bfcb 	b.w	42cc <bt_buf_get_rx>
    4336:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4338:	f104 0008 	add.w	r0, r4, #8
    433c:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    433e:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4340:	4629      	mov	r1, r5
    4342:	f00f ff18 	bl	14176 <net_buf_simple_reserve>
}
    4346:	4620      	mov	r0, r4
    4348:	b004      	add	sp, #16
    434a:	bd70      	pop	{r4, r5, r6, pc}
    434c:	20003a88 	.word	0x20003a88
    4350:	00015e19 	.word	0x00015e19
    4354:	000166be 	.word	0x000166be
    4358:	0001723a 	.word	0x0001723a
    435c:	00017241 	.word	0x00017241
    4360:	000166d6 	.word	0x000166d6

00004364 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    4364:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4366:	4b06      	ldr	r3, [pc, #24]	; (4380 <notify_connected+0x1c>)
    4368:	681c      	ldr	r4, [r3, #0]
{
    436a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    436c:	b904      	cbnz	r4, 4370 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    436e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    4370:	6823      	ldr	r3, [r4, #0]
    4372:	b113      	cbz	r3, 437a <notify_connected+0x16>
			cb->connected(conn, conn->err);
    4374:	7a29      	ldrb	r1, [r5, #8]
    4376:	4628      	mov	r0, r5
    4378:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    437a:	6924      	ldr	r4, [r4, #16]
    437c:	e7f6      	b.n	436c <notify_connected+0x8>
    437e:	bf00      	nop
    4380:	20000370 	.word	0x20000370

00004384 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4384:	f3bf 8f5b 	dmb	ish
    4388:	6800      	ldr	r0, [r0, #0]
    438a:	f3bf 8f5b 	dmb	ish
}
    438e:	4770      	bx	lr

00004390 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    4390:	8943      	ldrh	r3, [r0, #10]
{
    4392:	b510      	push	{r4, lr}
    4394:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    4396:	b12b      	cbz	r3, 43a4 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    4398:	68c0      	ldr	r0, [r0, #12]
    439a:	f00f fefd 	bl	14198 <net_buf_unref>
	conn->rx = NULL;
    439e:	2300      	movs	r3, #0
    43a0:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    43a2:	8163      	strh	r3, [r4, #10]
    43a4:	bd10      	pop	{r4, pc}
	...

000043a8 <bt_conn_get_pkts>:
}
    43a8:	4800      	ldr	r0, [pc, #0]	; (43ac <bt_conn_get_pkts+0x4>)
    43aa:	4770      	bx	lr
    43ac:	20003b14 	.word	0x20003b14

000043b0 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    43b0:	4b08      	ldr	r3, [pc, #32]	; (43d4 <notify_le_param_updated+0x24>)
{
    43b2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    43b4:	681c      	ldr	r4, [r3, #0]
{
    43b6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    43b8:	b904      	cbnz	r4, 43bc <notify_le_param_updated+0xc>
}
    43ba:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    43bc:	68e6      	ldr	r6, [r4, #12]
    43be:	b13e      	cbz	r6, 43d0 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    43c0:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    43c4:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    43c8:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    43cc:	4628      	mov	r0, r5
    43ce:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    43d0:	6924      	ldr	r4, [r4, #16]
    43d2:	e7f1      	b.n	43b8 <notify_le_param_updated+0x8>
    43d4:	20000370 	.word	0x20000370

000043d8 <le_param_req>:
{
    43d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43da:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    43dc:	4608      	mov	r0, r1
{
    43de:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    43e0:	f7fe f878 	bl	24d4 <bt_le_conn_params_valid>
    43e4:	4605      	mov	r5, r0
    43e6:	b910      	cbnz	r0, 43ee <le_param_req+0x16>
		return false;
    43e8:	2500      	movs	r5, #0
}
    43ea:	4628      	mov	r0, r5
    43ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    43ee:	4b09      	ldr	r3, [pc, #36]	; (4414 <le_param_req+0x3c>)
    43f0:	681c      	ldr	r4, [r3, #0]
    43f2:	2c00      	cmp	r4, #0
    43f4:	d0f9      	beq.n	43ea <le_param_req+0x12>
		if (!cb->le_param_req) {
    43f6:	68a3      	ldr	r3, [r4, #8]
    43f8:	b90b      	cbnz	r3, 43fe <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    43fa:	6924      	ldr	r4, [r4, #16]
    43fc:	e7f9      	b.n	43f2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    43fe:	4631      	mov	r1, r6
    4400:	4638      	mov	r0, r7
    4402:	4798      	blx	r3
    4404:	2800      	cmp	r0, #0
    4406:	d0ef      	beq.n	43e8 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    4408:	4630      	mov	r0, r6
    440a:	f7fe f863 	bl	24d4 <bt_le_conn_params_valid>
    440e:	2800      	cmp	r0, #0
    4410:	d1f3      	bne.n	43fa <le_param_req+0x22>
    4412:	e7e9      	b.n	43e8 <le_param_req+0x10>
    4414:	20000370 	.word	0x20000370

00004418 <bt_conn_cb_register>:
	cb->_next = callback_list;
    4418:	4b02      	ldr	r3, [pc, #8]	; (4424 <bt_conn_cb_register+0xc>)
    441a:	681a      	ldr	r2, [r3, #0]
    441c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    441e:	6018      	str	r0, [r3, #0]
    4420:	4770      	bx	lr
    4422:	bf00      	nop
    4424:	20000370 	.word	0x20000370

00004428 <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    4428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    442c:	b086      	sub	sp, #24
    442e:	4690      	mov	r8, r2
    4430:	460d      	mov	r5, r1
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    4432:	4e66      	ldr	r6, [pc, #408]	; (45cc <bt_conn_recv+0x1a4>)
{
    4434:	4604      	mov	r4, r0
    4436:	f010 ff29 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    443a:	9605      	str	r6, [sp, #20]
    443c:	f8cd 8010 	str.w	r8, [sp, #16]
    4440:	89ab      	ldrh	r3, [r5, #12]
    4442:	9303      	str	r3, [sp, #12]
    4444:	8823      	ldrh	r3, [r4, #0]
    4446:	9302      	str	r3, [sp, #8]
    4448:	9001      	str	r0, [sp, #4]
    444a:	9600      	str	r6, [sp, #0]
    444c:	4b60      	ldr	r3, [pc, #384]	; (45d0 <bt_conn_recv+0x1a8>)
    444e:	4a61      	ldr	r2, [pc, #388]	; (45d4 <bt_conn_recv+0x1ac>)
    4450:	4961      	ldr	r1, [pc, #388]	; (45d8 <bt_conn_recv+0x1b0>)
    4452:	4862      	ldr	r0, [pc, #392]	; (45dc <bt_conn_recv+0x1b4>)
    4454:	f7fc fd9a 	bl	f8c <printk>

	/* Check packet boundary flags */
	switch (flags) {
    4458:	f1b8 0f01 	cmp.w	r8, #1
    445c:	4637      	mov	r7, r6
    445e:	d038      	beq.n	44d2 <bt_conn_recv+0xaa>
    4460:	f1b8 0f02 	cmp.w	r8, #2
    4464:	f040 8094 	bne.w	4590 <bt_conn_recv+0x168>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    4468:	68ab      	ldr	r3, [r5, #8]
    446a:	881e      	ldrh	r6, [r3, #0]
    446c:	f010 ff0e 	bl	1528c <_impl_k_current_get>

		BT_DBG("First, len %u final %u", buf->len, len);
    4470:	9704      	str	r7, [sp, #16]
    4472:	9603      	str	r6, [sp, #12]
    4474:	89ab      	ldrh	r3, [r5, #12]
    4476:	9302      	str	r3, [sp, #8]
    4478:	9001      	str	r0, [sp, #4]
    447a:	4b55      	ldr	r3, [pc, #340]	; (45d0 <bt_conn_recv+0x1a8>)
    447c:	9700      	str	r7, [sp, #0]
    447e:	4a55      	ldr	r2, [pc, #340]	; (45d4 <bt_conn_recv+0x1ac>)
    4480:	4955      	ldr	r1, [pc, #340]	; (45d8 <bt_conn_recv+0x1b0>)
    4482:	4857      	ldr	r0, [pc, #348]	; (45e0 <bt_conn_recv+0x1b8>)
    4484:	f7fc fd82 	bl	f8c <printk>

		if (conn->rx_len) {
    4488:	8963      	ldrh	r3, [r4, #10]
    448a:	b153      	cbz	r3, 44a2 <bt_conn_recv+0x7a>
			BT_ERR("Unexpected first L2CAP frame");
    448c:	9701      	str	r7, [sp, #4]
    448e:	9700      	str	r7, [sp, #0]
    4490:	4b4f      	ldr	r3, [pc, #316]	; (45d0 <bt_conn_recv+0x1a8>)
    4492:	4a54      	ldr	r2, [pc, #336]	; (45e4 <bt_conn_recv+0x1bc>)
    4494:	4950      	ldr	r1, [pc, #320]	; (45d8 <bt_conn_recv+0x1b0>)
    4496:	4854      	ldr	r0, [pc, #336]	; (45e8 <bt_conn_recv+0x1c0>)
    4498:	f7fc fd78 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    449c:	4620      	mov	r0, r4
    449e:	f7ff ff77 	bl	4390 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    44a2:	89ab      	ldrh	r3, [r5, #12]
    44a4:	1af6      	subs	r6, r6, r3
    44a6:	3604      	adds	r6, #4
    44a8:	8166      	strh	r6, [r4, #10]
    44aa:	f010 feef 	bl	1528c <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    44ae:	8963      	ldrh	r3, [r4, #10]
    44b0:	9302      	str	r3, [sp, #8]
    44b2:	9001      	str	r0, [sp, #4]
    44b4:	4b46      	ldr	r3, [pc, #280]	; (45d0 <bt_conn_recv+0x1a8>)
    44b6:	9703      	str	r7, [sp, #12]
    44b8:	9700      	str	r7, [sp, #0]
    44ba:	4a46      	ldr	r2, [pc, #280]	; (45d4 <bt_conn_recv+0x1ac>)
    44bc:	4946      	ldr	r1, [pc, #280]	; (45d8 <bt_conn_recv+0x1b0>)
    44be:	484b      	ldr	r0, [pc, #300]	; (45ec <bt_conn_recv+0x1c4>)
    44c0:	f7fc fd64 	bl	f8c <printk>
		if (conn->rx_len) {
    44c4:	8963      	ldrh	r3, [r4, #10]
    44c6:	2b00      	cmp	r3, #0
    44c8:	d051      	beq.n	456e <bt_conn_recv+0x146>
			conn->rx = buf;
    44ca:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    44cc:	b006      	add	sp, #24
    44ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->rx_len) {
    44d2:	8963      	ldrh	r3, [r4, #10]
    44d4:	b983      	cbnz	r3, 44f8 <bt_conn_recv+0xd0>
			BT_ERR("Unexpected L2CAP continuation");
    44d6:	4b3e      	ldr	r3, [pc, #248]	; (45d0 <bt_conn_recv+0x1a8>)
    44d8:	4a42      	ldr	r2, [pc, #264]	; (45e4 <bt_conn_recv+0x1bc>)
    44da:	493f      	ldr	r1, [pc, #252]	; (45d8 <bt_conn_recv+0x1b0>)
    44dc:	4844      	ldr	r0, [pc, #272]	; (45f0 <bt_conn_recv+0x1c8>)
    44de:	9601      	str	r6, [sp, #4]
    44e0:	9600      	str	r6, [sp, #0]
			BT_ERR("L2CAP data overflow");
    44e2:	f7fc fd53 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    44e6:	4620      	mov	r0, r4
    44e8:	f7ff ff52 	bl	4390 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    44ec:	4628      	mov	r0, r5
}
    44ee:	b006      	add	sp, #24
    44f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			net_buf_unref(buf);
    44f4:	f00f be50 	b.w	14198 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    44f8:	89aa      	ldrh	r2, [r5, #12]
    44fa:	429a      	cmp	r2, r3
    44fc:	d906      	bls.n	450c <bt_conn_recv+0xe4>
			BT_ERR("L2CAP data overflow");
    44fe:	9601      	str	r6, [sp, #4]
    4500:	9600      	str	r6, [sp, #0]
    4502:	4b33      	ldr	r3, [pc, #204]	; (45d0 <bt_conn_recv+0x1a8>)
    4504:	4a37      	ldr	r2, [pc, #220]	; (45e4 <bt_conn_recv+0x1bc>)
    4506:	4934      	ldr	r1, [pc, #208]	; (45d8 <bt_conn_recv+0x1b0>)
    4508:	483a      	ldr	r0, [pc, #232]	; (45f4 <bt_conn_recv+0x1cc>)
    450a:	e7ea      	b.n	44e2 <bt_conn_recv+0xba>
    450c:	f010 febe 	bl	1528c <_impl_k_current_get>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    4510:	8963      	ldrh	r3, [r4, #10]
    4512:	9604      	str	r6, [sp, #16]
    4514:	9303      	str	r3, [sp, #12]
    4516:	89ab      	ldrh	r3, [r5, #12]
    4518:	9302      	str	r3, [sp, #8]
    451a:	9001      	str	r0, [sp, #4]
    451c:	4b2c      	ldr	r3, [pc, #176]	; (45d0 <bt_conn_recv+0x1a8>)
    451e:	4a2d      	ldr	r2, [pc, #180]	; (45d4 <bt_conn_recv+0x1ac>)
    4520:	492d      	ldr	r1, [pc, #180]	; (45d8 <bt_conn_recv+0x1b0>)
    4522:	9600      	str	r6, [sp, #0]
    4524:	4834      	ldr	r0, [pc, #208]	; (45f8 <bt_conn_recv+0x1d0>)
    4526:	f7fc fd31 	bl	f8c <printk>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    452a:	68e0      	ldr	r0, [r4, #12]
    452c:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    4530:	3008      	adds	r0, #8
    4532:	f00f fe9e 	bl	14272 <net_buf_simple_tailroom>
    4536:	4580      	cmp	r8, r0
    4538:	d906      	bls.n	4548 <bt_conn_recv+0x120>
			BT_ERR("Not enough buffer space for L2CAP data");
    453a:	9601      	str	r6, [sp, #4]
    453c:	9600      	str	r6, [sp, #0]
    453e:	4b24      	ldr	r3, [pc, #144]	; (45d0 <bt_conn_recv+0x1a8>)
    4540:	4a28      	ldr	r2, [pc, #160]	; (45e4 <bt_conn_recv+0x1bc>)
    4542:	4925      	ldr	r1, [pc, #148]	; (45d8 <bt_conn_recv+0x1b0>)
    4544:	482d      	ldr	r0, [pc, #180]	; (45fc <bt_conn_recv+0x1d4>)
    4546:	e7cc      	b.n	44e2 <bt_conn_recv+0xba>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    4548:	68e0      	ldr	r0, [r4, #12]
    454a:	89aa      	ldrh	r2, [r5, #12]
    454c:	68a9      	ldr	r1, [r5, #8]
    454e:	3008      	adds	r0, #8
    4550:	f00f fe5a 	bl	14208 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    4554:	8963      	ldrh	r3, [r4, #10]
    4556:	89aa      	ldrh	r2, [r5, #12]
    4558:	1a9b      	subs	r3, r3, r2
    455a:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    455c:	4628      	mov	r0, r5
    455e:	f00f fe1b 	bl	14198 <net_buf_unref>
		if (conn->rx_len) {
    4562:	8963      	ldrh	r3, [r4, #10]
    4564:	2b00      	cmp	r3, #0
    4566:	d1b1      	bne.n	44cc <bt_conn_recv+0xa4>
		buf = conn->rx;
    4568:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    456a:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    456c:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    456e:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    4570:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    4572:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    4574:	1d19      	adds	r1, r3, #4
    4576:	4291      	cmp	r1, r2
    4578:	d014      	beq.n	45a4 <bt_conn_recv+0x17c>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    457a:	9202      	str	r2, [sp, #8]
    457c:	9301      	str	r3, [sp, #4]
    457e:	9703      	str	r7, [sp, #12]
    4580:	9700      	str	r7, [sp, #0]
    4582:	4b13      	ldr	r3, [pc, #76]	; (45d0 <bt_conn_recv+0x1a8>)
    4584:	4a17      	ldr	r2, [pc, #92]	; (45e4 <bt_conn_recv+0x1bc>)
    4586:	4914      	ldr	r1, [pc, #80]	; (45d8 <bt_conn_recv+0x1b0>)
    4588:	481d      	ldr	r0, [pc, #116]	; (4600 <bt_conn_recv+0x1d8>)
    458a:	f7fc fcff 	bl	f8c <printk>
    458e:	e7ad      	b.n	44ec <bt_conn_recv+0xc4>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    4590:	9602      	str	r6, [sp, #8]
    4592:	e88d 0140 	stmia.w	sp, {r6, r8}
    4596:	4b0e      	ldr	r3, [pc, #56]	; (45d0 <bt_conn_recv+0x1a8>)
    4598:	4a12      	ldr	r2, [pc, #72]	; (45e4 <bt_conn_recv+0x1bc>)
    459a:	490f      	ldr	r1, [pc, #60]	; (45d8 <bt_conn_recv+0x1b0>)
    459c:	4819      	ldr	r0, [pc, #100]	; (4604 <bt_conn_recv+0x1dc>)
    459e:	f7fc fcf5 	bl	f8c <printk>
    45a2:	e7a0      	b.n	44e6 <bt_conn_recv+0xbe>
    45a4:	f010 fe72 	bl	1528c <_impl_k_current_get>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    45a8:	9703      	str	r7, [sp, #12]
    45aa:	89ab      	ldrh	r3, [r5, #12]
    45ac:	9302      	str	r3, [sp, #8]
    45ae:	9001      	str	r0, [sp, #4]
    45b0:	9700      	str	r7, [sp, #0]
    45b2:	4b07      	ldr	r3, [pc, #28]	; (45d0 <bt_conn_recv+0x1a8>)
    45b4:	4a07      	ldr	r2, [pc, #28]	; (45d4 <bt_conn_recv+0x1ac>)
    45b6:	4908      	ldr	r1, [pc, #32]	; (45d8 <bt_conn_recv+0x1b0>)
    45b8:	4813      	ldr	r0, [pc, #76]	; (4608 <bt_conn_recv+0x1e0>)
    45ba:	f7fc fce7 	bl	f8c <printk>
	bt_l2cap_recv(conn, buf);
    45be:	4629      	mov	r1, r5
    45c0:	4620      	mov	r0, r4
}
    45c2:	b006      	add	sp, #24
    45c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_recv(conn, buf);
    45c8:	f001 b9bc 	b.w	5944 <bt_l2cap_recv>
    45cc:	00015e19 	.word	0x00015e19
    45d0:	00017694 	.word	0x00017694
    45d4:	0001723a 	.word	0x0001723a
    45d8:	00017241 	.word	0x00017241
    45dc:	0001785e 	.word	0x0001785e
    45e0:	0001788f 	.word	0x0001788f
    45e4:	000171f2 	.word	0x000171f2
    45e8:	000178bb 	.word	0x000178bb
    45ec:	000178e8 	.word	0x000178e8
    45f0:	00017907 	.word	0x00017907
    45f4:	00017935 	.word	0x00017935
    45f8:	00017959 	.word	0x00017959
    45fc:	00017985 	.word	0x00017985
    4600:	000179ea 	.word	0x000179ea
    4604:	000179bc 	.word	0x000179bc
    4608:	00017a16 	.word	0x00017a16

0000460c <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    460c:	b5f0      	push	{r4, r5, r6, r7, lr}
    460e:	460c      	mov	r4, r1
    4610:	b087      	sub	sp, #28
    4612:	4606      	mov	r6, r0
    4614:	4617      	mov	r7, r2
    4616:	f010 fe39 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    461a:	89a3      	ldrh	r3, [r4, #12]
    461c:	4d13      	ldr	r5, [pc, #76]	; (466c <bt_conn_send_cb+0x60>)
    461e:	9303      	str	r3, [sp, #12]
    4620:	8833      	ldrh	r3, [r6, #0]
    4622:	9302      	str	r3, [sp, #8]
    4624:	9001      	str	r0, [sp, #4]
    4626:	4b12      	ldr	r3, [pc, #72]	; (4670 <bt_conn_send_cb+0x64>)
    4628:	9505      	str	r5, [sp, #20]
    462a:	9704      	str	r7, [sp, #16]
    462c:	9500      	str	r5, [sp, #0]
    462e:	4a11      	ldr	r2, [pc, #68]	; (4674 <bt_conn_send_cb+0x68>)
    4630:	4911      	ldr	r1, [pc, #68]	; (4678 <bt_conn_send_cb+0x6c>)
    4632:	4812      	ldr	r0, [pc, #72]	; (467c <bt_conn_send_cb+0x70>)
    4634:	f7fc fcaa 	bl	f8c <printk>

	if (conn->state != BT_CONN_CONNECTED) {
    4638:	7a73      	ldrb	r3, [r6, #9]
    463a:	2b03      	cmp	r3, #3
    463c:	d00e      	beq.n	465c <bt_conn_send_cb+0x50>
		BT_ERR("not connected!");
    463e:	4b0c      	ldr	r3, [pc, #48]	; (4670 <bt_conn_send_cb+0x64>)
    4640:	4a0f      	ldr	r2, [pc, #60]	; (4680 <bt_conn_send_cb+0x74>)
    4642:	490d      	ldr	r1, [pc, #52]	; (4678 <bt_conn_send_cb+0x6c>)
    4644:	9501      	str	r5, [sp, #4]
    4646:	9500      	str	r5, [sp, #0]
    4648:	480e      	ldr	r0, [pc, #56]	; (4684 <bt_conn_send_cb+0x78>)
    464a:	f7fc fc9f 	bl	f8c <printk>
		net_buf_unref(buf);
    464e:	4620      	mov	r0, r4
    4650:	f00f fda2 	bl	14198 <net_buf_unref>
		return -ENOTCONN;
    4654:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    4658:	b007      	add	sp, #28
    465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_put(&conn->tx_queue, buf);
    465c:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    4660:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    4662:	4621      	mov	r1, r4
    4664:	f00f fd8b 	bl	1417e <net_buf_put>
	return 0;
    4668:	2000      	movs	r0, #0
    466a:	e7f5      	b.n	4658 <bt_conn_send_cb+0x4c>
    466c:	00015e19 	.word	0x00015e19
    4670:	000176a1 	.word	0x000176a1
    4674:	0001723a 	.word	0x0001723a
    4678:	00017241 	.word	0x00017241
    467c:	00017a7a 	.word	0x00017a7a
    4680:	000171f2 	.word	0x000171f2
    4684:	00017aaf 	.word	0x00017aaf

00004688 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    4688:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    468c:	4606      	mov	r6, r0
    468e:	f010 fdfd 	bl	1528c <_impl_k_current_get>
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    4692:	4b13      	ldr	r3, [pc, #76]	; (46e0 <bt_conn_notify_tx+0x58>)
    4694:	9303      	str	r3, [sp, #12]
    4696:	9001      	str	r0, [sp, #4]
    4698:	9300      	str	r3, [sp, #0]
    469a:	9602      	str	r6, [sp, #8]
    469c:	4b11      	ldr	r3, [pc, #68]	; (46e4 <bt_conn_notify_tx+0x5c>)
    469e:	4a12      	ldr	r2, [pc, #72]	; (46e8 <bt_conn_notify_tx+0x60>)
    46a0:	4912      	ldr	r1, [pc, #72]	; (46ec <bt_conn_notify_tx+0x64>)
    46a2:	4813      	ldr	r0, [pc, #76]	; (46f0 <bt_conn_notify_tx+0x68>)
    46a4:	4d13      	ldr	r5, [pc, #76]	; (46f4 <bt_conn_notify_tx+0x6c>)
    46a6:	f7fc fc71 	bl	f8c <printk>

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    46aa:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    46ae:	f04f 0800 	mov.w	r8, #0
    46b2:	2100      	movs	r1, #0
    46b4:	4638      	mov	r0, r7
    46b6:	f010 fb57 	bl	14d68 <_impl_k_queue_get>
    46ba:	4604      	mov	r4, r0
    46bc:	b910      	cbnz	r0, 46c4 <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    46be:	b004      	add	sp, #16
    46c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    46c4:	6863      	ldr	r3, [r4, #4]
    46c6:	b10b      	cbz	r3, 46cc <bt_conn_notify_tx+0x44>
			tx->cb(conn);
    46c8:	4630      	mov	r0, r6
    46ca:	4798      	blx	r3
    46cc:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    46ce:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    46d0:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    46d2:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    46d6:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    46d8:	2b00      	cmp	r3, #0
    46da:	d1ea      	bne.n	46b2 <bt_conn_notify_tx+0x2a>
	list->tail = node;
    46dc:	606c      	str	r4, [r5, #4]
    46de:	e7e6      	b.n	46ae <bt_conn_notify_tx+0x26>
    46e0:	00015e19 	.word	0x00015e19
    46e4:	000176b1 	.word	0x000176b1
    46e8:	0001723a 	.word	0x0001723a
    46ec:	00017241 	.word	0x00017241
    46f0:	00017795 	.word	0x00017795
    46f4:	2000041c 	.word	0x2000041c

000046f8 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    46f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    46fc:	b088      	sub	sp, #32
    46fe:	460f      	mov	r7, r1
    4700:	4614      	mov	r4, r2
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4702:	4e57      	ldr	r6, [pc, #348]	; (4860 <send_frag+0x168>)
{
    4704:	4605      	mov	r5, r0
    4706:	4699      	mov	r9, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4708:	f010 fdc0 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    470c:	9606      	str	r6, [sp, #24]
    470e:	9405      	str	r4, [sp, #20]
    4710:	89bb      	ldrh	r3, [r7, #12]
    4712:	4a54      	ldr	r2, [pc, #336]	; (4864 <send_frag+0x16c>)
    4714:	9304      	str	r3, [sp, #16]
    4716:	9001      	str	r0, [sp, #4]
    4718:	4b53      	ldr	r3, [pc, #332]	; (4868 <send_frag+0x170>)
    471a:	4954      	ldr	r1, [pc, #336]	; (486c <send_frag+0x174>)
    471c:	9703      	str	r7, [sp, #12]
    471e:	9502      	str	r5, [sp, #8]
    4720:	9600      	str	r6, [sp, #0]
    4722:	4853      	ldr	r0, [pc, #332]	; (4870 <send_frag+0x178>)
    4724:	f7fc fc32 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    472c:	4851      	ldr	r0, [pc, #324]	; (4874 <send_frag+0x17c>)
    472e:	f010 fde4 	bl	152fa <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    4732:	4b51      	ldr	r3, [pc, #324]	; (4878 <send_frag+0x180>)
    4734:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4738:	f7ff fe24 	bl	4384 <atomic_get>
    473c:	46b0      	mov	r8, r6
    473e:	b130      	cbz	r0, 474e <send_frag+0x56>
		if (conns[i].state == BT_CONN_CONNECTED ||
    4740:	7a5a      	ldrb	r2, [r3, #9]
    4742:	3a03      	subs	r2, #3
    4744:	2a01      	cmp	r2, #1
    4746:	d802      	bhi.n	474e <send_frag+0x56>
			bt_conn_notify_tx(&conns[i]);
    4748:	4618      	mov	r0, r3
    474a:	f7ff ff9d 	bl	4688 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    474e:	7a6b      	ldrb	r3, [r5, #9]
    4750:	2b03      	cmp	r3, #3
    4752:	d166      	bne.n	4822 <send_frag+0x12a>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    4754:	2104      	movs	r1, #4
    4756:	f107 0008 	add.w	r0, r7, #8
    475a:	f00f fd66 	bl	1422a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    475e:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    4760:	f8d7 a014 	ldr.w	sl, [r7, #20]
    4764:	4e45      	ldr	r6, [pc, #276]	; (487c <send_frag+0x184>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4766:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    476a:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    476c:	89bb      	ldrh	r3, [r7, #12]
    476e:	3b04      	subs	r3, #4
    4770:	8043      	strh	r3, [r0, #2]
    4772:	2302      	movs	r3, #2
    4774:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4776:	f010 fd89 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    477a:	f8cd 8010 	str.w	r8, [sp, #16]
    477e:	9001      	str	r0, [sp, #4]
    4780:	f8cd a00c 	str.w	sl, [sp, #12]
    4784:	9502      	str	r5, [sp, #8]
    4786:	f8cd 8000 	str.w	r8, [sp]
    478a:	4b3d      	ldr	r3, [pc, #244]	; (4880 <send_frag+0x188>)
    478c:	4a35      	ldr	r2, [pc, #212]	; (4864 <send_frag+0x16c>)
    478e:	4937      	ldr	r1, [pc, #220]	; (486c <send_frag+0x174>)
    4790:	483c      	ldr	r0, [pc, #240]	; (4884 <send_frag+0x18c>)
    4792:	f7fc fbfb 	bl	f8c <printk>
    4796:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4798:	6872      	ldr	r2, [r6, #4]
	return node->next;
    479a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    479c:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    479e:	4294      	cmp	r4, r2
	list->tail = node;
    47a0:	bf08      	it	eq
    47a2:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    47a4:	f8c4 a004 	str.w	sl, [r4, #4]
	__asm__ volatile(
    47a8:	f04f 0320 	mov.w	r3, #32
    47ac:	f3ef 8211 	mrs	r2, BASEPRI
    47b0:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    47b4:	2300      	movs	r3, #0
    47b6:	6023      	str	r3, [r4, #0]
    47b8:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    47ba:	2b00      	cmp	r3, #0
    47bc:	d140      	bne.n	4840 <send_frag+0x148>
	list->tail = node;
    47be:	616c      	str	r4, [r5, #20]
	list->head = node;
    47c0:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    47c2:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    47c6:	4638      	mov	r0, r7
    47c8:	f7fd ff30 	bl	262c <bt_send>
	if (err) {
    47cc:	2800      	cmp	r0, #0
    47ce:	d043      	beq.n	4858 <send_frag+0x160>
		BT_ERR("Unable to send to driver (err %d)", err);
    47d0:	9001      	str	r0, [sp, #4]
    47d2:	f8cd 8008 	str.w	r8, [sp, #8]
    47d6:	f8cd 8000 	str.w	r8, [sp]
    47da:	4b23      	ldr	r3, [pc, #140]	; (4868 <send_frag+0x170>)
    47dc:	4a2a      	ldr	r2, [pc, #168]	; (4888 <send_frag+0x190>)
    47de:	4923      	ldr	r1, [pc, #140]	; (486c <send_frag+0x174>)
    47e0:	482a      	ldr	r0, [pc, #168]	; (488c <send_frag+0x194>)
    47e2:	f7fc fbd3 	bl	f8c <printk>
	__asm__ volatile(
    47e6:	f04f 0320 	mov.w	r3, #32
    47ea:	f3ef 8111 	mrs	r1, BASEPRI
    47ee:	f383 8811 	msr	BASEPRI, r3
    47f2:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    47f4:	2200      	movs	r2, #0
    47f6:	b153      	cbz	r3, 480e <send_frag+0x116>
    47f8:	429c      	cmp	r4, r3
    47fa:	d12a      	bne.n	4852 <send_frag+0x15a>
    47fc:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    47fe:	bb12      	cbnz	r2, 4846 <send_frag+0x14e>
    4800:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    4802:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4804:	4294      	cmp	r4, r2
    4806:	d100      	bne.n	480a <send_frag+0x112>
	list->tail = node;
    4808:	616b      	str	r3, [r5, #20]
	parent->next = child;
    480a:	2300      	movs	r3, #0
    480c:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    480e:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    4812:	2300      	movs	r3, #0
    4814:	6063      	str	r3, [r4, #4]
    4816:	6833      	ldr	r3, [r6, #0]
    4818:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    481a:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    481c:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    481e:	b903      	cbnz	r3, 4822 <send_frag+0x12a>
	list->tail = node;
    4820:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4822:	4814      	ldr	r0, [pc, #80]	; (4874 <send_frag+0x17c>)
    4824:	f010 fd41 	bl	152aa <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    4828:	f1b9 0f00 	cmp.w	r9, #0
    482c:	d004      	beq.n	4838 <send_frag+0x140>
		net_buf_unref(buf);
    482e:	4638      	mov	r0, r7
    4830:	f00f fcb2 	bl	14198 <net_buf_unref>
	}
	return false;
    4834:	f04f 0900 	mov.w	r9, #0
}
    4838:	4648      	mov	r0, r9
    483a:	b008      	add	sp, #32
    483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	parent->next = child;
    4840:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4842:	616c      	str	r4, [r5, #20]
    4844:	e7bd      	b.n	47c2 <send_frag+0xca>
	parent->next = child;
    4846:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4848:	696b      	ldr	r3, [r5, #20]
    484a:	429c      	cmp	r4, r3
	list->tail = node;
    484c:	bf08      	it	eq
    484e:	616a      	streq	r2, [r5, #20]
    4850:	e7db      	b.n	480a <send_frag+0x112>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4852:	461a      	mov	r2, r3
    4854:	681b      	ldr	r3, [r3, #0]
    4856:	e7ce      	b.n	47f6 <send_frag+0xfe>
	return true;
    4858:	f04f 0901 	mov.w	r9, #1
    485c:	e7ec      	b.n	4838 <send_frag+0x140>
    485e:	bf00      	nop
    4860:	00015e19 	.word	0x00015e19
    4864:	0001723a 	.word	0x0001723a
    4868:	000176d2 	.word	0x000176d2
    486c:	00017241 	.word	0x00017241
    4870:	00017b60 	.word	0x00017b60
    4874:	20003b14 	.word	0x20003b14
    4878:	20000384 	.word	0x20000384
    487c:	2000041c 	.word	0x2000041c
    4880:	000176c3 	.word	0x000176c3
    4884:	00017b98 	.word	0x00017b98
    4888:	000171f2 	.word	0x000171f2
    488c:	0001686b 	.word	0x0001686b

00004890 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4892:	4c17      	ldr	r4, [pc, #92]	; (48f0 <bt_conn_add_le+0x60>)
    4894:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    4898:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    489a:	4630      	mov	r0, r6
    489c:	f7ff fd72 	bl	4384 <atomic_get>
    48a0:	4605      	mov	r5, r0
    48a2:	b108      	cbz	r0, 48a8 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    48a4:	2000      	movs	r0, #0
    48a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    48a8:	4601      	mov	r1, r0
    48aa:	2298      	movs	r2, #152	; 0x98
    48ac:	4620      	mov	r0, r4
    48ae:	f7fd f9d1 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    48b2:	f3bf 8f5b 	dmb	ish
    48b6:	2301      	movs	r3, #1
    48b8:	e856 2f00 	ldrex	r2, [r6]
    48bc:	e846 3100 	strex	r1, r3, [r6]
    48c0:	2900      	cmp	r1, #0
    48c2:	d1f9      	bne.n	48b8 <bt_conn_add_le+0x28>
    48c4:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    48c8:	2207      	movs	r2, #7
    48ca:	4639      	mov	r1, r7
    48cc:	f104 0044 	add.w	r0, r4, #68	; 0x44
    48d0:	f7fd f994 	bl	1bfc <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    48d4:	2318      	movs	r3, #24
    48d6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    48da:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    48dc:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    48e0:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    48e2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    48e6:	4903      	ldr	r1, [pc, #12]	; (48f4 <bt_conn_add_le+0x64>)
    48e8:	f010 ffc6 	bl	15878 <k_delayed_work_init>
			conn = &conns[i];
    48ec:	4620      	mov	r0, r4

	return conn;
}
    48ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48f0:	20000384 	.word	0x20000384
    48f4:	00005089 	.word	0x00005089

000048f8 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    48f8:	b538      	push	{r3, r4, r5, lr}
    48fa:	460d      	mov	r5, r1
    48fc:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    48fe:	f100 0144 	add.w	r1, r0, #68	; 0x44
    4902:	2207      	movs	r2, #7
    4904:	4628      	mov	r0, r5
    4906:	f7fd f964 	bl	1bd2 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    490a:	b160      	cbz	r0, 4926 <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    490c:	78e3      	ldrb	r3, [r4, #3]
    490e:	2207      	movs	r2, #7
    4910:	b933      	cbnz	r3, 4920 <bt_conn_addr_le_cmp+0x28>
    4912:	f104 0152 	add.w	r1, r4, #82	; 0x52
    4916:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    4918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    491c:	f7fd b959 	b.w	1bd2 <memcmp>
    4920:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    4924:	e7f7      	b.n	4916 <bt_conn_addr_le_cmp+0x1e>
    4926:	bd38      	pop	{r3, r4, r5, pc}

00004928 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    4928:	b530      	push	{r4, r5, lr}
    492a:	4604      	mov	r4, r0
    492c:	b087      	sub	sp, #28
	atomic_inc(&conn->ref);
    492e:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4932:	f3bf 8f5b 	dmb	ish
    4936:	e855 3f00 	ldrex	r3, [r5]
    493a:	3301      	adds	r3, #1
    493c:	e845 3200 	strex	r2, r3, [r5]
    4940:	2a00      	cmp	r2, #0
    4942:	d1f8      	bne.n	4936 <bt_conn_ref+0xe>
    4944:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4948:	f010 fca0 	bl	1528c <_impl_k_current_get>
    494c:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    494e:	4628      	mov	r0, r5
    4950:	8821      	ldrh	r1, [r4, #0]
    4952:	f7ff fd17 	bl	4384 <atomic_get>
    4956:	4b07      	ldr	r3, [pc, #28]	; (4974 <bt_conn_ref+0x4c>)
    4958:	9304      	str	r3, [sp, #16]
    495a:	9003      	str	r0, [sp, #12]
    495c:	9102      	str	r1, [sp, #8]
    495e:	9201      	str	r2, [sp, #4]
    4960:	9300      	str	r3, [sp, #0]
    4962:	4a05      	ldr	r2, [pc, #20]	; (4978 <bt_conn_ref+0x50>)
    4964:	4b05      	ldr	r3, [pc, #20]	; (497c <bt_conn_ref+0x54>)
    4966:	4906      	ldr	r1, [pc, #24]	; (4980 <bt_conn_ref+0x58>)
    4968:	4806      	ldr	r0, [pc, #24]	; (4984 <bt_conn_ref+0x5c>)
    496a:	f7fc fb0f 	bl	f8c <printk>

	return conn;
}
    496e:	4620      	mov	r0, r4
    4970:	b007      	add	sp, #28
    4972:	bd30      	pop	{r4, r5, pc}
    4974:	00015e19 	.word	0x00015e19
    4978:	0001723a 	.word	0x0001723a
    497c:	00017721 	.word	0x00017721
    4980:	00017241 	.word	0x00017241
    4984:	00017a54 	.word	0x00017a54

00004988 <bt_conn_lookup_handle>:
{
    4988:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    498a:	4b0a      	ldr	r3, [pc, #40]	; (49b4 <bt_conn_lookup_handle+0x2c>)
{
    498c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    498e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4992:	f7ff fcf7 	bl	4384 <atomic_get>
    4996:	b158      	cbz	r0, 49b0 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4998:	7a5a      	ldrb	r2, [r3, #9]
    499a:	3a03      	subs	r2, #3
    499c:	2a01      	cmp	r2, #1
    499e:	d807      	bhi.n	49b0 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    49a0:	881a      	ldrh	r2, [r3, #0]
    49a2:	428a      	cmp	r2, r1
    49a4:	d104      	bne.n	49b0 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    49a6:	4618      	mov	r0, r3
}
    49a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    49ac:	f7ff bfbc 	b.w	4928 <bt_conn_ref>
}
    49b0:	2000      	movs	r0, #0
    49b2:	bd08      	pop	{r3, pc}
    49b4:	20000384 	.word	0x20000384

000049b8 <bt_conn_lookup_addr_le>:
{
    49b8:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    49ba:	4c0a      	ldr	r4, [pc, #40]	; (49e4 <bt_conn_lookup_addr_le+0x2c>)
{
    49bc:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    49be:	f104 0040 	add.w	r0, r4, #64	; 0x40
    49c2:	f7ff fcdf 	bl	4384 <atomic_get>
    49c6:	b150      	cbz	r0, 49de <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    49c8:	78a3      	ldrb	r3, [r4, #2]
    49ca:	b943      	cbnz	r3, 49de <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    49cc:	4620      	mov	r0, r4
    49ce:	f7ff ff93 	bl	48f8 <bt_conn_addr_le_cmp>
    49d2:	b920      	cbnz	r0, 49de <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    49d4:	4620      	mov	r0, r4
}
    49d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    49da:	f7ff bfa5 	b.w	4928 <bt_conn_ref>
}
    49de:	2000      	movs	r0, #0
    49e0:	bd10      	pop	{r4, pc}
    49e2:	bf00      	nop
    49e4:	20000384 	.word	0x20000384

000049e8 <bt_conn_lookup_state_le>:
{
    49e8:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    49ea:	4c0d      	ldr	r4, [pc, #52]	; (4a20 <bt_conn_lookup_state_le+0x38>)
{
    49ec:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    49ee:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    49f2:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    49f4:	f7ff fcc6 	bl	4384 <atomic_get>
    49f8:	b180      	cbz	r0, 4a1c <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    49fa:	78a2      	ldrb	r2, [r4, #2]
    49fc:	b972      	cbnz	r2, 4a1c <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    49fe:	b93b      	cbnz	r3, 4a10 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4a00:	7a63      	ldrb	r3, [r4, #9]
    4a02:	42ab      	cmp	r3, r5
    4a04:	d10a      	bne.n	4a1c <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    4a06:	4806      	ldr	r0, [pc, #24]	; (4a20 <bt_conn_lookup_state_le+0x38>)
}
    4a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    4a0c:	f7ff bf8c 	b.w	4928 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4a10:	4619      	mov	r1, r3
    4a12:	4620      	mov	r0, r4
    4a14:	f7ff ff70 	bl	48f8 <bt_conn_addr_le_cmp>
    4a18:	2800      	cmp	r0, #0
    4a1a:	d0f1      	beq.n	4a00 <bt_conn_lookup_state_le+0x18>
}
    4a1c:	2000      	movs	r0, #0
    4a1e:	bd38      	pop	{r3, r4, r5, pc}
    4a20:	20000384 	.word	0x20000384

00004a24 <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    4a24:	b530      	push	{r4, r5, lr}
    4a26:	4605      	mov	r5, r0
    4a28:	b087      	sub	sp, #28
	atomic_dec(&conn->ref);
    4a2a:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4a2e:	f3bf 8f5b 	dmb	ish
    4a32:	e854 3f00 	ldrex	r3, [r4]
    4a36:	3b01      	subs	r3, #1
    4a38:	e844 3200 	strex	r2, r3, [r4]
    4a3c:	2a00      	cmp	r2, #0
    4a3e:	d1f8      	bne.n	4a32 <bt_conn_unref+0xe>
    4a40:	f3bf 8f5b 	dmb	ish
    4a44:	f010 fc22 	bl	1528c <_impl_k_current_get>
    4a48:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4a4a:	4620      	mov	r0, r4
    4a4c:	8829      	ldrh	r1, [r5, #0]
    4a4e:	f7ff fc99 	bl	4384 <atomic_get>
    4a52:	4b07      	ldr	r3, [pc, #28]	; (4a70 <bt_conn_unref+0x4c>)
    4a54:	9304      	str	r3, [sp, #16]
    4a56:	9003      	str	r0, [sp, #12]
    4a58:	9102      	str	r1, [sp, #8]
    4a5a:	9201      	str	r2, [sp, #4]
    4a5c:	9300      	str	r3, [sp, #0]
    4a5e:	4a05      	ldr	r2, [pc, #20]	; (4a74 <bt_conn_unref+0x50>)
    4a60:	4b05      	ldr	r3, [pc, #20]	; (4a78 <bt_conn_unref+0x54>)
    4a62:	4906      	ldr	r1, [pc, #24]	; (4a7c <bt_conn_unref+0x58>)
    4a64:	4806      	ldr	r0, [pc, #24]	; (4a80 <bt_conn_unref+0x5c>)
    4a66:	f7fc fa91 	bl	f8c <printk>
}
    4a6a:	b007      	add	sp, #28
    4a6c:	bd30      	pop	{r4, r5, pc}
    4a6e:	bf00      	nop
    4a70:	00015e19 	.word	0x00015e19
    4a74:	0001723a 	.word	0x0001723a
    4a78:	0001772d 	.word	0x0001772d
    4a7c:	00017241 	.word	0x00017241
    4a80:	00017a54 	.word	0x00017a54

00004a84 <conn_cleanup>:
{
    4a84:	b538      	push	{r3, r4, r5, lr}
    4a86:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4a88:	f100 0528 	add.w	r5, r0, #40	; 0x28
    4a8c:	2100      	movs	r1, #0
    4a8e:	4628      	mov	r0, r5
    4a90:	f00f fb58 	bl	14144 <net_buf_get>
    4a94:	b950      	cbnz	r0, 4aac <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    4a96:	4620      	mov	r0, r4
    4a98:	f7ff fdf6 	bl	4688 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    4a9c:	4620      	mov	r0, r4
    4a9e:	f7ff fc77 	bl	4390 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    4aa2:	4620      	mov	r0, r4
}
    4aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4aa8:	f7ff bfbc 	b.w	4a24 <bt_conn_unref>
		net_buf_unref(buf);
    4aac:	f00f fb74 	bl	14198 <net_buf_unref>
    4ab0:	e7ec      	b.n	4a8c <conn_cleanup+0x8>
	...

00004ab4 <bt_conn_prepare_events>:
{
    4ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ab6:	b085      	sub	sp, #20
    4ab8:	4606      	mov	r6, r0
    4aba:	f010 fbe7 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    4abe:	4d2a      	ldr	r5, [pc, #168]	; (4b68 <bt_conn_prepare_events+0xb4>)
    4ac0:	9001      	str	r0, [sp, #4]
    4ac2:	4b2a      	ldr	r3, [pc, #168]	; (4b6c <bt_conn_prepare_events+0xb8>)
    4ac4:	4a2a      	ldr	r2, [pc, #168]	; (4b70 <bt_conn_prepare_events+0xbc>)
    4ac6:	492b      	ldr	r1, [pc, #172]	; (4b74 <bt_conn_prepare_events+0xc0>)
    4ac8:	9502      	str	r5, [sp, #8]
    4aca:	9500      	str	r5, [sp, #0]
    4acc:	482a      	ldr	r0, [pc, #168]	; (4b78 <bt_conn_prepare_events+0xc4>)
    4ace:	f7fc fa5d 	bl	f8c <printk>
	conn_change.signaled = 0;
    4ad2:	4b2a      	ldr	r3, [pc, #168]	; (4b7c <bt_conn_prepare_events+0xc8>)
    4ad4:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4ad6:	2101      	movs	r1, #1
    4ad8:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    4ada:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4adc:	f011 f813 	bl	15b06 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    4ae0:	4b27      	ldr	r3, [pc, #156]	; (4b80 <bt_conn_prepare_events+0xcc>)
    4ae2:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4ae6:	f7ff fc4d 	bl	4384 <atomic_get>
    4aea:	461f      	mov	r7, r3
    4aec:	b910      	cbnz	r0, 4af4 <bt_conn_prepare_events+0x40>
			continue;
    4aee:	2001      	movs	r0, #1
}
    4af0:	b005      	add	sp, #20
    4af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4af4:	7a5a      	ldrb	r2, [r3, #9]
    4af6:	b992      	cbnz	r2, 4b1e <bt_conn_prepare_events+0x6a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4af8:	f3bf 8f5b 	dmb	ish
    4afc:	1d1a      	adds	r2, r3, #4
    4afe:	e852 1f00 	ldrex	r1, [r2]
    4b02:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    4b06:	e842 0400 	strex	r4, r0, [r2]
    4b0a:	2c00      	cmp	r4, #0
    4b0c:	d1f7      	bne.n	4afe <bt_conn_prepare_events+0x4a>
    4b0e:	f3bf 8f5b 	dmb	ish
    4b12:	064a      	lsls	r2, r1, #25
    4b14:	d503      	bpl.n	4b1e <bt_conn_prepare_events+0x6a>
			conn_cleanup(conn);
    4b16:	4618      	mov	r0, r3
    4b18:	f7ff ffb4 	bl	4a84 <conn_cleanup>
    4b1c:	e7e7      	b.n	4aee <bt_conn_prepare_events+0x3a>
		if (conn->state != BT_CONN_CONNECTED) {
    4b1e:	7a7c      	ldrb	r4, [r7, #9]
    4b20:	2c03      	cmp	r4, #3
    4b22:	d1e4      	bne.n	4aee <bt_conn_prepare_events+0x3a>
    4b24:	f010 fbb2 	bl	1528c <_impl_k_current_get>
		BT_DBG("Adding conn %p to poll list", conn);
    4b28:	4b10      	ldr	r3, [pc, #64]	; (4b6c <bt_conn_prepare_events+0xb8>)
    4b2a:	9001      	str	r0, [sp, #4]
    4b2c:	4a10      	ldr	r2, [pc, #64]	; (4b70 <bt_conn_prepare_events+0xbc>)
    4b2e:	4911      	ldr	r1, [pc, #68]	; (4b74 <bt_conn_prepare_events+0xc0>)
    4b30:	9503      	str	r5, [sp, #12]
    4b32:	9702      	str	r7, [sp, #8]
    4b34:	9500      	str	r5, [sp, #0]
    4b36:	4813      	ldr	r0, [pc, #76]	; (4b84 <bt_conn_prepare_events+0xd0>)
    4b38:	f7fc fa28 	bl	f8c <printk>
		k_poll_event_init(&events[ev_count],
    4b3c:	4b12      	ldr	r3, [pc, #72]	; (4b88 <bt_conn_prepare_events+0xd4>)
    4b3e:	2200      	movs	r2, #0
    4b40:	2104      	movs	r1, #4
    4b42:	f106 0014 	add.w	r0, r6, #20
    4b46:	f010 ffde 	bl	15b06 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4b4a:	2301      	movs	r3, #1
    4b4c:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4b50:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4b54:	4b0d      	ldr	r3, [pc, #52]	; (4b8c <bt_conn_prepare_events+0xd8>)
    4b56:	2200      	movs	r2, #0
    4b58:	2104      	movs	r1, #4
    4b5a:	f010 ffd4 	bl	15b06 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4b5e:	2302      	movs	r3, #2
    4b60:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4b64:	4620      	mov	r0, r4
	return ev_count;
    4b66:	e7c3      	b.n	4af0 <bt_conn_prepare_events+0x3c>
    4b68:	00015e19 	.word	0x00015e19
    4b6c:	000176e5 	.word	0x000176e5
    4b70:	0001723a 	.word	0x0001723a
    4b74:	00017241 	.word	0x00017241
    4b78:	000177b2 	.word	0x000177b2
    4b7c:	20003bb0 	.word	0x20003bb0
    4b80:	20000384 	.word	0x20000384
    4b84:	000177c8 	.word	0x000177c8
    4b88:	2000039c 	.word	0x2000039c
    4b8c:	200003ac 	.word	0x200003ac

00004b90 <bt_conn_set_state>:
{
    4b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b94:	4604      	mov	r4, r0
    4b96:	b086      	sub	sp, #24
    4b98:	460e      	mov	r6, r1
    4b9a:	f010 fb77 	bl	1528c <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4b9e:	7a63      	ldrb	r3, [r4, #9]
    4ba0:	4f6d      	ldr	r7, [pc, #436]	; (4d58 <bt_conn_set_state+0x1c8>)
    4ba2:	9001      	str	r0, [sp, #4]
    4ba4:	2b04      	cmp	r3, #4
    4ba6:	bf96      	itet	ls
    4ba8:	4a6c      	ldrls	r2, [pc, #432]	; (4d5c <bt_conn_set_state+0x1cc>)
    4baa:	4b6d      	ldrhi	r3, [pc, #436]	; (4d60 <bt_conn_set_state+0x1d0>)
    4bac:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    4bb0:	9302      	str	r3, [sp, #8]
    4bb2:	2e04      	cmp	r6, #4
    4bb4:	bf96      	itet	ls
    4bb6:	4a69      	ldrls	r2, [pc, #420]	; (4d5c <bt_conn_set_state+0x1cc>)
    4bb8:	4a69      	ldrhi	r2, [pc, #420]	; (4d60 <bt_conn_set_state+0x1d0>)
    4bba:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    4bbe:	9203      	str	r2, [sp, #12]
    4bc0:	9704      	str	r7, [sp, #16]
    4bc2:	9700      	str	r7, [sp, #0]
    4bc4:	4b67      	ldr	r3, [pc, #412]	; (4d64 <bt_conn_set_state+0x1d4>)
    4bc6:	4a68      	ldr	r2, [pc, #416]	; (4d68 <bt_conn_set_state+0x1d8>)
    4bc8:	4968      	ldr	r1, [pc, #416]	; (4d6c <bt_conn_set_state+0x1dc>)
    4bca:	4869      	ldr	r0, [pc, #420]	; (4d70 <bt_conn_set_state+0x1e0>)
    4bcc:	f7fc f9de 	bl	f8c <printk>
	if (conn->state == state) {
    4bd0:	7a65      	ldrb	r5, [r4, #9]
    4bd2:	42ae      	cmp	r6, r5
    4bd4:	46b8      	mov	r8, r7
    4bd6:	d10a      	bne.n	4bee <bt_conn_set_state+0x5e>
		BT_WARN("no transition");
    4bd8:	9701      	str	r7, [sp, #4]
    4bda:	9700      	str	r7, [sp, #0]
    4bdc:	4b61      	ldr	r3, [pc, #388]	; (4d64 <bt_conn_set_state+0x1d4>)
    4bde:	4a65      	ldr	r2, [pc, #404]	; (4d74 <bt_conn_set_state+0x1e4>)
    4be0:	4962      	ldr	r1, [pc, #392]	; (4d6c <bt_conn_set_state+0x1dc>)
    4be2:	4865      	ldr	r0, [pc, #404]	; (4d78 <bt_conn_set_state+0x1e8>)
    4be4:	f7fc f9d2 	bl	f8c <printk>
}
    4be8:	b006      	add	sp, #24
    4bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->state = state;
    4bee:	7266      	strb	r6, [r4, #9]
	switch (old_state) {
    4bf0:	b195      	cbz	r5, 4c18 <bt_conn_set_state+0x88>
    4bf2:	2d02      	cmp	r5, #2
    4bf4:	d014      	beq.n	4c20 <bt_conn_set_state+0x90>
	switch (conn->state) {
    4bf6:	7a63      	ldrb	r3, [r4, #9]
    4bf8:	2b04      	cmp	r3, #4
    4bfa:	f200 80a0 	bhi.w	4d3e <bt_conn_set_state+0x1ae>
    4bfe:	a201      	add	r2, pc, #4	; (adr r2, 4c04 <bt_conn_set_state+0x74>)
    4c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4c04:	00004c67 	.word	0x00004c67
    4c08:	00004be9 	.word	0x00004be9
    4c0c:	00004d23 	.word	0x00004d23
    4c10:	00004c31 	.word	0x00004c31
    4c14:	00004be9 	.word	0x00004be9
		bt_conn_ref(conn);
    4c18:	4620      	mov	r0, r4
    4c1a:	f7ff fe85 	bl	4928 <bt_conn_ref>
		break;
    4c1e:	e7ea      	b.n	4bf6 <bt_conn_set_state+0x66>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4c20:	78a3      	ldrb	r3, [r4, #2]
    4c22:	2b00      	cmp	r3, #0
    4c24:	d1e7      	bne.n	4bf6 <bt_conn_set_state+0x66>
			k_delayed_work_cancel(&conn->le.update_work);
    4c26:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4c2a:	f010 fe35 	bl	15898 <k_delayed_work_cancel>
    4c2e:	e7e2      	b.n	4bf6 <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4c30:	78a3      	ldrb	r3, [r4, #2]
    4c32:	2b02      	cmp	r3, #2
    4c34:	d0d8      	beq.n	4be8 <bt_conn_set_state+0x58>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4c36:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4c3a:	f010 f869 	bl	14d10 <_impl_k_queue_init>
    4c3e:	f104 0018 	add.w	r0, r4, #24
    4c42:	f010 f865 	bl	14d10 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4c46:	2100      	movs	r1, #0
    4c48:	484c      	ldr	r0, [pc, #304]	; (4d7c <bt_conn_set_state+0x1ec>)
    4c4a:	f010 ffff 	bl	15c4c <_impl_k_poll_signal>
	list->head = NULL;
    4c4e:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    4c50:	4620      	mov	r0, r4
    4c52:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4c54:	63e3      	str	r3, [r4, #60]	; 0x3c
    4c56:	f000 fcbd 	bl	55d4 <bt_l2cap_connected>
		notify_connected(conn);
    4c5a:	4620      	mov	r0, r4
}
    4c5c:	b006      	add	sp, #24
    4c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    4c62:	f7ff bb7f 	b.w	4364 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4c66:	78a3      	ldrb	r3, [r4, #2]
    4c68:	2b02      	cmp	r3, #2
    4c6a:	d105      	bne.n	4c78 <bt_conn_set_state+0xe8>
			bt_conn_unref(conn);
    4c6c:	4620      	mov	r0, r4
}
    4c6e:	b006      	add	sp, #24
    4c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    4c74:	f7ff bed6 	b.w	4a24 <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4c78:	1eeb      	subs	r3, r5, #3
    4c7a:	2b01      	cmp	r3, #1
    4c7c:	d844      	bhi.n	4d08 <bt_conn_set_state+0x178>
			bt_l2cap_disconnected(conn);
    4c7e:	4620      	mov	r0, r4
    4c80:	f000 fcd6 	bl	5630 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4c84:	4b3e      	ldr	r3, [pc, #248]	; (4d80 <bt_conn_set_state+0x1f0>)
    4c86:	681d      	ldr	r5, [r3, #0]
    4c88:	b9ed      	cbnz	r5, 4cc6 <bt_conn_set_state+0x136>
    4c8a:	4e3e      	ldr	r6, [pc, #248]	; (4d84 <bt_conn_set_state+0x1f4>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4c8c:	4f3e      	ldr	r7, [pc, #248]	; (4d88 <bt_conn_set_state+0x1f8>)
	__asm__ volatile(
    4c8e:	f04f 0320 	mov.w	r3, #32
    4c92:	f3ef 8111 	mrs	r1, BASEPRI
    4c96:	f383 8811 	msr	BASEPRI, r3
    4c9a:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4c9c:	b12b      	cbz	r3, 4caa <bt_conn_set_state+0x11a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4c9e:	6960      	ldr	r0, [r4, #20]
	return node->next;
    4ca0:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4ca2:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4ca4:	4283      	cmp	r3, r0
	list->tail = node;
    4ca6:	bf08      	it	eq
    4ca8:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4caa:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    4cae:	b18b      	cbz	r3, 4cd4 <bt_conn_set_state+0x144>
    4cb0:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    4cb2:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4cb4:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    4cb6:	605d      	str	r5, [r3, #4]
	list->head = node;
    4cb8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4cba:	b902      	cbnz	r2, 4cbe <bt_conn_set_state+0x12e>
	list->tail = node;
    4cbc:	6073      	str	r3, [r6, #4]
    4cbe:	4638      	mov	r0, r7
    4cc0:	f010 faf3 	bl	152aa <_impl_k_sem_give>
    4cc4:	e7e3      	b.n	4c8e <bt_conn_set_state+0xfe>
		if (cb->disconnected) {
    4cc6:	686b      	ldr	r3, [r5, #4]
    4cc8:	b113      	cbz	r3, 4cd0 <bt_conn_set_state+0x140>
			cb->disconnected(conn, conn->err);
    4cca:	7a21      	ldrb	r1, [r4, #8]
    4ccc:	4620      	mov	r0, r4
    4cce:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4cd0:	692d      	ldr	r5, [r5, #16]
    4cd2:	e7d9      	b.n	4c88 <bt_conn_set_state+0xf8>
			if (conn->type == BT_CONN_TYPE_LE) {
    4cd4:	78a3      	ldrb	r3, [r4, #2]
    4cd6:	b91b      	cbnz	r3, 4ce0 <bt_conn_set_state+0x150>
				k_delayed_work_cancel(&conn->le.update_work);
    4cd8:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4cdc:	f010 fddc 	bl	15898 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4ce0:	f3bf 8f5b 	dmb	ish
    4ce4:	3404      	adds	r4, #4
    4ce6:	e854 3f00 	ldrex	r3, [r4]
    4cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4cee:	e844 3200 	strex	r2, r3, [r4]
    4cf2:	2a00      	cmp	r2, #0
    4cf4:	d1f7      	bne.n	4ce6 <bt_conn_set_state+0x156>
    4cf6:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4cfa:	4820      	ldr	r0, [pc, #128]	; (4d7c <bt_conn_set_state+0x1ec>)
    4cfc:	2100      	movs	r1, #0
}
    4cfe:	b006      	add	sp, #24
    4d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d04:	f010 bfa2 	b.w	15c4c <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4d08:	2d02      	cmp	r5, #2
    4d0a:	d103      	bne.n	4d14 <bt_conn_set_state+0x184>
			notify_connected(conn);
    4d0c:	4620      	mov	r0, r4
    4d0e:	f7ff fb29 	bl	4364 <notify_connected>
    4d12:	e7ab      	b.n	4c6c <bt_conn_set_state+0xdc>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4d14:	2d01      	cmp	r5, #1
    4d16:	f47f af67 	bne.w	4be8 <bt_conn_set_state+0x58>
			if (conn->err) {
    4d1a:	7a23      	ldrb	r3, [r4, #8]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d0a5      	beq.n	4c6c <bt_conn_set_state+0xdc>
    4d20:	e7f4      	b.n	4d0c <bt_conn_set_state+0x17c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4d22:	78a3      	ldrb	r3, [r4, #2]
    4d24:	2b00      	cmp	r3, #0
    4d26:	f47f af5f 	bne.w	4be8 <bt_conn_set_state+0x58>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4d2a:	4818      	ldr	r0, [pc, #96]	; (4d8c <bt_conn_set_state+0x1fc>)
    4d2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4d30:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4d34:	b006      	add	sp, #24
    4d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d3a:	f010 be11 	b.w	15960 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    4d3e:	f8cd 8008 	str.w	r8, [sp, #8]
    4d42:	9601      	str	r6, [sp, #4]
    4d44:	f8cd 8000 	str.w	r8, [sp]
    4d48:	4b06      	ldr	r3, [pc, #24]	; (4d64 <bt_conn_set_state+0x1d4>)
    4d4a:	4a0a      	ldr	r2, [pc, #40]	; (4d74 <bt_conn_set_state+0x1e4>)
    4d4c:	4907      	ldr	r1, [pc, #28]	; (4d6c <bt_conn_set_state+0x1dc>)
    4d4e:	4810      	ldr	r0, [pc, #64]	; (4d90 <bt_conn_set_state+0x200>)
    4d50:	f7fc f91c 	bl	f8c <printk>
		break;
    4d54:	e748      	b.n	4be8 <bt_conn_set_state+0x58>
    4d56:	bf00      	nop
    4d58:	00015e19 	.word	0x00015e19
    4d5c:	00017680 	.word	0x00017680
    4d60:	00017ace 	.word	0x00017ace
    4d64:	0001770f 	.word	0x0001770f
    4d68:	0001723a 	.word	0x0001723a
    4d6c:	00017241 	.word	0x00017241
    4d70:	00017ad8 	.word	0x00017ad8
    4d74:	0001727c 	.word	0x0001727c
    4d78:	00017af6 	.word	0x00017af6
    4d7c:	20003bb0 	.word	0x20003bb0
    4d80:	20000370 	.word	0x20000370
    4d84:	2000041c 	.word	0x2000041c
    4d88:	20003b14 	.word	0x20003b14
    4d8c:	200019b0 	.word	0x200019b0
    4d90:	00017b14 	.word	0x00017b14

00004d94 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4d94:	3044      	adds	r0, #68	; 0x44
    4d96:	4770      	bx	lr

00004d98 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4d98:	b570      	push	{r4, r5, r6, lr}
    4d9a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4d9c:	4608      	mov	r0, r1
{
    4d9e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4da0:	f7fd fb98 	bl	24d4 <bt_le_conn_params_valid>
    4da4:	b908      	cbnz	r0, 4daa <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    4da6:	2400      	movs	r4, #0
    4da8:	e01c      	b.n	4de4 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4daa:	481d      	ldr	r0, [pc, #116]	; (4e20 <bt_conn_create_le+0x88>)
    4dac:	f7ff faea 	bl	4384 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4db0:	0583      	lsls	r3, r0, #22
    4db2:	d4f8      	bmi.n	4da6 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4db4:	4630      	mov	r0, r6
    4db6:	f7ff fdff 	bl	49b8 <bt_conn_lookup_addr_le>
	if (conn) {
    4dba:	4604      	mov	r4, r0
    4dbc:	b1a0      	cbz	r0, 4de8 <bt_conn_create_le+0x50>
		switch (conn->state) {
    4dbe:	7a43      	ldrb	r3, [r0, #9]
    4dc0:	2b01      	cmp	r3, #1
    4dc2:	d006      	beq.n	4dd2 <bt_conn_create_le+0x3a>
    4dc4:	d301      	bcc.n	4dca <bt_conn_create_le+0x32>
    4dc6:	2b03      	cmp	r3, #3
    4dc8:	d90c      	bls.n	4de4 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    4dca:	4620      	mov	r0, r4
    4dcc:	f7ff fe2a 	bl	4a24 <bt_conn_unref>
    4dd0:	e7e9      	b.n	4da6 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4dd2:	886b      	ldrh	r3, [r5, #2]
    4dd4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4dd8:	88ab      	ldrh	r3, [r5, #4]
    4dda:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4dde:	88eb      	ldrh	r3, [r5, #6]
    4de0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4de4:	4620      	mov	r0, r4
    4de6:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4de8:	4630      	mov	r0, r6
    4dea:	f7ff fd51 	bl	4890 <bt_conn_add_le>
	if (!conn) {
    4dee:	4604      	mov	r4, r0
    4df0:	2800      	cmp	r0, #0
    4df2:	d0f7      	beq.n	4de4 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4df4:	2207      	movs	r2, #7
    4df6:	4631      	mov	r1, r6
    4df8:	3052      	adds	r0, #82	; 0x52
    4dfa:	f7fc feff 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    4dfe:	886b      	ldrh	r3, [r5, #2]
    4e00:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4e04:	88ab      	ldrh	r3, [r5, #4]
    4e06:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4e0a:	88eb      	ldrh	r3, [r5, #6]
    4e0c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4e10:	4620      	mov	r0, r4
    4e12:	2101      	movs	r1, #1
    4e14:	f7ff febc 	bl	4b90 <bt_conn_set_state>
	bt_le_scan_update(true);
    4e18:	2001      	movs	r0, #1
    4e1a:	f7fd fccb 	bl	27b4 <bt_le_scan_update>
	return conn;
    4e1e:	e7e1      	b.n	4de4 <bt_conn_create_le+0x4c>
    4e20:	20003af8 	.word	0x20003af8

00004e24 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4e24:	b570      	push	{r4, r5, r6, lr}
    4e26:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4e28:	460d      	mov	r5, r1
    4e2a:	2900      	cmp	r1, #0
    4e2c:	d13b      	bne.n	4ea6 <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    4e2e:	4630      	mov	r0, r6
    4e30:	f7ff fdc2 	bl	49b8 <bt_conn_lookup_addr_le>
	if (!conn) {
    4e34:	4604      	mov	r4, r0
    4e36:	b928      	cbnz	r0, 4e44 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4e38:	4630      	mov	r0, r6
    4e3a:	f7ff fd29 	bl	4890 <bt_conn_add_le>
		if (!conn) {
    4e3e:	4604      	mov	r4, r0
    4e40:	2800      	cmp	r0, #0
    4e42:	d051      	beq.n	4ee8 <bt_le_set_auto_conn+0xc4>
    4e44:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4e46:	2d00      	cmp	r5, #0
    4e48:	d035      	beq.n	4eb6 <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    4e4a:	886a      	ldrh	r2, [r5, #2]
    4e4c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4e50:	88aa      	ldrh	r2, [r5, #4]
    4e52:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4e56:	88ea      	ldrh	r2, [r5, #6]
    4e58:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e5c:	f3bf 8f5b 	dmb	ish
    4e60:	e853 2f00 	ldrex	r2, [r3]
    4e64:	f042 0101 	orr.w	r1, r2, #1
    4e68:	e843 1000 	strex	r0, r1, [r3]
    4e6c:	2800      	cmp	r0, #0
    4e6e:	d1f7      	bne.n	4e60 <bt_le_set_auto_conn+0x3c>
    4e70:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4e74:	07d1      	lsls	r1, r2, #31
    4e76:	d402      	bmi.n	4e7e <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4e78:	4620      	mov	r0, r4
    4e7a:	f7ff fd55 	bl	4928 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4e7e:	7a63      	ldrb	r3, [r4, #9]
    4e80:	b963      	cbnz	r3, 4e9c <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4e82:	481b      	ldr	r0, [pc, #108]	; (4ef0 <bt_le_set_auto_conn+0xcc>)
    4e84:	f7ff fa7e 	bl	4384 <atomic_get>
    4e88:	0783      	lsls	r3, r0, #30
    4e8a:	d507      	bpl.n	4e9c <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4e8c:	b11d      	cbz	r5, 4e96 <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4e8e:	2101      	movs	r1, #1
    4e90:	4620      	mov	r0, r4
    4e92:	f7ff fe7d 	bl	4b90 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    4e96:	2000      	movs	r0, #0
    4e98:	f7fd fc8c 	bl	27b4 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    4e9c:	4620      	mov	r0, r4
    4e9e:	f7ff fdc1 	bl	4a24 <bt_conn_unref>

	return 0;
    4ea2:	2000      	movs	r0, #0
    4ea4:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    4ea6:	4608      	mov	r0, r1
    4ea8:	f7fd fb14 	bl	24d4 <bt_le_conn_params_valid>
    4eac:	2800      	cmp	r0, #0
    4eae:	d1be      	bne.n	4e2e <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4eb0:	f06f 0015 	mvn.w	r0, #21
    4eb4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4eb6:	f3bf 8f5b 	dmb	ish
    4eba:	e853 2f00 	ldrex	r2, [r3]
    4ebe:	f022 0101 	bic.w	r1, r2, #1
    4ec2:	e843 1000 	strex	r0, r1, [r3]
    4ec6:	2800      	cmp	r0, #0
    4ec8:	d1f7      	bne.n	4eba <bt_le_set_auto_conn+0x96>
    4eca:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    4ece:	07d2      	lsls	r2, r2, #31
    4ed0:	d5d5      	bpl.n	4e7e <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    4ed2:	4620      	mov	r0, r4
    4ed4:	f7ff fda6 	bl	4a24 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4ed8:	7a63      	ldrb	r3, [r4, #9]
    4eda:	2b01      	cmp	r3, #1
    4edc:	d1cf      	bne.n	4e7e <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4ede:	4629      	mov	r1, r5
    4ee0:	4620      	mov	r0, r4
    4ee2:	f7ff fe55 	bl	4b90 <bt_conn_set_state>
    4ee6:	e7ca      	b.n	4e7e <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4ee8:	f06f 000b 	mvn.w	r0, #11
}
    4eec:	bd70      	pop	{r4, r5, r6, pc}
    4eee:	bf00      	nop
    4ef0:	20003af8 	.word	0x20003af8

00004ef4 <bt_conn_disconnect>:
{
    4ef4:	b570      	push	{r4, r5, r6, lr}
    4ef6:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4ef8:	7881      	ldrb	r1, [r0, #2]
{
    4efa:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4efc:	b911      	cbnz	r1, 4f04 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    4efe:	3044      	adds	r0, #68	; 0x44
    4f00:	f7ff ff90 	bl	4e24 <bt_le_set_auto_conn>
	switch (conn->state) {
    4f04:	7a63      	ldrb	r3, [r4, #9]
    4f06:	3b01      	subs	r3, #1
    4f08:	2b03      	cmp	r3, #3
    4f0a:	d803      	bhi.n	4f14 <bt_conn_disconnect+0x20>
    4f0c:	e8df f003 	tbb	[pc, r3]
    4f10:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4f14:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4f18:	4628      	mov	r0, r5
    4f1a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4f1c:	4620      	mov	r0, r4
		conn->err = reason;
    4f1e:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4f20:	2100      	movs	r1, #0
    4f22:	f7ff fe35 	bl	4b90 <bt_conn_set_state>
		bt_le_scan_update(false);
    4f26:	2000      	movs	r0, #0
    4f28:	f7fd fc44 	bl	27b4 <bt_le_scan_update>
		return 0;
    4f2c:	2500      	movs	r5, #0
    4f2e:	e7f3      	b.n	4f18 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4f30:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4f34:	f010 fcb0 	bl	15898 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4f38:	2100      	movs	r1, #0
    4f3a:	f242 000e 	movw	r0, #8206	; 0x200e
}
    4f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4f42:	f7fd bb9d 	b.w	2680 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4f46:	2103      	movs	r1, #3
    4f48:	f240 4006 	movw	r0, #1030	; 0x406
    4f4c:	f7fd f934 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    4f50:	4605      	mov	r5, r0
    4f52:	b198      	cbz	r0, 4f7c <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4f54:	2103      	movs	r1, #3
    4f56:	3008      	adds	r0, #8
    4f58:	f00f f950 	bl	141fc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4f5c:	8823      	ldrh	r3, [r4, #0]
    4f5e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4f60:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4f62:	4629      	mov	r1, r5
    4f64:	f240 4006 	movw	r0, #1030	; 0x406
    4f68:	f7fd fb8a 	bl	2680 <bt_hci_cmd_send>
	if (err) {
    4f6c:	4605      	mov	r5, r0
    4f6e:	2800      	cmp	r0, #0
    4f70:	d1d2      	bne.n	4f18 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4f72:	2104      	movs	r1, #4
    4f74:	4620      	mov	r0, r4
    4f76:	f7ff fe0b 	bl	4b90 <bt_conn_set_state>
    4f7a:	e7cd      	b.n	4f18 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    4f7c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4f80:	e7ca      	b.n	4f18 <bt_conn_disconnect+0x24>

00004f82 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f84:	4607      	mov	r7, r0
    4f86:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4f88:	f242 0013 	movw	r0, #8211	; 0x2013
    4f8c:	210e      	movs	r1, #14
    4f8e:	f7fd f913 	bl	21b8 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    4f92:	4606      	mov	r6, r0
    4f94:	b1c8      	cbz	r0, 4fca <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4f96:	210e      	movs	r1, #14
    4f98:	3008      	adds	r0, #8
    4f9a:	f00f f92f 	bl	141fc <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    4f9e:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4fa0:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4fa2:	220e      	movs	r2, #14
    4fa4:	f7fc fe56 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4fa8:	883b      	ldrh	r3, [r7, #0]
    4faa:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4fac:	882b      	ldrh	r3, [r5, #0]
    4fae:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4fb0:	886b      	ldrh	r3, [r5, #2]
    4fb2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4fb4:	88ab      	ldrh	r3, [r5, #4]
    4fb6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4fb8:	88eb      	ldrh	r3, [r5, #6]
    4fba:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4fbc:	4631      	mov	r1, r6
    4fbe:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4fc6:	f7fd bb5b 	b.w	2680 <bt_hci_cmd_send>
}
    4fca:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004fd0 <bt_conn_le_param_update>:
{
    4fd0:	b530      	push	{r4, r5, lr}
    4fd2:	460d      	mov	r5, r1
    4fd4:	b08b      	sub	sp, #44	; 0x2c
    4fd6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4fd8:	f010 f958 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4fdc:	88ea      	ldrh	r2, [r5, #6]
    4fde:	9207      	str	r2, [sp, #28]
    4fe0:	88aa      	ldrh	r2, [r5, #4]
    4fe2:	9206      	str	r2, [sp, #24]
    4fe4:	886a      	ldrh	r2, [r5, #2]
    4fe6:	9205      	str	r2, [sp, #20]
    4fe8:	882a      	ldrh	r2, [r5, #0]
    4fea:	4b21      	ldr	r3, [pc, #132]	; (5070 <bt_conn_le_param_update+0xa0>)
    4fec:	9204      	str	r2, [sp, #16]
    4fee:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    4ff2:	9308      	str	r3, [sp, #32]
    4ff4:	9203      	str	r2, [sp, #12]
    4ff6:	9001      	str	r0, [sp, #4]
    4ff8:	9300      	str	r3, [sp, #0]
    4ffa:	4a1e      	ldr	r2, [pc, #120]	; (5074 <bt_conn_le_param_update+0xa4>)
    4ffc:	4b1e      	ldr	r3, [pc, #120]	; (5078 <bt_conn_le_param_update+0xa8>)
    4ffe:	9402      	str	r4, [sp, #8]
    5000:	491e      	ldr	r1, [pc, #120]	; (507c <bt_conn_le_param_update+0xac>)
    5002:	481f      	ldr	r0, [pc, #124]	; (5080 <bt_conn_le_param_update+0xb0>)
    5004:	f7fb ffc2 	bl	f8c <printk>
	if (conn->le.interval >= param->interval_min &&
    5008:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    500c:	882a      	ldrh	r2, [r5, #0]
    500e:	429a      	cmp	r2, r3
    5010:	d80c      	bhi.n	502c <bt_conn_le_param_update+0x5c>
    5012:	886a      	ldrh	r2, [r5, #2]
    5014:	429a      	cmp	r2, r3
    5016:	d309      	bcc.n	502c <bt_conn_le_param_update+0x5c>
	    conn->le.interval <= param->interval_max &&
    5018:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    501c:	88ab      	ldrh	r3, [r5, #4]
    501e:	429a      	cmp	r2, r3
    5020:	d104      	bne.n	502c <bt_conn_le_param_update+0x5c>
	    conn->le.latency == param->latency &&
    5022:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    5026:	88eb      	ldrh	r3, [r5, #6]
    5028:	429a      	cmp	r2, r3
    502a:	d01c      	beq.n	5066 <bt_conn_le_param_update+0x96>
	k_delayed_work_cancel(&conn->le.update_work);
    502c:	f104 0070 	add.w	r0, r4, #112	; 0x70
    5030:	f010 fc32 	bl	15898 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    5034:	4b13      	ldr	r3, [pc, #76]	; (5084 <bt_conn_le_param_update+0xb4>)
    5036:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    503a:	079a      	lsls	r2, r3, #30
    503c:	d503      	bpl.n	5046 <bt_conn_le_param_update+0x76>
    503e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    5042:	079b      	lsls	r3, r3, #30
    5044:	d401      	bmi.n	504a <bt_conn_le_param_update+0x7a>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    5046:	78e3      	ldrb	r3, [r4, #3]
    5048:	b933      	cbnz	r3, 5058 <bt_conn_le_param_update+0x88>
		return bt_conn_le_conn_update(conn, param);
    504a:	4629      	mov	r1, r5
    504c:	4620      	mov	r0, r4
}
    504e:	b00b      	add	sp, #44	; 0x2c
    5050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    5054:	f7ff bf95 	b.w	4f82 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    5058:	4629      	mov	r1, r5
    505a:	4620      	mov	r0, r4
}
    505c:	b00b      	add	sp, #44	; 0x2c
    505e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    5062:	f000 bcd5 	b.w	5a10 <bt_l2cap_update_conn_param>
}
    5066:	f06f 0044 	mvn.w	r0, #68	; 0x44
    506a:	b00b      	add	sp, #44	; 0x2c
    506c:	bd30      	pop	{r4, r5, pc}
    506e:	bf00      	nop
    5070:	00015e19 	.word	0x00015e19
    5074:	0001723a 	.word	0x0001723a
    5078:	0001773b 	.word	0x0001773b
    507c:	00017241 	.word	0x00017241
    5080:	00017753 	.word	0x00017753
    5084:	20003a88 	.word	0x20003a88

00005088 <le_conn_update>:
{
    5088:	4603      	mov	r3, r0
    508a:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    508c:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    5090:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    5092:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5096:	d105      	bne.n	50a4 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    5098:	2113      	movs	r1, #19
    509a:	f7ff ff2b 	bl	4ef4 <bt_conn_disconnect>
}
    509e:	b003      	add	sp, #12
    50a0:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    50a4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    50a8:	f8ad 2000 	strh.w	r2, [sp]
    50ac:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    50b0:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    50b4:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    50b6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    50ba:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    50be:	f8ad 2004 	strh.w	r2, [sp, #4]
    50c2:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    50c6:	f7ff ff83 	bl	4fd0 <bt_conn_le_param_update>
    50ca:	e7e8      	b.n	509e <le_conn_update+0x16>

000050cc <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    50cc:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    50ce:	4b08      	ldr	r3, [pc, #32]	; (50f0 <bt_conn_create_pdu+0x24>)
{
    50d0:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    50d2:	2800      	cmp	r0, #0
    50d4:	bf08      	it	eq
    50d6:	4618      	moveq	r0, r3
    50d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    50dc:	f00f f82c 	bl	14138 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    50e0:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    50e2:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    50e4:	3008      	adds	r0, #8
    50e6:	f00f f846 	bl	14176 <net_buf_simple_reserve>

	return buf;
}
    50ea:	4620      	mov	r0, r4
    50ec:	bd38      	pop	{r3, r4, r5, pc}
    50ee:	bf00      	nop
    50f0:	20003f54 	.word	0x20003f54

000050f4 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    50f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50f8:	4606      	mov	r6, r0
    50fa:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    50fc:	4816      	ldr	r0, [pc, #88]	; (5158 <create_frag.isra.8+0x64>)
    50fe:	2100      	movs	r1, #0
    5100:	f7ff ffe4 	bl	50cc <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    5104:	7833      	ldrb	r3, [r6, #0]
    5106:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    5108:	4605      	mov	r5, r0
    510a:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    510e:	d005      	beq.n	511c <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    5110:	f00f f842 	bl	14198 <net_buf_unref>
		return NULL;
    5114:	4635      	mov	r5, r6
}
    5116:	4628      	mov	r0, r5
    5118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    511c:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    511e:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    5122:	4e0e      	ldr	r6, [pc, #56]	; (515c <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5124:	4638      	mov	r0, r7
    5126:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    512a:	f00f f8a2 	bl	14272 <net_buf_simple_tailroom>
    512e:	4580      	cmp	r8, r0
    5130:	d20c      	bcs.n	514c <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    5132:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    5136:	f854 1f08 	ldr.w	r1, [r4, #8]!
    513a:	4632      	mov	r2, r6
    513c:	4638      	mov	r0, r7
    513e:	f00f f863 	bl	14208 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    5142:	4631      	mov	r1, r6
    5144:	4620      	mov	r0, r4
    5146:	f00f f878 	bl	1423a <net_buf_simple_pull>
    514a:	e7e4      	b.n	5116 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    514c:	4638      	mov	r0, r7
    514e:	f00f f890 	bl	14272 <net_buf_simple_tailroom>
    5152:	b286      	uxth	r6, r0
    5154:	e7ef      	b.n	5136 <create_frag.isra.8+0x42>
    5156:	bf00      	nop
    5158:	20003f74 	.word	0x20003f74
    515c:	20003a88 	.word	0x20003a88

00005160 <bt_conn_process_tx>:
{
    5160:	b5f0      	push	{r4, r5, r6, r7, lr}
    5162:	b087      	sub	sp, #28
    5164:	4604      	mov	r4, r0
    5166:	f010 f891 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    516a:	4d45      	ldr	r5, [pc, #276]	; (5280 <bt_conn_process_tx+0x120>)
    516c:	9001      	str	r0, [sp, #4]
    516e:	4b45      	ldr	r3, [pc, #276]	; (5284 <bt_conn_process_tx+0x124>)
    5170:	9503      	str	r5, [sp, #12]
    5172:	9402      	str	r4, [sp, #8]
    5174:	9500      	str	r5, [sp, #0]
    5176:	4a44      	ldr	r2, [pc, #272]	; (5288 <bt_conn_process_tx+0x128>)
    5178:	4944      	ldr	r1, [pc, #272]	; (528c <bt_conn_process_tx+0x12c>)
    517a:	4845      	ldr	r0, [pc, #276]	; (5290 <bt_conn_process_tx+0x130>)
    517c:	f7fb ff06 	bl	f8c <printk>
	if (conn->state == BT_CONN_DISCONNECTED &&
    5180:	7a63      	ldrb	r3, [r4, #9]
    5182:	462e      	mov	r6, r5
    5184:	bb0b      	cbnz	r3, 51ca <bt_conn_process_tx+0x6a>
    5186:	f3bf 8f5b 	dmb	ish
    518a:	1d23      	adds	r3, r4, #4
    518c:	e853 2f00 	ldrex	r2, [r3]
    5190:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    5194:	e843 1000 	strex	r0, r1, [r3]
    5198:	2800      	cmp	r0, #0
    519a:	d1f7      	bne.n	518c <bt_conn_process_tx+0x2c>
    519c:	f3bf 8f5b 	dmb	ish
    51a0:	0653      	lsls	r3, r2, #25
    51a2:	d512      	bpl.n	51ca <bt_conn_process_tx+0x6a>
    51a4:	f010 f872 	bl	1528c <_impl_k_current_get>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    51a8:	8823      	ldrh	r3, [r4, #0]
    51aa:	9302      	str	r3, [sp, #8]
    51ac:	9001      	str	r0, [sp, #4]
    51ae:	9503      	str	r5, [sp, #12]
    51b0:	9500      	str	r5, [sp, #0]
    51b2:	4b34      	ldr	r3, [pc, #208]	; (5284 <bt_conn_process_tx+0x124>)
    51b4:	4a34      	ldr	r2, [pc, #208]	; (5288 <bt_conn_process_tx+0x128>)
    51b6:	4935      	ldr	r1, [pc, #212]	; (528c <bt_conn_process_tx+0x12c>)
    51b8:	4836      	ldr	r0, [pc, #216]	; (5294 <bt_conn_process_tx+0x134>)
    51ba:	f7fb fee7 	bl	f8c <printk>
		conn_cleanup(conn);
    51be:	4620      	mov	r0, r4
}
    51c0:	b007      	add	sp, #28
    51c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    51c6:	f7ff bc5d 	b.w	4a84 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    51ca:	2100      	movs	r1, #0
    51cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    51d0:	f00e ffb8 	bl	14144 <net_buf_get>
	BT_ASSERT(buf);
    51d4:	4605      	mov	r5, r0
    51d6:	b968      	cbnz	r0, 51f4 <bt_conn_process_tx+0x94>
    51d8:	9601      	str	r6, [sp, #4]
    51da:	9600      	str	r6, [sp, #0]
    51dc:	4b29      	ldr	r3, [pc, #164]	; (5284 <bt_conn_process_tx+0x124>)
    51de:	4a2e      	ldr	r2, [pc, #184]	; (5298 <bt_conn_process_tx+0x138>)
    51e0:	492a      	ldr	r1, [pc, #168]	; (528c <bt_conn_process_tx+0x12c>)
    51e2:	482e      	ldr	r0, [pc, #184]	; (529c <bt_conn_process_tx+0x13c>)
    51e4:	f7fb fed2 	bl	f8c <printk>
    51e8:	4040      	eors	r0, r0
    51ea:	f380 8811 	msr	BASEPRI, r0
    51ee:	f04f 0004 	mov.w	r0, #4
    51f2:	df02      	svc	2
    51f4:	f010 f84a 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    51f8:	9605      	str	r6, [sp, #20]
    51fa:	89ab      	ldrh	r3, [r5, #12]
    51fc:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    51fe:	4e28      	ldr	r6, [pc, #160]	; (52a0 <bt_conn_process_tx+0x140>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    5200:	9304      	str	r3, [sp, #16]
    5202:	9001      	str	r0, [sp, #4]
    5204:	4a20      	ldr	r2, [pc, #128]	; (5288 <bt_conn_process_tx+0x128>)
    5206:	4921      	ldr	r1, [pc, #132]	; (528c <bt_conn_process_tx+0x12c>)
    5208:	9503      	str	r5, [sp, #12]
    520a:	9402      	str	r4, [sp, #8]
    520c:	4b25      	ldr	r3, [pc, #148]	; (52a4 <bt_conn_process_tx+0x144>)
    520e:	4826      	ldr	r0, [pc, #152]	; (52a8 <bt_conn_process_tx+0x148>)
    5210:	f7fb febc 	bl	f8c <printk>
	if (buf->len <= conn_mtu(conn)) {
    5214:	89a9      	ldrh	r1, [r5, #12]
    5216:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    521a:	4291      	cmp	r1, r2
    521c:	d808      	bhi.n	5230 <bt_conn_process_tx+0xd0>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    521e:	2300      	movs	r3, #0
    5220:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5222:	4629      	mov	r1, r5
    5224:	4620      	mov	r0, r4
    5226:	f7ff fa67 	bl	46f8 <send_frag>
	if (!send_buf(conn, buf)) {
    522a:	b148      	cbz	r0, 5240 <bt_conn_process_tx+0xe0>
}
    522c:	b007      	add	sp, #28
    522e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5230:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    5234:	4629      	mov	r1, r5
    5236:	4638      	mov	r0, r7
    5238:	f7ff ff5c 	bl	50f4 <create_frag.isra.8>
	if (!frag) {
    523c:	4601      	mov	r1, r0
    523e:	b928      	cbnz	r0, 524c <bt_conn_process_tx+0xec>
		net_buf_unref(buf);
    5240:	4628      	mov	r0, r5
}
    5242:	b007      	add	sp, #28
    5244:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    5248:	f00e bfa6 	b.w	14198 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    524c:	2301      	movs	r3, #1
    524e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5250:	4620      	mov	r0, r4
    5252:	f7ff fa51 	bl	46f8 <send_frag>
    5256:	2800      	cmp	r0, #0
    5258:	d0f2      	beq.n	5240 <bt_conn_process_tx+0xe0>
	while (buf->len > conn_mtu(conn)) {
    525a:	89aa      	ldrh	r2, [r5, #12]
    525c:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    5260:	429a      	cmp	r2, r3
    5262:	d802      	bhi.n	526a <bt_conn_process_tx+0x10a>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5264:	2300      	movs	r3, #0
    5266:	2201      	movs	r2, #1
    5268:	e7db      	b.n	5222 <bt_conn_process_tx+0xc2>
		frag = create_frag(conn, buf);
    526a:	4629      	mov	r1, r5
    526c:	4638      	mov	r0, r7
    526e:	f7ff ff41 	bl	50f4 <create_frag.isra.8>
		if (!frag) {
    5272:	4601      	mov	r1, r0
    5274:	2800      	cmp	r0, #0
    5276:	d0e3      	beq.n	5240 <bt_conn_process_tx+0xe0>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5278:	2301      	movs	r3, #1
    527a:	461a      	mov	r2, r3
    527c:	e7e8      	b.n	5250 <bt_conn_process_tx+0xf0>
    527e:	bf00      	nop
    5280:	00015e19 	.word	0x00015e19
    5284:	000176fc 	.word	0x000176fc
    5288:	0001723a 	.word	0x0001723a
    528c:	00017241 	.word	0x00017241
    5290:	00017795 	.word	0x00017795
    5294:	000177f9 	.word	0x000177f9
    5298:	000171f2 	.word	0x000171f2
    529c:	000173ee 	.word	0x000173ee
    52a0:	20003a88 	.word	0x20003a88
    52a4:	000176dc 	.word	0x000176dc
    52a8:	00017833 	.word	0x00017833

000052ac <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    52ac:	4b03      	ldr	r3, [pc, #12]	; (52bc <bt_conn_get_id+0x10>)
    52ae:	1ac0      	subs	r0, r0, r3
    52b0:	4b03      	ldr	r3, [pc, #12]	; (52c0 <bt_conn_get_id+0x14>)
    52b2:	10c0      	asrs	r0, r0, #3
    52b4:	4358      	muls	r0, r3
}
    52b6:	b2c0      	uxtb	r0, r0
    52b8:	4770      	bx	lr
    52ba:	bf00      	nop
    52bc:	20000384 	.word	0x20000384
    52c0:	286bca1b 	.word	0x286bca1b

000052c4 <bt_conn_init>:
	parent->next = child;
    52c4:	4b12      	ldr	r3, [pc, #72]	; (5310 <bt_conn_init+0x4c>)
    52c6:	4a13      	ldr	r2, [pc, #76]	; (5314 <bt_conn_init+0x50>)
    52c8:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    52ca:	b510      	push	{r4, lr}
    52cc:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    52ce:	6859      	ldr	r1, [r3, #4]
    52d0:	b901      	cbnz	r1, 52d4 <bt_conn_init+0x10>
	list->tail = node;
    52d2:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    52d4:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    52d6:	6092      	str	r2, [r2, #8]
	list->head = node;
    52d8:	4a0f      	ldr	r2, [pc, #60]	; (5318 <bt_conn_init+0x54>)
    52da:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    52dc:	b901      	cbnz	r1, 52e0 <bt_conn_init+0x1c>
	list->tail = node;
    52de:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    52e0:	f002 f974 	bl	75cc <bt_att_init>

	err = bt_smp_init();
    52e4:	f003 f888 	bl	83f8 <bt_smp_init>
	if (err) {
    52e8:	4604      	mov	r4, r0
    52ea:	b970      	cbnz	r0, 530a <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    52ec:	f000 fbb8 	bl	5a60 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    52f0:	480a      	ldr	r0, [pc, #40]	; (531c <bt_conn_init+0x58>)
    52f2:	f7ff f847 	bl	4384 <atomic_get>
    52f6:	b140      	cbz	r0, 530a <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    52f8:	4809      	ldr	r0, [pc, #36]	; (5320 <bt_conn_init+0x5c>)
    52fa:	f7ff f843 	bl	4384 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    52fe:	07c3      	lsls	r3, r0, #31
    5300:	d503      	bpl.n	530a <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5302:	2101      	movs	r1, #1
    5304:	4807      	ldr	r0, [pc, #28]	; (5324 <bt_conn_init+0x60>)
    5306:	f7ff fc43 	bl	4b90 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    530a:	4620      	mov	r0, r4
    530c:	bd10      	pop	{r4, pc}
    530e:	bf00      	nop
    5310:	2000041c 	.word	0x2000041c
    5314:	20000374 	.word	0x20000374
    5318:	2000037c 	.word	0x2000037c
    531c:	200003c4 	.word	0x200003c4
    5320:	20000388 	.word	0x20000388
    5324:	20000384 	.word	0x20000384

00005328 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5328:	b570      	push	{r4, r5, r6, lr}
    532a:	b086      	sub	sp, #24
    532c:	4605      	mov	r5, r0
    532e:	460e      	mov	r6, r1
    5330:	f00f ffac 	bl	1528c <_impl_k_current_get>
		.connected = l2cap_connected,
		.disconnected = l2cap_disconnected,
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    5334:	4c10      	ldr	r4, [pc, #64]	; (5378 <l2cap_accept+0x50>)
    5336:	882b      	ldrh	r3, [r5, #0]
    5338:	9303      	str	r3, [sp, #12]
    533a:	9001      	str	r0, [sp, #4]
    533c:	4b0f      	ldr	r3, [pc, #60]	; (537c <l2cap_accept+0x54>)
    533e:	9404      	str	r4, [sp, #16]
    5340:	9502      	str	r5, [sp, #8]
    5342:	9400      	str	r4, [sp, #0]
    5344:	4a0e      	ldr	r2, [pc, #56]	; (5380 <l2cap_accept+0x58>)
    5346:	490f      	ldr	r1, [pc, #60]	; (5384 <l2cap_accept+0x5c>)
    5348:	480f      	ldr	r0, [pc, #60]	; (5388 <l2cap_accept+0x60>)
    534a:	f7fb fe1f 	bl	f8c <printk>

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    534e:	4b0f      	ldr	r3, [pc, #60]	; (538c <l2cap_accept+0x64>)
    5350:	6818      	ldr	r0, [r3, #0]
    5352:	b920      	cbnz	r0, 535e <l2cap_accept+0x36>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    5354:	4a0e      	ldr	r2, [pc, #56]	; (5390 <l2cap_accept+0x68>)
    5356:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    5358:	6033      	str	r3, [r6, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    535a:	b006      	add	sp, #24
    535c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    535e:	9402      	str	r4, [sp, #8]
    5360:	e88d 0030 	stmia.w	sp, {r4, r5}
    5364:	4b05      	ldr	r3, [pc, #20]	; (537c <l2cap_accept+0x54>)
    5366:	4a0b      	ldr	r2, [pc, #44]	; (5394 <l2cap_accept+0x6c>)
    5368:	4906      	ldr	r1, [pc, #24]	; (5384 <l2cap_accept+0x5c>)
    536a:	480b      	ldr	r0, [pc, #44]	; (5398 <l2cap_accept+0x70>)
    536c:	f7fb fe0e 	bl	f8c <printk>
	return -ENOMEM;
    5370:	f06f 000b 	mvn.w	r0, #11
    5374:	e7f1      	b.n	535a <l2cap_accept+0x32>
    5376:	bf00      	nop
    5378:	00015e19 	.word	0x00015e19
    537c:	00017cbe 	.word	0x00017cbe
    5380:	0001723a 	.word	0x0001723a
    5384:	00017241 	.word	0x00017241
    5388:	00017df0 	.word	0x00017df0
    538c:	20000424 	.word	0x20000424
    5390:	20003bcc 	.word	0x20003bcc
    5394:	000171f2 	.word	0x000171f2
    5398:	00017e17 	.word	0x00017e17

0000539c <l2cap_disconnected>:
{
    539c:	b510      	push	{r4, lr}
    539e:	b086      	sub	sp, #24
    53a0:	4604      	mov	r4, r0
    53a2:	f00f ff73 	bl	1528c <_impl_k_current_get>
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
    53a6:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    53a8:	4b06      	ldr	r3, [pc, #24]	; (53c4 <l2cap_disconnected+0x28>)
    53aa:	9304      	str	r3, [sp, #16]
    53ac:	9203      	str	r2, [sp, #12]
    53ae:	9001      	str	r0, [sp, #4]
    53b0:	9300      	str	r3, [sp, #0]
    53b2:	9402      	str	r4, [sp, #8]
    53b4:	4b04      	ldr	r3, [pc, #16]	; (53c8 <l2cap_disconnected+0x2c>)
    53b6:	4a05      	ldr	r2, [pc, #20]	; (53cc <l2cap_disconnected+0x30>)
    53b8:	4905      	ldr	r1, [pc, #20]	; (53d0 <l2cap_disconnected+0x34>)
    53ba:	4806      	ldr	r0, [pc, #24]	; (53d4 <l2cap_disconnected+0x38>)
    53bc:	f7fb fde6 	bl	f8c <printk>
}
    53c0:	b006      	add	sp, #24
    53c2:	bd10      	pop	{r4, pc}
    53c4:	00015e19 	.word	0x00015e19
    53c8:	00017cab 	.word	0x00017cab
    53cc:	0001723a 	.word	0x0001723a
    53d0:	00017241 	.word	0x00017241
    53d4:	00017e4e 	.word	0x00017e4e

000053d8 <l2cap_connected>:
{
    53d8:	b510      	push	{r4, lr}
    53da:	b086      	sub	sp, #24
    53dc:	4604      	mov	r4, r0
    53de:	f00f ff55 	bl	1528c <_impl_k_current_get>
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
    53e2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    53e4:	4b06      	ldr	r3, [pc, #24]	; (5400 <l2cap_connected+0x28>)
    53e6:	9304      	str	r3, [sp, #16]
    53e8:	9203      	str	r2, [sp, #12]
    53ea:	9001      	str	r0, [sp, #4]
    53ec:	9300      	str	r3, [sp, #0]
    53ee:	9402      	str	r4, [sp, #8]
    53f0:	4b04      	ldr	r3, [pc, #16]	; (5404 <l2cap_connected+0x2c>)
    53f2:	4a05      	ldr	r2, [pc, #20]	; (5408 <l2cap_connected+0x30>)
    53f4:	4905      	ldr	r1, [pc, #20]	; (540c <l2cap_connected+0x34>)
    53f6:	4806      	ldr	r0, [pc, #24]	; (5410 <l2cap_connected+0x38>)
    53f8:	f7fb fdc8 	bl	f8c <printk>
}
    53fc:	b006      	add	sp, #24
    53fe:	bd10      	pop	{r4, pc}
    5400:	00015e19 	.word	0x00015e19
    5404:	00017c9b 	.word	0x00017c9b
    5408:	0001723a 	.word	0x0001723a
    540c:	00017241 	.word	0x00017241
    5410:	00017e4e 	.word	0x00017e4e

00005414 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5416:	4607      	mov	r7, r0
    5418:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    541a:	2000      	movs	r0, #0
    541c:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    541e:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5420:	f7ff fe54 	bl	50cc <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5424:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5426:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5428:	3008      	adds	r0, #8
    542a:	f00e fee7 	bl	141fc <net_buf_simple_add>
	hdr->code = code;
    542e:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    5430:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5432:	8045      	strh	r5, [r0, #2]
}
    5434:	4620      	mov	r0, r4
    5436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005438 <bt_l2cap_le_fixed_chan_register>:
{
    5438:	b530      	push	{r4, r5, lr}
    543a:	4605      	mov	r5, r0
    543c:	b085      	sub	sp, #20
    543e:	f00f ff25 	bl	1528c <_impl_k_current_get>
	BT_DBG("CID 0x%04x", chan->cid);
    5442:	462c      	mov	r4, r5
    5444:	4b0c      	ldr	r3, [pc, #48]	; (5478 <bt_l2cap_le_fixed_chan_register+0x40>)
    5446:	9303      	str	r3, [sp, #12]
    5448:	f834 2b08 	ldrh.w	r2, [r4], #8
    544c:	9202      	str	r2, [sp, #8]
    544e:	9001      	str	r0, [sp, #4]
    5450:	9300      	str	r3, [sp, #0]
    5452:	4a0a      	ldr	r2, [pc, #40]	; (547c <bt_l2cap_le_fixed_chan_register+0x44>)
    5454:	4b0a      	ldr	r3, [pc, #40]	; (5480 <bt_l2cap_le_fixed_chan_register+0x48>)
    5456:	490b      	ldr	r1, [pc, #44]	; (5484 <bt_l2cap_le_fixed_chan_register+0x4c>)
    5458:	480b      	ldr	r0, [pc, #44]	; (5488 <bt_l2cap_le_fixed_chan_register+0x50>)
    545a:	f7fb fd97 	bl	f8c <printk>
	parent->next = child;
    545e:	2300      	movs	r3, #0
    5460:	60ab      	str	r3, [r5, #8]
    5462:	4b0a      	ldr	r3, [pc, #40]	; (548c <bt_l2cap_le_fixed_chan_register+0x54>)
    5464:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode);
    5466:	b91a      	cbnz	r2, 5470 <bt_l2cap_le_fixed_chan_register+0x38>
	list->tail = node;
    5468:	605c      	str	r4, [r3, #4]
	list->head = node;
    546a:	601c      	str	r4, [r3, #0]
}
    546c:	b005      	add	sp, #20
    546e:	bd30      	pop	{r4, r5, pc}
	parent->next = child;
    5470:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5472:	605c      	str	r4, [r3, #4]
    5474:	e7fa      	b.n	546c <bt_l2cap_le_fixed_chan_register+0x34>
    5476:	bf00      	nop
    5478:	00015e19 	.word	0x00015e19
    547c:	0001723a 	.word	0x0001723a
    5480:	00017be0 	.word	0x00017be0
    5484:	00017241 	.word	0x00017241
    5488:	00017cf0 	.word	0x00017cf0
    548c:	200004bc 	.word	0x200004bc

00005490 <bt_l2cap_chan_remove>:
{
    5490:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5492:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5494:	b113      	cbz	r3, 549c <bt_l2cap_chan_remove+0xc>
    5496:	3b08      	subs	r3, #8
    5498:	2200      	movs	r2, #0
    549a:	b903      	cbnz	r3, 549e <bt_l2cap_chan_remove+0xe>
    549c:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    549e:	428b      	cmp	r3, r1
    54a0:	f103 0408 	add.w	r4, r3, #8
    54a4:	d10f      	bne.n	54c6 <bt_l2cap_chan_remove+0x36>
    54a6:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    54a8:	b93a      	cbnz	r2, 54ba <bt_l2cap_chan_remove+0x2a>
    54aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    54ac:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    54ae:	4294      	cmp	r4, r2
    54b0:	d100      	bne.n	54b4 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    54b2:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    54b4:	2200      	movs	r2, #0
    54b6:	609a      	str	r2, [r3, #8]
    54b8:	bd10      	pop	{r4, pc}
    54ba:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    54bc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    54be:	428c      	cmp	r4, r1
	list->tail = node;
    54c0:	bf08      	it	eq
    54c2:	63c2      	streq	r2, [r0, #60]	; 0x3c
    54c4:	e7f6      	b.n	54b4 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    54c6:	4622      	mov	r2, r4
    54c8:	2c00      	cmp	r4, #0
    54ca:	d0e7      	beq.n	549c <bt_l2cap_chan_remove+0xc>
	return node->next;
    54cc:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    54ce:	2b00      	cmp	r3, #0
    54d0:	d0e4      	beq.n	549c <bt_l2cap_chan_remove+0xc>
    54d2:	3b08      	subs	r3, #8
    54d4:	e7e1      	b.n	549a <bt_l2cap_chan_remove+0xa>
	...

000054d8 <bt_l2cap_chan_del>:
{
    54d8:	b510      	push	{r4, lr}
    54da:	b086      	sub	sp, #24
    54dc:	4604      	mov	r4, r0
    54de:	f00f fed5 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p chan %p", chan->conn, chan);
    54e2:	4b0f      	ldr	r3, [pc, #60]	; (5520 <bt_l2cap_chan_del+0x48>)
    54e4:	6822      	ldr	r2, [r4, #0]
    54e6:	9304      	str	r3, [sp, #16]
    54e8:	9202      	str	r2, [sp, #8]
    54ea:	9001      	str	r0, [sp, #4]
    54ec:	9300      	str	r3, [sp, #0]
    54ee:	9403      	str	r4, [sp, #12]
    54f0:	4b0c      	ldr	r3, [pc, #48]	; (5524 <bt_l2cap_chan_del+0x4c>)
    54f2:	4a0d      	ldr	r2, [pc, #52]	; (5528 <bt_l2cap_chan_del+0x50>)
    54f4:	490d      	ldr	r1, [pc, #52]	; (552c <bt_l2cap_chan_del+0x54>)
    54f6:	480e      	ldr	r0, [pc, #56]	; (5530 <bt_l2cap_chan_del+0x58>)
    54f8:	f7fb fd48 	bl	f8c <printk>
	if (!chan->conn) {
    54fc:	6823      	ldr	r3, [r4, #0]
    54fe:	b133      	cbz	r3, 550e <bt_l2cap_chan_del+0x36>
	if (chan->ops->disconnected) {
    5500:	6863      	ldr	r3, [r4, #4]
    5502:	685b      	ldr	r3, [r3, #4]
    5504:	b10b      	cbz	r3, 550a <bt_l2cap_chan_del+0x32>
		chan->ops->disconnected(chan);
    5506:	4620      	mov	r0, r4
    5508:	4798      	blx	r3
	chan->conn = NULL;
    550a:	2300      	movs	r3, #0
    550c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    550e:	68e3      	ldr	r3, [r4, #12]
    5510:	b123      	cbz	r3, 551c <bt_l2cap_chan_del+0x44>
		chan->destroy(chan);
    5512:	4620      	mov	r0, r4
}
    5514:	b006      	add	sp, #24
    5516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    551a:	4718      	bx	r3
}
    551c:	b006      	add	sp, #24
    551e:	bd10      	pop	{r4, pc}
    5520:	00015e19 	.word	0x00015e19
    5524:	00017c00 	.word	0x00017c00
    5528:	0001723a 	.word	0x0001723a
    552c:	00017241 	.word	0x00017241
    5530:	00017ccb 	.word	0x00017ccb

00005534 <l2cap_rtx_timeout>:
{
    5534:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    5536:	4b0c      	ldr	r3, [pc, #48]	; (5568 <l2cap_rtx_timeout+0x34>)
    5538:	4a0c      	ldr	r2, [pc, #48]	; (556c <l2cap_rtx_timeout+0x38>)
    553a:	490d      	ldr	r1, [pc, #52]	; (5570 <l2cap_rtx_timeout+0x3c>)
{
    553c:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    553e:	f1a0 0410 	sub.w	r4, r0, #16
{
    5542:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    5544:	9302      	str	r3, [sp, #8]
    5546:	e88d 0018 	stmia.w	sp, {r3, r4}
    554a:	480a      	ldr	r0, [pc, #40]	; (5574 <l2cap_rtx_timeout+0x40>)
    554c:	4b0a      	ldr	r3, [pc, #40]	; (5578 <l2cap_rtx_timeout+0x44>)
    554e:	f7fb fd1d 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    5552:	f855 0c10 	ldr.w	r0, [r5, #-16]
    5556:	4621      	mov	r1, r4
    5558:	f7ff ff9a 	bl	5490 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    555c:	4620      	mov	r0, r4
}
    555e:	b005      	add	sp, #20
    5560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    5564:	f7ff bfb8 	b.w	54d8 <bt_l2cap_chan_del>
    5568:	00015e19 	.word	0x00015e19
    556c:	000171f2 	.word	0x000171f2
    5570:	00017241 	.word	0x00017241
    5574:	00018048 	.word	0x00018048
    5578:	00017c12 	.word	0x00017c12

0000557c <bt_l2cap_chan_add>:
{
    557c:	b530      	push	{r4, r5, lr}
    557e:	460d      	mov	r5, r1
	sys_slist_append(&conn->channels, &chan->node);
    5580:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
    5584:	2100      	movs	r1, #0
    5586:	60a9      	str	r1, [r5, #8]
    5588:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
    558a:	b087      	sub	sp, #28
    558c:	4604      	mov	r4, r0
Z_GENLIST_APPEND(slist, snode);
    558e:	b999      	cbnz	r1, 55b8 <bt_l2cap_chan_add+0x3c>
	list->tail = node;
    5590:	63c3      	str	r3, [r0, #60]	; 0x3c
	list->head = node;
    5592:	6383      	str	r3, [r0, #56]	; 0x38
	chan->destroy = destroy;
    5594:	60ea      	str	r2, [r5, #12]
	chan->conn = conn;
    5596:	602c      	str	r4, [r5, #0]
    5598:	f00f fe78 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p chan %p", conn, chan);
    559c:	4b08      	ldr	r3, [pc, #32]	; (55c0 <bt_l2cap_chan_add+0x44>)
    559e:	9304      	str	r3, [sp, #16]
    55a0:	9001      	str	r0, [sp, #4]
    55a2:	9300      	str	r3, [sp, #0]
    55a4:	9503      	str	r5, [sp, #12]
    55a6:	9402      	str	r4, [sp, #8]
    55a8:	4b06      	ldr	r3, [pc, #24]	; (55c4 <bt_l2cap_chan_add+0x48>)
    55aa:	4a07      	ldr	r2, [pc, #28]	; (55c8 <bt_l2cap_chan_add+0x4c>)
    55ac:	4907      	ldr	r1, [pc, #28]	; (55cc <bt_l2cap_chan_add+0x50>)
    55ae:	4808      	ldr	r0, [pc, #32]	; (55d0 <bt_l2cap_chan_add+0x54>)
    55b0:	f7fb fcec 	bl	f8c <printk>
}
    55b4:	b007      	add	sp, #28
    55b6:	bd30      	pop	{r4, r5, pc}
	parent->next = child;
    55b8:	600b      	str	r3, [r1, #0]
	list->tail = node;
    55ba:	63c3      	str	r3, [r0, #60]	; 0x3c
    55bc:	e7ea      	b.n	5594 <bt_l2cap_chan_add+0x18>
    55be:	bf00      	nop
    55c0:	00015e19 	.word	0x00015e19
    55c4:	00017c24 	.word	0x00017c24
    55c8:	0001723a 	.word	0x0001723a
    55cc:	00017241 	.word	0x00017241
    55d0:	00017ccb 	.word	0x00017ccb

000055d4 <bt_l2cap_connected>:
{
    55d4:	4b14      	ldr	r3, [pc, #80]	; (5628 <bt_l2cap_connected+0x54>)
    55d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55d8:	681c      	ldr	r4, [r3, #0]
    55da:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    55dc:	b114      	cbz	r4, 55e4 <bt_l2cap_connected+0x10>
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    55de:	4f13      	ldr	r7, [pc, #76]	; (562c <bt_l2cap_connected+0x58>)
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    55e0:	3c08      	subs	r4, #8
    55e2:	b90c      	cbnz	r4, 55e8 <bt_l2cap_connected+0x14>
}
    55e4:	b003      	add	sp, #12
    55e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
    55e8:	6863      	ldr	r3, [r4, #4]
    55ea:	a901      	add	r1, sp, #4
    55ec:	4630      	mov	r0, r6
    55ee:	4798      	blx	r3
    55f0:	2800      	cmp	r0, #0
    55f2:	db13      	blt.n	561c <bt_l2cap_connected+0x48>
		ch = BT_L2CAP_LE_CHAN(chan);
    55f4:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    55f6:	8823      	ldrh	r3, [r4, #0]
    55f8:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    55fa:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    55fe:	4639      	mov	r1, r7
    5600:	f105 0010 	add.w	r0, r5, #16
    5604:	f010 f938 	bl	15878 <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    5608:	4630      	mov	r0, r6
    560a:	2200      	movs	r2, #0
    560c:	4629      	mov	r1, r5
    560e:	f7ff ffb5 	bl	557c <bt_l2cap_chan_add>
		if (chan->ops->connected) {
    5612:	9801      	ldr	r0, [sp, #4]
    5614:	6843      	ldr	r3, [r0, #4]
    5616:	681b      	ldr	r3, [r3, #0]
    5618:	b103      	cbz	r3, 561c <bt_l2cap_connected+0x48>
			chan->ops->connected(chan);
    561a:	4798      	blx	r3
	return node->next;
    561c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    561e:	2c00      	cmp	r4, #0
    5620:	d0e0      	beq.n	55e4 <bt_l2cap_connected+0x10>
    5622:	3c08      	subs	r4, #8
    5624:	e7dd      	b.n	55e2 <bt_l2cap_connected+0xe>
    5626:	bf00      	nop
    5628:	200004bc 	.word	0x200004bc
    562c:	00005535 	.word	0x00005535

00005630 <bt_l2cap_disconnected>:
{
    5630:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5632:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5634:	b1a3      	cbz	r3, 5660 <bt_l2cap_disconnected+0x30>
    5636:	f1b3 0008 	subs.w	r0, r3, #8
    563a:	d10a      	bne.n	5652 <bt_l2cap_disconnected+0x22>
    563c:	bd10      	pop	{r4, pc}
    563e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    5640:	f7ff ff4a 	bl	54d8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5644:	b164      	cbz	r4, 5660 <bt_l2cap_disconnected+0x30>
    5646:	68a3      	ldr	r3, [r4, #8]
    5648:	b103      	cbz	r3, 564c <bt_l2cap_disconnected+0x1c>
    564a:	3b08      	subs	r3, #8
{
    564c:	4620      	mov	r0, r4
    564e:	461c      	mov	r4, r3
    5650:	e7f6      	b.n	5640 <bt_l2cap_disconnected+0x10>
    5652:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5654:	2c00      	cmp	r4, #0
    5656:	d1f2      	bne.n	563e <bt_l2cap_disconnected+0xe>
}
    5658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    565c:	f7ff bf3c 	b.w	54d8 <bt_l2cap_chan_del>
    5660:	bd10      	pop	{r4, pc}

00005662 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5662:	3104      	adds	r1, #4
    5664:	f7ff bd32 	b.w	50cc <bt_conn_create_pdu>

00005668 <bt_l2cap_send_cb>:
{
    5668:	b5f0      	push	{r4, r5, r6, r7, lr}
    566a:	4614      	mov	r4, r2
    566c:	b087      	sub	sp, #28
    566e:	461f      	mov	r7, r3
    5670:	4605      	mov	r5, r0
    5672:	460e      	mov	r6, r1
    5674:	f00f fe0a 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));
    5678:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    567a:	2200      	movs	r2, #0

	while (buf) {
    567c:	b9eb      	cbnz	r3, 56ba <bt_l2cap_send_cb+0x52>
    567e:	4b11      	ldr	r3, [pc, #68]	; (56c4 <bt_l2cap_send_cb+0x5c>)
    5680:	9305      	str	r3, [sp, #20]
    5682:	9204      	str	r2, [sp, #16]
    5684:	9001      	str	r0, [sp, #4]
    5686:	9300      	str	r3, [sp, #0]
    5688:	4a0f      	ldr	r2, [pc, #60]	; (56c8 <bt_l2cap_send_cb+0x60>)
    568a:	4b10      	ldr	r3, [pc, #64]	; (56cc <bt_l2cap_send_cb+0x64>)
    568c:	9603      	str	r6, [sp, #12]
    568e:	9502      	str	r5, [sp, #8]
    5690:	490f      	ldr	r1, [pc, #60]	; (56d0 <bt_l2cap_send_cb+0x68>)
    5692:	4810      	ldr	r0, [pc, #64]	; (56d4 <bt_l2cap_send_cb+0x6c>)
    5694:	f7fb fc7a 	bl	f8c <printk>
	hdr = net_buf_push(buf, sizeof(*hdr));
    5698:	2104      	movs	r1, #4
    569a:	f104 0008 	add.w	r0, r4, #8
    569e:	f00e fdc4 	bl	1422a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    56a2:	89a3      	ldrh	r3, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    56a4:	8046      	strh	r6, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    56a6:	3b04      	subs	r3, #4
    56a8:	8003      	strh	r3, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    56aa:	463a      	mov	r2, r7
    56ac:	4621      	mov	r1, r4
    56ae:	4628      	mov	r0, r5
}
    56b0:	b007      	add	sp, #28
    56b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    56b6:	f7fe bfa9 	b.w	460c <bt_conn_send_cb>
		bytes += buf->len;
    56ba:	8999      	ldrh	r1, [r3, #12]
		buf = buf->frags;
    56bc:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    56be:	440a      	add	r2, r1
    56c0:	e7dc      	b.n	567c <bt_l2cap_send_cb+0x14>
    56c2:	bf00      	nop
    56c4:	00015e19 	.word	0x00015e19
    56c8:	0001723a 	.word	0x0001723a
    56cc:	00017c36 	.word	0x00017c36
    56d0:	00017241 	.word	0x00017241
    56d4:	00017dc4 	.word	0x00017dc4

000056d8 <l2cap_recv>:
{
    56d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*hdr)) {
    56dc:	898b      	ldrh	r3, [r1, #12]
    56de:	4c78      	ldr	r4, [pc, #480]	; (58c0 <l2cap_recv+0x1e8>)
    56e0:	2b03      	cmp	r3, #3
{
    56e2:	b08b      	sub	sp, #44	; 0x2c
    56e4:	4681      	mov	r9, r0
    56e6:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    56e8:	d80a      	bhi.n	5700 <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
    56ea:	4b76      	ldr	r3, [pc, #472]	; (58c4 <l2cap_recv+0x1ec>)
    56ec:	4a76      	ldr	r2, [pc, #472]	; (58c8 <l2cap_recv+0x1f0>)
    56ee:	4977      	ldr	r1, [pc, #476]	; (58cc <l2cap_recv+0x1f4>)
    56f0:	4877      	ldr	r0, [pc, #476]	; (58d0 <l2cap_recv+0x1f8>)
    56f2:	9401      	str	r4, [sp, #4]
    56f4:	9400      	str	r4, [sp, #0]
		BT_ERR("Invalid ident value in L2CAP PDU");
    56f6:	f7fb fc49 	bl	f8c <printk>
}
    56fa:	b00b      	add	sp, #44	; 0x2c
    56fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5700:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5702:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5704:	f850 5f08 	ldr.w	r5, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    5708:	886f      	ldrh	r7, [r5, #2]
	net_buf_pull(buf, sizeof(*hdr));
    570a:	f00e fd96 	bl	1423a <net_buf_simple_pull>
    570e:	f00f fdbd 	bl	1528c <_impl_k_current_get>
	BT_DBG("Signaling code 0x%02x ident %u len %u", hdr->code,
    5712:	9405      	str	r4, [sp, #20]
    5714:	9704      	str	r7, [sp, #16]
    5716:	786b      	ldrb	r3, [r5, #1]
    5718:	9303      	str	r3, [sp, #12]
    571a:	782b      	ldrb	r3, [r5, #0]
    571c:	9302      	str	r3, [sp, #8]
    571e:	9001      	str	r0, [sp, #4]
    5720:	4b68      	ldr	r3, [pc, #416]	; (58c4 <l2cap_recv+0x1ec>)
    5722:	9400      	str	r4, [sp, #0]
    5724:	4a6b      	ldr	r2, [pc, #428]	; (58d4 <l2cap_recv+0x1fc>)
    5726:	4969      	ldr	r1, [pc, #420]	; (58cc <l2cap_recv+0x1f4>)
    5728:	486b      	ldr	r0, [pc, #428]	; (58d8 <l2cap_recv+0x200>)
    572a:	f7fb fc2f 	bl	f8c <printk>
	if (buf->len != len) {
    572e:	89b3      	ldrh	r3, [r6, #12]
    5730:	429f      	cmp	r7, r3
    5732:	d00a      	beq.n	574a <l2cap_recv+0x72>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    5734:	9301      	str	r3, [sp, #4]
    5736:	4a64      	ldr	r2, [pc, #400]	; (58c8 <l2cap_recv+0x1f0>)
    5738:	4b62      	ldr	r3, [pc, #392]	; (58c4 <l2cap_recv+0x1ec>)
    573a:	4964      	ldr	r1, [pc, #400]	; (58cc <l2cap_recv+0x1f4>)
    573c:	4867      	ldr	r0, [pc, #412]	; (58dc <l2cap_recv+0x204>)
    573e:	9403      	str	r4, [sp, #12]
    5740:	9702      	str	r7, [sp, #8]
    5742:	9400      	str	r4, [sp, #0]
	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
    5744:	f7fb fc22 	bl	f8c <printk>
    5748:	e7d7      	b.n	56fa <l2cap_recv+0x22>
	if (!hdr->ident) {
    574a:	f895 8001 	ldrb.w	r8, [r5, #1]
    574e:	f1b8 0f00 	cmp.w	r8, #0
    5752:	d106      	bne.n	5762 <l2cap_recv+0x8a>
		BT_ERR("Invalid ident value in L2CAP PDU");
    5754:	9401      	str	r4, [sp, #4]
    5756:	9400      	str	r4, [sp, #0]
    5758:	4b5a      	ldr	r3, [pc, #360]	; (58c4 <l2cap_recv+0x1ec>)
    575a:	4a5b      	ldr	r2, [pc, #364]	; (58c8 <l2cap_recv+0x1f0>)
    575c:	495b      	ldr	r1, [pc, #364]	; (58cc <l2cap_recv+0x1f4>)
    575e:	4860      	ldr	r0, [pc, #384]	; (58e0 <l2cap_recv+0x208>)
    5760:	e7c9      	b.n	56f6 <l2cap_recv+0x1e>
	switch (hdr->code) {
    5762:	782b      	ldrb	r3, [r5, #0]
    5764:	2b12      	cmp	r3, #18
    5766:	d035      	beq.n	57d4 <l2cap_recv+0xfc>
    5768:	2b13      	cmp	r3, #19
    576a:	d01d      	beq.n	57a8 <l2cap_recv+0xd0>
    576c:	2b01      	cmp	r3, #1
    576e:	d0c4      	beq.n	56fa <l2cap_recv+0x22>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    5770:	9402      	str	r4, [sp, #8]
	switch (hdr->code) {
    5772:	9301      	str	r3, [sp, #4]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    5774:	9400      	str	r4, [sp, #0]
    5776:	4b53      	ldr	r3, [pc, #332]	; (58c4 <l2cap_recv+0x1ec>)
    5778:	4a5a      	ldr	r2, [pc, #360]	; (58e4 <l2cap_recv+0x20c>)
    577a:	4954      	ldr	r1, [pc, #336]	; (58cc <l2cap_recv+0x1f4>)
    577c:	485a      	ldr	r0, [pc, #360]	; (58e8 <l2cap_recv+0x210>)
    577e:	f7fb fc05 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5782:	2202      	movs	r2, #2
    5784:	7869      	ldrb	r1, [r5, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    5786:	f8d9 6000 	ldr.w	r6, [r9]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    578a:	2001      	movs	r0, #1
    578c:	f7ff fe42 	bl	5414 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    5790:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5792:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    5794:	3008      	adds	r0, #8
    5796:	f00e fd31 	bl	141fc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    579a:	2300      	movs	r3, #0
    579c:	7003      	strb	r3, [r0, #0]
    579e:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    57a0:	4622      	mov	r2, r4
    57a2:	2105      	movs	r1, #5
    57a4:	4630      	mov	r0, r6
    57a6:	e032      	b.n	580e <l2cap_recv+0x136>
	if (buf->len < sizeof(*rsp)) {
    57a8:	2f01      	cmp	r7, #1
    57aa:	d806      	bhi.n	57ba <l2cap_recv+0xe2>
		BT_ERR("Too small LE conn param rsp");
    57ac:	9401      	str	r4, [sp, #4]
    57ae:	9400      	str	r4, [sp, #0]
    57b0:	4b4e      	ldr	r3, [pc, #312]	; (58ec <l2cap_recv+0x214>)
    57b2:	4a45      	ldr	r2, [pc, #276]	; (58c8 <l2cap_recv+0x1f0>)
    57b4:	4945      	ldr	r1, [pc, #276]	; (58cc <l2cap_recv+0x1f4>)
    57b6:	484e      	ldr	r0, [pc, #312]	; (58f0 <l2cap_recv+0x218>)
    57b8:	e79d      	b.n	56f6 <l2cap_recv+0x1e>
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;
    57ba:	68b5      	ldr	r5, [r6, #8]
    57bc:	f00f fd66 	bl	1528c <_impl_k_current_get>
	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
    57c0:	9403      	str	r4, [sp, #12]
    57c2:	882b      	ldrh	r3, [r5, #0]
    57c4:	9302      	str	r3, [sp, #8]
    57c6:	9001      	str	r0, [sp, #4]
    57c8:	9400      	str	r4, [sp, #0]
    57ca:	4b48      	ldr	r3, [pc, #288]	; (58ec <l2cap_recv+0x214>)
    57cc:	4a41      	ldr	r2, [pc, #260]	; (58d4 <l2cap_recv+0x1fc>)
    57ce:	493f      	ldr	r1, [pc, #252]	; (58cc <l2cap_recv+0x1f4>)
    57d0:	4848      	ldr	r0, [pc, #288]	; (58f4 <l2cap_recv+0x21c>)
    57d2:	e7b7      	b.n	5744 <l2cap_recv+0x6c>
	if (buf->len < sizeof(*req)) {
    57d4:	2f07      	cmp	r7, #7
    57d6:	d806      	bhi.n	57e6 <l2cap_recv+0x10e>
		BT_ERR("Too small LE conn update param req");
    57d8:	9401      	str	r4, [sp, #4]
    57da:	9400      	str	r4, [sp, #0]
    57dc:	4b46      	ldr	r3, [pc, #280]	; (58f8 <l2cap_recv+0x220>)
    57de:	4a3a      	ldr	r2, [pc, #232]	; (58c8 <l2cap_recv+0x1f0>)
    57e0:	493a      	ldr	r1, [pc, #232]	; (58cc <l2cap_recv+0x1f4>)
    57e2:	4846      	ldr	r0, [pc, #280]	; (58fc <l2cap_recv+0x224>)
    57e4:	e787      	b.n	56f6 <l2cap_recv+0x1e>
    57e6:	f8d9 5000 	ldr.w	r5, [r9]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    57ea:	78ef      	ldrb	r7, [r5, #3]
    57ec:	b197      	cbz	r7, 5814 <l2cap_recv+0x13c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    57ee:	2202      	movs	r2, #2
    57f0:	4641      	mov	r1, r8
    57f2:	2001      	movs	r0, #1
    57f4:	f7ff fe0e 	bl	5414 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    57f8:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    57fa:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    57fc:	3008      	adds	r0, #8
    57fe:	f00e fcfd 	bl	141fc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    5802:	2300      	movs	r3, #0
    5804:	7003      	strb	r3, [r0, #0]
    5806:	7043      	strb	r3, [r0, #1]
    5808:	4622      	mov	r2, r4
    580a:	2105      	movs	r1, #5
    580c:	4628      	mov	r0, r5
    580e:	f7ff ff2b 	bl	5668 <bt_l2cap_send_cb>
    5812:	e772      	b.n	56fa <l2cap_recv+0x22>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    5814:	68b3      	ldr	r3, [r6, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    5816:	7859      	ldrb	r1, [r3, #1]
    5818:	781a      	ldrb	r2, [r3, #0]
    581a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    581e:	f8ad 2020 	strh.w	r2, [sp, #32]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    5822:	78d9      	ldrb	r1, [r3, #3]
    5824:	789a      	ldrb	r2, [r3, #2]
    5826:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    582a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	param.latency = sys_le16_to_cpu(req->latency);
    582e:	7959      	ldrb	r1, [r3, #5]
    5830:	791a      	ldrb	r2, [r3, #4]
    5832:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5836:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	param.timeout = sys_le16_to_cpu(req->timeout);
    583a:	799a      	ldrb	r2, [r3, #6]
    583c:	79db      	ldrb	r3, [r3, #7]
    583e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    5842:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    5846:	f00f fd21 	bl	1528c <_impl_k_current_get>
	BT_DBG("min 0x%04x max 0x%04x latency: 0x%04x timeout: 0x%04x",
    584a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    584e:	9305      	str	r3, [sp, #20]
    5850:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    5854:	9304      	str	r3, [sp, #16]
    5856:	ae0a      	add	r6, sp, #40	; 0x28
    5858:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    585c:	9406      	str	r4, [sp, #24]
    585e:	9303      	str	r3, [sp, #12]
    5860:	f836 3d08 	ldrh.w	r3, [r6, #-8]!
    5864:	9302      	str	r3, [sp, #8]
    5866:	9001      	str	r0, [sp, #4]
    5868:	4b23      	ldr	r3, [pc, #140]	; (58f8 <l2cap_recv+0x220>)
    586a:	9400      	str	r4, [sp, #0]
    586c:	4a19      	ldr	r2, [pc, #100]	; (58d4 <l2cap_recv+0x1fc>)
    586e:	4917      	ldr	r1, [pc, #92]	; (58cc <l2cap_recv+0x1f4>)
    5870:	4823      	ldr	r0, [pc, #140]	; (5900 <l2cap_recv+0x228>)
    5872:	f7fb fb8b 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5876:	4641      	mov	r1, r8
    5878:	2202      	movs	r2, #2
    587a:	2013      	movs	r0, #19
    587c:	f7ff fdca 	bl	5414 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    5880:	4631      	mov	r1, r6
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5882:	4680      	mov	r8, r0
	accepted = le_param_req(conn, &param);
    5884:	4628      	mov	r0, r5
    5886:	f7fe fda7 	bl	43d8 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    588a:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    588c:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    588e:	f108 0008 	add.w	r0, r8, #8
    5892:	f00e fcb3 	bl	141fc <net_buf_simple_add>
	if (accepted) {
    5896:	b17c      	cbz	r4, 58b8 <l2cap_recv+0x1e0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    5898:	7007      	strb	r7, [r0, #0]
    589a:	7047      	strb	r7, [r0, #1]
    589c:	2300      	movs	r3, #0
    589e:	4642      	mov	r2, r8
    58a0:	2105      	movs	r1, #5
    58a2:	4628      	mov	r0, r5
    58a4:	f7ff fee0 	bl	5668 <bt_l2cap_send_cb>
	if (accepted) {
    58a8:	2c00      	cmp	r4, #0
    58aa:	f43f af26 	beq.w	56fa <l2cap_recv+0x22>
		bt_conn_le_conn_update(conn, &param);
    58ae:	4631      	mov	r1, r6
    58b0:	4628      	mov	r0, r5
    58b2:	f7ff fb66 	bl	4f82 <bt_conn_le_conn_update>
    58b6:	e720      	b.n	56fa <l2cap_recv+0x22>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    58b8:	2301      	movs	r3, #1
    58ba:	7003      	strb	r3, [r0, #0]
    58bc:	7044      	strb	r4, [r0, #1]
    58be:	e7ed      	b.n	589c <l2cap_recv+0x1c4>
    58c0:	00015e19 	.word	0x00015e19
    58c4:	00017c72 	.word	0x00017c72
    58c8:	000171f2 	.word	0x000171f2
    58cc:	00017241 	.word	0x00017241
    58d0:	00017e74 	.word	0x00017e74
    58d4:	0001723a 	.word	0x0001723a
    58d8:	00017ea2 	.word	0x00017ea2
    58dc:	00017edd 	.word	0x00017edd
    58e0:	00017f0e 	.word	0x00017f0e
    58e4:	0001727c 	.word	0x0001727c
    58e8:	0001801a 	.word	0x0001801a
    58ec:	00017c47 	.word	0x00017c47
    58f0:	00017f3f 	.word	0x00017f3f
    58f4:	00017f6b 	.word	0x00017f6b
    58f8:	00017c59 	.word	0x00017c59
    58fc:	00017f9c 	.word	0x00017f9c
    5900:	00017fcf 	.word	0x00017fcf

00005904 <bt_l2cap_le_lookup_tx_cid>:
{
    5904:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5906:	b100      	cbz	r0, 590a <bt_l2cap_le_lookup_tx_cid+0x6>
    5908:	3808      	subs	r0, #8
    590a:	b900      	cbnz	r0, 590e <bt_l2cap_le_lookup_tx_cid+0xa>
}
    590c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    590e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    5912:	428b      	cmp	r3, r1
    5914:	d0fa      	beq.n	590c <bt_l2cap_le_lookup_tx_cid+0x8>
    5916:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5918:	2000      	movs	r0, #0
    591a:	2b00      	cmp	r3, #0
    591c:	d0f6      	beq.n	590c <bt_l2cap_le_lookup_tx_cid+0x8>
    591e:	f1a3 0008 	sub.w	r0, r3, #8
    5922:	e7f2      	b.n	590a <bt_l2cap_le_lookup_tx_cid+0x6>

00005924 <bt_l2cap_le_lookup_rx_cid>:
{
    5924:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5926:	b100      	cbz	r0, 592a <bt_l2cap_le_lookup_rx_cid+0x6>
    5928:	3808      	subs	r0, #8
    592a:	b900      	cbnz	r0, 592e <bt_l2cap_le_lookup_rx_cid+0xa>
}
    592c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    592e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    5930:	428b      	cmp	r3, r1
    5932:	d0fb      	beq.n	592c <bt_l2cap_le_lookup_rx_cid+0x8>
    5934:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5936:	2000      	movs	r0, #0
    5938:	2b00      	cmp	r3, #0
    593a:	d0f7      	beq.n	592c <bt_l2cap_le_lookup_rx_cid+0x8>
    593c:	f1a3 0008 	sub.w	r0, r3, #8
    5940:	e7f3      	b.n	592a <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00005944 <bt_l2cap_recv>:
{
    5944:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5946:	898b      	ldrh	r3, [r1, #12]
    5948:	4d26      	ldr	r5, [pc, #152]	; (59e4 <bt_l2cap_recv+0xa0>)
    594a:	2b03      	cmp	r3, #3
{
    594c:	b087      	sub	sp, #28
    594e:	4606      	mov	r6, r0
    5950:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    5952:	d80d      	bhi.n	5970 <bt_l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP PDU received");
    5954:	9501      	str	r5, [sp, #4]
    5956:	9500      	str	r5, [sp, #0]
    5958:	4b23      	ldr	r3, [pc, #140]	; (59e8 <bt_l2cap_recv+0xa4>)
    595a:	4a24      	ldr	r2, [pc, #144]	; (59ec <bt_l2cap_recv+0xa8>)
    595c:	4924      	ldr	r1, [pc, #144]	; (59f0 <bt_l2cap_recv+0xac>)
    595e:	4825      	ldr	r0, [pc, #148]	; (59f4 <bt_l2cap_recv+0xb0>)
    5960:	f7fb fb14 	bl	f8c <printk>
	net_buf_unref(buf);
    5964:	4620      	mov	r0, r4
}
    5966:	b007      	add	sp, #28
    5968:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	net_buf_unref(buf);
    596c:	f00e bc14 	b.w	14198 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    5970:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5972:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    5974:	f850 3f08 	ldr.w	r3, [r0, #8]!
    5978:	885f      	ldrh	r7, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    597a:	f00e fc5e 	bl	1423a <net_buf_simple_pull>
    597e:	f00f fc85 	bl	1528c <_impl_k_current_get>
	BT_DBG("Packet for CID %u len %u", cid, buf->len);
    5982:	89a3      	ldrh	r3, [r4, #12]
    5984:	9303      	str	r3, [sp, #12]
    5986:	9001      	str	r0, [sp, #4]
    5988:	4b17      	ldr	r3, [pc, #92]	; (59e8 <bt_l2cap_recv+0xa4>)
    598a:	4a1b      	ldr	r2, [pc, #108]	; (59f8 <bt_l2cap_recv+0xb4>)
    598c:	4918      	ldr	r1, [pc, #96]	; (59f0 <bt_l2cap_recv+0xac>)
    598e:	9504      	str	r5, [sp, #16]
    5990:	9702      	str	r7, [sp, #8]
    5992:	9500      	str	r5, [sp, #0]
    5994:	4819      	ldr	r0, [pc, #100]	; (59fc <bt_l2cap_recv+0xb8>)
    5996:	f7fb faf9 	bl	f8c <printk>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    599a:	4630      	mov	r0, r6
    599c:	4639      	mov	r1, r7
    599e:	f7ff ffc1 	bl	5924 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    59a2:	4606      	mov	r6, r0
    59a4:	b948      	cbnz	r0, 59ba <bt_l2cap_recv+0x76>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    59a6:	9502      	str	r5, [sp, #8]
    59a8:	e88d 00a0 	stmia.w	sp, {r5, r7}
    59ac:	4b0e      	ldr	r3, [pc, #56]	; (59e8 <bt_l2cap_recv+0xa4>)
    59ae:	4a14      	ldr	r2, [pc, #80]	; (5a00 <bt_l2cap_recv+0xbc>)
    59b0:	490f      	ldr	r1, [pc, #60]	; (59f0 <bt_l2cap_recv+0xac>)
    59b2:	4814      	ldr	r0, [pc, #80]	; (5a04 <bt_l2cap_recv+0xc0>)
    59b4:	f7fb faea 	bl	f8c <printk>
    59b8:	e7d4      	b.n	5964 <bt_l2cap_recv+0x20>
    59ba:	f00f fc67 	bl	1528c <_impl_k_current_get>
	BT_DBG("chan %p len %u", chan, buf->len);
    59be:	89a3      	ldrh	r3, [r4, #12]
    59c0:	9303      	str	r3, [sp, #12]
    59c2:	9001      	str	r0, [sp, #4]
    59c4:	9504      	str	r5, [sp, #16]
    59c6:	9602      	str	r6, [sp, #8]
    59c8:	9500      	str	r5, [sp, #0]
    59ca:	4b0f      	ldr	r3, [pc, #60]	; (5a08 <bt_l2cap_recv+0xc4>)
    59cc:	4a0a      	ldr	r2, [pc, #40]	; (59f8 <bt_l2cap_recv+0xb4>)
    59ce:	4908      	ldr	r1, [pc, #32]	; (59f0 <bt_l2cap_recv+0xac>)
    59d0:	480e      	ldr	r0, [pc, #56]	; (5a0c <bt_l2cap_recv+0xc8>)
    59d2:	f7fb fadb 	bl	f8c <printk>
	chan->ops->recv(chan, buf);
    59d6:	6873      	ldr	r3, [r6, #4]
    59d8:	4621      	mov	r1, r4
    59da:	691b      	ldr	r3, [r3, #16]
    59dc:	4630      	mov	r0, r6
    59de:	4798      	blx	r3
    59e0:	e7c0      	b.n	5964 <bt_l2cap_recv+0x20>
    59e2:	bf00      	nop
    59e4:	00015e19 	.word	0x00015e19
    59e8:	00017c8d 	.word	0x00017c8d
    59ec:	000171f2 	.word	0x000171f2
    59f0:	00017241 	.word	0x00017241
    59f4:	00017d10 	.word	0x00017d10
    59f8:	0001723a 	.word	0x0001723a
    59fc:	00017d3d 	.word	0x00017d3d
    5a00:	0001727c 	.word	0x0001727c
    5a04:	00017d6b 	.word	0x00017d6b
    5a08:	00017c7d 	.word	0x00017c7d
    5a0c:	00017da0 	.word	0x00017da0

00005a10 <bt_l2cap_update_conn_param>:
{
    5a10:	b570      	push	{r4, r5, r6, lr}
	ident++;
    5a12:	4b12      	ldr	r3, [pc, #72]	; (5a5c <bt_l2cap_update_conn_param+0x4c>)
    5a14:	781a      	ldrb	r2, [r3, #0]
    5a16:	3201      	adds	r2, #1
	if (!ident) {
    5a18:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    5a1c:	bf08      	it	eq
    5a1e:	2201      	moveq	r2, #1
    5a20:	701a      	strb	r2, [r3, #0]
{
    5a22:	460c      	mov	r4, r1
    5a24:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5a26:	7819      	ldrb	r1, [r3, #0]
    5a28:	2208      	movs	r2, #8
    5a2a:	2012      	movs	r0, #18
    5a2c:	f7ff fcf2 	bl	5414 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5a30:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5a32:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5a34:	4408      	add	r0, r1
    5a36:	f00e fbe1 	bl	141fc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    5a3a:	8823      	ldrh	r3, [r4, #0]
    5a3c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    5a3e:	8863      	ldrh	r3, [r4, #2]
    5a40:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    5a42:	88a3      	ldrh	r3, [r4, #4]
    5a44:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5a46:	88e3      	ldrh	r3, [r4, #6]
    5a48:	80c3      	strh	r3, [r0, #6]
    5a4a:	4632      	mov	r2, r6
    5a4c:	4628      	mov	r0, r5
    5a4e:	2300      	movs	r3, #0
    5a50:	2105      	movs	r1, #5
    5a52:	f7ff fe09 	bl	5668 <bt_l2cap_send_cb>
}
    5a56:	2000      	movs	r0, #0
    5a58:	bd70      	pop	{r4, r5, r6, pc}
    5a5a:	bf00      	nop
    5a5c:	200004b8 	.word	0x200004b8

00005a60 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5a60:	4801      	ldr	r0, [pc, #4]	; (5a68 <bt_l2cap_init+0x8>)
    5a62:	f7ff bce9 	b.w	5438 <bt_l2cap_le_fixed_chan_register>
    5a66:	bf00      	nop
    5a68:	20003bc0 	.word	0x20003bc0

00005a6c <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5a6c:	2006      	movs	r0, #6
    5a6e:	4770      	bx	lr

00005a70 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    5a70:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    5a72:	4a0a      	ldr	r2, [pc, #40]	; (5a9c <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5a74:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    5a76:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    5a7a:	4284      	cmp	r4, r0
    5a7c:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    5a80:	d102      	bne.n	5a88 <att_op_get_type+0x18>
			return handlers[i].type;
    5a82:	440a      	add	r2, r1
    5a84:	7890      	ldrb	r0, [r2, #2]
    5a86:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5a88:	3301      	adds	r3, #1
    5a8a:	2b1b      	cmp	r3, #27
    5a8c:	d1f3      	bne.n	5a76 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    5a8e:	f010 0f40 	tst.w	r0, #64	; 0x40
    5a92:	bf14      	ite	ne
    5a94:	2000      	movne	r0, #0
    5a96:	2006      	moveq	r0, #6
}
    5a98:	bd10      	pop	{r4, pc}
    5a9a:	bf00      	nop
    5a9c:	000188d8 	.word	0x000188d8

00005aa0 <err_to_att>:
{
    5aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5aa2:	4604      	mov	r4, r0
    5aa4:	f00f fbf2 	bl	1528c <_impl_k_current_get>
	BT_DBG("%d", err);
    5aa8:	4b09      	ldr	r3, [pc, #36]	; (5ad0 <err_to_att+0x30>)
    5aaa:	9303      	str	r3, [sp, #12]
    5aac:	9001      	str	r0, [sp, #4]
    5aae:	9300      	str	r3, [sp, #0]
    5ab0:	9402      	str	r4, [sp, #8]
    5ab2:	4b08      	ldr	r3, [pc, #32]	; (5ad4 <err_to_att+0x34>)
    5ab4:	4a08      	ldr	r2, [pc, #32]	; (5ad8 <err_to_att+0x38>)
    5ab6:	4909      	ldr	r1, [pc, #36]	; (5adc <err_to_att+0x3c>)
    5ab8:	4809      	ldr	r0, [pc, #36]	; (5ae0 <err_to_att+0x40>)
    5aba:	f7fb fa67 	bl	f8c <printk>
	if (err < 0 && err >= -0xff) {
    5abe:	f104 03ff 	add.w	r3, r4, #255	; 0xff
    5ac2:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5ac4:	bf9a      	itte	ls
    5ac6:	4260      	negls	r0, r4
    5ac8:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5aca:	200e      	movhi	r0, #14
}
    5acc:	b004      	add	sp, #16
    5ace:	bd10      	pop	{r4, pc}
    5ad0:	00015e19 	.word	0x00015e19
    5ad4:	0001813e 	.word	0x0001813e
    5ad8:	0001723a 	.word	0x0001723a
    5adc:	00017241 	.word	0x00017241
    5ae0:	000188c0 	.word	0x000188c0

00005ae4 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ae8:	b086      	sub	sp, #24
    5aea:	4607      	mov	r7, r0
    5aec:	4688      	mov	r8, r1
#if defined(CONFIG_BT_SMP)
		.encrypt_change = bt_att_encrypt_change,
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    5aee:	4e18      	ldr	r6, [pc, #96]	; (5b50 <bt_att_accept+0x6c>)

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    5af0:	4d18      	ldr	r5, [pc, #96]	; (5b54 <bt_att_accept+0x70>)
    5af2:	f00f fbcb 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p handle %u", conn, conn->handle);
    5af6:	9604      	str	r6, [sp, #16]
    5af8:	883b      	ldrh	r3, [r7, #0]
    5afa:	9303      	str	r3, [sp, #12]
    5afc:	9001      	str	r0, [sp, #4]
    5afe:	9702      	str	r7, [sp, #8]
    5b00:	9600      	str	r6, [sp, #0]
    5b02:	4b15      	ldr	r3, [pc, #84]	; (5b58 <bt_att_accept+0x74>)
    5b04:	4a15      	ldr	r2, [pc, #84]	; (5b5c <bt_att_accept+0x78>)
    5b06:	4916      	ldr	r1, [pc, #88]	; (5b60 <bt_att_accept+0x7c>)
    5b08:	4816      	ldr	r0, [pc, #88]	; (5b64 <bt_att_accept+0x80>)
    5b0a:	f7fb fa3f 	bl	f8c <printk>
		if (att->chan.chan.conn) {
    5b0e:	682c      	ldr	r4, [r5, #0]
    5b10:	b994      	cbnz	r4, 5b38 <bt_att_accept+0x54>
			continue;
		}

		memset(att, 0, sizeof(*att));
    5b12:	22e4      	movs	r2, #228	; 0xe4
    5b14:	4621      	mov	r1, r4
    5b16:	4628      	mov	r0, r5
    5b18:	f7fc f89c 	bl	1c54 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    5b1c:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    5b1e:	4b12      	ldr	r3, [pc, #72]	; (5b68 <bt_att_accept+0x84>)
    5b20:	606b      	str	r3, [r5, #4]
    5b22:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    5b26:	4611      	mov	r1, r2
    5b28:	f00f fbb6 	bl	15298 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    5b2c:	f8c8 5000 	str.w	r5, [r8]

		return 0;
    5b30:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    5b32:	b006      	add	sp, #24
    5b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    5b38:	9602      	str	r6, [sp, #8]
    5b3a:	e88d 00c0 	stmia.w	sp, {r6, r7}
    5b3e:	4b06      	ldr	r3, [pc, #24]	; (5b58 <bt_att_accept+0x74>)
    5b40:	4a0a      	ldr	r2, [pc, #40]	; (5b6c <bt_att_accept+0x88>)
    5b42:	4907      	ldr	r1, [pc, #28]	; (5b60 <bt_att_accept+0x7c>)
    5b44:	480a      	ldr	r0, [pc, #40]	; (5b70 <bt_att_accept+0x8c>)
    5b46:	f7fb fa21 	bl	f8c <printk>
	return -ENOMEM;
    5b4a:	f06f 000b 	mvn.w	r0, #11
    5b4e:	e7f0      	b.n	5b32 <bt_att_accept+0x4e>
    5b50:	00015e19 	.word	0x00015e19
    5b54:	200004c4 	.word	0x200004c4
    5b58:	00018367 	.word	0x00018367
    5b5c:	0001723a 	.word	0x0001723a
    5b60:	00017241 	.word	0x00017241
    5b64:	00017df0 	.word	0x00017df0
    5b68:	20003bec 	.word	0x20003bec
    5b6c:	000171f2 	.word	0x000171f2
    5b70:	000186d2 	.word	0x000186d2

00005b74 <att_req_destroy>:
{
    5b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5b76:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    5b78:	f00f fb88 	bl	1528c <_impl_k_current_get>
	BT_DBG("req %p", req);
    5b7c:	4b0d      	ldr	r3, [pc, #52]	; (5bb4 <att_req_destroy+0x40>)
    5b7e:	9303      	str	r3, [sp, #12]
    5b80:	9001      	str	r0, [sp, #4]
    5b82:	9300      	str	r3, [sp, #0]
    5b84:	9402      	str	r4, [sp, #8]
    5b86:	4b0c      	ldr	r3, [pc, #48]	; (5bb8 <att_req_destroy+0x44>)
    5b88:	4a0c      	ldr	r2, [pc, #48]	; (5bbc <att_req_destroy+0x48>)
    5b8a:	490d      	ldr	r1, [pc, #52]	; (5bc0 <att_req_destroy+0x4c>)
    5b8c:	480d      	ldr	r0, [pc, #52]	; (5bc4 <att_req_destroy+0x50>)
    5b8e:	f7fb f9fd 	bl	f8c <printk>
	if (req->buf) {
    5b92:	6920      	ldr	r0, [r4, #16]
    5b94:	b108      	cbz	r0, 5b9a <att_req_destroy+0x26>
		net_buf_unref(req->buf);
    5b96:	f00e faff 	bl	14198 <net_buf_unref>
	if (req->destroy) {
    5b9a:	68a3      	ldr	r3, [r4, #8]
    5b9c:	b10b      	cbz	r3, 5ba2 <att_req_destroy+0x2e>
		req->destroy(req);
    5b9e:	4620      	mov	r0, r4
    5ba0:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5ba2:	2214      	movs	r2, #20
    5ba4:	2100      	movs	r1, #0
    5ba6:	4620      	mov	r0, r4
}
    5ba8:	b004      	add	sp, #16
    5baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5bae:	f7fc b851 	b.w	1c54 <memset>
    5bb2:	bf00      	nop
    5bb4:	00015e19 	.word	0x00015e19
    5bb8:	0001807c 	.word	0x0001807c
    5bbc:	0001723a 	.word	0x0001723a
    5bc0:	00017241 	.word	0x00017241
    5bc4:	00018628 	.word	0x00018628

00005bc8 <att_notify>:
{
    5bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	handle = net_buf_pull_le16(buf);
    5bca:	f101 0008 	add.w	r0, r1, #8
    5bce:	f00e fb44 	bl	1425a <net_buf_simple_pull_le16>
    5bd2:	4604      	mov	r4, r0
    5bd4:	f00f fb5a 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", handle);
    5bd8:	4b06      	ldr	r3, [pc, #24]	; (5bf4 <att_notify+0x2c>)
    5bda:	9303      	str	r3, [sp, #12]
    5bdc:	9001      	str	r0, [sp, #4]
    5bde:	9300      	str	r3, [sp, #0]
    5be0:	9402      	str	r4, [sp, #8]
    5be2:	4b05      	ldr	r3, [pc, #20]	; (5bf8 <att_notify+0x30>)
    5be4:	4a05      	ldr	r2, [pc, #20]	; (5bfc <att_notify+0x34>)
    5be6:	4906      	ldr	r1, [pc, #24]	; (5c00 <att_notify+0x38>)
    5be8:	4806      	ldr	r0, [pc, #24]	; (5c04 <att_notify+0x3c>)
    5bea:	f7fb f9cf 	bl	f8c <printk>
}
    5bee:	2000      	movs	r0, #0
    5bf0:	b004      	add	sp, #16
    5bf2:	bd10      	pop	{r4, pc}
    5bf4:	00015e19 	.word	0x00015e19
    5bf8:	000182e7 	.word	0x000182e7
    5bfc:	0001723a 	.word	0x0001723a
    5c00:	00017241 	.word	0x00017241
    5c04:	0001857a 	.word	0x0001857a

00005c08 <read_group_cb>:
{
    5c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5c0c:	680d      	ldr	r5, [r1, #0]
{
    5c0e:	b086      	sub	sp, #24
    5c10:	4606      	mov	r6, r0
    5c12:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5c14:	f04f 0800 	mov.w	r8, #0
    5c18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5c1c:	a904      	add	r1, sp, #16
    5c1e:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5c20:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5c22:	f88d 8010 	strb.w	r8, [sp, #16]
    5c26:	f8ad 3012 	strh.w	r3, [sp, #18]
    5c2a:	f7fc f965 	bl	1ef8 <bt_uuid_cmp>
    5c2e:	b198      	cbz	r0, 5c58 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5c30:	f642 0301 	movw	r3, #10241	; 0x2801
    5c34:	a905      	add	r1, sp, #20
    5c36:	6830      	ldr	r0, [r6, #0]
    5c38:	f88d 8014 	strb.w	r8, [sp, #20]
    5c3c:	f8ad 3016 	strh.w	r3, [sp, #22]
    5c40:	f7fc f95a 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5c44:	b140      	cbz	r0, 5c58 <read_group_cb+0x50>
		if (data->group && attr->handle > data->group->end_handle) {
    5c46:	6923      	ldr	r3, [r4, #16]
    5c48:	b123      	cbz	r3, 5c54 <read_group_cb+0x4c>
    5c4a:	8a32      	ldrh	r2, [r6, #16]
    5c4c:	8859      	ldrh	r1, [r3, #2]
    5c4e:	4291      	cmp	r1, r2
    5c50:	d200      	bcs.n	5c54 <read_group_cb+0x4c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5c52:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5c54:	2001      	movs	r0, #1
    5c56:	e020      	b.n	5c9a <read_group_cb+0x92>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5c58:	6861      	ldr	r1, [r4, #4]
    5c5a:	6830      	ldr	r0, [r6, #0]
    5c5c:	f7fc f94c 	bl	1ef8 <bt_uuid_cmp>
    5c60:	b110      	cbz	r0, 5c68 <read_group_cb+0x60>
		data->group = NULL;
    5c62:	2300      	movs	r3, #0
    5c64:	6123      	str	r3, [r4, #16]
    5c66:	e7f5      	b.n	5c54 <read_group_cb+0x4c>
    5c68:	f00f fb10 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", attr->handle);
    5c6c:	4b21      	ldr	r3, [pc, #132]	; (5cf4 <read_group_cb+0xec>)
    5c6e:	8a32      	ldrh	r2, [r6, #16]
    5c70:	9303      	str	r3, [sp, #12]
    5c72:	9202      	str	r2, [sp, #8]
    5c74:	9001      	str	r0, [sp, #4]
    5c76:	9300      	str	r3, [sp, #0]
    5c78:	4a1f      	ldr	r2, [pc, #124]	; (5cf8 <read_group_cb+0xf0>)
    5c7a:	4b20      	ldr	r3, [pc, #128]	; (5cfc <read_group_cb+0xf4>)
    5c7c:	4920      	ldr	r1, [pc, #128]	; (5d00 <read_group_cb+0xf8>)
    5c7e:	4821      	ldr	r0, [pc, #132]	; (5d04 <read_group_cb+0xfc>)
    5c80:	f7fb f984 	bl	f8c <printk>
	if (data->rsp->len &&
    5c84:	68e3      	ldr	r3, [r4, #12]
    5c86:	68a0      	ldr	r0, [r4, #8]
    5c88:	781a      	ldrb	r2, [r3, #0]
    5c8a:	b14a      	cbz	r2, 5ca0 <read_group_cb+0x98>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5c8c:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5c90:	8981      	ldrh	r1, [r0, #12]
    5c92:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5c94:	4293      	cmp	r3, r2
    5c96:	da03      	bge.n	5ca0 <read_group_cb+0x98>
		return BT_GATT_ITER_STOP;
    5c98:	2000      	movs	r0, #0
}
    5c9a:	b006      	add	sp, #24
    5c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5ca0:	2104      	movs	r1, #4
    5ca2:	3008      	adds	r0, #8
    5ca4:	f00e faaa 	bl	141fc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5ca8:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5caa:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5cac:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5cae:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5cb0:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5cb2:	898a      	ldrh	r2, [r1, #12]
    5cb4:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5cb8:	6889      	ldr	r1, [r1, #8]
    5cba:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5cbe:	1a9b      	subs	r3, r3, r2
    5cc0:	2500      	movs	r5, #0
    5cc2:	440a      	add	r2, r1
    5cc4:	9500      	str	r5, [sp, #0]
    5cc6:	4631      	mov	r1, r6
    5cc8:	b29b      	uxth	r3, r3
    5cca:	4638      	mov	r0, r7
    5ccc:	47c0      	blx	r8
	if (read < 0) {
    5cce:	1e01      	subs	r1, r0, #0
    5cd0:	dbe2      	blt.n	5c98 <read_group_cb+0x90>
	if (!data->rsp->len) {
    5cd2:	68e0      	ldr	r0, [r4, #12]
    5cd4:	7802      	ldrb	r2, [r0, #0]
    5cd6:	1d0b      	adds	r3, r1, #4
    5cd8:	b92a      	cbnz	r2, 5ce6 <read_group_cb+0xde>
		data->rsp->len = read + sizeof(*data->group);
    5cda:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5cdc:	68a0      	ldr	r0, [r4, #8]
    5cde:	3008      	adds	r0, #8
    5ce0:	f00e fa8c 	bl	141fc <net_buf_simple_add>
    5ce4:	e7b6      	b.n	5c54 <read_group_cb+0x4c>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5ce6:	429a      	cmp	r2, r3
    5ce8:	d0f8      	beq.n	5cdc <read_group_cb+0xd4>
		data->buf->len -= sizeof(*data->group);
    5cea:	68a2      	ldr	r2, [r4, #8]
    5cec:	8993      	ldrh	r3, [r2, #12]
    5cee:	3b04      	subs	r3, #4
    5cf0:	8193      	strh	r3, [r2, #12]
    5cf2:	e7d1      	b.n	5c98 <read_group_cb+0x90>
    5cf4:	00015e19 	.word	0x00015e19
    5cf8:	0001723a 	.word	0x0001723a
    5cfc:	000181a1 	.word	0x000181a1
    5d00:	00017241 	.word	0x00017241
    5d04:	0001857a 	.word	0x0001857a

00005d08 <find_info_cb>:
{
    5d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5d0a:	460c      	mov	r4, r1
    5d0c:	4605      	mov	r5, r0
	struct bt_att *att = data->att;
    5d0e:	680e      	ldr	r6, [r1, #0]
    5d10:	f00f fabc 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", attr->handle);
    5d14:	4b2a      	ldr	r3, [pc, #168]	; (5dc0 <find_info_cb+0xb8>)
    5d16:	8a2a      	ldrh	r2, [r5, #16]
    5d18:	9303      	str	r3, [sp, #12]
    5d1a:	9202      	str	r2, [sp, #8]
    5d1c:	9001      	str	r0, [sp, #4]
    5d1e:	9300      	str	r3, [sp, #0]
    5d20:	4a28      	ldr	r2, [pc, #160]	; (5dc4 <find_info_cb+0xbc>)
    5d22:	4b29      	ldr	r3, [pc, #164]	; (5dc8 <find_info_cb+0xc0>)
    5d24:	4929      	ldr	r1, [pc, #164]	; (5dcc <find_info_cb+0xc4>)
    5d26:	482a      	ldr	r0, [pc, #168]	; (5dd0 <find_info_cb+0xc8>)
    5d28:	f7fb f930 	bl	f8c <printk>
	if (!data->rsp) {
    5d2c:	68a3      	ldr	r3, [r4, #8]
    5d2e:	b963      	cbnz	r3, 5d4a <find_info_cb+0x42>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5d30:	6860      	ldr	r0, [r4, #4]
    5d32:	2101      	movs	r1, #1
    5d34:	3008      	adds	r0, #8
    5d36:	f00e fa61 	bl	141fc <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5d3a:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5d3c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5d3e:	781b      	ldrb	r3, [r3, #0]
    5d40:	2b00      	cmp	r3, #0
    5d42:	bf0c      	ite	eq
    5d44:	2301      	moveq	r3, #1
    5d46:	2302      	movne	r3, #2
    5d48:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5d4a:	68a3      	ldr	r3, [r4, #8]
    5d4c:	781b      	ldrb	r3, [r3, #0]
    5d4e:	2b01      	cmp	r3, #1
    5d50:	d003      	beq.n	5d5a <find_info_cb+0x52>
    5d52:	2b02      	cmp	r3, #2
    5d54:	d01b      	beq.n	5d8e <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
    5d56:	2000      	movs	r0, #0
    5d58:	e017      	b.n	5d8a <find_info_cb+0x82>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5d5a:	682b      	ldr	r3, [r5, #0]
    5d5c:	781b      	ldrb	r3, [r3, #0]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d1f9      	bne.n	5d56 <find_info_cb+0x4e>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5d62:	6860      	ldr	r0, [r4, #4]
    5d64:	2104      	movs	r1, #4
    5d66:	3008      	adds	r0, #8
    5d68:	f00e fa48 	bl	141fc <net_buf_simple_add>
    5d6c:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5d6e:	8a2b      	ldrh	r3, [r5, #16]
    5d70:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5d72:	682b      	ldr	r3, [r5, #0]
    5d74:	885b      	ldrh	r3, [r3, #2]
    5d76:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5d78:	6863      	ldr	r3, [r4, #4]
    5d7a:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5d7e:	899b      	ldrh	r3, [r3, #12]
    5d80:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5d82:	2804      	cmp	r0, #4
    5d84:	bf94      	ite	ls
    5d86:	2000      	movls	r0, #0
    5d88:	2001      	movhi	r0, #1
}
    5d8a:	b004      	add	sp, #16
    5d8c:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5d8e:	682b      	ldr	r3, [r5, #0]
    5d90:	781b      	ldrb	r3, [r3, #0]
    5d92:	2b02      	cmp	r3, #2
    5d94:	d1df      	bne.n	5d56 <find_info_cb+0x4e>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5d96:	6860      	ldr	r0, [r4, #4]
    5d98:	2112      	movs	r1, #18
    5d9a:	3008      	adds	r0, #8
    5d9c:	f00e fa2e 	bl	141fc <net_buf_simple_add>
    5da0:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5da2:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5da4:	8a2b      	ldrh	r3, [r5, #16]
    5da6:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5daa:	2210      	movs	r2, #16
    5dac:	3101      	adds	r1, #1
    5dae:	f7fb ff25 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5db2:	6863      	ldr	r3, [r4, #4]
    5db4:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5db8:	899b      	ldrh	r3, [r3, #12]
    5dba:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5dbc:	2812      	cmp	r0, #18
    5dbe:	e7e1      	b.n	5d84 <find_info_cb+0x7c>
    5dc0:	00015e19 	.word	0x00015e19
    5dc4:	0001723a 	.word	0x0001723a
    5dc8:	00018100 	.word	0x00018100
    5dcc:	00017241 	.word	0x00017241
    5dd0:	0001857a 	.word	0x0001857a

00005dd4 <find_type_cb>:
{
    5dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5dd8:	680f      	ldr	r7, [r1, #0]
{
    5dda:	b08a      	sub	sp, #40	; 0x28
    5ddc:	4606      	mov	r6, r0
    5dde:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5de0:	2400      	movs	r4, #0
    5de2:	f642 0301 	movw	r3, #10241	; 0x2801
    5de6:	a904      	add	r1, sp, #16
    5de8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5dea:	f8d7 8000 	ldr.w	r8, [r7]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5dee:	f88d 4010 	strb.w	r4, [sp, #16]
    5df2:	f8ad 3012 	strh.w	r3, [sp, #18]
    5df6:	f7fc f87f 	bl	1ef8 <bt_uuid_cmp>
    5dfa:	b928      	cbnz	r0, 5e08 <find_type_cb+0x34>
		data->group = NULL;
    5dfc:	2300      	movs	r3, #0
    5dfe:	60ab      	str	r3, [r5, #8]
		return BT_GATT_ITER_CONTINUE;
    5e00:	2001      	movs	r0, #1
}
    5e02:	b00a      	add	sp, #40	; 0x28
    5e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5e08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5e0c:	a905      	add	r1, sp, #20
    5e0e:	6830      	ldr	r0, [r6, #0]
    5e10:	f88d 4014 	strb.w	r4, [sp, #20]
    5e14:	f8ad 3016 	strh.w	r3, [sp, #22]
    5e18:	f7fc f86e 	bl	1ef8 <bt_uuid_cmp>
    5e1c:	4604      	mov	r4, r0
    5e1e:	b140      	cbz	r0, 5e32 <find_type_cb+0x5e>
		if (data->group && attr->handle > data->group->end_handle) {
    5e20:	68ab      	ldr	r3, [r5, #8]
    5e22:	2b00      	cmp	r3, #0
    5e24:	d0ec      	beq.n	5e00 <find_type_cb+0x2c>
    5e26:	8a32      	ldrh	r2, [r6, #16]
    5e28:	8859      	ldrh	r1, [r3, #2]
    5e2a:	4291      	cmp	r1, r2
    5e2c:	d2e8      	bcs.n	5e00 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5e2e:	805a      	strh	r2, [r3, #2]
    5e30:	e7e6      	b.n	5e00 <find_type_cb+0x2c>
    5e32:	f00f fa2b 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", attr->handle);
    5e36:	4b19      	ldr	r3, [pc, #100]	; (5e9c <find_type_cb+0xc8>)
    5e38:	8a32      	ldrh	r2, [r6, #16]
    5e3a:	9303      	str	r3, [sp, #12]
    5e3c:	9202      	str	r2, [sp, #8]
    5e3e:	9001      	str	r0, [sp, #4]
    5e40:	9300      	str	r3, [sp, #0]
    5e42:	4a17      	ldr	r2, [pc, #92]	; (5ea0 <find_type_cb+0xcc>)
    5e44:	4b17      	ldr	r3, [pc, #92]	; (5ea4 <find_type_cb+0xd0>)
    5e46:	4918      	ldr	r1, [pc, #96]	; (5ea8 <find_type_cb+0xd4>)
    5e48:	4818      	ldr	r0, [pc, #96]	; (5eac <find_type_cb+0xd8>)
    5e4a:	f7fb f89f 	bl	f8c <printk>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5e4e:	686a      	ldr	r2, [r5, #4]
    5e50:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    5e54:	8992      	ldrh	r2, [r2, #12]
    5e56:	1a9b      	subs	r3, r3, r2
    5e58:	2b03      	cmp	r3, #3
    5e5a:	d91c      	bls.n	5e96 <find_type_cb+0xc2>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5e5c:	9400      	str	r4, [sp, #0]
    5e5e:	aa06      	add	r2, sp, #24
    5e60:	6874      	ldr	r4, [r6, #4]
    5e62:	2310      	movs	r3, #16
    5e64:	4631      	mov	r1, r6
    5e66:	4640      	mov	r0, r8
    5e68:	47a0      	blx	r4
	if (read < 0) {
    5e6a:	1e02      	subs	r2, r0, #0
    5e6c:	dbc6      	blt.n	5dfc <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    5e6e:	7c2b      	ldrb	r3, [r5, #16]
    5e70:	429a      	cmp	r2, r3
    5e72:	d1c3      	bne.n	5dfc <find_type_cb+0x28>
    5e74:	a906      	add	r1, sp, #24
    5e76:	68e8      	ldr	r0, [r5, #12]
    5e78:	f7fb feab 	bl	1bd2 <memcmp>
    5e7c:	2800      	cmp	r0, #0
    5e7e:	d1bd      	bne.n	5dfc <find_type_cb+0x28>
	data->err = 0x00;
    5e80:	7468      	strb	r0, [r5, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5e82:	6868      	ldr	r0, [r5, #4]
    5e84:	2104      	movs	r1, #4
    5e86:	3008      	adds	r0, #8
    5e88:	f00e f9b8 	bl	141fc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5e8c:	8a33      	ldrh	r3, [r6, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5e8e:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5e90:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5e92:	8043      	strh	r3, [r0, #2]
    5e94:	e7b4      	b.n	5e00 <find_type_cb+0x2c>
		return BT_GATT_ITER_STOP;
    5e96:	4620      	mov	r0, r4
    5e98:	e7b3      	b.n	5e02 <find_type_cb+0x2e>
    5e9a:	bf00      	nop
    5e9c:	00015e19 	.word	0x00015e19
    5ea0:	0001723a 	.word	0x0001723a
    5ea4:	0001811f 	.word	0x0001811f
    5ea8:	00017241 	.word	0x00017241
    5eac:	0001857a 	.word	0x0001857a

00005eb0 <bt_att_connected>:
{
    5eb0:	b510      	push	{r4, lr}
    5eb2:	b086      	sub	sp, #24
    5eb4:	4604      	mov	r4, r0
    5eb6:	f00f f9e9 	bl	1528c <_impl_k_current_get>
	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);
    5eba:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
    5ebe:	4b10      	ldr	r3, [pc, #64]	; (5f00 <bt_att_connected+0x50>)
    5ec0:	9304      	str	r3, [sp, #16]
    5ec2:	9203      	str	r2, [sp, #12]
    5ec4:	9001      	str	r0, [sp, #4]
    5ec6:	9300      	str	r3, [sp, #0]
    5ec8:	4a0e      	ldr	r2, [pc, #56]	; (5f04 <bt_att_connected+0x54>)
    5eca:	9402      	str	r4, [sp, #8]
    5ecc:	4b0e      	ldr	r3, [pc, #56]	; (5f08 <bt_att_connected+0x58>)
    5ece:	490f      	ldr	r1, [pc, #60]	; (5f0c <bt_att_connected+0x5c>)
    5ed0:	480f      	ldr	r0, [pc, #60]	; (5f10 <bt_att_connected+0x60>)
    5ed2:	f7fb f85b 	bl	f8c <printk>
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5ed6:	2317      	movs	r3, #23
    5ed8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5edc:	8763      	strh	r3, [r4, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5ede:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    5ee2:	490c      	ldr	r1, [pc, #48]	; (5f14 <bt_att_connected+0x64>)
    5ee4:	f00f fcc8 	bl	15878 <k_delayed_work_init>
	bt_gatt_connected(ch->chan.conn);
    5ee8:	6820      	ldr	r0, [r4, #0]
	list->head = NULL;
    5eea:	2300      	movs	r3, #0
    5eec:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    5ef0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
    5ef4:	b006      	add	sp, #24
    5ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5efa:	f002 b9d7 	b.w	82ac <bt_gatt_connected>
    5efe:	bf00      	nop
    5f00:	00015e19 	.word	0x00015e19
    5f04:	0001723a 	.word	0x0001723a
    5f08:	00018342 	.word	0x00018342
    5f0c:	00017241 	.word	0x00017241
    5f10:	00018707 	.word	0x00018707
    5f14:	00006a0d 	.word	0x00006a0d

00005f18 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    5f18:	f011 0f01 	tst.w	r1, #1
    5f1c:	7c83      	ldrb	r3, [r0, #18]
    5f1e:	d004      	beq.n	5f2a <check_perm.isra.5+0x12>
    5f20:	f013 0f15 	tst.w	r3, #21
    5f24:	d012      	beq.n	5f4c <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5f26:	6842      	ldr	r2, [r0, #4]
    5f28:	b182      	cbz	r2, 5f4c <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    5f2a:	078a      	lsls	r2, r1, #30
    5f2c:	d504      	bpl.n	5f38 <check_perm.isra.5+0x20>
    5f2e:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    5f32:	d00d      	beq.n	5f50 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5f34:	6882      	ldr	r2, [r0, #8]
    5f36:	b15a      	cbz	r2, 5f50 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    5f38:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5f3a:	f011 0f30 	tst.w	r1, #48	; 0x30
    5f3e:	d109      	bne.n	5f54 <check_perm.isra.5+0x3c>
	return 0;
    5f40:	f011 0f0c 	tst.w	r1, #12
    5f44:	bf14      	ite	ne
    5f46:	200f      	movne	r0, #15
    5f48:	2000      	moveq	r0, #0
    5f4a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5f4c:	2002      	movs	r0, #2
    5f4e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    5f50:	2003      	movs	r0, #3
    5f52:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5f54:	2005      	movs	r0, #5
}
    5f56:	4770      	bx	lr

00005f58 <write_cb>:
{
    5f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f5c:	460c      	mov	r4, r1
    5f5e:	b086      	sub	sp, #24
    5f60:	4606      	mov	r6, r0
    5f62:	f00f f993 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);
    5f66:	8a62      	ldrh	r2, [r4, #18]
    5f68:	4b17      	ldr	r3, [pc, #92]	; (5fc8 <write_cb+0x70>)
    5f6a:	9203      	str	r2, [sp, #12]
    5f6c:	8a32      	ldrh	r2, [r6, #16]
    5f6e:	9304      	str	r3, [sp, #16]
    5f70:	9202      	str	r2, [sp, #8]
    5f72:	9001      	str	r0, [sp, #4]
    5f74:	9300      	str	r3, [sp, #0]
    5f76:	4a15      	ldr	r2, [pc, #84]	; (5fcc <write_cb+0x74>)
    5f78:	4b15      	ldr	r3, [pc, #84]	; (5fd0 <write_cb+0x78>)
    5f7a:	4916      	ldr	r1, [pc, #88]	; (5fd4 <write_cb+0x7c>)
    5f7c:	4816      	ldr	r0, [pc, #88]	; (5fd8 <write_cb+0x80>)
    5f7e:	f7fb f805 	bl	f8c <printk>
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5f82:	212a      	movs	r1, #42	; 0x2a
    5f84:	4630      	mov	r0, r6
    5f86:	f7ff ffc7 	bl	5f18 <check_perm.isra.5>
    5f8a:	f8d4 8000 	ldr.w	r8, [r4]
    5f8e:	7520      	strb	r0, [r4, #20]
    5f90:	4605      	mov	r5, r0
	if (data->err) {
    5f92:	b9b8      	cbnz	r0, 5fc4 <write_cb+0x6c>
	write = attr->write(data->conn, attr, data->value, data->len,
    5f94:	8a62      	ldrh	r2, [r4, #18]
    5f96:	9001      	str	r0, [sp, #4]
    5f98:	9200      	str	r2, [sp, #0]
    5f9a:	7c23      	ldrb	r3, [r4, #16]
    5f9c:	68b7      	ldr	r7, [r6, #8]
    5f9e:	68e2      	ldr	r2, [r4, #12]
    5fa0:	4631      	mov	r1, r6
    5fa2:	4640      	mov	r0, r8
    5fa4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    5fa6:	2800      	cmp	r0, #0
    5fa8:	db02      	blt.n	5fb0 <write_cb+0x58>
    5faa:	7c23      	ldrb	r3, [r4, #16]
    5fac:	4298      	cmp	r0, r3
    5fae:	d006      	beq.n	5fbe <write_cb+0x66>
		data->err = err_to_att(write);
    5fb0:	f7ff fd76 	bl	5aa0 <err_to_att>
    5fb4:	7520      	strb	r0, [r4, #20]
}
    5fb6:	4628      	mov	r0, r5
    5fb8:	b006      	add	sp, #24
    5fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5fbe:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5fc0:	2501      	movs	r5, #1
    5fc2:	e7f8      	b.n	5fb6 <write_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5fc4:	2500      	movs	r5, #0
    5fc6:	e7f6      	b.n	5fb6 <write_cb+0x5e>
    5fc8:	00015e19 	.word	0x00015e19
    5fcc:	0001723a 	.word	0x0001723a
    5fd0:	000181c2 	.word	0x000181c2
    5fd4:	00017241 	.word	0x00017241
    5fd8:	000189b0 	.word	0x000189b0

00005fdc <read_cb>:
{
    5fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5fe0:	f8d1 9000 	ldr.w	r9, [r1]
{
    5fe4:	b085      	sub	sp, #20
    5fe6:	460c      	mov	r4, r1
    5fe8:	4606      	mov	r6, r0
	struct bt_conn *conn = att->chan.chan.conn;
    5fea:	f8d9 8000 	ldr.w	r8, [r9]
    5fee:	f00f f94d 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", attr->handle);
    5ff2:	4b1d      	ldr	r3, [pc, #116]	; (6068 <read_cb+0x8c>)
    5ff4:	8a32      	ldrh	r2, [r6, #16]
    5ff6:	9303      	str	r3, [sp, #12]
    5ff8:	9202      	str	r2, [sp, #8]
    5ffa:	9001      	str	r0, [sp, #4]
    5ffc:	4a1b      	ldr	r2, [pc, #108]	; (606c <read_cb+0x90>)
    5ffe:	9300      	str	r3, [sp, #0]
    6000:	491b      	ldr	r1, [pc, #108]	; (6070 <read_cb+0x94>)
    6002:	4b1c      	ldr	r3, [pc, #112]	; (6074 <read_cb+0x98>)
    6004:	481c      	ldr	r0, [pc, #112]	; (6078 <read_cb+0x9c>)
    6006:	f7fa ffc1 	bl	f8c <printk>
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    600a:	68a0      	ldr	r0, [r4, #8]
    600c:	2100      	movs	r1, #0
    600e:	3008      	adds	r0, #8
    6010:	f00e f8f4 	bl	141fc <net_buf_simple_add>
	data->err = 0x00;
    6014:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6016:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    6018:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    601a:	2115      	movs	r1, #21
    601c:	4630      	mov	r0, r6
    601e:	f7ff ff7b 	bl	5f18 <check_perm.isra.5>
    6022:	4605      	mov	r5, r0
    6024:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    6026:	b9e0      	cbnz	r0, 6062 <read_cb+0x86>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6028:	68a1      	ldr	r1, [r4, #8]
    602a:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    602e:	898a      	ldrh	r2, [r1, #12]
    6030:	6889      	ldr	r1, [r1, #8]
    6032:	88a0      	ldrh	r0, [r4, #4]
    6034:	9000      	str	r0, [sp, #0]
    6036:	1a9b      	subs	r3, r3, r2
    6038:	6877      	ldr	r7, [r6, #4]
    603a:	440a      	add	r2, r1
    603c:	b29b      	uxth	r3, r3
    603e:	4631      	mov	r1, r6
    6040:	4640      	mov	r0, r8
    6042:	47b8      	blx	r7
	if (read < 0) {
    6044:	1e01      	subs	r1, r0, #0
    6046:	da06      	bge.n	6056 <read_cb+0x7a>
		data->err = err_to_att(read);
    6048:	f7ff fd2a 	bl	5aa0 <err_to_att>
    604c:	7420      	strb	r0, [r4, #16]
}
    604e:	4628      	mov	r0, r5
    6050:	b005      	add	sp, #20
    6052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    6056:	68a0      	ldr	r0, [r4, #8]
    6058:	3008      	adds	r0, #8
    605a:	f00e f8cf 	bl	141fc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    605e:	2501      	movs	r5, #1
    6060:	e7f5      	b.n	604e <read_cb+0x72>
		return BT_GATT_ITER_STOP;
    6062:	463d      	mov	r5, r7
    6064:	e7f3      	b.n	604e <read_cb+0x72>
    6066:	bf00      	nop
    6068:	00015e19 	.word	0x00015e19
    606c:	0001723a 	.word	0x0001723a
    6070:	00017241 	.word	0x00017241
    6074:	00018168 	.word	0x00018168
    6078:	0001857a 	.word	0x0001857a

0000607c <read_type_cb>:
{
    607c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    6080:	680f      	ldr	r7, [r1, #0]
{
    6082:	b085      	sub	sp, #20
    6084:	4606      	mov	r6, r0
    6086:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6088:	6800      	ldr	r0, [r0, #0]
    608a:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    608c:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6090:	f7fb ff32 	bl	1ef8 <bt_uuid_cmp>
    6094:	4680      	mov	r8, r0
    6096:	2800      	cmp	r0, #0
    6098:	d156      	bne.n	6148 <read_type_cb+0xcc>
    609a:	f00f f8f7 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", attr->handle);
    609e:	4b2b      	ldr	r3, [pc, #172]	; (614c <read_type_cb+0xd0>)
    60a0:	8a32      	ldrh	r2, [r6, #16]
    60a2:	9303      	str	r3, [sp, #12]
    60a4:	9202      	str	r2, [sp, #8]
    60a6:	9001      	str	r0, [sp, #4]
    60a8:	9300      	str	r3, [sp, #0]
    60aa:	4a29      	ldr	r2, [pc, #164]	; (6150 <read_type_cb+0xd4>)
    60ac:	4b29      	ldr	r3, [pc, #164]	; (6154 <read_type_cb+0xd8>)
    60ae:	492a      	ldr	r1, [pc, #168]	; (6158 <read_type_cb+0xdc>)
    60b0:	482a      	ldr	r0, [pc, #168]	; (615c <read_type_cb+0xe0>)
    60b2:	f7fa ff6b 	bl	f8c <printk>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    60b6:	2115      	movs	r1, #21
    60b8:	4630      	mov	r0, r6
    60ba:	f7ff ff2d 	bl	5f18 <check_perm.isra.5>
    60be:	4605      	mov	r5, r0
    60c0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    60c2:	b148      	cbz	r0, 60d8 <read_type_cb+0x5c>
		if (data->rsp->len) {
    60c4:	68e3      	ldr	r3, [r4, #12]
    60c6:	781d      	ldrb	r5, [r3, #0]
    60c8:	b115      	cbz	r5, 60d0 <read_type_cb+0x54>
			data->err = 0x00;
    60ca:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    60ce:	4645      	mov	r5, r8
}
    60d0:	4628      	mov	r0, r5
    60d2:	b005      	add	sp, #20
    60d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    60d8:	68a0      	ldr	r0, [r4, #8]
    60da:	2102      	movs	r1, #2
    60dc:	3008      	adds	r0, #8
    60de:	f00e f88d 	bl	141fc <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    60e2:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    60e4:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    60e6:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    60e8:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    60ea:	898a      	ldrh	r2, [r1, #12]
    60ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    60f0:	6889      	ldr	r1, [r1, #8]
    60f2:	f8d6 8004 	ldr.w	r8, [r6, #4]
    60f6:	9500      	str	r5, [sp, #0]
    60f8:	1a9b      	subs	r3, r3, r2
    60fa:	b29b      	uxth	r3, r3
    60fc:	440a      	add	r2, r1
    60fe:	4648      	mov	r0, r9
    6100:	4631      	mov	r1, r6
    6102:	47c0      	blx	r8
	if (read < 0) {
    6104:	1e01      	subs	r1, r0, #0
    6106:	da03      	bge.n	6110 <read_type_cb+0x94>
		data->err = err_to_att(read);
    6108:	f7ff fcca 	bl	5aa0 <err_to_att>
    610c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    610e:	e7df      	b.n	60d0 <read_type_cb+0x54>
	if (!data->rsp->len) {
    6110:	68e0      	ldr	r0, [r4, #12]
    6112:	7802      	ldrb	r2, [r0, #0]
    6114:	1c8b      	adds	r3, r1, #2
    6116:	b982      	cbnz	r2, 613a <read_type_cb+0xbe>
		data->rsp->len = read + sizeof(*data->item);
    6118:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    611a:	68a0      	ldr	r0, [r4, #8]
    611c:	3008      	adds	r0, #8
    611e:	f00e f86d 	bl	141fc <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    6122:	68a3      	ldr	r3, [r4, #8]
    6124:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    6128:	899b      	ldrh	r3, [r3, #12]
    612a:	1aed      	subs	r5, r5, r3
    612c:	68e3      	ldr	r3, [r4, #12]
    612e:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6130:	429d      	cmp	r5, r3
    6132:	bfd4      	ite	le
    6134:	2500      	movle	r5, #0
    6136:	2501      	movgt	r5, #1
    6138:	e7ca      	b.n	60d0 <read_type_cb+0x54>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    613a:	429a      	cmp	r2, r3
    613c:	d0ed      	beq.n	611a <read_type_cb+0x9e>
		data->buf->len -= sizeof(*data->item);
    613e:	68a2      	ldr	r2, [r4, #8]
    6140:	8993      	ldrh	r3, [r2, #12]
    6142:	3b02      	subs	r3, #2
    6144:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    6146:	e7c3      	b.n	60d0 <read_type_cb+0x54>
		return BT_GATT_ITER_CONTINUE;
    6148:	2501      	movs	r5, #1
    614a:	e7c1      	b.n	60d0 <read_type_cb+0x54>
    614c:	00015e19 	.word	0x00015e19
    6150:	0001723a 	.word	0x0001723a
    6154:	00018149 	.word	0x00018149
    6158:	00017241 	.word	0x00017241
    615c:	0001857a 	.word	0x0001857a

00006160 <uuid_create>:
{
    6160:	b510      	push	{r4, lr}
	switch (buf->len) {
    6162:	898a      	ldrh	r2, [r1, #12]
    6164:	2a02      	cmp	r2, #2
{
    6166:	4604      	mov	r4, r0
	switch (buf->len) {
    6168:	d003      	beq.n	6172 <uuid_create+0x12>
    616a:	2a10      	cmp	r2, #16
    616c:	d00a      	beq.n	6184 <uuid_create+0x24>
	return false;
    616e:	2000      	movs	r0, #0
}
    6170:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    6172:	2300      	movs	r3, #0
    6174:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    6176:	f101 0008 	add.w	r0, r1, #8
    617a:	f00e f86e 	bl	1425a <net_buf_simple_pull_le16>
    617e:	8060      	strh	r0, [r4, #2]
		return true;
    6180:	2001      	movs	r0, #1
    6182:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    6184:	2302      	movs	r3, #2
    6186:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    618a:	6889      	ldr	r1, [r1, #8]
    618c:	f7fb fd36 	bl	1bfc <memcpy>
    6190:	e7f6      	b.n	6180 <uuid_create+0x20>
	...

00006194 <att_req_sent>:
{
    6194:	b530      	push	{r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6196:	2104      	movs	r1, #4
{
    6198:	b087      	sub	sp, #28
    619a:	4605      	mov	r5, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    619c:	f7ff fbb2 	bl	5904 <bt_l2cap_le_lookup_tx_cid>
    61a0:	4604      	mov	r4, r0
    61a2:	f00f f873 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p att %p att->req %p", conn, att, att->req);
    61a6:	4b11      	ldr	r3, [pc, #68]	; (61ec <att_req_sent+0x58>)
    61a8:	9305      	str	r3, [sp, #20]
    61aa:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    61ae:	9204      	str	r2, [sp, #16]
    61b0:	9001      	str	r0, [sp, #4]
    61b2:	9300      	str	r3, [sp, #0]
    61b4:	4a0e      	ldr	r2, [pc, #56]	; (61f0 <att_req_sent+0x5c>)
    61b6:	4b0f      	ldr	r3, [pc, #60]	; (61f4 <att_req_sent+0x60>)
    61b8:	490f      	ldr	r1, [pc, #60]	; (61f8 <att_req_sent+0x64>)
    61ba:	9403      	str	r4, [sp, #12]
    61bc:	9502      	str	r5, [sp, #8]
    61be:	480f      	ldr	r0, [pc, #60]	; (61fc <att_req_sent+0x68>)
    61c0:	f7fa fee4 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    61c4:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
    61c8:	f00f f86f 	bl	152aa <_impl_k_sem_give>
	if (att->req) {
    61cc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    61d0:	b14b      	cbz	r3, 61e6 <att_req_sent+0x52>
    61d2:	480b      	ldr	r0, [pc, #44]	; (6200 <att_req_sent+0x6c>)
    61d4:	f247 5230 	movw	r2, #30000	; 0x7530
    61d8:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
}
    61dc:	b007      	add	sp, #28
    61de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    61e2:	f00f bbbd 	b.w	15960 <k_delayed_work_submit_to_queue>
    61e6:	b007      	add	sp, #28
    61e8:	bd30      	pop	{r4, r5, pc}
    61ea:	bf00      	nop
    61ec:	00015e19 	.word	0x00015e19
    61f0:	0001723a 	.word	0x0001723a
    61f4:	000180a6 	.word	0x000180a6
    61f8:	00017241 	.word	0x00017241
    61fc:	00018644 	.word	0x00018644
    6200:	200019b0 	.word	0x200019b0

00006204 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    6204:	6803      	ldr	r3, [r0, #0]
    6206:	7a5b      	ldrb	r3, [r3, #9]
    6208:	2b03      	cmp	r3, #3
    620a:	d10a      	bne.n	6222 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    620c:	f3bf 8f5b 	dmb	ish
    6210:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    6214:	f3bf 8f5b 	dmb	ish
    6218:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    621c:	f000 0001 	and.w	r0, r0, #1
    6220:	4770      	bx	lr
    6222:	2001      	movs	r0, #1
}
    6224:	4770      	bx	lr

00006226 <att_prepare_write_req>:
    6226:	2006      	movs	r0, #6
    6228:	4770      	bx	lr
	...

0000622c <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    622c:	7a43      	ldrb	r3, [r0, #9]
    622e:	2b03      	cmp	r3, #3
{
    6230:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6232:	d00b      	beq.n	624c <att_chan_get+0x20>
		BT_WARN("Not connected");
    6234:	4b15      	ldr	r3, [pc, #84]	; (628c <att_chan_get+0x60>)
    6236:	9301      	str	r3, [sp, #4]
    6238:	9300      	str	r3, [sp, #0]
    623a:	4a15      	ldr	r2, [pc, #84]	; (6290 <att_chan_get+0x64>)
    623c:	4b15      	ldr	r3, [pc, #84]	; (6294 <att_chan_get+0x68>)
    623e:	4916      	ldr	r1, [pc, #88]	; (6298 <att_chan_get+0x6c>)
    6240:	4816      	ldr	r0, [pc, #88]	; (629c <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    6242:	f7fa fea3 	bl	f8c <printk>
		return NULL;
    6246:	2000      	movs	r0, #0
}
    6248:	b002      	add	sp, #8
    624a:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    624c:	2104      	movs	r1, #4
    624e:	f7ff fb69 	bl	5924 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6252:	4604      	mov	r4, r0
    6254:	b950      	cbnz	r0, 626c <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    6256:	4b0d      	ldr	r3, [pc, #52]	; (628c <att_chan_get+0x60>)
    6258:	9301      	str	r3, [sp, #4]
    625a:	9300      	str	r3, [sp, #0]
    625c:	4a10      	ldr	r2, [pc, #64]	; (62a0 <att_chan_get+0x74>)
    625e:	4b0d      	ldr	r3, [pc, #52]	; (6294 <att_chan_get+0x68>)
    6260:	490d      	ldr	r1, [pc, #52]	; (6298 <att_chan_get+0x6c>)
    6262:	4810      	ldr	r0, [pc, #64]	; (62a4 <att_chan_get+0x78>)
    6264:	f7fa fe92 	bl	f8c <printk>
    6268:	4620      	mov	r0, r4
    626a:	e7ed      	b.n	6248 <att_chan_get+0x1c>
    626c:	f3bf 8f5b 	dmb	ish
    6270:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    6274:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    6278:	075b      	lsls	r3, r3, #29
    627a:	d5f5      	bpl.n	6268 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    627c:	4b03      	ldr	r3, [pc, #12]	; (628c <att_chan_get+0x60>)
    627e:	9301      	str	r3, [sp, #4]
    6280:	9300      	str	r3, [sp, #0]
    6282:	4a03      	ldr	r2, [pc, #12]	; (6290 <att_chan_get+0x64>)
    6284:	4b03      	ldr	r3, [pc, #12]	; (6294 <att_chan_get+0x68>)
    6286:	4904      	ldr	r1, [pc, #16]	; (6298 <att_chan_get+0x6c>)
    6288:	4807      	ldr	r0, [pc, #28]	; (62a8 <att_chan_get+0x7c>)
    628a:	e7da      	b.n	6242 <att_chan_get+0x16>
    628c:	00015e19 	.word	0x00015e19
    6290:	0001727c 	.word	0x0001727c
    6294:	00018317 	.word	0x00018317
    6298:	00017241 	.word	0x00017241
    629c:	00018385 	.word	0x00018385
    62a0:	000171f2 	.word	0x000171f2
    62a4:	000183a3 	.word	0x000183a3
    62a8:	000183ce 	.word	0x000183ce

000062ac <att_pdu_sent>:
{
    62ac:	b530      	push	{r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    62ae:	2104      	movs	r1, #4
{
    62b0:	b087      	sub	sp, #28
    62b2:	4605      	mov	r5, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    62b4:	f7ff fb26 	bl	5904 <bt_l2cap_le_lookup_tx_cid>
    62b8:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    62ba:	f00e ffe7 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p att %p", conn, att);
    62be:	4b09      	ldr	r3, [pc, #36]	; (62e4 <att_pdu_sent+0x38>)
    62c0:	9304      	str	r3, [sp, #16]
    62c2:	9001      	str	r0, [sp, #4]
    62c4:	9300      	str	r3, [sp, #0]
    62c6:	9403      	str	r4, [sp, #12]
    62c8:	9502      	str	r5, [sp, #8]
    62ca:	4b07      	ldr	r3, [pc, #28]	; (62e8 <att_pdu_sent+0x3c>)
    62cc:	4a07      	ldr	r2, [pc, #28]	; (62ec <att_pdu_sent+0x40>)
    62ce:	4908      	ldr	r1, [pc, #32]	; (62f0 <att_pdu_sent+0x44>)
    62d0:	4808      	ldr	r0, [pc, #32]	; (62f4 <att_pdu_sent+0x48>)
    62d2:	f7fa fe5b 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    62d6:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
}
    62da:	b007      	add	sp, #28
    62dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    62e0:	f00e bfe3 	b.w	152aa <_impl_k_sem_give>
    62e4:	00015e19 	.word	0x00015e19
    62e8:	000180b3 	.word	0x000180b3
    62ec:	0001723a 	.word	0x0001723a
    62f0:	00017241 	.word	0x00017241
    62f4:	0001859d 	.word	0x0001859d

000062f8 <att_rsp_sent>:
{
    62f8:	b530      	push	{r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    62fa:	2104      	movs	r1, #4
{
    62fc:	b087      	sub	sp, #28
    62fe:	4605      	mov	r5, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6300:	f7ff fb00 	bl	5904 <bt_l2cap_le_lookup_tx_cid>
    6304:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    6306:	f00e ffc1 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p att %p", conn, att);
    630a:	4b10      	ldr	r3, [pc, #64]	; (634c <att_rsp_sent+0x54>)
    630c:	9304      	str	r3, [sp, #16]
    630e:	9001      	str	r0, [sp, #4]
    6310:	9300      	str	r3, [sp, #0]
    6312:	9403      	str	r4, [sp, #12]
    6314:	4b0e      	ldr	r3, [pc, #56]	; (6350 <att_rsp_sent+0x58>)
    6316:	9502      	str	r5, [sp, #8]
    6318:	4a0e      	ldr	r2, [pc, #56]	; (6354 <att_rsp_sent+0x5c>)
    631a:	490f      	ldr	r1, [pc, #60]	; (6358 <att_rsp_sent+0x60>)
    631c:	480f      	ldr	r0, [pc, #60]	; (635c <att_rsp_sent+0x64>)
    631e:	f7fa fe35 	bl	f8c <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6322:	f3bf 8f5b 	dmb	ish
    6326:	f104 0394 	add.w	r3, r4, #148	; 0x94
    632a:	e853 2f00 	ldrex	r2, [r3]
    632e:	f022 0201 	bic.w	r2, r2, #1
    6332:	e843 2100 	strex	r1, r2, [r3]
    6336:	2900      	cmp	r1, #0
    6338:	d1f7      	bne.n	632a <att_rsp_sent+0x32>
    633a:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    633e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
}
    6342:	b007      	add	sp, #28
    6344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6348:	f00e bfaf 	b.w	152aa <_impl_k_sem_give>
    634c:	00015e19 	.word	0x00015e19
    6350:	00018099 	.word	0x00018099
    6354:	0001723a 	.word	0x0001723a
    6358:	00017241 	.word	0x00017241
    635c:	0001859d 	.word	0x0001859d

00006360 <att_cfm_sent>:
{
    6360:	b530      	push	{r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6362:	2104      	movs	r1, #4
{
    6364:	b087      	sub	sp, #28
    6366:	4605      	mov	r5, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6368:	f7ff facc 	bl	5904 <bt_l2cap_le_lookup_tx_cid>
    636c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    636e:	f00e ff8d 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p att %p", conn, att);
    6372:	4b10      	ldr	r3, [pc, #64]	; (63b4 <att_cfm_sent+0x54>)
    6374:	9304      	str	r3, [sp, #16]
    6376:	9001      	str	r0, [sp, #4]
    6378:	9300      	str	r3, [sp, #0]
    637a:	9403      	str	r4, [sp, #12]
    637c:	4b0e      	ldr	r3, [pc, #56]	; (63b8 <att_cfm_sent+0x58>)
    637e:	9502      	str	r5, [sp, #8]
    6380:	4a0e      	ldr	r2, [pc, #56]	; (63bc <att_cfm_sent+0x5c>)
    6382:	490f      	ldr	r1, [pc, #60]	; (63c0 <att_cfm_sent+0x60>)
    6384:	480f      	ldr	r0, [pc, #60]	; (63c4 <att_cfm_sent+0x64>)
    6386:	f7fa fe01 	bl	f8c <printk>
    638a:	f3bf 8f5b 	dmb	ish
    638e:	f104 0394 	add.w	r3, r4, #148	; 0x94
    6392:	e853 2f00 	ldrex	r2, [r3]
    6396:	f022 0202 	bic.w	r2, r2, #2
    639a:	e843 2100 	strex	r1, r2, [r3]
    639e:	2900      	cmp	r1, #0
    63a0:	d1f7      	bne.n	6392 <att_cfm_sent+0x32>
    63a2:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    63a6:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
}
    63aa:	b007      	add	sp, #28
    63ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    63b0:	f00e bf7b 	b.w	152aa <_impl_k_sem_give>
    63b4:	00015e19 	.word	0x00015e19
    63b8:	0001808c 	.word	0x0001808c
    63bc:	0001723a 	.word	0x0001723a
    63c0:	00017241 	.word	0x00017241
    63c4:	0001859d 	.word	0x0001859d

000063c8 <att_send_req>:
{
    63c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ca:	b085      	sub	sp, #20
    63cc:	4605      	mov	r5, r0
    63ce:	460c      	mov	r4, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    63d0:	f00e ff5c 	bl	1528c <_impl_k_current_get>
	BT_DBG("req %p", req);
    63d4:	4e23      	ldr	r6, [pc, #140]	; (6464 <att_send_req+0x9c>)
    63d6:	9001      	str	r0, [sp, #4]
    63d8:	4b23      	ldr	r3, [pc, #140]	; (6468 <att_send_req+0xa0>)
    63da:	4a24      	ldr	r2, [pc, #144]	; (646c <att_send_req+0xa4>)
    63dc:	4924      	ldr	r1, [pc, #144]	; (6470 <att_send_req+0xa8>)
    63de:	9603      	str	r6, [sp, #12]
    63e0:	9402      	str	r4, [sp, #8]
    63e2:	9600      	str	r6, [sp, #0]
    63e4:	4823      	ldr	r0, [pc, #140]	; (6474 <att_send_req+0xac>)
	k_sem_take(&att->tx_sem, K_FOREVER);
    63e6:	f105 07cc 	add.w	r7, r5, #204	; 0xcc
	BT_DBG("req %p", req);
    63ea:	f7fa fdcf 	bl	f8c <printk>
	att->req = req;
    63ee:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    63f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    63f6:	4638      	mov	r0, r7
    63f8:	f00e ff7f 	bl	152fa <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    63fc:	4628      	mov	r0, r5
    63fe:	f7ff ff01 	bl	6204 <att_is_connected>
    6402:	b970      	cbnz	r0, 6422 <att_send_req+0x5a>
		BT_WARN("Disconnected");
    6404:	4b18      	ldr	r3, [pc, #96]	; (6468 <att_send_req+0xa0>)
    6406:	4a1c      	ldr	r2, [pc, #112]	; (6478 <att_send_req+0xb0>)
    6408:	4919      	ldr	r1, [pc, #100]	; (6470 <att_send_req+0xa8>)
    640a:	9601      	str	r6, [sp, #4]
    640c:	9600      	str	r6, [sp, #0]
    640e:	481b      	ldr	r0, [pc, #108]	; (647c <att_send_req+0xb4>)
    6410:	f7fa fdbc 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6414:	4638      	mov	r0, r7
    6416:	f00e ff48 	bl	152aa <_impl_k_sem_give>
		return -ENOTCONN;
    641a:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    641e:	b005      	add	sp, #20
    6420:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    6422:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    6424:	f106 0008 	add.w	r0, r6, #8
    6428:	f00d ff1f 	bl	1426a <net_buf_simple_headroom>
	state->len = buf->len;
    642c:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    642e:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    6430:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    6432:	6920      	ldr	r0, [r4, #16]
    6434:	682d      	ldr	r5, [r5, #0]
    6436:	f00d fedd 	bl	141f4 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    643a:	6923      	ldr	r3, [r4, #16]
    643c:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    643e:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    6440:	7818      	ldrb	r0, [r3, #0]
    6442:	f7ff fb15 	bl	5a70 <att_op_get_type>
    6446:	3801      	subs	r0, #1
    6448:	b2c0      	uxtb	r0, r0
    644a:	2804      	cmp	r0, #4
    644c:	bf96      	itet	ls
    644e:	4b0c      	ldrls	r3, [pc, #48]	; (6480 <att_send_req+0xb8>)
    6450:	4b0c      	ldrhi	r3, [pc, #48]	; (6484 <att_send_req+0xbc>)
    6452:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    6456:	4632      	mov	r2, r6
    6458:	4628      	mov	r0, r5
    645a:	2104      	movs	r1, #4
    645c:	f7ff f904 	bl	5668 <bt_l2cap_send_cb>
	return 0;
    6460:	2000      	movs	r0, #0
    6462:	e7dc      	b.n	641e <att_send_req+0x56>
    6464:	00015e19 	.word	0x00015e19
    6468:	000180cc 	.word	0x000180cc
    646c:	0001723a 	.word	0x0001723a
    6470:	00017241 	.word	0x00017241
    6474:	00018628 	.word	0x00018628
    6478:	0001727c 	.word	0x0001727c
    647c:	00018674 	.word	0x00018674
    6480:	00018068 	.word	0x00018068
    6484:	000062ad 	.word	0x000062ad

00006488 <att_handle_rsp>:
{
    6488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    648c:	b086      	sub	sp, #24
    648e:	4617      	mov	r7, r2
    6490:	4698      	mov	r8, r3
    6492:	4604      	mov	r4, r0
    6494:	4689      	mov	r9, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    6496:	f00e fef9 	bl	1528c <_impl_k_current_get>
	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));
    649a:	4639      	mov	r1, r7
    649c:	4606      	mov	r6, r0
    649e:	4648      	mov	r0, r9
    64a0:	f7fb fbfc 	bl	1c9c <bt_hex>
    64a4:	4d2a      	ldr	r5, [pc, #168]	; (6550 <att_handle_rsp+0xc8>)
    64a6:	4b2b      	ldr	r3, [pc, #172]	; (6554 <att_handle_rsp+0xcc>)
    64a8:	9004      	str	r0, [sp, #16]
    64aa:	4a2b      	ldr	r2, [pc, #172]	; (6558 <att_handle_rsp+0xd0>)
    64ac:	492b      	ldr	r1, [pc, #172]	; (655c <att_handle_rsp+0xd4>)
    64ae:	9505      	str	r5, [sp, #20]
    64b0:	9703      	str	r7, [sp, #12]
    64b2:	e88d 0160 	stmia.w	sp, {r5, r6, r8}
    64b6:	482a      	ldr	r0, [pc, #168]	; (6560 <att_handle_rsp+0xd8>)
    64b8:	f7fa fd68 	bl	f8c <printk>
	k_delayed_work_cancel(&att->timeout_work);
    64bc:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    64c0:	f00f f9ea 	bl	15898 <k_delayed_work_cancel>
	if (!att->req) {
    64c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    64c8:	bb2b      	cbnz	r3, 6516 <att_handle_rsp+0x8e>
		BT_WARN("No pending ATT request");
    64ca:	9501      	str	r5, [sp, #4]
    64cc:	9500      	str	r5, [sp, #0]
    64ce:	4b21      	ldr	r3, [pc, #132]	; (6554 <att_handle_rsp+0xcc>)
    64d0:	4a24      	ldr	r2, [pc, #144]	; (6564 <att_handle_rsp+0xdc>)
    64d2:	4922      	ldr	r1, [pc, #136]	; (655c <att_handle_rsp+0xd4>)
    64d4:	4824      	ldr	r0, [pc, #144]	; (6568 <att_handle_rsp+0xe0>)
    64d6:	f7fa fd59 	bl	f8c <printk>
    64da:	f00e fed7 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    64de:	491f      	ldr	r1, [pc, #124]	; (655c <att_handle_rsp+0xd4>)
    64e0:	9001      	str	r0, [sp, #4]
    64e2:	9502      	str	r5, [sp, #8]
    64e4:	9500      	str	r5, [sp, #0]
    64e6:	4b21      	ldr	r3, [pc, #132]	; (656c <att_handle_rsp+0xe4>)
    64e8:	4a1b      	ldr	r2, [pc, #108]	; (6558 <att_handle_rsp+0xd0>)
    64ea:	4821      	ldr	r0, [pc, #132]	; (6570 <att_handle_rsp+0xe8>)
    64ec:	f7fa fd4e 	bl	f8c <printk>
    64f0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    64f4:	b159      	cbz	r1, 650e <att_handle_rsp+0x86>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    64f6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    64fa:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    64fc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    6500:	4291      	cmp	r1, r2
	list->tail = node;
    6502:	bf08      	it	eq
    6504:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    6508:	4620      	mov	r0, r4
    650a:	f7ff ff5d 	bl	63c8 <att_send_req>
}
    650e:	2000      	movs	r0, #0
    6510:	b006      	add	sp, #24
    6512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (att->req->buf) {
    6516:	6918      	ldr	r0, [r3, #16]
    6518:	b128      	cbz	r0, 6526 <att_handle_rsp+0x9e>
		net_buf_unref(att->req->buf);
    651a:	f00d fe3d 	bl	14198 <net_buf_unref>
		att->req->buf = NULL;
    651e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6522:	2200      	movs	r2, #0
    6524:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    6526:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    652a:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    652c:	f8d3 a004 	ldr.w	sl, [r3, #4]
	att->req->func = NULL;
    6530:	2600      	movs	r6, #0
    6532:	605e      	str	r6, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    6534:	464a      	mov	r2, r9
    6536:	9300      	str	r3, [sp, #0]
    6538:	4641      	mov	r1, r8
    653a:	463b      	mov	r3, r7
    653c:	47d0      	blx	sl
	if (!att->req->func) {
    653e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    6542:	6843      	ldr	r3, [r0, #4]
    6544:	b90b      	cbnz	r3, 654a <att_handle_rsp+0xc2>
		att_req_destroy(att->req);
    6546:	f7ff fb15 	bl	5b74 <att_req_destroy>
	att->req = NULL;
    654a:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
    654e:	e7c4      	b.n	64da <att_handle_rsp+0x52>
    6550:	00015e19 	.word	0x00015e19
    6554:	000180e5 	.word	0x000180e5
    6558:	0001723a 	.word	0x0001723a
    655c:	00017241 	.word	0x00017241
    6560:	000184bf 	.word	0x000184bf
    6564:	0001727c 	.word	0x0001727c
    6568:	000184e6 	.word	0x000184e6
    656c:	000180d9 	.word	0x000180d9
    6570:	000177b2 	.word	0x000177b2

00006574 <att_confirm>:
{
    6574:	b530      	push	{r4, r5, lr}
    6576:	b085      	sub	sp, #20
    6578:	460c      	mov	r4, r1
    657a:	4605      	mov	r5, r0
    657c:	f00e fe86 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    6580:	4b09      	ldr	r3, [pc, #36]	; (65a8 <att_confirm+0x34>)
    6582:	9302      	str	r3, [sp, #8]
    6584:	9001      	str	r0, [sp, #4]
    6586:	9300      	str	r3, [sp, #0]
    6588:	4a08      	ldr	r2, [pc, #32]	; (65ac <att_confirm+0x38>)
    658a:	4b09      	ldr	r3, [pc, #36]	; (65b0 <att_confirm+0x3c>)
    658c:	4909      	ldr	r1, [pc, #36]	; (65b4 <att_confirm+0x40>)
    658e:	480a      	ldr	r0, [pc, #40]	; (65b8 <att_confirm+0x44>)
    6590:	f7fa fcfc 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    6594:	89a2      	ldrh	r2, [r4, #12]
    6596:	68a1      	ldr	r1, [r4, #8]
    6598:	2300      	movs	r3, #0
    659a:	4628      	mov	r0, r5
}
    659c:	b005      	add	sp, #20
    659e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    65a2:	f7ff bf71 	b.w	6488 <att_handle_rsp>
    65a6:	bf00      	nop
    65a8:	00015e19 	.word	0x00015e19
    65ac:	0001723a 	.word	0x0001723a
    65b0:	000182ff 	.word	0x000182ff
    65b4:	00017241 	.word	0x00017241
    65b8:	000177b2 	.word	0x000177b2

000065bc <att_handle_exec_write_rsp>:
{
    65bc:	b530      	push	{r4, r5, lr}
    65be:	b085      	sub	sp, #20
    65c0:	460c      	mov	r4, r1
    65c2:	4605      	mov	r5, r0
    65c4:	f00e fe62 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    65c8:	4b09      	ldr	r3, [pc, #36]	; (65f0 <att_handle_exec_write_rsp+0x34>)
    65ca:	9302      	str	r3, [sp, #8]
    65cc:	9001      	str	r0, [sp, #4]
    65ce:	9300      	str	r3, [sp, #0]
    65d0:	4a08      	ldr	r2, [pc, #32]	; (65f4 <att_handle_exec_write_rsp+0x38>)
    65d2:	4b09      	ldr	r3, [pc, #36]	; (65f8 <att_handle_exec_write_rsp+0x3c>)
    65d4:	4909      	ldr	r1, [pc, #36]	; (65fc <att_handle_exec_write_rsp+0x40>)
    65d6:	480a      	ldr	r0, [pc, #40]	; (6600 <att_handle_exec_write_rsp+0x44>)
    65d8:	f7fa fcd8 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    65dc:	89a2      	ldrh	r2, [r4, #12]
    65de:	68a1      	ldr	r1, [r4, #8]
    65e0:	2300      	movs	r3, #0
    65e2:	4628      	mov	r0, r5
}
    65e4:	b005      	add	sp, #20
    65e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    65ea:	f7ff bf4d 	b.w	6488 <att_handle_rsp>
    65ee:	bf00      	nop
    65f0:	00015e19 	.word	0x00015e19
    65f4:	0001723a 	.word	0x0001723a
    65f8:	000182cd 	.word	0x000182cd
    65fc:	00017241 	.word	0x00017241
    6600:	000177b2 	.word	0x000177b2

00006604 <att_handle_prepare_write_rsp>:
{
    6604:	b530      	push	{r4, r5, lr}
    6606:	b085      	sub	sp, #20
    6608:	460c      	mov	r4, r1
    660a:	4605      	mov	r5, r0
    660c:	f00e fe3e 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    6610:	4b09      	ldr	r3, [pc, #36]	; (6638 <att_handle_prepare_write_rsp+0x34>)
    6612:	9302      	str	r3, [sp, #8]
    6614:	9001      	str	r0, [sp, #4]
    6616:	9300      	str	r3, [sp, #0]
    6618:	4a08      	ldr	r2, [pc, #32]	; (663c <att_handle_prepare_write_rsp+0x38>)
    661a:	4b09      	ldr	r3, [pc, #36]	; (6640 <att_handle_prepare_write_rsp+0x3c>)
    661c:	4909      	ldr	r1, [pc, #36]	; (6644 <att_handle_prepare_write_rsp+0x40>)
    661e:	480a      	ldr	r0, [pc, #40]	; (6648 <att_handle_prepare_write_rsp+0x44>)
    6620:	f7fa fcb4 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    6624:	89a2      	ldrh	r2, [r4, #12]
    6626:	68a1      	ldr	r1, [r4, #8]
    6628:	2300      	movs	r3, #0
    662a:	4628      	mov	r0, r5
}
    662c:	b005      	add	sp, #20
    662e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    6632:	f7ff bf29 	b.w	6488 <att_handle_rsp>
    6636:	bf00      	nop
    6638:	00015e19 	.word	0x00015e19
    663c:	0001723a 	.word	0x0001723a
    6640:	000182b0 	.word	0x000182b0
    6644:	00017241 	.word	0x00017241
    6648:	000177b2 	.word	0x000177b2

0000664c <att_handle_write_rsp>:
{
    664c:	b530      	push	{r4, r5, lr}
    664e:	b085      	sub	sp, #20
    6650:	460c      	mov	r4, r1
    6652:	4605      	mov	r5, r0
    6654:	f00e fe1a 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    6658:	4b09      	ldr	r3, [pc, #36]	; (6680 <att_handle_write_rsp+0x34>)
    665a:	9302      	str	r3, [sp, #8]
    665c:	9001      	str	r0, [sp, #4]
    665e:	9300      	str	r3, [sp, #0]
    6660:	4a08      	ldr	r2, [pc, #32]	; (6684 <att_handle_write_rsp+0x38>)
    6662:	4b09      	ldr	r3, [pc, #36]	; (6688 <att_handle_write_rsp+0x3c>)
    6664:	4909      	ldr	r1, [pc, #36]	; (668c <att_handle_write_rsp+0x40>)
    6666:	480a      	ldr	r0, [pc, #40]	; (6690 <att_handle_write_rsp+0x44>)
    6668:	f7fa fc90 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    666c:	89a2      	ldrh	r2, [r4, #12]
    666e:	68a1      	ldr	r1, [r4, #8]
    6670:	2300      	movs	r3, #0
    6672:	4628      	mov	r0, r5
}
    6674:	b005      	add	sp, #20
    6676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    667a:	f7ff bf05 	b.w	6488 <att_handle_rsp>
    667e:	bf00      	nop
    6680:	00015e19 	.word	0x00015e19
    6684:	0001723a 	.word	0x0001723a
    6688:	0001829b 	.word	0x0001829b
    668c:	00017241 	.word	0x00017241
    6690:	000177b2 	.word	0x000177b2

00006694 <att_handle_read_mult_rsp>:
{
    6694:	b530      	push	{r4, r5, lr}
    6696:	b085      	sub	sp, #20
    6698:	460c      	mov	r4, r1
    669a:	4605      	mov	r5, r0
    669c:	f00e fdf6 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    66a0:	4b09      	ldr	r3, [pc, #36]	; (66c8 <att_handle_read_mult_rsp+0x34>)
    66a2:	9302      	str	r3, [sp, #8]
    66a4:	9001      	str	r0, [sp, #4]
    66a6:	9300      	str	r3, [sp, #0]
    66a8:	4a08      	ldr	r2, [pc, #32]	; (66cc <att_handle_read_mult_rsp+0x38>)
    66aa:	4b09      	ldr	r3, [pc, #36]	; (66d0 <att_handle_read_mult_rsp+0x3c>)
    66ac:	4909      	ldr	r1, [pc, #36]	; (66d4 <att_handle_read_mult_rsp+0x40>)
    66ae:	480a      	ldr	r0, [pc, #40]	; (66d8 <att_handle_read_mult_rsp+0x44>)
    66b0:	f7fa fc6c 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    66b4:	89a2      	ldrh	r2, [r4, #12]
    66b6:	68a1      	ldr	r1, [r4, #8]
    66b8:	2300      	movs	r3, #0
    66ba:	4628      	mov	r0, r5
}
    66bc:	b005      	add	sp, #20
    66be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    66c2:	f7ff bee1 	b.w	6488 <att_handle_rsp>
    66c6:	bf00      	nop
    66c8:	00015e19 	.word	0x00015e19
    66cc:	0001723a 	.word	0x0001723a
    66d0:	00018282 	.word	0x00018282
    66d4:	00017241 	.word	0x00017241
    66d8:	000177b2 	.word	0x000177b2

000066dc <att_handle_read_blob_rsp>:
{
    66dc:	b530      	push	{r4, r5, lr}
    66de:	b085      	sub	sp, #20
    66e0:	460c      	mov	r4, r1
    66e2:	4605      	mov	r5, r0
    66e4:	f00e fdd2 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    66e8:	4b09      	ldr	r3, [pc, #36]	; (6710 <att_handle_read_blob_rsp+0x34>)
    66ea:	9302      	str	r3, [sp, #8]
    66ec:	9001      	str	r0, [sp, #4]
    66ee:	9300      	str	r3, [sp, #0]
    66f0:	4a08      	ldr	r2, [pc, #32]	; (6714 <att_handle_read_blob_rsp+0x38>)
    66f2:	4b09      	ldr	r3, [pc, #36]	; (6718 <att_handle_read_blob_rsp+0x3c>)
    66f4:	4909      	ldr	r1, [pc, #36]	; (671c <att_handle_read_blob_rsp+0x40>)
    66f6:	480a      	ldr	r0, [pc, #40]	; (6720 <att_handle_read_blob_rsp+0x44>)
    66f8:	f7fa fc48 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    66fc:	89a2      	ldrh	r2, [r4, #12]
    66fe:	68a1      	ldr	r1, [r4, #8]
    6700:	2300      	movs	r3, #0
    6702:	4628      	mov	r0, r5
}
    6704:	b005      	add	sp, #20
    6706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    670a:	f7ff bebd 	b.w	6488 <att_handle_rsp>
    670e:	bf00      	nop
    6710:	00015e19 	.word	0x00015e19
    6714:	0001723a 	.word	0x0001723a
    6718:	00018269 	.word	0x00018269
    671c:	00017241 	.word	0x00017241
    6720:	000177b2 	.word	0x000177b2

00006724 <att_handle_read_rsp>:
{
    6724:	b530      	push	{r4, r5, lr}
    6726:	b085      	sub	sp, #20
    6728:	460c      	mov	r4, r1
    672a:	4605      	mov	r5, r0
    672c:	f00e fdae 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    6730:	4b09      	ldr	r3, [pc, #36]	; (6758 <att_handle_read_rsp+0x34>)
    6732:	9302      	str	r3, [sp, #8]
    6734:	9001      	str	r0, [sp, #4]
    6736:	9300      	str	r3, [sp, #0]
    6738:	4a08      	ldr	r2, [pc, #32]	; (675c <att_handle_read_rsp+0x38>)
    673a:	4b09      	ldr	r3, [pc, #36]	; (6760 <att_handle_read_rsp+0x3c>)
    673c:	4909      	ldr	r1, [pc, #36]	; (6764 <att_handle_read_rsp+0x40>)
    673e:	480a      	ldr	r0, [pc, #40]	; (6768 <att_handle_read_rsp+0x44>)
    6740:	f7fa fc24 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    6744:	89a2      	ldrh	r2, [r4, #12]
    6746:	68a1      	ldr	r1, [r4, #8]
    6748:	2300      	movs	r3, #0
    674a:	4628      	mov	r0, r5
}
    674c:	b005      	add	sp, #20
    674e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    6752:	f7ff be99 	b.w	6488 <att_handle_rsp>
    6756:	bf00      	nop
    6758:	00015e19 	.word	0x00015e19
    675c:	0001723a 	.word	0x0001723a
    6760:	00018255 	.word	0x00018255
    6764:	00017241 	.word	0x00017241
    6768:	000177b2 	.word	0x000177b2

0000676c <att_handle_read_type_rsp>:
{
    676c:	b530      	push	{r4, r5, lr}
    676e:	b085      	sub	sp, #20
    6770:	460c      	mov	r4, r1
    6772:	4605      	mov	r5, r0
    6774:	f00e fd8a 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    6778:	4b09      	ldr	r3, [pc, #36]	; (67a0 <att_handle_read_type_rsp+0x34>)
    677a:	9302      	str	r3, [sp, #8]
    677c:	9001      	str	r0, [sp, #4]
    677e:	9300      	str	r3, [sp, #0]
    6780:	4a08      	ldr	r2, [pc, #32]	; (67a4 <att_handle_read_type_rsp+0x38>)
    6782:	4b09      	ldr	r3, [pc, #36]	; (67a8 <att_handle_read_type_rsp+0x3c>)
    6784:	4909      	ldr	r1, [pc, #36]	; (67ac <att_handle_read_type_rsp+0x40>)
    6786:	480a      	ldr	r0, [pc, #40]	; (67b0 <att_handle_read_type_rsp+0x44>)
    6788:	f7fa fc00 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    678c:	89a2      	ldrh	r2, [r4, #12]
    678e:	68a1      	ldr	r1, [r4, #8]
    6790:	2300      	movs	r3, #0
    6792:	4628      	mov	r0, r5
}
    6794:	b005      	add	sp, #20
    6796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    679a:	f7ff be75 	b.w	6488 <att_handle_rsp>
    679e:	bf00      	nop
    67a0:	00015e19 	.word	0x00015e19
    67a4:	0001723a 	.word	0x0001723a
    67a8:	0001823c 	.word	0x0001823c
    67ac:	00017241 	.word	0x00017241
    67b0:	000177b2 	.word	0x000177b2

000067b4 <att_handle_find_type_rsp>:
{
    67b4:	b530      	push	{r4, r5, lr}
    67b6:	b085      	sub	sp, #20
    67b8:	460c      	mov	r4, r1
    67ba:	4605      	mov	r5, r0
    67bc:	f00e fd66 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    67c0:	4b09      	ldr	r3, [pc, #36]	; (67e8 <att_handle_find_type_rsp+0x34>)
    67c2:	9302      	str	r3, [sp, #8]
    67c4:	9001      	str	r0, [sp, #4]
    67c6:	9300      	str	r3, [sp, #0]
    67c8:	4a08      	ldr	r2, [pc, #32]	; (67ec <att_handle_find_type_rsp+0x38>)
    67ca:	4b09      	ldr	r3, [pc, #36]	; (67f0 <att_handle_find_type_rsp+0x3c>)
    67cc:	4909      	ldr	r1, [pc, #36]	; (67f4 <att_handle_find_type_rsp+0x40>)
    67ce:	480a      	ldr	r0, [pc, #40]	; (67f8 <att_handle_find_type_rsp+0x44>)
    67d0:	f7fa fbdc 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    67d4:	89a2      	ldrh	r2, [r4, #12]
    67d6:	68a1      	ldr	r1, [r4, #8]
    67d8:	2300      	movs	r3, #0
    67da:	4628      	mov	r0, r5
}
    67dc:	b005      	add	sp, #20
    67de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    67e2:	f7ff be51 	b.w	6488 <att_handle_rsp>
    67e6:	bf00      	nop
    67e8:	00015e19 	.word	0x00015e19
    67ec:	0001723a 	.word	0x0001723a
    67f0:	00018223 	.word	0x00018223
    67f4:	00017241 	.word	0x00017241
    67f8:	000177b2 	.word	0x000177b2

000067fc <att_handle_find_info_rsp>:
{
    67fc:	b530      	push	{r4, r5, lr}
    67fe:	b085      	sub	sp, #20
    6800:	460c      	mov	r4, r1
    6802:	4605      	mov	r5, r0
    6804:	f00e fd42 	bl	1528c <_impl_k_current_get>
	BT_DBG("");
    6808:	4b09      	ldr	r3, [pc, #36]	; (6830 <att_handle_find_info_rsp+0x34>)
    680a:	9302      	str	r3, [sp, #8]
    680c:	9001      	str	r0, [sp, #4]
    680e:	9300      	str	r3, [sp, #0]
    6810:	4a08      	ldr	r2, [pc, #32]	; (6834 <att_handle_find_info_rsp+0x38>)
    6812:	4b09      	ldr	r3, [pc, #36]	; (6838 <att_handle_find_info_rsp+0x3c>)
    6814:	4909      	ldr	r1, [pc, #36]	; (683c <att_handle_find_info_rsp+0x40>)
    6816:	480a      	ldr	r0, [pc, #40]	; (6840 <att_handle_find_info_rsp+0x44>)
    6818:	f7fa fbb8 	bl	f8c <printk>
	return att_handle_rsp(att, buf->data, buf->len, 0);
    681c:	89a2      	ldrh	r2, [r4, #12]
    681e:	68a1      	ldr	r1, [r4, #8]
    6820:	2300      	movs	r3, #0
    6822:	4628      	mov	r0, r5
}
    6824:	b005      	add	sp, #20
    6826:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    682a:	f7ff be2d 	b.w	6488 <att_handle_rsp>
    682e:	bf00      	nop
    6830:	00015e19 	.word	0x00015e19
    6834:	0001723a 	.word	0x0001723a
    6838:	0001820a 	.word	0x0001820a
    683c:	00017241 	.word	0x00017241
    6840:	000177b2 	.word	0x000177b2

00006844 <att_mtu_rsp>:
{
    6844:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6848:	460f      	mov	r7, r1
	if (!att) {
    684a:	4604      	mov	r4, r0
    684c:	2800      	cmp	r0, #0
    684e:	d031      	beq.n	68b4 <att_mtu_rsp+0x70>
	rsp = (void *)buf->data;
    6850:	688e      	ldr	r6, [r1, #8]
	BT_DBG("Server MTU %u", mtu);
    6852:	4d1a      	ldr	r5, [pc, #104]	; (68bc <att_mtu_rsp+0x78>)
	mtu = sys_le16_to_cpu(rsp->mtu);
    6854:	f8b6 8000 	ldrh.w	r8, [r6]
    6858:	f00e fd18 	bl	1528c <_impl_k_current_get>
	BT_DBG("Server MTU %u", mtu);
    685c:	9503      	str	r5, [sp, #12]
    685e:	9001      	str	r0, [sp, #4]
    6860:	f8cd 8008 	str.w	r8, [sp, #8]
    6864:	9500      	str	r5, [sp, #0]
    6866:	4b16      	ldr	r3, [pc, #88]	; (68c0 <att_mtu_rsp+0x7c>)
    6868:	4a16      	ldr	r2, [pc, #88]	; (68c4 <att_mtu_rsp+0x80>)
    686a:	4917      	ldr	r1, [pc, #92]	; (68c8 <att_mtu_rsp+0x84>)
    686c:	4817      	ldr	r0, [pc, #92]	; (68cc <att_mtu_rsp+0x88>)
    686e:	f7fa fb8d 	bl	f8c <printk>
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    6872:	f1b8 0f16 	cmp.w	r8, #22
    6876:	d808      	bhi.n	688a <att_mtu_rsp+0x46>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    6878:	2200      	movs	r2, #0
    687a:	2304      	movs	r3, #4
    687c:	4611      	mov	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    687e:	4620      	mov	r0, r4
}
    6880:	b004      	add	sp, #16
    6882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return att_handle_rsp(att, rsp, buf->len, 0);
    6886:	f7ff bdff 	b.w	6488 <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    688a:	2317      	movs	r3, #23
    688c:	8763      	strh	r3, [r4, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    688e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    6892:	f00e fcfb 	bl	1528c <_impl_k_current_get>
	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
    6896:	9503      	str	r5, [sp, #12]
    6898:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    689a:	9302      	str	r3, [sp, #8]
    689c:	9001      	str	r0, [sp, #4]
    689e:	4b08      	ldr	r3, [pc, #32]	; (68c0 <att_mtu_rsp+0x7c>)
    68a0:	4a08      	ldr	r2, [pc, #32]	; (68c4 <att_mtu_rsp+0x80>)
    68a2:	4909      	ldr	r1, [pc, #36]	; (68c8 <att_mtu_rsp+0x84>)
    68a4:	9500      	str	r5, [sp, #0]
    68a6:	480a      	ldr	r0, [pc, #40]	; (68d0 <att_mtu_rsp+0x8c>)
    68a8:	f7fa fb70 	bl	f8c <printk>
	return att_handle_rsp(att, rsp, buf->len, 0);
    68ac:	2300      	movs	r3, #0
    68ae:	89ba      	ldrh	r2, [r7, #12]
    68b0:	4631      	mov	r1, r6
    68b2:	e7e4      	b.n	687e <att_mtu_rsp+0x3a>
}
    68b4:	b004      	add	sp, #16
    68b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68ba:	bf00      	nop
    68bc:	00015e19 	.word	0x00015e19
    68c0:	000180f4 	.word	0x000180f4
    68c4:	0001723a 	.word	0x0001723a
    68c8:	00017241 	.word	0x00017241
    68cc:	00018530 	.word	0x00018530
    68d0:	00018553 	.word	0x00018553

000068d4 <att_error_rsp>:
{
    68d4:	b530      	push	{r4, r5, lr}
    68d6:	b087      	sub	sp, #28
	rsp = (void *)buf->data;
    68d8:	688c      	ldr	r4, [r1, #8]
{
    68da:	4605      	mov	r5, r0
    68dc:	f00e fcd6 	bl	1528c <_impl_k_current_get>
	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
    68e0:	4b13      	ldr	r3, [pc, #76]	; (6930 <att_error_rsp+0x5c>)
    68e2:	9305      	str	r3, [sp, #20]
    68e4:	78e2      	ldrb	r2, [r4, #3]
    68e6:	9204      	str	r2, [sp, #16]
    68e8:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    68ec:	9203      	str	r2, [sp, #12]
    68ee:	7822      	ldrb	r2, [r4, #0]
    68f0:	9202      	str	r2, [sp, #8]
    68f2:	9001      	str	r0, [sp, #4]
    68f4:	9300      	str	r3, [sp, #0]
    68f6:	4a0f      	ldr	r2, [pc, #60]	; (6934 <att_error_rsp+0x60>)
    68f8:	4b0f      	ldr	r3, [pc, #60]	; (6938 <att_error_rsp+0x64>)
    68fa:	4910      	ldr	r1, [pc, #64]	; (693c <att_error_rsp+0x68>)
    68fc:	4810      	ldr	r0, [pc, #64]	; (6940 <att_error_rsp+0x6c>)
    68fe:	f7fa fb45 	bl	f8c <printk>
	if (!att->req) {
    6902:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    6906:	b182      	cbz	r2, 692a <att_error_rsp+0x56>
	if (att->req->buf) {
    6908:	6913      	ldr	r3, [r2, #16]
    690a:	b12b      	cbz	r3, 6918 <att_error_rsp+0x44>
	buf->data = buf->__buf + state->offset;
    690c:	8990      	ldrh	r0, [r2, #12]
    690e:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    6910:	89d2      	ldrh	r2, [r2, #14]
    6912:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    6914:	4401      	add	r1, r0
    6916:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    6918:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    691a:	2200      	movs	r2, #0
    691c:	4611      	mov	r1, r2
    691e:	4628      	mov	r0, r5
}
    6920:	b007      	add	sp, #28
    6922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_handle_rsp(att, NULL, 0, err);
    6926:	f7ff bdaf 	b.w	6488 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    692a:	230e      	movs	r3, #14
    692c:	e7f5      	b.n	691a <att_error_rsp+0x46>
    692e:	bf00      	nop
    6930:	00015e19 	.word	0x00015e19
    6934:	0001723a 	.word	0x0001723a
    6938:	000181fc 	.word	0x000181fc
    693c:	00017241 	.word	0x00017241
    6940:	00018402 	.word	0x00018402

00006944 <att_reset>:
{
    6944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6946:	f100 0394 	add.w	r3, r0, #148	; 0x94
    694a:	4605      	mov	r5, r0
    694c:	f3bf 8f5b 	dmb	ish
    6950:	e853 2f00 	ldrex	r2, [r3]
    6954:	f042 0204 	orr.w	r2, r2, #4
    6958:	e843 2100 	strex	r1, r2, [r3]
    695c:	2900      	cmp	r1, #0
    695e:	d1f7      	bne.n	6950 <att_reset+0xc>
    6960:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    6964:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6968:	4620      	mov	r0, r4
    696a:	f00e fc9e 	bl	152aa <_impl_k_sem_give>
    696e:	4620      	mov	r0, r4
    6970:	f00e fc9b 	bl	152aa <_impl_k_sem_give>
    6974:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    6978:	b98c      	cbnz	r4, 699e <att_reset+0x5a>
	if (!att->req) {
    697a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    697e:	2200      	movs	r2, #0
    6980:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    6984:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    6988:	b90b      	cbnz	r3, 698e <att_reset+0x4a>
}
    698a:	b003      	add	sp, #12
    698c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    698e:	230e      	movs	r3, #14
    6990:	4611      	mov	r1, r2
    6992:	4628      	mov	r0, r5
}
    6994:	b003      	add	sp, #12
    6996:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    699a:	f7ff bd75 	b.w	6488 <att_handle_rsp>
	return node->next;
    699e:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    69a0:	6867      	ldr	r7, [r4, #4]
    69a2:	b12f      	cbz	r7, 69b0 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    69a4:	2300      	movs	r3, #0
    69a6:	9400      	str	r4, [sp, #0]
    69a8:	461a      	mov	r2, r3
    69aa:	210e      	movs	r1, #14
    69ac:	4618      	mov	r0, r3
    69ae:	47b8      	blx	r7
		att_req_destroy(req);
    69b0:	4620      	mov	r0, r4
    69b2:	f7ff f8df 	bl	5b74 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    69b6:	2e00      	cmp	r6, #0
    69b8:	d0df      	beq.n	697a <att_reset+0x36>
    69ba:	4634      	mov	r4, r6
    69bc:	6836      	ldr	r6, [r6, #0]
    69be:	e7ef      	b.n	69a0 <att_reset+0x5c>

000069c0 <bt_att_disconnected>:
{
    69c0:	b510      	push	{r4, lr}
    69c2:	b086      	sub	sp, #24
    69c4:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    69c6:	f00e fc61 	bl	1528c <_impl_k_current_get>
	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);
    69ca:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
    69ce:	4b0a      	ldr	r3, [pc, #40]	; (69f8 <bt_att_disconnected+0x38>)
    69d0:	9304      	str	r3, [sp, #16]
    69d2:	9203      	str	r2, [sp, #12]
    69d4:	9001      	str	r0, [sp, #4]
    69d6:	9300      	str	r3, [sp, #0]
    69d8:	4a08      	ldr	r2, [pc, #32]	; (69fc <bt_att_disconnected+0x3c>)
    69da:	4b09      	ldr	r3, [pc, #36]	; (6a00 <bt_att_disconnected+0x40>)
    69dc:	4909      	ldr	r1, [pc, #36]	; (6a04 <bt_att_disconnected+0x44>)
    69de:	9402      	str	r4, [sp, #8]
    69e0:	4809      	ldr	r0, [pc, #36]	; (6a08 <bt_att_disconnected+0x48>)
    69e2:	f7fa fad3 	bl	f8c <printk>
	att_reset(att);
    69e6:	4620      	mov	r0, r4
    69e8:	f7ff ffac 	bl	6944 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    69ec:	6820      	ldr	r0, [r4, #0]
}
    69ee:	b006      	add	sp, #24
    69f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    69f4:	f001 bc80 	b.w	82f8 <bt_gatt_disconnected>
    69f8:	00015e19 	.word	0x00015e19
    69fc:	0001723a 	.word	0x0001723a
    6a00:	00018353 	.word	0x00018353
    6a04:	00017241 	.word	0x00017241
    6a08:	00018707 	.word	0x00018707

00006a0c <att_timeout>:
{
    6a0c:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    6a0e:	4b0b      	ldr	r3, [pc, #44]	; (6a3c <att_timeout+0x30>)
    6a10:	4a0b      	ldr	r2, [pc, #44]	; (6a40 <att_timeout+0x34>)
    6a12:	490c      	ldr	r1, [pc, #48]	; (6a44 <att_timeout+0x38>)
    6a14:	9301      	str	r3, [sp, #4]
{
    6a16:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    6a18:	9300      	str	r3, [sp, #0]
    6a1a:	480b      	ldr	r0, [pc, #44]	; (6a48 <att_timeout+0x3c>)
    6a1c:	4b0b      	ldr	r3, [pc, #44]	; (6a4c <att_timeout+0x40>)
    6a1e:	f7fa fab5 	bl	f8c <printk>
	att_reset(att);
    6a22:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    6a26:	f7ff ff8d 	bl	6944 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    6a2a:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    6a2e:	f001 fc63 	bl	82f8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    6a32:	2300      	movs	r3, #0
    6a34:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    6a38:	b002      	add	sp, #8
    6a3a:	bd10      	pop	{r4, pc}
    6a3c:	00015e19 	.word	0x00015e19
    6a40:	000171f2 	.word	0x000171f2
    6a44:	00017241 	.word	0x00017241
    6a48:	000186b6 	.word	0x000186b6
    6a4c:	00018336 	.word	0x00018336

00006a50 <bt_att_create_pdu>:
{
    6a50:	b530      	push	{r4, r5, lr}
    6a52:	b085      	sub	sp, #20
    6a54:	460d      	mov	r5, r1
    6a56:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    6a58:	f7ff fbe8 	bl	622c <att_chan_get>
	if (!att) {
    6a5c:	b1f0      	cbz	r0, 6a9c <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    6a5e:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    6a62:	3401      	adds	r4, #1
    6a64:	428c      	cmp	r4, r1
    6a66:	d90e      	bls.n	6a86 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    6a68:	4b0d      	ldr	r3, [pc, #52]	; (6aa0 <bt_att_create_pdu+0x50>)
    6a6a:	9303      	str	r3, [sp, #12]
    6a6c:	9402      	str	r4, [sp, #8]
    6a6e:	9101      	str	r1, [sp, #4]
    6a70:	9300      	str	r3, [sp, #0]
    6a72:	4a0c      	ldr	r2, [pc, #48]	; (6aa4 <bt_att_create_pdu+0x54>)
    6a74:	4b0c      	ldr	r3, [pc, #48]	; (6aa8 <bt_att_create_pdu+0x58>)
    6a76:	490d      	ldr	r1, [pc, #52]	; (6aac <bt_att_create_pdu+0x5c>)
    6a78:	480d      	ldr	r0, [pc, #52]	; (6ab0 <bt_att_create_pdu+0x60>)
    6a7a:	f7fa fa87 	bl	f8c <printk>
		return NULL;
    6a7e:	2400      	movs	r4, #0
}
    6a80:	4620      	mov	r0, r4
    6a82:	b005      	add	sp, #20
    6a84:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    6a86:	2100      	movs	r1, #0
    6a88:	4608      	mov	r0, r1
    6a8a:	f7fe fdea 	bl	5662 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6a8e:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    6a90:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6a92:	3008      	adds	r0, #8
    6a94:	f00d fbb2 	bl	141fc <net_buf_simple_add>
	hdr->code = op;
    6a98:	7005      	strb	r5, [r0, #0]
	return buf;
    6a9a:	e7f1      	b.n	6a80 <bt_att_create_pdu+0x30>
		return NULL;
    6a9c:	4604      	mov	r4, r0
    6a9e:	e7ef      	b.n	6a80 <bt_att_create_pdu+0x30>
    6aa0:	00015e19 	.word	0x00015e19
    6aa4:	0001727c 	.word	0x0001727c
    6aa8:	00018324 	.word	0x00018324
    6aac:	00017241 	.word	0x00017241
    6ab0:	0001872f 	.word	0x0001872f

00006ab4 <att_indicate>:
{
    6ab4:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6ab6:	6804      	ldr	r4, [r0, #0]
{
    6ab8:	b085      	sub	sp, #20
	handle = net_buf_pull_le16(buf);
    6aba:	f101 0008 	add.w	r0, r1, #8
    6abe:	f00d fbcc 	bl	1425a <net_buf_simple_pull_le16>
    6ac2:	4605      	mov	r5, r0
    6ac4:	f00e fbe2 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", handle);
    6ac8:	4b0c      	ldr	r3, [pc, #48]	; (6afc <att_indicate+0x48>)
    6aca:	9303      	str	r3, [sp, #12]
    6acc:	9001      	str	r0, [sp, #4]
    6ace:	9300      	str	r3, [sp, #0]
    6ad0:	4a0b      	ldr	r2, [pc, #44]	; (6b00 <att_indicate+0x4c>)
    6ad2:	4b0c      	ldr	r3, [pc, #48]	; (6b04 <att_indicate+0x50>)
    6ad4:	490c      	ldr	r1, [pc, #48]	; (6b08 <att_indicate+0x54>)
    6ad6:	9502      	str	r5, [sp, #8]
    6ad8:	480c      	ldr	r0, [pc, #48]	; (6b0c <att_indicate+0x58>)
    6ada:	f7fa fa57 	bl	f8c <printk>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    6ade:	2200      	movs	r2, #0
    6ae0:	211e      	movs	r1, #30
    6ae2:	4620      	mov	r0, r4
    6ae4:	f7ff ffb4 	bl	6a50 <bt_att_create_pdu>
	if (!buf) {
    6ae8:	4602      	mov	r2, r0
    6aea:	b120      	cbz	r0, 6af6 <att_indicate+0x42>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    6aec:	4b08      	ldr	r3, [pc, #32]	; (6b10 <att_indicate+0x5c>)
    6aee:	2104      	movs	r1, #4
    6af0:	4620      	mov	r0, r4
    6af2:	f7fe fdb9 	bl	5668 <bt_l2cap_send_cb>
}
    6af6:	2000      	movs	r0, #0
    6af8:	b005      	add	sp, #20
    6afa:	bd30      	pop	{r4, r5, pc}
    6afc:	00015e19 	.word	0x00015e19
    6b00:	0001723a 	.word	0x0001723a
    6b04:	000182f2 	.word	0x000182f2
    6b08:	00017241 	.word	0x00017241
    6b0c:	0001857a 	.word	0x0001857a
    6b10:	00006361 	.word	0x00006361

00006b14 <att_mtu_req>:
{
    6b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    6b18:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    6b1a:	f8d0 9000 	ldr.w	r9, [r0]
	mtu_client = sys_le16_to_cpu(req->mtu);
    6b1e:	881c      	ldrh	r4, [r3, #0]
	BT_DBG("Client MTU %u", mtu_client);
    6b20:	4d25      	ldr	r5, [pc, #148]	; (6bb8 <att_mtu_req+0xa4>)
{
    6b22:	b085      	sub	sp, #20
    6b24:	4606      	mov	r6, r0
    6b26:	f00e fbb1 	bl	1528c <_impl_k_current_get>
	BT_DBG("Client MTU %u", mtu_client);
    6b2a:	9503      	str	r5, [sp, #12]
    6b2c:	9001      	str	r0, [sp, #4]
    6b2e:	9402      	str	r4, [sp, #8]
    6b30:	9500      	str	r5, [sp, #0]
    6b32:	4b22      	ldr	r3, [pc, #136]	; (6bbc <att_mtu_req+0xa8>)
    6b34:	4a22      	ldr	r2, [pc, #136]	; (6bc0 <att_mtu_req+0xac>)
    6b36:	4923      	ldr	r1, [pc, #140]	; (6bc4 <att_mtu_req+0xb0>)
    6b38:	4823      	ldr	r0, [pc, #140]	; (6bc8 <att_mtu_req+0xb4>)
    6b3a:	f7fa fa27 	bl	f8c <printk>
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6b3e:	2c16      	cmp	r4, #22
    6b40:	d936      	bls.n	6bb0 <att_mtu_req+0x9c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    6b42:	2202      	movs	r2, #2
    6b44:	2103      	movs	r1, #3
    6b46:	4648      	mov	r0, r9
    6b48:	f7ff ff82 	bl	6a50 <bt_att_create_pdu>
	if (!pdu) {
    6b4c:	4680      	mov	r8, r0
    6b4e:	2800      	cmp	r0, #0
    6b50:	d030      	beq.n	6bb4 <att_mtu_req+0xa0>
    6b52:	f00e fb9b 	bl	1528c <_impl_k_current_get>
	BT_DBG("Server MTU %u", mtu_server);
    6b56:	2717      	movs	r7, #23
    6b58:	4b18      	ldr	r3, [pc, #96]	; (6bbc <att_mtu_req+0xa8>)
    6b5a:	4a19      	ldr	r2, [pc, #100]	; (6bc0 <att_mtu_req+0xac>)
    6b5c:	9001      	str	r0, [sp, #4]
    6b5e:	4919      	ldr	r1, [pc, #100]	; (6bc4 <att_mtu_req+0xb0>)
    6b60:	9503      	str	r5, [sp, #12]
    6b62:	9702      	str	r7, [sp, #8]
    6b64:	9500      	str	r5, [sp, #0]
    6b66:	4819      	ldr	r0, [pc, #100]	; (6bcc <att_mtu_req+0xb8>)
    6b68:	f7fa fa10 	bl	f8c <printk>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    6b6c:	2102      	movs	r1, #2
    6b6e:	f108 0008 	add.w	r0, r8, #8
    6b72:	f00d fb43 	bl	141fc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    6b76:	2400      	movs	r4, #0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    6b78:	4b15      	ldr	r3, [pc, #84]	; (6bd0 <att_mtu_req+0xbc>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    6b7a:	7007      	strb	r7, [r0, #0]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    6b7c:	4642      	mov	r2, r8
    6b7e:	2104      	movs	r1, #4
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    6b80:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    6b82:	4648      	mov	r0, r9
    6b84:	f7fe fd70 	bl	5668 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    6b88:	8777      	strh	r7, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    6b8a:	f8a6 705a 	strh.w	r7, [r6, #90]	; 0x5a
    6b8e:	f00e fb7d 	bl	1528c <_impl_k_current_get>
	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
    6b92:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
    6b94:	9302      	str	r3, [sp, #8]
    6b96:	9001      	str	r0, [sp, #4]
    6b98:	9503      	str	r5, [sp, #12]
    6b9a:	9500      	str	r5, [sp, #0]
    6b9c:	4b07      	ldr	r3, [pc, #28]	; (6bbc <att_mtu_req+0xa8>)
    6b9e:	4a08      	ldr	r2, [pc, #32]	; (6bc0 <att_mtu_req+0xac>)
    6ba0:	4908      	ldr	r1, [pc, #32]	; (6bc4 <att_mtu_req+0xb0>)
    6ba2:	480c      	ldr	r0, [pc, #48]	; (6bd4 <att_mtu_req+0xc0>)
    6ba4:	f7fa f9f2 	bl	f8c <printk>
	return 0;
    6ba8:	4620      	mov	r0, r4
}
    6baa:	b005      	add	sp, #20
    6bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6bb0:	2004      	movs	r0, #4
    6bb2:	e7fa      	b.n	6baa <att_mtu_req+0x96>
		return BT_ATT_ERR_UNLIKELY;
    6bb4:	200e      	movs	r0, #14
    6bb6:	e7f8      	b.n	6baa <att_mtu_req+0x96>
    6bb8:	00015e19 	.word	0x00015e19
    6bbc:	000180c0 	.word	0x000180c0
    6bc0:	0001723a 	.word	0x0001723a
    6bc4:	00017241 	.word	0x00017241
    6bc8:	0001850d 	.word	0x0001850d
    6bcc:	00018530 	.word	0x00018530
    6bd0:	000062f9 	.word	0x000062f9
    6bd4:	00018553 	.word	0x00018553

00006bd8 <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    6bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bdc:	4688      	mov	r8, r1
    6bde:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    6be0:	2101      	movs	r1, #1
    6be2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    6be4:	4605      	mov	r5, r0
    6be6:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    6be8:	f7ff ff32 	bl	6a50 <bt_att_create_pdu>
	if (!buf) {
    6bec:	4604      	mov	r4, r0
    6bee:	b180      	cbz	r0, 6c12 <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    6bf0:	2104      	movs	r1, #4
    6bf2:	3008      	adds	r0, #8
    6bf4:	f00d fb02 	bl	141fc <net_buf_simple_add>
	rsp->request = req;
    6bf8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    6bfc:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    6bfe:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6c02:	4622      	mov	r2, r4
    6c04:	4628      	mov	r0, r5
    6c06:	4b04      	ldr	r3, [pc, #16]	; (6c18 <send_err_rsp.part.10+0x40>)
    6c08:	2104      	movs	r1, #4
}
    6c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6c0e:	f7fe bd2b 	b.w	5668 <bt_l2cap_send_cb>
    6c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c16:	bf00      	nop
    6c18:	000062f9 	.word	0x000062f9

00006c1c <bt_att_recv>:
{
    6c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    6c20:	898b      	ldrh	r3, [r1, #12]
    6c22:	4c5d      	ldr	r4, [pc, #372]	; (6d98 <bt_att_recv+0x17c>)
{
    6c24:	b086      	sub	sp, #24
    6c26:	4607      	mov	r7, r0
    6c28:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    6c2a:	b953      	cbnz	r3, 6c42 <bt_att_recv+0x26>
		BT_ERR("Too small ATT PDU received");
    6c2c:	4b5b      	ldr	r3, [pc, #364]	; (6d9c <bt_att_recv+0x180>)
    6c2e:	4a5c      	ldr	r2, [pc, #368]	; (6da0 <bt_att_recv+0x184>)
    6c30:	495c      	ldr	r1, [pc, #368]	; (6da4 <bt_att_recv+0x188>)
    6c32:	485d      	ldr	r0, [pc, #372]	; (6da8 <bt_att_recv+0x18c>)
    6c34:	9401      	str	r4, [sp, #4]
    6c36:	9400      	str	r4, [sp, #0]
			BT_WARN("Ignoring unexpected request");
    6c38:	f7fa f9a8 	bl	f8c <printk>
}
    6c3c:	b006      	add	sp, #24
    6c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    6c42:	688e      	ldr	r6, [r1, #8]
    6c44:	f00e fb22 	bl	1528c <_impl_k_current_get>
	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);
    6c48:	9404      	str	r4, [sp, #16]
    6c4a:	89ab      	ldrh	r3, [r5, #12]
    6c4c:	9303      	str	r3, [sp, #12]
    6c4e:	7833      	ldrb	r3, [r6, #0]
    6c50:	4a56      	ldr	r2, [pc, #344]	; (6dac <bt_att_recv+0x190>)
    6c52:	9302      	str	r3, [sp, #8]
    6c54:	9001      	str	r0, [sp, #4]
    6c56:	4b51      	ldr	r3, [pc, #324]	; (6d9c <bt_att_recv+0x180>)
    6c58:	4952      	ldr	r1, [pc, #328]	; (6da4 <bt_att_recv+0x188>)
    6c5a:	9400      	str	r4, [sp, #0]
    6c5c:	4854      	ldr	r0, [pc, #336]	; (6db0 <bt_att_recv+0x194>)
    6c5e:	f7fa f995 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*hdr));
    6c62:	2101      	movs	r1, #1
    6c64:	f105 0008 	add.w	r0, r5, #8
    6c68:	f00d fae7 	bl	1423a <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    6c6c:	4a51      	ldr	r2, [pc, #324]	; (6db4 <bt_att_recv+0x198>)
    6c6e:	7830      	ldrb	r0, [r6, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6c70:	2300      	movs	r3, #0
    6c72:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    6c74:	f812 c033 	ldrb.w	ip, [r2, r3, lsl #3]
    6c78:	4584      	cmp	ip, r0
    6c7a:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    6c7e:	d11d      	bne.n	6cbc <bt_att_recv+0xa0>
		if (handler->type == ATT_REQUEST &&
    6c80:	4472      	add	r2, lr
    6c82:	f892 8002 	ldrb.w	r8, [r2, #2]
    6c86:	f1b8 0f01 	cmp.w	r8, #1
    6c8a:	d134      	bne.n	6cf6 <bt_att_recv+0xda>
    6c8c:	f3bf 8f5b 	dmb	ish
    6c90:	f107 0294 	add.w	r2, r7, #148	; 0x94
    6c94:	e852 3f00 	ldrex	r3, [r2]
    6c98:	f043 0001 	orr.w	r0, r3, #1
    6c9c:	e842 0c00 	strex	ip, r0, [r2]
    6ca0:	f1bc 0f00 	cmp.w	ip, #0
    6ca4:	d1f6      	bne.n	6c94 <bt_att_recv+0x78>
    6ca6:	f3bf 8f5b 	dmb	ish
    6caa:	07da      	lsls	r2, r3, #31
    6cac:	d53e      	bpl.n	6d2c <bt_att_recv+0x110>
			BT_WARN("Ignoring unexpected request");
    6cae:	9401      	str	r4, [sp, #4]
    6cb0:	9400      	str	r4, [sp, #0]
    6cb2:	4b3a      	ldr	r3, [pc, #232]	; (6d9c <bt_att_recv+0x180>)
    6cb4:	4a40      	ldr	r2, [pc, #256]	; (6db8 <bt_att_recv+0x19c>)
    6cb6:	493b      	ldr	r1, [pc, #236]	; (6da4 <bt_att_recv+0x188>)
    6cb8:	4840      	ldr	r0, [pc, #256]	; (6dbc <bt_att_recv+0x1a0>)
    6cba:	e7bd      	b.n	6c38 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6cbc:	3301      	adds	r3, #1
    6cbe:	2b1b      	cmp	r3, #27
    6cc0:	d1d8      	bne.n	6c74 <bt_att_recv+0x58>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    6cc2:	9402      	str	r4, [sp, #8]
    6cc4:	9001      	str	r0, [sp, #4]
    6cc6:	9400      	str	r4, [sp, #0]
    6cc8:	4b34      	ldr	r3, [pc, #208]	; (6d9c <bt_att_recv+0x180>)
    6cca:	4a3b      	ldr	r2, [pc, #236]	; (6db8 <bt_att_recv+0x19c>)
    6ccc:	4935      	ldr	r1, [pc, #212]	; (6da4 <bt_att_recv+0x188>)
    6cce:	483c      	ldr	r0, [pc, #240]	; (6dc0 <bt_att_recv+0x1a4>)
    6cd0:	f7fa f95c 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    6cd4:	7834      	ldrb	r4, [r6, #0]
    6cd6:	4620      	mov	r0, r4
    6cd8:	f7fe feca 	bl	5a70 <att_op_get_type>
    6cdc:	2800      	cmp	r0, #0
    6cde:	d0ad      	beq.n	6c3c <bt_att_recv+0x20>
	if (!req) {
    6ce0:	2c00      	cmp	r4, #0
    6ce2:	d0ab      	beq.n	6c3c <bt_att_recv+0x20>
    6ce4:	2306      	movs	r3, #6
    6ce6:	2200      	movs	r2, #0
    6ce8:	4621      	mov	r1, r4
    6cea:	6838      	ldr	r0, [r7, #0]
}
    6cec:	b006      	add	sp, #24
    6cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6cf2:	f7ff bf71 	b.w	6bd8 <send_err_rsp.part.10>
		} else if (handler->type == ATT_INDICATION &&
    6cf6:	f1b8 0f05 	cmp.w	r8, #5
    6cfa:	d117      	bne.n	6d2c <bt_att_recv+0x110>
    6cfc:	f3bf 8f5b 	dmb	ish
    6d00:	f107 0294 	add.w	r2, r7, #148	; 0x94
    6d04:	e852 3f00 	ldrex	r3, [r2]
    6d08:	f043 0002 	orr.w	r0, r3, #2
    6d0c:	e842 0c00 	strex	ip, r0, [r2]
    6d10:	f1bc 0f00 	cmp.w	ip, #0
    6d14:	d1f6      	bne.n	6d04 <bt_att_recv+0xe8>
    6d16:	f3bf 8f5b 	dmb	ish
    6d1a:	079b      	lsls	r3, r3, #30
    6d1c:	d506      	bpl.n	6d2c <bt_att_recv+0x110>
			BT_WARN("Ignoring unexpected indication");
    6d1e:	9401      	str	r4, [sp, #4]
    6d20:	9400      	str	r4, [sp, #0]
    6d22:	4b1e      	ldr	r3, [pc, #120]	; (6d9c <bt_att_recv+0x180>)
    6d24:	4a24      	ldr	r2, [pc, #144]	; (6db8 <bt_att_recv+0x19c>)
    6d26:	491f      	ldr	r1, [pc, #124]	; (6da4 <bt_att_recv+0x188>)
    6d28:	4826      	ldr	r0, [pc, #152]	; (6dc4 <bt_att_recv+0x1a8>)
    6d2a:	e785      	b.n	6c38 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    6d2c:	eb01 030e 	add.w	r3, r1, lr
    6d30:	89aa      	ldrh	r2, [r5, #12]
    6d32:	7859      	ldrb	r1, [r3, #1]
    6d34:	4291      	cmp	r1, r2
    6d36:	d910      	bls.n	6d5a <bt_att_recv+0x13e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    6d38:	9403      	str	r4, [sp, #12]
    6d3a:	7833      	ldrb	r3, [r6, #0]
    6d3c:	9302      	str	r3, [sp, #8]
    6d3e:	9201      	str	r2, [sp, #4]
    6d40:	9400      	str	r4, [sp, #0]
    6d42:	4b16      	ldr	r3, [pc, #88]	; (6d9c <bt_att_recv+0x180>)
    6d44:	4a16      	ldr	r2, [pc, #88]	; (6da0 <bt_att_recv+0x184>)
    6d46:	4917      	ldr	r1, [pc, #92]	; (6da4 <bt_att_recv+0x188>)
    6d48:	481f      	ldr	r0, [pc, #124]	; (6dc8 <bt_att_recv+0x1ac>)
    6d4a:	f7fa f91f 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    6d4e:	f1b8 0f01 	cmp.w	r8, #1
    6d52:	f47f af73 	bne.w	6c3c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    6d56:	2504      	movs	r5, #4
    6d58:	e00b      	b.n	6d72 <bt_att_recv+0x156>
		err = handler->func(att, buf);
    6d5a:	4629      	mov	r1, r5
    6d5c:	685b      	ldr	r3, [r3, #4]
    6d5e:	4638      	mov	r0, r7
    6d60:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6d62:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att, buf);
    6d66:	4605      	mov	r5, r0
	if (handler->type == ATT_REQUEST && err) {
    6d68:	f47f af68 	bne.w	6c3c <bt_att_recv+0x20>
    6d6c:	2800      	cmp	r0, #0
    6d6e:	f43f af65 	beq.w	6c3c <bt_att_recv+0x20>
    6d72:	f00e fa8b 	bl	1528c <_impl_k_current_get>
		BT_DBG("ATT error 0x%02x", err);
    6d76:	490b      	ldr	r1, [pc, #44]	; (6da4 <bt_att_recv+0x188>)
    6d78:	9001      	str	r0, [sp, #4]
    6d7a:	9403      	str	r4, [sp, #12]
    6d7c:	9502      	str	r5, [sp, #8]
    6d7e:	9400      	str	r4, [sp, #0]
    6d80:	4b06      	ldr	r3, [pc, #24]	; (6d9c <bt_att_recv+0x180>)
    6d82:	4a0a      	ldr	r2, [pc, #40]	; (6dac <bt_att_recv+0x190>)
    6d84:	4811      	ldr	r0, [pc, #68]	; (6dcc <bt_att_recv+0x1b0>)
    6d86:	f7fa f901 	bl	f8c <printk>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6d8a:	7831      	ldrb	r1, [r6, #0]
	if (!req) {
    6d8c:	2900      	cmp	r1, #0
    6d8e:	f43f af55 	beq.w	6c3c <bt_att_recv+0x20>
    6d92:	462b      	mov	r3, r5
    6d94:	2200      	movs	r2, #0
    6d96:	e7a8      	b.n	6cea <bt_att_recv+0xce>
    6d98:	00015e19 	.word	0x00015e19
    6d9c:	0001830b 	.word	0x0001830b
    6da0:	000171f2 	.word	0x000171f2
    6da4:	00017241 	.word	0x00017241
    6da8:	00018764 	.word	0x00018764
    6dac:	0001723a 	.word	0x0001723a
    6db0:	0001878f 	.word	0x0001878f
    6db4:	000188d8 	.word	0x000188d8
    6db8:	0001727c 	.word	0x0001727c
    6dbc:	000187c4 	.word	0x000187c4
    6dc0:	00018874 	.word	0x00018874
    6dc4:	000187f0 	.word	0x000187f0
    6dc8:	0001881f 	.word	0x0001881f
    6dcc:	0001884e 	.word	0x0001884e

00006dd0 <att_read_group_req>:
{
    6dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6dd4:	898b      	ldrh	r3, [r1, #12]
    6dd6:	2b06      	cmp	r3, #6
{
    6dd8:	b093      	sub	sp, #76	; 0x4c
    6dda:	4680      	mov	r8, r0
    6ddc:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6dde:	d001      	beq.n	6de4 <att_read_group_req+0x14>
    6de0:	2b14      	cmp	r3, #20
    6de2:	d179      	bne.n	6ed8 <att_read_group_req+0x108>
	req = (void *)buf->data;
    6de4:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    6de6:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6de8:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6dec:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6df0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6df2:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6df4:	af08      	add	r7, sp, #32
	net_buf_pull(buf, sizeof(*req));
    6df6:	f00d fa20 	bl	1423a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6dfa:	4621      	mov	r1, r4
    6dfc:	4638      	mov	r0, r7
    6dfe:	f7ff f9af 	bl	6160 <uuid_create>
    6e02:	2800      	cmp	r0, #0
    6e04:	d06a      	beq.n	6edc <att_read_group_req+0x10c>
    6e06:	f00e fa41 	bl	1528c <_impl_k_current_get>
    6e0a:	4604      	mov	r4, r0
	BT_DBG("start_handle 0x%04x end_handle 0x%04x type %s",
    6e0c:	4638      	mov	r0, r7
    6e0e:	f7fb f8f3 	bl	1ff8 <bt_uuid_str>
    6e12:	4b37      	ldr	r3, [pc, #220]	; (6ef0 <att_read_group_req+0x120>)
    6e14:	9305      	str	r3, [sp, #20]
    6e16:	9004      	str	r0, [sp, #16]
    6e18:	e88d 0078 	stmia.w	sp, {r3, r4, r5, r6}
    6e1c:	4a35      	ldr	r2, [pc, #212]	; (6ef4 <att_read_group_req+0x124>)
    6e1e:	4b36      	ldr	r3, [pc, #216]	; (6ef8 <att_read_group_req+0x128>)
    6e20:	4936      	ldr	r1, [pc, #216]	; (6efc <att_read_group_req+0x12c>)
    6e22:	4837      	ldr	r0, [pc, #220]	; (6f00 <att_read_group_req+0x130>)
    6e24:	f7fa f8b2 	bl	f8c <printk>
	if (!start || !end) {
    6e28:	2d00      	cmp	r5, #0
    6e2a:	d05a      	beq.n	6ee2 <att_read_group_req+0x112>
    6e2c:	2400      	movs	r4, #0
    6e2e:	2e00      	cmp	r6, #0
    6e30:	d056      	beq.n	6ee0 <att_read_group_req+0x110>
	if (start > end) {
    6e32:	42b5      	cmp	r5, r6
    6e34:	d855      	bhi.n	6ee2 <att_read_group_req+0x112>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6e36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6e3a:	a906      	add	r1, sp, #24
    6e3c:	4638      	mov	r0, r7
    6e3e:	f88d 4018 	strb.w	r4, [sp, #24]
    6e42:	f8ad 301a 	strh.w	r3, [sp, #26]
    6e46:	f7fb f857 	bl	1ef8 <bt_uuid_cmp>
    6e4a:	bb38      	cbnz	r0, 6e9c <att_read_group_req+0xcc>
	struct bt_conn *conn = att->chan.chan.conn;
    6e4c:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    6e50:	2214      	movs	r2, #20
    6e52:	2100      	movs	r1, #0
    6e54:	a80d      	add	r0, sp, #52	; 0x34
    6e56:	f7fa fefd 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6e5a:	2201      	movs	r2, #1
    6e5c:	2111      	movs	r1, #17
    6e5e:	4648      	mov	r0, r9
    6e60:	f7ff fdf6 	bl	6a50 <bt_att_create_pdu>
    6e64:	900f      	str	r0, [sp, #60]	; 0x3c
	if (!data.buf) {
    6e66:	2800      	cmp	r0, #0
    6e68:	d038      	beq.n	6edc <att_read_group_req+0x10c>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6e6a:	2101      	movs	r1, #1
    6e6c:	3008      	adds	r0, #8
	data.uuid = uuid;
    6e6e:	970e      	str	r7, [sp, #56]	; 0x38
	data.att = att;
    6e70:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6e74:	f00d f9c2 	bl	141fc <net_buf_simple_add>
	data.rsp->len = 0;
    6e78:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6e7a:	9010      	str	r0, [sp, #64]	; 0x40
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6e7c:	ab0d      	add	r3, sp, #52	; 0x34
	data.rsp->len = 0;
    6e7e:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6e80:	4a20      	ldr	r2, [pc, #128]	; (6f04 <att_read_group_req+0x134>)
	data.group = NULL;
    6e82:	9711      	str	r7, [sp, #68]	; 0x44
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6e84:	4631      	mov	r1, r6
    6e86:	4628      	mov	r0, r5
    6e88:	f001 f914 	bl	80b4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6e8e:	781c      	ldrb	r4, [r3, #0]
    6e90:	b9d4      	cbnz	r4, 6ec8 <att_read_group_req+0xf8>
		net_buf_unref(data.buf);
    6e92:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6e94:	f00d f980 	bl	14198 <net_buf_unref>
    6e98:	230a      	movs	r3, #10
    6e9a:	e00c      	b.n	6eb6 <att_read_group_req+0xe6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6e9c:	f642 0301 	movw	r3, #10241	; 0x2801
    6ea0:	a907      	add	r1, sp, #28
    6ea2:	4638      	mov	r0, r7
    6ea4:	f88d 401c 	strb.w	r4, [sp, #28]
    6ea8:	f8ad 301e 	strh.w	r3, [sp, #30]
    6eac:	f7fb f824 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6eb0:	2800      	cmp	r0, #0
    6eb2:	d0cb      	beq.n	6e4c <att_read_group_req+0x7c>
    6eb4:	2310      	movs	r3, #16
    6eb6:	462a      	mov	r2, r5
    6eb8:	2110      	movs	r1, #16
    6eba:	4648      	mov	r0, r9
    6ebc:	f7ff fe8c 	bl	6bd8 <send_err_rsp.part.10>
}
    6ec0:	4620      	mov	r0, r4
    6ec2:	b013      	add	sp, #76	; 0x4c
    6ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6ec8:	4b0f      	ldr	r3, [pc, #60]	; (6f08 <att_read_group_req+0x138>)
    6eca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6ecc:	2104      	movs	r1, #4
    6ece:	4648      	mov	r0, r9
    6ed0:	f7fe fbca 	bl	5668 <bt_l2cap_send_cb>
		return 0;
    6ed4:	2400      	movs	r4, #0
    6ed6:	e7f3      	b.n	6ec0 <att_read_group_req+0xf0>
		return BT_ATT_ERR_INVALID_PDU;
    6ed8:	2404      	movs	r4, #4
    6eda:	e7f1      	b.n	6ec0 <att_read_group_req+0xf0>
		return BT_ATT_ERR_UNLIKELY;
    6edc:	240e      	movs	r4, #14
    6ede:	e7ef      	b.n	6ec0 <att_read_group_req+0xf0>
			*err = 0;
    6ee0:	4635      	mov	r5, r6
    6ee2:	2301      	movs	r3, #1
    6ee4:	462a      	mov	r2, r5
    6ee6:	2110      	movs	r1, #16
    6ee8:	4648      	mov	r0, r9
    6eea:	f7ff fe75 	bl	6bd8 <send_err_rsp.part.10>
    6eee:	e7f1      	b.n	6ed4 <att_read_group_req+0x104>
    6ef0:	00015e19 	.word	0x00015e19
    6ef4:	0001723a 	.word	0x0001723a
    6ef8:	000181af 	.word	0x000181af
    6efc:	00017241 	.word	0x00017241
    6f00:	000185c1 	.word	0x000185c1
    6f04:	00005c09 	.word	0x00005c09
    6f08:	000062f9 	.word	0x000062f9

00006f0c <att_read_mult_req>:
{
    6f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(&data, 0, sizeof(data));
    6f10:	2214      	movs	r2, #20
{
    6f12:	b08b      	sub	sp, #44	; 0x2c
	struct bt_conn *conn = att->chan.chan.conn;
    6f14:	6805      	ldr	r5, [r0, #0]
{
    6f16:	4604      	mov	r4, r0
    6f18:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    6f1a:	eb0d 0002 	add.w	r0, sp, r2
    6f1e:	2100      	movs	r1, #0
    6f20:	f7fa fe98 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    6f24:	2200      	movs	r2, #0
    6f26:	210f      	movs	r1, #15
    6f28:	4628      	mov	r0, r5
    6f2a:	f7ff fd91 	bl	6a50 <bt_att_create_pdu>
    6f2e:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
    6f30:	2800      	cmp	r0, #0
    6f32:	d03b      	beq.n	6fac <att_read_mult_req+0xa0>
		BT_DBG("handle 0x%04x ", handle);
    6f34:	4f1e      	ldr	r7, [pc, #120]	; (6fb0 <att_read_mult_req+0xa4>)
    6f36:	f8df 808c 	ldr.w	r8, [pc, #140]	; 6fc4 <att_read_mult_req+0xb8>
    6f3a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 6fc8 <att_read_mult_req+0xbc>
	data.att = att;
    6f3e:	9405      	str	r4, [sp, #20]
	while (buf->len >= sizeof(u16_t)) {
    6f40:	89b3      	ldrh	r3, [r6, #12]
    6f42:	2b01      	cmp	r3, #1
    6f44:	d806      	bhi.n	6f54 <att_read_mult_req+0x48>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6f46:	4b1b      	ldr	r3, [pc, #108]	; (6fb4 <att_read_mult_req+0xa8>)
    6f48:	9a07      	ldr	r2, [sp, #28]
    6f4a:	2104      	movs	r1, #4
    6f4c:	4628      	mov	r0, r5
    6f4e:	f7fe fb8b 	bl	5668 <bt_l2cap_send_cb>
    6f52:	e027      	b.n	6fa4 <att_read_mult_req+0x98>
		handle = net_buf_pull_le16(buf);
    6f54:	f106 0008 	add.w	r0, r6, #8
    6f58:	f00d f97f 	bl	1425a <net_buf_simple_pull_le16>
    6f5c:	4604      	mov	r4, r0
    6f5e:	f00e f995 	bl	1528c <_impl_k_current_get>
		BT_DBG("handle 0x%04x ", handle);
    6f62:	4643      	mov	r3, r8
    6f64:	9001      	str	r0, [sp, #4]
    6f66:	464a      	mov	r2, r9
    6f68:	4913      	ldr	r1, [pc, #76]	; (6fb8 <att_read_mult_req+0xac>)
    6f6a:	9703      	str	r7, [sp, #12]
    6f6c:	9402      	str	r4, [sp, #8]
    6f6e:	9700      	str	r7, [sp, #0]
    6f70:	4812      	ldr	r0, [pc, #72]	; (6fbc <att_read_mult_req+0xb0>)
    6f72:	f7fa f80b 	bl	f8c <printk>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6f76:	2301      	movs	r3, #1
    6f78:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6f7c:	4a10      	ldr	r2, [pc, #64]	; (6fc0 <att_read_mult_req+0xb4>)
    6f7e:	ab05      	add	r3, sp, #20
    6f80:	4621      	mov	r1, r4
    6f82:	4620      	mov	r0, r4
    6f84:	f001 f896 	bl	80b4 <bt_gatt_foreach_attr>
		if (data.err) {
    6f88:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	d0d7      	beq.n	6f40 <att_read_mult_req+0x34>
			net_buf_unref(data.buf);
    6f90:	9807      	ldr	r0, [sp, #28]
    6f92:	f00d f901 	bl	14198 <net_buf_unref>
    6f96:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    6f9a:	4622      	mov	r2, r4
    6f9c:	210e      	movs	r1, #14
    6f9e:	4628      	mov	r0, r5
    6fa0:	f7ff fe1a 	bl	6bd8 <send_err_rsp.part.10>
	return 0;
    6fa4:	2000      	movs	r0, #0
}
    6fa6:	b00b      	add	sp, #44	; 0x2c
    6fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    6fac:	200e      	movs	r0, #14
    6fae:	e7fa      	b.n	6fa6 <att_read_mult_req+0x9a>
    6fb0:	00015e19 	.word	0x00015e19
    6fb4:	000062f9 	.word	0x000062f9
    6fb8:	00017241 	.word	0x00017241
    6fbc:	00018604 	.word	0x00018604
    6fc0:	00005fdd 	.word	0x00005fdd
    6fc4:	0001818f 	.word	0x0001818f
    6fc8:	0001723a 	.word	0x0001723a

00006fcc <att_read_rsp>:
{
    6fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fd0:	4607      	mov	r7, r0
    6fd2:	b086      	sub	sp, #24
    6fd4:	460c      	mov	r4, r1
    6fd6:	4690      	mov	r8, r2
	if (!handle) {
    6fd8:	461d      	mov	r5, r3
    6fda:	b3a3      	cbz	r3, 7046 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    6fdc:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    6fde:	2214      	movs	r2, #20
    6fe0:	2100      	movs	r1, #0
    6fe2:	a801      	add	r0, sp, #4
    6fe4:	f7fa fe36 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6fe8:	2200      	movs	r2, #0
    6fea:	4641      	mov	r1, r8
    6fec:	4630      	mov	r0, r6
    6fee:	f7ff fd2f 	bl	6a50 <bt_att_create_pdu>
    6ff2:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6ff4:	b348      	cbz	r0, 704a <att_read_rsp+0x7e>
	data.offset = offset;
    6ff6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    6ffa:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6ffe:	2301      	movs	r3, #1
    7000:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7004:	4a12      	ldr	r2, [pc, #72]	; (7050 <att_read_rsp+0x84>)
	data.att = att;
    7006:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7008:	ab01      	add	r3, sp, #4
    700a:	4629      	mov	r1, r5
    700c:	4628      	mov	r0, r5
    700e:	f001 f851 	bl	80b4 <bt_gatt_foreach_attr>
	if (data.err) {
    7012:	f89d 7014 	ldrb.w	r7, [sp, #20]
    7016:	b17f      	cbz	r7, 7038 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    7018:	9803      	ldr	r0, [sp, #12]
    701a:	f00d f8bd 	bl	14198 <net_buf_unref>
	if (!req) {
    701e:	b13c      	cbz	r4, 7030 <att_read_rsp+0x64>
    7020:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7024:	462a      	mov	r2, r5
    7026:	4621      	mov	r1, r4
    7028:	4630      	mov	r0, r6
    702a:	f7ff fdd5 	bl	6bd8 <send_err_rsp.part.10>
		return 0;
    702e:	2400      	movs	r4, #0
}
    7030:	4620      	mov	r0, r4
    7032:	b006      	add	sp, #24
    7034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    7038:	4b06      	ldr	r3, [pc, #24]	; (7054 <att_read_rsp+0x88>)
    703a:	9a03      	ldr	r2, [sp, #12]
    703c:	2104      	movs	r1, #4
    703e:	4630      	mov	r0, r6
    7040:	f7fe fb12 	bl	5668 <bt_l2cap_send_cb>
    7044:	e7f3      	b.n	702e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    7046:	2401      	movs	r4, #1
    7048:	e7f2      	b.n	7030 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    704a:	240e      	movs	r4, #14
    704c:	e7f0      	b.n	7030 <att_read_rsp+0x64>
    704e:	bf00      	nop
    7050:	00005fdd 	.word	0x00005fdd
    7054:	000062f9 	.word	0x000062f9

00007058 <att_read_blob_req>:
{
    7058:	b570      	push	{r4, r5, r6, lr}
	req = (void *)buf->data;
    705a:	688b      	ldr	r3, [r1, #8]
{
    705c:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(req->handle);
    705e:	881c      	ldrh	r4, [r3, #0]
	offset = sys_le16_to_cpu(req->offset);
    7060:	885d      	ldrh	r5, [r3, #2]
{
    7062:	4606      	mov	r6, r0
    7064:	f00e f912 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x offset %u", handle, offset);
    7068:	4b0a      	ldr	r3, [pc, #40]	; (7094 <att_read_blob_req+0x3c>)
    706a:	9304      	str	r3, [sp, #16]
    706c:	9001      	str	r0, [sp, #4]
    706e:	9300      	str	r3, [sp, #0]
    7070:	9503      	str	r5, [sp, #12]
    7072:	9402      	str	r4, [sp, #8]
    7074:	4b08      	ldr	r3, [pc, #32]	; (7098 <att_read_blob_req+0x40>)
    7076:	4a09      	ldr	r2, [pc, #36]	; (709c <att_read_blob_req+0x44>)
    7078:	4909      	ldr	r1, [pc, #36]	; (70a0 <att_read_blob_req+0x48>)
    707a:	480a      	ldr	r0, [pc, #40]	; (70a4 <att_read_blob_req+0x4c>)
    707c:	f7f9 ff86 	bl	f8c <printk>
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    7080:	9500      	str	r5, [sp, #0]
    7082:	4623      	mov	r3, r4
    7084:	220d      	movs	r2, #13
    7086:	210c      	movs	r1, #12
    7088:	4630      	mov	r0, r6
    708a:	f7ff ff9f 	bl	6fcc <att_read_rsp>
}
    708e:	b006      	add	sp, #24
    7090:	bd70      	pop	{r4, r5, r6, pc}
    7092:	bf00      	nop
    7094:	00015e19 	.word	0x00015e19
    7098:	0001817d 	.word	0x0001817d
    709c:	0001723a 	.word	0x0001723a
    70a0:	00017241 	.word	0x00017241
    70a4:	000189b0 	.word	0x000189b0

000070a8 <att_read_req>:
{
    70a8:	b530      	push	{r4, r5, lr}
	handle = sys_le16_to_cpu(req->handle);
    70aa:	688b      	ldr	r3, [r1, #8]
{
    70ac:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(req->handle);
    70ae:	881c      	ldrh	r4, [r3, #0]
{
    70b0:	4605      	mov	r5, r0
    70b2:	f00e f8eb 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", handle);
    70b6:	4b0a      	ldr	r3, [pc, #40]	; (70e0 <att_read_req+0x38>)
    70b8:	9303      	str	r3, [sp, #12]
    70ba:	9001      	str	r0, [sp, #4]
    70bc:	9300      	str	r3, [sp, #0]
    70be:	9402      	str	r4, [sp, #8]
    70c0:	4b08      	ldr	r3, [pc, #32]	; (70e4 <att_read_req+0x3c>)
    70c2:	4a09      	ldr	r2, [pc, #36]	; (70e8 <att_read_req+0x40>)
    70c4:	4909      	ldr	r1, [pc, #36]	; (70ec <att_read_req+0x44>)
    70c6:	480a      	ldr	r0, [pc, #40]	; (70f0 <att_read_req+0x48>)
    70c8:	f7f9 ff60 	bl	f8c <printk>
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    70cc:	2300      	movs	r3, #0
    70ce:	9300      	str	r3, [sp, #0]
    70d0:	220b      	movs	r2, #11
    70d2:	4623      	mov	r3, r4
    70d4:	210a      	movs	r1, #10
    70d6:	4628      	mov	r0, r5
    70d8:	f7ff ff78 	bl	6fcc <att_read_rsp>
}
    70dc:	b005      	add	sp, #20
    70de:	bd30      	pop	{r4, r5, pc}
    70e0:	00015e19 	.word	0x00015e19
    70e4:	00018170 	.word	0x00018170
    70e8:	0001723a 	.word	0x0001723a
    70ec:	00017241 	.word	0x00017241
    70f0:	0001857a 	.word	0x0001857a

000070f4 <att_read_type_req>:
{
    70f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    70f8:	898b      	ldrh	r3, [r1, #12]
    70fa:	2b06      	cmp	r3, #6
{
    70fc:	b093      	sub	sp, #76	; 0x4c
    70fe:	4607      	mov	r7, r0
    7100:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7102:	d001      	beq.n	7108 <att_read_type_req+0x14>
    7104:	2b14      	cmp	r3, #20
    7106:	d164      	bne.n	71d2 <att_read_type_req+0xde>
	req = (void *)buf->data;
    7108:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    710a:	2104      	movs	r1, #4
	req = (void *)buf->data;
    710c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    7110:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    7114:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7116:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    7118:	f10d 081c 	add.w	r8, sp, #28
	net_buf_pull(buf, sizeof(*req));
    711c:	f00d f88d 	bl	1423a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    7120:	4631      	mov	r1, r6
    7122:	4640      	mov	r0, r8
    7124:	f7ff f81c 	bl	6160 <uuid_create>
    7128:	b328      	cbz	r0, 7176 <att_read_type_req+0x82>
    712a:	f00e f8af 	bl	1528c <_impl_k_current_get>
    712e:	4606      	mov	r6, r0
	BT_DBG("start_handle 0x%04x end_handle 0x%04x type %s",
    7130:	4640      	mov	r0, r8
    7132:	f7fa ff61 	bl	1ff8 <bt_uuid_str>
    7136:	4b2b      	ldr	r3, [pc, #172]	; (71e4 <att_read_type_req+0xf0>)
    7138:	9305      	str	r3, [sp, #20]
    713a:	9004      	str	r0, [sp, #16]
    713c:	e88d 0048 	stmia.w	sp, {r3, r6}
    7140:	9403      	str	r4, [sp, #12]
    7142:	9502      	str	r5, [sp, #8]
    7144:	4b28      	ldr	r3, [pc, #160]	; (71e8 <att_read_type_req+0xf4>)
    7146:	4a29      	ldr	r2, [pc, #164]	; (71ec <att_read_type_req+0xf8>)
    7148:	4929      	ldr	r1, [pc, #164]	; (71f0 <att_read_type_req+0xfc>)
    714a:	482a      	ldr	r0, [pc, #168]	; (71f4 <att_read_type_req+0x100>)
    714c:	f7f9 ff1e 	bl	f8c <printk>
	if (!start || !end) {
    7150:	2d00      	cmp	r5, #0
    7152:	d041      	beq.n	71d8 <att_read_type_req+0xe4>
    7154:	2c00      	cmp	r4, #0
    7156:	d03e      	beq.n	71d6 <att_read_type_req+0xe2>
	if (start > end) {
    7158:	42a5      	cmp	r5, r4
    715a:	d83d      	bhi.n	71d8 <att_read_type_req+0xe4>
	struct bt_conn *conn = att->chan.chan.conn;
    715c:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    715e:	2218      	movs	r2, #24
    7160:	2100      	movs	r1, #0
    7162:	a80c      	add	r0, sp, #48	; 0x30
    7164:	f7fa fd76 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    7168:	2201      	movs	r2, #1
    716a:	2109      	movs	r1, #9
    716c:	4630      	mov	r0, r6
    716e:	f7ff fc6f 	bl	6a50 <bt_att_create_pdu>
    7172:	900e      	str	r0, [sp, #56]	; 0x38
	if (!data.buf) {
    7174:	b908      	cbnz	r0, 717a <att_read_type_req+0x86>
		return BT_ATT_ERR_UNLIKELY;
    7176:	240e      	movs	r4, #14
    7178:	e027      	b.n	71ca <att_read_type_req+0xd6>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    717a:	2101      	movs	r1, #1
    717c:	3008      	adds	r0, #8
	data.att = att;
    717e:	970c      	str	r7, [sp, #48]	; 0x30
	data.uuid = uuid;
    7180:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7184:	f00d f83a 	bl	141fc <net_buf_simple_add>
	data.rsp->len = 0;
    7188:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    718a:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    718c:	900f      	str	r0, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    718e:	4621      	mov	r1, r4
	data.rsp->len = 0;
    7190:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7192:	4a19      	ldr	r2, [pc, #100]	; (71f8 <att_read_type_req+0x104>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7194:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7198:	4628      	mov	r0, r5
    719a:	ab0c      	add	r3, sp, #48	; 0x30
    719c:	f000 ff8a 	bl	80b4 <bt_gatt_foreach_attr>
	if (data.err) {
    71a0:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
    71a4:	b15c      	cbz	r4, 71be <att_read_type_req+0xca>
		net_buf_unref(data.buf);
    71a6:	980e      	ldr	r0, [sp, #56]	; 0x38
    71a8:	f00c fff6 	bl	14198 <net_buf_unref>
    71ac:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    71b0:	462a      	mov	r2, r5
    71b2:	2108      	movs	r1, #8
    71b4:	4630      	mov	r0, r6
    71b6:	f7ff fd0f 	bl	6bd8 <send_err_rsp.part.10>
		return 0;
    71ba:	2400      	movs	r4, #0
    71bc:	e005      	b.n	71ca <att_read_type_req+0xd6>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    71be:	4b0f      	ldr	r3, [pc, #60]	; (71fc <att_read_type_req+0x108>)
    71c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    71c2:	2104      	movs	r1, #4
    71c4:	4630      	mov	r0, r6
    71c6:	f7fe fa4f 	bl	5668 <bt_l2cap_send_cb>
}
    71ca:	4620      	mov	r0, r4
    71cc:	b013      	add	sp, #76	; 0x4c
    71ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    71d2:	2404      	movs	r4, #4
    71d4:	e7f9      	b.n	71ca <att_read_type_req+0xd6>
			*err = 0;
    71d6:	4625      	mov	r5, r4
    71d8:	2301      	movs	r3, #1
    71da:	462a      	mov	r2, r5
    71dc:	2108      	movs	r1, #8
    71de:	4648      	mov	r0, r9
    71e0:	e7e9      	b.n	71b6 <att_read_type_req+0xc2>
    71e2:	bf00      	nop
    71e4:	00015e19 	.word	0x00015e19
    71e8:	00018156 	.word	0x00018156
    71ec:	0001723a 	.word	0x0001723a
    71f0:	00017241 	.word	0x00017241
    71f4:	000185c1 	.word	0x000185c1
    71f8:	0000607d 	.word	0x0000607d
    71fc:	000062f9 	.word	0x000062f9

00007200 <att_find_type_req>:
{
    7200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7204:	f8d0 9000 	ldr.w	r9, [r0]
{
    7208:	4680      	mov	r8, r0
	req = (void *)buf->data;
    720a:	4608      	mov	r0, r1
{
    720c:	b08f      	sub	sp, #60	; 0x3c
	req = (void *)buf->data;
    720e:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    7212:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    7214:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    7216:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7218:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    721a:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    721c:	f00d f80d 	bl	1423a <net_buf_simple_pull>
    7220:	4682      	mov	sl, r0
    7222:	f00e f833 	bl	1528c <_impl_k_current_get>
	BT_DBG("start_handle 0x%04x end_handle 0x%04x type %u", start_handle,
    7226:	4b34      	ldr	r3, [pc, #208]	; (72f8 <att_find_type_req+0xf8>)
    7228:	9305      	str	r3, [sp, #20]
    722a:	9001      	str	r0, [sp, #4]
    722c:	9300      	str	r3, [sp, #0]
    722e:	9604      	str	r6, [sp, #16]
    7230:	9703      	str	r7, [sp, #12]
    7232:	9502      	str	r5, [sp, #8]
    7234:	4b31      	ldr	r3, [pc, #196]	; (72fc <att_find_type_req+0xfc>)
    7236:	4a32      	ldr	r2, [pc, #200]	; (7300 <att_find_type_req+0x100>)
    7238:	4932      	ldr	r1, [pc, #200]	; (7304 <att_find_type_req+0x104>)
    723a:	4833      	ldr	r0, [pc, #204]	; (7308 <att_find_type_req+0x108>)
    723c:	f7f9 fea6 	bl	f8c <printk>
	if (!start || !end) {
    7240:	2d00      	cmp	r5, #0
    7242:	d057      	beq.n	72f4 <att_find_type_req+0xf4>
    7244:	2400      	movs	r4, #0
    7246:	2f00      	cmp	r7, #0
    7248:	d053      	beq.n	72f2 <att_find_type_req+0xf2>
	if (start > end) {
    724a:	42bd      	cmp	r5, r7
    724c:	d852      	bhi.n	72f4 <att_find_type_req+0xf4>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    724e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7252:	a908      	add	r1, sp, #32
    7254:	a807      	add	r0, sp, #28
    7256:	f8ad 601e 	strh.w	r6, [sp, #30]
    725a:	f88d 401c 	strb.w	r4, [sp, #28]
    725e:	f88d 4020 	strb.w	r4, [sp, #32]
    7262:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    7266:	f7fa fe47 	bl	1ef8 <bt_uuid_cmp>
    726a:	4606      	mov	r6, r0
    726c:	b148      	cbz	r0, 7282 <att_find_type_req+0x82>
    726e:	230a      	movs	r3, #10
    7270:	462a      	mov	r2, r5
    7272:	2106      	movs	r1, #6
    7274:	4648      	mov	r0, r9
    7276:	f7ff fcaf 	bl	6bd8 <send_err_rsp.part.10>
}
    727a:	4620      	mov	r0, r4
    727c:	b00f      	add	sp, #60	; 0x3c
    727e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    7282:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    7286:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    728a:	2214      	movs	r2, #20
    728c:	4631      	mov	r1, r6
    728e:	a809      	add	r0, sp, #36	; 0x24
    7290:	f7fa fce0 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    7294:	4632      	mov	r2, r6
    7296:	2107      	movs	r1, #7
    7298:	4648      	mov	r0, r9
    729a:	f7ff fbd9 	bl	6a50 <bt_att_create_pdu>
    729e:	900a      	str	r0, [sp, #40]	; 0x28
	if (!data.buf) {
    72a0:	b328      	cbz	r0, 72ee <att_find_type_req+0xee>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    72a2:	230a      	movs	r3, #10
    72a4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72a8:	4a18      	ldr	r2, [pc, #96]	; (730c <att_find_type_req+0x10c>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    72aa:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72ae:	ab09      	add	r3, sp, #36	; 0x24
    72b0:	4639      	mov	r1, r7
    72b2:	4628      	mov	r0, r5
	data.att = att;
    72b4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	data.group = NULL;
    72b8:	960b      	str	r6, [sp, #44]	; 0x2c
	data.value = value;
    72ba:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72be:	f000 fef9 	bl	80b4 <bt_gatt_foreach_attr>
	if (data.err) {
    72c2:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
    72c6:	b15c      	cbz	r4, 72e0 <att_find_type_req+0xe0>
		net_buf_unref(data.buf);
    72c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    72ca:	f00c ff65 	bl	14198 <net_buf_unref>
    72ce:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    72d2:	462a      	mov	r2, r5
    72d4:	2106      	movs	r1, #6
    72d6:	4648      	mov	r0, r9
    72d8:	f7ff fc7e 	bl	6bd8 <send_err_rsp.part.10>
		return 0;
    72dc:	2400      	movs	r4, #0
    72de:	e7cc      	b.n	727a <att_find_type_req+0x7a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    72e0:	4b0b      	ldr	r3, [pc, #44]	; (7310 <att_find_type_req+0x110>)
    72e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    72e4:	2104      	movs	r1, #4
    72e6:	4648      	mov	r0, r9
    72e8:	f7fe f9be 	bl	5668 <bt_l2cap_send_cb>
    72ec:	e7c5      	b.n	727a <att_find_type_req+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    72ee:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    72f0:	e7c3      	b.n	727a <att_find_type_req+0x7a>
			*err = 0;
    72f2:	463d      	mov	r5, r7
    72f4:	2301      	movs	r3, #1
    72f6:	e7ec      	b.n	72d2 <att_find_type_req+0xd2>
    72f8:	00015e19 	.word	0x00015e19
    72fc:	0001812c 	.word	0x0001812c
    7300:	0001723a 	.word	0x0001723a
    7304:	00017241 	.word	0x00017241
    7308:	0001847c 	.word	0x0001847c
    730c:	00005dd5 	.word	0x00005dd5
    7310:	000062f9 	.word	0x000062f9

00007314 <att_find_info_req>:
{
    7314:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7316:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    7318:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    731a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    731c:	885c      	ldrh	r4, [r3, #2]
{
    731e:	b08b      	sub	sp, #44	; 0x2c
    7320:	4607      	mov	r7, r0
    7322:	f00d ffb3 	bl	1528c <_impl_k_current_get>
	BT_DBG("start_handle 0x%04x end_handle 0x%04x", start_handle,
    7326:	4b1f      	ldr	r3, [pc, #124]	; (73a4 <att_find_info_req+0x90>)
    7328:	9304      	str	r3, [sp, #16]
    732a:	9001      	str	r0, [sp, #4]
    732c:	9300      	str	r3, [sp, #0]
    732e:	9403      	str	r4, [sp, #12]
    7330:	9502      	str	r5, [sp, #8]
    7332:	4b1d      	ldr	r3, [pc, #116]	; (73a8 <att_find_info_req+0x94>)
    7334:	4a1d      	ldr	r2, [pc, #116]	; (73ac <att_find_info_req+0x98>)
    7336:	491e      	ldr	r1, [pc, #120]	; (73b0 <att_find_info_req+0x9c>)
    7338:	481e      	ldr	r0, [pc, #120]	; (73b4 <att_find_info_req+0xa0>)
    733a:	f7f9 fe27 	bl	f8c <printk>
	if (!start || !end) {
    733e:	b375      	cbz	r5, 739e <att_find_info_req+0x8a>
    7340:	b364      	cbz	r4, 739c <att_find_info_req+0x88>
	if (start > end) {
    7342:	42a5      	cmp	r5, r4
    7344:	d82b      	bhi.n	739e <att_find_info_req+0x8a>
	struct bt_conn *conn = att->chan.chan.conn;
    7346:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    7348:	2210      	movs	r2, #16
    734a:	2100      	movs	r1, #0
    734c:	a806      	add	r0, sp, #24
    734e:	f7fa fc81 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    7352:	2200      	movs	r2, #0
    7354:	2105      	movs	r1, #5
    7356:	4630      	mov	r0, r6
    7358:	f7ff fb7a 	bl	6a50 <bt_att_create_pdu>
    735c:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
    735e:	b910      	cbnz	r0, 7366 <att_find_info_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
    7360:	200e      	movs	r0, #14
}
    7362:	b00b      	add	sp, #44	; 0x2c
    7364:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7366:	4621      	mov	r1, r4
    7368:	ab06      	add	r3, sp, #24
    736a:	4a13      	ldr	r2, [pc, #76]	; (73b8 <att_find_info_req+0xa4>)
	data.att = att;
    736c:	9706      	str	r7, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    736e:	4628      	mov	r0, r5
    7370:	f000 fea0 	bl	80b4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    7374:	9c08      	ldr	r4, [sp, #32]
    7376:	b94c      	cbnz	r4, 738c <att_find_info_req+0x78>
		net_buf_unref(data.buf);
    7378:	9807      	ldr	r0, [sp, #28]
    737a:	f00c ff0d 	bl	14198 <net_buf_unref>
    737e:	230a      	movs	r3, #10
    7380:	462a      	mov	r2, r5
    7382:	2104      	movs	r1, #4
    7384:	4630      	mov	r0, r6
    7386:	f7ff fc27 	bl	6bd8 <send_err_rsp.part.10>
    738a:	e005      	b.n	7398 <att_find_info_req+0x84>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    738c:	4b0b      	ldr	r3, [pc, #44]	; (73bc <att_find_info_req+0xa8>)
    738e:	9a07      	ldr	r2, [sp, #28]
    7390:	2104      	movs	r1, #4
    7392:	4630      	mov	r0, r6
    7394:	f7fe f968 	bl	5668 <bt_l2cap_send_cb>
		return 0;
    7398:	2000      	movs	r0, #0
    739a:	e7e2      	b.n	7362 <att_find_info_req+0x4e>
			*err = 0;
    739c:	4625      	mov	r5, r4
    739e:	2301      	movs	r3, #1
    73a0:	e7ee      	b.n	7380 <att_find_info_req+0x6c>
    73a2:	bf00      	nop
    73a4:	00015e19 	.word	0x00015e19
    73a8:	0001810d 	.word	0x0001810d
    73ac:	0001723a 	.word	0x0001723a
    73b0:	00017241 	.word	0x00017241
    73b4:	00018441 	.word	0x00018441
    73b8:	00005d09 	.word	0x00005d09
    73bc:	000062f9 	.word	0x000062f9

000073c0 <att_write_rsp.part.11.constprop.14>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    73c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73c4:	b086      	sub	sp, #24
    73c6:	4690      	mov	r8, r2
    73c8:	4605      	mov	r5, r0
    73ca:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    73cc:	2218      	movs	r2, #24
    73ce:	2100      	movs	r1, #0
    73d0:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    73d2:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    73d4:	f7fa fc3e 	bl	1c54 <memset>
	if (rsp) {
    73d8:	f1b8 0f00 	cmp.w	r8, #0
    73dc:	d11f      	bne.n	741e <att_write_rsp.part.11.constprop.14+0x5e>
	data.offset = offset;
    73de:	2300      	movs	r3, #0
    73e0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    73e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    73e6:	9303      	str	r3, [sp, #12]
	data.len = len;
    73e8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    73ec:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    73f0:	2301      	movs	r3, #1
    73f2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    73f6:	4a1b      	ldr	r2, [pc, #108]	; (7464 <att_write_rsp.part.11.constprop.14+0xa4>)
	data.conn = conn;
    73f8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    73fa:	466b      	mov	r3, sp
    73fc:	4639      	mov	r1, r7
    73fe:	4638      	mov	r0, r7
	data.op = op;
    7400:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7404:	f000 fe56 	bl	80b4 <bt_gatt_foreach_attr>
	if (data.err) {
    7408:	f89d 4014 	ldrb.w	r4, [sp, #20]
    740c:	b98c      	cbnz	r4, 7432 <att_write_rsp.part.11.constprop.14+0x72>
	if (data.buf) {
    740e:	9a01      	ldr	r2, [sp, #4]
    7410:	b1b2      	cbz	r2, 7440 <att_write_rsp.part.11.constprop.14+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    7412:	4b15      	ldr	r3, [pc, #84]	; (7468 <att_write_rsp.part.11.constprop.14+0xa8>)
    7414:	2104      	movs	r1, #4
    7416:	4628      	mov	r0, r5
    7418:	f7fe f926 	bl	5668 <bt_l2cap_send_cb>
    741c:	e011      	b.n	7442 <att_write_rsp.part.11.constprop.14+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    741e:	2200      	movs	r2, #0
    7420:	4641      	mov	r1, r8
    7422:	4628      	mov	r0, r5
    7424:	f7ff fb14 	bl	6a50 <bt_att_create_pdu>
    7428:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    742a:	2800      	cmp	r0, #0
    742c:	d1d7      	bne.n	73de <att_write_rsp.part.11.constprop.14+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    742e:	240e      	movs	r4, #14
    7430:	e007      	b.n	7442 <att_write_rsp.part.11.constprop.14+0x82>
		if (rsp) {
    7432:	f1b8 0f00 	cmp.w	r8, #0
    7436:	d00f      	beq.n	7458 <att_write_rsp.part.11.constprop.14+0x98>
			net_buf_unref(data.buf);
    7438:	9801      	ldr	r0, [sp, #4]
    743a:	f00c fead 	bl	14198 <net_buf_unref>
	if (!req) {
    743e:	b926      	cbnz	r6, 744a <att_write_rsp.part.11.constprop.14+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7440:	2400      	movs	r4, #0
}
    7442:	4620      	mov	r0, r4
    7444:	b006      	add	sp, #24
    7446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    744a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    744e:	463a      	mov	r2, r7
    7450:	4631      	mov	r1, r6
    7452:	4628      	mov	r0, r5
    7454:	f7ff fbc0 	bl	6bd8 <send_err_rsp.part.10>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7458:	2e18      	cmp	r6, #24
    745a:	d1f1      	bne.n	7440 <att_write_rsp.part.11.constprop.14+0x80>
    745c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    7460:	e7ef      	b.n	7442 <att_write_rsp.part.11.constprop.14+0x82>
    7462:	bf00      	nop
    7464:	00005f59 	.word	0x00005f59
    7468:	000062f9 	.word	0x000062f9

0000746c <att_signed_write_cmd>:
{
    746c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	handle = sys_le16_to_cpu(req->handle);
    7470:	460c      	mov	r4, r1
{
    7472:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(req->handle);
    7474:	f854 3f08 	ldr.w	r3, [r4, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    7478:	f8d0 8000 	ldr.w	r8, [r0]
	handle = sys_le16_to_cpu(req->handle);
    747c:	881f      	ldrh	r7, [r3, #0]
	BT_DBG("handle 0x%04x", handle);
    747e:	4e1e      	ldr	r6, [pc, #120]	; (74f8 <att_signed_write_cmd+0x8c>)
{
    7480:	460d      	mov	r5, r1
    7482:	f00d ff03 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", handle);
    7486:	4b1d      	ldr	r3, [pc, #116]	; (74fc <att_signed_write_cmd+0x90>)
    7488:	4a1d      	ldr	r2, [pc, #116]	; (7500 <att_signed_write_cmd+0x94>)
    748a:	9001      	str	r0, [sp, #4]
    748c:	491d      	ldr	r1, [pc, #116]	; (7504 <att_signed_write_cmd+0x98>)
    748e:	9603      	str	r6, [sp, #12]
    7490:	9702      	str	r7, [sp, #8]
    7492:	9600      	str	r6, [sp, #0]
    7494:	481c      	ldr	r0, [pc, #112]	; (7508 <att_signed_write_cmd+0x9c>)
    7496:	f7f9 fd79 	bl	f8c <printk>
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    749a:	2101      	movs	r1, #1
    749c:	4620      	mov	r0, r4
    749e:	f00c fec4 	bl	1422a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    74a2:	4629      	mov	r1, r5
    74a4:	4640      	mov	r0, r8
    74a6:	f000 ffa4 	bl	83f2 <bt_smp_sign_verify>
	if (err) {
    74aa:	4681      	mov	r9, r0
    74ac:	b158      	cbz	r0, 74c6 <att_signed_write_cmd+0x5a>
		BT_ERR("Error verifying data");
    74ae:	9601      	str	r6, [sp, #4]
    74b0:	9600      	str	r6, [sp, #0]
    74b2:	4b12      	ldr	r3, [pc, #72]	; (74fc <att_signed_write_cmd+0x90>)
    74b4:	4a15      	ldr	r2, [pc, #84]	; (750c <att_signed_write_cmd+0xa0>)
    74b6:	4913      	ldr	r1, [pc, #76]	; (7504 <att_signed_write_cmd+0x98>)
    74b8:	4815      	ldr	r0, [pc, #84]	; (7510 <att_signed_write_cmd+0xa4>)
    74ba:	f7f9 fd67 	bl	f8c <printk>
		return 0;
    74be:	2000      	movs	r0, #0
}
    74c0:	b005      	add	sp, #20
    74c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    74c6:	2101      	movs	r1, #1
    74c8:	4620      	mov	r0, r4
    74ca:	f00c feb6 	bl	1423a <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    74ce:	2102      	movs	r1, #2
    74d0:	4620      	mov	r0, r4
    74d2:	f00c feb2 	bl	1423a <net_buf_simple_pull>
	if (!handle) {
    74d6:	b167      	cbz	r7, 74f2 <att_signed_write_cmd+0x86>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    74d8:	7b2b      	ldrb	r3, [r5, #12]
    74da:	3b0c      	subs	r3, #12
    74dc:	b2db      	uxtb	r3, r3
    74de:	9301      	str	r3, [sp, #4]
    74e0:	68ab      	ldr	r3, [r5, #8]
    74e2:	9300      	str	r3, [sp, #0]
    74e4:	464a      	mov	r2, r9
    74e6:	463b      	mov	r3, r7
    74e8:	4649      	mov	r1, r9
    74ea:	4640      	mov	r0, r8
    74ec:	f7ff ff68 	bl	73c0 <att_write_rsp.part.11.constprop.14>
    74f0:	e7e6      	b.n	74c0 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    74f2:	2001      	movs	r0, #1
    74f4:	e7e4      	b.n	74c0 <att_signed_write_cmd+0x54>
    74f6:	bf00      	nop
    74f8:	00015e19 	.word	0x00015e19
    74fc:	000181e7 	.word	0x000181e7
    7500:	0001723a 	.word	0x0001723a
    7504:	00017241 	.word	0x00017241
    7508:	0001857a 	.word	0x0001857a
    750c:	000171f2 	.word	0x000171f2
    7510:	00018691 	.word	0x00018691

00007514 <att_write_cmd>:
{
    7514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7516:	6806      	ldr	r6, [r0, #0]
	handle = net_buf_pull_le16(buf);
    7518:	f101 0008 	add.w	r0, r1, #8
{
    751c:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    751e:	f00c fe9c 	bl	1425a <net_buf_simple_pull_le16>
    7522:	4604      	mov	r4, r0
    7524:	f00d feb2 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", handle);
    7528:	4b0c      	ldr	r3, [pc, #48]	; (755c <att_write_cmd+0x48>)
    752a:	9303      	str	r3, [sp, #12]
    752c:	9001      	str	r0, [sp, #4]
    752e:	9300      	str	r3, [sp, #0]
    7530:	9402      	str	r4, [sp, #8]
    7532:	4b0b      	ldr	r3, [pc, #44]	; (7560 <att_write_cmd+0x4c>)
    7534:	4a0b      	ldr	r2, [pc, #44]	; (7564 <att_write_cmd+0x50>)
    7536:	490c      	ldr	r1, [pc, #48]	; (7568 <att_write_cmd+0x54>)
    7538:	480c      	ldr	r0, [pc, #48]	; (756c <att_write_cmd+0x58>)
    753a:	f7f9 fd27 	bl	f8c <printk>
	if (!handle) {
    753e:	b15c      	cbz	r4, 7558 <att_write_cmd+0x44>
    7540:	7b2b      	ldrb	r3, [r5, #12]
    7542:	9301      	str	r3, [sp, #4]
    7544:	2200      	movs	r2, #0
    7546:	68ab      	ldr	r3, [r5, #8]
    7548:	9300      	str	r3, [sp, #0]
    754a:	4611      	mov	r1, r2
    754c:	4623      	mov	r3, r4
    754e:	4630      	mov	r0, r6
    7550:	f7ff ff36 	bl	73c0 <att_write_rsp.part.11.constprop.14>
}
    7554:	b004      	add	sp, #16
    7556:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    7558:	2001      	movs	r0, #1
    755a:	e7fb      	b.n	7554 <att_write_cmd+0x40>
    755c:	00015e19 	.word	0x00015e19
    7560:	000181d9 	.word	0x000181d9
    7564:	0001723a 	.word	0x0001723a
    7568:	00017241 	.word	0x00017241
    756c:	0001857a 	.word	0x0001857a

00007570 <att_write_req>:
{
    7570:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7572:	6806      	ldr	r6, [r0, #0]
	handle = net_buf_pull_le16(buf);
    7574:	f101 0008 	add.w	r0, r1, #8
{
    7578:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    757a:	f00c fe6e 	bl	1425a <net_buf_simple_pull_le16>
    757e:	4604      	mov	r4, r0
    7580:	f00d fe84 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x", handle);
    7584:	4b0c      	ldr	r3, [pc, #48]	; (75b8 <att_write_req+0x48>)
    7586:	9303      	str	r3, [sp, #12]
    7588:	9001      	str	r0, [sp, #4]
    758a:	9300      	str	r3, [sp, #0]
    758c:	9402      	str	r4, [sp, #8]
    758e:	4b0b      	ldr	r3, [pc, #44]	; (75bc <att_write_req+0x4c>)
    7590:	4a0b      	ldr	r2, [pc, #44]	; (75c0 <att_write_req+0x50>)
    7592:	490c      	ldr	r1, [pc, #48]	; (75c4 <att_write_req+0x54>)
    7594:	480c      	ldr	r0, [pc, #48]	; (75c8 <att_write_req+0x58>)
    7596:	f7f9 fcf9 	bl	f8c <printk>
	if (!handle) {
    759a:	b15c      	cbz	r4, 75b4 <att_write_req+0x44>
    759c:	7b2b      	ldrb	r3, [r5, #12]
    759e:	9301      	str	r3, [sp, #4]
    75a0:	68ab      	ldr	r3, [r5, #8]
    75a2:	9300      	str	r3, [sp, #0]
    75a4:	2213      	movs	r2, #19
    75a6:	4623      	mov	r3, r4
    75a8:	2112      	movs	r1, #18
    75aa:	4630      	mov	r0, r6
    75ac:	f7ff ff08 	bl	73c0 <att_write_rsp.part.11.constprop.14>
}
    75b0:	b004      	add	sp, #16
    75b2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    75b4:	2001      	movs	r0, #1
    75b6:	e7fb      	b.n	75b0 <att_write_req+0x40>
    75b8:	00015e19 	.word	0x00015e19
    75bc:	000181cb 	.word	0x000181cb
    75c0:	0001723a 	.word	0x0001723a
    75c4:	00017241 	.word	0x00017241
    75c8:	0001857a 	.word	0x0001857a

000075cc <bt_att_init>:

void bt_att_init(void)
{
    75cc:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    75ce:	4803      	ldr	r0, [pc, #12]	; (75dc <bt_att_init+0x10>)
    75d0:	f7fd ff32 	bl	5438 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    75d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    75d8:	f000 bcaa 	b.w	7f30 <bt_gatt_init>
    75dc:	20003be0 	.word	0x20003be0

000075e0 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    75e0:	b530      	push	{r4, r5, lr}
    75e2:	b087      	sub	sp, #28
    75e4:	4605      	mov	r5, r0
    75e6:	460c      	mov	r4, r1
    75e8:	f00d fe50 	bl	1528c <_impl_k_current_get>
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);
    75ec:	4b18      	ldr	r3, [pc, #96]	; (7650 <bt_att_req_send+0x70>)
    75ee:	9304      	str	r3, [sp, #16]
    75f0:	9001      	str	r0, [sp, #4]
    75f2:	9300      	str	r3, [sp, #0]
    75f4:	9403      	str	r4, [sp, #12]
    75f6:	9502      	str	r5, [sp, #8]
    75f8:	4b16      	ldr	r3, [pc, #88]	; (7654 <bt_att_req_send+0x74>)
    75fa:	4a17      	ldr	r2, [pc, #92]	; (7658 <bt_att_req_send+0x78>)
    75fc:	4917      	ldr	r1, [pc, #92]	; (765c <bt_att_req_send+0x7c>)
    75fe:	4818      	ldr	r0, [pc, #96]	; (7660 <bt_att_req_send+0x80>)
    7600:	f7f9 fcc4 	bl	f8c <printk>

	if (!conn || !req) {
    7604:	b1f5      	cbz	r5, 7644 <bt_att_req_send+0x64>
    7606:	b1ec      	cbz	r4, 7644 <bt_att_req_send+0x64>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    7608:	4628      	mov	r0, r5
    760a:	f7fe fe0f 	bl	622c <att_chan_get>
	if (!att) {
    760e:	4603      	mov	r3, r0
    7610:	b1d8      	cbz	r0, 764a <bt_att_req_send+0x6a>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    7612:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    7616:	b17a      	cbz	r2, 7638 <bt_att_req_send+0x58>
	parent->next = child;
    7618:	2000      	movs	r0, #0
    761a:	6020      	str	r0, [r4, #0]
    761c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    7620:	b932      	cbnz	r2, 7630 <bt_att_req_send+0x50>
	list->tail = node;
    7622:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    7626:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    762a:	4610      	mov	r0, r2
	}

	return att_send_req(att, req);
}
    762c:	b007      	add	sp, #28
    762e:	bd30      	pop	{r4, r5, pc}
	parent->next = child;
    7630:	6014      	str	r4, [r2, #0]
	list->tail = node;
    7632:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    7636:	e7f9      	b.n	762c <bt_att_req_send+0x4c>
	return att_send_req(att, req);
    7638:	4621      	mov	r1, r4
}
    763a:	b007      	add	sp, #28
    763c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return att_send_req(att, req);
    7640:	f7fe bec2 	b.w	63c8 <att_send_req>
		return -EINVAL;
    7644:	f06f 0015 	mvn.w	r0, #21
    7648:	e7f0      	b.n	762c <bt_att_req_send+0x4c>
		return -ENOTCONN;
    764a:	f06f 0038 	mvn.w	r0, #56	; 0x38
    764e:	e7ed      	b.n	762c <bt_att_req_send+0x4c>
    7650:	00015e19 	.word	0x00015e19
    7654:	00018375 	.word	0x00018375
    7658:	0001723a 	.word	0x0001723a
    765c:	00017241 	.word	0x00017241
    7660:	0001889c 	.word	0x0001889c

00007664 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    7664:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    7666:	2000      	movs	r0, #0
    7668:	4770      	bx	lr

0000766a <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    766a:	b410      	push	{r4}
    766c:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    766e:	699c      	ldr	r4, [r3, #24]
    7670:	460a      	mov	r2, r1
    7672:	6959      	ldr	r1, [r3, #20]
    7674:	4623      	mov	r3, r4
}
    7676:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    7678:	4718      	bx	r3
	...

0000767c <sc_ccc_cfg_changed>:
{
    767c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    767e:	460c      	mov	r4, r1
    7680:	f00d fe04 	bl	1528c <_impl_k_current_get>
	BT_DBG("value 0x%04x", value);
    7684:	4b06      	ldr	r3, [pc, #24]	; (76a0 <sc_ccc_cfg_changed+0x24>)
    7686:	9303      	str	r3, [sp, #12]
    7688:	9001      	str	r0, [sp, #4]
    768a:	9300      	str	r3, [sp, #0]
    768c:	9402      	str	r4, [sp, #8]
    768e:	4b05      	ldr	r3, [pc, #20]	; (76a4 <sc_ccc_cfg_changed+0x28>)
    7690:	4a05      	ldr	r2, [pc, #20]	; (76a8 <sc_ccc_cfg_changed+0x2c>)
    7692:	4906      	ldr	r1, [pc, #24]	; (76ac <sc_ccc_cfg_changed+0x30>)
    7694:	4806      	ldr	r0, [pc, #24]	; (76b0 <sc_ccc_cfg_changed+0x34>)
    7696:	f7f9 fc79 	bl	f8c <printk>
}
    769a:	b004      	add	sp, #16
    769c:	bd10      	pop	{r4, pc}
    769e:	bf00      	nop
    76a0:	00015e19 	.word	0x00015e19
    76a4:	000189dd 	.word	0x000189dd
    76a8:	0001723a 	.word	0x0001723a
    76ac:	00017241 	.word	0x00017241
    76b0:	00018d72 	.word	0x00018d72

000076b4 <update_range>:
{
    76b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76b6:	460c      	mov	r4, r1
    76b8:	b089      	sub	sp, #36	; 0x24
    76ba:	4617      	mov	r7, r2
    76bc:	4606      	mov	r6, r0
    76be:	461d      	mov	r5, r3
    76c0:	f00d fde4 	bl	1528c <_impl_k_current_get>
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
    76c4:	8822      	ldrh	r2, [r4, #0]
    76c6:	4b0f      	ldr	r3, [pc, #60]	; (7704 <update_range+0x50>)
    76c8:	9203      	str	r2, [sp, #12]
    76ca:	8832      	ldrh	r2, [r6, #0]
    76cc:	9306      	str	r3, [sp, #24]
    76ce:	9202      	str	r2, [sp, #8]
    76d0:	9001      	str	r0, [sp, #4]
    76d2:	9300      	str	r3, [sp, #0]
    76d4:	9505      	str	r5, [sp, #20]
    76d6:	4b0c      	ldr	r3, [pc, #48]	; (7708 <update_range+0x54>)
    76d8:	9704      	str	r7, [sp, #16]
    76da:	4a0c      	ldr	r2, [pc, #48]	; (770c <update_range+0x58>)
    76dc:	490c      	ldr	r1, [pc, #48]	; (7710 <update_range+0x5c>)
    76de:	480d      	ldr	r0, [pc, #52]	; (7714 <update_range+0x60>)
    76e0:	f7f9 fc54 	bl	f8c <printk>
	if (new_start >= *start && new_end <= *end) {
    76e4:	8833      	ldrh	r3, [r6, #0]
    76e6:	42bb      	cmp	r3, r7
    76e8:	d805      	bhi.n	76f6 <update_range+0x42>
    76ea:	8823      	ldrh	r3, [r4, #0]
    76ec:	42ab      	cmp	r3, r5
    76ee:	d303      	bcc.n	76f8 <update_range+0x44>
		return false;
    76f0:	2000      	movs	r0, #0
}
    76f2:	b009      	add	sp, #36	; 0x24
    76f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*start = new_start;
    76f6:	8037      	strh	r7, [r6, #0]
	if (*end < new_end) {
    76f8:	8823      	ldrh	r3, [r4, #0]
    76fa:	42ab      	cmp	r3, r5
    76fc:	d200      	bcs.n	7700 <update_range+0x4c>
		*end = new_end;
    76fe:	8025      	strh	r5, [r4, #0]
	return true;
    7700:	2001      	movs	r0, #1
    7702:	e7f6      	b.n	76f2 <update_range+0x3e>
    7704:	00015e19 	.word	0x00015e19
    7708:	00018a19 	.word	0x00018a19
    770c:	0001723a 	.word	0x0001723a
    7710:	00017241 	.word	0x00017241
    7714:	00018e22 	.word	0x00018e22

00007718 <gatt_ccc_changed>:
{
    7718:	b570      	push	{r4, r5, r6, lr}
    771a:	460d      	mov	r5, r1
	u16_t value = 0x0000;
    771c:	2400      	movs	r4, #0
    771e:	6849      	ldr	r1, [r1, #4]
{
    7720:	b086      	sub	sp, #24
    7722:	4606      	mov	r6, r0
	for (i = 0; i < ccc->cfg_len; i++) {
    7724:	4623      	mov	r3, r4
    7726:	428b      	cmp	r3, r1
    7728:	d118      	bne.n	775c <gatt_ccc_changed+0x44>
    772a:	f00d fdaf 	bl	1528c <_impl_k_current_get>
	BT_DBG("ccc %p value 0x%04x", ccc, value);
    772e:	4b11      	ldr	r3, [pc, #68]	; (7774 <gatt_ccc_changed+0x5c>)
    7730:	9304      	str	r3, [sp, #16]
    7732:	9001      	str	r0, [sp, #4]
    7734:	9300      	str	r3, [sp, #0]
    7736:	9403      	str	r4, [sp, #12]
    7738:	4b0f      	ldr	r3, [pc, #60]	; (7778 <gatt_ccc_changed+0x60>)
    773a:	9502      	str	r5, [sp, #8]
    773c:	4a0f      	ldr	r2, [pc, #60]	; (777c <gatt_ccc_changed+0x64>)
    773e:	4910      	ldr	r1, [pc, #64]	; (7780 <gatt_ccc_changed+0x68>)
    7740:	4810      	ldr	r0, [pc, #64]	; (7784 <gatt_ccc_changed+0x6c>)
    7742:	f7f9 fc23 	bl	f8c <printk>
	if (value != ccc->value) {
    7746:	892b      	ldrh	r3, [r5, #8]
    7748:	42a3      	cmp	r3, r4
    774a:	d010      	beq.n	776e <gatt_ccc_changed+0x56>
		ccc->cfg_changed(attr, value);
    774c:	68eb      	ldr	r3, [r5, #12]
		ccc->value = value;
    774e:	812c      	strh	r4, [r5, #8]
		ccc->cfg_changed(attr, value);
    7750:	4621      	mov	r1, r4
    7752:	4630      	mov	r0, r6
}
    7754:	b006      	add	sp, #24
    7756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ccc->cfg_changed(attr, value);
    775a:	4718      	bx	r3
		if (ccc->cfg[i].value > value) {
    775c:	682a      	ldr	r2, [r5, #0]
    775e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    7762:	3301      	adds	r3, #1
    7764:	8912      	ldrh	r2, [r2, #8]
    7766:	4294      	cmp	r4, r2
    7768:	bf38      	it	cc
    776a:	4614      	movcc	r4, r2
    776c:	e7db      	b.n	7726 <gatt_ccc_changed+0xe>
}
    776e:	b006      	add	sp, #24
    7770:	bd70      	pop	{r4, r5, r6, pc}
    7772:	bf00      	nop
    7774:	00015e19 	.word	0x00015e19
    7778:	00018a5b 	.word	0x00018a5b
    777c:	0001723a 	.word	0x0001723a
    7780:	00017241 	.word	0x00017241
    7784:	00018bd8 	.word	0x00018bd8

00007788 <gatt_notify>:
{
    7788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    778c:	4689      	mov	r9, r1
    778e:	b086      	sub	sp, #24
    7790:	4692      	mov	sl, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    7792:	211b      	movs	r1, #27
    7794:	1c9a      	adds	r2, r3, #2
{
    7796:	4607      	mov	r7, r0
    7798:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    779a:	f7ff f959 	bl	6a50 <bt_att_create_pdu>
    779e:	4c1c      	ldr	r4, [pc, #112]	; (7810 <gatt_notify+0x88>)
	if (!buf) {
    77a0:	4605      	mov	r5, r0
    77a2:	b960      	cbnz	r0, 77be <gatt_notify+0x36>
		BT_WARN("No buffer available to send notification");
    77a4:	9401      	str	r4, [sp, #4]
    77a6:	9400      	str	r4, [sp, #0]
    77a8:	4b1a      	ldr	r3, [pc, #104]	; (7814 <gatt_notify+0x8c>)
    77aa:	4a1b      	ldr	r2, [pc, #108]	; (7818 <gatt_notify+0x90>)
    77ac:	491b      	ldr	r1, [pc, #108]	; (781c <gatt_notify+0x94>)
    77ae:	481c      	ldr	r0, [pc, #112]	; (7820 <gatt_notify+0x98>)
    77b0:	f7f9 fbec 	bl	f8c <printk>
    77b4:	f06f 000b 	mvn.w	r0, #11
}
    77b8:	b006      	add	sp, #24
    77ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77be:	f00d fd65 	bl	1528c <_impl_k_current_get>
	nfy = net_buf_add(buf, sizeof(*nfy));
    77c2:	f105 0808 	add.w	r8, r5, #8
	BT_DBG("conn %p handle 0x%04x", conn, handle);
    77c6:	4b13      	ldr	r3, [pc, #76]	; (7814 <gatt_notify+0x8c>)
    77c8:	4a16      	ldr	r2, [pc, #88]	; (7824 <gatt_notify+0x9c>)
    77ca:	9404      	str	r4, [sp, #16]
    77cc:	9001      	str	r0, [sp, #4]
    77ce:	9400      	str	r4, [sp, #0]
    77d0:	4912      	ldr	r1, [pc, #72]	; (781c <gatt_notify+0x94>)
    77d2:	f8cd 900c 	str.w	r9, [sp, #12]
    77d6:	9702      	str	r7, [sp, #8]
    77d8:	4813      	ldr	r0, [pc, #76]	; (7828 <gatt_notify+0xa0>)
    77da:	f7f9 fbd7 	bl	f8c <printk>
	nfy = net_buf_add(buf, sizeof(*nfy));
    77de:	2102      	movs	r1, #2
    77e0:	4640      	mov	r0, r8
    77e2:	f00c fd0b 	bl	141fc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    77e6:	4604      	mov	r4, r0
	net_buf_add(buf, len);
    77e8:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    77ea:	f824 9b02 	strh.w	r9, [r4], #2
	net_buf_add(buf, len);
    77ee:	4640      	mov	r0, r8
    77f0:	f00c fd04 	bl	141fc <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    77f4:	4632      	mov	r2, r6
    77f6:	4651      	mov	r1, sl
    77f8:	4620      	mov	r0, r4
    77fa:	f7fa f9ff 	bl	1bfc <memcpy>
    77fe:	4638      	mov	r0, r7
    7800:	2300      	movs	r3, #0
    7802:	462a      	mov	r2, r5
    7804:	2104      	movs	r1, #4
    7806:	f7fd ff2f 	bl	5668 <bt_l2cap_send_cb>
	return 0;
    780a:	2000      	movs	r0, #0
    780c:	e7d4      	b.n	77b8 <gatt_notify+0x30>
    780e:	bf00      	nop
    7810:	00015e19 	.word	0x00015e19
    7814:	00018a83 	.word	0x00018a83
    7818:	0001727c 	.word	0x0001727c
    781c:	00017241 	.word	0x00017241
    7820:	00018c62 	.word	0x00018c62
    7824:	0001723a 	.word	0x0001723a
    7828:	00018c9b 	.word	0x00018c9b

0000782c <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    7830:	694b      	ldr	r3, [r1, #20]
{
    7832:	b088      	sub	sp, #32
    7834:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    7836:	8a1e      	ldrh	r6, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    7838:	6818      	ldr	r0, [r3, #0]
    783a:	2300      	movs	r3, #0
{
    783c:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    783e:	f88d 301c 	strb.w	r3, [sp, #28]
    7842:	a907      	add	r1, sp, #28
    7844:	f642 0303 	movw	r3, #10243	; 0x2803
    7848:	f8ad 301e 	strh.w	r3, [sp, #30]
    784c:	f7fa fb54 	bl	1ef8 <bt_uuid_cmp>
    7850:	b930      	cbnz	r0, 7860 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    7852:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    7854:	68db      	ldr	r3, [r3, #12]
    7856:	791b      	ldrb	r3, [r3, #4]
    7858:	069b      	lsls	r3, r3, #26
    785a:	d551      	bpl.n	7900 <gatt_indicate+0xd4>
			return -EINVAL;
		}

		value_handle += 1;
    785c:	3601      	adds	r6, #1
    785e:	b2b6      	uxth	r6, r6
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    7860:	8c22      	ldrh	r2, [r4, #32]
    7862:	4d29      	ldr	r5, [pc, #164]	; (7908 <gatt_indicate+0xdc>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    7864:	3202      	adds	r2, #2
    7866:	211d      	movs	r1, #29
    7868:	4648      	mov	r0, r9
    786a:	f7ff f8f1 	bl	6a50 <bt_att_create_pdu>
	if (!buf) {
    786e:	4607      	mov	r7, r0
    7870:	b968      	cbnz	r0, 788e <gatt_indicate+0x62>
		BT_WARN("No buffer available to send indication");
    7872:	9501      	str	r5, [sp, #4]
    7874:	9500      	str	r5, [sp, #0]
    7876:	4b25      	ldr	r3, [pc, #148]	; (790c <gatt_indicate+0xe0>)
    7878:	4a25      	ldr	r2, [pc, #148]	; (7910 <gatt_indicate+0xe4>)
    787a:	4926      	ldr	r1, [pc, #152]	; (7914 <gatt_indicate+0xe8>)
    787c:	4826      	ldr	r0, [pc, #152]	; (7918 <gatt_indicate+0xec>)
    787e:	f7f9 fb85 	bl	f8c <printk>
		return -ENOMEM;
    7882:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    7886:	4620      	mov	r0, r4
    7888:	b008      	add	sp, #32
    788a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    788e:	f00d fcfd 	bl	1528c <_impl_k_current_get>
	ind = net_buf_add(buf, sizeof(*ind));
    7892:	f107 0808 	add.w	r8, r7, #8
	BT_DBG("conn %p handle 0x%04x", conn, value_handle);
    7896:	4b1d      	ldr	r3, [pc, #116]	; (790c <gatt_indicate+0xe0>)
    7898:	4a20      	ldr	r2, [pc, #128]	; (791c <gatt_indicate+0xf0>)
    789a:	9001      	str	r0, [sp, #4]
    789c:	491d      	ldr	r1, [pc, #116]	; (7914 <gatt_indicate+0xe8>)
    789e:	9504      	str	r5, [sp, #16]
    78a0:	9603      	str	r6, [sp, #12]
    78a2:	f8cd 9008 	str.w	r9, [sp, #8]
    78a6:	9500      	str	r5, [sp, #0]
    78a8:	481d      	ldr	r0, [pc, #116]	; (7920 <gatt_indicate+0xf4>)
    78aa:	f7f9 fb6f 	bl	f8c <printk>
	ind = net_buf_add(buf, sizeof(*ind));
    78ae:	2102      	movs	r1, #2
    78b0:	4640      	mov	r0, r8
    78b2:	f00c fca3 	bl	141fc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    78b6:	4682      	mov	sl, r0
	net_buf_add(buf, params->len);
    78b8:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    78ba:	f82a 6b02 	strh.w	r6, [sl], #2
	net_buf_add(buf, params->len);
    78be:	4640      	mov	r0, r8
    78c0:	f00c fc9c 	bl	141fc <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    78c4:	8c22      	ldrh	r2, [r4, #32]
    78c6:	69e1      	ldr	r1, [r4, #28]
    78c8:	4650      	mov	r0, sl
    78ca:	f7fa f997 	bl	1bfc <memcpy>
		req->func = func;
    78ce:	4b15      	ldr	r3, [pc, #84]	; (7924 <gatt_indicate+0xf8>)
    78d0:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    78d2:	2300      	movs	r3, #0
		req->buf = buf;
    78d4:	6127      	str	r7, [r4, #16]
		req->destroy = destroy;
    78d6:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    78d8:	4621      	mov	r1, r4
    78da:	4648      	mov	r0, r9
    78dc:	f7ff fe80 	bl	75e0 <bt_att_req_send>
	if (err) {
    78e0:	4604      	mov	r4, r0
    78e2:	2800      	cmp	r0, #0
    78e4:	d0cf      	beq.n	7886 <gatt_indicate+0x5a>
		BT_ERR("Error sending ATT PDU: %d", err);
    78e6:	9001      	str	r0, [sp, #4]
    78e8:	9502      	str	r5, [sp, #8]
    78ea:	9500      	str	r5, [sp, #0]
    78ec:	4b0e      	ldr	r3, [pc, #56]	; (7928 <gatt_indicate+0xfc>)
    78ee:	4a0f      	ldr	r2, [pc, #60]	; (792c <gatt_indicate+0x100>)
    78f0:	4908      	ldr	r1, [pc, #32]	; (7914 <gatt_indicate+0xe8>)
    78f2:	480f      	ldr	r0, [pc, #60]	; (7930 <gatt_indicate+0x104>)
    78f4:	f7f9 fb4a 	bl	f8c <printk>
		net_buf_unref(buf);
    78f8:	4638      	mov	r0, r7
    78fa:	f00c fc4d 	bl	14198 <net_buf_unref>
    78fe:	e7c2      	b.n	7886 <gatt_indicate+0x5a>
			return -EINVAL;
    7900:	f06f 0415 	mvn.w	r4, #21
    7904:	e7bf      	b.n	7886 <gatt_indicate+0x5a>
    7906:	bf00      	nop
    7908:	00015e19 	.word	0x00015e19
    790c:	00018a99 	.word	0x00018a99
    7910:	0001727c 	.word	0x0001727c
    7914:	00017241 	.word	0x00017241
    7918:	00018c01 	.word	0x00018c01
    791c:	0001723a 	.word	0x0001723a
    7920:	00018c9b 	.word	0x00018c9b
    7924:	0000766b 	.word	0x0000766b
    7928:	00018a8f 	.word	0x00018a8f
    792c:	000171f2 	.word	0x000171f2
    7930:	00018c38 	.word	0x00018c38

00007934 <notify_cb>:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    7934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7938:	b089      	sub	sp, #36	; 0x24
    793a:	4604      	mov	r4, r0
    793c:	460d      	mov	r5, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    793e:	2600      	movs	r6, #0
    7940:	f642 1302 	movw	r3, #10498	; 0x2902
    7944:	a906      	add	r1, sp, #24
    7946:	6800      	ldr	r0, [r0, #0]
    7948:	f88d 6018 	strb.w	r6, [sp, #24]
    794c:	f8ad 301a 	strh.w	r3, [sp, #26]
    7950:	f7fa fad2 	bl	1ef8 <bt_uuid_cmp>
    7954:	b178      	cbz	r0, 7976 <notify_cb+0x42>
		/* Stop if we reach the next characteristic */
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    7956:	f642 0303 	movw	r3, #10243	; 0x2803
    795a:	6820      	ldr	r0, [r4, #0]
    795c:	f88d 601c 	strb.w	r6, [sp, #28]
    7960:	a907      	add	r1, sp, #28
    7962:	f8ad 301e 	strh.w	r3, [sp, #30]
    7966:	f7fa fac7 	bl	1ef8 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    796a:	1b80      	subs	r0, r0, r6
    796c:	bf18      	it	ne
    796e:	2001      	movne	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    7970:	b009      	add	sp, #36	; 0x24
    7972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7976:	68a2      	ldr	r2, [r4, #8]
    7978:	4b35      	ldr	r3, [pc, #212]	; (7a50 <notify_cb+0x11c>)
    797a:	429a      	cmp	r2, r3
    797c:	d001      	beq.n	7982 <notify_cb+0x4e>
		return BT_GATT_ITER_CONTINUE;
    797e:	2001      	movs	r0, #1
    7980:	e7f6      	b.n	7970 <notify_cb+0x3c>
	ccc = attr->user_data;
    7982:	68e7      	ldr	r7, [r4, #12]
    7984:	4c33      	ldr	r4, [pc, #204]	; (7a54 <notify_cb+0x120>)
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
    7986:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 7a68 <notify_cb+0x134>
	for (i = 0; i < ccc->cfg_len; i++) {
    798a:	4606      	mov	r6, r0
    798c:	46a2      	mov	sl, r4
    798e:	687b      	ldr	r3, [r7, #4]
    7990:	429e      	cmp	r6, r3
    7992:	d2f4      	bcs.n	797e <notify_cb+0x4a>
		if (ccc->cfg[i].value != data->type) {
    7994:	6838      	ldr	r0, [r7, #0]
    7996:	88ab      	ldrh	r3, [r5, #4]
    7998:	eb00 1006 	add.w	r0, r0, r6, lsl #4
    799c:	8902      	ldrh	r2, [r0, #8]
    799e:	429a      	cmp	r2, r3
    79a0:	d12b      	bne.n	79fa <notify_cb+0xc6>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    79a2:	f7fd f809 	bl	49b8 <bt_conn_lookup_addr_le>
		if (!conn) {
    79a6:	4681      	mov	r9, r0
    79a8:	2800      	cmp	r0, #0
    79aa:	d133      	bne.n	7a14 <notify_cb+0xe0>
			if (ccc->cfg == sc_ccc_cfg) {
    79ac:	683b      	ldr	r3, [r7, #0]
    79ae:	4553      	cmp	r3, sl
    79b0:	d123      	bne.n	79fa <notify_cb+0xc6>
				sc_save(&ccc->cfg[i], data->params);
    79b2:	696b      	ldr	r3, [r5, #20]
	memcpy(&data, params->data, params->len);
    79b4:	a807      	add	r0, sp, #28
    79b6:	8c1a      	ldrh	r2, [r3, #32]
    79b8:	69d9      	ldr	r1, [r3, #28]
    79ba:	f7fa f91f 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    79be:	46a6      	mov	lr, r4
    79c0:	f83e 3f0c 	ldrh.w	r3, [lr, #12]!
    79c4:	b9e3      	cbnz	r3, 7a00 <notify_cb+0xcc>
    79c6:	89e3      	ldrh	r3, [r4, #14]
    79c8:	b9d3      	cbnz	r3, 7a00 <notify_cb+0xcc>
		*stored = data;
    79ca:	9807      	ldr	r0, [sp, #28]
    79cc:	f8ce 0000 	str.w	r0, [lr]
    79d0:	f00d fc5c 	bl	1528c <_impl_k_current_get>
    79d4:	4681      	mov	r9, r0
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
    79d6:	4620      	mov	r0, r4
    79d8:	f7fa f9bc 	bl	1d54 <bt_addr_le_str>
    79dc:	f8cd 8014 	str.w	r8, [sp, #20]
    79e0:	89e3      	ldrh	r3, [r4, #14]
    79e2:	9304      	str	r3, [sp, #16]
    79e4:	89a3      	ldrh	r3, [r4, #12]
    79e6:	9303      	str	r3, [sp, #12]
    79e8:	9002      	str	r0, [sp, #8]
    79ea:	e88d 0300 	stmia.w	sp, {r8, r9}
    79ee:	4b1a      	ldr	r3, [pc, #104]	; (7a58 <notify_cb+0x124>)
    79f0:	4a1a      	ldr	r2, [pc, #104]	; (7a5c <notify_cb+0x128>)
    79f2:	491b      	ldr	r1, [pc, #108]	; (7a60 <notify_cb+0x12c>)
    79f4:	481b      	ldr	r0, [pc, #108]	; (7a64 <notify_cb+0x130>)
    79f6:	f7f9 fac9 	bl	f8c <printk>
	for (i = 0; i < ccc->cfg_len; i++) {
    79fa:	3601      	adds	r6, #1
    79fc:	3410      	adds	r4, #16
    79fe:	e7c6      	b.n	798e <notify_cb+0x5a>
	update_range(&stored->start, &stored->end,
    7a00:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7a04:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7a08:	f104 010e 	add.w	r1, r4, #14
    7a0c:	4670      	mov	r0, lr
    7a0e:	f7ff fe51 	bl	76b4 <update_range>
    7a12:	e7dd      	b.n	79d0 <notify_cb+0x9c>
		if (conn->state != BT_CONN_CONNECTED) {
    7a14:	7a43      	ldrb	r3, [r0, #9]
    7a16:	2b03      	cmp	r3, #3
    7a18:	d002      	beq.n	7a20 <notify_cb+0xec>
			bt_conn_unref(conn);
    7a1a:	f7fd f803 	bl	4a24 <bt_conn_unref>
    7a1e:	e7ec      	b.n	79fa <notify_cb+0xc6>
		if (data->type == BT_GATT_CCC_INDICATE) {
    7a20:	88ab      	ldrh	r3, [r5, #4]
    7a22:	2b02      	cmp	r3, #2
    7a24:	d10d      	bne.n	7a42 <notify_cb+0x10e>
			err = gatt_indicate(conn, data->params);
    7a26:	6969      	ldr	r1, [r5, #20]
    7a28:	f7ff ff00 	bl	782c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    7a2c:	4683      	mov	fp, r0
		bt_conn_unref(conn);
    7a2e:	4648      	mov	r0, r9
    7a30:	f7fc fff8 	bl	4a24 <bt_conn_unref>
		if (err < 0) {
    7a34:	f1bb 0f00 	cmp.w	fp, #0
    7a38:	f04f 0000 	mov.w	r0, #0
    7a3c:	db98      	blt.n	7970 <notify_cb+0x3c>
		data->err = 0;
    7a3e:	6028      	str	r0, [r5, #0]
    7a40:	e7db      	b.n	79fa <notify_cb+0xc6>
			err = gatt_notify(conn, data->attr->handle,
    7a42:	68a9      	ldr	r1, [r5, #8]
    7a44:	8a2b      	ldrh	r3, [r5, #16]
    7a46:	68ea      	ldr	r2, [r5, #12]
    7a48:	8a09      	ldrh	r1, [r1, #16]
    7a4a:	f7ff fe9d 	bl	7788 <gatt_notify>
    7a4e:	e7ed      	b.n	7a2c <notify_cb+0xf8>
    7a50:	00007e05 	.word	0x00007e05
    7a54:	20000604 	.word	0x20000604
    7a58:	00018aa7 	.word	0x00018aa7
    7a5c:	0001723a 	.word	0x0001723a
    7a60:	00017241 	.word	0x00017241
    7a64:	00018d36 	.word	0x00018d36
    7a68:	00015e19 	.word	0x00015e19

00007a6c <gatt_register>:
{
    7a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (sys_slist_is_empty(&db)) {
    7a70:	4d32      	ldr	r5, [pc, #200]	; (7b3c <gatt_register+0xd0>)
    7a72:	682b      	ldr	r3, [r5, #0]
{
    7a74:	b08b      	sub	sp, #44	; 0x2c
    7a76:	4680      	mov	r8, r0
	u16_t count = svc->attr_count;
    7a78:	e890 0090 	ldmia.w	r0, {r4, r7}
	if (sys_slist_is_empty(&db)) {
    7a7c:	b15b      	cbz	r3, 7a96 <gatt_register+0x2a>
    7a7e:	686b      	ldr	r3, [r5, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    7a80:	2b00      	cmp	r3, #0
    7a82:	d058      	beq.n	7b36 <gatt_register+0xca>
	handle = last->attrs[last->attr_count - 1].handle;
    7a84:	f853 2c04 	ldr.w	r2, [r3, #-4]
    7a88:	f853 3c08 	ldr.w	r3, [r3, #-8]
    7a8c:	2114      	movs	r1, #20
    7a8e:	fb01 3302 	mla	r3, r1, r2, r3
    7a92:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    7a96:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7b54 <gatt_register+0xe8>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
    7a9a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 7b48 <gatt_register+0xdc>
    7a9e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 7b58 <gatt_register+0xec>
    7aa2:	b2bf      	uxth	r7, r7
    7aa4:	2214      	movs	r2, #20
    7aa6:	fb02 4707 	mla	r7, r2, r7, r4
	for (; attrs && count; attrs++, count--) {
    7aaa:	b10c      	cbz	r4, 7ab0 <gatt_register+0x44>
    7aac:	42bc      	cmp	r4, r7
    7aae:	d10b      	bne.n	7ac8 <gatt_register+0x5c>
    7ab0:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
    7ab2:	2000      	movs	r0, #0
	sys_slist_append(&db, &svc->node);
    7ab4:	f108 0308 	add.w	r3, r8, #8
    7ab8:	f8c8 0008 	str.w	r0, [r8, #8]
Z_GENLIST_APPEND(slist, snode);
    7abc:	2a00      	cmp	r2, #0
    7abe:	d137      	bne.n	7b30 <gatt_register+0xc4>
	list->tail = node;
    7ac0:	606b      	str	r3, [r5, #4]
	list->head = node;
    7ac2:	602b      	str	r3, [r5, #0]
	return 0;
    7ac4:	4610      	mov	r0, r2
    7ac6:	e030      	b.n	7b2a <gatt_register+0xbe>
		if (!attrs->handle) {
    7ac8:	8a26      	ldrh	r6, [r4, #16]
    7aca:	b9fe      	cbnz	r6, 7b0c <gatt_register+0xa0>
			attrs->handle = ++handle;
    7acc:	1c5e      	adds	r6, r3, #1
    7ace:	b2b6      	uxth	r6, r6
    7ad0:	8226      	strh	r6, [r4, #16]
    7ad2:	f00d fbdb 	bl	1528c <_impl_k_current_get>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
    7ad6:	8a22      	ldrh	r2, [r4, #16]
    7ad8:	9009      	str	r0, [sp, #36]	; 0x24
    7ada:	6820      	ldr	r0, [r4, #0]
    7adc:	9208      	str	r2, [sp, #32]
    7ade:	f7fa fa8b 	bl	1ff8 <bt_uuid_str>
    7ae2:	f8cd 9018 	str.w	r9, [sp, #24]
    7ae6:	7ca1      	ldrb	r1, [r4, #18]
    7ae8:	9a08      	ldr	r2, [sp, #32]
    7aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7aec:	9105      	str	r1, [sp, #20]
    7aee:	9004      	str	r0, [sp, #16]
    7af0:	9203      	str	r2, [sp, #12]
    7af2:	9402      	str	r4, [sp, #8]
    7af4:	9301      	str	r3, [sp, #4]
    7af6:	f8cd 9000 	str.w	r9, [sp]
    7afa:	4653      	mov	r3, sl
    7afc:	465a      	mov	r2, fp
    7afe:	4910      	ldr	r1, [pc, #64]	; (7b40 <gatt_register+0xd4>)
    7b00:	4810      	ldr	r0, [pc, #64]	; (7b44 <gatt_register+0xd8>)
    7b02:	f7f9 fa43 	bl	f8c <printk>
	for (; attrs && count; attrs++, count--) {
    7b06:	3414      	adds	r4, #20
    7b08:	4633      	mov	r3, r6
    7b0a:	e7ce      	b.n	7aaa <gatt_register+0x3e>
		} else if (attrs->handle > handle) {
    7b0c:	42b3      	cmp	r3, r6
    7b0e:	d3e0      	bcc.n	7ad2 <gatt_register+0x66>
			BT_ERR("Unable to register handle 0x%04x",
    7b10:	f8cd 9008 	str.w	r9, [sp, #8]
    7b14:	9601      	str	r6, [sp, #4]
    7b16:	f8cd 9000 	str.w	r9, [sp]
    7b1a:	4b0b      	ldr	r3, [pc, #44]	; (7b48 <gatt_register+0xdc>)
    7b1c:	4a0b      	ldr	r2, [pc, #44]	; (7b4c <gatt_register+0xe0>)
    7b1e:	4908      	ldr	r1, [pc, #32]	; (7b40 <gatt_register+0xd4>)
    7b20:	480b      	ldr	r0, [pc, #44]	; (7b50 <gatt_register+0xe4>)
    7b22:	f7f9 fa33 	bl	f8c <printk>
			return -EINVAL;
    7b26:	f06f 0015 	mvn.w	r0, #21
}
    7b2a:	b00b      	add	sp, #44	; 0x2c
    7b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
    7b30:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7b32:	606b      	str	r3, [r5, #4]
    7b34:	e7f9      	b.n	7b2a <gatt_register+0xbe>
	handle = last->attrs[last->attr_count - 1].handle;
    7b36:	681b      	ldr	r3, [r3, #0]
    7b38:	deff      	udf	#255	; 0xff
    7b3a:	bf00      	nop
    7b3c:	200005a8 	.word	0x200005a8
    7b40:	00017241 	.word	0x00017241
    7b44:	00018cf7 	.word	0x00018cf7
    7b48:	000189f0 	.word	0x000189f0
    7b4c:	000171f2 	.word	0x000171f2
    7b50:	00018cc6 	.word	0x00018cc6
    7b54:	00015e19 	.word	0x00015e19
    7b58:	0001723a 	.word	0x0001723a

00007b5c <sc_indicate.constprop.19>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    7b5c:	b530      	push	{r4, r5, lr}
    7b5e:	4c1e      	ldr	r4, [pc, #120]	; (7bd8 <sc_indicate.constprop.19+0x7c>)
    7b60:	f3bf 8f5b 	dmb	ish
    7b64:	b085      	sub	sp, #20
    7b66:	4602      	mov	r2, r0
    7b68:	460b      	mov	r3, r1
    7b6a:	f104 0550 	add.w	r5, r4, #80	; 0x50
    7b6e:	e855 1f00 	ldrex	r1, [r5]
    7b72:	f041 0001 	orr.w	r0, r1, #1
    7b76:	e845 0e00 	strex	lr, r0, [r5]
    7b7a:	f1be 0f00 	cmp.w	lr, #0
    7b7e:	d1f6      	bne.n	7b6e <sc_indicate.constprop.19+0x12>
    7b80:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    7b84:	07c9      	lsls	r1, r1, #31
    7b86:	d415      	bmi.n	7bb4 <sc_indicate.constprop.19+0x58>
		sc->start = start;
    7b88:	84a2      	strh	r2, [r4, #36]	; 0x24
		sc->end = end;
    7b8a:	84e3      	strh	r3, [r4, #38]	; 0x26
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7b8c:	f3bf 8f5b 	dmb	ish
    7b90:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7b92:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    7b96:	079b      	lsls	r3, r3, #30
    7b98:	d516      	bpl.n	7bc8 <sc_indicate.constprop.19+0x6c>
    7b9a:	f00d fb77 	bl	1528c <_impl_k_current_get>
		BT_DBG("indicate pending, waiting until complete...");
    7b9e:	4b0f      	ldr	r3, [pc, #60]	; (7bdc <sc_indicate.constprop.19+0x80>)
    7ba0:	9302      	str	r3, [sp, #8]
    7ba2:	9001      	str	r0, [sp, #4]
    7ba4:	9300      	str	r3, [sp, #0]
    7ba6:	4a0e      	ldr	r2, [pc, #56]	; (7be0 <sc_indicate.constprop.19+0x84>)
    7ba8:	4b0e      	ldr	r3, [pc, #56]	; (7be4 <sc_indicate.constprop.19+0x88>)
    7baa:	490f      	ldr	r1, [pc, #60]	; (7be8 <sc_indicate.constprop.19+0x8c>)
    7bac:	480f      	ldr	r0, [pc, #60]	; (7bec <sc_indicate.constprop.19+0x90>)
    7bae:	f7f9 f9ed 	bl	f8c <printk>
    7bb2:	e007      	b.n	7bc4 <sc_indicate.constprop.19+0x68>
	if (!update_range(&sc->start, &sc->end, start, end)) {
    7bb4:	f104 0126 	add.w	r1, r4, #38	; 0x26
    7bb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7bbc:	f7ff fd7a 	bl	76b4 <update_range>
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d1e3      	bne.n	7b8c <sc_indicate.constprop.19+0x30>
}
    7bc4:	b005      	add	sp, #20
    7bc6:	bd30      	pop	{r4, r5, pc}
    7bc8:	4909      	ldr	r1, [pc, #36]	; (7bf0 <sc_indicate.constprop.19+0x94>)
    7bca:	480a      	ldr	r0, [pc, #40]	; (7bf4 <sc_indicate.constprop.19+0x98>)
    7bcc:	220a      	movs	r2, #10
    7bce:	b005      	add	sp, #20
    7bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7bd4:	f00d bec4 	b.w	15960 <k_delayed_work_submit_to_queue>
    7bd8:	200005b0 	.word	0x200005b0
    7bdc:	00015e19 	.word	0x00015e19
    7be0:	0001723a 	.word	0x0001723a
    7be4:	00018a26 	.word	0x00018a26
    7be8:	00017241 	.word	0x00017241
    7bec:	00018d94 	.word	0x00018d94
    7bf0:	200005d8 	.word	0x200005d8
    7bf4:	200019b0 	.word	0x200019b0

00007bf8 <connected_cb>:
	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    7bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7bfc:	6882      	ldr	r2, [r0, #8]
    7bfe:	4b25      	ldr	r3, [pc, #148]	; (7c94 <connected_cb+0x9c>)
    7c00:	429a      	cmp	r2, r3
{
    7c02:	b086      	sub	sp, #24
    7c04:	4607      	mov	r7, r0
    7c06:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7c08:	d13e      	bne.n	7c88 <connected_cb+0x90>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7c0a:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    7c0c:	2600      	movs	r6, #0
    7c0e:	686b      	ldr	r3, [r5, #4]
    7c10:	429e      	cmp	r6, r3
    7c12:	d239      	bcs.n	7c88 <connected_cb+0x90>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7c14:	6829      	ldr	r1, [r5, #0]
    7c16:	ea4f 1806 	mov.w	r8, r6, lsl #4
    7c1a:	4441      	add	r1, r8
    7c1c:	4620      	mov	r0, r4
    7c1e:	f7fc fe6b 	bl	48f8 <bt_conn_addr_le_cmp>
    7c22:	2800      	cmp	r0, #0
    7c24:	d134      	bne.n	7c90 <connected_cb+0x98>
			continue;
		}

		if (ccc->cfg[i].value) {
    7c26:	682b      	ldr	r3, [r5, #0]
    7c28:	4443      	add	r3, r8
    7c2a:	891b      	ldrh	r3, [r3, #8]
    7c2c:	2b00      	cmp	r3, #0
    7c2e:	d02f      	beq.n	7c90 <connected_cb+0x98>
			gatt_ccc_changed(attr, ccc);
    7c30:	4629      	mov	r1, r5
    7c32:	4638      	mov	r0, r7
    7c34:	f7ff fd70 	bl	7718 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    7c38:	682c      	ldr	r4, [r5, #0]
    7c3a:	4b17      	ldr	r3, [pc, #92]	; (7c98 <connected_cb+0xa0>)
    7c3c:	429c      	cmp	r4, r3
    7c3e:	d123      	bne.n	7c88 <connected_cb+0x90>
				sc_restore(&ccc->cfg[i]);
    7c40:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    7c42:	89a3      	ldrh	r3, [r4, #12]
    7c44:	b90b      	cbnz	r3, 7c4a <connected_cb+0x52>
    7c46:	89e3      	ldrh	r3, [r4, #14]
    7c48:	b1f3      	cbz	r3, 7c88 <connected_cb+0x90>
    7c4a:	f00d fb1f 	bl	1528c <_impl_k_current_get>
    7c4e:	4605      	mov	r5, r0
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
    7c50:	4620      	mov	r0, r4
    7c52:	f7fa f87f 	bl	1d54 <bt_addr_le_str>
    7c56:	4b11      	ldr	r3, [pc, #68]	; (7c9c <connected_cb+0xa4>)
    7c58:	9305      	str	r3, [sp, #20]
    7c5a:	89e2      	ldrh	r2, [r4, #14]
    7c5c:	9204      	str	r2, [sp, #16]
    7c5e:	89a2      	ldrh	r2, [r4, #12]
    7c60:	9203      	str	r2, [sp, #12]
    7c62:	9002      	str	r0, [sp, #8]
    7c64:	4a0e      	ldr	r2, [pc, #56]	; (7ca0 <connected_cb+0xa8>)
    7c66:	490f      	ldr	r1, [pc, #60]	; (7ca4 <connected_cb+0xac>)
    7c68:	480f      	ldr	r0, [pc, #60]	; (7ca8 <connected_cb+0xb0>)
    7c6a:	e88d 0028 	stmia.w	sp, {r3, r5}
    7c6e:	4b0f      	ldr	r3, [pc, #60]	; (7cac <connected_cb+0xb4>)
    7c70:	f7f9 f98c 	bl	f8c <printk>
	sc_indicate(&gatt_sc, data->start, data->end);
    7c74:	89e1      	ldrh	r1, [r4, #14]
    7c76:	f834 0f0c 	ldrh.w	r0, [r4, #12]!
    7c7a:	f7ff ff6f 	bl	7b5c <sc_indicate.constprop.19>
	memset(cfg->data, 0, sizeof(cfg->data));
    7c7e:	2204      	movs	r2, #4
    7c80:	2100      	movs	r1, #0
    7c82:	4620      	mov	r0, r4
    7c84:	f7f9 ffe6 	bl	1c54 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    7c88:	2001      	movs	r0, #1
    7c8a:	b006      	add	sp, #24
    7c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    7c90:	3601      	adds	r6, #1
    7c92:	e7bc      	b.n	7c0e <connected_cb+0x16>
    7c94:	00007e05 	.word	0x00007e05
    7c98:	20000604 	.word	0x20000604
    7c9c:	00015e19 	.word	0x00015e19
    7ca0:	0001723a 	.word	0x0001723a
    7ca4:	00017241 	.word	0x00017241
    7ca8:	00018d36 	.word	0x00018d36
    7cac:	00018aaf 	.word	0x00018aaf

00007cb0 <sc_indicate_rsp>:
{
    7cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7cb2:	4614      	mov	r4, r2
    7cb4:	f00d faea 	bl	1528c <_impl_k_current_get>
	BT_DBG("err 0x%02x", err);
    7cb8:	4b15      	ldr	r3, [pc, #84]	; (7d10 <sc_indicate_rsp+0x60>)
    7cba:	9303      	str	r3, [sp, #12]
    7cbc:	9001      	str	r0, [sp, #4]
    7cbe:	9300      	str	r3, [sp, #0]
    7cc0:	4914      	ldr	r1, [pc, #80]	; (7d14 <sc_indicate_rsp+0x64>)
    7cc2:	4b15      	ldr	r3, [pc, #84]	; (7d18 <sc_indicate_rsp+0x68>)
    7cc4:	9402      	str	r4, [sp, #8]
    7cc6:	4a15      	ldr	r2, [pc, #84]	; (7d1c <sc_indicate_rsp+0x6c>)
    7cc8:	4815      	ldr	r0, [pc, #84]	; (7d20 <sc_indicate_rsp+0x70>)
    7cca:	f7f9 f95f 	bl	f8c <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7cce:	f3bf 8f5b 	dmb	ish
    7cd2:	4914      	ldr	r1, [pc, #80]	; (7d24 <sc_indicate_rsp+0x74>)
    7cd4:	f101 0350 	add.w	r3, r1, #80	; 0x50
    7cd8:	e853 2f00 	ldrex	r2, [r3]
    7cdc:	f022 0202 	bic.w	r2, r2, #2
    7ce0:	e843 2000 	strex	r0, r2, [r3]
    7ce4:	2800      	cmp	r0, #0
    7ce6:	d1f7      	bne.n	7cd8 <sc_indicate_rsp+0x28>
    7ce8:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7cec:	f3bf 8f5b 	dmb	ish
    7cf0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    7cf2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    7cf6:	07db      	lsls	r3, r3, #31
    7cf8:	d507      	bpl.n	7d0a <sc_indicate_rsp+0x5a>
    7cfa:	480b      	ldr	r0, [pc, #44]	; (7d28 <sc_indicate_rsp+0x78>)
    7cfc:	2200      	movs	r2, #0
    7cfe:	3128      	adds	r1, #40	; 0x28
}
    7d00:	b004      	add	sp, #16
    7d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d06:	f00d be2b 	b.w	15960 <k_delayed_work_submit_to_queue>
    7d0a:	b004      	add	sp, #16
    7d0c:	bd10      	pop	{r4, pc}
    7d0e:	bf00      	nop
    7d10:	00015e19 	.word	0x00015e19
    7d14:	00017241 	.word	0x00017241
    7d18:	000189fe 	.word	0x000189fe
    7d1c:	0001723a 	.word	0x0001723a
    7d20:	00018dd5 	.word	0x00018dd5
    7d24:	200005b0 	.word	0x200005b0
    7d28:	200019b0 	.word	0x200019b0

00007d2c <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    7d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7d30:	6882      	ldr	r2, [r0, #8]
    7d32:	4b2e      	ldr	r3, [pc, #184]	; (7dec <disconnected_cb+0xc0>)
    7d34:	429a      	cmp	r2, r3
{
    7d36:	b086      	sub	sp, #24
    7d38:	4680      	mov	r8, r0
    7d3a:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7d3c:	d135      	bne.n	7daa <disconnected_cb+0x7e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7d3e:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    7d40:	8923      	ldrh	r3, [r4, #8]
    7d42:	2b00      	cmp	r3, #0
    7d44:	d031      	beq.n	7daa <disconnected_cb+0x7e>
    7d46:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7d48:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    7d4c:	6863      	ldr	r3, [r4, #4]
    7d4e:	429e      	cmp	r6, r3
    7d50:	d318      	bcc.n	7d84 <disconnected_cb+0x58>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    7d52:	2202      	movs	r2, #2
    7d54:	2100      	movs	r1, #0
    7d56:	f104 0008 	add.w	r0, r4, #8
    7d5a:	f7f9 ff7b 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    7d5e:	68e3      	ldr	r3, [r4, #12]
    7d60:	b113      	cbz	r3, 7d68 <disconnected_cb+0x3c>
		ccc->cfg_changed(attr, ccc->value);
    7d62:	8921      	ldrh	r1, [r4, #8]
    7d64:	4640      	mov	r0, r8
    7d66:	4798      	blx	r3
    7d68:	f00d fa90 	bl	1528c <_impl_k_current_get>
	}

	BT_DBG("ccc %p reseted", ccc);
    7d6c:	4b20      	ldr	r3, [pc, #128]	; (7df0 <disconnected_cb+0xc4>)
    7d6e:	9303      	str	r3, [sp, #12]
    7d70:	9001      	str	r0, [sp, #4]
    7d72:	9300      	str	r3, [sp, #0]
    7d74:	9402      	str	r4, [sp, #8]
    7d76:	4b1f      	ldr	r3, [pc, #124]	; (7df4 <disconnected_cb+0xc8>)
    7d78:	4a1f      	ldr	r2, [pc, #124]	; (7df8 <disconnected_cb+0xcc>)
    7d7a:	4920      	ldr	r1, [pc, #128]	; (7dfc <disconnected_cb+0xd0>)
    7d7c:	4820      	ldr	r0, [pc, #128]	; (7e00 <disconnected_cb+0xd4>)
    7d7e:	f7f9 f905 	bl	f8c <printk>
    7d82:	e012      	b.n	7daa <disconnected_cb+0x7e>
		if (!ccc->cfg[i].value) {
    7d84:	6821      	ldr	r1, [r4, #0]
    7d86:	0135      	lsls	r5, r6, #4
    7d88:	4429      	add	r1, r5
    7d8a:	890b      	ldrh	r3, [r1, #8]
    7d8c:	b19b      	cbz	r3, 7db6 <disconnected_cb+0x8a>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7d8e:	4648      	mov	r0, r9
    7d90:	f7fc fdb2 	bl	48f8 <bt_conn_addr_le_cmp>
    7d94:	b188      	cbz	r0, 7dba <disconnected_cb+0x8e>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    7d96:	6820      	ldr	r0, [r4, #0]
    7d98:	4428      	add	r0, r5
    7d9a:	f7fc fe0d 	bl	49b8 <bt_conn_lookup_addr_le>
			if (tmp) {
    7d9e:	b150      	cbz	r0, 7db6 <disconnected_cb+0x8a>
				if (tmp->state == BT_CONN_CONNECTED) {
    7da0:	7a43      	ldrb	r3, [r0, #9]
    7da2:	2b03      	cmp	r3, #3
    7da4:	d105      	bne.n	7db2 <disconnected_cb+0x86>
					bt_conn_unref(tmp);
    7da6:	f7fc fe3d 	bl	4a24 <bt_conn_unref>

	return BT_GATT_ITER_CONTINUE;
}
    7daa:	2001      	movs	r0, #1
    7dac:	b006      	add	sp, #24
    7dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    7db2:	f7fc fe37 	bl	4a24 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    7db6:	3601      	adds	r6, #1
    7db8:	e7c8      	b.n	7d4c <disconnected_cb+0x20>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7dba:	4650      	mov	r0, sl
    7dbc:	f7fc fa1c 	bl	41f8 <bt_addr_le_is_bonded>
    7dc0:	4607      	mov	r7, r0
    7dc2:	6820      	ldr	r0, [r4, #0]
    7dc4:	b95f      	cbnz	r7, 7dde <disconnected_cb+0xb2>
    7dc6:	4428      	add	r0, r5
    7dc8:	2207      	movs	r2, #7
    7dca:	a904      	add	r1, sp, #16
						BT_ADDR_LE_ANY);
    7dcc:	9704      	str	r7, [sp, #16]
    7dce:	f8cd 7013 	str.w	r7, [sp, #19]
    7dd2:	f7f9 ff13 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    7dd6:	6823      	ldr	r3, [r4, #0]
    7dd8:	441d      	add	r5, r3
    7dda:	812f      	strh	r7, [r5, #8]
    7ddc:	e7eb      	b.n	7db6 <disconnected_cb+0x8a>
    7dde:	2207      	movs	r2, #7
    7de0:	4651      	mov	r1, sl
    7de2:	4428      	add	r0, r5
    7de4:	f7f9 ff0a 	bl	1bfc <memcpy>
    7de8:	e7e5      	b.n	7db6 <disconnected_cb+0x8a>
    7dea:	bf00      	nop
    7dec:	00007e05 	.word	0x00007e05
    7df0:	00015e19 	.word	0x00015e19
    7df4:	00018aba 	.word	0x00018aba
    7df8:	0001723a 	.word	0x0001723a
    7dfc:	00017241 	.word	0x00017241
    7e00:	00018bb4 	.word	0x00018bb4

00007e04 <bt_gatt_attr_write_ccc>:
{
    7e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e08:	b08b      	sub	sp, #44	; 0x2c
    7e0a:	4688      	mov	r8, r1
    7e0c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7e10:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    7e14:	2902      	cmp	r1, #2
{
    7e16:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    7e18:	d875      	bhi.n	7f06 <bt_gatt_attr_write_ccc+0x102>
	if (offset + len > sizeof(u16_t)) {
    7e1a:	4419      	add	r1, r3
    7e1c:	2902      	cmp	r1, #2
    7e1e:	461f      	mov	r7, r3
    7e20:	dc74      	bgt.n	7f0c <bt_gatt_attr_write_ccc+0x108>
	return ((u16_t)src[1] << 8) | src[0];
    7e22:	7853      	ldrb	r3, [r2, #1]
    7e24:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    7e26:	2400      	movs	r4, #0
    7e28:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    7e2c:	686b      	ldr	r3, [r5, #4]
    7e2e:	429c      	cmp	r4, r3
    7e30:	d206      	bcs.n	7e40 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7e32:	6829      	ldr	r1, [r5, #0]
    7e34:	4648      	mov	r0, r9
    7e36:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    7e3a:	f7fc fd5d 	bl	48f8 <bt_conn_addr_le_cmp>
    7e3e:	b9b8      	cbnz	r0, 7e70 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    7e40:	686b      	ldr	r3, [r5, #4]
    7e42:	429c      	cmp	r4, r3
    7e44:	d12f      	bne.n	7ea6 <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    7e46:	b356      	cbz	r6, 7e9e <bt_gatt_attr_write_ccc+0x9a>
    7e48:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    7e4a:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    7e4c:	686b      	ldr	r3, [r5, #4]
    7e4e:	429c      	cmp	r4, r3
    7e50:	d217      	bcs.n	7e82 <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    7e52:	6828      	ldr	r0, [r5, #0]
    7e54:	f8cd a018 	str.w	sl, [sp, #24]
    7e58:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    7e5c:	2207      	movs	r2, #7
    7e5e:	a906      	add	r1, sp, #24
    7e60:	4458      	add	r0, fp
    7e62:	f8cd a01b 	str.w	sl, [sp, #27]
    7e66:	f7f9 feb4 	bl	1bd2 <memcmp>
    7e6a:	b118      	cbz	r0, 7e74 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    7e6c:	3401      	adds	r4, #1
    7e6e:	e7ed      	b.n	7e4c <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    7e70:	3401      	adds	r4, #1
    7e72:	e7db      	b.n	7e2c <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    7e74:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    7e76:	2207      	movs	r2, #7
    7e78:	f109 0144 	add.w	r1, r9, #68	; 0x44
    7e7c:	4458      	add	r0, fp
    7e7e:	f7f9 febd 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    7e82:	686b      	ldr	r3, [r5, #4]
    7e84:	429c      	cmp	r4, r3
    7e86:	d10e      	bne.n	7ea6 <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    7e88:	4b22      	ldr	r3, [pc, #136]	; (7f14 <bt_gatt_attr_write_ccc+0x110>)
    7e8a:	9301      	str	r3, [sp, #4]
    7e8c:	9300      	str	r3, [sp, #0]
    7e8e:	4a22      	ldr	r2, [pc, #136]	; (7f18 <bt_gatt_attr_write_ccc+0x114>)
    7e90:	4b22      	ldr	r3, [pc, #136]	; (7f1c <bt_gatt_attr_write_ccc+0x118>)
    7e92:	4923      	ldr	r1, [pc, #140]	; (7f20 <bt_gatt_attr_write_ccc+0x11c>)
    7e94:	4823      	ldr	r0, [pc, #140]	; (7f24 <bt_gatt_attr_write_ccc+0x120>)
    7e96:	f7f9 f879 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    7e9a:	f06f 0710 	mvn.w	r7, #16
}
    7e9e:	4638      	mov	r0, r7
    7ea0:	b00b      	add	sp, #44	; 0x2c
    7ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    7ea6:	682b      	ldr	r3, [r5, #0]
    7ea8:	0124      	lsls	r4, r4, #4
    7eaa:	4423      	add	r3, r4
    7eac:	811e      	strh	r6, [r3, #8]
    7eae:	f00d f9ed 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);
    7eb2:	4a18      	ldr	r2, [pc, #96]	; (7f14 <bt_gatt_attr_write_ccc+0x110>)
    7eb4:	9204      	str	r2, [sp, #16]
    7eb6:	682b      	ldr	r3, [r5, #0]
    7eb8:	4919      	ldr	r1, [pc, #100]	; (7f20 <bt_gatt_attr_write_ccc+0x11c>)
    7eba:	4423      	add	r3, r4
    7ebc:	891b      	ldrh	r3, [r3, #8]
    7ebe:	9303      	str	r3, [sp, #12]
    7ec0:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    7ec4:	9302      	str	r3, [sp, #8]
    7ec6:	9001      	str	r0, [sp, #4]
    7ec8:	9200      	str	r2, [sp, #0]
    7eca:	4b14      	ldr	r3, [pc, #80]	; (7f1c <bt_gatt_attr_write_ccc+0x118>)
    7ecc:	4a16      	ldr	r2, [pc, #88]	; (7f28 <bt_gatt_attr_write_ccc+0x124>)
    7ece:	4817      	ldr	r0, [pc, #92]	; (7f2c <bt_gatt_attr_write_ccc+0x128>)
    7ed0:	f7f9 f85c 	bl	f8c <printk>
	if (ccc->cfg[i].value != ccc->value) {
    7ed4:	682b      	ldr	r3, [r5, #0]
    7ed6:	4423      	add	r3, r4
    7ed8:	891a      	ldrh	r2, [r3, #8]
    7eda:	892b      	ldrh	r3, [r5, #8]
    7edc:	429a      	cmp	r2, r3
    7ede:	d003      	beq.n	7ee8 <bt_gatt_attr_write_ccc+0xe4>
		gatt_ccc_changed(attr, ccc);
    7ee0:	4629      	mov	r1, r5
    7ee2:	4640      	mov	r0, r8
    7ee4:	f7ff fc18 	bl	7718 <gatt_ccc_changed>
	if (!value) {
    7ee8:	2e00      	cmp	r6, #0
    7eea:	d1d8      	bne.n	7e9e <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    7eec:	6828      	ldr	r0, [r5, #0]
    7eee:	9608      	str	r6, [sp, #32]
    7ef0:	4420      	add	r0, r4
    7ef2:	2207      	movs	r2, #7
    7ef4:	a908      	add	r1, sp, #32
    7ef6:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    7efa:	f7f9 fe7f 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    7efe:	682b      	ldr	r3, [r5, #0]
    7f00:	441c      	add	r4, r3
    7f02:	8126      	strh	r6, [r4, #8]
    7f04:	e7cb      	b.n	7e9e <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7f06:	f06f 0706 	mvn.w	r7, #6
    7f0a:	e7c8      	b.n	7e9e <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    7f0c:	f06f 070c 	mvn.w	r7, #12
    7f10:	e7c5      	b.n	7e9e <bt_gatt_attr_write_ccc+0x9a>
    7f12:	bf00      	nop
    7f14:	00015e19 	.word	0x00015e19
    7f18:	0001727c 	.word	0x0001727c
    7f1c:	00018a6c 	.word	0x00018a6c
    7f20:	00017241 	.word	0x00017241
    7f24:	00018b5e 	.word	0x00018b5e
    7f28:	0001723a 	.word	0x0001723a
    7f2c:	00018b88 	.word	0x00018b88

00007f30 <bt_gatt_init>:
{
    7f30:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    7f32:	4806      	ldr	r0, [pc, #24]	; (7f4c <bt_gatt_init+0x1c>)
    7f34:	f7ff fd9a 	bl	7a6c <gatt_register>
	gatt_register(&gatt_svc);
    7f38:	4805      	ldr	r0, [pc, #20]	; (7f50 <bt_gatt_init+0x20>)
    7f3a:	f7ff fd97 	bl	7a6c <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    7f3e:	4905      	ldr	r1, [pc, #20]	; (7f54 <bt_gatt_init+0x24>)
    7f40:	4805      	ldr	r0, [pc, #20]	; (7f58 <bt_gatt_init+0x28>)
}
    7f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    7f46:	f00d bc97 	b.w	15878 <k_delayed_work_init>
    7f4a:	bf00      	nop
    7f4c:	20003cc4 	.word	0x20003cc4
    7f50:	20003d20 	.word	0x20003d20
    7f54:	00008135 	.word	0x00008135
    7f58:	200005d8 	.word	0x200005d8

00007f5c <bt_gatt_attr_read>:
{
    7f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f5e:	b087      	sub	sp, #28
    7f60:	4616      	mov	r6, r2
    7f62:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    7f66:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
	if (offset > value_len) {
    7f6a:	4295      	cmp	r5, r2
{
    7f6c:	460f      	mov	r7, r1
	if (offset > value_len) {
    7f6e:	d81d      	bhi.n	7fac <bt_gatt_attr_read+0x50>
	len = min(buf_len, value_len - offset);
    7f70:	1b54      	subs	r4, r2, r5
    7f72:	429c      	cmp	r4, r3
    7f74:	bfa8      	it	ge
    7f76:	461c      	movge	r4, r3
    7f78:	b2a4      	uxth	r4, r4
    7f7a:	f00d f987 	bl	1528c <_impl_k_current_get>
	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
    7f7e:	4b0d      	ldr	r3, [pc, #52]	; (7fb4 <bt_gatt_attr_read+0x58>)
    7f80:	9305      	str	r3, [sp, #20]
    7f82:	9404      	str	r4, [sp, #16]
    7f84:	9503      	str	r5, [sp, #12]
    7f86:	8a3a      	ldrh	r2, [r7, #16]
    7f88:	9202      	str	r2, [sp, #8]
    7f8a:	9001      	str	r0, [sp, #4]
    7f8c:	9300      	str	r3, [sp, #0]
    7f8e:	4a0a      	ldr	r2, [pc, #40]	; (7fb8 <bt_gatt_attr_read+0x5c>)
    7f90:	490a      	ldr	r1, [pc, #40]	; (7fbc <bt_gatt_attr_read+0x60>)
    7f92:	4b0b      	ldr	r3, [pc, #44]	; (7fc0 <bt_gatt_attr_read+0x64>)
    7f94:	480b      	ldr	r0, [pc, #44]	; (7fc4 <bt_gatt_attr_read+0x68>)
    7f96:	f7f8 fff9 	bl	f8c <printk>
	memcpy(buf, value + offset, len);
    7f9a:	990d      	ldr	r1, [sp, #52]	; 0x34
    7f9c:	4622      	mov	r2, r4
    7f9e:	4429      	add	r1, r5
    7fa0:	4630      	mov	r0, r6
    7fa2:	f7f9 fe2b 	bl	1bfc <memcpy>
}
    7fa6:	4620      	mov	r0, r4
    7fa8:	b007      	add	sp, #28
    7faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7fac:	f06f 0406 	mvn.w	r4, #6
    7fb0:	e7f9      	b.n	7fa6 <bt_gatt_attr_read+0x4a>
    7fb2:	bf00      	nop
    7fb4:	00015e19 	.word	0x00015e19
    7fb8:	0001723a 	.word	0x0001723a
    7fbc:	00017241 	.word	0x00017241
    7fc0:	00018a32 	.word	0x00018a32
    7fc4:	00018af1 	.word	0x00018af1

00007fc8 <read_appearance>:
{
    7fc8:	b530      	push	{r4, r5, lr}
    7fca:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    7fcc:	ac06      	add	r4, sp, #24
    7fce:	2500      	movs	r5, #0
    7fd0:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    7fd4:	2502      	movs	r5, #2
    7fd6:	9401      	str	r4, [sp, #4]
    7fd8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    7fdc:	9502      	str	r5, [sp, #8]
    7fde:	9400      	str	r4, [sp, #0]
    7fe0:	f7ff ffbc 	bl	7f5c <bt_gatt_attr_read>
}
    7fe4:	b007      	add	sp, #28
    7fe6:	bd30      	pop	{r4, r5, pc}

00007fe8 <read_name>:
{
    7fe8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    7fec:	4c0b      	ldr	r4, [pc, #44]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
{
    7fee:	4605      	mov	r5, r0
				 strlen(gap_name));
    7ff0:	4620      	mov	r0, r4
{
    7ff2:	4698      	mov	r8, r3
    7ff4:	460e      	mov	r6, r1
    7ff6:	4617      	mov	r7, r2
				 strlen(gap_name));
    7ff8:	f7f9 fdd6 	bl	1ba8 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    7ffc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8000:	9300      	str	r3, [sp, #0]
    8002:	b280      	uxth	r0, r0
    8004:	9002      	str	r0, [sp, #8]
    8006:	9401      	str	r4, [sp, #4]
    8008:	4643      	mov	r3, r8
    800a:	463a      	mov	r2, r7
    800c:	4631      	mov	r1, r6
    800e:	4628      	mov	r0, r5
    8010:	f7ff ffa4 	bl	7f5c <bt_gatt_attr_read>
}
    8014:	b004      	add	sp, #16
    8016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    801a:	bf00      	nop
    801c:	00018d6b 	.word	0x00018d6b

00008020 <bt_gatt_attr_read_service>:
{
    8020:	b570      	push	{r4, r5, r6, lr}
	struct bt_uuid *uuid = attr->user_data;
    8022:	68cc      	ldr	r4, [r1, #12]
{
    8024:	b086      	sub	sp, #24
	if (uuid->type == BT_UUID_TYPE_16) {
    8026:	7826      	ldrb	r6, [r4, #0]
{
    8028:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	if (uuid->type == BT_UUID_TYPE_16) {
    802c:	b95e      	cbnz	r6, 8046 <bt_gatt_attr_read_service+0x26>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    802e:	8866      	ldrh	r6, [r4, #2]
    8030:	ac06      	add	r4, sp, #24
    8032:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    8036:	2602      	movs	r6, #2
    8038:	9602      	str	r6, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    803a:	9401      	str	r4, [sp, #4]
    803c:	9500      	str	r5, [sp, #0]
    803e:	f7ff ff8d 	bl	7f5c <bt_gatt_attr_read>
}
    8042:	b006      	add	sp, #24
    8044:	bd70      	pop	{r4, r5, r6, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    8046:	2610      	movs	r6, #16
    8048:	9602      	str	r6, [sp, #8]
				 BT_UUID_128(uuid)->val, 16);
    804a:	3401      	adds	r4, #1
    804c:	e7f5      	b.n	803a <bt_gatt_attr_read_service+0x1a>

0000804e <bt_gatt_attr_read_ccc>:
{
    804e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    8052:	68cd      	ldr	r5, [r1, #12]
{
    8054:	b086      	sub	sp, #24
    8056:	4606      	mov	r6, r0
    8058:	460f      	mov	r7, r1
    805a:	4691      	mov	r9, r2
    805c:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    805e:	2400      	movs	r4, #0
    8060:	686b      	ldr	r3, [r5, #4]
    8062:	429c      	cmp	r4, r3
    8064:	d20e      	bcs.n	8084 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    8066:	6829      	ldr	r1, [r5, #0]
    8068:	ea4f 1804 	mov.w	r8, r4, lsl #4
    806c:	4441      	add	r1, r8
    806e:	4630      	mov	r0, r6
    8070:	f7fc fc42 	bl	48f8 <bt_conn_addr_le_cmp>
    8074:	b108      	cbz	r0, 807a <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    8076:	3401      	adds	r4, #1
    8078:	e7f2      	b.n	8060 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    807a:	6829      	ldr	r1, [r5, #0]
    807c:	4441      	add	r1, r8
    807e:	890b      	ldrh	r3, [r1, #8]
    8080:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    8084:	686b      	ldr	r3, [r5, #4]
    8086:	429c      	cmp	r4, r3
		value = 0x0000;
    8088:	bf04      	itt	eq
    808a:	2300      	moveq	r3, #0
    808c:	f8ad 3016 	strheq.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    8090:	2302      	movs	r3, #2
    8092:	9302      	str	r3, [sp, #8]
    8094:	f10d 0316 	add.w	r3, sp, #22
    8098:	9301      	str	r3, [sp, #4]
    809a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    809e:	9300      	str	r3, [sp, #0]
    80a0:	464a      	mov	r2, r9
    80a2:	4653      	mov	r3, sl
    80a4:	4639      	mov	r1, r7
    80a6:	4630      	mov	r0, r6
    80a8:	f7ff ff58 	bl	7f5c <bt_gatt_attr_read>
}
    80ac:	b006      	add	sp, #24
    80ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000080b4 <bt_gatt_foreach_attr>:
{
    80b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80b8:	4699      	mov	r9, r3
    80ba:	4b12      	ldr	r3, [pc, #72]	; (8104 <bt_gatt_foreach_attr+0x50>)
    80bc:	681c      	ldr	r4, [r3, #0]
    80be:	4606      	mov	r6, r0
    80c0:	460f      	mov	r7, r1
    80c2:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    80c4:	b1dc      	cbz	r4, 80fe <bt_gatt_foreach_attr+0x4a>
    80c6:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    80c8:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    80cc:	b1bc      	cbz	r4, 80fe <bt_gatt_foreach_attr+0x4a>
    80ce:	2500      	movs	r5, #0
    80d0:	e006      	b.n	80e0 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    80d2:	6820      	ldr	r0, [r4, #0]
    80d4:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    80d8:	8a03      	ldrh	r3, [r0, #16]
    80da:	42b3      	cmp	r3, r6
    80dc:	d207      	bcs.n	80ee <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    80de:	3501      	adds	r5, #1
    80e0:	6863      	ldr	r3, [r4, #4]
    80e2:	42ab      	cmp	r3, r5
    80e4:	d8f5      	bhi.n	80d2 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    80e6:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    80e8:	b14c      	cbz	r4, 80fe <bt_gatt_foreach_attr+0x4a>
    80ea:	3c08      	subs	r4, #8
    80ec:	e7ee      	b.n	80cc <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    80ee:	42bb      	cmp	r3, r7
    80f0:	d8f5      	bhi.n	80de <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    80f2:	4649      	mov	r1, r9
    80f4:	47c0      	blx	r8
    80f6:	2800      	cmp	r0, #0
    80f8:	d1f1      	bne.n	80de <bt_gatt_foreach_attr+0x2a>
    80fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8102:	bf00      	nop
    8104:	200005a8 	.word	0x200005a8

00008108 <bt_gatt_indicate.part.11>:
int bt_gatt_indicate(struct bt_conn *conn,
    8108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    810a:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    810e:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    8110:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    8112:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    8114:	2302      	movs	r3, #2
    8116:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    811a:	4a05      	ldr	r2, [pc, #20]	; (8130 <bt_gatt_indicate.part.11+0x28>)
    811c:	8a00      	ldrh	r0, [r0, #16]
    811e:	466b      	mov	r3, sp
    8120:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8124:	f7ff ffc6 	bl	80b4 <bt_gatt_foreach_attr>
}
    8128:	9800      	ldr	r0, [sp, #0]
    812a:	b007      	add	sp, #28
    812c:	f85d fb04 	ldr.w	pc, [sp], #4
    8130:	00007935 	.word	0x00007935

00008134 <sc_process>:
{
    8134:	b530      	push	{r4, r5, lr}
    8136:	4604      	mov	r4, r0
    8138:	b089      	sub	sp, #36	; 0x24
    813a:	f00d f8a7 	bl	1528c <_impl_k_current_get>
	BT_DBG("start 0x%04x end 0x%04x", sc->start, sc->end);
    813e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
    8142:	4b24      	ldr	r3, [pc, #144]	; (81d4 <sc_process+0xa0>)
    8144:	9203      	str	r2, [sp, #12]
    8146:	f834 2c04 	ldrh.w	r2, [r4, #-4]
    814a:	9304      	str	r3, [sp, #16]
    814c:	9202      	str	r2, [sp, #8]
    814e:	9001      	str	r0, [sp, #4]
    8150:	9300      	str	r3, [sp, #0]
    8152:	4a21      	ldr	r2, [pc, #132]	; (81d8 <sc_process+0xa4>)
    8154:	4b21      	ldr	r3, [pc, #132]	; (81dc <sc_process+0xa8>)
    8156:	4922      	ldr	r1, [pc, #136]	; (81e0 <sc_process+0xac>)
    8158:	4822      	ldr	r0, [pc, #136]	; (81e4 <sc_process+0xb0>)
    815a:	f7f8 ff17 	bl	f8c <printk>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    815e:	f834 3c04 	ldrh.w	r3, [r4, #-4]
    8162:	f8ad 301c 	strh.w	r3, [sp, #28]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    8166:	f834 3c02 	ldrh.w	r3, [r4, #-2]
    816a:	f8ad 301e 	strh.w	r3, [sp, #30]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    816e:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
    8172:	f104 0528 	add.w	r5, r4, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8176:	f3bf 8f5b 	dmb	ish
    817a:	e855 3f00 	ldrex	r3, [r5]
    817e:	f023 0301 	bic.w	r3, r3, #1
    8182:	e845 3200 	strex	r2, r3, [r5]
    8186:	2a00      	cmp	r2, #0
    8188:	d1f7      	bne.n	817a <sc_process+0x46>
    818a:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    818e:	2300      	movs	r3, #0
    8190:	f824 3c04 	strh.w	r3, [r4, #-4]
	sc->end = 0;
    8194:	f824 3c02 	strh.w	r3, [r4, #-2]
	sc->params.attr = &gatt_attrs[2];
    8198:	4b13      	ldr	r3, [pc, #76]	; (81e8 <sc_process+0xb4>)
    819a:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    819e:	4b13      	ldr	r3, [pc, #76]	; (81ec <sc_process+0xb8>)
    81a0:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    81a4:	ab07      	add	r3, sp, #28
    81a6:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    81aa:	2304      	movs	r3, #4
    81ac:	f824 3c08 	strh.w	r3, [r4, #-8]
    81b0:	f7ff ffaa 	bl	8108 <bt_gatt_indicate.part.11>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    81b4:	b958      	cbnz	r0, 81ce <sc_process+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    81b6:	f3bf 8f5b 	dmb	ish
    81ba:	e855 3f00 	ldrex	r3, [r5]
    81be:	f043 0302 	orr.w	r3, r3, #2
    81c2:	e845 3200 	strex	r2, r3, [r5]
    81c6:	2a00      	cmp	r2, #0
    81c8:	d1f7      	bne.n	81ba <sc_process+0x86>
    81ca:	f3bf 8f5b 	dmb	ish
}
    81ce:	b009      	add	sp, #36	; 0x24
    81d0:	bd30      	pop	{r4, r5, pc}
    81d2:	bf00      	nop
    81d4:	00015e19 	.word	0x00015e19
    81d8:	0001723a 	.word	0x0001723a
    81dc:	00018a0e 	.word	0x00018a0e
    81e0:	00017241 	.word	0x00017241
    81e4:	00018df5 	.word	0x00018df5
    81e8:	20003cf8 	.word	0x20003cf8
    81ec:	00007cb1 	.word	0x00007cb1

000081f0 <bt_gatt_attr_next>:
{
    81f0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    81f2:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    81f4:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    81f6:	3101      	adds	r1, #1
    81f8:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    81fa:	2200      	movs	r2, #0
    81fc:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    8200:	4608      	mov	r0, r1
    8202:	4a03      	ldr	r2, [pc, #12]	; (8210 <bt_gatt_attr_next+0x20>)
    8204:	f7ff ff56 	bl	80b4 <bt_gatt_foreach_attr>
}
    8208:	9801      	ldr	r0, [sp, #4]
    820a:	b003      	add	sp, #12
    820c:	f85d fb04 	ldr.w	pc, [sp], #4
    8210:	00007665 	.word	0x00007665

00008214 <bt_gatt_attr_read_chrc>:
{
    8214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    8218:	68ce      	ldr	r6, [r1, #12]
{
    821a:	b08b      	sub	sp, #44	; 0x2c
    821c:	4607      	mov	r7, r0
    821e:	4699      	mov	r9, r3
	next = bt_gatt_attr_next(attr);
    8220:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    8222:	7933      	ldrb	r3, [r6, #4]
    8224:	f88d 3014 	strb.w	r3, [sp, #20]
{
    8228:	460c      	mov	r4, r1
    822a:	4690      	mov	r8, r2
	next = bt_gatt_attr_next(attr);
    822c:	f7ff ffe0 	bl	81f0 <bt_gatt_attr_next>
	if (!next) {
    8230:	4605      	mov	r5, r0
    8232:	bb20      	cbnz	r0, 827e <bt_gatt_attr_read_chrc+0x6a>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    8234:	4b18      	ldr	r3, [pc, #96]	; (8298 <bt_gatt_attr_read_chrc+0x84>)
    8236:	8a22      	ldrh	r2, [r4, #16]
    8238:	9302      	str	r3, [sp, #8]
    823a:	9201      	str	r2, [sp, #4]
    823c:	9300      	str	r3, [sp, #0]
    823e:	4a17      	ldr	r2, [pc, #92]	; (829c <bt_gatt_attr_read_chrc+0x88>)
    8240:	4b17      	ldr	r3, [pc, #92]	; (82a0 <bt_gatt_attr_read_chrc+0x8c>)
    8242:	4918      	ldr	r1, [pc, #96]	; (82a4 <bt_gatt_attr_read_chrc+0x90>)
    8244:	4818      	ldr	r0, [pc, #96]	; (82a8 <bt_gatt_attr_read_chrc+0x94>)
    8246:	f7f8 fea1 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    824a:	f88d 5015 	strb.w	r5, [sp, #21]
    824e:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    8252:	6831      	ldr	r1, [r6, #0]
    8254:	780b      	ldrb	r3, [r1, #0]
    8256:	b9b3      	cbnz	r3, 8286 <bt_gatt_attr_read_chrc+0x72>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    8258:	884b      	ldrh	r3, [r1, #2]
    825a:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    825e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    8260:	9302      	str	r3, [sp, #8]
    8262:	ab05      	add	r3, sp, #20
    8264:	9301      	str	r3, [sp, #4]
    8266:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    826a:	9300      	str	r3, [sp, #0]
    826c:	4642      	mov	r2, r8
    826e:	464b      	mov	r3, r9
    8270:	4621      	mov	r1, r4
    8272:	4638      	mov	r0, r7
    8274:	f7ff fe72 	bl	7f5c <bt_gatt_attr_read>
}
    8278:	b00b      	add	sp, #44	; 0x2c
    827a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    827e:	8a03      	ldrh	r3, [r0, #16]
    8280:	f8ad 3015 	strh.w	r3, [sp, #21]
    8284:	e7e5      	b.n	8252 <bt_gatt_attr_read_chrc+0x3e>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    8286:	2210      	movs	r2, #16
    8288:	3101      	adds	r1, #1
    828a:	f10d 0017 	add.w	r0, sp, #23
    828e:	f7f9 fcb5 	bl	1bfc <memcpy>
		value_len += 16;
    8292:	2313      	movs	r3, #19
    8294:	e7e4      	b.n	8260 <bt_gatt_attr_read_chrc+0x4c>
    8296:	bf00      	nop
    8298:	00015e19 	.word	0x00015e19
    829c:	0001727c 	.word	0x0001727c
    82a0:	00018a44 	.word	0x00018a44
    82a4:	00017241 	.word	0x00017241
    82a8:	00018b28 	.word	0x00018b28

000082ac <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    82ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    82ae:	4604      	mov	r4, r0
    82b0:	f00c ffec 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    82b4:	4b0a      	ldr	r3, [pc, #40]	; (82e0 <bt_gatt_connected+0x34>)
    82b6:	9303      	str	r3, [sp, #12]
    82b8:	9001      	str	r0, [sp, #4]
    82ba:	9300      	str	r3, [sp, #0]
    82bc:	9402      	str	r4, [sp, #8]
    82be:	4b09      	ldr	r3, [pc, #36]	; (82e4 <bt_gatt_connected+0x38>)
    82c0:	4a09      	ldr	r2, [pc, #36]	; (82e8 <bt_gatt_connected+0x3c>)
    82c2:	490a      	ldr	r1, [pc, #40]	; (82ec <bt_gatt_connected+0x40>)
    82c4:	480a      	ldr	r0, [pc, #40]	; (82f0 <bt_gatt_connected+0x44>)
    82c6:	f7f8 fe61 	bl	f8c <printk>
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    82ca:	4a0a      	ldr	r2, [pc, #40]	; (82f4 <bt_gatt_connected+0x48>)
    82cc:	4623      	mov	r3, r4
    82ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    82d2:	2001      	movs	r0, #1
#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    82d4:	b004      	add	sp, #16
    82d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    82da:	f7ff beeb 	b.w	80b4 <bt_gatt_foreach_attr>
    82de:	bf00      	nop
    82e0:	00015e19 	.word	0x00015e19
    82e4:	00018aca 	.word	0x00018aca
    82e8:	0001723a 	.word	0x0001723a
    82ec:	00017241 	.word	0x00017241
    82f0:	00017795 	.word	0x00017795
    82f4:	00007bf9 	.word	0x00007bf9

000082f8 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    82f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    82fa:	4604      	mov	r4, r0
    82fc:	f00c ffc6 	bl	1528c <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    8300:	4b0a      	ldr	r3, [pc, #40]	; (832c <bt_gatt_disconnected+0x34>)
    8302:	9303      	str	r3, [sp, #12]
    8304:	9001      	str	r0, [sp, #4]
    8306:	9300      	str	r3, [sp, #0]
    8308:	9402      	str	r4, [sp, #8]
    830a:	4b09      	ldr	r3, [pc, #36]	; (8330 <bt_gatt_disconnected+0x38>)
    830c:	4a09      	ldr	r2, [pc, #36]	; (8334 <bt_gatt_disconnected+0x3c>)
    830e:	490a      	ldr	r1, [pc, #40]	; (8338 <bt_gatt_disconnected+0x40>)
    8310:	480a      	ldr	r0, [pc, #40]	; (833c <bt_gatt_disconnected+0x44>)
    8312:	f7f8 fe3b 	bl	f8c <printk>
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8316:	4a0a      	ldr	r2, [pc, #40]	; (8340 <bt_gatt_disconnected+0x48>)
    8318:	4623      	mov	r3, r4
    831a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    831e:	2001      	movs	r0, #1
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    8320:	b004      	add	sp, #16
    8322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8326:	f7ff bec5 	b.w	80b4 <bt_gatt_foreach_attr>
    832a:	bf00      	nop
    832c:	00015e19 	.word	0x00015e19
    8330:	00018adc 	.word	0x00018adc
    8334:	0001723a 	.word	0x0001723a
    8338:	00017241 	.word	0x00017241
    833c:	00017795 	.word	0x00017795
    8340:	00007d2d 	.word	0x00007d2d

00008344 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8344:	b570      	push	{r4, r5, r6, lr}
    8346:	b086      	sub	sp, #24
    8348:	4605      	mov	r5, r0
    834a:	460e      	mov	r6, r1
    834c:	f00c ff9e 	bl	1528c <_impl_k_current_get>
	int i;
	static struct bt_l2cap_chan_ops ops = {
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    8350:	4c10      	ldr	r4, [pc, #64]	; (8394 <bt_smp_accept+0x50>)
    8352:	882b      	ldrh	r3, [r5, #0]
    8354:	9303      	str	r3, [sp, #12]
    8356:	9001      	str	r0, [sp, #4]
    8358:	4b0f      	ldr	r3, [pc, #60]	; (8398 <bt_smp_accept+0x54>)
    835a:	9404      	str	r4, [sp, #16]
    835c:	9502      	str	r5, [sp, #8]
    835e:	9400      	str	r4, [sp, #0]
    8360:	4a0e      	ldr	r2, [pc, #56]	; (839c <bt_smp_accept+0x58>)
    8362:	490f      	ldr	r1, [pc, #60]	; (83a0 <bt_smp_accept+0x5c>)
    8364:	480f      	ldr	r0, [pc, #60]	; (83a4 <bt_smp_accept+0x60>)
    8366:	f7f8 fe11 	bl	f8c <printk>

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    836a:	4b0f      	ldr	r3, [pc, #60]	; (83a8 <bt_smp_accept+0x64>)
    836c:	6818      	ldr	r0, [r3, #0]
    836e:	b920      	cbnz	r0, 837a <bt_smp_accept+0x36>
			continue;
		}

		smp->chan.ops = &ops;
    8370:	4a0e      	ldr	r2, [pc, #56]	; (83ac <bt_smp_accept+0x68>)
    8372:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    8374:	6033      	str	r3, [r6, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    8376:	b006      	add	sp, #24
    8378:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    837a:	9402      	str	r4, [sp, #8]
    837c:	e88d 0030 	stmia.w	sp, {r4, r5}
    8380:	4b05      	ldr	r3, [pc, #20]	; (8398 <bt_smp_accept+0x54>)
    8382:	4a0b      	ldr	r2, [pc, #44]	; (83b0 <bt_smp_accept+0x6c>)
    8384:	4906      	ldr	r1, [pc, #24]	; (83a0 <bt_smp_accept+0x5c>)
    8386:	480b      	ldr	r0, [pc, #44]	; (83b4 <bt_smp_accept+0x70>)
    8388:	f7f8 fe00 	bl	f8c <printk>
	return -ENOMEM;
    838c:	f06f 000b 	mvn.w	r0, #11
    8390:	e7f1      	b.n	8376 <bt_smp_accept+0x32>
    8392:	bf00      	nop
    8394:	00015e19 	.word	0x00015e19
    8398:	00018e6f 	.word	0x00018e6f
    839c:	0001723a 	.word	0x0001723a
    83a0:	00017241 	.word	0x00017241
    83a4:	00017df0 	.word	0x00017df0
    83a8:	20000614 	.word	0x20000614
    83ac:	20003d38 	.word	0x20003d38
    83b0:	000171f2 	.word	0x000171f2
    83b4:	00018e7d 	.word	0x00018e7d

000083b8 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    83b8:	2100      	movs	r1, #0
{
    83ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    83be:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    83c0:	4608      	mov	r0, r1
    83c2:	f7fd f94e 	bl	5662 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    83c6:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    83ca:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    83cc:	2101      	movs	r1, #1
    83ce:	4630      	mov	r0, r6
    83d0:	f00b ff14 	bl	141fc <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    83d4:	2505      	movs	r5, #5
    83d6:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    83d8:	2101      	movs	r1, #1
    83da:	4630      	mov	r0, r6
    83dc:	f00b ff0e 	bl	141fc <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    83e0:	7005      	strb	r5, [r0, #0]
    83e2:	4622      	mov	r2, r4
    83e4:	4638      	mov	r0, r7
    83e6:	2300      	movs	r3, #0
    83e8:	2106      	movs	r1, #6
}
    83ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    83ee:	f7fd b93b 	b.w	5668 <bt_l2cap_send_cb>

000083f2 <bt_smp_sign_verify>:
    83f2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    83f6:	4770      	bx	lr

000083f8 <bt_smp_init>:

int bt_smp_init(void)
{
    83f8:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    83fa:	4802      	ldr	r0, [pc, #8]	; (8404 <bt_smp_init+0xc>)
    83fc:	f7fd f81c 	bl	5438 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    8400:	2000      	movs	r0, #0
    8402:	bd08      	pop	{r3, pc}
    8404:	20003d2c 	.word	0x20003d2c

00008408 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    8408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    840a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    840c:	1dc3      	adds	r3, r0, #7
{
    840e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    8410:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    8414:	1e50      	subs	r0, r2, #1
{
    8416:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    8418:	b280      	uxth	r0, r0
{
    841a:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    841c:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    841e:	2100      	movs	r1, #0
    8420:	2204      	movs	r2, #4
    8422:	fb06 5000 	mla	r0, r6, r0, r5
    8426:	f7f9 fc15 	bl	1c54 <memset>
    842a:	3c02      	subs	r4, #2
    842c:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    842e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    8432:	42bc      	cmp	r4, r7
    8434:	d101      	bne.n	843a <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    8436:	b003      	add	sp, #12
    8438:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    843a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    843e:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    8440:	2204      	movs	r2, #4
    8442:	1b80      	subs	r0, r0, r6
    8444:	eb0d 0102 	add.w	r1, sp, r2
    8448:	4428      	add	r0, r5
    844a:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    844c:	9301      	str	r3, [sp, #4]
    844e:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    8450:	f7f9 fbd4 	bl	1bfc <memcpy>
    8454:	e7ed      	b.n	8432 <mem_init+0x2a>

00008456 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    8456:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    8458:	6805      	ldr	r5, [r0, #0]
{
    845a:	4606      	mov	r6, r0
	if (*mem_head) {
    845c:	b195      	cbz	r5, 8484 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    845e:	1deb      	adds	r3, r5, #7
    8460:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    8464:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    8466:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    8468:	4629      	mov	r1, r5
    846a:	eb0d 0002 	add.w	r0, sp, r2
    846e:	f7f9 fbc5 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    8472:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    8474:	3c01      	subs	r4, #1
    8476:	b2a4      	uxth	r4, r4
		if (head) {
    8478:	b11b      	cbz	r3, 8482 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    847a:	1dda      	adds	r2, r3, #7
    847c:	f022 0203 	bic.w	r2, r2, #3
    8480:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    8482:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    8484:	4628      	mov	r0, r5
    8486:	b002      	add	sp, #8
    8488:	bd70      	pop	{r4, r5, r6, pc}

0000848a <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    848a:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    848c:	680c      	ldr	r4, [r1, #0]
{
    848e:	4606      	mov	r6, r0
    8490:	460d      	mov	r5, r1
	if (*mem_head) {
    8492:	b11c      	cbz	r4, 849c <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    8494:	1de3      	adds	r3, r4, #7
    8496:	f023 0303 	bic.w	r3, r3, #3
    849a:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    849c:	2204      	movs	r2, #4
    849e:	4629      	mov	r1, r5
    84a0:	4630      	mov	r0, r6
    84a2:	f7f9 fbab 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    84a6:	1df2      	adds	r2, r6, #7
    84a8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    84ac:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    84ae:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    84b0:	602e      	str	r6, [r5, #0]
    84b2:	bd70      	pop	{r4, r5, r6, pc}

000084b4 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    84b4:	b118      	cbz	r0, 84be <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    84b6:	3007      	adds	r0, #7
    84b8:	f020 0003 	bic.w	r0, r0, #3
    84bc:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    84be:	4770      	bx	lr

000084c0 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    84c0:	fb02 0001 	mla	r0, r2, r1, r0
    84c4:	4770      	bx	lr

000084c6 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    84c6:	1a40      	subs	r0, r0, r1
    84c8:	b280      	uxth	r0, r0
}
    84ca:	fbb0 f0f2 	udiv	r0, r0, r2
    84ce:	4770      	bx	lr

000084d0 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    84d0:	b510      	push	{r4, lr}
	src += len;
    84d2:	4411      	add	r1, r2
    84d4:	3801      	subs	r0, #1
	while (len--) {
    84d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    84da:	3a01      	subs	r2, #1
    84dc:	b292      	uxth	r2, r2
    84de:	429a      	cmp	r2, r3
    84e0:	d100      	bne.n	84e4 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    84e2:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    84e4:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    84e8:	f800 4f01 	strb.w	r4, [r0, #1]!
    84ec:	e7f5      	b.n	84da <mem_rcopy+0xa>

000084ee <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    84ee:	4401      	add	r1, r0
	while (len--) {
    84f0:	4288      	cmp	r0, r1
    84f2:	d101      	bne.n	84f8 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    84f4:	2000      	movs	r0, #0
    84f6:	4770      	bx	lr
		if (*src++) {
    84f8:	f810 3b01 	ldrb.w	r3, [r0], #1
    84fc:	2b00      	cmp	r3, #0
    84fe:	d0f7      	beq.n	84f0 <mem_nz+0x2>
			return 1;
    8500:	2001      	movs	r0, #1
}
    8502:	4770      	bx	lr

00008504 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    8504:	6010      	str	r0, [r2, #0]
    8506:	6008      	str	r0, [r1, #0]

	return link;
}
    8508:	4770      	bx	lr

0000850a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    850a:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    850c:	6814      	ldr	r4, [r2, #0]
    850e:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    8510:	6814      	ldr	r4, [r2, #0]
    8512:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    8514:	6010      	str	r0, [r2, #0]

	return link;
}
    8516:	bd10      	pop	{r4, pc}

00008518 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    8518:	4288      	cmp	r0, r1
    851a:	d003      	beq.n	8524 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    851c:	b11a      	cbz	r2, 8526 <memq_peek+0xe>
		*mem = head->mem;
    851e:	6843      	ldr	r3, [r0, #4]
    8520:	6013      	str	r3, [r2, #0]
    8522:	4770      	bx	lr
		return NULL;
    8524:	2000      	movs	r0, #0
	}

	return head;
}
    8526:	4770      	bx	lr

00008528 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    8528:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    852a:	4283      	cmp	r3, r0
    852c:	d009      	beq.n	8542 <memq_dequeue+0x1a>
	if (mem) {
    852e:	b122      	cbz	r2, 853a <memq_dequeue+0x12>
		*mem = head->mem;
    8530:	6858      	ldr	r0, [r3, #4]
    8532:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    8534:	681a      	ldr	r2, [r3, #0]
    8536:	600a      	str	r2, [r1, #0]

	return link;
    8538:	e001      	b.n	853e <memq_dequeue+0x16>
	if (!link) {
    853a:	2b00      	cmp	r3, #0
    853c:	d1fa      	bne.n	8534 <memq_dequeue+0xc>
}
    853e:	4618      	mov	r0, r3
    8540:	4770      	bx	lr
		return NULL;
    8542:	2300      	movs	r3, #0
    8544:	e7fb      	b.n	853e <memq_dequeue+0x16>
	...

00008548 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    8548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    854c:	4f11      	ldr	r7, [pc, #68]	; (8594 <mayfly_init+0x4c>)
    854e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8598 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    8552:	2604      	movs	r6, #4
	while (callee_id--) {
    8554:	3e01      	subs	r6, #1
    8556:	b2f6      	uxtb	r6, r6
    8558:	2eff      	cmp	r6, #255	; 0xff
    855a:	d019      	beq.n	8590 <mayfly_init+0x48>
    855c:	b233      	sxth	r3, r6
    855e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    8562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8566:	011d      	lsls	r5, r3, #4
    8568:	2404      	movs	r4, #4
    856a:	f04f 0a0c 	mov.w	sl, #12
    856e:	e00a      	b.n	8586 <mayfly_init+0x3e>
    8570:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    8574:	1d0a      	adds	r2, r1, #4
    8576:	eb04 0008 	add.w	r0, r4, r8
    857a:	443a      	add	r2, r7
    857c:	4439      	add	r1, r7
    857e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    8582:	f7ff ffbf 	bl	8504 <memq_init>
		while (caller_id--) {
    8586:	3c01      	subs	r4, #1
    8588:	b2e4      	uxtb	r4, r4
    858a:	2cff      	cmp	r4, #255	; 0xff
    858c:	d1f0      	bne.n	8570 <mayfly_init+0x28>
    858e:	e7e1      	b.n	8554 <mayfly_init+0xc>
    8590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8594:	20000728 	.word	0x20000728
    8598:	200006a8 	.word	0x200006a8

0000859c <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    859c:	b4f0      	push	{r4, r5, r6, r7}
    859e:	4b12      	ldr	r3, [pc, #72]	; (85e8 <mayfly_enable+0x4c>)
    85a0:	4605      	mov	r5, r0
    85a2:	460f      	mov	r7, r1
    85a4:	260c      	movs	r6, #12
    85a6:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    85a8:	b172      	cbz	r2, 85c8 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    85aa:	4361      	muls	r1, r4
    85ac:	fb06 1400 	mla	r4, r6, r0, r1
    85b0:	4423      	add	r3, r4
    85b2:	7a59      	ldrb	r1, [r3, #9]
    85b4:	7a18      	ldrb	r0, [r3, #8]
    85b6:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    85b8:	bf04      	itt	eq
    85ba:	3101      	addeq	r1, #1
    85bc:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    85be:	4628      	mov	r0, r5
    85c0:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    85c2:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    85c4:	f00b bc14 	b.w	13df0 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    85c8:	434c      	muls	r4, r1
    85ca:	fb06 4400 	mla	r4, r6, r0, r4
    85ce:	4423      	add	r3, r4
    85d0:	7a9c      	ldrb	r4, [r3, #10]
    85d2:	7ada      	ldrb	r2, [r3, #11]
    85d4:	42a2      	cmp	r2, r4
    85d6:	d104      	bne.n	85e2 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    85d8:	3201      	adds	r2, #1
    85da:	729a      	strb	r2, [r3, #10]
}
    85dc:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    85de:	f00b bc67 	b.w	13eb0 <mayfly_pend>
}
    85e2:	bcf0      	pop	{r4, r5, r6, r7}
    85e4:	4770      	bx	lr
    85e6:	bf00      	nop
    85e8:	20000728 	.word	0x20000728

000085ec <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    85ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85ee:	4605      	mov	r5, r0
    85f0:	460e      	mov	r6, r1
    85f2:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    85f4:	b18a      	cbz	r2, 861a <mayfly_enqueue+0x2e>
    85f6:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    85f8:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    85fa:	7820      	ldrb	r0, [r4, #0]
    85fc:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    85fe:	f010 0703 	ands.w	r7, r0, #3
    8602:	d029      	beq.n	8658 <mayfly_enqueue+0x6c>
		if (chain) {
    8604:	b303      	cbz	r3, 8648 <mayfly_enqueue+0x5c>
			if (state != 1) {
    8606:	2f01      	cmp	r7, #1
    8608:	d039      	beq.n	867e <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    860a:	3201      	adds	r2, #1
    860c:	b2d2      	uxtb	r2, r2
    860e:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    8610:	4631      	mov	r1, r6
    8612:	4628      	mov	r0, r5
    8614:	f00b fc4c 	bl	13eb0 <mayfly_pend>
    8618:	e01c      	b.n	8654 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    861a:	f00b fc37 	bl	13e8c <mayfly_prio_is_equal>
    861e:	2800      	cmp	r0, #0
    8620:	d0e9      	beq.n	85f6 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    8622:	4631      	mov	r1, r6
    8624:	4628      	mov	r0, r5
    8626:	f00b fc0b 	bl	13e40 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    862a:	2800      	cmp	r0, #0
    862c:	d0e3      	beq.n	85f6 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    862e:	2330      	movs	r3, #48	; 0x30
    8630:	220c      	movs	r2, #12
    8632:	4373      	muls	r3, r6
    8634:	fb02 3305 	mla	r3, r2, r5, r3
    8638:	4a12      	ldr	r2, [pc, #72]	; (8684 <mayfly_enqueue+0x98>)
    863a:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    863c:	7a93      	ldrb	r3, [r2, #10]
    863e:	7ad2      	ldrb	r2, [r2, #11]
    8640:	1a9b      	subs	r3, r3, r2
    8642:	bf18      	it	ne
    8644:	2301      	movne	r3, #1
    8646:	e7d7      	b.n	85f8 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    8648:	3202      	adds	r2, #2
    864a:	b2d2      	uxtb	r2, r2
    864c:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    864e:	68e3      	ldr	r3, [r4, #12]
    8650:	68a0      	ldr	r0, [r4, #8]
    8652:	4798      	blx	r3
		return 0;
    8654:	2000      	movs	r0, #0
    8656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    8658:	2b00      	cmp	r3, #0
    865a:	d0f8      	beq.n	864e <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    865c:	3201      	adds	r2, #1
    865e:	b2d2      	uxtb	r2, r2
    8660:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    8662:	2304      	movs	r3, #4
    8664:	2230      	movs	r2, #48	; 0x30
    8666:	fb12 3206 	smlabb	r2, r2, r6, r3
    866a:	230c      	movs	r3, #12
    866c:	fb13 2305 	smlabb	r3, r3, r5, r2
    8670:	4a04      	ldr	r2, [pc, #16]	; (8684 <mayfly_enqueue+0x98>)
    8672:	6860      	ldr	r0, [r4, #4]
    8674:	441a      	add	r2, r3
    8676:	4621      	mov	r1, r4
    8678:	f7ff ff47 	bl	850a <memq_enqueue>
    867c:	e7c8      	b.n	8610 <mayfly_enqueue+0x24>
			return 1;
    867e:	4638      	mov	r0, r7

	return 0;
}
    8680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8682:	bf00      	nop
    8684:	20000728 	.word	0x20000728

00008688 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    8688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    868c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    8690:	b089      	sub	sp, #36	; 0x24
    8692:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    8694:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    8698:	4e43      	ldr	r6, [pc, #268]	; (87a8 <mayfly_run+0x120>)
    869a:	9304      	str	r3, [sp, #16]
{
    869c:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    869e:	2404      	movs	r4, #4
	u8_t disable = 0;
    86a0:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    86a4:	3c01      	subs	r4, #1
    86a6:	b2e4      	uxtb	r4, r4
    86a8:	2cff      	cmp	r4, #255	; 0xff
    86aa:	d10b      	bne.n	86c4 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    86ac:	9b01      	ldr	r3, [sp, #4]
    86ae:	2b00      	cmp	r3, #0
    86b0:	d076      	beq.n	87a0 <mayfly_run+0x118>
    86b2:	f1b8 0f00 	cmp.w	r8, #0
    86b6:	d173      	bne.n	87a0 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    86b8:	4642      	mov	r2, r8
    86ba:	4629      	mov	r1, r5
    86bc:	4628      	mov	r0, r5
    86be:	f00b fb97 	bl	13df0 <mayfly_enable_cb>
    86c2:	e06d      	b.n	87a0 <mayfly_run+0x118>
		struct mayfly *m = 0;
    86c4:	f10d 0b20 	add.w	fp, sp, #32
    86c8:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    86ca:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    86cc:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    86d0:	f04f 0930 	mov.w	r9, #48	; 0x30
    86d4:	fb07 f304 	mul.w	r3, r7, r4
    86d8:	fb09 3005 	mla	r0, r9, r5, r3
    86dc:	1831      	adds	r1, r6, r0
    86de:	465a      	mov	r2, fp
    86e0:	6849      	ldr	r1, [r1, #4]
    86e2:	5830      	ldr	r0, [r6, r0]
    86e4:	9302      	str	r3, [sp, #8]
    86e6:	f7ff ff17 	bl	8518 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    86ea:	9b04      	ldr	r3, [sp, #16]
    86ec:	fb17 3704 	smlabb	r7, r7, r4, r3
    86f0:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    86f2:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    86f4:	9303      	str	r3, [sp, #12]
		while (link) {
    86f6:	f1ba 0f00 	cmp.w	sl, #0
    86fa:	d119      	bne.n	8730 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    86fc:	2230      	movs	r2, #48	; 0x30
    86fe:	230c      	movs	r3, #12
    8700:	436a      	muls	r2, r5
    8702:	fb03 2204 	mla	r2, r3, r4, r2
    8706:	4432      	add	r2, r6
    8708:	7a91      	ldrb	r1, [r2, #10]
    870a:	7ad0      	ldrb	r0, [r2, #11]
    870c:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    870e:	bf1e      	ittt	ne
    8710:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    8712:	2201      	movne	r2, #1
    8714:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    8716:	2230      	movs	r2, #48	; 0x30
    8718:	436a      	muls	r2, r5
    871a:	fb03 2304 	mla	r3, r3, r4, r2
    871e:	4433      	add	r3, r6
    8720:	7a1a      	ldrb	r2, [r3, #8]
    8722:	7a59      	ldrb	r1, [r3, #9]
    8724:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    8726:	bf1c      	itt	ne
    8728:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    872a:	f04f 0801 	movne.w	r8, #1
    872e:	e7b9      	b.n	86a4 <mayfly_run+0x1c>
			req = m->_req;
    8730:	9b07      	ldr	r3, [sp, #28]
    8732:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    8734:	785a      	ldrb	r2, [r3, #1]
    8736:	1abf      	subs	r7, r7, r2
    8738:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    873c:	2f01      	cmp	r7, #1
    873e:	d104      	bne.n	874a <mayfly_run+0xc2>
				m->_ack--;
    8740:	3a01      	subs	r2, #1
    8742:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    8744:	6898      	ldr	r0, [r3, #8]
    8746:	68da      	ldr	r2, [r3, #12]
    8748:	4790      	blx	r2
			req = m->_req;
    874a:	9a07      	ldr	r2, [sp, #28]
    874c:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    874e:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    8750:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    8752:	1a9a      	subs	r2, r3, r2
    8754:	f002 0203 	and.w	r2, r2, #3
    8758:	2a01      	cmp	r2, #1
    875a:	9305      	str	r3, [sp, #20]
    875c:	d00d      	beq.n	877a <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    875e:	9b02      	ldr	r3, [sp, #8]
    8760:	9903      	ldr	r1, [sp, #12]
    8762:	fb09 3005 	mla	r0, r9, r5, r3
    8766:	4430      	add	r0, r6
    8768:	2200      	movs	r2, #0
    876a:	6840      	ldr	r0, [r0, #4]
    876c:	f7ff fedc 	bl	8528 <memq_dequeue>
				m->_link = link;
    8770:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    8772:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    8774:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    8778:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    877a:	9b02      	ldr	r3, [sp, #8]
    877c:	fb09 3305 	mla	r3, r9, r5, r3
    8780:	18f1      	adds	r1, r6, r3
    8782:	465a      	mov	r2, fp
    8784:	6849      	ldr	r1, [r1, #4]
    8786:	58f0      	ldr	r0, [r6, r3]
    8788:	f7ff fec6 	bl	8518 <memq_peek>
			if (state == 1) {
    878c:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    878e:	4682      	mov	sl, r0
			if (state == 1) {
    8790:	d1b1      	bne.n	86f6 <mayfly_run+0x6e>
				if (caller_id || link) {
    8792:	b90c      	cbnz	r4, 8798 <mayfly_run+0x110>
    8794:	2800      	cmp	r0, #0
    8796:	d0b1      	beq.n	86fc <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    8798:	4629      	mov	r1, r5
    879a:	4628      	mov	r0, r5
    879c:	f00b fb88 	bl	13eb0 <mayfly_pend>
	}
}
    87a0:	b009      	add	sp, #36	; 0x24
    87a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87a6:	bf00      	nop
    87a8:	20000728 	.word	0x20000728

000087ac <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    87ac:	b510      	push	{r4, lr}
    87ae:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    87b0:	2000      	movs	r0, #0

	while (octets_len--) {
    87b2:	3901      	subs	r1, #1
    87b4:	b2c9      	uxtb	r1, r1
    87b6:	29ff      	cmp	r1, #255	; 0xff
    87b8:	d100      	bne.n	87bc <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    87ba:	bd10      	pop	{r4, pc}
		bite = *octets;
    87bc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    87c0:	2b00      	cmp	r3, #0
    87c2:	d0f6      	beq.n	87b2 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    87c4:	1e5c      	subs	r4, r3, #1
			one_count++;
    87c6:	3001      	adds	r0, #1
			bite &= (bite - 1);
    87c8:	4023      	ands	r3, r4
			one_count++;
    87ca:	b2c0      	uxtb	r0, r0
    87cc:	e7f8      	b.n	87c0 <util_ones_count_get+0x14>

000087ce <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    87ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    87d0:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    87d2:	6805      	ldr	r5, [r0, #0]
	current = previous;
    87d4:	461a      	mov	r2, r3
	total = 0;
    87d6:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    87d8:	2aff      	cmp	r2, #255	; 0xff
    87da:	d101      	bne.n	87e0 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    87dc:	2000      	movs	r0, #0
    87de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    87e0:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    87e4:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    87e6:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    87ea:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    87ee:	d004      	beq.n	87fa <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    87f0:	68b3      	ldr	r3, [r6, #8]
    87f2:	441c      	add	r4, r3
		current = ticker_current->next;
    87f4:	4613      	mov	r3, r2
    87f6:	463a      	mov	r2, r7
    87f8:	e7ee      	b.n	87d8 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    87fa:	4293      	cmp	r3, r2
    87fc:	d100      	bne.n	8800 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    87fe:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    8800:	b21b      	sxth	r3, r3
    8802:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8806:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    8808:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    880a:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    880e:	7833      	ldrb	r3, [r6, #0]
    8810:	2bff      	cmp	r3, #255	; 0xff
    8812:	d006      	beq.n	8822 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    8814:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8818:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    881c:	689a      	ldr	r2, [r3, #8]
    881e:	4402      	add	r2, r0
    8820:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    8822:	4420      	add	r0, r4
    8824:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008826 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    8826:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    8828:	1a55      	subs	r5, r2, r1
    882a:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    882e:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    8830:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    8832:	d109      	bne.n	8848 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8834:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    8838:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    883a:	42a2      	cmp	r2, r4
    883c:	d90e      	bls.n	885c <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    883e:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    8840:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    8842:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    8844:	6144      	str	r4, [r0, #20]
    8846:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8848:	1a8a      	subs	r2, r1, r2
    884a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    884e:	4293      	cmp	r3, r2
    8850:	d901      	bls.n	8856 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    8852:	1a9a      	subs	r2, r3, r2
    8854:	e7f1      	b.n	883a <ticks_to_expire_prep+0x14>
    8856:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    8858:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    885a:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    885c:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    885e:	2200      	movs	r2, #0
    8860:	e7ef      	b.n	8842 <ticks_to_expire_prep+0x1c>

00008862 <ticker_job_op_cb>:
{
    8862:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    8864:	2200      	movs	r2, #0
    8866:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    8868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    886a:	6259      	str	r1, [r3, #36]	; 0x24
{
    886c:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    886e:	b10a      	cbz	r2, 8874 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8872:	4710      	bx	r2
    8874:	4770      	bx	lr

00008876 <ticker_worker>:
{
    8876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    887a:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    887c:	2301      	movs	r3, #1
{
    887e:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    8880:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    8882:	2d00      	cmp	r5, #0
    8884:	d14c      	bne.n	8920 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    8886:	7f43      	ldrb	r3, [r0, #29]
    8888:	2bff      	cmp	r3, #255	; 0xff
    888a:	d102      	bne.n	8892 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    888c:	77c5      	strb	r5, [r0, #31]
		return;
    888e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    8892:	f00a fe17 	bl	134c4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8896:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    8898:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    889a:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    889e:	1bc7      	subs	r7, r0, r7
    88a0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    88a4:	2eff      	cmp	r6, #255	; 0xff
    88a6:	d006      	beq.n	88b6 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    88a8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    88ac:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    88b0:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    88b2:	429f      	cmp	r7, r3
    88b4:	d218      	bcs.n	88e8 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    88b6:	7aa2      	ldrb	r2, [r4, #10]
    88b8:	7ae3      	ldrb	r3, [r4, #11]
    88ba:	4293      	cmp	r3, r2
    88bc:	d105      	bne.n	88ca <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    88be:	3301      	adds	r3, #1
    88c0:	b2db      	uxtb	r3, r3
			last = 0;
    88c2:	2b02      	cmp	r3, #2
    88c4:	bf08      	it	eq
    88c6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    88c8:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    88ca:	7ae3      	ldrb	r3, [r4, #11]
    88cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    88d0:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    88d2:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    88d4:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    88d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    88d8:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    88da:	46ac      	mov	ip, r5
    88dc:	4623      	mov	r3, r4
    88de:	2104      	movs	r1, #4
    88e0:	2003      	movs	r0, #3
}
    88e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    88e6:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    88e8:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    88ea:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    88ec:	788a      	ldrb	r2, [r1, #2]
    88ee:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    88f0:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    88f4:	1a9b      	subs	r3, r3, r2
    88f6:	b2db      	uxtb	r3, r3
    88f8:	2b01      	cmp	r3, #1
    88fa:	d1d3      	bne.n	88a4 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    88fc:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    8900:	3a01      	subs	r2, #1
    8902:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    8904:	f1b9 0f00 	cmp.w	r9, #0
    8908:	d0cc      	beq.n	88a4 <ticker_worker+0x2e>
					   ticks_expired -
    890a:	6948      	ldr	r0, [r1, #20]
    890c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    890e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    8910:	1a28      	subs	r0, r5, r0
    8912:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    8914:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8918:	690b      	ldr	r3, [r1, #16]
    891a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    891c:	47c8      	blx	r9
    891e:	e7c1      	b.n	88a4 <ticker_worker+0x2e>
    8920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008924 <ticker_job>:
{
    8924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    8928:	7fc2      	ldrb	r2, [r0, #31]
{
    892a:	b095      	sub	sp, #84	; 0x54
    892c:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    892e:	2a00      	cmp	r2, #0
    8930:	f040 83be 	bne.w	90b0 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    8934:	6943      	ldr	r3, [r0, #20]
    8936:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    8938:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    893a:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    893c:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    893e:	7ac0      	ldrb	r0, [r0, #11]
    8940:	4298      	cmp	r0, r3
    8942:	f000 808f 	beq.w	8a64 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    8946:	440b      	add	r3, r1
    8948:	b2db      	uxtb	r3, r3
			first = 0;
    894a:	2b02      	cmp	r3, #2
    894c:	bf08      	it	eq
    894e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    8950:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    8954:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    8958:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    895a:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    895e:	9b07      	ldr	r3, [sp, #28]
    8960:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    8962:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8966:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    896a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    896e:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    8970:	f8db 3000 	ldr.w	r3, [fp]
    8974:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    8976:	f8db 3004 	ldr.w	r3, [fp, #4]
    897a:	930d      	str	r3, [sp, #52]	; 0x34
    897c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    8980:	3b01      	subs	r3, #1
    8982:	b2db      	uxtb	r3, r3
    8984:	9304      	str	r3, [sp, #16]
	pending = 0;
    8986:	2300      	movs	r3, #0
    8988:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    898a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    898e:	9b04      	ldr	r3, [sp, #16]
    8990:	2bff      	cmp	r3, #255	; 0xff
    8992:	d16a      	bne.n	8a6a <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    8994:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    8998:	9a05      	ldr	r2, [sp, #20]
    899a:	1a9b      	subs	r3, r3, r2
    899c:	bf18      	it	ne
    899e:	2301      	movne	r3, #1
    89a0:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    89a2:	9b03      	ldr	r3, [sp, #12]
    89a4:	b1e3      	cbz	r3, 89e0 <ticker_job+0xbc>
	node = &instance->node[0];
    89a6:	f8db 3000 	ldr.w	r3, [fp]
    89aa:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    89ac:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    89b0:	f89b 601d 	ldrb.w	r6, [fp, #29]
    89b4:	2eff      	cmp	r6, #255	; 0xff
    89b6:	d00c      	beq.n	89d2 <ticker_job+0xae>
		ticker = &node[id_expired];
    89b8:	b237      	sxth	r7, r6
    89ba:	9b06      	ldr	r3, [sp, #24]
    89bc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    89c0:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    89c4:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    89c6:	4545      	cmp	r5, r8
    89c8:	f240 8136 	bls.w	8c38 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    89cc:	eba5 0508 	sub.w	r5, r5, r8
    89d0:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    89d2:	9b04      	ldr	r3, [sp, #16]
    89d4:	9a03      	ldr	r2, [sp, #12]
    89d6:	9905      	ldr	r1, [sp, #20]
    89d8:	42b1      	cmp	r1, r6
    89da:	bf18      	it	ne
    89dc:	4613      	movne	r3, r2
    89de:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    89e0:	f8db 3000 	ldr.w	r3, [fp]
    89e4:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    89e6:	f8db 3004 	ldr.w	r3, [fp, #4]
    89ea:	9312      	str	r3, [sp, #72]	; 0x48
    89ec:	f89b 3009 	ldrb.w	r3, [fp, #9]
    89f0:	3b01      	subs	r3, #1
    89f2:	b2db      	uxtb	r3, r3
    89f4:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    89f6:	9b03      	ldr	r3, [sp, #12]
    89f8:	2bff      	cmp	r3, #255	; 0xff
    89fa:	f040 8170 	bne.w	8cde <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    89fe:	f89b 301d 	ldrb.w	r3, [fp, #29]
    8a02:	9a05      	ldr	r2, [sp, #20]
    8a04:	4293      	cmp	r3, r2
	if (!pending) {
    8a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    8a08:	f040 8349 	bne.w	909e <ticker_job+0x77a>
	if (!pending) {
    8a0c:	b95b      	cbnz	r3, 8a26 <ticker_job+0x102>
    8a0e:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    8a12:	f8db 3004 	ldr.w	r3, [fp, #4]
    8a16:	9303      	str	r3, [sp, #12]
    8a18:	3c01      	subs	r4, #1
    8a1a:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    8a1c:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    8a20:	2cff      	cmp	r4, #255	; 0xff
    8a22:	f040 82a0 	bne.w	8f66 <ticker_job+0x642>
	instance->job_guard = 0;
    8a26:	2300      	movs	r3, #0
    8a28:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    8a2c:	9b04      	ldr	r3, [sp, #16]
    8a2e:	b14b      	cbz	r3, 8a44 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    8a30:	f89b 301d 	ldrb.w	r3, [fp, #29]
    8a34:	2bff      	cmp	r3, #255	; 0xff
    8a36:	f040 82e9 	bne.w	900c <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    8a3a:	f00a fd15 	bl	13468 <cntr_stop>
    8a3e:	b908      	cbnz	r0, 8a44 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    8a40:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    8a44:	f89b 301f 	ldrb.w	r3, [fp, #31]
    8a48:	2b00      	cmp	r3, #0
    8a4a:	f000 8331 	beq.w	90b0 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8a4e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    8a52:	465b      	mov	r3, fp
    8a54:	2201      	movs	r2, #1
    8a56:	2103      	movs	r1, #3
    8a58:	2004      	movs	r0, #4
    8a5a:	46a4      	mov	ip, r4
}
    8a5c:	b015      	add	sp, #84	; 0x54
    8a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8a62:	4760      	bx	ip
		flag_elapsed = 0;
    8a64:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    8a66:	4690      	mov	r8, r2
    8a68:	e77f      	b.n	896a <ticker_job+0x46>
		user = &users[count_user];
    8a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a6c:	9a04      	ldr	r2, [sp, #16]
    8a6e:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    8a76:	78f9      	ldrb	r1, [r7, #3]
    8a78:	78be      	ldrb	r6, [r7, #2]
    8a7a:	428e      	cmp	r6, r1
    8a7c:	f000 80d7 	beq.w	8c2e <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    8a80:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    8a82:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    8a84:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    8a88:	0112      	lsls	r2, r2, #4
    8a8a:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    8a8c:	1c73      	adds	r3, r6, #1
    8a8e:	b2db      	uxtb	r3, r3
				middle = 0;
    8a90:	4298      	cmp	r0, r3
    8a92:	bf08      	it	eq
    8a94:	2300      	moveq	r3, #0
			user->middle = middle;
    8a96:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    8a98:	9b08      	ldr	r3, [sp, #32]
    8a9a:	5c9a      	ldrb	r2, [r3, r2]
    8a9c:	2a03      	cmp	r2, #3
    8a9e:	d9eb      	bls.n	8a78 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    8aa0:	2a05      	cmp	r2, #5
    8aa2:	d817      	bhi.n	8ad4 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    8aa4:	7869      	ldrb	r1, [r5, #1]
    8aa6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    8aaa:	930c      	str	r3, [sp, #48]	; 0x30
    8aac:	980c      	ldr	r0, [sp, #48]	; 0x30
    8aae:	9b06      	ldr	r3, [sp, #24]
    8ab0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    8ab4:	7863      	ldrb	r3, [r4, #1]
    8ab6:	78a0      	ldrb	r0, [r4, #2]
    8ab8:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    8aba:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8abe:	d009      	beq.n	8ad4 <ticker_job+0x1b0>
			    (state == 0) ||
    8ac0:	2a04      	cmp	r2, #4
    8ac2:	d10c      	bne.n	8ade <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    8ac4:	686a      	ldr	r2, [r5, #4]
    8ac6:	b952      	cbnz	r2, 8ade <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    8ac8:	68aa      	ldr	r2, [r5, #8]
    8aca:	b942      	cbnz	r2, 8ade <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    8acc:	68ea      	ldr	r2, [r5, #12]
    8ace:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8ad2:	d104      	bne.n	8ade <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    8ad4:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    8ad6:	4628      	mov	r0, r5
    8ad8:	f7ff fec3 	bl	8862 <ticker_job_op_cb>
    8adc:	e7cb      	b.n	8a76 <ticker_job+0x152>
			if (state == 1) {
    8ade:	2b01      	cmp	r3, #1
    8ae0:	f040 809b 	bne.w	8c1a <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8ae4:	4658      	mov	r0, fp
    8ae6:	f7ff fe72 	bl	87ce <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8aea:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8aec:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8aee:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8af0:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8af2:	f040 8084 	bne.w	8bfe <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    8af6:	f8db 3014 	ldr.w	r3, [fp, #20]
    8afa:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    8afc:	f00a fce2 	bl	134c4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    8b02:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8b04:	1ac3      	subs	r3, r0, r3
    8b06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    8b0a:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    8b0c:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8b0e:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    8b10:	bf9e      	ittt	ls
    8b12:	6962      	ldrls	r2, [r4, #20]
    8b14:	1b92      	subls	r2, r2, r6
    8b16:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    8b18:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    8b1a:	bf96      	itet	ls
    8b1c:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    8b1e:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    8b20:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    8b22:	b18a      	cbz	r2, 8b48 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    8b24:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    8b26:	b179      	cbz	r1, 8b48 <ticker_job+0x224>
		user_op->params.update.lazy--;
    8b28:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    8b2c:	fa1f fe8e 	uxth.w	lr, lr
    8b30:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8b34:	429a      	cmp	r2, r3
    8b36:	d32b      	bcc.n	8b90 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    8b38:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8e60 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8b3c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    8b40:	45e6      	cmp	lr, ip
    8b42:	d847      	bhi.n	8bd4 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    8b44:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    8b48:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    8b4a:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    8b4c:	4413      	add	r3, r2
    8b4e:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    8b50:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    8b52:	6963      	ldr	r3, [r4, #20]
    8b54:	4413      	add	r3, r2
    8b56:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    8b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8b5a:	4620      	mov	r0, r4
    8b5c:	f7ff fe63 	bl	8826 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    8b60:	69a2      	ldr	r2, [r4, #24]
    8b62:	892b      	ldrh	r3, [r5, #8]
    8b64:	4413      	add	r3, r2
    8b66:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    8b68:	896a      	ldrh	r2, [r5, #10]
    8b6a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    8b6c:	bf8c      	ite	hi
    8b6e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    8b70:	2300      	movls	r3, #0
    8b72:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    8b74:	7bab      	ldrb	r3, [r5, #14]
    8b76:	b103      	cbz	r3, 8b7a <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    8b78:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    8b7a:	9b06      	ldr	r3, [sp, #24]
    8b7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8b7e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    8b82:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    8b84:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    8b88:	3301      	adds	r3, #1
    8b8a:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    8b8c:	2100      	movs	r1, #0
    8b8e:	e7a2      	b.n	8ad6 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    8b90:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8b94:	45e6      	cmp	lr, ip
    8b96:	d2cf      	bcs.n	8b38 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    8b98:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8b9a:	4eaf      	ldr	r6, [pc, #700]	; (8e58 <ticker_job+0x534>)
    8b9c:	48af      	ldr	r0, [pc, #700]	; (8e5c <ticker_job+0x538>)
    8b9e:	198e      	adds	r6, r1, r6
    8ba0:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    8ba2:	bf81      	itttt	hi
    8ba4:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    8ba8:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    8bac:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    8bb0:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    8bb2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    8bb4:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    8bb6:	bf8c      	ite	hi
    8bb8:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    8bbc:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    8bc0:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    8bc2:	4491      	add	r9, r2
			ticker->lazy_current--;
    8bc4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    8bc8:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    8bca:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    8bce:	f8a4 c01e 	strh.w	ip, [r4, #30]
    8bd2:	e7af      	b.n	8b34 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    8bd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
    8bd6:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    8bd8:	48a0      	ldr	r0, [pc, #640]	; (8e5c <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    8bda:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    8bdc:	499e      	ldr	r1, [pc, #632]	; (8e58 <ticker_job+0x534>)
    8bde:	1871      	adds	r1, r6, r1
    8be0:	4281      	cmp	r1, r0
	return 0;
    8be2:	bf8e      	itee	hi
    8be4:	2100      	movhi	r1, #0
		return 1;
    8be6:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    8be8:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    8bea:	4411      	add	r1, r2
			ticker->lazy_current++;
    8bec:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    8bf0:	bf8c      	ite	hi
    8bf2:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    8bf4:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    8bf6:	440b      	add	r3, r1
			ticker->lazy_current++;
    8bf8:	f8a4 c01e 	strh.w	ip, [r4, #30]
    8bfc:	e79e      	b.n	8b3c <ticker_job+0x218>
		ticker->req = ticker->ack;
    8bfe:	78a3      	ldrb	r3, [r4, #2]
    8c00:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    8c02:	786b      	ldrb	r3, [r5, #1]
    8c04:	f89b 201c 	ldrb.w	r2, [fp, #28]
    8c08:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    8c0a:	bf01      	itttt	eq
    8c0c:	23ff      	moveq	r3, #255	; 0xff
    8c0e:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    8c12:	2300      	moveq	r3, #0
    8c14:	f8cb 3018 	streq.w	r3, [fp, #24]
    8c18:	e7b8      	b.n	8b8c <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    8c1a:	2104      	movs	r1, #4
    8c1c:	465b      	mov	r3, fp
    8c1e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    8c22:	2201      	movs	r2, #1
    8c24:	4608      	mov	r0, r1
    8c26:	47a0      	blx	r4
				pending = 1;
    8c28:	2301      	movs	r3, #1
				user->middle = prev;
    8c2a:	70be      	strb	r6, [r7, #2]
				pending = 1;
    8c2c:	9309      	str	r3, [sp, #36]	; 0x24
    8c2e:	9b04      	ldr	r3, [sp, #16]
    8c30:	3b01      	subs	r3, #1
    8c32:	b2db      	uxtb	r3, r3
    8c34:	9304      	str	r3, [sp, #16]
    8c36:	e6aa      	b.n	898e <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    8c38:	f8db 3018 	ldr.w	r3, [fp, #24]
    8c3c:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    8c3e:	bf29      	itett	cs
    8c40:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    8c42:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    8c44:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    8c48:	2300      	movcs	r3, #0
    8c4a:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    8c4e:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    8c50:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    8c52:	b11b      	cbz	r3, 8c5c <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    8c54:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    8c58:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    8c5c:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    8c5e:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    8c60:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    8c62:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    8c66:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    8c6a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    8c6e:	f1be 0f00 	cmp.w	lr, #0
    8c72:	d030      	beq.n	8cd6 <ticker_job+0x3b2>
    8c74:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    8c76:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8e5c <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    8c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8c7c:	6a21      	ldr	r1, [r4, #32]
    8c7e:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    8c80:	4975      	ldr	r1, [pc, #468]	; (8e58 <ticker_job+0x534>)
    8c82:	1859      	adds	r1, r3, r1
    8c84:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    8c86:	bf9f      	itttt	ls
    8c88:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    8c8c:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    8c90:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    8c94:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    8c96:	bf92      	itee	ls
    8c98:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    8c9a:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    8c9c:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    8c9e:	4473      	add	r3, lr
			while (count--) {
    8ca0:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    8ca4:	441a      	add	r2, r3
			while (count--) {
    8ca6:	d2e8      	bcs.n	8c7a <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    8ca8:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    8caa:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    8cac:	f8db 1014 	ldr.w	r1, [fp, #20]
    8cb0:	eb03 0209 	add.w	r2, r3, r9
    8cb4:	4620      	mov	r0, r4
    8cb6:	f7ff fdb6 	bl	8826 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    8cba:	8ba3      	ldrh	r3, [r4, #28]
    8cbc:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    8cbe:	2300      	movs	r3, #0
    8cc0:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    8cc2:	9b06      	ldr	r3, [sp, #24]
    8cc4:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    8cc8:	7863      	ldrb	r3, [r4, #1]
    8cca:	3301      	adds	r3, #1
    8ccc:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    8cce:	eba8 0805 	sub.w	r8, r8, r5
    8cd2:	46b2      	mov	sl, r6
    8cd4:	e66c      	b.n	89b0 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    8cd6:	78a3      	ldrb	r3, [r4, #2]
    8cd8:	7063      	strb	r3, [r4, #1]
    8cda:	4656      	mov	r6, sl
    8cdc:	e7f7      	b.n	8cce <ticker_job+0x3aa>
		user = &users[count_user];
    8cde:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ce0:	9a03      	ldr	r2, [sp, #12]
    8ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8ce6:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    8ce8:	685b      	ldr	r3, [r3, #4]
    8cea:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    8cec:	9b06      	ldr	r3, [sp, #24]
    8cee:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    8cf2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    8cf6:	f000 808e 	beq.w	8e16 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    8cfa:	fa0f f38a 	sxth.w	r3, sl
    8cfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    8d04:	46d0      	mov	r8, sl
    8d06:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    8d0a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    8d0e:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    8d10:	f8db 3000 	ldr.w	r3, [fp]
    8d14:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    8d16:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    8d18:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    8d1a:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    8d1c:	8be3      	ldrh	r3, [r4, #30]
    8d1e:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    8d20:	bf86      	itte	hi
    8d22:	1a9b      	subhi	r3, r3, r2
    8d24:	b29b      	uxthhi	r3, r3
		skip = 0;
    8d26:	2300      	movls	r3, #0
    8d28:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    8d2a:	fa0f f388 	sxth.w	r3, r8
    8d2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8d32:	00db      	lsls	r3, r3, #3
    8d34:	9313      	str	r3, [sp, #76]	; 0x4c
    8d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    8d38:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    8d3c:	f8db 0018 	ldr.w	r0, [fp, #24]
    8d40:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    8d42:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    8d46:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    8d48:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    8d4c:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    8d50:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    8d52:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    8d54:	2bff      	cmp	r3, #255	; 0xff
    8d56:	d007      	beq.n	8d68 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    8d58:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    8d5c:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    8d60:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    8d62:	4281      	cmp	r1, r0
    8d64:	f200 80a9 	bhi.w	8eba <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    8d68:	f8de 0018 	ldr.w	r0, [lr, #24]
    8d6c:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    8d6e:	eb01 0c00 	add.w	ip, r1, r0
    8d72:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    8d74:	2eff      	cmp	r6, #255	; 0xff
    8d76:	f040 80ae 	bne.w	8ed6 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    8d7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8d7c:	b130      	cbz	r0, 8d8c <ticker_job+0x468>
    8d7e:	9807      	ldr	r0, [sp, #28]
    8d80:	4281      	cmp	r1, r0
    8d82:	f0c0 80bf 	bcc.w	8f04 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    8d86:	2eff      	cmp	r6, #255	; 0xff
    8d88:	f040 818e 	bne.w	90a8 <ticker_job+0x784>
		if (previous == current) {
    8d8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    8d8e:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    8d92:	4283      	cmp	r3, r0
			node[previous].next = id;
    8d94:	bf18      	it	ne
    8d96:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    8d9a:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    8d9e:	bf16      	itet	ne
    8da0:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    8da4:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    8da8:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    8dac:	2bff      	cmp	r3, #255	; 0xff
    8dae:	d006      	beq.n	8dbe <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    8db0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8db4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8db8:	689a      	ldr	r2, [r3, #8]
    8dba:	1a51      	subs	r1, r2, r1
    8dbc:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    8dbe:	78a3      	ldrb	r3, [r4, #2]
    8dc0:	3301      	adds	r3, #1
    8dc2:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    8dc4:	2100      	movs	r1, #0
			if (user_op) {
    8dc6:	2d00      	cmp	r5, #0
    8dc8:	d093      	beq.n	8cf2 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    8dca:	4628      	mov	r0, r5
    8dcc:	f7ff fd49 	bl	8862 <ticker_job_op_cb>
    8dd0:	e78f      	b.n	8cf2 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    8dd2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    8dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8dd8:	011b      	lsls	r3, r3, #4
    8dda:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    8ddc:	f109 0201 	add.w	r2, r9, #1
    8de0:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    8de4:	9a06      	ldr	r2, [sp, #24]
    8de6:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    8de8:	454a      	cmp	r2, r9
    8dea:	bf08      	it	eq
    8dec:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    8df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8df2:	5cd3      	ldrb	r3, [r2, r3]
    8df4:	2b03      	cmp	r3, #3
    8df6:	d10e      	bne.n	8e16 <ticker_job+0x4f2>
				id_insert = user_op->id;
    8df8:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    8dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dfe:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    8e02:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    8e06:	7862      	ldrb	r2, [r4, #1]
    8e08:	78a3      	ldrb	r3, [r4, #2]
    8e0a:	429a      	cmp	r2, r3
    8e0c:	d009      	beq.n	8e22 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    8e0e:	2101      	movs	r1, #1
    8e10:	4628      	mov	r0, r5
    8e12:	f7ff fd26 	bl	8862 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    8e16:	9b06      	ldr	r3, [sp, #24]
    8e18:	789b      	ldrb	r3, [r3, #2]
    8e1a:	454b      	cmp	r3, r9
    8e1c:	d1d9      	bne.n	8dd2 <ticker_job+0x4ae>
    8e1e:	9b03      	ldr	r3, [sp, #12]
    8e20:	e5e6      	b.n	89f0 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    8e22:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    8e24:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    8e28:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    8e2a:	692b      	ldr	r3, [r5, #16]
    8e2c:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    8e2e:	8aab      	ldrh	r3, [r5, #20]
    8e30:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    8e32:	69ab      	ldr	r3, [r5, #24]
    8e34:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    8e36:	69eb      	ldr	r3, [r5, #28]
    8e38:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    8e3a:	6a2b      	ldr	r3, [r5, #32]
    8e3c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    8e3e:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    8e40:	68ab      	ldr	r3, [r5, #8]
    8e42:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    8e44:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    8e46:	686a      	ldr	r2, [r5, #4]
    8e48:	4620      	mov	r0, r4
    8e4a:	f7ff fcec 	bl	8826 <ticks_to_expire_prep>
	ticker->force = 1;
    8e4e:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    8e50:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    8e52:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    8e54:	70e3      	strb	r3, [r4, #3]
    8e56:	e75b      	b.n	8d10 <ticker_job+0x3ec>
    8e58:	ff172b5a 	.word	0xff172b5a
    8e5c:	7f172b59 	.word	0x7f172b59
    8e60:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    8e64:	6860      	ldr	r0, [r4, #4]
    8e66:	2800      	cmp	r0, #0
    8e68:	d07b      	beq.n	8f62 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    8e6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8e6c:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    8e6e:	4b92      	ldr	r3, [pc, #584]	; (90b8 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    8e70:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    8e72:	4992      	ldr	r1, [pc, #584]	; (90bc <ticker_job+0x798>)
    8e74:	18d3      	adds	r3, r2, r3
    8e76:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    8e78:	bf9c      	itt	ls
    8e7a:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    8e7e:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8e82:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    8e84:	bf8b      	itete	hi
    8e86:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    8e88:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    8e8c:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    8e8e:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8e90:	4403      	add	r3, r0
		return 1;
    8e92:	bf98      	it	ls
    8e94:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8e96:	4413      	add	r3, r2
			ticker->lazy_current++;
    8e98:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8e9a:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    8e9c:	3201      	adds	r2, #1
    8e9e:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    8ea0:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    8ea2:	4293      	cmp	r3, r2
    8ea4:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    8ea8:	bf89      	itett	hi
    8eaa:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    8eac:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    8eae:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    8eb0:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    8eb2:	bf9c      	itt	ls
    8eb4:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    8eb6:	60a1      	strls	r1, [r4, #8]
    8eb8:	e73d      	b.n	8d36 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    8eba:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    8ebc:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    8ebe:	b946      	cbnz	r6, 8ed2 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    8ec0:	9f07      	ldr	r7, [sp, #28]
    8ec2:	42b8      	cmp	r0, r7
    8ec4:	d200      	bcs.n	8ec8 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    8ec6:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    8ec8:	930b      	str	r3, [sp, #44]	; 0x2c
    8eca:	9607      	str	r6, [sp, #28]
    8ecc:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    8ed0:	e740      	b.n	8d54 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    8ed2:	9308      	str	r3, [sp, #32]
    8ed4:	e7f8      	b.n	8ec8 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    8ed6:	b230      	sxth	r0, r6
    8ed8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8edc:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    8ee0:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    8ee2:	68bf      	ldr	r7, [r7, #8]
    8ee4:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    8ee6:	4567      	cmp	r7, ip
    8ee8:	d20a      	bcs.n	8f00 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    8eea:	9f10      	ldr	r7, [sp, #64]	; 0x40
    8eec:	69bf      	ldr	r7, [r7, #24]
    8eee:	2f00      	cmp	r7, #0
    8ef0:	f47f af43 	bne.w	8d7a <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    8ef4:	9e11      	ldr	r6, [sp, #68]	; 0x44
    8ef6:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    8efa:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    8efe:	e739      	b.n	8d74 <ticker_job+0x450>
			return TICKER_NULL;
    8f00:	26ff      	movs	r6, #255	; 0xff
    8f02:	e73a      	b.n	8d7a <ticker_job+0x456>
	while (id_insert !=
    8f04:	9b08      	ldr	r3, [sp, #32]
    8f06:	4598      	cmp	r8, r3
    8f08:	f43f af59 	beq.w	8dbe <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    8f0c:	9b08      	ldr	r3, [sp, #32]
    8f0e:	2bff      	cmp	r3, #255	; 0xff
    8f10:	d0a8      	beq.n	8e64 <ticker_job+0x540>
    8f12:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    8f14:	b233      	sxth	r3, r6
    8f16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8f1a:	9307      	str	r3, [sp, #28]
    8f1c:	9a07      	ldr	r2, [sp, #28]
    8f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8f20:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    8f24:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    8f26:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    8f28:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    8f2a:	bf88      	it	hi
    8f2c:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    8f2e:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    8f30:	bf8c      	ite	hi
    8f32:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    8f34:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    8f36:	2a00      	cmp	r2, #0
    8f38:	d094      	beq.n	8e64 <ticker_job+0x540>
    8f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8f3c:	4293      	cmp	r3, r2
    8f3e:	d891      	bhi.n	8e64 <ticker_job+0x540>
			    skip_collide <= skip &&
    8f40:	78fa      	ldrb	r2, [r7, #3]
    8f42:	78e3      	ldrb	r3, [r4, #3]
    8f44:	429a      	cmp	r2, r3
    8f46:	d28d      	bcs.n	8e64 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    8f48:	4631      	mov	r1, r6
    8f4a:	4658      	mov	r0, fp
    8f4c:	f7ff fc3f 	bl	87ce <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    8f50:	78bb      	ldrb	r3, [r7, #2]
    8f52:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    8f54:	9a07      	ldr	r2, [sp, #28]
    8f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    8f58:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    8f5a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    8f5e:	46b2      	mov	sl, r6
    8f60:	e6e9      	b.n	8d36 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    8f62:	2101      	movs	r1, #1
    8f64:	e72f      	b.n	8dc6 <ticker_job+0x4a2>
		user = &users[count_user];
    8f66:	9b03      	ldr	r3, [sp, #12]
    8f68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    8f6c:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    8f6e:	786b      	ldrb	r3, [r5, #1]
    8f70:	78ea      	ldrb	r2, [r5, #3]
    8f72:	429a      	cmp	r2, r3
    8f74:	d102      	bne.n	8f7c <ticker_job+0x658>
    8f76:	3c01      	subs	r4, #1
    8f78:	b2e4      	uxtb	r4, r4
    8f7a:	e551      	b.n	8a20 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    8f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f80:	011b      	lsls	r3, r3, #4
    8f82:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    8f84:	5cf3      	ldrb	r3, [r6, r3]
    8f86:	2b01      	cmp	r3, #1
    8f88:	d025      	beq.n	8fd6 <ticker_job+0x6b2>
    8f8a:	2b02      	cmp	r3, #2
    8f8c:	d12a      	bne.n	8fe4 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    8f8e:	f8d2 c004 	ldr.w	ip, [r2, #4]
    8f92:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    8f94:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    8f98:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    8f9c:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    8fa0:	28ff      	cmp	r0, #255	; 0xff
    8fa2:	d004      	beq.n	8fae <ticker_job+0x68a>
    8fa4:	6819      	ldr	r1, [r3, #0]
    8fa6:	f8db 7014 	ldr.w	r7, [fp, #20]
    8faa:	42b9      	cmp	r1, r7
    8fac:	d023      	beq.n	8ff6 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    8fae:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    8fb2:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    8fb6:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    8fb8:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    8fba:	29ff      	cmp	r1, #255	; 0xff
    8fbc:	d007      	beq.n	8fce <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    8fbe:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    8fc2:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    8fc6:	6987      	ldr	r7, [r0, #24]
    8fc8:	6880      	ldr	r0, [r0, #8]
    8fca:	b1df      	cbz	r7, 9004 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    8fcc:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    8fce:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    8fd2:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    8fd6:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    8fd8:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    8fdc:	b113      	cbz	r3, 8fe4 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    8fde:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8fe0:	2000      	movs	r0, #0
    8fe2:	4798      	blx	r3
			first = user->first + 1;
    8fe4:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    8fe6:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    8fe8:	3301      	adds	r3, #1
    8fea:	b2db      	uxtb	r3, r3
				first = 0;
    8fec:	429a      	cmp	r2, r3
    8fee:	bf08      	it	eq
    8ff0:	2300      	moveq	r3, #0
			user->first = first;
    8ff2:	706b      	strb	r3, [r5, #1]
    8ff4:	e7bb      	b.n	8f6e <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    8ff6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    8ffa:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    8ffe:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    9002:	e7da      	b.n	8fba <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    9004:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    9006:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    900a:	e7d6      	b.n	8fba <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    900c:	9b05      	ldr	r3, [sp, #20]
    900e:	2bff      	cmp	r3, #255	; 0xff
    9010:	d107      	bne.n	9022 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    9012:	f00a fa57 	bl	134c4 <cntr_cnt_get>
    9016:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    9018:	f00a fa18 	bl	1344c <cntr_start>
    901c:	b908      	cbnz	r0, 9022 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    901e:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    9022:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    9026:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    902a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    902e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9032:	260a      	movs	r6, #10
    9034:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    9036:	f00a fa45 	bl	134c4 <cntr_cnt_get>
		cc = instance->ticks_current;
    903a:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    903e:	1b03      	subs	r3, r0, r4
    9040:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    9044:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    9046:	42ab      	cmp	r3, r5
    9048:	bf2c      	ite	cs
    904a:	18e4      	addcs	r4, r4, r3
    904c:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    904e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    9052:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    9054:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    9058:	4620      	mov	r0, r4
    905a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    905c:	f00a fa32 	bl	134c4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    9060:	1bc0      	subs	r0, r0, r7
    9062:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9066:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    9068:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    906a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    906e:	42a0      	cmp	r0, r4
    9070:	f67f ace8 	bls.w	8a44 <ticker_job+0x120>
		LL_ASSERT(i);
    9074:	3e01      	subs	r6, #1
    9076:	d1de      	bne.n	9036 <ticker_job+0x712>
    9078:	4b11      	ldr	r3, [pc, #68]	; (90c0 <ticker_job+0x79c>)
    907a:	9301      	str	r3, [sp, #4]
    907c:	9300      	str	r3, [sp, #0]
    907e:	4a11      	ldr	r2, [pc, #68]	; (90c4 <ticker_job+0x7a0>)
    9080:	4b11      	ldr	r3, [pc, #68]	; (90c8 <ticker_job+0x7a4>)
    9082:	4912      	ldr	r1, [pc, #72]	; (90cc <ticker_job+0x7a8>)
    9084:	4812      	ldr	r0, [pc, #72]	; (90d0 <ticker_job+0x7ac>)
    9086:	f7f7 ff81 	bl	f8c <printk>
    908a:	4040      	eors	r0, r0
    908c:	f380 8811 	msr	BASEPRI, r0
    9090:	f04f 0004 	mov.w	r0, #4
    9094:	df02      	svc	2
	instance->job_guard = 0;
    9096:	2300      	movs	r3, #0
    9098:	f88b 301e 	strb.w	r3, [fp, #30]
    909c:	e4c8      	b.n	8a30 <ticker_job+0x10c>
	if (!pending) {
    909e:	2b00      	cmp	r3, #0
    90a0:	d1f9      	bne.n	9096 <ticker_job+0x772>
		flag_compare_update = 1;
    90a2:	2301      	movs	r3, #1
    90a4:	9304      	str	r3, [sp, #16]
    90a6:	e4b2      	b.n	8a0e <ticker_job+0xea>
	while (id_insert !=
    90a8:	45b0      	cmp	r8, r6
    90aa:	f47f af33 	bne.w	8f14 <ticker_job+0x5f0>
    90ae:	e686      	b.n	8dbe <ticker_job+0x49a>
}
    90b0:	b015      	add	sp, #84	; 0x54
    90b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90b6:	bf00      	nop
    90b8:	ff172b5a 	.word	0xff172b5a
    90bc:	7f172b59 	.word	0x7f172b59
    90c0:	00015e19 	.word	0x00015e19
    90c4:	000171f2 	.word	0x000171f2
    90c8:	00018eb2 	.word	0x00018eb2
    90cc:	00017241 	.word	0x00017241
    90d0:	00018ecc 	.word	0x00018ecc

000090d4 <ticker_init>:
{
    90d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    90d6:	4d1a      	ldr	r5, [pc, #104]	; (9140 <ticker_init+0x6c>)
{
    90d8:	9f05      	ldr	r7, [sp, #20]
    90da:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    90de:	262c      	movs	r6, #44	; 0x2c
    90e0:	4346      	muls	r6, r0
    90e2:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    90e6:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    90e8:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    90ec:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    90ee:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    90f2:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    90f6:	3b01      	subs	r3, #1
    90f8:	b2db      	uxtb	r3, r3
    90fa:	2bff      	cmp	r3, #255	; 0xff
    90fc:	d111      	bne.n	9122 <ticker_init+0x4e>
	if (count_op) {
    90fe:	b9ec      	cbnz	r4, 913c <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    9100:	222c      	movs	r2, #44	; 0x2c
    9102:	fb02 5200 	mla	r2, r2, r0, r5
    9106:	9908      	ldr	r1, [sp, #32]
    9108:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    910a:	9909      	ldr	r1, [sp, #36]	; 0x24
    910c:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    910e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9110:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    9112:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    9114:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    9116:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    9118:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    911a:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    911c:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    911e:	4620      	mov	r0, r4
    9120:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    9122:	b21a      	sxth	r2, r3
    9124:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    9128:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    912a:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    912e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    9132:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    9134:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    9138:	b2e4      	uxtb	r4, r4
    913a:	e7dc      	b.n	90f6 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    913c:	2001      	movs	r0, #1
}
    913e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9140:	200007e8 	.word	0x200007e8

00009144 <ticker_trigger>:
	instance = &_instance[instance_index];
    9144:	4a07      	ldr	r2, [pc, #28]	; (9164 <ticker_trigger+0x20>)
    9146:	212c      	movs	r1, #44	; 0x2c
    9148:	fb00 2301 	mla	r3, r0, r1, r2
{
    914c:	b410      	push	{r4}
	if (instance->sched_cb) {
    914e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    9150:	b12c      	cbz	r4, 915e <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    9152:	46a4      	mov	ip, r4
    9154:	2201      	movs	r2, #1
    9156:	2103      	movs	r1, #3
    9158:	2002      	movs	r0, #2
}
    915a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    915c:	4760      	bx	ip
}
    915e:	bc10      	pop	{r4}
    9160:	4770      	bx	lr
    9162:	bf00      	nop
    9164:	200007e8 	.word	0x200007e8

00009168 <ticker_start>:
{
    9168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    916c:	4f25      	ldr	r7, [pc, #148]	; (9204 <ticker_start+0x9c>)
    916e:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    9172:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    9174:	fb08 7000 	mla	r0, r8, r0, r7
    9178:	fa0f fc81 	sxth.w	ip, r1
    917c:	f8d0 e004 	ldr.w	lr, [r0, #4]
    9180:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    9184:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    9188:	78f4      	ldrb	r4, [r6, #3]
    918a:	1c65      	adds	r5, r4, #1
    918c:	b2ed      	uxtb	r5, r5
		last = 0;
    918e:	45ae      	cmp	lr, r5
    9190:	bf98      	it	ls
    9192:	2500      	movls	r5, #0
	if (last == user->first) {
    9194:	f896 e001 	ldrb.w	lr, [r6, #1]
    9198:	45ae      	cmp	lr, r5
    919a:	d02f      	beq.n	91fc <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    919c:	f8d6 c004 	ldr.w	ip, [r6, #4]
    91a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    91a4:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    91a8:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    91ac:	f04f 0a03 	mov.w	sl, #3
    91b0:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    91b4:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    91b6:	9b08      	ldr	r3, [sp, #32]
    91b8:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    91ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91bc:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    91be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    91c0:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    91c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    91c4:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    91c6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    91ca:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    91cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    91ce:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    91d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    91d2:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    91d4:	2302      	movs	r3, #2
    91d6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    91d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    91da:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    91dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    91de:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    91e0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    91e2:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    91e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    91e6:	6a03      	ldr	r3, [r0, #32]
    91e8:	4608      	mov	r0, r1
    91ea:	4798      	blx	r3
    91ec:	fb09 7308 	mla	r3, r9, r8, r7
    91f0:	2200      	movs	r2, #0
    91f2:	2104      	movs	r1, #4
    91f4:	47a8      	blx	r5
	return user_op->status;
    91f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    91f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    91fc:	2001      	movs	r0, #1
}
    91fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9202:	bf00      	nop
    9204:	200007e8 	.word	0x200007e8

00009208 <ticker_update>:
{
    9208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    920c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 92a0 <ticker_update+0x98>
    9210:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    9214:	fb0a 8e00 	mla	lr, sl, r0, r8
    9218:	b20f      	sxth	r7, r1
    921a:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    921e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    9220:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    9224:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    9228:	78c4      	ldrb	r4, [r0, #3]
    922a:	1c66      	adds	r6, r4, #1
    922c:	b2f6      	uxtb	r6, r6
		last = 0;
    922e:	42b5      	cmp	r5, r6
    9230:	bf98      	it	ls
    9232:	2600      	movls	r6, #0
	if (last == user->first) {
    9234:	7845      	ldrb	r5, [r0, #1]
    9236:	42b5      	cmp	r5, r6
    9238:	d02f      	beq.n	929a <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    923a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    923e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9242:	0125      	lsls	r5, r4, #4
    9244:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    9248:	2704      	movs	r7, #4
    924a:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    924e:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    9250:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9254:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    9256:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    925a:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    925c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9260:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    9262:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    9266:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    9268:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    926c:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    926e:	2302      	movs	r3, #2
    9270:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    9272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9274:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    9276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    9278:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    927a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    927c:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    927e:	f8de 3020 	ldr.w	r3, [lr, #32]
    9282:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    9286:	4608      	mov	r0, r1
    9288:	4798      	blx	r3
    928a:	fb09 830a 	mla	r3, r9, sl, r8
    928e:	2200      	movs	r2, #0
    9290:	4639      	mov	r1, r7
    9292:	47a8      	blx	r5
	return user_op->status;
    9294:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    929a:	2001      	movs	r0, #1
}
    929c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    92a0:	200007e8 	.word	0x200007e8

000092a4 <ticker_stop>:
{
    92a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    92a8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 9318 <ticker_stop+0x74>
    92ac:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    92b0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    92b4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    92b6:	f8de 0004 	ldr.w	r0, [lr, #4]
    92ba:	b20e      	sxth	r6, r1
    92bc:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    92c0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    92c4:	78fc      	ldrb	r4, [r7, #3]
    92c6:	1c65      	adds	r5, r4, #1
    92c8:	b2ed      	uxtb	r5, r5
		last = 0;
    92ca:	42a8      	cmp	r0, r5
    92cc:	bf98      	it	ls
    92ce:	2500      	movls	r5, #0
	if (last == user->first) {
    92d0:	7878      	ldrb	r0, [r7, #1]
    92d2:	42a8      	cmp	r0, r5
    92d4:	d01d      	beq.n	9312 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    92d6:	6878      	ldr	r0, [r7, #4]
    92d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    92dc:	0124      	lsls	r4, r4, #4
    92de:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    92e0:	f04f 0c05 	mov.w	ip, #5
    92e4:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    92e8:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    92ea:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    92ec:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    92ee:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    92f0:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    92f2:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    92f4:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    92f6:	f8de 3020 	ldr.w	r3, [lr, #32]
    92fa:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    92fe:	4608      	mov	r0, r1
    9300:	4798      	blx	r3
    9302:	fb08 930a 	mla	r3, r8, sl, r9
    9306:	2200      	movs	r2, #0
    9308:	2104      	movs	r1, #4
    930a:	47a0      	blx	r4
	return user_op->status;
    930c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    930e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    9312:	2001      	movs	r0, #1
}
    9314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9318:	200007e8 	.word	0x200007e8

0000931c <ticker_next_slot_get>:
{
    931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    9320:	f8df 8078 	ldr.w	r8, [pc, #120]	; 939c <ticker_next_slot_get+0x80>
    9324:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    9328:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    932a:	fb0a 8000 	mla	r0, sl, r0, r8
    932e:	fa0f fe81 	sxth.w	lr, r1
    9332:	6845      	ldr	r5, [r0, #4]
    9334:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    9338:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    933c:	78fc      	ldrb	r4, [r7, #3]
    933e:	1c66      	adds	r6, r4, #1
    9340:	b2f6      	uxtb	r6, r6
		last = 0;
    9342:	42b5      	cmp	r5, r6
    9344:	bf98      	it	ls
    9346:	2600      	movls	r6, #0
	if (last == user->first) {
    9348:	787d      	ldrb	r5, [r7, #1]
    934a:	42b5      	cmp	r5, r6
    934c:	d023      	beq.n	9396 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    934e:	f8d7 c004 	ldr.w	ip, [r7, #4]
    9352:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9356:	0125      	lsls	r5, r4, #4
    9358:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    935c:	f04f 0e02 	mov.w	lr, #2
    9360:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    9364:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    9366:	9b08      	ldr	r3, [sp, #32]
    9368:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    936a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    936c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    936e:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    9370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    9372:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    9374:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    9376:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    937a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    937c:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    937e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    9380:	6a03      	ldr	r3, [r0, #32]
    9382:	4608      	mov	r0, r1
    9384:	4798      	blx	r3
    9386:	fb09 830a 	mla	r3, r9, sl, r8
    938a:	2200      	movs	r2, #0
    938c:	2104      	movs	r1, #4
    938e:	47a8      	blx	r5
	return user_op->status;
    9390:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    9396:	2001      	movs	r0, #1
}
    9398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    939c:	200007e8 	.word	0x200007e8

000093a0 <ticker_job_idle_get>:
{
    93a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    93a4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 9414 <ticker_job_idle_get+0x74>
    93a8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    93ac:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    93b0:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    93b2:	f8de 0004 	ldr.w	r0, [lr, #4]
    93b6:	b20e      	sxth	r6, r1
    93b8:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    93bc:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    93c0:	78fc      	ldrb	r4, [r7, #3]
    93c2:	1c65      	adds	r5, r4, #1
    93c4:	b2ed      	uxtb	r5, r5
		last = 0;
    93c6:	42a8      	cmp	r0, r5
    93c8:	bf98      	it	ls
    93ca:	2500      	movls	r5, #0
	if (last == user->first) {
    93cc:	7878      	ldrb	r0, [r7, #1]
    93ce:	42a8      	cmp	r0, r5
    93d0:	d01d      	beq.n	940e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    93d2:	6878      	ldr	r0, [r7, #4]
    93d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    93d8:	0124      	lsls	r4, r4, #4
    93da:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    93dc:	f04f 0c01 	mov.w	ip, #1
    93e0:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    93e4:	20ff      	movs	r0, #255	; 0xff
    93e6:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    93e8:	2002      	movs	r0, #2
    93ea:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    93ec:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    93ee:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    93f0:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    93f2:	f8de 3020 	ldr.w	r3, [lr, #32]
    93f6:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    93fa:	4608      	mov	r0, r1
    93fc:	4798      	blx	r3
    93fe:	fb08 930a 	mla	r3, r8, sl, r9
    9402:	2200      	movs	r2, #0
    9404:	2104      	movs	r1, #4
    9406:	47a0      	blx	r4
	return user_op->status;
    9408:	6a70      	ldr	r0, [r6, #36]	; 0x24
    940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    940e:	2001      	movs	r0, #1
}
    9410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9414:	200007e8 	.word	0x200007e8

00009418 <ticker_job_sched>:
{
    9418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    941c:	4c08      	ldr	r4, [pc, #32]	; (9440 <ticker_job_sched+0x28>)
    941e:	252c      	movs	r5, #44	; 0x2c
    9420:	fb05 4300 	mla	r3, r5, r0, r4
{
    9424:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9426:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    9428:	6a1b      	ldr	r3, [r3, #32]
    942a:	4608      	mov	r0, r1
    942c:	4798      	blx	r3
    942e:	fb06 4305 	mla	r3, r6, r5, r4
    9432:	46bc      	mov	ip, r7
    9434:	2200      	movs	r2, #0
    9436:	2104      	movs	r1, #4
}
    9438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    943c:	4760      	bx	ip
    943e:	bf00      	nop
    9440:	200007e8 	.word	0x200007e8

00009444 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    9444:	f00a b83e 	b.w	134c4 <cntr_cnt_get>

00009448 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    9448:	1a40      	subs	r0, r0, r1
}
    944a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    944e:	4770      	bx	lr

00009450 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    9450:	b508      	push	{r3, lr}
    9452:	4603      	mov	r3, r0
	if (addr_type > 1) {
    9454:	2b01      	cmp	r3, #1
{
    9456:	4608      	mov	r0, r1
	if (addr_type > 1) {
    9458:	d80e      	bhi.n	9478 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    945a:	b133      	cbz	r3, 946a <ll_addr_get+0x1a>
		if (bdaddr) {
    945c:	b119      	cbz	r1, 9466 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    945e:	2206      	movs	r2, #6
    9460:	4906      	ldr	r1, [pc, #24]	; (947c <ll_addr_get+0x2c>)
    9462:	f7f8 fbcb 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    9466:	4805      	ldr	r0, [pc, #20]	; (947c <ll_addr_get+0x2c>)
    9468:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    946a:	b119      	cbz	r1, 9474 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    946c:	2206      	movs	r2, #6
    946e:	4904      	ldr	r1, [pc, #16]	; (9480 <ll_addr_get+0x30>)
    9470:	f7f8 fbc4 	bl	1bfc <memcpy>
	}

	return pub_addr;
    9474:	4802      	ldr	r0, [pc, #8]	; (9480 <ll_addr_get+0x30>)
}
    9476:	bd08      	pop	{r3, pc}
		return NULL;
    9478:	2000      	movs	r0, #0
    947a:	bd08      	pop	{r3, pc}
    947c:	20000846 	.word	0x20000846
    9480:	20000840 	.word	0x20000840

00009484 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    9484:	b570      	push	{r4, r5, r6, lr}
    9486:	4606      	mov	r6, r0
    9488:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    948a:	f008 f8b5 	bl	115f8 <ll_adv_is_enabled>
    948e:	4604      	mov	r4, r0
    9490:	b110      	cbz	r0, 9498 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    9492:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    9494:	4620      	mov	r0, r4
    9496:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    9498:	f008 f8c2 	bl	11620 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    949c:	f010 0f06 	tst.w	r0, #6
    94a0:	d1f7      	bne.n	9492 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    94a2:	2206      	movs	r2, #6
    94a4:	4629      	mov	r1, r5
	if (addr_type) {
    94a6:	b11e      	cbz	r6, 94b0 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    94a8:	4802      	ldr	r0, [pc, #8]	; (94b4 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    94aa:	f7f8 fba7 	bl	1bfc <memcpy>
    94ae:	e7f1      	b.n	9494 <ll_addr_set+0x10>
    94b0:	4801      	ldr	r0, [pc, #4]	; (94b8 <ll_addr_set+0x34>)
    94b2:	e7fa      	b.n	94aa <ll_addr_set+0x26>
    94b4:	20000846 	.word	0x20000846
    94b8:	20000840 	.word	0x20000840

000094bc <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    94bc:	2300      	movs	r3, #0
    94be:	7003      	strb	r3, [r0, #0]
	*max = 0;
    94c0:	700b      	strb	r3, [r1, #0]
    94c2:	4770      	bx	lr

000094c4 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    94c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    94c6:	4607      	mov	r7, r0
    94c8:	460e      	mov	r6, r1
	while (len) {
    94ca:	460c      	mov	r4, r1
    94cc:	1b35      	subs	r5, r6, r4
    94ce:	443d      	add	r5, r7
    94d0:	b18c      	cbz	r4, 94f6 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    94d2:	f7f7 fd87 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    94d6:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    94d8:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    94da:	d907      	bls.n	94ec <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    94dc:	2204      	movs	r2, #4
    94de:	eb0d 0102 	add.w	r1, sp, r2
    94e2:	4628      	mov	r0, r5
    94e4:	f7f8 fb8a 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    94e8:	3c04      	subs	r4, #4
    94ea:	e7ef      	b.n	94cc <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    94ec:	4622      	mov	r2, r4
    94ee:	a901      	add	r1, sp, #4
    94f0:	4628      	mov	r0, r5
    94f2:	f7f8 fb83 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    94f6:	2000      	movs	r0, #0
    94f8:	b003      	add	sp, #12
    94fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000094fc <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    94fc:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    94fe:	2300      	movs	r3, #0
    9500:	f00a f814 	bl	1352c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    9504:	2000      	movs	r0, #0
    9506:	bd08      	pop	{r3, pc}

00009508 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    9508:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    950a:	4802      	ldr	r0, [pc, #8]	; (9514 <_hci_driver_init+0xc>)
    950c:	f7fa fdd2 	bl	40b4 <bt_hci_driver_register>

	return 0;
}
    9510:	2000      	movs	r0, #0
    9512:	bd08      	pop	{r3, pc}
    9514:	00018f1c 	.word	0x00018f1c

00009518 <recv_thread>:
{
    9518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    951a:	4d28      	ldr	r5, [pc, #160]	; (95bc <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    951c:	2600      	movs	r6, #0
    951e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9522:	4628      	mov	r0, r5
    9524:	f00b fc20 	bl	14d68 <_impl_k_queue_get>
		if (node_rx && !buf) {
    9528:	4604      	mov	r4, r0
    952a:	2800      	cmp	r0, #0
    952c:	d036      	beq.n	959c <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    952e:	f001 fd0f 	bl	af50 <hci_get_class>
	switch (class) {
    9532:	1e03      	subs	r3, r0, #0
    9534:	9403      	str	r4, [sp, #12]
    9536:	db03      	blt.n	9540 <recv_thread+0x28>
    9538:	2b02      	cmp	r3, #2
    953a:	dd10      	ble.n	955e <recv_thread+0x46>
    953c:	2b03      	cmp	r3, #3
    953e:	d030      	beq.n	95a2 <recv_thread+0x8a>
		LL_ASSERT(0);
    9540:	4b1f      	ldr	r3, [pc, #124]	; (95c0 <recv_thread+0xa8>)
    9542:	9301      	str	r3, [sp, #4]
    9544:	9300      	str	r3, [sp, #0]
    9546:	4a1f      	ldr	r2, [pc, #124]	; (95c4 <recv_thread+0xac>)
    9548:	4b1f      	ldr	r3, [pc, #124]	; (95c8 <recv_thread+0xb0>)
    954a:	4920      	ldr	r1, [pc, #128]	; (95cc <recv_thread+0xb4>)
    954c:	4820      	ldr	r0, [pc, #128]	; (95d0 <recv_thread+0xb8>)
    954e:	f7f7 fd1d 	bl	f8c <printk>
    9552:	4040      	eors	r0, r0
    9554:	f380 8811 	msr	BASEPRI, r0
    9558:	f04f 0004 	mov.w	r0, #4
    955c:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    955e:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    9560:	bf0e      	itee	eq
    9562:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9564:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    9568:	2001      	movne	r0, #1
    956a:	f7fa feaf 	bl	42cc <bt_buf_get_rx>
    956e:	4604      	mov	r4, r0
		if (buf) {
    9570:	b118      	cbz	r0, 957a <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    9572:	4601      	mov	r1, r0
    9574:	9803      	ldr	r0, [sp, #12]
    9576:	f001 f935 	bl	a7e4 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    957a:	9b03      	ldr	r3, [sp, #12]
    957c:	2100      	movs	r1, #0
    957e:	88d8      	ldrh	r0, [r3, #6]
    9580:	f008 fcb8 	bl	11ef4 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    9584:	a804      	add	r0, sp, #16
    9586:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    958a:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    958c:	f008 fc3c 	bl	11e08 <ll_rx_mem_release>
		if (buf) {
    9590:	b124      	cbz	r4, 959c <recv_thread+0x84>
			if (buf->len) {
    9592:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    9594:	4620      	mov	r0, r4
			if (buf->len) {
    9596:	b173      	cbz	r3, 95b6 <recv_thread+0x9e>
				bt_recv(buf);
    9598:	f7f9 ffd4 	bl	3544 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    959c:	f00b fe46 	bl	1522c <_impl_k_yield>
    95a0:	e7bd      	b.n	951e <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    95a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    95a6:	f7fa fe91 	bl	42cc <bt_buf_get_rx>
    95aa:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    95ac:	4601      	mov	r1, r0
    95ae:	9803      	ldr	r0, [sp, #12]
    95b0:	f001 f8d8 	bl	a764 <hci_acl_encode>
    95b4:	e7e1      	b.n	957a <recv_thread+0x62>
				net_buf_unref(buf);
    95b6:	f00a fdef 	bl	14198 <net_buf_unref>
    95ba:	e7ef      	b.n	959c <recv_thread+0x84>
    95bc:	20003f44 	.word	0x20003f44
    95c0:	00015e19 	.word	0x00015e19
    95c4:	000171f2 	.word	0x000171f2
    95c8:	00018eef 	.word	0x00018eef
    95cc:	00017241 	.word	0x00017241
    95d0:	00017166 	.word	0x00017166

000095d4 <hci_driver_send>:
{
    95d4:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    95d6:	8983      	ldrh	r3, [r0, #12]
{
    95d8:	b087      	sub	sp, #28
    95da:	4605      	mov	r5, r0
	if (!buf->len) {
    95dc:	b96b      	cbnz	r3, 95fa <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    95de:	4b20      	ldr	r3, [pc, #128]	; (9660 <hci_driver_send+0x8c>)
    95e0:	9301      	str	r3, [sp, #4]
    95e2:	9300      	str	r3, [sp, #0]
    95e4:	4a1f      	ldr	r2, [pc, #124]	; (9664 <hci_driver_send+0x90>)
    95e6:	4b20      	ldr	r3, [pc, #128]	; (9668 <hci_driver_send+0x94>)
    95e8:	4920      	ldr	r1, [pc, #128]	; (966c <hci_driver_send+0x98>)
    95ea:	4821      	ldr	r0, [pc, #132]	; (9670 <hci_driver_send+0x9c>)
    95ec:	f7f7 fcce 	bl	f8c <printk>
		return -EINVAL;
    95f0:	f06f 0415 	mvn.w	r4, #21
}
    95f4:	4620      	mov	r0, r4
    95f6:	b007      	add	sp, #28
    95f8:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    95fa:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    95fc:	b183      	cbz	r3, 9620 <hci_driver_send+0x4c>
    95fe:	2b02      	cmp	r3, #2
    9600:	d11f      	bne.n	9642 <hci_driver_send+0x6e>
	err = hci_acl_handle(buf, &evt);
    9602:	a905      	add	r1, sp, #20
    9604:	f001 f81e 	bl	a644 <hci_acl_handle>
    9608:	4604      	mov	r4, r0
	if (evt) {
    960a:	9805      	ldr	r0, [sp, #20]
    960c:	b108      	cbz	r0, 9612 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    960e:	f7fa fc27 	bl	3e60 <bt_recv_prio>
	if (!err) {
    9612:	2c00      	cmp	r4, #0
    9614:	d1ee      	bne.n	95f4 <hci_driver_send+0x20>
		net_buf_unref(buf);
    9616:	4628      	mov	r0, r5
    9618:	f00a fdbe 	bl	14198 <net_buf_unref>
    961c:	2400      	movs	r4, #0
    961e:	e7e9      	b.n	95f4 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    9620:	f000 faaa 	bl	9b78 <hci_cmd_handle>
	if (evt) {
    9624:	4602      	mov	r2, r0
    9626:	2800      	cmp	r0, #0
    9628:	d0f5      	beq.n	9616 <hci_driver_send+0x42>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    962a:	6883      	ldr	r3, [r0, #8]
    962c:	7819      	ldrb	r1, [r3, #0]
    962e:	2913      	cmp	r1, #19
    9630:	d812      	bhi.n	9658 <hci_driver_send+0x84>
    9632:	2301      	movs	r3, #1
    9634:	408b      	lsls	r3, r1
    9636:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    963a:	d00d      	beq.n	9658 <hci_driver_send+0x84>
			bt_recv_prio(evt);
    963c:	f7fa fc10 	bl	3e60 <bt_recv_prio>
    9640:	e7e9      	b.n	9616 <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    9642:	4a07      	ldr	r2, [pc, #28]	; (9660 <hci_driver_send+0x8c>)
    9644:	9202      	str	r2, [sp, #8]
    9646:	e88d 000c 	stmia.w	sp, {r2, r3}
    964a:	4908      	ldr	r1, [pc, #32]	; (966c <hci_driver_send+0x98>)
    964c:	4b06      	ldr	r3, [pc, #24]	; (9668 <hci_driver_send+0x94>)
    964e:	4a05      	ldr	r2, [pc, #20]	; (9664 <hci_driver_send+0x90>)
    9650:	4808      	ldr	r0, [pc, #32]	; (9674 <hci_driver_send+0xa0>)
    9652:	f7f7 fc9b 	bl	f8c <printk>
    9656:	e7cb      	b.n	95f0 <hci_driver_send+0x1c>
			bt_recv(evt);
    9658:	4610      	mov	r0, r2
    965a:	f7f9 ff73 	bl	3544 <bt_recv>
    965e:	e7da      	b.n	9616 <hci_driver_send+0x42>
    9660:	00015e19 	.word	0x00015e19
    9664:	000171f2 	.word	0x000171f2
    9668:	00018efb 	.word	0x00018efb
    966c:	00017241 	.word	0x00017241
    9670:	00018f5d 	.word	0x00018f5d
    9674:	00018f7e 	.word	0x00018f7e

00009678 <prio_recv_thread>:
{
    9678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    967a:	4d14      	ldr	r5, [pc, #80]	; (96cc <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    967c:	4e14      	ldr	r6, [pc, #80]	; (96d0 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    967e:	f10d 0102 	add.w	r1, sp, #2
    9682:	a801      	add	r0, sp, #4
    9684:	f008 fb88 	bl	11d98 <ll_rx_get>
    9688:	4604      	mov	r4, r0
    968a:	b940      	cbnz	r0, 969e <prio_recv_thread+0x26>
		if (node_rx) {
    968c:	9b01      	ldr	r3, [sp, #4]
    968e:	b1bb      	cbz	r3, 96c0 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    9690:	f008 fe64 	bl	1235c <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    9694:	9901      	ldr	r1, [sp, #4]
    9696:	4630      	mov	r0, r6
    9698:	f00b fb42 	bl	14d20 <k_queue_append>
    969c:	e7ef      	b.n	967e <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    969e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    96a2:	2001      	movs	r0, #1
    96a4:	f7fa fe12 	bl	42cc <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    96a8:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    96aa:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    96ac:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    96b0:	f001 fc3a 	bl	af28 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    96b4:	4638      	mov	r0, r7
    96b6:	f7fa fbd3 	bl	3e60 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    96ba:	f00b fdb7 	bl	1522c <_impl_k_yield>
    96be:	e7de      	b.n	967e <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    96c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    96c4:	4628      	mov	r0, r5
    96c6:	f00b fe18 	bl	152fa <_impl_k_sem_take>
    96ca:	e7d8      	b.n	967e <prio_recv_thread+0x6>
    96cc:	20003f2c 	.word	0x20003f2c
    96d0:	20003f44 	.word	0x20003f44

000096d4 <hci_driver_open>:
{
    96d4:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    96d6:	481a      	ldr	r0, [pc, #104]	; (9740 <hci_driver_open+0x6c>)
{
    96d8:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    96da:	f008 ff1d 	bl	12518 <ll_init>
	if (err) {
    96de:	4604      	mov	r4, r0
    96e0:	b160      	cbz	r0, 96fc <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    96e2:	4b18      	ldr	r3, [pc, #96]	; (9744 <hci_driver_open+0x70>)
    96e4:	9302      	str	r3, [sp, #8]
    96e6:	e88d 0018 	stmia.w	sp, {r3, r4}
    96ea:	4a17      	ldr	r2, [pc, #92]	; (9748 <hci_driver_open+0x74>)
    96ec:	4b17      	ldr	r3, [pc, #92]	; (974c <hci_driver_open+0x78>)
    96ee:	4918      	ldr	r1, [pc, #96]	; (9750 <hci_driver_open+0x7c>)
    96f0:	4818      	ldr	r0, [pc, #96]	; (9754 <hci_driver_open+0x80>)
    96f2:	f7f7 fc4b 	bl	f8c <printk>
}
    96f6:	4620      	mov	r0, r4
    96f8:	b006      	add	sp, #24
    96fa:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    96fc:	f001 fc40 	bl	af80 <hci_init>

    9700:	f06f 0309 	mvn.w	r3, #9
    9704:	9303      	str	r3, [sp, #12]
    9706:	9405      	str	r4, [sp, #20]
    9708:	9404      	str	r4, [sp, #16]
    970a:	9402      	str	r4, [sp, #8]
    970c:	9401      	str	r4, [sp, #4]
    970e:	9400      	str	r4, [sp, #0]
    9710:	4b11      	ldr	r3, [pc, #68]	; (9758 <hci_driver_open+0x84>)
    9712:	4912      	ldr	r1, [pc, #72]	; (975c <hci_driver_open+0x88>)
    9714:	4812      	ldr	r0, [pc, #72]	; (9760 <hci_driver_open+0x8c>)
    9716:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    971a:	f00b ffc3 	bl	156a4 <_impl_k_thread_create>
    971e:	f06f 0307 	mvn.w	r3, #7
    9722:	9303      	str	r3, [sp, #12]
    9724:	9405      	str	r4, [sp, #20]
    9726:	9404      	str	r4, [sp, #16]
    9728:	9402      	str	r4, [sp, #8]
    972a:	9401      	str	r4, [sp, #4]
    972c:	9400      	str	r4, [sp, #0]
    972e:	4b0d      	ldr	r3, [pc, #52]	; (9764 <hci_driver_open+0x90>)
    9730:	490d      	ldr	r1, [pc, #52]	; (9768 <hci_driver_open+0x94>)
    9732:	480e      	ldr	r0, [pc, #56]	; (976c <hci_driver_open+0x98>)
    9734:	f240 522c 	movw	r2, #1324	; 0x52c
    9738:	f00b ffb4 	bl	156a4 <_impl_k_thread_create>
    973c:	e7db      	b.n	96f6 <hci_driver_open+0x22>
    973e:	bf00      	nop
    9740:	20003f2c 	.word	0x20003f2c
    9744:	00015e19 	.word	0x00015e19
    9748:	000171f2 	.word	0x000171f2
    974c:	00018f0b 	.word	0x00018f0b
    9750:	00017241 	.word	0x00017241
    9754:	00018f30 	.word	0x00018f30
    9758:	00009679 	.word	0x00009679
    975c:	200020e8 	.word	0x200020e8
    9760:	200018c8 	.word	0x200018c8
    9764:	00009519 	.word	0x00009519
    9768:	200023d8 	.word	0x200023d8
    976c:	20001858 	.word	0x20001858

00009770 <sys_put_le32>:
	dst[1] = val >> 8;
    9770:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    9774:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    9776:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    9778:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    977a:	0a00      	lsrs	r0, r0, #8
    977c:	704b      	strb	r3, [r1, #1]
    977e:	70c8      	strb	r0, [r1, #3]
    9780:	4770      	bx	lr

00009782 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    9782:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    9784:	3008      	adds	r0, #8
{
    9786:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    9788:	2102      	movs	r1, #2
{
    978a:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    978c:	f00a fd36 	bl	141fc <net_buf_simple_add>
	hdr->evt = evt;
    9790:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    9792:	7044      	strb	r4, [r0, #1]
    9794:	bd38      	pop	{r3, r4, r5, pc}
	...

00009798 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    9798:	b538      	push	{r3, r4, r5, lr}
    979a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    979c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    97a0:	f7fa fda4 	bl	42ec <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    97a4:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    97a6:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    97a8:	210f      	movs	r1, #15
    97aa:	f7ff ffea 	bl	9782 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    97ae:	2104      	movs	r1, #4
    97b0:	f104 0008 	add.w	r0, r4, #8
    97b4:	f00a fd22 	bl	141fc <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    97b8:	2301      	movs	r3, #1
    97ba:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    97bc:	4b02      	ldr	r3, [pc, #8]	; (97c8 <cmd_status+0x30>)
	cs->status = status;
    97be:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    97c0:	881b      	ldrh	r3, [r3, #0]
    97c2:	8043      	strh	r3, [r0, #2]

	return buf;
}
    97c4:	4620      	mov	r0, r4
    97c6:	bd38      	pop	{r3, r4, r5, pc}
    97c8:	2000084c 	.word	0x2000084c

000097cc <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    97cc:	b570      	push	{r4, r5, r6, lr}
    97ce:	4604      	mov	r4, r0
    97d0:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    97d2:	3201      	adds	r2, #1
{
    97d4:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    97d6:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    97d8:	b2d2      	uxtb	r2, r2
    97da:	213e      	movs	r1, #62	; 0x3e
    97dc:	f7ff ffd1 	bl	9782 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    97e0:	2101      	movs	r1, #1
    97e2:	4620      	mov	r0, r4
    97e4:	f00a fd0a 	bl	141fc <net_buf_simple_add>
	me->subevent = subevt;
    97e8:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    97ea:	4629      	mov	r1, r5
    97ec:	4620      	mov	r0, r4
}
    97ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    97f2:	f00a bd03 	b.w	141fc <net_buf_simple_add>
	...

000097f8 <cmd_complete>:
{
    97f8:	b538      	push	{r3, r4, r5, lr}
    97fa:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    97fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    9800:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    9802:	f7fa fd73 	bl	42ec <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    9806:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    9808:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    980a:	b2d2      	uxtb	r2, r2
    980c:	210e      	movs	r1, #14
    980e:	f7ff ffb8 	bl	9782 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    9812:	6820      	ldr	r0, [r4, #0]
    9814:	2103      	movs	r1, #3
    9816:	3008      	adds	r0, #8
    9818:	f00a fcf0 	bl	141fc <net_buf_simple_add>
	cc->ncmd = 1;
    981c:	2301      	movs	r3, #1
    981e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    9820:	4b05      	ldr	r3, [pc, #20]	; (9838 <cmd_complete+0x40>)
    9822:	881b      	ldrh	r3, [r3, #0]
    9824:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    9828:	6820      	ldr	r0, [r4, #0]
    982a:	4629      	mov	r1, r5
    982c:	3008      	adds	r0, #8
}
    982e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    9832:	f00a bce3 	b.w	141fc <net_buf_simple_add>
    9836:	bf00      	nop
    9838:	2000084c 	.word	0x2000084c

0000983c <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    983c:	4b0e      	ldr	r3, [pc, #56]	; (9878 <encrypt_change+0x3c>)
{
    983e:	b570      	push	{r4, r5, r6, lr}
    9840:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    9842:	e9d3 2300 	ldrd	r2, r3, [r3]
    9846:	2300      	movs	r3, #0
    9848:	f002 0280 	and.w	r2, r2, #128	; 0x80
    984c:	4313      	orrs	r3, r2
{
    984e:	4604      	mov	r4, r0
    9850:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    9852:	d010      	beq.n	9876 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    9854:	2204      	movs	r2, #4
    9856:	2108      	movs	r1, #8
    9858:	4628      	mov	r0, r5
    985a:	f7ff ff92 	bl	9782 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    985e:	2104      	movs	r1, #4
    9860:	f105 0008 	add.w	r0, r5, #8
    9864:	f00a fcca 	bl	141fc <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    9868:	fab4 f384 	clz	r3, r4
    986c:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    986e:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9870:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    9874:	70c3      	strb	r3, [r0, #3]
    9876:	bd70      	pop	{r4, r5, r6, pc}
    9878:	20003d50 	.word	0x20003d50

0000987c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    987c:	b570      	push	{r4, r5, r6, lr}
    987e:	4604      	mov	r4, r0
    9880:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9882:	4b13      	ldr	r3, [pc, #76]	; (98d0 <le_remote_feat_complete+0x54>)
{
    9884:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9886:	e9d3 2300 	ldrd	r2, r3, [r3]
    988a:	2200      	movs	r2, #0
    988c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9890:	4313      	orrs	r3, r2
{
    9892:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9894:	d01b      	beq.n	98ce <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    9896:	4b0f      	ldr	r3, [pc, #60]	; (98d4 <le_remote_feat_complete+0x58>)
    9898:	e9d3 2300 	ldrd	r2, r3, [r3]
    989c:	2300      	movs	r3, #0
    989e:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98a2:	4313      	orrs	r3, r2
    98a4:	d013      	beq.n	98ce <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    98a6:	220b      	movs	r2, #11
    98a8:	2104      	movs	r1, #4
    98aa:	f7ff ff8f 	bl	97cc <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    98ae:	2208      	movs	r2, #8
	sep->status = status;
    98b0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    98b2:	f8a0 6001 	strh.w	r6, [r0, #1]
    98b6:	3003      	adds	r0, #3
	if (!status) {
    98b8:	b924      	cbnz	r4, 98c4 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    98ba:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    98bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    98c0:	f7f8 b99c 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    98c4:	2100      	movs	r1, #0
}
    98c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    98ca:	f7f8 b9c3 	b.w	1c54 <memset>
    98ce:	bd70      	pop	{r4, r5, r6, pc}
    98d0:	20003d50 	.word	0x20003d50
    98d4:	20003d58 	.word	0x20003d58

000098d8 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    98d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98dc:	4605      	mov	r5, r0
    98de:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    98e0:	4b46      	ldr	r3, [pc, #280]	; (99fc <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    98e2:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    98e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    98e8:	f240 2801 	movw	r8, #513	; 0x201
    98ec:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    98f0:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    98f4:	ea03 0309 	and.w	r3, r3, r9
    98f8:	ea02 0208 	and.w	r2, r2, r8
    98fc:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    98fe:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    9900:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9904:	d077      	beq.n	99f6 <le_conn_complete.part.39+0x11e>
	if (!status) {
    9906:	2d00      	cmp	r5, #0
    9908:	d150      	bne.n	99ac <le_conn_complete.part.39+0xd4>
		conn_count++;
    990a:	4a3d      	ldr	r2, [pc, #244]	; (9a00 <le_conn_complete.part.39+0x128>)
    990c:	6813      	ldr	r3, [r2, #0]
    990e:	3301      	adds	r3, #1
    9910:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    9912:	ea5a 030b 	orrs.w	r3, sl, fp
    9916:	f101 0803 	add.w	r8, r1, #3
    991a:	d151      	bne.n	99c0 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    991c:	2212      	movs	r2, #18
    991e:	2101      	movs	r1, #1
    9920:	f7ff ff54 	bl	97cc <meta_evt>
	lecc->status = 0x00;
    9924:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    9926:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    992a:	7863      	ldrb	r3, [r4, #1]
    992c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    992e:	78a3      	ldrb	r3, [r4, #2]
    9930:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9932:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9934:	2206      	movs	r2, #6
    9936:	4641      	mov	r1, r8
    9938:	3005      	adds	r0, #5
    993a:	f7f8 f95f 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    993e:	8ae3      	ldrh	r3, [r4, #22]
    9940:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    9944:	8b23      	ldrh	r3, [r4, #24]
    9946:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    994a:	8b63      	ldrh	r3, [r4, #26]
    994c:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    9950:	7f23      	ldrb	r3, [r4, #28]
    9952:	747b      	strb	r3, [r7, #17]
    9954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9958:	221e      	movs	r2, #30
    995a:	210a      	movs	r1, #10
    995c:	f7ff ff36 	bl	97cc <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    9960:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9962:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    9964:	2100      	movs	r1, #0
    9966:	f7f8 f975 	bl	1c54 <memset>
		lecc->status = status;
    996a:	7025      	strb	r5, [r4, #0]
    996c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    9970:	7d63      	ldrb	r3, [r4, #21]
    9972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9976:	2b40      	cmp	r3, #64	; 0x40
    9978:	d138      	bne.n	99ec <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    997a:	2206      	movs	r2, #6
    997c:	f104 0110 	add.w	r1, r4, #16
    9980:	f7f8 f93c 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    9984:	2206      	movs	r2, #6
    9986:	f104 0109 	add.w	r1, r4, #9
    998a:	f107 0011 	add.w	r0, r7, #17
    998e:	f7f8 f935 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    9992:	8ae3      	ldrh	r3, [r4, #22]
    9994:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    9998:	8b23      	ldrh	r3, [r4, #24]
    999a:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    999e:	8b63      	ldrh	r3, [r4, #26]
    99a0:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    99a4:	7f23      	ldrb	r3, [r4, #28]
    99a6:	777b      	strb	r3, [r7, #29]
    99a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    99ac:	ea5a 030b 	orrs.w	r3, sl, fp
    99b0:	d1d2      	bne.n	9958 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    99b2:	2212      	movs	r2, #18
    99b4:	2101      	movs	r1, #1
    99b6:	f7ff ff09 	bl	97cc <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    99ba:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    99bc:	4604      	mov	r4, r0
    99be:	e7d1      	b.n	9964 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    99c0:	221e      	movs	r2, #30
    99c2:	210a      	movs	r1, #10
    99c4:	f7ff ff02 	bl	97cc <meta_evt>
		leecc->status = 0x00;
    99c8:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    99ca:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    99ce:	7863      	ldrb	r3, [r4, #1]
    99d0:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    99d2:	78a3      	ldrb	r3, [r4, #2]
    99d4:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    99d6:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    99d8:	2206      	movs	r2, #6
    99da:	4641      	mov	r1, r8
    99dc:	3005      	adds	r0, #5
    99de:	f7f8 f90d 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    99e2:	7be3      	ldrb	r3, [r4, #15]
    99e4:	f107 000b 	add.w	r0, r7, #11
    99e8:	2b00      	cmp	r3, #0
    99ea:	d1c1      	bne.n	9970 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    99ec:	2206      	movs	r2, #6
    99ee:	2100      	movs	r1, #0
    99f0:	f7f8 f930 	bl	1c54 <memset>
    99f4:	e7c6      	b.n	9984 <le_conn_complete.part.39+0xac>
    99f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99fa:	bf00      	nop
    99fc:	20003d58 	.word	0x20003d58
    9a00:	20000850 	.word	0x20000850

00009a04 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9a04:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    9a06:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9a08:	b08a      	sub	sp, #40	; 0x28
    9a0a:	4604      	mov	r4, r0
    9a0c:	460e      	mov	r6, r1
    9a0e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    9a10:	2b03      	cmp	r3, #3
    9a12:	d820      	bhi.n	9a56 <bt_addr_le_to_str.constprop.70+0x52>
    9a14:	e8df f003 	tbb	[pc, r3]
    9a18:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    9a1c:	4911      	ldr	r1, [pc, #68]	; (9a64 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    9a1e:	4628      	mov	r0, r5
    9a20:	f7f8 f8b8 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    9a24:	7862      	ldrb	r2, [r4, #1]
    9a26:	9204      	str	r2, [sp, #16]
    9a28:	78a2      	ldrb	r2, [r4, #2]
    9a2a:	9203      	str	r2, [sp, #12]
    9a2c:	78e2      	ldrb	r2, [r4, #3]
    9a2e:	9202      	str	r2, [sp, #8]
    9a30:	7922      	ldrb	r2, [r4, #4]
    9a32:	9201      	str	r2, [sp, #4]
    9a34:	7962      	ldrb	r2, [r4, #5]
    9a36:	9200      	str	r2, [sp, #0]
    9a38:	79a3      	ldrb	r3, [r4, #6]
    9a3a:	9505      	str	r5, [sp, #20]
    9a3c:	4a0a      	ldr	r2, [pc, #40]	; (9a68 <bt_addr_le_to_str.constprop.70+0x64>)
    9a3e:	211b      	movs	r1, #27
    9a40:	4630      	mov	r0, r6
    9a42:	f7f7 fab1 	bl	fa8 <snprintk>
}
    9a46:	b00a      	add	sp, #40	; 0x28
    9a48:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    9a4a:	4908      	ldr	r1, [pc, #32]	; (9a6c <bt_addr_le_to_str.constprop.70+0x68>)
    9a4c:	e7e7      	b.n	9a1e <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    9a4e:	4908      	ldr	r1, [pc, #32]	; (9a70 <bt_addr_le_to_str.constprop.70+0x6c>)
    9a50:	e7e5      	b.n	9a1e <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    9a52:	4908      	ldr	r1, [pc, #32]	; (9a74 <bt_addr_le_to_str.constprop.70+0x70>)
    9a54:	e7e3      	b.n	9a1e <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    9a56:	4a08      	ldr	r2, [pc, #32]	; (9a78 <bt_addr_le_to_str.constprop.70+0x74>)
    9a58:	210a      	movs	r1, #10
    9a5a:	4628      	mov	r0, r5
    9a5c:	f7f7 faa4 	bl	fa8 <snprintk>
    9a60:	e7e0      	b.n	9a24 <bt_addr_le_to_str.constprop.70+0x20>
    9a62:	bf00      	nop
    9a64:	00015d85 	.word	0x00015d85
    9a68:	00015dae 	.word	0x00015dae
    9a6c:	00015d8c 	.word	0x00015d8c
    9a70:	00015d93 	.word	0x00015d93
    9a74:	00015d9d 	.word	0x00015d9d
    9a78:	00015da7 	.word	0x00015da7

00009a7c <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    9a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a80:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    9a82:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9a84:	4d32      	ldr	r5, [pc, #200]	; (9b50 <le_adv_ext_report.isra.66+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    9a86:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9a88:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9a8a:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9a8c:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9a8e:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9a90:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9a92:	b25b      	sxtb	r3, r3
    9a94:	9306      	str	r3, [sp, #24]
    9a96:	7823      	ldrb	r3, [r4, #0]
    9a98:	9201      	str	r2, [sp, #4]
    9a9a:	09d9      	lsrs	r1, r3, #7
    9a9c:	9105      	str	r1, [sp, #20]
    9a9e:	f3c3 1180 	ubfx	r1, r3, #6, #1
    9aa2:	f003 030f 	and.w	r3, r3, #15
    9aa6:	9104      	str	r1, [sp, #16]
    9aa8:	9302      	str	r3, [sp, #8]
    9aaa:	9500      	str	r5, [sp, #0]
    9aac:	4b29      	ldr	r3, [pc, #164]	; (9b54 <le_adv_ext_report.isra.66+0xd8>)
    9aae:	4a2a      	ldr	r2, [pc, #168]	; (9b58 <le_adv_ext_report.isra.66+0xdc>)
    9ab0:	492a      	ldr	r1, [pc, #168]	; (9b5c <le_adv_ext_report.isra.66+0xe0>)
    9ab2:	482b      	ldr	r0, [pc, #172]	; (9b60 <le_adv_ext_report.isra.66+0xe4>)
    9ab4:	f7f7 fa6a 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    9ab8:	7823      	ldrb	r3, [r4, #0]
    9aba:	f003 030f 	and.w	r3, r3, #15
    9abe:	2b07      	cmp	r3, #7
    9ac0:	d143      	bne.n	9b4a <le_adv_ext_report.isra.66+0xce>
    9ac2:	7863      	ldrb	r3, [r4, #1]
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d040      	beq.n	9b4a <le_adv_ext_report.isra.66+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    9ac8:	78a3      	ldrb	r3, [r4, #2]
    9aca:	4924      	ldr	r1, [pc, #144]	; (9b5c <le_adv_ext_report.isra.66+0xe0>)
    9acc:	9503      	str	r5, [sp, #12]
    9ace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    9ad2:	099b      	lsrs	r3, r3, #6
    9ad4:	9202      	str	r2, [sp, #8]
    9ad6:	9301      	str	r3, [sp, #4]
    9ad8:	9500      	str	r5, [sp, #0]
    9ada:	4b1e      	ldr	r3, [pc, #120]	; (9b54 <le_adv_ext_report.isra.66+0xd8>)
    9adc:	4a1e      	ldr	r2, [pc, #120]	; (9b58 <le_adv_ext_report.isra.66+0xdc>)
    9ade:	4821      	ldr	r0, [pc, #132]	; (9b64 <le_adv_ext_report.isra.66+0xe8>)
    9ae0:	f7f7 fa54 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    9ae4:	78a3      	ldrb	r3, [r4, #2]
    9ae6:	0699      	lsls	r1, r3, #26
    9ae8:	d02f      	beq.n	9b4a <le_adv_ext_report.isra.66+0xce>
		if (h->adv_addr) {
    9aea:	78e3      	ldrb	r3, [r4, #3]
    9aec:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    9aee:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    9af2:	d51c      	bpl.n	9b2e <le_adv_ext_report.isra.66+0xb2>
			addr.type = adv->tx_addr;
    9af4:	7823      	ldrb	r3, [r4, #0]
    9af6:	af12      	add	r7, sp, #72	; 0x48
    9af8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9afc:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    9b00:	2206      	movs	r2, #6
    9b02:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9b04:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    9b08:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    9b0c:	f7f8 f876 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9b10:	4641      	mov	r1, r8
    9b12:	4638      	mov	r0, r7
    9b14:	f7ff ff76 	bl	9a04 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    9b18:	9502      	str	r5, [sp, #8]
    9b1a:	e88d 0120 	stmia.w	sp, {r5, r8}
    9b1e:	4b0d      	ldr	r3, [pc, #52]	; (9b54 <le_adv_ext_report.isra.66+0xd8>)
    9b20:	4a0d      	ldr	r2, [pc, #52]	; (9b58 <le_adv_ext_report.isra.66+0xdc>)
    9b22:	490e      	ldr	r1, [pc, #56]	; (9b5c <le_adv_ext_report.isra.66+0xe0>)
    9b24:	4810      	ldr	r0, [pc, #64]	; (9b68 <le_adv_ext_report.isra.66+0xec>)
			ptr += BDADDR_SIZE;
    9b26:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    9b2a:	f7f7 fa2f 	bl	f8c <printk>
		if (h->tx_pwr) {
    9b2e:	78e3      	ldrb	r3, [r4, #3]
    9b30:	065b      	lsls	r3, r3, #25
    9b32:	d50a      	bpl.n	9b4a <le_adv_ext_report.isra.66+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    9b34:	9502      	str	r5, [sp, #8]
    9b36:	f996 3000 	ldrsb.w	r3, [r6]
    9b3a:	9301      	str	r3, [sp, #4]
    9b3c:	9500      	str	r5, [sp, #0]
    9b3e:	4b05      	ldr	r3, [pc, #20]	; (9b54 <le_adv_ext_report.isra.66+0xd8>)
    9b40:	4a05      	ldr	r2, [pc, #20]	; (9b58 <le_adv_ext_report.isra.66+0xdc>)
    9b42:	4906      	ldr	r1, [pc, #24]	; (9b5c <le_adv_ext_report.isra.66+0xe0>)
    9b44:	4809      	ldr	r0, [pc, #36]	; (9b6c <le_adv_ext_report.isra.66+0xf0>)
    9b46:	f7f7 fa21 	bl	f8c <printk>
}
    9b4a:	b012      	add	sp, #72	; 0x48
    9b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b50:	00015e19 	.word	0x00015e19
    9b54:	00018fec 	.word	0x00018fec
    9b58:	0001727c 	.word	0x0001727c
    9b5c:	00017241 	.word	0x00017241
    9b60:	00019249 	.word	0x00019249
    9b64:	00019296 	.word	0x00019296
    9b68:	000192c7 	.word	0x000192c7
    9b6c:	000192e0 	.word	0x000192e0

00009b70 <sys_get_le64>:
{
    9b70:	4603      	mov	r3, r0
}
    9b72:	6800      	ldr	r0, [r0, #0]
    9b74:	6859      	ldr	r1, [r3, #4]
    9b76:	4770      	bx	lr

00009b78 <hci_cmd_handle>:
{
    9b78:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    9b7a:	8981      	ldrh	r1, [r0, #12]
{
    9b7c:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    9b7e:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    9b80:	2902      	cmp	r1, #2
{
    9b82:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    9b84:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    9b86:	d80b      	bhi.n	9ba0 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    9b88:	4bbe      	ldr	r3, [pc, #760]	; (9e84 <hci_cmd_handle+0x30c>)
    9b8a:	9301      	str	r3, [sp, #4]
    9b8c:	9300      	str	r3, [sp, #0]
    9b8e:	4abe      	ldr	r2, [pc, #760]	; (9e88 <hci_cmd_handle+0x310>)
    9b90:	4bbe      	ldr	r3, [pc, #760]	; (9e8c <hci_cmd_handle+0x314>)
    9b92:	49bf      	ldr	r1, [pc, #764]	; (9e90 <hci_cmd_handle+0x318>)
    9b94:	48bf      	ldr	r0, [pc, #764]	; (9e94 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    9b96:	f7f7 f9f9 	bl	f8c <printk>
		return NULL;
    9b9a:	4628      	mov	r0, r5
}
    9b9c:	b013      	add	sp, #76	; 0x4c
    9b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    9ba0:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9ba2:	4ebd      	ldr	r6, [pc, #756]	; (9e98 <hci_cmd_handle+0x320>)
    9ba4:	781a      	ldrb	r2, [r3, #0]
    9ba6:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    9ba8:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9baa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    9bae:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9bb0:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    9bb2:	d907      	bls.n	9bc4 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    9bb4:	4bb3      	ldr	r3, [pc, #716]	; (9e84 <hci_cmd_handle+0x30c>)
    9bb6:	9301      	str	r3, [sp, #4]
    9bb8:	9300      	str	r3, [sp, #0]
    9bba:	4ab3      	ldr	r2, [pc, #716]	; (9e88 <hci_cmd_handle+0x310>)
    9bbc:	4bb3      	ldr	r3, [pc, #716]	; (9e8c <hci_cmd_handle+0x314>)
    9bbe:	49b4      	ldr	r1, [pc, #720]	; (9e90 <hci_cmd_handle+0x318>)
    9bc0:	48b6      	ldr	r0, [pc, #728]	; (9e9c <hci_cmd_handle+0x324>)
    9bc2:	e7e8      	b.n	9b96 <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    9bc4:	2103      	movs	r1, #3
    9bc6:	f104 0008 	add.w	r0, r4, #8
    9bca:	f00a fb36 	bl	1423a <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    9bce:	8833      	ldrh	r3, [r6, #0]
    9bd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    9bd4:	0a9b      	lsrs	r3, r3, #10
    9bd6:	2b04      	cmp	r3, #4
    9bd8:	f000 80bc 	beq.w	9d54 <hci_cmd_handle+0x1dc>
    9bdc:	d809      	bhi.n	9bf2 <hci_cmd_handle+0x7a>
    9bde:	2b01      	cmp	r3, #1
    9be0:	d026      	beq.n	9c30 <hci_cmd_handle+0xb8>
    9be2:	2b03      	cmp	r3, #3
    9be4:	d03b      	beq.n	9c5e <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    9be6:	2101      	movs	r1, #1
    9be8:	a807      	add	r0, sp, #28
    9bea:	f7ff fe05 	bl	97f8 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    9bee:	2301      	movs	r3, #1
    9bf0:	e298      	b.n	a124 <hci_cmd_handle+0x5ac>
	switch (BT_OGF(_opcode)) {
    9bf2:	2b08      	cmp	r3, #8
    9bf4:	f000 8168 	beq.w	9ec8 <hci_cmd_handle+0x350>
    9bf8:	2b3f      	cmp	r3, #63	; 0x3f
    9bfa:	d1f4      	bne.n	9be6 <hci_cmd_handle+0x6e>
	switch (ocf) {
    9bfc:	3a01      	subs	r2, #1
    9bfe:	2a09      	cmp	r2, #9
    9c00:	d8f1      	bhi.n	9be6 <hci_cmd_handle+0x6e>
    9c02:	a301      	add	r3, pc, #4	; (adr r3, 9c08 <hci_cmd_handle+0x90>)
    9c04:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9c08:	0000a45d 	.word	0x0000a45d
    9c0c:	0000a48d 	.word	0x0000a48d
    9c10:	0000a4b7 	.word	0x0000a4b7
    9c14:	00009be7 	.word	0x00009be7
    9c18:	00009be7 	.word	0x00009be7
    9c1c:	0000a4fd 	.word	0x0000a4fd
    9c20:	00009be7 	.word	0x00009be7
    9c24:	0000a4cf 	.word	0x0000a4cf
    9c28:	0000a509 	.word	0x0000a509
    9c2c:	0000a577 	.word	0x0000a577
	switch (ocf) {
    9c30:	2a06      	cmp	r2, #6
    9c32:	d006      	beq.n	9c42 <hci_cmd_handle+0xca>
    9c34:	2a1d      	cmp	r2, #29
    9c36:	d1d6      	bne.n	9be6 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    9c38:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    9c3a:	8818      	ldrh	r0, [r3, #0]
    9c3c:	f007 ffc1 	bl	11bc2 <ll_version_ind_send>
    9c40:	e004      	b.n	9c4c <hci_cmd_handle+0xd4>
    9c42:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    9c44:	7899      	ldrb	r1, [r3, #2]
    9c46:	8818      	ldrh	r0, [r3, #0]
    9c48:	f007 ffcf 	bl	11bea <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    9c4c:	2800      	cmp	r0, #0
    9c4e:	bf14      	ite	ne
    9c50:	200c      	movne	r0, #12
    9c52:	2000      	moveq	r0, #0
    9c54:	f7ff fda0 	bl	9798 <cmd_status>
    9c58:	9007      	str	r0, [sp, #28]
	return evt;
    9c5a:	9807      	ldr	r0, [sp, #28]
    9c5c:	e79e      	b.n	9b9c <hci_cmd_handle+0x24>
	switch (ocf) {
    9c5e:	2a2d      	cmp	r2, #45	; 0x2d
    9c60:	d03a      	beq.n	9cd8 <hci_cmd_handle+0x160>
    9c62:	d820      	bhi.n	9ca6 <hci_cmd_handle+0x12e>
    9c64:	2a01      	cmp	r2, #1
    9c66:	d02b      	beq.n	9cc0 <hci_cmd_handle+0x148>
    9c68:	2a03      	cmp	r2, #3
    9c6a:	d1bc      	bne.n	9be6 <hci_cmd_handle+0x6e>
	dup_count = -1;
    9c6c:	4b8c      	ldr	r3, [pc, #560]	; (9ea0 <hci_cmd_handle+0x328>)
    9c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9c72:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9c74:	4b8b      	ldr	r3, [pc, #556]	; (9ea4 <hci_cmd_handle+0x32c>)
    9c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9c7a:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9c7e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9c82:	4b89      	ldr	r3, [pc, #548]	; (9ea8 <hci_cmd_handle+0x330>)
    9c84:	2000      	movs	r0, #0
    9c86:	2100      	movs	r1, #0
    9c88:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9c8c:	4b87      	ldr	r3, [pc, #540]	; (9eac <hci_cmd_handle+0x334>)
    9c8e:	201f      	movs	r0, #31
    9c90:	2100      	movs	r1, #0
    9c92:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    9c96:	f007 fc5f 	bl	11558 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9c9a:	2101      	movs	r1, #1
    9c9c:	a807      	add	r0, sp, #28
    9c9e:	f7ff fdab 	bl	97f8 <cmd_complete>
	ccst->status = 0x00;
    9ca2:	2300      	movs	r3, #0
    9ca4:	e23e      	b.n	a124 <hci_cmd_handle+0x5ac>
	switch (ocf) {
    9ca6:	2a7b      	cmp	r2, #123	; 0x7b
    9ca8:	d02c      	beq.n	9d04 <hci_cmd_handle+0x18c>
    9caa:	2a7c      	cmp	r2, #124	; 0x7c
    9cac:	d041      	beq.n	9d32 <hci_cmd_handle+0x1ba>
    9cae:	2a63      	cmp	r2, #99	; 0x63
    9cb0:	d199      	bne.n	9be6 <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    9cb2:	68a0      	ldr	r0, [r4, #8]
    9cb4:	f7ff ff5c 	bl	9b70 <sys_get_le64>
    9cb8:	4b7b      	ldr	r3, [pc, #492]	; (9ea8 <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    9cba:	e9c3 0100 	strd	r0, r1, [r3]
    9cbe:	e7ec      	b.n	9c9a <hci_cmd_handle+0x122>
	event_mask = sys_get_le64(cmd->events);
    9cc0:	68a0      	ldr	r0, [r4, #8]
    9cc2:	f7ff ff55 	bl	9b70 <sys_get_le64>
    9cc6:	4b77      	ldr	r3, [pc, #476]	; (9ea4 <hci_cmd_handle+0x32c>)
    9cc8:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9ccc:	4611      	mov	r1, r2
    9cce:	a807      	add	r0, sp, #28
    9cd0:	f7ff fd92 	bl	97f8 <cmd_complete>
	ccst->status = 0x00;
    9cd4:	7005      	strb	r5, [r0, #0]
    9cd6:	e7c0      	b.n	9c5a <hci_cmd_handle+0xe2>
    9cd8:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9cda:	2104      	movs	r1, #4
    9cdc:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9cde:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    9ce0:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    9ce2:	f7ff fd89 	bl	97f8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9ce6:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9ce8:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    9cea:	1cc2      	adds	r2, r0, #3
    9cec:	4639      	mov	r1, r7
    9cee:	4630      	mov	r0, r6
    9cf0:	f007 ff8f 	bl	11c12 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    9cf4:	2800      	cmp	r0, #0
    9cf6:	bf14      	ite	ne
    9cf8:	2302      	movne	r3, #2
    9cfa:	2300      	moveq	r3, #0
    9cfc:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    9cfe:	f8a4 5001 	strh.w	r5, [r4, #1]
    9d02:	e7aa      	b.n	9c5a <hci_cmd_handle+0xe2>
	handle = sys_le16_to_cpu(cmd->handle);
    9d04:	68a3      	ldr	r3, [r4, #8]
    9d06:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    9d08:	a908      	add	r1, sp, #32
    9d0a:	b2a0      	uxth	r0, r4
    9d0c:	f007 ff8b 	bl	11c26 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    9d10:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    9d12:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9d14:	a807      	add	r0, sp, #28
    9d16:	f7ff fd6f 	bl	97f8 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9d1a:	2d00      	cmp	r5, #0
    9d1c:	bf14      	ite	ne
    9d1e:	230c      	movne	r3, #12
    9d20:	2300      	moveq	r3, #0
    9d22:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9d24:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    9d28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9d2c:	f8a0 3003 	strh.w	r3, [r0, #3]
    9d30:	e793      	b.n	9c5a <hci_cmd_handle+0xe2>
    9d32:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9d34:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    9d36:	8859      	ldrh	r1, [r3, #2]
    9d38:	b2a0      	uxth	r0, r4
    9d3a:	f007 ff88 	bl	11c4e <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    9d3e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9d40:	2103      	movs	r1, #3
    9d42:	a807      	add	r0, sp, #28
    9d44:	f7ff fd58 	bl	97f8 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9d48:	2d00      	cmp	r5, #0
    9d4a:	bf14      	ite	ne
    9d4c:	230c      	movne	r3, #12
    9d4e:	2300      	moveq	r3, #0
    9d50:	7003      	strb	r3, [r0, #0]
    9d52:	e27d      	b.n	a250 <hci_cmd_handle+0x6d8>
	switch (ocf) {
    9d54:	3a01      	subs	r2, #1
    9d56:	2a08      	cmp	r2, #8
    9d58:	f63f af45 	bhi.w	9be6 <hci_cmd_handle+0x6e>
    9d5c:	a301      	add	r3, pc, #4	; (adr r3, 9d64 <hci_cmd_handle+0x1ec>)
    9d5e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9d62:	bf00      	nop
    9d64:	00009d89 	.word	0x00009d89
    9d68:	00009db3 	.word	0x00009db3
    9d6c:	00009e67 	.word	0x00009e67
    9d70:	00009be7 	.word	0x00009be7
    9d74:	00009be7 	.word	0x00009be7
    9d78:	00009be7 	.word	0x00009be7
    9d7c:	00009be7 	.word	0x00009be7
    9d80:	00009be7 	.word	0x00009be7
    9d84:	00009eb1 	.word	0x00009eb1
	rp = cmd_complete(evt, sizeof(*rp));
    9d88:	2109      	movs	r1, #9
    9d8a:	a807      	add	r0, sp, #28
    9d8c:	f7ff fd34 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    9d90:	2300      	movs	r3, #0
    9d92:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    9d94:	7083      	strb	r3, [r0, #2]
    9d96:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    9d98:	f06f 030e 	mvn.w	r3, #14
    9d9c:	7143      	strb	r3, [r0, #5]
    9d9e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    9da0:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    9da2:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    9da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    9da8:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    9daa:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    9dac:	71c3      	strb	r3, [r0, #7]
    9dae:	7203      	strb	r3, [r0, #8]
    9db0:	e753      	b.n	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9db2:	2141      	movs	r1, #65	; 0x41
    9db4:	a807      	add	r0, sp, #28
    9db6:	f7ff fd1f 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    9dba:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9dbc:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9dbe:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9dc0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9dc4:	f7f7 ff46 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    9dc8:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    9dca:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    9dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9dd0:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    9dd2:	79a3      	ldrb	r3, [r4, #6]
    9dd4:	f063 033f 	orn	r3, r3, #63	; 0x3f
    9dd8:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    9dda:	7ae3      	ldrb	r3, [r4, #11]
    9ddc:	f043 0304 	orr.w	r3, r3, #4
    9de0:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    9de2:	7be3      	ldrb	r3, [r4, #15]
    9de4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    9de8:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    9dea:	7c23      	ldrb	r3, [r4, #16]
    9dec:	f043 0302 	orr.w	r3, r3, #2
    9df0:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    9df2:	7de3      	ldrb	r3, [r4, #23]
    9df4:	f043 0304 	orr.w	r3, r3, #4
    9df8:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    9dfa:	7ea3      	ldrb	r3, [r4, #26]
    9dfc:	f043 0317 	orr.w	r3, r3, #23
    9e00:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    9e02:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    9e04:	f043 0309 	orr.w	r3, r3, #9
    9e08:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    9e0a:	7863      	ldrb	r3, [r4, #1]
    9e0c:	f043 0320 	orr.w	r3, r3, #32
    9e10:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    9e12:	23ff      	movs	r3, #255	; 0xff
    9e14:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    9e16:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    9e1a:	f063 030f 	orn	r3, r3, #15
    9e1e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    9e22:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    9e26:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    9e2a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    9e2e:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    9e30:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    9e34:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    9e38:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    9e3c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    9e40:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    9e44:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    9e48:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9e4c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9e50:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9e54:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    9e58:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9e5c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9e60:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    9e64:	e6f9      	b.n	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9e66:	2109      	movs	r1, #9
    9e68:	a807      	add	r0, sp, #28
    9e6a:	f7ff fcc5 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    9e6e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9e70:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9e72:	2208      	movs	r2, #8
	rp->status = 0x00;
    9e74:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9e78:	f7f7 feec 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    9e7c:	2360      	movs	r3, #96	; 0x60
    9e7e:	7163      	strb	r3, [r4, #5]
    9e80:	e6eb      	b.n	9c5a <hci_cmd_handle+0xe2>
    9e82:	bf00      	nop
    9e84:	00015e19 	.word	0x00015e19
    9e88:	000171f2 	.word	0x000171f2
    9e8c:	00018fb8 	.word	0x00018fb8
    9e90:	00017241 	.word	0x00017241
    9e94:	000190fb 	.word	0x000190fb
    9e98:	2000084c 	.word	0x2000084c
    9e9c:	00019121 	.word	0x00019121
    9ea0:	20000854 	.word	0x20000854
    9ea4:	20003d50 	.word	0x20003d50
    9ea8:	200008e0 	.word	0x200008e0
    9eac:	20003d58 	.word	0x20003d58
	rp = cmd_complete(evt, sizeof(*rp));
    9eb0:	2107      	movs	r1, #7
    9eb2:	a807      	add	r0, sp, #28
    9eb4:	f7ff fca0 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    9eb8:	4601      	mov	r1, r0
    9eba:	2300      	movs	r3, #0
    9ebc:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    9ec0:	4618      	mov	r0, r3
    9ec2:	f7ff fac5 	bl	9450 <ll_addr_get>
    9ec6:	e6c8      	b.n	9c5a <hci_cmd_handle+0xe2>
	switch (ocf) {
    9ec8:	3a01      	subs	r2, #1
    9eca:	2a4d      	cmp	r2, #77	; 0x4d
    9ecc:	f63f ae8b 	bhi.w	9be6 <hci_cmd_handle+0x6e>
    9ed0:	a301      	add	r3, pc, #4	; (adr r3, 9ed8 <hci_cmd_handle+0x360>)
    9ed2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9ed6:	bf00      	nop
    9ed8:	0000a011 	.word	0x0000a011
    9edc:	0000a01b 	.word	0x0000a01b
    9ee0:	0000a033 	.word	0x0000a033
    9ee4:	00009be7 	.word	0x00009be7
    9ee8:	0000a057 	.word	0x0000a057
    9eec:	00009be7 	.word	0x00009be7
    9ef0:	00009be7 	.word	0x00009be7
    9ef4:	00009be7 	.word	0x00009be7
    9ef8:	00009be7 	.word	0x00009be7
    9efc:	00009be7 	.word	0x00009be7
    9f00:	0000a0fb 	.word	0x0000a0fb
    9f04:	0000a129 	.word	0x0000a129
    9f08:	0000a149 	.word	0x0000a149
    9f0c:	0000a173 	.word	0x0000a173
    9f10:	0000a063 	.word	0x0000a063
    9f14:	0000a079 	.word	0x0000a079
    9f18:	0000a08b 	.word	0x0000a08b
    9f1c:	0000a093 	.word	0x0000a093
    9f20:	0000a213 	.word	0x0000a213
    9f24:	0000a1d3 	.word	0x0000a1d3
    9f28:	0000a1ef 	.word	0x0000a1ef
    9f2c:	0000a209 	.word	0x0000a209
    9f30:	0000a09b 	.word	0x0000a09b
    9f34:	0000a0c1 	.word	0x0000a0c1
    9f38:	0000a1db 	.word	0x0000a1db
    9f3c:	00009be7 	.word	0x00009be7
    9f40:	00009be7 	.word	0x00009be7
    9f44:	0000a0d7 	.word	0x0000a0d7
    9f48:	00009be7 	.word	0x00009be7
    9f4c:	00009be7 	.word	0x00009be7
    9f50:	00009be7 	.word	0x00009be7
    9f54:	0000a22d 	.word	0x0000a22d
    9f58:	0000a257 	.word	0x0000a257
    9f5c:	0000a265 	.word	0x0000a265
    9f60:	0000a275 	.word	0x0000a275
    9f64:	0000a28d 	.word	0x0000a28d
    9f68:	00009be7 	.word	0x00009be7
    9f6c:	00009be7 	.word	0x00009be7
    9f70:	0000a3a5 	.word	0x0000a3a5
    9f74:	0000a3b3 	.word	0x0000a3b3
    9f78:	0000a3bb 	.word	0x0000a3bb
    9f7c:	0000a3cb 	.word	0x0000a3cb
    9f80:	0000a3dd 	.word	0x0000a3dd
    9f84:	0000a3fb 	.word	0x0000a3fb
    9f88:	0000a419 	.word	0x0000a419
    9f8c:	0000a42f 	.word	0x0000a42f
    9f90:	0000a2a9 	.word	0x0000a2a9
    9f94:	0000a2d5 	.word	0x0000a2d5
    9f98:	0000a32b 	.word	0x0000a32b
    9f9c:	0000a349 	.word	0x0000a349
    9fa0:	00009be7 	.word	0x00009be7
    9fa4:	00009be7 	.word	0x00009be7
    9fa8:	00009be7 	.word	0x00009be7
    9fac:	00009be7 	.word	0x00009be7
    9fb0:	00009be7 	.word	0x00009be7
    9fb4:	00009be7 	.word	0x00009be7
    9fb8:	00009be7 	.word	0x00009be7
    9fbc:	00009be7 	.word	0x00009be7
    9fc0:	00009be7 	.word	0x00009be7
    9fc4:	00009be7 	.word	0x00009be7
    9fc8:	00009be7 	.word	0x00009be7
    9fcc:	00009be7 	.word	0x00009be7
    9fd0:	00009be7 	.word	0x00009be7
    9fd4:	00009be7 	.word	0x00009be7
    9fd8:	00009be7 	.word	0x00009be7
    9fdc:	00009be7 	.word	0x00009be7
    9fe0:	00009be7 	.word	0x00009be7
    9fe4:	00009be7 	.word	0x00009be7
    9fe8:	00009be7 	.word	0x00009be7
    9fec:	00009be7 	.word	0x00009be7
    9ff0:	00009be7 	.word	0x00009be7
    9ff4:	00009be7 	.word	0x00009be7
    9ff8:	00009be7 	.word	0x00009be7
    9ffc:	00009be7 	.word	0x00009be7
    a000:	0000a443 	.word	0x0000a443
    a004:	00009be7 	.word	0x00009be7
    a008:	00009be7 	.word	0x00009be7
    a00c:	0000a439 	.word	0x0000a439
	le_event_mask = sys_get_le64(cmd->events);
    a010:	68a0      	ldr	r0, [r4, #8]
    a012:	f7ff fdad 	bl	9b70 <sys_get_le64>
    a016:	4baa      	ldr	r3, [pc, #680]	; (a2c0 <hci_cmd_handle+0x748>)
    a018:	e64f      	b.n	9cba <hci_cmd_handle+0x142>
	rp = cmd_complete(evt, sizeof(*rp));
    a01a:	2104      	movs	r1, #4
    a01c:	a807      	add	r0, sp, #28
    a01e:	f7ff fbeb 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a022:	2300      	movs	r3, #0
    a024:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    a026:	221b      	movs	r2, #27
    a028:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    a02a:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    a02c:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    a02e:	70c3      	strb	r3, [r0, #3]
    a030:	e613      	b.n	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a032:	2109      	movs	r1, #9
    a034:	a807      	add	r0, sp, #28
    a036:	f7ff fbdf 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a03a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    a03c:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    a03e:	2208      	movs	r2, #8
	rp->status = 0x00;
    a040:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    a044:	f7f7 fe06 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    a048:	23ff      	movs	r3, #255	; 0xff
    a04a:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    a04c:	2341      	movs	r3, #65	; 0x41
    a04e:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    a050:	2301      	movs	r3, #1
    a052:	70e3      	strb	r3, [r4, #3]
    a054:	e601      	b.n	9c5a <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    a056:	68a1      	ldr	r1, [r4, #8]
    a058:	2001      	movs	r0, #1
    a05a:	f7ff fa13 	bl	9484 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    a05e:	4604      	mov	r4, r0
    a060:	e0af      	b.n	a1c2 <hci_cmd_handle+0x64a>
	rp = cmd_complete(evt, sizeof(*rp));
    a062:	2102      	movs	r1, #2
    a064:	a807      	add	r0, sp, #28
    a066:	f7ff fbc7 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a06a:	2300      	movs	r3, #0
    a06c:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    a06e:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    a070:	f008 fd34 	bl	12adc <ll_wl_size_get>
    a074:	7060      	strb	r0, [r4, #1]
    a076:	e5f0      	b.n	9c5a <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    a078:	2101      	movs	r1, #1
    a07a:	a807      	add	r0, sp, #28
    a07c:	f7ff fbbc 	bl	97f8 <cmd_complete>
    a080:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    a082:	f008 fd2d 	bl	12ae0 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    a086:	7020      	strb	r0, [r4, #0]
    a088:	e5e7      	b.n	9c5a <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    a08a:	68a0      	ldr	r0, [r4, #8]
    a08c:	f008 fdd4 	bl	12c38 <ll_wl_add>
    a090:	e7e5      	b.n	a05e <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    a092:	68a0      	ldr	r0, [r4, #8]
    a094:	f008 fd44 	bl	12b20 <ll_wl_remove>
    a098:	e7e1      	b.n	a05e <hci_cmd_handle+0x4e6>
    a09a:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    a09c:	2300      	movs	r3, #0
    a09e:	aa08      	add	r2, sp, #32
    a0a0:	f100 0110 	add.w	r1, r0, #16
    a0a4:	f009 fa42 	bl	1352c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    a0a8:	2111      	movs	r1, #17
    a0aa:	a807      	add	r0, sp, #28
    a0ac:	f7ff fba4 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a0b0:	2300      	movs	r3, #0
    a0b2:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    a0b6:	2210      	movs	r2, #16
    a0b8:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    a0ba:	f7f7 fd9f 	bl	1bfc <memcpy>
    a0be:	e5cc      	b.n	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a0c0:	2109      	movs	r1, #9
    a0c2:	a807      	add	r0, sp, #28
    a0c4:	f7ff fb98 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a0c8:	2300      	movs	r3, #0
    a0ca:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    a0ce:	2108      	movs	r1, #8
    a0d0:	f7ff f9f8 	bl	94c4 <bt_rand>
    a0d4:	e5c1      	b.n	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a0d6:	2109      	movs	r1, #9
    a0d8:	a807      	add	r0, sp, #28
    a0da:	f7ff fb8d 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a0de:	4601      	mov	r1, r0
    a0e0:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    a0e2:	4602      	mov	r2, r0
	rp->status = 0x00;
    a0e4:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    a0e8:	4876      	ldr	r0, [pc, #472]	; (a2c4 <hci_cmd_handle+0x74c>)
    a0ea:	f7ff fb41 	bl	9770 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    a0ee:	f240 203f 	movw	r0, #575	; 0x23f
    a0f2:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    a0f4:	f7ff fb3c 	bl	9770 <sys_put_le32>
    a0f8:	e5af      	b.n	9c5a <hci_cmd_handle+0xe2>
    a0fa:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    a0fc:	7963      	ldrb	r3, [r4, #5]
    a0fe:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    a102:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a106:	7820      	ldrb	r0, [r4, #0]
    a108:	79a4      	ldrb	r4, [r4, #6]
    a10a:	9400      	str	r4, [sp, #0]
    a10c:	f008 faaa 	bl	12664 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    a110:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    a112:	2101      	movs	r1, #1
    a114:	a807      	add	r0, sp, #28
    a116:	f7ff fb6f 	bl	97f8 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    a11a:	2c00      	cmp	r4, #0
    a11c:	bf18      	it	ne
    a11e:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    a120:	bf08      	it	eq
    a122:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    a124:	7003      	strb	r3, [r0, #0]
    a126:	e598      	b.n	9c5a <hci_cmd_handle+0xe2>
    a128:	68a2      	ldr	r2, [r4, #8]
    a12a:	4b67      	ldr	r3, [pc, #412]	; (a2c8 <hci_cmd_handle+0x750>)
	if (cmd->enable && cmd->filter_dup) {
    a12c:	7810      	ldrb	r0, [r2, #0]
    a12e:	b140      	cbz	r0, a142 <hci_cmd_handle+0x5ca>
    a130:	7852      	ldrb	r2, [r2, #1]
    a132:	b132      	cbz	r2, a142 <hci_cmd_handle+0x5ca>
		dup_count = 0;
    a134:	2200      	movs	r2, #0
    a136:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    a138:	4b64      	ldr	r3, [pc, #400]	; (a2cc <hci_cmd_handle+0x754>)
		dup_count = -1;
    a13a:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    a13c:	f008 fab2 	bl	126a4 <ll_scan_enable>
    a140:	e7e6      	b.n	a110 <hci_cmd_handle+0x598>
		dup_count = -1;
    a142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a146:	e7f8      	b.n	a13a <hci_cmd_handle+0x5c2>
    a148:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    a14a:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    a14e:	7963      	ldrb	r3, [r4, #5]
    a150:	7922      	ldrb	r2, [r4, #4]
    a152:	8861      	ldrh	r1, [r4, #2]
    a154:	8820      	ldrh	r0, [r4, #0]
    a156:	9504      	str	r5, [sp, #16]
    a158:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    a15c:	9503      	str	r5, [sp, #12]
    a15e:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    a162:	9502      	str	r5, [sp, #8]
    a164:	7b25      	ldrb	r5, [r4, #12]
    a166:	9501      	str	r5, [sp, #4]
    a168:	3406      	adds	r4, #6
    a16a:	9400      	str	r4, [sp, #0]
    a16c:	f008 fad4 	bl	12718 <ll_create_connection>
    a170:	e56c      	b.n	9c4c <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    a172:	f008 f8e9 	bl	12348 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    a176:	4606      	mov	r6, r0
    a178:	bb48      	cbnz	r0, a1ce <hci_cmd_handle+0x656>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a17a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a17e:	2001      	movs	r0, #1
    a180:	f7fa f8a4 	bl	42cc <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a184:	4a52      	ldr	r2, [pc, #328]	; (a2d0 <hci_cmd_handle+0x758>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a186:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a188:	e9d2 4500 	ldrd	r4, r5, [r2]
    a18c:	2400      	movs	r4, #0
    a18e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    a192:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a196:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a198:	d004      	beq.n	a1a4 <hci_cmd_handle+0x62c>
    a19a:	4632      	mov	r2, r6
    a19c:	4631      	mov	r1, r6
    a19e:	2002      	movs	r0, #2
    a1a0:	f7ff fb9a 	bl	98d8 <le_conn_complete.part.39>
		if ((*evt)->len) {
    a1a4:	9807      	ldr	r0, [sp, #28]
    a1a6:	8984      	ldrh	r4, [r0, #12]
    a1a8:	b14c      	cbz	r4, a1be <hci_cmd_handle+0x646>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    a1aa:	2101      	movs	r1, #1
    a1ac:	a808      	add	r0, sp, #32
    a1ae:	f7ff fb23 	bl	97f8 <cmd_complete>
			ccst->status = cmd_status;
    a1b2:	2300      	movs	r3, #0
    a1b4:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    a1b6:	9808      	ldr	r0, [sp, #32]
    a1b8:	f7f9 fe52 	bl	3e60 <bt_recv_prio>
    a1bc:	e54d      	b.n	9c5a <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    a1be:	f009 ffeb 	bl	14198 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    a1c2:	2101      	movs	r1, #1
    a1c4:	a807      	add	r0, sp, #28
    a1c6:	f7ff fb17 	bl	97f8 <cmd_complete>
	ccst->status = status;
    a1ca:	7004      	strb	r4, [r0, #0]
    a1cc:	e545      	b.n	9c5a <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    a1ce:	240c      	movs	r4, #12
    a1d0:	e7f7      	b.n	a1c2 <hci_cmd_handle+0x64a>
	status = ll_chm_update(&cmd->ch_map[0]);
    a1d2:	68a0      	ldr	r0, [r4, #8]
    a1d4:	f007 fc8a 	bl	11aec <ll_chm_update>
    a1d8:	e79a      	b.n	a110 <hci_cmd_handle+0x598>
    a1da:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    a1dc:	f100 030c 	add.w	r3, r0, #12
    a1e0:	f100 020a 	add.w	r2, r0, #10
    a1e4:	1c81      	adds	r1, r0, #2
    a1e6:	8800      	ldrh	r0, [r0, #0]
    a1e8:	f007 ff34 	bl	12054 <ll_enc_req_send>
    a1ec:	e52e      	b.n	9c4c <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    a1ee:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    a1f0:	2108      	movs	r1, #8
    a1f2:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    a1f4:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    a1f6:	f7ff faff 	bl	97f8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    a1fa:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    a1fc:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    a1fe:	1cc1      	adds	r1, r0, #3
    a200:	4630      	mov	r0, r6
    a202:	f007 fcb5 	bl	11b70 <ll_chm_get>
    a206:	e575      	b.n	9cf4 <hci_cmd_handle+0x17c>
	handle = sys_le16_to_cpu(cmd->handle);
    a208:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    a20a:	8818      	ldrh	r0, [r3, #0]
    a20c:	f007 fcc5 	bl	11b9a <ll_feature_req_send>
    a210:	e51c      	b.n	9c4c <hci_cmd_handle+0xd4>
    a212:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    a214:	8911      	ldrh	r1, [r2, #8]
    a216:	8893      	ldrh	r3, [r2, #4]
    a218:	8810      	ldrh	r0, [r2, #0]
    a21a:	9101      	str	r1, [sp, #4]
    a21c:	88d2      	ldrh	r2, [r2, #6]
    a21e:	9200      	str	r2, [sp, #0]
    a220:	2200      	movs	r2, #0
    a222:	4611      	mov	r1, r2
    a224:	f007 fbea 	bl	119fc <ll_conn_update>
	*evt = cmd_status(status);
    a228:	b2c0      	uxtb	r0, r0
    a22a:	e513      	b.n	9c54 <hci_cmd_handle+0xdc>
    a22c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    a22e:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a230:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    a232:	8893      	ldrh	r3, [r2, #4]
    a234:	9101      	str	r1, [sp, #4]
    a236:	88d2      	ldrh	r2, [r2, #6]
    a238:	9200      	str	r2, [sp, #0]
    a23a:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    a23c:	2102      	movs	r1, #2
    a23e:	b2a0      	uxth	r0, r4
    a240:	f007 fbdc 	bl	119fc <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    a244:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    a246:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    a248:	a807      	add	r0, sp, #28
    a24a:	f7ff fad5 	bl	97f8 <cmd_complete>
	rp->status = status;
    a24e:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    a250:	f8a0 4001 	strh.w	r4, [r0, #1]
    a254:	e501      	b.n	9c5a <hci_cmd_handle+0xe2>
    a256:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a258:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    a25a:	789a      	ldrb	r2, [r3, #2]
    a25c:	2300      	movs	r3, #0
    a25e:	9301      	str	r3, [sp, #4]
    a260:	9300      	str	r3, [sp, #0]
    a262:	e7eb      	b.n	a23c <hci_cmd_handle+0x6c4>
    a264:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a266:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    a268:	889a      	ldrh	r2, [r3, #4]
    a26a:	8859      	ldrh	r1, [r3, #2]
    a26c:	b2a0      	uxth	r0, r4
    a26e:	f007 fd04 	bl	11c7a <ll_length_req_send>
    a272:	e564      	b.n	9d3e <hci_cmd_handle+0x1c6>
	rp = cmd_complete(evt, sizeof(*rp));
    a274:	2105      	movs	r1, #5
    a276:	a807      	add	r0, sp, #28
    a278:	f7ff fabe 	bl	97f8 <cmd_complete>
    a27c:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    a27e:	1cc1      	adds	r1, r0, #3
    a280:	3001      	adds	r0, #1
    a282:	f007 fd1d 	bl	11cc0 <ll_length_default_get>
	rp->status = 0x00;
    a286:	2300      	movs	r3, #0
    a288:	7023      	strb	r3, [r4, #0]
    a28a:	e4e6      	b.n	9c5a <hci_cmd_handle+0xe2>
    a28c:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    a28e:	8859      	ldrh	r1, [r3, #2]
    a290:	8818      	ldrh	r0, [r3, #0]
    a292:	f007 fd1f 	bl	11cd4 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    a296:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    a298:	2101      	movs	r1, #1
    a29a:	a807      	add	r0, sp, #28
    a29c:	f7ff faac 	bl	97f8 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    a2a0:	2c00      	cmp	r4, #0
    a2a2:	bf18      	it	ne
    a2a4:	231e      	movne	r3, #30
    a2a6:	e73b      	b.n	a120 <hci_cmd_handle+0x5a8>
	rp = cmd_complete(evt, sizeof(*rp));
    a2a8:	2109      	movs	r1, #9
    a2aa:	a807      	add	r0, sp, #28
    a2ac:	f7ff faa4 	bl	97f8 <cmd_complete>
    a2b0:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    a2b2:	1dc3      	adds	r3, r0, #7
    a2b4:	1d42      	adds	r2, r0, #5
    a2b6:	1cc1      	adds	r1, r0, #3
    a2b8:	3001      	adds	r0, #1
    a2ba:	f007 fd15 	bl	11ce8 <ll_length_max_get>
    a2be:	e7e2      	b.n	a286 <hci_cmd_handle+0x70e>
    a2c0:	20003d58 	.word	0x20003d58
    a2c4:	130f3370 	.word	0x130f3370
    a2c8:	20000854 	.word	0x20000854
    a2cc:	20000858 	.word	0x20000858
    a2d0:	20003d50 	.word	0x20003d50
	handle = sys_le16_to_cpu(cmd->handle);
    a2d4:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    a2d6:	2105      	movs	r1, #5
    a2d8:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    a2da:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    a2dc:	f7ff fa8c 	bl	97f8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    a2e0:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    a2e2:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    a2e4:	1d02      	adds	r2, r0, #4
    a2e6:	1cc1      	adds	r1, r0, #3
    a2e8:	4630      	mov	r0, r6
    a2ea:	f007 fd06 	bl	11cfa <ll_phy_get>
	return __builtin_ffs(op);
    a2ee:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    a2f0:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    a2f4:	2800      	cmp	r0, #0
    a2f6:	bf14      	ite	ne
    a2f8:	230c      	movne	r3, #12
    a2fa:	2300      	moveq	r3, #0
    a2fc:	7023      	strb	r3, [r4, #0]
    a2fe:	2a00      	cmp	r2, #0
    a300:	fa92 f3a2 	rbit	r3, r2
    a304:	fab3 f383 	clz	r3, r3
    a308:	7922      	ldrb	r2, [r4, #4]
    a30a:	bf08      	it	eq
    a30c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a310:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    a312:	70e3      	strb	r3, [r4, #3]
    a314:	2a00      	cmp	r2, #0
    a316:	fa92 f3a2 	rbit	r3, r2
    a31a:	fab3 f383 	clz	r3, r3
    a31e:	bf08      	it	eq
    a320:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a324:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    a326:	7123      	strb	r3, [r4, #4]
    a328:	e497      	b.n	9c5a <hci_cmd_handle+0xe2>
    a32a:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    a32c:	781a      	ldrb	r2, [r3, #0]
    a32e:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    a330:	bf44      	itt	mi
    a332:	2107      	movmi	r1, #7
    a334:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    a336:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    a338:	bf44      	itt	mi
    a33a:	2207      	movmi	r2, #7
    a33c:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    a33e:	7899      	ldrb	r1, [r3, #2]
    a340:	7858      	ldrb	r0, [r3, #1]
    a342:	f007 fcef 	bl	11d24 <ll_phy_default_set>
    a346:	e7a6      	b.n	a296 <hci_cmd_handle+0x71e>
    a348:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    a34a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    a34c:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    a34e:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    a352:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    a354:	bf44      	itt	mi
    a356:	2103      	movmi	r1, #3
    a358:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    a35a:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    a35c:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    a35e:	bf44      	itt	mi
    a360:	2203      	movmi	r2, #3
    a362:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    a364:	074d      	lsls	r5, r1, #29
    a366:	d002      	beq.n	a36e <hci_cmd_handle+0x7f6>
	    !(cmd->rx_phys & 0x07)) {
    a368:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    a36a:	075a      	lsls	r2, r3, #29
    a36c:	d105      	bne.n	a37a <hci_cmd_handle+0x802>
		ccst = cmd_complete(evt, sizeof(*ccst));
    a36e:	2101      	movs	r1, #1
    a370:	a807      	add	r0, sp, #28
    a372:	f7ff fa41 	bl	97f8 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    a376:	2312      	movs	r3, #18
    a378:	e6d4      	b.n	a124 <hci_cmd_handle+0x5ac>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    a37a:	ea41 0203 	orr.w	r2, r1, r3
    a37e:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    a382:	d005      	beq.n	a390 <hci_cmd_handle+0x818>
		ccst = cmd_complete(evt, sizeof(*ccst));
    a384:	2101      	movs	r1, #1
    a386:	a807      	add	r0, sp, #28
    a388:	f7ff fa36 	bl	97f8 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    a38c:	2311      	movs	r3, #17
    a38e:	e6c9      	b.n	a124 <hci_cmd_handle+0x5ac>
	if (phy_opts & 0x03) {
    a390:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    a394:	bf1c      	itt	ne
    a396:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    a39a:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    a39e:	f007 fccb 	bl	11d38 <ll_phy_req_send>
    a3a2:	e453      	b.n	9c4c <hci_cmd_handle+0xd4>
    a3a4:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    a3a6:	f100 0217 	add.w	r2, r0, #23
    a3aa:	1dc1      	adds	r1, r0, #7
    a3ac:	f008 fe4e 	bl	1304c <ll_rl_add>
    a3b0:	e655      	b.n	a05e <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    a3b2:	68a0      	ldr	r0, [r4, #8]
    a3b4:	f008 feec 	bl	13190 <ll_rl_remove>
    a3b8:	e651      	b.n	a05e <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    a3ba:	2101      	movs	r1, #1
    a3bc:	a807      	add	r0, sp, #28
    a3be:	f7ff fa1b 	bl	97f8 <cmd_complete>
    a3c2:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    a3c4:	f008 fe28 	bl	13018 <ll_rl_clear>
    a3c8:	e65d      	b.n	a086 <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    a3ca:	2102      	movs	r1, #2
    a3cc:	a807      	add	r0, sp, #28
    a3ce:	f7ff fa13 	bl	97f8 <cmd_complete>
    a3d2:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    a3d4:	f008 fe1e 	bl	13014 <ll_rl_size_get>
    a3d8:	7060      	strb	r0, [r4, #1]
    a3da:	e754      	b.n	a286 <hci_cmd_handle+0x70e>
    a3dc:	2207      	movs	r2, #7
    a3de:	68a1      	ldr	r1, [r4, #8]
    a3e0:	a808      	add	r0, sp, #32
    a3e2:	f7f7 fc0b 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    a3e6:	2107      	movs	r1, #7
    a3e8:	a807      	add	r0, sp, #28
    a3ea:	f7ff fa05 	bl	97f8 <cmd_complete>
    a3ee:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    a3f0:	1c41      	adds	r1, r0, #1
    a3f2:	a808      	add	r0, sp, #32
    a3f4:	f008 ff5a 	bl	132ac <ll_rl_crpa_get>
    a3f8:	e645      	b.n	a086 <hci_cmd_handle+0x50e>
    a3fa:	2207      	movs	r2, #7
    a3fc:	68a1      	ldr	r1, [r4, #8]
    a3fe:	a808      	add	r0, sp, #32
    a400:	f7f7 fbfc 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    a404:	2107      	movs	r1, #7
    a406:	a807      	add	r0, sp, #28
    a408:	f7ff f9f6 	bl	97f8 <cmd_complete>
    a40c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    a40e:	1c41      	adds	r1, r0, #1
    a410:	a808      	add	r0, sp, #32
    a412:	f008 ff6b 	bl	132ec <ll_rl_lrpa_get>
    a416:	e636      	b.n	a086 <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    a418:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    a41a:	2101      	movs	r1, #1
    a41c:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    a41e:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    a420:	f7ff f9ea 	bl	97f8 <cmd_complete>
    a424:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    a426:	4628      	mov	r0, r5
    a428:	f008 ff78 	bl	1331c <ll_rl_enable>
    a42c:	e62b      	b.n	a086 <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    a42e:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    a430:	8818      	ldrh	r0, [r3, #0]
    a432:	f008 ff85 	bl	13340 <ll_rl_timeout_set>
    a436:	e430      	b.n	9c9a <hci_cmd_handle+0x122>
    a438:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    a43a:	79c1      	ldrb	r1, [r0, #7]
    a43c:	f008 ff88 	bl	13350 <ll_priv_mode_set>
    a440:	e60d      	b.n	a05e <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    a442:	2103      	movs	r1, #3
    a444:	a807      	add	r0, sp, #28
    a446:	f7ff f9d7 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a44a:	4601      	mov	r1, r0
    a44c:	2300      	movs	r3, #0
    a44e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    a452:	3001      	adds	r0, #1
    a454:	f7ff f832 	bl	94bc <ll_tx_pwr_get>
    a458:	f7ff bbff 	b.w	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a45c:	210d      	movs	r1, #13
    a45e:	a807      	add	r0, sp, #28
    a460:	f7ff f9ca 	bl	97f8 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    a464:	2202      	movs	r2, #2
    a466:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    a468:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    a46a:	2201      	movs	r2, #1
    a46c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    a46e:	220c      	movs	r2, #12
	rp->status = 0x00;
    a470:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    a472:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    a474:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    a476:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    a478:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    a47a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    a47c:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    a47e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    a480:	7242      	strb	r2, [r0, #9]
    a482:	7283      	strb	r3, [r0, #10]
    a484:	72c3      	strb	r3, [r0, #11]
    a486:	7303      	strb	r3, [r0, #12]
    a488:	f7ff bbe7 	b.w	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a48c:	2141      	movs	r1, #65	; 0x41
    a48e:	a807      	add	r0, sp, #28
    a490:	f7ff f9b2 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a494:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    a496:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    a498:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    a49a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    a49e:	f7f7 fbd9 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    a4a2:	7863      	ldrb	r3, [r4, #1]
    a4a4:	f063 0358 	orn	r3, r3, #88	; 0x58
    a4a8:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    a4aa:	78a3      	ldrb	r3, [r4, #2]
    a4ac:	f043 0303 	orr.w	r3, r3, #3
    a4b0:	70a3      	strb	r3, [r4, #2]
    a4b2:	f7ff bbd2 	b.w	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a4b6:	2109      	movs	r1, #9
    a4b8:	a807      	add	r0, sp, #28
    a4ba:	f7ff f99d 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a4be:	2100      	movs	r1, #0
    a4c0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    a4c4:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    a4c6:	f7f7 fbc5 	bl	1c54 <memset>
    a4ca:	f7ff bbc6 	b.w	9c5a <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    a4ce:	4b5c      	ldr	r3, [pc, #368]	; (a640 <hci_cmd_handle+0xac8>)
    a4d0:	aa08      	add	r2, sp, #32
    a4d2:	f103 0628 	add.w	r6, r3, #40	; 0x28
    a4d6:	4615      	mov	r5, r2
    a4d8:	6818      	ldr	r0, [r3, #0]
    a4da:	6859      	ldr	r1, [r3, #4]
    a4dc:	4614      	mov	r4, r2
    a4de:	c403      	stmia	r4!, {r0, r1}
    a4e0:	3308      	adds	r3, #8
    a4e2:	42b3      	cmp	r3, r6
    a4e4:	4622      	mov	r2, r4
    a4e6:	d1f7      	bne.n	a4d8 <hci_cmd_handle+0x960>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    a4e8:	2129      	movs	r1, #41	; 0x29
    a4ea:	a807      	add	r0, sp, #28
    a4ec:	f7ff f984 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a4f0:	2300      	movs	r3, #0
    a4f2:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    a4f6:	2228      	movs	r2, #40	; 0x28
    a4f8:	4629      	mov	r1, r5
    a4fa:	e5de      	b.n	a0ba <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    a4fc:	68a1      	ldr	r1, [r4, #8]
    a4fe:	2000      	movs	r0, #0
    a500:	f7fe ffc0 	bl	9484 <ll_addr_set>
    a504:	f7ff bbc9 	b.w	9c9a <hci_cmd_handle+0x122>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a50c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    a510:	3201      	adds	r2, #1
    a512:	d106      	bne.n	a522 <hci_cmd_handle+0x9aa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a514:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a518:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a51c:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a51e:	4293      	cmp	r3, r2
    a520:	d020      	beq.n	a564 <hci_cmd_handle+0x9ec>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    a522:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    a526:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a52a:	07db      	lsls	r3, r3, #31
    a52c:	d51a      	bpl.n	a564 <hci_cmd_handle+0x9ec>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    a52e:	2118      	movs	r1, #24
    a530:	a807      	add	r0, sp, #28
    a532:	f7ff f961 	bl	97f8 <cmd_complete>
		rp->status = 0x00;
    a536:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    a538:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    a53a:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    a53c:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    a53e:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    a540:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    a544:	1ca1      	adds	r1, r4, #2
    a546:	f7ff f913 	bl	9770 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    a54a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    a54e:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    a550:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    a554:	f063 033f 	orn	r3, r3, #63	; 0x3f
    a558:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    a55a:	2210      	movs	r2, #16
    a55c:	4631      	mov	r1, r6
    a55e:	f104 0008 	add.w	r0, r4, #8
    a562:	e7b0      	b.n	a4c6 <hci_cmd_handle+0x94e>
	rp = cmd_complete(evt, sizeof(*rp));
    a564:	2102      	movs	r1, #2
    a566:	a807      	add	r0, sp, #28
    a568:	f7ff f946 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a56c:	2300      	movs	r3, #0
    a56e:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    a570:	7043      	strb	r3, [r0, #1]
    a572:	f7ff bb72 	b.w	9c5a <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a576:	2121      	movs	r1, #33	; 0x21
    a578:	a807      	add	r0, sp, #28
    a57a:	f7ff f93d 	bl	97f8 <cmd_complete>
	rp->status = 0x00;
    a57e:	4603      	mov	r3, r0
    a580:	2200      	movs	r2, #0
    a582:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    a58a:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a58c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    a590:	3101      	adds	r1, #1
    a592:	d04b      	beq.n	a62c <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    a594:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a598:	3101      	adds	r1, #1
    a59a:	d047      	beq.n	a62c <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    a59c:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    a5a0:	3101      	adds	r1, #1
    a5a2:	d043      	beq.n	a62c <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    a5a4:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    a5a8:	3101      	adds	r1, #1
    a5aa:	d03f      	beq.n	a62c <hci_cmd_handle+0xab4>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    a5ac:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    a5b0:	4619      	mov	r1, r3
    a5b2:	f7ff f8dd 	bl	9770 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    a5b6:	1d61      	adds	r1, r4, #5
    a5b8:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    a5bc:	f7ff f8d8 	bl	9770 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    a5c0:	f104 0109 	add.w	r1, r4, #9
    a5c4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    a5c8:	f7ff f8d2 	bl	9770 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    a5cc:	f104 010d 	add.w	r1, r4, #13
    a5d0:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    a5d4:	f7ff f8cc 	bl	9770 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    a5d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a5dc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    a5e0:	3301      	adds	r3, #1
    a5e2:	f104 0311 	add.w	r3, r4, #17
    a5e6:	d027      	beq.n	a638 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    a5e8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    a5ec:	3101      	adds	r1, #1
    a5ee:	d023      	beq.n	a638 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    a5f0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    a5f4:	3101      	adds	r1, #1
    a5f6:	d01f      	beq.n	a638 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    a5f8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    a5fc:	3101      	adds	r1, #1
    a5fe:	d01b      	beq.n	a638 <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    a600:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    a604:	4619      	mov	r1, r3
    a606:	f7ff f8b3 	bl	9770 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    a60a:	f104 0115 	add.w	r1, r4, #21
    a60e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    a612:	f7ff f8ad 	bl	9770 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    a616:	f104 0119 	add.w	r1, r4, #25
    a61a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    a61e:	f7ff f8a7 	bl	9770 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    a622:	f104 011d 	add.w	r1, r4, #29
    a626:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    a62a:	e563      	b.n	a0f4 <hci_cmd_handle+0x57c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    a62c:	2210      	movs	r2, #16
    a62e:	2100      	movs	r1, #0
    a630:	4618      	mov	r0, r3
    a632:	f7f7 fb0f 	bl	1c54 <memset>
    a636:	e7cf      	b.n	a5d8 <hci_cmd_handle+0xa60>
		memset(rp->er, 0x00, sizeof(rp->er));
    a638:	2210      	movs	r2, #16
    a63a:	2100      	movs	r1, #0
    a63c:	4618      	mov	r0, r3
    a63e:	e742      	b.n	a4c6 <hci_cmd_handle+0x94e>
    a640:	0001914f 	.word	0x0001914f

0000a644 <hci_acl_handle>:
{
    a644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    a648:	2300      	movs	r3, #0
    a64a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    a64c:	8983      	ldrh	r3, [r0, #12]
    a64e:	2b03      	cmp	r3, #3
{
    a650:	4606      	mov	r6, r0
    a652:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    a654:	d80d      	bhi.n	a672 <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    a656:	4b3a      	ldr	r3, [pc, #232]	; (a740 <hci_acl_handle+0xfc>)
    a658:	9301      	str	r3, [sp, #4]
    a65a:	9300      	str	r3, [sp, #0]
    a65c:	4a39      	ldr	r2, [pc, #228]	; (a744 <hci_acl_handle+0x100>)
    a65e:	4b3a      	ldr	r3, [pc, #232]	; (a748 <hci_acl_handle+0x104>)
    a660:	493a      	ldr	r1, [pc, #232]	; (a74c <hci_acl_handle+0x108>)
    a662:	483b      	ldr	r0, [pc, #236]	; (a750 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    a664:	f7f6 fc92 	bl	f8c <printk>
		return -EINVAL;
    a668:	f06f 0015 	mvn.w	r0, #21
}
    a66c:	b003      	add	sp, #12
    a66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    a672:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    a676:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    a678:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    a67a:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    a67c:	f009 fddd 	bl	1423a <net_buf_simple_pull>
	if (buf->len < len) {
    a680:	89b3      	ldrh	r3, [r6, #12]
    a682:	42bb      	cmp	r3, r7
    a684:	d207      	bcs.n	a696 <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    a686:	4b2e      	ldr	r3, [pc, #184]	; (a740 <hci_acl_handle+0xfc>)
    a688:	9301      	str	r3, [sp, #4]
    a68a:	9300      	str	r3, [sp, #0]
    a68c:	4a2d      	ldr	r2, [pc, #180]	; (a744 <hci_acl_handle+0x100>)
    a68e:	4b2e      	ldr	r3, [pc, #184]	; (a748 <hci_acl_handle+0x104>)
    a690:	492e      	ldr	r1, [pc, #184]	; (a74c <hci_acl_handle+0x108>)
    a692:	4830      	ldr	r0, [pc, #192]	; (a754 <hci_acl_handle+0x110>)
    a694:	e7e6      	b.n	a664 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    a696:	f007 fc59 	bl	11f4c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    a69a:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    a69e:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    a6a0:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    a6a4:	bb30      	cbnz	r0, a6f4 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    a6a6:	4b26      	ldr	r3, [pc, #152]	; (a740 <hci_acl_handle+0xfc>)
    a6a8:	9301      	str	r3, [sp, #4]
    a6aa:	9300      	str	r3, [sp, #0]
    a6ac:	4a25      	ldr	r2, [pc, #148]	; (a744 <hci_acl_handle+0x100>)
    a6ae:	4b26      	ldr	r3, [pc, #152]	; (a748 <hci_acl_handle+0x104>)
    a6b0:	4926      	ldr	r1, [pc, #152]	; (a74c <hci_acl_handle+0x108>)
    a6b2:	4829      	ldr	r0, [pc, #164]	; (a758 <hci_acl_handle+0x114>)
    a6b4:	f7f6 fc6a 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    a6b8:	4b28      	ldr	r3, [pc, #160]	; (a75c <hci_acl_handle+0x118>)
    a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6be:	2300      	movs	r3, #0
    a6c0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    a6c4:	4313      	orrs	r3, r2
    a6c6:	d012      	beq.n	a6ee <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a6c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a6cc:	2001      	movs	r0, #1
    a6ce:	f7f9 fdfd 	bl	42cc <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    a6d2:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a6d4:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    a6d8:	211a      	movs	r1, #26
    a6da:	f7ff f852 	bl	9782 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    a6de:	f8d8 0000 	ldr.w	r0, [r8]
    a6e2:	2101      	movs	r1, #1
    a6e4:	3008      	adds	r0, #8
    a6e6:	f009 fd89 	bl	141fc <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    a6ea:	2301      	movs	r3, #1
    a6ec:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    a6ee:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a6f2:	e7bb      	b.n	a66c <hci_acl_handle+0x28>
    a6f4:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    a6f6:	f1b9 0f00 	cmp.w	r9, #0
    a6fa:	d002      	beq.n	a702 <hci_acl_handle+0xbe>
    a6fc:	f1b9 0f02 	cmp.w	r9, #2
    a700:	d11c      	bne.n	a73c <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    a702:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    a704:	f362 0301 	bfi	r3, r2, #0, #2
    a708:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    a70a:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    a70c:	68b1      	ldr	r1, [r6, #8]
    a70e:	463a      	mov	r2, r7
    a710:	1de0      	adds	r0, r4, #7
    a712:	f7f7 fa73 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    a716:	4621      	mov	r1, r4
    a718:	4628      	mov	r0, r5
    a71a:	f007 fc23 	bl	11f64 <ll_tx_mem_enqueue>
    a71e:	2800      	cmp	r0, #0
    a720:	d0a4      	beq.n	a66c <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    a722:	4b07      	ldr	r3, [pc, #28]	; (a740 <hci_acl_handle+0xfc>)
    a724:	9301      	str	r3, [sp, #4]
    a726:	9300      	str	r3, [sp, #0]
    a728:	4a06      	ldr	r2, [pc, #24]	; (a744 <hci_acl_handle+0x100>)
    a72a:	4b07      	ldr	r3, [pc, #28]	; (a748 <hci_acl_handle+0x104>)
    a72c:	4907      	ldr	r1, [pc, #28]	; (a74c <hci_acl_handle+0x108>)
    a72e:	480c      	ldr	r0, [pc, #48]	; (a760 <hci_acl_handle+0x11c>)
    a730:	f7f6 fc2c 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    a734:	4620      	mov	r0, r4
    a736:	f007 fc0f 	bl	11f58 <ll_tx_mem_release>
    a73a:	e795      	b.n	a668 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    a73c:	2201      	movs	r2, #1
    a73e:	e7e1      	b.n	a704 <hci_acl_handle+0xc0>
    a740:	00015e19 	.word	0x00015e19
    a744:	000171f2 	.word	0x000171f2
    a748:	00018fc7 	.word	0x00018fc7
    a74c:	00017241 	.word	0x00017241
    a750:	00019065 	.word	0x00019065
    a754:	00019087 	.word	0x00019087
    a758:	000190b5 	.word	0x000190b5
    a75c:	20003d50 	.word	0x20003d50
    a760:	000190d8 	.word	0x000190d8

0000a764 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    a764:	7a03      	ldrb	r3, [r0, #8]
    a766:	f003 0303 	and.w	r3, r3, #3
    a76a:	3b01      	subs	r3, #1
    a76c:	2b01      	cmp	r3, #1
{
    a76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a770:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    a772:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    a774:	d81c      	bhi.n	a7b0 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    a776:	f101 0608 	add.w	r6, r1, #8
    a77a:	4630      	mov	r0, r6
    a77c:	2104      	movs	r1, #4
    a77e:	f009 fd3d 	bl	141fc <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    a782:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    a784:	7a61      	ldrb	r1, [r4, #9]
    a786:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    a788:	f003 0303 	and.w	r3, r3, #3
    a78c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    a78e:	bf0c      	ite	eq
    a790:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    a794:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    a798:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    a79a:	4630      	mov	r0, r6
    a79c:	f009 fd2e 	bl	141fc <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    a7a0:	7a62      	ldrb	r2, [r4, #9]
    a7a2:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    a7a6:	b002      	add	sp, #8
    a7a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    a7ac:	f7f7 ba26 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    a7b0:	4b07      	ldr	r3, [pc, #28]	; (a7d0 <hci_acl_encode+0x6c>)
    a7b2:	9301      	str	r3, [sp, #4]
    a7b4:	9300      	str	r3, [sp, #0]
    a7b6:	4a07      	ldr	r2, [pc, #28]	; (a7d4 <hci_acl_encode+0x70>)
    a7b8:	4b07      	ldr	r3, [pc, #28]	; (a7d8 <hci_acl_encode+0x74>)
    a7ba:	4908      	ldr	r1, [pc, #32]	; (a7dc <hci_acl_encode+0x78>)
    a7bc:	4808      	ldr	r0, [pc, #32]	; (a7e0 <hci_acl_encode+0x7c>)
    a7be:	f7f6 fbe5 	bl	f8c <printk>
    a7c2:	4040      	eors	r0, r0
    a7c4:	f380 8811 	msr	BASEPRI, r0
    a7c8:	f04f 0004 	mov.w	r0, #4
    a7cc:	df02      	svc	2
    a7ce:	bf00      	nop
    a7d0:	00015e19 	.word	0x00015e19
    a7d4:	000171f2 	.word	0x000171f2
    a7d8:	00019056 	.word	0x00019056
    a7dc:	00017241 	.word	0x00017241
    a7e0:	00017166 	.word	0x00017166

0000a7e4 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a7e8:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    a7ea:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a7ec:	2b01      	cmp	r3, #1
{
    a7ee:	b093      	sub	sp, #76	; 0x4c
    a7f0:	4604      	mov	r4, r0
    a7f2:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    a7f4:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a7f8:	f000 82a6 	beq.w	ad48 <hci_evt_encode+0x564>
	switch (node_rx->hdr.type) {
    a7fc:	3b02      	subs	r3, #2
    a7fe:	2b0a      	cmp	r3, #10
    a800:	f200 829a 	bhi.w	ad38 <hci_evt_encode+0x554>
    a804:	e8df f013 	tbh	[pc, r3, lsl #1]
    a808:	0134000b 	.word	0x0134000b
    a80c:	013c013a 	.word	0x013c013a
    a810:	01ba0183 	.word	0x01ba0183
    a814:	01fd01d8 	.word	0x01fd01d8
    a818:	022a0215 	.word	0x022a0215
    a81c:	0245      	.short	0x0245
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a81e:	2301      	movs	r3, #1
    a820:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    a824:	2303      	movs	r3, #3
    a826:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    a82a:	23ff      	movs	r3, #255	; 0xff
    a82c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    a830:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    a834:	2302      	movs	r3, #2
    a836:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a83a:	7a43      	ldrb	r3, [r0, #9]
    a83c:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a83e:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a840:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    a844:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a846:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    a84a:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    a84c:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a84e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    a852:	d505      	bpl.n	a860 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    a854:	f104 030a 	add.w	r3, r4, #10
    a858:	464a      	mov	r2, r9
    a85a:	4608      	mov	r0, r1
    a85c:	f008 fd04 	bl	13268 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    a860:	4bb8      	ldr	r3, [pc, #736]	; (ab44 <hci_evt_encode+0x360>)
    a862:	e9d3 2300 	ldrd	r2, r3, [r3]
    a866:	2200      	movs	r2, #0
    a868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a86c:	4313      	orrs	r3, r2
    a86e:	f000 80b9 	beq.w	a9e4 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a872:	7a63      	ldrb	r3, [r4, #9]
    a874:	4423      	add	r3, r4
    a876:	f893 a00c 	ldrb.w	sl, [r3, #12]
    a87a:	4bb3      	ldr	r3, [pc, #716]	; (ab48 <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a880:	f1ba 0f00 	cmp.w	sl, #0
    a884:	d13d      	bne.n	a902 <hci_evt_encode+0x11e>
    a886:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    a88a:	2300      	movs	r3, #0
    a88c:	4313      	orrs	r3, r2
    a88e:	f000 80a9 	beq.w	a9e4 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    a892:	4bae      	ldr	r3, [pc, #696]	; (ab4c <hci_evt_encode+0x368>)
    a894:	681a      	ldr	r2, [r3, #0]
    a896:	2a00      	cmp	r2, #0
    a898:	4698      	mov	r8, r3
    a89a:	db54      	blt.n	a946 <hci_evt_encode+0x162>
    a89c:	f8df b2d8 	ldr.w	fp, [pc, #728]	; ab78 <hci_evt_encode+0x394>
    a8a0:	2600      	movs	r6, #0
    a8a2:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    a8a6:	f8d8 2000 	ldr.w	r2, [r8]
    a8aa:	4296      	cmp	r6, r2
    a8ac:	db2c      	blt.n	a908 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    a8ae:	4ea8      	ldr	r6, [pc, #672]	; (ab50 <hci_evt_encode+0x36c>)
    a8b0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; ab54 <hci_evt_encode+0x370>
    a8b4:	6830      	ldr	r0, [r6, #0]
    a8b6:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    a8ba:	4619      	mov	r1, r3
    a8bc:	2206      	movs	r2, #6
    a8be:	3002      	adds	r0, #2
    a8c0:	f7f7 f99c 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    a8c4:	6832      	ldr	r2, [r6, #0]
    a8c6:	7a23      	ldrb	r3, [r4, #8]
    a8c8:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    a8cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a8d0:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    a8d2:	7a23      	ldrb	r3, [r4, #8]
    a8d4:	f003 010f 	and.w	r1, r3, #15
    a8d8:	2301      	movs	r3, #1
    a8da:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a8dc:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    a8e0:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a8e4:	290f      	cmp	r1, #15
			dup_count++;
    a8e6:	bfd5      	itete	le
    a8e8:	3101      	addle	r1, #1
			dup_curr++;
    a8ea:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    a8ec:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    a8ee:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a8f0:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    a8f2:	bfd8      	it	le
    a8f4:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a8f8:	2a10      	cmp	r2, #16
    a8fa:	d124      	bne.n	a946 <hci_evt_encode+0x162>
			dup_curr = 0;
    a8fc:	2200      	movs	r2, #0
    a8fe:	6032      	str	r2, [r6, #0]
    a900:	e021      	b.n	a946 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    a902:	f002 020b 	and.w	r2, r2, #11
    a906:	e7c0      	b.n	a88a <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    a908:	4618      	mov	r0, r3
    a90a:	2206      	movs	r2, #6
    a90c:	4659      	mov	r1, fp
    a90e:	9307      	str	r3, [sp, #28]
    a910:	f7f7 f95f 	bl	1bd2 <memcmp>
    a914:	9b07      	ldr	r3, [sp, #28]
    a916:	bb00      	cbnz	r0, a95a <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    a918:	7a21      	ldrb	r1, [r4, #8]
    a91a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    a91e:	460a      	mov	r2, r1
    a920:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    a924:	4281      	cmp	r1, r0
    a926:	d118      	bne.n	a95a <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    a928:	488a      	ldr	r0, [pc, #552]	; (ab54 <hci_evt_encode+0x370>)
    a92a:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    a92e:	f002 020f 	and.w	r2, r2, #15
    a932:	fa23 f102 	lsr.w	r1, r3, r2
    a936:	07c9      	lsls	r1, r1, #31
    a938:	d454      	bmi.n	a9e4 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    a93a:	2101      	movs	r1, #1
    a93c:	fa01 f202 	lsl.w	r2, r1, r2
    a940:	4313      	orrs	r3, r2
    a942:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    a946:	f894 b008 	ldrb.w	fp, [r4, #8]
    a94a:	7a63      	ldrb	r3, [r4, #9]
    a94c:	f00b 0b0f 	and.w	fp, fp, #15
    a950:	f1bb 0f01 	cmp.w	fp, #1
    a954:	d105      	bne.n	a962 <hci_evt_encode+0x17e>
		data_len = 0;
    a956:	2600      	movs	r6, #0
    a958:	e005      	b.n	a966 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    a95a:	3601      	adds	r6, #1
    a95c:	f10b 0b08 	add.w	fp, fp, #8
    a960:	e7a1      	b.n	a8a6 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    a962:	1f9e      	subs	r6, r3, #6
    a964:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a966:	4423      	add	r3, r4
    a968:	f893 800a 	ldrb.w	r8, [r3, #10]
    a96c:	f1c8 0800 	rsb	r8, r8, #0
    a970:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    a974:	f1ba 0f00 	cmp.w	sl, #0
    a978:	d041      	beq.n	a9fe <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    a97a:	f1bb 0f01 	cmp.w	fp, #1
    a97e:	d00e      	beq.n	a99e <hci_evt_encode+0x1ba>
    a980:	4b75      	ldr	r3, [pc, #468]	; (ab58 <hci_evt_encode+0x374>)
    a982:	9301      	str	r3, [sp, #4]
    a984:	9300      	str	r3, [sp, #0]
    a986:	4a75      	ldr	r2, [pc, #468]	; (ab5c <hci_evt_encode+0x378>)
    a988:	4b75      	ldr	r3, [pc, #468]	; (ab60 <hci_evt_encode+0x37c>)
    a98a:	4976      	ldr	r1, [pc, #472]	; (ab64 <hci_evt_encode+0x380>)
    a98c:	4876      	ldr	r0, [pc, #472]	; (ab68 <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    a98e:	f7f6 fafd 	bl	f8c <printk>
    a992:	4040      	eors	r0, r0
    a994:	f380 8811 	msr	BASEPRI, r0
    a998:	f04f 0004 	mov.w	r0, #4
    a99c:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    a99e:	2211      	movs	r2, #17
    a9a0:	210b      	movs	r1, #11
    a9a2:	4628      	mov	r0, r5
    a9a4:	f7fe ff12 	bl	97cc <meta_evt>
		drp->num_reports = 1;
    a9a8:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    a9ac:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    a9b0:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    a9b2:	f008 fb2f 	bl	13014 <ll_rl_size_get>
    a9b6:	4581      	cmp	r9, r0
    a9b8:	f105 0003 	add.w	r0, r5, #3
    a9bc:	d215      	bcs.n	a9ea <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    a9be:	4602      	mov	r2, r0
    a9c0:	1ca9      	adds	r1, r5, #2
    a9c2:	4648      	mov	r0, r9
    a9c4:	f008 f9c4 	bl	12d50 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    a9c8:	78ab      	ldrb	r3, [r5, #2]
    a9ca:	3302      	adds	r3, #2
    a9cc:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    a9ce:	2301      	movs	r3, #1
    a9d0:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    a9d2:	2206      	movs	r2, #6
    a9d4:	f107 0108 	add.w	r1, r7, #8
    a9d8:	f105 000a 	add.w	r0, r5, #10
    a9dc:	f7f7 f90e 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    a9e0:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    a9e4:	b013      	add	sp, #76	; 0x4c
    a9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    a9ea:	7a23      	ldrb	r3, [r4, #8]
    a9ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a9f0:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    a9f2:	2206      	movs	r2, #6
    a9f4:	f104 010a 	add.w	r1, r4, #10
    a9f8:	f7f7 f900 	bl	1bfc <memcpy>
    a9fc:	e7e7      	b.n	a9ce <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    a9fe:	f106 020b 	add.w	r2, r6, #11
    aa02:	b2d2      	uxtb	r2, r2
    aa04:	2102      	movs	r1, #2
    aa06:	4628      	mov	r0, r5
    aa08:	f7fe fee0 	bl	97cc <meta_evt>
	sep->num_reports = 1;
    aa0c:	2301      	movs	r3, #1
    aa0e:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    aa10:	7a23      	ldrb	r3, [r4, #8]
    aa12:	aa12      	add	r2, sp, #72	; 0x48
    aa14:	f003 030f 	and.w	r3, r3, #15
    aa18:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    aa1a:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    aa1c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    aa20:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    aa22:	7a63      	ldrb	r3, [r4, #9]
    aa24:	4423      	add	r3, r4
    aa26:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    aa2a:	f008 faf3 	bl	13014 <ll_rl_size_get>
    aa2e:	4581      	cmp	r9, r0
    aa30:	f105 0003 	add.w	r0, r5, #3
    aa34:	d212      	bcs.n	aa5c <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    aa36:	4602      	mov	r2, r0
    aa38:	1ca9      	adds	r1, r5, #2
    aa3a:	4648      	mov	r0, r9
    aa3c:	f008 f988 	bl	12d50 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    aa40:	78ab      	ldrb	r3, [r5, #2]
    aa42:	3302      	adds	r3, #2
    aa44:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    aa46:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    aa48:	350a      	adds	r5, #10
    aa4a:	4632      	mov	r2, r6
    aa4c:	f107 0108 	add.w	r1, r7, #8
    aa50:	4628      	mov	r0, r5
    aa52:	f7f7 f8d3 	bl	1bfc <memcpy>
	*prssi = rssi;
    aa56:	f805 8006 	strb.w	r8, [r5, r6]
    aa5a:	e7c3      	b.n	a9e4 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    aa5c:	7a23      	ldrb	r3, [r4, #8]
    aa5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    aa62:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    aa64:	2206      	movs	r2, #6
    aa66:	f104 010a 	add.w	r1, r4, #10
    aa6a:	f7f7 f8c7 	bl	1bfc <memcpy>
    aa6e:	e7ea      	b.n	aa46 <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    aa70:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    aa72:	4621      	mov	r1, r4
    aa74:	4638      	mov	r0, r7
    aa76:	f7ff f801 	bl	9a7c <le_adv_ext_report.isra.66>
    aa7a:	e7b3      	b.n	a9e4 <hci_evt_encode+0x200>
    aa7c:	2204      	movs	r2, #4
    aa7e:	e7f8      	b.n	aa72 <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aa80:	4b30      	ldr	r3, [pc, #192]	; (ab44 <hci_evt_encode+0x360>)
    aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa86:	2200      	movs	r2, #0
    aa88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    aa8c:	4313      	orrs	r3, r2
    aa8e:	f100 060a 	add.w	r6, r0, #10
    aa92:	d007      	beq.n	aaa4 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    aa94:	4b2c      	ldr	r3, [pc, #176]	; (ab48 <hci_evt_encode+0x364>)
    aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa9a:	2300      	movs	r3, #0
    aa9c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aaa0:	4313      	orrs	r3, r2
    aaa2:	d123      	bne.n	aaec <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    aaa4:	7a23      	ldrb	r3, [r4, #8]
    aaa6:	ad12      	add	r5, sp, #72	; 0x48
    aaa8:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    aaac:	2206      	movs	r2, #6
    aaae:	4631      	mov	r1, r6
    aab0:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    aab4:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    aab8:	f7f7 f8a0 	bl	1bfc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    aabc:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    aabe:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    aac0:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    aac2:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    aac4:	4631      	mov	r1, r6
    aac6:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    aac8:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    aaca:	f7fe ff9b 	bl	9a04 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    aace:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    aad0:	4b21      	ldr	r3, [pc, #132]	; (ab58 <hci_evt_encode+0x374>)
    aad2:	9304      	str	r3, [sp, #16]
    aad4:	2200      	movs	r2, #0
    aad6:	9201      	str	r2, [sp, #4]
    aad8:	9300      	str	r3, [sp, #0]
    aada:	9403      	str	r4, [sp, #12]
    aadc:	9602      	str	r6, [sp, #8]
    aade:	4b23      	ldr	r3, [pc, #140]	; (ab6c <hci_evt_encode+0x388>)
    aae0:	4a23      	ldr	r2, [pc, #140]	; (ab70 <hci_evt_encode+0x38c>)
    aae2:	4920      	ldr	r1, [pc, #128]	; (ab64 <hci_evt_encode+0x380>)
    aae4:	4823      	ldr	r0, [pc, #140]	; (ab74 <hci_evt_encode+0x390>)
    aae6:	f7f6 fa51 	bl	f8c <printk>
    aaea:	e77b      	b.n	a9e4 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    aaec:	2208      	movs	r2, #8
    aaee:	2113      	movs	r1, #19
    aaf0:	4628      	mov	r0, r5
    aaf2:	f7fe fe6b 	bl	97cc <meta_evt>
	sep->handle = 0;
    aaf6:	2300      	movs	r3, #0
    aaf8:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    aafa:	7a23      	ldrb	r3, [r4, #8]
    aafc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ab00:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    ab02:	2206      	movs	r2, #6
    ab04:	4631      	mov	r1, r6
    ab06:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    ab08:	f7f7 f878 	bl	1bfc <memcpy>
    ab0c:	e76a      	b.n	a9e4 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    ab0e:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    ab10:	b93f      	cbnz	r7, ab22 <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    ab12:	f100 0314 	add.w	r3, r0, #20
    ab16:	f100 010e 	add.w	r1, r0, #14
    ab1a:	22ff      	movs	r2, #255	; 0xff
    ab1c:	7b40      	ldrb	r0, [r0, #13]
    ab1e:	f008 fba3 	bl	13268 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ab22:	4b08      	ldr	r3, [pc, #32]	; (ab44 <hci_evt_encode+0x360>)
    ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab28:	2200      	movs	r2, #0
    ab2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ab2e:	4313      	orrs	r3, r2
    ab30:	f43f af58 	beq.w	a9e4 <hci_evt_encode+0x200>
    ab34:	462b      	mov	r3, r5
    ab36:	4632      	mov	r2, r6
    ab38:	f104 010b 	add.w	r1, r4, #11
    ab3c:	4638      	mov	r0, r7
    ab3e:	f7fe fecb 	bl	98d8 <le_conn_complete.part.39>
    ab42:	e74f      	b.n	a9e4 <hci_evt_encode+0x200>
    ab44:	20003d50 	.word	0x20003d50
    ab48:	20003d58 	.word	0x20003d58
    ab4c:	20000854 	.word	0x20000854
    ab50:	20000858 	.word	0x20000858
    ab54:	2000085c 	.word	0x2000085c
    ab58:	00015e19 	.word	0x00015e19
    ab5c:	000171f2 	.word	0x000171f2
    ab60:	00018fd6 	.word	0x00018fd6
    ab64:	00017241 	.word	0x00017241
    ab68:	00019177 	.word	0x00019177
    ab6c:	00018ffe 	.word	0x00018ffe
    ab70:	0001727c 	.word	0x0001727c
    ab74:	000191bd 	.word	0x000191bd
    ab78:	2000085e 	.word	0x2000085e
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    ab7c:	4bb2      	ldr	r3, [pc, #712]	; (ae48 <hci_evt_encode+0x664>)
    ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab82:	2300      	movs	r3, #0
    ab84:	f002 0210 	and.w	r2, r2, #16
    ab88:	4313      	orrs	r3, r2
    ab8a:	f43f af2b 	beq.w	a9e4 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    ab8e:	2204      	movs	r2, #4
    ab90:	2105      	movs	r1, #5
    ab92:	4628      	mov	r0, r5
    ab94:	f7fe fdf5 	bl	9782 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ab98:	2104      	movs	r1, #4
    ab9a:	f105 0008 	add.w	r0, r5, #8
    ab9e:	f009 fb2d 	bl	141fc <net_buf_simple_add>
	ep->status = 0x00;
    aba2:	2300      	movs	r3, #0
	conn_count--;
    aba4:	4aa9      	ldr	r2, [pc, #676]	; (ae4c <hci_evt_encode+0x668>)
	ep->status = 0x00;
    aba6:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    aba8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    abac:	7a23      	ldrb	r3, [r4, #8]
    abae:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    abb0:	6813      	ldr	r3, [r2, #0]
    abb2:	3b01      	subs	r3, #1
    abb4:	6013      	str	r3, [r2, #0]
    abb6:	e715      	b.n	a9e4 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    abb8:	4ba3      	ldr	r3, [pc, #652]	; (ae48 <hci_evt_encode+0x664>)
    abba:	e9d3 2300 	ldrd	r2, r3, [r3]
    abbe:	2200      	movs	r2, #0
    abc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    abc4:	4313      	orrs	r3, r2
    abc6:	f43f af0d 	beq.w	a9e4 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    abca:	4ba1      	ldr	r3, [pc, #644]	; (ae50 <hci_evt_encode+0x66c>)
    abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    abd0:	2300      	movs	r3, #0
    abd2:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    abd6:	4313      	orrs	r3, r2
    abd8:	f43f af04 	beq.w	a9e4 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    abdc:	2209      	movs	r2, #9
    abde:	2103      	movs	r1, #3
    abe0:	4628      	mov	r0, r5
    abe2:	f7fe fdf3 	bl	97cc <meta_evt>
	sep->status = radio_cu->status;
    abe6:	7ae3      	ldrb	r3, [r4, #11]
    abe8:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    abea:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    abec:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    abf0:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    abf4:	89e3      	ldrh	r3, [r4, #14]
    abf6:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    abfa:	8a23      	ldrh	r3, [r4, #16]
    abfc:	f8a0 3007 	strh.w	r3, [r0, #7]
    ac00:	e6f0      	b.n	a9e4 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    ac02:	4b91      	ldr	r3, [pc, #580]	; (ae48 <hci_evt_encode+0x664>)
    ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac08:	2200      	movs	r2, #0
    ac0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    ac0e:	4313      	orrs	r3, r2
    ac10:	f43f aee8 	beq.w	a9e4 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    ac14:	2203      	movs	r2, #3
    ac16:	2130      	movs	r1, #48	; 0x30
    ac18:	4628      	mov	r0, r5
    ac1a:	f7fe fdb2 	bl	9782 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ac1e:	2103      	movs	r1, #3
    ac20:	f105 0008 	add.w	r0, r5, #8
    ac24:	f009 faea 	bl	141fc <net_buf_simple_add>
	ep->status = 0x00;
    ac28:	2300      	movs	r3, #0
    ac2a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ac2c:	f8a0 6001 	strh.w	r6, [r0, #1]
    ac30:	e6d8      	b.n	a9e4 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    ac32:	4b88      	ldr	r3, [pc, #544]	; (ae54 <hci_evt_encode+0x670>)
    ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac38:	2300      	movs	r3, #0
    ac3a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    ac3e:	4313      	orrs	r3, r2
    ac40:	f43f aed0 	beq.w	a9e4 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    ac44:	2202      	movs	r2, #2
    ac46:	2157      	movs	r1, #87	; 0x57
    ac48:	4628      	mov	r0, r5
    ac4a:	f7fe fd9a 	bl	9782 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ac4e:	2102      	movs	r1, #2
    ac50:	f105 0008 	add.w	r0, r5, #8
    ac54:	f009 fad2 	bl	141fc <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    ac58:	8006      	strh	r6, [r0, #0]
    ac5a:	e6c3      	b.n	a9e4 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ac5c:	4b7a      	ldr	r3, [pc, #488]	; (ae48 <hci_evt_encode+0x664>)
    ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac62:	2200      	movs	r2, #0
    ac64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ac68:	4313      	orrs	r3, r2
    ac6a:	f43f aebb 	beq.w	a9e4 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    ac6e:	4b78      	ldr	r3, [pc, #480]	; (ae50 <hci_evt_encode+0x66c>)
    ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac74:	2300      	movs	r3, #0
    ac76:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ac7a:	4313      	orrs	r3, r2
    ac7c:	f43f aeb2 	beq.w	a9e4 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    ac80:	2203      	movs	r2, #3
    ac82:	2114      	movs	r1, #20
    ac84:	4628      	mov	r0, r5
    ac86:	f7fe fda1 	bl	97cc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    ac8a:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    ac8c:	7ae3      	ldrb	r3, [r4, #11]
    ac8e:	7083      	strb	r3, [r0, #2]
    ac90:	e6a8      	b.n	a9e4 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ac92:	4b6d      	ldr	r3, [pc, #436]	; (ae48 <hci_evt_encode+0x664>)
    ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac98:	2200      	movs	r2, #0
    ac9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ac9e:	4313      	orrs	r3, r2
    aca0:	d007      	beq.n	acb2 <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    aca2:	4b6b      	ldr	r3, [pc, #428]	; (ae50 <hci_evt_encode+0x66c>)
    aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
    aca8:	2300      	movs	r3, #0
    acaa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    acae:	4313      	orrs	r3, r2
    acb0:	d122      	bne.n	acf8 <hci_evt_encode+0x514>
    acb2:	7b22      	ldrb	r2, [r4, #12]
    acb4:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    acb6:	4868      	ldr	r0, [pc, #416]	; (ae58 <hci_evt_encode+0x674>)
    acb8:	2a00      	cmp	r2, #0
    acba:	fa92 f3a2 	rbit	r3, r2
    acbe:	fab3 f383 	clz	r3, r3
    acc2:	fa91 f2a1 	rbit	r2, r1
    acc6:	bf08      	it	eq
    acc8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    accc:	2900      	cmp	r1, #0
    acce:	fab2 f282 	clz	r2, r2
    acd2:	bf08      	it	eq
    acd4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    acd8:	4960      	ldr	r1, [pc, #384]	; (ae5c <hci_evt_encode+0x678>)
    acda:	9105      	str	r1, [sp, #20]
    acdc:	3301      	adds	r3, #1
    acde:	3201      	adds	r2, #1
    ace0:	9204      	str	r2, [sp, #16]
    ace2:	9303      	str	r3, [sp, #12]
    ace4:	7ae3      	ldrb	r3, [r4, #11]
    ace6:	9302      	str	r3, [sp, #8]
    ace8:	e88d 0042 	stmia.w	sp, {r1, r6}
    acec:	4b5c      	ldr	r3, [pc, #368]	; (ae60 <hci_evt_encode+0x67c>)
    acee:	4a5d      	ldr	r2, [pc, #372]	; (ae64 <hci_evt_encode+0x680>)
    acf0:	495d      	ldr	r1, [pc, #372]	; (ae68 <hci_evt_encode+0x684>)
    acf2:	f7f6 f94b 	bl	f8c <printk>
    acf6:	e675      	b.n	a9e4 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    acf8:	2205      	movs	r2, #5
    acfa:	210c      	movs	r1, #12
    acfc:	4628      	mov	r0, r5
    acfe:	f7fe fd65 	bl	97cc <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    ad02:	7ae3      	ldrb	r3, [r4, #11]
    ad04:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    ad06:	f8a0 6001 	strh.w	r6, [r0, #1]
    ad0a:	7b22      	ldrb	r2, [r4, #12]
    ad0c:	2a00      	cmp	r2, #0
    ad0e:	fa92 f3a2 	rbit	r3, r2
    ad12:	fab3 f383 	clz	r3, r3
    ad16:	bf08      	it	eq
    ad18:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    ad1c:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    ad1e:	70c3      	strb	r3, [r0, #3]
    ad20:	7b62      	ldrb	r2, [r4, #13]
    ad22:	fa92 f3a2 	rbit	r3, r2
    ad26:	2a00      	cmp	r2, #0
    ad28:	fab3 f383 	clz	r3, r3
    ad2c:	bf08      	it	eq
    ad2e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    ad32:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    ad34:	7103      	strb	r3, [r0, #4]
    ad36:	e655      	b.n	a9e4 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    ad38:	4b48      	ldr	r3, [pc, #288]	; (ae5c <hci_evt_encode+0x678>)
    ad3a:	9301      	str	r3, [sp, #4]
    ad3c:	9300      	str	r3, [sp, #0]
    ad3e:	4b4b      	ldr	r3, [pc, #300]	; (ae6c <hci_evt_encode+0x688>)
    ad40:	4a4b      	ldr	r2, [pc, #300]	; (ae70 <hci_evt_encode+0x68c>)
    ad42:	4949      	ldr	r1, [pc, #292]	; (ae68 <hci_evt_encode+0x684>)
    ad44:	484b      	ldr	r0, [pc, #300]	; (ae74 <hci_evt_encode+0x690>)
    ad46:	e622      	b.n	a98e <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    ad48:	7ac3      	ldrb	r3, [r0, #11]
    ad4a:	3b03      	subs	r3, #3
    ad4c:	2b12      	cmp	r3, #18
    ad4e:	f200 80d5 	bhi.w	aefc <hci_evt_encode+0x718>
    ad52:	e8df f003 	tbb	[pc, r3]
    ad56:	d30a      	.short	0xd30a
    ad58:	d3c02fd3 	.word	0xd3c02fd3
    ad5c:	3cd3d335 	.word	0x3cd3d335
    ad60:	d35fd35b 	.word	0xd35fd35b
    ad64:	a0d3d3d3 	.word	0xa0d3d3d3
    ad68:	a0          	.byte	0xa0
    ad69:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ad6a:	4b37      	ldr	r3, [pc, #220]	; (ae48 <hci_evt_encode+0x664>)
    ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad70:	2200      	movs	r2, #0
    ad72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ad76:	4313      	orrs	r3, r2
    ad78:	f43f ae34 	beq.w	a9e4 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    ad7c:	4b34      	ldr	r3, [pc, #208]	; (ae50 <hci_evt_encode+0x66c>)
    ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ad82:	2300      	movs	r3, #0
    ad84:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ad88:	4313      	orrs	r3, r2
    ad8a:	f43f ae2b 	beq.w	a9e4 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    ad8e:	220c      	movs	r2, #12
    ad90:	2105      	movs	r1, #5
    ad92:	4628      	mov	r0, r5
    ad94:	f7fe fd1a 	bl	97cc <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    ad98:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    ad9a:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    ad9c:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    ada0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    ada4:	f7f6 ff2a 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    ada8:	2202      	movs	r2, #2
    adaa:	f104 0114 	add.w	r1, r4, #20
    adae:	f105 000a 	add.w	r0, r5, #10
    adb2:	e6a9      	b.n	ab08 <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    adb4:	460a      	mov	r2, r1
    adb6:	2000      	movs	r0, #0
    adb8:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    adba:	f7fe fd3f 	bl	983c <encrypt_change>
    adbe:	e611      	b.n	a9e4 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    adc0:	460b      	mov	r3, r1
    adc2:	4632      	mov	r2, r6
    adc4:	4639      	mov	r1, r7
    adc6:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    adc8:	f7fe fd58 	bl	987c <le_remote_feat_complete>
    adcc:	e60a      	b.n	a9e4 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    adce:	4b1e      	ldr	r3, [pc, #120]	; (ae48 <hci_evt_encode+0x664>)
    add0:	e9d3 2300 	ldrd	r2, r3, [r3]
    add4:	2300      	movs	r3, #0
    add6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    adda:	4313      	orrs	r3, r2
    addc:	f43f ae02 	beq.w	a9e4 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    ade0:	2208      	movs	r2, #8
    ade2:	210c      	movs	r1, #12
    ade4:	4628      	mov	r0, r5
    ade6:	f7fe fccc 	bl	9782 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    adea:	2108      	movs	r1, #8
    adec:	1868      	adds	r0, r5, r1
    adee:	f009 fa05 	bl	141fc <net_buf_simple_add>
	ep->status = 0x00;
    adf2:	2300      	movs	r3, #0
    adf4:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    adf6:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    adfa:	7b23      	ldrb	r3, [r4, #12]
    adfc:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    adfe:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    ae02:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    ae04:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    ae08:	80c3      	strh	r3, [r0, #6]
    ae0a:	e5eb      	b.n	a9e4 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    ae0c:	460a      	mov	r2, r1
    ae0e:	7b00      	ldrb	r0, [r0, #12]
    ae10:	4631      	mov	r1, r6
    ae12:	e7d2      	b.n	adba <hci_evt_encode+0x5d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ae14:	4b0c      	ldr	r3, [pc, #48]	; (ae48 <hci_evt_encode+0x664>)
    ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
    ae1a:	2200      	movs	r2, #0
    ae1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ae20:	4313      	orrs	r3, r2
    ae22:	d007      	beq.n	ae34 <hci_evt_encode+0x650>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    ae24:	4b0a      	ldr	r3, [pc, #40]	; (ae50 <hci_evt_encode+0x66c>)
    ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
    ae2a:	2300      	movs	r3, #0
    ae2c:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ae30:	4313      	orrs	r3, r2
    ae32:	d121      	bne.n	ae78 <hci_evt_encode+0x694>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    ae34:	2300      	movs	r3, #0
    ae36:	9301      	str	r3, [sp, #4]
    ae38:	9300      	str	r3, [sp, #0]
    ae3a:	221a      	movs	r2, #26
    ae3c:	2102      	movs	r1, #2
    ae3e:	4630      	mov	r0, r6
    ae40:	f006 fddc 	bl	119fc <ll_conn_update>
    ae44:	e5ce      	b.n	a9e4 <hci_evt_encode+0x200>
    ae46:	bf00      	nop
    ae48:	20003d50 	.word	0x20003d50
    ae4c:	20000850 	.word	0x20000850
    ae50:	20003d58 	.word	0x20003d58
    ae54:	200008e0 	.word	0x200008e0
    ae58:	000191f0 	.word	0x000191f0
    ae5c:	00015e19 	.word	0x00015e19
    ae60:	00019013 	.word	0x00019013
    ae64:	0001727c 	.word	0x0001727c
    ae68:	00017241 	.word	0x00017241
    ae6c:	00019027 	.word	0x00019027
    ae70:	000171f2 	.word	0x000171f2
    ae74:	00017166 	.word	0x00017166
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    ae78:	220a      	movs	r2, #10
    ae7a:	2106      	movs	r1, #6
    ae7c:	4628      	mov	r0, r5
    ae7e:	f7fe fca5 	bl	97cc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    ae82:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    ae84:	89a3      	ldrh	r3, [r4, #12]
    ae86:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    ae88:	89e3      	ldrh	r3, [r4, #14]
    ae8a:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    ae8c:	8a23      	ldrh	r3, [r4, #16]
    ae8e:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    ae90:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    ae92:	8103      	strh	r3, [r0, #8]
    ae94:	e5a6      	b.n	a9e4 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ae96:	4b1c      	ldr	r3, [pc, #112]	; (af08 <hci_evt_encode+0x724>)
    ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
    ae9c:	2200      	movs	r2, #0
    ae9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    aea2:	4313      	orrs	r3, r2
    aea4:	f43f ad9e 	beq.w	a9e4 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    aea8:	4b18      	ldr	r3, [pc, #96]	; (af0c <hci_evt_encode+0x728>)
    aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    aeae:	2300      	movs	r3, #0
    aeb0:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aeb4:	4313      	orrs	r3, r2
    aeb6:	f43f ad95 	beq.w	a9e4 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    aeba:	220a      	movs	r2, #10
    aebc:	2107      	movs	r1, #7
    aebe:	4628      	mov	r0, r5
    aec0:	f7fe fc84 	bl	97cc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    aec4:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    aec6:	8a23      	ldrh	r3, [r4, #16]
    aec8:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    aeca:	8a63      	ldrh	r3, [r4, #18]
    aecc:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    aece:	89a3      	ldrh	r3, [r4, #12]
    aed0:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    aed2:	89e3      	ldrh	r3, [r4, #14]
    aed4:	e7dd      	b.n	ae92 <hci_evt_encode+0x6ae>
    aed6:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    aed8:	2a0e      	cmp	r2, #14
    aeda:	d104      	bne.n	aee6 <hci_evt_encode+0x702>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    aedc:	460b      	mov	r3, r1
    aede:	4632      	mov	r2, r6
    aee0:	2100      	movs	r1, #0
    aee2:	201a      	movs	r0, #26
    aee4:	e770      	b.n	adc8 <hci_evt_encode+0x5e4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    aee6:	4b0a      	ldr	r3, [pc, #40]	; (af10 <hci_evt_encode+0x72c>)
    aee8:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    aeea:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    aeec:	9300      	str	r3, [sp, #0]
    aeee:	4a09      	ldr	r2, [pc, #36]	; (af14 <hci_evt_encode+0x730>)
    aef0:	4b09      	ldr	r3, [pc, #36]	; (af18 <hci_evt_encode+0x734>)
    aef2:	490a      	ldr	r1, [pc, #40]	; (af1c <hci_evt_encode+0x738>)
    aef4:	480a      	ldr	r0, [pc, #40]	; (af20 <hci_evt_encode+0x73c>)
    aef6:	f7f6 f849 	bl	f8c <printk>
    aefa:	e573      	b.n	a9e4 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    aefc:	4b04      	ldr	r3, [pc, #16]	; (af10 <hci_evt_encode+0x72c>)
    aefe:	9301      	str	r3, [sp, #4]
    af00:	9300      	str	r3, [sp, #0]
    af02:	4b08      	ldr	r3, [pc, #32]	; (af24 <hci_evt_encode+0x740>)
    af04:	e71c      	b.n	ad40 <hci_evt_encode+0x55c>
    af06:	bf00      	nop
    af08:	20003d50 	.word	0x20003d50
    af0c:	20003d58 	.word	0x20003d58
    af10:	00015e19 	.word	0x00015e19
    af14:	0001727c 	.word	0x0001727c
    af18:	00019036 	.word	0x00019036
    af1c:	00017241 	.word	0x00017241
    af20:	0001922c 	.word	0x0001922c
    af24:	00019045 	.word	0x00019045

0000af28 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    af28:	b570      	push	{r4, r5, r6, lr}
    af2a:	4606      	mov	r6, r0
    af2c:	460d      	mov	r5, r1
    af2e:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    af30:	2113      	movs	r1, #19
    af32:	2205      	movs	r2, #5
    af34:	f7fe fc25 	bl	9782 <evt_create>

	ep = net_buf_add(buf, len);
    af38:	2105      	movs	r1, #5
    af3a:	f106 0008 	add.w	r0, r6, #8
    af3e:	f009 f95d 	bl	141fc <net_buf_simple_add>
	ep->num_handles = num_handles;
    af42:	2301      	movs	r3, #1
    af44:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    af46:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    af4a:	f8a0 4003 	strh.w	r4, [r0, #3]
    af4e:	bd70      	pop	{r4, r5, r6, pc}

0000af50 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    af50:	7903      	ldrb	r3, [r0, #4]
    af52:	2b01      	cmp	r3, #1
    af54:	d006      	beq.n	af64 <hci_get_class+0x14>
    af56:	3b02      	subs	r3, #2
    af58:	b2db      	uxtb	r3, r3
    af5a:	2b0a      	cmp	r3, #10
    af5c:	d80a      	bhi.n	af74 <hci_get_class+0x24>
    af5e:	4a07      	ldr	r2, [pc, #28]	; (af7c <hci_get_class+0x2c>)
    af60:	56d0      	ldrsb	r0, [r2, r3]
    af62:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    af64:	7a03      	ldrb	r3, [r0, #8]
    af66:	f003 0303 	and.w	r3, r3, #3
    af6a:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    af6c:	bf0c      	ite	eq
    af6e:	2002      	moveq	r0, #2
    af70:	2003      	movne	r0, #3
    af72:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    af74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    af78:	4770      	bx	lr
    af7a:	bf00      	nop
    af7c:	00018fad 	.word	0x00018fad

0000af80 <hci_init>:
	dup_count = -1;
    af80:	4b0a      	ldr	r3, [pc, #40]	; (afac <hci_init+0x2c>)
    af82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    af86:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    af88:	4b09      	ldr	r3, [pc, #36]	; (afb0 <hci_init+0x30>)
    af8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    af8e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    af92:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    af96:	4b07      	ldr	r3, [pc, #28]	; (afb4 <hci_init+0x34>)
    af98:	2000      	movs	r0, #0
    af9a:	2100      	movs	r1, #0
    af9c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    afa0:	4b05      	ldr	r3, [pc, #20]	; (afb8 <hci_init+0x38>)
    afa2:	201f      	movs	r0, #31
    afa4:	2100      	movs	r1, #0
    afa6:	e9c3 0100 	strd	r0, r1, [r3]
    afaa:	4770      	bx	lr
    afac:	20000854 	.word	0x20000854
    afb0:	20003d50 	.word	0x20003d50
    afb4:	200008e0 	.word	0x200008e0
    afb8:	20003d58 	.word	0x20003d58

0000afbc <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    afbc:	bf20      	wfe
	__SEV();
    afbe:	bf40      	sev
	__WFE();
    afc0:	bf20      	wfe
    afc2:	4770      	bx	lr

0000afc4 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    afc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    afc6:	4b0d      	ldr	r3, [pc, #52]	; (affc <pdu_len_cmp+0x38>)
{
    afc8:	b089      	sub	sp, #36	; 0x24
    afca:	4605      	mov	r5, r0
    afcc:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    afce:	aa01      	add	r2, sp, #4
    afd0:	f103 0718 	add.w	r7, r3, #24
    afd4:	6818      	ldr	r0, [r3, #0]
    afd6:	6859      	ldr	r1, [r3, #4]
    afd8:	4614      	mov	r4, r2
    afda:	c403      	stmia	r4!, {r0, r1}
    afdc:	3308      	adds	r3, #8
    afde:	42bb      	cmp	r3, r7
    afe0:	4622      	mov	r2, r4
    afe2:	d1f7      	bne.n	afd4 <pdu_len_cmp+0x10>
    afe4:	881b      	ldrh	r3, [r3, #0]
    afe6:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    afe8:	ab08      	add	r3, sp, #32
    afea:	441d      	add	r5, r3
    afec:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    aff0:	1b83      	subs	r3, r0, r6
    aff2:	4258      	negs	r0, r3
    aff4:	4158      	adcs	r0, r3
    aff6:	b009      	add	sp, #36	; 0x24
    aff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    affa:	bf00      	nop
    affc:	00015d6b 	.word	0x00015d6b

0000b000 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    b000:	6008      	str	r0, [r1, #0]
    b002:	4770      	bx	lr

0000b004 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    b004:	b918      	cbnz	r0, b00e <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    b006:	680b      	ldr	r3, [r1, #0]
    b008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b00c:	600b      	str	r3, [r1, #0]
    b00e:	4770      	bx	lr

0000b010 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    b010:	b918      	cbnz	r0, b01a <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    b012:	680b      	ldr	r3, [r1, #0]
    b014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b018:	600b      	str	r3, [r1, #0]
    b01a:	4770      	bx	lr

0000b01c <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    b01c:	b570      	push	{r4, r5, r6, lr}
    b01e:	1d03      	adds	r3, r0, #4
    b020:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    b022:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    b024:	429d      	cmp	r5, r3
    b026:	d101      	bne.n	b02c <chan_sel_remap+0x10>
    b028:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    b02a:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    b02c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    b030:	2200      	movs	r2, #0
    b032:	18a0      	adds	r0, r4, r2
    b034:	2a08      	cmp	r2, #8
    b036:	b2c0      	uxtb	r0, r0
    b038:	d101      	bne.n	b03e <chan_sel_remap+0x22>
    b03a:	4604      	mov	r4, r0
    b03c:	e7f2      	b.n	b024 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    b03e:	f016 0f01 	tst.w	r6, #1
    b042:	d003      	beq.n	b04c <chan_sel_remap+0x30>
				if (chan_index == 0) {
    b044:	2900      	cmp	r1, #0
    b046:	d0f0      	beq.n	b02a <chan_sel_remap+0xe>
				chan_index--;
    b048:	3901      	subs	r1, #1
    b04a:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    b04c:	0876      	lsrs	r6, r6, #1
    b04e:	3201      	adds	r2, #1
    b050:	e7ef      	b.n	b032 <chan_sel_remap+0x16>
	...

0000b054 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    b054:	4b09      	ldr	r3, [pc, #36]	; (b07c <packet_rx_acquired_count_get+0x28>)
    b056:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    b05a:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    b05e:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    b060:	bf3b      	ittet	cc
    b062:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    b066:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    b06a:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    b06e:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    b070:	bf2c      	ite	cs
    b072:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    b074:	1a80      	subcc	r0, r0, r2
    b076:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    b078:	4770      	bx	lr
    b07a:	bf00      	nop
    b07c:	200008e8 	.word	0x200008e8

0000b080 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    b080:	b508      	push	{r3, lr}
    b082:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    b084:	f7ff ffe6 	bl	b054 <packet_rx_acquired_count_get>
    b088:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    b08a:	bf21      	itttt	cs
    b08c:	4b04      	ldrcs	r3, [pc, #16]	; (b0a0 <packet_rx_reserve_get+0x20>)
    b08e:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    b092:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    b096:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    b09a:	bf38      	it	cc
    b09c:	2000      	movcc	r0, #0
}
    b09e:	bd08      	pop	{r3, pc}
    b0a0:	200008e8 	.word	0x200008e8

0000b0a4 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    b0a4:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    b0a6:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    b0aa:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    b0ae:	429c      	cmp	r4, r3
    b0b0:	d15a      	bne.n	b168 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    b0b2:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    b0b6:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    b0ba:	428b      	cmp	r3, r1
    b0bc:	d154      	bne.n	b168 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    b0be:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b0c2:	2b00      	cmp	r3, #0
    b0c4:	db25      	blt.n	b112 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    b0c6:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    b0c8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    b0ca:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    b0ce:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    b0d0:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    b0d4:	4351      	muls	r1, r2
					      conn->supervision_reload *
    b0d6:	227d      	movs	r2, #125	; 0x7d
    b0d8:	434a      	muls	r2, r1
					      125 / 1000;
    b0da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b0de:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    b0e2:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    b0e6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    b0ea:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    b0ec:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    b0f0:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    b0f2:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    b0f4:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    b0f8:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    b0fa:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    b0fe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    b102:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    b106:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    b10a:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    b10e:	4618      	mov	r0, r3
    b110:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    b112:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    b116:	06dc      	lsls	r4, r3, #27
    b118:	d428      	bmi.n	b16c <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    b11a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    b11e:	069a      	lsls	r2, r3, #26
    b120:	d503      	bpl.n	b12a <conn_update_req+0x86>
		    (conn->llcp_features &
    b122:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    b126:	079b      	lsls	r3, r3, #30
    b128:	d520      	bpl.n	b16c <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    b12a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    b12c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    b12e:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    b132:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    b134:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    b138:	4354      	muls	r4, r2
						conn->supervision_reload *
    b13a:	227d      	movs	r2, #125	; 0x7d
    b13c:	4362      	muls	r2, r4
						125 / 1000;
    b13e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    b142:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    b146:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    b14a:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    b14e:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    b150:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    b154:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    b158:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    b15a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    b15e:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    b162:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    b166:	e7d2      	b.n	b10e <conn_update_req+0x6a>
		return 1;
    b168:	2001      	movs	r0, #1
    b16a:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    b16c:	2002      	movs	r0, #2
}
    b16e:	bd30      	pop	{r4, r5, pc}

0000b170 <packet_rx_allocate>:
{
    b170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    b174:	4d22      	ldr	r5, [pc, #136]	; (b200 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    b176:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    b17a:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    b17e:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    b182:	3401      	adds	r4, #1
    b184:	4581      	cmp	r9, r0
    b186:	b2e4      	uxtb	r4, r4
    b188:	bf28      	it	cs
    b18a:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    b18c:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    b190:	42a3      	cmp	r3, r4
    b192:	bf08      	it	eq
    b194:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    b196:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    b19a:	f1b9 0f00 	cmp.w	r9, #0
    b19e:	d003      	beq.n	b1a8 <packet_rx_allocate+0x38>
    b1a0:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    b1a4:	429c      	cmp	r4, r3
    b1a6:	d101      	bne.n	b1ac <packet_rx_allocate+0x3c>
    b1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    b1ac:	4638      	mov	r0, r7
    b1ae:	f7fd f952 	bl	8456 <mem_acquire>
		if (!link) {
    b1b2:	4606      	mov	r6, r0
    b1b4:	2800      	cmp	r0, #0
    b1b6:	d0f7      	beq.n	b1a8 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    b1b8:	4640      	mov	r0, r8
    b1ba:	f7fd f94c 	bl	8456 <mem_acquire>
		if (!node_rx) {
    b1be:	b928      	cbnz	r0, b1cc <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    b1c0:	4630      	mov	r0, r6
    b1c2:	4910      	ldr	r1, [pc, #64]	; (b204 <packet_rx_allocate+0x94>)
}
    b1c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    b1c8:	f7fd b95f 	b.w	848a <mem_release>
		node_rx->hdr.onion.link = link;
    b1cc:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    b1ce:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    b1d2:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    b1d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    b1da:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    b1de:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    b1e2:	3401      	adds	r4, #1
    b1e4:	b2e4      	uxtb	r4, r4
			acquire = 0;
    b1e6:	42a3      	cmp	r3, r4
    b1e8:	bf08      	it	eq
    b1ea:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    b1ec:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    b1f0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    b1f4:	3b01      	subs	r3, #1
    b1f6:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    b1fa:	fa5f f989 	uxtb.w	r9, r9
    b1fe:	e7cc      	b.n	b19a <packet_rx_allocate+0x2a>
    b200:	200008e8 	.word	0x200008e8
    b204:	20000a30 	.word	0x20000a30

0000b208 <common_init>:
{
    b208:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    b20a:	4c39      	ldr	r4, [pc, #228]	; (b2f0 <common_init+0xe8>)
    b20c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    b210:	2a00      	cmp	r2, #0
    b212:	d040      	beq.n	b296 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    b214:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    b218:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b21c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    b220:	f7fd f8f2 	bl	8408 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    b224:	4b33      	ldr	r3, [pc, #204]	; (b2f4 <common_init+0xec>)
    b226:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    b22a:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    b22e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    b232:	f7fd f8e9 	bl	8408 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    b236:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    b23a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    b23e:	4b2e      	ldr	r3, [pc, #184]	; (b2f8 <common_init+0xf0>)
    b240:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    b244:	440a      	add	r2, r1
    b246:	2108      	movs	r1, #8
    b248:	f7fd f8de 	bl	8408 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    b24c:	4b2b      	ldr	r3, [pc, #172]	; (b2fc <common_init+0xf4>)
    b24e:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    b252:	2202      	movs	r2, #2
    b254:	2124      	movs	r1, #36	; 0x24
    b256:	f7fd f8d7 	bl	8408 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    b25a:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    b25e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    b262:	4b27      	ldr	r3, [pc, #156]	; (b300 <common_init+0xf8>)
    b264:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    b268:	3a01      	subs	r2, #1
    b26a:	b292      	uxth	r2, r2
    b26c:	f7fd f8cc 	bl	8408 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    b270:	4821      	ldr	r0, [pc, #132]	; (b2f8 <common_init+0xf0>)
    b272:	f7fd f8f0 	bl	8456 <mem_acquire>
	LL_ASSERT(link);
    b276:	b988      	cbnz	r0, b29c <common_init+0x94>
    b278:	4b22      	ldr	r3, [pc, #136]	; (b304 <common_init+0xfc>)
    b27a:	9301      	str	r3, [sp, #4]
    b27c:	9300      	str	r3, [sp, #0]
    b27e:	4a22      	ldr	r2, [pc, #136]	; (b308 <common_init+0x100>)
    b280:	4b22      	ldr	r3, [pc, #136]	; (b30c <common_init+0x104>)
    b282:	4923      	ldr	r1, [pc, #140]	; (b310 <common_init+0x108>)
    b284:	4823      	ldr	r0, [pc, #140]	; (b314 <common_init+0x10c>)
    b286:	f7f5 fe81 	bl	f8c <printk>
    b28a:	4040      	eors	r0, r0
    b28c:	f380 8811 	msr	BASEPRI, r0
    b290:	f04f 0004 	mov.w	r0, #4
    b294:	df02      	svc	2
		_radio.conn_free = NULL;
    b296:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    b29a:	e7c3      	b.n	b224 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    b29c:	4a1e      	ldr	r2, [pc, #120]	; (b318 <common_init+0x110>)
    b29e:	1f11      	subs	r1, r2, #4
    b2a0:	f7fd f930 	bl	8504 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    b2a4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    b2a8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    b2ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    b2b0:	231f      	movs	r3, #31
    b2b2:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    b2b6:	2325      	movs	r3, #37	; 0x25
    b2b8:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    b2bc:	231b      	movs	r3, #27
    b2be:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    b2c2:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    b2c6:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    b2c8:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    b2cc:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    b2ce:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    b2d2:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    b2d6:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    b2da:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    b2de:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    b2e2:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    b2e6:	b002      	add	sp, #8
    b2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    b2ec:	f7ff bf40 	b.w	b170 <packet_rx_allocate>
    b2f0:	200008e8 	.word	0x200008e8
    b2f4:	20000a18 	.word	0x20000a18
    b2f8:	20000a30 	.word	0x20000a30
    b2fc:	20000a44 	.word	0x20000a44
    b300:	20000a4c 	.word	0x20000a4c
    b304:	00015e19 	.word	0x00015e19
    b308:	000171f2 	.word	0x000171f2
    b30c:	000192fe 	.word	0x000192fe
    b310:	00017241 	.word	0x00017241
    b314:	0001977b 	.word	0x0001977b
    b318:	20000a38 	.word	0x20000a38

0000b31c <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    b31c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    b320:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    b322:	4294      	cmp	r4, r2
{
    b324:	4681      	mov	r9, r0
    b326:	460f      	mov	r7, r1
    b328:	4690      	mov	r8, r2
	if (_first == last) {
    b32a:	d03d      	beq.n	b3a8 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    b32c:	4e1f      	ldr	r6, [pc, #124]	; (b3ac <tx_cmplt_get+0x90>)
    b32e:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    b332:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    b336:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    b338:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    b33a:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    b33e:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    b342:	b222      	sxth	r2, r4
    b344:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    b348:	f8b9 e000 	ldrh.w	lr, [r9]
    b34c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    b350:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    b354:	4596      	cmp	lr, r2
    b356:	d120      	bne.n	b39a <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    b358:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    b35a:	2801      	cmp	r0, #1
    b35c:	f020 0303 	bic.w	r3, r0, #3
    b360:	d90a      	bls.n	b378 <tx_cmplt_get+0x5c>
    b362:	b1f3      	cbz	r3, b3a2 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    b364:	1d02      	adds	r2, r0, #4
    b366:	d01c      	beq.n	b3a2 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    b368:	7942      	ldrb	r2, [r0, #5]
    b36a:	b1d2      	cbz	r2, b3a2 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    b36c:	7902      	ldrb	r2, [r0, #4]
    b36e:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    b372:	3a01      	subs	r2, #1
    b374:	2a01      	cmp	r2, #1
    b376:	d814      	bhi.n	b3a2 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    b378:	2201      	movs	r2, #1
			cmplt++;
    b37a:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    b37c:	604a      	str	r2, [r1, #4]
			cmplt++;
    b37e:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    b380:	b113      	cbz	r3, b388 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    b382:	4651      	mov	r1, sl
    b384:	f7fd f881 	bl	848a <mem_release>
		}

		_first = _first + 1;
    b388:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    b38a:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    b38e:	b2e4      	uxtb	r4, r4
			_first = 0;
    b390:	42a2      	cmp	r2, r4
    b392:	bf08      	it	eq
    b394:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    b396:	4544      	cmp	r4, r8
    b398:	d1d3      	bne.n	b342 <tx_cmplt_get+0x26>

	*first = _first;
    b39a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    b39c:	4628      	mov	r0, r5
    b39e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    b3a2:	f8c1 b004 	str.w	fp, [r1, #4]
    b3a6:	e7eb      	b.n	b380 <tx_cmplt_get+0x64>
		return 0;
    b3a8:	2500      	movs	r5, #0
    b3aa:	e7f7      	b.n	b39c <tx_cmplt_get+0x80>
    b3ac:	200008e8 	.word	0x200008e8

0000b3b0 <connection_get>:
{
    b3b0:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    b3b2:	4b09      	ldr	r3, [pc, #36]	; (b3d8 <connection_get+0x28>)
    b3b4:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    b3b8:	4282      	cmp	r2, r0
{
    b3ba:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    b3bc:	d90a      	bls.n	b3d4 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    b3be:	4602      	mov	r2, r0
    b3c0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b3c4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    b3c8:	f7fd f87a 	bl	84c0 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    b3cc:	b110      	cbz	r0, b3d4 <connection_get+0x24>
    b3ce:	8c03      	ldrh	r3, [r0, #32]
    b3d0:	42a3      	cmp	r3, r4
    b3d2:	d000      	beq.n	b3d6 <connection_get+0x26>
	return 0;
    b3d4:	2000      	movs	r0, #0
}
    b3d6:	bd10      	pop	{r4, pc}
    b3d8:	200008e8 	.word	0x200008e8

0000b3dc <role_disable>:
{
    b3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3e0:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b3e2:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    b3e4:	2805      	cmp	r0, #5
{
    b3e6:	4605      	mov	r5, r0
    b3e8:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b3ea:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    b3ec:	d00c      	beq.n	b408 <role_disable+0x2c>
    b3ee:	2806      	cmp	r0, #6
    b3f0:	d040      	beq.n	b474 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b3f2:	d945      	bls.n	b480 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    b3f4:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    b3f6:	b280      	uxth	r0, r0
    b3f8:	f7ff ffda 	bl	b3b0 <connection_get>
			if (!conn) {
    b3fc:	2800      	cmp	r0, #0
    b3fe:	f000 8123 	beq.w	b648 <role_disable+0x26c>
			ticks_active_to_start =
    b402:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    b406:	e00f      	b.n	b428 <role_disable+0x4c>
		ticks_xtal_to_start =
    b408:	4b90      	ldr	r3, [pc, #576]	; (b64c <role_disable+0x270>)
    b40a:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    b40c:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b410:	ab02      	add	r3, sp, #8
    b412:	9300      	str	r3, [sp, #0]
    b414:	460a      	mov	r2, r1
    b416:	4b8e      	ldr	r3, [pc, #568]	; (b650 <role_disable+0x274>)
    b418:	2103      	movs	r1, #3
    b41a:	2000      	movs	r0, #0
    b41c:	f7fd ff42 	bl	92a4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    b420:	2802      	cmp	r0, #2
    b422:	d011      	beq.n	b448 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    b424:	9b02      	ldr	r3, [sp, #8]
    b426:	b99b      	cbnz	r3, b450 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    b428:	4c88      	ldr	r4, [pc, #544]	; (b64c <role_disable+0x270>)
    b42a:	7ca3      	ldrb	r3, [r4, #18]
    b42c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b430:	2b00      	cmp	r3, #0
    b432:	d02d      	beq.n	b490 <role_disable+0xb4>
    b434:	4b87      	ldr	r3, [pc, #540]	; (b654 <role_disable+0x278>)
    b436:	9301      	str	r3, [sp, #4]
    b438:	9300      	str	r3, [sp, #0]
    b43a:	4a87      	ldr	r2, [pc, #540]	; (b658 <role_disable+0x27c>)
    b43c:	4b87      	ldr	r3, [pc, #540]	; (b65c <role_disable+0x280>)
    b43e:	4988      	ldr	r1, [pc, #544]	; (b660 <role_disable+0x284>)
    b440:	4888      	ldr	r0, [pc, #544]	; (b664 <role_disable+0x288>)
    b442:	e00f      	b.n	b464 <role_disable+0x88>
				cpu_sleep();
    b444:	f7ff fdba 	bl	afbc <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b448:	9b02      	ldr	r3, [sp, #8]
    b44a:	2b02      	cmp	r3, #2
    b44c:	d0fa      	beq.n	b444 <role_disable+0x68>
    b44e:	e7e9      	b.n	b424 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    b450:	9b02      	ldr	r3, [sp, #8]
    b452:	2b01      	cmp	r3, #1
    b454:	d0e8      	beq.n	b428 <role_disable+0x4c>
    b456:	4b7f      	ldr	r3, [pc, #508]	; (b654 <role_disable+0x278>)
    b458:	9301      	str	r3, [sp, #4]
    b45a:	9300      	str	r3, [sp, #0]
    b45c:	4a7e      	ldr	r2, [pc, #504]	; (b658 <role_disable+0x27c>)
    b45e:	4b7f      	ldr	r3, [pc, #508]	; (b65c <role_disable+0x280>)
    b460:	497f      	ldr	r1, [pc, #508]	; (b660 <role_disable+0x284>)
    b462:	4881      	ldr	r0, [pc, #516]	; (b668 <role_disable+0x28c>)
			LL_ASSERT(0);
    b464:	f7f5 fd92 	bl	f8c <printk>
    b468:	4040      	eors	r0, r0
    b46a:	f380 8811 	msr	BASEPRI, r0
    b46e:	f04f 0004 	mov.w	r0, #4
    b472:	df02      	svc	2
		ticks_xtal_to_start =
    b474:	4b75      	ldr	r3, [pc, #468]	; (b64c <role_disable+0x270>)
    b476:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    b47a:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    b47e:	e7d3      	b.n	b428 <role_disable+0x4c>
			LL_ASSERT(0);
    b480:	4b74      	ldr	r3, [pc, #464]	; (b654 <role_disable+0x278>)
    b482:	9301      	str	r3, [sp, #4]
    b484:	9300      	str	r3, [sp, #0]
    b486:	4b75      	ldr	r3, [pc, #468]	; (b65c <role_disable+0x280>)
    b488:	4a73      	ldr	r2, [pc, #460]	; (b658 <role_disable+0x27c>)
    b48a:	4975      	ldr	r1, [pc, #468]	; (b660 <role_disable+0x284>)
    b48c:	4877      	ldr	r0, [pc, #476]	; (b66c <role_disable+0x290>)
    b48e:	e7e9      	b.n	b464 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    b490:	ab06      	add	r3, sp, #24
    b492:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    b494:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    b496:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b49a:	2103      	movs	r1, #3
    b49c:	9300      	str	r3, [sp, #0]
    b49e:	462a      	mov	r2, r5
    b4a0:	4b6b      	ldr	r3, [pc, #428]	; (b650 <role_disable+0x274>)
    b4a2:	f7fd feff 	bl	92a4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    b4a6:	2802      	cmp	r0, #2
    b4a8:	d025      	beq.n	b4f6 <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    b4aa:	9b02      	ldr	r3, [sp, #8]
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d169      	bne.n	b584 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    b4b0:	7c23      	ldrb	r3, [r4, #16]
    b4b2:	429d      	cmp	r5, r3
    b4b4:	d002      	beq.n	b4bc <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    b4b6:	7c63      	ldrb	r3, [r4, #17]
    b4b8:	429d      	cmp	r5, r3
    b4ba:	d15f      	bne.n	b57c <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    b4bc:	ab06      	add	r3, sp, #24
    b4be:	2202      	movs	r2, #2
    b4c0:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b4c4:	2200      	movs	r2, #0
    b4c6:	9300      	str	r3, [sp, #0]
    b4c8:	2103      	movs	r1, #3
    b4ca:	4b61      	ldr	r3, [pc, #388]	; (b650 <role_disable+0x274>)
    b4cc:	4610      	mov	r0, r2
    b4ce:	f7fd fee9 	bl	92a4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    b4d2:	2802      	cmp	r0, #2
    b4d4:	d11d      	bne.n	b512 <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b4d6:	2201      	movs	r2, #1
    b4d8:	4611      	mov	r1, r2
    b4da:	2003      	movs	r0, #3
    b4dc:	f7fd f85e 	bl	859c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    b4e0:	9b03      	ldr	r3, [sp, #12]
    b4e2:	2b02      	cmp	r3, #2
    b4e4:	d115      	bne.n	b512 <role_disable+0x136>
    b4e6:	4b5b      	ldr	r3, [pc, #364]	; (b654 <role_disable+0x278>)
    b4e8:	9301      	str	r3, [sp, #4]
    b4ea:	9300      	str	r3, [sp, #0]
    b4ec:	4a5a      	ldr	r2, [pc, #360]	; (b658 <role_disable+0x27c>)
    b4ee:	4b60      	ldr	r3, [pc, #384]	; (b670 <role_disable+0x294>)
    b4f0:	495b      	ldr	r1, [pc, #364]	; (b660 <role_disable+0x284>)
    b4f2:	4860      	ldr	r0, [pc, #384]	; (b674 <role_disable+0x298>)
    b4f4:	e7b6      	b.n	b464 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    b4f6:	7c63      	ldrb	r3, [r4, #17]
    b4f8:	429d      	cmp	r5, r3
    b4fa:	d104      	bne.n	b506 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b4fc:	2201      	movs	r2, #1
    b4fe:	4611      	mov	r1, r2
    b500:	2003      	movs	r0, #3
    b502:	f7fd f84b 	bl	859c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    b506:	9b02      	ldr	r3, [sp, #8]
    b508:	2b02      	cmp	r3, #2
    b50a:	d1ce      	bne.n	b4aa <role_disable+0xce>
			cpu_sleep();
    b50c:	f7ff fd56 	bl	afbc <cpu_sleep>
    b510:	e7f9      	b.n	b506 <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    b512:	9803      	ldr	r0, [sp, #12]
    b514:	2800      	cmp	r0, #0
    b516:	d150      	bne.n	b5ba <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    b518:	2302      	movs	r3, #2
    b51a:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    b51c:	7c23      	ldrb	r3, [r4, #16]
    b51e:	b93b      	cbnz	r3, b530 <role_disable+0x154>
    b520:	4b4c      	ldr	r3, [pc, #304]	; (b654 <role_disable+0x278>)
    b522:	9301      	str	r3, [sp, #4]
    b524:	9300      	str	r3, [sp, #0]
    b526:	4a4c      	ldr	r2, [pc, #304]	; (b658 <role_disable+0x27c>)
    b528:	4b51      	ldr	r3, [pc, #324]	; (b670 <role_disable+0x294>)
    b52a:	494d      	ldr	r1, [pc, #308]	; (b660 <role_disable+0x284>)
    b52c:	4852      	ldr	r0, [pc, #328]	; (b678 <role_disable+0x29c>)
    b52e:	e799      	b.n	b464 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b530:	ab04      	add	r3, sp, #16
    b532:	9300      	str	r3, [sp, #0]
    b534:	2201      	movs	r2, #1
    b536:	4b46      	ldr	r3, [pc, #280]	; (b650 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    b538:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b53a:	2103      	movs	r1, #3
    b53c:	f7fd feb2 	bl	92a4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    b540:	2802      	cmp	r0, #2
    b542:	d10f      	bne.n	b564 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b544:	2201      	movs	r2, #1
    b546:	4611      	mov	r1, r2
    b548:	2003      	movs	r0, #3
    b54a:	f7fd f827 	bl	859c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    b54e:	9b04      	ldr	r3, [sp, #16]
    b550:	2b02      	cmp	r3, #2
    b552:	d107      	bne.n	b564 <role_disable+0x188>
    b554:	4b3f      	ldr	r3, [pc, #252]	; (b654 <role_disable+0x278>)
    b556:	9301      	str	r3, [sp, #4]
    b558:	9300      	str	r3, [sp, #0]
    b55a:	4a3f      	ldr	r2, [pc, #252]	; (b658 <role_disable+0x27c>)
    b55c:	4b44      	ldr	r3, [pc, #272]	; (b670 <role_disable+0x294>)
    b55e:	4940      	ldr	r1, [pc, #256]	; (b660 <role_disable+0x284>)
    b560:	4846      	ldr	r0, [pc, #280]	; (b67c <role_disable+0x2a0>)
    b562:	e77f      	b.n	b464 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    b564:	9a04      	ldr	r2, [sp, #16]
    b566:	b99a      	cbnz	r2, b590 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    b568:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    b56c:	45b0      	cmp	r8, r6
    b56e:	d922      	bls.n	b5b6 <role_disable+0x1da>
				ret = mayfly_enqueue(
    b570:	4b43      	ldr	r3, [pc, #268]	; (b680 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b572:	4611      	mov	r1, r2
    b574:	2003      	movs	r0, #3
    b576:	f7fd f839 	bl	85ec <mayfly_enqueue>
			LL_ASSERT(!ret);
    b57a:	b9a0      	cbnz	r0, b5a6 <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    b57c:	7ca3      	ldrb	r3, [r4, #18]
    b57e:	b90b      	cbnz	r3, b584 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    b580:	2301      	movs	r3, #1
    b582:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    b584:	2300      	movs	r3, #0
    b586:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    b588:	9802      	ldr	r0, [sp, #8]
}
    b58a:	b006      	add	sp, #24
    b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    b590:	9b04      	ldr	r3, [sp, #16]
    b592:	2b01      	cmp	r3, #1
    b594:	d153      	bne.n	b63e <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b596:	2200      	movs	r2, #0
    b598:	4611      	mov	r1, r2
    b59a:	4b39      	ldr	r3, [pc, #228]	; (b680 <role_disable+0x2a4>)
    b59c:	2003      	movs	r0, #3
    b59e:	f7fd f825 	bl	85ec <mayfly_enqueue>
			LL_ASSERT(!ret);
    b5a2:	4602      	mov	r2, r0
    b5a4:	b138      	cbz	r0, b5b6 <role_disable+0x1da>
			LL_ASSERT(!ret);
    b5a6:	4b2b      	ldr	r3, [pc, #172]	; (b654 <role_disable+0x278>)
    b5a8:	9301      	str	r3, [sp, #4]
    b5aa:	9300      	str	r3, [sp, #0]
    b5ac:	4a2a      	ldr	r2, [pc, #168]	; (b658 <role_disable+0x27c>)
    b5ae:	4b30      	ldr	r3, [pc, #192]	; (b670 <role_disable+0x294>)
    b5b0:	492b      	ldr	r1, [pc, #172]	; (b660 <role_disable+0x284>)
    b5b2:	4834      	ldr	r0, [pc, #208]	; (b684 <role_disable+0x2a8>)
    b5b4:	e756      	b.n	b464 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b5b6:	4b34      	ldr	r3, [pc, #208]	; (b688 <role_disable+0x2ac>)
    b5b8:	e7db      	b.n	b572 <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    b5ba:	9d03      	ldr	r5, [sp, #12]
    b5bc:	2d01      	cmp	r5, #1
    b5be:	d13e      	bne.n	b63e <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    b5c0:	2fff      	cmp	r7, #255	; 0xff
    b5c2:	d029      	beq.n	b618 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    b5c4:	ab06      	add	r3, sp, #24
    b5c6:	2202      	movs	r2, #2
    b5c8:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b5cc:	2103      	movs	r1, #3
    b5ce:	9300      	str	r3, [sp, #0]
    b5d0:	463a      	mov	r2, r7
    b5d2:	4b1f      	ldr	r3, [pc, #124]	; (b650 <role_disable+0x274>)
    b5d4:	2000      	movs	r0, #0
    b5d6:	f7fd fe65 	bl	92a4 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    b5da:	2802      	cmp	r0, #2
    b5dc:	d10f      	bne.n	b5fe <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b5de:	462a      	mov	r2, r5
    b5e0:	4629      	mov	r1, r5
    b5e2:	2003      	movs	r0, #3
    b5e4:	f7fc ffda 	bl	859c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    b5e8:	9b05      	ldr	r3, [sp, #20]
    b5ea:	2b02      	cmp	r3, #2
    b5ec:	d107      	bne.n	b5fe <role_disable+0x222>
    b5ee:	4b19      	ldr	r3, [pc, #100]	; (b654 <role_disable+0x278>)
    b5f0:	9301      	str	r3, [sp, #4]
    b5f2:	9300      	str	r3, [sp, #0]
    b5f4:	4a18      	ldr	r2, [pc, #96]	; (b658 <role_disable+0x27c>)
    b5f6:	4b1e      	ldr	r3, [pc, #120]	; (b670 <role_disable+0x294>)
    b5f8:	4919      	ldr	r1, [pc, #100]	; (b660 <role_disable+0x284>)
    b5fa:	4824      	ldr	r0, [pc, #144]	; (b68c <role_disable+0x2b0>)
    b5fc:	e732      	b.n	b464 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    b5fe:	9b05      	ldr	r3, [sp, #20]
    b600:	b153      	cbz	r3, b618 <role_disable+0x23c>
    b602:	9b05      	ldr	r3, [sp, #20]
    b604:	2b01      	cmp	r3, #1
    b606:	d007      	beq.n	b618 <role_disable+0x23c>
    b608:	4b12      	ldr	r3, [pc, #72]	; (b654 <role_disable+0x278>)
    b60a:	9301      	str	r3, [sp, #4]
    b60c:	9300      	str	r3, [sp, #0]
    b60e:	4a12      	ldr	r2, [pc, #72]	; (b658 <role_disable+0x27c>)
    b610:	4b17      	ldr	r3, [pc, #92]	; (b670 <role_disable+0x294>)
    b612:	4913      	ldr	r1, [pc, #76]	; (b660 <role_disable+0x284>)
    b614:	481e      	ldr	r0, [pc, #120]	; (b690 <role_disable+0x2b4>)
    b616:	e725      	b.n	b464 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    b618:	7ce3      	ldrb	r3, [r4, #19]
    b61a:	2b00      	cmp	r3, #0
    b61c:	d0ae      	beq.n	b57c <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    b61e:	4b1d      	ldr	r3, [pc, #116]	; (b694 <role_disable+0x2b8>)
    b620:	2204      	movs	r2, #4
    b622:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b624:	2200      	movs	r2, #0
    b626:	4611      	mov	r1, r2
    b628:	2003      	movs	r0, #3
    b62a:	f7fc ffdf 	bl	85ec <mayfly_enqueue>
			LL_ASSERT(!ret);
    b62e:	2800      	cmp	r0, #0
    b630:	d1b9      	bne.n	b5a6 <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    b632:	7ce3      	ldrb	r3, [r4, #19]
    b634:	2b00      	cmp	r3, #0
    b636:	d0a1      	beq.n	b57c <role_disable+0x1a0>
				cpu_sleep();
    b638:	f7ff fcc0 	bl	afbc <cpu_sleep>
    b63c:	e7f9      	b.n	b632 <role_disable+0x256>
		LL_ASSERT(0);
    b63e:	4b05      	ldr	r3, [pc, #20]	; (b654 <role_disable+0x278>)
    b640:	9301      	str	r3, [sp, #4]
    b642:	9300      	str	r3, [sp, #0]
    b644:	4b0a      	ldr	r3, [pc, #40]	; (b670 <role_disable+0x294>)
    b646:	e71f      	b.n	b488 <role_disable+0xac>
				return 1;
    b648:	2001      	movs	r0, #1
    b64a:	e79e      	b.n	b58a <role_disable+0x1ae>
    b64c:	200008e8 	.word	0x200008e8
    b650:	0000b001 	.word	0x0000b001
    b654:	00015e19 	.word	0x00015e19
    b658:	000171f2 	.word	0x000171f2
    b65c:	00019720 	.word	0x00019720
    b660:	00017241 	.word	0x00017241
    b664:	0001a092 	.word	0x0001a092
    b668:	0001a052 	.word	0x0001a052
    b66c:	00017166 	.word	0x00017166
    b670:	0001970c 	.word	0x0001970c
    b674:	0001a0ca 	.word	0x0001a0ca
    b678:	0001a0fb 	.word	0x0001a0fb
    b67c:	0001a135 	.word	0x0001a135
    b680:	20003d80 	.word	0x20003d80
    b684:	0001a165 	.word	0x0001a165
    b688:	20003e20 	.word	0x20003e20
    b68c:	0001a18b 	.word	0x0001a18b
    b690:	0001a1bd 	.word	0x0001a1bd
    b694:	20003da0 	.word	0x20003da0

0000b698 <mayfly_xtal_retain>:
{
    b698:	b513      	push	{r0, r1, r4, lr}
    b69a:	4b1d      	ldr	r3, [pc, #116]	; (b710 <mayfly_xtal_retain+0x78>)
    b69c:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    b69e:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    b6a0:	b301      	cbz	r1, b6e4 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    b6a2:	2a00      	cmp	r2, #0
    b6a4:	d132      	bne.n	b70c <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    b6a6:	2801      	cmp	r0, #1
    b6a8:	d00e      	beq.n	b6c8 <mayfly_xtal_retain+0x30>
    b6aa:	4b1a      	ldr	r3, [pc, #104]	; (b714 <mayfly_xtal_retain+0x7c>)
    b6ac:	9301      	str	r3, [sp, #4]
    b6ae:	9300      	str	r3, [sp, #0]
    b6b0:	4a19      	ldr	r2, [pc, #100]	; (b718 <mayfly_xtal_retain+0x80>)
    b6b2:	4b1a      	ldr	r3, [pc, #104]	; (b71c <mayfly_xtal_retain+0x84>)
    b6b4:	491a      	ldr	r1, [pc, #104]	; (b720 <mayfly_xtal_retain+0x88>)
    b6b6:	481b      	ldr	r0, [pc, #108]	; (b724 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    b6b8:	f7f5 fc68 	bl	f8c <printk>
    b6bc:	4040      	eors	r0, r0
    b6be:	f380 8811 	msr	BASEPRI, r0
    b6c2:	f04f 0004 	mov.w	r0, #4
    b6c6:	df02      	svc	2
			s_xtal_retained = 1;
    b6c8:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    b6ca:	4b17      	ldr	r3, [pc, #92]	; (b728 <mayfly_xtal_retain+0x90>)
    b6cc:	4611      	mov	r1, r2
    b6ce:	f7fc ff8d 	bl	85ec <mayfly_enqueue>
			LL_ASSERT(!retval);
    b6d2:	b1d8      	cbz	r0, b70c <mayfly_xtal_retain+0x74>
    b6d4:	4b0f      	ldr	r3, [pc, #60]	; (b714 <mayfly_xtal_retain+0x7c>)
    b6d6:	9301      	str	r3, [sp, #4]
    b6d8:	9300      	str	r3, [sp, #0]
    b6da:	4a0f      	ldr	r2, [pc, #60]	; (b718 <mayfly_xtal_retain+0x80>)
    b6dc:	4b0f      	ldr	r3, [pc, #60]	; (b71c <mayfly_xtal_retain+0x84>)
    b6de:	4910      	ldr	r1, [pc, #64]	; (b720 <mayfly_xtal_retain+0x88>)
    b6e0:	4812      	ldr	r0, [pc, #72]	; (b72c <mayfly_xtal_retain+0x94>)
    b6e2:	e7e9      	b.n	b6b8 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    b6e4:	b192      	cbz	r2, b70c <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    b6e6:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    b6e8:	b170      	cbz	r0, b708 <mayfly_xtal_retain+0x70>
    b6ea:	2801      	cmp	r0, #1
    b6ec:	d104      	bne.n	b6f8 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    b6ee:	4b10      	ldr	r3, [pc, #64]	; (b730 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    b6f0:	2200      	movs	r2, #0
    b6f2:	4611      	mov	r1, r2
    b6f4:	4620      	mov	r0, r4
    b6f6:	e7ea      	b.n	b6ce <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    b6f8:	4b06      	ldr	r3, [pc, #24]	; (b714 <mayfly_xtal_retain+0x7c>)
    b6fa:	9301      	str	r3, [sp, #4]
    b6fc:	9300      	str	r3, [sp, #0]
    b6fe:	4a06      	ldr	r2, [pc, #24]	; (b718 <mayfly_xtal_retain+0x80>)
    b700:	4b06      	ldr	r3, [pc, #24]	; (b71c <mayfly_xtal_retain+0x84>)
    b702:	4907      	ldr	r1, [pc, #28]	; (b720 <mayfly_xtal_retain+0x88>)
    b704:	480b      	ldr	r0, [pc, #44]	; (b734 <mayfly_xtal_retain+0x9c>)
    b706:	e7d7      	b.n	b6b8 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    b708:	4b0b      	ldr	r3, [pc, #44]	; (b738 <mayfly_xtal_retain+0xa0>)
    b70a:	e7f1      	b.n	b6f0 <mayfly_xtal_retain+0x58>
}
    b70c:	b002      	add	sp, #8
    b70e:	bd10      	pop	{r4, pc}
    b710:	20000ae8 	.word	0x20000ae8
    b714:	00015e19 	.word	0x00015e19
    b718:	000171f2 	.word	0x000171f2
    b71c:	000194c5 	.word	0x000194c5
    b720:	00017241 	.word	0x00017241
    b724:	00019eab 	.word	0x00019eab
    b728:	20003df0 	.word	0x20003df0
    b72c:	00019edb 	.word	0x00019edb
    b730:	20003e10 	.word	0x20003e10
    b734:	00017166 	.word	0x00017166
    b738:	20003e00 	.word	0x20003e00

0000b73c <rx_packet_set>:
{
    b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    b73e:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    b742:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    b744:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    b746:	f004 0407 	and.w	r4, r4, #7
{
    b74a:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    b74c:	4620      	mov	r0, r4
    b74e:	2100      	movs	r1, #0
    b750:	f007 ffe2 	bl	13718 <radio_phy_set>
	if (conn->enc_rx) {
    b754:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    b758:	f013 0f10 	tst.w	r3, #16
    b75c:	ea4f 0244 	mov.w	r2, r4, lsl #1
    b760:	d010      	beq.n	b784 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    b762:	1d29      	adds	r1, r5, #4
    b764:	f042 0201 	orr.w	r2, r2, #1
    b768:	b2c9      	uxtb	r1, r1
    b76a:	2008      	movs	r0, #8
    b76c:	f008 f81a 	bl	137a4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    b770:	463a      	mov	r2, r7
    b772:	4621      	mov	r1, r4
    b774:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    b778:	f008 fa58 	bl	13c2c <radio_ccm_rx_pkt_set>
}
    b77c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    b780:	f008 b83e 	b.w	13800 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    b784:	2008      	movs	r0, #8
    b786:	f042 0201 	orr.w	r2, r2, #1
    b78a:	b2e9      	uxtb	r1, r5
    b78c:	f008 f80a 	bl	137a4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    b790:	4638      	mov	r0, r7
    b792:	e7f3      	b.n	b77c <rx_packet_set+0x40>

0000b794 <tx_packet_set>:
{
    b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b796:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    b798:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    b79c:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    b79e:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    b7a2:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    b7a4:	09c9      	lsrs	r1, r1, #7
    b7a6:	4620      	mov	r0, r4
    b7a8:	f007 ffb6 	bl	13718 <radio_phy_set>
	if (conn->enc_tx) {
    b7ac:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    b7b0:	f013 0f20 	tst.w	r3, #32
    b7b4:	ea4f 0244 	mov.w	r2, r4, lsl #1
    b7b8:	d00f      	beq.n	b7da <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    b7ba:	1d29      	adds	r1, r5, #4
    b7bc:	b2c9      	uxtb	r1, r1
    b7be:	2008      	movs	r0, #8
    b7c0:	f042 0201 	orr.w	r2, r2, #1
    b7c4:	f007 ffee 	bl	137a4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    b7c8:	4639      	mov	r1, r7
    b7ca:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    b7ce:	f008 fa69 	bl	13ca4 <radio_ccm_tx_pkt_set>
}
    b7d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    b7d6:	f008 b819 	b.w	1380c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    b7da:	2008      	movs	r0, #8
    b7dc:	f042 0201 	orr.w	r2, r2, #1
    b7e0:	b2e9      	uxtb	r1, r5
    b7e2:	f007 ffdf 	bl	137a4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    b7e6:	4638      	mov	r0, r7
    b7e8:	e7f3      	b.n	b7d2 <tx_packet_set+0x3e>
    b7ea:	0000      	movs	r0, r0
    b7ec:	0000      	movs	r0, r0
	...

0000b7f0 <sched_free_win_offset_calc>:
{
    b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7f4:	b08f      	sub	sp, #60	; 0x3c
    b7f6:	4692      	mov	sl, r2
    b7f8:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b7fa:	6803      	ldr	r3, [r0, #0]
{
    b7fc:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b7fe:	2b00      	cmp	r3, #0
{
    b800:	4680      	mov	r8, r0
    b802:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b804:	da3a      	bge.n	b87c <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    b806:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    b808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    b80c:	4291      	cmp	r1, r2
    b80e:	bf2c      	ite	cs
    b810:	1a5a      	subcs	r2, r3, r1
    b812:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    b814:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    b816:	f8d8 200c 	ldr.w	r2, [r8, #12]
    b81a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b81c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b81e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    b820:	18d3      	adds	r3, r2, r3
    b822:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b824:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b828:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    b82c:	940c      	str	r4, [sp, #48]	; 0x30
    b82e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b830:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b832:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    b834:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    b836:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b838:	2302      	movs	r3, #2
    b83a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b83c:	ab0d      	add	r3, sp, #52	; 0x34
    b83e:	9302      	str	r3, [sp, #8]
    b840:	4b81      	ldr	r3, [pc, #516]	; (ba48 <sched_free_win_offset_calc+0x258>)
    b842:	9301      	str	r3, [sp, #4]
    b844:	ab0b      	add	r3, sp, #44	; 0x2c
    b846:	9300      	str	r3, [sp, #0]
    b848:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    b84c:	ab0c      	add	r3, sp, #48	; 0x30
    b84e:	2101      	movs	r1, #1
    b850:	2000      	movs	r0, #0
    b852:	f7fd fd63 	bl	931c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b856:	2802      	cmp	r0, #2
    b858:	d019      	beq.n	b88e <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b85c:	b1db      	cbz	r3, b896 <sched_free_win_offset_calc+0xa6>
    b85e:	4b7b      	ldr	r3, [pc, #492]	; (ba4c <sched_free_win_offset_calc+0x25c>)
    b860:	9301      	str	r3, [sp, #4]
    b862:	9300      	str	r3, [sp, #0]
    b864:	4a7a      	ldr	r2, [pc, #488]	; (ba50 <sched_free_win_offset_calc+0x260>)
    b866:	4b7b      	ldr	r3, [pc, #492]	; (ba54 <sched_free_win_offset_calc+0x264>)
    b868:	497b      	ldr	r1, [pc, #492]	; (ba58 <sched_free_win_offset_calc+0x268>)
    b86a:	487c      	ldr	r0, [pc, #496]	; (ba5c <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    b86c:	f7f5 fb8e 	bl	f8c <printk>
    b870:	4040      	eors	r0, r0
    b872:	f380 8811 	msr	BASEPRI, r0
    b876:	f04f 0004 	mov.w	r0, #4
    b87a:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    b87c:	4293      	cmp	r3, r2
    b87e:	bf38      	it	cc
    b880:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    b882:	2200      	movs	r2, #0
    b884:	e7c6      	b.n	b814 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b886:	2101      	movs	r1, #1
    b888:	2000      	movs	r0, #0
    b88a:	f7fd fdc5 	bl	9418 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b88e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b890:	2b02      	cmp	r3, #2
    b892:	d0f8      	beq.n	b886 <sched_free_win_offset_calc+0x96>
    b894:	e7e1      	b.n	b85a <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    b896:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    b89a:	2aff      	cmp	r2, #255	; 0xff
    b89c:	d065      	beq.n	b96a <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    b89e:	2fff      	cmp	r7, #255	; 0xff
    b8a0:	d00a      	beq.n	b8b8 <sched_free_win_offset_calc+0xc8>
    b8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b8a4:	4599      	cmp	r9, r3
    b8a6:	d007      	beq.n	b8b8 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    b8a8:	4b68      	ldr	r3, [pc, #416]	; (ba4c <sched_free_win_offset_calc+0x25c>)
    b8aa:	9301      	str	r3, [sp, #4]
    b8ac:	9300      	str	r3, [sp, #0]
    b8ae:	4a68      	ldr	r2, [pc, #416]	; (ba50 <sched_free_win_offset_calc+0x260>)
    b8b0:	4b68      	ldr	r3, [pc, #416]	; (ba54 <sched_free_win_offset_calc+0x264>)
    b8b2:	4969      	ldr	r1, [pc, #420]	; (ba58 <sched_free_win_offset_calc+0x268>)
    b8b4:	486a      	ldr	r0, [pc, #424]	; (ba60 <sched_free_win_offset_calc+0x270>)
    b8b6:	e7d9      	b.n	b86c <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    b8b8:	2a05      	cmp	r2, #5
    b8ba:	d951      	bls.n	b960 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    b8bc:	4869      	ldr	r0, [pc, #420]	; (ba64 <sched_free_win_offset_calc+0x274>)
    b8be:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b8c2:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    b8c4:	429a      	cmp	r2, r3
    b8c6:	da4b      	bge.n	b960 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    b8c8:	2a06      	cmp	r2, #6
    b8ca:	f000 8092 	beq.w	b9f2 <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    b8ce:	9b06      	ldr	r3, [sp, #24]
    b8d0:	2bff      	cmp	r3, #255	; 0xff
    b8d2:	d14a      	bne.n	b96a <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b8d4:	3a07      	subs	r2, #7
    b8d6:	b292      	uxth	r2, r2
    b8d8:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b8dc:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b8e0:	f7fc fdee 	bl	84c0 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    b8e4:	4580      	cmp	r8, r0
    b8e6:	d03b      	beq.n	b960 <sched_free_win_offset_calc+0x170>
    b8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b8ea:	b91b      	cbnz	r3, b8f4 <sched_free_win_offset_calc+0x104>
    b8ec:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b8f0:	2b00      	cmp	r3, #0
    b8f2:	db35      	blt.n	b960 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    b8f4:	9b05      	ldr	r3, [sp, #20]
    b8f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b8f8:	6841      	ldr	r1, [r0, #4]
    b8fa:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b8fc:	6803      	ldr	r3, [r0, #0]
    b8fe:	2b00      	cmp	r3, #0
    b900:	da4e      	bge.n	b9a0 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    b902:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    b904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b908:	428a      	cmp	r2, r1
    b90a:	bf2c      	ite	cs
    b90c:	18b6      	addcs	r6, r6, r2
    b90e:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    b910:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    b912:	68c2      	ldr	r2, [r0, #12]
    b914:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    b918:	444b      	add	r3, r9
    b91a:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    b91c:	f8da 3000 	ldr.w	r3, [sl]
    b920:	429e      	cmp	r6, r3
    b922:	d916      	bls.n	b952 <sched_free_win_offset_calc+0x162>
    b924:	429d      	cmp	r5, r3
    b926:	bf38      	it	cc
    b928:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    b92a:	9b07      	ldr	r3, [sp, #28]
    b92c:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    b930:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b932:	781b      	ldrb	r3, [r3, #0]
    b934:	42a3      	cmp	r3, r4
    b936:	d905      	bls.n	b944 <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    b938:	4629      	mov	r1, r5
    b93a:	4630      	mov	r0, r6
    b93c:	f7fd fd84 	bl	9448 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    b940:	42b8      	cmp	r0, r7
    b942:	d231      	bcs.n	b9a8 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    b944:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    b948:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    b94a:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    b94e:	4293      	cmp	r3, r2
    b950:	d20b      	bcs.n	b96a <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    b952:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    b956:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    b95a:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    b95e:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    b960:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b962:	781b      	ldrb	r3, [r3, #0]
    b964:	42a3      	cmp	r3, r4
    b966:	f63f af67 	bhi.w	b838 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    b96a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    b96e:	2bff      	cmp	r3, #255	; 0xff
    b970:	d111      	bne.n	b996 <sched_free_win_offset_calc+0x1a6>
    b972:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b976:	f8df 80f0 	ldr.w	r8, [pc, #240]	; ba68 <sched_free_win_offset_calc+0x278>
    b97a:	a731      	add	r7, pc, #196	; (adr r7, ba40 <sched_free_win_offset_calc+0x250>)
    b97c:	e9d7 6700 	ldrd	r6, r7, [r7]
    b980:	429d      	cmp	r5, r3
    b982:	bf38      	it	cc
    b984:	461d      	movcc	r5, r3
    b986:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    b98a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b98c:	781b      	ldrb	r3, [r3, #0]
    b98e:	42a3      	cmp	r3, r4
    b990:	d831      	bhi.n	b9f6 <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    b992:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    b996:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b998:	701c      	strb	r4, [r3, #0]
}
    b99a:	b00f      	add	sp, #60	; 0x3c
    b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    b9a0:	428b      	cmp	r3, r1
    b9a2:	bf38      	it	cc
    b9a4:	460b      	movcc	r3, r1
    b9a6:	e7b4      	b.n	b912 <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b9a8:	4a2f      	ldr	r2, [pc, #188]	; (ba68 <sched_free_win_offset_calc+0x278>)
    b9aa:	eb05 030b 	add.w	r3, r5, fp
    b9ae:	fba3 0102 	umull	r0, r1, r3, r2
    b9b2:	2207      	movs	r2, #7
    b9b4:	fb02 1103 	mla	r1, r2, r3, r1
    b9b8:	a321      	add	r3, pc, #132	; (adr r3, ba40 <sched_free_win_offset_calc+0x250>)
    b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    b9be:	f7f4 fc29 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    b9c2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b9c6:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    b9ca:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b9cc:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    b9ce:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b9d0:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    b9d4:	d20b      	bcs.n	b9ee <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    b9d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b9d8:	2202      	movs	r2, #2
    b9da:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    b9de:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    b9e2:	3401      	adds	r4, #1
					memcpy(win_offset +
    b9e4:	f7f6 f90a 	bl	1bfc <memcpy>
					offset_index++;
    b9e8:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    b9ea:	3528      	adds	r5, #40	; 0x28
    b9ec:	e7a0      	b.n	b930 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    b9ee:	2500      	movs	r5, #0
    b9f0:	e7a8      	b.n	b944 <sched_free_win_offset_calc+0x154>
    b9f2:	9206      	str	r2, [sp, #24]
    b9f4:	e7b4      	b.n	b960 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b9f6:	eb05 030b 	add.w	r3, r5, fp
    b9fa:	fba3 0108 	umull	r0, r1, r3, r8
    b9fe:	fb09 1103 	mla	r1, r9, r3, r1
    ba02:	4632      	mov	r2, r6
    ba04:	463b      	mov	r3, r7
    ba06:	f7f4 fc05 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    ba0a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    ba0e:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    ba12:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    ba14:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    ba16:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    ba18:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    ba1c:	d90b      	bls.n	ba36 <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    ba1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ba20:	2202      	movs	r2, #2
    ba22:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    ba26:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    ba2a:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    ba2c:	f7f6 f8e6 	bl	1bfc <memcpy>
			offset_index++;
    ba30:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    ba32:	3528      	adds	r5, #40	; 0x28
    ba34:	e7a9      	b.n	b98a <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    ba36:	2500      	movs	r5, #0
    ba38:	e7ab      	b.n	b992 <sched_free_win_offset_calc+0x1a2>
    ba3a:	bf00      	nop
    ba3c:	f3af 8000 	nop.w
    ba40:	3b9aca00 	.word	0x3b9aca00
    ba44:	00000000 	.word	0x00000000
    ba48:	0000b001 	.word	0x0000b001
    ba4c:	00015e19 	.word	0x00015e19
    ba50:	000171f2 	.word	0x000171f2
    ba54:	00019541 	.word	0x00019541
    ba58:	00017241 	.word	0x00017241
    ba5c:	0001a260 	.word	0x0001a260
    ba60:	00017166 	.word	0x00017166
    ba64:	200008e8 	.word	0x200008e8
    ba68:	1afd498d 	.word	0x1afd498d

0000ba6c <mayfly_sched_free_win_offset_calc>:
{
    ba6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    ba6e:	2300      	movs	r3, #0
    ba70:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    ba72:	2306      	movs	r3, #6
    ba74:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    ba78:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    ba7c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    ba80:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    ba82:	bfbe      	ittt	lt
    ba84:	4602      	movlt	r2, r0
    ba86:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    ba88:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    ba8c:	9101      	str	r1, [sp, #4]
    ba8e:	f10d 010b 	add.w	r1, sp, #11
    ba92:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    ba94:	bfa8      	it	ge
    ba96:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    ba98:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    ba9c:	2100      	movs	r1, #0
    ba9e:	f7ff fea7 	bl	b7f0 <sched_free_win_offset_calc>
}
    baa2:	b005      	add	sp, #20
    baa4:	f85d fb04 	ldr.w	pc, [sp], #4

0000baa8 <mayfly_sched_win_offset_select>:
{
    baa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    baac:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    bab0:	b089      	sub	sp, #36	; 0x24
    bab2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    bab4:	4840      	ldr	r0, [pc, #256]	; (bbb8 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    bab6:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    bab8:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    baba:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    babe:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    bac2:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    bac6:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    bac8:	fb03 1102 	mla	r1, r3, r2, r1
    bacc:	a338      	add	r3, pc, #224	; (adr r3, bbb0 <mayfly_sched_win_offset_select+0x108>)
    bace:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    bad2:	9505      	str	r5, [sp, #20]
    bad4:	6075      	str	r5, [r6, #4]
    bad6:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    bad8:	f7f4 fb9c 	bl	214 <__aeabi_uldivmod>
    badc:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    bade:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    bae2:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    bae6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    baea:	9100      	str	r1, [sp, #0]
    baec:	9601      	str	r6, [sp, #4]
    baee:	2101      	movs	r1, #1
    baf0:	4620      	mov	r0, r4
    baf2:	f7ff fe7d 	bl	b7f0 <sched_free_win_offset_calc>
    baf6:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    bafa:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    bafe:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    bb02:	2202      	movs	r2, #2
    bb04:	4639      	mov	r1, r7
    bb06:	f10d 000e 	add.w	r0, sp, #14
    bb0a:	f7f6 f877 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    bb0e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    bb12:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    bb16:	2300      	movs	r3, #0
    bb18:	b2d9      	uxtb	r1, r3
    bb1a:	4288      	cmp	r0, r1
    bb1c:	d811      	bhi.n	bb42 <mayfly_sched_win_offset_select+0x9a>
    bb1e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    bb20:	4547      	cmp	r7, r8
    bb22:	d1ee      	bne.n	bb02 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    bb24:	b9b5      	cbnz	r5, bb54 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    bb26:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    bb2a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    bb2e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    bb30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    bb34:	2202      	movs	r2, #2
    bb36:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    bb38:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    bb3c:	f7f6 f85e 	bl	1bfc <memcpy>
    bb40:	e027      	b.n	bb92 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    bb42:	454a      	cmp	r2, r9
    bb44:	d004      	beq.n	bb50 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    bb46:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    bb4a:	4291      	cmp	r1, r2
    bb4c:	d024      	beq.n	bb98 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    bb4e:	2501      	movs	r5, #1
    bb50:	3301      	adds	r3, #1
    bb52:	e7e1      	b.n	bb18 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    bb54:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    bb58:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bb5c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bb60:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    bb64:	4b15      	ldr	r3, [pc, #84]	; (bbbc <mayfly_sched_win_offset_select+0x114>)
    bb66:	2200      	movs	r2, #0
    bb68:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    bb6c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb70:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    bb74:	f042 0203 	orr.w	r2, r2, #3
    bb78:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    bb7c:	2203      	movs	r2, #3
    bb7e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    bb82:	2211      	movs	r2, #17
    bb84:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    bb88:	220f      	movs	r2, #15
    bb8a:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    bb8e:	2220      	movs	r2, #32
    bb90:	701a      	strb	r2, [r3, #0]
}
    bb92:	b009      	add	sp, #36	; 0x24
    bb94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    bb98:	f240 43e2 	movw	r3, #1250	; 0x4e2
    bb9c:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    bb9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    bba2:	2202      	movs	r2, #2
    bba4:	f10d 010e 	add.w	r1, sp, #14
    bba8:	e7c6      	b.n	bb38 <mayfly_sched_win_offset_select+0x90>
    bbaa:	bf00      	nop
    bbac:	f3af 8000 	nop.w
    bbb0:	1afd498d 	.word	0x1afd498d
    bbb4:	00000007 	.word	0x00000007
    bbb8:	09ce5400 	.word	0x09ce5400
    bbbc:	200008e8 	.word	0x200008e8

0000bbc0 <sched_after_mstr_free_slot_get>:
{
    bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbc4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    bbc6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    bbc8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    bbca:	f8df 9140 	ldr.w	r9, [pc, #320]	; bd0c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    bbce:	f88d 501f 	strb.w	r5, [sp, #31]
{
    bbd2:	4680      	mov	r8, r0
    bbd4:	4693      	mov	fp, r2
    bbd6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    bbd8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    bbdc:	601c      	str	r4, [r3, #0]
    bbde:	9408      	str	r4, [sp, #32]
    bbe0:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    bbe2:	2302      	movs	r3, #2
    bbe4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    bbe6:	ab09      	add	r3, sp, #36	; 0x24
    bbe8:	9302      	str	r3, [sp, #8]
    bbea:	4b41      	ldr	r3, [pc, #260]	; (bcf0 <sched_after_mstr_free_slot_get+0x130>)
    bbec:	9301      	str	r3, [sp, #4]
    bbee:	ab08      	add	r3, sp, #32
    bbf0:	9300      	str	r3, [sp, #0]
    bbf2:	f10d 021f 	add.w	r2, sp, #31
    bbf6:	465b      	mov	r3, fp
    bbf8:	4641      	mov	r1, r8
    bbfa:	2000      	movs	r0, #0
    bbfc:	f7fd fb8e 	bl	931c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    bc00:	2802      	cmp	r0, #2
    bc02:	d014      	beq.n	bc2e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    bc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc06:	b1b3      	cbz	r3, bc36 <sched_after_mstr_free_slot_get+0x76>
    bc08:	4b3a      	ldr	r3, [pc, #232]	; (bcf4 <sched_after_mstr_free_slot_get+0x134>)
    bc0a:	9301      	str	r3, [sp, #4]
    bc0c:	9300      	str	r3, [sp, #0]
    bc0e:	4a3a      	ldr	r2, [pc, #232]	; (bcf8 <sched_after_mstr_free_slot_get+0x138>)
    bc10:	4b3a      	ldr	r3, [pc, #232]	; (bcfc <sched_after_mstr_free_slot_get+0x13c>)
    bc12:	493b      	ldr	r1, [pc, #236]	; (bd00 <sched_after_mstr_free_slot_get+0x140>)
    bc14:	483b      	ldr	r0, [pc, #236]	; (bd04 <sched_after_mstr_free_slot_get+0x144>)
    bc16:	f7f5 f9b9 	bl	f8c <printk>
    bc1a:	4040      	eors	r0, r0
    bc1c:	f380 8811 	msr	BASEPRI, r0
    bc20:	f04f 0004 	mov.w	r0, #4
    bc24:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    bc26:	4641      	mov	r1, r8
    bc28:	2000      	movs	r0, #0
    bc2a:	f7fd fbf5 	bl	9418 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    bc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc30:	2b02      	cmp	r3, #2
    bc32:	d0f8      	beq.n	bc26 <sched_after_mstr_free_slot_get+0x66>
    bc34:	e7e6      	b.n	bc04 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    bc36:	f89d 201f 	ldrb.w	r2, [sp, #31]
    bc3a:	2aff      	cmp	r2, #255	; 0xff
    bc3c:	d04e      	beq.n	bcdc <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    bc3e:	2a06      	cmp	r2, #6
    bc40:	d9cf      	bls.n	bbe2 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    bc42:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    bc46:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    bc48:	429a      	cmp	r2, r3
    bc4a:	daca      	bge.n	bbe2 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bc4c:	3a07      	subs	r2, #7
    bc4e:	b292      	uxth	r2, r2
    bc50:	f44f 71aa 	mov.w	r1, #340	; 0x154
    bc54:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    bc58:	f7fc fc32 	bl	84c0 <mem_get>
		if (conn && !conn->role) {
    bc5c:	2800      	cmp	r0, #0
    bc5e:	d0c0      	beq.n	bbe2 <sched_after_mstr_free_slot_get+0x22>
    bc60:	f990 301d 	ldrsb.w	r3, [r0, #29]
    bc64:	2b00      	cmp	r3, #0
    bc66:	dbbc      	blt.n	bbe2 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bc68:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    bc6a:	9a08      	ldr	r2, [sp, #32]
    bc6c:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bc70:	2b00      	cmp	r3, #0
    bc72:	da12      	bge.n	bc9a <sched_after_mstr_free_slot_get+0xda>
    bc74:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    bc76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    bc7a:	4571      	cmp	r1, lr
    bc7c:	bf2c      	ite	cs
    bc7e:	1852      	addcs	r2, r2, r1
    bc80:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    bc82:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    bc84:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    bc86:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    bc88:	f101 0104 	add.w	r1, r1, #4
    bc8c:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    bc8e:	d108      	bne.n	bca2 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    bc90:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    bc94:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    bc96:	4616      	mov	r6, r2
    bc98:	e7a3      	b.n	bbe2 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    bc9a:	4573      	cmp	r3, lr
    bc9c:	bf38      	it	cc
    bc9e:	4673      	movcc	r3, lr
    bca0:	e7f0      	b.n	bc84 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    bca2:	4631      	mov	r1, r6
    bca4:	4610      	mov	r0, r2
    bca6:	9305      	str	r3, [sp, #20]
    bca8:	9204      	str	r2, [sp, #16]
    bcaa:	f7fd fbcd 	bl	9448 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    bcae:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    bcb2:	4288      	cmp	r0, r1
    bcb4:	9a04      	ldr	r2, [sp, #16]
    bcb6:	9b05      	ldr	r3, [sp, #20]
    bcb8:	d9ea      	bls.n	bc90 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    bcba:	4813      	ldr	r0, [pc, #76]	; (bd08 <sched_after_mstr_free_slot_get+0x148>)
    bcbc:	4434      	add	r4, r6
    bcbe:	fba4 0100 	umull	r0, r1, r4, r0
    bcc2:	2307      	movs	r3, #7
    bcc4:	fb03 1104 	mla	r1, r3, r4, r1
    bcc8:	a307      	add	r3, pc, #28	; (adr r3, bce8 <sched_after_mstr_free_slot_get+0x128>)
    bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
    bcce:	f7f4 faa1 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    bcd2:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    bcd4:	6038      	str	r0, [r7, #0]
}
    bcd6:	b00b      	add	sp, #44	; 0x2c
    bcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    bcdc:	2dff      	cmp	r5, #255	; 0xff
    bcde:	d1ec      	bne.n	bcba <sched_after_mstr_free_slot_get+0xfa>
    bce0:	e7f9      	b.n	bcd6 <sched_after_mstr_free_slot_get+0x116>
    bce2:	bf00      	nop
    bce4:	f3af 8000 	nop.w
    bce8:	3b9aca00 	.word	0x3b9aca00
    bcec:	00000000 	.word	0x00000000
    bcf0:	0000b001 	.word	0x0000b001
    bcf4:	00015e19 	.word	0x00015e19
    bcf8:	000171f2 	.word	0x000171f2
    bcfc:	00019501 	.word	0x00019501
    bd00:	00017241 	.word	0x00017241
    bd04:	0001a260 	.word	0x0001a260
    bd08:	1afd498d 	.word	0x1afd498d
    bd0c:	200008e8 	.word	0x200008e8

0000bd10 <isr_adv_ci_adva_check>:
{
    bd10:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    bd12:	7804      	ldrb	r4, [r0, #0]
    bd14:	780a      	ldrb	r2, [r1, #0]
    bd16:	f3c4 1380 	ubfx	r3, r4, #6, #1
    bd1a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    bd1e:	d119      	bne.n	bd54 <isr_adv_ci_adva_check+0x44>
    bd20:	f004 040f 	and.w	r4, r4, #15
    bd24:	2c01      	cmp	r4, #1
    bd26:	f101 0608 	add.w	r6, r1, #8
    bd2a:	f100 0502 	add.w	r5, r0, #2
    bd2e:	d008      	beq.n	bd42 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    bd30:	2206      	movs	r2, #6
    bd32:	4631      	mov	r1, r6
    bd34:	4628      	mov	r0, r5
    bd36:	f7f5 ff4c 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    bd3a:	fab0 f080 	clz	r0, r0
    bd3e:	0940      	lsrs	r0, r0, #5
    bd40:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    bd42:	2206      	movs	r2, #6
    bd44:	4631      	mov	r1, r6
    bd46:	4628      	mov	r0, r5
    bd48:	f7f5 ff43 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    bd4c:	2800      	cmp	r0, #0
    bd4e:	d1ef      	bne.n	bd30 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    bd50:	4620      	mov	r0, r4
    bd52:	bd70      	pop	{r4, r5, r6, pc}
    bd54:	2000      	movs	r0, #0
}
    bd56:	bd70      	pop	{r4, r5, r6, pc}

0000bd58 <packet_rx_enqueue>:
{
    bd58:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    bd5a:	4a1e      	ldr	r2, [pc, #120]	; (bdd4 <packet_rx_enqueue+0x7c>)
    bd5c:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    bd60:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    bd64:	4299      	cmp	r1, r3
    bd66:	d10e      	bne.n	bd86 <packet_rx_enqueue+0x2e>
    bd68:	4b1b      	ldr	r3, [pc, #108]	; (bdd8 <packet_rx_enqueue+0x80>)
    bd6a:	9301      	str	r3, [sp, #4]
    bd6c:	9300      	str	r3, [sp, #0]
    bd6e:	4a1b      	ldr	r2, [pc, #108]	; (bddc <packet_rx_enqueue+0x84>)
    bd70:	4b1b      	ldr	r3, [pc, #108]	; (bde0 <packet_rx_enqueue+0x88>)
    bd72:	491c      	ldr	r1, [pc, #112]	; (bde4 <packet_rx_enqueue+0x8c>)
    bd74:	481c      	ldr	r0, [pc, #112]	; (bde8 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    bd76:	f7f5 f909 	bl	f8c <printk>
    bd7a:	4040      	eors	r0, r0
    bd7c:	f380 8811 	msr	BASEPRI, r0
    bd80:	f04f 0004 	mov.w	r0, #4
    bd84:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    bd86:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    bd8a:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    bd8e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    bd92:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    bd96:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    bd98:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    bd9a:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    bd9e:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    bda2:	3301      	adds	r3, #1
    bda4:	b2db      	uxtb	r3, r3
		last = 0;
    bda6:	429c      	cmp	r4, r3
    bda8:	bf08      	it	eq
    bdaa:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    bdac:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    bdb0:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    bdb4:	f7fc fba9 	bl	850a <memq_enqueue>
	LL_ASSERT(link);
    bdb8:	b938      	cbnz	r0, bdca <packet_rx_enqueue+0x72>
    bdba:	4b07      	ldr	r3, [pc, #28]	; (bdd8 <packet_rx_enqueue+0x80>)
    bdbc:	9301      	str	r3, [sp, #4]
    bdbe:	9300      	str	r3, [sp, #0]
    bdc0:	4a06      	ldr	r2, [pc, #24]	; (bddc <packet_rx_enqueue+0x84>)
    bdc2:	4b07      	ldr	r3, [pc, #28]	; (bde0 <packet_rx_enqueue+0x88>)
    bdc4:	4907      	ldr	r1, [pc, #28]	; (bde4 <packet_rx_enqueue+0x8c>)
    bdc6:	4809      	ldr	r0, [pc, #36]	; (bdec <packet_rx_enqueue+0x94>)
    bdc8:	e7d5      	b.n	bd76 <packet_rx_enqueue+0x1e>
}
    bdca:	b002      	add	sp, #8
    bdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    bdd0:	f006 bb9c 	b.w	1250c <radio_event_callback>
    bdd4:	200008e8 	.word	0x200008e8
    bdd8:	00015e19 	.word	0x00015e19
    bddc:	000171f2 	.word	0x000171f2
    bde0:	00019692 	.word	0x00019692
    bde4:	00017241 	.word	0x00017241
    bde8:	00019f58 	.word	0x00019f58
    bdec:	0001977b 	.word	0x0001977b

0000bdf0 <isr_scan_tgta_check>:
{
    bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdf4:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    bdf6:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    bdf8:	f101 0808 	add.w	r8, r1, #8
{
    bdfc:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    bdfe:	09c0      	lsrs	r0, r0, #7
    be00:	4641      	mov	r1, r8
{
    be02:	4691      	mov	r9, r2
    be04:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    be06:	f007 f81d 	bl	12e44 <ctrl_rl_addr_resolve>
    be0a:	4604      	mov	r4, r0
    be0c:	b9d8      	cbnz	r0, be46 <isr_scan_tgta_check+0x56>
    be0e:	4f1c      	ldr	r7, [pc, #112]	; (be80 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    be10:	f1ba 0f00 	cmp.w	sl, #0
    be14:	d10e      	bne.n	be34 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    be16:	782b      	ldrb	r3, [r5, #0]
    be18:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    be1c:	09db      	lsrs	r3, r3, #7
    be1e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    be22:	d113      	bne.n	be4c <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    be24:	2206      	movs	r2, #6
    be26:	4641      	mov	r1, r8
    be28:	4816      	ldr	r0, [pc, #88]	; (be84 <isr_scan_tgta_check+0x94>)
    be2a:	f7f5 fed2 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    be2e:	b968      	cbnz	r0, be4c <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    be30:	2001      	movs	r0, #1
    be32:	e012      	b.n	be5a <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    be34:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    be38:	07db      	lsls	r3, r3, #31
    be3a:	d5ec      	bpl.n	be16 <isr_scan_tgta_check+0x26>
    be3c:	4648      	mov	r0, r9
    be3e:	f006 fd5d 	bl	128fc <ctrl_lrpa_get>
    be42:	2800      	cmp	r0, #0
    be44:	d0e7      	beq.n	be16 <isr_scan_tgta_check+0x26>
}
    be46:	4620      	mov	r0, r4
    be48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    be4c:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    be50:	f3c0 1001 	ubfx	r0, r0, #4, #2
    be54:	f010 0002 	ands.w	r0, r0, #2
    be58:	d101      	bne.n	be5e <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    be5a:	4604      	mov	r4, r0
    be5c:	e7f3      	b.n	be46 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    be5e:	f995 3000 	ldrsb.w	r3, [r5]
    be62:	2b00      	cmp	r3, #0
    be64:	da09      	bge.n	be7a <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    be66:	7b6b      	ldrb	r3, [r5, #13]
    be68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    be6c:	2b40      	cmp	r3, #64	; 0x40
    be6e:	d104      	bne.n	be7a <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    be70:	2e00      	cmp	r6, #0
    be72:	d0dd      	beq.n	be30 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    be74:	2001      	movs	r0, #1
    be76:	7030      	strb	r0, [r6, #0]
    be78:	e7ef      	b.n	be5a <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    be7a:	2000      	movs	r0, #0
    be7c:	e7ed      	b.n	be5a <isr_scan_tgta_check+0x6a>
    be7e:	bf00      	nop
    be80:	200008e8 	.word	0x200008e8
    be84:	200009cc 	.word	0x200009cc

0000be88 <isr_rx_scan_report>:
{
    be88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    be8c:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    be8e:	2003      	movs	r0, #3
{
    be90:	460f      	mov	r7, r1
    be92:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    be94:	f7ff f8f4 	bl	b080 <packet_rx_reserve_get>
	if (node_rx == 0) {
    be98:	4604      	mov	r4, r0
    be9a:	2800      	cmp	r0, #0
    be9c:	d03e      	beq.n	bf1c <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    be9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bea2:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    bea4:	4b1e      	ldr	r3, [pc, #120]	; (bf20 <isr_rx_scan_report+0x98>)
    bea6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    beaa:	075a      	lsls	r2, r3, #29
    beac:	d032      	beq.n	bf14 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    beae:	f3c3 0302 	ubfx	r3, r3, #0, #3
    beb2:	b2da      	uxtb	r2, r3
    beb4:	2a01      	cmp	r2, #1
    beb6:	d010      	beq.n	beda <isr_rx_scan_report+0x52>
    beb8:	2a04      	cmp	r2, #4
    beba:	d00f      	beq.n	bedc <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    bebc:	4b19      	ldr	r3, [pc, #100]	; (bf24 <isr_rx_scan_report+0x9c>)
    bebe:	9301      	str	r3, [sp, #4]
    bec0:	9300      	str	r3, [sp, #0]
    bec2:	4a19      	ldr	r2, [pc, #100]	; (bf28 <isr_rx_scan_report+0xa0>)
    bec4:	4b19      	ldr	r3, [pc, #100]	; (bf2c <isr_rx_scan_report+0xa4>)
    bec6:	491a      	ldr	r1, [pc, #104]	; (bf30 <isr_rx_scan_report+0xa8>)
    bec8:	481a      	ldr	r0, [pc, #104]	; (bf34 <isr_rx_scan_report+0xac>)
    beca:	f7f5 f85f 	bl	f8c <printk>
    bece:	4040      	eors	r0, r0
    bed0:	f380 8811 	msr	BASEPRI, r0
    bed4:	f04f 0004 	mov.w	r0, #4
    bed8:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    beda:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    bedc:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    bee0:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    bee2:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    bee6:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    beea:	f1b9 0f00 	cmp.w	r9, #0
    beee:	d013      	beq.n	bf18 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    bef0:	f007 fd34 	bl	1395c <radio_rssi_get>
			     pdu_adv_rx->len] =
    bef4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bef8:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    befc:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    befe:	442b      	add	r3, r5
    bf00:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    bf02:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    bf04:	441d      	add	r5, r3
    bf06:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    bf08:	f7ff ff26 	bl	bd58 <packet_rx_enqueue>
	return 0;
    bf0c:	2000      	movs	r0, #0
}
    bf0e:	b003      	add	sp, #12
    bf10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    bf14:	2302      	movs	r3, #2
    bf16:	e7e1      	b.n	bedc <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    bf18:	207f      	movs	r0, #127	; 0x7f
    bf1a:	e7ed      	b.n	bef8 <isr_rx_scan_report+0x70>
		return 1;
    bf1c:	2001      	movs	r0, #1
    bf1e:	e7f6      	b.n	bf0e <isr_rx_scan_report+0x86>
    bf20:	200008e8 	.word	0x200008e8
    bf24:	00015e19 	.word	0x00015e19
    bf28:	000171f2 	.word	0x000171f2
    bf2c:	00019328 	.word	0x00019328
    bf30:	00017241 	.word	0x00017241
    bf34:	00017166 	.word	0x00017166

0000bf38 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    bf38:	4a0b      	ldr	r2, [pc, #44]	; (bf68 <rx_fc_lock+0x30>)
    bf3a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bf3e:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    bf42:	4299      	cmp	r1, r3
    bf44:	d10e      	bne.n	bf64 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    bf46:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bf4a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    bf4e:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    bf52:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bf56:	3301      	adds	r3, #1
    bf58:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    bf5a:	2b03      	cmp	r3, #3
    bf5c:	bf08      	it	eq
    bf5e:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    bf60:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    bf64:	4770      	bx	lr
    bf66:	bf00      	nop
    bf68:	200008e8 	.word	0x200008e8

0000bf6c <ticker_success_assert>:
{
    bf6c:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bf6e:	b170      	cbz	r0, bf8e <ticker_success_assert+0x22>
    bf70:	4b08      	ldr	r3, [pc, #32]	; (bf94 <ticker_success_assert+0x28>)
    bf72:	9301      	str	r3, [sp, #4]
    bf74:	9300      	str	r3, [sp, #0]
    bf76:	4a08      	ldr	r2, [pc, #32]	; (bf98 <ticker_success_assert+0x2c>)
    bf78:	4b08      	ldr	r3, [pc, #32]	; (bf9c <ticker_success_assert+0x30>)
    bf7a:	4909      	ldr	r1, [pc, #36]	; (bfa0 <ticker_success_assert+0x34>)
    bf7c:	4809      	ldr	r0, [pc, #36]	; (bfa4 <ticker_success_assert+0x38>)
    bf7e:	f7f5 f805 	bl	f8c <printk>
    bf82:	4040      	eors	r0, r0
    bf84:	f380 8811 	msr	BASEPRI, r0
    bf88:	f04f 0004 	mov.w	r0, #4
    bf8c:	df02      	svc	2
}
    bf8e:	b003      	add	sp, #12
    bf90:	f85d fb04 	ldr.w	pc, [sp], #4
    bf94:	00015e19 	.word	0x00015e19
    bf98:	000171f2 	.word	0x000171f2
    bf9c:	00019411 	.word	0x00019411
    bfa0:	00017241 	.word	0x00017241
    bfa4:	0001a378 	.word	0x0001a378

0000bfa8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    bfa8:	2801      	cmp	r0, #1
{
    bfaa:	b507      	push	{r0, r1, r2, lr}
    bfac:	4b11      	ldr	r3, [pc, #68]	; (bff4 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    bfae:	d116      	bne.n	bfde <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    bfb0:	7c9a      	ldrb	r2, [r3, #18]
    bfb2:	2a05      	cmp	r2, #5
    bfb4:	d104      	bne.n	bfc0 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    bfb6:	2200      	movs	r2, #0
    bfb8:	749a      	strb	r2, [r3, #18]
}
    bfba:	b003      	add	sp, #12
    bfbc:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    bfc0:	4b0d      	ldr	r3, [pc, #52]	; (bff8 <ticker_stop_adv_assert+0x50>)
    bfc2:	9301      	str	r3, [sp, #4]
    bfc4:	9300      	str	r3, [sp, #0]
    bfc6:	4a0d      	ldr	r2, [pc, #52]	; (bffc <ticker_stop_adv_assert+0x54>)
    bfc8:	4b0d      	ldr	r3, [pc, #52]	; (c000 <ticker_stop_adv_assert+0x58>)
    bfca:	490e      	ldr	r1, [pc, #56]	; (c004 <ticker_stop_adv_assert+0x5c>)
    bfcc:	480e      	ldr	r0, [pc, #56]	; (c008 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    bfce:	f7f4 ffdd 	bl	f8c <printk>
    bfd2:	4040      	eors	r0, r0
    bfd4:	f380 8811 	msr	BASEPRI, r0
    bfd8:	f04f 0004 	mov.w	r0, #4
    bfdc:	df02      	svc	2
    bfde:	7c1b      	ldrb	r3, [r3, #16]
    bfe0:	2b05      	cmp	r3, #5
    bfe2:	d1ea      	bne.n	bfba <ticker_stop_adv_assert+0x12>
    bfe4:	4b04      	ldr	r3, [pc, #16]	; (bff8 <ticker_stop_adv_assert+0x50>)
    bfe6:	9301      	str	r3, [sp, #4]
    bfe8:	9300      	str	r3, [sp, #0]
    bfea:	4a04      	ldr	r2, [pc, #16]	; (bffc <ticker_stop_adv_assert+0x54>)
    bfec:	4b04      	ldr	r3, [pc, #16]	; (c000 <ticker_stop_adv_assert+0x58>)
    bfee:	4905      	ldr	r1, [pc, #20]	; (c004 <ticker_stop_adv_assert+0x5c>)
    bff0:	4806      	ldr	r0, [pc, #24]	; (c00c <ticker_stop_adv_assert+0x64>)
    bff2:	e7ec      	b.n	bfce <ticker_stop_adv_assert+0x26>
    bff4:	200008e8 	.word	0x200008e8
    bff8:	00015e19 	.word	0x00015e19
    bffc:	000171f2 	.word	0x000171f2
    c000:	00019427 	.word	0x00019427
    c004:	00017241 	.word	0x00017241
    c008:	00017166 	.word	0x00017166
    c00c:	0001a2fa 	.word	0x0001a2fa

0000c010 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    c010:	2801      	cmp	r0, #1
{
    c012:	b507      	push	{r0, r1, r2, lr}
    c014:	4b11      	ldr	r3, [pc, #68]	; (c05c <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    c016:	d116      	bne.n	c046 <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    c018:	7c9a      	ldrb	r2, [r3, #18]
    c01a:	2a06      	cmp	r2, #6
    c01c:	d104      	bne.n	c028 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    c01e:	2200      	movs	r2, #0
    c020:	749a      	strb	r2, [r3, #18]
}
    c022:	b003      	add	sp, #12
    c024:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    c028:	4b0d      	ldr	r3, [pc, #52]	; (c060 <ticker_stop_scan_assert+0x50>)
    c02a:	9301      	str	r3, [sp, #4]
    c02c:	9300      	str	r3, [sp, #0]
    c02e:	4a0d      	ldr	r2, [pc, #52]	; (c064 <ticker_stop_scan_assert+0x54>)
    c030:	4b0d      	ldr	r3, [pc, #52]	; (c068 <ticker_stop_scan_assert+0x58>)
    c032:	490e      	ldr	r1, [pc, #56]	; (c06c <ticker_stop_scan_assert+0x5c>)
    c034:	480e      	ldr	r0, [pc, #56]	; (c070 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    c036:	f7f4 ffa9 	bl	f8c <printk>
    c03a:	4040      	eors	r0, r0
    c03c:	f380 8811 	msr	BASEPRI, r0
    c040:	f04f 0004 	mov.w	r0, #4
    c044:	df02      	svc	2
    c046:	7c1b      	ldrb	r3, [r3, #16]
    c048:	2b06      	cmp	r3, #6
    c04a:	d1ea      	bne.n	c022 <ticker_stop_scan_assert+0x12>
    c04c:	4b04      	ldr	r3, [pc, #16]	; (c060 <ticker_stop_scan_assert+0x50>)
    c04e:	9301      	str	r3, [sp, #4]
    c050:	9300      	str	r3, [sp, #0]
    c052:	4a04      	ldr	r2, [pc, #16]	; (c064 <ticker_stop_scan_assert+0x54>)
    c054:	4b04      	ldr	r3, [pc, #16]	; (c068 <ticker_stop_scan_assert+0x58>)
    c056:	4905      	ldr	r1, [pc, #20]	; (c06c <ticker_stop_scan_assert+0x5c>)
    c058:	4806      	ldr	r0, [pc, #24]	; (c074 <ticker_stop_scan_assert+0x64>)
    c05a:	e7ec      	b.n	c036 <ticker_stop_scan_assert+0x26>
    c05c:	200008e8 	.word	0x200008e8
    c060:	00015e19 	.word	0x00015e19
    c064:	000171f2 	.word	0x000171f2
    c068:	0001943e 	.word	0x0001943e
    c06c:	00017241 	.word	0x00017241
    c070:	00017166 	.word	0x00017166
    c074:	0001a339 	.word	0x0001a339

0000c078 <ticker_update_adv_assert>:
{
    c078:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    c07a:	b190      	cbz	r0, c0a2 <ticker_update_adv_assert+0x2a>
    c07c:	4b0a      	ldr	r3, [pc, #40]	; (c0a8 <ticker_update_adv_assert+0x30>)
    c07e:	7c9b      	ldrb	r3, [r3, #18]
    c080:	2b05      	cmp	r3, #5
    c082:	d00e      	beq.n	c0a2 <ticker_update_adv_assert+0x2a>
    c084:	4b09      	ldr	r3, [pc, #36]	; (c0ac <ticker_update_adv_assert+0x34>)
    c086:	9301      	str	r3, [sp, #4]
    c088:	9300      	str	r3, [sp, #0]
    c08a:	4a09      	ldr	r2, [pc, #36]	; (c0b0 <ticker_update_adv_assert+0x38>)
    c08c:	4b09      	ldr	r3, [pc, #36]	; (c0b4 <ticker_update_adv_assert+0x3c>)
    c08e:	490a      	ldr	r1, [pc, #40]	; (c0b8 <ticker_update_adv_assert+0x40>)
    c090:	480a      	ldr	r0, [pc, #40]	; (c0bc <ticker_update_adv_assert+0x44>)
    c092:	f7f4 ff7b 	bl	f8c <printk>
    c096:	4040      	eors	r0, r0
    c098:	f380 8811 	msr	BASEPRI, r0
    c09c:	f04f 0004 	mov.w	r0, #4
    c0a0:	df02      	svc	2
}
    c0a2:	b003      	add	sp, #12
    c0a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c0a8:	200008e8 	.word	0x200008e8
    c0ac:	00015e19 	.word	0x00015e19
    c0b0:	000171f2 	.word	0x000171f2
    c0b4:	00019456 	.word	0x00019456
    c0b8:	00017241 	.word	0x00017241
    c0bc:	0001a3a5 	.word	0x0001a3a5

0000c0c0 <ticker_update_slave_assert>:
{
    c0c0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    c0c2:	b198      	cbz	r0, c0ec <ticker_update_slave_assert+0x2c>
    c0c4:	4b0b      	ldr	r3, [pc, #44]	; (c0f4 <ticker_update_slave_assert+0x34>)
    c0c6:	7c9b      	ldrb	r3, [r3, #18]
    c0c8:	b2c9      	uxtb	r1, r1
    c0ca:	4299      	cmp	r1, r3
    c0cc:	d00e      	beq.n	c0ec <ticker_update_slave_assert+0x2c>
    c0ce:	4b0a      	ldr	r3, [pc, #40]	; (c0f8 <ticker_update_slave_assert+0x38>)
    c0d0:	9301      	str	r3, [sp, #4]
    c0d2:	9300      	str	r3, [sp, #0]
    c0d4:	4a09      	ldr	r2, [pc, #36]	; (c0fc <ticker_update_slave_assert+0x3c>)
    c0d6:	4b0a      	ldr	r3, [pc, #40]	; (c100 <ticker_update_slave_assert+0x40>)
    c0d8:	490a      	ldr	r1, [pc, #40]	; (c104 <ticker_update_slave_assert+0x44>)
    c0da:	480b      	ldr	r0, [pc, #44]	; (c108 <ticker_update_slave_assert+0x48>)
    c0dc:	f7f4 ff56 	bl	f8c <printk>
    c0e0:	4040      	eors	r0, r0
    c0e2:	f380 8811 	msr	BASEPRI, r0
    c0e6:	f04f 0004 	mov.w	r0, #4
    c0ea:	df02      	svc	2
}
    c0ec:	b003      	add	sp, #12
    c0ee:	f85d fb04 	ldr.w	pc, [sp], #4
    c0f2:	bf00      	nop
    c0f4:	200008e8 	.word	0x200008e8
    c0f8:	00015e19 	.word	0x00015e19
    c0fc:	000171f2 	.word	0x000171f2
    c100:	0001946f 	.word	0x0001946f
    c104:	00017241 	.word	0x00017241
    c108:	0001a3f4 	.word	0x0001a3f4

0000c10c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    c10c:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    c10e:	b170      	cbz	r0, c12e <ticker_op_latency_cancelled+0x22>
    c110:	4b0b      	ldr	r3, [pc, #44]	; (c140 <ticker_op_latency_cancelled+0x34>)
    c112:	9301      	str	r3, [sp, #4]
    c114:	9300      	str	r3, [sp, #0]
    c116:	4a0b      	ldr	r2, [pc, #44]	; (c144 <ticker_op_latency_cancelled+0x38>)
    c118:	4b0b      	ldr	r3, [pc, #44]	; (c148 <ticker_op_latency_cancelled+0x3c>)
    c11a:	490c      	ldr	r1, [pc, #48]	; (c14c <ticker_op_latency_cancelled+0x40>)
    c11c:	480c      	ldr	r0, [pc, #48]	; (c150 <ticker_op_latency_cancelled+0x44>)
    c11e:	f7f4 ff35 	bl	f8c <printk>
    c122:	4040      	eors	r0, r0
    c124:	f380 8811 	msr	BASEPRI, r0
    c128:	f04f 0004 	mov.w	r0, #4
    c12c:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    c12e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    c132:	f360 0341 	bfi	r3, r0, #1, #1
    c136:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    c13a:	b003      	add	sp, #12
    c13c:	f85d fb04 	ldr.w	pc, [sp], #4
    c140:	00015e19 	.word	0x00015e19
    c144:	000171f2 	.word	0x000171f2
    c148:	0001974d 	.word	0x0001974d
    c14c:	00017241 	.word	0x00017241
    c150:	0001a2c6 	.word	0x0001a2c6

0000c154 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    c154:	4b04      	ldr	r3, [pc, #16]	; (c168 <ticker_job_disable+0x14>)
    c156:	7d1b      	ldrb	r3, [r3, #20]
    c158:	b123      	cbz	r3, c164 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    c15a:	2101      	movs	r1, #1
    c15c:	2200      	movs	r2, #0
    c15e:	4608      	mov	r0, r1
    c160:	f7fc ba1c 	b.w	859c <mayfly_enable>
    c164:	4770      	bx	lr
    c166:	bf00      	nop
    c168:	200008e8 	.word	0x200008e8

0000c16c <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    c16c:	2806      	cmp	r0, #6
{
    c16e:	b510      	push	{r4, lr}
    c170:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    c172:	d90a      	bls.n	c18a <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c174:	4b09      	ldr	r3, [pc, #36]	; (c19c <hdr_conn_get+0x30>)
    c176:	1fc2      	subs	r2, r0, #7
    c178:	b292      	uxth	r2, r2
    c17a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    c17e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    c182:	f7fc f99d 	bl	84c0 <mem_get>
    c186:	6020      	str	r0, [r4, #0]
    c188:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    c18a:	2805      	cmp	r0, #5
    c18c:	d004      	beq.n	c198 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    c18e:	2806      	cmp	r0, #6
	return NULL;
    c190:	4803      	ldr	r0, [pc, #12]	; (c1a0 <hdr_conn_get+0x34>)
    c192:	bf18      	it	ne
    c194:	2000      	movne	r0, #0
    c196:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    c198:	4802      	ldr	r0, [pc, #8]	; (c1a4 <hdr_conn_get+0x38>)
}
    c19a:	bd10      	pop	{r4, pc}
    c19c:	200008e8 	.word	0x200008e8
    c1a0:	200009b8 	.word	0x200009b8
    c1a4:	20000900 	.word	0x20000900

0000c1a8 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    c1a8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    c1aa:	4b07      	ldr	r3, [pc, #28]	; (c1c8 <event_stop.part.10+0x20>)
    c1ac:	9301      	str	r3, [sp, #4]
    c1ae:	9300      	str	r3, [sp, #0]
    c1b0:	4a06      	ldr	r2, [pc, #24]	; (c1cc <event_stop.part.10+0x24>)
    c1b2:	4b07      	ldr	r3, [pc, #28]	; (c1d0 <event_stop.part.10+0x28>)
    c1b4:	4907      	ldr	r1, [pc, #28]	; (c1d4 <event_stop.part.10+0x2c>)
    c1b6:	4808      	ldr	r0, [pc, #32]	; (c1d8 <event_stop.part.10+0x30>)
    c1b8:	f7f4 fee8 	bl	f8c <printk>
    c1bc:	4040      	eors	r0, r0
    c1be:	f380 8811 	msr	BASEPRI, r0
    c1c2:	f04f 0004 	mov.w	r0, #4
    c1c6:	df02      	svc	2
    c1c8:	00015e19 	.word	0x00015e19
    c1cc:	000171f2 	.word	0x000171f2
    c1d0:	0001956e 	.word	0x0001956e
    c1d4:	00017241 	.word	0x00017241
    c1d8:	00019edb 	.word	0x00019edb

0000c1dc <event_stop>:
	s_mfy_radio_stop.param = context;
    c1dc:	4a06      	ldr	r2, [pc, #24]	; (c1f8 <event_stop+0x1c>)
{
    c1de:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    c1e0:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c1e2:	4613      	mov	r3, r2
    c1e4:	2200      	movs	r2, #0
    c1e6:	4611      	mov	r1, r2
    c1e8:	4610      	mov	r0, r2
    c1ea:	f7fc f9ff 	bl	85ec <mayfly_enqueue>
	LL_ASSERT(!retval);
    c1ee:	b108      	cbz	r0, c1f4 <event_stop+0x18>
    c1f0:	f7ff ffda 	bl	c1a8 <event_stop.part.10>
    c1f4:	bd08      	pop	{r3, pc}
    c1f6:	bf00      	nop
    c1f8:	20003d90 	.word	0x20003d90

0000c1fc <event_active>:
{
    c1fc:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c1fe:	2200      	movs	r2, #0
    c200:	4b0b      	ldr	r3, [pc, #44]	; (c230 <event_active+0x34>)
    c202:	4611      	mov	r1, r2
    c204:	4610      	mov	r0, r2
    c206:	f7fc f9f1 	bl	85ec <mayfly_enqueue>
	LL_ASSERT(!retval);
    c20a:	b170      	cbz	r0, c22a <event_active+0x2e>
    c20c:	4b09      	ldr	r3, [pc, #36]	; (c234 <event_active+0x38>)
    c20e:	9301      	str	r3, [sp, #4]
    c210:	9300      	str	r3, [sp, #0]
    c212:	4a09      	ldr	r2, [pc, #36]	; (c238 <event_active+0x3c>)
    c214:	4b09      	ldr	r3, [pc, #36]	; (c23c <event_active+0x40>)
    c216:	490a      	ldr	r1, [pc, #40]	; (c240 <event_active+0x44>)
    c218:	480a      	ldr	r0, [pc, #40]	; (c244 <event_active+0x48>)
    c21a:	f7f4 feb7 	bl	f8c <printk>
    c21e:	4040      	eors	r0, r0
    c220:	f380 8811 	msr	BASEPRI, r0
    c224:	f04f 0004 	mov.w	r0, #4
    c228:	df02      	svc	2
}
    c22a:	b003      	add	sp, #12
    c22c:	f85d fb04 	ldr.w	pc, [sp], #4
    c230:	20003d60 	.word	0x20003d60
    c234:	00015e19 	.word	0x00015e19
    c238:	000171f2 	.word	0x000171f2
    c23c:	0001949e 	.word	0x0001949e
    c240:	00017241 	.word	0x00017241
    c244:	00019edb 	.word	0x00019edb

0000c248 <event_xtal>:
{
    c248:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c24a:	2200      	movs	r2, #0
    c24c:	4b0b      	ldr	r3, [pc, #44]	; (c27c <event_xtal+0x34>)
    c24e:	4611      	mov	r1, r2
    c250:	4610      	mov	r0, r2
    c252:	f7fc f9cb 	bl	85ec <mayfly_enqueue>
	LL_ASSERT(!retval);
    c256:	b170      	cbz	r0, c276 <event_xtal+0x2e>
    c258:	4b09      	ldr	r3, [pc, #36]	; (c280 <event_xtal+0x38>)
    c25a:	9301      	str	r3, [sp, #4]
    c25c:	9300      	str	r3, [sp, #0]
    c25e:	4a09      	ldr	r2, [pc, #36]	; (c284 <event_xtal+0x3c>)
    c260:	4b09      	ldr	r3, [pc, #36]	; (c288 <event_xtal+0x40>)
    c262:	490a      	ldr	r1, [pc, #40]	; (c28c <event_xtal+0x44>)
    c264:	480a      	ldr	r0, [pc, #40]	; (c290 <event_xtal+0x48>)
    c266:	f7f4 fe91 	bl	f8c <printk>
    c26a:	4040      	eors	r0, r0
    c26c:	f380 8811 	msr	BASEPRI, r0
    c270:	f04f 0004 	mov.w	r0, #4
    c274:	df02      	svc	2
}
    c276:	b003      	add	sp, #12
    c278:	f85d fb04 	ldr.w	pc, [sp], #4
    c27c:	20003de0 	.word	0x20003de0
    c280:	00015e19 	.word	0x00015e19
    c284:	000171f2 	.word	0x000171f2
    c288:	000194ba 	.word	0x000194ba
    c28c:	00017241 	.word	0x00017241
    c290:	00019edb 	.word	0x00019edb

0000c294 <mayfly_radio_active>:
{
    c294:	b507      	push	{r0, r1, r2, lr}
    c296:	4a12      	ldr	r2, [pc, #72]	; (c2e0 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    c298:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    c29a:	b140      	cbz	r0, c2ae <mayfly_radio_active+0x1a>
		if (s_active++) {
    c29c:	1c59      	adds	r1, r3, #1
    c29e:	7011      	strb	r1, [r2, #0]
    c2a0:	b9d3      	cbnz	r3, c2d8 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    c2a2:	2001      	movs	r0, #1
}
    c2a4:	b003      	add	sp, #12
    c2a6:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    c2aa:	f006 b92d 	b.w	12508 <radio_active_callback>
		LL_ASSERT(s_active);
    c2ae:	b973      	cbnz	r3, c2ce <mayfly_radio_active+0x3a>
    c2b0:	4b0c      	ldr	r3, [pc, #48]	; (c2e4 <mayfly_radio_active+0x50>)
    c2b2:	9301      	str	r3, [sp, #4]
    c2b4:	9300      	str	r3, [sp, #0]
    c2b6:	4a0c      	ldr	r2, [pc, #48]	; (c2e8 <mayfly_radio_active+0x54>)
    c2b8:	4b0c      	ldr	r3, [pc, #48]	; (c2ec <mayfly_radio_active+0x58>)
    c2ba:	490d      	ldr	r1, [pc, #52]	; (c2f0 <mayfly_radio_active+0x5c>)
    c2bc:	480d      	ldr	r0, [pc, #52]	; (c2f4 <mayfly_radio_active+0x60>)
    c2be:	f7f4 fe65 	bl	f8c <printk>
    c2c2:	4040      	eors	r0, r0
    c2c4:	f380 8811 	msr	BASEPRI, r0
    c2c8:	f04f 0004 	mov.w	r0, #4
    c2cc:	df02      	svc	2
		if (--s_active) {
    c2ce:	3b01      	subs	r3, #1
    c2d0:	b2db      	uxtb	r3, r3
    c2d2:	7013      	strb	r3, [r2, #0]
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d0e5      	beq.n	c2a4 <mayfly_radio_active+0x10>
}
    c2d8:	b003      	add	sp, #12
    c2da:	f85d fb04 	ldr.w	pc, [sp], #4
    c2de:	bf00      	nop
    c2e0:	20000a8c 	.word	0x20000a8c
    c2e4:	00015e19 	.word	0x00015e19
    c2e8:	000171f2 	.word	0x000171f2
    c2ec:	0001948a 	.word	0x0001948a
    c2f0:	00017241 	.word	0x00017241
    c2f4:	00019e30 	.word	0x00019e30

0000c2f8 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    c2f8:	2000      	movs	r0, #0
    c2fa:	f7ff bfcb 	b.w	c294 <mayfly_radio_active>
	...

0000c300 <mayfly_radio_stop>:
{
    c300:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    c302:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    c304:	1f03      	subs	r3, r0, #4
    c306:	2b01      	cmp	r3, #1
    c308:	d90e      	bls.n	c328 <mayfly_radio_stop+0x28>
    c30a:	4b11      	ldr	r3, [pc, #68]	; (c350 <mayfly_radio_stop+0x50>)
    c30c:	9301      	str	r3, [sp, #4]
    c30e:	9300      	str	r3, [sp, #0]
    c310:	4a10      	ldr	r2, [pc, #64]	; (c354 <mayfly_radio_stop+0x54>)
    c312:	4b11      	ldr	r3, [pc, #68]	; (c358 <mayfly_radio_stop+0x58>)
    c314:	4911      	ldr	r1, [pc, #68]	; (c35c <mayfly_radio_stop+0x5c>)
    c316:	4812      	ldr	r0, [pc, #72]	; (c360 <mayfly_radio_stop+0x60>)
    c318:	f7f4 fe38 	bl	f8c <printk>
    c31c:	4040      	eors	r0, r0
    c31e:	f380 8811 	msr	BASEPRI, r0
    c322:	f04f 0004 	mov.w	r0, #4
    c326:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    c328:	4a0e      	ldr	r2, [pc, #56]	; (c364 <mayfly_radio_stop+0x64>)
    c32a:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    c32c:	b143      	cbz	r3, c340 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    c32e:	3b04      	subs	r3, #4
    c330:	2b01      	cmp	r3, #1
    c332:	d905      	bls.n	c340 <mayfly_radio_stop+0x40>
			_radio.state = state;
    c334:	7510      	strb	r0, [r2, #20]
}
    c336:	b003      	add	sp, #12
    c338:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    c33c:	f007 ba86 	b.w	1384c <radio_disable>
	if (radio_used || !radio_is_idle()) {
    c340:	f007 fab6 	bl	138b0 <radio_is_idle>
    c344:	2800      	cmp	r0, #0
    c346:	d0f6      	beq.n	c336 <mayfly_radio_stop+0x36>
}
    c348:	b003      	add	sp, #12
    c34a:	f85d fb04 	ldr.w	pc, [sp], #4
    c34e:	bf00      	nop
    c350:	00015e19 	.word	0x00015e19
    c354:	000171f2 	.word	0x000171f2
    c358:	0001955c 	.word	0x0001955c
    c35c:	00017241 	.word	0x00017241
    c360:	00019e5a 	.word	0x00019e5a
    c364:	200008e8 	.word	0x200008e8

0000c368 <pdu_node_tx_release>:
{
    c368:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    c36a:	4a17      	ldr	r2, [pc, #92]	; (c3c8 <pdu_node_tx_release+0x60>)
    c36c:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    c370:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    c374:	3301      	adds	r3, #1
    c376:	b2db      	uxtb	r3, r3
		last = 0;
    c378:	429c      	cmp	r4, r3
    c37a:	bf08      	it	eq
    c37c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    c37e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    c382:	429c      	cmp	r4, r3
    c384:	d10e      	bne.n	c3a4 <pdu_node_tx_release+0x3c>
    c386:	4b11      	ldr	r3, [pc, #68]	; (c3cc <pdu_node_tx_release+0x64>)
    c388:	9301      	str	r3, [sp, #4]
    c38a:	9300      	str	r3, [sp, #0]
    c38c:	4a10      	ldr	r2, [pc, #64]	; (c3d0 <pdu_node_tx_release+0x68>)
    c38e:	4b11      	ldr	r3, [pc, #68]	; (c3d4 <pdu_node_tx_release+0x6c>)
    c390:	4911      	ldr	r1, [pc, #68]	; (c3d8 <pdu_node_tx_release+0x70>)
    c392:	4812      	ldr	r0, [pc, #72]	; (c3dc <pdu_node_tx_release+0x74>)
    c394:	f7f4 fdfa 	bl	f8c <printk>
    c398:	4040      	eors	r0, r0
    c39a:	f380 8811 	msr	BASEPRI, r0
    c39e:	f04f 0004 	mov.w	r0, #4
    c3a2:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    c3a4:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    c3a8:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    c3ac:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    c3b0:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    c3b4:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    c3b8:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    c3ba:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    c3be:	b003      	add	sp, #12
    c3c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    c3c4:	f006 b8a2 	b.w	1250c <radio_event_callback>
    c3c8:	200008e8 	.word	0x200008e8
    c3cc:	00015e19 	.word	0x00015e19
    c3d0:	000171f2 	.word	0x000171f2
    c3d4:	000196a4 	.word	0x000196a4
    c3d8:	00017241 	.word	0x00017241
    c3dc:	00019fab 	.word	0x00019fab

0000c3e0 <packet_tx_enqueue>:
{
    c3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    c3e4:	4c24      	ldr	r4, [pc, #144]	; (c478 <packet_tx_enqueue+0x98>)
{
    c3e6:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    c3e8:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    c3ea:	b12e      	cbz	r6, c3f8 <packet_tx_enqueue+0x18>
    c3ec:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    c3f0:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    c3f4:	429a      	cmp	r2, r3
    c3f6:	d101      	bne.n	c3fc <packet_tx_enqueue+0x1c>
    c3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    c3fc:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    c400:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c404:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    c408:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    c40c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c410:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    c414:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    c416:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c418:	f7fc f852 	bl	84c0 <mem_get>
    c41c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    c41e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    c422:	8c1a      	ldrh	r2, [r3, #32]
    c424:	4282      	cmp	r2, r0
    c426:	d11f      	bne.n	c468 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    c428:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    c42c:	b942      	cbnz	r2, c440 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    c42e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    c432:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    c436:	b91a      	cbnz	r2, c440 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    c438:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    c43c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    c440:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    c444:	b102      	cbz	r2, c448 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    c446:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    c448:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    c44c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    c450:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    c454:	3301      	adds	r3, #1
    c456:	b2db      	uxtb	r3, r3
			first = 0;
    c458:	429a      	cmp	r2, r3
    c45a:	bf08      	it	eq
    c45c:	2300      	moveq	r3, #0
    c45e:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    c460:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    c464:	b2f6      	uxtb	r6, r6
    c466:	e7c0      	b.n	c3ea <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c468:	792b      	ldrb	r3, [r5, #4]
    c46a:	f367 0301 	bfi	r3, r7, #0, #2
    c46e:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    c470:	4629      	mov	r1, r5
    c472:	f7ff ff79 	bl	c368 <pdu_node_tx_release>
    c476:	e7e9      	b.n	c44c <packet_tx_enqueue+0x6c>
    c478:	200008e8 	.word	0x200008e8

0000c47c <connection_release>:
{
    c47c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c47e:	2201      	movs	r2, #1
{
    c480:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c482:	4611      	mov	r1, r2
    c484:	2000      	movs	r0, #0
    c486:	f7fc f889 	bl	859c <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c48a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    c48e:	2100      	movs	r1, #0
    c490:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c494:	3207      	adds	r2, #7
	ticker_status =
    c496:	9300      	str	r3, [sp, #0]
    c498:	4608      	mov	r0, r1
    c49a:	4b3e      	ldr	r3, [pc, #248]	; (c594 <connection_release+0x118>)
    c49c:	b2d2      	uxtb	r2, r2
    c49e:	f7fc ff01 	bl	92a4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c4a2:	f030 0102 	bics.w	r1, r0, #2
    c4a6:	d00e      	beq.n	c4c6 <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c4a8:	4b3b      	ldr	r3, [pc, #236]	; (c598 <connection_release+0x11c>)
    c4aa:	9301      	str	r3, [sp, #4]
    c4ac:	9300      	str	r3, [sp, #0]
    c4ae:	4a3b      	ldr	r2, [pc, #236]	; (c59c <connection_release+0x120>)
    c4b0:	4b3b      	ldr	r3, [pc, #236]	; (c5a0 <connection_release+0x124>)
    c4b2:	493c      	ldr	r1, [pc, #240]	; (c5a4 <connection_release+0x128>)
    c4b4:	483c      	ldr	r0, [pc, #240]	; (c5a8 <connection_release+0x12c>)
    c4b6:	f7f4 fd69 	bl	f8c <printk>
    c4ba:	4040      	eors	r0, r0
    c4bc:	f380 8811 	msr	BASEPRI, r0
    c4c0:	f04f 0004 	mov.w	r0, #4
    c4c4:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    c4c6:	4b39      	ldr	r3, [pc, #228]	; (c5ac <connection_release+0x130>)
    c4c8:	7d1a      	ldrb	r2, [r3, #20]
    c4ca:	2a05      	cmp	r2, #5
    c4cc:	461d      	mov	r5, r3
    c4ce:	d11b      	bne.n	c508 <connection_release+0x8c>
					  conn->handle))) {
    c4d0:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    c4d2:	7c18      	ldrb	r0, [r3, #16]
    c4d4:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    c4d6:	4290      	cmp	r0, r2
    c4d8:	d116      	bne.n	c508 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    c4da:	7419      	strb	r1, [r3, #16]
		ticker_status =
    c4dc:	f242 23fb 	movw	r3, #8955	; 0x22fb
    c4e0:	9300      	str	r3, [sp, #0]
    c4e2:	2201      	movs	r2, #1
    c4e4:	4b2b      	ldr	r3, [pc, #172]	; (c594 <connection_release+0x118>)
    c4e6:	4608      	mov	r0, r1
    c4e8:	f7fc fedc 	bl	92a4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c4ec:	f030 0202 	bics.w	r2, r0, #2
    c4f0:	d1da      	bne.n	c4a8 <connection_release+0x2c>
		ticker_status =
    c4f2:	f242 3302 	movw	r3, #8962	; 0x2302
    c4f6:	9300      	str	r3, [sp, #0]
    c4f8:	4611      	mov	r1, r2
    c4fa:	4b26      	ldr	r3, [pc, #152]	; (c594 <connection_release+0x118>)
    c4fc:	4610      	mov	r0, r2
    c4fe:	f7fc fed1 	bl	92a4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c502:	f030 0302 	bics.w	r3, r0, #2
    c506:	d1cf      	bne.n	c4a8 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    c508:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    c50c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    c510:	4299      	cmp	r1, r3
    c512:	d003      	beq.n	c51c <connection_release+0xa0>
    c514:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c518:	4299      	cmp	r1, r3
    c51a:	d101      	bne.n	c520 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c51c:	4e24      	ldr	r6, [pc, #144]	; (c5b0 <connection_release+0x134>)
    c51e:	e012      	b.n	c546 <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c520:	790b      	ldrb	r3, [r1, #4]
    c522:	f36f 0301 	bfc	r3, #0, #2
    c526:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c528:	680b      	ldr	r3, [r1, #0]
    c52a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    c52e:	8c20      	ldrh	r0, [r4, #32]
    c530:	f7ff ff1a 	bl	c368 <pdu_node_tx_release>
    c534:	e7e8      	b.n	c508 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c536:	6803      	ldr	r3, [r0, #0]
    c538:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    c53c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c540:	4631      	mov	r1, r6
    c542:	f7fb ffa2 	bl	848a <mem_release>
	while ((conn->pkt_tx_head) &&
    c546:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    c54a:	b118      	cbz	r0, c554 <connection_release+0xd8>
    c54c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c550:	4298      	cmp	r0, r3
    c552:	d1f0      	bne.n	c536 <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    c554:	2300      	movs	r3, #0
    c556:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    c55a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    c55e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    c562:	b951      	cbnz	r1, c57a <connection_release+0xfe>
	conn->handle = 0xffff;
    c564:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c568:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    c56a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c56e:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    c570:	bf08      	it	eq
    c572:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    c576:	b002      	add	sp, #8
    c578:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c57a:	790b      	ldrb	r3, [r1, #4]
    c57c:	f36f 0301 	bfc	r3, #0, #2
    c580:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c582:	680b      	ldr	r3, [r1, #0]
    c584:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    c588:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    c58c:	8c20      	ldrh	r0, [r4, #32]
    c58e:	f7ff feeb 	bl	c368 <pdu_node_tx_release>
    c592:	e7e4      	b.n	c55e <connection_release+0xe2>
    c594:	0000bf6d 	.word	0x0000bf6d
    c598:	00015e19 	.word	0x00015e19
    c59c:	000171f2 	.word	0x000171f2
    c5a0:	000196b8 	.word	0x000196b8
    c5a4:	00017241 	.word	0x00017241
    c5a8:	000197a1 	.word	0x000197a1
    c5ac:	200008e8 	.word	0x200008e8
    c5b0:	20000a44 	.word	0x20000a44

0000c5b4 <chan_set>:
	switch (chan) {
    c5b4:	2826      	cmp	r0, #38	; 0x26
{
    c5b6:	b513      	push	{r0, r1, r4, lr}
    c5b8:	4604      	mov	r4, r0
	switch (chan) {
    c5ba:	d00c      	beq.n	c5d6 <chan_set+0x22>
    c5bc:	2827      	cmp	r0, #39	; 0x27
    c5be:	d00c      	beq.n	c5da <chan_set+0x26>
    c5c0:	2825      	cmp	r0, #37	; 0x25
    c5c2:	d10c      	bne.n	c5de <chan_set+0x2a>
		radio_freq_chan_set(2);
    c5c4:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    c5c6:	f007 f8bd 	bl	13744 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    c5ca:	4620      	mov	r0, r4
}
    c5cc:	b002      	add	sp, #8
    c5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    c5d2:	f007 b8bd 	b.w	13750 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    c5d6:	201a      	movs	r0, #26
    c5d8:	e7f5      	b.n	c5c6 <chan_set+0x12>
		radio_freq_chan_set(80);
    c5da:	2050      	movs	r0, #80	; 0x50
    c5dc:	e7f3      	b.n	c5c6 <chan_set+0x12>
		if (chan < 11) {
    c5de:	280a      	cmp	r0, #10
    c5e0:	d802      	bhi.n	c5e8 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    c5e2:	3002      	adds	r0, #2
    c5e4:	0040      	lsls	r0, r0, #1
    c5e6:	e7ee      	b.n	c5c6 <chan_set+0x12>
		} else if (chan < 40) {
    c5e8:	2827      	cmp	r0, #39	; 0x27
    c5ea:	d801      	bhi.n	c5f0 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    c5ec:	3003      	adds	r0, #3
    c5ee:	e7f9      	b.n	c5e4 <chan_set+0x30>
			LL_ASSERT(0);
    c5f0:	4b07      	ldr	r3, [pc, #28]	; (c610 <chan_set+0x5c>)
    c5f2:	9301      	str	r3, [sp, #4]
    c5f4:	9300      	str	r3, [sp, #0]
    c5f6:	4a07      	ldr	r2, [pc, #28]	; (c614 <chan_set+0x60>)
    c5f8:	4b07      	ldr	r3, [pc, #28]	; (c618 <chan_set+0x64>)
    c5fa:	4908      	ldr	r1, [pc, #32]	; (c61c <chan_set+0x68>)
    c5fc:	4808      	ldr	r0, [pc, #32]	; (c620 <chan_set+0x6c>)
    c5fe:	f7f4 fcc5 	bl	f8c <printk>
    c602:	4040      	eors	r0, r0
    c604:	f380 8811 	msr	BASEPRI, r0
    c608:	f04f 0004 	mov.w	r0, #4
    c60c:	df02      	svc	2
    c60e:	bf00      	nop
    c610:	00015e19 	.word	0x00015e19
    c614:	000171f2 	.word	0x000171f2
    c618:	0001958e 	.word	0x0001958e
    c61c:	00017241 	.word	0x00017241
    c620:	00017166 	.word	0x00017166

0000c624 <adv_setup>:
{
    c624:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    c626:	4c31      	ldr	r4, [pc, #196]	; (c6ec <adv_setup+0xc8>)
    c628:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    c62c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    c630:	429a      	cmp	r2, r3
    c632:	d051      	beq.n	c6d8 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    c634:	3301      	adds	r3, #1
    c636:	b2db      	uxtb	r3, r3
			first = 0;
    c638:	2b02      	cmp	r3, #2
    c63a:	bf08      	it	eq
    c63c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    c63e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    c642:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    c644:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    c648:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    c64c:	4299      	cmp	r1, r3
    c64e:	d007      	beq.n	c660 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    c650:	3301      	adds	r3, #1
    c652:	b2db      	uxtb	r3, r3
			first = 0;
    c654:	2b02      	cmp	r3, #2
    c656:	bf08      	it	eq
    c658:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    c65a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    c65e:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    c660:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    c664:	2327      	movs	r3, #39	; 0x27
    c666:	212b      	movs	r1, #43	; 0x2b
    c668:	fb13 1505 	smlabb	r5, r3, r5, r1
    c66c:	1966      	adds	r6, r4, r5
	if (upd) {
    c66e:	b142      	cbz	r2, c682 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    c670:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    c674:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    c678:	2206      	movs	r2, #6
    c67a:	1cb1      	adds	r1, r6, #2
    c67c:	307d      	adds	r0, #125	; 0x7d
    c67e:	f7f5 fabd 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    c682:	4630      	mov	r0, r6
    c684:	f007 f8c2 	bl	1380c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    c688:	5d63      	ldrb	r3, [r4, r5]
    c68a:	f003 030f 	and.w	r3, r3, #15
    c68e:	2b02      	cmp	r3, #2
    c690:	d024      	beq.n	c6dc <adv_setup+0xb8>
    c692:	2b07      	cmp	r3, #7
    c694:	d022      	beq.n	c6dc <adv_setup+0xb8>
		_radio.state = STATE_TX;
    c696:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    c698:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    c69a:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    c69c:	f007 f9cc 	bl	13a38 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    c6a0:	2000      	movs	r0, #0
    c6a2:	f007 f92d 	bl	13900 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    c6a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c6aa:	f3c3 0202 	ubfx	r2, r3, #0, #3
    c6ae:	b2d3      	uxtb	r3, r2
    c6b0:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    c6b2:	2000      	movs	r0, #0
    c6b4:	07ce      	lsls	r6, r1, #31
    c6b6:	f100 0501 	add.w	r5, r0, #1
    c6ba:	d514      	bpl.n	c6e6 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    c6bc:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    c6be:	4013      	ands	r3, r2
    c6c0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    c6c4:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    c6c6:	f363 0202 	bfi	r2, r3, #0, #3
    c6ca:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    c6ce:	3025      	adds	r0, #37	; 0x25
}
    c6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    c6d4:	f7ff bf6e 	b.w	c5b4 <chan_set>
	u8_t upd = 0;
    c6d8:	2200      	movs	r2, #0
    c6da:	e7b3      	b.n	c644 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    c6dc:	2303      	movs	r3, #3
    c6de:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    c6e0:	f007 f924 	bl	1392c <radio_switch_complete_and_disable>
    c6e4:	e7df      	b.n	c6a6 <adv_setup+0x82>
		bitmap >>= 1;
    c6e6:	0849      	lsrs	r1, r1, #1
    c6e8:	4628      	mov	r0, r5
    c6ea:	e7e3      	b.n	c6b4 <adv_setup+0x90>
    c6ec:	200008e8 	.word	0x200008e8

0000c6f0 <sched_after_mstr_free_offset_get>:
{
    c6f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c6f2:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    c6f4:	aa04      	add	r2, sp, #16
{
    c6f6:	461c      	mov	r4, r3
    c6f8:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    c6fa:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    c6fe:	3127      	adds	r1, #39	; 0x27
    c700:	2001      	movs	r0, #1
    c702:	f7ff fa5d 	bl	bbc0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    c706:	6823      	ldr	r3, [r4, #0]
    c708:	b363      	cbz	r3, c764 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    c70a:	9803      	ldr	r0, [sp, #12]
    c70c:	1b83      	subs	r3, r0, r6
    c70e:	021b      	lsls	r3, r3, #8
    c710:	d50e      	bpl.n	c730 <sched_after_mstr_free_offset_get+0x40>
    c712:	4b19      	ldr	r3, [pc, #100]	; (c778 <sched_after_mstr_free_offset_get+0x88>)
    c714:	9301      	str	r3, [sp, #4]
    c716:	9300      	str	r3, [sp, #0]
    c718:	4a18      	ldr	r2, [pc, #96]	; (c77c <sched_after_mstr_free_offset_get+0x8c>)
    c71a:	4b19      	ldr	r3, [pc, #100]	; (c780 <sched_after_mstr_free_offset_get+0x90>)
    c71c:	4919      	ldr	r1, [pc, #100]	; (c784 <sched_after_mstr_free_offset_get+0x94>)
    c71e:	481a      	ldr	r0, [pc, #104]	; (c788 <sched_after_mstr_free_offset_get+0x98>)
    c720:	f7f4 fc34 	bl	f8c <printk>
    c724:	4040      	eors	r0, r0
    c726:	f380 8811 	msr	BASEPRI, r0
    c72a:	f04f 0004 	mov.w	r0, #4
    c72e:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    c730:	4631      	mov	r1, r6
    c732:	f7fc fe89 	bl	9448 <ticker_ticks_diff_get>
    c736:	4602      	mov	r2, r0
    c738:	4814      	ldr	r0, [pc, #80]	; (c78c <sched_after_mstr_free_offset_get+0x9c>)
    c73a:	2307      	movs	r3, #7
    c73c:	fba2 0100 	umull	r0, r1, r2, r0
    c740:	fb03 1102 	mla	r1, r3, r2, r1
    c744:	a30a      	add	r3, pc, #40	; (adr r3, c770 <sched_after_mstr_free_offset_get+0x80>)
    c746:	e9d3 2300 	ldrd	r2, r3, [r3]
    c74a:	f7f3 fd63 	bl	214 <__aeabi_uldivmod>
    c74e:	6823      	ldr	r3, [r4, #0]
    c750:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    c752:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    c754:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    c756:	db05      	blt.n	c764 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    c758:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c75c:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    c75e:	6823      	ldr	r3, [r4, #0]
    c760:	4298      	cmp	r0, r3
    c762:	d301      	bcc.n	c768 <sched_after_mstr_free_offset_get+0x78>
}
    c764:	b004      	add	sp, #16
    c766:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    c768:	1a1b      	subs	r3, r3, r0
    c76a:	6023      	str	r3, [r4, #0]
    c76c:	e7f7      	b.n	c75e <sched_after_mstr_free_offset_get+0x6e>
    c76e:	bf00      	nop
    c770:	3b9aca00 	.word	0x3b9aca00
    c774:	00000000 	.word	0x00000000
    c778:	00015e19 	.word	0x00015e19
    c77c:	000171f2 	.word	0x000171f2
    c780:	00019520 	.word	0x00019520
    c784:	00017241 	.word	0x00017241
    c788:	0001a207 	.word	0x0001a207
    c78c:	1afd498d 	.word	0x1afd498d

0000c790 <mayfly_sched_win_offset_use>:
{
    c790:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    c792:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    c796:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    c798:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    c79c:	68c1      	ldr	r1, [r0, #12]
    c79e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    c7a0:	f7ff ffa6 	bl	c6f0 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c7a4:	a902      	add	r1, sp, #8
    c7a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c7aa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c7ae:	f240 42e2 	movw	r2, #1250	; 0x4e2
    c7b2:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c7b6:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c7b8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c7bc:	f7f5 fa1e 	bl	1bfc <memcpy>
}
    c7c0:	b002      	add	sp, #8
    c7c2:	bd10      	pop	{r4, pc}

0000c7c4 <mayfly_sched_after_mstr_free_offset_get>:
{
    c7c4:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    c7c6:	4c05      	ldr	r4, [pc, #20]	; (c7dc <mayfly_sched_after_mstr_free_offset_get+0x18>)
    c7c8:	4602      	mov	r2, r0
    c7ca:	f504 7382 	add.w	r3, r4, #260	; 0x104
    c7ce:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    c7d2:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    c7d6:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    c7d8:	f7ff bf8a 	b.w	c6f0 <sched_after_mstr_free_offset_get>
    c7dc:	200008e8 	.word	0x200008e8

0000c7e0 <terminate_ind_rx_enqueue>:
{
    c7e0:	b513      	push	{r0, r1, r4, lr}
    c7e2:	4603      	mov	r3, r0
    c7e4:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    c7e6:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    c7ea:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    c7ee:	b970      	cbnz	r0, c80e <terminate_ind_rx_enqueue+0x2e>
    c7f0:	4b16      	ldr	r3, [pc, #88]	; (c84c <terminate_ind_rx_enqueue+0x6c>)
    c7f2:	9301      	str	r3, [sp, #4]
    c7f4:	9300      	str	r3, [sp, #0]
    c7f6:	4a16      	ldr	r2, [pc, #88]	; (c850 <terminate_ind_rx_enqueue+0x70>)
    c7f8:	4b16      	ldr	r3, [pc, #88]	; (c854 <terminate_ind_rx_enqueue+0x74>)
    c7fa:	4917      	ldr	r1, [pc, #92]	; (c858 <terminate_ind_rx_enqueue+0x78>)
    c7fc:	4817      	ldr	r0, [pc, #92]	; (c85c <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    c7fe:	f7f4 fbc5 	bl	f8c <printk>
    c802:	4040      	eors	r0, r0
    c804:	f380 8811 	msr	BASEPRI, r0
    c808:	f04f 0004 	mov.w	r0, #4
    c80c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    c80e:	8c1c      	ldrh	r4, [r3, #32]
    c810:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    c814:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c818:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    c81a:	4a11      	ldr	r2, [pc, #68]	; (c860 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c81c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    c820:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    c824:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    c828:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    c82c:	f7fb fe6d 	bl	850a <memq_enqueue>
	LL_ASSERT(link);
    c830:	b938      	cbnz	r0, c842 <terminate_ind_rx_enqueue+0x62>
    c832:	4b06      	ldr	r3, [pc, #24]	; (c84c <terminate_ind_rx_enqueue+0x6c>)
    c834:	9301      	str	r3, [sp, #4]
    c836:	9300      	str	r3, [sp, #0]
    c838:	4a05      	ldr	r2, [pc, #20]	; (c850 <terminate_ind_rx_enqueue+0x70>)
    c83a:	4b06      	ldr	r3, [pc, #24]	; (c854 <terminate_ind_rx_enqueue+0x74>)
    c83c:	4906      	ldr	r1, [pc, #24]	; (c858 <terminate_ind_rx_enqueue+0x78>)
    c83e:	4809      	ldr	r0, [pc, #36]	; (c864 <terminate_ind_rx_enqueue+0x84>)
    c840:	e7dd      	b.n	c7fe <terminate_ind_rx_enqueue+0x1e>
}
    c842:	b002      	add	sp, #8
    c844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    c848:	f005 be60 	b.w	1250c <radio_event_callback>
    c84c:	00015e19 	.word	0x00015e19
    c850:	000171f2 	.word	0x000171f2
    c854:	000196cb 	.word	0x000196cb
    c858:	00017241 	.word	0x00017241
    c85c:	0001a28d 	.word	0x0001a28d
    c860:	200008e8 	.word	0x200008e8
    c864:	0001977b 	.word	0x0001977b

0000c868 <prepare_normal_set>:
{
    c868:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    c86a:	6804      	ldr	r4, [r0, #0]
    c86c:	2c00      	cmp	r4, #0
{
    c86e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    c870:	da26      	bge.n	c8c0 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    c872:	6843      	ldr	r3, [r0, #4]
    c874:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    c876:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    c878:	429d      	cmp	r5, r3
    c87a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    c87e:	bf34      	ite	cc
    c880:	1ae4      	subcc	r4, r4, r3
    c882:	1b64      	subcs	r4, r4, r5
		ticker_status =
    c884:	4b0f      	ldr	r3, [pc, #60]	; (c8c4 <prepare_normal_set+0x5c>)
    c886:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c888:	b2a4      	uxth	r4, r4
		ticker_status =
    c88a:	2300      	movs	r3, #0
    c88c:	9304      	str	r3, [sp, #16]
    c88e:	9303      	str	r3, [sp, #12]
    c890:	9302      	str	r3, [sp, #8]
    c892:	4618      	mov	r0, r3
    c894:	9401      	str	r4, [sp, #4]
    c896:	9400      	str	r4, [sp, #0]
    c898:	f7fc fcb6 	bl	9208 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c89c:	f030 0302 	bics.w	r3, r0, #2
    c8a0:	d00e      	beq.n	c8c0 <prepare_normal_set+0x58>
    c8a2:	4b09      	ldr	r3, [pc, #36]	; (c8c8 <prepare_normal_set+0x60>)
    c8a4:	9301      	str	r3, [sp, #4]
    c8a6:	9300      	str	r3, [sp, #0]
    c8a8:	4a08      	ldr	r2, [pc, #32]	; (c8cc <prepare_normal_set+0x64>)
    c8aa:	4b09      	ldr	r3, [pc, #36]	; (c8d0 <prepare_normal_set+0x68>)
    c8ac:	4909      	ldr	r1, [pc, #36]	; (c8d4 <prepare_normal_set+0x6c>)
    c8ae:	480a      	ldr	r0, [pc, #40]	; (c8d8 <prepare_normal_set+0x70>)
    c8b0:	f7f4 fb6c 	bl	f8c <printk>
    c8b4:	4040      	eors	r0, r0
    c8b6:	f380 8811 	msr	BASEPRI, r0
    c8ba:	f04f 0004 	mov.w	r0, #4
    c8be:	df02      	svc	2
}
    c8c0:	b009      	add	sp, #36	; 0x24
    c8c2:	bd30      	pop	{r4, r5, pc}
    c8c4:	0000b011 	.word	0x0000b011
    c8c8:	00015e19 	.word	0x00015e19
    c8cc:	000171f2 	.word	0x000171f2
    c8d0:	000194d8 	.word	0x000194d8
    c8d4:	00017241 	.word	0x00017241
    c8d8:	000197a1 	.word	0x000197a1
    c8dc:	00000000 	.word	0x00000000

0000c8e0 <mayfly_xtal_stop_calc>:
{
    c8e0:	b570      	push	{r4, r5, r6, lr}
    c8e2:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c8e4:	2302      	movs	r3, #2
    c8e6:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    c8e8:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    c8ea:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c8ec:	4e7e      	ldr	r6, [pc, #504]	; (cae8 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    c8ee:	4d7f      	ldr	r5, [pc, #508]	; (caec <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    c8f0:	930a      	str	r3, [sp, #40]	; 0x28
{
    c8f2:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    c8f4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    c8f6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    c8fa:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c8fc:	ab09      	add	r3, sp, #36	; 0x24
    c8fe:	9302      	str	r3, [sp, #8]
    c900:	ab0c      	add	r3, sp, #48	; 0x30
    c902:	9300      	str	r3, [sp, #0]
    c904:	9601      	str	r6, [sp, #4]
    c906:	ab0d      	add	r3, sp, #52	; 0x34
    c908:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    c90c:	2101      	movs	r1, #1
    c90e:	2000      	movs	r0, #0
    c910:	f7fc fd04 	bl	931c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    c914:	2802      	cmp	r0, #2
    c916:	d014      	beq.n	c942 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    c918:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c91a:	b1b3      	cbz	r3, c94a <mayfly_xtal_stop_calc+0x6a>
    c91c:	4b74      	ldr	r3, [pc, #464]	; (caf0 <mayfly_xtal_stop_calc+0x210>)
    c91e:	9301      	str	r3, [sp, #4]
    c920:	9300      	str	r3, [sp, #0]
    c922:	4a74      	ldr	r2, [pc, #464]	; (caf4 <mayfly_xtal_stop_calc+0x214>)
    c924:	4b74      	ldr	r3, [pc, #464]	; (caf8 <mayfly_xtal_stop_calc+0x218>)
    c926:	4975      	ldr	r1, [pc, #468]	; (cafc <mayfly_xtal_stop_calc+0x21c>)
    c928:	4875      	ldr	r0, [pc, #468]	; (cb00 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    c92a:	f7f4 fb2f 	bl	f8c <printk>
    c92e:	4040      	eors	r0, r0
    c930:	f380 8811 	msr	BASEPRI, r0
    c934:	f04f 0004 	mov.w	r0, #4
    c938:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    c93a:	2101      	movs	r1, #1
    c93c:	2000      	movs	r0, #0
    c93e:	f7fc fd6b 	bl	9418 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    c942:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c944:	2b02      	cmp	r3, #2
    c946:	d0f8      	beq.n	c93a <mayfly_xtal_stop_calc+0x5a>
    c948:	e7e6      	b.n	c918 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    c94a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    c94e:	2bff      	cmp	r3, #255	; 0xff
    c950:	d004      	beq.n	c95c <mayfly_xtal_stop_calc+0x7c>
    c952:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c956:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    c958:	4293      	cmp	r3, r2
    c95a:	dacf      	bge.n	c8fc <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    c95c:	1f5a      	subs	r2, r3, #5
    c95e:	b2d2      	uxtb	r2, r2
    c960:	2af9      	cmp	r2, #249	; 0xf9
    c962:	d805      	bhi.n	c970 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    c964:	4a61      	ldr	r2, [pc, #388]	; (caec <mayfly_xtal_stop_calc+0x20c>)
    c966:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c96a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    c96c:	4293      	cmp	r3, r2
    c96e:	db05      	blt.n	c97c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    c970:	2100      	movs	r1, #0
    c972:	2001      	movs	r0, #1
    c974:	f7fe fe90 	bl	b698 <mayfly_xtal_retain>
}
    c978:	b00e      	add	sp, #56	; 0x38
    c97a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    c97c:	a90a      	add	r1, sp, #40	; 0x28
    c97e:	b2e0      	uxtb	r0, r4
    c980:	f7ff fbf4 	bl	c16c <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    c984:	b938      	cbnz	r0, c996 <mayfly_xtal_stop_calc+0xb6>
    c986:	4b5a      	ldr	r3, [pc, #360]	; (caf0 <mayfly_xtal_stop_calc+0x210>)
    c988:	9301      	str	r3, [sp, #4]
    c98a:	9300      	str	r3, [sp, #0]
    c98c:	4a59      	ldr	r2, [pc, #356]	; (caf4 <mayfly_xtal_stop_calc+0x214>)
    c98e:	4b5a      	ldr	r3, [pc, #360]	; (caf8 <mayfly_xtal_stop_calc+0x218>)
    c990:	495a      	ldr	r1, [pc, #360]	; (cafc <mayfly_xtal_stop_calc+0x21c>)
    c992:	485c      	ldr	r0, [pc, #368]	; (cb04 <mayfly_xtal_stop_calc+0x224>)
    c994:	e7c9      	b.n	c92a <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    c996:	6803      	ldr	r3, [r0, #0]
    c998:	6844      	ldr	r4, [r0, #4]
    c99a:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    c99c:	bfb8      	it	lt
    c99e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    c9a0:	429c      	cmp	r4, r3
    c9a2:	bf38      	it	cc
    c9a4:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    c9a6:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    c9a8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    c9ac:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    c9ae:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    c9b0:	f7ff fbdc 	bl	c16c <hdr_conn_get>
	LL_ASSERT(hdr_next);
    c9b4:	4605      	mov	r5, r0
    c9b6:	b938      	cbnz	r0, c9c8 <mayfly_xtal_stop_calc+0xe8>
    c9b8:	4b4d      	ldr	r3, [pc, #308]	; (caf0 <mayfly_xtal_stop_calc+0x210>)
    c9ba:	9301      	str	r3, [sp, #4]
    c9bc:	9300      	str	r3, [sp, #0]
    c9be:	4a4d      	ldr	r2, [pc, #308]	; (caf4 <mayfly_xtal_stop_calc+0x214>)
    c9c0:	4b4d      	ldr	r3, [pc, #308]	; (caf8 <mayfly_xtal_stop_calc+0x218>)
    c9c2:	494e      	ldr	r1, [pc, #312]	; (cafc <mayfly_xtal_stop_calc+0x21c>)
    c9c4:	4850      	ldr	r0, [pc, #320]	; (cb08 <mayfly_xtal_stop_calc+0x228>)
    c9c6:	e7b0      	b.n	c92a <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    c9c8:	6886      	ldr	r6, [r0, #8]
    c9ca:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    c9cc:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    c9ce:	429e      	cmp	r6, r3
    c9d0:	bf38      	it	cc
    c9d2:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    c9d4:	2a00      	cmp	r2, #0
    c9d6:	da05      	bge.n	c9e4 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    c9d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    c9da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    c9de:	4433      	add	r3, r6
    c9e0:	1a9b      	subs	r3, r3, r2
    c9e2:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    c9e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    c9e6:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    c9ea:	4293      	cmp	r3, r2
    c9ec:	d20a      	bcs.n	ca04 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    c9ee:	2100      	movs	r1, #0
    c9f0:	2001      	movs	r0, #1
    c9f2:	f7fe fe51 	bl	b698 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    c9f6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c9fa:	2101      	movs	r1, #1
    c9fc:	4628      	mov	r0, r5
    c9fe:	f7ff ff33 	bl	c868 <prepare_normal_set>
    ca02:	e7b9      	b.n	c978 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    ca04:	2101      	movs	r1, #1
    ca06:	4608      	mov	r0, r1
    ca08:	f7fe fe46 	bl	b698 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    ca0c:	682b      	ldr	r3, [r5, #0]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	db1c      	blt.n	ca4c <mayfly_xtal_stop_calc+0x16c>
    ca12:	429e      	cmp	r6, r3
    ca14:	d21a      	bcs.n	ca4c <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    ca16:	1b9b      	subs	r3, r3, r6
			ticker_status =
    ca18:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca1a:	b29b      	uxth	r3, r3
			ticker_status =
    ca1c:	493b      	ldr	r1, [pc, #236]	; (cb0c <mayfly_xtal_stop_calc+0x22c>)
    ca1e:	9105      	str	r1, [sp, #20]
    ca20:	9302      	str	r3, [sp, #8]
    ca22:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ca26:	9506      	str	r5, [sp, #24]
    ca28:	9004      	str	r0, [sp, #16]
    ca2a:	9003      	str	r0, [sp, #12]
    ca2c:	9001      	str	r0, [sp, #4]
    ca2e:	9000      	str	r0, [sp, #0]
    ca30:	2101      	movs	r1, #1
    ca32:	f7fc fbe9 	bl	9208 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca36:	f030 0302 	bics.w	r3, r0, #2
    ca3a:	d007      	beq.n	ca4c <mayfly_xtal_stop_calc+0x16c>
    ca3c:	4b2c      	ldr	r3, [pc, #176]	; (caf0 <mayfly_xtal_stop_calc+0x210>)
    ca3e:	9301      	str	r3, [sp, #4]
    ca40:	9300      	str	r3, [sp, #0]
    ca42:	4a2c      	ldr	r2, [pc, #176]	; (caf4 <mayfly_xtal_stop_calc+0x214>)
    ca44:	4b2c      	ldr	r3, [pc, #176]	; (caf8 <mayfly_xtal_stop_calc+0x218>)
    ca46:	492d      	ldr	r1, [pc, #180]	; (cafc <mayfly_xtal_stop_calc+0x21c>)
    ca48:	4831      	ldr	r0, [pc, #196]	; (cb10 <mayfly_xtal_stop_calc+0x230>)
    ca4a:	e76e      	b.n	c92a <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    ca4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    ca4e:	2e00      	cmp	r6, #0
    ca50:	d092      	beq.n	c978 <mayfly_xtal_stop_calc+0x98>
    ca52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ca54:	2d00      	cmp	r5, #0
    ca56:	d08f      	beq.n	c978 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    ca58:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    ca5a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    ca5c:	429a      	cmp	r2, r3
    ca5e:	d18b      	bne.n	c978 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    ca60:	482c      	ldr	r0, [pc, #176]	; (cb14 <mayfly_xtal_stop_calc+0x234>)
    ca62:	b292      	uxth	r2, r2
    ca64:	fba2 0100 	umull	r0, r1, r2, r0
    ca68:	f240 1323 	movw	r3, #291	; 0x123
    ca6c:	fb03 1102 	mla	r1, r3, r2, r1
    ca70:	a31b      	add	r3, pc, #108	; (adr r3, cae0 <mayfly_xtal_stop_calc+0x200>)
    ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca76:	f7f3 fbcd 	bl	214 <__aeabi_uldivmod>
    ca7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    ca80:	2200      	movs	r2, #0
    ca82:	4298      	cmp	r0, r3
    ca84:	d318      	bcc.n	cab8 <mayfly_xtal_stop_calc+0x1d8>
    ca86:	b102      	cbz	r2, ca8a <mayfly_xtal_stop_calc+0x1aa>
    ca88:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    ca8a:	f996 201d 	ldrsb.w	r2, [r6, #29]
    ca8e:	2a00      	cmp	r2, #0
    ca90:	f995 201d 	ldrsb.w	r2, [r5, #29]
    ca94:	da13      	bge.n	cabe <mayfly_xtal_stop_calc+0x1de>
    ca96:	2a00      	cmp	r2, #0
    ca98:	f6ff af6e 	blt.w	c978 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    ca9c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    ca9e:	429c      	cmp	r4, r3
    caa0:	f67f af6a 	bls.w	c978 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    caa4:	4630      	mov	r0, r6
    caa6:	f7fe fafd 	bl	b0a4 <conn_update_req>
				if (status == 2) {
    caaa:	2802      	cmp	r0, #2
    caac:	f47f af64 	bne.w	c978 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    cab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    cab2:	f7fe faf7 	bl	b0a4 <conn_update_req>
    cab6:	e75f      	b.n	c978 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    cab8:	1a1b      	subs	r3, r3, r0
    caba:	2201      	movs	r2, #1
    cabc:	e7e1      	b.n	ca82 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    cabe:	2a00      	cmp	r2, #0
    cac0:	f6bf af5a 	bge.w	c978 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    cac4:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    cac6:	429c      	cmp	r4, r3
    cac8:	f67f af56 	bls.w	c978 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    cacc:	4628      	mov	r0, r5
    cace:	f7fe fae9 	bl	b0a4 <conn_update_req>
				if (status == 2) {
    cad2:	2802      	cmp	r0, #2
    cad4:	f47f af50 	bne.w	c978 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    cad8:	980a      	ldr	r0, [sp, #40]	; 0x28
    cada:	e7ea      	b.n	cab2 <mayfly_xtal_stop_calc+0x1d2>
    cadc:	f3af 8000 	nop.w
    cae0:	1afd498d 	.word	0x1afd498d
    cae4:	00000007 	.word	0x00000007
    cae8:	0000b001 	.word	0x0000b001
    caec:	200008e8 	.word	0x200008e8
    caf0:	00015e19 	.word	0x00015e19
    caf4:	000171f2 	.word	0x000171f2
    caf8:	000194eb 	.word	0x000194eb
    cafc:	00017241 	.word	0x00017241
    cb00:	0001a260 	.word	0x0001a260
    cb04:	00019f04 	.word	0x00019f04
    cb08:	00019f2e 	.word	0x00019f2e
    cb0c:	0000b005 	.word	0x0000b005
    cb10:	000197a1 	.word	0x000197a1
    cb14:	09ce5400 	.word	0x09ce5400

0000cb18 <preempt_calc>:
{
    cb18:	b570      	push	{r4, r5, r6, lr}
    cb1a:	4614      	mov	r4, r2
    cb1c:	460e      	mov	r6, r1
    cb1e:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    cb20:	f7fc fc90 	bl	9444 <ticker_ticks_now_get>
	u32_t diff =
    cb24:	4621      	mov	r1, r4
    cb26:	f7fc fc8f 	bl	9448 <ticker_ticks_diff_get>
	diff += 3;
    cb2a:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    cb2c:	2c09      	cmp	r4, #9
    cb2e:	d90f      	bls.n	cb50 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    cb30:	2100      	movs	r1, #0
    cb32:	4608      	mov	r0, r1
    cb34:	f7fe fdb0 	bl	b698 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    cb38:	4632      	mov	r2, r6
    cb3a:	2100      	movs	r1, #0
    cb3c:	4628      	mov	r0, r5
    cb3e:	f7ff fe93 	bl	c868 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    cb42:	68ab      	ldr	r3, [r5, #8]
    cb44:	441c      	add	r4, r3
		if (diff <
    cb46:	2c26      	cmp	r4, #38	; 0x26
    cb48:	d800      	bhi.n	cb4c <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    cb4a:	60ac      	str	r4, [r5, #8]
		return 1;
    cb4c:	2001      	movs	r0, #1
}
    cb4e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    cb50:	2000      	movs	r0, #0
    cb52:	bd70      	pop	{r4, r5, r6, pc}

0000cb54 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    cb54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    cb56:	ad02      	add	r5, sp, #8
    cb58:	4b10      	ldr	r3, [pc, #64]	; (cb9c <adv_scan_configure.constprop.30+0x48>)
    cb5a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    cb5e:	4604      	mov	r4, r0
	radio_reset();
    cb60:	f006 fdc0 	bl	136e4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    cb64:	2000      	movs	r0, #0
    cb66:	f006 fde7 	bl	13738 <radio_tx_power_set>
	radio_isr_set(isr);
    cb6a:	480d      	ldr	r0, [pc, #52]	; (cba0 <adv_scan_configure.constprop.30+0x4c>)
    cb6c:	f006 fd84 	bl	13678 <radio_isr_set>
	radio_phy_set(phy, flags);
    cb70:	2101      	movs	r1, #1
    cb72:	4620      	mov	r0, r4
    cb74:	f006 fdd0 	bl	13718 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    cb78:	4628      	mov	r0, r5
    cb7a:	f006 fdfb 	bl	13774 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    cb7e:	0062      	lsls	r2, r4, #1
    cb80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    cb84:	2125      	movs	r1, #37	; 0x25
    cb86:	2008      	movs	r0, #8
    cb88:	f006 fe0c 	bl	137a4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cb8c:	4905      	ldr	r1, [pc, #20]	; (cba4 <adv_scan_configure.constprop.30+0x50>)
    cb8e:	f240 605b 	movw	r0, #1627	; 0x65b
    cb92:	f006 fe97 	bl	138c4 <radio_crc_configure>
}
    cb96:	b003      	add	sp, #12
    cb98:	bd30      	pop	{r4, r5, pc}
    cb9a:	bf00      	nop
    cb9c:	8e89bed6 	.word	0x8e89bed6
    cba0:	0000fb01 	.word	0x0000fb01
    cba4:	00555555 	.word	0x00555555

0000cba8 <event_scan>:
{
    cba8:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    cbaa:	4b62      	ldr	r3, [pc, #392]	; (cd34 <event_scan+0x18c>)
    cbac:	7cda      	ldrb	r2, [r3, #19]
{
    cbae:	b08d      	sub	sp, #52	; 0x34
    cbb0:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cbb2:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    cbb6:	461c      	mov	r4, r3
    cbb8:	b172      	cbz	r2, cbd8 <event_scan+0x30>
    cbba:	4b5f      	ldr	r3, [pc, #380]	; (cd38 <event_scan+0x190>)
    cbbc:	9301      	str	r3, [sp, #4]
    cbbe:	9300      	str	r3, [sp, #0]
    cbc0:	4a5e      	ldr	r2, [pc, #376]	; (cd3c <event_scan+0x194>)
    cbc2:	4b5f      	ldr	r3, [pc, #380]	; (cd40 <event_scan+0x198>)
    cbc4:	495f      	ldr	r1, [pc, #380]	; (cd44 <event_scan+0x19c>)
    cbc6:	4860      	ldr	r0, [pc, #384]	; (cd48 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    cbc8:	f7f4 f9e0 	bl	f8c <printk>
    cbcc:	4040      	eors	r0, r0
    cbce:	f380 8811 	msr	BASEPRI, r0
    cbd2:	f04f 0004 	mov.w	r0, #4
    cbd6:	df02      	svc	2
    cbd8:	7c1b      	ldrb	r3, [r3, #16]
    cbda:	b2db      	uxtb	r3, r3
    cbdc:	2b06      	cmp	r3, #6
    cbde:	d007      	beq.n	cbf0 <event_scan+0x48>
    cbe0:	4b55      	ldr	r3, [pc, #340]	; (cd38 <event_scan+0x190>)
    cbe2:	9301      	str	r3, [sp, #4]
    cbe4:	9300      	str	r3, [sp, #0]
    cbe6:	4a55      	ldr	r2, [pc, #340]	; (cd3c <event_scan+0x194>)
    cbe8:	4b55      	ldr	r3, [pc, #340]	; (cd40 <event_scan+0x198>)
    cbea:	4956      	ldr	r1, [pc, #344]	; (cd44 <event_scan+0x19c>)
    cbec:	4857      	ldr	r0, [pc, #348]	; (cd4c <event_scan+0x1a4>)
    cbee:	e7eb      	b.n	cbc8 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    cbf0:	2202      	movs	r2, #2
    cbf2:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    cbf4:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    cbf6:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    cbf8:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    cbfc:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    cbfe:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    cc02:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    cc04:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    cc08:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    cc0c:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    cc0e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    cc12:	f7ff ff9f 	bl	cb54 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    cc16:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    cc1a:	f3c3 0081 	ubfx	r0, r3, #2, #2
    cc1e:	1c42      	adds	r2, r0, #1
    cc20:	f362 0383 	bfi	r3, r2, #2, #2
    cc24:	3025      	adds	r0, #37	; 0x25
    cc26:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    cc2a:	f7ff fcc3 	bl	c5b4 <chan_set>
	if (_radio.scanner.chan == 3) {
    cc2e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    cc32:	f003 020c 	and.w	r2, r3, #12
    cc36:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    cc38:	bf08      	it	eq
    cc3a:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    cc3e:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    cc42:	bf08      	it	eq
    cc44:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    cc48:	f006 fef6 	bl	13a38 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    cc4c:	2300      	movs	r3, #0
    cc4e:	4619      	mov	r1, r3
    cc50:	461a      	mov	r2, r3
    cc52:	4618      	mov	r0, r3
    cc54:	f006 fe60 	bl	13918 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    cc58:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    cc5c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    cc60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    cc64:	3008      	adds	r0, #8
    cc66:	f006 fdcb 	bl	13800 <radio_pkt_rx_set>
	radio_rssi_measure();
    cc6a:	f006 fe6d 	bl	13948 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    cc6e:	f006 f909 	bl	12e84 <ctrl_rl_enabled>
    cc72:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    cc76:	b340      	cbz	r0, ccca <event_scan+0x122>
		struct ll_filter *filter =
    cc78:	f3c3 1000 	ubfx	r0, r3, #4, #1
    cc7c:	f005 ff22 	bl	12ac4 <ctrl_filter_get>
    cc80:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    cc82:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    cc86:	f005 fe4d 	bl	12924 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    cc8a:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    cc8c:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    cc8e:	1cb2      	adds	r2, r6, #2
    cc90:	7830      	ldrb	r0, [r6, #0]
    cc92:	f006 fe7b 	bl	1398c <radio_filter_configure>
		radio_ar_configure(count, irks);
    cc96:	4639      	mov	r1, r7
    cc98:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    cc9c:	f007 f850 	bl	13d40 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cca0:	68e2      	ldr	r2, [r4, #12]
    cca2:	f105 0109 	add.w	r1, r5, #9
    cca6:	2000      	movs	r0, #0
    cca8:	f006 fed2 	bl	13a50 <radio_tmr_start>
	radio_tmr_end_capture();
    ccac:	f006 ffa0 	bl	13bf0 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    ccb0:	2106      	movs	r1, #6
    ccb2:	462a      	mov	r2, r5
    ccb4:	4826      	ldr	r0, [pc, #152]	; (cd50 <event_scan+0x1a8>)
    ccb6:	f7ff ff2f 	bl	cb18 <preempt_calc>
    ccba:	4601      	mov	r1, r0
    ccbc:	b188      	cbz	r0, cce2 <event_scan+0x13a>
		_radio.state = STATE_STOP;
    ccbe:	2304      	movs	r3, #4
    ccc0:	7523      	strb	r3, [r4, #20]
		radio_disable();
    ccc2:	f006 fdc3 	bl	1384c <radio_disable>
}
    ccc6:	b00d      	add	sp, #52	; 0x34
    ccc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    ccca:	f013 0f30 	tst.w	r3, #48	; 0x30
    ccce:	d0e7      	beq.n	cca0 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    ccd0:	2001      	movs	r0, #1
    ccd2:	f005 fef7 	bl	12ac4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    ccd6:	1c82      	adds	r2, r0, #2
    ccd8:	7841      	ldrb	r1, [r0, #1]
    ccda:	7800      	ldrb	r0, [r0, #0]
    ccdc:	f006 fe56 	bl	1398c <radio_filter_configure>
    cce0:	e7de      	b.n	cca0 <event_scan+0xf8>
		ret = ticker_start(
    cce2:	f641 1336 	movw	r3, #6454	; 0x1936
    cce6:	9308      	str	r3, [sp, #32]
    cce8:	4b1a      	ldr	r3, [pc, #104]	; (cd54 <event_scan+0x1ac>)
    ccea:	9307      	str	r3, [sp, #28]
    ccec:	2204      	movs	r2, #4
    ccee:	4b1a      	ldr	r3, [pc, #104]	; (cd58 <event_scan+0x1b0>)
    ccf0:	9206      	str	r2, [sp, #24]
    ccf2:	9305      	str	r3, [sp, #20]
    ccf4:	9004      	str	r0, [sp, #16]
    ccf6:	9003      	str	r0, [sp, #12]
    ccf8:	9002      	str	r0, [sp, #8]
    ccfa:	9001      	str	r0, [sp, #4]
    ccfc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    cd00:	3309      	adds	r3, #9
    cd02:	9300      	str	r3, [sp, #0]
    cd04:	462b      	mov	r3, r5
    cd06:	f7fc fa2f 	bl	9168 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cd0a:	f030 0302 	bics.w	r3, r0, #2
    cd0e:	d007      	beq.n	cd20 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cd10:	4b09      	ldr	r3, [pc, #36]	; (cd38 <event_scan+0x190>)
    cd12:	9301      	str	r3, [sp, #4]
    cd14:	9300      	str	r3, [sp, #0]
    cd16:	4a09      	ldr	r2, [pc, #36]	; (cd3c <event_scan+0x194>)
    cd18:	4b09      	ldr	r3, [pc, #36]	; (cd40 <event_scan+0x198>)
    cd1a:	490a      	ldr	r1, [pc, #40]	; (cd44 <event_scan+0x19c>)
    cd1c:	480f      	ldr	r0, [pc, #60]	; (cd5c <event_scan+0x1b4>)
    cd1e:	e753      	b.n	cbc8 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    cd20:	4619      	mov	r1, r3
    cd22:	4618      	mov	r0, r3
    cd24:	4a0e      	ldr	r2, [pc, #56]	; (cd60 <event_scan+0x1b8>)
    cd26:	f7fc fb3b 	bl	93a0 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cd2a:	f030 0302 	bics.w	r3, r0, #2
    cd2e:	d1ef      	bne.n	cd10 <event_scan+0x168>
    cd30:	e7c9      	b.n	ccc6 <event_scan+0x11e>
    cd32:	bf00      	nop
    cd34:	200008e8 	.word	0x200008e8
    cd38:	00015e19 	.word	0x00015e19
    cd3c:	000171f2 	.word	0x000171f2
    cd40:	000195ba 	.word	0x000195ba
    cd44:	00017241 	.word	0x00017241
    cd48:	000198bd 	.word	0x000198bd
    cd4c:	000198f7 	.word	0x000198f7
    cd50:	200009b8 	.word	0x200009b8
    cd54:	0000bf6d 	.word	0x0000bf6d
    cd58:	0000c1dd 	.word	0x0000c1dd
    cd5c:	00019936 	.word	0x00019936
    cd60:	0000c155 	.word	0x0000c155

0000cd64 <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    cd64:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    cd66:	4b05      	ldr	r3, [pc, #20]	; (cd7c <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cd68:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    cd6a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cd6c:	4611      	mov	r1, r2
    cd6e:	4610      	mov	r0, r2
    cd70:	f7fb fc3c 	bl	85ec <mayfly_enqueue>
	LL_ASSERT(!retval);
    cd74:	b108      	cbz	r0, cd7a <event_stop.constprop.31+0x16>
    cd76:	f7ff fa17 	bl	c1a8 <event_stop.part.10>
    cd7a:	bd08      	pop	{r3, pc}
    cd7c:	20003d90 	.word	0x20003d90

0000cd80 <event_common_prepare>:
{
    cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    cd84:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    cd86:	681d      	ldr	r5, [r3, #0]
{
    cd88:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    cd8a:	2c00      	cmp	r4, #0
{
    cd8c:	4681      	mov	r9, r0
    cd8e:	910b      	str	r1, [sp, #44]	; 0x2c
    cd90:	4690      	mov	r8, r2
    cd92:	469b      	mov	fp, r3
    cd94:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    cd98:	da03      	bge.n	cda2 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    cd9a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    cd9c:	42ac      	cmp	r4, r5
    cd9e:	bf38      	it	cc
    cda0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    cda2:	42ac      	cmp	r4, r5
    cda4:	4f56      	ldr	r7, [pc, #344]	; (cf00 <event_common_prepare+0x180>)
    cda6:	d924      	bls.n	cdf2 <event_common_prepare+0x72>
		ticker_status =
    cda8:	f241 5374 	movw	r3, #5492	; 0x1574
    cdac:	9308      	str	r3, [sp, #32]
    cdae:	4b55      	ldr	r3, [pc, #340]	; (cf04 <event_common_prepare+0x184>)
    cdb0:	9305      	str	r3, [sp, #20]
    cdb2:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    cdb4:	1b63      	subs	r3, r4, r5
		ticker_status =
    cdb6:	9300      	str	r3, [sp, #0]
    cdb8:	9707      	str	r7, [sp, #28]
    cdba:	464b      	mov	r3, r9
    cdbc:	9106      	str	r1, [sp, #24]
    cdbe:	9104      	str	r1, [sp, #16]
    cdc0:	9103      	str	r1, [sp, #12]
    cdc2:	9102      	str	r1, [sp, #8]
    cdc4:	9101      	str	r1, [sp, #4]
    cdc6:	2201      	movs	r2, #1
    cdc8:	4608      	mov	r0, r1
    cdca:	f7fc f9cd 	bl	9168 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cdce:	f030 0302 	bics.w	r3, r0, #2
    cdd2:	d034      	beq.n	ce3e <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cdd4:	4b4c      	ldr	r3, [pc, #304]	; (cf08 <event_common_prepare+0x188>)
    cdd6:	9301      	str	r3, [sp, #4]
    cdd8:	9300      	str	r3, [sp, #0]
    cdda:	4a4c      	ldr	r2, [pc, #304]	; (cf0c <event_common_prepare+0x18c>)
    cddc:	4b4c      	ldr	r3, [pc, #304]	; (cf10 <event_common_prepare+0x190>)
    cdde:	494d      	ldr	r1, [pc, #308]	; (cf14 <event_common_prepare+0x194>)
    cde0:	484d      	ldr	r0, [pc, #308]	; (cf18 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    cde2:	f7f4 f8d3 	bl	f8c <printk>
    cde6:	4040      	eors	r0, r0
    cde8:	f380 8811 	msr	BASEPRI, r0
    cdec:	f04f 0004 	mov.w	r0, #4
    cdf0:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    cdf2:	d21d      	bcs.n	ce30 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    cdf4:	2300      	movs	r3, #0
    cdf6:	461a      	mov	r2, r3
    cdf8:	4619      	mov	r1, r3
    cdfa:	4618      	mov	r0, r3
    cdfc:	f7ff f9fe 	bl	c1fc <event_active>
		ticker_status =
    ce00:	f241 5389 	movw	r3, #5513	; 0x1589
    ce04:	2100      	movs	r1, #0
    ce06:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    ce08:	1b2c      	subs	r4, r5, r4
		ticker_status =
    ce0a:	4b44      	ldr	r3, [pc, #272]	; (cf1c <event_common_prepare+0x19c>)
    ce0c:	9305      	str	r3, [sp, #20]
    ce0e:	9707      	str	r7, [sp, #28]
    ce10:	464b      	mov	r3, r9
    ce12:	9106      	str	r1, [sp, #24]
    ce14:	9104      	str	r1, [sp, #16]
    ce16:	9103      	str	r1, [sp, #12]
    ce18:	9102      	str	r1, [sp, #8]
    ce1a:	9101      	str	r1, [sp, #4]
    ce1c:	9400      	str	r4, [sp, #0]
    ce1e:	2201      	movs	r2, #1
    ce20:	4608      	mov	r0, r1
    ce22:	f7fc f9a1 	bl	9168 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce26:	f030 0302 	bics.w	r3, r0, #2
    ce2a:	d1d3      	bne.n	cdd4 <event_common_prepare+0x54>
    ce2c:	462c      	mov	r4, r5
    ce2e:	e00b      	b.n	ce48 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    ce30:	2300      	movs	r3, #0
    ce32:	461a      	mov	r2, r3
    ce34:	4619      	mov	r1, r3
    ce36:	4618      	mov	r0, r3
    ce38:	f7ff f9e0 	bl	c1fc <event_active>
		event_xtal(0, 0, 0, NULL);
    ce3c:	2300      	movs	r3, #0
    ce3e:	461a      	mov	r2, r3
    ce40:	4619      	mov	r1, r3
    ce42:	4618      	mov	r0, r3
    ce44:	f7ff fa00 	bl	c248 <event_xtal>
	_radio.remainder_anchor = remainder;
    ce48:	4e35      	ldr	r6, [pc, #212]	; (cf20 <event_common_prepare+0x1a0>)
    ce4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce4c:	60f3      	str	r3, [r6, #12]
	ticker_status =
    ce4e:	f241 53a1 	movw	r3, #5537	; 0x15a1
    ce52:	9308      	str	r3, [sp, #32]
    ce54:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ce56:	9306      	str	r3, [sp, #24]
    ce58:	2200      	movs	r2, #0
    ce5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ce5c:	9305      	str	r3, [sp, #20]
    ce5e:	9707      	str	r7, [sp, #28]
    ce60:	464b      	mov	r3, r9
    ce62:	9204      	str	r2, [sp, #16]
    ce64:	9203      	str	r2, [sp, #12]
    ce66:	9202      	str	r2, [sp, #8]
    ce68:	9201      	str	r2, [sp, #4]
    ce6a:	9400      	str	r4, [sp, #0]
    ce6c:	4611      	mov	r1, r2
    ce6e:	4610      	mov	r0, r2
    ce70:	f7fc f97a 	bl	9168 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce74:	f030 0302 	bics.w	r3, r0, #2
    ce78:	d1ac      	bne.n	cdd4 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    ce7a:	2005      	movs	r0, #5
    ce7c:	f7ff ff72 	bl	cd64 <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    ce80:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    ce84:	429d      	cmp	r5, r3
    ce86:	d023      	beq.n	ced0 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    ce88:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    ce8c:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    ce90:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    ce92:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    ce94:	bfbc      	itt	lt
    ce96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    ce9a:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    ce9e:	f8d8 2000 	ldr.w	r2, [r8]
    cea2:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    cea6:	428a      	cmp	r2, r1
    cea8:	bf38      	it	cc
    ceaa:	460a      	movcc	r2, r1
		ticker_status =
    ceac:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ceb0:	b2a3      	uxth	r3, r4
    ceb2:	b292      	uxth	r2, r2
		ticker_status =
    ceb4:	9106      	str	r1, [sp, #24]
    ceb6:	2100      	movs	r1, #0
    ceb8:	9302      	str	r3, [sp, #8]
    ceba:	9201      	str	r2, [sp, #4]
    cebc:	9200      	str	r2, [sp, #0]
    cebe:	9104      	str	r1, [sp, #16]
    cec0:	9103      	str	r1, [sp, #12]
    cec2:	4652      	mov	r2, sl
    cec4:	4608      	mov	r0, r1
    cec6:	f7fc f99f 	bl	9208 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ceca:	f030 0302 	bics.w	r3, r0, #2
    cece:	d181      	bne.n	cdd4 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    ced0:	20ff      	movs	r0, #255	; 0xff
    ced2:	f7ff fa85 	bl	c3e0 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    ced6:	4b13      	ldr	r3, [pc, #76]	; (cf24 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ced8:	2201      	movs	r2, #1
    ceda:	4611      	mov	r1, r2
    cedc:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    cede:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cee2:	f7fb fb83 	bl	85ec <mayfly_enqueue>
		LL_ASSERT(!retval);
    cee6:	b138      	cbz	r0, cef8 <event_common_prepare+0x178>
    cee8:	4b07      	ldr	r3, [pc, #28]	; (cf08 <event_common_prepare+0x188>)
    ceea:	9301      	str	r3, [sp, #4]
    ceec:	9300      	str	r3, [sp, #0]
    ceee:	4a07      	ldr	r2, [pc, #28]	; (cf0c <event_common_prepare+0x18c>)
    cef0:	4b07      	ldr	r3, [pc, #28]	; (cf10 <event_common_prepare+0x190>)
    cef2:	4908      	ldr	r1, [pc, #32]	; (cf14 <event_common_prepare+0x194>)
    cef4:	480c      	ldr	r0, [pc, #48]	; (cf28 <event_common_prepare+0x1a8>)
    cef6:	e774      	b.n	cde2 <event_common_prepare+0x62>
}
    cef8:	b00d      	add	sp, #52	; 0x34
    cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cefe:	bf00      	nop
    cf00:	0000bf6d 	.word	0x0000bf6d
    cf04:	0000c1fd 	.word	0x0000c1fd
    cf08:	00015e19 	.word	0x00015e19
    cf0c:	000171f2 	.word	0x000171f2
    cf10:	00019579 	.word	0x00019579
    cf14:	00017241 	.word	0x00017241
    cf18:	000197a1 	.word	0x000197a1
    cf1c:	0000c249 	.word	0x0000c249
    cf20:	200008e8 	.word	0x200008e8
    cf24:	20003e30 	.word	0x20003e30
    cf28:	00019edb 	.word	0x00019edb

0000cf2c <event_scan_prepare>:
{
    cf2c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    cf2e:	4c25      	ldr	r4, [pc, #148]	; (cfc4 <event_scan_prepare+0x98>)
    cf30:	7c23      	ldrb	r3, [r4, #16]
{
    cf32:	b085      	sub	sp, #20
    cf34:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    cf36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    cf3a:	b173      	cbz	r3, cf5a <event_scan_prepare+0x2e>
    cf3c:	4b22      	ldr	r3, [pc, #136]	; (cfc8 <event_scan_prepare+0x9c>)
    cf3e:	9301      	str	r3, [sp, #4]
    cf40:	9300      	str	r3, [sp, #0]
    cf42:	4a22      	ldr	r2, [pc, #136]	; (cfcc <event_scan_prepare+0xa0>)
    cf44:	4b22      	ldr	r3, [pc, #136]	; (cfd0 <event_scan_prepare+0xa4>)
    cf46:	4923      	ldr	r1, [pc, #140]	; (cfd4 <event_scan_prepare+0xa8>)
    cf48:	4823      	ldr	r0, [pc, #140]	; (cfd8 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    cf4a:	f7f4 f81f 	bl	f8c <printk>
    cf4e:	4040      	eors	r0, r0
    cf50:	f380 8811 	msr	BASEPRI, r0
    cf54:	f04f 0004 	mov.w	r0, #4
    cf58:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    cf5a:	2306      	movs	r3, #6
    cf5c:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    cf5e:	9203      	str	r2, [sp, #12]
    cf60:	9301      	str	r3, [sp, #4]
    cf62:	4a1e      	ldr	r2, [pc, #120]	; (cfdc <event_scan_prepare+0xb0>)
    cf64:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    cf68:	9202      	str	r2, [sp, #8]
    cf6a:	9300      	str	r3, [sp, #0]
    cf6c:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    cf70:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    cf74:	f7ff ff04 	bl	cd80 <event_common_prepare>
	if (_radio.scanner.conn) {
    cf78:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    cf7c:	b303      	cbz	r3, cfc0 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    cf7e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    cf82:	2b00      	cmp	r3, #0
    cf84:	da0c      	bge.n	cfa0 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    cf86:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    cf8a:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    cf8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    cf92:	4291      	cmp	r1, r2
    cf94:	bf2c      	ite	cs
    cf96:	ebc3 0301 	rsbcs	r3, r3, r1
    cf9a:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    cf9e:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    cfa0:	4b0f      	ldr	r3, [pc, #60]	; (cfe0 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cfa2:	2201      	movs	r2, #1
    cfa4:	4611      	mov	r1, r2
    cfa6:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    cfa8:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cfaa:	f7fb fb1f 	bl	85ec <mayfly_enqueue>
		LL_ASSERT(!retval);
    cfae:	b138      	cbz	r0, cfc0 <event_scan_prepare+0x94>
    cfb0:	4b05      	ldr	r3, [pc, #20]	; (cfc8 <event_scan_prepare+0x9c>)
    cfb2:	9301      	str	r3, [sp, #4]
    cfb4:	9300      	str	r3, [sp, #0]
    cfb6:	4a05      	ldr	r2, [pc, #20]	; (cfcc <event_scan_prepare+0xa0>)
    cfb8:	4b05      	ldr	r3, [pc, #20]	; (cfd0 <event_scan_prepare+0xa4>)
    cfba:	4906      	ldr	r1, [pc, #24]	; (cfd4 <event_scan_prepare+0xa8>)
    cfbc:	4809      	ldr	r0, [pc, #36]	; (cfe4 <event_scan_prepare+0xb8>)
    cfbe:	e7c4      	b.n	cf4a <event_scan_prepare+0x1e>
}
    cfc0:	b005      	add	sp, #20
    cfc2:	bd30      	pop	{r4, r5, pc}
    cfc4:	200008e8 	.word	0x200008e8
    cfc8:	00015e19 	.word	0x00015e19
    cfcc:	000171f2 	.word	0x000171f2
    cfd0:	000195a7 	.word	0x000195a7
    cfd4:	00017241 	.word	0x00017241
    cfd8:	0001a017 	.word	0x0001a017
    cfdc:	0000cba9 	.word	0x0000cba9
    cfe0:	20003db0 	.word	0x20003db0
    cfe4:	00019edb 	.word	0x00019edb

0000cfe8 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    cfe8:	4b02      	ldr	r3, [pc, #8]	; (cff4 <mayfly_xtal_start+0xc>)
    cfea:	6818      	ldr	r0, [r3, #0]
    cfec:	6843      	ldr	r3, [r0, #4]
    cfee:	2100      	movs	r1, #0
    cff0:	681b      	ldr	r3, [r3, #0]
    cff2:	4718      	bx	r3
    cff4:	200008e8 	.word	0x200008e8

0000cff8 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    cff8:	4b02      	ldr	r3, [pc, #8]	; (d004 <mayfly_xtal_stop+0xc>)
    cffa:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    cffc:	6843      	ldr	r3, [r0, #4]
    cffe:	2100      	movs	r1, #0
    d000:	685b      	ldr	r3, [r3, #4]
    d002:	4718      	bx	r3
    d004:	200008e8 	.word	0x200008e8

0000d008 <chan_sel_2>:
{
    d008:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    d00a:	4048      	eors	r0, r1
    d00c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    d00e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    d012:	2608      	movs	r6, #8
	o = 0;
    d014:	2400      	movs	r4, #0
		o |= (i & 1);
    d016:	f00e 0501 	and.w	r5, lr, #1
    d01a:	3e01      	subs	r6, #1
    d01c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    d020:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    d024:	b2ec      	uxtb	r4, r5
		i >>= 1;
    d026:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    d02a:	d1f4      	bne.n	d016 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    d02c:	0225      	lsls	r5, r4, #8
    d02e:	b22d      	sxth	r5, r5
    d030:	b2c0      	uxtb	r0, r0
    d032:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    d036:	4634      	mov	r4, r6
		o |= (i & 1);
    d038:	f000 0601 	and.w	r6, r0, #1
    d03c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    d040:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    d044:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    d048:	b2e4      	uxtb	r4, r4
		i >>= 1;
    d04a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    d04e:	d1f3      	bne.n	d038 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    d050:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    d052:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    d056:	3f01      	subs	r7, #1
    d058:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    d05a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    d05e:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    d060:	d1d5      	bne.n	d00e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    d062:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    d064:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    d066:	fbb1 f0f4 	udiv	r0, r1, r4
    d06a:	fb04 1010 	mls	r0, r4, r0, r1
    d06e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d070:	08c4      	lsrs	r4, r0, #3
    d072:	f000 0507 	and.w	r5, r0, #7
    d076:	5d14      	ldrb	r4, [r2, r4]
    d078:	412c      	asrs	r4, r5
    d07a:	07e4      	lsls	r4, r4, #31
    d07c:	d407      	bmi.n	d08e <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    d07e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    d080:	f3c1 4107 	ubfx	r1, r1, #16, #8
    d084:	4610      	mov	r0, r2
}
    d086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    d08a:	f7fd bfc7 	b.w	b01c <chan_sel_remap>
}
    d08e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d090 <ctrl_tx_enqueue>:
{
    d090:	b510      	push	{r4, lr}
	    !conn->empty &&
    d092:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    d096:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    d09a:	f014 0f80 	tst.w	r4, #128	; 0x80
    d09e:	d118      	bne.n	d0d2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    d0a0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    d0a4:	b1ab      	cbz	r3, d0d2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    d0a6:	0724      	lsls	r4, r4, #28
    d0a8:	d413      	bmi.n	d0d2 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    d0aa:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    d0ae:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    d0b0:	bf04      	itt	eq
    d0b2:	681c      	ldreq	r4, [r3, #0]
    d0b4:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    d0b8:	b992      	cbnz	r2, d0e0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    d0ba:	681a      	ldr	r2, [r3, #0]
    d0bc:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    d0be:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    d0c0:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    d0c4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    d0c8:	680b      	ldr	r3, [r1, #0]
    d0ca:	b90b      	cbnz	r3, d0d0 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    d0cc:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    d0d0:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    d0d2:	b92a      	cbnz	r2, d0e0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    d0d4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    d0d8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    d0da:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    d0de:	e7ef      	b.n	d0c0 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    d0e0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    d0e4:	681a      	ldr	r2, [r3, #0]
    d0e6:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    d0e8:	6019      	str	r1, [r3, #0]
    d0ea:	e7eb      	b.n	d0c4 <ctrl_tx_enqueue+0x34>

0000d0ec <ctrl_tx_sec_enqueue>:
{
    d0ec:	b410      	push	{r4}
	if (conn->pause_tx) {
    d0ee:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    d0f2:	0724      	lsls	r4, r4, #28
{
    d0f4:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    d0f6:	d50f      	bpl.n	d118 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    d0f8:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    d0fc:	b931      	cbnz	r1, d10c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    d0fe:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    d102:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    d104:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    d108:	bc10      	pop	{r4}
    d10a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    d10c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    d110:	6819      	ldr	r1, [r3, #0]
    d112:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    d114:	601a      	str	r2, [r3, #0]
    d116:	e7f7      	b.n	d108 <ctrl_tx_sec_enqueue+0x1c>
}
    d118:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    d11a:	f7ff bfb9 	b.w	d090 <ctrl_tx_enqueue>
	...

0000d120 <feature_rsp_send>:
{
    d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d122:	4f21      	ldr	r7, [pc, #132]	; (d1a8 <feature_rsp_send+0x88>)
{
    d124:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d126:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    d12a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d12c:	f7fb f993 	bl	8456 <mem_acquire>
	if (!node_tx) {
    d130:	4604      	mov	r4, r0
    d132:	b3b0      	cbz	r0, d1a2 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d134:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    d136:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    d138:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d13c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d140:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d144:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d148:	f043 0310 	orr.w	r3, r3, #16
    d14c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d150:	79b1      	ldrb	r1, [r6, #6]
    d152:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    d156:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d15a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d15e:	400b      	ands	r3, r1
    d160:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    d164:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d168:	f043 0320 	orr.w	r3, r3, #32
    d16c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d170:	7903      	ldrb	r3, [r0, #4]
    d172:	f043 0303 	orr.w	r3, r3, #3
    d176:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    d178:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    d17a:	2309      	movs	r3, #9
    d17c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    d17e:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    d180:	2100      	movs	r1, #0
    d182:	4410      	add	r0, r2
    d184:	f7f4 fd66 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    d188:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    d18c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    d18e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    d190:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    d192:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    d194:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    d196:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    d198:	4621      	mov	r1, r4
    d19a:	f7ff ffa7 	bl	d0ec <ctrl_tx_sec_enqueue>
	return 0;
    d19e:	2000      	movs	r0, #0
    d1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    d1a2:	2001      	movs	r0, #1
}
    d1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1a6:	bf00      	nop
    d1a8:	200008e8 	.word	0x200008e8

0000d1ac <start_enc_rsp_send>:
{
    d1ac:	b510      	push	{r4, lr}
    d1ae:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    d1b0:	b9c9      	cbnz	r1, d1e6 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d1b2:	480f      	ldr	r0, [pc, #60]	; (d1f0 <start_enc_rsp_send+0x44>)
    d1b4:	f7fb f94f 	bl	8456 <mem_acquire>
		if (!node_tx) {
    d1b8:	b1b8      	cbz	r0, d1ea <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    d1ba:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    d1bc:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d1c0:	f043 0320 	orr.w	r3, r3, #32
    d1c4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d1c8:	780b      	ldrb	r3, [r1, #0]
    d1ca:	f043 0303 	orr.w	r3, r3, #3
    d1ce:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d1d0:	2301      	movs	r3, #1
    d1d2:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    d1d4:	2306      	movs	r3, #6
    d1d6:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    d1d8:	b140      	cbz	r0, d1ec <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    d1da:	4601      	mov	r1, r0
    d1dc:	4620      	mov	r0, r4
    d1de:	f7ff ff57 	bl	d090 <ctrl_tx_enqueue>
	return 0;
    d1e2:	2000      	movs	r0, #0
    d1e4:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    d1e6:	2000      	movs	r0, #0
    d1e8:	e7e8      	b.n	d1bc <start_enc_rsp_send+0x10>
			return 1;
    d1ea:	2001      	movs	r0, #1
}
    d1ec:	bd10      	pop	{r4, pc}
    d1ee:	bf00      	nop
    d1f0:	20000a44 	.word	0x20000a44

0000d1f4 <reject_ext_ind_send>:
{
    d1f4:	b570      	push	{r4, r5, r6, lr}
    d1f6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d1f8:	480b      	ldr	r0, [pc, #44]	; (d228 <reject_ext_ind_send+0x34>)
{
    d1fa:	460e      	mov	r6, r1
    d1fc:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d1fe:	f7fb f92a 	bl	8456 <mem_acquire>
	if (!node_tx) {
    d202:	b178      	cbz	r0, d224 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d204:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    d206:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d208:	f043 0303 	orr.w	r3, r3, #3
    d20c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    d20e:	2303      	movs	r3, #3
    d210:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d212:	2311      	movs	r3, #17
    d214:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    d216:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    d218:	4601      	mov	r1, r0
    d21a:	4620      	mov	r0, r4
    d21c:	f7ff ff38 	bl	d090 <ctrl_tx_enqueue>
	return 0;
    d220:	2000      	movs	r0, #0
    d222:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    d224:	2001      	movs	r0, #1
}
    d226:	bd70      	pop	{r4, r5, r6, pc}
    d228:	20000a44 	.word	0x20000a44
    d22c:	00000000 	.word	0x00000000

0000d230 <event_connection_prepare>:
{
    d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    d234:	4db8      	ldr	r5, [pc, #736]	; (d518 <event_connection_prepare+0x2e8>)
{
    d236:	b08f      	sub	sp, #60	; 0x3c
    d238:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    d23a:	7c2b      	ldrb	r3, [r5, #16]
{
    d23c:	910c      	str	r1, [sp, #48]	; 0x30
    d23e:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    d240:	b173      	cbz	r3, d260 <event_connection_prepare+0x30>
    d242:	4bb6      	ldr	r3, [pc, #728]	; (d51c <event_connection_prepare+0x2ec>)
    d244:	9301      	str	r3, [sp, #4]
    d246:	9300      	str	r3, [sp, #0]
    d248:	4ab5      	ldr	r2, [pc, #724]	; (d520 <event_connection_prepare+0x2f0>)
    d24a:	4bb6      	ldr	r3, [pc, #728]	; (d524 <event_connection_prepare+0x2f4>)
    d24c:	49b6      	ldr	r1, [pc, #728]	; (d528 <event_connection_prepare+0x2f8>)
    d24e:	48b7      	ldr	r0, [pc, #732]	; (d52c <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    d250:	f7f3 fe9c 	bl	f8c <printk>
    d254:	4040      	eors	r0, r0
    d256:	f380 8811 	msr	BASEPRI, r0
    d25a:	f04f 0004 	mov.w	r0, #4
    d25e:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    d260:	f894 3020 	ldrb.w	r3, [r4, #32]
    d264:	3307      	adds	r3, #7
    d266:	b2db      	uxtb	r3, r3
    d268:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    d26a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d26e:	2b00      	cmp	r3, #0
    d270:	da09      	bge.n	d286 <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    d272:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    d274:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    d276:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    d27a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    d27c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    d27e:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    d280:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    d282:	bf88      	it	hi
    d284:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    d286:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    d288:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    d28c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    d28e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    d290:	b292      	uxth	r2, r2
    d292:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    d294:	4432      	add	r2, r6
    d296:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    d298:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    d29c:	429a      	cmp	r2, r3
    d29e:	f040 81ba 	bne.w	d616 <event_connection_prepare+0x3e6>
    d2a2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d2a6:	075f      	lsls	r7, r3, #29
    d2a8:	f100 84ab 	bmi.w	dc02 <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    d2ac:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    d2b0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    d2b4:	429a      	cmp	r2, r3
    d2b6:	f000 8096 	beq.w	d3e6 <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    d2ba:	2005      	movs	r0, #5
    d2bc:	f7ff fd52 	bl	cd64 <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    d2c0:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    d2c4:	b113      	cbz	r3, d2cc <event_connection_prepare+0x9c>
    d2c6:	429c      	cmp	r4, r3
    d2c8:	f040 808d 	bne.w	d3e6 <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    d2cc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    d2d0:	f003 0307 	and.w	r3, r3, #7
    d2d4:	2b05      	cmp	r3, #5
    d2d6:	f200 815d 	bhi.w	d594 <event_connection_prepare+0x364>
    d2da:	e8df f013 	tbh	[pc, r3, lsl #1]
    d2de:	0006      	.short	0x0006
    d2e0:	01310065 	.word	0x01310065
    d2e4:	00840084 	.word	0x00840084
    d2e8:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d2ea:	4891      	ldr	r0, [pc, #580]	; (d530 <event_connection_prepare+0x300>)
    d2ec:	f7fb f8b3 	bl	8456 <mem_acquire>
	if (!node_tx) {
    d2f0:	4607      	mov	r7, r0
    d2f2:	2800      	cmp	r0, #0
    d2f4:	d077      	beq.n	d3e6 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    d2f6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    d2fa:	2204      	movs	r2, #4
    d2fc:	f362 0302 	bfi	r3, r2, #0, #3
    d300:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d304:	7903      	ldrb	r3, [r0, #4]
    d306:	f043 0303 	orr.w	r3, r3, #3
    d30a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    d30c:	2318      	movs	r3, #24
    d30e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    d310:	230f      	movs	r3, #15
    d312:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    d314:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    d318:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    d31a:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    d31c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    d320:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    d322:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    d326:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    d328:	2300      	movs	r3, #0
    d32a:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    d32c:	74c3      	strb	r3, [r0, #19]
    d32e:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    d330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d334:	7543      	strb	r3, [r0, #21]
    d336:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    d338:	75c3      	strb	r3, [r0, #23]
    d33a:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    d33c:	7643      	strb	r3, [r0, #25]
    d33e:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    d340:	76c3      	strb	r3, [r0, #27]
    d342:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    d344:	7743      	strb	r3, [r0, #29]
    d346:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    d348:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    d34c:	4601      	mov	r1, r0
    d34e:	4620      	mov	r0, r4
    d350:	f7ff fe9e 	bl	d090 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d354:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    d356:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    d35a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d35e:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    d360:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    d364:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d368:	da0b      	bge.n	d382 <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    d36a:	68a3      	ldr	r3, [r4, #8]
    d36c:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    d36e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    d372:	428b      	cmp	r3, r1
    d374:	bf2c      	ite	cs
    d376:	4443      	addcs	r3, r8
    d378:	eb08 0301 	addcc.w	r3, r8, r1
    d37c:	1a9b      	subs	r3, r3, r2
    d37e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    d382:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    d384:	4b6b      	ldr	r3, [pc, #428]	; (d534 <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    d386:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d38a:	2201      	movs	r2, #1
    d38c:	4611      	mov	r1, r2
    d38e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    d390:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d392:	f7fb f92b 	bl	85ec <mayfly_enqueue>
		LL_ASSERT(!retval);
    d396:	b330      	cbz	r0, d3e6 <event_connection_prepare+0x1b6>
    d398:	4b60      	ldr	r3, [pc, #384]	; (d51c <event_connection_prepare+0x2ec>)
    d39a:	9301      	str	r3, [sp, #4]
    d39c:	9300      	str	r3, [sp, #0]
    d39e:	4b66      	ldr	r3, [pc, #408]	; (d538 <event_connection_prepare+0x308>)
    d3a0:	4a5f      	ldr	r2, [pc, #380]	; (d520 <event_connection_prepare+0x2f0>)
    d3a2:	4961      	ldr	r1, [pc, #388]	; (d528 <event_connection_prepare+0x2f8>)
    d3a4:	4865      	ldr	r0, [pc, #404]	; (d53c <event_connection_prepare+0x30c>)
    d3a6:	e753      	b.n	d250 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    d3a8:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    d3ac:	b397      	cbz	r7, d414 <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3ae:	4860      	ldr	r0, [pc, #384]	; (d530 <event_connection_prepare+0x300>)
    d3b0:	f7fb f851 	bl	8456 <mem_acquire>
		if (!node_tx) {
    d3b4:	4601      	mov	r1, r0
    d3b6:	b1b0      	cbz	r0, d3e6 <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    d3b8:	7903      	ldrb	r3, [r0, #4]
    d3ba:	f043 0303 	orr.w	r3, r3, #3
    d3be:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d3c0:	2311      	movs	r3, #17
    d3c2:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    d3c4:	2303      	movs	r3, #3
    d3c6:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    d3c8:	230f      	movs	r3, #15
    d3ca:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    d3cc:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    d3d0:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    d3d2:	4620      	mov	r0, r4
    d3d4:	f7ff fe5c 	bl	d090 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d3d8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    d3dc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    d3e0:	2300      	movs	r3, #0
    d3e2:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    d3e6:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    d3ea:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    d3ee:	429a      	cmp	r2, r3
    d3f0:	f000 810a 	beq.w	d608 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    d3f4:	2005      	movs	r0, #5
    d3f6:	f7ff fcb5 	bl	cd64 <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    d3fa:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    d3fe:	f003 0203 	and.w	r2, r3, #3
    d402:	2a03      	cmp	r2, #3
    d404:	f200 8179 	bhi.w	d6fa <event_connection_prepare+0x4ca>
    d408:	e8df f012 	tbh	[pc, r2, lsl #1]
    d40c:	00fe00cc 	.word	0x00fe00cc
    d410:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    d414:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d418:	2b00      	cmp	r3, #0
    d41a:	db3b      	blt.n	d494 <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    d41c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    d420:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    d424:	428b      	cmp	r3, r1
    d426:	d1de      	bne.n	d3e6 <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    d428:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    d42c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    d430:	2205      	movs	r2, #5
    d432:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    d436:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    d43a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    d43e:	2301      	movs	r3, #1
    d440:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    d444:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    d448:	b122      	cbz	r2, d454 <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    d44a:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    d44e:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    d450:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    d454:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    d458:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    d45c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    d460:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    d464:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    d468:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d46c:	2202      	movs	r2, #2
    d46e:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    d472:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    d476:	f082 0208 	eor.w	r2, r2, #8
    d47a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d47e:	f362 0382 	bfi	r3, r2, #2, #1
    d482:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    d486:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    d488:	2301      	movs	r3, #1
    d48a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    d48e:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    d492:	e7a8      	b.n	d3e6 <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d494:	4826      	ldr	r0, [pc, #152]	; (d530 <event_connection_prepare+0x300>)
    d496:	f7fa ffde 	bl	8456 <mem_acquire>
	if (!node_tx) {
    d49a:	4601      	mov	r1, r0
    d49c:	2800      	cmp	r0, #0
    d49e:	d0a2      	beq.n	d3e6 <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d4a0:	7903      	ldrb	r3, [r0, #4]
    d4a2:	f043 0303 	orr.w	r3, r3, #3
    d4a6:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    d4a8:	2318      	movs	r3, #24
    d4aa:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    d4ac:	2310      	movs	r3, #16
    d4ae:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    d4b0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    d4b4:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    d4b6:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    d4b8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    d4bc:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    d4be:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    d4c2:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    d4c4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    d4c8:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    d4ca:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    d4ce:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    d4d2:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    d4d6:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    d4da:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    d4de:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    d4e2:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    d4e6:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    d4ea:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    d4ee:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    d4f2:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    d4f6:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    d4fa:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    d4fe:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    d502:	4620      	mov	r0, r4
    d504:	f7ff fdc4 	bl	d090 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d508:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    d50c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    d510:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    d514:	e767      	b.n	d3e6 <event_connection_prepare+0x1b6>
    d516:	bf00      	nop
    d518:	200008e8 	.word	0x200008e8
    d51c:	00015e19 	.word	0x00015e19
    d520:	000171f2 	.word	0x000171f2
    d524:	00019660 	.word	0x00019660
    d528:	00017241 	.word	0x00017241
    d52c:	0001a017 	.word	0x0001a017
    d530:	20000a44 	.word	0x20000a44
    d534:	20003dd0 	.word	0x20003dd0
    d538:	000195fc 	.word	0x000195fc
    d53c:	00019edb 	.word	0x00019edb
	if (conn->pause_tx) {
    d540:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d544:	0718      	lsls	r0, r3, #28
    d546:	f53f af4e 	bmi.w	d3e6 <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    d54a:	2002      	movs	r0, #2
    d54c:	f7fd fd98 	bl	b080 <packet_rx_reserve_get>
	if (!node_rx) {
    d550:	2800      	cmp	r0, #0
    d552:	f43f af48 	beq.w	d3e6 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    d556:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    d55a:	2203      	movs	r2, #3
    d55c:	f362 0302 	bfi	r3, r2, #0, #3
    d560:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    d564:	8c23      	ldrh	r3, [r4, #32]
    d566:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d568:	2301      	movs	r3, #1
    d56a:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d56c:	7a03      	ldrb	r3, [r0, #8]
    d56e:	4313      	orrs	r3, r2
    d570:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    d572:	2318      	movs	r3, #24
    d574:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    d576:	230f      	movs	r3, #15
    d578:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    d57a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    d57e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    d580:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    d582:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    d586:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    d588:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    d58c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    d58e:	f7fe fbe3 	bl	bd58 <packet_rx_enqueue>
    d592:	e728      	b.n	d3e6 <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    d594:	4bb9      	ldr	r3, [pc, #740]	; (d87c <event_connection_prepare+0x64c>)
    d596:	9301      	str	r3, [sp, #4]
    d598:	9300      	str	r3, [sp, #0]
    d59a:	4bb9      	ldr	r3, [pc, #740]	; (d880 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    d59c:	4ab9      	ldr	r2, [pc, #740]	; (d884 <event_connection_prepare+0x654>)
    d59e:	49ba      	ldr	r1, [pc, #744]	; (d888 <event_connection_prepare+0x658>)
    d5a0:	48ba      	ldr	r0, [pc, #744]	; (d88c <event_connection_prepare+0x65c>)
    d5a2:	e655      	b.n	d250 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d5a4:	48ba      	ldr	r0, [pc, #744]	; (d890 <event_connection_prepare+0x660>)
    d5a6:	f7fa ff56 	bl	8456 <mem_acquire>
		if (!node_tx) {
    d5aa:	4601      	mov	r1, r0
    d5ac:	b360      	cbz	r0, d608 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    d5ae:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    d5b2:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    d5b6:	2201      	movs	r2, #1
    d5b8:	f362 0301 	bfi	r3, r2, #0, #2
    d5bc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d5c0:	b2db      	uxtb	r3, r3
    d5c2:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    d5c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d5ca:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    d5ce:	f363 07c5 	bfi	r7, r3, #3, #3
    d5d2:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    d5d6:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d5da:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    d5de:	f367 1286 	bfi	r2, r7, #6, #1
    d5e2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5e6:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    d5e8:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5ea:	f042 0203 	orr.w	r2, r2, #3
    d5ee:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    d5f0:	2203      	movs	r2, #3
    d5f2:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    d5f4:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    d5f6:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    d5f8:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    d5fa:	4620      	mov	r0, r4
    d5fc:	f7ff fd48 	bl	d090 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d600:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d604:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    d608:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    d60c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d610:	429a      	cmp	r2, r3
    d612:	f000 82f6 	beq.w	dc02 <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d616:	2005      	movs	r0, #5
    d618:	f7ff fba4 	bl	cd64 <event_stop.constprop.31>
		switch (conn->llcp_type) {
    d61c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    d620:	3b01      	subs	r3, #1
    d622:	2b07      	cmp	r3, #7
    d624:	f200 85a7 	bhi.w	e176 <event_connection_prepare+0xf46>
    d628:	e8df f013 	tbh	[pc, r3, lsl #1]
    d62c:	02c4006c 	.word	0x02c4006c
    d630:	045e0343 	.word	0x045e0343
    d634:	05a5048e 	.word	0x05a5048e
    d638:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    d63c:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    d640:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    d644:	f3c3 0282 	ubfx	r2, r3, #2, #3
    d648:	0791      	lsls	r1, r2, #30
    d64a:	d544      	bpl.n	d6d6 <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    d64c:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    d64e:	f362 0384 	bfi	r3, r2, #2, #3
    d652:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    d656:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    d65a:	095a      	lsrs	r2, r3, #5
    d65c:	0790      	lsls	r0, r2, #30
    d65e:	d543      	bpl.n	d6e8 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    d660:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    d662:	f362 1347 	bfi	r3, r2, #5, #3
    d666:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    d66a:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    d66e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d672:	f3c2 0182 	ubfx	r1, r2, #2, #3
    d676:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d67a:	428b      	cmp	r3, r1
    d67c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    d680:	bf14      	ite	ne
    d682:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    d686:	f36f 0384 	bfceq	r3, #2, #3
    d68a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    d68e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d692:	0952      	lsrs	r2, r2, #5
    d694:	f003 0307 	and.w	r3, r3, #7
    d698:	4293      	cmp	r3, r2
    d69a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    d69e:	bf14      	ite	ne
    d6a0:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    d6a4:	f36f 1347 	bfceq	r3, #5, #3
    d6a8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    d6ac:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    d6b0:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    d6b4:	f043 0301 	orr.w	r3, r3, #1
    d6b8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d6bc:	f362 0341 	bfi	r3, r2, #1, #1
    d6c0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    d6c4:	2308      	movs	r3, #8
    d6c6:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    d6ca:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    d6ce:	3b01      	subs	r3, #1
    d6d0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    d6d4:	e798      	b.n	d608 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    d6d6:	07d7      	lsls	r7, r2, #31
    d6d8:	d501      	bpl.n	d6de <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    d6da:	2201      	movs	r2, #1
    d6dc:	e7b7      	b.n	d64e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    d6de:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    d6e2:	bf18      	it	ne
    d6e4:	2204      	movne	r2, #4
    d6e6:	e7b2      	b.n	d64e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    d6e8:	07d1      	lsls	r1, r2, #31
    d6ea:	d501      	bpl.n	d6f0 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    d6ec:	2201      	movs	r2, #1
    d6ee:	e7b8      	b.n	d662 <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    d6f0:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    d6f4:	bf18      	it	ne
    d6f6:	2204      	movne	r2, #4
    d6f8:	e7b3      	b.n	d662 <event_connection_prepare+0x432>
		LL_ASSERT(0);
    d6fa:	4b60      	ldr	r3, [pc, #384]	; (d87c <event_connection_prepare+0x64c>)
    d6fc:	9301      	str	r3, [sp, #4]
    d6fe:	9300      	str	r3, [sp, #0]
    d700:	4b64      	ldr	r3, [pc, #400]	; (d894 <event_connection_prepare+0x664>)
    d702:	e74b      	b.n	d59c <event_connection_prepare+0x36c>
	if (!conn_upd) {
    d704:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    d708:	b90b      	cbnz	r3, d70e <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    d70a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    d70e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d712:	f013 0303 	ands.w	r3, r3, #3
    d716:	d068      	beq.n	d7ea <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d718:	485d      	ldr	r0, [pc, #372]	; (d890 <event_connection_prepare+0x660>)
    d71a:	f7fa fe9c 	bl	8456 <mem_acquire>
		if (!node_tx) {
    d71e:	4607      	mov	r7, r0
    d720:	2800      	cmp	r0, #0
    d722:	f000 826e 	beq.w	dc02 <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    d726:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d72a:	f003 0303 	and.w	r3, r3, #3
    d72e:	2b01      	cmp	r3, #1
    d730:	d059      	beq.n	d7e6 <event_connection_prepare+0x5b6>
    d732:	2b02      	cmp	r3, #2
    d734:	d152      	bne.n	d7dc <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    d736:	4a58      	ldr	r2, [pc, #352]	; (d898 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d738:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d73c:	f36f 0301 	bfc	r3, #0, #2
    d740:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    d744:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d746:	3306      	adds	r3, #6
    d748:	4433      	add	r3, r6
    d74a:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    d74c:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d750:	7939      	ldrb	r1, [r7, #4]
    d752:	f041 0103 	orr.w	r1, r1, #3
    d756:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    d758:	210c      	movs	r1, #12
    d75a:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    d75c:	2100      	movs	r1, #0
    d75e:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    d760:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    d764:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    d766:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    d76a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d76e:	fbb1 f1f0 	udiv	r1, r1, r0
    d772:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    d776:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    d77a:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    d77e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    d782:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    d786:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    d78a:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    d78e:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d792:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    d794:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d798:	2900      	cmp	r1, #0
    d79a:	da0b      	bge.n	d7b4 <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    d79c:	68a3      	ldr	r3, [r4, #8]
    d79e:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    d7a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    d7a4:	4283      	cmp	r3, r0
    d7a6:	bf2c      	ite	cs
    d7a8:	4443      	addcs	r3, r8
    d7aa:	eb08 0300 	addcc.w	r3, r8, r0
    d7ae:	1a5b      	subs	r3, r3, r1
    d7b0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    d7b4:	f107 0309 	add.w	r3, r7, #9
    d7b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    d7bc:	4b37      	ldr	r3, [pc, #220]	; (d89c <event_connection_prepare+0x66c>)
    d7be:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d7c0:	2201      	movs	r2, #1
    d7c2:	4611      	mov	r1, r2
    d7c4:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    d7c6:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d7c8:	f7fa ff10 	bl	85ec <mayfly_enqueue>
		LL_ASSERT(!retval);
    d7cc:	2800      	cmp	r0, #0
    d7ce:	f000 8214 	beq.w	dbfa <event_connection_prepare+0x9ca>
    d7d2:	4b2a      	ldr	r3, [pc, #168]	; (d87c <event_connection_prepare+0x64c>)
    d7d4:	9301      	str	r3, [sp, #4]
    d7d6:	9300      	str	r3, [sp, #0]
    d7d8:	4b31      	ldr	r3, [pc, #196]	; (d8a0 <event_connection_prepare+0x670>)
    d7da:	e5e1      	b.n	d3a0 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    d7dc:	4b27      	ldr	r3, [pc, #156]	; (d87c <event_connection_prepare+0x64c>)
    d7de:	9301      	str	r3, [sp, #4]
    d7e0:	9300      	str	r3, [sp, #0]
    d7e2:	4b30      	ldr	r3, [pc, #192]	; (d8a4 <event_connection_prepare+0x674>)
    d7e4:	e6da      	b.n	d59c <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    d7e6:	4a30      	ldr	r2, [pc, #192]	; (d8a8 <event_connection_prepare+0x678>)
    d7e8:	e7a6      	b.n	d738 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    d7ea:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    d7ee:	1bf7      	subs	r7, r6, r7
    d7f0:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    d7f2:	043a      	lsls	r2, r7, #16
    d7f4:	f100 8205 	bmi.w	dc02 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d7f8:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    d7fc:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d800:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    d804:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    d808:	428a      	cmp	r2, r1
    d80a:	d009      	beq.n	d820 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    d80c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d810:	f002 0207 	and.w	r2, r2, #7
    d814:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d816:	bf04      	itt	eq
    d818:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    d81c:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    d820:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    d824:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    d826:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    d828:	bf08      	it	eq
    d82a:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    d82e:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    d830:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    d832:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d836:	429a      	cmp	r2, r3
    d838:	d114      	bne.n	d864 <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    d83a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    d83e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d840:	4299      	cmp	r1, r3
    d842:	d10f      	bne.n	d864 <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    d844:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d848:	435a      	muls	r2, r3
    d84a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d84e:	f242 7110 	movw	r1, #10000	; 0x2710
    d852:	fb01 2303 	mla	r3, r1, r3, r2
    d856:	3b01      	subs	r3, #1
    d858:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    d85c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    d85e:	b29b      	uxth	r3, r3
    d860:	429a      	cmp	r2, r3
    d862:	d036      	beq.n	d8d2 <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    d864:	2002      	movs	r0, #2
    d866:	f7fd fc0b 	bl	b080 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    d86a:	bb08      	cbnz	r0, d8b0 <event_connection_prepare+0x680>
    d86c:	4b03      	ldr	r3, [pc, #12]	; (d87c <event_connection_prepare+0x64c>)
    d86e:	9301      	str	r3, [sp, #4]
    d870:	9300      	str	r3, [sp, #0]
    d872:	4b0c      	ldr	r3, [pc, #48]	; (d8a4 <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    d874:	4a03      	ldr	r2, [pc, #12]	; (d884 <event_connection_prepare+0x654>)
    d876:	4904      	ldr	r1, [pc, #16]	; (d888 <event_connection_prepare+0x658>)
    d878:	480c      	ldr	r0, [pc, #48]	; (d8ac <event_connection_prepare+0x67c>)
    d87a:	e4e9      	b.n	d250 <event_connection_prepare+0x20>
    d87c:	00015e19 	.word	0x00015e19
    d880:	00019611 	.word	0x00019611
    d884:	000171f2 	.word	0x000171f2
    d888:	00017241 	.word	0x00017241
    d88c:	00017166 	.word	0x00017166
    d890:	20000a44 	.word	0x20000a44
    d894:	00019636 	.word	0x00019636
    d898:	0000baa9 	.word	0x0000baa9
    d89c:	20003dc0 	.word	0x20003dc0
    d8a0:	000195c5 	.word	0x000195c5
    d8a4:	000195d9 	.word	0x000195d9
    d8a8:	0000c791 	.word	0x0000c791
    d8ac:	00019e07 	.word	0x00019e07
			node_rx->hdr.handle = conn->handle;
    d8b0:	8c23      	ldrh	r3, [r4, #32]
    d8b2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d8b4:	2308      	movs	r3, #8
    d8b6:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    d8b8:	2300      	movs	r3, #0
    d8ba:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    d8bc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d8c0:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    d8c2:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    d8c6:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    d8c8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d8cc:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    d8ce:	f7fe fa43 	bl	bd58 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d8d2:	6823      	ldr	r3, [r4, #0]
    d8d4:	6866      	ldr	r6, [r4, #4]
    d8d6:	2b00      	cmp	r3, #0
    d8d8:	da09      	bge.n	d8ee <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    d8da:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    d8dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d8e0:	42b0      	cmp	r0, r6
    d8e2:	bf2c      	ite	cs
    d8e4:	4480      	addcs	r8, r0
    d8e6:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    d8e8:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d8ea:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    d8ee:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    d8f0:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    d8f4:	49a0      	ldr	r1, [pc, #640]	; (db78 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    d8f6:	fb13 f307 	smulbb	r3, r3, r7
    d8fa:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    d8fc:	fbb3 f2fa 	udiv	r2, r3, sl
    d900:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    d904:	fb1a f009 	smulbb	r0, sl, r9
    d908:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    d90a:	4283      	cmp	r3, r0
    d90c:	f080 80bf 	bcs.w	da8e <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    d910:	1ac0      	subs	r0, r0, r3
    d912:	f240 1223 	movw	r2, #291	; 0x123
    d916:	4342      	muls	r2, r0
    d918:	17c3      	asrs	r3, r0, #31
    d91a:	fb01 2303 	mla	r3, r1, r3, r2
    d91e:	fba0 0101 	umull	r0, r1, r0, r1
    d922:	4419      	add	r1, r3
    d924:	a392      	add	r3, pc, #584	; (adr r3, db70 <event_connection_prepare+0x940>)
    d926:	e9d3 2300 	ldrd	r2, r3, [r3]
    d92a:	f7f2 fc73 	bl	214 <__aeabi_uldivmod>
    d92e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d932:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d936:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    d938:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d93a:	f8df b274 	ldr.w	fp, [pc, #628]	; dbb0 <event_connection_prepare+0x980>
    d93e:	1bdb      	subs	r3, r3, r7
    d940:	444b      	add	r3, r9
    d942:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    d944:	6823      	ldr	r3, [r4, #0]
    d946:	42b3      	cmp	r3, r6
    d948:	bf38      	it	cc
    d94a:	4633      	movcc	r3, r6
    d94c:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    d94e:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    d952:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    d956:	2b00      	cmp	r3, #0
    d958:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    d95c:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    d95e:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    d962:	f280 80a5 	bge.w	dab0 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    d966:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    d968:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d96a:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    d96e:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    d972:	4a82      	ldr	r2, [pc, #520]	; (db7c <event_connection_prepare+0x94c>)
    d974:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    d978:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d97c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    d984:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    d988:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    d98a:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d98c:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    d990:	4b7b      	ldr	r3, [pc, #492]	; (db80 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    d992:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d996:	f205 253f 	addw	r5, r5, #575	; 0x23f
    d99a:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    d99e:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    d9a0:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    d9a4:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    d9a6:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    d9a8:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    d9aa:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    d9ac:	429f      	cmp	r7, r3
    d9ae:	bf94      	ite	ls
    d9b0:	65e7      	strls	r7, [r4, #92]	; 0x5c
    d9b2:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    d9b4:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    d9b6:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    d9b8:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d9ba:	fba0 010b 	umull	r0, r1, r0, fp
    d9be:	a36c      	add	r3, pc, #432	; (adr r3, db70 <event_connection_prepare+0x940>)
    d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d9c4:	f7f2 fc26 	bl	214 <__aeabi_uldivmod>
    d9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d9ca:	1a1b      	subs	r3, r3, r0
    d9cc:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d9ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d9d0:	fbb3 f0f8 	udiv	r0, r3, r8
    d9d4:	fb08 f000 	mul.w	r0, r8, r0
    d9d8:	a365      	add	r3, pc, #404	; (adr r3, db70 <event_connection_prepare+0x940>)
    d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
    d9de:	fba0 010b 	umull	r0, r1, r0, fp
    d9e2:	f7f2 fc17 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    d9e6:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d9e8:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    d9ec:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    d9f0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    d9f4:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    d9f6:	f242 7110 	movw	r1, #10000	; 0x2710
    d9fa:	fb01 6303 	mla	r3, r1, r3, r6
    d9fe:	3b01      	subs	r3, #1
    da00:	fbb3 f3f6 	udiv	r3, r3, r6
    da04:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    da06:	4b5f      	ldr	r3, [pc, #380]	; (db84 <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    da08:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    da0c:	4433      	add	r3, r6
    da0e:	fbb3 f3f6 	udiv	r3, r3, r6
    da12:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    da16:	4b5c      	ldr	r3, [pc, #368]	; (db88 <event_connection_prepare+0x958>)
    da18:	4433      	add	r3, r6
    da1a:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    da1e:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    da20:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    da22:	4299      	cmp	r1, r3
    da24:	bfc4      	itt	gt
    da26:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    da2a:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    da2c:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    da30:	bfc8      	it	gt
    da32:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    da34:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    da38:	bfc8      	it	gt
    da3a:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    da3c:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    da40:	bf08      	it	eq
    da42:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    da46:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    da4a:	2000      	movs	r0, #0
    da4c:	2101      	movs	r1, #1
    da4e:	f006 f9f7 	bl	13e40 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    da52:	2200      	movs	r2, #0
    da54:	2101      	movs	r1, #1
		mayfly_was_enabled =
    da56:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    da58:	4610      	mov	r0, r2
    da5a:	f7fa fd9f 	bl	859c <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    da5e:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    da62:	f641 2385 	movw	r3, #6789	; 0x1a85
    da66:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    da68:	3207      	adds	r2, #7
		ticker_status =
    da6a:	9300      	str	r3, [sp, #0]
    da6c:	b2d2      	uxtb	r2, r2
    da6e:	4b47      	ldr	r3, [pc, #284]	; (db8c <event_connection_prepare+0x95c>)
    da70:	4608      	mov	r0, r1
    da72:	f7fb fc17 	bl	92a4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    da76:	f030 0802 	bics.w	r8, r0, #2
    da7a:	d026      	beq.n	daca <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    da7c:	4b44      	ldr	r3, [pc, #272]	; (db90 <event_connection_prepare+0x960>)
    da7e:	9301      	str	r3, [sp, #4]
    da80:	9300      	str	r3, [sp, #0]
    da82:	4a44      	ldr	r2, [pc, #272]	; (db94 <event_connection_prepare+0x964>)
    da84:	4b44      	ldr	r3, [pc, #272]	; (db98 <event_connection_prepare+0x968>)
    da86:	4945      	ldr	r1, [pc, #276]	; (db9c <event_connection_prepare+0x96c>)
    da88:	4845      	ldr	r0, [pc, #276]	; (dba0 <event_connection_prepare+0x970>)
    da8a:	f7ff bbe1 	b.w	d250 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    da8e:	fb0a 3212 	mls	r2, sl, r2, r3
    da92:	b292      	uxth	r2, r2
    da94:	fba2 0101 	umull	r0, r1, r2, r1
    da98:	f240 1323 	movw	r3, #291	; 0x123
    da9c:	fb03 1102 	mla	r1, r3, r2, r1
    daa0:	a333      	add	r3, pc, #204	; (adr r3, db70 <event_connection_prepare+0x940>)
    daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
    daa6:	f7f2 fbb5 	bl	214 <__aeabi_uldivmod>
    daaa:	eba8 0300 	sub.w	r3, r8, r0
    daae:	e742      	b.n	d936 <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    dab0:	990c      	ldr	r1, [sp, #48]	; 0x30
    dab2:	a32f      	add	r3, pc, #188	; (adr r3, db70 <event_connection_prepare+0x940>)
    dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
    dab8:	fba1 010b 	umull	r0, r1, r1, fp
    dabc:	f7f2 fbaa 	bl	214 <__aeabi_uldivmod>
    dac0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    dac4:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    dac6:	4635      	mov	r5, r6
    dac8:	e790      	b.n	d9ec <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    daca:	fba5 ab0b 	umull	sl, fp, r5, fp
    dace:	a328      	add	r3, pc, #160	; (adr r3, db70 <event_connection_prepare+0x940>)
    dad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    dad4:	4650      	mov	r0, sl
    dad6:	4659      	mov	r1, fp
    dad8:	f7f2 fb9c 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    dadc:	4a31      	ldr	r2, [pc, #196]	; (dba4 <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    dade:	f894 6020 	ldrb.w	r6, [r4, #32]
    dae2:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    dae6:	2307      	movs	r3, #7
    dae8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    daec:	2100      	movs	r1, #0
    daee:	4343      	muls	r3, r0
    daf0:	fb02 3301 	mla	r3, r2, r1, r3
    daf4:	fba0 0102 	umull	r0, r1, r0, r2
    daf8:	ebba 0000 	subs.w	r0, sl, r0
    dafc:	4419      	add	r1, r3
    dafe:	eb6b 0101 	sbc.w	r1, fp, r1
    db02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    db06:	2300      	movs	r3, #0
    db08:	f7f2 fb84 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    db0c:	68e3      	ldr	r3, [r4, #12]
    db0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    db10:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    db14:	4924      	ldr	r1, [pc, #144]	; (dba8 <event_connection_prepare+0x978>)
		ticker_status =
    db16:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    db18:	441a      	add	r2, r3
    db1a:	4613      	mov	r3, r2
    db1c:	4a23      	ldr	r2, [pc, #140]	; (dbac <event_connection_prepare+0x97c>)
		ticker_status =
    db1e:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    db20:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    db24:	bf38      	it	cc
    db26:	460a      	movcc	r2, r1
    db28:	3607      	adds	r6, #7
		ticker_status =
    db2a:	f641 2195 	movw	r1, #6805	; 0x1a95
    db2e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    db30:	b2f6      	uxtb	r6, r6
		ticker_status =
    db32:	4916      	ldr	r1, [pc, #88]	; (db8c <event_connection_prepare+0x95c>)
    db34:	9107      	str	r1, [sp, #28]
    db36:	9205      	str	r2, [sp, #20]
    db38:	9406      	str	r4, [sp, #24]
    db3a:	f8cd 800c 	str.w	r8, [sp, #12]
    db3e:	9501      	str	r5, [sp, #4]
    db40:	9700      	str	r7, [sp, #0]
    db42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    db44:	4632      	mov	r2, r6
    db46:	4641      	mov	r1, r8
    db48:	4640      	mov	r0, r8
    db4a:	f7fb fb0d 	bl	9168 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    db4e:	f030 0002 	bics.w	r0, r0, #2
    db52:	d193      	bne.n	da7c <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    db54:	f1b9 0f00 	cmp.w	r9, #0
    db58:	f000 8383 	beq.w	e262 <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    db5c:	2201      	movs	r2, #1
    db5e:	4611      	mov	r1, r2
}
    db60:	b00f      	add	sp, #60	; 0x3c
    db62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    db66:	f7fa bd19 	b.w	859c <mayfly_enable>
    db6a:	bf00      	nop
    db6c:	f3af 8000 	nop.w
    db70:	1afd498d 	.word	0x1afd498d
    db74:	00000007 	.word	0x00000007
    db78:	09ce5400 	.word	0x09ce5400
    db7c:	000199c0 	.word	0x000199c0
    db80:	000f4240 	.word	0x000f4240
    db84:	026259ff 	.word	0x026259ff
    db88:	01c9c37f 	.word	0x01c9c37f
    db8c:	0000bf6d 	.word	0x0000bf6d
    db90:	00015e19 	.word	0x00015e19
    db94:	000171f2 	.word	0x000171f2
    db98:	000195d9 	.word	0x000195d9
    db9c:	00017241 	.word	0x00017241
    dba0:	000197a1 	.word	0x000197a1
    dba4:	1afd498d 	.word	0x1afd498d
    dba8:	0000e411 	.word	0x0000e411
    dbac:	0000e415 	.word	0x0000e415
    dbb0:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    dbb4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dbb8:	2b00      	cmp	r3, #0
    dbba:	d05e      	beq.n	dc7a <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dbbc:	48c9      	ldr	r0, [pc, #804]	; (dee4 <event_connection_prepare+0xcb4>)
    dbbe:	f7fa fc4a 	bl	8456 <mem_acquire>
		if (node_tx) {
    dbc2:	4607      	mov	r7, r0
    dbc4:	b1e8      	cbz	r0, dc02 <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    dbc6:	2300      	movs	r3, #0
    dbc8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    dbcc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    dbce:	3306      	adds	r3, #6
    dbd0:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    dbd2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbd6:	7903      	ldrb	r3, [r0, #4]
    dbd8:	f043 0303 	orr.w	r3, r3, #3
    dbdc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    dbde:	2308      	movs	r3, #8
    dbe0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    dbe2:	2301      	movs	r3, #1
    dbe4:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    dbe6:	2205      	movs	r2, #5
    dbe8:	f104 0179 	add.w	r1, r4, #121	; 0x79
    dbec:	3008      	adds	r0, #8
    dbee:	f7f4 f805 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    dbf2:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    dbf6:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    dbfa:	4639      	mov	r1, r7
    dbfc:	4620      	mov	r0, r4
    dbfe:	f7ff fa47 	bl	d090 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    dc02:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    dc06:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    dc0a:	429a      	cmp	r2, r3
    dc0c:	d01e      	beq.n	dc4c <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    dc0e:	2005      	movs	r0, #5
    dc10:	f7ff f8a8 	bl	cd64 <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc14:	48b3      	ldr	r0, [pc, #716]	; (dee4 <event_connection_prepare+0xcb4>)
    dc16:	f7fa fc1e 	bl	8456 <mem_acquire>
		if (node_tx) {
    dc1a:	4601      	mov	r1, r0
    dc1c:	b1b0      	cbz	r0, dc4c <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    dc1e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    dc22:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc26:	7903      	ldrb	r3, [r0, #4]
    dc28:	f043 0303 	orr.w	r3, r3, #3
    dc2c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    dc2e:	2302      	movs	r3, #2
    dc30:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    dc32:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    dc34:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    dc38:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    dc3a:	4620      	mov	r0, r4
    dc3c:	f7ff fa28 	bl	d090 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    dc40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    dc42:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    dc44:	bf98      	it	ls
    dc46:	3301      	addls	r3, #1
    dc48:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    dc4c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    dc50:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    dc54:	429a      	cmp	r2, r3
    dc56:	f000 82eb 	beq.w	e230 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    dc5a:	2005      	movs	r0, #5
    dc5c:	f7ff f882 	bl	cd64 <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    dc60:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    dc64:	f003 0303 	and.w	r3, r3, #3
    dc68:	2b03      	cmp	r3, #3
    dc6a:	f200 830c 	bhi.w	e286 <event_connection_prepare+0x1056>
    dc6e:	e8df f013 	tbh	[pc, r3, lsl #1]
    dc72:	0288      	.short	0x0288
    dc74:	02df02df 	.word	0x02df02df
    dc78:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    dc7a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    dc7e:	1af3      	subs	r3, r6, r3
    dc80:	041f      	lsls	r7, r3, #16
    dc82:	d4be      	bmi.n	dc02 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    dc84:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    dc88:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    dc8c:	f104 0717 	add.w	r7, r4, #23
    dc90:	2205      	movs	r2, #5
    dc92:	f104 0179 	add.w	r1, r4, #121	; 0x79
    dc96:	4638      	mov	r0, r7
    dc98:	f7f3 ffb0 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    dc9c:	2105      	movs	r1, #5
    dc9e:	4638      	mov	r0, r7
    dca0:	f7fa fd84 	bl	87ac <util_ones_count_get>
		conn->data_chan_count =
    dca4:	7f63      	ldrb	r3, [r4, #29]
    dca6:	f360 0305 	bfi	r3, r0, #0, #6
    dcaa:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    dcac:	2301      	movs	r3, #1
    dcae:	7723      	strb	r3, [r4, #28]
    dcb0:	e7a7      	b.n	dc02 <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    dcb2:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    dcb6:	f1b9 0f00 	cmp.w	r9, #0
    dcba:	d1a2      	bne.n	dc02 <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dcbc:	4889      	ldr	r0, [pc, #548]	; (dee4 <event_connection_prepare+0xcb4>)
    dcbe:	f7fa fbca 	bl	8456 <mem_acquire>
	if (!node_tx) {
    dcc2:	4607      	mov	r7, r0
    dcc4:	2800      	cmp	r0, #0
    dcc6:	d09c      	beq.n	dc02 <event_connection_prepare+0x9d2>
	if (!conn->role) {
    dcc8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    dccc:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    dcce:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    dcd2:	db4d      	blt.n	dd70 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    dcd4:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    dcd8:	465b      	mov	r3, fp
    dcda:	464a      	mov	r2, r9
    dcdc:	f104 0194 	add.w	r1, r4, #148	; 0x94
    dce0:	f104 0084 	add.w	r0, r4, #132	; 0x84
    dce4:	f005 fc22 	bl	1352c <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    dce8:	2210      	movs	r2, #16
    dcea:	4659      	mov	r1, fp
    dcec:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    dcf0:	f7f3 ff84 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    dcf4:	f504 7189 	add.w	r1, r4, #274	; 0x112
    dcf8:	2208      	movs	r2, #8
    dcfa:	f204 1033 	addw	r0, r4, #307	; 0x133
    dcfe:	f7f3 ff7d 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    dd02:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    dd06:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    dd0a:	f369 0300 	bfi	r3, r9, #0, #1
    dd0e:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    dd12:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    dd16:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    dd1a:	f043 0301 	orr.w	r3, r3, #1
    dd1e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    dd22:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    dd26:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    dd2a:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    dd2e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    dd32:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    dd36:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    dd3a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    dd3e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    dd42:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    dd46:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    dd4a:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    dd4e:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    dd52:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    dd56:	4651      	mov	r1, sl
    dd58:	4620      	mov	r0, r4
    dd5a:	f7ff fa27 	bl	d1ac <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    dd5e:	4639      	mov	r1, r7
    dd60:	4620      	mov	r0, r4
    dd62:	f7ff f995 	bl	d090 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    dd66:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    dd6a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    dd6e:	e748      	b.n	dc02 <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    dd70:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    dd74:	f003 0348 	and.w	r3, r3, #72	; 0x48
    dd78:	2b08      	cmp	r3, #8
    dd7a:	f000 80a2 	beq.w	dec2 <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    dd7e:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    dd82:	f1b9 0f00 	cmp.w	r9, #0
    dd86:	d020      	beq.n	ddca <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    dd88:	7903      	ldrb	r3, [r0, #4]
    dd8a:	f043 0303 	orr.w	r3, r3, #3
    dd8e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    dd90:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    dd94:	0698      	lsls	r0, r3, #26
    dd96:	d512      	bpl.n	ddbe <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    dd98:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    dd9c:	0759      	lsls	r1, r3, #29
    dd9e:	d50e      	bpl.n	ddbe <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    dda0:	2311      	movs	r3, #17
    dda2:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    dda4:	2303      	movs	r3, #3
    dda6:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    dda8:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    ddac:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    ddae:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    ddb0:	797b      	ldrb	r3, [r7, #5]
    ddb2:	3301      	adds	r3, #1
    ddb4:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    ddb6:	2300      	movs	r3, #0
    ddb8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    ddbc:	e7cf      	b.n	dd5e <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    ddbe:	230d      	movs	r3, #13
    ddc0:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    ddc2:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    ddc6:	2301      	movs	r3, #1
    ddc8:	e7f1      	b.n	ddae <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ddca:	4846      	ldr	r0, [pc, #280]	; (dee4 <event_connection_prepare+0xcb4>)
    ddcc:	f7fa fb43 	bl	8456 <mem_acquire>
	if (!node_tx) {
    ddd0:	4682      	mov	sl, r0
    ddd2:	2800      	cmp	r0, #0
    ddd4:	f000 8300 	beq.w	e3d8 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ddd8:	7903      	ldrb	r3, [r0, #4]
    ddda:	f043 0303 	orr.w	r3, r3, #3
    ddde:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    dde0:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    dde4:	230d      	movs	r3, #13
    dde6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    dde8:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    ddec:	f100 0308 	add.w	r3, r0, #8
    ddf0:	4619      	mov	r1, r3
    ddf2:	2208      	movs	r2, #8
    ddf4:	6868      	ldr	r0, [r5, #4]
    ddf6:	930d      	str	r3, [sp, #52]	; 0x34
    ddf8:	f006 fd54 	bl	148a4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    ddfc:	f10a 0310 	add.w	r3, sl, #16
    de00:	4619      	mov	r1, r3
    de02:	465a      	mov	r2, fp
    de04:	6868      	ldr	r0, [r5, #4]
    de06:	930b      	str	r3, [sp, #44]	; 0x2c
    de08:	f006 fd4c 	bl	148a4 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    de0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de0e:	2208      	movs	r2, #8
    de10:	4619      	mov	r1, r3
    de12:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    de16:	f7f3 fef1 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    de1a:	465a      	mov	r2, fp
    de1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    de1e:	f504 708b 	add.w	r0, r4, #278	; 0x116
    de22:	f7f3 feeb 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    de26:	4651      	mov	r1, sl
    de28:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    de2a:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    de2e:	f7ff f92f 	bl	d090 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    de32:	4653      	mov	r3, sl
    de34:	464a      	mov	r2, r9
    de36:	f104 0194 	add.w	r1, r4, #148	; 0x94
    de3a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    de3e:	f005 fb75 	bl	1352c <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    de42:	2210      	movs	r2, #16
    de44:	4651      	mov	r1, sl
    de46:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    de4a:	f7f3 fed7 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    de4e:	2208      	movs	r2, #8
    de50:	f504 7189 	add.w	r1, r4, #274	; 0x112
    de54:	f204 1033 	addw	r0, r4, #307	; 0x133
    de58:	f7f3 fed0 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    de5c:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    de60:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    de64:	f043 0301 	orr.w	r3, r3, #1
    de68:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    de6c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    de70:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    de74:	f369 0300 	bfi	r3, r9, #0, #1
    de78:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    de7c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    de80:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    de84:	f043 0310 	orr.w	r3, r3, #16
    de88:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de8c:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    de8e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de92:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    de96:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    de9a:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    de9e:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    dea2:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    dea6:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    deaa:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    deae:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    deb2:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    deb6:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    deb8:	2301      	movs	r3, #1
    deba:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    debc:	2305      	movs	r3, #5
    debe:	71fb      	strb	r3, [r7, #7]
    dec0:	e74d      	b.n	dd5e <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    dec2:	4651      	mov	r1, sl
    dec4:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    dec8:	f7ff f970 	bl	d1ac <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    decc:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    ded0:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    ded4:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    ded8:	f369 03c3 	bfi	r3, r9, #3, #1
    dedc:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    dee0:	e73d      	b.n	dd5e <event_connection_prepare+0xb2e>
    dee2:	bf00      	nop
    dee4:	20000a44 	.word	0x20000a44
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dee8:	48b0      	ldr	r0, [pc, #704]	; (e1ac <event_connection_prepare+0xf7c>)
    deea:	f7fa fab4 	bl	8456 <mem_acquire>
	if (node_tx) {
    deee:	4607      	mov	r7, r0
    def0:	2800      	cmp	r0, #0
    def2:	f43f ae86 	beq.w	dc02 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    def6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    defa:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    defe:	4bac      	ldr	r3, [pc, #688]	; (e1b0 <event_connection_prepare+0xf80>)
    df00:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df04:	7903      	ldrb	r3, [r0, #4]
    df06:	f043 0303 	orr.w	r3, r3, #3
    df0a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    df0c:	2309      	movs	r3, #9
    df0e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    df10:	f994 301d 	ldrsb.w	r3, [r4, #29]
    df14:	2b00      	cmp	r3, #0
    df16:	bfac      	ite	ge
    df18:	2308      	movge	r3, #8
    df1a:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    df1c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    df1e:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    df20:	2100      	movs	r1, #0
    df22:	4410      	add	r0, r2
    df24:	f7f3 fe96 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    df28:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    df2c:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    df2e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    df30:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    df32:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    df34:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    df36:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    df38:	4620      	mov	r0, r4
    df3a:	f7ff f8a9 	bl	d090 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    df3e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    df42:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    df46:	e65c      	b.n	dc02 <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    df48:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    df4c:	07da      	lsls	r2, r3, #31
    df4e:	d424      	bmi.n	df9a <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    df50:	4896      	ldr	r0, [pc, #600]	; (e1ac <event_connection_prepare+0xf7c>)
    df52:	f7fa fa80 	bl	8456 <mem_acquire>
		if (node_tx) {
    df56:	4601      	mov	r1, r0
    df58:	2800      	cmp	r0, #0
    df5a:	f43f ae52 	beq.w	dc02 <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    df5e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    df62:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    df66:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    df6a:	f043 0301 	orr.w	r3, r3, #1
    df6e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df72:	7903      	ldrb	r3, [r0, #4]
    df74:	f043 0303 	orr.w	r3, r3, #3
    df78:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    df7a:	2306      	movs	r3, #6
    df7c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    df7e:	230c      	movs	r3, #12
    df80:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    df82:	2309      	movs	r3, #9
    df84:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    df86:	f06f 030e 	mvn.w	r3, #14
    df8a:	7243      	strb	r3, [r0, #9]
    df8c:	2305      	movs	r3, #5
    df8e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    df90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df94:	72c3      	strb	r3, [r0, #11]
    df96:	7303      	strb	r3, [r0, #12]
    df98:	e7ce      	b.n	df38 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    df9a:	079b      	lsls	r3, r3, #30
    df9c:	d526      	bpl.n	dfec <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    df9e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    dfa2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    dfa6:	2002      	movs	r0, #2
    dfa8:	f7fd f86a 	bl	b080 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    dfac:	b920      	cbnz	r0, dfb8 <event_connection_prepare+0xd88>
    dfae:	4b81      	ldr	r3, [pc, #516]	; (e1b4 <event_connection_prepare+0xf84>)
    dfb0:	9301      	str	r3, [sp, #4]
    dfb2:	9300      	str	r3, [sp, #0]
    dfb4:	4b80      	ldr	r3, [pc, #512]	; (e1b8 <event_connection_prepare+0xf88>)
    dfb6:	e45d      	b.n	d874 <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    dfb8:	8c23      	ldrh	r3, [r4, #32]
    dfba:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    dfbc:	2301      	movs	r3, #1
    dfbe:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    dfc0:	7a03      	ldrb	r3, [r0, #8]
    dfc2:	f043 0303 	orr.w	r3, r3, #3
    dfc6:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    dfc8:	2306      	movs	r3, #6
    dfca:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    dfcc:	230c      	movs	r3, #12
    dfce:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    dfd0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    dfd4:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    dfd6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    dfda:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    dfde:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    dfe2:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    dfe6:	f7fd feb7 	bl	bd58 <packet_rx_enqueue>
    dfea:	e60a      	b.n	dc02 <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    dfec:	4b71      	ldr	r3, [pc, #452]	; (e1b4 <event_connection_prepare+0xf84>)
    dfee:	9301      	str	r3, [sp, #4]
    dff0:	9300      	str	r3, [sp, #0]
    dff2:	4b71      	ldr	r3, [pc, #452]	; (e1b8 <event_connection_prepare+0xf88>)
    dff4:	f7ff bad2 	b.w	d59c <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dff8:	486c      	ldr	r0, [pc, #432]	; (e1ac <event_connection_prepare+0xf7c>)
    dffa:	f7fa fa2c 	bl	8456 <mem_acquire>
	if (node_tx) {
    dffe:	4601      	mov	r1, r0
    e000:	2800      	cmp	r0, #0
    e002:	f43f adfe 	beq.w	dc02 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    e006:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    e00a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e00e:	7903      	ldrb	r3, [r0, #4]
    e010:	f043 0303 	orr.w	r3, r3, #3
    e014:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    e016:	2301      	movs	r3, #1
    e018:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    e01a:	2312      	movs	r3, #18
    e01c:	71c3      	strb	r3, [r0, #7]
    e01e:	e78b      	b.n	df38 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    e020:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    e024:	07d7      	lsls	r7, r2, #31
    e026:	d551      	bpl.n	e0cc <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e028:	4860      	ldr	r0, [pc, #384]	; (e1ac <event_connection_prepare+0xf7c>)
    e02a:	f7fa fa14 	bl	8456 <mem_acquire>
		if (node_tx) {
    e02e:	4607      	mov	r7, r0
    e030:	2800      	cmp	r0, #0
    e032:	f43f ade6 	beq.w	dc02 <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    e036:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    e03a:	f36f 0300 	bfc	r3, #0, #1
    e03e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    e042:	b2db      	uxtb	r3, r3
    e044:	f3c3 0982 	ubfx	r9, r3, #2, #3
    e048:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    e04c:	d138      	bne.n	e0c0 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    e04e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    e052:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    e056:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    e058:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    e05c:	d51a      	bpl.n	e094 <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    e05e:	2002      	movs	r0, #2
    e060:	f7fd f80e 	bl	b080 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    e064:	b920      	cbnz	r0, e070 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    e066:	4b53      	ldr	r3, [pc, #332]	; (e1b4 <event_connection_prepare+0xf84>)
    e068:	9301      	str	r3, [sp, #4]
    e06a:	9300      	str	r3, [sp, #0]
    e06c:	4b53      	ldr	r3, [pc, #332]	; (e1bc <event_connection_prepare+0xf8c>)
    e06e:	e401      	b.n	d874 <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    e070:	8c23      	ldrh	r3, [r4, #32]
    e072:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    e074:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    e078:	230c      	movs	r3, #12
    e07a:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    e07c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    e080:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e084:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    e086:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    e08a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e08e:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    e090:	f7fd fe62 	bl	bd58 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e094:	793b      	ldrb	r3, [r7, #4]
    e096:	f043 0303 	orr.w	r3, r3, #3
    e09a:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    e09c:	2305      	movs	r3, #5
    e09e:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    e0a0:	2318      	movs	r3, #24
    e0a2:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    e0a4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    e0a8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    e0ac:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    e0ae:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    e0b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
    e0b6:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    e0b8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    e0bc:	817b      	strh	r3, [r7, #10]
    e0be:	e59c      	b.n	dbfa <event_connection_prepare+0x9ca>
								 conn->latency +
    e0c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e0c2:	3306      	adds	r3, #6
    e0c4:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    e0c6:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    e0ca:	e7e3      	b.n	e094 <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    e0cc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    e0d0:	1af3      	subs	r3, r6, r3
    e0d2:	0419      	lsls	r1, r3, #16
    e0d4:	f53f ad95 	bmi.w	dc02 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    e0d8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    e0dc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    e0e0:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    e0e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    e0e8:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    e0ec:	bf18      	it	ne
    e0ee:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    e0f2:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    e0f6:	bf1c      	itt	ne
    e0f8:	f367 03c5 	bfine	r3, r7, #3, #3
    e0fc:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    e100:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    e104:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    e108:	d008      	beq.n	e11c <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    e10a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    e10e:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    e112:	095b      	lsrs	r3, r3, #5
    e114:	f363 0702 	bfi	r7, r3, #0, #3
    e118:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    e11c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    e120:	461f      	mov	r7, r3
    e122:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e126:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    e12a:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    e12c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    e130:	d40b      	bmi.n	e14a <event_connection_prepare+0xf1a>
    e132:	b2fb      	uxtb	r3, r7
    e134:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e138:	4283      	cmp	r3, r0
    e13a:	d106      	bne.n	e14a <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    e13c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    e140:	f003 0307 	and.w	r3, r3, #7
    e144:	428b      	cmp	r3, r1
    e146:	f43f ad5c 	beq.w	dc02 <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    e14a:	2002      	movs	r0, #2
    e14c:	f7fc ff98 	bl	b080 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    e150:	2800      	cmp	r0, #0
    e152:	d088      	beq.n	e066 <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    e154:	8c23      	ldrh	r3, [r4, #32]
    e156:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e158:	230c      	movs	r3, #12
    e15a:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    e15c:	2300      	movs	r3, #0
    e15e:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    e160:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    e164:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e168:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    e16a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    e16e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e172:	7343      	strb	r3, [r0, #13]
    e174:	e737      	b.n	dfe6 <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    e176:	4b0f      	ldr	r3, [pc, #60]	; (e1b4 <event_connection_prepare+0xf84>)
    e178:	9301      	str	r3, [sp, #4]
    e17a:	9300      	str	r3, [sp, #0]
    e17c:	4b10      	ldr	r3, [pc, #64]	; (e1c0 <event_connection_prepare+0xf90>)
    e17e:	f7ff ba0d 	b.w	d59c <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    e182:	f7fc ff67 	bl	b054 <packet_rx_acquired_count_get>
    e186:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    e188:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    e18c:	f7fa f992 	bl	84b4 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    e190:	4438      	add	r0, r7
    e192:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    e194:	28ff      	cmp	r0, #255	; 0xff
    e196:	d91d      	bls.n	e1d4 <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    e198:	4b06      	ldr	r3, [pc, #24]	; (e1b4 <event_connection_prepare+0xf84>)
    e19a:	9301      	str	r3, [sp, #4]
    e19c:	9300      	str	r3, [sp, #0]
    e19e:	4a09      	ldr	r2, [pc, #36]	; (e1c4 <event_connection_prepare+0xf94>)
    e1a0:	4b09      	ldr	r3, [pc, #36]	; (e1c8 <event_connection_prepare+0xf98>)
    e1a2:	490a      	ldr	r1, [pc, #40]	; (e1cc <event_connection_prepare+0xf9c>)
    e1a4:	480a      	ldr	r0, [pc, #40]	; (e1d0 <event_connection_prepare+0xfa0>)
    e1a6:	f7ff b853 	b.w	d250 <event_connection_prepare+0x20>
    e1aa:	bf00      	nop
    e1ac:	20000a44 	.word	0x20000a44
    e1b0:	000141ff 	.word	0x000141ff
    e1b4:	00015e19 	.word	0x00015e19
    e1b8:	000195ed 	.word	0x000195ed
    e1bc:	00019649 	.word	0x00019649
    e1c0:	00019660 	.word	0x00019660
    e1c4:	000171f2 	.word	0x000171f2
    e1c8:	00019627 	.word	0x00019627
    e1cc:	00017241 	.word	0x00017241
    e1d0:	000197ef 	.word	0x000197ef
		if (_radio.packet_rx_data_count != free_count_rx) {
    e1d4:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    e1d8:	4283      	cmp	r3, r0
    e1da:	d129      	bne.n	e230 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e1dc:	4881      	ldr	r0, [pc, #516]	; (e3e4 <event_connection_prepare+0x11b4>)
    e1de:	f7fa f93a 	bl	8456 <mem_acquire>
		if (!node_tx) {
    e1e2:	4601      	mov	r1, r0
    e1e4:	b320      	cbz	r0, e230 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    e1e6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    e1ea:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    e1ee:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    e1f2:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    e1f4:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    e1f6:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    e1f8:	f365 0301 	bfi	r3, r5, #0, #2
    e1fc:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e200:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    e202:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e204:	f043 0303 	orr.w	r3, r3, #3
    e208:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    e20a:	2309      	movs	r3, #9
    e20c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    e20e:	2314      	movs	r3, #20
    e210:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e212:	231b      	movs	r3, #27
    e214:	720b      	strb	r3, [r1, #8]
    e216:	2300      	movs	r3, #0
    e218:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    e21a:	2348      	movs	r3, #72	; 0x48
    e21c:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    e21e:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    e220:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    e222:	4620      	mov	r0, r4
    e224:	f7fe ff34 	bl	d090 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    e228:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    e22c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    e230:	f894 3020 	ldrb.w	r3, [r4, #32]
    e234:	f994 501d 	ldrsb.w	r5, [r4, #29]
    e238:	486b      	ldr	r0, [pc, #428]	; (e3e8 <event_connection_prepare+0x11b8>)
    e23a:	496c      	ldr	r1, [pc, #432]	; (e3ec <event_connection_prepare+0x11bc>)
    e23c:	68a2      	ldr	r2, [r4, #8]
    e23e:	9403      	str	r4, [sp, #12]
    e240:	3307      	adds	r3, #7
    e242:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    e246:	bf38      	it	cc
    e248:	4601      	movcc	r1, r0
    e24a:	b2db      	uxtb	r3, r3
    e24c:	e88d 000c 	stmia.w	sp, {r2, r3}
    e250:	9102      	str	r1, [sp, #8]
    e252:	1d23      	adds	r3, r4, #4
    e254:	4622      	mov	r2, r4
    e256:	990c      	ldr	r1, [sp, #48]	; 0x30
    e258:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    e25a:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    e25c:	f7fe fd90 	bl	cd80 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    e260:	8466      	strh	r6, [r4, #34]	; 0x22
}
    e262:	b00f      	add	sp, #60	; 0x3c
    e264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    e268:	f7fc fef4 	bl	b054 <packet_rx_acquired_count_get>
    e26c:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    e26e:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    e272:	f7fa f91f 	bl	84b4 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    e276:	4438      	add	r0, r7
    e278:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    e27a:	28ff      	cmp	r0, #255	; 0xff
    e27c:	d88c      	bhi.n	e198 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    e27e:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    e282:	4283      	cmp	r3, r0
    e284:	d005      	beq.n	e292 <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    e286:	4b5a      	ldr	r3, [pc, #360]	; (e3f0 <event_connection_prepare+0x11c0>)
    e288:	9301      	str	r3, [sp, #4]
    e28a:	9300      	str	r3, [sp, #0]
    e28c:	4b59      	ldr	r3, [pc, #356]	; (e3f4 <event_connection_prepare+0x11c4>)
    e28e:	f7ff b985 	b.w	d59c <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    e292:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    e296:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    e29a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    e29e:	2100      	movs	r1, #0
    e2a0:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    e2a4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e2a8:	f361 02c3 	bfi	r2, r1, #3, #1
    e2ac:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    e2b0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    e2b4:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    e2b6:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    e2ba:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    e2bc:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    e2c0:	f7fa f8f8 	bl	84b4 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    e2c4:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    e2c8:	b10b      	cbz	r3, e2ce <event_connection_prepare+0x109e>
			free_count_conn++;
    e2ca:	3001      	adds	r0, #1
    e2cc:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    e2ce:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    e2d2:	b10b      	cbz	r3, e2d8 <event_connection_prepare+0x10a8>
			free_count_conn++;
    e2d4:	3001      	adds	r0, #1
    e2d6:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e2d8:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e2da:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e2de:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e2e0:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e2e2:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e2e6:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e2e8:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e2ea:	d052      	beq.n	e392 <event_connection_prepare+0x1162>
    e2ec:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    e2f0:	42bb      	cmp	r3, r7
    e2f2:	d34e      	bcc.n	e392 <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    e2f4:	2002      	movs	r0, #2
    e2f6:	f7fc fec3 	bl	b080 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    e2fa:	2800      	cmp	r0, #0
    e2fc:	d155      	bne.n	e3aa <event_connection_prepare+0x117a>
    e2fe:	4b3c      	ldr	r3, [pc, #240]	; (e3f0 <event_connection_prepare+0x11c0>)
    e300:	9301      	str	r3, [sp, #4]
    e302:	9300      	str	r3, [sp, #0]
    e304:	4b3b      	ldr	r3, [pc, #236]	; (e3f4 <event_connection_prepare+0x11c4>)
    e306:	f7ff bab5 	b.w	d874 <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    e30a:	b90b      	cbnz	r3, e310 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    e30c:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    e310:	3b01      	subs	r3, #1
    e312:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    e316:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    e31a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    e31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e322:	4649      	mov	r1, r9
    e324:	6818      	ldr	r0, [r3, #0]
    e326:	f7fa f8b0 	bl	848a <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    e32a:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    e32e:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    e332:	3a01      	subs	r2, #1
    e334:	4293      	cmp	r3, r2
    e336:	db08      	blt.n	e34a <event_connection_prepare+0x111a>
    e338:	4b2d      	ldr	r3, [pc, #180]	; (e3f0 <event_connection_prepare+0x11c0>)
    e33a:	9301      	str	r3, [sp, #4]
    e33c:	9300      	str	r3, [sp, #0]
    e33e:	4a2e      	ldr	r2, [pc, #184]	; (e3f8 <event_connection_prepare+0x11c8>)
    e340:	4b2c      	ldr	r3, [pc, #176]	; (e3f4 <event_connection_prepare+0x11c4>)
    e342:	492e      	ldr	r1, [pc, #184]	; (e3fc <event_connection_prepare+0x11cc>)
    e344:	482e      	ldr	r0, [pc, #184]	; (e400 <event_connection_prepare+0x11d0>)
    e346:	f7fe bf83 	b.w	d250 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    e34a:	3301      	adds	r3, #1
    e34c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    e350:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    e354:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    e358:	4293      	cmp	r3, r2
    e35a:	d1d6      	bne.n	e30a <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    e35c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    e35e:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    e362:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    e364:	bf9a      	itte	ls
    e366:	2334      	movls	r3, #52	; 0x34
    e368:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    e36c:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    e370:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    e374:	fbb2 f2f1 	udiv	r2, r2, r1
    e378:	b2d2      	uxtb	r2, r2
    e37a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    e37e:	b95a      	cbnz	r2, e398 <event_connection_prepare+0x1168>
    e380:	4b1b      	ldr	r3, [pc, #108]	; (e3f0 <event_connection_prepare+0x11c0>)
    e382:	9301      	str	r3, [sp, #4]
    e384:	9300      	str	r3, [sp, #0]
    e386:	4a1c      	ldr	r2, [pc, #112]	; (e3f8 <event_connection_prepare+0x11c8>)
    e388:	4b1a      	ldr	r3, [pc, #104]	; (e3f4 <event_connection_prepare+0x11c4>)
    e38a:	491c      	ldr	r1, [pc, #112]	; (e3fc <event_connection_prepare+0x11cc>)
    e38c:	481d      	ldr	r0, [pc, #116]	; (e404 <event_connection_prepare+0x11d4>)
    e38e:	f7fe bf5f 	b.w	d250 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    e392:	f8df 9078 	ldr.w	r9, [pc, #120]	; e40c <event_connection_prepare+0x11dc>
    e396:	e7db      	b.n	e350 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    e398:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    e39c:	4b1a      	ldr	r3, [pc, #104]	; (e408 <event_connection_prepare+0x11d8>)
    e39e:	f7fa f833 	bl	8408 <mem_init>
			packet_rx_allocate(4);
    e3a2:	2004      	movs	r0, #4
    e3a4:	f7fc fee4 	bl	b170 <packet_rx_allocate>
    e3a8:	e7a4      	b.n	e2f4 <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    e3aa:	8c23      	ldrh	r3, [r4, #32]
    e3ac:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e3ae:	2301      	movs	r3, #1
    e3b0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e3b2:	7a03      	ldrb	r3, [r0, #8]
    e3b4:	f043 0303 	orr.w	r3, r3, #3
    e3b8:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    e3ba:	2309      	movs	r3, #9
    e3bc:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e3be:	2315      	movs	r3, #21
    e3c0:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    e3c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e3c4:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    e3c6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    e3c8:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    e3ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e3cc:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    e3ce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    e3d0:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    e3d2:	f7fd fcc1 	bl	bd58 <packet_rx_enqueue>
    e3d6:	e72b      	b.n	e230 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e3d8:	4902      	ldr	r1, [pc, #8]	; (e3e4 <event_connection_prepare+0x11b4>)
    e3da:	4638      	mov	r0, r7
    e3dc:	f7fa f855 	bl	848a <mem_release>
    e3e0:	e40f      	b.n	dc02 <event_connection_prepare+0x9d2>
    e3e2:	bf00      	nop
    e3e4:	20000a44 	.word	0x20000a44
    e3e8:	0000e73d 	.word	0x0000e73d
    e3ec:	0000e455 	.word	0x0000e455
    e3f0:	00015e19 	.word	0x00015e19
    e3f4:	00019627 	.word	0x00019627
    e3f8:	000171f2 	.word	0x000171f2
    e3fc:	00017241 	.word	0x00017241
    e400:	00019826 	.word	0x00019826
    e404:	00019880 	.word	0x00019880
    e408:	20000a18 	.word	0x20000a18
    e40c:	20000a30 	.word	0x20000a30

0000e410 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    e410:	f7fe bf0e 	b.w	d230 <event_connection_prepare>

0000e414 <event_slave_prepare>:
    e414:	f7fe bf0c 	b.w	d230 <event_connection_prepare>

0000e418 <connection_configure>:
{
    e418:	b510      	push	{r4, lr}
    e41a:	4604      	mov	r4, r0
	radio_reset();
    e41c:	f005 f962 	bl	136e4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    e420:	2000      	movs	r0, #0
    e422:	f005 f989 	bl	13738 <radio_tx_power_set>
	radio_isr_set(isr);
    e426:	480a      	ldr	r0, [pc, #40]	; (e450 <connection_configure+0x38>)
    e428:	f005 f926 	bl	13678 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    e42c:	f104 0010 	add.w	r0, r4, #16
    e430:	f005 f9a0 	bl	13774 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    e434:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    e436:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    e438:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    e43a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    e43e:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    e440:	f240 605b 	movw	r0, #1627	; 0x65b
    e444:	4319      	orrs	r1, r3
}
    e446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    e44a:	f005 ba3b 	b.w	138c4 <radio_crc_configure>
    e44e:	bf00      	nop
    e450:	0000fb01 	.word	0x0000fb01

0000e454 <event_slave>:
{
    e454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e458:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    e45a:	4b71      	ldr	r3, [pc, #452]	; (e620 <event_slave+0x1cc>)
    e45c:	7cda      	ldrb	r2, [r3, #19]
{
    e45e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    e460:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    e464:	461d      	mov	r5, r3
    e466:	b172      	cbz	r2, e486 <event_slave+0x32>
    e468:	4b6e      	ldr	r3, [pc, #440]	; (e624 <event_slave+0x1d0>)
    e46a:	9301      	str	r3, [sp, #4]
    e46c:	9300      	str	r3, [sp, #0]
    e46e:	4a6e      	ldr	r2, [pc, #440]	; (e628 <event_slave+0x1d4>)
    e470:	4b6e      	ldr	r3, [pc, #440]	; (e62c <event_slave+0x1d8>)
    e472:	496f      	ldr	r1, [pc, #444]	; (e630 <event_slave+0x1dc>)
    e474:	486f      	ldr	r0, [pc, #444]	; (e634 <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    e476:	f7f2 fd89 	bl	f8c <printk>
    e47a:	4040      	eors	r0, r0
    e47c:	f380 8811 	msr	BASEPRI, r0
    e480:	f04f 0004 	mov.w	r0, #4
    e484:	df02      	svc	2
    e486:	7c1b      	ldrb	r3, [r3, #16]
    e488:	8c22      	ldrh	r2, [r4, #32]
    e48a:	b2db      	uxtb	r3, r3
    e48c:	3207      	adds	r2, #7
    e48e:	4293      	cmp	r3, r2
    e490:	d007      	beq.n	e4a2 <event_slave+0x4e>
    e492:	4b64      	ldr	r3, [pc, #400]	; (e624 <event_slave+0x1d0>)
    e494:	9301      	str	r3, [sp, #4]
    e496:	9300      	str	r3, [sp, #0]
    e498:	4a63      	ldr	r2, [pc, #396]	; (e628 <event_slave+0x1d4>)
    e49a:	4b64      	ldr	r3, [pc, #400]	; (e62c <event_slave+0x1d8>)
    e49c:	4964      	ldr	r1, [pc, #400]	; (e630 <event_slave+0x1dc>)
    e49e:	4866      	ldr	r0, [pc, #408]	; (e638 <event_slave+0x1e4>)
    e4a0:	e7e9      	b.n	e476 <event_slave+0x22>
	_radio.packet_counter = 0;
    e4a2:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    e4a6:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    e4aa:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    e4ac:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    e4ae:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    e4b0:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    e4b2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    e4b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    e4b6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    e4ba:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    e4bc:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    e4be:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    e4c0:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    e4c2:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    e4c4:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    e4c6:	f7ff ffa7 	bl	e418 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    e4ca:	2096      	movs	r0, #150	; 0x96
    e4cc:	f005 fab4 	bl	13a38 <radio_tmr_tifs_set>
				     conn->phy_flags);
    e4d0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    e4d4:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e4d8:	09d3      	lsrs	r3, r2, #7
    e4da:	4631      	mov	r1, r6
    e4dc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e4e0:	f000 0007 	and.w	r0, r0, #7
    e4e4:	f005 fa18 	bl	13918 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e4e8:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    e4ec:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    e4f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    e4f4:	4620      	mov	r0, r4
    e4f6:	3108      	adds	r1, #8
    e4f8:	f7fd f920 	bl	b73c <rx_packet_set>
	if (conn->data_chan_sel) {
    e4fc:	7f63      	ldrb	r3, [r4, #29]
    e4fe:	f013 0f40 	tst.w	r3, #64	; 0x40
    e502:	f104 0217 	add.w	r2, r4, #23
    e506:	d05a      	beq.n	e5be <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    e508:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    e50a:	8be1      	ldrh	r1, [r4, #30]
    e50c:	3801      	subs	r0, #1
    e50e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e512:	b280      	uxth	r0, r0
    e514:	f7fe fd78 	bl	d008 <chan_sel_2>
	chan_set(data_chan_use);
    e518:	f7fe f84c 	bl	c5b4 <chan_set>
	conn->slave.window_widening_event_us +=
    e51c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e51e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    e520:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    e522:	2200      	movs	r2, #0
    e524:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    e526:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    e528:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    e52a:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    e52c:	bf88      	it	hi
    e52e:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    e530:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e532:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    e534:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    e536:	4413      	add	r3, r2
    e538:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    e53a:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    e53c:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    e53e:	f107 0109 	add.w	r1, r7, #9
    e542:	4630      	mov	r0, r6
    e544:	f005 fa84 	bl	13a50 <radio_tmr_start>
    e548:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    e54a:	f005 fb1d 	bl	13b88 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    e54e:	4630      	mov	r0, r6
    e550:	f005 fb3c 	bl	13bcc <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    e554:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    e556:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    e558:	f103 0650 	add.w	r6, r3, #80	; 0x50
    e55c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    e560:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e564:	2101      	movs	r1, #1
    e566:	f000 0007 	and.w	r0, r0, #7
    e56a:	f005 f95c 	bl	13826 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    e56e:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    e570:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    e572:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e576:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    e57a:	2802      	cmp	r0, #2
    e57c:	d03f      	beq.n	e5fe <event_slave+0x1aa>
		return 40;
    e57e:	2804      	cmp	r0, #4
    e580:	bf0c      	ite	eq
    e582:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    e586:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    e588:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    e58a:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    e58c:	f005 f94d 	bl	1382a <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    e590:	4430      	add	r0, r6
    e592:	f005 fadb 	bl	13b4c <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    e596:	f894 1020 	ldrb.w	r1, [r4, #32]
    e59a:	3107      	adds	r1, #7
    e59c:	463a      	mov	r2, r7
    e59e:	b2c9      	uxtb	r1, r1
    e5a0:	4620      	mov	r0, r4
    e5a2:	f7fe fab9 	bl	cb18 <preempt_calc>
    e5a6:	4603      	mov	r3, r0
    e5a8:	b358      	cbz	r0, e602 <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    e5aa:	2304      	movs	r3, #4
    e5ac:	752b      	strb	r3, [r5, #20]
		radio_disable();
    e5ae:	f005 f94d 	bl	1384c <radio_disable>
	packet_tx_enqueue(2);
    e5b2:	2002      	movs	r0, #2
}
    e5b4:	b002      	add	sp, #8
    e5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    e5ba:	f7fd bf11 	b.w	c3e0 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e5be:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    e5c0:	7fa6      	ldrb	r6, [r4, #30]
    e5c2:	fb01 6606 	mla	r6, r1, r6, r6
    e5c6:	7fe1      	ldrb	r1, [r4, #31]
    e5c8:	2025      	movs	r0, #37	; 0x25
    e5ca:	440e      	add	r6, r1
    e5cc:	fb96 f1f0 	sdiv	r1, r6, r0
    e5d0:	fb00 6611 	mls	r6, r0, r1, r6
    e5d4:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e5d6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    e5d8:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e5da:	5c51      	ldrb	r1, [r2, r1]
    e5dc:	f006 0607 	and.w	r6, r6, #7
    e5e0:	fa41 f606 	asr.w	r6, r1, r6
    e5e4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    e5e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e5ea:	d495      	bmi.n	e518 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    e5ec:	fbb0 f1f3 	udiv	r1, r0, r3
    e5f0:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    e5f4:	b2c9      	uxtb	r1, r1
    e5f6:	4610      	mov	r0, r2
    e5f8:	f7fc fd10 	bl	b01c <chan_sel_remap>
    e5fc:	e78c      	b.n	e518 <event_slave+0xc4>
		return 24;
    e5fe:	2318      	movs	r3, #24
    e600:	e7c2      	b.n	e588 <event_slave+0x134>
		ticker_status =
    e602:	4a0e      	ldr	r2, [pc, #56]	; (e63c <event_slave+0x1e8>)
    e604:	4601      	mov	r1, r0
    e606:	f7fa fecb 	bl	93a0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e60a:	f030 0302 	bics.w	r3, r0, #2
    e60e:	d0d0      	beq.n	e5b2 <event_slave+0x15e>
    e610:	4b04      	ldr	r3, [pc, #16]	; (e624 <event_slave+0x1d0>)
    e612:	9301      	str	r3, [sp, #4]
    e614:	9300      	str	r3, [sp, #0]
    e616:	4a04      	ldr	r2, [pc, #16]	; (e628 <event_slave+0x1d4>)
    e618:	4b04      	ldr	r3, [pc, #16]	; (e62c <event_slave+0x1d8>)
    e61a:	4905      	ldr	r1, [pc, #20]	; (e630 <event_slave+0x1dc>)
    e61c:	4808      	ldr	r0, [pc, #32]	; (e640 <event_slave+0x1ec>)
    e61e:	e72a      	b.n	e476 <event_slave+0x22>
    e620:	200008e8 	.word	0x200008e8
    e624:	00015e19 	.word	0x00015e19
    e628:	000171f2 	.word	0x000171f2
    e62c:	00019679 	.word	0x00019679
    e630:	00017241 	.word	0x00017241
    e634:	000198bd 	.word	0x000198bd
    e638:	00019970 	.word	0x00019970
    e63c:	0000c155 	.word	0x0000c155
    e640:	000197a1 	.word	0x000197a1

0000e644 <prepare_pdu_data_tx>:
	    conn->empty ||
    e644:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    e648:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    e64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e64e:	4604      	mov	r4, r0
    e650:	460e      	mov	r6, r1
	if (/* empty packet */
    e652:	d109      	bne.n	e668 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    e654:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    e658:	b131      	cbz	r1, e668 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    e65a:	f01c 0f08 	tst.w	ip, #8
    e65e:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    e662:	d022      	beq.n	e6aa <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    e664:	4571      	cmp	r1, lr
    e666:	d020      	beq.n	e6aa <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    e668:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    e66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e670:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    e674:	f005 f93c 	bl	138f0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e678:	7803      	ldrb	r3, [r0, #0]
    e67a:	2201      	movs	r2, #1
    e67c:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    e680:	2200      	movs	r2, #0
    e682:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    e684:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e688:	7003      	strb	r3, [r0, #0]
    e68a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    e68c:	b152      	cbz	r2, e6a4 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    e68e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    e692:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    e694:	7803      	ldrb	r3, [r0, #0]
    e696:	f36f 1347 	bfc	r3, #5, #3
    e69a:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    e69c:	2300      	movs	r3, #0
    e69e:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    e6a0:	6030      	str	r0, [r6, #0]
    e6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    e6a4:	f362 1304 	bfi	r3, r2, #4, #1
    e6a8:	e7f3      	b.n	e692 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    e6aa:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    e6ae:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    e6b2:	1d0d      	adds	r5, r1, #4
    e6b4:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    e6b6:	b913      	cbnz	r3, e6be <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    e6b8:	7843      	ldrb	r3, [r0, #1]
    e6ba:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    e6be:	b122      	cbz	r2, e6ca <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e6c0:	5cab      	ldrb	r3, [r5, r2]
    e6c2:	2701      	movs	r7, #1
    e6c4:	f367 0301 	bfi	r3, r7, #0, #2
    e6c8:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    e6ca:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    e6ce:	1abf      	subs	r7, r7, r2
    e6d0:	b2ff      	uxtb	r7, r7
    e6d2:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    e6d4:	5cab      	ldrb	r3, [r5, r2]
    e6d6:	f36f 1304 	bfc	r3, #4, #1
    e6da:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    e6dc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    e6e0:	f003 0307 	and.w	r3, r3, #7
    e6e4:	2b02      	cmp	r3, #2
    e6e6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    e6e8:	bf15      	itete	ne
    e6ea:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    e6ec:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    e6ee:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    e6f0:	3b0b      	subeq	r3, #11
    e6f2:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    e6f4:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    e6f8:	bf18      	it	ne
    e6fa:	3b04      	subne	r3, #4
    e6fc:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    e700:	bf18      	it	ne
    e702:	b29b      	uxthne	r3, r3
    e704:	4563      	cmp	r3, ip
    e706:	bf28      	it	cs
    e708:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    e70a:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    e70c:	bf81      	itttt	hi
    e70e:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    e710:	5cab      	ldrbhi	r3, [r5, r2]
    e712:	f043 0310 	orrhi.w	r3, r3, #16
    e716:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    e718:	680b      	ldr	r3, [r1, #0]
    e71a:	b11b      	cbz	r3, e724 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    e71c:	5cab      	ldrb	r3, [r5, r2]
    e71e:	f043 0310 	orr.w	r3, r3, #16
    e722:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    e724:	f1be 0f00 	cmp.w	lr, #0
    e728:	d1b4      	bne.n	e694 <prepare_pdu_data_tx+0x50>
    e72a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    e72e:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    e730:	bf1c      	itt	ne
    e732:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    e736:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    e73a:	e7ab      	b.n	e694 <prepare_pdu_data_tx+0x50>

0000e73c <event_master>:
{
    e73c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e73e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    e740:	4b56      	ldr	r3, [pc, #344]	; (e89c <event_master+0x160>)
    e742:	7cd9      	ldrb	r1, [r3, #19]
{
    e744:	b085      	sub	sp, #20
    e746:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    e748:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    e74c:	461d      	mov	r5, r3
    e74e:	b171      	cbz	r1, e76e <event_master+0x32>
    e750:	4b53      	ldr	r3, [pc, #332]	; (e8a0 <event_master+0x164>)
    e752:	9301      	str	r3, [sp, #4]
    e754:	9300      	str	r3, [sp, #0]
    e756:	4a53      	ldr	r2, [pc, #332]	; (e8a4 <event_master+0x168>)
    e758:	4b53      	ldr	r3, [pc, #332]	; (e8a8 <event_master+0x16c>)
    e75a:	4954      	ldr	r1, [pc, #336]	; (e8ac <event_master+0x170>)
    e75c:	4854      	ldr	r0, [pc, #336]	; (e8b0 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    e75e:	f7f2 fc15 	bl	f8c <printk>
    e762:	4040      	eors	r0, r0
    e764:	f380 8811 	msr	BASEPRI, r0
    e768:	f04f 0004 	mov.w	r0, #4
    e76c:	df02      	svc	2
    e76e:	7c1b      	ldrb	r3, [r3, #16]
    e770:	8c21      	ldrh	r1, [r4, #32]
    e772:	b2db      	uxtb	r3, r3
    e774:	3107      	adds	r1, #7
    e776:	428b      	cmp	r3, r1
    e778:	d007      	beq.n	e78a <event_master+0x4e>
    e77a:	4b49      	ldr	r3, [pc, #292]	; (e8a0 <event_master+0x164>)
    e77c:	9301      	str	r3, [sp, #4]
    e77e:	9300      	str	r3, [sp, #0]
    e780:	4a48      	ldr	r2, [pc, #288]	; (e8a4 <event_master+0x168>)
    e782:	4b49      	ldr	r3, [pc, #292]	; (e8a8 <event_master+0x16c>)
    e784:	4949      	ldr	r1, [pc, #292]	; (e8ac <event_master+0x170>)
    e786:	484b      	ldr	r0, [pc, #300]	; (e8b4 <event_master+0x178>)
    e788:	e7e9      	b.n	e75e <event_master+0x22>
	_radio.packet_counter = 0;
    e78a:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    e78e:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    e792:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    e794:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    e796:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    e798:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    e79a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    e79c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    e79e:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    e7a2:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    e7a4:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    e7a6:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    e7a8:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    e7aa:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    e7ac:	f7fd fe18 	bl	c3e0 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    e7b0:	a903      	add	r1, sp, #12
    e7b2:	4620      	mov	r0, r4
    e7b4:	f7ff ff46 	bl	e644 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    e7b8:	9903      	ldr	r1, [sp, #12]
    e7ba:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    e7be:	780b      	ldrb	r3, [r1, #0]
    e7c0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    e7c4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e7c8:	f362 0382 	bfi	r3, r2, #2, #1
    e7cc:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    e7ce:	4620      	mov	r0, r4
    e7d0:	f7ff fe22 	bl	e418 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    e7d4:	2096      	movs	r0, #150	; 0x96
    e7d6:	f005 f92f 	bl	13a38 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    e7da:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e7de:	f000 0007 	and.w	r0, r0, #7
    e7e2:	f005 f88d 	bl	13900 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    e7e6:	9903      	ldr	r1, [sp, #12]
    e7e8:	4620      	mov	r0, r4
    e7ea:	f7fc ffd3 	bl	b794 <tx_packet_set>
	if (conn->data_chan_sel) {
    e7ee:	7f63      	ldrb	r3, [r4, #29]
    e7f0:	f013 0f40 	tst.w	r3, #64	; 0x40
    e7f4:	f104 0217 	add.w	r2, r4, #23
    e7f8:	d021      	beq.n	e83e <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    e7fa:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    e7fc:	8be1      	ldrh	r1, [r4, #30]
    e7fe:	3801      	subs	r0, #1
    e800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e804:	b280      	uxth	r0, r0
    e806:	f7fe fbff 	bl	d008 <chan_sel_2>
	chan_set(data_chan_use);
    e80a:	f7fd fed3 	bl	c5b4 <chan_set>
		remainder_us = radio_tmr_start(1,
    e80e:	68ea      	ldr	r2, [r5, #12]
    e810:	f107 0109 	add.w	r1, r7, #9
    e814:	2001      	movs	r0, #1
    e816:	f005 f91b 	bl	13a50 <radio_tmr_start>
		radio_tmr_end_capture();
    e81a:	f005 f9e9 	bl	13bf0 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    e81e:	f894 1020 	ldrb.w	r1, [r4, #32]
    e822:	3107      	adds	r1, #7
    e824:	463a      	mov	r2, r7
    e826:	b2c9      	uxtb	r1, r1
    e828:	4620      	mov	r0, r4
    e82a:	f7fe f975 	bl	cb18 <preempt_calc>
	if (0 !=
    e82e:	4603      	mov	r3, r0
    e830:	b328      	cbz	r0, e87e <event_master+0x142>
		_radio.state = STATE_STOP;
    e832:	2304      	movs	r3, #4
    e834:	752b      	strb	r3, [r5, #20]
		radio_disable();
    e836:	f005 f809 	bl	1384c <radio_disable>
}
    e83a:	b005      	add	sp, #20
    e83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e83e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    e840:	7fa6      	ldrb	r6, [r4, #30]
    e842:	fb01 6606 	mla	r6, r1, r6, r6
    e846:	7fe1      	ldrb	r1, [r4, #31]
    e848:	2025      	movs	r0, #37	; 0x25
    e84a:	440e      	add	r6, r1
    e84c:	fb96 f1f0 	sdiv	r1, r6, r0
    e850:	fb00 6611 	mls	r6, r0, r1, r6
    e854:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e856:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    e858:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e85a:	5c51      	ldrb	r1, [r2, r1]
    e85c:	f006 0607 	and.w	r6, r6, #7
    e860:	fa41 f606 	asr.w	r6, r1, r6
    e864:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    e866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e86a:	d4ce      	bmi.n	e80a <event_master+0xce>
		chan_index = chan_next % chan_count;
    e86c:	fbb0 f1f3 	udiv	r1, r0, r3
    e870:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    e874:	b2c9      	uxtb	r1, r1
    e876:	4610      	mov	r0, r2
    e878:	f7fc fbd0 	bl	b01c <chan_sel_remap>
    e87c:	e7c5      	b.n	e80a <event_master+0xce>
		ticker_status =
    e87e:	4a0e      	ldr	r2, [pc, #56]	; (e8b8 <event_master+0x17c>)
    e880:	4601      	mov	r1, r0
    e882:	f7fa fd8d 	bl	93a0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e886:	f030 0302 	bics.w	r3, r0, #2
    e88a:	d0d6      	beq.n	e83a <event_master+0xfe>
    e88c:	4b04      	ldr	r3, [pc, #16]	; (e8a0 <event_master+0x164>)
    e88e:	9301      	str	r3, [sp, #4]
    e890:	9300      	str	r3, [sp, #0]
    e892:	4a04      	ldr	r2, [pc, #16]	; (e8a4 <event_master+0x168>)
    e894:	4b04      	ldr	r3, [pc, #16]	; (e8a8 <event_master+0x16c>)
    e896:	4905      	ldr	r1, [pc, #20]	; (e8ac <event_master+0x170>)
    e898:	4808      	ldr	r0, [pc, #32]	; (e8bc <event_master+0x180>)
    e89a:	e760      	b.n	e75e <event_master+0x22>
    e89c:	200008e8 	.word	0x200008e8
    e8a0:	00015e19 	.word	0x00015e19
    e8a4:	000171f2 	.word	0x000171f2
    e8a8:	00019685 	.word	0x00019685
    e8ac:	00017241 	.word	0x00017241
    e8b0:	000198bd 	.word	0x000198bd
    e8b4:	00019970 	.word	0x00019970
    e8b8:	0000c155 	.word	0x0000c155
    e8bc:	000197a1 	.word	0x000197a1

0000e8c0 <isr_rx_conn_pkt_ctrl>:
{
    e8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    e8c4:	7ac7      	ldrb	r7, [r0, #11]
{
    e8c6:	4604      	mov	r4, r0
    e8c8:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    e8ca:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    e8ce:	2f19      	cmp	r7, #25
    e8d0:	f201 80e0 	bhi.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
    e8d4:	e8df f017 	tbh	[pc, r7, lsl #1]
    e8d8:	0081001a 	.word	0x0081001a
    e8dc:	00cc00bd 	.word	0x00cc00bd
    e8e0:	012200fa 	.word	0x012200fa
    e8e4:	05850154 	.word	0x05850154
    e8e8:	01c40190 	.word	0x01c40190
    e8ec:	021c01f2 	.word	0x021c01f2
    e8f0:	02b6024d 	.word	0x02b6024d
    e8f4:	02ce01a6 	.word	0x02ce01a6
    e8f8:	04a40421 	.word	0x04a40421
    e8fc:	057a0560 	.word	0x057a0560
    e900:	06480648 	.word	0x06480648
    e904:	07ea071d 	.word	0x07ea071d
    e908:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    e90c:	4ecb      	ldr	r6, [pc, #812]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    e90e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e912:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e916:	2b00      	cmp	r3, #0
    e918:	f281 80bc 	bge.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    e91c:	7a41      	ldrb	r1, [r0, #9]
    e91e:	2000      	movs	r0, #0
    e920:	f7fc fb50 	bl	afc4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e924:	2800      	cmp	r0, #0
    e926:	f001 80b5 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    e92a:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    e92e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    e930:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    e932:	041b      	lsls	r3, r3, #16
    e934:	f101 80c4 	bmi.w	fac0 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e938:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e93c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    e940:	429a      	cmp	r2, r3
    e942:	d007      	beq.n	e954 <isr_rx_conn_pkt_ctrl+0x94>
    e944:	4bbe      	ldr	r3, [pc, #760]	; (ec40 <isr_rx_conn_pkt_ctrl+0x380>)
    e946:	9301      	str	r3, [sp, #4]
    e948:	9300      	str	r3, [sp, #0]
    e94a:	4bbe      	ldr	r3, [pc, #760]	; (ec44 <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e94c:	4abe      	ldr	r2, [pc, #760]	; (ec48 <isr_rx_conn_pkt_ctrl+0x388>)
    e94e:	49bf      	ldr	r1, [pc, #764]	; (ec4c <isr_rx_conn_pkt_ctrl+0x38c>)
    e950:	48bf      	ldr	r0, [pc, #764]	; (ec50 <isr_rx_conn_pkt_ctrl+0x390>)
    e952:	e0f7      	b.n	eb44 <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    e954:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    e958:	b90a      	cbnz	r2, e95e <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    e95a:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    e95e:	7b22      	ldrb	r2, [r4, #12]
    e960:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    e964:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    e968:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e96c:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    e96e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    e972:	7c20      	ldrb	r0, [r4, #16]
    e974:	7be2      	ldrb	r2, [r4, #15]
    e976:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    e97a:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    e97e:	7ca0      	ldrb	r0, [r4, #18]
    e980:	7c62      	ldrb	r2, [r4, #17]
    e982:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    e986:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    e98a:	7ce2      	ldrb	r2, [r4, #19]
    e98c:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    e98e:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    e992:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    e996:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    e99a:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    e99e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e9a2:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    e9a6:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    e9a8:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    e9ac:	2201      	movs	r2, #1
    e9ae:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    e9b2:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e9b6:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e9ba:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e9be:	4293      	cmp	r3, r2
    e9c0:	d007      	beq.n	e9d2 <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    e9c2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e9c6:	f003 0307 	and.w	r3, r3, #7
    e9ca:	2b04      	cmp	r3, #4
    e9cc:	d101      	bne.n	e9d2 <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e9ce:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    e9d2:	2000      	movs	r0, #0
    e9d4:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    e9d8:	e038      	b.n	ea4c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    e9da:	4b98      	ldr	r3, [pc, #608]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    e9dc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e9e0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e9e4:	2b00      	cmp	r3, #0
    e9e6:	f281 8055 	bge.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    e9ea:	7a41      	ldrb	r1, [r0, #9]
    e9ec:	2001      	movs	r0, #1
    e9ee:	f7fc fae9 	bl	afc4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e9f2:	2800      	cmp	r0, #0
    e9f4:	f001 804e 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    e9f8:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    e9fc:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    e9fe:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    ea00:	041f      	lsls	r7, r3, #16
    ea02:	f101 805d 	bmi.w	fac0 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    ea06:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    ea0a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    ea0e:	429a      	cmp	r2, r3
    ea10:	d004      	beq.n	ea1c <isr_rx_conn_pkt_ctrl+0x15c>
    ea12:	4b8b      	ldr	r3, [pc, #556]	; (ec40 <isr_rx_conn_pkt_ctrl+0x380>)
    ea14:	9301      	str	r3, [sp, #4]
    ea16:	9300      	str	r3, [sp, #0]
    ea18:	4b8e      	ldr	r3, [pc, #568]	; (ec54 <isr_rx_conn_pkt_ctrl+0x394>)
    ea1a:	e797      	b.n	e94c <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    ea1c:	2205      	movs	r2, #5
    ea1e:	f104 010c 	add.w	r1, r4, #12
    ea22:	f105 0079 	add.w	r0, r5, #121	; 0x79
    ea26:	f7f3 f8e9 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    ea2a:	7c63      	ldrb	r3, [r4, #17]
    ea2c:	7ca2      	ldrb	r2, [r4, #18]
    ea2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    ea32:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    ea36:	2302      	movs	r3, #2
    ea38:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    ea3c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    ea40:	2000      	movs	r0, #0
	conn->llcp_ack--;
    ea42:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    ea44:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    ea48:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    ea4c:	b003      	add	sp, #12
    ea4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    ea52:	7a41      	ldrb	r1, [r0, #9]
    ea54:	2002      	movs	r0, #2
    ea56:	f7fc fab5 	bl	afc4 <pdu_len_cmp>
    ea5a:	2800      	cmp	r0, #0
    ea5c:	f001 801a 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    ea60:	4b76      	ldr	r3, [pc, #472]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    ea62:	7b22      	ldrb	r2, [r4, #12]
    ea64:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    ea68:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    ea6c:	2000      	movs	r0, #0
	return nack;
    ea6e:	e7ed      	b.n	ea4c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    ea70:	4e72      	ldr	r6, [pc, #456]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    ea72:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    ea76:	f998 301d 	ldrsb.w	r3, [r8, #29]
    ea7a:	2b00      	cmp	r3, #0
    ea7c:	f281 800a 	bge.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    ea80:	7a41      	ldrb	r1, [r0, #9]
    ea82:	2003      	movs	r0, #3
    ea84:	f7fc fa9e 	bl	afc4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    ea88:	2800      	cmp	r0, #0
    ea8a:	f001 8003 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    ea8e:	2208      	movs	r2, #8
    ea90:	f104 0116 	add.w	r1, r4, #22
    ea94:	f108 0094 	add.w	r0, r8, #148	; 0x94
    ea98:	f7f3 f8b0 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    ea9c:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    eaa0:	2204      	movs	r2, #4
    eaa2:	f104 011e 	add.w	r1, r4, #30
    eaa6:	f500 7089 	add.w	r0, r0, #274	; 0x112
    eaaa:	f7f3 f8a7 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    eaae:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    eab2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    eab6:	f042 0204 	orr.w	r2, r2, #4
    eaba:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    eabe:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    eac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    eac6:	2301      	movs	r3, #1
    eac8:	702b      	strb	r3, [r5, #0]
    eaca:	e7cf      	b.n	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    eacc:	4d5b      	ldr	r5, [pc, #364]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    eace:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    ead2:	f996 301d 	ldrsb.w	r3, [r6, #29]
    ead6:	2b00      	cmp	r3, #0
    ead8:	f2c0 87dc 	blt.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    eadc:	7a41      	ldrb	r1, [r0, #9]
    eade:	2004      	movs	r0, #4
    eae0:	f7fc fa70 	bl	afc4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    eae4:	2800      	cmp	r0, #0
    eae6:	f000 87d5 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    eaea:	2208      	movs	r2, #8
    eaec:	f104 010c 	add.w	r1, r4, #12
    eaf0:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    eaf4:	f7f3 f882 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    eaf8:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    eafc:	2204      	movs	r2, #4
    eafe:	f104 0114 	add.w	r1, r4, #20
    eb02:	f500 708b 	add.w	r0, r0, #278	; 0x116
    eb06:	f7f3 f879 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    eb0a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    eb0e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    eb12:	f043 0304 	orr.w	r3, r3, #4
    eb16:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    eb1a:	e7a7      	b.n	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    eb1c:	4b47      	ldr	r3, [pc, #284]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    eb1e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    eb22:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    eb26:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    eb2a:	42b3      	cmp	r3, r6
    eb2c:	d012      	beq.n	eb54 <isr_rx_conn_pkt_ctrl+0x294>
    eb2e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    eb32:	2b03      	cmp	r3, #3
    eb34:	d00e      	beq.n	eb54 <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    eb36:	4b42      	ldr	r3, [pc, #264]	; (ec40 <isr_rx_conn_pkt_ctrl+0x380>)
    eb38:	9301      	str	r3, [sp, #4]
    eb3a:	9300      	str	r3, [sp, #0]
    eb3c:	4a42      	ldr	r2, [pc, #264]	; (ec48 <isr_rx_conn_pkt_ctrl+0x388>)
    eb3e:	4b46      	ldr	r3, [pc, #280]	; (ec58 <isr_rx_conn_pkt_ctrl+0x398>)
    eb40:	4942      	ldr	r1, [pc, #264]	; (ec4c <isr_rx_conn_pkt_ctrl+0x38c>)
    eb42:	4846      	ldr	r0, [pc, #280]	; (ec5c <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    eb44:	f7f2 fa22 	bl	f8c <printk>
    eb48:	4040      	eors	r0, r0
    eb4a:	f380 8811 	msr	BASEPRI, r0
    eb4e:	f04f 0004 	mov.w	r0, #4
    eb52:	df02      	svc	2
		if (_radio.conn_curr->role ||
    eb54:	f995 301d 	ldrsb.w	r3, [r5, #29]
    eb58:	2b00      	cmp	r3, #0
    eb5a:	f2c0 879b 	blt.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    eb5e:	7a61      	ldrb	r1, [r4, #9]
    eb60:	2005      	movs	r0, #5
    eb62:	f7fc fa2f 	bl	afc4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    eb66:	2800      	cmp	r0, #0
    eb68:	f000 8794 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    eb6c:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    eb6e:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    eb70:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    eb72:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    eb76:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    eb7a:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    eb7e:	e765      	b.n	ea4c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    eb80:	7a41      	ldrb	r1, [r0, #9]
    eb82:	2006      	movs	r0, #6
    eb84:	f7fc fa1e 	bl	afc4 <pdu_len_cmp>
    eb88:	2800      	cmp	r0, #0
    eb8a:	f000 8783 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    eb8e:	4b2b      	ldr	r3, [pc, #172]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    eb90:	7cda      	ldrb	r2, [r3, #19]
    eb92:	2a03      	cmp	r2, #3
    eb94:	4619      	mov	r1, r3
    eb96:	d124      	bne.n	ebe2 <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    eb98:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    eb9c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    eba0:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    eba4:	4290      	cmp	r0, r2
    eba6:	d003      	beq.n	ebb0 <isr_rx_conn_pkt_ctrl+0x2f0>
    eba8:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    ebac:	2803      	cmp	r0, #3
    ebae:	d1c2      	bne.n	eb36 <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    ebb0:	2000      	movs	r0, #0
    ebb2:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    ebb6:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    ebb8:	2003      	movs	r0, #3
    ebba:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    ebbe:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    ebc2:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    ebc6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    ebca:	065e      	lsls	r6, r3, #25
    ebcc:	d505      	bpl.n	ebda <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    ebce:	f36f 1386 	bfc	r3, #6, #1
    ebd2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    ebd6:	2309      	movs	r3, #9
    ebd8:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    ebda:	2301      	movs	r3, #1
    ebdc:	702b      	strb	r3, [r5, #0]
				break;
    ebde:	f000 bcbf 	b.w	f560 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    ebe2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    ebe6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    ebea:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ebee:	f36f 03c3 	bfc	r3, #3, #1
    ebf2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    ebf6:	e7e4      	b.n	ebc2 <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    ebf8:	4b10      	ldr	r3, [pc, #64]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    ebfa:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    ebfe:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ec02:	2b00      	cmp	r3, #0
    ec04:	f280 8746 	bge.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    ec08:	7a41      	ldrb	r1, [r0, #9]
    ec0a:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    ec0c:	f7fc f9da 	bl	afc4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    ec10:	2800      	cmp	r0, #0
    ec12:	f000 873f 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    ec16:	4631      	mov	r1, r6
    ec18:	4628      	mov	r0, r5
}
    ec1a:	b003      	add	sp, #12
    ec1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    ec20:	f7fe ba7e 	b.w	d120 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    ec24:	4b05      	ldr	r3, [pc, #20]	; (ec3c <isr_rx_conn_pkt_ctrl+0x37c>)
    ec26:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    ec2a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ec2e:	2b00      	cmp	r3, #0
    ec30:	f2c0 8730 	blt.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    ec34:	7a41      	ldrb	r1, [r0, #9]
    ec36:	200e      	movs	r0, #14
    ec38:	e7e8      	b.n	ec0c <isr_rx_conn_pkt_ctrl+0x34c>
    ec3a:	bf00      	nop
    ec3c:	200008e8 	.word	0x200008e8
    ec40:	00015e19 	.word	0x00015e19
    ec44:	000196e4 	.word	0x000196e4
    ec48:	000171f2 	.word	0x000171f2
    ec4c:	00017241 	.word	0x00017241
    ec50:	00019b6c 	.word	0x00019b6c
    ec54:	000196f0 	.word	0x000196f0
    ec58:	00019396 	.word	0x00019396
    ec5c:	00019bae 	.word	0x00019bae
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    ec60:	7a41      	ldrb	r1, [r0, #9]
    ec62:	2009      	movs	r0, #9
    ec64:	f7fc f9ae 	bl	afc4 <pdu_len_cmp>
    ec68:	2800      	cmp	r0, #0
    ec6a:	f000 8713 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    ec6e:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    ec70:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    ec72:	48b2      	ldr	r0, [pc, #712]	; (ef3c <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    ec74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    ec78:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    ec7c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    ec80:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    ec84:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    ec88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    ec8c:	7ba1      	ldrb	r1, [r4, #14]
    ec8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    ec92:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    ec96:	f3c1 0110 	ubfx	r1, r1, #0, #17
    ec9a:	400b      	ands	r3, r1
    ec9c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    eca0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    eca4:	f043 0320 	orr.w	r3, r3, #32
    eca8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    ecac:	2301      	movs	r3, #1
    ecae:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    ecb0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    ecb4:	2000      	movs	r0, #0
    ecb6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    ecba:	e6c7      	b.n	ea4c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    ecbc:	4e9f      	ldr	r6, [pc, #636]	; (ef3c <isr_rx_conn_pkt_ctrl+0x67c>)
    ecbe:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    ecc2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ecc6:	2b00      	cmp	r3, #0
    ecc8:	f280 86e4 	bge.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    eccc:	7a41      	ldrb	r1, [r0, #9]
    ecce:	200a      	movs	r0, #10
    ecd0:	f7fc f978 	bl	afc4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    ecd4:	2800      	cmp	r0, #0
    ecd6:	f000 86dd 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ecda:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    ecde:	f7f9 fbba 	bl	8456 <mem_acquire>
		if (!node_tx) {
    ece2:	4601      	mov	r1, r0
    ece4:	b908      	cbnz	r0, ecea <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ece6:	2001      	movs	r0, #1
    ece8:	e6b0      	b.n	ea4c <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    ecea:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    ecee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    ecf2:	f36f 1304 	bfc	r3, #4, #1
    ecf6:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ecfa:	7903      	ldrb	r3, [r0, #4]
    ecfc:	f043 0303 	orr.w	r3, r3, #3
    ed00:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ed02:	2301      	movs	r3, #1
    ed04:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    ed06:	230b      	movs	r3, #11
    ed08:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    ed0a:	4628      	mov	r0, r5
    ed0c:	f000 bcdc 	b.w	f6c8 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    ed10:	7a41      	ldrb	r1, [r0, #9]
    ed12:	200b      	movs	r0, #11
    ed14:	f7fc f956 	bl	afc4 <pdu_len_cmp>
    ed18:	2800      	cmp	r0, #0
    ed1a:	f000 86bb 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    ed1e:	4887      	ldr	r0, [pc, #540]	; (ef3c <isr_rx_conn_pkt_ctrl+0x67c>)
    ed20:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    ed24:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ed28:	2b00      	cmp	r3, #0
    ed2a:	db1b      	blt.n	ed64 <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ed2c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    ed30:	f7f9 fb91 	bl	8456 <mem_acquire>
		if (!node_tx) {
    ed34:	4601      	mov	r1, r0
    ed36:	2800      	cmp	r0, #0
    ed38:	d0d5      	beq.n	ece6 <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    ed3a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    ed3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    ed42:	f043 0304 	orr.w	r3, r3, #4
    ed46:	f36f 1304 	bfc	r3, #4, #1
    ed4a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ed4e:	7903      	ldrb	r3, [r0, #4]
    ed50:	f043 0303 	orr.w	r3, r3, #3
    ed54:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ed56:	2301      	movs	r3, #1
    ed58:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    ed5a:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    ed5c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    ed5e:	4620      	mov	r0, r4
    ed60:	f000 bcb2 	b.w	f6c8 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    ed64:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ed68:	f36f 1345 	bfc	r3, #5, #1
    ed6c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    ed70:	e67c      	b.n	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    ed72:	7a41      	ldrb	r1, [r0, #9]
    ed74:	200c      	movs	r0, #12
    ed76:	f7fc f925 	bl	afc4 <pdu_len_cmp>
    ed7a:	2800      	cmp	r0, #0
    ed7c:	f000 868a 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    ed80:	486e      	ldr	r0, [pc, #440]	; (ef3c <isr_rx_conn_pkt_ctrl+0x67c>)
    ed82:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    ed86:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    ed8a:	f013 0701 	ands.w	r7, r3, #1
    ed8e:	d150      	bne.n	ee32 <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ed90:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    ed94:	f7f9 fb5f 	bl	8456 <mem_acquire>
		if (!node_tx) {
    ed98:	4601      	mov	r1, r0
    ed9a:	2800      	cmp	r0, #0
    ed9c:	d0a3      	beq.n	ece6 <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    ed9e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    eda2:	f043 0301 	orr.w	r3, r3, #1
    eda6:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    edaa:	7903      	ldrb	r3, [r0, #4]
    edac:	f043 0303 	orr.w	r3, r3, #3
    edb0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    edb2:	2306      	movs	r3, #6
    edb4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    edb6:	230c      	movs	r3, #12
    edb8:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    edba:	2309      	movs	r3, #9
    edbc:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    edbe:	f06f 030e 	mvn.w	r3, #14
    edc2:	7243      	strb	r3, [r0, #9]
    edc4:	2305      	movs	r3, #5
    edc6:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    edc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    edcc:	72c3      	strb	r3, [r0, #11]
    edce:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    edd0:	4630      	mov	r0, r6
    edd2:	f7fe f98b 	bl	d0ec <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    edd6:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    edda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    edde:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    ede2:	f004 fd85 	bl	138f0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ede6:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    ede8:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    edea:	2201      	movs	r2, #1
    edec:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    edf0:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    edf4:	7003      	strb	r3, [r0, #0]
    edf6:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    edf8:	b1c2      	cbz	r2, ee2c <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    edfa:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    edfe:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    ee00:	7b23      	ldrb	r3, [r4, #12]
    ee02:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    ee06:	7ba2      	ldrb	r2, [r4, #14]
    ee08:	7b63      	ldrb	r3, [r4, #13]
    ee0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee0e:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    ee12:	7be3      	ldrb	r3, [r4, #15]
    ee14:	7c22      	ldrb	r2, [r4, #16]
    ee16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee1a:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    ee1e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    ee22:	f043 0302 	orr.w	r3, r3, #2
    ee26:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    ee2a:	e61f      	b.n	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    ee2c:	f362 1304 	bfi	r3, r2, #4, #1
    ee30:	e7e5      	b.n	edfe <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    ee32:	f013 0302 	ands.w	r3, r3, #2
    ee36:	f47f ae19 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    ee3a:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    ee3e:	2301      	movs	r3, #1
    ee40:	702b      	strb	r3, [r5, #0]
    ee42:	e7dd      	b.n	ee00 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    ee44:	7a41      	ldrb	r1, [r0, #9]
    ee46:	200d      	movs	r0, #13
    ee48:	f7fc f8bc 	bl	afc4 <pdu_len_cmp>
    ee4c:	2800      	cmp	r0, #0
    ee4e:	f000 8621 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    ee52:	4b3a      	ldr	r3, [pc, #232]	; (ef3c <isr_rx_conn_pkt_ctrl+0x67c>)
    ee54:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    ee58:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    ee5c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ee60:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    ee64:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    ee66:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    ee6a:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    ee6e:	2301      	movs	r3, #1
    ee70:	702b      	strb	r3, [r5, #0]
    ee72:	e5eb      	b.n	ea4c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    ee74:	7a41      	ldrb	r1, [r0, #9]
    ee76:	200f      	movs	r0, #15
    ee78:	f7fc f8a4 	bl	afc4 <pdu_len_cmp>
    ee7c:	2800      	cmp	r0, #0
    ee7e:	f000 8609 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    ee82:	4b2e      	ldr	r3, [pc, #184]	; (ef3c <isr_rx_conn_pkt_ctrl+0x67c>)
    ee84:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    ee88:	461a      	mov	r2, r3
    ee8a:	b151      	cbz	r1, eea2 <isr_rx_conn_pkt_ctrl+0x5e2>
    ee8c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    ee90:	4281      	cmp	r1, r0
    ee92:	d006      	beq.n	eea2 <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    ee94:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    ee96:	210f      	movs	r1, #15
}
    ee98:	b003      	add	sp, #12
    ee9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    ee9e:	f7fe b9a9 	b.w	d1f4 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    eea2:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    eea6:	f990 301d 	ldrsb.w	r3, [r0, #29]
    eeaa:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    eeae:	2b00      	cmp	r3, #0
    eeb0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    eeb4:	f2c0 80a7 	blt.w	f006 <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    eeb8:	4299      	cmp	r1, r3
    eeba:	d009      	beq.n	eed0 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    eebc:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    eec0:	f013 0307 	ands.w	r3, r3, #7
    eec4:	d002      	beq.n	eecc <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    eec6:	3b04      	subs	r3, #4
    eec8:	2b01      	cmp	r3, #1
    eeca:	d801      	bhi.n	eed0 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    eecc:	2223      	movs	r2, #35	; 0x23
    eece:	e7e2      	b.n	ee96 <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    eed0:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    eed4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    eed8:	4299      	cmp	r1, r3
    eeda:	d003      	beq.n	eee4 <isr_rx_conn_pkt_ctrl+0x624>
    eedc:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    eee0:	2b03      	cmp	r3, #3
    eee2:	d105      	bne.n	eef0 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    eee4:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    eee8:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    eeec:	4299      	cmp	r1, r3
    eeee:	d001      	beq.n	eef4 <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    eef0:	222a      	movs	r2, #42	; 0x2a
    eef2:	e7d0      	b.n	ee96 <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    eef4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    eef8:	4643      	mov	r3, r8
    eefa:	2b05      	cmp	r3, #5
    eefc:	d91b      	bls.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    eefe:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    ef00:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    ef04:	d817      	bhi.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    ef06:	45b8      	cmp	r8, r7
    ef08:	d815      	bhi.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    ef0a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    ef0e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    ef12:	d210      	bcs.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    ef14:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    ef18:	f1ae 060a 	sub.w	r6, lr, #10
    ef1c:	b2b6      	uxth	r6, r6
    ef1e:	f640 4976 	movw	r9, #3190	; 0xc76
    ef22:	454e      	cmp	r6, r9
    ef24:	d807      	bhi.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    ef26:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    ef2a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    ef2e:	da02      	bge.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    ef30:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    ef32:	428f      	cmp	r7, r1
    ef34:	d204      	bcs.n	ef40 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    ef36:	221e      	movs	r2, #30
    ef38:	e7ad      	b.n	ee96 <isr_rx_conn_pkt_ctrl+0x5d6>
    ef3a:	bf00      	nop
    ef3c:	200008e8 	.word	0x200008e8
				conn->llcp_conn_param.interval = cpr->interval_min;
    ef40:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    ef44:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    ef48:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    ef4c:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    ef50:	7da6      	ldrb	r6, [r4, #22]
    ef52:	7d61      	ldrb	r1, [r4, #21]
    ef54:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    ef58:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    ef5c:	7e26      	ldrb	r6, [r4, #24]
    ef5e:	7de1      	ldrb	r1, [r4, #23]
    ef60:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ef64:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    ef68:	7ea6      	ldrb	r6, [r4, #26]
    ef6a:	7e61      	ldrb	r1, [r4, #25]
    ef6c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ef70:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    ef74:	7f26      	ldrb	r6, [r4, #28]
    ef76:	7ee1      	ldrb	r1, [r4, #27]
    ef78:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ef7c:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    ef80:	7fa6      	ldrb	r6, [r4, #30]
    ef82:	7f61      	ldrb	r1, [r4, #29]
    ef84:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ef88:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    ef8c:	7fe1      	ldrb	r1, [r4, #31]
    ef8e:	f894 6020 	ldrb.w	r6, [r4, #32]
    ef92:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ef96:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    ef9a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    ef9e:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    efa2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    efa6:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    efaa:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    efae:	6a41      	ldr	r1, [r0, #36]	; 0x24
    efb0:	428c      	cmp	r4, r1
    efb2:	d10f      	bne.n	efd4 <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    efb4:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    efb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    efba:	4361      	muls	r1, r4
    efbc:	f242 7410 	movw	r4, #10000	; 0x2710
    efc0:	fb04 130e 	mla	r3, r4, lr, r1
    efc4:	3b01      	subs	r3, #1
    efc6:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    efca:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    efcc:	b29b      	uxth	r3, r3
    efce:	4299      	cmp	r1, r3
    efd0:	f000 8092 	beq.w	f0f8 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    efd4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    efd8:	071c      	lsls	r4, r3, #28
    efda:	f140 8087 	bpl.w	f0ec <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    efde:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    efe2:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    efe4:	f361 0302 	bfi	r3, r1, #0, #3
    efe8:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    efec:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    eff0:	3b01      	subs	r3, #1
    eff2:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    eff6:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    effa:	2b00      	cmp	r3, #0
    effc:	f47f ad36 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    f000:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    f004:	e532      	b.n	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    f006:	4299      	cmp	r1, r3
    f008:	d003      	beq.n	f012 <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    f00a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    f00e:	0799      	lsls	r1, r3, #30
    f010:	d17b      	bne.n	f10a <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    f012:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    f016:	4643      	mov	r3, r8
    f018:	2b05      	cmp	r3, #5
    f01a:	d98c      	bls.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    f01c:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    f01e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    f022:	d888      	bhi.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    f024:	45b8      	cmp	r8, r7
    f026:	d886      	bhi.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    f028:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    f02c:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    f030:	d281      	bcs.n	ef36 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    f032:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    f036:	f1ae 060a 	sub.w	r6, lr, #10
    f03a:	b2b6      	uxth	r6, r6
    f03c:	f640 4976 	movw	r9, #3190	; 0xc76
    f040:	454e      	cmp	r6, r9
    f042:	f63f af78 	bhi.w	ef36 <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    f046:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    f04a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    f04e:	f6bf af72 	bge.w	ef36 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    f052:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    f054:	428f      	cmp	r7, r1
    f056:	f4ff af6e 	bcc.w	ef36 <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    f05a:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    f05e:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    f062:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    f066:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    f06a:	7da6      	ldrb	r6, [r4, #22]
    f06c:	7d61      	ldrb	r1, [r4, #21]
    f06e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    f072:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    f076:	7e26      	ldrb	r6, [r4, #24]
    f078:	7de1      	ldrb	r1, [r4, #23]
    f07a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    f07e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    f082:	7ea6      	ldrb	r6, [r4, #26]
    f084:	7e61      	ldrb	r1, [r4, #25]
    f086:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    f08a:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    f08e:	7f26      	ldrb	r6, [r4, #28]
    f090:	7ee1      	ldrb	r1, [r4, #27]
    f092:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    f096:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    f09a:	7fa6      	ldrb	r6, [r4, #30]
    f09c:	7f61      	ldrb	r1, [r4, #29]
    f09e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    f0a2:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    f0a6:	7fe1      	ldrb	r1, [r4, #31]
    f0a8:	f894 6020 	ldrb.w	r6, [r4, #32]
    f0ac:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    f0b0:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    f0b4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    f0b8:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    f0bc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    f0c0:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    f0c4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    f0c8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    f0ca:	428c      	cmp	r4, r1
    f0cc:	d10e      	bne.n	f0ec <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    f0ce:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    f0d0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    f0d4:	4361      	muls	r1, r4
    f0d6:	f242 7410 	movw	r4, #10000	; 0x2710
    f0da:	fb04 130e 	mla	r3, r4, lr, r1
    f0de:	3b01      	subs	r3, #1
    f0e0:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    f0e4:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    f0e6:	b29b      	uxth	r3, r3
    f0e8:	4299      	cmp	r1, r3
    f0ea:	d005      	beq.n	f0f8 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    f0ec:	2301      	movs	r3, #1
    f0ee:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    f0f0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    f0f4:	2103      	movs	r1, #3
    f0f6:	e775      	b.n	efe4 <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    f0f8:	2300      	movs	r3, #0
    f0fa:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    f0fe:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    f102:	2101      	movs	r1, #1
    f104:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    f108:	e76c      	b.n	efe4 <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    f10a:	4bc9      	ldr	r3, [pc, #804]	; (f430 <isr_rx_conn_pkt_ctrl+0xb70>)
    f10c:	9301      	str	r3, [sp, #4]
    f10e:	9300      	str	r3, [sp, #0]
    f110:	4ac8      	ldr	r2, [pc, #800]	; (f434 <isr_rx_conn_pkt_ctrl+0xb74>)
    f112:	4bc9      	ldr	r3, [pc, #804]	; (f438 <isr_rx_conn_pkt_ctrl+0xb78>)
    f114:	49c9      	ldr	r1, [pc, #804]	; (f43c <isr_rx_conn_pkt_ctrl+0xb7c>)
    f116:	48ca      	ldr	r0, [pc, #808]	; (f440 <isr_rx_conn_pkt_ctrl+0xb80>)
    f118:	e514      	b.n	eb44 <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    f11a:	4bca      	ldr	r3, [pc, #808]	; (f444 <isr_rx_conn_pkt_ctrl+0xb84>)
    f11c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    f120:	f995 301d 	ldrsb.w	r3, [r5, #29]
    f124:	2b00      	cmp	r3, #0
    f126:	f2c0 84b5 	blt.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    f12a:	7a41      	ldrb	r1, [r0, #9]
    f12c:	2010      	movs	r0, #16
    f12e:	f7fb ff49 	bl	afc4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    f132:	2800      	cmp	r0, #0
    f134:	f000 84ae 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    f138:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    f13c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    f140:	429a      	cmp	r2, r3
    f142:	f43f ac93 	beq.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    f146:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    f14a:	f003 0307 	and.w	r3, r3, #7
    f14e:	2b04      	cmp	r3, #4
    f150:	f47f ac8c 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    f154:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    f158:	fa1f f28e 	uxth.w	r2, lr
    f15c:	2a05      	cmp	r2, #5
    f15e:	d91b      	bls.n	f198 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    f160:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    f162:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    f166:	d817      	bhi.n	f198 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    f168:	429a      	cmp	r2, r3
    f16a:	d815      	bhi.n	f198 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    f16c:	8a27      	ldrh	r7, [r4, #16]
    f16e:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    f170:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    f174:	d210      	bcs.n	f198 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    f176:	8a66      	ldrh	r6, [r4, #18]
    f178:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    f17a:	f1a0 010a 	sub.w	r1, r0, #10
    f17e:	b289      	uxth	r1, r1
    f180:	f640 4c76 	movw	ip, #3190	; 0xc76
    f184:	4561      	cmp	r1, ip
    f186:	d807      	bhi.n	f198 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    f188:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    f18c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    f190:	da02      	bge.n	f198 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    f192:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    f194:	4293      	cmp	r3, r2
    f196:	d203      	bcs.n	f1a0 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    f198:	221e      	movs	r2, #30
    f19a:	2110      	movs	r1, #16
    f19c:	4628      	mov	r0, r5
    f19e:	e67b      	b.n	ee98 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    f1a0:	2000      	movs	r0, #0
    f1a2:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    f1a6:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    f1aa:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    f1ae:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    f1b2:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    f1b6:	7da2      	ldrb	r2, [r4, #22]
    f1b8:	7d63      	ldrb	r3, [r4, #21]
    f1ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    f1be:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    f1c2:	7e22      	ldrb	r2, [r4, #24]
    f1c4:	7de3      	ldrb	r3, [r4, #23]
    f1c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f1ca:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    f1ce:	7ea2      	ldrb	r2, [r4, #26]
    f1d0:	7e63      	ldrb	r3, [r4, #25]
    f1d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f1d6:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    f1da:	7f22      	ldrb	r2, [r4, #28]
    f1dc:	7ee3      	ldrb	r3, [r4, #27]
    f1de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f1e2:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    f1e6:	7fa2      	ldrb	r2, [r4, #30]
    f1e8:	7f63      	ldrb	r3, [r4, #29]
    f1ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f1ee:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    f1f2:	f894 2020 	ldrb.w	r2, [r4, #32]
    f1f6:	7fe3      	ldrb	r3, [r4, #31]
    f1f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f1fc:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    f200:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    f204:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f208:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f20c:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    f210:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    f214:	2201      	movs	r2, #1
    f216:	f362 0302 	bfi	r3, r2, #0, #3
    f21a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    f21e:	e415      	b.n	ea4c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    f220:	7a41      	ldrb	r1, [r0, #9]
    f222:	2011      	movs	r0, #17
    f224:	f7fb fece 	bl	afc4 <pdu_len_cmp>
    f228:	2800      	cmp	r0, #0
    f22a:	f000 8433 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    f22e:	4a85      	ldr	r2, [pc, #532]	; (f444 <isr_rx_conn_pkt_ctrl+0xb84>)
    f230:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    f234:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    f238:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    f23c:	4281      	cmp	r1, r0
    f23e:	7b21      	ldrb	r1, [r4, #12]
    f240:	d027      	beq.n	f292 <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    f242:	2916      	cmp	r1, #22
    f244:	f47f ac12 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    f248:	7b61      	ldrb	r1, [r4, #13]
    f24a:	2923      	cmp	r1, #35	; 0x23
    f24c:	d00e      	beq.n	f26c <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    f24e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    f252:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    f256:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    f25a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f25e:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    f262:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    f264:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    f268:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    f26c:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    f270:	0792      	lsls	r2, r2, #30
    f272:	f57f abfb 	bpl.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f276:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    f278:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f27a:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    f27c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    f280:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f284:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    f286:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    f28a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f28e:	7363      	strb	r3, [r4, #13]
    f290:	e419      	b.n	eac6 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    f292:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    f296:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    f29a:	42b8      	cmp	r0, r7
    f29c:	d048      	beq.n	f330 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    f29e:	290f      	cmp	r1, #15
    f2a0:	f47f abe4 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
    f2a4:	f993 001d 	ldrsb.w	r0, [r3, #29]
    f2a8:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    f2aa:	2800      	cmp	r0, #0
    f2ac:	db0e      	blt.n	f2cc <isr_rx_conn_pkt_ctrl+0xa0c>
    f2ae:	291a      	cmp	r1, #26
    f2b0:	d10c      	bne.n	f2cc <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f2b2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    f2b6:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    f2ba:	4294      	cmp	r4, r2
    f2bc:	f000 80c8 	beq.w	f450 <isr_rx_conn_pkt_ctrl+0xb90>
    f2c0:	4b5b      	ldr	r3, [pc, #364]	; (f430 <isr_rx_conn_pkt_ctrl+0xb70>)
    f2c2:	9301      	str	r3, [sp, #4]
    f2c4:	9300      	str	r3, [sp, #0]
    f2c6:	4b60      	ldr	r3, [pc, #384]	; (f448 <isr_rx_conn_pkt_ctrl+0xb88>)
    f2c8:	f7ff bb40 	b.w	e94c <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    f2cc:	2923      	cmp	r1, #35	; 0x23
    f2ce:	d018      	beq.n	f302 <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    f2d0:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    f2d4:	42b3      	cmp	r3, r6
    f2d6:	d007      	beq.n	f2e8 <isr_rx_conn_pkt_ctrl+0xa28>
    f2d8:	4b55      	ldr	r3, [pc, #340]	; (f430 <isr_rx_conn_pkt_ctrl+0xb70>)
    f2da:	9301      	str	r3, [sp, #4]
    f2dc:	9300      	str	r3, [sp, #0]
    f2de:	4b5a      	ldr	r3, [pc, #360]	; (f448 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    f2e0:	4a54      	ldr	r2, [pc, #336]	; (f434 <isr_rx_conn_pkt_ctrl+0xb74>)
    f2e2:	4956      	ldr	r1, [pc, #344]	; (f43c <isr_rx_conn_pkt_ctrl+0xb7c>)
    f2e4:	4859      	ldr	r0, [pc, #356]	; (f44c <isr_rx_conn_pkt_ctrl+0xb8c>)
    f2e6:	e42d      	b.n	eb44 <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    f2e8:	2600      	movs	r6, #0
		if (conn->role) {
    f2ea:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    f2ec:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    f2f0:	bfb8      	it	lt
    f2f2:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    f2f6:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    f2fa:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    f2fe:	bfb8      	it	lt
    f300:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    f302:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    f306:	0717      	lsls	r7, r2, #28
    f308:	f57f abb0 	bpl.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    f30c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f30e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    f310:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f312:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    f314:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    f316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    f318:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    f31a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    f31c:	237d      	movs	r3, #125	; 0x7d
    f31e:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    f320:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    f322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f326:	fb93 f3f2 	sdiv	r3, r3, r2
    f32a:	8223      	strh	r3, [r4, #16]
    f32c:	f7ff bbcb 	b.w	eac6 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    f330:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    f334:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    f338:	4290      	cmp	r0, r2
    f33a:	d01a      	beq.n	f372 <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    f33c:	2914      	cmp	r1, #20
    f33e:	f47f ab95 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    f342:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    f346:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    f34a:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    f34c:	f360 02c3 	bfi	r2, r0, #3, #1
    f350:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    f354:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    f356:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    f35a:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f35c:	2215      	movs	r2, #21
    f35e:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    f360:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    f362:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    f364:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    f366:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    f368:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    f36a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    f36c:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    f36e:	8263      	strh	r3, [r4, #18]
    f370:	e57d      	b.n	ee6e <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    f372:	2903      	cmp	r1, #3
    f374:	f47f ab7a 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    f378:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    f37c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    f380:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    f384:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    f386:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    f38a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    f38e:	230d      	movs	r3, #13
    f390:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    f392:	7b63      	ldrb	r3, [r4, #13]
    f394:	7323      	strb	r3, [r4, #12]
    f396:	e56a      	b.n	ee6e <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    f398:	7a41      	ldrb	r1, [r0, #9]
    f39a:	2012      	movs	r0, #18
    f39c:	f7fb fe12 	bl	afc4 <pdu_len_cmp>
    f3a0:	2800      	cmp	r0, #0
    f3a2:	f000 8377 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    f3a6:	4827      	ldr	r0, [pc, #156]	; (f444 <isr_rx_conn_pkt_ctrl+0xb84>)
    f3a8:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f3ac:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    f3b0:	f7f9 f851 	bl	8456 <mem_acquire>
	if (!node_tx) {
    f3b4:	4601      	mov	r1, r0
    f3b6:	2800      	cmp	r0, #0
    f3b8:	f43f ac95 	beq.w	ece6 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f3bc:	7903      	ldrb	r3, [r0, #4]
    f3be:	f043 0303 	orr.w	r3, r3, #3
    f3c2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    f3c4:	2301      	movs	r3, #1
    f3c6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    f3c8:	2313      	movs	r3, #19
    f3ca:	e4c7      	b.n	ed5c <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    f3cc:	7a41      	ldrb	r1, [r0, #9]
    f3ce:	2013      	movs	r0, #19
    f3d0:	f7fb fdf8 	bl	afc4 <pdu_len_cmp>
    f3d4:	2800      	cmp	r0, #0
    f3d6:	f000 835d 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    f3da:	4b1a      	ldr	r3, [pc, #104]	; (f444 <isr_rx_conn_pkt_ctrl+0xb84>)
    f3dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    f3e0:	e468      	b.n	ecb4 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    f3e2:	7a41      	ldrb	r1, [r0, #9]
    f3e4:	2007      	movs	r0, #7
    f3e6:	f7fb fded 	bl	afc4 <pdu_len_cmp>
    f3ea:	2800      	cmp	r0, #0
    f3ec:	f000 8352 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    f3f0:	4a14      	ldr	r2, [pc, #80]	; (f444 <isr_rx_conn_pkt_ctrl+0xb84>)
    f3f2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    f3f6:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    f3fa:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    f3fe:	42b1      	cmp	r1, r6
    f400:	4611      	mov	r1, r2
    f402:	d077      	beq.n	f4f4 <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    f404:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    f408:	f040 0010 	orr.w	r0, r0, #16
    f40c:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    f410:	f993 001d 	ldrsb.w	r0, [r3, #29]
    f414:	2800      	cmp	r0, #0
    f416:	db47      	blt.n	f4a8 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f418:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    f41c:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    f420:	4294      	cmp	r4, r2
    f422:	d015      	beq.n	f450 <isr_rx_conn_pkt_ctrl+0xb90>
    f424:	4b02      	ldr	r3, [pc, #8]	; (f430 <isr_rx_conn_pkt_ctrl+0xb70>)
    f426:	9301      	str	r3, [sp, #4]
    f428:	9300      	str	r3, [sp, #0]
    f42a:	4b03      	ldr	r3, [pc, #12]	; (f438 <isr_rx_conn_pkt_ctrl+0xb78>)
    f42c:	f7ff ba8e 	b.w	e94c <isr_rx_conn_pkt_ctrl+0x8c>
    f430:	00015e19 	.word	0x00015e19
    f434:	000171f2 	.word	0x000171f2
    f438:	00019396 	.word	0x00019396
    f43c:	00017241 	.word	0x00017241
    f440:	00017166 	.word	0x00017166
    f444:	200008e8 	.word	0x200008e8
    f448:	0001935b 	.word	0x0001935b
    f44c:	00019c3e 	.word	0x00019c3e
				conn->llcp_conn_param.state =
    f450:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    f454:	2105      	movs	r1, #5
    f456:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    f45a:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    f45e:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    f462:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    f466:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    f46a:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    f46e:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    f472:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    f476:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    f47a:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    f47c:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    f480:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    f484:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    f488:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    f48a:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    f48e:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    f490:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    f494:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    f498:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    f49c:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    f4a0:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    f4a4:	f7ff bad2 	b.w	ea4c <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    f4a8:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    f4ac:	4293      	cmp	r3, r2
    f4ae:	d004      	beq.n	f4ba <isr_rx_conn_pkt_ctrl+0xbfa>
    f4b0:	4bc9      	ldr	r3, [pc, #804]	; (f7d8 <isr_rx_conn_pkt_ctrl+0xf18>)
    f4b2:	9301      	str	r3, [sp, #4]
    f4b4:	9300      	str	r3, [sp, #0]
    f4b6:	4bc9      	ldr	r3, [pc, #804]	; (f7dc <isr_rx_conn_pkt_ctrl+0xf1c>)
    f4b8:	e712      	b.n	f2e0 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    f4ba:	2200      	movs	r2, #0
    f4bc:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    f4c0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f4c4:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    f4c8:	0716      	lsls	r6, r2, #28
    f4ca:	f57f aacf 	bpl.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f4ce:	2208      	movs	r2, #8
    f4d0:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    f4d2:	221a      	movs	r2, #26
    f4d4:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    f4d6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    f4d8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    f4da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    f4dc:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    f4de:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    f4e0:	237d      	movs	r3, #125	; 0x7d
    f4e2:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    f4e4:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    f4e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f4ea:	fb93 f3f2 	sdiv	r3, r3, r2
    f4ee:	8223      	strh	r3, [r4, #16]
    f4f0:	f7ff bb73 	b.w	ebda <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    f4f4:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    f4f8:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    f4fc:	4290      	cmp	r0, r2
    f4fe:	d009      	beq.n	f514 <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    f500:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    f504:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f508:	f36f 02c3 	bfc	r2, #3, #1
    f50c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    f510:	f7ff bb63 	b.w	ebda <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    f514:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    f518:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    f51c:	4290      	cmp	r0, r2
    f51e:	d01b      	beq.n	f558 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    f520:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    f524:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    f528:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    f52c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    f530:	f362 0002 	bfi	r0, r2, #0, #3
    f534:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    f538:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    f53c:	0780      	lsls	r0, r0, #30
    f53e:	d50f      	bpl.n	f560 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f540:	200c      	movs	r0, #12
    f542:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    f544:	2000      	movs	r0, #0
    f546:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    f548:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    f54a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    f54e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f552:	7363      	strb	r3, [r4, #13]
    f554:	f7ff bb41 	b.w	ebda <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    f558:	7b23      	ldrb	r3, [r4, #12]
    f55a:	2b12      	cmp	r3, #18
    f55c:	f47f ab3d 	bne.w	ebda <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    f560:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    f564:	f7ff bba6 	b.w	ecb4 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    f568:	7a41      	ldrb	r1, [r0, #9]
    f56a:	2014      	movs	r0, #20
    f56c:	f7fb fd2a 	bl	afc4 <pdu_len_cmp>
    f570:	2800      	cmp	r0, #0
    f572:	f000 828f 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    f576:	2f14      	cmp	r7, #20
    f578:	d127      	bne.n	f5ca <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f57a:	4899      	ldr	r0, [pc, #612]	; (f7e0 <isr_rx_conn_pkt_ctrl+0xf20>)
    f57c:	f7f8 ff6b 	bl	8456 <mem_acquire>
		if (!node_tx) {
    f580:	4606      	mov	r6, r0
    f582:	2800      	cmp	r0, #0
    f584:	f43f abaf 	beq.w	ece6 <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f588:	4f96      	ldr	r7, [pc, #600]	; (f7e4 <isr_rx_conn_pkt_ctrl+0xf24>)
    f58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    f58e:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    f592:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f596:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f598:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    f59a:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f59c:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    f5a0:	45e0      	cmp	r8, ip
    f5a2:	46b9      	mov	r9, r7
    f5a4:	f894 800b 	ldrb.w	r8, [r4, #11]
    f5a8:	d111      	bne.n	f5ce <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    f5aa:	f1b8 0f14 	cmp.w	r8, #20
    f5ae:	d01a      	beq.n	f5e6 <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    f5b0:	f1b8 0f15 	cmp.w	r8, #21
    f5b4:	f000 8292 	beq.w	fadc <isr_rx_conn_pkt_ctrl+0x121c>
    f5b8:	4b87      	ldr	r3, [pc, #540]	; (f7d8 <isr_rx_conn_pkt_ctrl+0xf18>)
    f5ba:	9301      	str	r3, [sp, #4]
    f5bc:	9300      	str	r3, [sp, #0]
    f5be:	4a8a      	ldr	r2, [pc, #552]	; (f7e8 <isr_rx_conn_pkt_ctrl+0xf28>)
    f5c0:	4b8a      	ldr	r3, [pc, #552]	; (f7ec <isr_rx_conn_pkt_ctrl+0xf2c>)
    f5c2:	498b      	ldr	r1, [pc, #556]	; (f7f0 <isr_rx_conn_pkt_ctrl+0xf30>)
    f5c4:	488b      	ldr	r0, [pc, #556]	; (f7f4 <isr_rx_conn_pkt_ctrl+0xf34>)
    f5c6:	f7ff babd 	b.w	eb44 <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    f5ca:	2600      	movs	r6, #0
    f5cc:	e7dc      	b.n	f588 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    f5ce:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    f5d2:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    f5d6:	2f01      	cmp	r7, #1
    f5d8:	d9e7      	bls.n	f5aa <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    f5da:	2f02      	cmp	r7, #2
    f5dc:	d1e8      	bne.n	f5b0 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    f5de:	f1a8 0714 	sub.w	r7, r8, #20
    f5e2:	2f01      	cmp	r7, #1
    f5e4:	d8e4      	bhi.n	f5b0 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    f5e6:	89a7      	ldrh	r7, [r4, #12]
    f5e8:	2f1a      	cmp	r7, #26
    f5ea:	d934      	bls.n	f656 <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    f5ec:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    f5f0:	4547      	cmp	r7, r8
    f5f2:	bf28      	it	cs
    f5f4:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    f5f6:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    f5fa:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    f5fe:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    f602:	bf34      	ite	cc
    f604:	4693      	movcc	fp, r2
    f606:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    f60a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    f60e:	d324      	bcc.n	f65a <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    f610:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    f614:	45d0      	cmp	r8, sl
    f616:	bf28      	it	cs
    f618:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    f61a:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    f61e:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    f622:	bf34      	ite	cc
    f624:	4682      	movcc	sl, r0
    f626:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    f62a:	455a      	cmp	r2, fp
    f62c:	d050      	beq.n	f6d0 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    f62e:	f7fb fd11 	bl	b054 <packet_rx_acquired_count_get>
    f632:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    f634:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    f638:	f7f8 ff3c 	bl	84b4 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    f63c:	4420      	add	r0, r4
    f63e:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    f640:	28ff      	cmp	r0, #255	; 0xff
    f642:	d90c      	bls.n	f65e <isr_rx_conn_pkt_ctrl+0xd9e>
    f644:	4b64      	ldr	r3, [pc, #400]	; (f7d8 <isr_rx_conn_pkt_ctrl+0xf18>)
    f646:	9301      	str	r3, [sp, #4]
    f648:	9300      	str	r3, [sp, #0]
    f64a:	4a67      	ldr	r2, [pc, #412]	; (f7e8 <isr_rx_conn_pkt_ctrl+0xf28>)
    f64c:	4b67      	ldr	r3, [pc, #412]	; (f7ec <isr_rx_conn_pkt_ctrl+0xf2c>)
    f64e:	4968      	ldr	r1, [pc, #416]	; (f7f0 <isr_rx_conn_pkt_ctrl+0xf30>)
    f650:	4869      	ldr	r0, [pc, #420]	; (f7f8 <isr_rx_conn_pkt_ctrl+0xf38>)
    f652:	f7ff ba77 	b.w	eb44 <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f656:	460f      	mov	r7, r1
    f658:	e7cd      	b.n	f5f6 <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f65a:	46f0      	mov	r8, lr
    f65c:	e7dd      	b.n	f61a <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    f65e:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    f662:	4283      	cmp	r3, r0
    f664:	f040 8231 	bne.w	faca <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f668:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    f66c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f670:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    f672:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    f674:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    f678:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    f67c:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    f680:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    f684:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    f688:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    f68c:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    f690:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    f694:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    f698:	2303      	movs	r3, #3
    f69a:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    f69e:	2e00      	cmp	r6, #0
    f6a0:	f43f a9e4 	beq.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f6a4:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    f6a6:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    f6aa:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f6ae:	f043 0303 	orr.w	r3, r3, #3
    f6b2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f6b4:	2309      	movs	r3, #9
    f6b6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f6b8:	2315      	movs	r3, #21
    f6ba:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    f6bc:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    f6be:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    f6c2:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    f6c6:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    f6c8:	f7fd fce2 	bl	d090 <ctrl_tx_enqueue>
    f6cc:	f7ff b9ce 	b.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    f6d0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    f6d4:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    f6d8:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    f6dc:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    f6e0:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    f6e2:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    f6e6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    f6ea:	d103      	bne.n	f6f4 <isr_rx_conn_pkt_ctrl+0xe34>
    f6ec:	45c6      	cmp	lr, r8
    f6ee:	d101      	bne.n	f6f4 <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    f6f0:	4550      	cmp	r0, sl
    f6f2:	d0d4      	beq.n	f69e <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f6f4:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    f6f6:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    f6fa:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    f6fe:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    f700:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    f704:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    f706:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    f70a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    f70e:	702b      	strb	r3, [r5, #0]
    f710:	e7c5      	b.n	f69e <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    f712:	7a41      	ldrb	r1, [r0, #9]
    f714:	2016      	movs	r0, #22
    f716:	f7fb fc55 	bl	afc4 <pdu_len_cmp>
    f71a:	2800      	cmp	r0, #0
    f71c:	f000 81ba 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    f720:	4830      	ldr	r0, [pc, #192]	; (f7e4 <isr_rx_conn_pkt_ctrl+0xf24>)
    f722:	7cc3      	ldrb	r3, [r0, #19]
    f724:	2b04      	cmp	r3, #4
    f726:	d169      	bne.n	f7fc <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    f728:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    f72c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    f730:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    f734:	428b      	cmp	r3, r1
    f736:	d00a      	beq.n	f74e <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    f738:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    f73c:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    f740:	3a01      	subs	r2, #1
    f742:	2a02      	cmp	r2, #2
    f744:	d803      	bhi.n	f74e <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    f746:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    f748:	2116      	movs	r1, #22
    f74a:	f7ff bba5 	b.w	ee98 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    f74e:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    f752:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    f756:	4295      	cmp	r5, r2
    f758:	d003      	beq.n	f762 <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    f75a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    f75e:	2a03      	cmp	r2, #3
    f760:	d105      	bne.n	f76e <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    f762:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    f766:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    f76a:	4295      	cmp	r5, r2
    f76c:	d001      	beq.n	f772 <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    f76e:	222a      	movs	r2, #42	; 0x2a
    f770:	e7ea      	b.n	f748 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    f772:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    f776:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    f778:	f042 0203 	orr.w	r2, r2, #3
    f77c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    f780:	d116      	bne.n	f7b0 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    f782:	3b01      	subs	r3, #1
    f784:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    f788:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    f78c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    f790:	f36f 0341 	bfc	r3, #1, #1
    f794:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    f798:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    f79c:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    f7a0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    f7a4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f7a8:	f362 1347 	bfi	r3, r2, #5, #3
    f7ac:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f7b0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    f7b4:	7b62      	ldrb	r2, [r4, #13]
    f7b6:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f7ba:	400a      	ands	r2, r1
    f7bc:	f362 0384 	bfi	r3, r2, #2, #3
    f7c0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f7c4:	7b22      	ldrb	r2, [r4, #12]
    f7c6:	b2db      	uxtb	r3, r3
    f7c8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f7cc:	f362 1347 	bfi	r3, r2, #5, #3
    f7d0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    f7d4:	f7ff b94a 	b.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
    f7d8:	00015e19 	.word	0x00015e19
    f7dc:	00019396 	.word	0x00019396
    f7e0:	20000a44 	.word	0x20000a44
    f7e4:	200008e8 	.word	0x200008e8
    f7e8:	000171f2 	.word	0x000171f2
    f7ec:	0001937d 	.word	0x0001937d
    f7f0:	00017241 	.word	0x00017241
    f7f4:	00019c77 	.word	0x00019c77
    f7f8:	000197ef 	.word	0x000197ef
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    f7fc:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f800:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    f804:	f7f8 fe27 	bl	8456 <mem_acquire>
	if (!node_tx) {
    f808:	4601      	mov	r1, r0
    f80a:	2800      	cmp	r0, #0
    f80c:	f43f aa6b 	beq.w	ece6 <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f810:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f814:	2202      	movs	r2, #2
    f816:	f362 0301 	bfi	r3, r2, #0, #2
    f81a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    f81e:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    f822:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    f826:	4293      	cmp	r3, r2
    f828:	d11a      	bne.n	f860 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    f82a:	3b01      	subs	r3, #1
    f82c:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    f830:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    f834:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    f838:	f36f 0341 	bfc	r3, #1, #1
    f83c:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    f840:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f844:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    f848:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    f84c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f850:	f362 1347 	bfi	r3, r2, #5, #3
    f854:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    f858:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    f85c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    f860:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f864:	7b62      	ldrb	r2, [r4, #13]
    f866:	f3c3 0082 	ubfx	r0, r3, #2, #3
    f86a:	4002      	ands	r2, r0
    f86c:	f362 0384 	bfi	r3, r2, #2, #3
    f870:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    f874:	7b22      	ldrb	r2, [r4, #12]
    f876:	b2db      	uxtb	r3, r3
    f878:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f87c:	f362 1347 	bfi	r3, r2, #5, #3
    f880:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f884:	790b      	ldrb	r3, [r1, #4]
    f886:	f043 0303 	orr.w	r3, r3, #3
    f88a:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    f88c:	2303      	movs	r3, #3
    f88e:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f890:	2317      	movs	r3, #23
    f892:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    f894:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f898:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f89c:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    f89e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    f8a2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f8a6:	724b      	strb	r3, [r1, #9]
    f8a8:	f7ff ba2f 	b.w	ed0a <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    f8ac:	4e90      	ldr	r6, [pc, #576]	; (faf0 <isr_rx_conn_pkt_ctrl+0x1230>)
    f8ae:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    f8b2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	f2c0 80ec 	blt.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    f8bc:	7a41      	ldrb	r1, [r0, #9]
    f8be:	2017      	movs	r0, #23
    f8c0:	f7fb fb80 	bl	afc4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    f8c4:	2800      	cmp	r0, #0
    f8c6:	f000 80e5 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    f8ca:	7cf3      	ldrb	r3, [r6, #19]
    f8cc:	2b04      	cmp	r3, #4
    f8ce:	f47f a8cd 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
    f8d2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    f8d6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    f8da:	429a      	cmp	r2, r3
    f8dc:	f43f a8c6 	beq.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    f8e0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    f8e4:	f003 0203 	and.w	r2, r3, #3
    f8e8:	2a02      	cmp	r2, #2
    f8ea:	f47f a8bf 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    f8ee:	f043 0303 	orr.w	r3, r3, #3
    f8f2:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f8f6:	7b62      	ldrb	r2, [r4, #13]
    f8f8:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f8fc:	400a      	ands	r2, r1
    f8fe:	f362 0384 	bfi	r3, r2, #2, #3
    f902:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f906:	7b22      	ldrb	r2, [r4, #12]
    f908:	b2db      	uxtb	r3, r3
    f90a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f90e:	f362 1347 	bfi	r3, r2, #5, #3
    f912:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    f916:	f7ff b85c 	b.w	e9d2 <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    f91a:	4b75      	ldr	r3, [pc, #468]	; (faf0 <isr_rx_conn_pkt_ctrl+0x1230>)
    f91c:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    f920:	f996 301d 	ldrsb.w	r3, [r6, #29]
    f924:	2b00      	cmp	r3, #0
    f926:	f280 80b5 	bge.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    f92a:	7a41      	ldrb	r1, [r0, #9]
    f92c:	2018      	movs	r0, #24
    f92e:	f7fb fb49 	bl	afc4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    f932:	2800      	cmp	r0, #0
    f934:	f000 80ae 	beq.w	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    f938:	7b27      	ldrb	r7, [r4, #12]
    f93a:	7b62      	ldrb	r2, [r4, #13]
    f93c:	ea47 0002 	orr.w	r0, r7, r2
    f940:	f010 0007 	ands.w	r0, r0, #7
    f944:	d125      	bne.n	f992 <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f946:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    f94a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    f94e:	4293      	cmp	r3, r2
    f950:	f43f a88c 	beq.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    f954:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f958:	f003 0303 	and.w	r3, r3, #3
    f95c:	2b02      	cmp	r3, #2
    f95e:	f47f a885 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    f962:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f966:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    f96a:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    f96c:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    f970:	f57f a87c 	bpl.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f974:	230c      	movs	r3, #12
		upd->status = 0;
    f976:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f978:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    f97a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    f97e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f982:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    f984:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    f988:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f98c:	7363      	strb	r3, [r4, #13]
    f98e:	f7ff ba6e 	b.w	ee6e <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    f992:	89e0      	ldrh	r0, [r4, #14]
    f994:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    f996:	1ac3      	subs	r3, r0, r3
    f998:	041b      	lsls	r3, r3, #16
    f99a:	f100 80a4 	bmi.w	fae6 <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f99e:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    f9a2:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    f9a6:	428b      	cmp	r3, r1
    f9a8:	d005      	beq.n	f9b6 <isr_rx_conn_pkt_ctrl+0x10f6>
    f9aa:	4b52      	ldr	r3, [pc, #328]	; (faf4 <isr_rx_conn_pkt_ctrl+0x1234>)
    f9ac:	9301      	str	r3, [sp, #4]
    f9ae:	9300      	str	r3, [sp, #0]
    f9b0:	4b51      	ldr	r3, [pc, #324]	; (faf8 <isr_rx_conn_pkt_ctrl+0x1238>)
    f9b2:	f7fe bfcb 	b.w	e94c <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f9b6:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    f9ba:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    f9be:	42a3      	cmp	r3, r4
    f9c0:	d014      	beq.n	f9ec <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    f9c2:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f9c6:	f003 0303 	and.w	r3, r3, #3
    f9ca:	2b02      	cmp	r3, #2
    f9cc:	d10e      	bne.n	f9ec <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f9ce:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f9d2:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f9d6:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    f9da:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f9de:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    f9e2:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f9e4:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    f9e8:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f9ec:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    f9f0:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f9f4:	f002 0207 	and.w	r2, r2, #7
    f9f8:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    f9fc:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    fa00:	f36f 0300 	bfc	r3, #0, #1
    fa04:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    fa08:	2008      	movs	r0, #8
	conn->llcp_ack--;
    fa0a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    fa0c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    fa10:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    fa14:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    fa18:	2b00      	cmp	r3, #0
    fa1a:	f43f a827 	beq.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    fa1e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    fa22:	f362 0302 	bfi	r3, r2, #0, #3
    fa26:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    fa2a:	f7ff b81f 	b.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    fa2e:	4e30      	ldr	r6, [pc, #192]	; (faf0 <isr_rx_conn_pkt_ctrl+0x1230>)
    fa30:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    fa34:	f995 301d 	ldrsb.w	r3, [r5, #29]
    fa38:	2b00      	cmp	r3, #0
    fa3a:	db2b      	blt.n	fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    fa3c:	7a41      	ldrb	r1, [r0, #9]
    fa3e:	2019      	movs	r0, #25
    fa40:	f7fb fac0 	bl	afc4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    fa44:	b330      	cbz	r0, fa94 <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    fa46:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    fa4a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    fa4e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    fa52:	7b22      	ldrb	r2, [r4, #12]
    fa54:	f003 0307 	and.w	r3, r3, #7
    fa58:	4213      	tst	r3, r2
    fa5a:	f43f a807 	beq.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    fa5e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    fa62:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    fa66:	429a      	cmp	r2, r3
    fa68:	f47f a800 	bne.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    fa6c:	2205      	movs	r2, #5
    fa6e:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    fa72:	f105 0079 	add.w	r0, r5, #121	; 0x79
    fa76:	f7f2 f8c1 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    fa7a:	2301      	movs	r3, #1
    fa7c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    fa80:	2302      	movs	r3, #2
    fa82:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    fa86:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    fa8a:	3b01      	subs	r3, #1
    fa8c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    fa90:	f7fe bfec 	b.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    fa94:	4816      	ldr	r0, [pc, #88]	; (faf0 <isr_rx_conn_pkt_ctrl+0x1230>)
    fa96:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fa9a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    fa9e:	f7f8 fcda 	bl	8456 <mem_acquire>
	if (!node_tx) {
    faa2:	4601      	mov	r1, r0
    faa4:	2800      	cmp	r0, #0
    faa6:	f43f a91e 	beq.w	ece6 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    faaa:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    faac:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    faae:	f043 0303 	orr.w	r3, r3, #3
    fab2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    fab4:	2302      	movs	r3, #2
    fab6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    fab8:	2307      	movs	r3, #7
    faba:	71c3      	strb	r3, [r0, #7]
    fabc:	f7ff b94f 	b.w	ed5e <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    fac0:	2328      	movs	r3, #40	; 0x28
    fac2:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    fac6:	f7fe bfd1 	b.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    faca:	2e00      	cmp	r6, #0
    facc:	f43f a90b 	beq.w	ece6 <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    fad0:	490a      	ldr	r1, [pc, #40]	; (fafc <isr_rx_conn_pkt_ctrl+0x123c>)
    fad2:	4630      	mov	r0, r6
    fad4:	f7f8 fcd9 	bl	848a <mem_release>
    fad8:	f7ff b905 	b.w	ece6 <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    fadc:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    fade:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    fae0:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    fae2:	4693      	mov	fp, r2
    fae4:	e5db      	b.n	f69e <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    fae6:	2328      	movs	r3, #40	; 0x28
    fae8:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    faec:	f7fe bfbe 	b.w	ea6c <isr_rx_conn_pkt_ctrl+0x1ac>
    faf0:	200008e8 	.word	0x200008e8
    faf4:	00015e19 	.word	0x00015e19
    faf8:	00019700 	.word	0x00019700
    fafc:	20000a44 	.word	0x20000a44

0000fb00 <isr>:
{
    fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb04:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    fb06:	f003 fec9 	bl	1389c <radio_is_done>
    fb0a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    fb0c:	b366      	cbz	r6, fb68 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    fb0e:	f003 fee5 	bl	138dc <radio_crc_is_valid>
    fb12:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    fb14:	f003 ff66 	bl	139e4 <radio_filter_has_match>
    fb18:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    fb1c:	f003 ff6c 	bl	139f8 <radio_filter_match_get>
    fb20:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    fb24:	f004 f950 	bl	13dc8 <radio_ar_has_match>
    fb28:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    fb2c:	f004 f93a 	bl	13da4 <radio_ar_match_get>
    fb30:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    fb34:	f003 ff20 	bl	13978 <radio_rssi_is_ready>
    fb38:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    fb3a:	4cb4      	ldr	r4, [pc, #720]	; (fe0c <isr+0x30c>)
	radio_status_reset();
    fb3c:	f003 fe98 	bl	13870 <radio_status_reset>
	radio_tmr_status_reset();
    fb40:	f003 ff6c 	bl	13a1c <radio_tmr_status_reset>
	radio_filter_status_reset();
    fb44:	f003 ff46 	bl	139d4 <radio_filter_status_reset>
	radio_ar_status_reset();
    fb48:	f004 f932 	bl	13db0 <radio_ar_status_reset>
	radio_rssi_status_reset();
    fb4c:	f003 ff0c 	bl	13968 <radio_rssi_status_reset>
	switch (_radio.state) {
    fb50:	7d23      	ldrb	r3, [r4, #20]
    fb52:	2b05      	cmp	r3, #5
    fb54:	f201 846e 	bhi.w	11434 <__kernel_ram_size+0x1434>
    fb58:	e8df f013 	tbh	[pc, r3, lsl #1]
    fb5c:	00cd007c 	.word	0x00cd007c
    fb60:	0a1c000e 	.word	0x0a1c000e
    fb64:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    fb68:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    fb6c:	4635      	mov	r5, r6
    fb6e:	46b2      	mov	sl, r6
    fb70:	46b1      	mov	r9, r6
    fb72:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    fb74:	46d8      	mov	r8, fp
    fb76:	e7e0      	b.n	fb3a <isr+0x3a>
	_radio.state = STATE_RX;
    fb78:	2301      	movs	r3, #1
    fb7a:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    fb7c:	f004 f850 	bl	13c20 <radio_tmr_tifs_base_get>
    fb80:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    fb82:	2096      	movs	r0, #150	; 0x96
    fb84:	f003 ff58 	bl	13a38 <radio_tmr_tifs_set>
	switch (_radio.role) {
    fb88:	7ce3      	ldrb	r3, [r4, #19]
    fb8a:	3b01      	subs	r3, #1
    fb8c:	2b03      	cmp	r3, #3
    fb8e:	f200 80aa 	bhi.w	fce6 <isr+0x1e6>
    fb92:	e8df f003 	tbb	[pc, r3]
    fb96:	3202      	.short	0x3202
    fb98:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fb9a:	2300      	movs	r3, #0
    fb9c:	461a      	mov	r2, r3
    fb9e:	4619      	mov	r1, r3
    fba0:	4618      	mov	r0, r3
    fba2:	f003 feb9 	bl	13918 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    fba6:	f003 fea7 	bl	138f8 <radio_pkt_scratch_get>
    fbaa:	f003 fe29 	bl	13800 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fbae:	f003 fe6b 	bl	13888 <radio_is_ready>
    fbb2:	b138      	cbz	r0, fbc4 <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    fbb4:	4b96      	ldr	r3, [pc, #600]	; (fe10 <isr+0x310>)
    fbb6:	9301      	str	r3, [sp, #4]
    fbb8:	9300      	str	r3, [sp, #0]
    fbba:	4b96      	ldr	r3, [pc, #600]	; (fe14 <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    fbbc:	4a96      	ldr	r2, [pc, #600]	; (fe18 <isr+0x318>)
    fbbe:	4997      	ldr	r1, [pc, #604]	; (fe1c <isr+0x31c>)
    fbc0:	4897      	ldr	r0, [pc, #604]	; (fe20 <isr+0x320>)
    fbc2:	e34b      	b.n	1025c <__kernel_ram_size+0x25c>
		if (ctrl_rl_enabled()) {
    fbc4:	f003 f95e 	bl	12e84 <ctrl_rl_enabled>
    fbc8:	b138      	cbz	r0, fbda <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    fbca:	a810      	add	r0, sp, #64	; 0x40
    fbcc:	f002 feaa 	bl	12924 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fbd0:	4601      	mov	r1, r0
    fbd2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fbd6:	f004 f8b3 	bl	13d40 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    fbda:	2100      	movs	r1, #0
    fbdc:	4608      	mov	r0, r1
    fbde:	f003 fe24 	bl	1382a <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    fbe2:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    fbe4:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    fbe6:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    fbe8:	4608      	mov	r0, r1
    fbea:	f003 fe1a 	bl	13822 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fbee:	1a28      	subs	r0, r5, r0
    fbf0:	f003 ffac 	bl	13b4c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    fbf4:	f003 fffc 	bl	13bf0 <radio_tmr_end_capture>
    fbf8:	e02c      	b.n	fc54 <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fbfa:	2300      	movs	r3, #0
    fbfc:	461a      	mov	r2, r3
    fbfe:	4619      	mov	r1, r3
    fc00:	4618      	mov	r0, r3
    fc02:	f003 fe89 	bl	13918 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    fc06:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    fc0a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    fc0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    fc12:	3008      	adds	r0, #8
    fc14:	f003 fdf4 	bl	13800 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fc18:	f003 fe36 	bl	13888 <radio_is_ready>
    fc1c:	2800      	cmp	r0, #0
    fc1e:	d1c9      	bne.n	fbb4 <isr+0xb4>
		if (ctrl_rl_enabled()) {
    fc20:	f003 f930 	bl	12e84 <ctrl_rl_enabled>
    fc24:	b138      	cbz	r0, fc36 <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    fc26:	a810      	add	r0, sp, #64	; 0x40
    fc28:	f002 fe7c 	bl	12924 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fc2c:	4601      	mov	r1, r0
    fc2e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fc32:	f004 f885 	bl	13d40 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    fc36:	2100      	movs	r1, #0
    fc38:	4608      	mov	r0, r1
    fc3a:	f003 fdf6 	bl	1382a <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    fc3e:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    fc40:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    fc42:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    fc44:	4608      	mov	r0, r1
    fc46:	f003 fdec 	bl	13822 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fc4a:	1a28      	subs	r0, r5, r0
    fc4c:	f003 ff7e 	bl	13b4c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    fc50:	f003 fe7a 	bl	13948 <radio_rssi_measure>
}
    fc54:	b013      	add	sp, #76	; 0x4c
    fc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    fc5a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    fc5e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    fc62:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    fc66:	2100      	movs	r1, #0
    fc68:	09d3      	lsrs	r3, r2, #7
    fc6a:	f000 0007 	and.w	r0, r0, #7
    fc6e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    fc72:	f003 fe51 	bl	13918 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    fc76:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    fc7a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    fc7e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    fc82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    fc86:	3108      	adds	r1, #8
    fc88:	f7fb fd58 	bl	b73c <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    fc8c:	f003 fdfc 	bl	13888 <radio_is_ready>
    fc90:	2800      	cmp	r0, #0
    fc92:	d18f      	bne.n	fbb4 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    fc94:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fc98:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    fc9c:	2101      	movs	r1, #1
    fc9e:	f000 0007 	and.w	r0, r0, #7
    fca2:	f003 fdc2 	bl	1382a <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    fca6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fcaa:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    fcae:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    fcb2:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    fcb4:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    fcb6:	4405      	add	r5, r0
	switch (phy) {
    fcb8:	d013      	beq.n	fce2 <isr+0x1e2>
		return 40;
    fcba:	2b04      	cmp	r3, #4
    fcbc:	bf0c      	ite	eq
    fcbe:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    fcc2:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    fcc4:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    fcc6:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    fcca:	09c1      	lsrs	r1, r0, #7
    fccc:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    fcd0:	f003 fda7 	bl	13822 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fcd4:	1a28      	subs	r0, r5, r0
    fcd6:	f003 ff39 	bl	13b4c <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    fcda:	2001      	movs	r0, #1
    fcdc:	f7fc fb80 	bl	c3e0 <packet_tx_enqueue>
    fce0:	e7b8      	b.n	fc54 <isr+0x154>
		return 24;
    fce2:	2018      	movs	r0, #24
    fce4:	e7ee      	b.n	fcc4 <isr+0x1c4>
		LL_ASSERT(0);
    fce6:	4b4a      	ldr	r3, [pc, #296]	; (fe10 <isr+0x310>)
    fce8:	9301      	str	r3, [sp, #4]
    fcea:	9300      	str	r3, [sp, #0]
    fcec:	4b49      	ldr	r3, [pc, #292]	; (fe14 <isr+0x314>)
		LL_ASSERT(0);
    fcee:	4a4a      	ldr	r2, [pc, #296]	; (fe18 <isr+0x318>)
    fcf0:	494a      	ldr	r1, [pc, #296]	; (fe1c <isr+0x31c>)
    fcf2:	484c      	ldr	r0, [pc, #304]	; (fe24 <isr+0x324>)
    fcf4:	e2b2      	b.n	1025c <__kernel_ram_size+0x25c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    fcf6:	b926      	cbnz	r6, fd02 <isr+0x202>
		_radio.state = STATE_CLOSE;
    fcf8:	2303      	movs	r3, #3
    fcfa:	7523      	strb	r3, [r4, #20]
		radio_disable();
    fcfc:	f003 fda6 	bl	1384c <radio_disable>
    fd00:	e7a8      	b.n	fc54 <isr+0x154>
	switch (_radio.role) {
    fd02:	7ce3      	ldrb	r3, [r4, #19]
    fd04:	3b01      	subs	r3, #1
    fd06:	2b03      	cmp	r3, #3
    fd08:	f201 813e 	bhi.w	10f88 <__kernel_ram_size+0xf88>
    fd0c:	e8df f013 	tbh	[pc, r3, lsl #1]
    fd10:	02ae0004 	.word	0x02ae0004
    fd14:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    fd18:	2f00      	cmp	r7, #0
    fd1a:	d0ed      	beq.n	fcf8 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    fd1c:	f1ba 0f00 	cmp.w	sl, #0
    fd20:	d039      	beq.n	fd96 <isr+0x296>
    fd22:	4658      	mov	r0, fp
    fd24:	f002 fe5c 	bl	129e0 <ctrl_rl_irk_idx>
    fd28:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    fd2c:	f003 fde4 	bl	138f8 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    fd30:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    fd34:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    fd36:	232b      	movs	r3, #43	; 0x2b
    fd38:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    fd3a:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    fd3c:	fb11 3302 	smlabb	r3, r1, r2, r3
    fd40:	930a      	str	r3, [sp, #40]	; 0x28
    fd42:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    fd44:	f000 030f 	and.w	r3, r0, #15
    fd48:	2b03      	cmp	r3, #3
    fd4a:	d10a      	bne.n	fd62 <isr+0x262>
    fd4c:	7873      	ldrb	r3, [r6, #1]
    fd4e:	2b0c      	cmp	r3, #12
    fd50:	d107      	bne.n	fd62 <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    fd52:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fd56:	065f      	lsls	r7, r3, #25
    fd58:	d51f      	bpl.n	fd9a <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    fd5a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    fd5e:	0658      	lsls	r0, r3, #25
    fd60:	d449      	bmi.n	fdf6 <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    fd62:	7830      	ldrb	r0, [r6, #0]
    fd64:	f000 030f 	and.w	r3, r0, #15
    fd68:	2b05      	cmp	r3, #5
    fd6a:	d1c5      	bne.n	fcf8 <isr+0x1f8>
    fd6c:	7873      	ldrb	r3, [r6, #1]
    fd6e:	2b22      	cmp	r3, #34	; 0x22
    fd70:	d1c2      	bne.n	fcf8 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    fd72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd74:	5ce3      	ldrb	r3, [r4, r3]
    fd76:	f003 030f 	and.w	r3, r3, #15
    fd7a:	2b01      	cmp	r3, #1
    fd7c:	f040 814f 	bne.w	1001e <__kernel_ram_size+0x1e>
					    ci->connect_ind.init_addr,
    fd80:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    fd82:	aa10      	add	r2, sp, #64	; 0x40
    fd84:	4639      	mov	r1, r7
    fd86:	f3c0 1080 	ubfx	r0, r0, #6, #1
    fd8a:	f003 f81f 	bl	12dcc <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    fd8e:	2800      	cmp	r0, #0
    fd90:	d14c      	bne.n	fe2c <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fd92:	2000      	movs	r0, #0
    fd94:	e05a      	b.n	fe4c <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    fd96:	20ff      	movs	r0, #255	; 0xff
    fd98:	e7c6      	b.n	fd28 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    fd9a:	aa10      	add	r2, sp, #64	; 0x40
    fd9c:	1cb1      	adds	r1, r6, #2
    fd9e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    fda2:	f003 f813 	bl	12dcc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    fda6:	2800      	cmp	r0, #0
    fda8:	d0d7      	beq.n	fd5a <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    fdaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fdac:	7832      	ldrb	r2, [r6, #0]
    fdae:	5ce3      	ldrb	r3, [r4, r3]
    fdb0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fdb4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    fdb8:	d1d3      	bne.n	fd62 <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    fdba:	2206      	movs	r2, #6
    fdbc:	f106 0108 	add.w	r1, r6, #8
    fdc0:	1ca8      	adds	r0, r5, #2
    fdc2:	f7f1 ff06 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    fdc6:	2800      	cmp	r0, #0
    fdc8:	d1cb      	bne.n	fd62 <isr+0x262>
		_radio.state = STATE_CLOSE;
    fdca:	2303      	movs	r3, #3
    fdcc:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    fdce:	f003 fdad 	bl	1392c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    fdd2:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    fdd6:	2327      	movs	r3, #39	; 0x27
    fdd8:	fb03 4000 	mla	r0, r3, r0, r4
    fddc:	307b      	adds	r0, #123	; 0x7b
    fdde:	f003 fd15 	bl	1380c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    fde2:	f003 fd51 	bl	13888 <radio_is_ready>
    fde6:	2800      	cmp	r0, #0
    fde8:	f43f af34 	beq.w	fc54 <isr+0x154>
    fdec:	4b08      	ldr	r3, [pc, #32]	; (fe10 <isr+0x310>)
    fdee:	9301      	str	r3, [sp, #4]
    fdf0:	9300      	str	r3, [sp, #0]
    fdf2:	4b0d      	ldr	r3, [pc, #52]	; (fe28 <isr+0x328>)
    fdf4:	e6e2      	b.n	fbbc <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    fdf6:	f1b9 0f00 	cmp.w	r9, #0
    fdfa:	d1d6      	bne.n	fdaa <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fdfc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fe00:	f002 fe34 	bl	12a6c <ctrl_irk_whitelisted>
    fe04:	2800      	cmp	r0, #0
    fe06:	d1d0      	bne.n	fdaa <isr+0x2aa>
    fe08:	e7ab      	b.n	fd62 <isr+0x262>
    fe0a:	bf00      	nop
    fe0c:	200008e8 	.word	0x200008e8
    fe10:	00015e19 	.word	0x00015e19
    fe14:	0001930a 	.word	0x0001930a
    fe18:	000171f2 	.word	0x000171f2
    fe1c:	00017241 	.word	0x00017241
    fe20:	000199d0 	.word	0x000199d0
    fe24:	00017166 	.word	0x00017166
    fe28:	0001931d 	.word	0x0001931d
		       isr_adv_ci_adva_check(adv, ci) &&
    fe2c:	4631      	mov	r1, r6
    fe2e:	4628      	mov	r0, r5
    fe30:	f7fb ff6e 	bl	bd10 <isr_adv_ci_adva_check>
					    rl_idx) &&
    fe34:	2800      	cmp	r0, #0
    fe36:	d0ac      	beq.n	fd92 <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    fe38:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    fe3c:	2bff      	cmp	r3, #255	; 0xff
    fe3e:	f000 80db 	beq.w	fff8 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    fe42:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    fe46:	1ac1      	subs	r1, r0, r3
    fe48:	4248      	negs	r0, r1
    fe4a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fe4c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    fe50:	2800      	cmp	r0, #0
    fe52:	f43f af51 	beq.w	fcf8 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    fe56:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    fe5a:	b133      	cbz	r3, fe6a <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    fe5c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    fe60:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    fe64:	429a      	cmp	r2, r3
    fe66:	f47f af47 	bne.w	fcf8 <isr+0x1f8>
    fe6a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    fe6e:	2b00      	cmp	r3, #0
    fe70:	f43f af42 	beq.w	fcf8 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    fe74:	2004      	movs	r0, #4
    fe76:	f7fb f903 	bl	b080 <packet_rx_reserve_get>
		if (!node_rx) {
    fe7a:	4607      	mov	r7, r0
    fe7c:	2800      	cmp	r0, #0
    fe7e:	f43f af3b 	beq.w	fcf8 <isr+0x1f8>
		_radio.state = STATE_STOP;
    fe82:	f04f 0904 	mov.w	r9, #4
    fe86:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    fe8a:	f003 fcdf 	bl	1384c <radio_disable>
		conn = _radio.advertiser.conn;
    fe8e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fe92:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    fe96:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fe98:	f44f 72aa 	mov.w	r2, #340	; 0x154
    fe9c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    fe9e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fea2:	f7f8 fb10 	bl	84c6 <mem_index_get>
		memcpy(&conn->access_addr[0],
    fea6:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    feaa:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    feac:	2203      	movs	r2, #3
    feae:	f106 0112 	add.w	r1, r6, #18
    feb2:	f105 0014 	add.w	r0, r5, #20
    feb6:	f7f1 fea1 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    feba:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    febe:	464a      	mov	r2, r9
    fec0:	f106 010e 	add.w	r1, r6, #14
    fec4:	4650      	mov	r0, sl
    fec6:	f7f1 fe99 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    feca:	2205      	movs	r2, #5
    fecc:	f106 011e 	add.w	r1, r6, #30
    fed0:	4640      	mov	r0, r8
    fed2:	f7f1 fe93 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    fed6:	2105      	movs	r1, #5
    fed8:	4640      	mov	r0, r8
    feda:	f7f8 fc67 	bl	87ac <util_ones_count_get>
		conn->data_chan_count =
    fede:	7f6b      	ldrb	r3, [r5, #29]
    fee0:	f360 0305 	bfi	r3, r0, #0, #6
    fee4:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    fee6:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    feea:	f3c3 0304 	ubfx	r3, r3, #0, #5
    feee:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    fef0:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    fef2:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    fef4:	f240 48e2 	movw	r8, #1250	; 0x4e2
    fef8:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    fefc:	7ef2      	ldrb	r2, [r6, #27]
    fefe:	7eb3      	ldrb	r3, [r6, #26]
    ff00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ff04:	4651      	mov	r1, sl
    ff06:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    ff08:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ff0a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    ff0e:	f7f1 fe75 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    ff12:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ff14:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    ff16:	f242 7210 	movw	r2, #10000	; 0x2710
    ff1a:	fb02 8303 	mla	r3, r2, r3, r8
    ff1e:	3b01      	subs	r3, #1
    ff20:	fbb3 f3f8 	udiv	r3, r3, r8
    ff24:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    ff26:	4b54      	ldr	r3, [pc, #336]	; (10078 <__kernel_ram_size+0x78>)
    ff28:	4443      	add	r3, r8
    ff2a:	fbb3 f3f8 	udiv	r3, r3, r8
    ff2e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ff32:	4b52      	ldr	r3, [pc, #328]	; (1007c <__kernel_ram_size+0x7c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ff34:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ff36:	4443      	add	r3, r8
    ff38:	fbb3 f3f8 	udiv	r3, r3, r8
    ff3c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ff3e:	4282      	cmp	r2, r0
    ff40:	4613      	mov	r3, r2
    ff42:	bfc4      	itt	gt
    ff44:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    ff48:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ff4a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ff4e:	bfc4      	itt	gt
    ff50:	18d2      	addgt	r2, r2, r3
    ff52:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    ff54:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ff56:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ff5a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    ff5c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    ff5e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    ff60:	2300      	movs	r3, #0
    ff62:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    ff64:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ff66:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    ff6a:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ff6c:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ff70:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    ff74:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ff76:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ff7a:	464a      	mov	r2, r9
    ff7c:	f107 001b 	add.w	r0, r7, #27
    ff80:	f7f1 fe3c 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    ff84:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ff88:	f107 030e 	add.w	r3, r7, #14
    ff8c:	28ff      	cmp	r0, #255	; 0xff
    ff8e:	930b      	str	r3, [sp, #44]	; 0x2c
    ff90:	f106 0a02 	add.w	sl, r6, #2
    ff94:	f107 0b14 	add.w	fp, r7, #20
    ff98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ff9a:	d05f      	beq.n	1005c <__kernel_ram_size+0x5c>
			ll_rl_id_addr_get(rl_idx,
    ff9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ff9e:	f107 010d 	add.w	r1, r7, #13
    ffa2:	f002 fed5 	bl	12d50 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ffa6:	7b7b      	ldrb	r3, [r7, #13]
    ffa8:	3302      	adds	r3, #2
    ffaa:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ffac:	464a      	mov	r2, r9
    ffae:	4651      	mov	r1, sl
    ffb0:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ffb2:	f7f1 fe23 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    ffb6:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    ffb8:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    ffbc:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    ffbe:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    ffc2:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    ffc4:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    ffc8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ffcc:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ffd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ffd4:	8c28      	ldrh	r0, [r5, #32]
    ffd6:	f7fb ffaf 	bl	bf38 <rx_fc_lock>
		packet_rx_enqueue();
    ffda:	f7fb febd 	bl	bd58 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ffde:	2003      	movs	r0, #3
    ffe0:	f7fb f84e 	bl	b080 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ffe4:	2800      	cmp	r0, #0
    ffe6:	d155      	bne.n	10094 <__kernel_ram_size+0x94>
    ffe8:	4b25      	ldr	r3, [pc, #148]	; (10080 <__kernel_ram_size+0x80>)
    ffea:	9301      	str	r3, [sp, #4]
    ffec:	9300      	str	r3, [sp, #0]
    ffee:	4b25      	ldr	r3, [pc, #148]	; (10084 <__kernel_ram_size+0x84>)
			LL_ASSERT(node_rx);
    fff0:	4a25      	ldr	r2, [pc, #148]	; (10088 <__kernel_ram_size+0x88>)
    fff2:	4926      	ldr	r1, [pc, #152]	; (1008c <__kernel_ram_size+0x8c>)
    fff4:	4826      	ldr	r0, [pc, #152]	; (10090 <__kernel_ram_size+0x90>)
    fff6:	e131      	b.n	1025c <__kernel_ram_size+0x25c>
	return (adv->rx_addr == ci->tx_addr) &&
    fff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fffa:	5ce2      	ldrb	r2, [r4, r3]
    fffc:	7833      	ldrb	r3, [r6, #0]
    fffe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10002:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   10006:	f47f aec4 	bne.w	fd92 <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1000a:	2206      	movs	r2, #6
   1000c:	4639      	mov	r1, r7
   1000e:	f105 0008 	add.w	r0, r5, #8
   10012:	f7f1 fdde 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   10016:	fab0 f080 	clz	r0, r0
   1001a:	0940      	lsrs	r0, r0, #5
   1001c:	e716      	b.n	fe4c <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   1001e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   10022:	09db      	lsrs	r3, r3, #7
   10024:	d00d      	beq.n	10042 <__kernel_ram_size+0x42>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   10026:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
   1002a:	09db      	lsrs	r3, r3, #7
   1002c:	f43f aeb1 	beq.w	fd92 <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   10030:	f1b9 0f00 	cmp.w	r9, #0
   10034:	d10d      	bne.n	10052 <__kernel_ram_size+0x52>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   10036:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1003a:	f002 fd17 	bl	12a6c <ctrl_irk_whitelisted>
   1003e:	b940      	cbnz	r0, 10052 <__kernel_ram_size+0x52>
   10040:	e6a7      	b.n	fd92 <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
   10042:	aa10      	add	r2, sp, #64	; 0x40
   10044:	1cb1      	adds	r1, r6, #2
   10046:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1004a:	f002 febf 	bl	12dcc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   1004e:	2800      	cmp	r0, #0
   10050:	d0e9      	beq.n	10026 <__kernel_ram_size+0x26>
	       isr_adv_ci_adva_check(adv, ci);
   10052:	4631      	mov	r1, r6
   10054:	4628      	mov	r0, r5
   10056:	f7fb fe5b 	bl	bd10 <isr_adv_ci_adva_check>
   1005a:	e6f7      	b.n	fe4c <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   1005c:	4619      	mov	r1, r3
   1005e:	464a      	mov	r2, r9
   10060:	4658      	mov	r0, fp
   10062:	f7f1 fdf7 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   10066:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   10068:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   1006a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1006e:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   10070:	464a      	mov	r2, r9
   10072:	4651      	mov	r1, sl
   10074:	e79d      	b.n	ffb2 <isr+0x4b2>
   10076:	bf00      	nop
   10078:	026259ff 	.word	0x026259ff
   1007c:	01c9c37f 	.word	0x01c9c37f
   10080:	00015e19 	.word	0x00015e19
   10084:	0001931d 	.word	0x0001931d
   10088:	000171f2 	.word	0x000171f2
   1008c:	00017241 	.word	0x00017241
   10090:	00019e07 	.word	0x00019e07
			node_rx->hdr.handle = conn->handle;
   10094:	8c2b      	ldrh	r3, [r5, #32]
   10096:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   10098:	230b      	movs	r3, #11
   1009a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
   1009c:	7833      	ldrb	r3, [r6, #0]
   1009e:	f013 0320 	ands.w	r3, r3, #32
   100a2:	d00e      	beq.n	100c2 <__kernel_ram_size+0xc2>
					((u16_t)conn->access_addr[1] << 8) |
   100a4:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
   100a6:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
   100a8:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
   100aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   100ae:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
   100b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   100b4:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   100b6:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   100b8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   100bc:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
   100be:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   100c0:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   100c2:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   100c4:	f7fb fe48 	bl	bd58 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
   100c8:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   100cc:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   100d0:	497d      	ldr	r1, [pc, #500]	; (102c8 <__kernel_ram_size+0x2c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
   100d2:	0952      	lsrs	r2, r2, #5
   100d4:	f362 0384 	bfi	r3, r2, #2, #3
   100d8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   100dc:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
   100e0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   100e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   100e8:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   100ea:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   100ee:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   100f2:	4a76      	ldr	r2, [pc, #472]	; (102cc <__kernel_ram_size+0x2cc>)
   100f4:	f203 233f 	addw	r3, r3, #575	; 0x23f
   100f8:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   100fc:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   100fe:	ea4f 0358 	mov.w	r3, r8, lsr #1
   10102:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   10104:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
   10106:	7d73      	ldrb	r3, [r6, #21]
   10108:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
   1010c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
   1010e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   10112:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   10114:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
   10116:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   10118:	4638      	mov	r0, r7
   1011a:	f003 fb84 	bl	13826 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1011e:	496c      	ldr	r1, [pc, #432]	; (102d0 <__kernel_ram_size+0x2d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   10120:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   10122:	f200 4052 	addw	r0, r0, #1106	; 0x452
   10126:	a366      	add	r3, pc, #408	; (adr r3, 102c0 <__kernel_ram_size+0x2c0>)
   10128:	e9d3 2300 	ldrd	r2, r3, [r3]
   1012c:	fba0 0101 	umull	r0, r1, r0, r1
   10130:	f7f0 f870 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   10134:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
   10138:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
   1013a:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   1013c:	4293      	cmp	r3, r2
   1013e:	bf38      	it	cc
   10140:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   10142:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   10146:	469a      	mov	sl, r3
		conn_interval_us -=
   10148:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
   1014a:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
   1014c:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
   1014e:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
   10150:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
   10154:	f003 fd5e 	bl	13c14 <radio_tmr_end_get>
   10158:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
   1015a:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   1015c:	4639      	mov	r1, r7
		conn_offset_us +=
   1015e:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   10162:	4638      	mov	r0, r7
   10164:	f003 fb5d 	bl	13822 <radio_tx_chain_delay_get>
   10168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1016a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1016e:	4499      	add	r9, r3
   10170:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   10174:	eba9 030b 	sub.w	r3, r9, fp
   10178:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1017a:	f240 4383 	movw	r3, #1155	; 0x483
   1017e:	9300      	str	r3, [sp, #0]
   10180:	2205      	movs	r2, #5
   10182:	4b54      	ldr	r3, [pc, #336]	; (102d4 <__kernel_ram_size+0x2d4>)
   10184:	f8df b148 	ldr.w	fp, [pc, #328]	; 102d0 <__kernel_ram_size+0x2d0>
   10188:	4639      	mov	r1, r7
   1018a:	4638      	mov	r0, r7
   1018c:	f7f9 f88a 	bl	92a4 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   10190:	f240 4184 	movw	r1, #1156	; 0x484
   10194:	f7fb ff08 	bl	bfa8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   10198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1019a:	5ce3      	ldrb	r3, [r4, r3]
   1019c:	f003 030f 	and.w	r3, r3, #15
   101a0:	2b01      	cmp	r3, #1
   101a2:	d106      	bne.n	101b2 <__kernel_ram_size+0x1b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   101a4:	9700      	str	r7, [sp, #0]
   101a6:	463b      	mov	r3, r7
   101a8:	2203      	movs	r2, #3
   101aa:	4639      	mov	r1, r7
   101ac:	4638      	mov	r0, r7
   101ae:	f7f9 f879 	bl	92a4 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   101b2:	fba8 890b 	umull	r8, r9, r8, fp
   101b6:	a342      	add	r3, pc, #264	; (adr r3, 102c0 <__kernel_ram_size+0x2c0>)
   101b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   101bc:	4640      	mov	r0, r8
   101be:	4649      	mov	r1, r9
   101c0:	f7f0 f828 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   101c4:	f895 3020 	ldrb.w	r3, [r5, #32]
   101c8:	68a4      	ldr	r4, [r4, #8]
   101ca:	9506      	str	r5, [sp, #24]
   101cc:	3307      	adds	r3, #7
   101ce:	b2db      	uxtb	r3, r3
   101d0:	930a      	str	r3, [sp, #40]	; 0x28
   101d2:	f240 439b 	movw	r3, #1179	; 0x49b
   101d6:	9308      	str	r3, [sp, #32]
   101d8:	4b3f      	ldr	r3, [pc, #252]	; (102d8 <__kernel_ram_size+0x2d8>)
   101da:	9307      	str	r3, [sp, #28]
   101dc:	4b3f      	ldr	r3, [pc, #252]	; (102dc <__kernel_ram_size+0x2dc>)
   101de:	9305      	str	r3, [sp, #20]
   101e0:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   101e2:	4a3f      	ldr	r2, [pc, #252]	; (102e0 <__kernel_ram_size+0x2e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   101e4:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   101e6:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   101e8:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   101ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   101ee:	2307      	movs	r3, #7
   101f0:	2100      	movs	r1, #0
   101f2:	4343      	muls	r3, r0
   101f4:	fb02 3301 	mla	r3, r2, r1, r3
   101f8:	fba0 1202 	umull	r1, r2, r0, r2
   101fc:	441a      	add	r2, r3
   101fe:	4608      	mov	r0, r1
   10200:	ebb8 0000 	subs.w	r0, r8, r0
   10204:	4611      	mov	r1, r2
   10206:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1020a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1020c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10210:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10212:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   10214:	f7ef fffe 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   10218:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1021a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   1021c:	a328      	add	r3, pc, #160	; (adr r3, 102c0 <__kernel_ram_size+0x2c0>)
   1021e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10222:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   10226:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1022a:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   1022c:	f7ef fff2 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10230:	eba4 040a 	sub.w	r4, r4, sl
   10234:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10238:	9000      	str	r0, [sp, #0]
   1023a:	4623      	mov	r3, r4
   1023c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1023e:	4629      	mov	r1, r5
   10240:	4628      	mov	r0, r5
   10242:	f7f8 ff91 	bl	9168 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10246:	f030 0302 	bics.w	r3, r0, #2
   1024a:	f43f ad03 	beq.w	fc54 <isr+0x154>
   1024e:	4b25      	ldr	r3, [pc, #148]	; (102e4 <__kernel_ram_size+0x2e4>)
   10250:	9301      	str	r3, [sp, #4]
   10252:	9300      	str	r3, [sp, #0]
   10254:	4b24      	ldr	r3, [pc, #144]	; (102e8 <__kernel_ram_size+0x2e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10256:	4a25      	ldr	r2, [pc, #148]	; (102ec <__kernel_ram_size+0x2ec>)
   10258:	4925      	ldr	r1, [pc, #148]	; (102f0 <__kernel_ram_size+0x2f0>)
   1025a:	4826      	ldr	r0, [pc, #152]	; (102f4 <__kernel_ram_size+0x2f4>)
		LL_ASSERT(0);
   1025c:	f7f0 fe96 	bl	f8c <printk>
   10260:	4040      	eors	r0, r0
   10262:	f380 8811 	msr	BASEPRI, r0
   10266:	f04f 0004 	mov.w	r0, #4
   1026a:	df02      	svc	2
		rl_idx = devmatch_ok ?
   1026c:	f1b9 0f00 	cmp.w	r9, #0
   10270:	d01c      	beq.n	102ac <__kernel_ram_size+0x2ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   10272:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
   10276:	4641      	mov	r1, r8
   10278:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1027c:	f002 fb5c 	bl	12938 <ctrl_rl_idx>
   10280:	4680      	mov	r8, r0
		if (crc_ok &&
   10282:	b147      	cbz	r7, 10296 <__kernel_ram_size+0x296>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   10284:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10288:	06da      	lsls	r2, r3, #27
   1028a:	d535      	bpl.n	102f8 <__kernel_ram_size+0x2f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   1028c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   10290:	06db      	lsls	r3, r3, #27
   10292:	f100 811d 	bmi.w	104d0 <__kernel_ram_size+0x4d0>
			_radio.state = STATE_CLOSE;
   10296:	2303      	movs	r3, #3
   10298:	7523      	strb	r3, [r4, #20]
			radio_disable();
   1029a:	f003 fad7 	bl	1384c <radio_disable>
			_radio.scanner.state = 0;
   1029e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   102a2:	f36f 0341 	bfc	r3, #1, #1
   102a6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   102aa:	e4d3      	b.n	fc54 <isr+0x154>
		rl_idx = devmatch_ok ?
   102ac:	f1ba 0f00 	cmp.w	sl, #0
   102b0:	d003      	beq.n	102ba <__kernel_ram_size+0x2ba>
   102b2:	4658      	mov	r0, fp
   102b4:	f002 fb94 	bl	129e0 <ctrl_rl_irk_idx>
   102b8:	e7e2      	b.n	10280 <__kernel_ram_size+0x280>
   102ba:	f04f 08ff 	mov.w	r8, #255	; 0xff
   102be:	e7e0      	b.n	10282 <__kernel_ram_size+0x282>
   102c0:	1afd498d 	.word	0x1afd498d
   102c4:	00000007 	.word	0x00000007
   102c8:	000199c0 	.word	0x000199c0
   102cc:	000f4240 	.word	0x000f4240
   102d0:	3b9aca00 	.word	0x3b9aca00
   102d4:	0000bfa9 	.word	0x0000bfa9
   102d8:	0000bf6d 	.word	0x0000bf6d
   102dc:	0000e415 	.word	0x0000e415
   102e0:	1afd498d 	.word	0x1afd498d
   102e4:	00015e19 	.word	0x00015e19
   102e8:	0001931d 	.word	0x0001931d
   102ec:	000171f2 	.word	0x000171f2
   102f0:	00017241 	.word	0x00017241
   102f4:	000197a1 	.word	0x000197a1
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   102f8:	f1b9 0f00 	cmp.w	r9, #0
   102fc:	d005      	beq.n	1030a <__kernel_ram_size+0x30a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   102fe:	4641      	mov	r1, r8
   10300:	4650      	mov	r0, sl
   10302:	f002 fcf1 	bl	12ce8 <ctrl_rl_idx_allowed>
   10306:	2800      	cmp	r0, #0
   10308:	d0c0      	beq.n	1028c <__kernel_ram_size+0x28c>
	bool dir_report = false;
   1030a:	2300      	movs	r3, #0
   1030c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   10310:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   10314:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10318:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1031c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   10320:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   10324:	2b00      	cmp	r3, #0
   10326:	f000 80ec 	beq.w	10502 <__kernel_ram_size+0x502>
   1032a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   1032e:	b133      	cbz	r3, 1033e <__kernel_ram_size+0x33e>
				      (_radio.fc_req == _radio.fc_ack)) &&
   10330:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   10334:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   10338:	429a      	cmp	r2, r3
   1033a:	f040 80e2 	bne.w	10502 <__kernel_ram_size+0x502>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   1033e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   10342:	f3c3 1000 	ubfx	r0, r3, #4, #1
   10346:	2800      	cmp	r0, #0
   10348:	f000 80cd 	beq.w	104e6 <__kernel_ram_size+0x4e6>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   1034c:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   10350:	f010 000f 	ands.w	r0, r0, #15
   10354:	f040 814c 	bne.w	105f0 <__kernel_ram_size+0x5f0>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   10358:	f003 fc5c 	bl	13c14 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   1035c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   10360:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   10364:	48b8      	ldr	r0, [pc, #736]	; (10648 <__kernel_ram_size+0x648>)
   10366:	2207      	movs	r2, #7
   10368:	fba3 0100 	umull	r0, r1, r3, r0
   1036c:	fb02 1103 	mla	r1, r2, r3, r1
   10370:	a3b3      	add	r3, pc, #716	; (adr r3, 10640 <__kernel_ram_size+0x640>)
   10372:	e9d3 2300 	ldrd	r2, r3, [r3]
   10376:	f7ef ff4d 	bl	214 <__aeabi_uldivmod>
   1037a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   1037e:	4287      	cmp	r7, r0
   10380:	f080 80bf 	bcs.w	10502 <__kernel_ram_size+0x502>
			node_rx = packet_rx_reserve_get(4);
   10384:	2004      	movs	r0, #4
   10386:	f7fa fe7b 	bl	b080 <packet_rx_reserve_get>
		if (node_rx == 0) {
   1038a:	4607      	mov	r7, r0
   1038c:	2800      	cmp	r0, #0
   1038e:	d082      	beq.n	10296 <__kernel_ram_size+0x296>
		_radio.state = STATE_STOP;
   10390:	2304      	movs	r3, #4
   10392:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
   10394:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
   10396:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
   1039a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1039e:	f003 faab 	bl	138f8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   103a2:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
   103a4:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
   103a8:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   103ac:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   103ae:	f899 3008 	ldrb.w	r3, [r9, #8]
   103b2:	7802      	ldrb	r2, [r0, #0]
   103b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   103b8:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   103bc:	2322      	movs	r3, #34	; 0x22
   103be:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   103c0:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   103c2:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   103c4:	4640      	mov	r0, r8
   103c6:	f002 fa99 	bl	128fc <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   103ca:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   103ce:	4601      	mov	r1, r0
   103d0:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   103d2:	f013 0f01 	tst.w	r3, #1
   103d6:	f810 3b02 	ldrb.w	r3, [r0], #2
   103da:	f000 8114 	beq.w	10606 <__kernel_ram_size+0x606>
   103de:	2900      	cmp	r1, #0
   103e0:	f000 8111 	beq.w	10606 <__kernel_ram_size+0x606>
			pdu_adv_tx->tx_addr = 1;
   103e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   103e8:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   103ea:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   103ec:	f7f1 fc06 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   103f0:	f105 0308 	add.w	r3, r5, #8
   103f4:	4618      	mov	r0, r3
   103f6:	2206      	movs	r2, #6
   103f8:	f109 010a 	add.w	r1, r9, #10
   103fc:	930a      	str	r3, [sp, #40]	; 0x28
   103fe:	f7f1 fbfd 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   10402:	2204      	movs	r2, #4
   10404:	f106 0110 	add.w	r1, r6, #16
   10408:	f105 000e 	add.w	r0, r5, #14
   1040c:	f7f1 fbf6 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   10410:	2203      	movs	r2, #3
   10412:	f106 0114 	add.w	r1, r6, #20
   10416:	f105 0012 	add.w	r0, r5, #18
   1041a:	f7f1 fbef 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   1041e:	2301      	movs	r3, #1
   10420:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   10422:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
   10426:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1042a:	4353      	muls	r3, r2
   1042c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1042e:	f003 fbf1 	bl	13c14 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   10432:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   10434:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
   10438:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1043a:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   1043e:	bfd8      	it	le
   10440:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   10444:	f1bb 0f00 	cmp.w	fp, #0
   10448:	f040 80e8 	bne.w	1061c <__kernel_ram_size+0x61c>
			pdu_adv_tx->connect_ind.win_offset = 0;
   1044c:	f885 b016 	strb.w	fp, [r5, #22]
   10450:	f885 b017 	strb.w	fp, [r5, #23]
   10454:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   10456:	2100      	movs	r1, #0
   10458:	4608      	mov	r0, r1
   1045a:	f003 f9dd 	bl	13818 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   1045e:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   10460:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   10464:	4608      	mov	r0, r1
   10466:	f003 f9dc 	bl	13822 <radio_tx_chain_delay_get>
   1046a:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   1046e:	f100 031e 	add.w	r3, r0, #30
   10472:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
   10474:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   10478:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   1047a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1047e:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   10480:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   10484:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   10486:	f106 0117 	add.w	r1, r6, #23
   1048a:	2205      	movs	r2, #5
   1048c:	f105 001e 	add.w	r0, r5, #30
   10490:	f7f1 fbb4 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
   10494:	7fb2      	ldrb	r2, [r6, #30]
   10496:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1049a:	f362 0304 	bfi	r3, r2, #0, #5
   1049e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   104a2:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
   104a6:	f362 1347 	bfi	r3, r2, #5, #3
   104aa:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   104ae:	f003 fa3d 	bl	1392c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   104b2:	4628      	mov	r0, r5
   104b4:	f003 f9aa 	bl	1380c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   104b8:	f003 f9e6 	bl	13888 <radio_is_ready>
   104bc:	4683      	mov	fp, r0
   104be:	2800      	cmp	r0, #0
   104c0:	f000 80cc 	beq.w	1065c <__kernel_ram_size+0x65c>
		LL_ASSERT(!radio_is_ready());
   104c4:	4b61      	ldr	r3, [pc, #388]	; (1064c <__kernel_ram_size+0x64c>)
   104c6:	9301      	str	r3, [sp, #4]
   104c8:	9300      	str	r3, [sp, #0]
   104ca:	4b61      	ldr	r3, [pc, #388]	; (10650 <__kernel_ram_size+0x650>)
   104cc:	f7ff bb76 	b.w	fbbc <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   104d0:	f1b9 0f00 	cmp.w	r9, #0
   104d4:	f47f af19 	bne.w	1030a <__kernel_ram_size+0x30a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   104d8:	4640      	mov	r0, r8
   104da:	f002 fac7 	bl	12a6c <ctrl_irk_whitelisted>
		if (crc_ok &&
   104de:	2800      	cmp	r0, #0
   104e0:	f43f aed9 	beq.w	10296 <__kernel_ram_size+0x296>
   104e4:	e711      	b.n	1030a <__kernel_ram_size+0x30a>
	if (rl_idx != FILTER_IDX_NONE) {
   104e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   104ea:	d06f      	beq.n	105cc <__kernel_ram_size+0x5cc>
		return (rl_idx == _radio.scanner.rl_idx);
   104ec:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
   104f0:	eba0 0e08 	sub.w	lr, r0, r8
   104f4:	f1de 0000 	rsbs	r0, lr, #0
   104f8:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   104fc:	2800      	cmp	r0, #0
   104fe:	f47f af25 	bne.w	1034c <__kernel_ram_size+0x34c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   10502:	f899 0008 	ldrb.w	r0, [r9, #8]
   10506:	f010 000f 	ands.w	r0, r0, #15
   1050a:	d002      	beq.n	10512 <__kernel_ram_size+0x512>
   1050c:	2806      	cmp	r0, #6
   1050e:	f040 81ac 	bne.w	1086a <__kernel_ram_size+0x86a>
		 (_radio.scanner.type != 0) &&
   10512:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   10516:	071f      	lsls	r7, r3, #28
   10518:	f140 8191 	bpl.w	1083e <__kernel_ram_size+0x83e>
		 (_radio.scanner.type != 0) &&
   1051c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   10520:	2a00      	cmp	r2, #0
   10522:	f040 818c 	bne.w	1083e <__kernel_ram_size+0x83e>
		err = isr_rx_scan_report(rssi_ready,
   10526:	f1ba 0f00 	cmp.w	sl, #0
   1052a:	bf14      	ite	ne
   1052c:	4641      	movne	r1, r8
   1052e:	21ff      	moveq	r1, #255	; 0xff
   10530:	4628      	mov	r0, r5
   10532:	f7fb fca9 	bl	be88 <isr_rx_scan_report>
		if (err) {
   10536:	2800      	cmp	r0, #0
   10538:	f47f aead 	bne.w	10296 <__kernel_ram_size+0x296>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1053c:	f003 f9dc 	bl	138f8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   10540:	7803      	ldrb	r3, [r0, #0]
   10542:	2203      	movs	r2, #3
   10544:	f362 0303 	bfi	r3, r2, #0, #4
   10548:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1054a:	f899 3008 	ldrb.w	r3, [r9, #8]
   1054e:	7802      	ldrb	r2, [r0, #0]
   10550:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10554:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   10558:	230c      	movs	r3, #12
   1055a:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1055c:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1055e:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   10560:	4640      	mov	r0, r8
   10562:	f002 f9cb 	bl	128fc <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   10566:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   1056a:	4601      	mov	r1, r0
   1056c:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   1056e:	f013 0f01 	tst.w	r3, #1
   10572:	f810 3b02 	ldrb.w	r3, [r0], #2
   10576:	f000 8159 	beq.w	1082c <__kernel_ram_size+0x82c>
   1057a:	2900      	cmp	r1, #0
   1057c:	f000 8156 	beq.w	1082c <__kernel_ram_size+0x82c>
			pdu_adv_tx->tx_addr = 1;
   10580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10584:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   10586:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   10588:	f7f1 fb38 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   1058c:	2206      	movs	r2, #6
   1058e:	f109 010a 	add.w	r1, r9, #10
   10592:	f105 0008 	add.w	r0, r5, #8
   10596:	f7f1 fb31 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
   1059a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1059e:	f043 0302 	orr.w	r3, r3, #2
   105a2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
   105a6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   105a8:	2302      	movs	r3, #2
   105aa:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
   105ac:	f003 fa44 	bl	13a38 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   105b0:	2000      	movs	r0, #0
   105b2:	f003 f9a5 	bl	13900 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   105b6:	4628      	mov	r0, r5
   105b8:	f003 f928 	bl	1380c <radio_pkt_tx_set>
		radio_tmr_end_capture();
   105bc:	f003 fb18 	bl	13bf0 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   105c0:	f003 f962 	bl	13888 <radio_is_ready>
   105c4:	2800      	cmp	r0, #0
   105c6:	f43f ab45 	beq.w	fc54 <isr+0x154>
   105ca:	e77b      	b.n	104c4 <__kernel_ram_size+0x4c4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   105cc:	f899 2008 	ldrb.w	r2, [r9, #8]
   105d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   105d4:	f3c2 1280 	ubfx	r2, r2, #6, #1
   105d8:	4293      	cmp	r3, r2
   105da:	d18f      	bne.n	104fc <__kernel_ram_size+0x4fc>
		(memcmp(&_radio.scanner.adv_addr[0],
   105dc:	2206      	movs	r2, #6
   105de:	f109 010a 	add.w	r1, r9, #10
   105e2:	481c      	ldr	r0, [pc, #112]	; (10654 <__kernel_ram_size+0x654>)
   105e4:	f7f1 faf5 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   105e8:	fab0 f080 	clz	r0, r0
   105ec:	0940      	lsrs	r0, r0, #5
   105ee:	e785      	b.n	104fc <__kernel_ram_size+0x4fc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   105f0:	2801      	cmp	r0, #1
   105f2:	d18b      	bne.n	1050c <__kernel_ram_size+0x50c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   105f4:	2300      	movs	r3, #0
   105f6:	4642      	mov	r2, r8
   105f8:	4631      	mov	r1, r6
   105fa:	f7fb fbf9 	bl	bdf0 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   105fe:	2800      	cmp	r0, #0
   10600:	f43f af7f 	beq.w	10502 <__kernel_ram_size+0x502>
   10604:	e6a8      	b.n	10358 <__kernel_ram_size+0x358>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   10606:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   1060a:	4913      	ldr	r1, [pc, #76]	; (10658 <__kernel_ram_size+0x658>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   1060c:	09d2      	lsrs	r2, r2, #7
   1060e:	f362 1386 	bfi	r3, r2, #6, #1
   10612:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   10614:	2206      	movs	r2, #6
   10616:	e6e9      	b.n	103ec <__kernel_ram_size+0x3ec>
				conn_space_us += conn_interval_us;
   10618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1061a:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   1061c:	f1bb 0f00 	cmp.w	fp, #0
   10620:	dbfa      	blt.n	10618 <__kernel_ram_size+0x618>
   10622:	459b      	cmp	fp, r3
   10624:	d3f8      	bcc.n	10618 <__kernel_ram_size+0x618>
				(conn_space_us - conn_offset_us) / 1250;
   10626:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
   1062a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1062e:	fbb3 f3f2 	udiv	r3, r3, r2
   10632:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   10634:	7d6b      	ldrb	r3, [r5, #21]
   10636:	3301      	adds	r3, #1
   10638:	756b      	strb	r3, [r5, #21]
   1063a:	e70c      	b.n	10456 <__kernel_ram_size+0x456>
   1063c:	f3af 8000 	nop.w
   10640:	3b9aca00 	.word	0x3b9aca00
   10644:	00000000 	.word	0x00000000
   10648:	1afd498d 	.word	0x1afd498d
   1064c:	00015e19 	.word	0x00015e19
   10650:	0001933b 	.word	0x0001933b
   10654:	200009d2 	.word	0x200009d2
   10658:	200009cc 	.word	0x200009cc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1065c:	f44f 72aa 	mov.w	r2, #340	; 0x154
   10660:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   10664:	4630      	mov	r0, r6
   10666:	f7f7 ff2e 	bl	84c6 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   1066a:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1066c:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1066e:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   10672:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
   10676:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1067a:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   1067c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   10680:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   10682:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10686:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   10688:	2206      	movs	r2, #6
   1068a:	f107 001b 	add.w	r0, r7, #27
   1068e:	f7f1 fab5 	bl	1bfc <memcpy>
   10692:	f107 0b0e 	add.w	fp, r7, #14
   10696:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   1069a:	f1ba 0f00 	cmp.w	sl, #0
   1069e:	d032      	beq.n	10706 <__kernel_ram_size+0x706>
   106a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   106a4:	d02f      	beq.n	10706 <__kernel_ram_size+0x706>
			ll_rl_id_addr_get(rl_idx,
   106a6:	465a      	mov	r2, fp
   106a8:	f107 010d 	add.w	r1, r7, #13
   106ac:	4640      	mov	r0, r8
   106ae:	930d      	str	r3, [sp, #52]	; 0x34
   106b0:	f002 fb4e 	bl	12d50 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   106b4:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   106b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   106b8:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   106ba:	3202      	adds	r2, #2
   106bc:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   106be:	4618      	mov	r0, r3
   106c0:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   106c2:	f7f1 fa9b 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   106c6:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   106ca:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   106ce:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   106d2:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   106d6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   106da:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
   106de:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   106e2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   106e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
   106ea:	8c30      	ldrh	r0, [r6, #32]
   106ec:	f7fb fc24 	bl	bf38 <rx_fc_lock>
		packet_rx_enqueue();
   106f0:	f7fb fb32 	bl	bd58 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   106f4:	2003      	movs	r0, #3
   106f6:	f7fa fcc3 	bl	b080 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   106fa:	b988      	cbnz	r0, 10720 <__kernel_ram_size+0x720>
   106fc:	4bba      	ldr	r3, [pc, #744]	; (109e8 <__kernel_ram_size+0x9e8>)
   106fe:	9301      	str	r3, [sp, #4]
   10700:	9300      	str	r3, [sp, #0]
   10702:	4bba      	ldr	r3, [pc, #744]	; (109ec <__kernel_ram_size+0x9ec>)
   10704:	e474      	b.n	fff0 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   10706:	2206      	movs	r2, #6
   10708:	2100      	movs	r1, #0
   1070a:	4618      	mov	r0, r3
   1070c:	f7f1 faa2 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
   10710:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   10712:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   10714:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   10718:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1071a:	2206      	movs	r2, #6
   1071c:	4658      	mov	r0, fp
   1071e:	e7d0      	b.n	106c2 <__kernel_ram_size+0x6c2>
			node_rx->hdr.handle = conn->handle;
   10720:	8c33      	ldrh	r3, [r6, #32]
   10722:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   10724:	230b      	movs	r3, #11
   10726:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
   10728:	f899 3008 	ldrb.w	r3, [r9, #8]
   1072c:	f013 0320 	ands.w	r3, r3, #32
   10730:	d00e      	beq.n	10750 <__kernel_ram_size+0x750>
					((u16_t)conn->access_addr[1] << 8) |
   10732:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   10734:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   10736:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   10738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   1073c:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   1073e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   10742:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   10744:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   10746:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   1074a:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   1074c:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   1074e:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   10750:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   10752:	f7fb fb01 	bl	bd58 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   10756:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   10758:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   1075c:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   1075e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   10762:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   10764:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10766:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   1076a:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1076c:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1076e:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   10772:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10774:	4629      	mov	r1, r5
   10776:	9300      	str	r3, [sp, #0]
   10778:	4628      	mov	r0, r5
   1077a:	4b9d      	ldr	r3, [pc, #628]	; (109f0 <__kernel_ram_size+0x9f0>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1077c:	f8df a284 	ldr.w	sl, [pc, #644]	; 10a04 <__kernel_ram_size+0xa04>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   10780:	bf38      	it	cc
   10782:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10784:	f7f8 fd8e 	bl	92a4 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   10788:	f240 6139 	movw	r1, #1593	; 0x639
   1078c:	f7fb fc40 	bl	c010 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10790:	462b      	mov	r3, r5
   10792:	2204      	movs	r2, #4
   10794:	4629      	mov	r1, r5
   10796:	9500      	str	r5, [sp, #0]
   10798:	4628      	mov	r0, r5
   1079a:	f7f8 fd83 	bl	92a4 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1079e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   107a0:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   107a4:	68a3      	ldr	r3, [r4, #8]
   107a6:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
   107aa:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   107ac:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   107b0:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   107b4:	9308      	str	r3, [sp, #32]
   107b6:	4b8f      	ldr	r3, [pc, #572]	; (109f4 <__kernel_ram_size+0x9f4>)
   107b8:	9307      	str	r3, [sp, #28]
   107ba:	4b8f      	ldr	r3, [pc, #572]	; (109f8 <__kernel_ram_size+0x9f8>)
   107bc:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   107be:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
   107c0:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   107c2:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   107c4:	4640      	mov	r0, r8
   107c6:	a386      	add	r3, pc, #536	; (adr r3, 109e0 <__kernel_ram_size+0x9e0>)
   107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   107cc:	4649      	mov	r1, r9
		ticker_status =
   107ce:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   107d0:	f7ef fd20 	bl	214 <__aeabi_uldivmod>
   107d4:	4610      	mov	r0, r2
   107d6:	4619      	mov	r1, r3
   107d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107dc:	2300      	movs	r3, #0
   107de:	f7ef fd19 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   107e2:	a37f      	add	r3, pc, #508	; (adr r3, 109e0 <__kernel_ram_size+0x9e0>)
   107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   107e8:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   107ea:	4649      	mov	r1, r9
   107ec:	4640      	mov	r0, r8
   107ee:	f7ef fd11 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   107f2:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   107f4:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   107f6:	a37a      	add	r3, pc, #488	; (adr r3, 109e0 <__kernel_ram_size+0x9e0>)
   107f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   107fc:	fba1 010a 	umull	r0, r1, r1, sl
   10800:	f7ef fd08 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10804:	3407      	adds	r4, #7
   10806:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   1080a:	b2e4      	uxtb	r4, r4
   1080c:	9000      	str	r0, [sp, #0]
   1080e:	465b      	mov	r3, fp
   10810:	4622      	mov	r2, r4
   10812:	4629      	mov	r1, r5
   10814:	4628      	mov	r0, r5
   10816:	f7f8 fca7 	bl	9168 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1081a:	f030 0302 	bics.w	r3, r0, #2
   1081e:	f43f aa19 	beq.w	fc54 <isr+0x154>
   10822:	4b71      	ldr	r3, [pc, #452]	; (109e8 <__kernel_ram_size+0x9e8>)
   10824:	9301      	str	r3, [sp, #4]
   10826:	9300      	str	r3, [sp, #0]
   10828:	4b70      	ldr	r3, [pc, #448]	; (109ec <__kernel_ram_size+0x9ec>)
   1082a:	e514      	b.n	10256 <__kernel_ram_size+0x256>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   1082c:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   10830:	4972      	ldr	r1, [pc, #456]	; (109fc <__kernel_ram_size+0x9fc>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   10832:	09d2      	lsrs	r2, r2, #7
   10834:	f362 1386 	bfi	r3, r2, #6, #1
   10838:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   1083a:	2206      	movs	r2, #6
   1083c:	e6a4      	b.n	10588 <__kernel_ram_size+0x588>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1083e:	b9a0      	cbnz	r0, 1086a <__kernel_ram_size+0x86a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   10840:	f899 3009 	ldrb.w	r3, [r9, #9]
   10844:	2b00      	cmp	r3, #0
   10846:	f43f ad26 	beq.w	10296 <__kernel_ram_size+0x296>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   1084a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1084e:	2b00      	cmp	r3, #0
   10850:	f47f ad21 	bne.w	10296 <__kernel_ram_size+0x296>
		err = isr_rx_scan_report(rssi_ready,
   10854:	f1ba 0f00 	cmp.w	sl, #0
   10858:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1085c:	bf14      	ite	ne
   1085e:	4641      	movne	r1, r8
   10860:	21ff      	moveq	r1, #255	; 0xff
   10862:	4628      	mov	r0, r5
   10864:	f7fb fb10 	bl	be88 <isr_rx_scan_report>
   10868:	e515      	b.n	10296 <__kernel_ram_size+0x296>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1086a:	2801      	cmp	r0, #1
   1086c:	d00e      	beq.n	1088c <__kernel_ram_size+0x88c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1086e:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
   10872:	f003 020b 	and.w	r2, r3, #11
   10876:	2a02      	cmp	r2, #2
   10878:	d0e2      	beq.n	10840 <__kernel_ram_size+0x840>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1087a:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   1087e:	2b07      	cmp	r3, #7
   10880:	d10d      	bne.n	1089e <__kernel_ram_size+0x89e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   10882:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10886:	0758      	lsls	r0, r3, #29
   10888:	d1da      	bne.n	10840 <__kernel_ram_size+0x840>
   1088a:	e504      	b.n	10296 <__kernel_ram_size+0x296>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   1088c:	ab10      	add	r3, sp, #64	; 0x40
   1088e:	4642      	mov	r2, r8
   10890:	4631      	mov	r1, r6
   10892:	2000      	movs	r0, #0
   10894:	f7fb faac 	bl	bdf0 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   10898:	2800      	cmp	r0, #0
   1089a:	d1d1      	bne.n	10840 <__kernel_ram_size+0x840>
   1089c:	e7e7      	b.n	1086e <__kernel_ram_size+0x86e>
		   (_radio.scanner.phy)) ||
   1089e:	2b04      	cmp	r3, #4
   108a0:	f47f acf9 	bne.w	10296 <__kernel_ram_size+0x296>
		   (_radio.scanner.state != 0) &&
   108a4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   108a8:	0799      	lsls	r1, r3, #30
   108aa:	f57f acf4 	bpl.w	10296 <__kernel_ram_size+0x296>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   108ae:	f003 f823 	bl	138f8 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   108b2:	f899 3008 	ldrb.w	r3, [r9, #8]
   108b6:	7802      	ldrb	r2, [r0, #0]
   108b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   108bc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   108c0:	f47f ace9 	bne.w	10296 <__kernel_ram_size+0x296>
		(memcmp(&sreq->scan_req.adv_addr[0],
   108c4:	2206      	movs	r2, #6
   108c6:	f109 010a 	add.w	r1, r9, #10
   108ca:	3008      	adds	r0, #8
   108cc:	f7f1 f981 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
   108d0:	2800      	cmp	r0, #0
   108d2:	d0b5      	beq.n	10840 <__kernel_ram_size+0x840>
   108d4:	e4df      	b.n	10296 <__kernel_ram_size+0x296>
	_radio.packet_counter++;
   108d6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   108da:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
   108de:	3301      	adds	r3, #1
   108e0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
   108e4:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   108e6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
   108ea:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   108ee:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   108f2:	2301      	movs	r3, #1
   108f4:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   108f8:	2f00      	cmp	r7, #0
   108fa:	f000 82d2 	beq.w	10ea2 <__kernel_ram_size+0xea2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   108fe:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   10902:	f898 1008 	ldrb.w	r1, [r8, #8]
   10906:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1090a:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1090e:	f003 0201 	and.w	r2, r3, #1
   10912:	4291      	cmp	r1, r2
   10914:	f000 819e 	beq.w	10c54 <__kernel_ram_size+0xc54>
		_radio.conn_curr->sn++;
   10918:	f082 0201 	eor.w	r2, r2, #1
   1091c:	f362 0300 	bfi	r3, r2, #0, #1
   10920:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   10924:	7ce3      	ldrb	r3, [r4, #19]
   10926:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   10928:	bf02      	ittt	eq
   1092a:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   1092e:	f043 0301 	orreq.w	r3, r3, #1
   10932:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   10936:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1093a:	061a      	lsls	r2, r3, #24
   1093c:	f100 8185 	bmi.w	10c4a <__kernel_ram_size+0xc4a>
			node_tx = _radio.conn_curr->pkt_tx_head;
   10940:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   10944:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   10948:	1d30      	adds	r0, r6, #4
   1094a:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   1094e:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   10952:	f1b9 0f00 	cmp.w	r9, #0
   10956:	f000 80ab 	beq.w	10ab0 <__kernel_ram_size+0xab0>
				if (_radio.conn_curr->enc_tx) {
   1095a:	069b      	lsls	r3, r3, #26
   1095c:	d50b      	bpl.n	10976 <__kernel_ram_size+0x976>
					_radio.conn_curr->ccm_tx.counter++;
   1095e:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   10962:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   10966:	f11b 0201 	adds.w	r2, fp, #1
   1096a:	f14c 0300 	adc.w	r3, ip, #0
   1096e:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   10972:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   10976:	5c43      	ldrb	r3, [r0, r1]
   10978:	f003 0303 	and.w	r3, r3, #3
   1097c:	2b03      	cmp	r3, #3
   1097e:	f040 8097 	bne.w	10ab0 <__kernel_ram_size+0xab0>
	switch (pdu_data_tx->llctrl.opcode) {
   10982:	f89a 3003 	ldrb.w	r3, [sl, #3]
   10986:	3b02      	subs	r3, #2
   10988:	2b16      	cmp	r3, #22
   1098a:	f200 8091 	bhi.w	10ab0 <__kernel_ram_size+0xab0>
   1098e:	e8df f013 	tbh	[pc, r3, lsl #1]
   10992:	0017      	.short	0x0017
   10994:	00c50073 	.word	0x00c50073
   10998:	008f008f 	.word	0x008f008f
   1099c:	008f008f 	.word	0x008f008f
   109a0:	0091008f 	.word	0x0091008f
   109a4:	008f009c 	.word	0x008f009c
   109a8:	008f00cc 	.word	0x008f00cc
   109ac:	008f008f 	.word	0x008f008f
   109b0:	008f008f 	.word	0x008f008f
   109b4:	00d6008f 	.word	0x00d6008f
   109b8:	00ee008f 	.word	0x00ee008f
   109bc:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
   109c0:	2303      	movs	r3, #3
   109c2:	7523      	strb	r3, [r4, #20]
		radio_disable();
   109c4:	f002 ff42 	bl	1384c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   109c8:	f002 ff5e 	bl	13888 <radio_is_ready>
   109cc:	b1e0      	cbz	r0, 10a08 <__kernel_ram_size+0xa08>
   109ce:	4b06      	ldr	r3, [pc, #24]	; (109e8 <__kernel_ram_size+0x9e8>)
   109d0:	9301      	str	r3, [sp, #4]
   109d2:	9300      	str	r3, [sp, #0]
   109d4:	4b0a      	ldr	r3, [pc, #40]	; (10a00 <__kernel_ram_size+0xa00>)
   109d6:	f7ff b8f1 	b.w	fbbc <isr+0xbc>
   109da:	bf00      	nop
   109dc:	f3af 8000 	nop.w
   109e0:	1afd498d 	.word	0x1afd498d
   109e4:	00000007 	.word	0x00000007
   109e8:	00015e19 	.word	0x00015e19
   109ec:	0001933b 	.word	0x0001933b
   109f0:	0000c011 	.word	0x0000c011
   109f4:	0000bf6d 	.word	0x0000bf6d
   109f8:	0000e411 	.word	0x0000e411
   109fc:	200009cc 	.word	0x200009cc
   10a00:	00019347 	.word	0x00019347
   10a04:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   10a08:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   10a0c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10a10:	2913      	cmp	r1, #19
   10a12:	bf08      	it	eq
   10a14:	2116      	moveq	r1, #22
   10a16:	f7fb fee3 	bl	c7e0 <terminate_ind_rx_enqueue>
		terminate = 1;
   10a1a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   10a1c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10a20:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   10a24:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   10a26:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   10a2a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   10a2e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   10a30:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   10a34:	d11e      	bne.n	10a74 <__kernel_ram_size+0xa74>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   10a36:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   10a3a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   10a3e:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   10a40:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   10a42:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   10a46:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   10a4a:	f040 80c9 	bne.w	10be0 <__kernel_ram_size+0xbe0>
		if (node_tx) {
   10a4e:	b18e      	cbz	r6, 10a74 <__kernel_ram_size+0xa74>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   10a50:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   10a54:	f8d3 e000 	ldr.w	lr, [r3]
   10a58:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   10a5c:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   10a5e:	bf06      	itte	eq
   10a60:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   10a64:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   10a68:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   10a6c:	49cd      	ldr	r1, [pc, #820]	; (10da4 <__kernel_ram_size+0xda4>)
   10a6e:	4630      	mov	r0, r6
   10a70:	f7f7 fd0b 	bl	848a <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   10a74:	2600      	movs	r6, #0
   10a76:	e0bc      	b.n	10bf2 <__kernel_ram_size+0xbf2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   10a78:	2208      	movs	r2, #8
   10a7a:	f10a 010e 	add.w	r1, sl, #14
   10a7e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10a82:	f7f1 f8bb 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   10a86:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10a8a:	2204      	movs	r2, #4
   10a8c:	f10a 0116 	add.w	r1, sl, #22
   10a90:	f500 7089 	add.w	r0, r0, #274	; 0x112
   10a94:	f7f1 f8b2 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
   10a98:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10a9c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10aa0:	f042 0208 	orr.w	r2, r2, #8
   10aa4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   10aa8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   10aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   10ab0:	2500      	movs	r5, #0
   10ab2:	e7b3      	b.n	10a1c <__kernel_ram_size+0xa1c>
		_radio.conn_curr->pause_tx = 1;
   10ab4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   10ab8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   10abc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   10ac0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   10ac4:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   10ac8:	e7f2      	b.n	10ab0 <__kernel_ram_size+0xab0>
		if (_radio.role == ROLE_MASTER) {
   10aca:	f894 a013 	ldrb.w	sl, [r4, #19]
   10ace:	fa5f fa8a 	uxtb.w	sl, sl
   10ad2:	f1ba 0f04 	cmp.w	sl, #4
   10ad6:	d121      	bne.n	10b1c <__kernel_ram_size+0xb1c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10ad8:	7933      	ldrb	r3, [r6, #4]
   10ada:	f043 0303 	orr.w	r3, r3, #3
   10ade:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   10ae0:	2317      	movs	r3, #23
   10ae2:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   10ae4:	2303      	movs	r3, #3
   10ae6:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   10ae8:	2208      	movs	r2, #8
   10aea:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   10aee:	3004      	adds	r0, #4
   10af0:	f7f1 f884 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   10af4:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   10af8:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   10afa:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   10afe:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   10b00:	f106 0112 	add.w	r1, r6, #18
   10b04:	2208      	movs	r2, #8
   10b06:	6860      	ldr	r0, [r4, #4]
   10b08:	f003 fecc 	bl	148a4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   10b0c:	f106 011a 	add.w	r1, r6, #26
   10b10:	4652      	mov	r2, sl
   10b12:	6860      	ldr	r0, [r4, #4]
   10b14:	f003 fec6 	bl	148a4 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
   10b18:	2600      	movs	r6, #0
   10b1a:	e7c9      	b.n	10ab0 <__kernel_ram_size+0xab0>
			_radio.conn_curr->pause_tx = 1;
   10b1c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   10b20:	f043 0308 	orr.w	r3, r3, #8
   10b24:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   10b28:	e7c2      	b.n	10ab0 <__kernel_ram_size+0xab0>
		_radio.conn_curr->pause_rx = 0;
   10b2a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   10b2e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   10b32:	f36f 03c3 	bfc	r3, #3, #1
   10b36:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   10b3a:	2300      	movs	r3, #0
   10b3c:	e7c2      	b.n	10ac4 <__kernel_ram_size+0xac4>
		if ((_radio.conn_curr->llcp_length.req !=
   10b3e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   10b42:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   10b46:	429a      	cmp	r2, r3
   10b48:	d0b2      	beq.n	10ab0 <__kernel_ram_size+0xab0>
		    (_radio.conn_curr->llcp_length.state ==
   10b4a:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   10b4e:	f003 0203 	and.w	r2, r3, #3
   10b52:	2a01      	cmp	r2, #1
   10b54:	d1ac      	bne.n	10ab0 <__kernel_ram_size+0xab0>
			_radio.conn_curr->pause_tx = 1;
   10b56:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   10b5a:	f042 0208 	orr.w	r2, r2, #8
   10b5e:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   10b62:	2202      	movs	r2, #2
   10b64:	f362 0301 	bfi	r3, r2, #0, #2
   10b68:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   10b6c:	e7a0      	b.n	10ab0 <__kernel_ram_size+0xab0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   10b6e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   10b72:	2202      	movs	r2, #2
   10b74:	f362 0301 	bfi	r3, r2, #0, #2
   10b78:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   10b7c:	7ce3      	ldrb	r3, [r4, #19]
   10b7e:	2b03      	cmp	r3, #3
   10b80:	d196      	bne.n	10ab0 <__kernel_ram_size+0xab0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   10b82:	2301      	movs	r3, #1
   10b84:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   10b88:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   10b8c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10b90:	2202      	movs	r2, #2
   10b92:	2304      	movs	r3, #4
   10b94:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   10b98:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   10b9c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   10ba0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   10ba4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   10ba8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   10bac:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   10bb0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10bb4:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   10bb8:	f003 0307 	and.w	r3, r3, #7
   10bbc:	aa12      	add	r2, sp, #72	; 0x48
   10bbe:	4413      	add	r3, r2
   10bc0:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   10bc4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   10bc8:	f363 0202 	bfi	r2, r3, #0, #3
   10bcc:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   10bd0:	e76e      	b.n	10ab0 <__kernel_ram_size+0xab0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   10bd2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   10bd6:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   10bda:	f3c3 0382 	ubfx	r3, r3, #2, #3
   10bde:	e7f3      	b.n	10bc8 <__kernel_ram_size+0xbc8>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   10be0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   10be4:	4293      	cmp	r3, r2
   10be6:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   10be8:	bf08      	it	eq
   10bea:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   10bee:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   10bf2:	b37d      	cbz	r5, 10c54 <__kernel_ram_size+0xc54>
		connection_release(_radio.conn_curr);
   10bf4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10bf8:	f7fb fc40 	bl	c47c <connection_release>
		_radio.conn_curr = NULL;
   10bfc:	2300      	movs	r3, #0
   10bfe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
   10c02:	f002 ffe9 	bl	13bd8 <radio_tmr_aa_restore>
   10c06:	b918      	cbnz	r0, 10c10 <__kernel_ram_size+0xc10>
		radio_tmr_aa_save(radio_tmr_aa_get());
   10c08:	f002 ffda 	bl	13bc0 <radio_tmr_aa_get>
   10c0c:	f002 ffde 	bl	13bcc <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   10c10:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10c14:	2b00      	cmp	r3, #0
   10c16:	f43f a81d 	beq.w	fc54 <isr+0x154>
	if (tx_release) {
   10c1a:	b11e      	cbz	r6, 10c24 <__kernel_ram_size+0xc24>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   10c1c:	4631      	mov	r1, r6
   10c1e:	8c18      	ldrh	r0, [r3, #32]
   10c20:	f7fb fba2 	bl	c368 <pdu_node_tx_release>
	if (rx_enqueue) {
   10c24:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   10c28:	2b00      	cmp	r3, #0
   10c2a:	f43f a813 	beq.w	fc54 <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
   10c2e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10c32:	8c18      	ldrh	r0, [r3, #32]
   10c34:	f7fb f980 	bl	bf38 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   10c38:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10c3c:	8c1b      	ldrh	r3, [r3, #32]
   10c3e:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   10c42:	f7fb f889 	bl	bd58 <packet_rx_enqueue>
   10c46:	f7ff b805 	b.w	fc54 <isr+0x154>
			_radio.conn_curr->empty = 0;
   10c4a:	f36f 13c7 	bfc	r3, #7, #1
   10c4e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   10c52:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   10c54:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10c58:	f898 2008 	ldrb.w	r2, [r8, #8]
   10c5c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   10c60:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10c64:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10c68:	429a      	cmp	r2, r3
   10c6a:	f040 80e9 	bne.w	10e40 <__kernel_ram_size+0xe40>
	    (packet_rx_reserve_get(3) != 0) &&
   10c6e:	2003      	movs	r0, #3
   10c70:	f7fa fa06 	bl	b080 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   10c74:	2800      	cmp	r0, #0
   10c76:	f000 80e3 	beq.w	10e40 <__kernel_ram_size+0xe40>
	    (packet_rx_reserve_get(3) != 0) &&
   10c7a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   10c7e:	b393      	cbz	r3, 10ce6 <__kernel_ram_size+0xce6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10c80:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   10c84:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
   10c88:	4293      	cmp	r3, r2
   10c8a:	d105      	bne.n	10c98 <__kernel_ram_size+0xc98>
	      (_radio.fc_req == _radio.fc_ack)) ||
   10c8c:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10c90:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
   10c94:	4291      	cmp	r1, r2
   10c96:	d026      	beq.n	10ce6 <__kernel_ram_size+0xce6>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10c98:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
   10c9c:	4293      	cmp	r3, r2
   10c9e:	f000 80cf 	beq.w	10e40 <__kernel_ram_size+0xe40>
	      (_radio.fc_req != _radio.fc_ack) &&
   10ca2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10ca6:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   10caa:	429a      	cmp	r2, r3
   10cac:	f000 80c8 	beq.w	10e40 <__kernel_ram_size+0xe40>
		(((_radio.fc_req == 0) &&
   10cb0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
   10cb4:	b933      	cbnz	r3, 10cc4 <__kernel_ram_size+0xcc4>
		   _radio.conn_curr->handle)) ||
   10cb6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
   10cba:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   10cbe:	8c1b      	ldrh	r3, [r3, #32]
   10cc0:	429a      	cmp	r2, r3
   10cc2:	d010      	beq.n	10ce6 <__kernel_ram_size+0xce6>
		 ((_radio.fc_req != 0) &&
   10cc4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
   10cc8:	2b00      	cmp	r3, #0
   10cca:	f000 80b9 	beq.w	10e40 <__kernel_ram_size+0xe40>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   10cce:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
   10cd2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   10cd6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   10cda:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
   10cde:	8c0b      	ldrh	r3, [r1, #32]
   10ce0:	429a      	cmp	r2, r3
   10ce2:	f040 80ad 	bne.w	10e40 <__kernel_ram_size+0xe40>
		if (pdu_data_rx->len != 0) {
   10ce6:	f898 5009 	ldrb.w	r5, [r8, #9]
   10cea:	2d00      	cmp	r5, #0
   10cec:	f000 80b1 	beq.w	10e52 <__kernel_ram_size+0xe52>
			if (_radio.conn_curr->enc_rx) {
   10cf0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10cf4:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   10cf8:	f015 0510 	ands.w	r5, r5, #16
   10cfc:	d00c      	beq.n	10d18 <__kernel_ram_size+0xd18>
				done = radio_ccm_is_done();
   10cfe:	f002 fff7 	bl	13cf0 <radio_ccm_is_done>
				LL_ASSERT(done);
   10d02:	b940      	cbnz	r0, 10d16 <__kernel_ram_size+0xd16>
   10d04:	4b28      	ldr	r3, [pc, #160]	; (10da8 <__kernel_ram_size+0xda8>)
   10d06:	9301      	str	r3, [sp, #4]
   10d08:	9300      	str	r3, [sp, #0]
   10d0a:	4a28      	ldr	r2, [pc, #160]	; (10dac <__kernel_ram_size+0xdac>)
   10d0c:	4b28      	ldr	r3, [pc, #160]	; (10db0 <__kernel_ram_size+0xdb0>)
   10d0e:	4929      	ldr	r1, [pc, #164]	; (10db4 <__kernel_ram_size+0xdb4>)
   10d10:	4829      	ldr	r0, [pc, #164]	; (10db8 <__kernel_ram_size+0xdb8>)
   10d12:	f7ff baa3 	b.w	1025c <__kernel_ram_size+0x25c>
				ccm_rx_increment = 1;
   10d16:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   10d18:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10d1c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   10d20:	06d9      	lsls	r1, r3, #27
   10d22:	d42c      	bmi.n	10d7e <__kernel_ram_size+0xd7e>
			    (_radio.conn_curr->pause_rx &&
   10d24:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10d28:	f898 3008 	ldrb.w	r3, [r8, #8]
   10d2c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   10d30:	f012 0f04 	tst.w	r2, #4
   10d34:	d142      	bne.n	10dbc <__kernel_ram_size+0xdbc>
			_radio.conn_curr->appto_expire = 0;
   10d36:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   10d38:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   10d3c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   10d40:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   10d44:	d004      	beq.n	10d50 <__kernel_ram_size+0xd50>
   10d46:	2b02      	cmp	r3, #2
   10d48:	d873      	bhi.n	10e32 <__kernel_ram_size+0xe32>
				*rx_enqueue = 1;
   10d4a:	2301      	movs	r3, #1
   10d4c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   10d50:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10d54:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10d58:	f082 0202 	eor.w	r2, r2, #2
   10d5c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   10d60:	2d00      	cmp	r5, #0
   10d62:	d06d      	beq.n	10e40 <__kernel_ram_size+0xe40>
				_radio.conn_curr->ccm_rx.counter++;
   10d64:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   10d68:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   10d6c:	f119 0001 	adds.w	r0, r9, #1
   10d70:	f14a 0100 	adc.w	r1, sl, #0
   10d74:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   10d78:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   10d7c:	e060      	b.n	10e40 <__kernel_ram_size+0xe40>
			     !radio_ccm_mic_is_valid()) ||
   10d7e:	f002 ffd5 	bl	13d2c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   10d82:	2800      	cmp	r0, #0
   10d84:	d1ce      	bne.n	10d24 <__kernel_ram_size+0xd24>
				_radio.state = STATE_CLOSE;
   10d86:	2303      	movs	r3, #3
   10d88:	7523      	strb	r3, [r4, #20]
				radio_disable();
   10d8a:	f002 fd5f 	bl	1384c <radio_disable>
				LL_ASSERT(!radio_is_ready());
   10d8e:	f002 fd7b 	bl	13888 <radio_is_ready>
   10d92:	4605      	mov	r5, r0
   10d94:	2800      	cmp	r0, #0
   10d96:	d040      	beq.n	10e1a <__kernel_ram_size+0xe1a>
   10d98:	4b03      	ldr	r3, [pc, #12]	; (10da8 <__kernel_ram_size+0xda8>)
   10d9a:	9301      	str	r3, [sp, #4]
   10d9c:	9300      	str	r3, [sp, #0]
   10d9e:	4b04      	ldr	r3, [pc, #16]	; (10db0 <__kernel_ram_size+0xdb0>)
   10da0:	f7fe bf0c 	b.w	fbbc <isr+0xbc>
   10da4:	20000a44 	.word	0x20000a44
   10da8:	00015e19 	.word	0x00015e19
   10dac:	000171f2 	.word	0x000171f2
   10db0:	000193ab 	.word	0x000193ab
   10db4:	00017241 	.word	0x00017241
   10db8:	00019a03 	.word	0x00019a03
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   10dbc:	f003 0103 	and.w	r1, r3, #3
   10dc0:	2903      	cmp	r1, #3
   10dc2:	d1e0      	bne.n	10d86 <__kernel_ram_size+0xd86>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   10dc4:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   10dc8:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   10dcc:	f1be 0f00 	cmp.w	lr, #0
   10dd0:	f002 0240 	and.w	r2, r2, #64	; 0x40
   10dd4:	db15      	blt.n	10e02 <__kernel_ram_size+0xe02>
	       (!conn->role &&
   10dd6:	b922      	cbnz	r2, 10de2 <__kernel_ram_size+0xde2>
		((!conn->refresh &&
   10dd8:	2902      	cmp	r1, #2
   10dda:	d0ac      	beq.n	10d36 <__kernel_ram_size+0xd36>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10ddc:	2911      	cmp	r1, #17
   10dde:	d8d2      	bhi.n	10d86 <__kernel_ram_size+0xd86>
   10de0:	e009      	b.n	10df6 <__kernel_ram_size+0xdf6>
		 (conn->refresh &&
   10de2:	1e8a      	subs	r2, r1, #2
   10de4:	b2d2      	uxtb	r2, r2
   10de6:	2a09      	cmp	r2, #9
   10de8:	d8f8      	bhi.n	10ddc <__kernel_ram_size+0xddc>
   10dea:	f240 2e05 	movw	lr, #517	; 0x205
   10dee:	fa2e f202 	lsr.w	r2, lr, r2
   10df2:	07d2      	lsls	r2, r2, #31
   10df4:	d49f      	bmi.n	10d36 <__kernel_ram_size+0xd36>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10df6:	4aac      	ldr	r2, [pc, #688]	; (110a8 <__kernel_ram_size+0x10a8>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10df8:	fa22 f101 	lsr.w	r1, r2, r1
   10dfc:	07ca      	lsls	r2, r1, #31
   10dfe:	d5c2      	bpl.n	10d86 <__kernel_ram_size+0xd86>
   10e00:	e799      	b.n	10d36 <__kernel_ram_size+0xd36>
	       (conn->role &&
   10e02:	b92a      	cbnz	r2, 10e10 <__kernel_ram_size+0xe10>
		((!conn->refresh &&
   10e04:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10e06:	d096      	beq.n	10d36 <__kernel_ram_size+0xd36>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10e08:	2911      	cmp	r1, #17
   10e0a:	d8bc      	bhi.n	10d86 <__kernel_ram_size+0xd86>
   10e0c:	4aa7      	ldr	r2, [pc, #668]	; (110ac <__kernel_ram_size+0x10ac>)
   10e0e:	e7f3      	b.n	10df8 <__kernel_ram_size+0xdf8>
		 (conn->refresh &&
   10e10:	1e8a      	subs	r2, r1, #2
   10e12:	2a01      	cmp	r2, #1
   10e14:	d98f      	bls.n	10d36 <__kernel_ram_size+0xd36>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10e16:	290b      	cmp	r1, #11
   10e18:	e7f5      	b.n	10e06 <__kernel_ram_size+0xe06>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   10e1a:	213d      	movs	r1, #61	; 0x3d
   10e1c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10e20:	f7fb fcde 	bl	c7e0 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   10e24:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10e28:	f7fb fb28 	bl	c47c <connection_release>
				_radio.conn_curr = NULL;
   10e2c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   10e30:	e6e7      	b.n	10c02 <__kernel_ram_size+0xc02>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   10e32:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   10e36:	4640      	mov	r0, r8
   10e38:	f7fd fd42 	bl	e8c0 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   10e3c:	2800      	cmp	r0, #0
   10e3e:	d087      	beq.n	10d50 <__kernel_ram_size+0xd50>
		_radio.conn_curr->supervision_expire = 0;
   10e40:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
   10e44:	2300      	movs	r3, #0
   10e46:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
   10e4a:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   10e4c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   10e50:	e03e      	b.n	10ed0 <__kernel_ram_size+0xed0>
		} else if ((_radio.conn_curr->enc_rx) ||
   10e52:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   10e56:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   10e5a:	f013 0f14 	tst.w	r3, #20
   10e5e:	f43f af77 	beq.w	10d50 <__kernel_ram_size+0xd50>
					    (conn->latency + 6)) ?
   10e62:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   10e64:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   10e68:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   10e6a:	4299      	cmp	r1, r3
   10e6c:	bfc4      	itt	gt
   10e6e:	1f8b      	subgt	r3, r1, #6
   10e70:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   10e72:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   10e76:	bfcc      	ite	gt
   10e78:	b29b      	uxthgt	r3, r3
   10e7a:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   10e7c:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
   10e7e:	bf1e      	ittt	ne
   10e80:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   10e84:	2300      	movne	r3, #0
   10e86:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   10e8a:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   10e8e:	2b00      	cmp	r3, #0
   10e90:	f47f af5e 	bne.w	10d50 <__kernel_ram_size+0xd50>
				conn->appto_expire = conn->appto_reload;
   10e94:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   10e98:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   10e9c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
   10ea0:	e756      	b.n	10d50 <__kernel_ram_size+0xd50>
		if (_radio.crc_expire == 0) {
   10ea2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10ea6:	b913      	cbnz	r3, 10eae <__kernel_ram_size+0xeae>
			_radio.crc_expire = 2;
   10ea8:	2302      	movs	r3, #2
   10eaa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
   10eae:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   10eb2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
   10eb6:	3b01      	subs	r3, #1
   10eb8:	b2db      	uxtb	r3, r3
   10eba:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   10ebe:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   10ec2:	fab3 f583 	clz	r5, r3
   10ec6:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   10ec8:	bb86      	cbnz	r6, 10f2c <__kernel_ram_size+0xf2c>
			_radio.conn_curr->supervision_expire =
   10eca:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   10ecc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10ed0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10ed4:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10ed6:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10eda:	f7fd fbb3 	bl	e644 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10ede:	7d23      	ldrb	r3, [r4, #20]
   10ee0:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10ee2:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10ee6:	d010      	beq.n	10f0a <__kernel_ram_size+0xf0a>
   10ee8:	bb15      	cbnz	r5, 10f30 <__kernel_ram_size+0xf30>
   10eea:	b137      	cbz	r7, 10efa <__kernel_ram_size+0xefa>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   10eec:	f898 3008 	ldrb.w	r3, [r8, #8]
   10ef0:	06d8      	lsls	r0, r3, #27
   10ef2:	d402      	bmi.n	10efa <__kernel_ram_size+0xefa>
			 (pdu_data_tx->len == 0)) ||
   10ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   10ef6:	785b      	ldrb	r3, [r3, #1]
   10ef8:	b1d3      	cbz	r3, 10f30 <__kernel_ram_size+0xf30>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   10efa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
   10efe:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10f02:	2b00      	cmp	r3, #0
   10f04:	bf0c      	ite	eq
   10f06:	2302      	moveq	r3, #2
   10f08:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   10f0a:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10f0c:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   10f0e:	d12d      	bne.n	10f6c <__kernel_ram_size+0xf6c>
		if (_radio.role == ROLE_MASTER) {
   10f10:	7ce3      	ldrb	r3, [r4, #19]
   10f12:	2b04      	cmp	r3, #4
   10f14:	d10e      	bne.n	10f34 <__kernel_ram_size+0xf34>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   10f16:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10f1a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10f1e:	f369 12c7 	bfi	r2, r9, #7, #1
   10f22:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   10f26:	f002 fc91 	bl	1384c <radio_disable>
   10f2a:	e66a      	b.n	10c02 <__kernel_ram_size+0xc02>
	struct radio_pdu_node_tx *tx_release = NULL;
   10f2c:	2600      	movs	r6, #0
   10f2e:	e7cf      	b.n	10ed0 <__kernel_ram_size+0xed0>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10f30:	2303      	movs	r3, #3
   10f32:	e7ea      	b.n	10f0a <__kernel_ram_size+0xf0a>
			radio_switch_complete_and_disable();
   10f34:	f002 fcfa 	bl	1392c <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   10f38:	9910      	ldr	r1, [sp, #64]	; 0x40
   10f3a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10f3e:	780b      	ldrb	r3, [r1, #0]
   10f40:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   10f44:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   10f48:	f3c2 0240 	ubfx	r2, r2, #1, #1
   10f4c:	f362 0382 	bfi	r3, r2, #2, #1
   10f50:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   10f52:	f7fa fc1f 	bl	b794 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   10f56:	f002 fc97 	bl	13888 <radio_is_ready>
   10f5a:	2800      	cmp	r0, #0
   10f5c:	f43f ae51 	beq.w	10c02 <__kernel_ram_size+0xc02>
   10f60:	4b53      	ldr	r3, [pc, #332]	; (110b0 <__kernel_ram_size+0x10b0>)
   10f62:	9301      	str	r3, [sp, #4]
   10f64:	9300      	str	r3, [sp, #0]
   10f66:	4b53      	ldr	r3, [pc, #332]	; (110b4 <__kernel_ram_size+0x10b4>)
   10f68:	f7fe be28 	b.w	fbbc <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
   10f6c:	2096      	movs	r0, #150	; 0x96
   10f6e:	f002 fd63 	bl	13a38 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   10f72:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10f76:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   10f7a:	f000 0007 	and.w	r0, r0, #7
   10f7e:	f002 fcbf 	bl	13900 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   10f82:	f002 fe35 	bl	13bf0 <radio_tmr_end_capture>
   10f86:	e7d7      	b.n	10f38 <__kernel_ram_size+0xf38>
		LL_ASSERT(0);
   10f88:	4b49      	ldr	r3, [pc, #292]	; (110b0 <__kernel_ram_size+0x10b0>)
   10f8a:	9301      	str	r3, [sp, #4]
   10f8c:	9300      	str	r3, [sp, #0]
   10f8e:	4b4a      	ldr	r3, [pc, #296]	; (110b8 <__kernel_ram_size+0x10b8>)
   10f90:	f7fe bead 	b.w	fcee <isr+0x1ee>
	switch (_radio.role) {
   10f94:	7ce2      	ldrb	r2, [r4, #19]
   10f96:	2a04      	cmp	r2, #4
   10f98:	f200 823a 	bhi.w	11410 <__kernel_ram_size+0x1410>
   10f9c:	e8df f012 	tbh	[pc, r2, lsl #1]
   10fa0:	00050228 	.word	0x00050228
   10fa4:	00bf0058 	.word	0x00bf0058
   10fa8:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
   10faa:	2b03      	cmp	r3, #3
   10fac:	d109      	bne.n	10fc2 <__kernel_ram_size+0xfc2>
	    (_radio.advertiser.chan_map_current != 0)) {
   10fae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   10fb2:	0759      	lsls	r1, r3, #29
   10fb4:	d005      	beq.n	10fc2 <__kernel_ram_size+0xfc2>
		adv_setup();
   10fb6:	f7fb fb35 	bl	c624 <adv_setup>
		radio_tx_enable();
   10fba:	f002 fc41 	bl	13840 <radio_tx_enable>
   10fbe:	f7fe be19 	b.w	fbf4 <isr+0xf4>
		radio_filter_disable();
   10fc2:	f002 fcfd 	bl	139c0 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   10fc6:	7d23      	ldrb	r3, [r4, #20]
   10fc8:	2b03      	cmp	r3, #3
   10fca:	f040 808f 	bne.w	110ec <__kernel_ram_size+0x10ec>
		    (!_radio.advertiser.is_hdcd)) {
   10fce:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   10fd2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   10fd6:	f040 8089 	bne.w	110ec <__kernel_ram_size+0x10ec>
			entropy_nrf_get_entropy_isr(_radio.entropy,
   10fda:	2201      	movs	r2, #1
   10fdc:	a910      	add	r1, sp, #64	; 0x40
   10fde:	6860      	ldr	r0, [r4, #4]
   10fe0:	f003 fc60 	bl	148a4 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
   10fe4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   10fe8:	4834      	ldr	r0, [pc, #208]	; (110bc <__kernel_ram_size+0x10bc>)
			random_delay %= 10;
   10fea:	230a      	movs	r3, #10
   10fec:	fbb1 f2f3 	udiv	r2, r1, r3
   10ff0:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
   10ff4:	3201      	adds	r2, #1
   10ff6:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
   10ff8:	b2d6      	uxtb	r6, r2
   10ffa:	fba6 0100 	umull	r0, r1, r6, r0
   10ffe:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
   11000:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   11004:	fb03 1106 	mla	r1, r3, r6, r1
   11008:	a325      	add	r3, pc, #148	; (adr r3, 110a0 <__kernel_ram_size+0x10a0>)
   1100a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1100e:	f7ef f901 	bl	214 <__aeabi_uldivmod>
			ticker_status =
   11012:	f640 734b 	movw	r3, #3915	; 0xf4b
   11016:	9306      	str	r3, [sp, #24]
   11018:	4b29      	ldr	r3, [pc, #164]	; (110c0 <__kernel_ram_size+0x10c0>)
   1101a:	9305      	str	r3, [sp, #20]
   1101c:	9504      	str	r5, [sp, #16]
   1101e:	b283      	uxth	r3, r0
   11020:	9503      	str	r5, [sp, #12]
   11022:	9502      	str	r5, [sp, #8]
   11024:	9501      	str	r5, [sp, #4]
   11026:	9500      	str	r5, [sp, #0]
   11028:	2205      	movs	r2, #5
   1102a:	4629      	mov	r1, r5
   1102c:	4628      	mov	r0, r5
   1102e:	f7f8 f8eb 	bl	9208 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11032:	f030 0302 	bics.w	r3, r0, #2
   11036:	d059      	beq.n	110ec <__kernel_ram_size+0x10ec>
   11038:	7ca3      	ldrb	r3, [r4, #18]
   1103a:	2b05      	cmp	r3, #5
   1103c:	d056      	beq.n	110ec <__kernel_ram_size+0x10ec>
   1103e:	4b1c      	ldr	r3, [pc, #112]	; (110b0 <__kernel_ram_size+0x10b0>)
   11040:	9301      	str	r3, [sp, #4]
   11042:	9300      	str	r3, [sp, #0]
   11044:	4a1f      	ldr	r2, [pc, #124]	; (110c4 <__kernel_ram_size+0x10c4>)
   11046:	4b20      	ldr	r3, [pc, #128]	; (110c8 <__kernel_ram_size+0x10c8>)
   11048:	4920      	ldr	r1, [pc, #128]	; (110cc <__kernel_ram_size+0x10cc>)
   1104a:	4821      	ldr	r0, [pc, #132]	; (110d0 <__kernel_ram_size+0x10d0>)
   1104c:	f7ff b906 	b.w	1025c <__kernel_ram_size+0x25c>
	if (_radio.state == STATE_CLOSE) {
   11050:	2b03      	cmp	r3, #3
   11052:	d13f      	bne.n	110d4 <__kernel_ram_size+0x10d4>
		radio_tmr_tifs_set(RADIO_TIFS);
   11054:	2096      	movs	r0, #150	; 0x96
   11056:	f002 fcef 	bl	13a38 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1105a:	2300      	movs	r3, #0
   1105c:	4619      	mov	r1, r3
   1105e:	461a      	mov	r2, r3
   11060:	4618      	mov	r0, r3
   11062:	f002 fc59 	bl	13918 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   11066:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   1106a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   1106e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   11072:	3008      	adds	r0, #8
   11074:	f002 fbc4 	bl	13800 <radio_pkt_rx_set>
		radio_rssi_measure();
   11078:	f002 fc66 	bl	13948 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   1107c:	f001 ff02 	bl	12e84 <ctrl_rl_enabled>
   11080:	b138      	cbz	r0, 11092 <__kernel_ram_size+0x1092>
			u8_t count, *irks = ctrl_irks_get(&count);
   11082:	a810      	add	r0, sp, #64	; 0x40
   11084:	f001 fc4e 	bl	12924 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   11088:	4601      	mov	r1, r0
   1108a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1108e:	f002 fe57 	bl	13d40 <radio_ar_configure>
		_radio.state = STATE_RX;
   11092:	2301      	movs	r3, #1
   11094:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   11096:	f002 fbcd 	bl	13834 <radio_rx_enable>
   1109a:	f7fe bdab 	b.w	fbf4 <isr+0xf4>
   1109e:	bf00      	nop
   110a0:	1afd498d 	.word	0x1afd498d
   110a4:	00000007 	.word	0x00000007
   110a8:	00022060 	.word	0x00022060
   110ac:	00022040 	.word	0x00022040
   110b0:	00015e19 	.word	0x00015e19
   110b4:	000193bb 	.word	0x000193bb
   110b8:	000193c7 	.word	0x000193c7
   110bc:	d4a51000 	.word	0xd4a51000
   110c0:	0000c079 	.word	0x0000c079
   110c4:	000171f2 	.word	0x000171f2
   110c8:	000193da 	.word	0x000193da
   110cc:	00017241 	.word	0x00017241
   110d0:	00019a29 	.word	0x00019a29
		radio_filter_disable();
   110d4:	f002 fc74 	bl	139c0 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   110d8:	7d23      	ldrb	r3, [r4, #20]
   110da:	2b05      	cmp	r3, #5
   110dc:	d106      	bne.n	110ec <__kernel_ram_size+0x10ec>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   110de:	2300      	movs	r3, #0
   110e0:	9300      	str	r3, [sp, #0]
   110e2:	2204      	movs	r2, #4
   110e4:	4619      	mov	r1, r3
   110e6:	4618      	mov	r0, r3
   110e8:	f7f8 f8dc 	bl	92a4 <ticker_stop>
	_radio.role = ROLE_NONE;
   110ec:	2500      	movs	r5, #0
   110ee:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   110f0:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   110f2:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   110f4:	f002 fd1e 	bl	13b34 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   110f8:	462a      	mov	r2, r5
   110fa:	4629      	mov	r1, r5
   110fc:	4628      	mov	r0, r5
   110fe:	4bb2      	ldr	r3, [pc, #712]	; (113c8 <__kernel_ram_size+0x13c8>)
   11100:	f7f7 fa74 	bl	85ec <mayfly_enqueue>
	LL_ASSERT(!retval);
   11104:	4605      	mov	r5, r0
   11106:	2800      	cmp	r0, #0
   11108:	f000 8188 	beq.w	1141c <__kernel_ram_size+0x141c>
   1110c:	4baf      	ldr	r3, [pc, #700]	; (113cc <__kernel_ram_size+0x13cc>)
   1110e:	9301      	str	r3, [sp, #4]
   11110:	9300      	str	r3, [sp, #0]
   11112:	4aaf      	ldr	r2, [pc, #700]	; (113d0 <__kernel_ram_size+0x13d0>)
   11114:	4baf      	ldr	r3, [pc, #700]	; (113d4 <__kernel_ram_size+0x13d4>)
   11116:	49b0      	ldr	r1, [pc, #704]	; (113d8 <__kernel_ram_size+0x13d8>)
   11118:	48b0      	ldr	r0, [pc, #704]	; (113dc <__kernel_ram_size+0x13dc>)
   1111a:	f7ff b89f 	b.w	1025c <__kernel_ram_size+0x25c>
	if (_radio.conn_curr == 0) {
   1111e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   11122:	2800      	cmp	r0, #0
   11124:	d0e2      	beq.n	110ec <__kernel_ram_size+0x10ec>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   11126:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   1112a:	b181      	cbz	r1, 1114e <__kernel_ram_size+0x114e>
   1112c:	7ce3      	ldrb	r3, [r4, #19]
   1112e:	2b03      	cmp	r3, #3
   11130:	d003      	beq.n	1113a <__kernel_ram_size+0x113a>
   11132:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   11136:	07da      	lsls	r2, r3, #31
   11138:	d509      	bpl.n	1114e <__kernel_ram_size+0x114e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   1113a:	f7fb fb51 	bl	c7e0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1113e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   11142:	f7fb f99b 	bl	c47c <connection_release>
			_radio.conn_curr = NULL;
   11146:	2300      	movs	r3, #0
   11148:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1114c:	e7ce      	b.n	110ec <__kernel_ram_size+0x10ec>
	latency_event = _radio.conn_curr->latency_event;
   1114e:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   11152:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   11156:	f10b 0601 	add.w	r6, fp, #1
   1115a:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   1115c:	2f00      	cmp	r7, #0
   1115e:	f000 8084 	beq.w	1126a <__kernel_ram_size+0x126a>
		if (_radio.role == ROLE_SLAVE) {
   11162:	7ce3      	ldrb	r3, [r4, #19]
   11164:	2b03      	cmp	r3, #3
   11166:	d173      	bne.n	11250 <__kernel_ram_size+0x1250>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   11168:	f002 fd36 	bl	13bd8 <radio_tmr_aa_restore>
   1116c:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   1116e:	f002 fd39 	bl	13be4 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   11172:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   11176:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   1117a:	f003 0307 	and.w	r3, r3, #7
   1117e:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   11180:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   11184:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   11186:	d052      	beq.n	1122e <__kernel_ram_size+0x122e>
		return 40;
   11188:	2b04      	cmp	r3, #4
   1118a:	bf0c      	ite	eq
   1118c:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   11190:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   11194:	f100 0330 	add.w	r3, r0, #48	; 0x30
   11198:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   1119a:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1119c:	930a      	str	r3, [sp, #40]	; 0x28
   1119e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 113ec <__kernel_ram_size+0x13ec>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   111a2:	a387      	add	r3, pc, #540	; (adr r3, 113c0 <__kernel_ram_size+0x13c0>)
   111a4:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   111a8:	d844      	bhi.n	11234 <__kernel_ram_size+0x1234>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   111aa:	fba0 010a 	umull	r0, r1, r0, sl
   111ae:	f7ef f831 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   111b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   111b4:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   111b6:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   111ba:	a381      	add	r3, pc, #516	; (adr r3, 113c0 <__kernel_ram_size+0x13c0>)
   111bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   111c0:	fba0 010a 	umull	r0, r1, r0, sl
   111c4:	f7ef f826 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   111c8:	2300      	movs	r3, #0
   111ca:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   111cc:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   111ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   111d2:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   111d6:	b3ab      	cbz	r3, 11244 <__kernel_ram_size+0x1244>
				if (pdu_data_tx->len ||
   111d8:	795b      	ldrb	r3, [r3, #5]
   111da:	b913      	cbnz	r3, 111e2 <__kernel_ram_size+0x11e2>
   111dc:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   111e0:	b10b      	cbz	r3, 111e6 <__kernel_ram_size+0x11e6>
					_radio.conn_curr->latency_event = 0;
   111e2:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   111e4:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   111e6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   111ea:	2200      	movs	r2, #0
   111ec:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   111ee:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   111f2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   111f6:	b1c3      	cbz	r3, 1122a <__kernel_ram_size+0x122a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   111f8:	429e      	cmp	r6, r3
   111fa:	f080 80b0 	bcs.w	1135e <__kernel_ram_size+0x135e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   111fe:	1b9b      	subs	r3, r3, r6
   11200:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   11202:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   11204:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   11206:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   1120a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   1120c:	f240 80a9 	bls.w	11362 <__kernel_ram_size+0x1362>
			else if (_radio.role == ROLE_SLAVE) {
   11210:	7ce3      	ldrb	r3, [r4, #19]
   11212:	2b03      	cmp	r3, #3
   11214:	d109      	bne.n	1122a <__kernel_ram_size+0x122a>
				if (latency_event != 0) {
   11216:	f1bb 0f00 	cmp.w	fp, #0
   1121a:	f040 80a2 	bne.w	11362 <__kernel_ram_size+0x1362>
					force = _radio.conn_curr->slave.force & 0x01;
   1121e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   11220:	087b      	lsrs	r3, r7, #1
					if (force) {
   11222:	f017 0701 	ands.w	r7, r7, #1
   11226:	d13d      	bne.n	112a4 <__kernel_ram_size+0x12a4>
					_radio.conn_curr->slave.force >>= 1;
   11228:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   1122a:	2700      	movs	r7, #0
   1122c:	e03d      	b.n	112aa <__kernel_ram_size+0x12aa>
		return 24;
   1122e:	f04f 0818 	mov.w	r8, #24
   11232:	e7af      	b.n	11194 <__kernel_ram_size+0x1194>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   11234:	fba9 010a 	umull	r0, r1, r9, sl
   11238:	f7ee ffec 	bl	214 <__aeabi_uldivmod>
   1123c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1123e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   11242:	e7ba      	b.n	111ba <__kernel_ram_size+0x11ba>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   11244:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   11248:	07db      	lsls	r3, r3, #31
   1124a:	d5cc      	bpl.n	111e6 <__kernel_ram_size+0x11e6>
				_radio.conn_curr->latency_event =
   1124c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   1124e:	e7c9      	b.n	111e4 <__kernel_ram_size+0x11e4>
		} else if (reason_peer) {
   11250:	b149      	cbz	r1, 11266 <__kernel_ram_size+0x1266>
			_radio.conn_curr->master.terminate_ack = 1;
   11252:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   11256:	f043 0301 	orr.w	r3, r3, #1
   1125a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   1125e:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   11262:	4645      	mov	r5, r8
   11264:	e7bf      	b.n	111e6 <__kernel_ram_size+0x11e6>
	ticks_drift_minus = 0;
   11266:	4688      	mov	r8, r1
   11268:	e7fb      	b.n	11262 <__kernel_ram_size+0x1262>
	else if (_radio.conn_curr->connect_expire) {
   1126a:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   1126c:	b185      	cbz	r5, 11290 <__kernel_ram_size+0x1290>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   1126e:	42ae      	cmp	r6, r5
   11270:	d204      	bcs.n	1127c <__kernel_ram_size+0x127c>
			_radio.conn_curr->connect_expire -= elapsed_event;
   11272:	1bad      	subs	r5, r5, r6
   11274:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   11276:	463d      	mov	r5, r7
   11278:	46a8      	mov	r8, r5
   1127a:	e7b8      	b.n	111ee <__kernel_ram_size+0x11ee>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   1127c:	213e      	movs	r1, #62	; 0x3e
   1127e:	f7fb faaf 	bl	c7e0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   11282:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   11286:	f7fb f8f9 	bl	c47c <connection_release>
			_radio.conn_curr = NULL;
   1128a:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   1128e:	e72d      	b.n	110ec <__kernel_ram_size+0x10ec>
		if (!_radio.conn_curr->supervision_expire) {
   11290:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   11294:	f1b8 0f00 	cmp.w	r8, #0
   11298:	d1ee      	bne.n	11278 <__kernel_ram_size+0x1278>
			_radio.conn_curr->supervision_expire =
   1129a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   1129c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   112a0:	4645      	mov	r5, r8
   112a2:	e7a4      	b.n	111ee <__kernel_ram_size+0x11ee>
						_radio.conn_curr->slave.force |=
   112a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   112a8:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   112aa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   112ae:	b123      	cbz	r3, 112ba <__kernel_ram_size+0x12ba>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   112b0:	429e      	cmp	r6, r3
   112b2:	d258      	bcs.n	11366 <__kernel_ram_size+0x1366>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   112b4:	1b9b      	subs	r3, r3, r6
   112b6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   112ba:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   112be:	b123      	cbz	r3, 112ca <__kernel_ram_size+0x12ca>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   112c0:	429e      	cmp	r6, r3
   112c2:	d252      	bcs.n	1136a <__kernel_ram_size+0x136a>
			_radio.conn_curr->apto_expire -= elapsed_event;
   112c4:	1b9b      	subs	r3, r3, r6
   112c6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   112ca:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   112ce:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   112d2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   112d6:	b123      	cbz	r3, 112e2 <__kernel_ram_size+0x12e2>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   112d8:	429e      	cmp	r6, r3
   112da:	d25c      	bcs.n	11396 <__kernel_ram_size+0x1396>
			_radio.conn_curr->appto_expire -= elapsed_event;
   112dc:	1b9e      	subs	r6, r3, r6
   112de:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   112e2:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   112e6:	428b      	cmp	r3, r1
   112e8:	d006      	beq.n	112f8 <__kernel_ram_size+0x12f8>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   112ea:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   112ee:	3b01      	subs	r3, #1
   112f0:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   112f2:	bf9c      	itt	ls
   112f4:	2300      	movls	r3, #0
   112f6:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   112f8:	b917      	cbnz	r7, 11300 <__kernel_ram_size+0x1300>
   112fa:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   112fc:	455b      	cmp	r3, fp
   112fe:	d05c      	beq.n	113ba <__kernel_ram_size+0x13ba>
		lazy = _radio.conn_curr->latency_event + 1;
   11300:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   11302:	3301      	adds	r3, #1
   11304:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   11306:	b935      	cbnz	r5, 11316 <__kernel_ram_size+0x1316>
   11308:	f1b8 0f00 	cmp.w	r8, #0
   1130c:	d103      	bne.n	11316 <__kernel_ram_size+0x1316>
   1130e:	b913      	cbnz	r3, 11316 <__kernel_ram_size+0x1316>
	    (lazy != 0) || (force != 0)) {
   11310:	2f00      	cmp	r7, #0
   11312:	f43f aeeb 	beq.w	110ec <__kernel_ram_size+0x10ec>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   11316:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   1131a:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   1131c:	3207      	adds	r2, #7
		ticker_status =
   1131e:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   11320:	b2d6      	uxtb	r6, r2
		ticker_status =
   11322:	4a2f      	ldr	r2, [pc, #188]	; (113e0 <__kernel_ram_size+0x13e0>)
   11324:	9205      	str	r2, [sp, #20]
   11326:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   11328:	9606      	str	r6, [sp, #24]
		ticker_status =
   1132a:	9704      	str	r7, [sp, #16]
   1132c:	9102      	str	r1, [sp, #8]
   1132e:	9101      	str	r1, [sp, #4]
   11330:	f8cd 8000 	str.w	r8, [sp]
   11334:	4632      	mov	r2, r6
   11336:	4608      	mov	r0, r1
   11338:	f7f7 ff66 	bl	9208 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1133c:	f030 0302 	bics.w	r3, r0, #2
   11340:	f43f aed4 	beq.w	110ec <__kernel_ram_size+0x10ec>
   11344:	7ca3      	ldrb	r3, [r4, #18]
   11346:	429e      	cmp	r6, r3
   11348:	f43f aed0 	beq.w	110ec <__kernel_ram_size+0x10ec>
   1134c:	4b1f      	ldr	r3, [pc, #124]	; (113cc <__kernel_ram_size+0x13cc>)
   1134e:	9301      	str	r3, [sp, #4]
   11350:	9300      	str	r3, [sp, #0]
   11352:	4a1f      	ldr	r2, [pc, #124]	; (113d0 <__kernel_ram_size+0x13d0>)
   11354:	4b23      	ldr	r3, [pc, #140]	; (113e4 <__kernel_ram_size+0x13e4>)
   11356:	4920      	ldr	r1, [pc, #128]	; (113d8 <__kernel_ram_size+0x13d8>)
   11358:	4823      	ldr	r0, [pc, #140]	; (113e8 <__kernel_ram_size+0x13e8>)
   1135a:	f7fe bf7f 	b.w	1025c <__kernel_ram_size+0x25c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   1135e:	2108      	movs	r1, #8
   11360:	e6eb      	b.n	1113a <__kernel_ram_size+0x113a>
				force = 1;
   11362:	2701      	movs	r7, #1
   11364:	e7a1      	b.n	112aa <__kernel_ram_size+0x12aa>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   11366:	2122      	movs	r1, #34	; 0x22
   11368:	e6e7      	b.n	1113a <__kernel_ram_size+0x113a>
			_radio.conn_curr->apto_expire = 0;
   1136a:	2300      	movs	r3, #0
   1136c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   11370:	2002      	movs	r0, #2
   11372:	f7f9 fe85 	bl	b080 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   11376:	b928      	cbnz	r0, 11384 <__kernel_ram_size+0x1384>
   11378:	4b14      	ldr	r3, [pc, #80]	; (113cc <__kernel_ram_size+0x13cc>)
   1137a:	9301      	str	r3, [sp, #4]
   1137c:	9300      	str	r3, [sp, #0]
   1137e:	4b19      	ldr	r3, [pc, #100]	; (113e4 <__kernel_ram_size+0x13e4>)
   11380:	f7fe be36 	b.w	fff0 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   11384:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   11388:	8c1b      	ldrh	r3, [r3, #32]
   1138a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   1138c:	230a      	movs	r3, #10
   1138e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   11390:	f7fa fce2 	bl	bd58 <packet_rx_enqueue>
   11394:	e799      	b.n	112ca <__kernel_ram_size+0x12ca>
			_radio.conn_curr->appto_expire = 0;
   11396:	2300      	movs	r3, #0
   11398:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   1139c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   113a0:	2b00      	cmp	r3, #0
   113a2:	d19e      	bne.n	112e2 <__kernel_ram_size+0x12e2>
   113a4:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   113a8:	428b      	cmp	r3, r1
   113aa:	d19e      	bne.n	112ea <__kernel_ram_size+0x12ea>
				_radio.conn_curr->llcp_type = LLCP_PING;
   113ac:	2307      	movs	r3, #7
   113ae:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   113b2:	1e4b      	subs	r3, r1, #1
   113b4:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   113b8:	e793      	b.n	112e2 <__kernel_ram_size+0x12e2>
	lazy = 0;
   113ba:	463b      	mov	r3, r7
   113bc:	e7a3      	b.n	11306 <__kernel_ram_size+0x1306>
   113be:	bf00      	nop
   113c0:	1afd498d 	.word	0x1afd498d
   113c4:	00000007 	.word	0x00000007
   113c8:	20003d70 	.word	0x20003d70
   113cc:	00015e19 	.word	0x00015e19
   113d0:	000171f2 	.word	0x000171f2
   113d4:	000194ab 	.word	0x000194ab
   113d8:	00017241 	.word	0x00017241
   113dc:	00019edb 	.word	0x00019edb
   113e0:	0000c0c1 	.word	0x0000c0c1
   113e4:	000193e8 	.word	0x000193e8
   113e8:	00019a97 	.word	0x00019a97
   113ec:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
   113f0:	3b04      	subs	r3, #4
   113f2:	2b01      	cmp	r3, #1
   113f4:	d908      	bls.n	11408 <__kernel_ram_size+0x1408>
   113f6:	4b12      	ldr	r3, [pc, #72]	; (11440 <__kernel_ram_size+0x1440>)
   113f8:	9301      	str	r3, [sp, #4]
   113fa:	9300      	str	r3, [sp, #0]
   113fc:	4a11      	ldr	r2, [pc, #68]	; (11444 <__kernel_ram_size+0x1444>)
   113fe:	4b12      	ldr	r3, [pc, #72]	; (11448 <__kernel_ram_size+0x1448>)
   11400:	4912      	ldr	r1, [pc, #72]	; (1144c <__kernel_ram_size+0x144c>)
   11402:	4813      	ldr	r0, [pc, #76]	; (11450 <__kernel_ram_size+0x1450>)
   11404:	f7fe bf2a 	b.w	1025c <__kernel_ram_size+0x25c>
		_radio.state = STATE_NONE;
   11408:	2300      	movs	r3, #0
   1140a:	7523      	strb	r3, [r4, #20]
   1140c:	f7fe bc22 	b.w	fc54 <isr+0x154>
		LL_ASSERT(0);
   11410:	4b0b      	ldr	r3, [pc, #44]	; (11440 <__kernel_ram_size+0x1440>)
   11412:	9301      	str	r3, [sp, #4]
   11414:	9300      	str	r3, [sp, #0]
   11416:	4b0c      	ldr	r3, [pc, #48]	; (11448 <__kernel_ram_size+0x1448>)
   11418:	f7fe bc69 	b.w	fcee <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
   1141c:	6820      	ldr	r0, [r4, #0]
   1141e:	6843      	ldr	r3, [r0, #4]
   11420:	4629      	mov	r1, r5
   11422:	685b      	ldr	r3, [r3, #4]
   11424:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   11426:	2201      	movs	r2, #1
   11428:	4611      	mov	r1, r2
   1142a:	4628      	mov	r0, r5
   1142c:	f7f7 f8b6 	bl	859c <mayfly_enable>
   11430:	f7fe bc10 	b.w	fc54 <isr+0x154>
		LL_ASSERT(0);
   11434:	4b02      	ldr	r3, [pc, #8]	; (11440 <__kernel_ram_size+0x1440>)
   11436:	9301      	str	r3, [sp, #4]
   11438:	9300      	str	r3, [sp, #0]
   1143a:	4b06      	ldr	r3, [pc, #24]	; (11454 <__kernel_ram_size+0x1454>)
   1143c:	f7fe bc57 	b.w	fcee <isr+0x1ee>
   11440:	00015e19 	.word	0x00015e19
   11444:	000171f2 	.word	0x000171f2
   11448:	000193f7 	.word	0x000193f7
   1144c:	00017241 	.word	0x00017241
   11450:	00019b0d 	.word	0x00019b0d
   11454:	0001940d 	.word	0x0001940d

00011458 <radio_init>:
{
   11458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   1145c:	4e3d      	ldr	r6, [pc, #244]	; (11554 <radio_init+0xfc>)
{
   1145e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11460:	f89d c01c 	ldrb.w	ip, [sp, #28]
   11464:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   11468:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   1146c:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   11470:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   11472:	f44f 70aa 	mov.w	r0, #340	; 0x154
   11476:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   1147a:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   1147e:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   11482:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   11484:	f10c 0401 	add.w	r4, ip, #1
   11488:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   1148a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   1148c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   11490:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   11494:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   11496:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   11498:	bf98      	it	ls
   1149a:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   1149e:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   114a2:	bf88      	it	hi
   114a4:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   114a8:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   114ac:	bf8c      	ite	hi
   114ae:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   114b2:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   114b6:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   114ba:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   114be:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   114c2:	bf8c      	ite	hi
   114c4:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   114c8:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   114ca:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   114ce:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   114d2:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   114d6:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   114da:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   114de:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   114e2:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   114e6:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   114ea:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   114ec:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   114ee:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   114f2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   114f4:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   114f8:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   114fc:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   11500:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   11502:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   11506:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1150a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1150e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   11512:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   11516:	340a      	adds	r4, #10
   11518:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   1151c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1151e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   11520:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   11524:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   11528:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   1152a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   1152e:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   11532:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   11536:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   1153a:	d003      	beq.n	11544 <radio_init+0xec>
		return (retcode + mem_size);
   1153c:	442c      	add	r4, r5
}
   1153e:	4620      	mov	r0, r4
   11540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   11544:	2301      	movs	r3, #1
   11546:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   1154a:	f7f9 fe5d 	bl	b208 <common_init>
	radio_setup();
   1154e:	f002 f8a7 	bl	136a0 <radio_setup>
	return retcode;
   11552:	e7f4      	b.n	1153e <radio_init+0xe6>
   11554:	200008e8 	.word	0x200008e8

00011558 <ll_reset>:
{
   11558:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   1155a:	2103      	movs	r1, #3
   1155c:	2005      	movs	r0, #5
   1155e:	f7f9 ff3d 	bl	b3dc <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   11562:	2104      	movs	r1, #4
   11564:	2006      	movs	r0, #6
   11566:	f7f9 ff39 	bl	b3dc <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   1156a:	4c22      	ldr	r4, [pc, #136]	; (115f4 <ll_reset+0x9c>)
   1156c:	2500      	movs	r5, #0
   1156e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   11572:	b2ab      	uxth	r3, r5
   11574:	429a      	cmp	r2, r3
   11576:	f105 0501 	add.w	r5, r5, #1
   1157a:	d834      	bhi.n	115e6 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   1157c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11580:	f36f 13c7 	bfc	r3, #7, #1
   11584:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   11588:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   1158c:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   1158e:	f360 0300 	bfi	r3, r0, #0, #1
   11592:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   11596:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   11598:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   1159c:	fbb3 f3f2 	udiv	r3, r3, r2
   115a0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   115a4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   115a8:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   115ac:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   115ae:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   115b2:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   115b6:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   115ba:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   115be:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   115c2:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   115c6:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   115ca:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   115ce:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   115d2:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   115d6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   115da:	f001 fee1 	bl	133a0 <ll_filter_reset>
}
   115de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   115e2:	f7f9 be11 	b.w	b208 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   115e6:	1da8      	adds	r0, r5, #6
   115e8:	21ff      	movs	r1, #255	; 0xff
   115ea:	b2c0      	uxtb	r0, r0
   115ec:	f7f9 fef6 	bl	b3dc <role_disable>
   115f0:	e7bd      	b.n	1156e <ll_reset+0x16>
   115f2:	bf00      	nop
   115f4:	200008e8 	.word	0x200008e8

000115f8 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   115f8:	4b02      	ldr	r3, [pc, #8]	; (11604 <ll_adv_is_enabled+0xc>)
   115fa:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   115fe:	09c0      	lsrs	r0, r0, #7
   11600:	4770      	bx	lr
   11602:	bf00      	nop
   11604:	200008e8 	.word	0x200008e8

00011608 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   11608:	4b04      	ldr	r3, [pc, #16]	; (1161c <radio_adv_filter_pol_get+0x14>)
   1160a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   1160e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   11610:	bfba      	itte	lt
   11612:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   11616:	0980      	lsrlt	r0, r0, #6
   11618:	2000      	movge	r0, #0
}
   1161a:	4770      	bx	lr
   1161c:	200008e8 	.word	0x200008e8

00011620 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   11620:	4a09      	ldr	r2, [pc, #36]	; (11648 <ll_scan_is_enabled+0x28>)
   11622:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   11626:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1162a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1162e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   11632:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   11634:	f003 0301 	and.w	r3, r3, #1
   11638:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   1163c:	bf14      	ite	ne
   1163e:	2004      	movne	r0, #4
   11640:	2000      	moveq	r0, #0
}
   11642:	4318      	orrs	r0, r3
   11644:	4770      	bx	lr
   11646:	bf00      	nop
   11648:	200008e8 	.word	0x200008e8

0001164c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   1164c:	4b05      	ldr	r3, [pc, #20]	; (11664 <radio_scan_filter_pol_get+0x18>)
   1164e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   11652:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   11656:	bf1c      	itt	ne
   11658:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   1165c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   11660:	4770      	bx	lr
   11662:	bf00      	nop
   11664:	200008e8 	.word	0x200008e8

00011668 <radio_connect_enable>:
{
   11668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   1166c:	f8df 8384 	ldr.w	r8, [pc, #900]	; 119f4 <radio_connect_enable+0x38c>
{
   11670:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   11672:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   11676:	9303      	str	r3, [sp, #12]
   11678:	4683      	mov	fp, r0
   1167a:	468a      	mov	sl, r1
   1167c:	4691      	mov	r9, r2
   1167e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   11680:	2e00      	cmp	r6, #0
   11682:	f040 819c 	bne.w	119be <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   11686:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   1168a:	f7f6 fee4 	bl	8456 <mem_acquire>
	if (!link) {
   1168e:	4607      	mov	r7, r0
   11690:	b150      	cbz	r0, 116a8 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   11692:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   11696:	f7f6 fede 	bl	8456 <mem_acquire>
	if (!conn) {
   1169a:	4604      	mov	r4, r0
   1169c:	b930      	cbnz	r0, 116ac <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   1169e:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   116a2:	4638      	mov	r0, r7
   116a4:	f7f6 fef1 	bl	848a <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   116a8:	2007      	movs	r0, #7
   116aa:	e15c      	b.n	11966 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   116ac:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   116b0:	f36b 1386 	bfi	r3, fp, #6, #1
   116b4:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   116b8:	2206      	movs	r2, #6
   116ba:	4651      	mov	r1, sl
   116bc:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   116c0:	f7f0 fa9c 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
   116c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   116c8:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   116cc:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   116ce:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   116d2:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   116d6:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   116d8:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   116dc:	f002 f89c 	bl	13818 <radio_tx_ready_delay_get>
   116e0:	49bb      	ldr	r1, [pc, #748]	; (119d0 <radio_connect_enable+0x368>)
   116e2:	f200 4052 	addw	r0, r0, #1106	; 0x452
   116e6:	a3b8      	add	r3, pc, #736	; (adr r3, 119c8 <radio_connect_enable+0x360>)
   116e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   116ec:	fba0 0101 	umull	r0, r1, r0, r1
   116f0:	f7ee fd90 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   116f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   116f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   116fc:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   11700:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   11702:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 119f8 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   11706:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   1170a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   1170e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   11710:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   11714:	2104      	movs	r1, #4
   11716:	a805      	add	r0, sp, #20
   11718:	f7f7 fed4 	bl	94c4 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   1171c:	f8dd c014 	ldr.w	ip, [sp, #20]
   11720:	2000      	movs	r0, #0
   11722:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   11726:	231f      	movs	r3, #31
	transitions = 0;
   11728:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   1172a:	2101      	movs	r1, #1
	while (bit_idx--) {
   1172c:	3b01      	subs	r3, #1
   1172e:	b2db      	uxtb	r3, r3
   11730:	2bff      	cmp	r3, #255	; 0xff
   11732:	d103      	bne.n	1173c <radio_connect_enable+0xd4>
   11734:	b3d0      	cbz	r0, 117ac <radio_connect_enable+0x144>
   11736:	f8cd c014 	str.w	ip, [sp, #20]
   1173a:	e037      	b.n	117ac <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   1173c:	fa2c fe03 	lsr.w	lr, ip, r3
   11740:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   11744:	45d6      	cmp	lr, sl
   11746:	d11a      	bne.n	1177e <radio_connect_enable+0x116>
			consecutive_cnt++;
   11748:	3101      	adds	r1, #1
   1174a:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   1174c:	2906      	cmp	r1, #6
   1174e:	d807      	bhi.n	11760 <radio_connect_enable+0xf8>
   11750:	2b1b      	cmp	r3, #27
   11752:	d81a      	bhi.n	1178a <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   11754:	b122      	cbz	r2, 11760 <radio_connect_enable+0xf8>
   11756:	2b1b      	cmp	r3, #27
   11758:	d017      	beq.n	1178a <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   1175a:	2a01      	cmp	r2, #1
   1175c:	d815      	bhi.n	1178a <radio_connect_enable+0x122>
   1175e:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   11760:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   11764:	f1be 0f00 	cmp.w	lr, #0
   11768:	f000 8100 	beq.w	1196c <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   1176c:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   11770:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   11774:	3201      	adds	r2, #1
   11776:	2001      	movs	r0, #1
   11778:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1177a:	4601      	mov	r1, r0
   1177c:	e005      	b.n	1178a <radio_connect_enable+0x122>
			transitions++;
   1177e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   11780:	2b1b      	cmp	r3, #27
			transitions++;
   11782:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   11784:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   11788:	d9e5      	bls.n	11756 <radio_connect_enable+0xee>
		if (transitions > 24) {
   1178a:	2a18      	cmp	r2, #24
   1178c:	f240 80f6 	bls.w	1197c <radio_connect_enable+0x314>
   11790:	b108      	cbz	r0, 11796 <radio_connect_enable+0x12e>
   11792:	f8cd c014 	str.w	ip, [sp, #20]
   11796:	3301      	adds	r3, #1
   11798:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   1179a:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   1179e:	f1be 0f00 	cmp.w	lr, #0
   117a2:	f000 80e8 	beq.w	11976 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   117a6:	425b      	negs	r3, r3
   117a8:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   117aa:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   117ac:	9b05      	ldr	r3, [sp, #20]
   117ae:	a806      	add	r0, sp, #24
   117b0:	ea83 0308 	eor.w	r3, r3, r8
   117b4:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   117b8:	2104      	movs	r1, #4
   117ba:	f7f6 fff7 	bl	87ac <util_ones_count_get>
   117be:	2801      	cmp	r0, #1
   117c0:	f240 80e3 	bls.w	1198a <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   117c4:	9b05      	ldr	r3, [sp, #20]
   117c6:	b29a      	uxth	r2, r3
   117c8:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   117cc:	f000 80d8 	beq.w	11980 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   117d0:	2204      	movs	r2, #4
   117d2:	a905      	add	r1, sp, #20
   117d4:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   117d8:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   117da:	f7f0 fa0f 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   117de:	2103      	movs	r1, #3
   117e0:	f104 0014 	add.w	r0, r4, #20
   117e4:	f7f7 fe6e 	bl	94c4 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   117e8:	2205      	movs	r2, #5
   117ea:	497a      	ldr	r1, [pc, #488]	; (119d4 <radio_connect_enable+0x36c>)
   117ec:	f104 0017 	add.w	r0, r4, #23
   117f0:	f7f0 fa04 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   117f4:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   117f8:	7f63      	ldrb	r3, [r4, #29]
   117fa:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   117fe:	f36f 1386 	bfc	r3, #6, #1
   11802:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   11804:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   11806:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   11808:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   1180a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   1180c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   11810:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   11814:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   11818:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1181a:	211b      	movs	r1, #27
   1181c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1181e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   11820:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   11824:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   11826:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   1182a:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1182e:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   11830:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   11832:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   11836:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   11838:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   1183c:	2601      	movs	r6, #1
   1183e:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   11842:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   11846:	f363 11c7 	bfi	r1, r3, #7, #1
   1184a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1184e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   11852:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   11856:	f366 0102 	bfi	r1, r6, #0, #3
   1185a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   1185e:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   11862:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   11864:	b2c9      	uxtb	r1, r1
   11866:	f36c 01c5 	bfi	r1, ip, #3, #3
   1186a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   1186e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   11872:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   11874:	f366 0102 	bfi	r1, r6, #0, #3
   11878:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   1187c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   1187e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   11880:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   11884:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   11886:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   11888:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   1188c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   11890:	f363 0100 	bfi	r1, r3, #0, #1
   11894:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   11898:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1189c:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   118a0:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   118a4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   118a8:	1e56      	subs	r6, r2, #1
   118aa:	f242 7e10 	movw	lr, #10000	; 0x2710
   118ae:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   118b2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   118b6:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   118ba:	4b47      	ldr	r3, [pc, #284]	; (119d8 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   118bc:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   118be:	4947      	ldr	r1, [pc, #284]	; (119dc <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   118c0:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   118c2:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   118c4:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   118c8:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   118cc:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   118ce:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   118d2:	1d81      	adds	r1, r0, #6
   118d4:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   118d6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   118da:	dc6a      	bgt.n	119b2 <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   118dc:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   118e0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   118e4:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   118e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   118ea:	f360 0341 	bfi	r3, r0, #1, #1
   118ee:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   118f2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   118f6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   118fa:	f360 1304 	bfi	r3, r0, #4, #1
   118fe:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   11902:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   11906:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   1190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1190e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   11912:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   11916:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   1191a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1191e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   11922:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   11926:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1192a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1192e:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   11932:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   11936:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1193a:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1193e:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   11942:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   11946:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   1194a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1194e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   11952:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   11956:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   1195a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1195e:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   11962:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   11966:	b007      	add	sp, #28
   11968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   1196c:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   11970:	f04f 0e01 	mov.w	lr, #1
   11974:	e6fe      	b.n	11774 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   11976:	3b01      	subs	r3, #1
   11978:	4313      	orrs	r3, r2
   1197a:	e716      	b.n	117aa <radio_connect_enable+0x142>
		if (transitions > 24) {
   1197c:	46f2      	mov	sl, lr
   1197e:	e6d5      	b.n	1172c <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   11980:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   11982:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   11986:	f47f af23 	bne.w	117d0 <radio_connect_enable+0x168>
   1198a:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   1198c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   11990:	f47f aec0 	bne.w	11714 <radio_connect_enable+0xac>
   11994:	4b12      	ldr	r3, [pc, #72]	; (119e0 <radio_connect_enable+0x378>)
   11996:	9301      	str	r3, [sp, #4]
   11998:	9300      	str	r3, [sp, #0]
   1199a:	4a12      	ldr	r2, [pc, #72]	; (119e4 <radio_connect_enable+0x37c>)
   1199c:	4b12      	ldr	r3, [pc, #72]	; (119e8 <radio_connect_enable+0x380>)
   1199e:	4913      	ldr	r1, [pc, #76]	; (119ec <radio_connect_enable+0x384>)
   119a0:	4813      	ldr	r0, [pc, #76]	; (119f0 <radio_connect_enable+0x388>)
   119a2:	f7ef faf3 	bl	f8c <printk>
   119a6:	4040      	eors	r0, r0
   119a8:	f380 8811 	msr	BASEPRI, r0
   119ac:	f04f 0004 	mov.w	r0, #4
   119b0:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   119b2:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   119b6:	33fa      	adds	r3, #250	; 0xfa
   119b8:	441a      	add	r2, r3
   119ba:	b292      	uxth	r2, r2
   119bc:	e78e      	b.n	118dc <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   119be:	200c      	movs	r0, #12
   119c0:	e7d1      	b.n	11966 <radio_connect_enable+0x2fe>
   119c2:	bf00      	nop
   119c4:	f3af 8000 	nop.w
   119c8:	1afd498d 	.word	0x1afd498d
   119cc:	00000007 	.word	0x00000007
   119d0:	3b9aca00 	.word	0x3b9aca00
   119d4:	20000a02 	.word	0x20000a02
   119d8:	01c9c37f 	.word	0x01c9c37f
   119dc:	026259ff 	.word	0x026259ff
   119e0:	00015e19 	.word	0x00015e19
   119e4:	000171f2 	.word	0x000171f2
   119e8:	00019597 	.word	0x00019597
   119ec:	00017241 	.word	0x00017241
   119f0:	00019ff0 	.word	0x00019ff0
   119f4:	200008e8 	.word	0x200008e8
   119f8:	8e89bed6 	.word	0x8e89bed6

000119fc <ll_conn_update>:
{
   119fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a00:	460c      	mov	r4, r1
   11a02:	4690      	mov	r8, r2
   11a04:	461d      	mov	r5, r3
   11a06:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   11a0a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   11a0e:	f7f9 fccf 	bl	b3b0 <connection_get>
	if (!conn) {
   11a12:	b330      	cbz	r0, 11a62 <ll_conn_update+0x66>
	if (!cmd) {
   11a14:	2c00      	cmp	r4, #0
   11a16:	d14a      	bne.n	11aae <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   11a18:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11a1c:	06d9      	lsls	r1, r3, #27
   11a1e:	d407      	bmi.n	11a30 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   11a20:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   11a24:	069a      	lsls	r2, r3, #26
   11a26:	d541      	bpl.n	11aac <ll_conn_update+0xb0>
		     (conn->llcp_features &
   11a28:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   11a2c:	079b      	lsls	r3, r3, #30
   11a2e:	d43d      	bmi.n	11aac <ll_conn_update+0xb0>
		} else if (conn->role) {
   11a30:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11a34:	2b00      	cmp	r3, #0
   11a36:	da17      	bge.n	11a68 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11a38:	201a      	movs	r0, #26
   11a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   11a3e:	428b      	cmp	r3, r1
   11a40:	d00f      	beq.n	11a62 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   11a42:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   11a46:	f003 0207 	and.w	r2, r3, #7
   11a4a:	2a03      	cmp	r2, #3
   11a4c:	d109      	bne.n	11a62 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   11a4e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   11a52:	b2db      	uxtb	r3, r3
   11a54:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   11a58:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   11a5c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   11a60:	e021      	b.n	11aa6 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11a62:	200c      	movs	r0, #12
   11a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   11a68:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   11a6c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   11a70:	429a      	cmp	r2, r3
   11a72:	d1f6      	bne.n	11a62 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11a74:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   11a78:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   11a7c:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   11a7e:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11a80:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   11a84:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   11a88:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   11a8a:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   11a8e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   11a92:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   11a96:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   11a9a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   11a9e:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   11aa2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   11aa6:	2000      	movs	r0, #0
   11aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   11aac:	2401      	movs	r4, #1
		cmd--;
   11aae:	3c01      	subs	r4, #1
		if (cmd) {
   11ab0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   11ab4:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   11ab8:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   11abc:	d1bf      	bne.n	11a3e <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   11abe:	4299      	cmp	r1, r3
   11ac0:	d1cf      	bne.n	11a62 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   11ac2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   11ac6:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   11aca:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   11ace:	b2db      	uxtb	r3, r3
   11ad0:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   11ad4:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   11ad6:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   11ada:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   11ade:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   11ae2:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   11ae6:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   11aea:	e7dc      	b.n	11aa6 <ll_conn_update+0xaa>

00011aec <ll_chm_update>:
{
   11aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   11af0:	4c1e      	ldr	r4, [pc, #120]	; (11b6c <ll_chm_update+0x80>)
   11af2:	4601      	mov	r1, r0
   11af4:	2205      	movs	r2, #5
{
   11af6:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   11af8:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11afc:	f7f0 f87e 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   11b00:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11b04:	2105      	movs	r1, #5
   11b06:	f7f6 fe51 	bl	87ac <util_ones_count_get>
	_radio.data_chan_count =
   11b0a:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   11b0e:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   11b12:	3c01      	subs	r4, #1
   11b14:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   11b16:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   11b18:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   11b1c:	2cff      	cmp	r4, #255	; 0xff
   11b1e:	d102      	bne.n	11b26 <ll_chm_update+0x3a>
	return 0;
   11b20:	2000      	movs	r0, #0
   11b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   11b26:	4620      	mov	r0, r4
   11b28:	f7f9 fc42 	bl	b3b0 <connection_get>
		if (!conn || conn->role) {
   11b2c:	4606      	mov	r6, r0
   11b2e:	b1b8      	cbz	r0, 11b60 <ll_chm_update+0x74>
   11b30:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11b34:	2b00      	cmp	r3, #0
   11b36:	db13      	blt.n	11b60 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   11b38:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11b3c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11b40:	429a      	cmp	r2, r3
   11b42:	d110      	bne.n	11b66 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   11b44:	2205      	movs	r2, #5
   11b46:	4629      	mov	r1, r5
   11b48:	3079      	adds	r0, #121	; 0x79
   11b4a:	f7f0 f857 	bl	1bfc <memcpy>
		conn->llcp_req++;
   11b4e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   11b52:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   11b56:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   11b58:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   11b5c:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   11b60:	3c01      	subs	r4, #1
   11b62:	b2e4      	uxtb	r4, r4
   11b64:	e7da      	b.n	11b1c <ll_chm_update+0x30>
			return 1;
   11b66:	2001      	movs	r0, #1
}
   11b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b6c:	200008e8 	.word	0x200008e8

00011b70 <ll_chm_get>:
{
   11b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b72:	460d      	mov	r5, r1
	conn = connection_get(handle);
   11b74:	f7f9 fc1c 	bl	b3b0 <connection_get>
	if (!conn) {
   11b78:	4604      	mov	r4, r0
   11b7a:	b160      	cbz	r0, 11b96 <ll_chm_get+0x26>
		conn->chm_update = 0;
   11b7c:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   11b7e:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   11b82:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   11b84:	2205      	movs	r2, #5
   11b86:	4631      	mov	r1, r6
   11b88:	4628      	mov	r0, r5
   11b8a:	f7f0 f837 	bl	1bfc <memcpy>
	} while (conn->chm_update);
   11b8e:	7f20      	ldrb	r0, [r4, #28]
   11b90:	2800      	cmp	r0, #0
   11b92:	d1f6      	bne.n	11b82 <ll_chm_get+0x12>
   11b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   11b96:	2001      	movs	r0, #1
}
   11b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011b9a <ll_feature_req_send>:
{
   11b9a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   11b9c:	f7f9 fc08 	bl	b3b0 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11ba0:	b168      	cbz	r0, 11bbe <ll_feature_req_send+0x24>
   11ba2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11ba6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11baa:	4293      	cmp	r3, r2
   11bac:	d107      	bne.n	11bbe <ll_feature_req_send+0x24>
	conn->llcp_req++;
   11bae:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   11bb0:	2204      	movs	r2, #4
	conn->llcp_req++;
   11bb2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   11bb6:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   11bba:	2000      	movs	r0, #0
   11bbc:	bd08      	pop	{r3, pc}
		return 1;
   11bbe:	2001      	movs	r0, #1
}
   11bc0:	bd08      	pop	{r3, pc}

00011bc2 <ll_version_ind_send>:
{
   11bc2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   11bc4:	f7f9 fbf4 	bl	b3b0 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11bc8:	b168      	cbz	r0, 11be6 <ll_version_ind_send+0x24>
   11bca:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11bce:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11bd2:	4293      	cmp	r3, r2
   11bd4:	d107      	bne.n	11be6 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   11bd6:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   11bd8:	2205      	movs	r2, #5
	conn->llcp_req++;
   11bda:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   11bde:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   11be2:	2000      	movs	r0, #0
   11be4:	bd08      	pop	{r3, pc}
		return 1;
   11be6:	2001      	movs	r0, #1
}
   11be8:	bd08      	pop	{r3, pc}

00011bea <ll_terminate_ind_send>:
{
   11bea:	b510      	push	{r4, lr}
   11bec:	460c      	mov	r4, r1
	conn = connection_get(handle);
   11bee:	f7f9 fbdf 	bl	b3b0 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   11bf2:	b160      	cbz	r0, 11c0e <ll_terminate_ind_send+0x24>
   11bf4:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   11bf8:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   11bfc:	4293      	cmp	r3, r2
   11bfe:	d106      	bne.n	11c0e <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   11c00:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   11c02:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   11c06:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   11c0a:	2000      	movs	r0, #0
   11c0c:	bd10      	pop	{r4, pc}
		return 1;
   11c0e:	2001      	movs	r0, #1
}
   11c10:	bd10      	pop	{r4, pc}

00011c12 <ll_tx_pwr_lvl_get>:
{
   11c12:	b510      	push	{r4, lr}
   11c14:	4614      	mov	r4, r2
	conn = connection_get(handle);
   11c16:	f7f9 fbcb 	bl	b3b0 <connection_get>
	if (!conn) {
   11c1a:	b110      	cbz	r0, 11c22 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   11c1c:	2000      	movs	r0, #0
   11c1e:	7020      	strb	r0, [r4, #0]
	return 0;
   11c20:	bd10      	pop	{r4, pc}
		return 1;
   11c22:	2001      	movs	r0, #1
}
   11c24:	bd10      	pop	{r4, pc}

00011c26 <ll_apto_get>:
{
   11c26:	b510      	push	{r4, lr}
   11c28:	460c      	mov	r4, r1
	conn = connection_get(handle);
   11c2a:	f7f9 fbc1 	bl	b3b0 <connection_get>
	if (!conn) {
   11c2e:	b160      	cbz	r0, 11c4a <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   11c30:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   11c32:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   11c36:	435a      	muls	r2, r3
   11c38:	237d      	movs	r3, #125	; 0x7d
   11c3a:	4353      	muls	r3, r2
	return 0;
   11c3c:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   11c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11c42:	fb93 f3f2 	sdiv	r3, r3, r2
   11c46:	8023      	strh	r3, [r4, #0]
	return 0;
   11c48:	bd10      	pop	{r4, pc}
		return 1;
   11c4a:	2001      	movs	r0, #1
}
   11c4c:	bd10      	pop	{r4, pc}

00011c4e <ll_apto_set>:
{
   11c4e:	b510      	push	{r4, lr}
   11c50:	460c      	mov	r4, r1
	conn = connection_get(handle);
   11c52:	f7f9 fbad 	bl	b3b0 <connection_get>
	if (!conn) {
   11c56:	b170      	cbz	r0, 11c76 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   11c58:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   11c5a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11c5e:	4353      	muls	r3, r2
   11c60:	f242 7110 	movw	r1, #10000	; 0x2710
   11c64:	fb01 3404 	mla	r4, r1, r4, r3
   11c68:	3c01      	subs	r4, #1
   11c6a:	fb94 f4f3 	sdiv	r4, r4, r3
   11c6e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   11c72:	2000      	movs	r0, #0
   11c74:	bd10      	pop	{r4, pc}
		return 1;
   11c76:	2001      	movs	r0, #1
}
   11c78:	bd10      	pop	{r4, pc}

00011c7a <ll_length_req_send>:
{
   11c7a:	b570      	push	{r4, r5, r6, lr}
   11c7c:	460e      	mov	r6, r1
   11c7e:	4615      	mov	r5, r2
	conn = connection_get(handle);
   11c80:	f7f9 fb96 	bl	b3b0 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11c84:	b1d0      	cbz	r0, 11cbc <ll_length_req_send+0x42>
   11c86:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11c8a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11c8e:	429a      	cmp	r2, r3
   11c90:	d114      	bne.n	11cbc <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   11c92:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11c96:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   11c9a:	4293      	cmp	r3, r2
   11c9c:	d10e      	bne.n	11cbc <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11c9e:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   11ca2:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   11ca6:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11ca8:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   11cac:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11cb0:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   11cb4:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   11cb8:	2000      	movs	r0, #0
   11cba:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   11cbc:	2001      	movs	r0, #1
}
   11cbe:	bd70      	pop	{r4, r5, r6, pc}

00011cc0 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   11cc0:	4b03      	ldr	r3, [pc, #12]	; (11cd0 <ll_length_default_get+0x10>)
   11cc2:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   11cc6:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   11cc8:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   11ccc:	800b      	strh	r3, [r1, #0]
   11cce:	4770      	bx	lr
   11cd0:	200008e8 	.word	0x200008e8

00011cd4 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   11cd4:	4b03      	ldr	r3, [pc, #12]	; (11ce4 <ll_length_default_set+0x10>)
   11cd6:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   11cda:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   11cde:	2000      	movs	r0, #0
   11ce0:	4770      	bx	lr
   11ce2:	bf00      	nop
   11ce4:	200008e8 	.word	0x200008e8

00011ce8 <ll_length_max_get>:
{
   11ce8:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   11cea:	241b      	movs	r4, #27
   11cec:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   11cee:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11cf2:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   11cf4:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   11cf6:	8018      	strh	r0, [r3, #0]
   11cf8:	bd10      	pop	{r4, pc}

00011cfa <ll_phy_get>:
{
   11cfa:	b538      	push	{r3, r4, r5, lr}
   11cfc:	460d      	mov	r5, r1
   11cfe:	4614      	mov	r4, r2
	conn = connection_get(handle);
   11d00:	f7f9 fb56 	bl	b3b0 <connection_get>
	if (!conn) {
   11d04:	b158      	cbz	r0, 11d1e <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   11d06:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   11d0a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11d0e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   11d10:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   11d14:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11d18:	7023      	strb	r3, [r4, #0]
	return 0;
   11d1a:	2000      	movs	r0, #0
   11d1c:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   11d1e:	2001      	movs	r0, #1
}
   11d20:	bd38      	pop	{r3, r4, r5, pc}
	...

00011d24 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   11d24:	4b03      	ldr	r3, [pc, #12]	; (11d34 <ll_phy_default_set+0x10>)
   11d26:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   11d2a:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   11d2e:	2000      	movs	r0, #0
   11d30:	4770      	bx	lr
   11d32:	bf00      	nop
   11d34:	200008e8 	.word	0x200008e8

00011d38 <ll_phy_req_send>:
{
   11d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11d3c:	4689      	mov	r9, r1
   11d3e:	4690      	mov	r8, r2
   11d40:	461f      	mov	r7, r3
	conn = connection_get(handle);
   11d42:	f7f9 fb35 	bl	b3b0 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11d46:	b320      	cbz	r0, 11d92 <ll_phy_req_send+0x5a>
   11d48:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11d4c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11d50:	429a      	cmp	r2, r3
   11d52:	d11e      	bne.n	11d92 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   11d54:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11d58:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   11d5c:	429d      	cmp	r5, r3
   11d5e:	d118      	bne.n	11d92 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   11d60:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   11d64:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   11d68:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   11d6c:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   11d70:	f046 0102 	orr.w	r1, r6, #2
   11d74:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   11d78:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   11d7a:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   11d7c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   11d80:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   11d84:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   11d88:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   11d8c:	2000      	movs	r0, #0
   11d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   11d92:	2001      	movs	r0, #1
}
   11d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011d98 <ll_rx_get>:
{
   11d98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11d9c:	4605      	mov	r5, r0
   11d9e:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   11da0:	4918      	ldr	r1, [pc, #96]	; (11e04 <ll_rx_get+0x6c>)
   11da2:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   11da6:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   11daa:	4293      	cmp	r3, r2
   11dac:	460f      	mov	r7, r1
   11dae:	d01f      	beq.n	11df0 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   11db0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   11db4:	f201 1177 	addw	r1, r1, #375	; 0x177
   11db8:	f898 2000 	ldrb.w	r2, [r8]
   11dbc:	f7f9 faae 	bl	b31c <tx_cmplt_get>
		if (!cmplt) {
   11dc0:	4604      	mov	r4, r0
   11dc2:	b9e0      	cbnz	r0, 11dfe <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   11dc4:	ae02      	add	r6, sp, #8
   11dc6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   11dca:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   11dce:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   11dd2:	4631      	mov	r1, r6
   11dd4:	f10d 0006 	add.w	r0, sp, #6
   11dd8:	f7f9 faa0 	bl	b31c <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   11ddc:	b934      	cbnz	r4, 11dec <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   11dde:	b928      	cbnz	r0, 11dec <ll_rx_get+0x54>
			*node_rx = _node_rx;
   11de0:	f8c5 8000 	str.w	r8, [r5]
}
   11de4:	4620      	mov	r0, r4
   11de6:	b002      	add	sp, #8
   11de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   11dec:	4604      	mov	r4, r0
   11dee:	e7ee      	b.n	11dce <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   11df0:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   11df4:	f201 1177 	addw	r1, r1, #375	; 0x177
   11df8:	f7f9 fa90 	bl	b31c <tx_cmplt_get>
   11dfc:	4604      	mov	r4, r0
		*node_rx = NULL;
   11dfe:	2300      	movs	r3, #0
   11e00:	602b      	str	r3, [r5, #0]
   11e02:	e7ef      	b.n	11de4 <ll_rx_get+0x4c>
   11e04:	200008e8 	.word	0x200008e8

00011e08 <ll_rx_mem_release>:
{
   11e08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   11e0c:	4c1c      	ldr	r4, [pc, #112]	; (11e80 <ll_rx_mem_release+0x78>)
{
   11e0e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   11e10:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11e12:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   11e16:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   11e1a:	b930      	cbnz	r0, 11e2a <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   11e1c:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   11e1e:	20ff      	movs	r0, #255	; 0xff
}
   11e20:	b002      	add	sp, #8
   11e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   11e26:	f7f9 b9a3 	b.w	b170 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   11e2a:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   11e2c:	f8d0 8000 	ldr.w	r8, [r0]
   11e30:	2a0c      	cmp	r2, #12
   11e32:	d807      	bhi.n	11e44 <ll_rx_mem_release+0x3c>
   11e34:	2301      	movs	r3, #1
   11e36:	4093      	lsls	r3, r2
   11e38:	f641 727e 	movw	r2, #8062	; 0x1f7e
   11e3c:	4213      	tst	r3, r2
   11e3e:	d110      	bne.n	11e62 <ll_rx_mem_release+0x5a>
   11e40:	061b      	lsls	r3, r3, #24
   11e42:	d413      	bmi.n	11e6c <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   11e44:	4b0f      	ldr	r3, [pc, #60]	; (11e84 <ll_rx_mem_release+0x7c>)
   11e46:	9301      	str	r3, [sp, #4]
   11e48:	9300      	str	r3, [sp, #0]
   11e4a:	4a0f      	ldr	r2, [pc, #60]	; (11e88 <ll_rx_mem_release+0x80>)
   11e4c:	4b0f      	ldr	r3, [pc, #60]	; (11e8c <ll_rx_mem_release+0x84>)
   11e4e:	4910      	ldr	r1, [pc, #64]	; (11e90 <ll_rx_mem_release+0x88>)
   11e50:	4810      	ldr	r0, [pc, #64]	; (11e94 <ll_rx_mem_release+0x8c>)
   11e52:	f7ef f89b 	bl	f8c <printk>
   11e56:	4040      	eors	r0, r0
   11e58:	f380 8811 	msr	BASEPRI, r0
   11e5c:	f04f 0004 	mov.w	r0, #4
   11e60:	df02      	svc	2
			mem_release(_node_rx_free,
   11e62:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   11e64:	f7f6 fb11 	bl	848a <mem_release>
{
   11e68:	4640      	mov	r0, r8
   11e6a:	e7d6      	b.n	11e1a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11e6c:	88c2      	ldrh	r2, [r0, #6]
   11e6e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   11e72:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11e76:	f7f6 fb23 	bl	84c0 <mem_get>
			mem_release(conn, &_radio.conn_free);
   11e7a:	4639      	mov	r1, r7
   11e7c:	e7f2      	b.n	11e64 <ll_rx_mem_release+0x5c>
   11e7e:	bf00      	nop
   11e80:	20000a18 	.word	0x20000a18
   11e84:	00015e19 	.word	0x00015e19
   11e88:	000171f2 	.word	0x000171f2
   11e8c:	0001973b 	.word	0x0001973b
   11e90:	00017241 	.word	0x00017241
   11e94:	00017166 	.word	0x00017166

00011e98 <do_radio_rx_fc_set>:
	if (req == ack) {
   11e98:	4291      	cmp	r1, r2
{
   11e9a:	b510      	push	{r4, lr}
   11e9c:	4b14      	ldr	r3, [pc, #80]	; (11ef0 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   11e9e:	d119      	bne.n	11ed4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   11ea0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   11ea4:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   11ea8:	4294      	cmp	r4, r2
   11eaa:	d111      	bne.n	11ed0 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   11eac:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   11eae:	bf14      	ite	ne
   11eb0:	460a      	movne	r2, r1
   11eb2:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   11eb4:	3a01      	subs	r2, #1
   11eb6:	b2d2      	uxtb	r2, r2
   11eb8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   11ebc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   11ec0:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   11ec4:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   11ec8:	4291      	cmp	r1, r2
   11eca:	d00f      	beq.n	11eec <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   11ecc:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   11ed0:	2001      	movs	r0, #1
   11ed2:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   11ed4:	b929      	cbnz	r1, 11ee2 <do_radio_rx_fc_set+0x4a>
   11ed6:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   11eda:	1a18      	subs	r0, r3, r0
   11edc:	bf18      	it	ne
   11ede:	2001      	movne	r0, #1
   11ee0:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   11ee2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   11ee6:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   11eea:	e7f6      	b.n	11eda <do_radio_rx_fc_set+0x42>
	return 0;
   11eec:	2000      	movs	r0, #0
}
   11eee:	bd10      	pop	{r4, pc}
   11ef0:	200008e8 	.word	0x200008e8

00011ef4 <radio_rx_fc_set>:
{
   11ef4:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   11ef6:	4b14      	ldr	r3, [pc, #80]	; (11f48 <radio_rx_fc_set+0x54>)
   11ef8:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   11efc:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   11efe:	b302      	cbz	r2, 11f42 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   11f00:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   11f04:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   11f06:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   11f0a:	b135      	cbz	r5, 11f1a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   11f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11f10:	4298      	cmp	r0, r3
   11f12:	d016      	beq.n	11f42 <radio_rx_fc_set+0x4e>
}
   11f14:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   11f16:	f7ff bfbf 	b.w	11e98 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   11f1a:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   11f1e:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   11f22:	42a0      	cmp	r0, r4
   11f24:	d10d      	bne.n	11f42 <radio_rx_fc_set+0x4e>
   11f26:	4291      	cmp	r1, r2
   11f28:	d00b      	beq.n	11f42 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11f2a:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   11f2e:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11f32:	42a0      	cmp	r0, r4
   11f34:	d005      	beq.n	11f42 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   11f36:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11f3a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   11f3c:	bf08      	it	eq
   11f3e:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   11f42:	2000      	movs	r0, #0
   11f44:	bc30      	pop	{r4, r5}
   11f46:	4770      	bx	lr
   11f48:	200008e8 	.word	0x200008e8

00011f4c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   11f4c:	4801      	ldr	r0, [pc, #4]	; (11f54 <ll_tx_mem_acquire+0x8>)
   11f4e:	f7f6 ba82 	b.w	8456 <mem_acquire>
   11f52:	bf00      	nop
   11f54:	20000a4c 	.word	0x20000a4c

00011f58 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   11f58:	4901      	ldr	r1, [pc, #4]	; (11f60 <ll_tx_mem_release+0x8>)
   11f5a:	f7f6 ba96 	b.w	848a <mem_release>
   11f5e:	bf00      	nop
   11f60:	20000a4c 	.word	0x20000a4c

00011f64 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   11f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   11f66:	4d33      	ldr	r5, [pc, #204]	; (12034 <ll_tx_mem_enqueue+0xd0>)
   11f68:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   11f6c:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   11f70:	3401      	adds	r4, #1
{
   11f72:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   11f74:	b2e4      	uxtb	r4, r4
{
   11f76:	4607      	mov	r7, r0
   11f78:	460e      	mov	r6, r1
		last = 0;
   11f7a:	42a3      	cmp	r3, r4
   11f7c:	bf08      	it	eq
   11f7e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   11f80:	f7f9 fa16 	bl	b3b0 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   11f84:	2800      	cmp	r0, #0
   11f86:	d052      	beq.n	1202e <ll_tx_mem_enqueue+0xca>
   11f88:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   11f8c:	429c      	cmp	r4, r3
   11f8e:	d04e      	beq.n	1202e <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   11f90:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   11f94:	7972      	ldrb	r2, [r6, #5]
   11f96:	3b07      	subs	r3, #7
   11f98:	429a      	cmp	r2, r3
   11f9a:	d90e      	bls.n	11fba <ll_tx_mem_enqueue+0x56>
   11f9c:	4b26      	ldr	r3, [pc, #152]	; (12038 <ll_tx_mem_enqueue+0xd4>)
   11f9e:	9301      	str	r3, [sp, #4]
   11fa0:	9300      	str	r3, [sp, #0]
   11fa2:	4a26      	ldr	r2, [pc, #152]	; (1203c <ll_tx_mem_enqueue+0xd8>)
   11fa4:	4b26      	ldr	r3, [pc, #152]	; (12040 <ll_tx_mem_enqueue+0xdc>)
   11fa6:	4927      	ldr	r1, [pc, #156]	; (12044 <ll_tx_mem_enqueue+0xe0>)
   11fa8:	4827      	ldr	r0, [pc, #156]	; (12048 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11faa:	f7ee ffef 	bl	f8c <printk>
   11fae:	4040      	eors	r0, r0
   11fb0:	f380 8811 	msr	BASEPRI, r0
   11fb4:	f04f 0004 	mov.w	r0, #4
   11fb8:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   11fba:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   11fbe:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   11fc2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   11fc6:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   11fca:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   11fcc:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   11fd0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11fd4:	2b00      	cmp	r3, #0
   11fd6:	db02      	blt.n	11fde <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   11fd8:	2000      	movs	r0, #0
}
   11fda:	b009      	add	sp, #36	; 0x24
   11fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   11fde:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   11fe0:	2b00      	cmp	r3, #0
   11fe2:	d0f9      	beq.n	11fd8 <ll_tx_mem_enqueue+0x74>
   11fe4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   11fe8:	f012 0302 	ands.w	r3, r2, #2
   11fec:	d1f4      	bne.n	11fd8 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   11fee:	f042 0202 	orr.w	r2, r2, #2
   11ff2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   11ff6:	f890 2020 	ldrb.w	r2, [r0, #32]
   11ffa:	4914      	ldr	r1, [pc, #80]	; (1204c <ll_tx_mem_enqueue+0xe8>)
   11ffc:	9105      	str	r1, [sp, #20]
   11ffe:	3207      	adds	r2, #7
   12000:	2101      	movs	r1, #1
   12002:	9006      	str	r0, [sp, #24]
   12004:	9304      	str	r3, [sp, #16]
   12006:	9103      	str	r1, [sp, #12]
   12008:	9302      	str	r3, [sp, #8]
   1200a:	9301      	str	r3, [sp, #4]
   1200c:	9300      	str	r3, [sp, #0]
   1200e:	4618      	mov	r0, r3
   12010:	b2d2      	uxtb	r2, r2
   12012:	2103      	movs	r1, #3
   12014:	f7f7 f8f8 	bl	9208 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12018:	f030 0302 	bics.w	r3, r0, #2
   1201c:	d0dc      	beq.n	11fd8 <ll_tx_mem_enqueue+0x74>
   1201e:	4b06      	ldr	r3, [pc, #24]	; (12038 <ll_tx_mem_enqueue+0xd4>)
   12020:	9301      	str	r3, [sp, #4]
   12022:	9300      	str	r3, [sp, #0]
   12024:	4a05      	ldr	r2, [pc, #20]	; (1203c <ll_tx_mem_enqueue+0xd8>)
   12026:	4b06      	ldr	r3, [pc, #24]	; (12040 <ll_tx_mem_enqueue+0xdc>)
   12028:	4906      	ldr	r1, [pc, #24]	; (12044 <ll_tx_mem_enqueue+0xe0>)
   1202a:	4809      	ldr	r0, [pc, #36]	; (12050 <ll_tx_mem_enqueue+0xec>)
   1202c:	e7bd      	b.n	11faa <ll_tx_mem_enqueue+0x46>
		return 1;
   1202e:	2001      	movs	r0, #1
   12030:	e7d3      	b.n	11fda <ll_tx_mem_enqueue+0x76>
   12032:	bf00      	nop
   12034:	200008e8 	.word	0x200008e8
   12038:	00015e19 	.word	0x00015e19
   1203c:	000171f2 	.word	0x000171f2
   12040:	00019769 	.word	0x00019769
   12044:	00017241 	.word	0x00017241
   12048:	00019d4f 	.word	0x00019d4f
   1204c:	0000c10d 	.word	0x0000c10d
   12050:	000197a1 	.word	0x000197a1

00012054 <ll_enc_req_send>:
{
   12054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12058:	4607      	mov	r7, r0
   1205a:	4688      	mov	r8, r1
   1205c:	4616      	mov	r6, r2
   1205e:	4699      	mov	r9, r3
	conn = connection_get(handle);
   12060:	f7f9 f9a6 	bl	b3b0 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   12064:	4605      	mov	r5, r0
   12066:	b910      	cbnz	r0, 1206e <ll_enc_req_send+0x1a>
			return 1;
   12068:	2001      	movs	r0, #1
   1206a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1206e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   12072:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   12076:	429a      	cmp	r2, r3
   12078:	d1f6      	bne.n	12068 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1207a:	f7ff ff67 	bl	11f4c <ll_tx_mem_acquire>
	if (node_tx) {
   1207e:	4604      	mov	r4, r0
   12080:	2800      	cmp	r0, #0
   12082:	d0f1      	beq.n	12068 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   12084:	2210      	movs	r2, #16
   12086:	4649      	mov	r1, r9
   12088:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1208c:	f7ef fdb6 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   12090:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12094:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   12098:	d124      	bne.n	120e4 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1209a:	7923      	ldrb	r3, [r4, #4]
   1209c:	f043 0303 	orr.w	r3, r3, #3
   120a0:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   120a2:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   120a4:	2208      	movs	r2, #8
			pdu_data_tx->len =
   120a6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   120a8:	2303      	movs	r3, #3
   120aa:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   120ac:	4641      	mov	r1, r8
   120ae:	18a0      	adds	r0, r4, r2
   120b0:	f7ef fda4 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
   120b4:	7833      	ldrb	r3, [r6, #0]
   120b6:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   120b8:	7873      	ldrb	r3, [r6, #1]
   120ba:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   120bc:	2108      	movs	r1, #8
   120be:	f104 0012 	add.w	r0, r4, #18
   120c2:	f7f7 f9ff 	bl	94c4 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   120c6:	2104      	movs	r1, #4
   120c8:	f104 001a 	add.w	r0, r4, #26
   120cc:	f7f7 f9fa 	bl	94c4 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   120d0:	4621      	mov	r1, r4
   120d2:	4638      	mov	r0, r7
   120d4:	f7ff ff46 	bl	11f64 <ll_tx_mem_enqueue>
   120d8:	2601      	movs	r6, #1
   120da:	b1d0      	cbz	r0, 12112 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   120dc:	4620      	mov	r0, r4
   120de:	f7ff ff3b 	bl	11f58 <ll_tx_mem_release>
   120e2:	e7c1      	b.n	12068 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   120e4:	2b30      	cmp	r3, #48	; 0x30
   120e6:	d1f9      	bne.n	120dc <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   120e8:	2208      	movs	r2, #8
   120ea:	4641      	mov	r1, r8
   120ec:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   120f0:	f7ef fd84 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   120f4:	7833      	ldrb	r3, [r6, #0]
   120f6:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   120fa:	7873      	ldrb	r3, [r6, #1]
   120fc:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   12100:	7923      	ldrb	r3, [r4, #4]
   12102:	f043 0303 	orr.w	r3, r3, #3
   12106:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   12108:	2301      	movs	r3, #1
   1210a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1210c:	230a      	movs	r3, #10
   1210e:	71e3      	strb	r3, [r4, #7]
   12110:	e7de      	b.n	120d0 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   12112:	2303      	movs	r3, #3
   12114:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   12118:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   1211c:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   12120:	3301      	adds	r3, #1
   12122:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   12126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1212a:	0000      	movs	r0, r0
   1212c:	0000      	movs	r0, r0
	...

00012130 <radio_scan_enable>:
{
   12130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   12134:	4c68      	ldr	r4, [pc, #416]	; (122d8 <radio_scan_enable+0x1a8>)
   12136:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   1213a:	b08e      	sub	sp, #56	; 0x38
   1213c:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   1213e:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12142:	f04f 0302 	mov.w	r3, #2
{
   12146:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12148:	930b      	str	r3, [sp, #44]	; 0x2c
{
   1214a:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   1214c:	d003      	beq.n	12156 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1214e:	200c      	movs	r0, #12
}
   12150:	b00e      	add	sp, #56	; 0x38
   12152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   12156:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   1215a:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   1215e:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   12162:	0840      	lsrs	r0, r0, #1
   12164:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   12168:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   1216c:	f360 0200 	bfi	r2, r0, #0, #1
   12170:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   12174:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   12178:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   1217c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   12180:	2206      	movs	r2, #6
   12182:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   12186:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1218a:	4e54      	ldr	r6, [pc, #336]	; (122dc <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1218c:	f7ef fd36 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   12190:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   12194:	f04f 0991 	mov.w	r9, #145	; 0x91
   12198:	fba2 0106 	umull	r0, r1, r2, r6
   1219c:	fb09 1102 	mla	r1, r9, r2, r1
   121a0:	a34b      	add	r3, pc, #300	; (adr r3, 122d0 <radio_scan_enable+0x1a0>)
   121a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   121a6:	f7ee f835 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   121aa:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   121ae:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   121b2:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   121b6:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   121ba:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   121be:	b2ba      	uxth	r2, r7
   121c0:	fba2 6706 	umull	r6, r7, r2, r6
   121c4:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   121c8:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   121cc:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   121ce:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   121d2:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   121d6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   121da:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   121de:	a33c      	add	r3, pc, #240	; (adr r3, 122d0 <radio_scan_enable+0x1a0>)
   121e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   121e4:	4630      	mov	r0, r6
   121e6:	4639      	mov	r1, r7
   121e8:	f7ee f814 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   121ec:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   121f0:	459a      	cmp	sl, r3
   121f2:	bf94      	ite	ls
   121f4:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   121f8:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   121fc:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   12200:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   12202:	bf38      	it	cc
   12204:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   12208:	f7f7 f91c 	bl	9444 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   1220c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   12210:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   12212:	2b00      	cmp	r3, #0
   12214:	d045      	beq.n	122a2 <radio_scan_enable+0x172>
		us_offset = 0;
   12216:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   12218:	980c      	ldr	r0, [sp, #48]	; 0x30
   1221a:	4931      	ldr	r1, [pc, #196]	; (122e0 <radio_scan_enable+0x1b0>)
   1221c:	a32c      	add	r3, pc, #176	; (adr r3, 122d0 <radio_scan_enable+0x1a0>)
   1221e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12222:	fba0 0101 	umull	r0, r1, r0, r1
   12226:	f7ed fff5 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1222a:	ab0b      	add	r3, sp, #44	; 0x2c
   1222c:	9308      	str	r3, [sp, #32]
   1222e:	4b2d      	ldr	r3, [pc, #180]	; (122e4 <radio_scan_enable+0x1b4>)
   12230:	9307      	str	r3, [sp, #28]
   12232:	4b2d      	ldr	r3, [pc, #180]	; (122e8 <radio_scan_enable+0x1b8>)
   12234:	9305      	str	r3, [sp, #20]
   12236:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   1223a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1223e:	4443      	add	r3, r8
   12240:	2500      	movs	r5, #0
   12242:	4482      	add	sl, r0
   12244:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   12246:	4630      	mov	r0, r6
   12248:	a321      	add	r3, pc, #132	; (adr r3, 122d0 <radio_scan_enable+0x1a0>)
   1224a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1224e:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12250:	9506      	str	r5, [sp, #24]
   12252:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   12254:	f7ed ffde 	bl	214 <__aeabi_uldivmod>
   12258:	4610      	mov	r0, r2
   1225a:	4619      	mov	r1, r3
   1225c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12260:	2300      	movs	r3, #0
   12262:	f7ed ffd7 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12266:	e88d 0220 	stmia.w	sp, {r5, r9}
   1226a:	9002      	str	r0, [sp, #8]
   1226c:	4653      	mov	r3, sl
   1226e:	2206      	movs	r2, #6
   12270:	2103      	movs	r1, #3
   12272:	4628      	mov	r0, r5
   12274:	f7f6 ff78 	bl	9168 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   12278:	2802      	cmp	r0, #2
   1227a:	d023      	beq.n	122c4 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1227c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1227e:	2d00      	cmp	r5, #0
   12280:	f47f af65 	bne.w	1214e <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   12284:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   12288:	f043 0301 	orr.w	r3, r3, #1
   1228c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   12290:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   12294:	2b00      	cmp	r3, #0
   12296:	db02      	blt.n	1229e <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   12298:	2002      	movs	r0, #2
   1229a:	f000 fea3 	bl	12fe4 <ll_adv_scan_state_cb>
	return 0;
   1229e:	4628      	mov	r0, r5
   122a0:	e756      	b.n	12150 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   122a2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   122a6:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   122a8:	aa0d      	add	r2, sp, #52	; 0x34
   122aa:	ab0c      	add	r3, sp, #48	; 0x30
   122ac:	4441      	add	r1, r8
   122ae:	2003      	movs	r0, #3
   122b0:	f7f9 fc86 	bl	bbc0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   122b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   122b6:	2b00      	cmp	r3, #0
   122b8:	d0ae      	beq.n	12218 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   122ba:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   122be:	e7ab      	b.n	12218 <radio_scan_enable+0xe8>
			cpu_sleep();
   122c0:	f7f8 fe7c 	bl	afbc <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   122c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122c6:	2b02      	cmp	r3, #2
   122c8:	d0fa      	beq.n	122c0 <radio_scan_enable+0x190>
   122ca:	e7d7      	b.n	1227c <radio_scan_enable+0x14c>
   122cc:	f3af 8000 	nop.w
   122d0:	1afd498d 	.word	0x1afd498d
   122d4:	00000007 	.word	0x00000007
   122d8:	200008e8 	.word	0x200008e8
   122dc:	84e72a00 	.word	0x84e72a00
   122e0:	3b9aca00 	.word	0x3b9aca00
   122e4:	0000b001 	.word	0x0000b001
   122e8:	0000cf2d 	.word	0x0000cf2d

000122ec <radio_scan_disable>:
{
   122ec:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   122ee:	2104      	movs	r1, #4
   122f0:	2006      	movs	r0, #6
   122f2:	f7f9 f873 	bl	b3dc <role_disable>
	if (!status) {
   122f6:	4605      	mov	r5, r0
   122f8:	b9e8      	cbnz	r0, 12336 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   122fa:	4c10      	ldr	r4, [pc, #64]	; (1233c <radio_scan_disable+0x50>)
   122fc:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   12300:	f360 0200 	bfi	r2, r0, #0, #1
   12304:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   12308:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   1230c:	2a00      	cmp	r2, #0
   1230e:	db01      	blt.n	12314 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   12310:	f000 fe68 	bl	12fe4 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   12314:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   12318:	b15e      	cbz	r6, 12332 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   1231a:	2300      	movs	r3, #0
   1231c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   12320:	4907      	ldr	r1, [pc, #28]	; (12340 <radio_scan_disable+0x54>)
   12322:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   12326:	f7f6 f8b0 	bl	848a <mem_release>
			mem_release(conn, &_radio.conn_free);
   1232a:	4906      	ldr	r1, [pc, #24]	; (12344 <radio_scan_disable+0x58>)
   1232c:	4630      	mov	r0, r6
   1232e:	f7f6 f8ac 	bl	848a <mem_release>
}
   12332:	4628      	mov	r0, r5
   12334:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   12336:	250c      	movs	r5, #12
   12338:	e7fb      	b.n	12332 <radio_scan_disable+0x46>
   1233a:	bf00      	nop
   1233c:	200008e8 	.word	0x200008e8
   12340:	20000a30 	.word	0x20000a30
   12344:	200009f4 	.word	0x200009f4

00012348 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   12348:	4b03      	ldr	r3, [pc, #12]	; (12358 <ll_connect_disable+0x10>)
   1234a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1234e:	b10b      	cbz	r3, 12354 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   12350:	f7ff bfcc 	b.w	122ec <radio_scan_disable>
}
   12354:	200c      	movs	r0, #12
   12356:	4770      	bx	lr
   12358:	200008e8 	.word	0x200008e8

0001235c <ll_rx_dequeue>:
{
   1235c:	b530      	push	{r4, r5, lr}
   1235e:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   12360:	4d47      	ldr	r5, [pc, #284]	; (12480 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   12362:	aa04      	add	r2, sp, #16
   12364:	2300      	movs	r3, #0
   12366:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1236a:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   1236e:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   12372:	f7f6 f8d9 	bl	8528 <memq_dequeue>
   12376:	462c      	mov	r4, r5
	LL_ASSERT(link);
   12378:	b970      	cbnz	r0, 12398 <ll_rx_dequeue+0x3c>
   1237a:	4b42      	ldr	r3, [pc, #264]	; (12484 <ll_rx_dequeue+0x128>)
   1237c:	9301      	str	r3, [sp, #4]
   1237e:	9300      	str	r3, [sp, #0]
   12380:	4a41      	ldr	r2, [pc, #260]	; (12488 <ll_rx_dequeue+0x12c>)
   12382:	4b42      	ldr	r3, [pc, #264]	; (1248c <ll_rx_dequeue+0x130>)
   12384:	4942      	ldr	r1, [pc, #264]	; (12490 <ll_rx_dequeue+0x134>)
   12386:	4843      	ldr	r0, [pc, #268]	; (12494 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   12388:	f7ee fe00 	bl	f8c <printk>
   1238c:	4040      	eors	r0, r0
   1238e:	f380 8811 	msr	BASEPRI, r0
   12392:	f04f 0004 	mov.w	r0, #4
   12396:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   12398:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   1239c:	f7f6 f875 	bl	848a <mem_release>
	switch (node_rx->hdr.type) {
   123a0:	9a03      	ldr	r2, [sp, #12]
   123a2:	7911      	ldrb	r1, [r2, #4]
   123a4:	290c      	cmp	r1, #12
   123a6:	d807      	bhi.n	123b8 <ll_rx_dequeue+0x5c>
   123a8:	2301      	movs	r3, #1
   123aa:	408b      	lsls	r3, r1
   123ac:	f641 707e 	movw	r0, #8062	; 0x1f7e
   123b0:	4203      	tst	r3, r0
   123b2:	d109      	bne.n	123c8 <ll_rx_dequeue+0x6c>
   123b4:	0618      	lsls	r0, r3, #24
   123b6:	d419      	bmi.n	123ec <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   123b8:	4b32      	ldr	r3, [pc, #200]	; (12484 <ll_rx_dequeue+0x128>)
   123ba:	9301      	str	r3, [sp, #4]
   123bc:	9300      	str	r3, [sp, #0]
   123be:	4a32      	ldr	r2, [pc, #200]	; (12488 <ll_rx_dequeue+0x12c>)
   123c0:	4b32      	ldr	r3, [pc, #200]	; (1248c <ll_rx_dequeue+0x130>)
   123c2:	4933      	ldr	r1, [pc, #204]	; (12490 <ll_rx_dequeue+0x134>)
   123c4:	4834      	ldr	r0, [pc, #208]	; (12498 <ll_rx_dequeue+0x13c>)
   123c6:	e7df      	b.n	12388 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   123c8:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   123cc:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   123d0:	3801      	subs	r0, #1
   123d2:	4283      	cmp	r3, r0
   123d4:	db07      	blt.n	123e6 <ll_rx_dequeue+0x8a>
   123d6:	4b2b      	ldr	r3, [pc, #172]	; (12484 <ll_rx_dequeue+0x128>)
   123d8:	9301      	str	r3, [sp, #4]
   123da:	9300      	str	r3, [sp, #0]
   123dc:	4a2a      	ldr	r2, [pc, #168]	; (12488 <ll_rx_dequeue+0x12c>)
   123de:	4b2b      	ldr	r3, [pc, #172]	; (1248c <ll_rx_dequeue+0x130>)
   123e0:	492b      	ldr	r1, [pc, #172]	; (12490 <ll_rx_dequeue+0x134>)
   123e2:	482e      	ldr	r0, [pc, #184]	; (1249c <ll_rx_dequeue+0x140>)
   123e4:	e7d0      	b.n	12388 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   123e6:	3301      	adds	r3, #1
   123e8:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   123ec:	2906      	cmp	r1, #6
   123ee:	d136      	bne.n	1245e <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   123f0:	7ad3      	ldrb	r3, [r2, #11]
   123f2:	2b3c      	cmp	r3, #60	; 0x3c
   123f4:	d00d      	beq.n	12412 <ll_rx_dequeue+0xb6>
   123f6:	7b12      	ldrb	r2, [r2, #12]
   123f8:	b9e2      	cbnz	r2, 12434 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   123fa:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   123fe:	07d9      	lsls	r1, r3, #31
   12400:	d42f      	bmi.n	12462 <ll_rx_dequeue+0x106>
   12402:	4b20      	ldr	r3, [pc, #128]	; (12484 <ll_rx_dequeue+0x128>)
   12404:	9301      	str	r3, [sp, #4]
   12406:	9300      	str	r3, [sp, #0]
   12408:	4a1f      	ldr	r2, [pc, #124]	; (12488 <ll_rx_dequeue+0x12c>)
   1240a:	4b20      	ldr	r3, [pc, #128]	; (1248c <ll_rx_dequeue+0x130>)
   1240c:	4920      	ldr	r1, [pc, #128]	; (12490 <ll_rx_dequeue+0x134>)
   1240e:	4824      	ldr	r0, [pc, #144]	; (124a0 <ll_rx_dequeue+0x144>)
   12410:	e7ba      	b.n	12388 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   12412:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   12414:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   12418:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   1241c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   12420:	2b00      	cmp	r3, #0
   12422:	db09      	blt.n	12438 <ll_rx_dequeue+0xdc>
   12424:	4b17      	ldr	r3, [pc, #92]	; (12484 <ll_rx_dequeue+0x128>)
   12426:	9301      	str	r3, [sp, #4]
   12428:	9300      	str	r3, [sp, #0]
   1242a:	4a17      	ldr	r2, [pc, #92]	; (12488 <ll_rx_dequeue+0x12c>)
   1242c:	4b17      	ldr	r3, [pc, #92]	; (1248c <ll_rx_dequeue+0x130>)
   1242e:	4918      	ldr	r1, [pc, #96]	; (12490 <ll_rx_dequeue+0x134>)
   12430:	481c      	ldr	r0, [pc, #112]	; (124a4 <ll_rx_dequeue+0x148>)
   12432:	e7a9      	b.n	12388 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   12434:	2500      	movs	r5, #0
   12436:	e7f1      	b.n	1241c <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   12438:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1243c:	f36f 13c7 	bfc	r3, #7, #1
   12440:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   12444:	b995      	cbnz	r5, 1246c <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   12446:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   1244a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1244e:	f000 0001 	and.w	r0, r0, #1
   12452:	0040      	lsls	r0, r0, #1
		if (!bm) {
   12454:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   12458:	d101      	bne.n	1245e <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   1245a:	f000 fdc3 	bl	12fe4 <ll_adv_scan_state_cb>
}
   1245e:	b005      	add	sp, #20
   12460:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   12462:	f362 0300 	bfi	r3, r2, #0, #1
   12466:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   1246a:	e7ec      	b.n	12446 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   1246c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   12470:	490d      	ldr	r1, [pc, #52]	; (124a8 <ll_rx_dequeue+0x14c>)
   12472:	f7f6 f80a 	bl	848a <mem_release>
			mem_release(conn, &_radio.conn_free);
   12476:	490d      	ldr	r1, [pc, #52]	; (124ac <ll_rx_dequeue+0x150>)
   12478:	4628      	mov	r0, r5
   1247a:	f7f6 f806 	bl	848a <mem_release>
   1247e:	e7e2      	b.n	12446 <ll_rx_dequeue+0xea>
   12480:	200008e8 	.word	0x200008e8
   12484:	00015e19 	.word	0x00015e19
   12488:	000171f2 	.word	0x000171f2
   1248c:	0001972d 	.word	0x0001972d
   12490:	00017241 	.word	0x00017241
   12494:	0001977b 	.word	0x0001977b
   12498:	00017166 	.word	0x00017166
   1249c:	00019826 	.word	0x00019826
   124a0:	00019d14 	.word	0x00019d14
   124a4:	00019cd6 	.word	0x00019cd6
   124a8:	20000a30 	.word	0x20000a30
   124ac:	200009f4 	.word	0x200009f4

000124b0 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   124b0:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   124b2:	4c0b      	ldr	r4, [pc, #44]	; (124e0 <rtc0_nrf5_isr+0x30>)
   124b4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   124b8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   124bc:	b122      	cbz	r2, 124c8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   124be:	2000      	movs	r0, #0
   124c0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   124c4:	f7f6 fe3e 	bl	9144 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   124c8:	b12d      	cbz	r5, 124d6 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   124ca:	2300      	movs	r3, #0
   124cc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   124d0:	2001      	movs	r0, #1
   124d2:	f7f6 fe37 	bl	9144 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   124d6:	2000      	movs	r0, #0
}
   124d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   124dc:	f7f6 b8d4 	b.w	8688 <mayfly_run>
   124e0:	4000b000 	.word	0x4000b000

000124e4 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   124e4:	2001      	movs	r0, #1
   124e6:	f7f6 b8cf 	b.w	8688 <mayfly_run>

000124ea <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   124ea:	4668      	mov	r0, sp
   124ec:	f020 0107 	bic.w	r1, r0, #7
   124f0:	468d      	mov	sp, r1
   124f2:	b501      	push	{r0, lr}
	isr_radio();
   124f4:	f001 f8b8 	bl	13668 <isr_radio>
	ISR_DIRECT_PM();
   124f8:	f7ef f9fa 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   124fc:	f7ee ffe4 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   12500:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   12504:	4685      	mov	sp, r0
   12506:	4770      	bx	lr

00012508 <radio_active_callback>:
{
   12508:	4770      	bx	lr
	...

0001250c <radio_event_callback>:
	k_sem_give(sem_recv);
   1250c:	4b01      	ldr	r3, [pc, #4]	; (12514 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1250e:	6818      	ldr	r0, [r3, #0]
   12510:	f002 becb 	b.w	152aa <_impl_k_sem_give>
   12514:	20001218 	.word	0x20001218

00012518 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   12518:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1251a:	4b41      	ldr	r3, [pc, #260]	; (12620 <ll_init+0x108>)
{
   1251c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1251e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   12520:	4840      	ldr	r0, [pc, #256]	; (12624 <ll_init+0x10c>)
   12522:	f002 f9db 	bl	148dc <device_get_binding>
	if (!clk_k32) {
   12526:	b918      	cbnz	r0, 12530 <ll_init+0x18>
		return -ENODEV;
   12528:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   1252c:	b006      	add	sp, #24
   1252e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   12530:	6843      	ldr	r3, [r0, #4]
   12532:	2101      	movs	r1, #1
   12534:	681b      	ldr	r3, [r3, #0]
   12536:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   12538:	483b      	ldr	r0, [pc, #236]	; (12628 <ll_init+0x110>)
   1253a:	f002 f9cf 	bl	148dc <device_get_binding>
	if (!entropy) {
   1253e:	4604      	mov	r4, r0
   12540:	2800      	cmp	r0, #0
   12542:	d0f1      	beq.n	12528 <ll_init+0x10>
	cntr_init();
   12544:	f000 ff74 	bl	13430 <cntr_init>
	mayfly_init();
   12548:	f7f5 fffe 	bl	8548 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1254c:	4b37      	ldr	r3, [pc, #220]	; (1262c <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1254e:	2203      	movs	r2, #3
   12550:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   12552:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   12554:	4a36      	ldr	r2, [pc, #216]	; (12630 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   12556:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   12558:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1255a:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1255c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1255e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   12560:	9205      	str	r2, [sp, #20]
   12562:	4a34      	ldr	r2, [pc, #208]	; (12634 <ll_init+0x11c>)
   12564:	9204      	str	r2, [sp, #16]
   12566:	4a34      	ldr	r2, [pc, #208]	; (12638 <ll_init+0x120>)
   12568:	9203      	str	r2, [sp, #12]
   1256a:	4a34      	ldr	r2, [pc, #208]	; (1263c <ll_init+0x124>)
   1256c:	9202      	str	r2, [sp, #8]
   1256e:	220d      	movs	r2, #13
   12570:	9201      	str	r2, [sp, #4]
   12572:	9300      	str	r3, [sp, #0]
   12574:	4a32      	ldr	r2, [pc, #200]	; (12640 <ll_init+0x128>)
   12576:	2304      	movs	r3, #4
   12578:	f7f6 fdac 	bl	90d4 <ticker_init>
	LL_ASSERT(!err);
   1257c:	b170      	cbz	r0, 1259c <ll_init+0x84>
   1257e:	4b31      	ldr	r3, [pc, #196]	; (12644 <ll_init+0x12c>)
   12580:	9301      	str	r3, [sp, #4]
   12582:	9300      	str	r3, [sp, #0]
   12584:	4a30      	ldr	r2, [pc, #192]	; (12648 <ll_init+0x130>)
   12586:	4b31      	ldr	r3, [pc, #196]	; (1264c <ll_init+0x134>)
   12588:	4931      	ldr	r1, [pc, #196]	; (12650 <ll_init+0x138>)
   1258a:	4832      	ldr	r0, [pc, #200]	; (12654 <ll_init+0x13c>)
   1258c:	f7ee fcfe 	bl	f8c <printk>
   12590:	4040      	eors	r0, r0
   12592:	f380 8811 	msr	BASEPRI, r0
   12596:	f04f 0004 	mov.w	r0, #4
   1259a:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   1259c:	482e      	ldr	r0, [pc, #184]	; (12658 <ll_init+0x140>)
   1259e:	f002 f99d 	bl	148dc <device_get_binding>
	if (!clk_m16) {
   125a2:	2800      	cmp	r0, #0
   125a4:	d0c0      	beq.n	12528 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   125a6:	4b2d      	ldr	r3, [pc, #180]	; (1265c <ll_init+0x144>)
   125a8:	9304      	str	r3, [sp, #16]
   125aa:	9501      	str	r5, [sp, #4]
   125ac:	231b      	movs	r3, #27
   125ae:	2501      	movs	r5, #1
   125b0:	f44f 7657 	mov.w	r6, #860	; 0x35c
   125b4:	9303      	str	r3, [sp, #12]
   125b6:	9302      	str	r3, [sp, #8]
   125b8:	4622      	mov	r2, r4
   125ba:	9605      	str	r6, [sp, #20]
   125bc:	9500      	str	r5, [sp, #0]
   125be:	462b      	mov	r3, r5
   125c0:	2107      	movs	r1, #7
   125c2:	f7fe ff49 	bl	11458 <radio_init>
	if (err) {
   125c6:	4604      	mov	r4, r0
   125c8:	b160      	cbz	r0, 125e4 <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   125ca:	4b1e      	ldr	r3, [pc, #120]	; (12644 <ll_init+0x12c>)
   125cc:	9303      	str	r3, [sp, #12]
   125ce:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   125d2:	4a1d      	ldr	r2, [pc, #116]	; (12648 <ll_init+0x130>)
   125d4:	4b1d      	ldr	r3, [pc, #116]	; (1264c <ll_init+0x134>)
   125d6:	491e      	ldr	r1, [pc, #120]	; (12650 <ll_init+0x138>)
   125d8:	4821      	ldr	r0, [pc, #132]	; (12660 <ll_init+0x148>)
   125da:	f7ee fcd7 	bl	f8c <printk>
		return -ENOMEM;
   125de:	f06f 000b 	mvn.w	r0, #11
   125e2:	e7a3      	b.n	1252c <ll_init+0x14>
	ll_filter_reset(true);
   125e4:	4628      	mov	r0, r5
   125e6:	f000 fedb 	bl	133a0 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   125ea:	4622      	mov	r2, r4
   125ec:	4621      	mov	r1, r4
   125ee:	4628      	mov	r0, r5
   125f0:	f7ef f964 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   125f4:	4622      	mov	r2, r4
   125f6:	4621      	mov	r1, r4
   125f8:	200b      	movs	r0, #11
   125fa:	f7ef f95f 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   125fe:	4622      	mov	r2, r4
   12600:	4621      	mov	r1, r4
   12602:	2018      	movs	r0, #24
   12604:	f7ef f95a 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   12608:	4628      	mov	r0, r5
   1260a:	f7ef f925 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1260e:	200b      	movs	r0, #11
   12610:	f7ef f922 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   12614:	2018      	movs	r0, #24
   12616:	f7ef f91f 	bl	1858 <_arch_irq_enable>
	return 0;
   1261a:	4620      	mov	r0, r4
   1261c:	e786      	b.n	1252c <ll_init+0x14>
   1261e:	bf00      	nop
   12620:	20001218 	.word	0x20001218
   12624:	00015eec 	.word	0x00015eec
   12628:	00015ec0 	.word	0x00015ec0
   1262c:	200011f8 	.word	0x200011f8
   12630:	00014005 	.word	0x00014005
   12634:	00013f61 	.word	0x00013f61
   12638:	00013f05 	.word	0x00013f05
   1263c:	20000f88 	.word	0x20000f88
   12640:	20000e48 	.word	0x20000e48
   12644:	00015e19 	.word	0x00015e19
   12648:	000171f2 	.word	0x000171f2
   1264c:	0001a44b 	.word	0x0001a44b
   12650:	00017241 	.word	0x00017241
   12654:	0001a453 	.word	0x0001a453
   12658:	00015ef7 	.word	0x00015ef7
   1265c:	20000aec 	.word	0x20000aec
   12660:	0001a479 	.word	0x0001a479

00012664 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   12664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12668:	4681      	mov	r9, r0
   1266a:	4688      	mov	r8, r1
   1266c:	4617      	mov	r7, r2
   1266e:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   12670:	f7fe ffd6 	bl	11620 <ll_scan_is_enabled>
   12674:	b988      	cbnz	r0, 1269a <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   12676:	4d0a      	ldr	r5, [pc, #40]	; (126a0 <ll_scan_params_set+0x3c>)
   12678:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   1267a:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   1267e:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   12682:	4622      	mov	r2, r4
   12684:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   12688:	4613      	mov	r3, r2
   1268a:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   1268e:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   12690:	f362 1387 	bfi	r3, r2, #6, #2
   12694:	712b      	strb	r3, [r5, #4]

	return 0;
   12696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1269a:	200c      	movs	r0, #12
}
   1269c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   126a0:	2000121c 	.word	0x2000121c

000126a4 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   126a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   126a6:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   126a8:	b920      	cbnz	r0, 126b4 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   126aa:	b005      	add	sp, #20
   126ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   126b0:	f7ff be1c 	b.w	122ec <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   126b4:	f7fe ffb4 	bl	11620 <ll_scan_is_enabled>
   126b8:	4606      	mov	r6, r0
   126ba:	bb40      	cbnz	r0, 1270e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   126bc:	4c15      	ldr	r4, [pc, #84]	; (12714 <ll_scan_enable+0x70>)
   126be:	7920      	ldrb	r0, [r4, #4]
   126c0:	0980      	lsrs	r0, r0, #6
   126c2:	f000 fa63 	bl	12b8c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   126c6:	7923      	ldrb	r3, [r4, #4]
   126c8:	f013 0501 	ands.w	r5, r3, #1
   126cc:	d006      	beq.n	126dc <ll_scan_enable+0x38>
   126ce:	f013 0520 	ands.w	r5, r3, #32
   126d2:	d003      	beq.n	126dc <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   126d4:	4630      	mov	r0, r6
   126d6:	f000 fbdd 	bl	12e94 <ll_rl_rpa_update>
		rpa_gen = 1;
   126da:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   126dc:	7926      	ldrb	r6, [r4, #4]
   126de:	f006 070f 	and.w	r7, r6, #15
   126e2:	f3c6 1600 	ubfx	r6, r6, #4, #1
   126e6:	2100      	movs	r1, #0
   126e8:	4630      	mov	r0, r6
   126ea:	f7f6 feb1 	bl	9450 <ll_addr_get>
   126ee:	22ff      	movs	r2, #255	; 0xff
   126f0:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   126f2:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   126f4:	8823      	ldrh	r3, [r4, #0]
   126f6:	9502      	str	r5, [sp, #8]
   126f8:	0992      	lsrs	r2, r2, #6
   126fa:	9201      	str	r2, [sp, #4]
   126fc:	8862      	ldrh	r2, [r4, #2]
   126fe:	9200      	str	r2, [sp, #0]
   12700:	4631      	mov	r1, r6
   12702:	4602      	mov	r2, r0
   12704:	4638      	mov	r0, r7
   12706:	f7ff fd13 	bl	12130 <radio_scan_enable>
}
   1270a:	b005      	add	sp, #20
   1270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   1270e:	2000      	movs	r0, #0
   12710:	e7fb      	b.n	1270a <ll_scan_enable+0x66>
   12712:	bf00      	nop
   12714:	2000121c 	.word	0x2000121c

00012718 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   12718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1271c:	b085      	sub	sp, #20
   1271e:	461e      	mov	r6, r3
   12720:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   12724:	9303      	str	r3, [sp, #12]
   12726:	4680      	mov	r8, r0
   12728:	4689      	mov	r9, r1
   1272a:	4615      	mov	r5, r2
   1272c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1272e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   12732:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   12736:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   1273a:	f7fe ff71 	bl	11620 <ll_scan_is_enabled>
   1273e:	9b03      	ldr	r3, [sp, #12]
   12740:	bba0      	cbnz	r0, 127ac <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   12742:	9300      	str	r3, [sp, #0]
   12744:	4652      	mov	r2, sl
   12746:	465b      	mov	r3, fp
   12748:	4639      	mov	r1, r7
   1274a:	4630      	mov	r0, r6
   1274c:	f7fe ff8c 	bl	11668 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   12750:	bb68      	cbnz	r0, 127ae <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   12752:	4628      	mov	r0, r5
   12754:	f000 fa1a 	bl	12b8c <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   12758:	b1dd      	cbz	r5, 12792 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1275a:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1275c:	1ea3      	subs	r3, r4, #2
   1275e:	2b01      	cmp	r3, #1
   12760:	d822      	bhi.n	127a8 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   12762:	2000      	movs	r0, #0
   12764:	f000 fb96 	bl	12e94 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   12768:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1276c:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   1276e:	2100      	movs	r1, #0
   12770:	4620      	mov	r0, r4
   12772:	f7f6 fe6d 	bl	9450 <ll_addr_get>
   12776:	4643      	mov	r3, r8
   12778:	4602      	mov	r2, r0
   1277a:	4621      	mov	r1, r4
   1277c:	2000      	movs	r0, #0
   1277e:	9711      	str	r7, [sp, #68]	; 0x44
   12780:	9610      	str	r6, [sp, #64]	; 0x40
   12782:	950f      	str	r5, [sp, #60]	; 0x3c
   12784:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   12788:	b005      	add	sp, #20
   1278a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   1278e:	f7ff bccf 	b.w	12130 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   12792:	f000 fb77 	bl	12e84 <ctrl_rl_enabled>
   12796:	2800      	cmp	r0, #0
   12798:	d0df      	beq.n	1275a <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1279a:	4639      	mov	r1, r7
   1279c:	462a      	mov	r2, r5
   1279e:	4630      	mov	r0, r6
   127a0:	f000 fa16 	bl	12bd0 <ll_rl_find>
   127a4:	4607      	mov	r7, r0
   127a6:	e7d9      	b.n	1275c <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   127a8:	2600      	movs	r6, #0
   127aa:	e7e0      	b.n	1276e <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   127ac:	200c      	movs	r0, #12
}
   127ae:	b005      	add	sp, #20
   127b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000127b4 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   127b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127b8:	4688      	mov	r8, r1
	int i;

	if (free) {
   127ba:	4615      	mov	r5, r2
   127bc:	b10a      	cbz	r2, 127c2 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   127be:	23ff      	movs	r3, #255	; 0xff
   127c0:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   127c2:	4e14      	ldr	r6, [pc, #80]	; (12814 <wl_find+0x60>)
{
   127c4:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   127c6:	f000 0701 	and.w	r7, r0, #1
   127ca:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   127ce:	07da      	lsls	r2, r3, #31
   127d0:	d51d      	bpl.n	1280e <wl_find+0x5a>
   127d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   127d6:	42bb      	cmp	r3, r7
   127d8:	d113      	bne.n	12802 <wl_find+0x4e>
   127da:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   127de:	2206      	movs	r2, #6
   127e0:	4641      	mov	r1, r8
   127e2:	3002      	adds	r0, #2
   127e4:	f7ef f9f5 	bl	1bd2 <memcmp>
   127e8:	b910      	cbnz	r0, 127f0 <wl_find+0x3c>
			return i;
   127ea:	b2e0      	uxtb	r0, r4
   127ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   127f0:	b13d      	cbz	r5, 12802 <wl_find+0x4e>
   127f2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   127f6:	07db      	lsls	r3, r3, #31
   127f8:	d403      	bmi.n	12802 <wl_find+0x4e>
   127fa:	782b      	ldrb	r3, [r5, #0]
   127fc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   127fe:	bf08      	it	eq
   12800:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   12802:	3401      	adds	r4, #1
   12804:	2c08      	cmp	r4, #8
   12806:	d1e0      	bne.n	127ca <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   12808:	20ff      	movs	r0, #255	; 0xff
   1280a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1280e:	2d00      	cmp	r5, #0
   12810:	d1f3      	bne.n	127fa <wl_find+0x46>
   12812:	e7f6      	b.n	12802 <wl_find+0x4e>
   12814:	2000144f 	.word	0x2000144f

00012818 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   12818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1281c:	4d1a      	ldr	r5, [pc, #104]	; (12888 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1281e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 12894 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   12822:	1eae      	subs	r6, r5, #2
{
   12824:	2400      	movs	r4, #0
   12826:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   12828:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1282c:	07d9      	lsls	r1, r3, #31
   1282e:	d524      	bpl.n	1287a <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   12830:	f898 3000 	ldrb.w	r3, [r8]
   12834:	b15b      	cbz	r3, 1284e <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   12836:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1283a:	2a07      	cmp	r2, #7
   1283c:	d807      	bhi.n	1284e <filter_wl_update+0x36>
   1283e:	2328      	movs	r3, #40	; 0x28
   12840:	4353      	muls	r3, r2
   12842:	4a12      	ldr	r2, [pc, #72]	; (1288c <filter_wl_update+0x74>)
   12844:	5cd3      	ldrb	r3, [r2, r3]
   12846:	075a      	lsls	r2, r3, #29
   12848:	d501      	bpl.n	1284e <filter_wl_update+0x36>
   1284a:	06db      	lsls	r3, r3, #27
   1284c:	d515      	bpl.n	1287a <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   1284e:	4810      	ldr	r0, [pc, #64]	; (12890 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   12850:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   12854:	2201      	movs	r2, #1
   12856:	fa02 f104 	lsl.w	r1, r2, r4
   1285a:	7802      	ldrb	r2, [r0, #0]
   1285c:	430a      	orrs	r2, r1
   1285e:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   12860:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12864:	7842      	ldrb	r2, [r0, #1]
   12866:	40a3      	lsls	r3, r4
   12868:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1286a:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1286c:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1286e:	fb02 0004 	mla	r0, r2, r4, r0
   12872:	4629      	mov	r1, r5
   12874:	3002      	adds	r0, #2
   12876:	f7ef f9c1 	bl	1bfc <memcpy>
   1287a:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   1287c:	2c08      	cmp	r4, #8
   1287e:	f105 0508 	add.w	r5, r5, #8
   12882:	d1d1      	bne.n	12828 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   12884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12888:	20001451 	.word	0x20001451
   1288c:	200012dc 	.word	0x200012dc
   12890:	2000148f 	.word	0x2000148f
   12894:	2000141c 	.word	0x2000141c

00012898 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   12898:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1289a:	f7fe fead 	bl	115f8 <ll_adv_is_enabled>
   1289e:	b928      	cbnz	r0, 128ac <rl_access_check.constprop.1+0x14>
   128a0:	f7fe febe 	bl	11620 <ll_scan_is_enabled>
   128a4:	fab0 f080 	clz	r0, r0
   128a8:	0940      	lsrs	r0, r0, #5
   128aa:	bd08      	pop	{r3, pc}
   128ac:	2000      	movs	r0, #0
}
   128ae:	bd08      	pop	{r3, pc}

000128b0 <filter_rl_update>:
{
   128b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   128b2:	4e10      	ldr	r6, [pc, #64]	; (128f4 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   128b4:	4d10      	ldr	r5, [pc, #64]	; (128f8 <filter_rl_update+0x48>)
{
   128b6:	2400      	movs	r4, #0
		if (rl[i].taken) {
   128b8:	2728      	movs	r7, #40	; 0x28
   128ba:	fb07 f104 	mul.w	r1, r7, r4
   128be:	5c73      	ldrb	r3, [r6, r1]
   128c0:	07da      	lsls	r2, r3, #31
   128c2:	d513      	bpl.n	128ec <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   128c4:	2201      	movs	r2, #1
   128c6:	fa02 f004 	lsl.w	r0, r2, r4
   128ca:	782a      	ldrb	r2, [r5, #0]
   128cc:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   128ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   128d2:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   128d4:	786a      	ldrb	r2, [r5, #1]
   128d6:	40a3      	lsls	r3, r4
   128d8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   128da:	2206      	movs	r2, #6
   128dc:	3101      	adds	r1, #1
   128de:	fb02 5004 	mla	r0, r2, r4, r5
   128e2:	4431      	add	r1, r6
   128e4:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   128e6:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   128e8:	f7ef f988 	bl	1bfc <memcpy>
   128ec:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   128ee:	2c08      	cmp	r4, #8
   128f0:	d1e3      	bne.n	128ba <filter_rl_update+0xa>
}
   128f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   128f4:	200012dc 	.word	0x200012dc
   128f8:	2000141d 	.word	0x2000141d

000128fc <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   128fc:	2807      	cmp	r0, #7
   128fe:	d80c      	bhi.n	1291a <ctrl_lrpa_get+0x1e>
   12900:	2328      	movs	r3, #40	; 0x28
   12902:	4358      	muls	r0, r3
   12904:	4a06      	ldr	r2, [pc, #24]	; (12920 <ctrl_lrpa_get+0x24>)
   12906:	5c13      	ldrb	r3, [r2, r0]
   12908:	1811      	adds	r1, r2, r0
   1290a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1290e:	b128      	cbz	r0, 1291c <ctrl_lrpa_get+0x20>
   12910:	f3c3 0040 	ubfx	r0, r3, #1, #1
   12914:	b110      	cbz	r0, 1291c <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   12916:	6a48      	ldr	r0, [r1, #36]	; 0x24
   12918:	4770      	bx	lr
		return NULL;
   1291a:	2000      	movs	r0, #0
}
   1291c:	4770      	bx	lr
   1291e:	bf00      	nop
   12920:	200012dc 	.word	0x200012dc

00012924 <ctrl_irks_get>:
	*count = peer_irk_count;
   12924:	4b02      	ldr	r3, [pc, #8]	; (12930 <ctrl_irks_get+0xc>)
   12926:	781b      	ldrb	r3, [r3, #0]
   12928:	7003      	strb	r3, [r0, #0]
}
   1292a:	4802      	ldr	r0, [pc, #8]	; (12934 <ctrl_irks_get+0x10>)
   1292c:	4770      	bx	lr
   1292e:	bf00      	nop
   12930:	20001252 	.word	0x20001252
   12934:	2000125b 	.word	0x2000125b

00012938 <ctrl_rl_idx>:
{
   12938:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   1293a:	b320      	cbz	r0, 12986 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1293c:	2907      	cmp	r1, #7
   1293e:	d90e      	bls.n	1295e <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   12940:	4b1d      	ldr	r3, [pc, #116]	; (129b8 <ctrl_rl_idx+0x80>)
   12942:	9301      	str	r3, [sp, #4]
   12944:	9300      	str	r3, [sp, #0]
   12946:	4a1d      	ldr	r2, [pc, #116]	; (129bc <ctrl_rl_idx+0x84>)
   12948:	4b1d      	ldr	r3, [pc, #116]	; (129c0 <ctrl_rl_idx+0x88>)
   1294a:	491e      	ldr	r1, [pc, #120]	; (129c4 <ctrl_rl_idx+0x8c>)
   1294c:	481e      	ldr	r0, [pc, #120]	; (129c8 <ctrl_rl_idx+0x90>)
   1294e:	f7ee fb1d 	bl	f8c <printk>
   12952:	4040      	eors	r0, r0
   12954:	f380 8811 	msr	BASEPRI, r0
   12958:	f04f 0004 	mov.w	r0, #4
   1295c:	df02      	svc	2
   1295e:	4b1b      	ldr	r3, [pc, #108]	; (129cc <ctrl_rl_idx+0x94>)
   12960:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   12964:	07d2      	lsls	r2, r2, #31
   12966:	d407      	bmi.n	12978 <ctrl_rl_idx+0x40>
   12968:	4b13      	ldr	r3, [pc, #76]	; (129b8 <ctrl_rl_idx+0x80>)
   1296a:	9301      	str	r3, [sp, #4]
   1296c:	9300      	str	r3, [sp, #0]
   1296e:	4a13      	ldr	r2, [pc, #76]	; (129bc <ctrl_rl_idx+0x84>)
   12970:	4b13      	ldr	r3, [pc, #76]	; (129c0 <ctrl_rl_idx+0x88>)
   12972:	4914      	ldr	r1, [pc, #80]	; (129c4 <ctrl_rl_idx+0x8c>)
   12974:	4816      	ldr	r0, [pc, #88]	; (129d0 <ctrl_rl_idx+0x98>)
   12976:	e7ea      	b.n	1294e <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   12978:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1297c:	7849      	ldrb	r1, [r1, #1]
}
   1297e:	4608      	mov	r0, r1
   12980:	b003      	add	sp, #12
   12982:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   12986:	2907      	cmp	r1, #7
   12988:	d907      	bls.n	1299a <ctrl_rl_idx+0x62>
   1298a:	4b0b      	ldr	r3, [pc, #44]	; (129b8 <ctrl_rl_idx+0x80>)
   1298c:	9301      	str	r3, [sp, #4]
   1298e:	9300      	str	r3, [sp, #0]
   12990:	4a0a      	ldr	r2, [pc, #40]	; (129bc <ctrl_rl_idx+0x84>)
   12992:	4b0b      	ldr	r3, [pc, #44]	; (129c0 <ctrl_rl_idx+0x88>)
   12994:	490b      	ldr	r1, [pc, #44]	; (129c4 <ctrl_rl_idx+0x8c>)
   12996:	480f      	ldr	r0, [pc, #60]	; (129d4 <ctrl_rl_idx+0x9c>)
   12998:	e7d9      	b.n	1294e <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   1299a:	2328      	movs	r3, #40	; 0x28
   1299c:	434b      	muls	r3, r1
   1299e:	4a0e      	ldr	r2, [pc, #56]	; (129d8 <ctrl_rl_idx+0xa0>)
   129a0:	5cd3      	ldrb	r3, [r2, r3]
   129a2:	07db      	lsls	r3, r3, #31
   129a4:	d4eb      	bmi.n	1297e <ctrl_rl_idx+0x46>
   129a6:	4b04      	ldr	r3, [pc, #16]	; (129b8 <ctrl_rl_idx+0x80>)
   129a8:	9301      	str	r3, [sp, #4]
   129aa:	9300      	str	r3, [sp, #0]
   129ac:	4a03      	ldr	r2, [pc, #12]	; (129bc <ctrl_rl_idx+0x84>)
   129ae:	4b04      	ldr	r3, [pc, #16]	; (129c0 <ctrl_rl_idx+0x88>)
   129b0:	4904      	ldr	r1, [pc, #16]	; (129c4 <ctrl_rl_idx+0x8c>)
   129b2:	480a      	ldr	r0, [pc, #40]	; (129dc <ctrl_rl_idx+0xa4>)
   129b4:	e7cb      	b.n	1294e <ctrl_rl_idx+0x16>
   129b6:	bf00      	nop
   129b8:	00015e19 	.word	0x00015e19
   129bc:	000171f2 	.word	0x000171f2
   129c0:	0001a4ae 	.word	0x0001a4ae
   129c4:	00017241 	.word	0x00017241
   129c8:	0001a548 	.word	0x0001a548
   129cc:	2000144f 	.word	0x2000144f
   129d0:	0001a615 	.word	0x0001a615
   129d4:	0001a64c 	.word	0x0001a64c
   129d8:	200012dc 	.word	0x200012dc
   129dc:	0001a719 	.word	0x0001a719

000129e0 <ctrl_rl_irk_idx>:
{
   129e0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   129e2:	4b18      	ldr	r3, [pc, #96]	; (12a44 <ctrl_rl_irk_idx+0x64>)
   129e4:	781b      	ldrb	r3, [r3, #0]
   129e6:	4283      	cmp	r3, r0
   129e8:	d80e      	bhi.n	12a08 <ctrl_rl_irk_idx+0x28>
   129ea:	4b17      	ldr	r3, [pc, #92]	; (12a48 <ctrl_rl_irk_idx+0x68>)
   129ec:	9301      	str	r3, [sp, #4]
   129ee:	9300      	str	r3, [sp, #0]
   129f0:	4a16      	ldr	r2, [pc, #88]	; (12a4c <ctrl_rl_irk_idx+0x6c>)
   129f2:	4b17      	ldr	r3, [pc, #92]	; (12a50 <ctrl_rl_irk_idx+0x70>)
   129f4:	4917      	ldr	r1, [pc, #92]	; (12a54 <ctrl_rl_irk_idx+0x74>)
   129f6:	4818      	ldr	r0, [pc, #96]	; (12a58 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   129f8:	f7ee fac8 	bl	f8c <printk>
   129fc:	4040      	eors	r0, r0
   129fe:	f380 8811 	msr	BASEPRI, r0
   12a02:	f04f 0004 	mov.w	r0, #4
   12a06:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   12a08:	4b14      	ldr	r3, [pc, #80]	; (12a5c <ctrl_rl_irk_idx+0x7c>)
   12a0a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   12a0c:	2807      	cmp	r0, #7
   12a0e:	d907      	bls.n	12a20 <ctrl_rl_irk_idx+0x40>
   12a10:	4b0d      	ldr	r3, [pc, #52]	; (12a48 <ctrl_rl_irk_idx+0x68>)
   12a12:	9301      	str	r3, [sp, #4]
   12a14:	9300      	str	r3, [sp, #0]
   12a16:	4a0d      	ldr	r2, [pc, #52]	; (12a4c <ctrl_rl_irk_idx+0x6c>)
   12a18:	4b0d      	ldr	r3, [pc, #52]	; (12a50 <ctrl_rl_irk_idx+0x70>)
   12a1a:	490e      	ldr	r1, [pc, #56]	; (12a54 <ctrl_rl_irk_idx+0x74>)
   12a1c:	4810      	ldr	r0, [pc, #64]	; (12a60 <ctrl_rl_irk_idx+0x80>)
   12a1e:	e7eb      	b.n	129f8 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   12a20:	2328      	movs	r3, #40	; 0x28
   12a22:	4343      	muls	r3, r0
   12a24:	4a0f      	ldr	r2, [pc, #60]	; (12a64 <ctrl_rl_irk_idx+0x84>)
   12a26:	5cd3      	ldrb	r3, [r2, r3]
   12a28:	07db      	lsls	r3, r3, #31
   12a2a:	d407      	bmi.n	12a3c <ctrl_rl_irk_idx+0x5c>
   12a2c:	4b06      	ldr	r3, [pc, #24]	; (12a48 <ctrl_rl_irk_idx+0x68>)
   12a2e:	9301      	str	r3, [sp, #4]
   12a30:	9300      	str	r3, [sp, #0]
   12a32:	4a06      	ldr	r2, [pc, #24]	; (12a4c <ctrl_rl_irk_idx+0x6c>)
   12a34:	4b06      	ldr	r3, [pc, #24]	; (12a50 <ctrl_rl_irk_idx+0x70>)
   12a36:	4907      	ldr	r1, [pc, #28]	; (12a54 <ctrl_rl_irk_idx+0x74>)
   12a38:	480b      	ldr	r0, [pc, #44]	; (12a68 <ctrl_rl_irk_idx+0x88>)
   12a3a:	e7dd      	b.n	129f8 <ctrl_rl_irk_idx+0x18>
}
   12a3c:	b003      	add	sp, #12
   12a3e:	f85d fb04 	ldr.w	pc, [sp], #4
   12a42:	bf00      	nop
   12a44:	20001252 	.word	0x20001252
   12a48:	00015e19 	.word	0x00015e19
   12a4c:	000171f2 	.word	0x000171f2
   12a50:	0001a4ba 	.word	0x0001a4ba
   12a54:	00017241 	.word	0x00017241
   12a58:	0001a746 	.word	0x0001a746
   12a5c:	20001253 	.word	0x20001253
   12a60:	0001a784 	.word	0x0001a784
   12a64:	200012dc 	.word	0x200012dc
   12a68:	0001a719 	.word	0x0001a719

00012a6c <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   12a6c:	2807      	cmp	r0, #7
{
   12a6e:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   12a70:	d819      	bhi.n	12aa6 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   12a72:	2328      	movs	r3, #40	; 0x28
   12a74:	4358      	muls	r0, r3
   12a76:	4b0d      	ldr	r3, [pc, #52]	; (12aac <ctrl_irk_whitelisted+0x40>)
   12a78:	5c18      	ldrb	r0, [r3, r0]
   12a7a:	07c3      	lsls	r3, r0, #31
   12a7c:	d40e      	bmi.n	12a9c <ctrl_irk_whitelisted+0x30>
   12a7e:	4b0c      	ldr	r3, [pc, #48]	; (12ab0 <ctrl_irk_whitelisted+0x44>)
   12a80:	9301      	str	r3, [sp, #4]
   12a82:	9300      	str	r3, [sp, #0]
   12a84:	4a0b      	ldr	r2, [pc, #44]	; (12ab4 <ctrl_irk_whitelisted+0x48>)
   12a86:	4b0c      	ldr	r3, [pc, #48]	; (12ab8 <ctrl_irk_whitelisted+0x4c>)
   12a88:	490c      	ldr	r1, [pc, #48]	; (12abc <ctrl_irk_whitelisted+0x50>)
   12a8a:	480d      	ldr	r0, [pc, #52]	; (12ac0 <ctrl_irk_whitelisted+0x54>)
   12a8c:	f7ee fa7e 	bl	f8c <printk>
   12a90:	4040      	eors	r0, r0
   12a92:	f380 8811 	msr	BASEPRI, r0
   12a96:	f04f 0004 	mov.w	r0, #4
   12a9a:	df02      	svc	2
	return rl[rl_idx].wl;
   12a9c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   12aa0:	b003      	add	sp, #12
   12aa2:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   12aa6:	2000      	movs	r0, #0
   12aa8:	e7fa      	b.n	12aa0 <ctrl_irk_whitelisted+0x34>
   12aaa:	bf00      	nop
   12aac:	200012dc 	.word	0x200012dc
   12ab0:	00015e19 	.word	0x00015e19
   12ab4:	000171f2 	.word	0x000171f2
   12ab8:	0001a4ca 	.word	0x0001a4ca
   12abc:	00017241 	.word	0x00017241
   12ac0:	0001a516 	.word	0x0001a516

00012ac4 <ctrl_filter_get>:
}
   12ac4:	4b03      	ldr	r3, [pc, #12]	; (12ad4 <ctrl_filter_get+0x10>)
   12ac6:	4a04      	ldr	r2, [pc, #16]	; (12ad8 <ctrl_filter_get+0x14>)
   12ac8:	2800      	cmp	r0, #0
   12aca:	bf14      	ite	ne
   12acc:	4610      	movne	r0, r2
   12ace:	4618      	moveq	r0, r3
   12ad0:	4770      	bx	lr
   12ad2:	bf00      	nop
   12ad4:	2000141d 	.word	0x2000141d
   12ad8:	2000148f 	.word	0x2000148f

00012adc <ll_wl_size_get>:
   12adc:	2008      	movs	r0, #8
   12ade:	4770      	bx	lr

00012ae0 <ll_wl_clear>:
{
   12ae0:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12ae2:	f7fe fd91 	bl	11608 <radio_adv_filter_pol_get>
   12ae6:	4604      	mov	r4, r0
   12ae8:	b110      	cbz	r0, 12af0 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12aea:	240c      	movs	r4, #12
}
   12aec:	4620      	mov	r0, r4
   12aee:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12af0:	f7fe fdac 	bl	1164c <radio_scan_filter_pol_get>
   12af4:	07c3      	lsls	r3, r0, #31
   12af6:	d4f8      	bmi.n	12aea <ll_wl_clear+0xa>
		wl[i].taken = 0;
   12af8:	4a07      	ldr	r2, [pc, #28]	; (12b18 <ll_wl_clear+0x38>)
   12afa:	4623      	mov	r3, r4
   12afc:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12b00:	f36f 0100 	bfc	r1, #0, #1
   12b04:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12b08:	3301      	adds	r3, #1
   12b0a:	2b08      	cmp	r3, #8
   12b0c:	d1f6      	bne.n	12afc <ll_wl_clear+0x1c>
	wl_anon = 0;
   12b0e:	4b03      	ldr	r3, [pc, #12]	; (12b1c <ll_wl_clear+0x3c>)
   12b10:	2200      	movs	r2, #0
   12b12:	701a      	strb	r2, [r3, #0]
	return 0;
   12b14:	e7ea      	b.n	12aec <ll_wl_clear+0xc>
   12b16:	bf00      	nop
   12b18:	2000144f 	.word	0x2000144f
   12b1c:	20001940 	.word	0x20001940

00012b20 <ll_wl_remove>:
{
   12b20:	b538      	push	{r3, r4, r5, lr}
   12b22:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12b24:	f7fe fd70 	bl	11608 <radio_adv_filter_pol_get>
   12b28:	4604      	mov	r4, r0
   12b2a:	b110      	cbz	r0, 12b32 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12b2c:	240c      	movs	r4, #12
}
   12b2e:	4620      	mov	r0, r4
   12b30:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12b32:	f7fe fd8b 	bl	1164c <radio_scan_filter_pol_get>
   12b36:	07c3      	lsls	r3, r0, #31
   12b38:	d4f8      	bmi.n	12b2c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   12b3a:	7828      	ldrb	r0, [r5, #0]
   12b3c:	28ff      	cmp	r0, #255	; 0xff
   12b3e:	d102      	bne.n	12b46 <ll_wl_remove+0x26>
		wl_anon = 0;
   12b40:	4b0f      	ldr	r3, [pc, #60]	; (12b80 <ll_wl_remove+0x60>)
   12b42:	701c      	strb	r4, [r3, #0]
		return 0;
   12b44:	e7f3      	b.n	12b2e <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   12b46:	4622      	mov	r2, r4
   12b48:	1c69      	adds	r1, r5, #1
   12b4a:	f7ff fe33 	bl	127b4 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   12b4e:	2807      	cmp	r0, #7
   12b50:	d813      	bhi.n	12b7a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   12b52:	4b0c      	ldr	r3, [pc, #48]	; (12b84 <ll_wl_remove+0x64>)
   12b54:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   12b58:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   12b5a:	2d07      	cmp	r5, #7
   12b5c:	d806      	bhi.n	12b6c <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   12b5e:	2228      	movs	r2, #40	; 0x28
   12b60:	4909      	ldr	r1, [pc, #36]	; (12b88 <ll_wl_remove+0x68>)
   12b62:	436a      	muls	r2, r5
   12b64:	5c8d      	ldrb	r5, [r1, r2]
   12b66:	f364 1545 	bfi	r5, r4, #5, #1
   12b6a:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   12b6c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   12b70:	f36f 0200 	bfc	r2, #0, #1
   12b74:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   12b78:	e7d9      	b.n	12b2e <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12b7a:	2402      	movs	r4, #2
   12b7c:	e7d7      	b.n	12b2e <ll_wl_remove+0xe>
   12b7e:	bf00      	nop
   12b80:	20001940 	.word	0x20001940
   12b84:	2000144f 	.word	0x2000144f
   12b88:	200012dc 	.word	0x200012dc

00012b8c <ll_filters_scan_update>:
{
   12b8c:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   12b8e:	4b0d      	ldr	r3, [pc, #52]	; (12bc4 <ll_filters_scan_update+0x38>)
   12b90:	2200      	movs	r2, #0
   12b92:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   12b94:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   12b96:	07c3      	lsls	r3, r0, #31
   12b98:	d504      	bpl.n	12ba4 <ll_filters_scan_update+0x18>
   12b9a:	f7fe fd35 	bl	11608 <radio_adv_filter_pol_get>
   12b9e:	b908      	cbnz	r0, 12ba4 <ll_filters_scan_update+0x18>
		filter_wl_update();
   12ba0:	f7ff fe3a 	bl	12818 <filter_wl_update>
	filter->enable_bitmask = 0;
   12ba4:	4b08      	ldr	r3, [pc, #32]	; (12bc8 <ll_filters_scan_update+0x3c>)
   12ba6:	2200      	movs	r2, #0
   12ba8:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   12baa:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   12bac:	4b07      	ldr	r3, [pc, #28]	; (12bcc <ll_filters_scan_update+0x40>)
   12bae:	781b      	ldrb	r3, [r3, #0]
   12bb0:	b133      	cbz	r3, 12bc0 <ll_filters_scan_update+0x34>
   12bb2:	f7fe fd21 	bl	115f8 <ll_adv_is_enabled>
   12bb6:	b918      	cbnz	r0, 12bc0 <ll_filters_scan_update+0x34>
}
   12bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   12bbc:	f7ff be78 	b.w	128b0 <filter_rl_update>
   12bc0:	bd08      	pop	{r3, pc}
   12bc2:	bf00      	nop
   12bc4:	2000148f 	.word	0x2000148f
   12bc8:	2000141d 	.word	0x2000141d
   12bcc:	2000141c 	.word	0x2000141c

00012bd0 <ll_rl_find>:
{
   12bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bd4:	468a      	mov	sl, r1
	if (free) {
   12bd6:	4614      	mov	r4, r2
   12bd8:	b10a      	cbz	r2, 12bde <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   12bda:	23ff      	movs	r3, #255	; 0xff
   12bdc:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12bde:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12c34 <ll_rl_find+0x64>
{
   12be2:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12be4:	f000 0901 	and.w	r9, r0, #1
   12be8:	2628      	movs	r6, #40	; 0x28
   12bea:	436e      	muls	r6, r5
   12bec:	b2ef      	uxtb	r7, r5
   12bee:	f818 3006 	ldrb.w	r3, [r8, r6]
   12bf2:	07da      	lsls	r2, r3, #31
   12bf4:	d51a      	bpl.n	12c2c <ll_rl_find+0x5c>
   12bf6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12bfa:	454b      	cmp	r3, r9
   12bfc:	d10f      	bne.n	12c1e <ll_rl_find+0x4e>
   12bfe:	1c70      	adds	r0, r6, #1
   12c00:	2206      	movs	r2, #6
   12c02:	4651      	mov	r1, sl
   12c04:	4440      	add	r0, r8
   12c06:	f7ee ffe4 	bl	1bd2 <memcmp>
   12c0a:	b160      	cbz	r0, 12c26 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   12c0c:	b13c      	cbz	r4, 12c1e <ll_rl_find+0x4e>
   12c0e:	f818 3006 	ldrb.w	r3, [r8, r6]
   12c12:	07db      	lsls	r3, r3, #31
   12c14:	d403      	bmi.n	12c1e <ll_rl_find+0x4e>
   12c16:	7823      	ldrb	r3, [r4, #0]
   12c18:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   12c1a:	bf08      	it	eq
   12c1c:	7027      	strbeq	r7, [r4, #0]
   12c1e:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12c20:	2d08      	cmp	r5, #8
   12c22:	d1e1      	bne.n	12be8 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   12c24:	27ff      	movs	r7, #255	; 0xff
}
   12c26:	4638      	mov	r0, r7
   12c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   12c2c:	2c00      	cmp	r4, #0
   12c2e:	d1f2      	bne.n	12c16 <ll_rl_find+0x46>
   12c30:	e7f5      	b.n	12c1e <ll_rl_find+0x4e>
   12c32:	bf00      	nop
   12c34:	200012dc 	.word	0x200012dc

00012c38 <ll_wl_add>:
{
   12c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12c3c:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12c3e:	f7fe fce3 	bl	11608 <radio_adv_filter_pol_get>
   12c42:	4605      	mov	r5, r0
   12c44:	b120      	cbz	r0, 12c50 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12c46:	250c      	movs	r5, #12
}
   12c48:	4628      	mov	r0, r5
   12c4a:	b002      	add	sp, #8
   12c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12c50:	f7fe fcfc 	bl	1164c <radio_scan_filter_pol_get>
   12c54:	07c3      	lsls	r3, r0, #31
   12c56:	d4f6      	bmi.n	12c46 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   12c58:	7838      	ldrb	r0, [r7, #0]
   12c5a:	28ff      	cmp	r0, #255	; 0xff
   12c5c:	d103      	bne.n	12c66 <ll_wl_add+0x2e>
		wl_anon = 1;
   12c5e:	4b1f      	ldr	r3, [pc, #124]	; (12cdc <ll_wl_add+0xa4>)
   12c60:	2201      	movs	r2, #1
   12c62:	701a      	strb	r2, [r3, #0]
		return 0;
   12c64:	e7f0      	b.n	12c48 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   12c66:	f107 0801 	add.w	r8, r7, #1
   12c6a:	f10d 0207 	add.w	r2, sp, #7
   12c6e:	4641      	mov	r1, r8
   12c70:	f7ff fda0 	bl	127b4 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   12c74:	2807      	cmp	r0, #7
   12c76:	d92d      	bls.n	12cd4 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   12c78:	f89d 6007 	ldrb.w	r6, [sp, #7]
   12c7c:	2e07      	cmp	r6, #7
   12c7e:	d82b      	bhi.n	12cd8 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   12c80:	4c17      	ldr	r4, [pc, #92]	; (12ce0 <ll_wl_add+0xa8>)
   12c82:	783a      	ldrb	r2, [r7, #0]
   12c84:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   12c88:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   12c8c:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   12c90:	4641      	mov	r1, r8
   12c92:	2206      	movs	r2, #6
   12c94:	3002      	adds	r0, #2
   12c96:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   12c9a:	f7ee ffaf 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12c9e:	462a      	mov	r2, r5
   12ca0:	4641      	mov	r1, r8
   12ca2:	7838      	ldrb	r0, [r7, #0]
   12ca4:	f7ff ff94 	bl	12bd0 <ll_rl_find>
   12ca8:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   12caa:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   12cac:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   12cae:	d80e      	bhi.n	12cce <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   12cb0:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   12cb2:	2328      	movs	r3, #40	; 0x28
   12cb4:	4a0b      	ldr	r2, [pc, #44]	; (12ce4 <ll_wl_add+0xac>)
   12cb6:	4358      	muls	r0, r3
   12cb8:	5c13      	ldrb	r3, [r2, r0]
   12cba:	f043 0320 	orr.w	r3, r3, #32
   12cbe:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   12cc0:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   12cc4:	f043 0301 	orr.w	r3, r3, #1
   12cc8:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   12ccc:	e7bc      	b.n	12c48 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   12cce:	22ff      	movs	r2, #255	; 0xff
   12cd0:	705a      	strb	r2, [r3, #1]
   12cd2:	e7f5      	b.n	12cc0 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   12cd4:	2512      	movs	r5, #18
   12cd6:	e7b7      	b.n	12c48 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12cd8:	2507      	movs	r5, #7
	return wl_add(addr);
   12cda:	e7b5      	b.n	12c48 <ll_wl_add+0x10>
   12cdc:	20001940 	.word	0x20001940
   12ce0:	2000144f 	.word	0x2000144f
   12ce4:	200012dc 	.word	0x200012dc

00012ce8 <ctrl_rl_idx_allowed>:
{
   12ce8:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   12cea:	4b12      	ldr	r3, [pc, #72]	; (12d34 <ctrl_rl_idx_allowed+0x4c>)
   12cec:	781b      	ldrb	r3, [r3, #0]
   12cee:	b1f3      	cbz	r3, 12d2e <ctrl_rl_idx_allowed+0x46>
   12cf0:	2907      	cmp	r1, #7
   12cf2:	d81c      	bhi.n	12d2e <ctrl_rl_idx_allowed+0x46>
   12cf4:	b9d8      	cbnz	r0, 12d2e <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   12cf6:	2328      	movs	r3, #40	; 0x28
   12cf8:	4359      	muls	r1, r3
   12cfa:	4b0f      	ldr	r3, [pc, #60]	; (12d38 <ctrl_rl_idx_allowed+0x50>)
   12cfc:	5c58      	ldrb	r0, [r3, r1]
   12cfe:	07c2      	lsls	r2, r0, #31
   12d00:	d40e      	bmi.n	12d20 <ctrl_rl_idx_allowed+0x38>
   12d02:	4b0e      	ldr	r3, [pc, #56]	; (12d3c <ctrl_rl_idx_allowed+0x54>)
   12d04:	9301      	str	r3, [sp, #4]
   12d06:	9300      	str	r3, [sp, #0]
   12d08:	4a0d      	ldr	r2, [pc, #52]	; (12d40 <ctrl_rl_idx_allowed+0x58>)
   12d0a:	4b0e      	ldr	r3, [pc, #56]	; (12d44 <ctrl_rl_idx_allowed+0x5c>)
   12d0c:	490e      	ldr	r1, [pc, #56]	; (12d48 <ctrl_rl_idx_allowed+0x60>)
   12d0e:	480f      	ldr	r0, [pc, #60]	; (12d4c <ctrl_rl_idx_allowed+0x64>)
   12d10:	f7ee f93c 	bl	f8c <printk>
   12d14:	4040      	eors	r0, r0
   12d16:	f380 8811 	msr	BASEPRI, r0
   12d1a:	f04f 0004 	mov.w	r0, #4
   12d1e:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   12d20:	0743      	lsls	r3, r0, #29
   12d22:	d504      	bpl.n	12d2e <ctrl_rl_idx_allowed+0x46>
   12d24:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   12d28:	b003      	add	sp, #12
   12d2a:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   12d2e:	2001      	movs	r0, #1
   12d30:	e7fa      	b.n	12d28 <ctrl_rl_idx_allowed+0x40>
   12d32:	bf00      	nop
   12d34:	2000141c 	.word	0x2000141c
   12d38:	200012dc 	.word	0x200012dc
   12d3c:	00015e19 	.word	0x00015e19
   12d40:	000171f2 	.word	0x000171f2
   12d44:	0001a4df 	.word	0x0001a4df
   12d48:	00017241 	.word	0x00017241
   12d4c:	0001a516 	.word	0x0001a516

00012d50 <ll_rl_id_addr_get>:
{
   12d50:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12d52:	2b07      	cmp	r3, #7
{
   12d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12d56:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12d58:	d90e      	bls.n	12d78 <ll_rl_id_addr_get+0x28>
   12d5a:	4b15      	ldr	r3, [pc, #84]	; (12db0 <ll_rl_id_addr_get+0x60>)
   12d5c:	9301      	str	r3, [sp, #4]
   12d5e:	9300      	str	r3, [sp, #0]
   12d60:	4a14      	ldr	r2, [pc, #80]	; (12db4 <ll_rl_id_addr_get+0x64>)
   12d62:	4b15      	ldr	r3, [pc, #84]	; (12db8 <ll_rl_id_addr_get+0x68>)
   12d64:	4915      	ldr	r1, [pc, #84]	; (12dbc <ll_rl_id_addr_get+0x6c>)
   12d66:	4816      	ldr	r0, [pc, #88]	; (12dc0 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   12d68:	f7ee f910 	bl	f8c <printk>
   12d6c:	4040      	eors	r0, r0
   12d6e:	f380 8811 	msr	BASEPRI, r0
   12d72:	f04f 0004 	mov.w	r0, #4
   12d76:	df02      	svc	2
   12d78:	2528      	movs	r5, #40	; 0x28
   12d7a:	4c12      	ldr	r4, [pc, #72]	; (12dc4 <ll_rl_id_addr_get+0x74>)
   12d7c:	fb05 f203 	mul.w	r2, r5, r3
   12d80:	5ca2      	ldrb	r2, [r4, r2]
   12d82:	f012 0f01 	tst.w	r2, #1
   12d86:	d107      	bne.n	12d98 <ll_rl_id_addr_get+0x48>
   12d88:	4b09      	ldr	r3, [pc, #36]	; (12db0 <ll_rl_id_addr_get+0x60>)
   12d8a:	9301      	str	r3, [sp, #4]
   12d8c:	9300      	str	r3, [sp, #0]
   12d8e:	4a09      	ldr	r2, [pc, #36]	; (12db4 <ll_rl_id_addr_get+0x64>)
   12d90:	4b09      	ldr	r3, [pc, #36]	; (12db8 <ll_rl_id_addr_get+0x68>)
   12d92:	490a      	ldr	r1, [pc, #40]	; (12dbc <ll_rl_id_addr_get+0x6c>)
   12d94:	480c      	ldr	r0, [pc, #48]	; (12dc8 <ll_rl_id_addr_get+0x78>)
   12d96:	e7e7      	b.n	12d68 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   12d98:	f3c2 1280 	ubfx	r2, r2, #6, #1
   12d9c:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   12d9e:	fb05 4103 	mla	r1, r5, r3, r4
   12da2:	2206      	movs	r2, #6
   12da4:	3101      	adds	r1, #1
}
   12da6:	b003      	add	sp, #12
   12da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   12dac:	f7ee bf26 	b.w	1bfc <memcpy>
   12db0:	00015e19 	.word	0x00015e19
   12db4:	000171f2 	.word	0x000171f2
   12db8:	0001a4f3 	.word	0x0001a4f3
   12dbc:	00017241 	.word	0x00017241
   12dc0:	0001a7ab 	.word	0x0001a7ab
   12dc4:	200012dc 	.word	0x200012dc
   12dc8:	0001a516 	.word	0x0001a516

00012dcc <ctrl_rl_addr_allowed>:
{
   12dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   12dd0:	4b1a      	ldr	r3, [pc, #104]	; (12e3c <ctrl_rl_addr_allowed+0x70>)
   12dd2:	781b      	ldrb	r3, [r3, #0]
   12dd4:	b37b      	cbz	r3, 12e36 <ctrl_rl_addr_allowed+0x6a>
   12dd6:	7813      	ldrb	r3, [r2, #0]
   12dd8:	2bff      	cmp	r3, #255	; 0xff
   12dda:	d12c      	bne.n	12e36 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   12ddc:	4e18      	ldr	r6, [pc, #96]	; (12e40 <ctrl_rl_addr_allowed+0x74>)
   12dde:	2400      	movs	r4, #0
   12de0:	f04f 0828 	mov.w	r8, #40	; 0x28
   12de4:	46b6      	mov	lr, r6
   12de6:	fb08 f304 	mul.w	r3, r8, r4
   12dea:	fa5f fc84 	uxtb.w	ip, r4
   12dee:	5cf7      	ldrb	r7, [r6, r3]
   12df0:	f017 0f01 	tst.w	r7, #1
   12df4:	eb06 0503 	add.w	r5, r6, r3
   12df8:	d01a      	beq.n	12e30 <ctrl_rl_addr_allowed+0x64>
   12dfa:	f3c7 1780 	ubfx	r7, r7, #6, #1
   12dfe:	4287      	cmp	r7, r0
   12e00:	d116      	bne.n	12e30 <ctrl_rl_addr_allowed+0x64>
   12e02:	3306      	adds	r3, #6
   12e04:	1e4f      	subs	r7, r1, #1
   12e06:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   12e08:	f815 af01 	ldrb.w	sl, [r5, #1]!
   12e0c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   12e10:	45ca      	cmp	sl, r9
   12e12:	d10d      	bne.n	12e30 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   12e14:	429d      	cmp	r5, r3
   12e16:	d1f7      	bne.n	12e08 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   12e18:	2328      	movs	r3, #40	; 0x28
   12e1a:	435c      	muls	r4, r3
				*rl_idx = i;
   12e1c:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   12e20:	f81e 0004 	ldrb.w	r0, [lr, r4]
   12e24:	0743      	lsls	r3, r0, #29
   12e26:	d506      	bpl.n	12e36 <ctrl_rl_addr_allowed+0x6a>
   12e28:	f3c0 1000 	ubfx	r0, r0, #4, #1
   12e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12e30:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12e32:	2c08      	cmp	r4, #8
   12e34:	d1d7      	bne.n	12de6 <ctrl_rl_addr_allowed+0x1a>
   12e36:	2001      	movs	r0, #1
}
   12e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12e3c:	2000141c 	.word	0x2000141c
   12e40:	200012dc 	.word	0x200012dc

00012e44 <ctrl_rl_addr_resolve>:
{
   12e44:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   12e46:	4c0d      	ldr	r4, [pc, #52]	; (12e7c <ctrl_rl_addr_resolve+0x38>)
   12e48:	7824      	ldrb	r4, [r4, #0]
   12e4a:	b1a4      	cbz	r4, 12e76 <ctrl_rl_addr_resolve+0x32>
   12e4c:	2a07      	cmp	r2, #7
   12e4e:	d812      	bhi.n	12e76 <ctrl_rl_addr_resolve+0x32>
   12e50:	2528      	movs	r5, #40	; 0x28
   12e52:	4c0b      	ldr	r4, [pc, #44]	; (12e80 <ctrl_rl_addr_resolve+0x3c>)
   12e54:	fb05 f602 	mul.w	r6, r5, r2
   12e58:	5da6      	ldrb	r6, [r4, r6]
   12e5a:	0736      	lsls	r6, r6, #28
   12e5c:	d50b      	bpl.n	12e76 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   12e5e:	b150      	cbz	r0, 12e76 <ctrl_rl_addr_resolve+0x32>
   12e60:	794b      	ldrb	r3, [r1, #5]
   12e62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12e66:	2b40      	cmp	r3, #64	; 0x40
   12e68:	d105      	bne.n	12e76 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12e6a:	fb05 4202 	mla	r2, r5, r2, r4
   12e6e:	1dd0      	adds	r0, r2, #7
}
   12e70:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12e72:	f7ee bfd8 	b.w	1e26 <bt_rpa_irk_matches>
}
   12e76:	2000      	movs	r0, #0
   12e78:	bc70      	pop	{r4, r5, r6}
   12e7a:	4770      	bx	lr
   12e7c:	2000141c 	.word	0x2000141c
   12e80:	200012dc 	.word	0x200012dc

00012e84 <ctrl_rl_enabled>:
	return rl_enable;
   12e84:	4b02      	ldr	r3, [pc, #8]	; (12e90 <ctrl_rl_enabled+0xc>)
   12e86:	7818      	ldrb	r0, [r3, #0]
}
   12e88:	3000      	adds	r0, #0
   12e8a:	bf18      	it	ne
   12e8c:	2001      	movne	r0, #1
   12e8e:	4770      	bx	lr
   12e90:	2000141c 	.word	0x2000141c

00012e94 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   12e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e98:	b089      	sub	sp, #36	; 0x24
   12e9a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   12e9c:	f002 fa62 	bl	15364 <_impl_k_uptime_get>
   12ea0:	4680      	mov	r8, r0
   12ea2:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   12ea4:	2c00      	cmp	r4, #0
   12ea6:	d148      	bne.n	12f3a <ll_rl_rpa_update+0xa6>
   12ea8:	4b3b      	ldr	r3, [pc, #236]	; (12f98 <ll_rl_rpa_update+0x104>)
   12eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   12eae:	1c5c      	adds	r4, r3, #1
   12eb0:	bf08      	it	eq
   12eb2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   12eb6:	d040      	beq.n	12f3a <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   12eb8:	1a82      	subs	r2, r0, r2
   12eba:	eb61 0303 	sbc.w	r3, r1, r3
   12ebe:	4937      	ldr	r1, [pc, #220]	; (12f9c <ll_rl_rpa_update+0x108>)
   12ec0:	6808      	ldr	r0, [r1, #0]
   12ec2:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   12ec4:	4282      	cmp	r2, r0
   12ec6:	418b      	sbcs	r3, r1
   12ec8:	bfac      	ite	ge
   12eca:	2601      	movge	r6, #1
   12ecc:	2600      	movlt	r6, #0
   12ece:	4d34      	ldr	r5, [pc, #208]	; (12fa0 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12ed0:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   12ed4:	2400      	movs	r4, #0
   12ed6:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12ed8:	2328      	movs	r3, #40	; 0x28
   12eda:	4363      	muls	r3, r4
   12edc:	f81b 3003 	ldrb.w	r3, [fp, r3]
   12ee0:	07d8      	lsls	r0, r3, #31
   12ee2:	d54d      	bpl.n	12f80 <ll_rl_rpa_update+0xec>
   12ee4:	b90e      	cbnz	r6, 12eea <ll_rl_rpa_update+0x56>
   12ee6:	0799      	lsls	r1, r3, #30
   12ee8:	d44a      	bmi.n	12f80 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   12eea:	2328      	movs	r3, #40	; 0x28
   12eec:	4363      	muls	r3, r4
   12eee:	5cfb      	ldrb	r3, [r7, r3]
   12ef0:	075a      	lsls	r2, r3, #29
   12ef2:	d524      	bpl.n	12f3e <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   12ef4:	7c2a      	ldrb	r2, [r5, #16]
   12ef6:	4b2b      	ldr	r3, [pc, #172]	; (12fa4 <ll_rl_rpa_update+0x110>)
   12ef8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   12efc:	f103 0210 	add.w	r2, r3, #16
   12f00:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   12f04:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   12f08:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   12f0c:	429a      	cmp	r2, r3
   12f0e:	d1f9      	bne.n	12f04 <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   12f10:	f105 0117 	add.w	r1, r5, #23
   12f14:	a804      	add	r0, sp, #16
   12f16:	f7ee ff99 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   12f1a:	b180      	cbz	r0, 12f3e <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   12f1c:	4b22      	ldr	r3, [pc, #136]	; (12fa8 <ll_rl_rpa_update+0x114>)
   12f1e:	9301      	str	r3, [sp, #4]
   12f20:	9300      	str	r3, [sp, #0]
   12f22:	4a22      	ldr	r2, [pc, #136]	; (12fac <ll_rl_rpa_update+0x118>)
   12f24:	4b22      	ldr	r3, [pc, #136]	; (12fb0 <ll_rl_rpa_update+0x11c>)
   12f26:	4923      	ldr	r1, [pc, #140]	; (12fb4 <ll_rl_rpa_update+0x120>)
   12f28:	4823      	ldr	r0, [pc, #140]	; (12fb8 <ll_rl_rpa_update+0x124>)
   12f2a:	f7ee f82f 	bl	f8c <printk>
   12f2e:	4040      	eors	r0, r0
   12f30:	f380 8811 	msr	BASEPRI, r0
   12f34:	f04f 0004 	mov.w	r0, #4
   12f38:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   12f3a:	2601      	movs	r6, #1
   12f3c:	e7c7      	b.n	12ece <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   12f3e:	2328      	movs	r3, #40	; 0x28
   12f40:	4363      	muls	r3, r4
   12f42:	5cfb      	ldrb	r3, [r7, r3]
   12f44:	071b      	lsls	r3, r3, #28
   12f46:	d515      	bpl.n	12f74 <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   12f48:	f10d 0a10 	add.w	sl, sp, #16
   12f4c:	4651      	mov	r1, sl
   12f4e:	4628      	mov	r0, r5
   12f50:	f7ee ff7c 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   12f54:	2800      	cmp	r0, #0
   12f56:	d1e1      	bne.n	12f1c <ll_rl_rpa_update+0x88>
   12f58:	4b18      	ldr	r3, [pc, #96]	; (12fbc <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   12f5a:	f8c5 a01d 	str.w	sl, [r5, #29]
   12f5e:	2206      	movs	r2, #6
   12f60:	fb02 3304 	mla	r3, r2, r4, r3
   12f64:	4618      	mov	r0, r3
   12f66:	4651      	mov	r1, sl
   12f68:	9303      	str	r3, [sp, #12]
   12f6a:	f7ee fe47 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   12f6e:	9b03      	ldr	r3, [sp, #12]
   12f70:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   12f74:	2328      	movs	r3, #40	; 0x28
   12f76:	4363      	muls	r3, r4
   12f78:	5cfa      	ldrb	r2, [r7, r3]
   12f7a:	f042 0202 	orr.w	r2, r2, #2
   12f7e:	54fa      	strb	r2, [r7, r3]
   12f80:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12f82:	2c08      	cmp	r4, #8
   12f84:	f105 0528 	add.w	r5, r5, #40	; 0x28
   12f88:	d1a6      	bne.n	12ed8 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   12f8a:	b116      	cbz	r6, 12f92 <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   12f8c:	4b02      	ldr	r3, [pc, #8]	; (12f98 <ll_rl_rpa_update+0x104>)
   12f8e:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   12f92:	b009      	add	sp, #36	; 0x24
   12f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f98:	20001938 	.word	0x20001938
   12f9c:	2000196c 	.word	0x2000196c
   12fa0:	200012e3 	.word	0x200012e3
   12fa4:	2000125b 	.word	0x2000125b
   12fa8:	00015e19 	.word	0x00015e19
   12fac:	000171f2 	.word	0x000171f2
   12fb0:	0001a505 	.word	0x0001a505
   12fb4:	00017241 	.word	0x00017241
   12fb8:	0001a453 	.word	0x0001a453
   12fbc:	20001222 	.word	0x20001222

00012fc0 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   12fc0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   12fc2:	2001      	movs	r0, #1
   12fc4:	f7ff ff66 	bl	12e94 <ll_rl_rpa_update>
   12fc8:	4b03      	ldr	r3, [pc, #12]	; (12fd8 <rpa_timeout+0x18>)
   12fca:	4904      	ldr	r1, [pc, #16]	; (12fdc <rpa_timeout+0x1c>)
   12fcc:	681a      	ldr	r2, [r3, #0]
   12fce:	4804      	ldr	r0, [pc, #16]	; (12fe0 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   12fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12fd4:	f002 bcc4 	b.w	15960 <k_delayed_work_submit_to_queue>
   12fd8:	2000196c 	.word	0x2000196c
   12fdc:	20001944 	.word	0x20001944
   12fe0:	200019b0 	.word	0x200019b0

00012fe4 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   12fe4:	4b07      	ldr	r3, [pc, #28]	; (13004 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   12fe6:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   12fe8:	b130      	cbz	r0, 12ff8 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   12fea:	b14b      	cbz	r3, 13000 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   12fec:	4b06      	ldr	r3, [pc, #24]	; (13008 <ll_adv_scan_state_cb+0x24>)
   12fee:	4907      	ldr	r1, [pc, #28]	; (1300c <ll_adv_scan_state_cb+0x28>)
   12ff0:	681a      	ldr	r2, [r3, #0]
   12ff2:	4807      	ldr	r0, [pc, #28]	; (13010 <ll_adv_scan_state_cb+0x2c>)
   12ff4:	f002 bcb4 	b.w	15960 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   12ff8:	b113      	cbz	r3, 13000 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   12ffa:	4804      	ldr	r0, [pc, #16]	; (1300c <ll_adv_scan_state_cb+0x28>)
   12ffc:	f002 bc4c 	b.w	15898 <k_delayed_work_cancel>
   13000:	4770      	bx	lr
   13002:	bf00      	nop
   13004:	2000141c 	.word	0x2000141c
   13008:	2000196c 	.word	0x2000196c
   1300c:	20001944 	.word	0x20001944
   13010:	200019b0 	.word	0x200019b0

00013014 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   13014:	2008      	movs	r0, #8
   13016:	4770      	bx	lr

00013018 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   13018:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   1301a:	f7ff fc3d 	bl	12898 <rl_access_check.constprop.1>
   1301e:	b178      	cbz	r0, 13040 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   13020:	4908      	ldr	r1, [pc, #32]	; (13044 <ll_rl_clear+0x2c>)
   13022:	2300      	movs	r3, #0
   13024:	2428      	movs	r4, #40	; 0x28
   13026:	fb04 f203 	mul.w	r2, r4, r3
   1302a:	3301      	adds	r3, #1
   1302c:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1302e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   13030:	f36f 0000 	bfc	r0, #0, #1
   13034:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   13036:	d1f6      	bne.n	13026 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   13038:	4b03      	ldr	r3, [pc, #12]	; (13048 <ll_rl_clear+0x30>)
   1303a:	2000      	movs	r0, #0
   1303c:	7018      	strb	r0, [r3, #0]
   1303e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13040:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   13042:	bd10      	pop	{r4, pc}
   13044:	200012dc 	.word	0x200012dc
   13048:	20001252 	.word	0x20001252

0001304c <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13050:	b085      	sub	sp, #20
   13052:	4607      	mov	r7, r0
   13054:	4689      	mov	r9, r1
   13056:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   13058:	f7ff fc1e 	bl	12898 <rl_access_check.constprop.1>
   1305c:	2800      	cmp	r0, #0
   1305e:	f000 8086 	beq.w	1316e <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   13062:	f107 0801 	add.w	r8, r7, #1
   13066:	f10d 020f 	add.w	r2, sp, #15
   1306a:	4641      	mov	r1, r8
   1306c:	7838      	ldrb	r0, [r7, #0]
   1306e:	f7ff fdaf 	bl	12bd0 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   13072:	2807      	cmp	r0, #7
   13074:	d97d      	bls.n	13172 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   13076:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1307a:	2d07      	cmp	r5, #7
   1307c:	d87b      	bhi.n	13176 <ll_rl_add+0x12a>
   1307e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   13082:	4c3e      	ldr	r4, [pc, #248]	; (1317c <ll_rl_add+0x130>)
   13084:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   13088:	2628      	movs	r6, #40	; 0x28
   1308a:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1308c:	f10b 0001 	add.w	r0, fp, #1
   13090:	2206      	movs	r2, #6
   13092:	4641      	mov	r1, r8
   13094:	4420      	add	r0, r4
   13096:	f7ee fdb1 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1309a:	7839      	ldrb	r1, [r7, #0]
   1309c:	5da3      	ldrb	r3, [r4, r6]
   1309e:	19a2      	adds	r2, r4, r6
   130a0:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   130a4:	4648      	mov	r0, r9
   130a6:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   130a8:	9201      	str	r2, [sp, #4]
   130aa:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   130ac:	f7f5 fa1f 	bl	84ee <mem_nz>
   130b0:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   130b2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   130b4:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   130b8:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   130ba:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   130bc:	f7f5 fa17 	bl	84ee <mem_nz>
   130c0:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   130c2:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   130c4:	f000 0001 	and.w	r0, r0, #1
   130c8:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   130cc:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   130d0:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   130d2:	d138      	bne.n	13146 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   130d4:	b158      	cbz	r0, 130ee <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   130d6:	f10b 0007 	add.w	r0, fp, #7
   130da:	2210      	movs	r2, #16
   130dc:	4651      	mov	r1, sl
   130de:	4420      	add	r0, r4
   130e0:	f7ee fd8c 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
   130e4:	2328      	movs	r3, #40	; 0x28
   130e6:	fb03 4305 	mla	r3, r3, r5, r4
   130ea:	2200      	movs	r2, #0
   130ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   130ee:	2628      	movs	r6, #40	; 0x28
   130f0:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   130f2:	f10b 0018 	add.w	r0, fp, #24
   130f6:	2206      	movs	r2, #6
   130f8:	2100      	movs	r1, #0
   130fa:	4420      	add	r0, r4
   130fc:	f7ee fdaa 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
   13100:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   13102:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   13106:	f36f 1304 	bfc	r3, #4, #1
   1310a:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1310c:	2200      	movs	r2, #0
   1310e:	4641      	mov	r1, r8
   13110:	7838      	ldrb	r0, [r7, #0]
   13112:	f7ff fb4f 	bl	127b4 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   13116:	2807      	cmp	r0, #7
   13118:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   1311a:	bf9d      	ittte	ls
   1311c:	4a18      	ldrls	r2, [pc, #96]	; (13180 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   1311e:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   13122:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   13126:	f36f 1345 	bfchi	r3, #5, #1
   1312a:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   1312c:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   13130:	bf98      	it	ls
   13132:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   13134:	435d      	muls	r5, r3

	return 0;
   13136:	2000      	movs	r0, #0
	rl[i].taken = 1;
   13138:	5d63      	ldrb	r3, [r4, r5]
   1313a:	f043 0301 	orr.w	r3, r3, #1
   1313e:	5563      	strb	r3, [r4, r5]
}
   13140:	b005      	add	sp, #20
   13142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   13146:	4b0f      	ldr	r3, [pc, #60]	; (13184 <ll_rl_add+0x138>)
   13148:	7819      	ldrb	r1, [r3, #0]
   1314a:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1314c:	4a0e      	ldr	r2, [pc, #56]	; (13188 <ll_rl_add+0x13c>)
   1314e:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   13150:	1c4a      	adds	r2, r1, #1
   13152:	701a      	strb	r2, [r3, #0]
   13154:	4b0d      	ldr	r3, [pc, #52]	; (1318c <ll_rl_add+0x140>)
   13156:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   1315a:	f109 0210 	add.w	r2, r9, #16
   1315e:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   13160:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   13164:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   13168:	454a      	cmp	r2, r9
   1316a:	d1f9      	bne.n	13160 <ll_rl_add+0x114>
   1316c:	e7b2      	b.n	130d4 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1316e:	200c      	movs	r0, #12
   13170:	e7e6      	b.n	13140 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   13172:	2012      	movs	r0, #18
   13174:	e7e4      	b.n	13140 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   13176:	2007      	movs	r0, #7
   13178:	e7e2      	b.n	13140 <ll_rl_add+0xf4>
   1317a:	bf00      	nop
   1317c:	200012dc 	.word	0x200012dc
   13180:	2000144f 	.word	0x2000144f
   13184:	20001252 	.word	0x20001252
   13188:	20001253 	.word	0x20001253
   1318c:	2000125b 	.word	0x2000125b

00013190 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   13190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13194:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   13196:	f7ff fb7f 	bl	12898 <rl_access_check.constprop.1>
   1319a:	2800      	cmp	r0, #0
   1319c:	d053      	beq.n	13246 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1319e:	f109 0a01 	add.w	sl, r9, #1
   131a2:	2200      	movs	r2, #0
   131a4:	4651      	mov	r1, sl
   131a6:	f899 0000 	ldrb.w	r0, [r9]
   131aa:	f7ff fd11 	bl	12bd0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   131ae:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   131b0:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   131b2:	d84b      	bhi.n	1324c <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   131b4:	f04f 0b28 	mov.w	fp, #40	; 0x28
   131b8:	4c26      	ldr	r4, [pc, #152]	; (13254 <ll_rl_remove+0xc4>)
   131ba:	fb0b f300 	mul.w	r3, fp, r0
   131be:	18e2      	adds	r2, r4, r3
   131c0:	5ce3      	ldrb	r3, [r4, r3]
   131c2:	075b      	lsls	r3, r3, #29
   131c4:	d524      	bpl.n	13210 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   131c6:	4e24      	ldr	r6, [pc, #144]	; (13258 <ll_rl_remove+0xc8>)
   131c8:	7835      	ldrb	r5, [r6, #0]
   131ca:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   131cc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   131d0:	d01b      	beq.n	1320a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   131d2:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   131d4:	42af      	cmp	r7, r5
   131d6:	d018      	beq.n	1320a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   131d8:	4820      	ldr	r0, [pc, #128]	; (1325c <ll_rl_remove+0xcc>)
   131da:	2210      	movs	r2, #16
   131dc:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   131e0:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   131e4:	f7ee fd0a 	bl	1bfc <memcpy>
   131e8:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   131ea:	fb0b f103 	mul.w	r1, fp, r3
   131ee:	1862      	adds	r2, r4, r1
   131f0:	5c61      	ldrb	r1, [r4, r1]
   131f2:	f011 0f01 	tst.w	r1, #1
   131f6:	b2d8      	uxtb	r0, r3
   131f8:	d021      	beq.n	1323e <ll_rl_remove+0xae>
   131fa:	0749      	lsls	r1, r1, #29
   131fc:	d51f      	bpl.n	1323e <ll_rl_remove+0xae>
   131fe:	7dd1      	ldrb	r1, [r2, #23]
   13200:	42a9      	cmp	r1, r5
   13202:	d11c      	bne.n	1323e <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   13204:	4b16      	ldr	r3, [pc, #88]	; (13260 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   13206:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   13208:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   1320a:	7833      	ldrb	r3, [r6, #0]
   1320c:	3b01      	subs	r3, #1
   1320e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   13210:	2200      	movs	r2, #0
   13212:	4651      	mov	r1, sl
   13214:	f899 0000 	ldrb.w	r0, [r9]
   13218:	f7ff facc 	bl	127b4 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1321c:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   1321e:	bf9f      	itttt	ls
   13220:	4b10      	ldrls	r3, [pc, #64]	; (13264 <ll_rl_remove+0xd4>)
   13222:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   13226:	23ff      	movls	r3, #255	; 0xff
   13228:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   1322a:	2028      	movs	r0, #40	; 0x28
   1322c:	fb00 f008 	mul.w	r0, r0, r8
   13230:	5c23      	ldrb	r3, [r4, r0]
   13232:	f36f 0300 	bfc	r3, #0, #1
   13236:	5423      	strb	r3, [r4, r0]
		return 0;
   13238:	2000      	movs	r0, #0
   1323a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1323e:	3301      	adds	r3, #1
				for (k = 0;
   13240:	2b08      	cmp	r3, #8
   13242:	d1d2      	bne.n	131ea <ll_rl_remove+0x5a>
   13244:	e7e1      	b.n	1320a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13246:	200c      	movs	r0, #12
   13248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1324c:	2002      	movs	r0, #2
}
   1324e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13252:	bf00      	nop
   13254:	200012dc 	.word	0x200012dc
   13258:	20001252 	.word	0x20001252
   1325c:	2000125b 	.word	0x2000125b
   13260:	20001253 	.word	0x20001253
   13264:	2000144f 	.word	0x2000144f

00013268 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   13268:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1326a:	795c      	ldrb	r4, [r3, #5]
   1326c:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   13270:	2c40      	cmp	r4, #64	; 0x40
{
   13272:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   13274:	d117      	bne.n	132a6 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   13276:	b119      	cbz	r1, 13280 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   13278:	2200      	movs	r2, #0
   1327a:	f7ff fca9 	bl	12bd0 <ll_rl_find>
   1327e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   13280:	2a07      	cmp	r2, #7
   13282:	d810      	bhi.n	132a6 <ll_rl_crpa_set+0x3e>
   13284:	2128      	movs	r1, #40	; 0x28
   13286:	4c08      	ldr	r4, [pc, #32]	; (132a8 <ll_rl_crpa_set+0x40>)
   13288:	fb01 f302 	mul.w	r3, r1, r2
   1328c:	5ce3      	ldrb	r3, [r4, r3]
   1328e:	07db      	lsls	r3, r3, #31
   13290:	d509      	bpl.n	132a6 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   13292:	2018      	movs	r0, #24
   13294:	fb11 0002 	smlabb	r0, r1, r2, r0
   13298:	4420      	add	r0, r4
   1329a:	4629      	mov	r1, r5
   1329c:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   1329e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   132a2:	f7ee bcab 	b.w	1bfc <memcpy>
   132a6:	bd70      	pop	{r4, r5, r6, pc}
   132a8:	200012dc 	.word	0x200012dc

000132ac <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   132ac:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   132ae:	2200      	movs	r2, #0
{
   132b0:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   132b2:	1c41      	adds	r1, r0, #1
   132b4:	7800      	ldrb	r0, [r0, #0]
   132b6:	f7ff fc8b 	bl	12bd0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   132ba:	2807      	cmp	r0, #7
   132bc:	d901      	bls.n	132c2 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   132be:	2002      	movs	r0, #2
   132c0:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   132c2:	2428      	movs	r4, #40	; 0x28
   132c4:	2318      	movs	r3, #24
   132c6:	fb14 3000 	smlabb	r0, r4, r0, r3
   132ca:	4c07      	ldr	r4, [pc, #28]	; (132e8 <ll_rl_crpa_get+0x3c>)
   132cc:	4404      	add	r4, r0
   132ce:	2106      	movs	r1, #6
   132d0:	4620      	mov	r0, r4
   132d2:	f7f5 f90c 	bl	84ee <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   132d6:	2800      	cmp	r0, #0
   132d8:	d0f1      	beq.n	132be <ll_rl_crpa_get+0x12>
   132da:	2206      	movs	r2, #6
   132dc:	4621      	mov	r1, r4
   132de:	4628      	mov	r0, r5
   132e0:	f7ee fc8c 	bl	1bfc <memcpy>
			return 0;
   132e4:	2000      	movs	r0, #0
}
   132e6:	bd38      	pop	{r3, r4, r5, pc}
   132e8:	200012dc 	.word	0x200012dc

000132ec <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   132ec:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   132ee:	2200      	movs	r2, #0
{
   132f0:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   132f2:	1c41      	adds	r1, r0, #1
   132f4:	7800      	ldrb	r0, [r0, #0]
   132f6:	f7ff fc6b 	bl	12bd0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   132fa:	2807      	cmp	r0, #7
   132fc:	d80a      	bhi.n	13314 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   132fe:	4b06      	ldr	r3, [pc, #24]	; (13318 <ll_rl_lrpa_get+0x2c>)
   13300:	2228      	movs	r2, #40	; 0x28
   13302:	fb02 3000 	mla	r0, r2, r0, r3
   13306:	2206      	movs	r2, #6
   13308:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1330a:	4620      	mov	r0, r4
   1330c:	f7ee fc76 	bl	1bfc <memcpy>
		return 0;
   13310:	2000      	movs	r0, #0
   13312:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13314:	2002      	movs	r0, #2
}
   13316:	bd10      	pop	{r4, pc}
   13318:	200012dc 	.word	0x200012dc

0001331c <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1331c:	b510      	push	{r4, lr}
   1331e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   13320:	f7ff faba 	bl	12898 <rl_access_check.constprop.1>
   13324:	b140      	cbz	r0, 13338 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   13326:	b11c      	cbz	r4, 13330 <ll_rl_enable+0x14>
   13328:	2c01      	cmp	r4, #1
   1332a:	d001      	beq.n	13330 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1332c:	2012      	movs	r0, #18
	}

	return 0;
}
   1332e:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   13330:	4b02      	ldr	r3, [pc, #8]	; (1333c <ll_rl_enable+0x20>)
   13332:	701c      	strb	r4, [r3, #0]
	return 0;
   13334:	2000      	movs	r0, #0
		break;
   13336:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13338:	200c      	movs	r0, #12
   1333a:	bd10      	pop	{r4, pc}
   1333c:	2000141c 	.word	0x2000141c

00013340 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   13340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13344:	4358      	muls	r0, r3
   13346:	4b01      	ldr	r3, [pc, #4]	; (1334c <ll_rl_timeout_set+0xc>)
   13348:	6018      	str	r0, [r3, #0]
   1334a:	4770      	bx	lr
   1334c:	2000196c 	.word	0x2000196c

00013350 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   13350:	b538      	push	{r3, r4, r5, lr}
   13352:	4605      	mov	r5, r0
   13354:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   13356:	f7ff fa9f 	bl	12898 <rl_access_check.constprop.1>
   1335a:	b1d8      	cbz	r0, 13394 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1335c:	2200      	movs	r2, #0
   1335e:	1c69      	adds	r1, r5, #1
   13360:	7828      	ldrb	r0, [r5, #0]
   13362:	f7ff fc35 	bl	12bd0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   13366:	2807      	cmp	r0, #7
   13368:	d816      	bhi.n	13398 <ll_priv_mode_set+0x48>
		switch (mode) {
   1336a:	b11c      	cbz	r4, 13374 <ll_priv_mode_set+0x24>
   1336c:	2c01      	cmp	r4, #1
   1336e:	d00a      	beq.n	13386 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   13370:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   13372:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   13374:	2328      	movs	r3, #40	; 0x28
   13376:	4a09      	ldr	r2, [pc, #36]	; (1339c <ll_priv_mode_set+0x4c>)
   13378:	4358      	muls	r0, r3
   1337a:	5c13      	ldrb	r3, [r2, r0]
   1337c:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   13380:	5413      	strb	r3, [r2, r0]
	return 0;
   13382:	2000      	movs	r0, #0
			break;
   13384:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   13386:	2328      	movs	r3, #40	; 0x28
   13388:	4a04      	ldr	r2, [pc, #16]	; (1339c <ll_priv_mode_set+0x4c>)
   1338a:	4358      	muls	r0, r3
   1338c:	5c13      	ldrb	r3, [r2, r0]
   1338e:	f043 0310 	orr.w	r3, r3, #16
   13392:	e7f5      	b.n	13380 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13394:	200c      	movs	r0, #12
   13396:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13398:	2002      	movs	r0, #2
   1339a:	bd38      	pop	{r3, r4, r5, pc}
   1339c:	200012dc 	.word	0x200012dc

000133a0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   133a0:	4a19      	ldr	r2, [pc, #100]	; (13408 <ll_filter_reset+0x68>)
   133a2:	2300      	movs	r3, #0
{
   133a4:	b430      	push	{r4, r5}
	wl_anon = 0;
   133a6:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   133a8:	4a18      	ldr	r2, [pc, #96]	; (1340c <ll_filter_reset+0x6c>)
   133aa:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   133ae:	f36f 0100 	bfc	r1, #0, #1
   133b2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   133b6:	3301      	adds	r3, #1
   133b8:	2b08      	cmp	r3, #8
   133ba:	d1f6      	bne.n	133aa <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   133bc:	4a14      	ldr	r2, [pc, #80]	; (13410 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   133be:	4915      	ldr	r1, [pc, #84]	; (13414 <ll_filter_reset+0x74>)
	rl_enable = 0;
   133c0:	2300      	movs	r3, #0
   133c2:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   133c4:	4a14      	ldr	r2, [pc, #80]	; (13418 <ll_filter_reset+0x78>)
   133c6:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   133c8:	4a14      	ldr	r2, [pc, #80]	; (1341c <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   133ca:	4915      	ldr	r1, [pc, #84]	; (13420 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   133cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   133d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   133d4:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   133d8:	2528      	movs	r5, #40	; 0x28
   133da:	fb05 f203 	mul.w	r2, r5, r3
   133de:	3301      	adds	r3, #1
   133e0:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   133e2:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   133e4:	f36f 0400 	bfc	r4, #0, #1
   133e8:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   133ea:	d1f6      	bne.n	133da <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   133ec:	4b0d      	ldr	r3, [pc, #52]	; (13424 <ll_filter_reset+0x84>)
   133ee:	2200      	movs	r2, #0
   133f0:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   133f2:	b120      	cbz	r0, 133fe <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   133f4:	490c      	ldr	r1, [pc, #48]	; (13428 <ll_filter_reset+0x88>)
   133f6:	480d      	ldr	r0, [pc, #52]	; (1342c <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   133f8:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   133fa:	f002 ba3d 	b.w	15878 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   133fe:	480b      	ldr	r0, [pc, #44]	; (1342c <ll_filter_reset+0x8c>)
}
   13400:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   13402:	f002 ba49 	b.w	15898 <k_delayed_work_cancel>
   13406:	bf00      	nop
   13408:	20001940 	.word	0x20001940
   1340c:	2000144f 	.word	0x2000144f
   13410:	2000141c 	.word	0x2000141c
   13414:	000dbba0 	.word	0x000dbba0
   13418:	2000196c 	.word	0x2000196c
   1341c:	20001938 	.word	0x20001938
   13420:	200012dc 	.word	0x200012dc
   13424:	20001252 	.word	0x20001252
   13428:	00012fc1 	.word	0x00012fc1
   1342c:	20001944 	.word	0x20001944

00013430 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   13430:	4b05      	ldr	r3, [pc, #20]	; (13448 <cntr_init+0x18>)
   13432:	2200      	movs	r2, #0
   13434:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   13438:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1343c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   13440:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   13444:	4770      	bx	lr
   13446:	bf00      	nop
   13448:	4000b000 	.word	0x4000b000

0001344c <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   1344c:	4a04      	ldr	r2, [pc, #16]	; (13460 <cntr_start+0x14>)
   1344e:	7813      	ldrb	r3, [r2, #0]
   13450:	1c59      	adds	r1, r3, #1
   13452:	7011      	strb	r1, [r2, #0]
   13454:	2001      	movs	r0, #1
   13456:	b913      	cbnz	r3, 1345e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   13458:	4a02      	ldr	r2, [pc, #8]	; (13464 <cntr_start+0x18>)
   1345a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   1345c:	4618      	mov	r0, r3
}
   1345e:	4770      	bx	lr
   13460:	200014c1 	.word	0x200014c1
   13464:	4000b000 	.word	0x4000b000

00013468 <cntr_stop>:

u32_t cntr_stop(void)
{
   13468:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   1346a:	4b0f      	ldr	r3, [pc, #60]	; (134a8 <cntr_stop+0x40>)
   1346c:	7818      	ldrb	r0, [r3, #0]
   1346e:	b970      	cbnz	r0, 1348e <cntr_stop+0x26>
   13470:	4b0e      	ldr	r3, [pc, #56]	; (134ac <cntr_stop+0x44>)
   13472:	9301      	str	r3, [sp, #4]
   13474:	9300      	str	r3, [sp, #0]
   13476:	4a0e      	ldr	r2, [pc, #56]	; (134b0 <cntr_stop+0x48>)
   13478:	4b0e      	ldr	r3, [pc, #56]	; (134b4 <cntr_stop+0x4c>)
   1347a:	490f      	ldr	r1, [pc, #60]	; (134b8 <cntr_stop+0x50>)
   1347c:	480f      	ldr	r0, [pc, #60]	; (134bc <cntr_stop+0x54>)
   1347e:	f7ed fd85 	bl	f8c <printk>
   13482:	4040      	eors	r0, r0
   13484:	f380 8811 	msr	BASEPRI, r0
   13488:	f04f 0004 	mov.w	r0, #4
   1348c:	df02      	svc	2

	if (--_refcount) {
   1348e:	3801      	subs	r0, #1
   13490:	b2c0      	uxtb	r0, r0
   13492:	7018      	strb	r0, [r3, #0]
   13494:	2301      	movs	r3, #1
   13496:	b920      	cbnz	r0, 134a2 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   13498:	4a09      	ldr	r2, [pc, #36]	; (134c0 <cntr_stop+0x58>)
   1349a:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   1349c:	b003      	add	sp, #12
   1349e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   134a2:	4618      	mov	r0, r3
   134a4:	e7fa      	b.n	1349c <cntr_stop+0x34>
   134a6:	bf00      	nop
   134a8:	200014c1 	.word	0x200014c1
   134ac:	00015e19 	.word	0x00015e19
   134b0:	000171f2 	.word	0x000171f2
   134b4:	0001a7d7 	.word	0x0001a7d7
   134b8:	00017241 	.word	0x00017241
   134bc:	0001a7e1 	.word	0x0001a7e1
   134c0:	4000b000 	.word	0x4000b000

000134c4 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   134c4:	4b01      	ldr	r3, [pc, #4]	; (134cc <cntr_cnt_get+0x8>)
   134c6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   134ca:	4770      	bx	lr
   134cc:	4000b000 	.word	0x4000b000

000134d0 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   134d0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   134d4:	4b01      	ldr	r3, [pc, #4]	; (134dc <cntr_cmp_set+0xc>)
   134d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   134da:	4770      	bx	lr
   134dc:	4000b000 	.word	0x4000b000

000134e0 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   134e0:	4b11      	ldr	r3, [pc, #68]	; (13528 <do_ecb+0x48>)
{
   134e2:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   134e4:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   134e6:	2500      	movs	r5, #0
   134e8:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   134ea:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   134ec:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   134f0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   134f4:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   134f8:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   134fa:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   134fe:	b934      	cbnz	r4, 1350e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   13500:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   13504:	b91c      	cbnz	r4, 1350e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   13506:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1350a:	2c00      	cmp	r4, #0
   1350c:	d1f5      	bne.n	134fa <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   1350e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   13510:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   13514:	2c00      	cmp	r4, #0
   13516:	d1e8      	bne.n	134ea <do_ecb+0xa>
   13518:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   1351c:	2e00      	cmp	r6, #0
   1351e:	d0e4      	beq.n	134ea <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   13520:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   13524:	bd70      	pop	{r4, r5, r6, pc}
   13526:	bf00      	nop
   13528:	4000e000 	.word	0x4000e000

0001352c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   1352c:	b570      	push	{r4, r5, r6, lr}
   1352e:	b08c      	sub	sp, #48	; 0x30
   13530:	460e      	mov	r6, r1
   13532:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   13534:	4601      	mov	r1, r0
   13536:	2210      	movs	r2, #16
   13538:	4668      	mov	r0, sp
{
   1353a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1353c:	f7f4 ffc8 	bl	84d0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   13540:	2210      	movs	r2, #16
   13542:	eb0d 0002 	add.w	r0, sp, r2
   13546:	4631      	mov	r1, r6
   13548:	f7f4 ffc2 	bl	84d0 <mem_rcopy>

	do_ecb(&ecb);
   1354c:	4668      	mov	r0, sp
   1354e:	f7ff ffc7 	bl	134e0 <do_ecb>

	if (cipher_text_le) {
   13552:	b125      	cbz	r5, 1355e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   13554:	2210      	movs	r2, #16
   13556:	a908      	add	r1, sp, #32
   13558:	4628      	mov	r0, r5
   1355a:	f7f4 ffb9 	bl	84d0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1355e:	b124      	cbz	r4, 1356a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   13560:	2210      	movs	r2, #16
   13562:	a908      	add	r1, sp, #32
   13564:	4620      	mov	r0, r4
   13566:	f7ee fb49 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1356a:	b00c      	add	sp, #48	; 0x30
   1356c:	bd70      	pop	{r4, r5, r6, pc}
	...

00013570 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   13570:	4b07      	ldr	r3, [pc, #28]	; (13590 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   13572:	4a08      	ldr	r2, [pc, #32]	; (13594 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   13574:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   13578:	4907      	ldr	r1, [pc, #28]	; (13598 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   1357a:	4a08      	ldr	r2, [pc, #32]	; (1359c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   1357c:	2800      	cmp	r0, #0
   1357e:	bf14      	ite	ne
   13580:	4610      	movne	r0, r2
   13582:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   13584:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   13586:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   1358a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1358e:	4770      	bx	lr
   13590:	4001f000 	.word	0x4001f000
   13594:	40008140 	.word	0x40008140
   13598:	40001004 	.word	0x40001004
   1359c:	40001000 	.word	0x40001000

000135a0 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   135a0:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   135a2:	4e2c      	ldr	r6, [pc, #176]	; (13654 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   135a4:	4f2c      	ldr	r7, [pc, #176]	; (13658 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   135a6:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   135a8:	4b2c      	ldr	r3, [pc, #176]	; (1365c <sw_switch.isra.9+0xbc>)
   135aa:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   135ae:	b22b      	sxth	r3, r5
   135b0:	00dc      	lsls	r4, r3, #3
   135b2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   135b6:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   135ba:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   135be:	f105 040b 	add.w	r4, r5, #11
   135c2:	b2e4      	uxtb	r4, r4
   135c4:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   135c6:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   135ca:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   135ce:	3fc0      	subs	r7, #192	; 0xc0
   135d0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   135d4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   135d8:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   135dc:	2800      	cmp	r0, #0
   135de:	d034      	beq.n	1364a <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   135e0:	f24a 075a 	movw	r7, #41050	; 0xa05a
   135e4:	f649 4040 	movw	r0, #40000	; 0x9c40
   135e8:	2a02      	cmp	r2, #2
   135ea:	bf0c      	ite	eq
   135ec:	4602      	moveq	r2, r0
   135ee:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   135f0:	f242 47b8 	movw	r7, #9400	; 0x24b8
   135f4:	f241 504a 	movw	r0, #5450	; 0x154a
   135f8:	2902      	cmp	r1, #2
   135fa:	bf18      	it	ne
   135fc:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   135fe:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   13602:	4401      	add	r1, r0
   13604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13608:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   1360c:	4a14      	ldr	r2, [pc, #80]	; (13660 <sw_switch.isra.9+0xc0>)
   1360e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   13612:	009b      	lsls	r3, r3, #2
   13614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13618:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   1361c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   13620:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   13622:	bf8b      	itete	hi
   13624:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   13628:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1362a:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   1362c:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   13630:	bf88      	it	hi
   13632:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   13636:	4b08      	ldr	r3, [pc, #32]	; (13658 <sw_switch.isra.9+0xb8>)
   13638:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1363c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   13640:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   13642:	f003 0301 	and.w	r3, r3, #1
   13646:	7033      	strb	r3, [r6, #0]
   13648:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   1364a:	4a06      	ldr	r2, [pc, #24]	; (13664 <sw_switch.isra.9+0xc4>)
   1364c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   13650:	212d      	movs	r1, #45	; 0x2d
   13652:	e7de      	b.n	13612 <sw_switch.isra.9+0x72>
   13654:	200016e4 	.word	0x200016e4
   13658:	4001f000 	.word	0x4001f000
   1365c:	4000110c 	.word	0x4000110c
   13660:	40001000 	.word	0x40001000
   13664:	40001004 	.word	0x40001004

00013668 <isr_radio>:
	if (sfp_radio_isr) {
   13668:	4b02      	ldr	r3, [pc, #8]	; (13674 <isr_radio+0xc>)
   1366a:	681b      	ldr	r3, [r3, #0]
   1366c:	b103      	cbz	r3, 13670 <isr_radio+0x8>
		sfp_radio_isr();
   1366e:	4718      	bx	r3
   13670:	4770      	bx	lr
   13672:	bf00      	nop
   13674:	200016e0 	.word	0x200016e0

00013678 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   13678:	4b06      	ldr	r3, [pc, #24]	; (13694 <radio_isr_set+0x1c>)
   1367a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   1367c:	4b06      	ldr	r3, [pc, #24]	; (13698 <radio_isr_set+0x20>)
   1367e:	2210      	movs	r2, #16
   13680:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13684:	4b05      	ldr	r3, [pc, #20]	; (1369c <radio_isr_set+0x24>)
   13686:	2202      	movs	r2, #2
   13688:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1368c:	2001      	movs	r0, #1
   1368e:	f7ee b8e3 	b.w	1858 <_arch_irq_enable>
   13692:	bf00      	nop
   13694:	200016e0 	.word	0x200016e0
   13698:	40001000 	.word	0x40001000
   1369c:	e000e100 	.word	0xe000e100

000136a0 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   136a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   136a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   136a8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   136aa:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   136ae:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   136b2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   136b6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   136ba:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   136be:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   136c2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   136c6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   136ca:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   136ce:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   136d2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   136d6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   136da:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   136de:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   136e2:	4770      	bx	lr

000136e4 <radio_reset>:
{
   136e4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   136e6:	2001      	movs	r0, #1
   136e8:	f7ee f8c6 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   136ec:	4b08      	ldr	r3, [pc, #32]	; (13710 <radio_reset+0x2c>)
   136ee:	2200      	movs	r2, #0
   136f0:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   136f4:	2201      	movs	r2, #1
   136f6:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   136fa:	4a06      	ldr	r2, [pc, #24]	; (13714 <radio_reset+0x30>)
   136fc:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   136fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   13702:	f023 0301 	bic.w	r3, r3, #1
   13706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1370a:	6013      	str	r3, [r2, #0]
   1370c:	bd08      	pop	{r3, pc}
   1370e:	bf00      	nop
   13710:	40001000 	.word	0x40001000
   13714:	40001774 	.word	0x40001774

00013718 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   13718:	4b06      	ldr	r3, [pc, #24]	; (13734 <radio_phy_set+0x1c>)
	switch (phy) {
   1371a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1371c:	bf0c      	ite	eq
   1371e:	2204      	moveq	r2, #4
   13720:	2203      	movne	r2, #3
   13722:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   13726:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1372a:	f042 0201 	orr.w	r2, r2, #1
   1372e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   13732:	4770      	bx	lr
   13734:	40001000 	.word	0x40001000

00013738 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   13738:	4b01      	ldr	r3, [pc, #4]	; (13740 <radio_tx_power_set+0x8>)
   1373a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1373e:	4770      	bx	lr
   13740:	40001000 	.word	0x40001000

00013744 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   13744:	4b01      	ldr	r3, [pc, #4]	; (1374c <radio_freq_chan_set+0x8>)
   13746:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1374a:	4770      	bx	lr
   1374c:	40001000 	.word	0x40001000

00013750 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   13750:	4b07      	ldr	r3, [pc, #28]	; (13770 <radio_whiten_iv_set+0x20>)
   13752:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   13756:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1375a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1375e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   13762:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   13766:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1376a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   1376e:	4770      	bx	lr
   13770:	40001000 	.word	0x40001000

00013774 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   13774:	4a0a      	ldr	r2, [pc, #40]	; (137a0 <radio_aa_set+0x2c>)
   13776:	2300      	movs	r3, #0
   13778:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1377c:	2301      	movs	r3, #1
   1377e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   13782:	78c3      	ldrb	r3, [r0, #3]
   13784:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   13788:	7843      	ldrb	r3, [r0, #1]
   1378a:	7881      	ldrb	r1, [r0, #2]
   1378c:	041b      	lsls	r3, r3, #16
   1378e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   13792:	7801      	ldrb	r1, [r0, #0]
   13794:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   13798:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   1379c:	4770      	bx	lr
   1379e:	bf00      	nop
   137a0:	40001000 	.word	0x40001000

000137a4 <radio_pkt_configure>:
	switch (phy) {
   137a4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   137a8:	2b02      	cmp	r3, #2
{
   137aa:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   137ac:	bf0c      	ite	eq
   137ae:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   137b2:	2400      	movne	r4, #0
	if (dc) {
   137b4:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   137b6:	f1c0 0308 	rsb	r3, r0, #8
   137ba:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   137be:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   137c2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   137c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   137ca:	4a0b      	ldr	r2, [pc, #44]	; (137f8 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   137cc:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   137d0:	bf48      	it	mi
   137d2:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   137d6:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   137d8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   137dc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   137e0:	4b06      	ldr	r3, [pc, #24]	; (137fc <radio_pkt_configure+0x58>)
   137e2:	4003      	ands	r3, r0
   137e4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   137e8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   137ec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   137f0:	4319      	orrs	r1, r3
   137f2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   137f6:	bd10      	pop	{r4, pc}
   137f8:	40001000 	.word	0x40001000
   137fc:	fef80000 	.word	0xfef80000

00013800 <radio_pkt_rx_set>:
   13800:	4b01      	ldr	r3, [pc, #4]	; (13808 <radio_pkt_rx_set+0x8>)
   13802:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   13806:	4770      	bx	lr
   13808:	40001000 	.word	0x40001000

0001380c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   1380c:	4b01      	ldr	r3, [pc, #4]	; (13814 <radio_pkt_tx_set+0x8>)
   1380e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   13812:	4770      	bx	lr
   13814:	40001000 	.word	0x40001000

00013818 <radio_tx_ready_delay_get>:
	switch (phy) {
   13818:	2802      	cmp	r0, #2
}
   1381a:	bf0c      	ite	eq
   1381c:	2028      	moveq	r0, #40	; 0x28
   1381e:	2029      	movne	r0, #41	; 0x29
   13820:	4770      	bx	lr

00013822 <radio_tx_chain_delay_get>:
}
   13822:	2001      	movs	r0, #1
   13824:	4770      	bx	lr

00013826 <radio_rx_ready_delay_get>:
}
   13826:	2029      	movs	r0, #41	; 0x29
   13828:	4770      	bx	lr

0001382a <radio_rx_chain_delay_get>:
	switch (phy) {
   1382a:	2802      	cmp	r0, #2
}
   1382c:	bf0c      	ite	eq
   1382e:	2006      	moveq	r0, #6
   13830:	200a      	movne	r0, #10
   13832:	4770      	bx	lr

00013834 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   13834:	4b01      	ldr	r3, [pc, #4]	; (1383c <radio_rx_enable+0x8>)
   13836:	2201      	movs	r2, #1
   13838:	605a      	str	r2, [r3, #4]
   1383a:	4770      	bx	lr
   1383c:	40001000 	.word	0x40001000

00013840 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   13840:	4b01      	ldr	r3, [pc, #4]	; (13848 <radio_tx_enable+0x8>)
   13842:	2201      	movs	r2, #1
   13844:	601a      	str	r2, [r3, #0]
   13846:	4770      	bx	lr
   13848:	40001000 	.word	0x40001000

0001384c <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   1384c:	4a07      	ldr	r2, [pc, #28]	; (1386c <radio_disable+0x20>)
   1384e:	f44f 6390 	mov.w	r3, #1152	; 0x480
   13852:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   13856:	2301      	movs	r3, #1
   13858:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   1385a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1385c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   13860:	2100      	movs	r1, #0
   13862:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   13866:	6113      	str	r3, [r2, #16]
   13868:	4770      	bx	lr
   1386a:	bf00      	nop
   1386c:	4001f000 	.word	0x4001f000

00013870 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   13870:	4b04      	ldr	r3, [pc, #16]	; (13884 <radio_status_reset+0x14>)
   13872:	2200      	movs	r2, #0
   13874:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   13878:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1387c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   13880:	4770      	bx	lr
   13882:	bf00      	nop
   13884:	40001000 	.word	0x40001000

00013888 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   13888:	4b03      	ldr	r3, [pc, #12]	; (13898 <radio_is_ready+0x10>)
   1388a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1388e:	3000      	adds	r0, #0
   13890:	bf18      	it	ne
   13892:	2001      	movne	r0, #1
   13894:	4770      	bx	lr
   13896:	bf00      	nop
   13898:	40001000 	.word	0x40001000

0001389c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1389c:	4b03      	ldr	r3, [pc, #12]	; (138ac <radio_is_done+0x10>)
   1389e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   138a2:	3000      	adds	r0, #0
   138a4:	bf18      	it	ne
   138a6:	2001      	movne	r0, #1
   138a8:	4770      	bx	lr
   138aa:	bf00      	nop
   138ac:	40001000 	.word	0x40001000

000138b0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   138b0:	4b03      	ldr	r3, [pc, #12]	; (138c0 <radio_is_idle+0x10>)
   138b2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   138b6:	fab0 f080 	clz	r0, r0
   138ba:	0940      	lsrs	r0, r0, #5
   138bc:	4770      	bx	lr
   138be:	bf00      	nop
   138c0:	40001000 	.word	0x40001000

000138c4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   138c4:	4b04      	ldr	r3, [pc, #16]	; (138d8 <radio_crc_configure+0x14>)
   138c6:	f240 1203 	movw	r2, #259	; 0x103
   138ca:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   138ce:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   138d2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   138d6:	4770      	bx	lr
   138d8:	40001000 	.word	0x40001000

000138dc <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   138dc:	4b03      	ldr	r3, [pc, #12]	; (138ec <radio_crc_is_valid+0x10>)
   138de:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   138e2:	3000      	adds	r0, #0
   138e4:	bf18      	it	ne
   138e6:	2001      	movne	r0, #1
   138e8:	4770      	bx	lr
   138ea:	bf00      	nop
   138ec:	40001000 	.word	0x40001000

000138f0 <radio_pkt_empty_get>:
}
   138f0:	4800      	ldr	r0, [pc, #0]	; (138f4 <radio_pkt_empty_get+0x4>)
   138f2:	4770      	bx	lr
   138f4:	200015d4 	.word	0x200015d4

000138f8 <radio_pkt_scratch_get>:
}
   138f8:	4800      	ldr	r0, [pc, #0]	; (138fc <radio_pkt_scratch_get+0x4>)
   138fa:	4770      	bx	lr
   138fc:	200015d8 	.word	0x200015d8

00013900 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13900:	4b04      	ldr	r3, [pc, #16]	; (13914 <radio_switch_complete_and_rx+0x14>)
   13902:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   13904:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13906:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1390a:	4602      	mov	r2, r0
   1390c:	4608      	mov	r0, r1
   1390e:	f7ff be47 	b.w	135a0 <sw_switch.isra.9>
   13912:	bf00      	nop
   13914:	40001000 	.word	0x40001000

00013918 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13918:	4b03      	ldr	r3, [pc, #12]	; (13928 <radio_switch_complete_and_tx+0x10>)
   1391a:	2103      	movs	r1, #3
   1391c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   13920:	4601      	mov	r1, r0
   13922:	2001      	movs	r0, #1
   13924:	f7ff be3c 	b.w	135a0 <sw_switch.isra.9>
   13928:	40001000 	.word	0x40001000

0001392c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1392c:	4b05      	ldr	r3, [pc, #20]	; (13944 <radio_switch_complete_and_disable+0x18>)
   1392e:	2203      	movs	r2, #3
   13930:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   13934:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   13938:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1393c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   13940:	4770      	bx	lr
   13942:	bf00      	nop
   13944:	40001000 	.word	0x40001000

00013948 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   13948:	4a03      	ldr	r2, [pc, #12]	; (13958 <radio_rssi_measure+0x10>)
   1394a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1394e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   13952:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   13956:	4770      	bx	lr
   13958:	40001000 	.word	0x40001000

0001395c <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1395c:	4b01      	ldr	r3, [pc, #4]	; (13964 <radio_rssi_get+0x8>)
   1395e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   13962:	4770      	bx	lr
   13964:	40001000 	.word	0x40001000

00013968 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   13968:	4b02      	ldr	r3, [pc, #8]	; (13974 <radio_rssi_status_reset+0xc>)
   1396a:	2200      	movs	r2, #0
   1396c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   13970:	4770      	bx	lr
   13972:	bf00      	nop
   13974:	40001000 	.word	0x40001000

00013978 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   13978:	4b03      	ldr	r3, [pc, #12]	; (13988 <radio_rssi_is_ready+0x10>)
   1397a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1397e:	3000      	adds	r0, #0
   13980:	bf18      	it	ne
   13982:	2001      	movne	r0, #1
   13984:	4770      	bx	lr
   13986:	bf00      	nop
   13988:	40001000 	.word	0x40001000

0001398c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1398c:	b530      	push	{r4, r5, lr}
   1398e:	2400      	movs	r4, #0
   13990:	00a3      	lsls	r3, r4, #2
   13992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1399a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1399c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   139a0:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   139a2:	8895      	ldrh	r5, [r2, #4]
   139a4:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   139a8:	2c08      	cmp	r4, #8
		bdaddr += 6;
   139aa:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   139ae:	d1ef      	bne.n	13990 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   139b0:	4b02      	ldr	r3, [pc, #8]	; (139bc <radio_filter_configure+0x30>)
   139b2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   139b6:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   139ba:	bd30      	pop	{r4, r5, pc}
   139bc:	40001000 	.word	0x40001000

000139c0 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   139c0:	4a03      	ldr	r2, [pc, #12]	; (139d0 <radio_filter_disable+0x10>)
   139c2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   139c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   139ca:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   139ce:	4770      	bx	lr
   139d0:	40001000 	.word	0x40001000

000139d4 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   139d4:	4b02      	ldr	r3, [pc, #8]	; (139e0 <radio_filter_status_reset+0xc>)
   139d6:	2200      	movs	r2, #0
   139d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   139dc:	4770      	bx	lr
   139de:	bf00      	nop
   139e0:	40001000 	.word	0x40001000

000139e4 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   139e4:	4b03      	ldr	r3, [pc, #12]	; (139f4 <radio_filter_has_match+0x10>)
   139e6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   139ea:	3000      	adds	r0, #0
   139ec:	bf18      	it	ne
   139ee:	2001      	movne	r0, #1
   139f0:	4770      	bx	lr
   139f2:	bf00      	nop
   139f4:	40001000 	.word	0x40001000

000139f8 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   139f8:	4b01      	ldr	r3, [pc, #4]	; (13a00 <radio_filter_match_get+0x8>)
   139fa:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   139fe:	4770      	bx	lr
   13a00:	40001000 	.word	0x40001000

00013a04 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   13a04:	4b04      	ldr	r3, [pc, #16]	; (13a18 <radio_bc_configure+0x14>)
   13a06:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   13a0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   13a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13a12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   13a16:	4770      	bx	lr
   13a18:	40001000 	.word	0x40001000

00013a1c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   13a1c:	4b05      	ldr	r3, [pc, #20]	; (13a34 <radio_tmr_status_reset+0x18>)
   13a1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   13a22:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   13a26:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   13a2a:	227f      	movs	r2, #127	; 0x7f
   13a2c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   13a30:	4770      	bx	lr
   13a32:	bf00      	nop
   13a34:	4000b000 	.word	0x4000b000

00013a38 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   13a38:	4b03      	ldr	r3, [pc, #12]	; (13a48 <radio_tmr_tifs_set+0x10>)
   13a3a:	4a04      	ldr	r2, [pc, #16]	; (13a4c <radio_tmr_tifs_set+0x14>)
   13a3c:	781b      	ldrb	r3, [r3, #0]
   13a3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   13a42:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   13a46:	4770      	bx	lr
   13a48:	200016e4 	.word	0x200016e4
   13a4c:	40009000 	.word	0x40009000

00013a50 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   13a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13a54:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   13a58:	4c30      	ldr	r4, [pc, #192]	; (13b1c <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   13a5a:	4d31      	ldr	r5, [pc, #196]	; (13b20 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13a5c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   13a60:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   13a62:	bf88      	it	hi
   13a64:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   13a68:	4b2e      	ldr	r3, [pc, #184]	; (13b24 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   13a6a:	4c2f      	ldr	r4, [pc, #188]	; (13b28 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   13a6c:	bf82      	ittt	hi
   13a6e:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   13a72:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   13a76:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   13a7a:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   13a7c:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   13a80:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   13a82:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   13a84:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   13a88:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   13a8a:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   13a8e:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   13a92:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   13a96:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   13a9a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   13a9e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   13aa2:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   13aa6:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   13aaa:	4920      	ldr	r1, [pc, #128]	; (13b2c <radio_tmr_start+0xdc>)
   13aac:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   13ab0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   13ab4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   13ab8:	f7ff fd5a 	bl	13570 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   13abc:	4b1c      	ldr	r3, [pc, #112]	; (13b30 <radio_tmr_start+0xe0>)
   13abe:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   13ac0:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   13ac4:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   13ac8:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   13acc:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   13ace:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   13ad2:	3b74      	subs	r3, #116	; 0x74
   13ad4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   13ad8:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   13adc:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   13ae0:	f503 739a 	add.w	r3, r3, #308	; 0x134
   13ae4:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   13ae8:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13aec:	33c4      	adds	r3, #196	; 0xc4
   13aee:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13af2:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   13af6:	3bc0      	subs	r3, #192	; 0xc0
   13af8:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13afc:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13b00:	33c8      	adds	r3, #200	; 0xc8
   13b02:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   13b06:	f44f 6310 	mov.w	r3, #2304	; 0x900
   13b0a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   13b0e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   13b12:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   13b16:	4628      	mov	r0, r5
   13b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b1c:	7ff0bdbf 	.word	0x7ff0bdbf
   13b20:	000f4240 	.word	0x000f4240
   13b24:	40008000 	.word	0x40008000
   13b28:	4000b000 	.word	0x4000b000
   13b2c:	4000b148 	.word	0x4000b148
   13b30:	40009000 	.word	0x40009000

00013b34 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   13b34:	4a04      	ldr	r2, [pc, #16]	; (13b48 <radio_tmr_stop+0x14>)
   13b36:	2301      	movs	r3, #1
   13b38:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   13b3a:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   13b3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13b40:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   13b42:	6113      	str	r3, [r2, #16]
   13b44:	4770      	bx	lr
   13b46:	bf00      	nop
   13b48:	40008000 	.word	0x40008000

00013b4c <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   13b4c:	4b0c      	ldr	r3, [pc, #48]	; (13b80 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13b4e:	4a0d      	ldr	r2, [pc, #52]	; (13b84 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   13b50:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13b54:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   13b58:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13b5c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13b60:	3240      	adds	r2, #64	; 0x40
   13b62:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   13b66:	f502 7280 	add.w	r2, r2, #256	; 0x100
   13b6a:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   13b6e:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   13b72:	3a34      	subs	r2, #52	; 0x34
   13b74:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   13b78:	2218      	movs	r2, #24
   13b7a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13b7e:	4770      	bx	lr
   13b80:	40008000 	.word	0x40008000
   13b84:	40001104 	.word	0x40001104

00013b88 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   13b88:	4b0b      	ldr	r3, [pc, #44]	; (13bb8 <radio_tmr_aa_capture+0x30>)
   13b8a:	4a0c      	ldr	r2, [pc, #48]	; (13bbc <radio_tmr_aa_capture+0x34>)
   13b8c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   13b90:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13b94:	3240      	adds	r2, #64	; 0x40
   13b96:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13b9a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   13b9e:	3a3c      	subs	r2, #60	; 0x3c
   13ba0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13ba4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13ba8:	3240      	adds	r2, #64	; 0x40
   13baa:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   13bae:	220c      	movs	r2, #12
   13bb0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13bb4:	4770      	bx	lr
   13bb6:	bf00      	nop
   13bb8:	4001f000 	.word	0x4001f000
   13bbc:	40001100 	.word	0x40001100

00013bc0 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   13bc0:	4b01      	ldr	r3, [pc, #4]	; (13bc8 <radio_tmr_aa_get+0x8>)
   13bc2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   13bc6:	4770      	bx	lr
   13bc8:	40008000 	.word	0x40008000

00013bcc <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   13bcc:	4b01      	ldr	r3, [pc, #4]	; (13bd4 <radio_tmr_aa_save+0x8>)
   13bce:	6018      	str	r0, [r3, #0]
   13bd0:	4770      	bx	lr
   13bd2:	bf00      	nop
   13bd4:	200016dc 	.word	0x200016dc

00013bd8 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   13bd8:	4b01      	ldr	r3, [pc, #4]	; (13be0 <radio_tmr_aa_restore+0x8>)
   13bda:	6818      	ldr	r0, [r3, #0]
   13bdc:	4770      	bx	lr
   13bde:	bf00      	nop
   13be0:	200016dc 	.word	0x200016dc

00013be4 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   13be4:	4b01      	ldr	r3, [pc, #4]	; (13bec <radio_tmr_ready_get+0x8>)
   13be6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   13bea:	4770      	bx	lr
   13bec:	40008000 	.word	0x40008000

00013bf0 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   13bf0:	4b06      	ldr	r3, [pc, #24]	; (13c0c <radio_tmr_end_capture+0x1c>)
   13bf2:	4a07      	ldr	r2, [pc, #28]	; (13c10 <radio_tmr_end_capture+0x20>)
   13bf4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   13bf8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13bfc:	323c      	adds	r2, #60	; 0x3c
   13bfe:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   13c02:	2220      	movs	r2, #32
   13c04:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13c08:	4770      	bx	lr
   13c0a:	bf00      	nop
   13c0c:	4001f000 	.word	0x4001f000
   13c10:	4000110c 	.word	0x4000110c

00013c14 <radio_tmr_end_get>:
   13c14:	4b01      	ldr	r3, [pc, #4]	; (13c1c <radio_tmr_end_get+0x8>)
   13c16:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   13c1a:	4770      	bx	lr
   13c1c:	40008000 	.word	0x40008000

00013c20 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   13c20:	4b01      	ldr	r3, [pc, #4]	; (13c28 <radio_tmr_tifs_base_get+0x8>)
   13c22:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   13c26:	4770      	bx	lr
   13c28:	40008000 	.word	0x40008000

00013c2c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13c2c:	4b16      	ldr	r3, [pc, #88]	; (13c88 <radio_ccm_rx_pkt_set+0x5c>)
{
   13c2e:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13c30:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13c32:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13c34:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   13c38:	4e14      	ldr	r6, [pc, #80]	; (13c8c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13c3a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   13c3e:	4d14      	ldr	r5, [pc, #80]	; (13c90 <radio_ccm_rx_pkt_set+0x64>)
   13c40:	2902      	cmp	r1, #2
   13c42:	bf0c      	ite	eq
   13c44:	4629      	moveq	r1, r5
   13c46:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   13c48:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   13c4c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   13c50:	4810      	ldr	r0, [pc, #64]	; (13c94 <radio_ccm_rx_pkt_set+0x68>)
   13c52:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   13c56:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13c5a:	4a0f      	ldr	r2, [pc, #60]	; (13c98 <radio_ccm_rx_pkt_set+0x6c>)
   13c5c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   13c60:	490e      	ldr	r1, [pc, #56]	; (13c9c <radio_ccm_rx_pkt_set+0x70>)
   13c62:	4a0f      	ldr	r2, [pc, #60]	; (13ca0 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   13c64:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13c68:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13c6c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   13c70:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   13c74:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   13c78:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   13c7c:	2140      	movs	r1, #64	; 0x40
   13c7e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   13c82:	2201      	movs	r2, #1
   13c84:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   13c86:	bd70      	pop	{r4, r5, r6, pc}
   13c88:	4000f000 	.word	0x4000f000
   13c8c:	01000001 	.word	0x01000001
   13c90:	01010001 	.word	0x01010001
   13c94:	200015d8 	.word	0x200015d8
   13c98:	200014c8 	.word	0x200014c8
   13c9c:	40001104 	.word	0x40001104
   13ca0:	4001f000 	.word	0x4001f000

00013ca4 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   13ca4:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13ca6:	4b0e      	ldr	r3, [pc, #56]	; (13ce0 <radio_ccm_tx_pkt_set+0x3c>)
   13ca8:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13caa:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13cac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13cb0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   13cb4:	4c0b      	ldr	r4, [pc, #44]	; (13ce4 <radio_ccm_tx_pkt_set+0x40>)
   13cb6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   13cba:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   13cbe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   13cc2:	4809      	ldr	r0, [pc, #36]	; (13ce8 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13cc4:	4909      	ldr	r1, [pc, #36]	; (13cec <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   13cc6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13cca:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   13cce:	2101      	movs	r1, #1
   13cd0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13cd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13cd8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   13cdc:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   13cde:	bd10      	pop	{r4, pc}
   13ce0:	4000f000 	.word	0x4000f000
   13ce4:	01010000 	.word	0x01010000
   13ce8:	200015d8 	.word	0x200015d8
   13cec:	200014c8 	.word	0x200014c8

00013cf0 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   13cf0:	4b0c      	ldr	r3, [pc, #48]	; (13d24 <radio_ccm_is_done+0x34>)
   13cf2:	2202      	movs	r2, #2
   13cf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   13cf8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   13cfc:	b16a      	cbz	r2, 13d1a <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   13cfe:	2202      	movs	r2, #2
   13d00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   13d04:	4a08      	ldr	r2, [pc, #32]	; (13d28 <radio_ccm_is_done+0x38>)
   13d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13d0a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   13d0e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   13d12:	fab0 f080 	clz	r0, r0
   13d16:	0940      	lsrs	r0, r0, #5
   13d18:	4770      	bx	lr
		__WFE();
   13d1a:	bf20      	wfe
		__SEV();
   13d1c:	bf40      	sev
		__WFE();
   13d1e:	bf20      	wfe
   13d20:	e7ea      	b.n	13cf8 <radio_ccm_is_done+0x8>
   13d22:	bf00      	nop
   13d24:	4000f000 	.word	0x4000f000
   13d28:	e000e100 	.word	0xe000e100

00013d2c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   13d2c:	4b03      	ldr	r3, [pc, #12]	; (13d3c <radio_ccm_mic_is_valid+0x10>)
   13d2e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13d32:	3000      	adds	r0, #0
   13d34:	bf18      	it	ne
   13d36:	2001      	movne	r0, #1
   13d38:	4770      	bx	lr
   13d3a:	bf00      	nop
   13d3c:	4000f000 	.word	0x4000f000

00013d40 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   13d40:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13d42:	4c13      	ldr	r4, [pc, #76]	; (13d90 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   13d44:	4d13      	ldr	r5, [pc, #76]	; (13d94 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13d46:	2303      	movs	r3, #3
   13d48:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   13d4c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   13d50:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   13d54:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   13d58:	3b01      	subs	r3, #1
   13d5a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   13d5e:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   13d60:	4b0d      	ldr	r3, [pc, #52]	; (13d98 <radio_ar_configure+0x58>)
   13d62:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   13d66:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   13d68:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   13d6c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   13d70:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   13d74:	f7ff fe46 	bl	13a04 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   13d78:	4b08      	ldr	r3, [pc, #32]	; (13d9c <radio_ar_configure+0x5c>)
   13d7a:	4a09      	ldr	r2, [pc, #36]	; (13da0 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   13d7c:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   13d80:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   13d84:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   13d86:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   13d8a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13d8e:	bd38      	pop	{r3, r4, r5, pc}
   13d90:	4000f000 	.word	0x4000f000
   13d94:	40001000 	.word	0x40001000
   13d98:	200014c4 	.word	0x200014c4
   13d9c:	4001f000 	.word	0x4001f000
   13da0:	40001128 	.word	0x40001128

00013da4 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   13da4:	4b01      	ldr	r3, [pc, #4]	; (13dac <radio_ar_match_get+0x8>)
   13da6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13daa:	4770      	bx	lr
   13dac:	4000f000 	.word	0x4000f000

00013db0 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   13db0:	4a04      	ldr	r2, [pc, #16]	; (13dc4 <radio_ar_status_reset+0x14>)
   13db2:	2300      	movs	r3, #0
   13db4:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   13db8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   13dbc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   13dc0:	4770      	bx	lr
   13dc2:	bf00      	nop
   13dc4:	40001000 	.word	0x40001000

00013dc8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   13dc8:	4b08      	ldr	r3, [pc, #32]	; (13dec <radio_ar_has_match+0x24>)
   13dca:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   13dce:	b160      	cbz	r0, 13dea <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   13dd0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   13dd4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   13dd8:	b138      	cbz	r0, 13dea <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   13dda:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   13dde:	b120      	cbz	r0, 13dea <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   13de0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   13de4:	fab0 f080 	clz	r0, r0
   13de8:	0940      	lsrs	r0, r0, #5
}
   13dea:	4770      	bx	lr
   13dec:	40001000 	.word	0x40001000

00013df0 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13df0:	2901      	cmp	r1, #1
{
   13df2:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13df4:	d00e      	beq.n	13e14 <mayfly_enable_cb+0x24>
   13df6:	4b0d      	ldr	r3, [pc, #52]	; (13e2c <mayfly_enable_cb+0x3c>)
   13df8:	9301      	str	r3, [sp, #4]
   13dfa:	9300      	str	r3, [sp, #0]
   13dfc:	4a0c      	ldr	r2, [pc, #48]	; (13e30 <mayfly_enable_cb+0x40>)
   13dfe:	4b0d      	ldr	r3, [pc, #52]	; (13e34 <mayfly_enable_cb+0x44>)
   13e00:	490d      	ldr	r1, [pc, #52]	; (13e38 <mayfly_enable_cb+0x48>)
   13e02:	480e      	ldr	r0, [pc, #56]	; (13e3c <mayfly_enable_cb+0x4c>)
   13e04:	f7ed f8c2 	bl	f8c <printk>
   13e08:	4040      	eors	r0, r0
   13e0a:	f380 8811 	msr	BASEPRI, r0
   13e0e:	f04f 0004 	mov.w	r0, #4
   13e12:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   13e14:	2018      	movs	r0, #24
	if (enable) {
   13e16:	b122      	cbz	r2, 13e22 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   13e18:	b003      	add	sp, #12
   13e1a:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   13e1e:	f7ed bd1b 	b.w	1858 <_arch_irq_enable>
}
   13e22:	b003      	add	sp, #12
   13e24:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   13e28:	f7ed bd26 	b.w	1878 <_arch_irq_disable>
   13e2c:	00015e19 	.word	0x00015e19
   13e30:	000171f2 	.word	0x000171f2
   13e34:	0001a80c 	.word	0x0001a80c
   13e38:	00017241 	.word	0x00017241
   13e3c:	0001a83b 	.word	0x0001a83b

00013e40 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   13e40:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   13e42:	b181      	cbz	r1, 13e66 <mayfly_is_enabled+0x26>
   13e44:	2901      	cmp	r1, #1
   13e46:	d014      	beq.n	13e72 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   13e48:	4b0b      	ldr	r3, [pc, #44]	; (13e78 <mayfly_is_enabled+0x38>)
   13e4a:	9301      	str	r3, [sp, #4]
   13e4c:	9300      	str	r3, [sp, #0]
   13e4e:	4a0b      	ldr	r2, [pc, #44]	; (13e7c <mayfly_is_enabled+0x3c>)
   13e50:	4b0b      	ldr	r3, [pc, #44]	; (13e80 <mayfly_is_enabled+0x40>)
   13e52:	490c      	ldr	r1, [pc, #48]	; (13e84 <mayfly_is_enabled+0x44>)
   13e54:	480c      	ldr	r0, [pc, #48]	; (13e88 <mayfly_is_enabled+0x48>)
   13e56:	f7ed f899 	bl	f8c <printk>
   13e5a:	4040      	eors	r0, r0
   13e5c:	f380 8811 	msr	BASEPRI, r0
   13e60:	f04f 0004 	mov.w	r0, #4
   13e64:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   13e66:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   13e68:	b003      	add	sp, #12
   13e6a:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   13e6e:	f7ed bd17 	b.w	18a0 <_arch_irq_is_enabled>
   13e72:	2018      	movs	r0, #24
   13e74:	e7f8      	b.n	13e68 <mayfly_is_enabled+0x28>
   13e76:	bf00      	nop
   13e78:	00015e19 	.word	0x00015e19
   13e7c:	000171f2 	.word	0x000171f2
   13e80:	0001a81d 	.word	0x0001a81d
   13e84:	00017241 	.word	0x00017241
   13e88:	00017166 	.word	0x00017166

00013e8c <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13e8c:	4288      	cmp	r0, r1
   13e8e:	d00a      	beq.n	13ea6 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   13e90:	b918      	cbnz	r0, 13e9a <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   13e92:	1e4b      	subs	r3, r1, #1
   13e94:	4258      	negs	r0, r3
   13e96:	4158      	adcs	r0, r3
   13e98:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13e9a:	2801      	cmp	r0, #1
   13e9c:	d105      	bne.n	13eaa <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   13e9e:	fab1 f081 	clz	r0, r1
   13ea2:	0940      	lsrs	r0, r0, #5
   13ea4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13ea6:	2001      	movs	r0, #1
   13ea8:	4770      	bx	lr
   13eaa:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   13eac:	4770      	bx	lr
	...

00013eb0 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   13eb0:	b507      	push	{r0, r1, r2, lr}
   13eb2:	4b0e      	ldr	r3, [pc, #56]	; (13eec <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   13eb4:	b181      	cbz	r1, 13ed8 <mayfly_pend+0x28>
   13eb6:	2901      	cmp	r1, #1
   13eb8:	d015      	beq.n	13ee6 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   13eba:	4b0d      	ldr	r3, [pc, #52]	; (13ef0 <mayfly_pend+0x40>)
   13ebc:	9301      	str	r3, [sp, #4]
   13ebe:	9300      	str	r3, [sp, #0]
   13ec0:	4a0c      	ldr	r2, [pc, #48]	; (13ef4 <mayfly_pend+0x44>)
   13ec2:	4b0d      	ldr	r3, [pc, #52]	; (13ef8 <mayfly_pend+0x48>)
   13ec4:	490d      	ldr	r1, [pc, #52]	; (13efc <mayfly_pend+0x4c>)
   13ec6:	480e      	ldr	r0, [pc, #56]	; (13f00 <mayfly_pend+0x50>)
   13ec8:	f7ed f860 	bl	f8c <printk>
   13ecc:	4040      	eors	r0, r0
   13ece:	f380 8811 	msr	BASEPRI, r0
   13ed2:	f04f 0004 	mov.w	r0, #4
   13ed6:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13edc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   13ee0:	b003      	add	sp, #12
   13ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   13ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   13eea:	e7f7      	b.n	13edc <mayfly_pend+0x2c>
   13eec:	e000e100 	.word	0xe000e100
   13ef0:	00015e19 	.word	0x00015e19
   13ef4:	000171f2 	.word	0x000171f2
   13ef8:	0001a82f 	.word	0x0001a82f
   13efc:	00017241 	.word	0x00017241
   13f00:	00017166 	.word	0x00017166

00013f04 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13f04:	2803      	cmp	r0, #3
{
   13f06:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13f08:	d90e      	bls.n	13f28 <hal_ticker_instance0_caller_id_get+0x24>
   13f0a:	4b0e      	ldr	r3, [pc, #56]	; (13f44 <hal_ticker_instance0_caller_id_get+0x40>)
   13f0c:	9301      	str	r3, [sp, #4]
   13f0e:	9300      	str	r3, [sp, #0]
   13f10:	4a0d      	ldr	r2, [pc, #52]	; (13f48 <hal_ticker_instance0_caller_id_get+0x44>)
   13f12:	4b0e      	ldr	r3, [pc, #56]	; (13f4c <hal_ticker_instance0_caller_id_get+0x48>)
   13f14:	490e      	ldr	r1, [pc, #56]	; (13f50 <hal_ticker_instance0_caller_id_get+0x4c>)
   13f16:	480f      	ldr	r0, [pc, #60]	; (13f54 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13f18:	f7ed f838 	bl	f8c <printk>
   13f1c:	4040      	eors	r0, r0
   13f1e:	f380 8811 	msr	BASEPRI, r0
   13f22:	f04f 0004 	mov.w	r0, #4
   13f26:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   13f28:	4b0b      	ldr	r3, [pc, #44]	; (13f58 <hal_ticker_instance0_caller_id_get+0x54>)
   13f2a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13f2c:	b938      	cbnz	r0, 13f3e <hal_ticker_instance0_caller_id_get+0x3a>
   13f2e:	4b05      	ldr	r3, [pc, #20]	; (13f44 <hal_ticker_instance0_caller_id_get+0x40>)
   13f30:	9301      	str	r3, [sp, #4]
   13f32:	9300      	str	r3, [sp, #0]
   13f34:	4a04      	ldr	r2, [pc, #16]	; (13f48 <hal_ticker_instance0_caller_id_get+0x44>)
   13f36:	4b05      	ldr	r3, [pc, #20]	; (13f4c <hal_ticker_instance0_caller_id_get+0x48>)
   13f38:	4905      	ldr	r1, [pc, #20]	; (13f50 <hal_ticker_instance0_caller_id_get+0x4c>)
   13f3a:	4808      	ldr	r0, [pc, #32]	; (13f5c <hal_ticker_instance0_caller_id_get+0x58>)
   13f3c:	e7ec      	b.n	13f18 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   13f3e:	b003      	add	sp, #12
   13f40:	f85d fb04 	ldr.w	pc, [sp], #4
   13f44:	00015e19 	.word	0x00015e19
   13f48:	000171f2 	.word	0x000171f2
   13f4c:	0001a86b 	.word	0x0001a86b
   13f50:	00017241 	.word	0x00017241
   13f54:	0001a8ad 	.word	0x0001a8ad
   13f58:	0001a8a9 	.word	0x0001a8a9
   13f5c:	0001a8ee 	.word	0x0001a8ee

00013f60 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   13f60:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   13f62:	3802      	subs	r0, #2
{
   13f64:	461c      	mov	r4, r3
	switch (caller_id) {
   13f66:	2803      	cmp	r0, #3
   13f68:	d818      	bhi.n	13f9c <hal_ticker_instance0_sched+0x3c>
   13f6a:	e8df f000 	tbb	[pc, r0]
   13f6e:	0d02      	.short	0x0d02
   13f70:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   13f72:	2903      	cmp	r1, #3
   13f74:	d112      	bne.n	13f9c <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   13f76:	4b19      	ldr	r3, [pc, #100]	; (13fdc <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13f78:	2100      	movs	r1, #0
			m.param = instance;
   13f7a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13f7c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   13f7e:	b002      	add	sp, #8
   13f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13f84:	f7f4 bb32 	b.w	85ec <mayfly_enqueue>
		switch (callee_id) {
   13f88:	2904      	cmp	r1, #4
   13f8a:	d107      	bne.n	13f9c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13f8c:	4b14      	ldr	r3, [pc, #80]	; (13fe0 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13f8e:	2101      	movs	r1, #1
			m.param = instance;
   13f90:	609c      	str	r4, [r3, #8]
   13f92:	e7f3      	b.n	13f7c <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   13f94:	2903      	cmp	r1, #3
   13f96:	d010      	beq.n	13fba <hal_ticker_instance0_sched+0x5a>
   13f98:	2904      	cmp	r1, #4
   13f9a:	d013      	beq.n	13fc4 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   13f9c:	4b11      	ldr	r3, [pc, #68]	; (13fe4 <hal_ticker_instance0_sched+0x84>)
   13f9e:	9301      	str	r3, [sp, #4]
   13fa0:	9300      	str	r3, [sp, #0]
   13fa2:	4a11      	ldr	r2, [pc, #68]	; (13fe8 <hal_ticker_instance0_sched+0x88>)
   13fa4:	4b11      	ldr	r3, [pc, #68]	; (13fec <hal_ticker_instance0_sched+0x8c>)
   13fa6:	4912      	ldr	r1, [pc, #72]	; (13ff0 <hal_ticker_instance0_sched+0x90>)
   13fa8:	4812      	ldr	r0, [pc, #72]	; (13ff4 <hal_ticker_instance0_sched+0x94>)
   13faa:	f7ec ffef 	bl	f8c <printk>
   13fae:	4040      	eors	r0, r0
   13fb0:	f380 8811 	msr	BASEPRI, r0
   13fb4:	f04f 0004 	mov.w	r0, #4
   13fb8:	df02      	svc	2
			m.param = instance;
   13fba:	4b0f      	ldr	r3, [pc, #60]	; (13ff8 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13fbc:	2100      	movs	r1, #0
			m.param = instance;
   13fbe:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13fc0:	2001      	movs	r0, #1
   13fc2:	e7dc      	b.n	13f7e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   13fc4:	4b0d      	ldr	r3, [pc, #52]	; (13ffc <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13fc6:	2101      	movs	r1, #1
			m.param = instance;
   13fc8:	609c      	str	r4, [r3, #8]
   13fca:	e7f9      	b.n	13fc0 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   13fcc:	2904      	cmp	r1, #4
   13fce:	d1e5      	bne.n	13f9c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13fd0:	4b0b      	ldr	r3, [pc, #44]	; (14000 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13fd2:	2101      	movs	r1, #1
			m.param = instance;
   13fd4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13fd6:	2003      	movs	r0, #3
   13fd8:	e7d1      	b.n	13f7e <hal_ticker_instance0_sched+0x1e>
   13fda:	bf00      	nop
   13fdc:	20003e40 	.word	0x20003e40
   13fe0:	20003e50 	.word	0x20003e50
   13fe4:	00015e19 	.word	0x00015e19
   13fe8:	000171f2 	.word	0x000171f2
   13fec:	0001a88e 	.word	0x0001a88e
   13ff0:	00017241 	.word	0x00017241
   13ff4:	00017166 	.word	0x00017166
   13ff8:	20003e60 	.word	0x20003e60
   13ffc:	20003e70 	.word	0x20003e70
   14000:	20003e80 	.word	0x20003e80

00014004 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   14004:	4601      	mov	r1, r0
   14006:	2000      	movs	r0, #0
   14008:	f7ff ba62 	b.w	134d0 <cntr_cmp_set>

0001400c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   1400c:	4770      	bx	lr
	...

00014010 <net_buf_pool_get>:
}
   14010:	4b01      	ldr	r3, [pc, #4]	; (14018 <net_buf_pool_get+0x8>)
   14012:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   14016:	4770      	bx	lr
   14018:	20003f54 	.word	0x20003f54

0001401c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1401c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1401e:	4b04      	ldr	r3, [pc, #16]	; (14030 <net_buf_id+0x14>)
   14020:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   14024:	69db      	ldr	r3, [r3, #28]
   14026:	1ac0      	subs	r0, r0, r3
}
   14028:	4b02      	ldr	r3, [pc, #8]	; (14034 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1402a:	10c0      	asrs	r0, r0, #3
}
   1402c:	4358      	muls	r0, r3
   1402e:	4770      	bx	lr
   14030:	20003f54 	.word	0x20003f54
   14034:	aaaaaaab 	.word	0xaaaaaaab

00014038 <fixed_data_alloc>:
{
   14038:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1403a:	4b09      	ldr	r3, [pc, #36]	; (14060 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1403c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1403e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   14042:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14044:	699b      	ldr	r3, [r3, #24]
   14046:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   14048:	6823      	ldr	r3, [r4, #0]
   1404a:	429a      	cmp	r2, r3
   1404c:	bf94      	ite	ls
   1404e:	600a      	strls	r2, [r1, #0]
   14050:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   14052:	f7ff ffe3 	bl	1401c <net_buf_id>
   14056:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   1405a:	fb02 3000 	mla	r0, r2, r0, r3
   1405e:	bd10      	pop	{r4, pc}
   14060:	20003f54 	.word	0x20003f54

00014064 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   14064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14068:	4605      	mov	r5, r0
   1406a:	9101      	str	r1, [sp, #4]
   1406c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1406e:	f001 f961 	bl	15334 <_impl_k_uptime_get_32>
   14072:	4607      	mov	r7, r0
	__asm__ volatile(
   14074:	f04f 0320 	mov.w	r3, #32
   14078:	f3ef 8811 	mrs	r8, BASEPRI
   1407c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   14080:	8a6b      	ldrh	r3, [r5, #18]
   14082:	2b00      	cmp	r3, #0
   14084:	d03d      	beq.n	14102 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   14086:	8a2a      	ldrh	r2, [r5, #16]
   14088:	429a      	cmp	r2, r3
   1408a:	d92a      	bls.n	140e2 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1408c:	2100      	movs	r1, #0
   1408e:	4628      	mov	r0, r5
   14090:	f000 fe6a 	bl	14d68 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   14094:	b328      	cbz	r0, 140e2 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14096:	f388 8811 	msr	BASEPRI, r8
   1409a:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1409c:	9b01      	ldr	r3, [sp, #4]
   1409e:	2b00      	cmp	r3, #0
   140a0:	d03c      	beq.n	1411c <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   140a2:	1c73      	adds	r3, r6, #1
   140a4:	2b01      	cmp	r3, #1
   140a6:	d906      	bls.n	140b6 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   140a8:	f001 f944 	bl	15334 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   140ac:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   140ae:	42b0      	cmp	r0, r6
   140b0:	bf94      	ite	ls
   140b2:	1a36      	subls	r6, r6, r0
   140b4:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   140b6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   140b8:	4f1e      	ldr	r7, [pc, #120]	; (14134 <net_buf_alloc_len+0xd0>)
   140ba:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   140be:	4632      	mov	r2, r6
   140c0:	699b      	ldr	r3, [r3, #24]
   140c2:	681b      	ldr	r3, [r3, #0]
   140c4:	a901      	add	r1, sp, #4
   140c6:	681b      	ldr	r3, [r3, #0]
   140c8:	4620      	mov	r0, r4
   140ca:	4798      	blx	r3
   140cc:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   140ce:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   140d0:	bb28      	cbnz	r0, 1411e <net_buf_alloc_len+0xba>
	k_lifo_put(&pool->free, buf);
   140d2:	79a0      	ldrb	r0, [r4, #6]
   140d4:	4621      	mov	r1, r4
   140d6:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   140da:	f000 fe26 	bl	14d2a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   140de:	462c      	mov	r4, r5
   140e0:	e018      	b.n	14114 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   140e2:	8a68      	ldrh	r0, [r5, #18]
   140e4:	1e43      	subs	r3, r0, #1
   140e6:	826b      	strh	r3, [r5, #18]
   140e8:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   140ec:	8a2c      	ldrh	r4, [r5, #16]
   140ee:	1a24      	subs	r4, r4, r0
   140f0:	69e8      	ldr	r0, [r5, #28]
   140f2:	2318      	movs	r3, #24
   140f4:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   140f8:	4b0e      	ldr	r3, [pc, #56]	; (14134 <net_buf_alloc_len+0xd0>)
   140fa:	1aed      	subs	r5, r5, r3
   140fc:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   140fe:	71a5      	strb	r5, [r4, #6]
		goto success;
   14100:	e7cc      	b.n	1409c <net_buf_alloc_len+0x38>
   14102:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   14106:	4631      	mov	r1, r6
   14108:	4628      	mov	r0, r5
   1410a:	f000 fe2d 	bl	14d68 <_impl_k_queue_get>
		return NULL;
   1410e:	4604      	mov	r4, r0
	if (!buf) {
   14110:	2800      	cmp	r0, #0
   14112:	d1c3      	bne.n	1409c <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   14114:	4620      	mov	r0, r4
   14116:	b002      	add	sp, #8
   14118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1411c:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   1411e:	2301      	movs	r3, #1
   14120:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   14122:	2300      	movs	r3, #0
	buf->frags = NULL;
   14124:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   14126:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   14128:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   1412a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1412c:	6923      	ldr	r3, [r4, #16]
   1412e:	81e2      	strh	r2, [r4, #14]
   14130:	60a3      	str	r3, [r4, #8]
	return buf;
   14132:	e7ef      	b.n	14114 <net_buf_alloc_len+0xb0>
   14134:	20003f54 	.word	0x20003f54

00014138 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14138:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1413a:	685b      	ldr	r3, [r3, #4]
   1413c:	460a      	mov	r2, r1
   1413e:	6819      	ldr	r1, [r3, #0]
   14140:	f7ff bf90 	b.w	14064 <net_buf_alloc_len>

00014144 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   14144:	b570      	push	{r4, r5, r6, lr}
   14146:	4606      	mov	r6, r0
   14148:	f000 fe0e 	bl	14d68 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1414c:	4605      	mov	r5, r0
   1414e:	b128      	cbz	r0, 1415c <net_buf_get+0x18>
   14150:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   14152:	7963      	ldrb	r3, [r4, #5]
   14154:	f013 0301 	ands.w	r3, r3, #1
   14158:	d102      	bne.n	14160 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1415a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1415c:	4628      	mov	r0, r5
   1415e:	bd70      	pop	{r4, r5, r6, pc}
   14160:	2100      	movs	r1, #0
   14162:	4630      	mov	r0, r6
   14164:	f000 fe00 	bl	14d68 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   14168:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1416a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1416c:	f023 0301 	bic.w	r3, r3, #1
   14170:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   14172:	4604      	mov	r4, r0
   14174:	e7ed      	b.n	14152 <net_buf_get+0xe>

00014176 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   14176:	6883      	ldr	r3, [r0, #8]
   14178:	4419      	add	r1, r3
   1417a:	6001      	str	r1, [r0, #0]
   1417c:	4770      	bx	lr

0001417e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1417e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   14180:	460a      	mov	r2, r1
   14182:	6814      	ldr	r4, [r2, #0]
   14184:	b914      	cbnz	r4, 1418c <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   14186:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   14188:	f000 bdd4 	b.w	14d34 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1418c:	7953      	ldrb	r3, [r2, #5]
   1418e:	f043 0301 	orr.w	r3, r3, #1
   14192:	7153      	strb	r3, [r2, #5]
   14194:	4622      	mov	r2, r4
   14196:	e7f4      	b.n	14182 <net_buf_put+0x4>

00014198 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   14198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1419a:	4d15      	ldr	r5, [pc, #84]	; (141f0 <net_buf_unref+0x58>)
   1419c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1419e:	2600      	movs	r6, #0
	while (buf) {
   141a0:	b904      	cbnz	r4, 141a4 <net_buf_unref+0xc>
   141a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   141a4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   141a6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   141a8:	3b01      	subs	r3, #1
   141aa:	b2db      	uxtb	r3, r3
   141ac:	7123      	strb	r3, [r4, #4]
   141ae:	2b00      	cmp	r3, #0
   141b0:	d1f7      	bne.n	141a2 <net_buf_unref+0xa>
		if (buf->__buf) {
   141b2:	6921      	ldr	r1, [r4, #16]
   141b4:	b159      	cbz	r1, 141ce <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   141b6:	7963      	ldrb	r3, [r4, #5]
   141b8:	079b      	lsls	r3, r3, #30
   141ba:	d407      	bmi.n	141cc <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   141bc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   141be:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   141c2:	4620      	mov	r0, r4
   141c4:	699b      	ldr	r3, [r3, #24]
   141c6:	681b      	ldr	r3, [r3, #0]
   141c8:	689b      	ldr	r3, [r3, #8]
   141ca:	4798      	blx	r3
			buf->__buf = NULL;
   141cc:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   141ce:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   141d0:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   141d2:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   141d6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   141d8:	695b      	ldr	r3, [r3, #20]
   141da:	b11b      	cbz	r3, 141e4 <net_buf_unref+0x4c>
			pool->destroy(buf);
   141dc:	4620      	mov	r0, r4
   141de:	4798      	blx	r3
{
   141e0:	463c      	mov	r4, r7
   141e2:	e7dd      	b.n	141a0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   141e4:	4621      	mov	r1, r4
   141e6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   141ea:	f000 fd9e 	bl	14d2a <k_queue_prepend>
   141ee:	e7f7      	b.n	141e0 <net_buf_unref+0x48>
   141f0:	20003f54 	.word	0x20003f54

000141f4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   141f4:	7903      	ldrb	r3, [r0, #4]
   141f6:	3301      	adds	r3, #1
   141f8:	7103      	strb	r3, [r0, #4]
	return buf;
}
   141fa:	4770      	bx	lr

000141fc <net_buf_simple_add>:
	return buf->data + buf->len;
   141fc:	8883      	ldrh	r3, [r0, #4]
   141fe:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   14200:	4419      	add	r1, r3
   14202:	8081      	strh	r1, [r0, #4]
	return tail;
}
   14204:	18d0      	adds	r0, r2, r3
   14206:	4770      	bx	lr

00014208 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   14208:	b430      	push	{r4, r5}
   1420a:	8883      	ldrh	r3, [r0, #4]
   1420c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1420e:	189d      	adds	r5, r3, r2
   14210:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   14212:	18e0      	adds	r0, r4, r3
}
   14214:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   14216:	f7ed bcf1 	b.w	1bfc <memcpy>

0001421a <net_buf_simple_add_u8>:
   1421a:	8883      	ldrh	r3, [r0, #4]
   1421c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1421e:	b510      	push	{r4, lr}
	buf->len += len;
   14220:	1c5c      	adds	r4, r3, #1
   14222:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   14224:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   14226:	18d0      	adds	r0, r2, r3
   14228:	bd10      	pop	{r4, pc}

0001422a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1422a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1422c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1422e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   14230:	4411      	add	r1, r2
	buf->data -= len;
   14232:	6003      	str	r3, [r0, #0]
	buf->len += len;
   14234:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   14236:	4618      	mov	r0, r3
   14238:	4770      	bx	lr

0001423a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1423a:	8883      	ldrh	r3, [r0, #4]
   1423c:	1a5b      	subs	r3, r3, r1
   1423e:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   14240:	6803      	ldr	r3, [r0, #0]
   14242:	4419      	add	r1, r3
   14244:	6001      	str	r1, [r0, #0]
}
   14246:	4608      	mov	r0, r1
   14248:	4770      	bx	lr

0001424a <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1424a:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   1424c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1424e:	2101      	movs	r1, #1
	val = buf->data[0];
   14250:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   14252:	f7ff fff2 	bl	1423a <net_buf_simple_pull>

	return val;
}
   14256:	4610      	mov	r0, r2
   14258:	bd08      	pop	{r3, pc}

0001425a <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1425a:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1425c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1425e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   14260:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   14262:	f7ff ffea 	bl	1423a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   14266:	4610      	mov	r0, r2
   14268:	bd08      	pop	{r3, pc}

0001426a <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1426a:	6802      	ldr	r2, [r0, #0]
   1426c:	6880      	ldr	r0, [r0, #8]
}
   1426e:	1a10      	subs	r0, r2, r0
   14270:	4770      	bx	lr

00014272 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   14272:	6802      	ldr	r2, [r0, #0]
   14274:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   14276:	88c3      	ldrh	r3, [r0, #6]
   14278:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   1427a:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1427c:	1a9b      	subs	r3, r3, r2
}
   1427e:	1a18      	subs	r0, r3, r0
   14280:	4770      	bx	lr

00014282 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   14282:	6800      	ldr	r0, [r0, #0]
   14284:	6880      	ldr	r0, [r0, #8]
   14286:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   14288:	b941      	cbnz	r1, 1429c <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   1428a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   1428e:	fa21 f202 	lsr.w	r2, r1, r2
   14292:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   14296:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   14298:	2000      	movs	r0, #0
   1429a:	4770      	bx	lr
		*value = gpio->IN;
   1429c:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   142a0:	e7f9      	b.n	14296 <gpio_nrf5_read+0x14>

000142a2 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   142a2:	6800      	ldr	r0, [r0, #0]
   142a4:	6880      	ldr	r0, [r0, #8]
   142a6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   142a8:	b949      	cbnz	r1, 142be <gpio_nrf5_write+0x1c>
   142aa:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   142ac:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   142ae:	b11b      	cbz	r3, 142b8 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   142b0:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   142b4:	2000      	movs	r0, #0
   142b6:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   142b8:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   142bc:	e7fa      	b.n	142b4 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   142be:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   142c2:	e7f7      	b.n	142b4 <gpio_nrf5_write+0x12>

000142c4 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   142c4:	6883      	ldr	r3, [r0, #8]
   142c6:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   142c8:	b172      	cbz	r2, 142e8 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   142ca:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   142cc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   142ce:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   142d0:	b902      	cbnz	r2, 142d4 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   142d2:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   142d4:	2000      	movs	r0, #0
   142d6:	4770      	bx	lr
	parent->next = child;
   142d8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   142da:	6858      	ldr	r0, [r3, #4]
   142dc:	4281      	cmp	r1, r0
	list->tail = node;
   142de:	bf08      	it	eq
   142e0:	605a      	streq	r2, [r3, #4]
   142e2:	e00d      	b.n	14300 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   142e4:	4602      	mov	r2, r0
   142e6:	6800      	ldr	r0, [r0, #0]
   142e8:	2800      	cmp	r0, #0
   142ea:	d0f3      	beq.n	142d4 <gpio_nrf5_manage_callback+0x10>
   142ec:	4281      	cmp	r1, r0
   142ee:	d1f9      	bne.n	142e4 <gpio_nrf5_manage_callback+0x20>
   142f0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   142f2:	2a00      	cmp	r2, #0
   142f4:	d1f0      	bne.n	142d8 <gpio_nrf5_manage_callback+0x14>
   142f6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   142f8:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   142fa:	4291      	cmp	r1, r2
   142fc:	d100      	bne.n	14300 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   142fe:	6058      	str	r0, [r3, #4]
	parent->next = child;
   14300:	2300      	movs	r3, #0
   14302:	600b      	str	r3, [r1, #0]
   14304:	e7e6      	b.n	142d4 <gpio_nrf5_manage_callback+0x10>
	...

00014308 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   14308:	4b0c      	ldr	r3, [pc, #48]	; (1433c <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   1430a:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1430c:	4d0c      	ldr	r5, [pc, #48]	; (14340 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   1430e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   14310:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   14312:	fa24 f203 	lsr.w	r2, r4, r3
   14316:	07d2      	lsls	r2, r2, #31
   14318:	d508      	bpl.n	1432c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1431a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1431e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   14322:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   14326:	4282      	cmp	r2, r0
   14328:	d100      	bne.n	1432c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1432a:	b121      	cbz	r1, 14336 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1432c:	3301      	adds	r3, #1
   1432e:	2b08      	cmp	r3, #8
   14330:	d1ef      	bne.n	14312 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   14332:	f06f 0312 	mvn.w	r3, #18
}
   14336:	4618      	mov	r0, r3
   14338:	bd30      	pop	{r4, r5, pc}
   1433a:	bf00      	nop
   1433c:	2000171c 	.word	0x2000171c
   14340:	40006000 	.word	0x40006000

00014344 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   14344:	b570      	push	{r4, r5, r6, lr}
   14346:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   14348:	460d      	mov	r5, r1
   1434a:	b9c9      	cbnz	r1, 14380 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   1434c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1434e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   14350:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   14352:	4610      	mov	r0, r2
   14354:	7919      	ldrb	r1, [r3, #4]
   14356:	f7ff ffd7 	bl	14308 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1435a:	2800      	cmp	r0, #0
   1435c:	db12      	blt.n	14384 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   1435e:	68b2      	ldr	r2, [r6, #8]
   14360:	2301      	movs	r3, #1
   14362:	fa03 f404 	lsl.w	r4, r3, r4
   14366:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   14368:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1436c:	4a06      	ldr	r2, [pc, #24]	; (14388 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   1436e:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   14370:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   14374:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   14378:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   1437c:	4628      	mov	r0, r5
   1437e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   14380:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   14384:	bd70      	pop	{r4, r5, r6, pc}
   14386:	bf00      	nop
   14388:	40006000 	.word	0x40006000

0001438c <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   1438c:	b570      	push	{r4, r5, r6, lr}
   1438e:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   14390:	460d      	mov	r5, r1
   14392:	b9b1      	cbnz	r1, 143c2 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   14394:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   14396:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   14398:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   1439a:	4610      	mov	r0, r2
   1439c:	7919      	ldrb	r1, [r3, #4]
   1439e:	f7ff ffb3 	bl	14308 <gpiote_find_channel.isra.4>
		if (i < 0) {
   143a2:	2800      	cmp	r0, #0
   143a4:	db0f      	blt.n	143c6 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   143a6:	68b2      	ldr	r2, [r6, #8]
   143a8:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   143aa:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   143ae:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   143b2:	4b05      	ldr	r3, [pc, #20]	; (143c8 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   143b4:	ea22 0404 	bic.w	r4, r2, r4
   143b8:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   143ba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   143be:	4628      	mov	r0, r5
   143c0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   143c2:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   143c6:	bd70      	pop	{r4, r5, r6, pc}
   143c8:	40006000 	.word	0x40006000

000143cc <gpio_nrf5_config>:
{
   143cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   143d0:	6806      	ldr	r6, [r0, #0]
{
   143d2:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   143d4:	68b2      	ldr	r2, [r6, #8]
   143d6:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   143d8:	b119      	cbz	r1, 143e2 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   143da:	f06f 0022 	mvn.w	r0, #34	; 0x22
   143de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   143e2:	f403 7240 	and.w	r2, r3, #768	; 0x300
   143e6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   143ea:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   143ee:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   143f2:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   143f6:	d058      	beq.n	144aa <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   143f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   143fc:	bf0c      	ite	eq
   143fe:	2204      	moveq	r2, #4
   14400:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   14402:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   14406:	bf08      	it	eq
   14408:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   1440a:	f013 0f01 	tst.w	r3, #1
   1440e:	ea4f 0180 	mov.w	r1, r0, lsl #2
   14412:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 144e0 <gpio_nrf5_config+0x114>
   14416:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   1441a:	d04f      	beq.n	144bc <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   1441c:	2a0c      	cmp	r2, #12
   1441e:	d146      	bne.n	144ae <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   14420:	2701      	movs	r7, #1
   14422:	40a7      	lsls	r7, r4
   14424:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   14428:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   1442a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   1442e:	f041 0103 	orr.w	r1, r1, #3
   14432:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   14434:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   14438:	f013 0002 	ands.w	r0, r3, #2
   1443c:	d049      	beq.n	144d2 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   1443e:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   14440:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   14442:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   14446:	d5c8      	bpl.n	143da <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   14448:	065a      	lsls	r2, r3, #25
   1444a:	d43d      	bmi.n	144c8 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   1444c:	f013 0f04 	tst.w	r3, #4
   14450:	bf14      	ite	ne
   14452:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   14456:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   1445a:	4e1f      	ldr	r6, [pc, #124]	; (144d8 <gpio_nrf5_config+0x10c>)
   1445c:	6837      	ldr	r7, [r6, #0]
   1445e:	4638      	mov	r0, r7
   14460:	f7eb fef0 	bl	244 <__popcountsi2>
   14464:	2808      	cmp	r0, #8
   14466:	d032      	beq.n	144ce <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   14468:	4641      	mov	r1, r8
   1446a:	4620      	mov	r0, r4
   1446c:	f7ff ff4c 	bl	14308 <gpiote_find_channel.isra.4>
		if (i < 0) {
   14470:	2800      	cmp	r0, #0
   14472:	da08      	bge.n	14486 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   14474:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   14476:	fa93 f0a3 	rbit	r0, r3
   1447a:	2b00      	cmp	r3, #0
   1447c:	fab0 f080 	clz	r0, r0
   14480:	bf08      	it	eq
   14482:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   14486:	2301      	movs	r3, #1
   14488:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   1448a:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   1448c:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   1448e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   14492:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   14494:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   14498:	4b10      	ldr	r3, [pc, #64]	; (144dc <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   1449a:	f044 0401 	orr.w	r4, r4, #1
   1449e:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   144a0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   144a4:	2000      	movs	r0, #0
   144a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   144aa:	220c      	movs	r2, #12
   144ac:	e7a9      	b.n	14402 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   144ae:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   144b0:	bf02      	ittt	eq
   144b2:	2701      	moveq	r7, #1
   144b4:	40a7      	lsleq	r7, r4
   144b6:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   144ba:	e7b5      	b.n	14428 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   144bc:	4461      	add	r1, ip
   144be:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   144c2:	430a      	orrs	r2, r1
   144c4:	433a      	orrs	r2, r7
   144c6:	e7b5      	b.n	14434 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   144c8:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   144cc:	e7c5      	b.n	1445a <gpio_nrf5_config+0x8e>
			return -EIO;
   144ce:	f06f 0004 	mvn.w	r0, #4
}
   144d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144d6:	bf00      	nop
   144d8:	2000171c 	.word	0x2000171c
   144dc:	40006000 	.word	0x40006000
   144e0:	0001a92c 	.word	0x0001a92c

000144e4 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   144e4:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   144e6:	2200      	movs	r2, #0
   144e8:	2105      	movs	r1, #5
   144ea:	2006      	movs	r0, #6
   144ec:	f7ed f9e6 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   144f0:	2006      	movs	r0, #6
   144f2:	f7ed f9b1 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   144f6:	2000      	movs	r0, #0
   144f8:	bd08      	pop	{r3, pc}
	...

000144fc <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   144fc:	2100      	movs	r1, #0
{
   144fe:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   14500:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   14502:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   14504:	2501      	movs	r5, #1
   14506:	008b      	lsls	r3, r1, #2
   14508:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1450c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   14510:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   14514:	b140      	cbz	r0, 14528 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   14516:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   1451a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   1451e:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   14522:	fa05 f303 	lsl.w	r3, r5, r3
   14526:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   14528:	3101      	adds	r1, #1
   1452a:	2908      	cmp	r1, #8
   1452c:	d1eb      	bne.n	14506 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   1452e:	4e08      	ldr	r6, [pc, #32]	; (14550 <gpio_nrf5_port_isr+0x54>)
   14530:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   14532:	689d      	ldr	r5, [r3, #8]
   14534:	681c      	ldr	r4, [r3, #0]
   14536:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   14538:	b14c      	cbz	r4, 1454e <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   1453a:	68a3      	ldr	r3, [r4, #8]
   1453c:	421d      	tst	r5, r3
   1453e:	d004      	beq.n	1454a <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   14540:	6863      	ldr	r3, [r4, #4]
   14542:	462a      	mov	r2, r5
   14544:	4621      	mov	r1, r4
   14546:	4630      	mov	r0, r6
   14548:	4798      	blx	r3
	return node->next;
   1454a:	6824      	ldr	r4, [r4, #0]
   1454c:	e7f4      	b.n	14538 <gpio_nrf5_port_isr+0x3c>
   1454e:	bd70      	pop	{r4, r5, r6, pc}
   14550:	20003efc 	.word	0x20003efc

00014554 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14554:	4b03      	ldr	r3, [pc, #12]	; (14564 <uart_nrfx_err_check+0x10>)
   14556:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   14558:	b118      	cbz	r0, 14562 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1455a:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   1455e:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   14562:	4770      	bx	lr
   14564:	40002124 	.word	0x40002124

00014568 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14568:	4b07      	ldr	r3, [pc, #28]	; (14588 <uart_nrfx_poll_out+0x20>)
   1456a:	2200      	movs	r2, #0
   1456c:	601a      	str	r2, [r3, #0]
{
   1456e:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14570:	681a      	ldr	r2, [r3, #0]
   14572:	9201      	str	r2, [sp, #4]
    (void)dummy;
   14574:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   14576:	4a05      	ldr	r2, [pc, #20]	; (1458c <uart_nrfx_poll_out+0x24>)
   14578:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1457c:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   1457e:	2a00      	cmp	r2, #0
   14580:	d0fc      	beq.n	1457c <uart_nrfx_poll_out+0x14>
}
   14582:	4608      	mov	r0, r1
   14584:	b002      	add	sp, #8
   14586:	4770      	bx	lr
   14588:	4000211c 	.word	0x4000211c
   1458c:	40002000 	.word	0x40002000

00014590 <uart_nrfx_poll_in>:
   14590:	4b08      	ldr	r3, [pc, #32]	; (145b4 <uart_nrfx_poll_in+0x24>)
   14592:	681a      	ldr	r2, [r3, #0]
{
   14594:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   14596:	b152      	cbz	r2, 145ae <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14598:	2000      	movs	r0, #0
   1459a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1459c:	681b      	ldr	r3, [r3, #0]
   1459e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   145a0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   145a2:	4b05      	ldr	r3, [pc, #20]	; (145b8 <uart_nrfx_poll_in+0x28>)
   145a4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   145a8:	700b      	strb	r3, [r1, #0]
}
   145aa:	b002      	add	sp, #8
   145ac:	4770      	bx	lr
		return -1;
   145ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145b2:	e7fa      	b.n	145aa <uart_nrfx_poll_in+0x1a>
   145b4:	40002108 	.word	0x40002108
   145b8:	40002000 	.word	0x40002000

000145bc <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   145bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   145be:	4819      	ldr	r0, [pc, #100]	; (14624 <uart_nrfx_init+0x68>)
   145c0:	f000 f98c 	bl	148dc <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   145c4:	6843      	ldr	r3, [r0, #4]
   145c6:	4604      	mov	r4, r0
   145c8:	681d      	ldr	r5, [r3, #0]
   145ca:	2206      	movs	r2, #6
   145cc:	f240 1301 	movw	r3, #257	; 0x101
   145d0:	2100      	movs	r1, #0
   145d2:	47a8      	blx	r5
   145d4:	6863      	ldr	r3, [r4, #4]
   145d6:	681d      	ldr	r5, [r3, #0]
   145d8:	2300      	movs	r3, #0
   145da:	4619      	mov	r1, r3
   145dc:	2208      	movs	r2, #8
   145de:	4620      	mov	r0, r4
   145e0:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   145e2:	4b11      	ldr	r3, [pc, #68]	; (14628 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   145e4:	4911      	ldr	r1, [pc, #68]	; (1462c <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   145e6:	2208      	movs	r2, #8
   145e8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   145ec:	2206      	movs	r2, #6
   145ee:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   145f2:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   145f4:	4a0e      	ldr	r2, [pc, #56]	; (14630 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   145f6:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   145fa:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   145fe:	2204      	movs	r2, #4
   14600:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14604:	4a0b      	ldr	r2, [pc, #44]	; (14634 <uart_nrfx_init+0x78>)
   14606:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14608:	6812      	ldr	r2, [r2, #0]
   1460a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1460c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1460e:	4a0a      	ldr	r2, [pc, #40]	; (14638 <uart_nrfx_init+0x7c>)
   14610:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14612:	6812      	ldr	r2, [r2, #0]
   14614:	9200      	str	r2, [sp, #0]
    (void)dummy;
   14616:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14618:	2201      	movs	r2, #1
   1461a:	600a      	str	r2, [r1, #0]
   1461c:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   1461e:	b003      	add	sp, #12
   14620:	bd30      	pop	{r4, r5, pc}
   14622:	bf00      	nop
   14624:	0001a990 	.word	0x0001a990
   14628:	40002000 	.word	0x40002000
   1462c:	40002008 	.word	0x40002008
   14630:	01d7e000 	.word	0x01d7e000
   14634:	4000211c 	.word	0x4000211c
   14638:	40002108 	.word	0x40002108

0001463c <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   1463c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   14640:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   14642:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   14644:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   14646:	42a3      	cmp	r3, r4
	d = &rand[octets];
   14648:	440a      	add	r2, r1
	s = &rng->rand[first];
   1464a:	4406      	add	r6, r0
	if (first <= last) {
   1464c:	d81f      	bhi.n	1468e <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   1464e:	1ae4      	subs	r4, r4, r3
   14650:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   14652:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   14654:	bf3e      	ittt	cc
   14656:	1a64      	subcc	r4, r4, r1
   14658:	b2e7      	uxtbcc	r7, r4
   1465a:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   1465c:	4423      	add	r3, r4
		octets -= avail;
   1465e:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   14662:	bf28      	it	cs
   14664:	2700      	movcs	r7, #0
		first += avail;
   14666:	b2db      	uxtb	r3, r3
		octets -= avail;
   14668:	b2c9      	uxtb	r1, r1
   1466a:	4434      	add	r4, r6

		while (avail--) {
   1466c:	42a6      	cmp	r6, r4
   1466e:	d109      	bne.n	14684 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   14670:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   14672:	7843      	ldrb	r3, [r0, #1]
   14674:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   14676:	bf82      	ittt	hi
   14678:	4b20      	ldrhi	r3, [pc, #128]	; (146fc <get+0xc0>)
   1467a:	2201      	movhi	r2, #1
   1467c:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   1467e:	4608      	mov	r0, r1
   14680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   14684:	f816 5b01 	ldrb.w	r5, [r6], #1
   14688:	f802 5d01 	strb.w	r5, [r2, #-1]!
   1468c:	e7ee      	b.n	1466c <get+0x30>
		avail = rng->count - first;
   1468e:	7805      	ldrb	r5, [r0, #0]
   14690:	1aed      	subs	r5, r5, r3
   14692:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   14694:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   14696:	bf3f      	itttt	cc
   14698:	1a67      	subcc	r7, r4, r1
   1469a:	19ed      	addcc	r5, r5, r7
   1469c:	b2ef      	uxtbcc	r7, r5
   1469e:	460d      	movcc	r5, r1
			first += avail;
   146a0:	bf38      	it	cc
   146a2:	185b      	addcc	r3, r3, r1
		octets -= avail;
   146a4:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   146a8:	bf32      	itee	cc
   146aa:	b2db      	uxtbcc	r3, r3
   146ac:	4627      	movcs	r7, r4
			first = 0;
   146ae:	2300      	movcs	r3, #0
		octets -= avail;
   146b0:	b2c9      	uxtb	r1, r1
   146b2:	4696      	mov	lr, r2
   146b4:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   146b8:	4566      	cmp	r6, ip
   146ba:	d119      	bne.n	146f0 <get+0xb4>
   146bc:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   146be:	2900      	cmp	r1, #0
   146c0:	d0d6      	beq.n	14670 <get+0x34>
   146c2:	2c00      	cmp	r4, #0
   146c4:	d0d4      	beq.n	14670 <get+0x34>
			if (octets < last) {
   146c6:	428c      	cmp	r4, r1
   146c8:	bf8a      	itet	hi
   146ca:	460b      	movhi	r3, r1
   146cc:	4623      	movls	r3, r4
				remaining = last - octets;
   146ce:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   146d0:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   146d4:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   146d8:	bf8c      	ite	hi
   146da:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   146dc:	2700      	movls	r7, #0
			octets -= last;
   146de:	b2c9      	uxtb	r1, r1
   146e0:	18f4      	adds	r4, r6, r3
			while (last--) {
   146e2:	42a6      	cmp	r6, r4
   146e4:	d0c4      	beq.n	14670 <get+0x34>
				*(--d) = *s++;
   146e6:	f816 5b01 	ldrb.w	r5, [r6], #1
   146ea:	f802 5d01 	strb.w	r5, [r2, #-1]!
   146ee:	e7f8      	b.n	146e2 <get+0xa6>
			*(--d) = *s++;
   146f0:	f816 8b01 	ldrb.w	r8, [r6], #1
   146f4:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   146f8:	e7de      	b.n	146b8 <get+0x7c>
   146fa:	bf00      	nop
   146fc:	4000d000 	.word	0x4000d000

00014700 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   14700:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   14702:	b1d0      	cbz	r0, 1473a <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   14704:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   14706:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   14708:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   1470a:	1c53      	adds	r3, r2, #1
   1470c:	b2db      	uxtb	r3, r3
		last = 0;
   1470e:	42ab      	cmp	r3, r5
   14710:	bf08      	it	eq
   14712:	2300      	moveq	r3, #0
	if (last == rng->first) {
   14714:	42a3      	cmp	r3, r4
   14716:	d010      	beq.n	1473a <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   14718:	b161      	cbz	r1, 14734 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   1471a:	490a      	ldr	r1, [pc, #40]	; (14744 <isr+0x44>)
   1471c:	4402      	add	r2, r0
   1471e:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   14722:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   14724:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   14726:	3301      	adds	r3, #1
   14728:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   1472a:	429d      	cmp	r5, r3
   1472c:	bf08      	it	eq
   1472e:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   14730:	42a3      	cmp	r3, r4
   14732:	d005      	beq.n	14740 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   14734:	f06f 000f 	mvn.w	r0, #15
   14738:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   1473a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1473e:	bd30      	pop	{r4, r5, pc}
		return 0;
   14740:	2000      	movs	r0, #0
}
   14742:	bd30      	pop	{r4, r5, pc}
   14744:	4000d000 	.word	0x4000d000

00014748 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   14748:	07db      	lsls	r3, r3, #31
{
   1474a:	b570      	push	{r4, r5, r6, lr}
   1474c:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   1474e:	d507      	bpl.n	14760 <entropy_nrf5_get_entropy_isr+0x18>
   14750:	4613      	mov	r3, r2
   14752:	4a0d      	ldr	r2, [pc, #52]	; (14788 <entropy_nrf5_get_entropy_isr+0x40>)
   14754:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   14756:	2500      	movs	r5, #0
	while (len) {
   14758:	b94b      	cbnz	r3, 1476e <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   1475a:	6050      	str	r0, [r2, #4]

	return cnt;
   1475c:	4620      	mov	r0, r4
}
   1475e:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   14760:	6880      	ldr	r0, [r0, #8]
   14762:	460a      	mov	r2, r1
   14764:	303c      	adds	r0, #60	; 0x3c
   14766:	b2e1      	uxtb	r1, r4
   14768:	f7ff ff68 	bl	1463c <get>
   1476c:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   1476e:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   14772:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   14774:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   14778:	2e00      	cmp	r6, #0
   1477a:	d0fb      	beq.n	14774 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   1477c:	3b01      	subs	r3, #1
   1477e:	b29b      	uxth	r3, r3
   14780:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   14784:	54ce      	strb	r6, [r1, r3]
   14786:	e7e7      	b.n	14758 <entropy_nrf5_get_entropy_isr+0x10>
   14788:	4000d000 	.word	0x4000d000

0001478c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1478c:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1478e:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   14790:	2201      	movs	r2, #1
   14792:	4611      	mov	r1, r2
   14794:	4620      	mov	r0, r4
   14796:	f000 fd7f 	bl	15298 <_impl_k_sem_init>
   1479a:	f104 0018 	add.w	r0, r4, #24
   1479e:	2201      	movs	r2, #1
   147a0:	2100      	movs	r1, #0
   147a2:	f000 fd79 	bl	15298 <_impl_k_sem_init>
	rng->threshold = threshold;
   147a6:	2304      	movs	r3, #4
   147a8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   147ac:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   147ae:	2500      	movs	r5, #0
	rng->threshold = threshold;
   147b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   147b4:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   147b6:	4b11      	ldr	r3, [pc, #68]	; (147fc <entropy_nrf5_init+0x70>)
	rng->count = len;
   147b8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   147bc:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   147be:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   147c2:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   147c6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   147ca:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   147ce:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   147d2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   147d6:	f042 0201 	orr.w	r2, r2, #1
   147da:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   147de:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   147e0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   147e4:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   147e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   147ea:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   147ec:	462a      	mov	r2, r5
   147ee:	f7ed f865 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   147f2:	4630      	mov	r0, r6
   147f4:	f7ed f830 	bl	1858 <_arch_irq_enable>

	return 0;
}
   147f8:	4628      	mov	r0, r5
   147fa:	bd70      	pop	{r4, r5, r6, pc}
   147fc:	4000d000 	.word	0x4000d000

00014800 <isr_rand>:
{
   14800:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   14802:	4b12      	ldr	r3, [pc, #72]	; (1484c <isr_rand+0x4c>)
   14804:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   14808:	b1fb      	cbz	r3, 1484a <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1480a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   1480c:	2101      	movs	r1, #1
   1480e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   14812:	f7ff ff75 	bl	14700 <isr>
		if (ret != -EBUSY) {
   14816:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   1481a:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   1481c:	d00d      	beq.n	1483a <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   1481e:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   14822:	bf14      	ite	ne
   14824:	2100      	movne	r1, #0
   14826:	2101      	moveq	r1, #1
   14828:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1482c:	f7ff ff68 	bl	14700 <isr>
   14830:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   14832:	f105 0018 	add.w	r0, r5, #24
   14836:	f000 fd38 	bl	152aa <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   1483a:	4b04      	ldr	r3, [pc, #16]	; (1484c <isr_rand+0x4c>)
   1483c:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   1483e:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   14840:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   14844:	bf1c      	itt	ne
   14846:	2201      	movne	r2, #1
   14848:	605a      	strne	r2, [r3, #4]
   1484a:	bd38      	pop	{r3, r4, r5, pc}
   1484c:	4000d000 	.word	0x4000d000

00014850 <entropy_nrf5_get_entropy>:
{
   14850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   14854:	6885      	ldr	r5, [r0, #8]
{
   14856:	460f      	mov	r7, r1
   14858:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   1485a:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   1485e:	b914      	cbnz	r4, 14866 <entropy_nrf5_get_entropy+0x16>
}
   14860:	4620      	mov	r0, r4
   14862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14866:	2cff      	cmp	r4, #255	; 0xff
   14868:	4623      	mov	r3, r4
   1486a:	bf28      	it	cs
   1486c:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   1486e:	1ae4      	subs	r4, r4, r3
   14870:	b2de      	uxtb	r6, r3
   14872:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   14874:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   14878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1487c:	4628      	mov	r0, r5
   1487e:	f000 fd3c 	bl	152fa <_impl_k_sem_take>
   14882:	4631      	mov	r1, r6
   14884:	463a      	mov	r2, r7
   14886:	4648      	mov	r0, r9
   14888:	f7ff fed8 	bl	1463c <get>
   1488c:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1488e:	4628      	mov	r0, r5
   14890:	f000 fd0b 	bl	152aa <_impl_k_sem_give>
			if (len8) {
   14894:	2e00      	cmp	r6, #0
   14896:	d0e2      	beq.n	1485e <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   14898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1489c:	4640      	mov	r0, r8
   1489e:	f000 fd2c 	bl	152fa <_impl_k_sem_take>
   148a2:	e7e9      	b.n	14878 <entropy_nrf5_get_entropy+0x28>

000148a4 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   148a4:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   148a6:	4802      	ldr	r0, [pc, #8]	; (148b0 <entropy_nrf_get_entropy_isr+0xc>)
   148a8:	460a      	mov	r2, r1
   148aa:	4619      	mov	r1, r3
   148ac:	f7ff bec6 	b.w	1463c <get>
   148b0:	2000175c 	.word	0x2000175c

000148b4 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   148b4:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   148b6:	4b08      	ldr	r3, [pc, #32]	; (148d8 <_sys_device_do_config_level+0x24>)
   148b8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   148bc:	3001      	adds	r0, #1
   148be:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   148c2:	4620      	mov	r0, r4
   148c4:	42a8      	cmp	r0, r5
   148c6:	f104 040c 	add.w	r4, r4, #12
   148ca:	d300      	bcc.n	148ce <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   148cc:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   148ce:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   148d2:	685b      	ldr	r3, [r3, #4]
   148d4:	4798      	blx	r3
   148d6:	e7f4      	b.n	148c2 <_sys_device_do_config_level+0xe>
   148d8:	0001a9ac 	.word	0x0001a9ac

000148dc <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   148dc:	4b10      	ldr	r3, [pc, #64]	; (14920 <device_get_binding+0x44>)
{
   148de:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   148e0:	4c10      	ldr	r4, [pc, #64]	; (14924 <device_get_binding+0x48>)
{
   148e2:	4605      	mov	r5, r0
   148e4:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   148e6:	429c      	cmp	r4, r3
   148e8:	d104      	bne.n	148f4 <device_get_binding+0x18>
   148ea:	4c0e      	ldr	r4, [pc, #56]	; (14924 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   148ec:	42b4      	cmp	r4, r6
   148ee:	d109      	bne.n	14904 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   148f0:	2400      	movs	r4, #0
   148f2:	e012      	b.n	1491a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   148f4:	6862      	ldr	r2, [r4, #4]
   148f6:	b11a      	cbz	r2, 14900 <device_get_binding+0x24>
   148f8:	6822      	ldr	r2, [r4, #0]
   148fa:	6812      	ldr	r2, [r2, #0]
   148fc:	42aa      	cmp	r2, r5
   148fe:	d00c      	beq.n	1491a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   14900:	340c      	adds	r4, #12
   14902:	e7f0      	b.n	148e6 <device_get_binding+0xa>
		if (!info->driver_api) {
   14904:	6863      	ldr	r3, [r4, #4]
   14906:	b90b      	cbnz	r3, 1490c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   14908:	340c      	adds	r4, #12
   1490a:	e7ef      	b.n	148ec <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   1490c:	6823      	ldr	r3, [r4, #0]
   1490e:	4628      	mov	r0, r5
   14910:	6819      	ldr	r1, [r3, #0]
   14912:	f7ed f951 	bl	1bb8 <strcmp>
   14916:	2800      	cmp	r0, #0
   14918:	d1f6      	bne.n	14908 <device_get_binding+0x2c>
}
   1491a:	4620      	mov	r0, r4
   1491c:	bd70      	pop	{r4, r5, r6, pc}
   1491e:	bf00      	nop
   14920:	20003f2c 	.word	0x20003f2c
   14924:	20003e9c 	.word	0x20003e9c

00014928 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   14928:	1c43      	adds	r3, r0, #1
   1492a:	d003      	beq.n	14934 <_sys_power_save_idle_exit+0xc>
   1492c:	4b03      	ldr	r3, [pc, #12]	; (1493c <_sys_power_save_idle_exit+0x14>)
   1492e:	681b      	ldr	r3, [r3, #0]
   14930:	4298      	cmp	r0, r3
   14932:	db01      	blt.n	14938 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   14934:	f7ec bd58 	b.w	13e8 <_timer_idle_exit>
   14938:	4770      	bx	lr
   1493a:	bf00      	nop
   1493c:	20003e90 	.word	0x20003e90

00014940 <idle>:
	return list->head == list;
   14940:	4d0f      	ldr	r5, [pc, #60]	; (14980 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   14942:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   14944:	4f0f      	ldr	r7, [pc, #60]	; (14984 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14946:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   1494a:	f04f 0220 	mov.w	r2, #32
   1494e:	f3ef 8311 	mrs	r3, BASEPRI
   14952:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   14956:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14958:	42b3      	cmp	r3, r6
   1495a:	d00a      	beq.n	14972 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   1495c:	b14b      	cbz	r3, 14972 <idle+0x32>
   1495e:	691c      	ldr	r4, [r3, #16]
   14960:	1c63      	adds	r3, r4, #1
   14962:	d008      	beq.n	14976 <idle+0x36>
   14964:	683b      	ldr	r3, [r7, #0]
   14966:	42a3      	cmp	r3, r4
   14968:	dd05      	ble.n	14976 <idle+0x36>
	_kernel.idle = ticks;
   1496a:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   1496c:	f7ec fffc 	bl	1968 <k_cpu_idle>
   14970:	e7eb      	b.n	1494a <idle+0xa>
   14972:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   14976:	4620      	mov	r0, r4
   14978:	f7ec fd18 	bl	13ac <_timer_idle_enter>
   1497c:	e7f5      	b.n	1496a <idle+0x2a>
   1497e:	bf00      	nop
   14980:	20001970 	.word	0x20001970
   14984:	20003e90 	.word	0x20003e90

00014988 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   14988:	4802      	ldr	r0, [pc, #8]	; (14994 <_bss_zero+0xc>)
   1498a:	4a03      	ldr	r2, [pc, #12]	; (14998 <_bss_zero+0x10>)
   1498c:	2100      	movs	r1, #0
   1498e:	1a12      	subs	r2, r2, r0
   14990:	f7ed b960 	b.w	1c54 <memset>
   14994:	20000000 	.word	0x20000000
   14998:	20001a30 	.word	0x20001a30

0001499c <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   1499c:	4802      	ldr	r0, [pc, #8]	; (149a8 <_data_copy+0xc>)
   1499e:	4a03      	ldr	r2, [pc, #12]	; (149ac <_data_copy+0x10>)
   149a0:	4903      	ldr	r1, [pc, #12]	; (149b0 <_data_copy+0x14>)
   149a2:	1a12      	subs	r2, r2, r0
   149a4:	f7ed b92a 	b.w	1bfc <memcpy>
   149a8:	20003a48 	.word	0x20003a48
   149ac:	20003fd4 	.word	0x20003fd4
   149b0:	0001a9fc 	.word	0x0001a9fc

000149b4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   149b4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   149b6:	2002      	movs	r0, #2
   149b8:	f7ff ff7c 	bl	148b4 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   149bc:	4807      	ldr	r0, [pc, #28]	; (149dc <bg_thread_main+0x28>)
   149be:	f7ec fae5 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   149c2:	2003      	movs	r0, #3
   149c4:	f7ff ff76 	bl	148b4 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   149c8:	f000 feaa 	bl	15720 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   149cc:	f7eb fe78 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   149d0:	4a03      	ldr	r2, [pc, #12]	; (149e0 <bg_thread_main+0x2c>)
   149d2:	7a13      	ldrb	r3, [r2, #8]
   149d4:	f023 0301 	bic.w	r3, r3, #1
   149d8:	7213      	strb	r3, [r2, #8]
   149da:	bd08      	pop	{r3, pc}
   149dc:	0001a9c8 	.word	0x0001a9c8
   149e0:	200017e0 	.word	0x200017e0

000149e4 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   149e4:	b580      	push	{r7, lr}
   149e6:	b086      	sub	sp, #24
   149e8:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   149ea:	f7ec fd81 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   149ee:	4b30      	ldr	r3, [pc, #192]	; (14ab0 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   149f0:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   149f4:	4b2f      	ldr	r3, [pc, #188]	; (14ab4 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   149f6:	4d30      	ldr	r5, [pc, #192]	; (14ab8 <_Cstart+0xd4>)
   149f8:	4e30      	ldr	r6, [pc, #192]	; (14abc <_Cstart+0xd8>)
   149fa:	2400      	movs	r4, #0
   149fc:	22e0      	movs	r2, #224	; 0xe0
   149fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   14a02:	77dc      	strb	r4, [r3, #31]
   14a04:	761c      	strb	r4, [r3, #24]
   14a06:	765c      	strb	r4, [r3, #25]
   14a08:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   14a0c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   14a10:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   14a12:	f7ec ff19 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   14a16:	f7ec ffa1 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   14a1a:	4620      	mov	r0, r4
   14a1c:	f7ff ff4a 	bl	148b4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   14a20:	2001      	movs	r0, #1
   14a22:	f7ff ff47 	bl	148b4 <_sys_device_do_config_level>
	_sched_init();
   14a26:	f000 fbf9 	bl	1521c <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   14a2a:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   14a2c:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   14a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14a32:	9304      	str	r3, [sp, #16]
   14a34:	9403      	str	r4, [sp, #12]
   14a36:	9402      	str	r4, [sp, #8]
   14a38:	9401      	str	r4, [sp, #4]
   14a3a:	9400      	str	r4, [sp, #0]
   14a3c:	4b20      	ldr	r3, [pc, #128]	; (14ac0 <_Cstart+0xdc>)
   14a3e:	4921      	ldr	r1, [pc, #132]	; (14ac4 <_Cstart+0xe0>)
   14a40:	4628      	mov	r0, r5
   14a42:	f000 fe15 	bl	15670 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a46:	7a6b      	ldrb	r3, [r5, #9]
   14a48:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   14a4c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a50:	726a      	strb	r2, [r5, #9]
   14a52:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   14a54:	d102      	bne.n	14a5c <_Cstart+0x78>
   14a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14a58:	3301      	adds	r3, #1
   14a5a:	d024      	beq.n	14aa6 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   14a5c:	2301      	movs	r3, #1
   14a5e:	4e1a      	ldr	r6, [pc, #104]	; (14ac8 <_Cstart+0xe4>)
   14a60:	9304      	str	r3, [sp, #16]
   14a62:	230f      	movs	r3, #15
   14a64:	9303      	str	r3, [sp, #12]
   14a66:	2300      	movs	r3, #0
   14a68:	9302      	str	r3, [sp, #8]
   14a6a:	9301      	str	r3, [sp, #4]
   14a6c:	9300      	str	r3, [sp, #0]
   14a6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   14a72:	4b16      	ldr	r3, [pc, #88]	; (14acc <_Cstart+0xe8>)
   14a74:	4916      	ldr	r1, [pc, #88]	; (14ad0 <_Cstart+0xec>)
   14a76:	4630      	mov	r0, r6
   14a78:	f000 fdfa 	bl	15670 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a7c:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   14a7e:	60e6      	str	r6, [r4, #12]
   14a80:	f023 0304 	bic.w	r3, r3, #4
   14a84:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   14a86:	4b13      	ldr	r3, [pc, #76]	; (14ad4 <_Cstart+0xf0>)
   14a88:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   14a8a:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   14a8c:	4b12      	ldr	r3, [pc, #72]	; (14ad8 <_Cstart+0xf4>)

	_current = main_thread;
   14a8e:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   14a90:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   14a94:	4c11      	ldr	r4, [pc, #68]	; (14adc <_Cstart+0xf8>)
   14a96:	4a0a      	ldr	r2, [pc, #40]	; (14ac0 <_Cstart+0xdc>)
   14a98:	f383 8809 	msr	PSP, r3
   14a9c:	2100      	movs	r1, #0
   14a9e:	f381 8811 	msr	BASEPRI, r1
   14aa2:	4610      	mov	r0, r2
   14aa4:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   14aa6:	4628      	mov	r0, r5
   14aa8:	f000 fab4 	bl	15014 <_add_thread_to_ready_q>
   14aac:	e7d6      	b.n	14a5c <_Cstart+0x78>
   14aae:	bf00      	nop
   14ab0:	20003648 	.word	0x20003648
   14ab4:	e000ed00 	.word	0xe000ed00
   14ab8:	200017e0 	.word	0x200017e0
   14abc:	20001970 	.word	0x20001970
   14ac0:	000149b5 	.word	0x000149b5
   14ac4:	20002908 	.word	0x20002908
   14ac8:	20001770 	.word	0x20001770
   14acc:	00014941 	.word	0x00014941
   14ad0:	20002d08 	.word	0x20002d08
   14ad4:	20001984 	.word	0x20001984
   14ad8:	20002d08 	.word	0x20002d08
   14adc:	00000899 	.word	0x00000899

00014ae0 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   14ae0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   14ae2:	4c07      	ldr	r4, [pc, #28]	; (14b00 <init_static_pools+0x20>)
   14ae4:	4d07      	ldr	r5, [pc, #28]	; (14b04 <init_static_pools+0x24>)
   14ae6:	42ac      	cmp	r4, r5
   14ae8:	d301      	bcc.n	14aee <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   14aea:	2000      	movs	r0, #0
   14aec:	bd38      	pop	{r3, r4, r5, pc}
   14aee:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   14af2:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   14af4:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   14af6:	4620      	mov	r0, r4
   14af8:	f7eb ff09 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   14afc:	341c      	adds	r4, #28
   14afe:	e7f2      	b.n	14ae6 <init_static_pools+0x6>
   14b00:	20003f2c 	.word	0x20003f2c
   14b04:	20003f2c 	.word	0x20003f2c

00014b08 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   14b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   14b0c:	1e1d      	subs	r5, r3, #0
{
   14b0e:	b085      	sub	sp, #20
   14b10:	4607      	mov	r7, r0
   14b12:	460c      	mov	r4, r1
   14b14:	4692      	mov	sl, r2
	if (timeout > 0) {
   14b16:	dd4c      	ble.n	14bb2 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   14b18:	f000 fc16 	bl	15348 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14b1c:	f105 0309 	add.w	r3, r5, #9
   14b20:	220a      	movs	r2, #10
   14b22:	fbb3 f3f2 	udiv	r3, r3, r2
   14b26:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   14b2a:	4b23      	ldr	r3, [pc, #140]	; (14bb8 <k_mem_pool_alloc+0xb0>)
   14b2c:	4e23      	ldr	r6, [pc, #140]	; (14bbc <k_mem_pool_alloc+0xb4>)
   14b2e:	1afb      	subs	r3, r7, r3
   14b30:	109b      	asrs	r3, r3, #2
   14b32:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   14b34:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   14b36:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   14b3a:	9400      	str	r4, [sp, #0]
   14b3c:	ab03      	add	r3, sp, #12
   14b3e:	aa02      	add	r2, sp, #8
   14b40:	4651      	mov	r1, sl
   14b42:	4638      	mov	r0, r7
   14b44:	f7eb ff2e 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   14b48:	f110 0f0b 	cmn.w	r0, #11
   14b4c:	d10b      	bne.n	14b66 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   14b4e:	9400      	str	r4, [sp, #0]
   14b50:	ab03      	add	r3, sp, #12
   14b52:	aa02      	add	r2, sp, #8
   14b54:	4651      	mov	r1, sl
   14b56:	4638      	mov	r0, r7
   14b58:	f7eb ff24 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   14b5c:	f110 0f0b 	cmn.w	r0, #11
   14b60:	bf08      	it	eq
   14b62:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   14b66:	7963      	ldrb	r3, [r4, #5]
   14b68:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   14b6a:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   14b6c:	f362 0303 	bfi	r3, r2, #0, #4
   14b70:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   14b72:	6863      	ldr	r3, [r4, #4]
   14b74:	9a03      	ldr	r2, [sp, #12]
   14b76:	f362 331f 	bfi	r3, r2, #12, #20
   14b7a:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   14b7c:	b1b0      	cbz	r0, 14bac <k_mem_pool_alloc+0xa4>
   14b7e:	b1ad      	cbz	r5, 14bac <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   14b80:	f110 0f0c 	cmn.w	r0, #12
   14b84:	d112      	bne.n	14bac <k_mem_pool_alloc+0xa4>
   14b86:	f04f 0320 	mov.w	r3, #32
   14b8a:	f3ef 8011 	mrs	r0, BASEPRI
   14b8e:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   14b92:	462a      	mov	r2, r5
   14b94:	4659      	mov	r1, fp
   14b96:	f000 faeb 	bl	15170 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   14b9a:	1c6b      	adds	r3, r5, #1
   14b9c:	d0cd      	beq.n	14b3a <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   14b9e:	f000 fbd3 	bl	15348 <_tick_get>

			if (timeout < 0) {
   14ba2:	ebb8 0500 	subs.w	r5, r8, r0
   14ba6:	d5c8      	bpl.n	14b3a <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   14ba8:	f06f 000a 	mvn.w	r0, #10
}
   14bac:	b005      	add	sp, #20
   14bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   14bb2:	f04f 0800 	mov.w	r8, #0
   14bb6:	e7b8      	b.n	14b2a <k_mem_pool_alloc+0x22>
   14bb8:	20003f2c 	.word	0x20003f2c
   14bbc:	b6db6db7 	.word	0xb6db6db7

00014bc0 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   14bc0:	b570      	push	{r4, r5, r6, lr}
   14bc2:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   14bc4:	6802      	ldr	r2, [r0, #0]
   14bc6:	7841      	ldrb	r1, [r0, #1]
   14bc8:	4e13      	ldr	r6, [pc, #76]	; (14c18 <k_mem_pool_free_id+0x58>)
   14bca:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14bce:	00a4      	lsls	r4, r4, #2
   14bd0:	0b12      	lsrs	r2, r2, #12
   14bd2:	f001 010f 	and.w	r1, r1, #15
   14bd6:	1930      	adds	r0, r6, r4
   14bd8:	f7eb ff96 	bl	b08 <_sys_mem_pool_block_free>
   14bdc:	f04f 0320 	mov.w	r3, #32
   14be0:	f3ef 8511 	mrs	r5, BASEPRI
   14be4:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   14be8:	f104 0014 	add.w	r0, r4, #20
   14bec:	4430      	add	r0, r6
   14bee:	f000 fb05 	bl	151fc <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   14bf2:	b140      	cbz	r0, 14c06 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14bf4:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   14bf8:	2b0d      	cmp	r3, #13
   14bfa:	d804      	bhi.n	14c06 <k_mem_pool_free_id+0x46>
   14bfc:	b133      	cbz	r3, 14c0c <k_mem_pool_free_id+0x4c>
   14bfe:	4b07      	ldr	r3, [pc, #28]	; (14c1c <k_mem_pool_free_id+0x5c>)
   14c00:	685b      	ldr	r3, [r3, #4]
   14c02:	051b      	lsls	r3, r3, #20
   14c04:	d402      	bmi.n	14c0c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14c06:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   14c0a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   14c0c:	4628      	mov	r0, r5
}
   14c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   14c12:	f000 b9a7 	b.w	14f64 <_reschedule>
   14c16:	bf00      	nop
   14c18:	20003f2c 	.word	0x20003f2c
   14c1c:	e000ed00 	.word	0xe000ed00

00014c20 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   14c20:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   14c22:	1d0a      	adds	r2, r1, #4
   14c24:	d204      	bcs.n	14c30 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   14c26:	2300      	movs	r3, #0
   14c28:	4669      	mov	r1, sp
   14c2a:	f7ff ff6d 	bl	14b08 <k_mem_pool_alloc>
   14c2e:	b118      	cbz	r0, 14c38 <k_mem_pool_malloc+0x18>
		return NULL;
   14c30:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   14c32:	b003      	add	sp, #12
   14c34:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   14c38:	2204      	movs	r2, #4
   14c3a:	eb0d 0102 	add.w	r1, sp, r2
   14c3e:	9800      	ldr	r0, [sp, #0]
   14c40:	f7ec ffdc 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   14c44:	9800      	ldr	r0, [sp, #0]
   14c46:	3004      	adds	r0, #4
   14c48:	e7f3      	b.n	14c32 <k_mem_pool_malloc+0x12>

00014c4a <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   14c4a:	b110      	cbz	r0, 14c52 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   14c4c:	3804      	subs	r0, #4
   14c4e:	f7ff bfb7 	b.w	14bc0 <k_mem_pool_free_id>
   14c52:	4770      	bx	lr

00014c54 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   14c54:	4b03      	ldr	r3, [pc, #12]	; (14c64 <z_thread_malloc+0x10>)
   14c56:	689b      	ldr	r3, [r3, #8]
{
   14c58:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   14c5a:	6e58      	ldr	r0, [r3, #100]	; 0x64
   14c5c:	b108      	cbz	r0, 14c62 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   14c5e:	f7ff bfdf 	b.w	14c20 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   14c62:	4770      	bx	lr
   14c64:	20001970 	.word	0x20001970

00014c68 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   14c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c6a:	4605      	mov	r5, r0
   14c6c:	460f      	mov	r7, r1
   14c6e:	4614      	mov	r4, r2
	__asm__ volatile(
   14c70:	f04f 0220 	mov.w	r2, #32
   14c74:	f3ef 8611 	mrs	r6, BASEPRI
   14c78:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   14c7c:	b1a3      	cbz	r3, 14ca8 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   14c7e:	2008      	movs	r0, #8
   14c80:	f7ff ffe8 	bl	14c54 <z_thread_malloc>
		if (!anode) {
   14c84:	2800      	cmp	r0, #0
   14c86:	d034      	beq.n	14cf2 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   14c88:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   14c8a:	6044      	str	r4, [r0, #4]
   14c8c:	6003      	str	r3, [r0, #0]
   14c8e:	4604      	mov	r4, r0
   14c90:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   14c92:	b95f      	cbnz	r7, 14cac <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   14c94:	682a      	ldr	r2, [r5, #0]
   14c96:	f003 0303 	and.w	r3, r3, #3
   14c9a:	4313      	orrs	r3, r2
   14c9c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   14c9e:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   14ca0:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   14ca2:	b973      	cbnz	r3, 14cc2 <queue_insert+0x5a>
	list->tail = node;
   14ca4:	606c      	str	r4, [r5, #4]
   14ca6:	e00c      	b.n	14cc2 <queue_insert+0x5a>
	node->next_and_flags = flags;
   14ca8:	6023      	str	r3, [r4, #0]
   14caa:	e7f1      	b.n	14c90 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14cac:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   14cae:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   14cb2:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   14cb6:	d114      	bne.n	14ce2 <queue_insert+0x7a>
   14cb8:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14cba:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   14cbc:	b95a      	cbnz	r2, 14cd6 <queue_insert+0x6e>
	list->tail = node;
   14cbe:	606c      	str	r4, [r5, #4]
	list->head = node;
   14cc0:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   14cc2:	2104      	movs	r1, #4
   14cc4:	f105 0008 	add.w	r0, r5, #8
   14cc8:	f000 ffb4 	bl	15c34 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   14ccc:	4630      	mov	r0, r6
   14cce:	f000 f949 	bl	14f64 <_reschedule>
	return 0;
   14cd2:	2000      	movs	r0, #0
   14cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14cd6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14cd8:	f003 0303 	and.w	r3, r3, #3
   14cdc:	4323      	orrs	r3, r4
   14cde:	6013      	str	r3, [r2, #0]
   14ce0:	e7e0      	b.n	14ca4 <queue_insert+0x3c>
   14ce2:	4313      	orrs	r3, r2
   14ce4:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14ce6:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14ce8:	f002 0203 	and.w	r2, r2, #3
   14cec:	4314      	orrs	r4, r2
   14cee:	603c      	str	r4, [r7, #0]
   14cf0:	e7e7      	b.n	14cc2 <queue_insert+0x5a>
			return -ENOMEM;
   14cf2:	f06f 000b 	mvn.w	r0, #11
}
   14cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014cf8 <z_queue_node_peek>:
{
   14cf8:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   14cfa:	4604      	mov	r4, r0
   14cfc:	b130      	cbz	r0, 14d0c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14cfe:	6802      	ldr	r2, [r0, #0]
   14d00:	0793      	lsls	r3, r2, #30
   14d02:	d003      	beq.n	14d0c <z_queue_node_peek+0x14>
		ret = anode->data;
   14d04:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   14d06:	b109      	cbz	r1, 14d0c <z_queue_node_peek+0x14>
			k_free(anode);
   14d08:	f7ff ff9f 	bl	14c4a <k_free>
}
   14d0c:	4620      	mov	r0, r4
   14d0e:	bd10      	pop	{r4, pc}

00014d10 <_impl_k_queue_init>:
	list->head = NULL;
   14d10:	2300      	movs	r3, #0
   14d12:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   14d14:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   14d16:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   14d1a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   14d1c:	60c3      	str	r3, [r0, #12]
   14d1e:	4770      	bx	lr

00014d20 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   14d20:	460a      	mov	r2, r1
   14d22:	2300      	movs	r3, #0
   14d24:	6841      	ldr	r1, [r0, #4]
   14d26:	f7ff bf9f 	b.w	14c68 <queue_insert>

00014d2a <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   14d2a:	2300      	movs	r3, #0
   14d2c:	460a      	mov	r2, r1
   14d2e:	4619      	mov	r1, r3
   14d30:	f7ff bf9a 	b.w	14c68 <queue_insert>

00014d34 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   14d34:	b538      	push	{r3, r4, r5, lr}
   14d36:	f04f 0320 	mov.w	r3, #32
   14d3a:	f3ef 8511 	mrs	r5, BASEPRI
   14d3e:	f383 8811 	msr	BASEPRI, r3
   14d42:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   14d44:	b953      	cbnz	r3, 14d5c <k_queue_append_list+0x28>
	list->head = node;
   14d46:	6001      	str	r1, [r0, #0]
	list->tail = node;
   14d48:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   14d4a:	2104      	movs	r1, #4
   14d4c:	3008      	adds	r0, #8
   14d4e:	f000 ff71 	bl	15c34 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   14d52:	4628      	mov	r0, r5
}
   14d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   14d58:	f000 b904 	b.w	14f64 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14d5c:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14d5e:	f004 0403 	and.w	r4, r4, #3
   14d62:	4321      	orrs	r1, r4
   14d64:	6019      	str	r1, [r3, #0]
   14d66:	e7ef      	b.n	14d48 <k_queue_append_list+0x14>

00014d68 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   14d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d6c:	4604      	mov	r4, r0
   14d6e:	b086      	sub	sp, #24
   14d70:	460d      	mov	r5, r1
   14d72:	f04f 0320 	mov.w	r3, #32
   14d76:	f3ef 8711 	mrs	r7, BASEPRI
   14d7a:	f383 8811 	msr	BASEPRI, r3
   14d7e:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   14d80:	b182      	cbz	r2, 14da4 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14d82:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14d84:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14d86:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14d8a:	428a      	cmp	r2, r1
	list->head = node;
   14d8c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   14d8e:	bf08      	it	eq
   14d90:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14d92:	2101      	movs	r1, #1
   14d94:	4610      	mov	r0, r2
   14d96:	f7ff ffaf 	bl	14cf8 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14d9a:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   14d9e:	b006      	add	sp, #24
   14da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   14da4:	b919      	cbnz	r1, 14dae <_impl_k_queue_get+0x46>
   14da6:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   14daa:	2000      	movs	r0, #0
   14dac:	e7f7      	b.n	14d9e <_impl_k_queue_get+0x36>
   14dae:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   14db2:	2104      	movs	r1, #4
   14db4:	4603      	mov	r3, r0
   14db6:	eb0d 0001 	add.w	r0, sp, r1
   14dba:	f000 fea4 	bl	15b06 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   14dbe:	1c6a      	adds	r2, r5, #1
   14dc0:	d002      	beq.n	14dc8 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14dc2:	f000 fab7 	bl	15334 <_impl_k_uptime_get_32>
   14dc6:	4606      	mov	r6, r0
{
   14dc8:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   14dca:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   14dce:	1bea      	subs	r2, r5, r7
   14dd0:	f36f 1307 	bfc	r3, #4, #4
   14dd4:	2101      	movs	r1, #1
   14dd6:	a801      	add	r0, sp, #4
   14dd8:	f88d 3011 	strb.w	r3, [sp, #17]
   14ddc:	f000 fea6 	bl	15b2c <_impl_k_poll>
		if (err && err != -EAGAIN) {
   14de0:	b108      	cbz	r0, 14de6 <_impl_k_queue_get+0x7e>
   14de2:	300b      	adds	r0, #11
   14de4:	d1e1      	bne.n	14daa <_impl_k_queue_get+0x42>
	__asm__ volatile(
   14de6:	f04f 0320 	mov.w	r3, #32
   14dea:	f3ef 8811 	mrs	r8, BASEPRI
   14dee:	f383 8811 	msr	BASEPRI, r3
   14df2:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   14df4:	b138      	cbz	r0, 14e06 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14df6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14df8:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14dfa:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14dfe:	4290      	cmp	r0, r2
	list->head = node;
   14e00:	6023      	str	r3, [r4, #0]
	list->tail = node;
   14e02:	bf08      	it	eq
   14e04:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   14e06:	2101      	movs	r1, #1
   14e08:	f7ff ff76 	bl	14cf8 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14e0c:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   14e10:	2800      	cmp	r0, #0
   14e12:	d1c4      	bne.n	14d9e <_impl_k_queue_get+0x36>
   14e14:	1c6b      	adds	r3, r5, #1
   14e16:	d0d8      	beq.n	14dca <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14e18:	f000 fa8c 	bl	15334 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   14e1c:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   14e1e:	42bd      	cmp	r5, r7
   14e20:	dad3      	bge.n	14dca <_impl_k_queue_get+0x62>
   14e22:	e7c2      	b.n	14daa <_impl_k_queue_get+0x42>

00014e24 <sys_dlist_remove>:
	node->prev->next = node->next;
   14e24:	e890 000c 	ldmia.w	r0, {r2, r3}
   14e28:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14e2a:	6802      	ldr	r2, [r0, #0]
   14e2c:	6053      	str	r3, [r2, #4]
   14e2e:	4770      	bx	lr

00014e30 <_abort_timeout>:
{
   14e30:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14e32:	6900      	ldr	r0, [r0, #16]
{
   14e34:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14e36:	1c43      	adds	r3, r0, #1
   14e38:	d00e      	beq.n	14e58 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14e3a:	4b08      	ldr	r3, [pc, #32]	; (14e5c <_abort_timeout+0x2c>)
   14e3c:	699b      	ldr	r3, [r3, #24]
   14e3e:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   14e40:	bf1f      	itttt	ne
   14e42:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14e44:	6913      	ldrne	r3, [r2, #16]
   14e46:	18c0      	addne	r0, r0, r3
   14e48:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   14e4a:	4608      	mov	r0, r1
   14e4c:	f7ff ffea 	bl	14e24 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   14e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e54:	610b      	str	r3, [r1, #16]
	return 0;
   14e56:	2000      	movs	r0, #0
}
   14e58:	bd08      	pop	{r3, pc}
   14e5a:	bf00      	nop
   14e5c:	20001970 	.word	0x20001970

00014e60 <k_spin_lock.isra.11>:
	__asm__ volatile(
   14e60:	f04f 0320 	mov.w	r3, #32
   14e64:	f3ef 8011 	mrs	r0, BASEPRI
   14e68:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   14e6c:	4770      	bx	lr
	...

00014e70 <update_cache>:
	return list->head == list;
   14e70:	4b0d      	ldr	r3, [pc, #52]	; (14ea8 <update_cache+0x38>)
   14e72:	4619      	mov	r1, r3
   14e74:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e78:	428a      	cmp	r2, r1
   14e7a:	d000      	beq.n	14e7e <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   14e7c:	b902      	cbnz	r2, 14e80 <update_cache+0x10>
   14e7e:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   14e80:	b970      	cbnz	r0, 14ea0 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   14e82:	6899      	ldr	r1, [r3, #8]
   14e84:	b161      	cbz	r1, 14ea0 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   14e86:	7a48      	ldrb	r0, [r1, #9]
   14e88:	06c0      	lsls	r0, r0, #27
   14e8a:	d109      	bne.n	14ea0 <update_cache+0x30>
   14e8c:	6a48      	ldr	r0, [r1, #36]	; 0x24
   14e8e:	3001      	adds	r0, #1
   14e90:	d106      	bne.n	14ea0 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   14e92:	8948      	ldrh	r0, [r1, #10]
   14e94:	287f      	cmp	r0, #127	; 0x7f
   14e96:	d903      	bls.n	14ea0 <update_cache+0x30>
	return thread == _idle_thread;
   14e98:	4804      	ldr	r0, [pc, #16]	; (14eac <update_cache+0x3c>)
	if (_is_idle(_current)) {
   14e9a:	6800      	ldr	r0, [r0, #0]
   14e9c:	4281      	cmp	r1, r0
   14e9e:	d101      	bne.n	14ea4 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   14ea0:	621a      	str	r2, [r3, #32]
   14ea2:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   14ea4:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   14ea6:	4770      	bx	lr
   14ea8:	20001970 	.word	0x20001970
   14eac:	0001a9c4 	.word	0x0001a9c4

00014eb0 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   14eb0:	f990 000a 	ldrsb.w	r0, [r0, #10]
   14eb4:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   14eb8:	4298      	cmp	r0, r3
   14eba:	bfac      	ite	ge
   14ebc:	2000      	movge	r0, #0
   14ebe:	2001      	movlt	r0, #1
   14ec0:	4770      	bx	lr
	...

00014ec4 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   14ec4:	b510      	push	{r4, lr}
   14ec6:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14ec8:	f7ff ffca 	bl	14e60 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   14ecc:	7a4b      	ldrb	r3, [r1, #9]
   14ece:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   14ed0:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   14ed2:	d50d      	bpl.n	14ef0 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   14ed4:	4608      	mov	r0, r1
   14ed6:	f7ff ffa5 	bl	14e24 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   14eda:	7a4b      	ldrb	r3, [r1, #9]
   14edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14ee0:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   14ee2:	4b05      	ldr	r3, [pc, #20]	; (14ef8 <_remove_thread_from_ready_q+0x34>)
   14ee4:	6898      	ldr	r0, [r3, #8]
   14ee6:	1a43      	subs	r3, r0, r1
   14ee8:	4258      	negs	r0, r3
   14eea:	4158      	adcs	r0, r3
   14eec:	f7ff ffc0 	bl	14e70 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14ef0:	f384 8811 	msr	BASEPRI, r4
   14ef4:	bd10      	pop	{r4, pc}
   14ef6:	bf00      	nop
   14ef8:	20001970 	.word	0x20001970

00014efc <_find_first_thread_to_unpend>:
{
   14efc:	b508      	push	{r3, lr}
   14efe:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   14f00:	f7ff ffae 	bl	14e60 <k_spin_lock.isra.11>
	return list->head == list;
   14f04:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f06:	429a      	cmp	r2, r3
   14f08:	bf08      	it	eq
   14f0a:	2300      	moveq	r3, #0
   14f0c:	f380 8811 	msr	BASEPRI, r0
}
   14f10:	4618      	mov	r0, r3
   14f12:	bd08      	pop	{r3, pc}

00014f14 <_unpend_thread_no_timeout>:
{
   14f14:	b510      	push	{r4, lr}
   14f16:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14f18:	f7ff ffa2 	bl	14e60 <k_spin_lock.isra.11>
   14f1c:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   14f1e:	4608      	mov	r0, r1
   14f20:	f7ff ff80 	bl	14e24 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14f24:	7a4b      	ldrb	r3, [r1, #9]
   14f26:	f023 0302 	bic.w	r3, r3, #2
   14f2a:	724b      	strb	r3, [r1, #9]
   14f2c:	f384 8811 	msr	BASEPRI, r4
   14f30:	bd10      	pop	{r4, pc}

00014f32 <_unpend_first_thread>:
{
   14f32:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   14f34:	2100      	movs	r1, #0
   14f36:	f7ff ffe1 	bl	14efc <_find_first_thread_to_unpend>

	if (thread) {
   14f3a:	4604      	mov	r4, r0
   14f3c:	b128      	cbz	r0, 14f4a <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   14f3e:	f7ff ffe9 	bl	14f14 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   14f42:	f104 0014 	add.w	r0, r4, #20
   14f46:	f7ff ff73 	bl	14e30 <_abort_timeout>
}
   14f4a:	4620      	mov	r0, r4
   14f4c:	bd10      	pop	{r4, pc}

00014f4e <_unpend_thread>:
{
   14f4e:	b510      	push	{r4, lr}
   14f50:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   14f52:	f7ff ffdf 	bl	14f14 <_unpend_thread_no_timeout>
   14f56:	f104 0014 	add.w	r0, r4, #20
}
   14f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14f5e:	f7ff bf67 	b.w	14e30 <_abort_timeout>
	...

00014f64 <_reschedule>:
   14f64:	f3ef 8305 	mrs	r3, IPSR
   14f68:	2b0d      	cmp	r3, #13
   14f6a:	d809      	bhi.n	14f80 <_reschedule+0x1c>
   14f6c:	b11b      	cbz	r3, 14f76 <_reschedule+0x12>
   14f6e:	4b09      	ldr	r3, [pc, #36]	; (14f94 <_reschedule+0x30>)
   14f70:	685b      	ldr	r3, [r3, #4]
   14f72:	051b      	lsls	r3, r3, #20
   14f74:	d504      	bpl.n	14f80 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   14f76:	4b08      	ldr	r3, [pc, #32]	; (14f98 <_reschedule+0x34>)
   14f78:	689a      	ldr	r2, [r3, #8]
   14f7a:	6a1b      	ldr	r3, [r3, #32]
   14f7c:	429a      	cmp	r2, r3
   14f7e:	d103      	bne.n	14f88 <_reschedule+0x24>
   14f80:	f380 8811 	msr	BASEPRI, r0
}
   14f84:	2000      	movs	r0, #0
   14f86:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14f88:	4b04      	ldr	r3, [pc, #16]	; (14f9c <_reschedule+0x38>)
   14f8a:	2200      	movs	r2, #0
   14f8c:	601a      	str	r2, [r3, #0]
   14f8e:	f7ec babb 	b.w	1508 <__swap>
   14f92:	bf00      	nop
   14f94:	e000ed00 	.word	0xe000ed00
   14f98:	20001970 	.word	0x20001970
   14f9c:	200019a4 	.word	0x200019a4

00014fa0 <k_sched_unlock>:
{
   14fa0:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   14fa2:	f7ff ff5d 	bl	14e60 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   14fa6:	4b0a      	ldr	r3, [pc, #40]	; (14fd0 <k_sched_unlock+0x30>)
   14fa8:	689a      	ldr	r2, [r3, #8]
   14faa:	7ad3      	ldrb	r3, [r2, #11]
   14fac:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   14fae:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   14fb0:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   14fb2:	2001      	movs	r0, #1
   14fb4:	f7ff ff5c 	bl	14e70 <update_cache>
   14fb8:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   14fbc:	f04f 0320 	mov.w	r3, #32
   14fc0:	f3ef 8011 	mrs	r0, BASEPRI
   14fc4:	f383 8811 	msr	BASEPRI, r3
}
   14fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   14fcc:	f7ff bfca 	b.w	14f64 <_reschedule>
   14fd0:	20001970 	.word	0x20001970

00014fd4 <_priq_dumb_add>:
{
   14fd4:	b510      	push	{r4, lr}
	return list->head == list;
   14fd6:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14fd8:	4298      	cmp	r0, r3
   14fda:	bf08      	it	eq
   14fdc:	2300      	moveq	r3, #0
   14fde:	b193      	cbz	r3, 15006 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   14fe0:	f991 400a 	ldrsb.w	r4, [r1, #10]
   14fe4:	f993 200a 	ldrsb.w	r2, [r3, #10]
   14fe8:	4294      	cmp	r4, r2
   14fea:	da06      	bge.n	14ffa <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   14fec:	685a      	ldr	r2, [r3, #4]
   14fee:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14ff0:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14ff2:	685a      	ldr	r2, [r3, #4]
   14ff4:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14ff6:	6059      	str	r1, [r3, #4]
   14ff8:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   14ffa:	6842      	ldr	r2, [r0, #4]
   14ffc:	4293      	cmp	r3, r2
   14ffe:	d002      	beq.n	15006 <_priq_dumb_add+0x32>
   15000:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15002:	2b00      	cmp	r3, #0
   15004:	d1eb      	bne.n	14fde <_priq_dumb_add+0xa>
	node->next = list;
   15006:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   15008:	6843      	ldr	r3, [r0, #4]
   1500a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1500c:	6843      	ldr	r3, [r0, #4]
   1500e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   15010:	6041      	str	r1, [r0, #4]
   15012:	bd10      	pop	{r4, pc}

00015014 <_add_thread_to_ready_q>:
{
   15014:	b538      	push	{r3, r4, r5, lr}
   15016:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   15018:	f7ff ff22 	bl	14e60 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1501c:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   1501e:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   15020:	4806      	ldr	r0, [pc, #24]	; (1503c <_add_thread_to_ready_q+0x28>)
   15022:	f7ff ffd7 	bl	14fd4 <_priq_dumb_add>
	thread->base.thread_state |= states;
   15026:	7a63      	ldrb	r3, [r4, #9]
   15028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1502c:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1502e:	2000      	movs	r0, #0
   15030:	f7ff ff1e 	bl	14e70 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15034:	f385 8811 	msr	BASEPRI, r5
   15038:	bd38      	pop	{r3, r4, r5, pc}
   1503a:	bf00      	nop
   1503c:	20001994 	.word	0x20001994

00015040 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   15040:	7a42      	ldrb	r2, [r0, #9]
   15042:	06d2      	lsls	r2, r2, #27
   15044:	d104      	bne.n	15050 <_ready_thread+0x10>
   15046:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15048:	3301      	adds	r3, #1
   1504a:	d101      	bne.n	15050 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   1504c:	f7ff bfe2 	b.w	15014 <_add_thread_to_ready_q>
   15050:	4770      	bx	lr
	...

00015054 <_add_timeout>:
{
   15054:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   15056:	610b      	str	r3, [r1, #16]
{
   15058:	4604      	mov	r4, r0
   1505a:	461d      	mov	r5, r3
	timeout->thread = thread;
   1505c:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1505e:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   15060:	bb03      	cbnz	r3, 150a4 <_add_timeout+0x50>
	__asm__ volatile(
   15062:	f04f 0320 	mov.w	r3, #32
   15066:	f3ef 8611 	mrs	r6, BASEPRI
   1506a:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1506e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15072:	610b      	str	r3, [r1, #16]
	if (thread) {
   15074:	b170      	cbz	r0, 15094 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   15076:	68cb      	ldr	r3, [r1, #12]
   15078:	b113      	cbz	r3, 15080 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   1507a:	f7ff ff4b 	bl	14f14 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1507e:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15080:	7a63      	ldrb	r3, [r4, #9]
   15082:	f023 0304 	bic.w	r3, r3, #4
   15086:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   15088:	4620      	mov	r0, r4
   1508a:	f7ff ffd9 	bl	15040 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1508e:	f386 8811 	msr	BASEPRI, r6
   15092:	bd70      	pop	{r4, r5, r6, pc}
   15094:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   15098:	694b      	ldr	r3, [r1, #20]
   1509a:	b32b      	cbz	r3, 150e8 <_add_timeout+0x94>
			timeout->func(timeout);
   1509c:	4608      	mov	r0, r1
}
   1509e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   150a2:	4718      	bx	r3
	return list->head == list;
   150a4:	4a11      	ldr	r2, [pc, #68]	; (150ec <_add_timeout+0x98>)
   150a6:	4610      	mov	r0, r2
   150a8:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   150ac:	4283      	cmp	r3, r0
   150ae:	d10c      	bne.n	150ca <_add_timeout+0x76>
	node->next = list;
   150b0:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   150b2:	6993      	ldr	r3, [r2, #24]
   150b4:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   150b6:	6993      	ldr	r3, [r2, #24]
   150b8:	6019      	str	r1, [r3, #0]
	list->tail = node;
   150ba:	6191      	str	r1, [r2, #24]
   150bc:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   150be:	1b64      	subs	r4, r4, r5
   150c0:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   150c2:	6994      	ldr	r4, [r2, #24]
   150c4:	42a3      	cmp	r3, r4
   150c6:	d0f3      	beq.n	150b0 <_add_timeout+0x5c>
   150c8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   150ca:	2b00      	cmp	r3, #0
   150cc:	d0f0      	beq.n	150b0 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   150ce:	690c      	ldr	r4, [r1, #16]
   150d0:	691d      	ldr	r5, [r3, #16]
   150d2:	42ac      	cmp	r4, r5
   150d4:	dcf3      	bgt.n	150be <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   150d6:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   150d8:	1b2c      	subs	r4, r5, r4
   150da:	611c      	str	r4, [r3, #16]
   150dc:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   150de:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   150e0:	685a      	ldr	r2, [r3, #4]
   150e2:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   150e4:	6059      	str	r1, [r3, #4]
   150e6:	bd70      	pop	{r4, r5, r6, pc}
   150e8:	bd70      	pop	{r4, r5, r6, pc}
   150ea:	bf00      	nop
   150ec:	20001970 	.word	0x20001970

000150f0 <_move_thread_to_end_of_prio_q>:
{
   150f0:	b538      	push	{r3, r4, r5, lr}
   150f2:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   150f4:	f7ff feb4 	bl	14e60 <k_spin_lock.isra.11>
   150f8:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   150fa:	4620      	mov	r0, r4
   150fc:	f7ff fe92 	bl	14e24 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   15100:	4621      	mov	r1, r4
   15102:	4806      	ldr	r0, [pc, #24]	; (1511c <_move_thread_to_end_of_prio_q+0x2c>)
   15104:	f7ff ff66 	bl	14fd4 <_priq_dumb_add>
	thread->base.thread_state |= states;
   15108:	7a63      	ldrb	r3, [r4, #9]
   1510a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1510e:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   15110:	2000      	movs	r0, #0
   15112:	f7ff fead 	bl	14e70 <update_cache>
   15116:	f385 8811 	msr	BASEPRI, r5
   1511a:	bd38      	pop	{r3, r4, r5, pc}
   1511c:	20001994 	.word	0x20001994

00015120 <pend>:
{
   15120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15122:	4605      	mov	r5, r0
   15124:	4614      	mov	r4, r2
   15126:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   15128:	f7ff fecc 	bl	14ec4 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1512c:	7a6b      	ldrb	r3, [r5, #9]
   1512e:	f043 0302 	orr.w	r3, r3, #2
   15132:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   15134:	1c63      	adds	r3, r4, #1
   15136:	d012      	beq.n	1515e <pend+0x3e>
	__asm__ volatile(
   15138:	f04f 0320 	mov.w	r3, #32
   1513c:	f3ef 8711 	mrs	r7, BASEPRI
   15140:	f383 8811 	msr	BASEPRI, r3
   15144:	230a      	movs	r3, #10
   15146:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   15148:	4632      	mov	r2, r6
   1514a:	fbb4 f3f3 	udiv	r3, r4, r3
   1514e:	f105 0114 	add.w	r1, r5, #20
   15152:	3301      	adds	r3, #1
   15154:	4628      	mov	r0, r5
   15156:	f7ff ff7d 	bl	15054 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1515a:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   1515e:	b12e      	cbz	r6, 1516c <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   15160:	4629      	mov	r1, r5
   15162:	4630      	mov	r0, r6
}
   15164:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   15168:	f7ff bf34 	b.w	14fd4 <_priq_dumb_add>
   1516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00015170 <_pend_current_thread>:
{
   15170:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   15172:	4b06      	ldr	r3, [pc, #24]	; (1518c <_pend_current_thread+0x1c>)
{
   15174:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   15176:	6898      	ldr	r0, [r3, #8]
   15178:	f7ff ffd2 	bl	15120 <pend>
	_time_slice_elapsed = 0;
   1517c:	4b04      	ldr	r3, [pc, #16]	; (15190 <_pend_current_thread+0x20>)
   1517e:	2200      	movs	r2, #0
   15180:	4620      	mov	r0, r4
}
   15182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   15186:	601a      	str	r2, [r3, #0]
   15188:	f7ec b9be 	b.w	1508 <__swap>
   1518c:	20001970 	.word	0x20001970
   15190:	200019a4 	.word	0x200019a4

00015194 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   15194:	4b13      	ldr	r3, [pc, #76]	; (151e4 <_is_thread_time_slicing+0x50>)
   15196:	681b      	ldr	r3, [r3, #0]
   15198:	2b00      	cmp	r3, #0
{
   1519a:	b510      	push	{r4, lr}
   1519c:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   1519e:	dd1f      	ble.n	151e0 <_is_thread_time_slicing+0x4c>
   151a0:	8943      	ldrh	r3, [r0, #10]
   151a2:	2b7f      	cmp	r3, #127	; 0x7f
   151a4:	d81c      	bhi.n	151e0 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   151a6:	4b10      	ldr	r3, [pc, #64]	; (151e8 <_is_thread_time_slicing+0x54>)
   151a8:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   151ac:	681b      	ldr	r3, [r3, #0]
   151ae:	4299      	cmp	r1, r3
   151b0:	db16      	blt.n	151e0 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   151b2:	f7ff fe55 	bl	14e60 <k_spin_lock.isra.11>
	return list->head == list;
   151b6:	490d      	ldr	r1, [pc, #52]	; (151ec <_is_thread_time_slicing+0x58>)
   151b8:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   151bc:	428b      	cmp	r3, r1
   151be:	4604      	mov	r4, r0
   151c0:	d00a      	beq.n	151d8 <_is_thread_time_slicing+0x44>
		if (next) {
   151c2:	b15b      	cbz	r3, 151dc <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   151c4:	f992 000a 	ldrsb.w	r0, [r2, #10]
   151c8:	f993 300a 	ldrsb.w	r3, [r3, #10]
   151cc:	1ac3      	subs	r3, r0, r3
   151ce:	4258      	negs	r0, r3
   151d0:	4158      	adcs	r0, r3
   151d2:	f384 8811 	msr	BASEPRI, r4
	return ret;
   151d6:	bd10      	pop	{r4, pc}
   151d8:	2000      	movs	r0, #0
   151da:	e7fa      	b.n	151d2 <_is_thread_time_slicing+0x3e>
   151dc:	4618      	mov	r0, r3
   151de:	e7f8      	b.n	151d2 <_is_thread_time_slicing+0x3e>
		return 0;
   151e0:	2000      	movs	r0, #0
}
   151e2:	bd10      	pop	{r4, pc}
   151e4:	20001850 	.word	0x20001850
   151e8:	20001854 	.word	0x20001854
   151ec:	20001970 	.word	0x20001970

000151f0 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   151f0:	4b01      	ldr	r3, [pc, #4]	; (151f8 <_update_time_slice_before_swap+0x8>)
   151f2:	2200      	movs	r2, #0
   151f4:	601a      	str	r2, [r3, #0]
   151f6:	4770      	bx	lr
   151f8:	200019a4 	.word	0x200019a4

000151fc <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   151fc:	b538      	push	{r3, r4, r5, lr}
   151fe:	4605      	mov	r5, r0
	int need_sched = 0;
   15200:	2000      	movs	r0, #0
	return list->head == list;
   15202:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15204:	42a5      	cmp	r5, r4
   15206:	d000      	beq.n	1520a <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   15208:	b904      	cbnz	r4, 1520c <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   1520a:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   1520c:	4620      	mov	r0, r4
   1520e:	f7ff fe9e 	bl	14f4e <_unpend_thread>
		_ready_thread(th);
   15212:	4620      	mov	r0, r4
   15214:	f7ff ff14 	bl	15040 <_ready_thread>
		need_sched = 1;
   15218:	2001      	movs	r0, #1
   1521a:	e7f2      	b.n	15202 <_unpend_all+0x6>

0001521c <_sched_init>:
	list->head = (sys_dnode_t *)list;
   1521c:	4b02      	ldr	r3, [pc, #8]	; (15228 <_sched_init+0xc>)
   1521e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   15222:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   15224:	629a      	str	r2, [r3, #40]	; 0x28
   15226:	4770      	bx	lr
   15228:	20001970 	.word	0x20001970

0001522c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   1522c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   1522e:	4c14      	ldr	r4, [pc, #80]	; (15280 <_impl_k_yield+0x54>)
   15230:	4b14      	ldr	r3, [pc, #80]	; (15284 <_impl_k_yield+0x58>)
   15232:	68a2      	ldr	r2, [r4, #8]
   15234:	681b      	ldr	r3, [r3, #0]
   15236:	429a      	cmp	r2, r3
   15238:	d00f      	beq.n	1525a <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   1523a:	f7ff fe11 	bl	14e60 <k_spin_lock.isra.11>
   1523e:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   15240:	68a0      	ldr	r0, [r4, #8]
   15242:	f7ff fdef 	bl	14e24 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   15246:	68a1      	ldr	r1, [r4, #8]
   15248:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1524c:	f7ff fec2 	bl	14fd4 <_priq_dumb_add>
			update_cache(1);
   15250:	2001      	movs	r0, #1
   15252:	f7ff fe0d 	bl	14e70 <update_cache>
   15256:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   1525a:	6a22      	ldr	r2, [r4, #32]
   1525c:	68a3      	ldr	r3, [r4, #8]
   1525e:	429a      	cmp	r2, r3
   15260:	d00c      	beq.n	1527c <_impl_k_yield+0x50>
	__asm__ volatile(
   15262:	f04f 0320 	mov.w	r3, #32
   15266:	f3ef 8011 	mrs	r0, BASEPRI
   1526a:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   1526e:	4b06      	ldr	r3, [pc, #24]	; (15288 <_impl_k_yield+0x5c>)
   15270:	2200      	movs	r2, #0
   15272:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   15274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15278:	f7ec b946 	b.w	1508 <__swap>
   1527c:	bd38      	pop	{r3, r4, r5, pc}
   1527e:	bf00      	nop
   15280:	20001970 	.word	0x20001970
   15284:	0001a9c4 	.word	0x0001a9c4
   15288:	200019a4 	.word	0x200019a4

0001528c <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   1528c:	4b01      	ldr	r3, [pc, #4]	; (15294 <_impl_k_current_get+0x8>)
   1528e:	6898      	ldr	r0, [r3, #8]
   15290:	4770      	bx	lr
   15292:	bf00      	nop
   15294:	20001970 	.word	0x20001970

00015298 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   15298:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   1529c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1529e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   152a0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   152a2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   152a4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   152a6:	6143      	str	r3, [r0, #20]
   152a8:	4770      	bx	lr

000152aa <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   152aa:	b570      	push	{r4, r5, r6, lr}
   152ac:	4604      	mov	r4, r0
   152ae:	f04f 0320 	mov.w	r3, #32
   152b2:	f3ef 8611 	mrs	r6, BASEPRI
   152b6:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   152ba:	f7ff fe3a 	bl	14f32 <_unpend_first_thread>
	if (thread) {
   152be:	4605      	mov	r5, r0
   152c0:	b160      	cbz	r0, 152dc <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   152c2:	7a43      	ldrb	r3, [r0, #9]
   152c4:	06db      	lsls	r3, r3, #27
   152c6:	d102      	bne.n	152ce <_impl_k_sem_give+0x24>
   152c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   152ca:	3301      	adds	r3, #1
   152cc:	d012      	beq.n	152f4 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   152ce:	2300      	movs	r3, #0
   152d0:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   152d2:	4630      	mov	r0, r6
}
   152d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   152d8:	f7ff be44 	b.w	14f64 <_reschedule>
	sem->count += (sem->count != sem->limit);
   152dc:	68a3      	ldr	r3, [r4, #8]
   152de:	68e2      	ldr	r2, [r4, #12]
   152e0:	429a      	cmp	r2, r3
   152e2:	bf18      	it	ne
   152e4:	3301      	addne	r3, #1
   152e6:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   152e8:	2102      	movs	r1, #2
   152ea:	f104 0010 	add.w	r0, r4, #16
   152ee:	f000 fca1 	bl	15c34 <_handle_obj_poll_events>
   152f2:	e7ee      	b.n	152d2 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   152f4:	f7ff fe8e 	bl	15014 <_add_thread_to_ready_q>
   152f8:	e7e9      	b.n	152ce <_impl_k_sem_give+0x24>

000152fa <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   152fa:	b410      	push	{r4}
   152fc:	460a      	mov	r2, r1
   152fe:	4604      	mov	r4, r0
   15300:	f04f 0320 	mov.w	r3, #32
   15304:	f3ef 8011 	mrs	r0, BASEPRI
   15308:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1530c:	68a3      	ldr	r3, [r4, #8]
   1530e:	b133      	cbz	r3, 1531e <_impl_k_sem_take+0x24>
		sem->count--;
   15310:	3b01      	subs	r3, #1
   15312:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15314:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   15318:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   1531a:	bc10      	pop	{r4}
   1531c:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1531e:	b921      	cbnz	r1, 1532a <_impl_k_sem_take+0x30>
   15320:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   15324:	f06f 000f 	mvn.w	r0, #15
   15328:	e7f7      	b.n	1531a <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   1532a:	4621      	mov	r1, r4
}
   1532c:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   1532e:	f7ff bf1f 	b.w	15170 <_pend_current_thread>
	...

00015334 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   15334:	4b03      	ldr	r3, [pc, #12]	; (15344 <_impl_k_uptime_get_32+0x10>)
   15336:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   1533a:	230a      	movs	r3, #10
   1533c:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   15340:	4770      	bx	lr
   15342:	bf00      	nop
   15344:	200019a8 	.word	0x200019a8

00015348 <_tick_get>:
	__asm__ volatile(
   15348:	f04f 0220 	mov.w	r2, #32
   1534c:	f3ef 8311 	mrs	r3, BASEPRI
   15350:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   15354:	4a02      	ldr	r2, [pc, #8]	; (15360 <_tick_get+0x18>)
   15356:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1535a:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   1535e:	4770      	bx	lr
   15360:	200019a8 	.word	0x200019a8

00015364 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   15364:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   15366:	f7ff ffef 	bl	15348 <_tick_get>
   1536a:	240a      	movs	r4, #10
   1536c:	fba0 2304 	umull	r2, r3, r0, r4
   15370:	fb04 3301 	mla	r3, r4, r1, r3
}
   15374:	4610      	mov	r0, r2
   15376:	4619      	mov	r1, r3
   15378:	bd10      	pop	{r4, pc}
	...

0001537c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   1537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15380:	4607      	mov	r7, r0
   15382:	b085      	sub	sp, #20
	__asm__ volatile(
   15384:	f04f 0320 	mov.w	r3, #32
   15388:	f3ef 8011 	mrs	r0, BASEPRI
   1538c:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   15390:	4961      	ldr	r1, [pc, #388]	; (15518 <_nano_sys_clock_tick_announce+0x19c>)
   15392:	e9d1 4500 	ldrd	r4, r5, [r1]
   15396:	19e2      	adds	r2, r4, r7
   15398:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   1539c:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   153a0:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   153a4:	ae02      	add	r6, sp, #8
   153a6:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   153a8:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   153aa:	f04f 0320 	mov.w	r3, #32
   153ae:	f3ef 8011 	mrs	r0, BASEPRI
   153b2:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   153b6:	4c59      	ldr	r4, [pc, #356]	; (1551c <_nano_sys_clock_tick_announce+0x1a0>)
   153b8:	4621      	mov	r1, r4
   153ba:	4602      	mov	r2, r0
   153bc:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   153c0:	428b      	cmp	r3, r1
   153c2:	d000      	beq.n	153c6 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   153c4:	b9fb      	cbnz	r3, 15406 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   153c6:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   153ca:	68a0      	ldr	r0, [r4, #8]
   153cc:	f7ff fee2 	bl	15194 <_is_thread_time_slicing>
   153d0:	b1b0      	cbz	r0, 15400 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   153d2:	4a53      	ldr	r2, [pc, #332]	; (15520 <_nano_sys_clock_tick_announce+0x1a4>)
   153d4:	6811      	ldr	r1, [r2, #0]
   153d6:	230a      	movs	r3, #10
   153d8:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   153dc:	4b51      	ldr	r3, [pc, #324]	; (15524 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   153de:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   153e0:	681b      	ldr	r3, [r3, #0]
   153e2:	429f      	cmp	r7, r3
   153e4:	db0c      	blt.n	15400 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   153e6:	2300      	movs	r3, #0
   153e8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   153ea:	f04f 0320 	mov.w	r3, #32
   153ee:	f3ef 8511 	mrs	r5, BASEPRI
   153f2:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   153f6:	68a0      	ldr	r0, [r4, #8]
   153f8:	f7ff fe7a 	bl	150f0 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   153fc:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   15400:	b005      	add	sp, #20
   15402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   15406:	4d48      	ldr	r5, [pc, #288]	; (15528 <_nano_sys_clock_tick_announce+0x1ac>)
   15408:	9501      	str	r5, [sp, #4]
   1540a:	2101      	movs	r1, #1
   1540c:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   1540e:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   15412:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   15414:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   15418:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   1541a:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   1541c:	bfaa      	itet	ge
   1541e:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   15422:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   15426:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   1542a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1542c:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   1542e:	691d      	ldr	r5, [r3, #16]
   15430:	4298      	cmp	r0, r3
   15432:	bf14      	ite	ne
   15434:	6818      	ldrne	r0, [r3, #0]
   15436:	2000      	moveq	r0, #0
   15438:	b9d5      	cbnz	r5, 15470 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   1543a:	e893 0220 	ldmia.w	r3, {r5, r9}
   1543e:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   15442:	681d      	ldr	r5, [r3, #0]
   15444:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   15448:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   1544a:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   1544e:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   15450:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   15452:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   15454:	f8c3 c010 	str.w	ip, [r3, #16]
   15458:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   1545c:	f04f 0320 	mov.w	r3, #32
   15460:	f3ef 8211 	mrs	r2, BASEPRI
   15464:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   15468:	4603      	mov	r3, r0
   1546a:	2800      	cmp	r0, #0
   1546c:	d1d4      	bne.n	15418 <_nano_sys_clock_tick_announce+0x9c>
   1546e:	e001      	b.n	15474 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   15470:	2900      	cmp	r1, #0
   15472:	dcf1      	bgt.n	15458 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15474:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   15478:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1547a:	42b0      	cmp	r0, r6
   1547c:	d103      	bne.n	15486 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   1547e:	9a01      	ldr	r2, [sp, #4]
   15480:	2300      	movs	r3, #0
   15482:	6013      	str	r3, [r2, #0]
   15484:	e7a1      	b.n	153ca <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   15486:	2800      	cmp	r0, #0
   15488:	d0f9      	beq.n	1547e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1548a:	9b03      	ldr	r3, [sp, #12]
   1548c:	4298      	cmp	r0, r3
   1548e:	d102      	bne.n	15496 <_nano_sys_clock_tick_announce+0x11a>
   15490:	f04f 0b00 	mov.w	fp, #0
   15494:	e001      	b.n	1549a <_nano_sys_clock_tick_announce+0x11e>
   15496:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1549a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   1549e:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   154a2:	e890 000c 	ldmia.w	r0, {r2, r3}
   154a6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   154a8:	6802      	ldr	r2, [r0, #0]
   154aa:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   154ac:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   154ae:	f04f 0320 	mov.w	r3, #32
   154b2:	f3ef 8811 	mrs	r8, BASEPRI
   154b6:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   154ba:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   154be:	b1d6      	cbz	r6, 154f6 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   154c0:	68c3      	ldr	r3, [r0, #12]
   154c2:	b123      	cbz	r3, 154ce <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   154c4:	4630      	mov	r0, r6
   154c6:	f7ff fd25 	bl	14f14 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   154ca:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   154ce:	7a73      	ldrb	r3, [r6, #9]
   154d0:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   154d4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   154d8:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   154da:	d102      	bne.n	154e2 <_nano_sys_clock_tick_announce+0x166>
   154dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
   154de:	3301      	adds	r3, #1
   154e0:	d015      	beq.n	1550e <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   154e2:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   154e6:	f1bb 0f00 	cmp.w	fp, #0
   154ea:	d0c8      	beq.n	1547e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   154ec:	9b03      	ldr	r3, [sp, #12]
   154ee:	455b      	cmp	r3, fp
   154f0:	d108      	bne.n	15504 <_nano_sys_clock_tick_announce+0x188>
   154f2:	2300      	movs	r3, #0
   154f4:	e008      	b.n	15508 <_nano_sys_clock_tick_announce+0x18c>
   154f6:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   154fa:	6943      	ldr	r3, [r0, #20]
   154fc:	2b00      	cmp	r3, #0
   154fe:	d0f2      	beq.n	154e6 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   15500:	4798      	blx	r3
   15502:	e7f0      	b.n	154e6 <_nano_sys_clock_tick_announce+0x16a>
   15504:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   15508:	4658      	mov	r0, fp
   1550a:	469b      	mov	fp, r3
   1550c:	e7c9      	b.n	154a2 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   1550e:	4630      	mov	r0, r6
   15510:	f7ff fd80 	bl	15014 <_add_thread_to_ready_q>
   15514:	e7e5      	b.n	154e2 <_nano_sys_clock_tick_announce+0x166>
   15516:	bf00      	nop
   15518:	200019a8 	.word	0x200019a8
   1551c:	20001970 	.word	0x20001970
   15520:	200019a4 	.word	0x200019a4
   15524:	20001850 	.word	0x20001850
   15528:	200019a0 	.word	0x200019a0

0001552c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1552c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1552e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15536:	4903      	ldr	r1, [pc, #12]	; (15544 <k_sys_work_q_init+0x18>)
   15538:	4803      	ldr	r0, [pc, #12]	; (15548 <k_sys_work_q_init+0x1c>)
   1553a:	f000 f983 	bl	15844 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   1553e:	2000      	movs	r0, #0
   15540:	bd08      	pop	{r3, pc}
   15542:	bf00      	nop
   15544:	20003648 	.word	0x20003648
   15548:	200019b0 	.word	0x200019b0

0001554c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1554c:	6903      	ldr	r3, [r0, #16]
   1554e:	1c5a      	adds	r2, r3, #1
   15550:	d011      	beq.n	15576 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   15552:	4a0a      	ldr	r2, [pc, #40]	; (1557c <_abort_timeout+0x30>)
   15554:	6992      	ldr	r2, [r2, #24]
   15556:	4290      	cmp	r0, r2
   15558:	bf1f      	itttt	ne
   1555a:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1555c:	690a      	ldrne	r2, [r1, #16]
   1555e:	189b      	addne	r3, r3, r2
   15560:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   15562:	e890 000c 	ldmia.w	r0, {r2, r3}
   15566:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   15568:	6802      	ldr	r2, [r0, #0]
   1556a:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1556c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15570:	6103      	str	r3, [r0, #16]
	return 0;
   15572:	2000      	movs	r0, #0
   15574:	4770      	bx	lr
		return _INACTIVE;
   15576:	4618      	mov	r0, r3
}
   15578:	4770      	bx	lr
   1557a:	bf00      	nop
   1557c:	20001970 	.word	0x20001970

00015580 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   15580:	7a42      	ldrb	r2, [r0, #9]
   15582:	06d2      	lsls	r2, r2, #27
   15584:	d104      	bne.n	15590 <_ready_thread+0x10>
   15586:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15588:	3301      	adds	r3, #1
   1558a:	d101      	bne.n	15590 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   1558c:	f7ff bd42 	b.w	15014 <_add_thread_to_ready_q>
   15590:	4770      	bx	lr
	...

00015594 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   15594:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   15596:	f04f 0320 	mov.w	r3, #32
   1559a:	f3ef 8611 	mrs	r6, BASEPRI
   1559e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   155a2:	4a19      	ldr	r2, [pc, #100]	; (15608 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   155a4:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   155a6:	230a      	movs	r3, #10
   155a8:	3109      	adds	r1, #9
   155aa:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   155ae:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   155b0:	6241      	str	r1, [r0, #36]	; 0x24
   155b2:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   155b4:	2300      	movs	r3, #0
   155b6:	6203      	str	r3, [r0, #32]
   155b8:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   155bc:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   155be:	f100 0514 	add.w	r5, r0, #20
   155c2:	d108      	bne.n	155d6 <schedule_new_thread.part.11+0x42>
	node->next = list;
   155c4:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   155c6:	6993      	ldr	r3, [r2, #24]
   155c8:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   155ca:	6993      	ldr	r3, [r2, #24]
   155cc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   155ce:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   155d0:	f386 8811 	msr	BASEPRI, r6
   155d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   155d6:	2b00      	cmp	r3, #0
   155d8:	d0f4      	beq.n	155c4 <schedule_new_thread.part.11+0x30>
   155da:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   155de:	6a44      	ldr	r4, [r0, #36]	; 0x24
   155e0:	691f      	ldr	r7, [r3, #16]
   155e2:	42bc      	cmp	r4, r7
   155e4:	dc08      	bgt.n	155f8 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   155e6:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   155e8:	1b3c      	subs	r4, r7, r4
   155ea:	611c      	str	r4, [r3, #16]
   155ec:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   155ee:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   155f0:	685a      	ldr	r2, [r3, #4]
   155f2:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   155f4:	605d      	str	r5, [r3, #4]
   155f6:	e7eb      	b.n	155d0 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   155f8:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   155fa:	4573      	cmp	r3, lr
   155fc:	6244      	str	r4, [r0, #36]	; 0x24
   155fe:	d0e1      	beq.n	155c4 <schedule_new_thread.part.11+0x30>
   15600:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15602:	2b00      	cmp	r3, #0
   15604:	d1eb      	bne.n	155de <schedule_new_thread.part.11+0x4a>
   15606:	e7dd      	b.n	155c4 <schedule_new_thread.part.11+0x30>
   15608:	20001970 	.word	0x20001970

0001560c <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   1560c:	4770      	bx	lr
	...

00015610 <k_is_in_isr>:
   15610:	f3ef 8005 	mrs	r0, IPSR
   15614:	280d      	cmp	r0, #13
   15616:	d807      	bhi.n	15628 <k_is_in_isr+0x18>
   15618:	b138      	cbz	r0, 1562a <k_is_in_isr+0x1a>
   1561a:	4b04      	ldr	r3, [pc, #16]	; (1562c <k_is_in_isr+0x1c>)
   1561c:	6858      	ldr	r0, [r3, #4]
   1561e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   15622:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   15626:	4770      	bx	lr
   15628:	2001      	movs	r0, #1
}
   1562a:	4770      	bx	lr
   1562c:	e000ed00 	.word	0xe000ed00

00015630 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   15630:	4b02      	ldr	r3, [pc, #8]	; (1563c <_is_thread_essential+0xc>)
   15632:	689b      	ldr	r3, [r3, #8]
   15634:	7a18      	ldrb	r0, [r3, #8]
}
   15636:	f000 0001 	and.w	r0, r0, #1
   1563a:	4770      	bx	lr
   1563c:	20001970 	.word	0x20001970

00015640 <_impl_k_thread_start>:
{
   15640:	b510      	push	{r4, lr}
	__asm__ volatile(
   15642:	f04f 0320 	mov.w	r3, #32
   15646:	f3ef 8411 	mrs	r4, BASEPRI
   1564a:	f383 8811 	msr	BASEPRI, r3
   1564e:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   15650:	0759      	lsls	r1, r3, #29
   15652:	d402      	bmi.n	1565a <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15654:	f384 8811 	msr	BASEPRI, r4
   15658:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1565a:	f023 0304 	bic.w	r3, r3, #4
   1565e:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   15660:	f7ff ff8e 	bl	15580 <_ready_thread>
	_reschedule(key);
   15664:	4620      	mov	r0, r4
}
   15666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   1566a:	f7ff bc7b 	b.w	14f64 <_reschedule>
	...

00015670 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   15670:	b530      	push	{r4, r5, lr}
   15672:	b087      	sub	sp, #28
   15674:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15676:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15678:	9504      	str	r5, [sp, #16]
   1567a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1567c:	9503      	str	r5, [sp, #12]
   1567e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15680:	9502      	str	r5, [sp, #8]
   15682:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   15684:	9501      	str	r5, [sp, #4]
   15686:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   15688:	9500      	str	r5, [sp, #0]
   1568a:	f7ec f93f 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1568e:	4b04      	ldr	r3, [pc, #16]	; (156a0 <_setup_new_thread+0x30>)
   15690:	689b      	ldr	r3, [r3, #8]
   15692:	b913      	cbnz	r3, 1569a <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   15694:	6663      	str	r3, [r4, #100]	; 0x64
}
   15696:	b007      	add	sp, #28
   15698:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   1569a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1569c:	e7fa      	b.n	15694 <_setup_new_thread+0x24>
   1569e:	bf00      	nop
   156a0:	20001970 	.word	0x20001970

000156a4 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   156a4:	b570      	push	{r4, r5, r6, lr}
   156a6:	b086      	sub	sp, #24
   156a8:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   156aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   156ac:	9604      	str	r6, [sp, #16]
   156ae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   156b0:	9603      	str	r6, [sp, #12]
   156b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   156b4:	9602      	str	r6, [sp, #8]
   156b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   156b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   156ba:	9601      	str	r6, [sp, #4]
   156bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   156be:	9600      	str	r6, [sp, #0]
   156c0:	f7ff ffd6 	bl	15670 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   156c4:	1c6b      	adds	r3, r5, #1
   156c6:	d003      	beq.n	156d0 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   156c8:	b92d      	cbnz	r5, 156d6 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   156ca:	4620      	mov	r0, r4
   156cc:	f7ff ffb8 	bl	15640 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   156d0:	4620      	mov	r0, r4
   156d2:	b006      	add	sp, #24
   156d4:	bd70      	pop	{r4, r5, r6, pc}
   156d6:	4629      	mov	r1, r5
   156d8:	4620      	mov	r0, r4
   156da:	f7ff ff5b 	bl	15594 <schedule_new_thread.part.11>
   156de:	e7f7      	b.n	156d0 <_impl_k_thread_create+0x2c>

000156e0 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   156e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   156e2:	b510      	push	{r4, lr}
   156e4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   156e6:	b103      	cbz	r3, 156ea <_k_thread_single_abort+0xa>
		thread->fn_abort();
   156e8:	4798      	blx	r3
   156ea:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   156ec:	06da      	lsls	r2, r3, #27
   156ee:	d106      	bne.n	156fe <_k_thread_single_abort+0x1e>
   156f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   156f2:	3201      	adds	r2, #1
   156f4:	d103      	bne.n	156fe <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   156f6:	4620      	mov	r0, r4
   156f8:	f7ff fbe4 	bl	14ec4 <_remove_thread_from_ready_q>
   156fc:	e00b      	b.n	15716 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   156fe:	079b      	lsls	r3, r3, #30
   15700:	d502      	bpl.n	15708 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   15702:	4620      	mov	r0, r4
   15704:	f7ff fc06 	bl	14f14 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   15708:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1570a:	3301      	adds	r3, #1
   1570c:	d003      	beq.n	15716 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   1570e:	f104 0014 	add.w	r0, r4, #20
   15712:	f7ff ff1b 	bl	1554c <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   15716:	7a63      	ldrb	r3, [r4, #9]
   15718:	f043 0308 	orr.w	r3, r3, #8
   1571c:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   1571e:	bd10      	pop	{r4, pc}

00015720 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   15720:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   15722:	4f21      	ldr	r7, [pc, #132]	; (157a8 <_init_static_threads+0x88>)
   15724:	4d21      	ldr	r5, [pc, #132]	; (157ac <_init_static_threads+0x8c>)
{
   15726:	b087      	sub	sp, #28
   15728:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   1572a:	42bd      	cmp	r5, r7
   1572c:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   15730:	d314      	bcc.n	1575c <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   15732:	4b1f      	ldr	r3, [pc, #124]	; (157b0 <_init_static_threads+0x90>)
   15734:	689a      	ldr	r2, [r3, #8]
   15736:	7ad3      	ldrb	r3, [r2, #11]
   15738:	3b01      	subs	r3, #1
   1573a:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   1573c:	f04f 0320 	mov.w	r3, #32
   15740:	f3ef 8511 	mrs	r5, BASEPRI
   15744:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   15748:	4c18      	ldr	r4, [pc, #96]	; (157ac <_init_static_threads+0x8c>)
   1574a:	42b4      	cmp	r4, r6
   1574c:	d31f      	bcc.n	1578e <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1574e:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   15752:	b007      	add	sp, #28
   15754:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   15758:	f7ff bc22 	b.w	14fa0 <k_sched_unlock>
		_setup_new_thread(
   1575c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   15760:	9304      	str	r3, [sp, #16]
   15762:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15766:	9303      	str	r3, [sp, #12]
   15768:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1576c:	9302      	str	r3, [sp, #8]
   1576e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   15772:	9301      	str	r3, [sp, #4]
   15774:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15778:	9300      	str	r3, [sp, #0]
   1577a:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   1577e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   15780:	f7ff ff76 	bl	15670 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15784:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   15788:	651d      	str	r5, [r3, #80]	; 0x50
   1578a:	4625      	mov	r5, r4
   1578c:	e7cd      	b.n	1572a <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   1578e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15790:	1c4b      	adds	r3, r1, #1
   15792:	d003      	beq.n	1579c <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   15794:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   15796:	b919      	cbnz	r1, 157a0 <_init_static_threads+0x80>
   15798:	f7ff ff52 	bl	15640 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1579c:	342c      	adds	r4, #44	; 0x2c
   1579e:	e7d4      	b.n	1574a <_init_static_threads+0x2a>
   157a0:	f7ff fef8 	bl	15594 <schedule_new_thread.part.11>
   157a4:	e7fa      	b.n	1579c <_init_static_threads+0x7c>
   157a6:	bf00      	nop
   157a8:	20003f2c 	.word	0x20003f2c
   157ac:	20003f2c 	.word	0x20003f2c
   157b0:	20001970 	.word	0x20001970

000157b4 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   157b4:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   157b6:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   157b8:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   157ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   157be:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   157c0:	72c3      	strb	r3, [r0, #11]
   157c2:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   157c4:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   157c6:	61c3      	str	r3, [r0, #28]
	t->func = func;
   157c8:	6283      	str	r3, [r0, #40]	; 0x28
   157ca:	4770      	bx	lr

000157cc <k_work_submit_to_queue>:
{
   157cc:	b500      	push	{lr}
   157ce:	f101 0308 	add.w	r3, r1, #8
   157d2:	f3bf 8f5b 	dmb	ish
   157d6:	e853 2f00 	ldrex	r2, [r3]
   157da:	f042 0e01 	orr.w	lr, r2, #1
   157de:	e843 ec00 	strex	ip, lr, [r3]
   157e2:	f1bc 0f00 	cmp.w	ip, #0
   157e6:	d1f6      	bne.n	157d6 <k_work_submit_to_queue+0xa>
   157e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   157ec:	07d3      	lsls	r3, r2, #31
   157ee:	d403      	bmi.n	157f8 <k_work_submit_to_queue+0x2c>
}
   157f0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   157f4:	f7ff ba94 	b.w	14d20 <k_queue_append>
   157f8:	f85d fb04 	ldr.w	pc, [sp], #4

000157fc <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   157fc:	f1a0 010c 	sub.w	r1, r0, #12
   15800:	6980      	ldr	r0, [r0, #24]
   15802:	f7ff bfe3 	b.w	157cc <k_work_submit_to_queue>

00015806 <work_q_main>:
{
   15806:	b510      	push	{r4, lr}
   15808:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1580a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1580e:	4620      	mov	r0, r4
   15810:	f7ff faaa 	bl	14d68 <_impl_k_queue_get>
		if (!work) {
   15814:	4603      	mov	r3, r0
   15816:	2800      	cmp	r0, #0
   15818:	d0f7      	beq.n	1580a <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1581a:	3308      	adds	r3, #8
		handler = work->handler;
   1581c:	6842      	ldr	r2, [r0, #4]
   1581e:	f3bf 8f5b 	dmb	ish
   15822:	e853 1f00 	ldrex	r1, [r3]
   15826:	f021 0e01 	bic.w	lr, r1, #1
   1582a:	e843 ec00 	strex	ip, lr, [r3]
   1582e:	f1bc 0f00 	cmp.w	ip, #0
   15832:	d1f6      	bne.n	15822 <work_q_main+0x1c>
   15834:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   15838:	07cb      	lsls	r3, r1, #31
   1583a:	d500      	bpl.n	1583e <work_q_main+0x38>
			handler(work);
   1583c:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1583e:	f7ff fcf5 	bl	1522c <_impl_k_yield>
   15842:	e7e2      	b.n	1580a <work_q_main+0x4>

00015844 <k_work_q_start>:
{
   15844:	b5f0      	push	{r4, r5, r6, r7, lr}
   15846:	b087      	sub	sp, #28
   15848:	4604      	mov	r4, r0
   1584a:	461f      	mov	r7, r3
   1584c:	460d      	mov	r5, r1
   1584e:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   15850:	f7ff fa5e 	bl	14d10 <_impl_k_queue_init>

   15854:	2000      	movs	r0, #0
   15856:	9005      	str	r0, [sp, #20]
   15858:	9004      	str	r0, [sp, #16]
   1585a:	9002      	str	r0, [sp, #8]
   1585c:	9001      	str	r0, [sp, #4]
   1585e:	9703      	str	r7, [sp, #12]
   15860:	9400      	str	r4, [sp, #0]
   15862:	4b04      	ldr	r3, [pc, #16]	; (15874 <k_work_q_start+0x30>)
   15864:	4632      	mov	r2, r6
   15866:	4629      	mov	r1, r5
   15868:	f104 0010 	add.w	r0, r4, #16
   1586c:	f7ff ff1a 	bl	156a4 <_impl_k_thread_create>
}
   15870:	b007      	add	sp, #28
   15872:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15874:	00015807 	.word	0x00015807

00015878 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   15878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   1587c:	2300      	movs	r3, #0
   1587e:	61c2      	str	r2, [r0, #28]
	t->func = func;
   15880:	4a04      	ldr	r2, [pc, #16]	; (15894 <k_delayed_work_init+0x1c>)
   15882:	6003      	str	r3, [r0, #0]
   15884:	6041      	str	r1, [r0, #4]
   15886:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   15888:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   1588a:	6143      	str	r3, [r0, #20]
	t->func = func;
   1588c:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   1588e:	6243      	str	r3, [r0, #36]	; 0x24
   15890:	4770      	bx	lr
   15892:	bf00      	nop
   15894:	000157fd 	.word	0x000157fd

00015898 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   15898:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   1589a:	f04f 0320 	mov.w	r3, #32
   1589e:	f3ef 8411 	mrs	r4, BASEPRI
   158a2:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   158a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   158a8:	b923      	cbnz	r3, 158b4 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   158aa:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   158ae:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   158b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   158b4:	f3bf 8f5b 	dmb	ish
   158b8:	6883      	ldr	r3, [r0, #8]
   158ba:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   158be:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   158c0:	f100 0508 	add.w	r5, r0, #8
   158c4:	d533      	bpl.n	1592e <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   158c6:	6a42      	ldr	r2, [r0, #36]	; 0x24
   158c8:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   158ca:	2100      	movs	r1, #0
   158cc:	2b00      	cmp	r3, #0
   158ce:	d0ec      	beq.n	158aa <k_delayed_work_cancel+0x12>
   158d0:	4298      	cmp	r0, r3
   158d2:	d127      	bne.n	15924 <k_delayed_work_cancel+0x8c>
   158d4:	6803      	ldr	r3, [r0, #0]
   158d6:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   158d8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   158dc:	b9c9      	cbnz	r1, 15912 <k_delayed_work_cancel+0x7a>
   158de:	42b8      	cmp	r0, r7
	list->head = node;
   158e0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   158e2:	d100      	bne.n	158e6 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   158e4:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   158e6:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   158e8:	f003 0303 	and.w	r3, r3, #3
   158ec:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   158ee:	2300      	movs	r3, #0
   158f0:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   158f2:	f3bf 8f5b 	dmb	ish
   158f6:	e855 2f00 	ldrex	r2, [r5]
   158fa:	f022 0201 	bic.w	r2, r2, #1
   158fe:	e845 2100 	strex	r1, r2, [r5]
   15902:	2900      	cmp	r1, #0
   15904:	d1f7      	bne.n	158f6 <k_delayed_work_cancel+0x5e>
   15906:	f3bf 8f5b 	dmb	ish
   1590a:	f384 8811 	msr	BASEPRI, r4
	return 0;
   1590e:	4618      	mov	r0, r3
   15910:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15912:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   15914:	f006 0603 	and.w	r6, r6, #3
   15918:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   1591a:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   1591c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1591e:	bf08      	it	eq
   15920:	6051      	streq	r1, [r2, #4]
   15922:	e7e0      	b.n	158e6 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15924:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   15926:	4619      	mov	r1, r3
   15928:	f026 0303 	bic.w	r3, r6, #3
   1592c:	e7ce      	b.n	158cc <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1592e:	69c1      	ldr	r1, [r0, #28]
   15930:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   15932:	f100 020c 	add.w	r2, r0, #12
   15936:	d0da      	beq.n	158ee <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   15938:	4b08      	ldr	r3, [pc, #32]	; (1595c <k_delayed_work_cancel+0xc4>)
   1593a:	699b      	ldr	r3, [r3, #24]
   1593c:	429a      	cmp	r2, r3
   1593e:	bf1f      	itttt	ne
   15940:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   15942:	6913      	ldrne	r3, [r2, #16]
   15944:	185b      	addne	r3, r3, r1
   15946:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   15948:	6903      	ldr	r3, [r0, #16]
   1594a:	68c2      	ldr	r2, [r0, #12]
   1594c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1594e:	68c2      	ldr	r2, [r0, #12]
   15950:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   15952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15956:	61c3      	str	r3, [r0, #28]
   15958:	e7c9      	b.n	158ee <k_delayed_work_cancel+0x56>
   1595a:	bf00      	nop
   1595c:	20001970 	.word	0x20001970

00015960 <k_delayed_work_submit_to_queue>:
{
   15960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15962:	4607      	mov	r7, r0
   15964:	460c      	mov	r4, r1
   15966:	4615      	mov	r5, r2
	__asm__ volatile(
   15968:	f04f 0320 	mov.w	r3, #32
   1596c:	f3ef 8611 	mrs	r6, BASEPRI
   15970:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   15974:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   15976:	b123      	cbz	r3, 15982 <k_delayed_work_submit_to_queue+0x22>
   15978:	4283      	cmp	r3, r0
   1597a:	d00b      	beq.n	15994 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   1597c:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   15980:	e00d      	b.n	1599e <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   15982:	b138      	cbz	r0, 15994 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   15984:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   15986:	b96d      	cbnz	r5, 159a4 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   15988:	4621      	mov	r1, r4
   1598a:	4638      	mov	r0, r7
   1598c:	f7ff ff1e 	bl	157cc <k_work_submit_to_queue>
	err = 0;
   15990:	2000      	movs	r0, #0
   15992:	e004      	b.n	1599e <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   15994:	4620      	mov	r0, r4
   15996:	f7ff ff7f 	bl	15898 <k_delayed_work_cancel>
		if (err < 0) {
   1599a:	2800      	cmp	r0, #0
   1599c:	daf2      	bge.n	15984 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1599e:	f386 8811 	msr	BASEPRI, r6
}
   159a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   159a4:	220a      	movs	r2, #10
   159a6:	3509      	adds	r5, #9
   159a8:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   159ac:	4a16      	ldr	r2, [pc, #88]	; (15a08 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   159ae:	2300      	movs	r3, #0
   159b0:	4611      	mov	r1, r2
   159b2:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   159b4:	61a3      	str	r3, [r4, #24]
   159b6:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   159ba:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   159bc:	428b      	cmp	r3, r1
   159be:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   159c2:	61e5      	str	r5, [r4, #28]
   159c4:	d106      	bne.n	159d4 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   159c6:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   159c8:	6993      	ldr	r3, [r2, #24]
   159ca:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   159cc:	6993      	ldr	r3, [r2, #24]
   159ce:	601f      	str	r7, [r3, #0]
	list->tail = node;
   159d0:	6197      	str	r7, [r2, #24]
   159d2:	e7dd      	b.n	15990 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   159d4:	2b00      	cmp	r3, #0
   159d6:	d0f6      	beq.n	159c6 <k_delayed_work_submit_to_queue+0x66>
   159d8:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   159dc:	69e0      	ldr	r0, [r4, #28]
   159de:	691d      	ldr	r5, [r3, #16]
   159e0:	42a8      	cmp	r0, r5
   159e2:	dc08      	bgt.n	159f6 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   159e4:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   159e6:	1a28      	subs	r0, r5, r0
   159e8:	6118      	str	r0, [r3, #16]
   159ea:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   159ec:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   159ee:	685a      	ldr	r2, [r3, #4]
   159f0:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   159f2:	605f      	str	r7, [r3, #4]
   159f4:	e7cc      	b.n	15990 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   159f6:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   159f8:	4573      	cmp	r3, lr
   159fa:	61e0      	str	r0, [r4, #28]
   159fc:	d0e3      	beq.n	159c6 <k_delayed_work_submit_to_queue+0x66>
   159fe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15a00:	2b00      	cmp	r3, #0
   15a02:	d1eb      	bne.n	159dc <k_delayed_work_submit_to_queue+0x7c>
   15a04:	e7df      	b.n	159c6 <k_delayed_work_submit_to_queue+0x66>
   15a06:	bf00      	nop
   15a08:	20001970 	.word	0x20001970

00015a0c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   15a0c:	2314      	movs	r3, #20
   15a0e:	b530      	push	{r4, r5, lr}
   15a10:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   15a14:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   15a16:	2900      	cmp	r1, #0
   15a18:	da00      	bge.n	15a1c <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   15a1a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   15a1c:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   15a1e:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   15a20:	f003 030f 	and.w	r3, r3, #15
   15a24:	2b02      	cmp	r3, #2
   15a26:	d003      	beq.n	15a30 <clear_event_registrations+0x24>
   15a28:	2b04      	cmp	r3, #4
   15a2a:	d001      	beq.n	15a30 <clear_event_registrations+0x24>
   15a2c:	2b01      	cmp	r3, #1
   15a2e:	d104      	bne.n	15a3a <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   15a30:	6843      	ldr	r3, [r0, #4]
   15a32:	6805      	ldr	r5, [r0, #0]
   15a34:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   15a36:	6805      	ldr	r5, [r0, #0]
   15a38:	606b      	str	r3, [r5, #4]
   15a3a:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   15a3e:	f04f 0320 	mov.w	r3, #32
   15a42:	f3ef 8211 	mrs	r2, BASEPRI
   15a46:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   15a4a:	3901      	subs	r1, #1
   15a4c:	3814      	subs	r0, #20
   15a4e:	e7e2      	b.n	15a16 <clear_event_registrations+0xa>

00015a50 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   15a50:	6883      	ldr	r3, [r0, #8]
{
   15a52:	b570      	push	{r4, r5, r6, lr}
   15a54:	4605      	mov	r5, r0
   15a56:	460e      	mov	r6, r1
	if (!event->poller) {
   15a58:	b1d3      	cbz	r3, 15a90 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   15a5a:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   15a5c:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   15a5e:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   15a60:	7a63      	ldrb	r3, [r4, #9]
   15a62:	079a      	lsls	r2, r3, #30
   15a64:	d514      	bpl.n	15a90 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   15a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15a68:	3302      	adds	r3, #2
   15a6a:	d01a      	beq.n	15aa2 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   15a6c:	4620      	mov	r0, r4
   15a6e:	f7ff fa6e 	bl	14f4e <_unpend_thread>
	_set_thread_return_value(thread,
   15a72:	2e00      	cmp	r6, #0
   15a74:	bf0c      	ite	eq
   15a76:	f06f 0303 	mvneq.w	r3, #3
   15a7a:	2300      	movne	r3, #0
   15a7c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   15a7e:	7a63      	ldrb	r3, [r4, #9]
   15a80:	06db      	lsls	r3, r3, #27
   15a82:	d105      	bne.n	15a90 <signal_poll_event+0x40>
   15a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15a86:	3301      	adds	r3, #1
   15a88:	d102      	bne.n	15a90 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   15a8a:	4620      	mov	r0, r4
   15a8c:	f7ff fac2 	bl	15014 <_add_thread_to_ready_q>
	event->state |= state;
   15a90:	7b6b      	ldrb	r3, [r5, #13]
   15a92:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   15a96:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   15a9a:	2000      	movs	r0, #0
	event->state |= state;
   15a9c:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   15a9e:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   15aa0:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   15aa2:	f06f 000a 	mvn.w	r0, #10
}
   15aa6:	bd70      	pop	{r4, r5, r6, pc}

00015aa8 <add_event>:
{
   15aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15aaa:	6803      	ldr	r3, [r0, #0]
   15aac:	4298      	cmp	r0, r3
   15aae:	4604      	mov	r4, r0
   15ab0:	460e      	mov	r6, r1
   15ab2:	4617      	mov	r7, r2
   15ab4:	d106      	bne.n	15ac4 <add_event+0x1c>
	node->next = list;
   15ab6:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   15ab8:	6863      	ldr	r3, [r4, #4]
   15aba:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   15abc:	6863      	ldr	r3, [r4, #4]
   15abe:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15ac0:	6066      	str	r6, [r4, #4]
   15ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15ac4:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   15ac6:	2b00      	cmp	r3, #0
   15ac8:	d0f5      	beq.n	15ab6 <add_event+0xe>
   15aca:	689b      	ldr	r3, [r3, #8]
   15acc:	6811      	ldr	r1, [r2, #0]
   15ace:	6818      	ldr	r0, [r3, #0]
   15ad0:	f7ff f9ee 	bl	14eb0 <_is_t1_higher_prio_than_t2>
   15ad4:	2800      	cmp	r0, #0
   15ad6:	d1ee      	bne.n	15ab6 <add_event+0xe>
	return list->head == list;
   15ad8:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15ada:	42ac      	cmp	r4, r5
   15adc:	d0eb      	beq.n	15ab6 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   15ade:	2d00      	cmp	r5, #0
   15ae0:	d0e9      	beq.n	15ab6 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   15ae2:	68ab      	ldr	r3, [r5, #8]
   15ae4:	6838      	ldr	r0, [r7, #0]
   15ae6:	6819      	ldr	r1, [r3, #0]
   15ae8:	f7ff f9e2 	bl	14eb0 <_is_t1_higher_prio_than_t2>
   15aec:	b130      	cbz	r0, 15afc <add_event+0x54>
		node->prev = insert_point->prev;
   15aee:	686b      	ldr	r3, [r5, #4]
   15af0:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   15af2:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   15af4:	686b      	ldr	r3, [r5, #4]
   15af6:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   15af8:	606e      	str	r6, [r5, #4]
   15afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   15afc:	6863      	ldr	r3, [r4, #4]
   15afe:	429d      	cmp	r5, r3
   15b00:	d0d9      	beq.n	15ab6 <add_event+0xe>
   15b02:	682d      	ldr	r5, [r5, #0]
   15b04:	e7eb      	b.n	15ade <add_event+0x36>

00015b06 <k_poll_event_init>:
{
   15b06:	b530      	push	{r4, r5, lr}
	event->type = type;
   15b08:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   15b0a:	6103      	str	r3, [r0, #16]
	event->type = type;
   15b0c:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   15b10:	7b81      	ldrb	r1, [r0, #14]
   15b12:	f362 0100 	bfi	r1, r2, #0, #1
   15b16:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   15b18:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   15b1a:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   15b1c:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   15b20:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   15b24:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   15b26:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   15b28:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   15b2a:	bd30      	pop	{r4, r5, pc}

00015b2c <_impl_k_poll>:
{
   15b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15b30:	4b3f      	ldr	r3, [pc, #252]	; (15c30 <_impl_k_poll+0x104>)
{
   15b32:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15b34:	689b      	ldr	r3, [r3, #8]
   15b36:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   15b38:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15b3a:	2301      	movs	r3, #1
{
   15b3c:	4607      	mov	r7, r0
   15b3e:	468a      	mov	sl, r1
   15b40:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15b42:	9301      	str	r3, [sp, #4]
   15b44:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   15b46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   15b4a:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   15b4c:	4556      	cmp	r6, sl
   15b4e:	db10      	blt.n	15b72 <_impl_k_poll+0x46>
   15b50:	f04f 0320 	mov.w	r3, #32
   15b54:	f3ef 8611 	mrs	r6, BASEPRI
   15b58:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   15b5c:	9c01      	ldr	r4, [sp, #4]
   15b5e:	2c00      	cmp	r4, #0
   15b60:	d13f      	bne.n	15be2 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   15b62:	4632      	mov	r2, r6
   15b64:	4629      	mov	r1, r5
   15b66:	4638      	mov	r0, r7
   15b68:	f7ff ff50 	bl	15a0c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15b6c:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   15b70:	e040      	b.n	15bf4 <_impl_k_poll+0xc8>
	__asm__ volatile(
   15b72:	f04f 0320 	mov.w	r3, #32
   15b76:	f3ef 8b11 	mrs	fp, BASEPRI
   15b7a:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   15b7e:	7b62      	ldrb	r2, [r4, #13]
   15b80:	f002 030f 	and.w	r3, r2, #15
   15b84:	2b02      	cmp	r3, #2
   15b86:	d003      	beq.n	15b90 <_impl_k_poll+0x64>
   15b88:	2b04      	cmp	r3, #4
   15b8a:	d004      	beq.n	15b96 <_impl_k_poll+0x6a>
   15b8c:	2b01      	cmp	r3, #1
   15b8e:	d106      	bne.n	15b9e <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   15b90:	6921      	ldr	r1, [r4, #16]
   15b92:	6889      	ldr	r1, [r1, #8]
   15b94:	e001      	b.n	15b9a <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   15b96:	6921      	ldr	r1, [r4, #16]
   15b98:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   15b9a:	2900      	cmp	r1, #0
   15b9c:	d13d      	bne.n	15c1a <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   15b9e:	f1b8 0f00 	cmp.w	r8, #0
   15ba2:	d014      	beq.n	15bce <_impl_k_poll+0xa2>
   15ba4:	9a01      	ldr	r2, [sp, #4]
   15ba6:	b192      	cbz	r2, 15bce <_impl_k_poll+0xa2>
	switch (event->type) {
   15ba8:	2b02      	cmp	r3, #2
   15baa:	d007      	beq.n	15bbc <_impl_k_poll+0x90>
   15bac:	2b04      	cmp	r3, #4
   15bae:	d013      	beq.n	15bd8 <_impl_k_poll+0xac>
   15bb0:	2b01      	cmp	r3, #1
   15bb2:	d109      	bne.n	15bc8 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   15bb4:	466a      	mov	r2, sp
   15bb6:	4621      	mov	r1, r4
   15bb8:	6920      	ldr	r0, [r4, #16]
   15bba:	e003      	b.n	15bc4 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   15bbc:	6920      	ldr	r0, [r4, #16]
   15bbe:	466a      	mov	r2, sp
   15bc0:	4621      	mov	r1, r4
   15bc2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   15bc4:	f7ff ff70 	bl	15aa8 <add_event>
	event->poller = poller;
   15bc8:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   15bcc:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15bce:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   15bd2:	3601      	adds	r6, #1
   15bd4:	3414      	adds	r4, #20
   15bd6:	e7b9      	b.n	15b4c <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   15bd8:	6920      	ldr	r0, [r4, #16]
   15bda:	466a      	mov	r2, sp
   15bdc:	4621      	mov	r1, r4
   15bde:	3008      	adds	r0, #8
   15be0:	e7f0      	b.n	15bc4 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   15be2:	2300      	movs	r3, #0
   15be4:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   15be6:	f1b8 0f00 	cmp.w	r8, #0
   15bea:	d107      	bne.n	15bfc <_impl_k_poll+0xd0>
   15bec:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   15bf0:	f06f 040a 	mvn.w	r4, #10
}
   15bf4:	4620      	mov	r0, r4
   15bf6:	b005      	add	sp, #20
   15bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   15bfc:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   15bfe:	4642      	mov	r2, r8
   15c00:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   15c02:	9102      	str	r1, [sp, #8]
   15c04:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   15c06:	f7ff fab3 	bl	15170 <_pend_current_thread>
   15c0a:	4604      	mov	r4, r0
	__asm__ volatile(
   15c0c:	f04f 0320 	mov.w	r3, #32
   15c10:	f3ef 8611 	mrs	r6, BASEPRI
   15c14:	f383 8811 	msr	BASEPRI, r3
   15c18:	e7a3      	b.n	15b62 <_impl_k_poll+0x36>
	event->state |= state;
   15c1a:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   15c1e:	f363 1207 	bfi	r2, r3, #4, #4
   15c22:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   15c24:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   15c28:	f8cd 9004 	str.w	r9, [sp, #4]
   15c2c:	e7cf      	b.n	15bce <_impl_k_poll+0xa2>
   15c2e:	bf00      	nop
   15c30:	20001970 	.word	0x20001970

00015c34 <_handle_obj_poll_events>:
	return list->head == list;
   15c34:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   15c36:	4298      	cmp	r0, r3
   15c38:	d007      	beq.n	15c4a <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   15c3a:	e893 0005 	ldmia.w	r3, {r0, r2}
   15c3e:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   15c40:	6818      	ldr	r0, [r3, #0]
   15c42:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   15c44:	4618      	mov	r0, r3
   15c46:	f7ff bf03 	b.w	15a50 <signal_poll_event>
   15c4a:	4770      	bx	lr

00015c4c <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   15c4c:	b538      	push	{r3, r4, r5, lr}
   15c4e:	f04f 0320 	mov.w	r3, #32
   15c52:	f3ef 8511 	mrs	r5, BASEPRI
   15c56:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15c5a:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   15c5c:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   15c5e:	4298      	cmp	r0, r3
	signal->signaled = 1;
   15c60:	f04f 0101 	mov.w	r1, #1
   15c64:	6081      	str	r1, [r0, #8]
   15c66:	d00d      	beq.n	15c84 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   15c68:	e893 0005 	ldmia.w	r3, {r0, r2}
   15c6c:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   15c6e:	6818      	ldr	r0, [r3, #0]
   15c70:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15c72:	4618      	mov	r0, r3
   15c74:	f7ff feec 	bl	15a50 <signal_poll_event>
   15c78:	4604      	mov	r4, r0

	_reschedule(key);
   15c7a:	4628      	mov	r0, r5
   15c7c:	f7ff f972 	bl	14f64 <_reschedule>
	return rc;
}
   15c80:	4620      	mov	r0, r4
   15c82:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15c84:	f385 8811 	msr	BASEPRI, r5
		return 0;
   15c88:	2400      	movs	r4, #0
   15c8a:	e7f9      	b.n	15c80 <_impl_k_poll_signal+0x34>

00015c8c <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   15c8c:	4770      	bx	lr
