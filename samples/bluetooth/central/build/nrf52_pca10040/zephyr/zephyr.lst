
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002d10 	.word	0x20002d10

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 00011c7b 00001aa1 00001aa1     ....{...........
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 00013ca9 00000000 000018ed     .....<..........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 00011c41     ............A...
     13c:	00000000 000018ed 20003ee0 00013fad     .........>. .?..
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 00011c75 00000000 000018ed     ....u...........
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00015531 	.word	0x00015531
     5b0:	0001555a 	.word	0x0001555a
     5b4:	00015538 	.word	0x00015538
     5b8:	0001553f 	.word	0x0001553f
     5bc:	00015549 	.word	0x00015549
     5c0:	00015553 	.word	0x00015553

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 fbc4 	bl	4d58 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fc5d 	bl	4eb8 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	0001557d 	.word	0x0001557d
     604:	20000000 	.word	0x20000000
     608:	0001559b 	.word	0x0001559b

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 fb9d 	bl	4d58 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f004 f9da 	bl	49e8 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fdba 	bl	41c0 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	000155c6 	.word	0x000155c6
     664:	000154d4 	.word	0x000154d4
     668:	00000671 	.word	0x00000671
     66c:	000155e4 	.word	0x000155e4

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fde5 	bl	4264 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 fb57 	bl	4d5c <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	000155aa 	.word	0x000155aa
     6bc:	000154da 	.word	0x000154da

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 fd0c 	bl	40e0 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fe7c 	bl	43dc <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 fd64 	bl	41c0 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00015607 	.word	0x00015607
     70c:	00015627 	.word	0x00015627
     710:	20003a50 	.word	0x20003a50
     714:	000154e2 	.word	0x000154e2
     718:	00000671 	.word	0x00000671
     71c:	000155e4 	.word	0x000155e4
     720:	0001563e 	.word	0x0001563e

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a84 	.word	0x20003a84
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f014 f8c8 	bl	14a38 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a88 	.word	0x20003a88

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a88 	.word	0x20003a88

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f013 f847 	bl	14088 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	0001566c 	.word	0x0001566c

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f013 f80c 	bl	14088 <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	00015676 	.word	0x00015676
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f013 fbd7 	bl	14b28 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003ea0 	.word	0x20003ea0
    1394:	20000010 	.word	0x20000010
    1398:	20003e9c 	.word	0x20003e9c

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003ea0 	.word	0x20003ea0
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f012 fe36 	bl	14088 <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	00015698 	.word	0x00015698
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003ea0 	.word	0x20003ea0
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	200019b0 	.word	0x200019b0
    14c4:	20003ea0 	.word	0x20003ea0

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f013 fa62 	bl	1499c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	20001978 	.word	0x20001978
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	20001978 	.word	0x20001978
    1530:	00019a44 	.word	0x00019a44
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	20001978 	.word	0x20001978
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f013 fa48 	bl	14a38 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	000157f1 	.word	0x000157f1

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	0001583b 	.word	0x0001583b
    1630:	e000ed00 	.word	0xe000ed00
    1634:	00015852 	.word	0x00015852
    1638:	00015864 	.word	0x00015864
    163c:	00015878 	.word	0x00015878
    1640:	00015891 	.word	0x00015891
    1644:	000158a2 	.word	0x000158a2
    1648:	000158c2 	.word	0x000158c2

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	000158f2 	.word	0x000158f2
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	0001590b 	.word	0x0001590b
    16c8:	0001591f 	.word	0x0001591f
    16cc:	0001593a 	.word	0x0001593a
    16d0:	00015959 	.word	0x00015959
    16d4:	0001597f 	.word	0x0001597f
    16d8:	0001599a 	.word	0x0001599a

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	000156b8 	.word	0x000156b8
    175c:	e000ed00 	.word	0xe000ed00
    1760:	00015852 	.word	0x00015852
    1764:	00015864 	.word	0x00015864
    1768:	000156cf 	.word	0x000156cf
    176c:	00015891 	.word	0x00015891
    1770:	000156e9 	.word	0x000156e9
    1774:	00015705 	.word	0x00015705
    1778:	000158c2 	.word	0x000158c2

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	0001574c 	.word	0x0001574c
    1824:	00015764 	.word	0x00015764
    1828:	00015786 	.word	0x00015786
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	000157a6 	.word	0x000157a6
    183c:	0001571e 	.word	0x0001571e
    1840:	00015733 	.word	0x00015733
    1844:	000157dd 	.word	0x000157dd

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f012 fbe9 	bl	140d4 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	20001978 	.word	0x20001978

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f013 fb20 	bl	14f60 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f013 f840 	bl	14a38 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	000159c6 	.word	0x000159c6
    19e4:	00015a44 	.word	0x00015a44
    19e8:	000159ec 	.word	0x000159ec
    19ec:	00015a06 	.word	0x00015a06
    19f0:	00015a21 	.word	0x00015a21

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f013 f9db 	bl	14dbc <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f013 f9d8 	bl	14dbc <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f013 f9db 	bl	14ddc <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	00015a84 	.word	0x00015a84
    1a44:	00015a80 	.word	0x00015a80
    1a48:	00015a95 	.word	0x00015a95
    1a4c:	20001978 	.word	0x20001978
    1a50:	00015ab5 	.word	0x00015ab5

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f013 fa12 	bl	14e8c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f012 ff8f 	bl	1499c <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f012 be3d 	b.w	14710 <_reschedule>
    1a96:	bf00      	nop
    1a98:	20001978 	.word	0x20001978
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f012 fb10 	blne	140d4 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	20001978 	.word	0x20001978
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002e50 	.word	0x20002e50

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f012 fb0a 	bl	14134 <_bss_zero>
	_data_copy();
    1b20:	f012 fb12 	bl	14148 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f012 fb34 	bl	14190 <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003a64 	.word	0x20003a64
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>
	...

00001c9c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	f04f 0320 	mov.w	r3, #32
    1ca2:	f3ef 8511 	mrs	r5, BASEPRI
    1ca6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <bt_hex+0x60>)
    1cac:	4e14      	ldr	r6, [pc, #80]	; (1d00 <bt_hex+0x64>)
    1cae:	7823      	ldrb	r3, [r4, #0]
    1cb0:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cb4:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cb6:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cba:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cbc:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cbe:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cc2:	2940      	cmp	r1, #64	; 0x40
    1cc4:	bf28      	it	cs
    1cc6:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cc8:	4d0e      	ldr	r5, [pc, #56]	; (1d04 <bt_hex+0x68>)
    1cca:	3801      	subs	r0, #1
    1ccc:	4613      	mov	r3, r2
    1cce:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cd2:	42b3      	cmp	r3, r6
    1cd4:	d104      	bne.n	1ce0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cdc:	4610      	mov	r0, r2
    1cde:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	7844      	ldrb	r4, [r0, #1]
    1ce2:	0924      	lsrs	r4, r4, #4
    1ce4:	3302      	adds	r3, #2
    1ce6:	5d2c      	ldrb	r4, [r5, r4]
    1ce8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1cec:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1cf0:	f004 040f 	and.w	r4, r4, #15
    1cf4:	5d2c      	ldrb	r4, [r5, r4]
    1cf6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1cfa:	e7ea      	b.n	1cd2 <bt_hex+0x36>
    1cfc:	20000074 	.word	0x20000074
    1d00:	20000075 	.word	0x20000075
    1d04:	00015af8 	.word	0x00015af8

00001d08 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d08:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <bt_addr_str+0x40>)
    1d0c:	4c0f      	ldr	r4, [pc, #60]	; (1d4c <bt_addr_str+0x44>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d14:	3301      	adds	r3, #1
{
    1d16:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	7943      	ldrb	r3, [r0, #5]
    1d22:	9204      	str	r2, [sp, #16]
    1d24:	7842      	ldrb	r2, [r0, #1]
    1d26:	9203      	str	r2, [sp, #12]
    1d28:	7882      	ldrb	r2, [r0, #2]
    1d2a:	9202      	str	r2, [sp, #8]
    1d2c:	78c2      	ldrb	r2, [r0, #3]
    1d2e:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d34:	7902      	ldrb	r2, [r0, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	2112      	movs	r1, #18
    1d3a:	4a05      	ldr	r2, [pc, #20]	; (1d50 <bt_addr_str+0x48>)
    1d3c:	4620      	mov	r0, r4
    1d3e:	f7ff f933 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d42:	4620      	mov	r0, r4
    1d44:	b006      	add	sp, #24
    1d46:	bd10      	pop	{r4, pc}
    1d48:	20000072 	.word	0x20000072
    1d4c:	20000018 	.word	0x20000018
    1d50:	00015ada 	.word	0x00015ada

00001d54 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a1d      	ldr	r2, [pc, #116]	; (1dcc <bt_addr_le_str+0x78>)
    1d58:	491d      	ldr	r1, [pc, #116]	; (1dd0 <bt_addr_le_str+0x7c>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d60:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d62:	f003 0301 	and.w	r3, r3, #1
    1d66:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d68:	7803      	ldrb	r3, [r0, #0]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d6c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d70:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d72:	440e      	add	r6, r1
    1d74:	ad07      	add	r5, sp, #28
    1d76:	2b03      	cmp	r3, #3
    1d78:	d821      	bhi.n	1dbe <bt_addr_le_str+0x6a>
    1d7a:	e8df f003 	tbb	[pc, r3]
    1d7e:	1a02      	.short	0x1a02
    1d80:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff ff05 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d8a:	7862      	ldrb	r2, [r4, #1]
    1d8c:	9204      	str	r2, [sp, #16]
    1d8e:	78a2      	ldrb	r2, [r4, #2]
    1d90:	9203      	str	r2, [sp, #12]
    1d92:	78e2      	ldrb	r2, [r4, #3]
    1d94:	9202      	str	r2, [sp, #8]
    1d96:	7922      	ldrb	r2, [r4, #4]
    1d98:	9201      	str	r2, [sp, #4]
    1d9a:	7962      	ldrb	r2, [r4, #5]
    1d9c:	9200      	str	r2, [sp, #0]
    1d9e:	79a3      	ldrb	r3, [r4, #6]
    1da0:	9505      	str	r5, [sp, #20]
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <bt_addr_le_str+0x84>)
    1da4:	211b      	movs	r1, #27
    1da6:	4630      	mov	r0, r6
    1da8:	f7ff f8fe 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dac:	4630      	mov	r0, r6
    1dae:	b00a      	add	sp, #40	; 0x28
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1db2:	490a      	ldr	r1, [pc, #40]	; (1ddc <bt_addr_le_str+0x88>)
    1db4:	e7e6      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1db6:	490a      	ldr	r1, [pc, #40]	; (1de0 <bt_addr_le_str+0x8c>)
    1db8:	e7e4      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dba:	490a      	ldr	r1, [pc, #40]	; (1de4 <bt_addr_le_str+0x90>)
    1dbc:	e7e2      	b.n	1d84 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dbe:	4a0a      	ldr	r2, [pc, #40]	; (1de8 <bt_addr_le_str+0x94>)
    1dc0:	210a      	movs	r1, #10
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff f8f0 	bl	fa8 <snprintk>
    1dc8:	e7df      	b.n	1d8a <bt_addr_le_str+0x36>
    1dca:	bf00      	nop
    1dcc:	20000073 	.word	0x20000073
    1dd0:	2000003c 	.word	0x2000003c
    1dd4:	00015531 	.word	0x00015531
    1dd8:	0001555a 	.word	0x0001555a
    1ddc:	00015538 	.word	0x00015538
    1de0:	0001553f 	.word	0x0001553f
    1de4:	00015549 	.word	0x00015549
    1de8:	00015553 	.word	0x00015553

00001dec <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dec:	b530      	push	{r4, r5, lr}
    1dee:	b085      	sub	sp, #20
    1df0:	4604      	mov	r4, r0
    1df2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1df4:	4668      	mov	r0, sp
    1df6:	2203      	movs	r2, #3
    1df8:	f7ff ff00 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1dfc:	220d      	movs	r2, #13
    1dfe:	2100      	movs	r1, #0
    1e00:	f10d 0003 	add.w	r0, sp, #3
    1e04:	f7ff ff26 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e08:	4620      	mov	r0, r4
    1e0a:	466a      	mov	r2, sp
    1e0c:	4669      	mov	r1, sp
    1e0e:	f006 ff3f 	bl	8c90 <bt_encrypt_le>
	if (err) {
    1e12:	4604      	mov	r4, r0
    1e14:	b920      	cbnz	r0, 1e20 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e16:	2203      	movs	r2, #3
    1e18:	4669      	mov	r1, sp
    1e1a:	4628      	mov	r0, r5
    1e1c:	f7ff feee 	bl	1bfc <memcpy>

	return 0;
}
    1e20:	4620      	mov	r0, r4
    1e22:	b005      	add	sp, #20
    1e24:	bd30      	pop	{r4, r5, pc}

00001e26 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e26:	b513      	push	{r0, r1, r4, lr}
    1e28:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e2a:	aa01      	add	r2, sp, #4
    1e2c:	3103      	adds	r1, #3
    1e2e:	f7ff ffdd 	bl	1dec <ah>
	if (err) {
    1e32:	b948      	cbnz	r0, 1e48 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e34:	2203      	movs	r2, #3
    1e36:	a901      	add	r1, sp, #4
    1e38:	4620      	mov	r0, r4
    1e3a:	f7ff feca 	bl	1bd2 <memcmp>
    1e3e:	fab0 f080 	clz	r0, r0
    1e42:	0940      	lsrs	r0, r0, #5
}
    1e44:	b002      	add	sp, #8
    1e46:	bd10      	pop	{r4, pc}
		return false;
    1e48:	2000      	movs	r0, #0
    1e4a:	e7fb      	b.n	1e44 <bt_rpa_irk_matches+0x1e>

00001e4c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e4e:	1ccd      	adds	r5, r1, #3
{
    1e50:	4606      	mov	r6, r0
    1e52:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e54:	4628      	mov	r0, r5
    1e56:	2103      	movs	r1, #3
    1e58:	f006 fefe 	bl	8c58 <bt_rand>
	if (err) {
    1e5c:	b960      	cbnz	r0, 1e78 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e5e:	7963      	ldrb	r3, [r4, #5]
    1e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e68:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e6a:	4622      	mov	r2, r4
    1e6c:	4629      	mov	r1, r5
    1e6e:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e74:	f7ff bfba 	b.w	1dec <ah>
}
    1e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e7c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e7c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e7e:	7802      	ldrb	r2, [r0, #0]
    1e80:	2a01      	cmp	r2, #1
{
    1e82:	4604      	mov	r4, r0
    1e84:	460b      	mov	r3, r1
	switch (src->type) {
    1e86:	d017      	beq.n	1eb8 <uuid_to_uuid128+0x3c>
    1e88:	d303      	bcc.n	1e92 <uuid_to_uuid128+0x16>
    1e8a:	2a02      	cmp	r2, #2
    1e8c:	d02c      	beq.n	1ee8 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1e8e:	bcf0      	pop	{r4, r5, r6, r7}
    1e90:	4770      	bx	lr
		*dst = uuid128_base;
    1e92:	4a18      	ldr	r2, [pc, #96]	; (1ef4 <uuid_to_uuid128+0x78>)
    1e94:	460d      	mov	r5, r1
    1e96:	f102 0710 	add.w	r7, r2, #16
    1e9a:	6810      	ldr	r0, [r2, #0]
    1e9c:	6851      	ldr	r1, [r2, #4]
    1e9e:	462e      	mov	r6, r5
    1ea0:	c603      	stmia	r6!, {r0, r1}
    1ea2:	3208      	adds	r2, #8
    1ea4:	42ba      	cmp	r2, r7
    1ea6:	4635      	mov	r5, r6
    1ea8:	d1f7      	bne.n	1e9a <uuid_to_uuid128+0x1e>
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1eae:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1eb0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1eb2:	0a12      	lsrs	r2, r2, #8
    1eb4:	739a      	strb	r2, [r3, #14]
    1eb6:	e7ea      	b.n	1e8e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1eb8:	4a0e      	ldr	r2, [pc, #56]	; (1ef4 <uuid_to_uuid128+0x78>)
    1eba:	460d      	mov	r5, r1
    1ebc:	f102 0710 	add.w	r7, r2, #16
    1ec0:	6810      	ldr	r0, [r2, #0]
    1ec2:	6851      	ldr	r1, [r2, #4]
    1ec4:	462e      	mov	r6, r5
    1ec6:	c603      	stmia	r6!, {r0, r1}
    1ec8:	3208      	adds	r2, #8
    1eca:	42ba      	cmp	r2, r7
    1ecc:	4635      	mov	r5, r6
    1ece:	d1f7      	bne.n	1ec0 <uuid_to_uuid128+0x44>
    1ed0:	7812      	ldrb	r2, [r2, #0]
    1ed2:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ed4:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1ed6:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1edc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1ede:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ee0:	0a12      	lsrs	r2, r2, #8
    1ee2:	7399      	strb	r1, [r3, #14]
    1ee4:	741a      	strb	r2, [r3, #16]
    1ee6:	e7d2      	b.n	1e8e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1ee8:	4601      	mov	r1, r0
    1eea:	2211      	movs	r2, #17
    1eec:	4618      	mov	r0, r3
}
    1eee:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1ef0:	f7ff be84 	b.w	1bfc <memcpy>
    1ef4:	00015b26 	.word	0x00015b26

00001ef8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1efc:	7801      	ldrb	r1, [r0, #0]
    1efe:	7822      	ldrb	r2, [r4, #0]
    1f00:	428a      	cmp	r2, r1
{
    1f02:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f04:	d00e      	beq.n	1f24 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f06:	4669      	mov	r1, sp
    1f08:	f7ff ffb8 	bl	1e7c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f0c:	a905      	add	r1, sp, #20
    1f0e:	4620      	mov	r0, r4
    1f10:	f7ff ffb4 	bl	1e7c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f14:	2210      	movs	r2, #16
    1f16:	f10d 0115 	add.w	r1, sp, #21
    1f1a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f1e:	f7ff fe58 	bl	1bd2 <memcmp>
    1f22:	e00a      	b.n	1f3a <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f24:	2a01      	cmp	r2, #1
    1f26:	d00a      	beq.n	1f3e <bt_uuid_cmp+0x46>
    1f28:	d304      	bcc.n	1f34 <bt_uuid_cmp+0x3c>
    1f2a:	2a02      	cmp	r2, #2
    1f2c:	d00a      	beq.n	1f44 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f2e:	f06f 0015 	mvn.w	r0, #21
    1f32:	e002      	b.n	1f3a <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f34:	8840      	ldrh	r0, [r0, #2]
    1f36:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f38:	1ac0      	subs	r0, r0, r3
}
    1f3a:	b00a      	add	sp, #40	; 0x28
    1f3c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f3e:	6840      	ldr	r0, [r0, #4]
    1f40:	6863      	ldr	r3, [r4, #4]
    1f42:	e7f9      	b.n	1f38 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f44:	2210      	movs	r2, #16
    1f46:	1c61      	adds	r1, r4, #1
    1f48:	3001      	adds	r0, #1
    1f4a:	e7e8      	b.n	1f1e <bt_uuid_cmp+0x26>

00001f4c <bt_uuid_to_str>:

#if defined(CONFIG_BT_DEBUG)
void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
    1f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t tmp1, tmp5;
	u16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
    1f4e:	7805      	ldrb	r5, [r0, #0]
    1f50:	2d01      	cmp	r5, #1
{
    1f52:	b08b      	sub	sp, #44	; 0x2c
    1f54:	4604      	mov	r4, r0
    1f56:	460e      	mov	r6, r1
    1f58:	4617      	mov	r7, r2
	switch (uuid->type) {
    1f5a:	d00f      	beq.n	1f7c <bt_uuid_to_str+0x30>
    1f5c:	d306      	bcc.n	1f6c <bt_uuid_to_str+0x20>
    1f5e:	2d02      	cmp	r5, #2
    1f60:	d00e      	beq.n	1f80 <bt_uuid_to_str+0x34>

		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
			 tmp5, tmp4, tmp3, tmp2, tmp1, tmp0);
		break;
	default:
		memset(str, 0, len);
    1f62:	2100      	movs	r1, #0
    1f64:	4630      	mov	r0, r6
    1f66:	f7ff fe75 	bl	1c54 <memset>
    1f6a:	e005      	b.n	1f78 <bt_uuid_to_str+0x2c>
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
    1f6c:	8843      	ldrh	r3, [r0, #2]
		snprintk(str, len, "%04x", BT_UUID_32(uuid)->val);
    1f6e:	4a20      	ldr	r2, [pc, #128]	; (1ff0 <bt_uuid_to_str+0xa4>)
    1f70:	4639      	mov	r1, r7
    1f72:	4630      	mov	r0, r6
    1f74:	f7ff f818 	bl	fa8 <snprintk>
		return;
	}
}
    1f78:	b00b      	add	sp, #44	; 0x2c
    1f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(str, len, "%04x", BT_UUID_32(uuid)->val);
    1f7c:	6843      	ldr	r3, [r0, #4]
    1f7e:	e7f6      	b.n	1f6e <bt_uuid_to_str+0x22>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
    1f80:	462a      	mov	r2, r5
    1f82:	1c41      	adds	r1, r0, #1
    1f84:	a806      	add	r0, sp, #24
    1f86:	f7ff fe39 	bl	1bfc <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
    1f8a:	1ce1      	adds	r1, r4, #3
    1f8c:	2204      	movs	r2, #4
    1f8e:	a808      	add	r0, sp, #32
    1f90:	f7ff fe34 	bl	1bfc <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
    1f94:	462a      	mov	r2, r5
    1f96:	1de1      	adds	r1, r4, #7
    1f98:	f10d 001a 	add.w	r0, sp, #26
    1f9c:	f7ff fe2e 	bl	1bfc <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
    1fa0:	462a      	mov	r2, r5
    1fa2:	f104 0109 	add.w	r1, r4, #9
    1fa6:	a807      	add	r0, sp, #28
    1fa8:	f7ff fe28 	bl	1bfc <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
    1fac:	462a      	mov	r2, r5
    1fae:	f104 010b 	add.w	r1, r4, #11
    1fb2:	f10d 001e 	add.w	r0, sp, #30
    1fb6:	f7ff fe21 	bl	1bfc <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
    1fba:	f104 010d 	add.w	r1, r4, #13
    1fbe:	2204      	movs	r2, #4
    1fc0:	a809      	add	r0, sp, #36	; 0x24
    1fc2:	f7ff fe1b 	bl	1bfc <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
    1fc6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1fca:	9304      	str	r3, [sp, #16]
    1fcc:	9b08      	ldr	r3, [sp, #32]
    1fce:	9303      	str	r3, [sp, #12]
    1fd0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    1fd4:	9302      	str	r3, [sp, #8]
    1fd6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    1fda:	9301      	str	r3, [sp, #4]
    1fdc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    1fe0:	9300      	str	r3, [sp, #0]
    1fe2:	4a04      	ldr	r2, [pc, #16]	; (1ff4 <bt_uuid_to_str+0xa8>)
    1fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fe6:	4639      	mov	r1, r7
    1fe8:	4630      	mov	r0, r6
    1fea:	f7fe ffdd 	bl	fa8 <snprintk>
		break;
    1fee:	e7c3      	b.n	1f78 <bt_uuid_to_str+0x2c>
    1ff0:	00015b21 	.word	0x00015b21
    1ff4:	00015b09 	.word	0x00015b09

00001ff8 <bt_uuid_str>:

const char *bt_uuid_str(const struct bt_uuid *uuid)
{
    1ff8:	b510      	push	{r4, lr}
	static char str[37];

	bt_uuid_to_str(uuid, str, sizeof(str));
    1ffa:	4c03      	ldr	r4, [pc, #12]	; (2008 <bt_uuid_str+0x10>)
    1ffc:	2225      	movs	r2, #37	; 0x25
    1ffe:	4621      	mov	r1, r4
    2000:	f7ff ffa4 	bl	1f4c <bt_uuid_to_str>

	return str;
}
    2004:	4620      	mov	r0, r4
    2006:	bd10      	pop	{r4, pc}
    2008:	20000279 	.word	0x20000279

0000200c <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    200c:	4770      	bx	lr
	...

00002010 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    2010:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    2012:	4d0b      	ldr	r5, [pc, #44]	; (2040 <ver_str+0x30>)
{
    2014:	4606      	mov	r6, r0
	const char * const str[] = {
    2016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2018:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    201a:	466c      	mov	r4, sp
    201c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    201e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2022:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    2026:	2e09      	cmp	r6, #9
	const char * const str[] = {
    2028:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    202c:	bf9b      	ittet	ls
    202e:	ab0a      	addls	r3, sp, #40	; 0x28
    2030:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    2034:	4803      	ldrhi	r0, [pc, #12]	; (2044 <ver_str+0x34>)
		return str[ver];
    2036:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    203a:	b00a      	add	sp, #40	; 0x28
    203c:	bd70      	pop	{r4, r5, r6, pc}
    203e:	bf00      	nop
    2040:	000154e8 	.word	0x000154e8
    2044:	00016e24 	.word	0x00016e24

00002048 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2048:	2207      	movs	r2, #7
    204a:	f7ff bdd7 	b.w	1bfc <memcpy>

0000204e <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    204e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    2050:	f3bf 8f5b 	dmb	ish
    2054:	e850 3f00 	ldrex	r3, [r0]
    2058:	ea43 0201 	orr.w	r2, r3, r1
    205c:	e840 2e00 	strex	lr, r2, [r0]
    2060:	f1be 0f00 	cmp.w	lr, #0
    2064:	d1f6      	bne.n	2054 <atomic_or+0x6>
    2066:	f3bf 8f5b 	dmb	ish
    206a:	4618      	mov	r0, r3
    206c:	f85d fb04 	ldr.w	pc, [sp], #4

00002070 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    2070:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    2072:	f3bf 8f5b 	dmb	ish
    2076:	e850 3f00 	ldrex	r3, [r0]
    207a:	ea03 0201 	and.w	r2, r3, r1
    207e:	e840 2e00 	strex	lr, r2, [r0]
    2082:	f1be 0f00 	cmp.w	lr, #0
    2086:	d1f6      	bne.n	2076 <atomic_and+0x6>
    2088:	f3bf 8f5b 	dmb	ish
    208c:	4618      	mov	r0, r3
    208e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00002094 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    2094:	78c3      	ldrb	r3, [r0, #3]
    2096:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    2098:	f241 3288 	movw	r2, #5000	; 0x1388
    209c:	f100 0170 	add.w	r1, r0, #112	; 0x70
    20a0:	bf08      	it	eq
    20a2:	2200      	moveq	r2, #0
    20a4:	4801      	ldr	r0, [pc, #4]	; (20ac <update_conn_param+0x18>)
    20a6:	f013 b831 	b.w	1510c <k_delayed_work_submit_to_queue>
    20aa:	bf00      	nop
    20ac:	200019b8 	.word	0x200019b8

000020b0 <hci_cmd_done>:
{
    20b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20b4:	b087      	sub	sp, #28
    20b6:	4615      	mov	r5, r2
    20b8:	4688      	mov	r8, r1
    20ba:	4607      	mov	r7, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    20bc:	f012 fcbc 	bl	14a38 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    20c0:	4e2c      	ldr	r6, [pc, #176]	; (2174 <hci_cmd_done+0xc4>)
    20c2:	9001      	str	r0, [sp, #4]
    20c4:	4b2c      	ldr	r3, [pc, #176]	; (2178 <hci_cmd_done+0xc8>)
    20c6:	4a2d      	ldr	r2, [pc, #180]	; (217c <hci_cmd_done+0xcc>)
    20c8:	492d      	ldr	r1, [pc, #180]	; (2180 <hci_cmd_done+0xd0>)
    20ca:	9605      	str	r6, [sp, #20]
    20cc:	9504      	str	r5, [sp, #16]
    20ce:	f8cd 800c 	str.w	r8, [sp, #12]
    20d2:	9702      	str	r7, [sp, #8]
    20d4:	9600      	str	r6, [sp, #0]
    20d6:	482b      	ldr	r0, [pc, #172]	; (2184 <hci_cmd_done+0xd4>)
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20d8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2198 <hci_cmd_done+0xe8>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    20dc:	f7fe ff56 	bl	f8c <printk>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20e0:	79a8      	ldrb	r0, [r5, #6]
    20e2:	f011 fb5d 	bl	137a0 <net_buf_pool_get>
    20e6:	4581      	cmp	r9, r0
    20e8:	d013      	beq.n	2112 <hci_cmd_done+0x62>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    20ea:	79ac      	ldrb	r4, [r5, #6]
    20ec:	4620      	mov	r0, r4
    20ee:	f011 fb57 	bl	137a0 <net_buf_pool_get>
    20f2:	9605      	str	r6, [sp, #20]
    20f4:	9003      	str	r0, [sp, #12]
    20f6:	f8cd 9010 	str.w	r9, [sp, #16]
    20fa:	9402      	str	r4, [sp, #8]
    20fc:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2100:	4b1d      	ldr	r3, [pc, #116]	; (2178 <hci_cmd_done+0xc8>)
    2102:	4a21      	ldr	r2, [pc, #132]	; (2188 <hci_cmd_done+0xd8>)
    2104:	491e      	ldr	r1, [pc, #120]	; (2180 <hci_cmd_done+0xd0>)
    2106:	4821      	ldr	r0, [pc, #132]	; (218c <hci_cmd_done+0xdc>)
    2108:	f7fe ff40 	bl	f8c <printk>
}
    210c:	b007      	add	sp, #28
    210e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    2112:	4628      	mov	r0, r5
    2114:	f011 fb4a 	bl	137ac <net_buf_id>
    2118:	4c1d      	ldr	r4, [pc, #116]	; (2190 <hci_cmd_done+0xe0>)
    211a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    211e:	8843      	ldrh	r3, [r0, #2]
    2120:	42bb      	cmp	r3, r7
    2122:	d00f      	beq.n	2144 <hci_cmd_done+0x94>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2124:	4628      	mov	r0, r5
    2126:	f011 fb41 	bl	137ac <net_buf_id>
    212a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    212e:	9603      	str	r6, [sp, #12]
    2130:	8843      	ldrh	r3, [r0, #2]
    2132:	9302      	str	r3, [sp, #8]
    2134:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2138:	4b0f      	ldr	r3, [pc, #60]	; (2178 <hci_cmd_done+0xc8>)
    213a:	4a13      	ldr	r2, [pc, #76]	; (2188 <hci_cmd_done+0xd8>)
    213c:	4910      	ldr	r1, [pc, #64]	; (2180 <hci_cmd_done+0xd0>)
    213e:	4815      	ldr	r0, [pc, #84]	; (2194 <hci_cmd_done+0xe4>)
    2140:	f7fe ff24 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    2144:	4628      	mov	r0, r5
    2146:	f011 fb31 	bl	137ac <net_buf_id>
    214a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    214e:	6843      	ldr	r3, [r0, #4]
    2150:	2b00      	cmp	r3, #0
    2152:	d0db      	beq.n	210c <hci_cmd_done+0x5c>
		cmd(buf)->status = status;
    2154:	4628      	mov	r0, r5
    2156:	f011 fb29 	bl	137ac <net_buf_id>
    215a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    215e:	4628      	mov	r0, r5
    2160:	f011 fb24 	bl	137ac <net_buf_id>
    2164:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2168:	6840      	ldr	r0, [r0, #4]
}
    216a:	b007      	add	sp, #28
    216c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2170:	f012 bc71 	b.w	14a56 <_impl_k_sem_give>
    2174:	000155c5 	.word	0x000155c5
    2178:	00015c87 	.word	0x00015c87
    217c:	000169e6 	.word	0x000169e6
    2180:	000169ed 	.word	0x000169ed
    2184:	000169f0 	.word	0x000169f0
    2188:	00016a28 	.word	0x00016a28
    218c:	00016a2f 	.word	0x00016a2f
    2190:	200002a0 	.word	0x200002a0
    2194:	00016a74 	.word	0x00016a74
    2198:	20003f9c 	.word	0x20003f9c

0000219c <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    219c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    219e:	f3bf 8f5b 	dmb	ish
    21a2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    21a6:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    21aa:	f001 011f 	and.w	r1, r1, #31
    21ae:	4108      	asrs	r0, r1
}
    21b0:	f000 0001 	and.w	r0, r0, #1
    21b4:	4770      	bx	lr
	...

000021b8 <bt_hci_cmd_create>:
{
    21b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    21bc:	b086      	sub	sp, #24
    21be:	4606      	mov	r6, r0
    21c0:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    21c2:	f012 fc39 	bl	14a38 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    21c6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2268 <bt_hci_cmd_create+0xb0>
    21ca:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 226c <bt_hci_cmd_create+0xb4>
    21ce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2270 <bt_hci_cmd_create+0xb8>
    21d2:	4d20      	ldr	r5, [pc, #128]	; (2254 <bt_hci_cmd_create+0x9c>)
    21d4:	9504      	str	r5, [sp, #16]
    21d6:	4653      	mov	r3, sl
    21d8:	464a      	mov	r2, r9
    21da:	9001      	str	r0, [sp, #4]
    21dc:	9500      	str	r5, [sp, #0]
    21de:	4641      	mov	r1, r8
    21e0:	9703      	str	r7, [sp, #12]
    21e2:	9602      	str	r6, [sp, #8]
    21e4:	481c      	ldr	r0, [pc, #112]	; (2258 <bt_hci_cmd_create+0xa0>)
    21e6:	f7fe fed1 	bl	f8c <printk>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    21ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    21ee:	481b      	ldr	r0, [pc, #108]	; (225c <bt_hci_cmd_create+0xa4>)
    21f0:	f011 fb6a 	bl	138c8 <net_buf_alloc_fixed>
    21f4:	4604      	mov	r4, r0
    21f6:	f012 fc1f 	bl	14a38 <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    21fa:	464a      	mov	r2, r9
    21fc:	4653      	mov	r3, sl
    21fe:	9503      	str	r5, [sp, #12]
    2200:	9001      	str	r0, [sp, #4]
    2202:	9500      	str	r5, [sp, #0]
    2204:	4641      	mov	r1, r8
    2206:	9402      	str	r4, [sp, #8]
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2208:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    220c:	4814      	ldr	r0, [pc, #80]	; (2260 <bt_hci_cmd_create+0xa8>)
	cmd(buf)->opcode = opcode;
    220e:	4d15      	ldr	r5, [pc, #84]	; (2264 <bt_hci_cmd_create+0xac>)
	BT_DBG("buf %p", buf);
    2210:	f7fe febc 	bl	f8c <printk>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2214:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2218:	2100      	movs	r1, #0
    221a:	4640      	mov	r0, r8
    221c:	f011 fb73 	bl	13906 <net_buf_simple_reserve>
    2220:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    2224:	4620      	mov	r0, r4
    2226:	f011 fac1 	bl	137ac <net_buf_id>
    222a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    222e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    2230:	4620      	mov	r0, r4
    2232:	f011 fabb 	bl	137ac <net_buf_id>
    2236:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    223a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    223c:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2240:	4640      	mov	r0, r8
    2242:	f011 fba3 	bl	1398c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    2246:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    2248:	7087      	strb	r7, [r0, #2]
}
    224a:	4620      	mov	r0, r4
    224c:	b006      	add	sp, #24
    224e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2252:	bf00      	nop
    2254:	000155c5 	.word	0x000155c5
    2258:	00015fa1 	.word	0x00015fa1
    225c:	20003f9c 	.word	0x20003f9c
    2260:	00015fd1 	.word	0x00015fd1
    2264:	200002a0 	.word	0x200002a0
    2268:	00015b37 	.word	0x00015b37
    226c:	000169e6 	.word	0x000169e6
    2270:	000169ed 	.word	0x000169ed

00002274 <bt_hci_cmd_send_sync>:
{
    2274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2278:	4681      	mov	r9, r0
    227a:	b08d      	sub	sp, #52	; 0x34
    227c:	4615      	mov	r5, r2
	if (!buf) {
    227e:	460c      	mov	r4, r1
    2280:	b921      	cbnz	r1, 228c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    2282:	f7ff ff99 	bl	21b8 <bt_hci_cmd_create>
		if (!buf) {
    2286:	4604      	mov	r4, r0
    2288:	2800      	cmp	r0, #0
    228a:	d053      	beq.n	2334 <bt_hci_cmd_send_sync+0xc0>
    228c:	f012 fbd4 	bl	14a38 <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2290:	4e2a      	ldr	r6, [pc, #168]	; (233c <bt_hci_cmd_send_sync+0xc8>)
    2292:	9605      	str	r6, [sp, #20]
    2294:	89a3      	ldrh	r3, [r4, #12]
    2296:	9304      	str	r3, [sp, #16]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2298:	f10d 0818 	add.w	r8, sp, #24
    229c:	4b28      	ldr	r3, [pc, #160]	; (2340 <bt_hci_cmd_send_sync+0xcc>)
    229e:	9001      	str	r0, [sp, #4]
    22a0:	4a28      	ldr	r2, [pc, #160]	; (2344 <bt_hci_cmd_send_sync+0xd0>)
    22a2:	4929      	ldr	r1, [pc, #164]	; (2348 <bt_hci_cmd_send_sync+0xd4>)
    22a4:	f8cd 900c 	str.w	r9, [sp, #12]
    22a8:	9402      	str	r4, [sp, #8]
    22aa:	9600      	str	r6, [sp, #0]
    22ac:	4827      	ldr	r0, [pc, #156]	; (234c <bt_hci_cmd_send_sync+0xd8>)
	cmd(buf)->sync = &sync_sem;
    22ae:	4f28      	ldr	r7, [pc, #160]	; (2350 <bt_hci_cmd_send_sync+0xdc>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    22b0:	f7fe fe6c 	bl	f8c <printk>
    22b4:	2201      	movs	r2, #1
    22b6:	2100      	movs	r1, #0
    22b8:	4640      	mov	r0, r8
    22ba:	f012 fbc3 	bl	14a44 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    22be:	4620      	mov	r0, r4
    22c0:	f011 fa74 	bl	137ac <net_buf_id>
    22c4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    22c8:	f8c0 8004 	str.w	r8, [r0, #4]
	net_buf_ref(buf);
    22cc:	4620      	mov	r0, r4
    22ce:	f011 fb59 	bl	13984 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    22d2:	4621      	mov	r1, r4
    22d4:	481f      	ldr	r0, [pc, #124]	; (2354 <bt_hci_cmd_send_sync+0xe0>)
    22d6:	f011 fb1a 	bl	1390e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    22da:	f242 7110 	movw	r1, #10000	; 0x2710
    22de:	4640      	mov	r0, r8
    22e0:	f012 fbe1 	bl	14aa6 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    22e4:	f012 fba8 	bl	14a38 <_impl_k_current_get>
    22e8:	4680      	mov	r8, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    22ea:	4620      	mov	r0, r4
    22ec:	f011 fa5e 	bl	137ac <net_buf_id>
    22f0:	9604      	str	r6, [sp, #16]
    22f2:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    22f6:	9303      	str	r3, [sp, #12]
    22f8:	4a12      	ldr	r2, [pc, #72]	; (2344 <bt_hci_cmd_send_sync+0xd0>)
    22fa:	4b11      	ldr	r3, [pc, #68]	; (2340 <bt_hci_cmd_send_sync+0xcc>)
    22fc:	4912      	ldr	r1, [pc, #72]	; (2348 <bt_hci_cmd_send_sync+0xd4>)
    22fe:	4816      	ldr	r0, [pc, #88]	; (2358 <bt_hci_cmd_send_sync+0xe4>)
    2300:	e88d 0340 	stmia.w	sp, {r6, r8, r9}
    2304:	f7fe fe42 	bl	f8c <printk>
	if (cmd(buf)->status) {
    2308:	4620      	mov	r0, r4
    230a:	f011 fa4f 	bl	137ac <net_buf_id>
    230e:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    2312:	b138      	cbz	r0, 2324 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    2314:	4620      	mov	r0, r4
    2316:	f011 fb07 	bl	13928 <net_buf_unref>
		err = -EIO;
    231a:	f06f 0004 	mvn.w	r0, #4
}
    231e:	b00d      	add	sp, #52	; 0x34
    2320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (rsp) {
    2324:	b10d      	cbz	r5, 232a <bt_hci_cmd_send_sync+0xb6>
			*rsp = buf;
    2326:	602c      	str	r4, [r5, #0]
    2328:	e7f9      	b.n	231e <bt_hci_cmd_send_sync+0xaa>
			net_buf_unref(buf);
    232a:	4620      	mov	r0, r4
    232c:	f011 fafc 	bl	13928 <net_buf_unref>
		err = 0;
    2330:	4628      	mov	r0, r5
    2332:	e7f4      	b.n	231e <bt_hci_cmd_send_sync+0xaa>
			return -ENOBUFS;
    2334:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2338:	e7f1      	b.n	231e <bt_hci_cmd_send_sync+0xaa>
    233a:	bf00      	nop
    233c:	000155c5 	.word	0x000155c5
    2340:	00015b59 	.word	0x00015b59
    2344:	000169e6 	.word	0x000169e6
    2348:	000169ed 	.word	0x000169ed
    234c:	00016049 	.word	0x00016049
    2350:	200002a0 	.word	0x200002a0
    2354:	20003b54 	.word	0x20003b54
    2358:	0001607a 	.word	0x0001607a

0000235c <set_le_scan_enable>:
{
    235c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    235e:	2102      	movs	r1, #2
{
    2360:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2362:	f242 000c 	movw	r0, #8204	; 0x200c
    2366:	f7ff ff27 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    236a:	4604      	mov	r4, r0
    236c:	b330      	cbz	r0, 23bc <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    236e:	2102      	movs	r1, #2
    2370:	3008      	adds	r0, #8
    2372:	f011 fb0b 	bl	1398c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2376:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2378:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    237a:	d116      	bne.n	23aa <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    237c:	210b      	movs	r1, #11
    237e:	4811      	ldr	r0, [pc, #68]	; (23c4 <set_le_scan_enable+0x68>)
    2380:	f7ff ff0c 	bl	219c <atomic_test_bit>
    2384:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    2386:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2388:	4621      	mov	r1, r4
    238a:	2200      	movs	r2, #0
    238c:	f242 000c 	movw	r0, #8204	; 0x200c
    2390:	f7ff ff70 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2394:	4604      	mov	r4, r0
    2396:	b930      	cbnz	r0, 23a6 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2398:	2d01      	cmp	r5, #1
    239a:	d109      	bne.n	23b0 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    239c:	f44f 7180 	mov.w	r1, #256	; 0x100
    23a0:	4808      	ldr	r0, [pc, #32]	; (23c4 <set_le_scan_enable+0x68>)
    23a2:	f7ff fe54 	bl	204e <atomic_or>
}
    23a6:	4620      	mov	r0, r4
    23a8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    23aa:	2300      	movs	r3, #0
    23ac:	7043      	strb	r3, [r0, #1]
    23ae:	e7ea      	b.n	2386 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    23b0:	f46f 7180 	mvn.w	r1, #256	; 0x100
    23b4:	4803      	ldr	r0, [pc, #12]	; (23c4 <set_le_scan_enable+0x68>)
    23b6:	f7ff fe5b 	bl	2070 <atomic_and>
    23ba:	e7f4      	b.n	23a6 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    23bc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    23c0:	e7f1      	b.n	23a6 <set_le_scan_enable+0x4a>
    23c2:	bf00      	nop
    23c4:	20003b00 	.word	0x20003b00

000023c8 <set_random_address>:
{
    23c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    23ca:	4605      	mov	r5, r0
    23cc:	f012 fb34 	bl	14a38 <_impl_k_current_get>
    23d0:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    23d2:	4628      	mov	r0, r5
    23d4:	f7ff fc98 	bl	1d08 <bt_addr_str>
    23d8:	4b1a      	ldr	r3, [pc, #104]	; (2444 <set_random_address+0x7c>)
	return memcmp(a, b, sizeof(*a));
    23da:	4e1b      	ldr	r6, [pc, #108]	; (2448 <set_random_address+0x80>)
    23dc:	9303      	str	r3, [sp, #12]
    23de:	e88d 0018 	stmia.w	sp, {r3, r4}
    23e2:	9002      	str	r0, [sp, #8]
    23e4:	4b19      	ldr	r3, [pc, #100]	; (244c <set_random_address+0x84>)
    23e6:	4a1a      	ldr	r2, [pc, #104]	; (2450 <set_random_address+0x88>)
    23e8:	491a      	ldr	r1, [pc, #104]	; (2454 <set_random_address+0x8c>)
    23ea:	481b      	ldr	r0, [pc, #108]	; (2458 <set_random_address+0x90>)
    23ec:	f7fe fdce 	bl	f8c <printk>
    23f0:	2206      	movs	r2, #6
    23f2:	f106 0108 	add.w	r1, r6, #8
    23f6:	4628      	mov	r0, r5
    23f8:	f7ff fbeb 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    23fc:	4604      	mov	r4, r0
    23fe:	b1d8      	cbz	r0, 2438 <set_random_address+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2400:	2106      	movs	r1, #6
    2402:	f242 0005 	movw	r0, #8197	; 0x2005
    2406:	f7ff fed7 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    240a:	4604      	mov	r4, r0
    240c:	b1b8      	cbz	r0, 243e <set_random_address+0x76>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    240e:	2206      	movs	r2, #6
    2410:	4629      	mov	r1, r5
    2412:	3008      	adds	r0, #8
    2414:	f011 fac0 	bl	13998 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2418:	4621      	mov	r1, r4
    241a:	2200      	movs	r2, #0
    241c:	f242 0005 	movw	r0, #8197	; 0x2005
    2420:	f7ff ff28 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2424:	4604      	mov	r4, r0
    2426:	b938      	cbnz	r0, 2438 <set_random_address+0x70>
	memcpy(dst, src, sizeof(*dst));
    2428:	2206      	movs	r2, #6
    242a:	4629      	mov	r1, r5
    242c:	f106 0008 	add.w	r0, r6, #8
    2430:	f7ff fbe4 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2434:	2301      	movs	r3, #1
    2436:	71f3      	strb	r3, [r6, #7]
}
    2438:	4620      	mov	r0, r4
    243a:	b004      	add	sp, #16
    243c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    243e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2442:	e7f9      	b.n	2438 <set_random_address+0x70>
    2444:	000155c5 	.word	0x000155c5
    2448:	20003a90 	.word	0x20003a90
    244c:	00015b6e 	.word	0x00015b6e
    2450:	000169e6 	.word	0x000169e6
    2454:	000169ed 	.word	0x000169ed
    2458:	00016d2c 	.word	0x00016d2c

0000245c <set_advertise_enable>:
{
    245c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    245e:	2101      	movs	r1, #1
{
    2460:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2462:	f242 000a 	movw	r0, #8202	; 0x200a
    2466:	f7ff fea7 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    246a:	4604      	mov	r4, r0
    246c:	b1d8      	cbz	r0, 24a6 <set_advertise_enable+0x4a>
    246e:	3008      	adds	r0, #8
	if (enable) {
    2470:	b18d      	cbz	r5, 2496 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2472:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2474:	f011 fa99 	bl	139aa <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2478:	4621      	mov	r1, r4
    247a:	2200      	movs	r2, #0
    247c:	f242 000a 	movw	r0, #8202	; 0x200a
    2480:	f7ff fef8 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2484:	4604      	mov	r4, r0
    2486:	b920      	cbnz	r0, 2492 <set_advertise_enable+0x36>
	if (enable) {
    2488:	b13d      	cbz	r5, 249a <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    248a:	2140      	movs	r1, #64	; 0x40
    248c:	4807      	ldr	r0, [pc, #28]	; (24ac <set_advertise_enable+0x50>)
    248e:	f7ff fdde 	bl	204e <atomic_or>
}
    2492:	4620      	mov	r0, r4
    2494:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2496:	4629      	mov	r1, r5
    2498:	e7ec      	b.n	2474 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    249a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    249e:	4803      	ldr	r0, [pc, #12]	; (24ac <set_advertise_enable+0x50>)
    24a0:	f7ff fde6 	bl	2070 <atomic_and>
    24a4:	e7f5      	b.n	2492 <set_advertise_enable+0x36>
		return -ENOBUFS;
    24a6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24aa:	e7f2      	b.n	2492 <set_advertise_enable+0x36>
    24ac:	20003b00 	.word	0x20003b00

000024b0 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    24b0:	8802      	ldrh	r2, [r0, #0]
    24b2:	8843      	ldrh	r3, [r0, #2]
    24b4:	429a      	cmp	r2, r3
{
    24b6:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    24b8:	d818      	bhi.n	24ec <bt_le_conn_params_valid+0x3c>
    24ba:	2a05      	cmp	r2, #5
    24bc:	d916      	bls.n	24ec <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    24be:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    24c2:	d813      	bhi.n	24ec <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    24c4:	8884      	ldrh	r4, [r0, #4]
    24c6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    24ca:	d20f      	bcs.n	24ec <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    24cc:	88c1      	ldrh	r1, [r0, #6]
    24ce:	f1a1 020a 	sub.w	r2, r1, #10
    24d2:	b292      	uxth	r2, r2
    24d4:	f640 4076 	movw	r0, #3190	; 0xc76
    24d8:	4282      	cmp	r2, r0
    24da:	d807      	bhi.n	24ec <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    24dc:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    24e0:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    24e4:	bfb4      	ite	lt
    24e6:	2001      	movlt	r0, #1
    24e8:	2000      	movge	r0, #0
    24ea:	bd10      	pop	{r4, pc}
		return false;
    24ec:	2000      	movs	r0, #0
}
    24ee:	bd10      	pop	{r4, pc}

000024f0 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    24f0:	2301      	movs	r3, #1
{
    24f2:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    24f4:	2106      	movs	r1, #6
{
    24f6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    24f8:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    24fc:	f006 fbac 	bl	8c58 <bt_rand>
	if (err) {
    2500:	b918      	cbnz	r0, 250a <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    2502:	79a3      	ldrb	r3, [r4, #6]
    2504:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2508:	71a3      	strb	r3, [r4, #6]
}
    250a:	bd10      	pop	{r4, pc}

0000250c <bt_set_static_addr>:
{
    250c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    250e:	4c11      	ldr	r4, [pc, #68]	; (2554 <bt_set_static_addr+0x48>)
    2510:	7823      	ldrb	r3, [r4, #0]
    2512:	2b01      	cmp	r3, #1
    2514:	d104      	bne.n	2520 <bt_set_static_addr+0x14>
    2516:	79a3      	ldrb	r3, [r4, #6]
    2518:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    251c:	2bc0      	cmp	r3, #192	; 0xc0
    251e:	d00d      	beq.n	253c <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    2520:	4b0d      	ldr	r3, [pc, #52]	; (2558 <bt_set_static_addr+0x4c>)
    2522:	9301      	str	r3, [sp, #4]
    2524:	9300      	str	r3, [sp, #0]
    2526:	4a0d      	ldr	r2, [pc, #52]	; (255c <bt_set_static_addr+0x50>)
    2528:	4b0d      	ldr	r3, [pc, #52]	; (2560 <bt_set_static_addr+0x54>)
    252a:	490e      	ldr	r1, [pc, #56]	; (2564 <bt_set_static_addr+0x58>)
    252c:	480e      	ldr	r0, [pc, #56]	; (2568 <bt_set_static_addr+0x5c>)
    252e:	f7fe fd2d 	bl	f8c <printk>
    2532:	f06f 0515 	mvn.w	r5, #21
}
    2536:	4628      	mov	r0, r5
    2538:	b003      	add	sp, #12
    253a:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    253c:	1c60      	adds	r0, r4, #1
    253e:	f7ff ff43 	bl	23c8 <set_random_address>
	if (err) {
    2542:	4605      	mov	r5, r0
    2544:	2800      	cmp	r0, #0
    2546:	d1f6      	bne.n	2536 <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2548:	2104      	movs	r1, #4
    254a:	f104 0070 	add.w	r0, r4, #112	; 0x70
    254e:	f7ff fd7e 	bl	204e <atomic_or>
	return 0;
    2552:	e7f0      	b.n	2536 <bt_set_static_addr+0x2a>
    2554:	20003a90 	.word	0x20003a90
    2558:	000155c5 	.word	0x000155c5
    255c:	0001699e 	.word	0x0001699e
    2560:	00015de5 	.word	0x00015de5
    2564:	000169ed 	.word	0x000169ed
    2568:	000169a5 	.word	0x000169a5

0000256c <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    256c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2570:	4d1d      	ldr	r5, [pc, #116]	; (25e8 <bt_dev_show_info+0x7c>)
    2572:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2604 <bt_dev_show_info+0x98>
    2576:	4f1d      	ldr	r7, [pc, #116]	; (25ec <bt_dev_show_info+0x80>)
    2578:	4e1d      	ldr	r6, [pc, #116]	; (25f0 <bt_dev_show_info+0x84>)
    257a:	4c1e      	ldr	r4, [pc, #120]	; (25f4 <bt_dev_show_info+0x88>)
{
    257c:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    257e:	4628      	mov	r0, r5
    2580:	f7ff fbe8 	bl	1d54 <bt_addr_le_str>
    2584:	4643      	mov	r3, r8
    2586:	463a      	mov	r2, r7
    2588:	4631      	mov	r1, r6
    258a:	9001      	str	r0, [sp, #4]
    258c:	9402      	str	r4, [sp, #8]
    258e:	9400      	str	r4, [sp, #0]
    2590:	4819      	ldr	r0, [pc, #100]	; (25f8 <bt_dev_show_info+0x8c>)
    2592:	f7fe fcfb 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2596:	f895 900e 	ldrb.w	r9, [r5, #14]
    259a:	4648      	mov	r0, r9
    259c:	f7ff fd38 	bl	2010 <ver_str>
    25a0:	8aab      	ldrh	r3, [r5, #20]
    25a2:	9304      	str	r3, [sp, #16]
    25a4:	8a2b      	ldrh	r3, [r5, #16]
    25a6:	9303      	str	r3, [sp, #12]
    25a8:	463a      	mov	r2, r7
    25aa:	4643      	mov	r3, r8
    25ac:	4631      	mov	r1, r6
    25ae:	f8cd 9008 	str.w	r9, [sp, #8]
    25b2:	9001      	str	r0, [sp, #4]
    25b4:	9405      	str	r4, [sp, #20]
    25b6:	9400      	str	r4, [sp, #0]
    25b8:	4810      	ldr	r0, [pc, #64]	; (25fc <bt_dev_show_info+0x90>)
    25ba:	f7fe fce7 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    25be:	f895 900f 	ldrb.w	r9, [r5, #15]
    25c2:	4648      	mov	r0, r9
    25c4:	f7ff fd24 	bl	2010 <ver_str>
    25c8:	8a6b      	ldrh	r3, [r5, #18]
    25ca:	9303      	str	r3, [sp, #12]
    25cc:	9001      	str	r0, [sp, #4]
    25ce:	9404      	str	r4, [sp, #16]
    25d0:	f8cd 9008 	str.w	r9, [sp, #8]
    25d4:	9400      	str	r4, [sp, #0]
    25d6:	4643      	mov	r3, r8
    25d8:	463a      	mov	r2, r7
    25da:	4631      	mov	r1, r6
    25dc:	4808      	ldr	r0, [pc, #32]	; (2600 <bt_dev_show_info+0x94>)
    25de:	f7fe fcd5 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    25e2:	b007      	add	sp, #28
    25e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25e8:	20003a90 	.word	0x20003a90
    25ec:	00015ea3 	.word	0x00015ea3
    25f0:	000169ed 	.word	0x000169ed
    25f4:	000155c5 	.word	0x000155c5
    25f8:	00015eaa 	.word	0x00015eaa
    25fc:	00015ec7 	.word	0x00015ec7
    2600:	00015f15 	.word	0x00015f15
    2604:	00015e06 	.word	0x00015e06

00002608 <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2608:	b510      	push	{r4, lr}
    260a:	4604      	mov	r4, r0
    260c:	b086      	sub	sp, #24
    260e:	f012 fa13 	bl	14a38 <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2612:	7d22      	ldrb	r2, [r4, #20]
    2614:	4b0b      	ldr	r3, [pc, #44]	; (2644 <bt_send+0x3c>)
    2616:	9204      	str	r2, [sp, #16]
    2618:	89a2      	ldrh	r2, [r4, #12]
    261a:	9305      	str	r3, [sp, #20]
    261c:	9203      	str	r2, [sp, #12]
    261e:	9001      	str	r0, [sp, #4]
    2620:	9300      	str	r3, [sp, #0]
    2622:	9402      	str	r4, [sp, #8]
    2624:	4b08      	ldr	r3, [pc, #32]	; (2648 <bt_send+0x40>)
    2626:	4a09      	ldr	r2, [pc, #36]	; (264c <bt_send+0x44>)
    2628:	4909      	ldr	r1, [pc, #36]	; (2650 <bt_send+0x48>)
    262a:	480a      	ldr	r0, [pc, #40]	; (2654 <bt_send+0x4c>)
    262c:	f7fe fcae 	bl	f8c <printk>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2630:	4b09      	ldr	r3, [pc, #36]	; (2658 <bt_send+0x50>)
    2632:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2636:	691b      	ldr	r3, [r3, #16]
    2638:	4620      	mov	r0, r4
}
    263a:	b006      	add	sp, #24
    263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    2640:	4718      	bx	r3
    2642:	bf00      	nop
    2644:	000155c5 	.word	0x000155c5
    2648:	00015e2c 	.word	0x00015e2c
    264c:	000169e6 	.word	0x000169e6
    2650:	000169ed 	.word	0x000169ed
    2654:	00016973 	.word	0x00016973
    2658:	20003a90 	.word	0x20003a90

0000265c <bt_hci_cmd_send>:
{
    265c:	b570      	push	{r4, r5, r6, lr}
    265e:	4605      	mov	r5, r0
    2660:	b086      	sub	sp, #24
	if (!buf) {
    2662:	460c      	mov	r4, r1
    2664:	b921      	cbnz	r1, 2670 <bt_hci_cmd_send+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    2666:	f7ff fda7 	bl	21b8 <bt_hci_cmd_create>
		if (!buf) {
    266a:	4604      	mov	r4, r0
    266c:	2800      	cmp	r0, #0
    266e:	d02c      	beq.n	26ca <bt_hci_cmd_send+0x6e>
    2670:	f012 f9e2 	bl	14a38 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);
    2674:	4e16      	ldr	r6, [pc, #88]	; (26d0 <bt_hci_cmd_send+0x74>)
    2676:	9604      	str	r6, [sp, #16]
    2678:	89a3      	ldrh	r3, [r4, #12]
    267a:	9303      	str	r3, [sp, #12]
    267c:	9001      	str	r0, [sp, #4]
    267e:	4b15      	ldr	r3, [pc, #84]	; (26d4 <bt_hci_cmd_send+0x78>)
    2680:	9502      	str	r5, [sp, #8]
    2682:	9600      	str	r6, [sp, #0]
    2684:	4a14      	ldr	r2, [pc, #80]	; (26d8 <bt_hci_cmd_send+0x7c>)
    2686:	4915      	ldr	r1, [pc, #84]	; (26dc <bt_hci_cmd_send+0x80>)
    2688:	4815      	ldr	r0, [pc, #84]	; (26e0 <bt_hci_cmd_send+0x84>)
    268a:	f7fe fc7f 	bl	f8c <printk>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    268e:	f640 4335 	movw	r3, #3125	; 0xc35
    2692:	429d      	cmp	r5, r3
    2694:	d113      	bne.n	26be <bt_hci_cmd_send+0x62>
		err = bt_send(buf);
    2696:	4620      	mov	r0, r4
    2698:	f7ff ffb6 	bl	2608 <bt_send>
		if (err) {
    269c:	4605      	mov	r5, r0
    269e:	b158      	cbz	r0, 26b8 <bt_hci_cmd_send+0x5c>
			BT_ERR("Unable to send to driver (err %d)", err);
    26a0:	9001      	str	r0, [sp, #4]
    26a2:	9602      	str	r6, [sp, #8]
    26a4:	9600      	str	r6, [sp, #0]
    26a6:	4b0b      	ldr	r3, [pc, #44]	; (26d4 <bt_hci_cmd_send+0x78>)
    26a8:	4a0e      	ldr	r2, [pc, #56]	; (26e4 <bt_hci_cmd_send+0x88>)
    26aa:	490c      	ldr	r1, [pc, #48]	; (26dc <bt_hci_cmd_send+0x80>)
    26ac:	480e      	ldr	r0, [pc, #56]	; (26e8 <bt_hci_cmd_send+0x8c>)
    26ae:	f7fe fc6d 	bl	f8c <printk>
			net_buf_unref(buf);
    26b2:	4620      	mov	r0, r4
    26b4:	f011 f938 	bl	13928 <net_buf_unref>
}
    26b8:	4628      	mov	r0, r5
    26ba:	b006      	add	sp, #24
    26bc:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    26be:	4621      	mov	r1, r4
    26c0:	480a      	ldr	r0, [pc, #40]	; (26ec <bt_hci_cmd_send+0x90>)
    26c2:	f011 f924 	bl	1390e <net_buf_put>
	return 0;
    26c6:	2500      	movs	r5, #0
    26c8:	e7f6      	b.n	26b8 <bt_hci_cmd_send+0x5c>
			return -ENOBUFS;
    26ca:	f06f 0536 	mvn.w	r5, #54	; 0x36
    26ce:	e7f3      	b.n	26b8 <bt_hci_cmd_send+0x5c>
    26d0:	000155c5 	.word	0x000155c5
    26d4:	00015b49 	.word	0x00015b49
    26d8:	000169e6 	.word	0x000169e6
    26dc:	000169ed 	.word	0x000169ed
    26e0:	00015fed 	.word	0x00015fed
    26e4:	0001699e 	.word	0x0001699e
    26e8:	00016017 	.word	0x00016017
    26ec:	20003b54 	.word	0x20003b54

000026f0 <start_le_scan>:
{
    26f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    26f2:	460d      	mov	r5, r1
    26f4:	4614      	mov	r4, r2
    26f6:	4606      	mov	r6, r0
	memset(&set_param, 0, sizeof(set_param));
    26f8:	2207      	movs	r2, #7
    26fa:	2100      	movs	r1, #0
    26fc:	4668      	mov	r0, sp
    26fe:	f7ff faa9 	bl	1c54 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    2702:	f8ad 5001 	strh.w	r5, [sp, #1]
		set_param.addr_type =  bt_dev.id_addr.type;
    2706:	4d1b      	ldr	r5, [pc, #108]	; (2774 <start_le_scan+0x84>)
	set_param.window = sys_cpu_to_le16(window);
    2708:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.filter_policy = 0x00;
    270c:	2300      	movs	r3, #0
    270e:	f88d 3006 	strb.w	r3, [sp, #6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2712:	2107      	movs	r1, #7
		set_param.addr_type =  bt_dev.id_addr.type;
    2714:	782b      	ldrb	r3, [r5, #0]
	set_param.scan_type = scan_type;
    2716:	f88d 6000 	strb.w	r6, [sp]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    271a:	f242 000b 	movw	r0, #8203	; 0x200b
		set_param.addr_type =  bt_dev.id_addr.type;
    271e:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2722:	f7ff fd49 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    2726:	4604      	mov	r4, r0
    2728:	b300      	cbz	r0, 276c <start_le_scan+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    272a:	2207      	movs	r2, #7
    272c:	4669      	mov	r1, sp
    272e:	3008      	adds	r0, #8
    2730:	f011 f932 	bl	13998 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2734:	4621      	mov	r1, r4
    2736:	f242 000b 	movw	r0, #8203	; 0x200b
    273a:	f7ff ff8f 	bl	265c <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    273e:	2001      	movs	r0, #1
    2740:	f7ff fe0c 	bl	235c <set_le_scan_enable>
	if (err) {
    2744:	4604      	mov	r4, r0
    2746:	b938      	cbnz	r0, 2758 <start_le_scan+0x68>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2748:	2e01      	cmp	r6, #1
    274a:	d108      	bne.n	275e <start_le_scan+0x6e>
    274c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2750:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2754:	f7ff fc7b 	bl	204e <atomic_or>
}
    2758:	4620      	mov	r0, r4
    275a:	b002      	add	sp, #8
    275c:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    275e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    2762:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2766:	f7ff fc83 	bl	2070 <atomic_and>
    276a:	e7f5      	b.n	2758 <start_le_scan+0x68>
		return -ENOBUFS;
    276c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2770:	e7f2      	b.n	2758 <start_le_scan+0x68>
    2772:	bf00      	nop
    2774:	20003a90 	.word	0x20003a90

00002778 <bt_le_scan_update>:
{
    2778:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    277a:	2109      	movs	r1, #9
{
    277c:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    277e:	4816      	ldr	r0, [pc, #88]	; (27d8 <bt_le_scan_update+0x60>)
    2780:	f7ff fd0c 	bl	219c <atomic_test_bit>
    2784:	4602      	mov	r2, r0
    2786:	b108      	cbz	r0, 278c <bt_le_scan_update+0x14>
		return 0;
    2788:	2000      	movs	r0, #0
    278a:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    278c:	2108      	movs	r1, #8
    278e:	4812      	ldr	r0, [pc, #72]	; (27d8 <bt_le_scan_update+0x60>)
    2790:	f7ff fd04 	bl	219c <atomic_test_bit>
    2794:	b9d0      	cbnz	r0, 27cc <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    2796:	2101      	movs	r1, #1
    2798:	2000      	movs	r0, #0
    279a:	f002 f907 	bl	49ac <bt_conn_lookup_state_le>
		if (!conn) {
    279e:	4604      	mov	r4, r0
    27a0:	2800      	cmp	r0, #0
    27a2:	d0f1      	beq.n	2788 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    27a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    27a8:	480b      	ldr	r0, [pc, #44]	; (27d8 <bt_le_scan_update+0x60>)
    27aa:	f7ff fc50 	bl	204e <atomic_or>
		bt_conn_unref(conn);
    27ae:	4620      	mov	r0, r4
    27b0:	f002 f91a 	bl	49e8 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    27b4:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    27b6:	bf15      	itete	ne
    27b8:	2230      	movne	r2, #48	; 0x30
    27ba:	2212      	moveq	r2, #18
    27bc:	2160      	movne	r1, #96	; 0x60
    27be:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    27c2:	2000      	movs	r0, #0
}
    27c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    27c8:	f7ff bf92 	b.w	26f0 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    27cc:	4610      	mov	r0, r2
    27ce:	f7ff fdc5 	bl	235c <set_le_scan_enable>
		if (err) {
    27d2:	2800      	cmp	r0, #0
    27d4:	d0df      	beq.n	2796 <bt_le_scan_update+0x1e>
    27d6:	bd38      	pop	{r3, r4, r5, pc}
    27d8:	20003b00 	.word	0x20003b00

000027dc <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    27dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    27e0:	4e71      	ldr	r6, [pc, #452]	; (29a8 <bt_init+0x1cc>)
    27e2:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    27e6:	6899      	ldr	r1, [r3, #8]
    27e8:	f011 0101 	ands.w	r1, r1, #1
{
    27ec:	b08f      	sub	sp, #60	; 0x3c
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    27ee:	d131      	bne.n	2854 <bt_init+0x78>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    27f0:	aa0c      	add	r2, sp, #48	; 0x30
    27f2:	f640 4003 	movw	r0, #3075	; 0xc03
    27f6:	f7ff fd3d 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    27fa:	4605      	mov	r5, r0
    27fc:	2800      	cmp	r0, #0
    27fe:	f040 80ce 	bne.w	299e <bt_init+0x1c2>
	u8_t status = buf->data[0];
    2802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2804:	689b      	ldr	r3, [r3, #8]
    2806:	781c      	ldrb	r4, [r3, #0]
    2808:	f012 f916 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u", status);
    280c:	4b67      	ldr	r3, [pc, #412]	; (29ac <bt_init+0x1d0>)
    280e:	9303      	str	r3, [sp, #12]
    2810:	9001      	str	r0, [sp, #4]
    2812:	9300      	str	r3, [sp, #0]
    2814:	9402      	str	r4, [sp, #8]
    2816:	4b66      	ldr	r3, [pc, #408]	; (29b0 <bt_init+0x1d4>)
    2818:	4a66      	ldr	r2, [pc, #408]	; (29b4 <bt_init+0x1d8>)
    281a:	4967      	ldr	r1, [pc, #412]	; (29b8 <bt_init+0x1dc>)
    281c:	4867      	ldr	r0, [pc, #412]	; (29bc <bt_init+0x1e0>)
    281e:	f7fe fbb5 	bl	f8c <printk>
	if (status) {
    2822:	b9a4      	cbnz	r4, 284e <bt_init+0x72>
	scan_dev_found_cb = NULL;
    2824:	4b66      	ldr	r3, [pc, #408]	; (29c0 <bt_init+0x1e4>)
    2826:	601c      	str	r4, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2828:	4633      	mov	r3, r6
    282a:	f3bf 8f5b 	dmb	ish
    282e:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2832:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2836:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    283a:	f3bf 8f5b 	dmb	ish
    283e:	e853 1f00 	ldrex	r1, [r3]
    2842:	e843 2000 	strex	r0, r2, [r3]
    2846:	2800      	cmp	r0, #0
    2848:	d1f9      	bne.n	283e <bt_init+0x62>
    284a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    284e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2850:	f011 f86a 	bl	13928 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2854:	aa0c      	add	r2, sp, #48	; 0x30
    2856:	2100      	movs	r1, #0
    2858:	f241 0003 	movw	r0, #4099	; 0x1003
    285c:	f7ff fd0a 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2860:	4605      	mov	r5, r0
    2862:	2800      	cmp	r0, #0
    2864:	f040 809b 	bne.w	299e <bt_init+0x1c2>
    2868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    286a:	4c50      	ldr	r4, [pc, #320]	; (29ac <bt_init+0x1d0>)
    286c:	689f      	ldr	r7, [r3, #8]
    286e:	f012 f8e3 	bl	14a38 <_impl_k_current_get>
    2872:	9403      	str	r4, [sp, #12]
    2874:	f817 3b01 	ldrb.w	r3, [r7], #1
    2878:	9302      	str	r3, [sp, #8]
    287a:	9001      	str	r0, [sp, #4]
    287c:	4b51      	ldr	r3, [pc, #324]	; (29c4 <bt_init+0x1e8>)
    287e:	4a4d      	ldr	r2, [pc, #308]	; (29b4 <bt_init+0x1d8>)
    2880:	494d      	ldr	r1, [pc, #308]	; (29b8 <bt_init+0x1dc>)
    2882:	9400      	str	r4, [sp, #0]
    2884:	484d      	ldr	r0, [pc, #308]	; (29bc <bt_init+0x1e0>)
    2886:	f7fe fb81 	bl	f8c <printk>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    288a:	2208      	movs	r2, #8
    288c:	4639      	mov	r1, r7
    288e:	484e      	ldr	r0, [pc, #312]	; (29c8 <bt_init+0x1ec>)
    2890:	f7ff f9b4 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2894:	980c      	ldr	r0, [sp, #48]	; 0x30
    2896:	f011 f847 	bl	13928 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    289a:	4629      	mov	r1, r5
    289c:	aa0c      	add	r2, sp, #48	; 0x30
    289e:	f241 0001 	movw	r0, #4097	; 0x1001
    28a2:	f7ff fce7 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    28a6:	4605      	mov	r5, r0
    28a8:	2800      	cmp	r0, #0
    28aa:	d178      	bne.n	299e <bt_init+0x1c2>
    28ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    28ae:	689d      	ldr	r5, [r3, #8]
    28b0:	f012 f8c2 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    28b4:	9403      	str	r4, [sp, #12]
    28b6:	782b      	ldrb	r3, [r5, #0]
    28b8:	493f      	ldr	r1, [pc, #252]	; (29b8 <bt_init+0x1dc>)
    28ba:	9302      	str	r3, [sp, #8]
    28bc:	9001      	str	r0, [sp, #4]
    28be:	4b43      	ldr	r3, [pc, #268]	; (29cc <bt_init+0x1f0>)
    28c0:	4a3c      	ldr	r2, [pc, #240]	; (29b4 <bt_init+0x1d8>)
    28c2:	9400      	str	r4, [sp, #0]
    28c4:	483d      	ldr	r0, [pc, #244]	; (29bc <bt_init+0x1e0>)
    28c6:	f7fe fb61 	bl	f8c <printk>
	bt_dev.hci_version = rp->hci_version;
    28ca:	786b      	ldrb	r3, [r5, #1]
    28cc:	73b3      	strb	r3, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    28ce:	78ea      	ldrb	r2, [r5, #3]
    28d0:	78ab      	ldrb	r3, [r5, #2]
	net_buf_unref(rsp);
    28d2:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    28d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28d8:	8233      	strh	r3, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    28da:	792b      	ldrb	r3, [r5, #4]
    28dc:	73f3      	strb	r3, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    28de:	7a2a      	ldrb	r2, [r5, #8]
    28e0:	79eb      	ldrb	r3, [r5, #7]
    28e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28e6:	8273      	strh	r3, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    28e8:	79aa      	ldrb	r2, [r5, #6]
    28ea:	796b      	ldrb	r3, [r5, #5]
    28ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28f0:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    28f2:	f011 f819 	bl	13928 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    28f6:	2103      	movs	r1, #3
    28f8:	4835      	ldr	r0, [pc, #212]	; (29d0 <bt_init+0x1f4>)
    28fa:	f7ff fc4f 	bl	219c <atomic_test_bit>
    28fe:	4601      	mov	r1, r0
    2900:	bb00      	cbnz	r0, 2944 <bt_init+0x168>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2902:	aa0c      	add	r2, sp, #48	; 0x30
    2904:	f241 0009 	movw	r0, #4105	; 0x1009
    2908:	f7ff fcb4 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    290c:	4605      	mov	r5, r0
    290e:	2800      	cmp	r0, #0
    2910:	d145      	bne.n	299e <bt_init+0x1c2>
    2912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2914:	689f      	ldr	r7, [r3, #8]
    2916:	f012 f88f 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    291a:	9403      	str	r4, [sp, #12]
    291c:	f817 3b01 	ldrb.w	r3, [r7], #1
    2920:	9302      	str	r3, [sp, #8]
    2922:	9001      	str	r0, [sp, #4]
    2924:	4b2b      	ldr	r3, [pc, #172]	; (29d4 <bt_init+0x1f8>)
    2926:	4a23      	ldr	r2, [pc, #140]	; (29b4 <bt_init+0x1d8>)
    2928:	4923      	ldr	r1, [pc, #140]	; (29b8 <bt_init+0x1dc>)
    292a:	9400      	str	r4, [sp, #0]
    292c:	4823      	ldr	r0, [pc, #140]	; (29bc <bt_init+0x1e0>)
    292e:	f7fe fb2d 	bl	f8c <printk>
    2932:	2206      	movs	r2, #6
    2934:	4639      	mov	r1, r7
    2936:	4828      	ldr	r0, [pc, #160]	; (29d8 <bt_init+0x1fc>)
    2938:	f7ff f960 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    293c:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    293e:	7035      	strb	r5, [r6, #0]
		net_buf_unref(rsp);
    2940:	f010 fff2 	bl	13928 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2944:	aa0c      	add	r2, sp, #48	; 0x30
    2946:	2100      	movs	r1, #0
    2948:	f241 0002 	movw	r0, #4098	; 0x1002
    294c:	f7ff fc92 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2950:	4605      	mov	r5, r0
    2952:	bb20      	cbnz	r0, 299e <bt_init+0x1c2>
    2954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2956:	689f      	ldr	r7, [r3, #8]
    2958:	f012 f86e 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    295c:	9403      	str	r4, [sp, #12]
    295e:	f817 3b01 	ldrb.w	r3, [r7], #1
    2962:	9302      	str	r3, [sp, #8]
    2964:	9001      	str	r0, [sp, #4]
    2966:	4b1d      	ldr	r3, [pc, #116]	; (29dc <bt_init+0x200>)
    2968:	4a12      	ldr	r2, [pc, #72]	; (29b4 <bt_init+0x1d8>)
    296a:	4913      	ldr	r1, [pc, #76]	; (29b8 <bt_init+0x1dc>)
    296c:	9400      	str	r4, [sp, #0]
    296e:	4813      	ldr	r0, [pc, #76]	; (29bc <bt_init+0x1e0>)
    2970:	f7fe fb0c 	bl	f8c <printk>
	memcpy(bt_dev.supported_commands, rp->commands,
    2974:	4639      	mov	r1, r7
    2976:	2240      	movs	r2, #64	; 0x40
    2978:	4819      	ldr	r0, [pc, #100]	; (29e0 <bt_init+0x204>)
    297a:	f7ff f93f 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    297e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2980:	f010 ffd2 	bl	13928 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2984:	7eb3      	ldrb	r3, [r6, #26]
    2986:	0659      	lsls	r1, r3, #25
    2988:	d432      	bmi.n	29f0 <bt_init+0x214>
		BT_ERR("Non-LE capable controller detected!");
    298a:	9401      	str	r4, [sp, #4]
    298c:	9400      	str	r4, [sp, #0]
    298e:	4b15      	ldr	r3, [pc, #84]	; (29e4 <bt_init+0x208>)
    2990:	4a15      	ldr	r2, [pc, #84]	; (29e8 <bt_init+0x20c>)
    2992:	4909      	ldr	r1, [pc, #36]	; (29b8 <bt_init+0x1dc>)
    2994:	4815      	ldr	r0, [pc, #84]	; (29ec <bt_init+0x210>)
    2996:	f7fe faf9 	bl	f8c <printk>
		return -ENODEV;
    299a:	f06f 0512 	mvn.w	r5, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    299e:	4628      	mov	r0, r5
    29a0:	b00f      	add	sp, #60	; 0x3c
    29a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    29a6:	bf00      	nop
    29a8:	20003a90 	.word	0x20003a90
    29ac:	000155c5 	.word	0x000155c5
    29b0:	00015c74 	.word	0x00015c74
    29b4:	000169e6 	.word	0x000169e6
    29b8:	000169ed 	.word	0x000169ed
    29bc:	000160ce 	.word	0x000160ce
    29c0:	200002fc 	.word	0x200002fc
    29c4:	00015da3 	.word	0x00015da3
    29c8:	20003aa6 	.word	0x20003aa6
    29cc:	00015d04 	.word	0x00015d04
    29d0:	20003b00 	.word	0x20003b00
    29d4:	00015d1c 	.word	0x00015d1c
    29d8:	20003a91 	.word	0x20003a91
    29dc:	00015d82 	.word	0x00015d82
    29e0:	20003aae 	.word	0x20003aae
    29e4:	00015ddd 	.word	0x00015ddd
    29e8:	0001699e 	.word	0x0001699e
    29ec:	000160ed 	.word	0x000160ed
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    29f0:	4629      	mov	r1, r5
    29f2:	aa0c      	add	r2, sp, #48	; 0x30
    29f4:	f242 0003 	movw	r0, #8195	; 0x2003
    29f8:	f7ff fc3c 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    29fc:	4605      	mov	r5, r0
    29fe:	2800      	cmp	r0, #0
    2a00:	d1cd      	bne.n	299e <bt_init+0x1c2>
    2a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a04:	689f      	ldr	r7, [r3, #8]
    2a06:	f012 f817 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a0a:	9403      	str	r4, [sp, #12]
    2a0c:	f817 3b01 	ldrb.w	r3, [r7], #1
    2a10:	9302      	str	r3, [sp, #8]
    2a12:	9001      	str	r0, [sp, #4]
    2a14:	4bb3      	ldr	r3, [pc, #716]	; (2ce4 <bt_init+0x508>)
    2a16:	4ab4      	ldr	r2, [pc, #720]	; (2ce8 <bt_init+0x50c>)
    2a18:	49b4      	ldr	r1, [pc, #720]	; (2cec <bt_init+0x510>)
    2a1a:	9400      	str	r4, [sp, #0]
    2a1c:	48b4      	ldr	r0, [pc, #720]	; (2cf0 <bt_init+0x514>)
    2a1e:	f7fe fab5 	bl	f8c <printk>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2a22:	2208      	movs	r2, #8
    2a24:	4639      	mov	r1, r7
    2a26:	48b3      	ldr	r0, [pc, #716]	; (2cf4 <bt_init+0x518>)
    2a28:	f7ff f8e8 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a2c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a2e:	f010 ff7b 	bl	13928 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2a32:	4629      	mov	r1, r5
    2a34:	aa0c      	add	r2, sp, #48	; 0x30
    2a36:	f242 0002 	movw	r0, #8194	; 0x2002
    2a3a:	f7ff fc1b 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2a3e:	4605      	mov	r5, r0
    2a40:	2800      	cmp	r0, #0
    2a42:	d1ac      	bne.n	299e <bt_init+0x1c2>
    2a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a46:	689d      	ldr	r5, [r3, #8]
    2a48:	f011 fff6 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a4c:	9403      	str	r4, [sp, #12]
    2a4e:	782b      	ldrb	r3, [r5, #0]
    2a50:	9302      	str	r3, [sp, #8]
    2a52:	9001      	str	r0, [sp, #4]
    2a54:	4ba8      	ldr	r3, [pc, #672]	; (2cf8 <bt_init+0x51c>)
    2a56:	9400      	str	r4, [sp, #0]
    2a58:	4aa3      	ldr	r2, [pc, #652]	; (2ce8 <bt_init+0x50c>)
    2a5a:	49a4      	ldr	r1, [pc, #656]	; (2cec <bt_init+0x510>)
    2a5c:	48a4      	ldr	r0, [pc, #656]	; (2cf0 <bt_init+0x514>)
    2a5e:	f7fe fa95 	bl	f8c <printk>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2a62:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    2a66:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2a6a:	b1bb      	cbz	r3, 2a9c <bt_init+0x2c0>
    2a6c:	f011 ffe4 	bl	14a38 <_impl_k_current_get>
	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);
    2a70:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2a74:	9404      	str	r4, [sp, #16]
    2a76:	9303      	str	r3, [sp, #12]
    2a78:	78eb      	ldrb	r3, [r5, #3]
    2a7a:	9302      	str	r3, [sp, #8]
    2a7c:	9001      	str	r0, [sp, #4]
    2a7e:	4a9a      	ldr	r2, [pc, #616]	; (2ce8 <bt_init+0x50c>)
    2a80:	499a      	ldr	r1, [pc, #616]	; (2cec <bt_init+0x510>)
    2a82:	9400      	str	r4, [sp, #0]
    2a84:	4b9c      	ldr	r3, [pc, #624]	; (2cf8 <bt_init+0x51c>)
    2a86:	489d      	ldr	r0, [pc, #628]	; (2cfc <bt_init+0x520>)
    2a88:	f7fe fa80 	bl	f8c <printk>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2a8c:	78ea      	ldrb	r2, [r5, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2a8e:	489c      	ldr	r0, [pc, #624]	; (2d00 <bt_init+0x524>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2a90:	2a02      	cmp	r2, #2
    2a92:	bf28      	it	cs
    2a94:	2202      	movcs	r2, #2
    2a96:	4611      	mov	r1, r2
    2a98:	f011 ffd4 	bl	14a44 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2a9c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a9e:	f010 ff43 	bl	13928 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2aa2:	7eb5      	ldrb	r5, [r6, #26]
    2aa4:	f015 0520 	ands.w	r5, r5, #32
    2aa8:	f000 8100 	beq.w	2cac <bt_init+0x4d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2aac:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    2ab0:	071a      	lsls	r2, r3, #28
    2ab2:	d523      	bpl.n	2afc <bt_init+0x320>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2ab4:	aa0c      	add	r2, sp, #48	; 0x30
    2ab6:	2100      	movs	r1, #0
    2ab8:	f242 001c 	movw	r0, #8220	; 0x201c
    2abc:	f7ff fbda 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2ac0:	4605      	mov	r5, r0
    2ac2:	2800      	cmp	r0, #0
    2ac4:	f47f af6b 	bne.w	299e <bt_init+0x1c2>
    2ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2aca:	689d      	ldr	r5, [r3, #8]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2acc:	f011 ffb4 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2ad0:	9403      	str	r4, [sp, #12]
    2ad2:	782b      	ldrb	r3, [r5, #0]
    2ad4:	9302      	str	r3, [sp, #8]
    2ad6:	9001      	str	r0, [sp, #4]
    2ad8:	4b8a      	ldr	r3, [pc, #552]	; (2d04 <bt_init+0x528>)
    2ada:	4a83      	ldr	r2, [pc, #524]	; (2ce8 <bt_init+0x50c>)
    2adc:	9400      	str	r4, [sp, #0]
    2ade:	4983      	ldr	r1, [pc, #524]	; (2cec <bt_init+0x510>)
    2ae0:	4883      	ldr	r0, [pc, #524]	; (2cf0 <bt_init+0x514>)
    2ae2:	f7fe fa53 	bl	f8c <printk>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2ae6:	462b      	mov	r3, r5
		net_buf_unref(rsp);
    2ae8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2aea:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2aee:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2af0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    2af4:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    2af8:	f010 ff16 	bl	13928 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2afc:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    2b00:	069b      	lsls	r3, r3, #26
    2b02:	f100 8115 	bmi.w	2d30 <bt_init+0x554>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2b06:	2108      	movs	r1, #8
    2b08:	f242 0001 	movw	r0, #8193	; 0x2001
    2b0c:	f7ff fb54 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    2b10:	4605      	mov	r5, r0
    2b12:	2800      	cmp	r0, #0
    2b14:	f000 80d1 	beq.w	2cba <bt_init+0x4de>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2b18:	2108      	movs	r1, #8
    2b1a:	4408      	add	r0, r1
    2b1c:	f010 ff36 	bl	1398c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2b20:	f896 1078 	ldrb.w	r1, [r6, #120]	; 0x78
    2b24:	078f      	lsls	r7, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2b26:	bf4c      	ite	mi
    2b28:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2b2a:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2b2c:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2b2e:	f896 1079 	ldrb.w	r1, [r6, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2b32:	bf48      	it	mi
    2b34:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2b38:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2b3c:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    2b40:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2b44:	bf18      	it	ne
    2b46:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2b4a:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2b4c:	bf08      	it	eq
    2b4e:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2b52:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2b54:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2b58:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2b5a:	2200      	movs	r2, #0
    2b5c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2b5e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2b60:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2b62:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2b64:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2b66:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2b68:	4629      	mov	r1, r5
    2b6a:	f242 0001 	movw	r0, #8193	; 0x2001
    2b6e:	f7ff fb81 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2b72:	4605      	mov	r5, r0
    2b74:	2800      	cmp	r0, #0
    2b76:	f47f af12 	bne.w	299e <bt_init+0x1c2>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2b7a:	7eb3      	ldrb	r3, [r6, #26]
    2b7c:	069a      	lsls	r2, r3, #26
    2b7e:	d43f      	bmi.n	2c00 <bt_init+0x424>
	if (bt_dev.le.mtu) {
    2b80:	f8b6 1088 	ldrh.w	r1, [r6, #136]	; 0x88
    2b84:	2900      	cmp	r1, #0
    2b86:	d13b      	bne.n	2c00 <bt_init+0x424>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2b88:	aa0c      	add	r2, sp, #48	; 0x30
    2b8a:	f241 0005 	movw	r0, #4101	; 0x1005
    2b8e:	f7ff fb71 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2b92:	4605      	mov	r5, r0
    2b94:	2800      	cmp	r0, #0
    2b96:	f47f af02 	bne.w	299e <bt_init+0x1c2>
    2b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b9c:	689d      	ldr	r5, [r3, #8]
    2b9e:	f011 ff4b 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2ba2:	9403      	str	r4, [sp, #12]
    2ba4:	782b      	ldrb	r3, [r5, #0]
    2ba6:	9302      	str	r3, [sp, #8]
    2ba8:	9001      	str	r0, [sp, #4]
    2baa:	4b57      	ldr	r3, [pc, #348]	; (2d08 <bt_init+0x52c>)
    2bac:	9400      	str	r4, [sp, #0]
    2bae:	4a4e      	ldr	r2, [pc, #312]	; (2ce8 <bt_init+0x50c>)
    2bb0:	494e      	ldr	r1, [pc, #312]	; (2cec <bt_init+0x510>)
    2bb2:	484f      	ldr	r0, [pc, #316]	; (2cf0 <bt_init+0x514>)
    2bb4:	f7fe f9ea 	bl	f8c <printk>
	if (bt_dev.le.mtu) {
    2bb8:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2bbc:	b9eb      	cbnz	r3, 2bfa <bt_init+0x41e>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2bbe:	78aa      	ldrb	r2, [r5, #2]
    2bc0:	786b      	ldrb	r3, [r5, #1]
    2bc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2bc6:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2bca:	88ad      	ldrh	r5, [r5, #4]
    2bcc:	f011 ff34 	bl	14a38 <_impl_k_current_get>
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2bd0:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2bd4:	9303      	str	r3, [sp, #12]
    2bd6:	9001      	str	r0, [sp, #4]
    2bd8:	4a43      	ldr	r2, [pc, #268]	; (2ce8 <bt_init+0x50c>)
    2bda:	4944      	ldr	r1, [pc, #272]	; (2cec <bt_init+0x510>)
    2bdc:	9404      	str	r4, [sp, #16]
    2bde:	9502      	str	r5, [sp, #8]
    2be0:	9400      	str	r4, [sp, #0]
    2be2:	4b49      	ldr	r3, [pc, #292]	; (2d08 <bt_init+0x52c>)
    2be4:	4849      	ldr	r0, [pc, #292]	; (2d0c <bt_init+0x530>)
    2be6:	f7fe f9d1 	bl	f8c <printk>
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2bea:	2d02      	cmp	r5, #2
    2bec:	462a      	mov	r2, r5
    2bee:	bf28      	it	cs
    2bf0:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2bf2:	4611      	mov	r1, r2
    2bf4:	4842      	ldr	r0, [pc, #264]	; (2d00 <bt_init+0x524>)
    2bf6:	f011 ff25 	bl	14a44 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2bfa:	980c      	ldr	r0, [sp, #48]	; 0x30
    2bfc:	f010 fe94 	bl	13928 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2c00:	2108      	movs	r1, #8
    2c02:	f640 4001 	movw	r0, #3073	; 0xc01
    2c06:	f7ff fad7 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    2c0a:	4605      	mov	r5, r0
    2c0c:	2800      	cmp	r0, #0
    2c0e:	d054      	beq.n	2cba <bt_init+0x4de>
	ev = net_buf_add(buf, sizeof(*ev));
    2c10:	2108      	movs	r1, #8
    2c12:	4408      	add	r0, r1
    2c14:	f010 feba 	bl	1398c <net_buf_simple_add>
	dst[0] = val;
    2c18:	2310      	movs	r3, #16
    2c1a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2c1c:	2388      	movs	r3, #136	; 0x88
    2c1e:	7043      	strb	r3, [r0, #1]
    2c20:	2302      	movs	r3, #2
	dst[0] = val;
    2c22:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2c24:	70c3      	strb	r3, [r0, #3]
    2c26:	2320      	movs	r3, #32
	dst[0] = val;
    2c28:	7082      	strb	r2, [r0, #2]
    2c2a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2c2c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2c2e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2c30:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2c32:	4629      	mov	r1, r5
    2c34:	f640 4001 	movw	r0, #3073	; 0xc01
    2c38:	f7ff fb1c 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2c3c:	4605      	mov	r5, r0
    2c3e:	2800      	cmp	r0, #0
    2c40:	f47f aead 	bne.w	299e <bt_init+0x1c2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2c44:	4601      	mov	r1, r0
    2c46:	aa0c      	add	r2, sp, #48	; 0x30
    2c48:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2c4c:	f7ff fb12 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2c50:	2800      	cmp	r0, #0
    2c52:	f000 809a 	beq.w	2d8a <bt_init+0x5ae>
		BT_WARN("Vendor HCI extensions not available");
    2c56:	4b2e      	ldr	r3, [pc, #184]	; (2d10 <bt_init+0x534>)
    2c58:	4a2e      	ldr	r2, [pc, #184]	; (2d14 <bt_init+0x538>)
    2c5a:	4924      	ldr	r1, [pc, #144]	; (2cec <bt_init+0x510>)
    2c5c:	482e      	ldr	r0, [pc, #184]	; (2d18 <bt_init+0x53c>)
    2c5e:	9401      	str	r4, [sp, #4]
    2c60:	9400      	str	r4, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    2c62:	f7fe f993 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2c66:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2c68:	2207      	movs	r2, #7
    2c6a:	a90c      	add	r1, sp, #48	; 0x30
    2c6c:	482b      	ldr	r0, [pc, #172]	; (2d1c <bt_init+0x540>)
    2c6e:	930c      	str	r3, [sp, #48]	; 0x30
    2c70:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2c74:	f7fe ffad 	bl	1bd2 <memcmp>
    2c78:	2800      	cmp	r0, #0
    2c7a:	f040 8100 	bne.w	2e7e <bt_init+0x6a2>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2c7e:	f011 fedb 	bl	14a38 <_impl_k_current_get>
		BT_DBG("No public address. Trying to set static random.");
    2c82:	4b27      	ldr	r3, [pc, #156]	; (2d20 <bt_init+0x544>)
    2c84:	9001      	str	r0, [sp, #4]
    2c86:	9402      	str	r4, [sp, #8]
    2c88:	9400      	str	r4, [sp, #0]
    2c8a:	4a17      	ldr	r2, [pc, #92]	; (2ce8 <bt_init+0x50c>)
    2c8c:	4917      	ldr	r1, [pc, #92]	; (2cec <bt_init+0x510>)
    2c8e:	4825      	ldr	r0, [pc, #148]	; (2d24 <bt_init+0x548>)
    2c90:	f7fe f97c 	bl	f8c <printk>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2c94:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    2c98:	07db      	lsls	r3, r3, #31
    2c9a:	f100 8111 	bmi.w	2ec0 <bt_init+0x6e4>
		BT_WARN("Read Static Addresses command not available");
    2c9e:	9401      	str	r4, [sp, #4]
    2ca0:	9400      	str	r4, [sp, #0]
    2ca2:	4b21      	ldr	r3, [pc, #132]	; (2d28 <bt_init+0x54c>)
    2ca4:	4a1b      	ldr	r2, [pc, #108]	; (2d14 <bt_init+0x538>)
    2ca6:	4911      	ldr	r1, [pc, #68]	; (2cec <bt_init+0x510>)
    2ca8:	4820      	ldr	r0, [pc, #128]	; (2d2c <bt_init+0x550>)
    2caa:	e116      	b.n	2eda <bt_init+0x6fe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2cac:	2102      	movs	r1, #2
    2cae:	f640 406d 	movw	r0, #3181	; 0xc6d
    2cb2:	f7ff fa81 	bl	21b8 <bt_hci_cmd_create>
		if (!buf) {
    2cb6:	4607      	mov	r7, r0
    2cb8:	b910      	cbnz	r0, 2cc0 <bt_init+0x4e4>
		return -ENOBUFS;
    2cba:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2cbe:	e66e      	b.n	299e <bt_init+0x1c2>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2cc0:	2102      	movs	r1, #2
    2cc2:	3008      	adds	r0, #8
    2cc4:	f010 fe62 	bl	1398c <net_buf_simple_add>
		cp_le->le = 0x01;
    2cc8:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2cca:	7045      	strb	r5, [r0, #1]
		cp_le->le = 0x01;
    2ccc:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2cce:	462a      	mov	r2, r5
    2cd0:	4639      	mov	r1, r7
    2cd2:	f640 406d 	movw	r0, #3181	; 0xc6d
    2cd6:	f7ff facd 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2cda:	4605      	mov	r5, r0
    2cdc:	2800      	cmp	r0, #0
    2cde:	f43f aee5 	beq.w	2aac <bt_init+0x2d0>
    2ce2:	e65c      	b.n	299e <bt_init+0x1c2>
    2ce4:	00015d31 	.word	0x00015d31
    2ce8:	000169e6 	.word	0x000169e6
    2cec:	000169ed 	.word	0x000169ed
    2cf0:	000160ce 	.word	0x000160ce
    2cf4:	20003b08 	.word	0x20003b08
    2cf8:	00015d65 	.word	0x00015d65
    2cfc:	00016121 	.word	0x00016121
    2d00:	20003b1c 	.word	0x20003b1c
    2d04:	00015dc0 	.word	0x00015dc0
    2d08:	00015d4b 	.word	0x00015d4b
    2d0c:	00016155 	.word	0x00016155
    2d10:	00015e17 	.word	0x00015e17
    2d14:	00016a28 	.word	0x00016a28
    2d18:	0001618d 	.word	0x0001618d
    2d1c:	20003a90 	.word	0x20003a90
    2d20:	00015e23 	.word	0x00015e23
    2d24:	000162c1 	.word	0x000162c1
    2d28:	00015df8 	.word	0x00015df8
    2d2c:	0001636f 	.word	0x0001636f
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2d30:	aa0c      	add	r2, sp, #48	; 0x30
    2d32:	2100      	movs	r1, #0
    2d34:	f242 002f 	movw	r0, #8239	; 0x202f
    2d38:	f7ff fa9c 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2d3c:	4605      	mov	r5, r0
    2d3e:	2800      	cmp	r0, #0
    2d40:	f47f ae2d 	bne.w	299e <bt_init+0x1c2>
		rp = (void *)rsp->data;
    2d44:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d46:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2d48:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2d4c:	f8b3 9003 	ldrh.w	r9, [r3, #3]
		net_buf_unref(rsp);
    2d50:	f010 fdea 	bl	13928 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2d54:	2104      	movs	r1, #4
    2d56:	f242 0024 	movw	r0, #8228	; 0x2024
    2d5a:	f7ff fa2d 	bl	21b8 <bt_hci_cmd_create>
		if (!buf) {
    2d5e:	4607      	mov	r7, r0
    2d60:	2800      	cmp	r0, #0
    2d62:	d0aa      	beq.n	2cba <bt_init+0x4de>
		cp = net_buf_add(buf, sizeof(*cp));
    2d64:	2104      	movs	r1, #4
    2d66:	3008      	adds	r0, #8
    2d68:	f010 fe10 	bl	1398c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2d6c:	462a      	mov	r2, r5
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2d6e:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2d72:	f8a0 9002 	strh.w	r9, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2d76:	4639      	mov	r1, r7
    2d78:	f242 0024 	movw	r0, #8228	; 0x2024
    2d7c:	f7ff fa7a 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2d80:	4605      	mov	r5, r0
    2d82:	2800      	cmp	r0, #0
    2d84:	f43f aebf 	beq.w	2b06 <bt_init+0x32a>
    2d88:	e609      	b.n	299e <bt_init+0x1c2>
	rp.info = (void *)rsp->data;
    2d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2d8c:	4971      	ldr	r1, [pc, #452]	; (2f54 <bt_init+0x778>)
	rp.info = (void *)rsp->data;
    2d8e:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2d90:	4871      	ldr	r0, [pc, #452]	; (2f58 <bt_init+0x77c>)
    2d92:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    2d96:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2d98:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2d9a:	bf96      	itet	ls
    2d9c:	4a6f      	ldrls	r2, [pc, #444]	; (2f5c <bt_init+0x780>)
	return "unknown";
    2d9e:	4a70      	ldrhi	r2, [pc, #448]	; (2f60 <bt_init+0x784>)
		return plat_str[platform];
    2da0:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2da4:	9201      	str	r2, [sp, #4]
    2da6:	4b6f      	ldr	r3, [pc, #444]	; (2f64 <bt_init+0x788>)
    2da8:	4a6f      	ldr	r2, [pc, #444]	; (2f68 <bt_init+0x78c>)
    2daa:	9403      	str	r4, [sp, #12]
    2dac:	9400      	str	r4, [sp, #0]
    2dae:	f7fe f8ed 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2db2:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2db6:	f8b5 2003 	ldrh.w	r2, [r5, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2dba:	2b02      	cmp	r3, #2
    2dbc:	d13a      	bne.n	2e34 <bt_init+0x658>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2dbe:	2a02      	cmp	r2, #2
    2dc0:	d838      	bhi.n	2e34 <bt_init+0x658>
		return nordic_str[variant];
    2dc2:	4b6a      	ldr	r3, [pc, #424]	; (2f6c <bt_init+0x790>)
    2dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2dc8:	9202      	str	r2, [sp, #8]
    2dca:	9301      	str	r3, [sp, #4]
    2dcc:	4a66      	ldr	r2, [pc, #408]	; (2f68 <bt_init+0x78c>)
    2dce:	4b65      	ldr	r3, [pc, #404]	; (2f64 <bt_init+0x788>)
    2dd0:	4960      	ldr	r1, [pc, #384]	; (2f54 <bt_init+0x778>)
    2dd2:	9403      	str	r4, [sp, #12]
    2dd4:	9400      	str	r4, [sp, #0]
    2dd6:	4866      	ldr	r0, [pc, #408]	; (2f70 <bt_init+0x794>)
    2dd8:	f7fe f8d8 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2ddc:	796b      	ldrb	r3, [r5, #5]
    2dde:	9406      	str	r4, [sp, #24]
    2de0:	f8d5 1009 	ldr.w	r1, [r5, #9]
    2de4:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2de6:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2de8:	f8b5 1007 	ldrh.w	r1, [r5, #7]
		return var_str[variant];
    2dec:	bf98      	it	ls
    2dee:	4a61      	ldrls	r2, [pc, #388]	; (2f74 <bt_init+0x798>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2df0:	9104      	str	r1, [sp, #16]
    2df2:	79a9      	ldrb	r1, [r5, #6]
		return var_str[variant];
    2df4:	bf94      	ite	ls
    2df6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2dfa:	4a59      	ldrhi	r2, [pc, #356]	; (2f60 <bt_init+0x784>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2dfc:	9103      	str	r1, [sp, #12]
    2dfe:	9302      	str	r3, [sp, #8]
    2e00:	4954      	ldr	r1, [pc, #336]	; (2f54 <bt_init+0x778>)
    2e02:	4b58      	ldr	r3, [pc, #352]	; (2f64 <bt_init+0x788>)
    2e04:	9201      	str	r2, [sp, #4]
    2e06:	9400      	str	r4, [sp, #0]
    2e08:	4a57      	ldr	r2, [pc, #348]	; (2f68 <bt_init+0x78c>)
    2e0a:	485b      	ldr	r0, [pc, #364]	; (2f78 <bt_init+0x79c>)
    2e0c:	f7fe f8be 	bl	f8c <printk>
	net_buf_unref(rsp);
    2e10:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e12:	f010 fd89 	bl	13928 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2e16:	aa0c      	add	r2, sp, #48	; 0x30
    2e18:	2100      	movs	r1, #0
    2e1a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2e1e:	f7ff fa29 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2e22:	4605      	mov	r5, r0
    2e24:	b140      	cbz	r0, 2e38 <bt_init+0x65c>
		BT_WARN("Failed to read supported vendor features");
    2e26:	9401      	str	r4, [sp, #4]
    2e28:	9400      	str	r4, [sp, #0]
    2e2a:	4b4e      	ldr	r3, [pc, #312]	; (2f64 <bt_init+0x788>)
    2e2c:	4a53      	ldr	r2, [pc, #332]	; (2f7c <bt_init+0x7a0>)
    2e2e:	4949      	ldr	r1, [pc, #292]	; (2f54 <bt_init+0x778>)
    2e30:	4853      	ldr	r0, [pc, #332]	; (2f80 <bt_init+0x7a4>)
    2e32:	e716      	b.n	2c62 <bt_init+0x486>
		return "unknown";
    2e34:	4b4a      	ldr	r3, [pc, #296]	; (2f60 <bt_init+0x784>)
    2e36:	e7c7      	b.n	2dc8 <bt_init+0x5ec>
	rp.cmds = (void *)rsp->data;
    2e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2e3a:	4852      	ldr	r0, [pc, #328]	; (2f84 <bt_init+0x7a8>)
    2e3c:	6899      	ldr	r1, [r3, #8]
    2e3e:	2202      	movs	r2, #2
    2e40:	3101      	adds	r1, #1
    2e42:	f7fe fedb 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2e46:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e48:	f010 fd6e 	bl	13928 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2e4c:	aa0c      	add	r2, sp, #48	; 0x30
    2e4e:	4629      	mov	r1, r5
    2e50:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2e54:	f7ff fa0e 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    2e58:	b130      	cbz	r0, 2e68 <bt_init+0x68c>
		BT_WARN("Failed to read supported vendor commands");
    2e5a:	9401      	str	r4, [sp, #4]
    2e5c:	9400      	str	r4, [sp, #0]
    2e5e:	4b41      	ldr	r3, [pc, #260]	; (2f64 <bt_init+0x788>)
    2e60:	4a46      	ldr	r2, [pc, #280]	; (2f7c <bt_init+0x7a0>)
    2e62:	493c      	ldr	r1, [pc, #240]	; (2f54 <bt_init+0x778>)
    2e64:	4848      	ldr	r0, [pc, #288]	; (2f88 <bt_init+0x7ac>)
    2e66:	e6fc      	b.n	2c62 <bt_init+0x486>
	rp.feat = (void *)rsp->data;
    2e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2e6a:	4848      	ldr	r0, [pc, #288]	; (2f8c <bt_init+0x7b0>)
    2e6c:	6899      	ldr	r1, [r3, #8]
    2e6e:	2201      	movs	r2, #1
    2e70:	4411      	add	r1, r2
    2e72:	f7fe fec3 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2e76:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e78:	f010 fd56 	bl	13928 <net_buf_unref>
    2e7c:	e6f3      	b.n	2c66 <bt_init+0x48a>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2e7e:	4b44      	ldr	r3, [pc, #272]	; (2f90 <bt_init+0x7b4>)
    2e80:	6818      	ldr	r0, [r3, #0]
    2e82:	889a      	ldrh	r2, [r3, #4]
    2e84:	900a      	str	r0, [sp, #40]	; 0x28
    2e86:	799b      	ldrb	r3, [r3, #6]
    2e88:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2e8c:	a90a      	add	r1, sp, #40	; 0x28
    2e8e:	2207      	movs	r2, #7
    2e90:	4840      	ldr	r0, [pc, #256]	; (2f94 <bt_init+0x7b8>)
    2e92:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2e96:	f7fe fe9c 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2e9a:	2800      	cmp	r0, #0
    2e9c:	f43f aeef 	beq.w	2c7e <bt_init+0x4a2>
		bt_dev_show_info();
    2ea0:	f7ff fb64 	bl	256c <bt_dev_show_info>
		err = bt_conn_init();
    2ea4:	f002 f9f0 	bl	5288 <bt_conn_init>
		if (err) {
    2ea8:	4605      	mov	r5, r0
    2eaa:	2800      	cmp	r0, #0
    2eac:	f47f ad77 	bne.w	299e <bt_init+0x1c2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2eb0:	2102      	movs	r1, #2
    2eb2:	4839      	ldr	r0, [pc, #228]	; (2f98 <bt_init+0x7bc>)
    2eb4:	f7ff f8cb 	bl	204e <atomic_or>
	bt_le_scan_update(false);
    2eb8:	4628      	mov	r0, r5
    2eba:	f7ff fc5d 	bl	2778 <bt_le_scan_update>
    2ebe:	e56e      	b.n	299e <bt_init+0x1c2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2ec0:	aa09      	add	r2, sp, #36	; 0x24
    2ec2:	2100      	movs	r1, #0
    2ec4:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2ec8:	f7ff f9d4 	bl	2274 <bt_hci_cmd_send_sync>
		if (err) {
    2ecc:	b140      	cbz	r0, 2ee0 <bt_init+0x704>
			BT_WARN("Failed to read static addresses");
    2ece:	4b33      	ldr	r3, [pc, #204]	; (2f9c <bt_init+0x7c0>)
    2ed0:	4a2a      	ldr	r2, [pc, #168]	; (2f7c <bt_init+0x7a0>)
    2ed2:	4920      	ldr	r1, [pc, #128]	; (2f54 <bt_init+0x778>)
    2ed4:	4832      	ldr	r0, [pc, #200]	; (2fa0 <bt_init+0x7c4>)
    2ed6:	9401      	str	r4, [sp, #4]
    2ed8:	9400      	str	r4, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    2eda:	f7fe f857 	bl	f8c <printk>
    2ede:	e026      	b.n	2f2e <bt_init+0x752>
		rp = (void *)rsp->data;
    2ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ee2:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2ee4:	784b      	ldrb	r3, [r1, #1]
    2ee6:	b1bb      	cbz	r3, 2f18 <bt_init+0x73c>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2ee8:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2eea:	2206      	movs	r2, #6
    2eec:	3102      	adds	r1, #2
    2eee:	482d      	ldr	r0, [pc, #180]	; (2fa4 <bt_init+0x7c8>)
    2ef0:	7033      	strb	r3, [r6, #0]
    2ef2:	f7fe fe83 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    2ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
    2ef8:	f010 fd16 	bl	13928 <net_buf_unref>
		return bt_set_static_addr();
    2efc:	f7ff fb06 	bl	250c <bt_set_static_addr>
    2f00:	4605      	mov	r5, r0
		if (err) {
    2f02:	2800      	cmp	r0, #0
    2f04:	d0cc      	beq.n	2ea0 <bt_init+0x6c4>
			BT_ERR("Unable to set identity address");
    2f06:	9401      	str	r4, [sp, #4]
    2f08:	9400      	str	r4, [sp, #0]
    2f0a:	4b27      	ldr	r3, [pc, #156]	; (2fa8 <bt_init+0x7cc>)
    2f0c:	4a27      	ldr	r2, [pc, #156]	; (2fac <bt_init+0x7d0>)
    2f0e:	4911      	ldr	r1, [pc, #68]	; (2f54 <bt_init+0x778>)
    2f10:	4827      	ldr	r0, [pc, #156]	; (2fb0 <bt_init+0x7d4>)
    2f12:	f7fe f83b 	bl	f8c <printk>
    2f16:	e542      	b.n	299e <bt_init+0x1c2>
		BT_WARN("No static addresses stored in controller");
    2f18:	9401      	str	r4, [sp, #4]
    2f1a:	9400      	str	r4, [sp, #0]
    2f1c:	4b1f      	ldr	r3, [pc, #124]	; (2f9c <bt_init+0x7c0>)
    2f1e:	4a17      	ldr	r2, [pc, #92]	; (2f7c <bt_init+0x7a0>)
    2f20:	490c      	ldr	r1, [pc, #48]	; (2f54 <bt_init+0x778>)
    2f22:	4824      	ldr	r0, [pc, #144]	; (2fb4 <bt_init+0x7d8>)
    2f24:	f7fe f832 	bl	f8c <printk>
		net_buf_unref(rsp);
    2f28:	9809      	ldr	r0, [sp, #36]	; 0x24
    2f2a:	f010 fcfd 	bl	13928 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2f2e:	4819      	ldr	r0, [pc, #100]	; (2f94 <bt_init+0x7b8>)
    2f30:	f7ff fade 	bl	24f0 <bt_addr_le_create_static>
		if (err) {
    2f34:	4605      	mov	r5, r0
    2f36:	2800      	cmp	r0, #0
    2f38:	d1e5      	bne.n	2f06 <bt_init+0x72a>
		BT_WARN("Using temporary static random address %s",
    2f3a:	481a      	ldr	r0, [pc, #104]	; (2fa4 <bt_init+0x7c8>)
    2f3c:	f7fe fee4 	bl	1d08 <bt_addr_str>
    2f40:	9402      	str	r4, [sp, #8]
    2f42:	9001      	str	r0, [sp, #4]
    2f44:	9400      	str	r4, [sp, #0]
    2f46:	4b15      	ldr	r3, [pc, #84]	; (2f9c <bt_init+0x7c0>)
    2f48:	4a0c      	ldr	r2, [pc, #48]	; (2f7c <bt_init+0x7a0>)
    2f4a:	4902      	ldr	r1, [pc, #8]	; (2f54 <bt_init+0x778>)
    2f4c:	481a      	ldr	r0, [pc, #104]	; (2fb8 <bt_init+0x7dc>)
    2f4e:	f7fe f81d 	bl	f8c <printk>
    2f52:	e7d3      	b.n	2efc <bt_init+0x720>
    2f54:	000169ed 	.word	0x000169ed
    2f58:	000161c1 	.word	0x000161c1
    2f5c:	00016d1c 	.word	0x00016d1c
    2f60:	00016e24 	.word	0x00016e24
    2f64:	00015e17 	.word	0x00015e17
    2f68:	00015ea3 	.word	0x00015ea3
    2f6c:	00016d10 	.word	0x00016d10
    2f70:	000161ea 	.word	0x000161ea
    2f74:	00016e14 	.word	0x00016e14
    2f78:	00016212 	.word	0x00016212
    2f7c:	00016a28 	.word	0x00016a28
    2f80:	0001624f 	.word	0x0001624f
    2f84:	20003aef 	.word	0x20003aef
    2f88:	00016288 	.word	0x00016288
    2f8c:	20003aee 	.word	0x20003aee
    2f90:	00015510 	.word	0x00015510
    2f94:	20003a90 	.word	0x20003a90
    2f98:	20003b00 	.word	0x20003b00
    2f9c:	00015df8 	.word	0x00015df8
    2fa0:	00016306 	.word	0x00016306
    2fa4:	20003a91 	.word	0x20003a91
    2fa8:	00015e23 	.word	0x00015e23
    2fac:	0001699e 	.word	0x0001699e
    2fb0:	000163e4 	.word	0x000163e4
    2fb4:	00016336 	.word	0x00016336
    2fb8:	000163ab 	.word	0x000163ab

00002fbc <init_work>:

static void init_work(struct k_work *work)
{
    2fbc:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2fbe:	f7ff fc0d 	bl	27dc <bt_init>
	if (ready_cb) {
    2fc2:	4b03      	ldr	r3, [pc, #12]	; (2fd0 <init_work+0x14>)
    2fc4:	681b      	ldr	r3, [r3, #0]
    2fc6:	b113      	cbz	r3, 2fce <init_work+0x12>
		ready_cb(err);
	}
}
    2fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2fcc:	4718      	bx	r3
    2fce:	bd10      	pop	{r4, pc}
    2fd0:	200002f8 	.word	0x200002f8

00002fd4 <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    2fd4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2fd6:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2fd8:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2fda:	f242 0032 	movw	r0, #8242	; 0x2032
    2fde:	f7ff f8eb 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    2fe2:	4605      	mov	r5, r0
    2fe4:	b198      	cbz	r0, 300e <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2fe6:	2107      	movs	r1, #7
    2fe8:	3008      	adds	r0, #8
    2fea:	f010 fccf 	bl	1398c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2fee:	8823      	ldrh	r3, [r4, #0]
    2ff0:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2ff2:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2ff4:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2ff6:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2ff8:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2ffa:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2ffc:	7144      	strb	r4, [r0, #5]
    2ffe:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    3000:	4629      	mov	r1, r5
    3002:	f242 0032 	movw	r0, #8242	; 0x2032
    3006:	f7ff fb29 	bl	265c <bt_hci_cmd_send>
	return 0;
    300a:	4620      	mov	r0, r4
    300c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    300e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3012:	bd38      	pop	{r3, r4, r5, pc}

00003014 <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    3014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3016:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    3018:	aa01      	add	r2, sp, #4
    301a:	2100      	movs	r1, #0
    301c:	f242 002f 	movw	r0, #8239	; 0x202f
    3020:	f7ff f928 	bl	2274 <bt_hci_cmd_send_sync>
	if (err) {
    3024:	b9d8      	cbnz	r0, 305e <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    3026:	9801      	ldr	r0, [sp, #4]
    3028:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    302a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    302e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    3032:	f010 fc79 	bl	13928 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    3036:	2106      	movs	r1, #6
    3038:	f242 0022 	movw	r0, #8226	; 0x2022
    303c:	f7ff f8bc 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    3040:	4604      	mov	r4, r0
    3042:	b170      	cbz	r0, 3062 <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    3044:	2106      	movs	r1, #6
    3046:	3008      	adds	r0, #8
    3048:	f010 fca0 	bl	1398c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    304c:	883b      	ldrh	r3, [r7, #0]
    304e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    3050:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    3052:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    3054:	4621      	mov	r1, r4
    3056:	f242 0022 	movw	r0, #8226	; 0x2022
    305a:	f7ff faff 	bl	265c <bt_hci_cmd_send>
}
    305e:	b003      	add	sp, #12
    3060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    3062:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3066:	e7fa      	b.n	305e <hci_le_set_data_len.isra.29+0x4a>

00003068 <le_enh_conn_complete>:
{
    3068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    306c:	b08d      	sub	sp, #52	; 0x34
    306e:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3070:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3074:	4e70      	ldr	r6, [pc, #448]	; (3238 <le_enh_conn_complete+0x1d0>)
    3076:	f011 fcdf 	bl	14a38 <_impl_k_current_get>
    307a:	1d2c      	adds	r4, r5, #4
    307c:	4681      	mov	r9, r0
    307e:	4620      	mov	r0, r4
    3080:	f895 a000 	ldrb.w	sl, [r5]
    3084:	f895 b003 	ldrb.w	fp, [r5, #3]
    3088:	f7fe fe64 	bl	1d54 <bt_addr_le_str>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    308c:	fa1f f887 	uxth.w	r8, r7
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3090:	9005      	str	r0, [sp, #20]
    3092:	4b6a      	ldr	r3, [pc, #424]	; (323c <le_enh_conn_complete+0x1d4>)
    3094:	9606      	str	r6, [sp, #24]
    3096:	f8cd b010 	str.w	fp, [sp, #16]
    309a:	f8cd 800c 	str.w	r8, [sp, #12]
    309e:	e88d 0640 	stmia.w	sp, {r6, r9, sl}
    30a2:	4a67      	ldr	r2, [pc, #412]	; (3240 <le_enh_conn_complete+0x1d8>)
    30a4:	4967      	ldr	r1, [pc, #412]	; (3244 <le_enh_conn_complete+0x1dc>)
    30a6:	4868      	ldr	r0, [pc, #416]	; (3248 <le_enh_conn_complete+0x1e0>)
    30a8:	f7fd ff70 	bl	f8c <printk>
	if (evt->status) {
    30ac:	782b      	ldrb	r3, [r5, #0]
    30ae:	b183      	cbz	r3, 30d2 <le_enh_conn_complete+0x6a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    30b0:	2102      	movs	r1, #2
    30b2:	2000      	movs	r0, #0
    30b4:	f001 fc7a 	bl	49ac <bt_conn_lookup_state_le>
		if (!conn) {
    30b8:	4604      	mov	r4, r0
    30ba:	b138      	cbz	r0, 30cc <le_enh_conn_complete+0x64>
		conn->err = evt->status;
    30bc:	782b      	ldrb	r3, [r5, #0]
    30be:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    30c0:	2100      	movs	r1, #0
    30c2:	f001 fd47 	bl	4b54 <bt_conn_set_state>
		bt_conn_unref(conn);
    30c6:	4620      	mov	r0, r4
    30c8:	f001 fc8e 	bl	49e8 <bt_conn_unref>
}
    30cc:	b00d      	add	sp, #52	; 0x34
    30ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    30d2:	4621      	mov	r1, r4
    30d4:	a80a      	add	r0, sp, #40	; 0x28
    30d6:	f7fe ffb7 	bl	2048 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    30da:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    30de:	3b02      	subs	r3, #2
    30e0:	b2db      	uxtb	r3, r3
    30e2:	2b01      	cmp	r3, #1
    30e4:	d828      	bhi.n	3138 <le_enh_conn_complete+0xd0>
    30e6:	2206      	movs	r2, #6
    30e8:	f105 0111 	add.w	r1, r5, #17
    30ec:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    30f0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    30f4:	f7fe fd82 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    30f8:	2301      	movs	r3, #1
    30fa:	f88d 3020 	strb.w	r3, [sp, #32]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    30fe:	2102      	movs	r1, #2
    3100:	a80a      	add	r0, sp, #40	; 0x28
    3102:	f001 fc53 	bl	49ac <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3106:	78eb      	ldrb	r3, [r5, #3]
    3108:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    310a:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    310c:	d109      	bne.n	3122 <le_enh_conn_complete+0xba>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    310e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    3112:	484e      	ldr	r0, [pc, #312]	; (324c <le_enh_conn_complete+0x1e4>)
    3114:	f7fe ffac 	bl	2070 <atomic_and>
		if (!conn) {
    3118:	b99c      	cbnz	r4, 3142 <le_enh_conn_complete+0xda>
			conn = bt_conn_add_le(&id_addr);
    311a:	a80a      	add	r0, sp, #40	; 0x28
    311c:	f001 fb9a 	bl	4854 <bt_conn_add_le>
    3120:	4604      	mov	r4, r0
	if (!conn) {
    3122:	b974      	cbnz	r4, 3142 <le_enh_conn_complete+0xda>
		BT_ERR("Unable to add new conn for handle %u", handle);
    3124:	9602      	str	r6, [sp, #8]
    3126:	e88d 0140 	stmia.w	sp, {r6, r8}
    312a:	4b44      	ldr	r3, [pc, #272]	; (323c <le_enh_conn_complete+0x1d4>)
    312c:	4a48      	ldr	r2, [pc, #288]	; (3250 <le_enh_conn_complete+0x1e8>)
    312e:	4945      	ldr	r1, [pc, #276]	; (3244 <le_enh_conn_complete+0x1dc>)
    3130:	4848      	ldr	r0, [pc, #288]	; (3254 <le_enh_conn_complete+0x1ec>)
    3132:	f7fd ff2b 	bl	f8c <printk>
		return;
    3136:	e7c9      	b.n	30cc <le_enh_conn_complete+0x64>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    3138:	4621      	mov	r1, r4
    313a:	a808      	add	r0, sp, #32
    313c:	f7fe ff84 	bl	2048 <bt_addr_le_copy>
    3140:	e7dd      	b.n	30fe <le_enh_conn_complete+0x96>
	conn->handle   = handle;
    3142:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3144:	a90a      	add	r1, sp, #40	; 0x28
	conn->handle   = handle;
    3146:	f820 7b44 	strh.w	r7, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    314a:	f7fe ff7d 	bl	2048 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    314e:	7e2a      	ldrb	r2, [r5, #24]
    3150:	7deb      	ldrb	r3, [r5, #23]
    3152:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3156:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    315a:	7eaa      	ldrb	r2, [r5, #26]
    315c:	7e6b      	ldrb	r3, [r5, #25]
    315e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3162:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3166:	7eeb      	ldrb	r3, [r5, #27]
    3168:	7f2a      	ldrb	r2, [r5, #28]
    316a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    316e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    3172:	78ee      	ldrb	r6, [r5, #3]
    3174:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    3176:	2e01      	cmp	r6, #1
    3178:	d11a      	bne.n	31b0 <le_enh_conn_complete+0x148>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    317a:	4f37      	ldr	r7, [pc, #220]	; (3258 <le_enh_conn_complete+0x1f0>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    317c:	a908      	add	r1, sp, #32
    317e:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    3182:	f7fe ff61 	bl	2048 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3186:	4639      	mov	r1, r7
    3188:	f104 0052 	add.w	r0, r4, #82	; 0x52
    318c:	f7fe ff5c 	bl	2048 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3190:	2107      	movs	r1, #7
    3192:	f107 0070 	add.w	r0, r7, #112	; 0x70
    3196:	f7ff f801 	bl	219c <atomic_test_bit>
    319a:	b148      	cbz	r0, 31b0 <le_enh_conn_complete+0x148>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    319c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    31a0:	2200      	movs	r2, #0
    31a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    31a6:	4313      	orrs	r3, r2
    31a8:	d002      	beq.n	31b0 <le_enh_conn_complete+0x148>
			set_advertise_enable(true);
    31aa:	4630      	mov	r0, r6
    31ac:	f7ff f956 	bl	245c <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    31b0:	2103      	movs	r1, #3
    31b2:	4620      	mov	r0, r4
    31b4:	f001 fcce 	bl	4b54 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    31b8:	7a63      	ldrb	r3, [r4, #9]
    31ba:	2b03      	cmp	r3, #3
    31bc:	d118      	bne.n	31f0 <le_enh_conn_complete+0x188>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    31be:	78eb      	ldrb	r3, [r5, #3]
    31c0:	b123      	cbz	r3, 31cc <le_enh_conn_complete+0x164>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    31c2:	4b25      	ldr	r3, [pc, #148]	; (3258 <le_enh_conn_complete+0x1f0>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    31c4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    31c8:	0719      	lsls	r1, r3, #28
    31ca:	d518      	bpl.n	31fe <le_enh_conn_complete+0x196>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    31cc:	2102      	movs	r1, #2
    31ce:	f242 0016 	movw	r0, #8214	; 0x2016
    31d2:	f7fe fff1 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    31d6:	4605      	mov	r5, r0
    31d8:	b188      	cbz	r0, 31fe <le_enh_conn_complete+0x196>
	cp = net_buf_add(buf, sizeof(*cp));
    31da:	2102      	movs	r1, #2
    31dc:	3008      	adds	r0, #8
    31de:	f010 fbd5 	bl	1398c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    31e2:	8823      	ldrh	r3, [r4, #0]
    31e4:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    31e6:	4629      	mov	r1, r5
    31e8:	f242 0016 	movw	r0, #8214	; 0x2016
    31ec:	f7ff fa36 	bl	265c <bt_hci_cmd_send>
	bt_conn_unref(conn);
    31f0:	4620      	mov	r0, r4
    31f2:	f001 fbf9 	bl	49e8 <bt_conn_unref>
	bt_le_scan_update(false);
    31f6:	2000      	movs	r0, #0
    31f8:	f7ff fabe 	bl	2778 <bt_le_scan_update>
    31fc:	e766      	b.n	30cc <le_enh_conn_complete+0x64>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    31fe:	4d16      	ldr	r5, [pc, #88]	; (3258 <le_enh_conn_complete+0x1f0>)
    3200:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3204:	07d2      	lsls	r2, r2, #31
    3206:	d508      	bpl.n	321a <le_enh_conn_complete+0x1b2>
		err = hci_le_set_phy(conn);
    3208:	4620      	mov	r0, r4
    320a:	f7ff fee3 	bl	2fd4 <hci_le_set_phy.isra.28>
		if (!err) {
    320e:	b920      	cbnz	r0, 321a <le_enh_conn_complete+0x1b2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3210:	2180      	movs	r1, #128	; 0x80
    3212:	1d20      	adds	r0, r4, #4
    3214:	f7fe ff1b 	bl	204e <atomic_or>
    3218:	e7ea      	b.n	31f0 <le_enh_conn_complete+0x188>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    321a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    321e:	069b      	lsls	r3, r3, #26
    3220:	d506      	bpl.n	3230 <le_enh_conn_complete+0x1c8>
		err = hci_le_set_data_len(conn);
    3222:	4620      	mov	r0, r4
    3224:	f7ff fef6 	bl	3014 <hci_le_set_data_len.isra.29>
		if (!err) {
    3228:	b910      	cbnz	r0, 3230 <le_enh_conn_complete+0x1c8>
    322a:	f44f 7180 	mov.w	r1, #256	; 0x100
    322e:	e7f0      	b.n	3212 <le_enh_conn_complete+0x1aa>
	update_conn_param(conn);
    3230:	4620      	mov	r0, r4
    3232:	f7fe ff2f 	bl	2094 <update_conn_param>
    3236:	e7db      	b.n	31f0 <le_enh_conn_complete+0x188>
    3238:	000155c5 	.word	0x000155c5
    323c:	00015bb8 	.word	0x00015bb8
    3240:	000169e6 	.word	0x000169e6
    3244:	000169ed 	.word	0x000169ed
    3248:	00016c85 	.word	0x00016c85
    324c:	20003b00 	.word	0x20003b00
    3250:	0001699e 	.word	0x0001699e
    3254:	00016cb9 	.word	0x00016cb9
    3258:	20003a90 	.word	0x20003a90

0000325c <le_conn_param_neg_reply>:
{
    325c:	b570      	push	{r4, r5, r6, lr}
    325e:	4606      	mov	r6, r0
    3260:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    3262:	f242 0021 	movw	r0, #8225	; 0x2021
    3266:	2103      	movs	r1, #3
    3268:	f7fe ffa6 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    326c:	4604      	mov	r4, r0
    326e:	b160      	cbz	r0, 328a <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    3270:	2103      	movs	r1, #3
    3272:	3008      	adds	r0, #8
    3274:	f010 fb8a 	bl	1398c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    3278:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    327a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    327c:	4621      	mov	r1, r4
    327e:	f242 0021 	movw	r0, #8225	; 0x2021
}
    3282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3286:	f7ff b9e9 	b.w	265c <bt_hci_cmd_send>
}
    328a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    328e:	bd70      	pop	{r4, r5, r6, pc}

00003290 <hci_tx_thread>:
{
    3290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3294:	b089      	sub	sp, #36	; 0x24
    3296:	f011 fbcf 	bl	14a38 <_impl_k_current_get>
	BT_DBG("Started");
    329a:	4c81      	ldr	r4, [pc, #516]	; (34a0 <hci_tx_thread+0x210>)
    329c:	9001      	str	r0, [sp, #4]
    329e:	9402      	str	r4, [sp, #8]
    32a0:	9400      	str	r4, [sp, #0]
    32a2:	4b80      	ldr	r3, [pc, #512]	; (34a4 <hci_tx_thread+0x214>)
    32a4:	4a80      	ldr	r2, [pc, #512]	; (34a8 <hci_tx_thread+0x218>)
    32a6:	4981      	ldr	r1, [pc, #516]	; (34ac <hci_tx_thread+0x21c>)
    32a8:	4881      	ldr	r0, [pc, #516]	; (34b0 <hci_tx_thread+0x220>)
		events[0].state = K_POLL_STATE_NOT_READY;
    32aa:	f8df a210 	ldr.w	sl, [pc, #528]	; 34bc <hci_tx_thread+0x22c>
	BT_DBG("Started");
    32ae:	f7fd fe6d 	bl	f8c <printk>
		events[0].state = K_POLL_STATE_NOT_READY;
    32b2:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    32b6:	487f      	ldr	r0, [pc, #508]	; (34b4 <hci_tx_thread+0x224>)
		events[0].state = K_POLL_STATE_NOT_READY;
    32b8:	f36f 1307 	bfc	r3, #4, #4
    32bc:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    32c0:	f001 fbda 	bl	4a78 <bt_conn_prepare_events>
    32c4:	f100 0801 	add.w	r8, r0, #1
    32c8:	f011 fbb6 	bl	14a38 <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    32cc:	4a76      	ldr	r2, [pc, #472]	; (34a8 <hci_tx_thread+0x218>)
    32ce:	9001      	str	r0, [sp, #4]
    32d0:	4976      	ldr	r1, [pc, #472]	; (34ac <hci_tx_thread+0x21c>)
    32d2:	9403      	str	r4, [sp, #12]
    32d4:	f8cd 8008 	str.w	r8, [sp, #8]
    32d8:	9400      	str	r4, [sp, #0]
    32da:	4b72      	ldr	r3, [pc, #456]	; (34a4 <hci_tx_thread+0x214>)
    32dc:	4876      	ldr	r0, [pc, #472]	; (34b8 <hci_tx_thread+0x228>)
    32de:	f7fd fe55 	bl	f8c <printk>

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    32e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    32e6:	4641      	mov	r1, r8
    32e8:	4874      	ldr	r0, [pc, #464]	; (34bc <hci_tx_thread+0x22c>)
    32ea:	f011 fff5 	bl	152d8 <_impl_k_poll>
		BT_ASSERT(err == 0);
    32ee:	b168      	cbz	r0, 330c <hci_tx_thread+0x7c>
    32f0:	4b6c      	ldr	r3, [pc, #432]	; (34a4 <hci_tx_thread+0x214>)
    32f2:	4a73      	ldr	r2, [pc, #460]	; (34c0 <hci_tx_thread+0x230>)
    32f4:	496d      	ldr	r1, [pc, #436]	; (34ac <hci_tx_thread+0x21c>)
    32f6:	4873      	ldr	r0, [pc, #460]	; (34c4 <hci_tx_thread+0x234>)
    32f8:	9401      	str	r4, [sp, #4]
    32fa:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf);
    32fc:	f7fd fe46 	bl	f8c <printk>
    3300:	4040      	eors	r0, r0
    3302:	f380 8811 	msr	BASEPRI, r0
    3306:	f04f 0004 	mov.w	r0, #4
    330a:	df02      	svc	2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    330c:	f011 fb94 	bl	14a38 <_impl_k_current_get>
	BT_DBG("count %d", count);
    3310:	9403      	str	r4, [sp, #12]
    3312:	9001      	str	r0, [sp, #4]
    3314:	f8cd 8008 	str.w	r8, [sp, #8]
    3318:	9400      	str	r4, [sp, #0]
    331a:	4b6b      	ldr	r3, [pc, #428]	; (34c8 <hci_tx_thread+0x238>)
    331c:	4a62      	ldr	r2, [pc, #392]	; (34a8 <hci_tx_thread+0x218>)
    331e:	4963      	ldr	r1, [pc, #396]	; (34ac <hci_tx_thread+0x21c>)
    3320:	486a      	ldr	r0, [pc, #424]	; (34cc <hci_tx_thread+0x23c>)
    3322:	4d66      	ldr	r5, [pc, #408]	; (34bc <hci_tx_thread+0x22c>)
		BT_DBG("ev->state %u", ev->state);
    3324:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 34c8 <hci_tx_thread+0x238>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3328:	4e69      	ldr	r6, [pc, #420]	; (34d0 <hci_tx_thread+0x240>)
	BT_DBG("count %d", count);
    332a:	f7fd fe2f 	bl	f8c <printk>
	for (; count; ev++, count--) {
    332e:	f1b8 0f00 	cmp.w	r8, #0
    3332:	d102      	bne.n	333a <hci_tx_thread+0xaa>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3334:	f011 fb50 	bl	149d8 <_impl_k_yield>
    3338:	e7bb      	b.n	32b2 <hci_tx_thread+0x22>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    333a:	f011 fb7d 	bl	14a38 <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    333e:	7b6b      	ldrb	r3, [r5, #13]
    3340:	9001      	str	r0, [sp, #4]
    3342:	091b      	lsrs	r3, r3, #4
    3344:	9302      	str	r3, [sp, #8]
    3346:	9403      	str	r4, [sp, #12]
    3348:	465b      	mov	r3, fp
    334a:	9400      	str	r4, [sp, #0]
    334c:	4a56      	ldr	r2, [pc, #344]	; (34a8 <hci_tx_thread+0x218>)
    334e:	4957      	ldr	r1, [pc, #348]	; (34ac <hci_tx_thread+0x21c>)
    3350:	4860      	ldr	r0, [pc, #384]	; (34d4 <hci_tx_thread+0x244>)
    3352:	f7fd fe1b 	bl	f8c <printk>
		switch (ev->state) {
    3356:	7b6b      	ldrb	r3, [r5, #13]
    3358:	091b      	lsrs	r3, r3, #4
    335a:	2b01      	cmp	r3, #1
    335c:	f240 8081 	bls.w	3462 <hci_tx_thread+0x1d2>
    3360:	2b04      	cmp	r3, #4
    3362:	f040 8092 	bne.w	348a <hci_tx_thread+0x1fa>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3366:	f895 900c 	ldrb.w	r9, [r5, #12]
    336a:	f1b9 0f00 	cmp.w	r9, #0
    336e:	d17c      	bne.n	346a <hci_tx_thread+0x1da>
    3370:	f011 fb62 	bl	14a38 <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    3374:	4b58      	ldr	r3, [pc, #352]	; (34d8 <hci_tx_thread+0x248>)
    3376:	9001      	str	r0, [sp, #4]
    3378:	4a4b      	ldr	r2, [pc, #300]	; (34a8 <hci_tx_thread+0x218>)
    337a:	494c      	ldr	r1, [pc, #304]	; (34ac <hci_tx_thread+0x21c>)
    337c:	9402      	str	r4, [sp, #8]
    337e:	9400      	str	r4, [sp, #0]
    3380:	4856      	ldr	r0, [pc, #344]	; (34dc <hci_tx_thread+0x24c>)
    3382:	f7fd fe03 	bl	f8c <printk>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3386:	4649      	mov	r1, r9
    3388:	4855      	ldr	r0, [pc, #340]	; (34e0 <hci_tx_thread+0x250>)
    338a:	f010 faa3 	bl	138d4 <net_buf_get>
	BT_ASSERT(buf);
    338e:	4607      	mov	r7, r0
    3390:	b930      	cbnz	r0, 33a0 <hci_tx_thread+0x110>
    3392:	9401      	str	r4, [sp, #4]
    3394:	9400      	str	r4, [sp, #0]
    3396:	4b50      	ldr	r3, [pc, #320]	; (34d8 <hci_tx_thread+0x248>)
    3398:	4a49      	ldr	r2, [pc, #292]	; (34c0 <hci_tx_thread+0x230>)
    339a:	4944      	ldr	r1, [pc, #272]	; (34ac <hci_tx_thread+0x21c>)
    339c:	4851      	ldr	r0, [pc, #324]	; (34e4 <hci_tx_thread+0x254>)
    339e:	e7ad      	b.n	32fc <hci_tx_thread+0x6c>
    33a0:	f011 fb4a 	bl	14a38 <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    33a4:	4b4c      	ldr	r3, [pc, #304]	; (34d8 <hci_tx_thread+0x248>)
    33a6:	9001      	str	r0, [sp, #4]
    33a8:	4a3f      	ldr	r2, [pc, #252]	; (34a8 <hci_tx_thread+0x218>)
    33aa:	4940      	ldr	r1, [pc, #256]	; (34ac <hci_tx_thread+0x21c>)
    33ac:	9402      	str	r4, [sp, #8]
    33ae:	9400      	str	r4, [sp, #0]
    33b0:	484d      	ldr	r0, [pc, #308]	; (34e8 <hci_tx_thread+0x258>)
    33b2:	f7fd fdeb 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    33b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33ba:	484c      	ldr	r0, [pc, #304]	; (34ec <hci_tx_thread+0x25c>)
    33bc:	f011 fb73 	bl	14aa6 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    33c0:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
    33c4:	b16b      	cbz	r3, 33e2 <hci_tx_thread+0x152>
		BT_ERR("Uncleared pending sent_cmd");
    33c6:	4b44      	ldr	r3, [pc, #272]	; (34d8 <hci_tx_thread+0x248>)
    33c8:	4a3d      	ldr	r2, [pc, #244]	; (34c0 <hci_tx_thread+0x230>)
    33ca:	4938      	ldr	r1, [pc, #224]	; (34ac <hci_tx_thread+0x21c>)
    33cc:	9401      	str	r4, [sp, #4]
    33ce:	9400      	str	r4, [sp, #0]
    33d0:	4847      	ldr	r0, [pc, #284]	; (34f0 <hci_tx_thread+0x260>)
    33d2:	f7fd fddb 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    33d6:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    33da:	f010 faa5 	bl	13928 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    33de:	f8c6 90c0 	str.w	r9, [r6, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    33e2:	4638      	mov	r0, r7
    33e4:	f010 face 	bl	13984 <net_buf_ref>
    33e8:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    33ec:	f011 fb24 	bl	14a38 <_impl_k_current_get>
    33f0:	9007      	str	r0, [sp, #28]
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    33f2:	4638      	mov	r0, r7
    33f4:	f010 f9da 	bl	137ac <net_buf_id>
    33f8:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3504 <hci_tx_thread+0x274>
    33fc:	9404      	str	r4, [sp, #16]
    33fe:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3402:	9703      	str	r7, [sp, #12]
    3404:	8842      	ldrh	r2, [r0, #2]
    3406:	9b07      	ldr	r3, [sp, #28]
    3408:	9202      	str	r2, [sp, #8]
    340a:	9301      	str	r3, [sp, #4]
    340c:	9400      	str	r4, [sp, #0]
    340e:	4b32      	ldr	r3, [pc, #200]	; (34d8 <hci_tx_thread+0x248>)
    3410:	4a25      	ldr	r2, [pc, #148]	; (34a8 <hci_tx_thread+0x218>)
    3412:	4926      	ldr	r1, [pc, #152]	; (34ac <hci_tx_thread+0x21c>)
    3414:	4837      	ldr	r0, [pc, #220]	; (34f4 <hci_tx_thread+0x264>)
    3416:	f7fd fdb9 	bl	f8c <printk>
	err = bt_send(buf);
    341a:	4638      	mov	r0, r7
    341c:	f7ff f8f4 	bl	2608 <bt_send>
	if (err) {
    3420:	b1f8      	cbz	r0, 3462 <hci_tx_thread+0x1d2>
		BT_ERR("Unable to send to driver (err %d)", err);
    3422:	4b2d      	ldr	r3, [pc, #180]	; (34d8 <hci_tx_thread+0x248>)
    3424:	4a26      	ldr	r2, [pc, #152]	; (34c0 <hci_tx_thread+0x230>)
    3426:	4921      	ldr	r1, [pc, #132]	; (34ac <hci_tx_thread+0x21c>)
    3428:	9001      	str	r0, [sp, #4]
    342a:	9402      	str	r4, [sp, #8]
    342c:	9400      	str	r4, [sp, #0]
    342e:	4832      	ldr	r0, [pc, #200]	; (34f8 <hci_tx_thread+0x268>)
    3430:	f7fd fdac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3434:	482d      	ldr	r0, [pc, #180]	; (34ec <hci_tx_thread+0x25c>)
    3436:	f011 fb0e 	bl	14a56 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    343a:	4638      	mov	r0, r7
    343c:	f010 f9b6 	bl	137ac <net_buf_id>
    3440:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3444:	2200      	movs	r2, #0
    3446:	211f      	movs	r1, #31
    3448:	8840      	ldrh	r0, [r0, #2]
    344a:	f7fe fe31 	bl	20b0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    344e:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    3452:	f010 fa69 	bl	13928 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3456:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3458:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    345a:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
		net_buf_unref(buf);
    345e:	f010 fa63 	bl	13928 <net_buf_unref>
	for (; count; ev++, count--) {
    3462:	3514      	adds	r5, #20
    3464:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3468:	e761      	b.n	332e <hci_tx_thread+0x9e>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    346a:	f1b9 0f01 	cmp.w	r9, #1
    346e:	d104      	bne.n	347a <hci_tx_thread+0x1ea>
					conn = CONTAINER_OF(ev->fifo,
    3470:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    3472:	3818      	subs	r0, #24
    3474:	f001 f8ea 	bl	464c <bt_conn_notify_tx>
    3478:	e7f3      	b.n	3462 <hci_tx_thread+0x1d2>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    347a:	f1b9 0f02 	cmp.w	r9, #2
    347e:	d1f0      	bne.n	3462 <hci_tx_thread+0x1d2>
					conn = CONTAINER_OF(ev->fifo,
    3480:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    3482:	3828      	subs	r0, #40	; 0x28
    3484:	f001 fe4e 	bl	5124 <bt_conn_process_tx>
    3488:	e7eb      	b.n	3462 <hci_tx_thread+0x1d2>
		switch (ev->state) {
    348a:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    348c:	9402      	str	r4, [sp, #8]
    348e:	9400      	str	r4, [sp, #0]
    3490:	465b      	mov	r3, fp
    3492:	4a1a      	ldr	r2, [pc, #104]	; (34fc <hci_tx_thread+0x26c>)
    3494:	4905      	ldr	r1, [pc, #20]	; (34ac <hci_tx_thread+0x21c>)
    3496:	481a      	ldr	r0, [pc, #104]	; (3500 <hci_tx_thread+0x270>)
    3498:	f7fd fd78 	bl	f8c <printk>
    349c:	e7e1      	b.n	3462 <hci_tx_thread+0x1d2>
    349e:	bf00      	nop
    34a0:	000155c5 	.word	0x000155c5
    34a4:	00015cf6 	.word	0x00015cf6
    34a8:	000169e6 	.word	0x000169e6
    34ac:	000169ed 	.word	0x000169ed
    34b0:	00016ab7 	.word	0x00016ab7
    34b4:	20003b7c 	.word	0x20003b7c
    34b8:	00016ad4 	.word	0x00016ad4
    34bc:	20003b68 	.word	0x20003b68
    34c0:	0001699e 	.word	0x0001699e
    34c4:	00016b07 	.word	0x00016b07
    34c8:	00015ce7 	.word	0x00015ce7
    34cc:	00016b31 	.word	0x00016b31
    34d0:	20003a90 	.word	0x20003a90
    34d4:	00016b4f 	.word	0x00016b4f
    34d8:	00015cde 	.word	0x00015cde
    34dc:	00016b71 	.word	0x00016b71
    34e0:	20003b54 	.word	0x20003b54
    34e4:	00016b9a 	.word	0x00016b9a
    34e8:	00016bbf 	.word	0x00016bbf
    34ec:	20003b38 	.word	0x20003b38
    34f0:	00016bea 	.word	0x00016bea
    34f4:	00016c15 	.word	0x00016c15
    34f8:	00016017 	.word	0x00016017
    34fc:	00016a28 	.word	0x00016a28
    3500:	00016c54 	.word	0x00016c54
    3504:	200002a0 	.word	0x200002a0

00003508 <bt_recv>:
{
    3508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    350c:	b097      	sub	sp, #92	; 0x5c
    350e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3510:	f011 fa92 	bl	14a38 <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    3514:	4ead      	ldr	r6, [pc, #692]	; (37cc <bt_recv+0x2c4>)
    3516:	89a3      	ldrh	r3, [r4, #12]
    3518:	9303      	str	r3, [sp, #12]
    351a:	9001      	str	r0, [sp, #4]
    351c:	9604      	str	r6, [sp, #16]
    351e:	9402      	str	r4, [sp, #8]
    3520:	9600      	str	r6, [sp, #0]
    3522:	4bab      	ldr	r3, [pc, #684]	; (37d0 <bt_recv+0x2c8>)
    3524:	4aab      	ldr	r2, [pc, #684]	; (37d4 <bt_recv+0x2cc>)
    3526:	49ac      	ldr	r1, [pc, #688]	; (37d8 <bt_recv+0x2d0>)
    3528:	48ac      	ldr	r0, [pc, #688]	; (37dc <bt_recv+0x2d4>)
    352a:	f7fd fd2f 	bl	f8c <printk>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    352e:	7d27      	ldrb	r7, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    3530:	2f01      	cmp	r7, #1
    3532:	4635      	mov	r5, r6
    3534:	d05b      	beq.n	35ee <bt_recv+0xe6>
    3536:	2f03      	cmp	r7, #3
    3538:	f040 8420 	bne.w	3d7c <bt_recv+0x874>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    353c:	68a7      	ldr	r7, [r4, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    353e:	887d      	ldrh	r5, [r7, #2]
    3540:	f011 fa7a 	bl	14a38 <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    3544:	4aa3      	ldr	r2, [pc, #652]	; (37d4 <bt_recv+0x2cc>)
    3546:	9001      	str	r0, [sp, #4]
    3548:	4ba5      	ldr	r3, [pc, #660]	; (37e0 <bt_recv+0x2d8>)
    354a:	49a3      	ldr	r1, [pc, #652]	; (37d8 <bt_recv+0x2d0>)
    354c:	9603      	str	r6, [sp, #12]
    354e:	9402      	str	r4, [sp, #8]
    3550:	9600      	str	r6, [sp, #0]
    3552:	48a4      	ldr	r0, [pc, #656]	; (37e4 <bt_recv+0x2dc>)
    3554:	f7fd fd1a 	bl	f8c <printk>
	handle = sys_le16_to_cpu(hdr->handle);
    3558:	883b      	ldrh	r3, [r7, #0]
	flags = bt_acl_flags(handle);
    355a:	0b1f      	lsrs	r7, r3, #12
	acl(buf)->handle = bt_acl_handle(handle);
    355c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3560:	82e3      	strh	r3, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3562:	23ff      	movs	r3, #255	; 0xff
    3564:	7563      	strb	r3, [r4, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3566:	2104      	movs	r1, #4
    3568:	f104 0008 	add.w	r0, r4, #8
    356c:	f010 fa3c 	bl	139e8 <net_buf_simple_pull>
    3570:	f011 fa62 	bl	14a38 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);
    3574:	8ae3      	ldrh	r3, [r4, #22]
    3576:	9302      	str	r3, [sp, #8]
    3578:	9001      	str	r0, [sp, #4]
    357a:	4b99      	ldr	r3, [pc, #612]	; (37e0 <bt_recv+0x2d8>)
    357c:	9605      	str	r6, [sp, #20]
    357e:	9704      	str	r7, [sp, #16]
    3580:	9503      	str	r5, [sp, #12]
    3582:	9600      	str	r6, [sp, #0]
    3584:	4a93      	ldr	r2, [pc, #588]	; (37d4 <bt_recv+0x2cc>)
    3586:	4994      	ldr	r1, [pc, #592]	; (37d8 <bt_recv+0x2d0>)
    3588:	4897      	ldr	r0, [pc, #604]	; (37e8 <bt_recv+0x2e0>)
    358a:	f7fd fcff 	bl	f8c <printk>
	if (buf->len != len) {
    358e:	89a3      	ldrh	r3, [r4, #12]
    3590:	429d      	cmp	r5, r3
    3592:	d00d      	beq.n	35b0 <bt_recv+0xa8>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    3594:	9301      	str	r3, [sp, #4]
    3596:	9603      	str	r6, [sp, #12]
    3598:	9502      	str	r5, [sp, #8]
    359a:	9600      	str	r6, [sp, #0]
    359c:	4b90      	ldr	r3, [pc, #576]	; (37e0 <bt_recv+0x2d8>)
    359e:	4a93      	ldr	r2, [pc, #588]	; (37ec <bt_recv+0x2e4>)
    35a0:	498d      	ldr	r1, [pc, #564]	; (37d8 <bt_recv+0x2d0>)
    35a2:	4893      	ldr	r0, [pc, #588]	; (37f0 <bt_recv+0x2e8>)
    35a4:	f7fd fcf2 	bl	f8c <printk>
	net_buf_unref(buf);
    35a8:	4620      	mov	r0, r4
    35aa:	f010 f9bd 	bl	13928 <net_buf_unref>
    35ae:	e01a      	b.n	35e6 <bt_recv+0xde>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    35b0:	8ae0      	ldrh	r0, [r4, #22]
    35b2:	f001 f9cb 	bl	494c <bt_conn_lookup_handle>
	if (!conn) {
    35b6:	4605      	mov	r5, r0
    35b8:	b950      	cbnz	r0, 35d0 <bt_recv+0xc8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    35ba:	8ae3      	ldrh	r3, [r4, #22]
    35bc:	9301      	str	r3, [sp, #4]
    35be:	4a8b      	ldr	r2, [pc, #556]	; (37ec <bt_recv+0x2e4>)
    35c0:	4b87      	ldr	r3, [pc, #540]	; (37e0 <bt_recv+0x2d8>)
    35c2:	4985      	ldr	r1, [pc, #532]	; (37d8 <bt_recv+0x2d0>)
    35c4:	488b      	ldr	r0, [pc, #556]	; (37f4 <bt_recv+0x2ec>)
    35c6:	9602      	str	r6, [sp, #8]
    35c8:	9600      	str	r6, [sp, #0]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    35ca:	f7fd fcdf 	bl	f8c <printk>
    35ce:	e7eb      	b.n	35a8 <bt_recv+0xa0>
	acl(buf)->id = bt_conn_get_id(conn);
    35d0:	f001 fe4e 	bl	5270 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    35d4:	463a      	mov	r2, r7
	acl(buf)->id = bt_conn_get_id(conn);
    35d6:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    35d8:	4621      	mov	r1, r4
    35da:	4628      	mov	r0, r5
    35dc:	f000 ff06 	bl	43ec <bt_conn_recv>
	bt_conn_unref(conn);
    35e0:	4628      	mov	r0, r5
    35e2:	f001 fa01 	bl	49e8 <bt_conn_unref>
		return 0;
    35e6:	2000      	movs	r0, #0
}
    35e8:	b017      	add	sp, #92	; 0x5c
    35ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    35ee:	f8d4 8008 	ldr.w	r8, [r4, #8]
    35f2:	f011 fa21 	bl	14a38 <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    35f6:	9603      	str	r6, [sp, #12]
    35f8:	f898 3000 	ldrb.w	r3, [r8]
    35fc:	9302      	str	r3, [sp, #8]
    35fe:	9001      	str	r0, [sp, #4]
    3600:	4b7d      	ldr	r3, [pc, #500]	; (37f8 <bt_recv+0x2f0>)
    3602:	9600      	str	r6, [sp, #0]
    3604:	4a73      	ldr	r2, [pc, #460]	; (37d4 <bt_recv+0x2cc>)
    3606:	4974      	ldr	r1, [pc, #464]	; (37d8 <bt_recv+0x2d0>)
    3608:	487c      	ldr	r0, [pc, #496]	; (37fc <bt_recv+0x2f4>)
    360a:	f7fd fcbf 	bl	f8c <printk>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    360e:	f898 3000 	ldrb.w	r3, [r8]
    3612:	2b13      	cmp	r3, #19
    3614:	f200 83c1 	bhi.w	3d9a <bt_recv+0x892>
    3618:	409f      	lsls	r7, r3
    361a:	f417 2f0c 	tst.w	r7, #573440	; 0x8c000
    361e:	f000 83bc 	beq.w	3d9a <bt_recv+0x892>
    3622:	9601      	str	r6, [sp, #4]
    3624:	9600      	str	r6, [sp, #0]
    3626:	4b74      	ldr	r3, [pc, #464]	; (37f8 <bt_recv+0x2f0>)
    3628:	4a70      	ldr	r2, [pc, #448]	; (37ec <bt_recv+0x2e4>)
    362a:	496b      	ldr	r1, [pc, #428]	; (37d8 <bt_recv+0x2d0>)
    362c:	4874      	ldr	r0, [pc, #464]	; (3800 <bt_recv+0x2f8>)
    362e:	f7fd fcad 	bl	f8c <printk>
    3632:	4040      	eors	r0, r0
    3634:	f380 8811 	msr	BASEPRI, r0
    3638:	f04f 0004 	mov.w	r0, #4
    363c:	df02      	svc	2
    363e:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3640:	f8b7 9001 	ldrh.w	r9, [r7, #1]
    3644:	f011 f9f8 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    3648:	9505      	str	r5, [sp, #20]
    364a:	78fb      	ldrb	r3, [r7, #3]
    364c:	9304      	str	r3, [sp, #16]
    364e:	f8cd 900c 	str.w	r9, [sp, #12]
    3652:	783b      	ldrb	r3, [r7, #0]
    3654:	9302      	str	r3, [sp, #8]
    3656:	9001      	str	r0, [sp, #4]
    3658:	9500      	str	r5, [sp, #0]
    365a:	4b6a      	ldr	r3, [pc, #424]	; (3804 <bt_recv+0x2fc>)
    365c:	4a5d      	ldr	r2, [pc, #372]	; (37d4 <bt_recv+0x2cc>)
    365e:	495e      	ldr	r1, [pc, #376]	; (37d8 <bt_recv+0x2d0>)
    3660:	4869      	ldr	r0, [pc, #420]	; (3808 <bt_recv+0x300>)
    3662:	f7fd fc93 	bl	f8c <printk>
	if (evt->status) {
    3666:	f897 8000 	ldrb.w	r8, [r7]
    366a:	f1b8 0f00 	cmp.w	r8, #0
    366e:	d19b      	bne.n	35a8 <bt_recv+0xa0>
	conn = bt_conn_lookup_handle(handle);
    3670:	4648      	mov	r0, r9
    3672:	f001 f96b 	bl	494c <bt_conn_lookup_handle>
	if (!conn) {
    3676:	4606      	mov	r6, r0
    3678:	b9c0      	cbnz	r0, 36ac <bt_recv+0x1a4>
		BT_ERR("Unable to look up conn with handle %u", handle);
    367a:	9502      	str	r5, [sp, #8]
    367c:	e88d 0220 	stmia.w	sp, {r5, r9}
    3680:	4b60      	ldr	r3, [pc, #384]	; (3804 <bt_recv+0x2fc>)
    3682:	4a5a      	ldr	r2, [pc, #360]	; (37ec <bt_recv+0x2e4>)
    3684:	4954      	ldr	r1, [pc, #336]	; (37d8 <bt_recv+0x2d0>)
    3686:	4861      	ldr	r0, [pc, #388]	; (380c <bt_recv+0x304>)
    3688:	f7fd fc80 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    368c:	2107      	movs	r1, #7
    368e:	4860      	ldr	r0, [pc, #384]	; (3810 <bt_recv+0x308>)
    3690:	f7fe fd84 	bl	219c <atomic_test_bit>
    3694:	2800      	cmp	r0, #0
    3696:	d087      	beq.n	35a8 <bt_recv+0xa0>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3698:	2106      	movs	r1, #6
    369a:	485d      	ldr	r0, [pc, #372]	; (3810 <bt_recv+0x308>)
    369c:	f7fe fd7e 	bl	219c <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    36a0:	2800      	cmp	r0, #0
    36a2:	d181      	bne.n	35a8 <bt_recv+0xa0>
		set_advertise_enable(true);
    36a4:	2001      	movs	r0, #1
    36a6:	f7fe fed9 	bl	245c <set_advertise_enable>
    36aa:	e77d      	b.n	35a8 <bt_recv+0xa0>
	conn->err = evt->reason;
    36ac:	78fb      	ldrb	r3, [r7, #3]
    36ae:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    36b0:	4958      	ldr	r1, [pc, #352]	; (3814 <bt_recv+0x30c>)
    36b2:	4859      	ldr	r0, [pc, #356]	; (3818 <bt_recv+0x310>)
    36b4:	f011 fb80 	bl	14db8 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    36b8:	4641      	mov	r1, r8
    36ba:	4630      	mov	r0, r6
    36bc:	f001 fa4a 	bl	4b54 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    36c0:	78b5      	ldrb	r5, [r6, #2]
	conn->handle = 0;
    36c2:	f8a6 8000 	strh.w	r8, [r6]
	if (conn->type != BT_CONN_TYPE_LE) {
    36c6:	b10d      	cbz	r5, 36cc <bt_recv+0x1c4>
	bt_conn_unref(conn);
    36c8:	4630      	mov	r0, r6
    36ca:	e0e7      	b.n	389c <bt_recv+0x394>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    36cc:	4629      	mov	r1, r5
    36ce:	1d30      	adds	r0, r6, #4
    36d0:	f7fe fd64 	bl	219c <atomic_test_bit>
    36d4:	b130      	cbz	r0, 36e4 <bt_recv+0x1dc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    36d6:	4630      	mov	r0, r6
    36d8:	2101      	movs	r1, #1
    36da:	f001 fa3b 	bl	4b54 <bt_conn_set_state>
		bt_le_scan_update(false);
    36de:	4628      	mov	r0, r5
    36e0:	f7ff f84a 	bl	2778 <bt_le_scan_update>
	bt_conn_unref(conn);
    36e4:	4630      	mov	r0, r6
    36e6:	f001 f97f 	bl	49e8 <bt_conn_unref>
    36ea:	e7cf      	b.n	368c <bt_recv+0x184>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    36ec:	68a6      	ldr	r6, [r4, #8]
    36ee:	f011 f9a3 	bl	14a38 <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    36f2:	9503      	str	r5, [sp, #12]
    36f4:	7833      	ldrb	r3, [r6, #0]
    36f6:	9302      	str	r3, [sp, #8]
    36f8:	9001      	str	r0, [sp, #4]
    36fa:	4b48      	ldr	r3, [pc, #288]	; (381c <bt_recv+0x314>)
    36fc:	4a35      	ldr	r2, [pc, #212]	; (37d4 <bt_recv+0x2cc>)
    36fe:	4936      	ldr	r1, [pc, #216]	; (37d8 <bt_recv+0x2d0>)
    3700:	9500      	str	r5, [sp, #0]
    3702:	4847      	ldr	r0, [pc, #284]	; (3820 <bt_recv+0x318>)
    3704:	f7fd fc42 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3708:	2101      	movs	r1, #1
    370a:	4638      	mov	r0, r7
    370c:	f010 f96c 	bl	139e8 <net_buf_simple_pull>
	switch (evt->subevent) {
    3710:	7836      	ldrb	r6, [r6, #0]
    3712:	1e73      	subs	r3, r6, #1
    3714:	2b0b      	cmp	r3, #11
    3716:	f200 8321 	bhi.w	3d5c <bt_recv+0x854>
    371a:	e8df f013 	tbh	[pc, r3, lsl #1]
    371e:	000c      	.short	0x000c
    3720:	0089022f 	.word	0x0089022f
    3724:	031f00c2 	.word	0x031f00c2
    3728:	015700fb 	.word	0x015700fb
    372c:	021301c2 	.word	0x021301c2
    3730:	031f0087 	.word	0x031f0087
    3734:	0189      	.short	0x0189
    3736:	68a6      	ldr	r6, [r4, #8]
    3738:	f011 f97e 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u role %u %s", evt->status, evt->role,
    373c:	1d37      	adds	r7, r6, #4
    373e:	4680      	mov	r8, r0
    3740:	4638      	mov	r0, r7
    3742:	f896 9000 	ldrb.w	r9, [r6]
    3746:	f896 a003 	ldrb.w	sl, [r6, #3]
    374a:	f7fe fb03 	bl	1d54 <bt_addr_le_str>
    374e:	4a21      	ldr	r2, [pc, #132]	; (37d4 <bt_recv+0x2cc>)
    3750:	9505      	str	r5, [sp, #20]
    3752:	9004      	str	r0, [sp, #16]
    3754:	e88d 0720 	stmia.w	sp, {r5, r8, r9, sl}
    3758:	4b32      	ldr	r3, [pc, #200]	; (3824 <bt_recv+0x31c>)
    375a:	491f      	ldr	r1, [pc, #124]	; (37d8 <bt_recv+0x2d0>)
    375c:	4832      	ldr	r0, [pc, #200]	; (3828 <bt_recv+0x320>)
    375e:	f7fd fc15 	bl	f8c <printk>
	enh.status         = evt->status;
    3762:	7833      	ldrb	r3, [r6, #0]
    3764:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	enh.handle         = evt->handle;
    3768:	f8b6 3001 	ldrh.w	r3, [r6, #1]
    376c:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.role           = evt->role;
    3770:	78f3      	ldrb	r3, [r6, #3]
    3772:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	enh.interval       = evt->interval;
    3776:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    377a:	f8ad 304f 	strh.w	r3, [sp, #79]	; 0x4f
	enh.latency        = evt->latency;
    377e:	f8b6 300d 	ldrh.w	r3, [r6, #13]
    3782:	f8ad 3051 	strh.w	r3, [sp, #81]	; 0x51
	enh.supv_timeout   = evt->supv_timeout;
    3786:	f8b6 300f 	ldrh.w	r3, [r6, #15]
    378a:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	enh.clock_accuracy = evt->clock_accuracy;
    378e:	7c73      	ldrb	r3, [r6, #17]
    3790:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    3794:	4639      	mov	r1, r7
    3796:	a80f      	add	r0, sp, #60	; 0x3c
    3798:	f7fe fc56 	bl	2048 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    379c:	2500      	movs	r5, #0
    379e:	2206      	movs	r2, #6
    37a0:	a90a      	add	r1, sp, #40	; 0x28
    37a2:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    37a6:	950a      	str	r5, [sp, #40]	; 0x28
    37a8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    37ac:	f7fe fa26 	bl	1bfc <memcpy>
    37b0:	2206      	movs	r2, #6
    37b2:	a90c      	add	r1, sp, #48	; 0x30
    37b4:	f10d 0049 	add.w	r0, sp, #73	; 0x49
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    37b8:	950c      	str	r5, [sp, #48]	; 0x30
    37ba:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    37be:	f7fe fa1d 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    37c2:	a80e      	add	r0, sp, #56	; 0x38
		le_enh_conn_complete((void *)buf->data);
    37c4:	f7ff fc50 	bl	3068 <le_enh_conn_complete>
    37c8:	e6ee      	b.n	35a8 <bt_recv+0xa0>
    37ca:	bf00      	nop
    37cc:	000155c5 	.word	0x000155c5
    37d0:	00015e34 	.word	0x00015e34
    37d4:	000169e6 	.word	0x000169e6
    37d8:	000169ed 	.word	0x000169ed
    37dc:	00016413 	.word	0x00016413
    37e0:	00015b81 	.word	0x00015b81
    37e4:	00015fd1 	.word	0x00015fd1
    37e8:	00016436 	.word	0x00016436
    37ec:	0001699e 	.word	0x0001699e
    37f0:	00016465 	.word	0x00016465
    37f4:	00016499 	.word	0x00016499
    37f8:	00015cd4 	.word	0x00015cd4
    37fc:	000164cb 	.word	0x000164cb
    3800:	00016793 	.word	0x00016793
    3804:	00015ba3 	.word	0x00015ba3
    3808:	000164ed 	.word	0x000164ed
    380c:	00016520 	.word	0x00016520
    3810:	20003b00 	.word	0x20003b00
    3814:	00016556 	.word	0x00016556
    3818:	0000200d 	.word	0x0000200d
    381c:	00015cc2 	.word	0x00015cc2
    3820:	0001655a 	.word	0x0001655a
    3824:	00015bcd 	.word	0x00015bcd
    3828:	0001657f 	.word	0x0001657f
    382c:	68a0      	ldr	r0, [r4, #8]
    382e:	e7c9      	b.n	37c4 <bt_recv+0x2bc>
    3830:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    3832:	f8b6 8001 	ldrh.w	r8, [r6, #1]
    3836:	f011 f8ff 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status %u, handle %u", evt->status, handle);
    383a:	9504      	str	r5, [sp, #16]
    383c:	f8cd 800c 	str.w	r8, [sp, #12]
    3840:	7833      	ldrb	r3, [r6, #0]
    3842:	9302      	str	r3, [sp, #8]
    3844:	9001      	str	r0, [sp, #4]
    3846:	4bad      	ldr	r3, [pc, #692]	; (3afc <bt_recv+0x5f4>)
    3848:	4aad      	ldr	r2, [pc, #692]	; (3b00 <bt_recv+0x5f8>)
    384a:	49ae      	ldr	r1, [pc, #696]	; (3b04 <bt_recv+0x5fc>)
    384c:	9500      	str	r5, [sp, #0]
    384e:	48ae      	ldr	r0, [pc, #696]	; (3b08 <bt_recv+0x600>)
    3850:	f7fd fb9c 	bl	f8c <printk>
	conn = bt_conn_lookup_handle(handle);
    3854:	4640      	mov	r0, r8
    3856:	f001 f879 	bl	494c <bt_conn_lookup_handle>
	if (!conn) {
    385a:	4607      	mov	r7, r0
    385c:	b938      	cbnz	r0, 386e <bt_recv+0x366>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    385e:	e88d 0120 	stmia.w	sp, {r5, r8}
    3862:	4ba6      	ldr	r3, [pc, #664]	; (3afc <bt_recv+0x5f4>)
    3864:	9502      	str	r5, [sp, #8]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3866:	4aa9      	ldr	r2, [pc, #676]	; (3b0c <bt_recv+0x604>)
    3868:	49a6      	ldr	r1, [pc, #664]	; (3b04 <bt_recv+0x5fc>)
    386a:	48a9      	ldr	r0, [pc, #676]	; (3b10 <bt_recv+0x608>)
    386c:	e6ad      	b.n	35ca <bt_recv+0xc2>
	if (!evt->status) {
    386e:	7833      	ldrb	r3, [r6, #0]
    3870:	b99b      	cbnz	r3, 389a <bt_recv+0x392>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3872:	7932      	ldrb	r2, [r6, #4]
    3874:	78f3      	ldrb	r3, [r6, #3]
    3876:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    387a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    387e:	79b2      	ldrb	r2, [r6, #6]
    3880:	7973      	ldrb	r3, [r6, #5]
    3882:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3886:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    388a:	79f3      	ldrb	r3, [r6, #7]
    388c:	7a32      	ldrb	r2, [r6, #8]
    388e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3892:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    3896:	f000 fd6d 	bl	4374 <notify_le_param_updated>
	bt_conn_unref(conn);
    389a:	4638      	mov	r0, r7
	bt_conn_unref(conn);
    389c:	f001 f8a4 	bl	49e8 <bt_conn_unref>
    38a0:	e682      	b.n	35a8 <bt_recv+0xa0>
    38a2:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    38a4:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    38a8:	4640      	mov	r0, r8
    38aa:	f001 f84f 	bl	494c <bt_conn_lookup_handle>
	if (!conn) {
    38ae:	4606      	mov	r6, r0
    38b0:	b920      	cbnz	r0, 38bc <bt_recv+0x3b4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    38b2:	9502      	str	r5, [sp, #8]
    38b4:	e88d 0120 	stmia.w	sp, {r5, r8}
    38b8:	4b96      	ldr	r3, [pc, #600]	; (3b14 <bt_recv+0x60c>)
    38ba:	e7d4      	b.n	3866 <bt_recv+0x35e>
	if (!evt->status) {
    38bc:	783b      	ldrb	r3, [r7, #0]
    38be:	b923      	cbnz	r3, 38ca <bt_recv+0x3c2>
		memcpy(conn->le.features, evt->features,
    38c0:	2208      	movs	r2, #8
    38c2:	1cf9      	adds	r1, r7, #3
    38c4:	3064      	adds	r0, #100	; 0x64
    38c6:	f7fe f999 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    38ca:	4d93      	ldr	r5, [pc, #588]	; (3b18 <bt_recv+0x610>)
    38cc:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    38d0:	07d2      	lsls	r2, r2, #31
    38d2:	d50c      	bpl.n	38ee <bt_recv+0x3e6>
    38d4:	f896 3065 	ldrb.w	r3, [r6, #101]	; 0x65
    38d8:	07db      	lsls	r3, r3, #31
    38da:	d508      	bpl.n	38ee <bt_recv+0x3e6>
		err = hci_le_set_phy(conn);
    38dc:	4630      	mov	r0, r6
    38de:	f7ff fb79 	bl	2fd4 <hci_le_set_phy.isra.28>
		if (!err) {
    38e2:	b920      	cbnz	r0, 38ee <bt_recv+0x3e6>
    38e4:	2180      	movs	r1, #128	; 0x80
    38e6:	1d30      	adds	r0, r6, #4
    38e8:	f7fe fbb1 	bl	204e <atomic_or>
    38ec:	e6ec      	b.n	36c8 <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    38ee:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    38f2:	069f      	lsls	r7, r3, #26
    38f4:	f140 8098 	bpl.w	3a28 <bt_recv+0x520>
    38f8:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    38fc:	069d      	lsls	r5, r3, #26
    38fe:	f140 8093 	bpl.w	3a28 <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    3902:	4630      	mov	r0, r6
    3904:	f7ff fb86 	bl	3014 <hci_le_set_data_len.isra.29>
		if (!err) {
    3908:	2800      	cmp	r0, #0
    390a:	f040 808d 	bne.w	3a28 <bt_recv+0x520>
    390e:	f44f 7180 	mov.w	r1, #256	; 0x100
    3912:	e7e8      	b.n	38e6 <bt_recv+0x3de>
    3914:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3916:	78d9      	ldrb	r1, [r3, #3]
    3918:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    391a:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    391c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3920:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3924:	7959      	ldrb	r1, [r3, #5]
    3926:	791a      	ldrb	r2, [r3, #4]
    3928:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    392c:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
	param.latency = sys_le16_to_cpu(evt->latency);
    3930:	799a      	ldrb	r2, [r3, #6]
    3932:	79d9      	ldrb	r1, [r3, #7]
    3934:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3938:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
	param.timeout = sys_le16_to_cpu(evt->timeout);
    393c:	7a1a      	ldrb	r2, [r3, #8]
    393e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3940:	b2be      	uxth	r6, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3942:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    3946:	4630      	mov	r0, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3948:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	conn = bt_conn_lookup_handle(handle);
    394c:	f000 fffe 	bl	494c <bt_conn_lookup_handle>
	if (!conn) {
    3950:	4680      	mov	r8, r0
    3952:	b968      	cbnz	r0, 3970 <bt_recv+0x468>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3954:	9502      	str	r5, [sp, #8]
    3956:	e88d 0060 	stmia.w	sp, {r5, r6}
    395a:	4b70      	ldr	r3, [pc, #448]	; (3b1c <bt_recv+0x614>)
    395c:	4a6b      	ldr	r2, [pc, #428]	; (3b0c <bt_recv+0x604>)
    395e:	4969      	ldr	r1, [pc, #420]	; (3b04 <bt_recv+0x5fc>)
    3960:	486b      	ldr	r0, [pc, #428]	; (3b10 <bt_recv+0x608>)
    3962:	f7fd fb13 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    3966:	2102      	movs	r1, #2
    3968:	4630      	mov	r0, r6
    396a:	f7ff fc77 	bl	325c <le_conn_param_neg_reply>
    396e:	e61b      	b.n	35a8 <bt_recv+0xa0>
	if (!le_param_req(conn, &param)) {
    3970:	a90e      	add	r1, sp, #56	; 0x38
    3972:	f000 fd13 	bl	439c <le_param_req>
    3976:	b928      	cbnz	r0, 3984 <bt_recv+0x47c>
		err = le_conn_param_neg_reply(handle,
    3978:	211e      	movs	r1, #30
    397a:	4630      	mov	r0, r6
    397c:	f7ff fc6e 	bl	325c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3980:	4640      	mov	r0, r8
    3982:	e78b      	b.n	389c <bt_recv+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3984:	210e      	movs	r1, #14
    3986:	f242 0020 	movw	r0, #8224	; 0x2020
    398a:	f7fe fc15 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    398e:	4606      	mov	r6, r0
    3990:	2800      	cmp	r0, #0
    3992:	d0f5      	beq.n	3980 <bt_recv+0x478>
	cp = net_buf_add(buf, sizeof(*cp));
    3994:	210e      	movs	r1, #14
    3996:	3008      	adds	r0, #8
    3998:	f00f fff8 	bl	1398c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    399c:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    399e:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    39a0:	2100      	movs	r1, #0
    39a2:	f7fe f957 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    39a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    39aa:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    39ac:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    39b0:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    39b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    39b6:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    39b8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
	cp->handle = sys_cpu_to_le16(handle);
    39bc:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    39be:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    39c0:	4631      	mov	r1, r6
    39c2:	f242 0020 	movw	r0, #8224	; 0x2020
    39c6:	f7fe fe49 	bl	265c <bt_hci_cmd_send>
    39ca:	e7d9      	b.n	3980 <bt_recv+0x478>
    39cc:	68a3      	ldr	r3, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    39ce:	f8b3 b000 	ldrh.w	fp, [r3]
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    39d2:	885f      	ldrh	r7, [r3, #2]
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    39d4:	f8b3 9006 	ldrh.w	r9, [r3, #6]
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    39d8:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    39dc:	f8b3 a008 	ldrh.w	sl, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
    39e0:	4658      	mov	r0, fp
    39e2:	f000 ffb3 	bl	494c <bt_conn_lookup_handle>
	if (!conn) {
    39e6:	4606      	mov	r6, r0
    39e8:	b920      	cbnz	r0, 39f4 <bt_recv+0x4ec>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    39ea:	9502      	str	r5, [sp, #8]
    39ec:	e88d 0820 	stmia.w	sp, {r5, fp}
    39f0:	4b4b      	ldr	r3, [pc, #300]	; (3b20 <bt_recv+0x618>)
    39f2:	e738      	b.n	3866 <bt_recv+0x35e>
    39f4:	f011 f820 	bl	14a38 <_impl_k_current_get>
	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
    39f8:	4b49      	ldr	r3, [pc, #292]	; (3b20 <bt_recv+0x618>)
    39fa:	9001      	str	r0, [sp, #4]
    39fc:	4a40      	ldr	r2, [pc, #256]	; (3b00 <bt_recv+0x5f8>)
    39fe:	4941      	ldr	r1, [pc, #260]	; (3b04 <bt_recv+0x5fc>)
    3a00:	9506      	str	r5, [sp, #24]
    3a02:	f8cd a014 	str.w	sl, [sp, #20]
    3a06:	f8cd 9010 	str.w	r9, [sp, #16]
    3a0a:	f8cd 800c 	str.w	r8, [sp, #12]
    3a0e:	9702      	str	r7, [sp, #8]
    3a10:	9500      	str	r5, [sp, #0]
    3a12:	4844      	ldr	r0, [pc, #272]	; (3b24 <bt_recv+0x61c>)
    3a14:	f7fd faba 	bl	f8c <printk>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a18:	f46f 7180 	mvn.w	r1, #256	; 0x100
    3a1c:	1d30      	adds	r0, r6, #4
    3a1e:	f7fe fb27 	bl	2070 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3a22:	05c0      	lsls	r0, r0, #23
    3a24:	f57f ae50 	bpl.w	36c8 <bt_recv+0x1c0>
	update_conn_param(conn);
    3a28:	4630      	mov	r0, r6
    3a2a:	f7fe fb33 	bl	2094 <update_conn_param>
    3a2e:	e64b      	b.n	36c8 <bt_recv+0x1c0>
    3a30:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3a32:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3a36:	4640      	mov	r0, r8
    3a38:	f000 ff88 	bl	494c <bt_conn_lookup_handle>
	if (!conn) {
    3a3c:	4606      	mov	r6, r0
    3a3e:	b920      	cbnz	r0, 3a4a <bt_recv+0x542>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a40:	9502      	str	r5, [sp, #8]
    3a42:	e88d 0120 	stmia.w	sp, {r5, r8}
    3a46:	4b38      	ldr	r3, [pc, #224]	; (3b28 <bt_recv+0x620>)
    3a48:	e70d      	b.n	3866 <bt_recv+0x35e>
    3a4a:	f010 fff5 	bl	14a38 <_impl_k_current_get>
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3a4e:	9505      	str	r5, [sp, #20]
    3a50:	793b      	ldrb	r3, [r7, #4]
    3a52:	9304      	str	r3, [sp, #16]
    3a54:	78fb      	ldrb	r3, [r7, #3]
    3a56:	9303      	str	r3, [sp, #12]
    3a58:	783b      	ldrb	r3, [r7, #0]
    3a5a:	9302      	str	r3, [sp, #8]
    3a5c:	9001      	str	r0, [sp, #4]
    3a5e:	9500      	str	r5, [sp, #0]
    3a60:	4b31      	ldr	r3, [pc, #196]	; (3b28 <bt_recv+0x620>)
    3a62:	4a27      	ldr	r2, [pc, #156]	; (3b00 <bt_recv+0x5f8>)
    3a64:	4927      	ldr	r1, [pc, #156]	; (3b04 <bt_recv+0x5fc>)
    3a66:	4831      	ldr	r0, [pc, #196]	; (3b2c <bt_recv+0x624>)
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3a68:	1d35      	adds	r5, r6, #4
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3a6a:	f7fd fa8f 	bl	f8c <printk>
    3a6e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3a72:	4628      	mov	r0, r5
    3a74:	f7fe fafc 	bl	2070 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3a78:	0601      	lsls	r1, r0, #24
    3a7a:	f57f ae25 	bpl.w	36c8 <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3a7e:	4b26      	ldr	r3, [pc, #152]	; (3b18 <bt_recv+0x610>)
    3a80:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3a84:	069a      	lsls	r2, r3, #26
    3a86:	d5cf      	bpl.n	3a28 <bt_recv+0x520>
    3a88:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    3a8c:	069b      	lsls	r3, r3, #26
    3a8e:	d5cb      	bpl.n	3a28 <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    3a90:	4630      	mov	r0, r6
    3a92:	f7ff fabf 	bl	3014 <hci_le_set_data_len.isra.29>
		if (!err) {
    3a96:	2800      	cmp	r0, #0
    3a98:	d1c6      	bne.n	3a28 <bt_recv+0x520>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
    3a9e:	4628      	mov	r0, r5
    3aa0:	e722      	b.n	38e8 <bt_recv+0x3e0>
    3aa2:	68a6      	ldr	r6, [r4, #8]
    3aa4:	f010 ffc8 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3aa8:	9503      	str	r5, [sp, #12]
    3aaa:	7833      	ldrb	r3, [r6, #0]
    3aac:	9302      	str	r3, [sp, #8]
    3aae:	9001      	str	r0, [sp, #4]
    3ab0:	4b1f      	ldr	r3, [pc, #124]	; (3b30 <bt_recv+0x628>)
    3ab2:	4a13      	ldr	r2, [pc, #76]	; (3b00 <bt_recv+0x5f8>)
    3ab4:	4913      	ldr	r1, [pc, #76]	; (3b04 <bt_recv+0x5fc>)
    3ab6:	9500      	str	r5, [sp, #0]
    3ab8:	481e      	ldr	r0, [pc, #120]	; (3b34 <bt_recv+0x62c>)
    3aba:	f7fd fa67 	bl	f8c <printk>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3abe:	f06f 0120 	mvn.w	r1, #32
    3ac2:	481d      	ldr	r0, [pc, #116]	; (3b38 <bt_recv+0x630>)
    3ac4:	f7fe fad4 	bl	2070 <atomic_and>
	if (!evt->status) {
    3ac8:	7833      	ldrb	r3, [r6, #0]
    3aca:	b943      	cbnz	r3, 3ade <bt_recv+0x5d6>
		memcpy(pub_key, evt->key, 64);
    3acc:	1c71      	adds	r1, r6, #1
    3ace:	2240      	movs	r2, #64	; 0x40
    3ad0:	481a      	ldr	r0, [pc, #104]	; (3b3c <bt_recv+0x634>)
    3ad2:	f7fe f893 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3ad6:	2110      	movs	r1, #16
    3ad8:	4817      	ldr	r0, [pc, #92]	; (3b38 <bt_recv+0x630>)
    3ada:	f7fe fab8 	bl	204e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3ade:	4b18      	ldr	r3, [pc, #96]	; (3b40 <bt_recv+0x638>)
    3ae0:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3ae2:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3ae4:	2d00      	cmp	r5, #0
    3ae6:	f43f ad5f 	beq.w	35a8 <bt_recv+0xa0>
		cb->func(evt->status ? NULL : evt->key);
    3aea:	7832      	ldrb	r2, [r6, #0]
    3aec:	682b      	ldr	r3, [r5, #0]
    3aee:	2a00      	cmp	r2, #0
    3af0:	bf0c      	ite	eq
    3af2:	4638      	moveq	r0, r7
    3af4:	2000      	movne	r0, #0
    3af6:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3af8:	686d      	ldr	r5, [r5, #4]
    3afa:	e7f3      	b.n	3ae4 <bt_recv+0x5dc>
    3afc:	00015c39 	.word	0x00015c39
    3b00:	000169e6 	.word	0x000169e6
    3b04:	000169ed 	.word	0x000169ed
    3b08:	000165a9 	.word	0x000165a9
    3b0c:	0001699e 	.word	0x0001699e
    3b10:	000165d3 	.word	0x000165d3
    3b14:	00015be5 	.word	0x00015be5
    3b18:	20003a90 	.word	0x20003a90
    3b1c:	00015c27 	.word	0x00015c27
    3b20:	00015bfd 	.word	0x00015bfd
    3b24:	00016607 	.word	0x00016607
    3b28:	00015c10 	.word	0x00015c10
    3b2c:	00016643 	.word	0x00016643
    3b30:	00015c51 	.word	0x00015c51
    3b34:	00016682 	.word	0x00016682
    3b38:	20003b00 	.word	0x20003b00
    3b3c:	200002b4 	.word	0x200002b4
    3b40:	200002f4 	.word	0x200002f4
    3b44:	68a6      	ldr	r6, [r4, #8]
    3b46:	f010 ff77 	bl	14a38 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3b4a:	9503      	str	r5, [sp, #12]
    3b4c:	7833      	ldrb	r3, [r6, #0]
    3b4e:	9500      	str	r5, [sp, #0]
	if (dh_key_cb) {
    3b50:	4da0      	ldr	r5, [pc, #640]	; (3dd4 <bt_recv+0x8cc>)
	BT_DBG("status: 0x%x", evt->status);
    3b52:	9302      	str	r3, [sp, #8]
    3b54:	9001      	str	r0, [sp, #4]
    3b56:	4aa0      	ldr	r2, [pc, #640]	; (3dd8 <bt_recv+0x8d0>)
    3b58:	4ba0      	ldr	r3, [pc, #640]	; (3ddc <bt_recv+0x8d4>)
    3b5a:	49a1      	ldr	r1, [pc, #644]	; (3de0 <bt_recv+0x8d8>)
    3b5c:	48a1      	ldr	r0, [pc, #644]	; (3de4 <bt_recv+0x8dc>)
    3b5e:	f7fd fa15 	bl	f8c <printk>
	if (dh_key_cb) {
    3b62:	682a      	ldr	r2, [r5, #0]
    3b64:	2a00      	cmp	r2, #0
    3b66:	f43f ad1f 	beq.w	35a8 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3b6a:	7833      	ldrb	r3, [r6, #0]
    3b6c:	b923      	cbnz	r3, 3b78 <bt_recv+0x670>
    3b6e:	1c70      	adds	r0, r6, #1
    3b70:	4790      	blx	r2
		dh_key_cb = NULL;
    3b72:	2300      	movs	r3, #0
    3b74:	602b      	str	r3, [r5, #0]
    3b76:	e517      	b.n	35a8 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3b78:	2000      	movs	r0, #0
    3b7a:	e7f9      	b.n	3b70 <bt_recv+0x668>
	u8_t num_reports = net_buf_pull_u8(buf);
    3b7c:	4638      	mov	r0, r7
    3b7e:	f00f ff3b 	bl	139f8 <net_buf_simple_pull_u8>
    3b82:	4680      	mov	r8, r0
    3b84:	f010 ff58 	bl	14a38 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3b88:	9503      	str	r5, [sp, #12]
    3b8a:	9001      	str	r0, [sp, #4]
    3b8c:	f8cd 8008 	str.w	r8, [sp, #8]
    3b90:	9500      	str	r5, [sp, #0]
    3b92:	4b95      	ldr	r3, [pc, #596]	; (3de8 <bt_recv+0x8e0>)
    3b94:	4a90      	ldr	r2, [pc, #576]	; (3dd8 <bt_recv+0x8d0>)
    3b96:	4992      	ldr	r1, [pc, #584]	; (3de0 <bt_recv+0x8d8>)
    3b98:	4894      	ldr	r0, [pc, #592]	; (3dec <bt_recv+0x8e4>)
    3b9a:	f7fd f9f7 	bl	f8c <printk>
	while (num_reports--) {
    3b9e:	f1b8 0f00 	cmp.w	r8, #0
    3ba2:	f43f ad01 	beq.w	35a8 <bt_recv+0xa0>
		info = (void *)buf->data;
    3ba6:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3ba8:	2109      	movs	r1, #9
    3baa:	4638      	mov	r0, r7
    3bac:	f00f ff1c 	bl	139e8 <net_buf_simple_pull>
		rssi = info->data[info->length];
    3bb0:	7a33      	ldrb	r3, [r6, #8]
    3bb2:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3bb4:	f106 0901 	add.w	r9, r6, #1
		rssi = info->data[info->length];
    3bb8:	f993 a009 	ldrsb.w	sl, [r3, #9]
    3bbc:	f010 ff3c 	bl	14a38 <_impl_k_current_get>
    3bc0:	4683      	mov	fp, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3bc2:	4648      	mov	r0, r9
    3bc4:	f7fe f8c6 	bl	1d54 <bt_addr_le_str>
    3bc8:	9506      	str	r5, [sp, #24]
    3bca:	f8cd a014 	str.w	sl, [sp, #20]
    3bce:	7a33      	ldrb	r3, [r6, #8]
    3bd0:	9304      	str	r3, [sp, #16]
    3bd2:	7833      	ldrb	r3, [r6, #0]
    3bd4:	9303      	str	r3, [sp, #12]
    3bd6:	9002      	str	r0, [sp, #8]
    3bd8:	4b83      	ldr	r3, [pc, #524]	; (3de8 <bt_recv+0x8e0>)
    3bda:	4981      	ldr	r1, [pc, #516]	; (3de0 <bt_recv+0x8d8>)
    3bdc:	4a7e      	ldr	r2, [pc, #504]	; (3dd8 <bt_recv+0x8d0>)
    3bde:	4884      	ldr	r0, [pc, #528]	; (3df0 <bt_recv+0x8e8>)
    3be0:	e88d 0820 	stmia.w	sp, {r5, fp}
    3be4:	f7fd f9d2 	bl	f8c <printk>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3be8:	7873      	ldrb	r3, [r6, #1]
    3bea:	3b02      	subs	r3, #2
    3bec:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3bee:	4649      	mov	r1, r9
    3bf0:	a80e      	add	r0, sp, #56	; 0x38
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3bf2:	f200 809d 	bhi.w	3d30 <bt_recv+0x828>
			bt_addr_le_copy(&id_addr, &info->addr);
    3bf6:	f7fe fa27 	bl	2048 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3bfa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3bfe:	3b02      	subs	r3, #2
    3c00:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		if (scan_dev_found_cb) {
    3c04:	f8df b218 	ldr.w	fp, [pc, #536]	; 3e20 <bt_recv+0x918>
    3c08:	f8db 3000 	ldr.w	r3, [fp]
    3c0c:	b1bb      	cbz	r3, 3c3e <bt_recv+0x736>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3c0e:	4638      	mov	r0, r7
    3c10:	f00f ff02 	bl	13a18 <net_buf_simple_headroom>
	state->len = buf->len;
    3c14:	89a3      	ldrh	r3, [r4, #12]
    3c16:	9309      	str	r3, [sp, #36]	; 0x24
			buf->len = info->length;
    3c18:	7a33      	ldrb	r3, [r6, #8]
    3c1a:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3c1c:	9008      	str	r0, [sp, #32]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3c1e:	463b      	mov	r3, r7
    3c20:	7832      	ldrb	r2, [r6, #0]
    3c22:	f8db b000 	ldr.w	fp, [fp]
    3c26:	4651      	mov	r1, sl
    3c28:	a80e      	add	r0, sp, #56	; 0x38
    3c2a:	47d8      	blx	fp
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3c2c:	6923      	ldr	r3, [r4, #16]
    3c2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    3c32:	fa13 f382 	uxtah	r3, r3, r2
    3c36:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3c38:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3c3c:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3c3e:	2109      	movs	r1, #9
    3c40:	486c      	ldr	r0, [pc, #432]	; (3df4 <bt_recv+0x8ec>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3c42:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3c44:	f7fe faaa 	bl	219c <atomic_test_bit>
    3c48:	4683      	mov	fp, r0
    3c4a:	2800      	cmp	r0, #0
    3c4c:	d166      	bne.n	3d1c <bt_recv+0x814>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3c4e:	2a01      	cmp	r2, #1
    3c50:	d864      	bhi.n	3d1c <bt_recv+0x814>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3c52:	2101      	movs	r1, #1
    3c54:	a80e      	add	r0, sp, #56	; 0x38
    3c56:	f000 fea9 	bl	49ac <bt_conn_lookup_state_le>
	if (!conn) {
    3c5a:	4682      	mov	sl, r0
    3c5c:	2800      	cmp	r0, #0
    3c5e:	d05d      	beq.n	3d1c <bt_recv+0x814>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3c60:	2108      	movs	r1, #8
    3c62:	4864      	ldr	r0, [pc, #400]	; (3df4 <bt_recv+0x8ec>)
    3c64:	f7fe fa9a 	bl	219c <atomic_test_bit>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d164      	bne.n	3d36 <bt_recv+0x82e>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3c6c:	2102      	movs	r1, #2
    3c6e:	4861      	ldr	r0, [pc, #388]	; (3df4 <bt_recv+0x8ec>)
    3c70:	f7fe fa94 	bl	219c <atomic_test_bit>
    3c74:	b110      	cbz	r0, 3c7c <bt_recv+0x774>
			set_random_address(&bt_dev.id_addr.a);
    3c76:	4860      	ldr	r0, [pc, #384]	; (3df8 <bt_recv+0x8f0>)
    3c78:	f7fe fba6 	bl	23c8 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3c7c:	495f      	ldr	r1, [pc, #380]	; (3dfc <bt_recv+0x8f4>)
    3c7e:	f10a 004b 	add.w	r0, sl, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3c82:	f10a 0b52 	add.w	fp, sl, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3c86:	f7fe f9df 	bl	2048 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3c8a:	4649      	mov	r1, r9
    3c8c:	4658      	mov	r0, fp
    3c8e:	f7fe f9db 	bl	2048 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3c92:	2119      	movs	r1, #25
    3c94:	f242 000d 	movw	r0, #8205	; 0x200d
    3c98:	f7fe fa8e 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    3c9c:	4603      	mov	r3, r0
    3c9e:	2800      	cmp	r0, #0
    3ca0:	d04e      	beq.n	3d40 <bt_recv+0x838>
	cp = net_buf_add(buf, sizeof(*cp));
    3ca2:	2119      	movs	r1, #25
    3ca4:	3008      	adds	r0, #8
    3ca6:	9309      	str	r3, [sp, #36]	; 0x24
    3ca8:	f00f fe70 	bl	1398c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3cac:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3cae:	4681      	mov	r9, r0
	memset(cp, 0, sizeof(*cp));
    3cb0:	2100      	movs	r1, #0
    3cb2:	f7fd ffcf 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3cb6:	2200      	movs	r2, #0
    3cb8:	2160      	movs	r1, #96	; 0x60
    3cba:	f889 1000 	strb.w	r1, [r9]
    3cbe:	f889 2001 	strb.w	r2, [r9, #1]
	cp->scan_window = cp->scan_interval;
    3cc2:	f889 1002 	strb.w	r1, [r9, #2]
    3cc6:	f889 2003 	strb.w	r2, [r9, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3cca:	4659      	mov	r1, fp
    3ccc:	f109 0005 	add.w	r0, r9, #5
	cp->scan_window = cp->scan_interval;
    3cd0:	9208      	str	r2, [sp, #32]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3cd2:	f7fe f9b9 	bl	2048 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3cd6:	f89a 104b 	ldrb.w	r1, [sl, #75]	; 0x4b
    3cda:	f889 100c 	strb.w	r1, [r9, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3cde:	f8ba 105c 	ldrh.w	r1, [sl, #92]	; 0x5c
    3ce2:	f8a9 100d 	strh.w	r1, [r9, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3ce6:	f8ba 105e 	ldrh.w	r1, [sl, #94]	; 0x5e
    3cea:	f8a9 100f 	strh.w	r1, [r9, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3cee:	f8ba 1060 	ldrh.w	r1, [sl, #96]	; 0x60
    3cf2:	f8a9 1011 	strh.w	r1, [r9, #17]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3cf8:	f8ba 1062 	ldrh.w	r1, [sl, #98]	; 0x62
    3cfc:	f8a9 1013 	strh.w	r1, [r9, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3d00:	9a08      	ldr	r2, [sp, #32]
    3d02:	4619      	mov	r1, r3
    3d04:	f242 000d 	movw	r0, #8205	; 0x200d
    3d08:	f7fe fab4 	bl	2274 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3d0c:	b9c0      	cbnz	r0, 3d40 <bt_recv+0x838>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3d0e:	4650      	mov	r0, sl
    3d10:	2102      	movs	r1, #2
    3d12:	f000 ff1f 	bl	4b54 <bt_conn_set_state>
	bt_conn_unref(conn);
    3d16:	4650      	mov	r0, sl
    3d18:	f000 fe66 	bl	49e8 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3d1c:	7a31      	ldrb	r1, [r6, #8]
    3d1e:	4638      	mov	r0, r7
    3d20:	3101      	adds	r1, #1
    3d22:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3d26:	f00f fe5f 	bl	139e8 <net_buf_simple_pull>
    3d2a:	fa5f f888 	uxtb.w	r8, r8
    3d2e:	e736      	b.n	3b9e <bt_recv+0x696>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3d30:	f7fe f98a 	bl	2048 <bt_addr_le_copy>
    3d34:	e766      	b.n	3c04 <bt_recv+0x6fc>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3d36:	4658      	mov	r0, fp
    3d38:	f7fe fb10 	bl	235c <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3d3c:	2800      	cmp	r0, #0
    3d3e:	d095      	beq.n	3c6c <bt_recv+0x764>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3d40:	231f      	movs	r3, #31
    3d42:	f88a 3008 	strb.w	r3, [sl, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3d46:	2100      	movs	r1, #0
    3d48:	4650      	mov	r0, sl
    3d4a:	f000 ff03 	bl	4b54 <bt_conn_set_state>
	bt_conn_unref(conn);
    3d4e:	4650      	mov	r0, sl
    3d50:	f000 fe4a 	bl	49e8 <bt_conn_unref>
	bt_le_scan_update(false);
    3d54:	2000      	movs	r0, #0
    3d56:	f7fe fd0f 	bl	2778 <bt_le_scan_update>
    3d5a:	e7df      	b.n	3d1c <bt_recv+0x814>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3d5c:	89a7      	ldrh	r7, [r4, #12]
    3d5e:	68a0      	ldr	r0, [r4, #8]
    3d60:	4639      	mov	r1, r7
    3d62:	f7fd ff9b 	bl	1c9c <bt_hex>
    3d66:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3d6a:	9003      	str	r0, [sp, #12]
    3d6c:	4b24      	ldr	r3, [pc, #144]	; (3e00 <bt_recv+0x8f8>)
    3d6e:	4a25      	ldr	r2, [pc, #148]	; (3e04 <bt_recv+0x8fc>)
    3d70:	491b      	ldr	r1, [pc, #108]	; (3de0 <bt_recv+0x8d8>)
    3d72:	4825      	ldr	r0, [pc, #148]	; (3e08 <bt_recv+0x900>)
    3d74:	9504      	str	r5, [sp, #16]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3d76:	f7fd f909 	bl	f8c <printk>
    3d7a:	e415      	b.n	35a8 <bt_recv+0xa0>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3d7c:	4b23      	ldr	r3, [pc, #140]	; (3e0c <bt_recv+0x904>)
    3d7e:	4a24      	ldr	r2, [pc, #144]	; (3e10 <bt_recv+0x908>)
    3d80:	4917      	ldr	r1, [pc, #92]	; (3de0 <bt_recv+0x8d8>)
    3d82:	9602      	str	r6, [sp, #8]
    3d84:	e88d 00c0 	stmia.w	sp, {r6, r7}
    3d88:	4822      	ldr	r0, [pc, #136]	; (3e14 <bt_recv+0x90c>)
    3d8a:	f7fd f8ff 	bl	f8c <printk>
		net_buf_unref(buf);
    3d8e:	4620      	mov	r0, r4
    3d90:	f00f fdca 	bl	13928 <net_buf_unref>
		return -EINVAL;
    3d94:	f06f 0015 	mvn.w	r0, #21
    3d98:	e426      	b.n	35e8 <bt_recv+0xe0>
	net_buf_pull(buf, sizeof(*hdr));
    3d9a:	f104 0708 	add.w	r7, r4, #8
    3d9e:	2102      	movs	r1, #2
    3da0:	4638      	mov	r0, r7
    3da2:	f00f fe21 	bl	139e8 <net_buf_simple_pull>
	switch (hdr->evt) {
    3da6:	f898 6000 	ldrb.w	r6, [r8]
    3daa:	2e05      	cmp	r6, #5
    3dac:	f43f ac47 	beq.w	363e <bt_recv+0x136>
    3db0:	2e3e      	cmp	r6, #62	; 0x3e
    3db2:	f43f ac9b 	beq.w	36ec <bt_recv+0x1e4>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3db6:	89a7      	ldrh	r7, [r4, #12]
    3db8:	68a0      	ldr	r0, [r4, #8]
    3dba:	4639      	mov	r1, r7
    3dbc:	f7fd ff6e 	bl	1c9c <bt_hex>
    3dc0:	9504      	str	r5, [sp, #16]
    3dc2:	9003      	str	r0, [sp, #12]
    3dc4:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3dc8:	4b13      	ldr	r3, [pc, #76]	; (3e18 <bt_recv+0x910>)
    3dca:	4a0e      	ldr	r2, [pc, #56]	; (3e04 <bt_recv+0x8fc>)
    3dcc:	4904      	ldr	r1, [pc, #16]	; (3de0 <bt_recv+0x8d8>)
    3dce:	4813      	ldr	r0, [pc, #76]	; (3e1c <bt_recv+0x914>)
    3dd0:	e7d1      	b.n	3d76 <bt_recv+0x86e>
    3dd2:	bf00      	nop
    3dd4:	200002b0 	.word	0x200002b0
    3dd8:	000169e6 	.word	0x000169e6
    3ddc:	00015c62 	.word	0x00015c62
    3de0:	000169ed 	.word	0x000169ed
    3de4:	00016682 	.word	0x00016682
    3de8:	00015cb4 	.word	0x00015cb4
    3dec:	000166a4 	.word	0x000166a4
    3df0:	000166d2 	.word	0x000166d2
    3df4:	20003b00 	.word	0x20003b00
    3df8:	20003a91 	.word	0x20003a91
    3dfc:	20003a90 	.word	0x20003a90
    3e00:	00015cc2 	.word	0x00015cc2
    3e04:	00016a28 	.word	0x00016a28
    3e08:	00016708 	.word	0x00016708
    3e0c:	00015e34 	.word	0x00015e34
    3e10:	0001699e 	.word	0x0001699e
    3e14:	0001676f 	.word	0x0001676f
    3e18:	00015cd4 	.word	0x00015cd4
    3e1c:	0001673d 	.word	0x0001673d
    3e20:	200002fc 	.word	0x200002fc

00003e24 <bt_recv_prio>:
{
    3e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3e28:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3e2a:	6887      	ldr	r7, [r0, #8]
    3e2c:	4c80      	ldr	r4, [pc, #512]	; (4030 <bt_recv_prio+0x20c>)
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3e2e:	2b01      	cmp	r3, #1
{
    3e30:	b089      	sub	sp, #36	; 0x24
    3e32:	4605      	mov	r5, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3e34:	d00d      	beq.n	3e52 <bt_recv_prio+0x2e>
    3e36:	4b7f      	ldr	r3, [pc, #508]	; (4034 <bt_recv_prio+0x210>)
    3e38:	4a7f      	ldr	r2, [pc, #508]	; (4038 <bt_recv_prio+0x214>)
    3e3a:	4980      	ldr	r1, [pc, #512]	; (403c <bt_recv_prio+0x218>)
    3e3c:	4880      	ldr	r0, [pc, #512]	; (4040 <bt_recv_prio+0x21c>)
    3e3e:	9401      	str	r4, [sp, #4]
    3e40:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3e42:	f7fd f8a3 	bl	f8c <printk>
    3e46:	4040      	eors	r0, r0
    3e48:	f380 8811 	msr	BASEPRI, r0
    3e4c:	f04f 0004 	mov.w	r0, #4
    3e50:	df02      	svc	2
    3e52:	8982      	ldrh	r2, [r0, #12]
    3e54:	2a01      	cmp	r2, #1
    3e56:	d806      	bhi.n	3e66 <bt_recv_prio+0x42>
    3e58:	9401      	str	r4, [sp, #4]
    3e5a:	9400      	str	r4, [sp, #0]
    3e5c:	4b75      	ldr	r3, [pc, #468]	; (4034 <bt_recv_prio+0x210>)
    3e5e:	4a76      	ldr	r2, [pc, #472]	; (4038 <bt_recv_prio+0x214>)
    3e60:	4976      	ldr	r1, [pc, #472]	; (403c <bt_recv_prio+0x218>)
    3e62:	4878      	ldr	r0, [pc, #480]	; (4044 <bt_recv_prio+0x220>)
    3e64:	e7ed      	b.n	3e42 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3e66:	783a      	ldrb	r2, [r7, #0]
    3e68:	2a13      	cmp	r2, #19
    3e6a:	f200 80d9 	bhi.w	4020 <bt_recv_prio+0x1fc>
    3e6e:	4093      	lsls	r3, r2
    3e70:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3e74:	f000 80d4 	beq.w	4020 <bt_recv_prio+0x1fc>
	net_buf_pull(buf, sizeof(*hdr));
    3e78:	f100 0608 	add.w	r6, r0, #8
    3e7c:	2102      	movs	r1, #2
    3e7e:	4630      	mov	r0, r6
    3e80:	f00f fdb2 	bl	139e8 <net_buf_simple_pull>
	switch (hdr->evt) {
    3e84:	783b      	ldrb	r3, [r7, #0]
    3e86:	2b0f      	cmp	r3, #15
    3e88:	d02c      	beq.n	3ee4 <bt_recv_prio+0xc0>
    3e8a:	2b13      	cmp	r3, #19
    3e8c:	d049      	beq.n	3f22 <bt_recv_prio+0xfe>
    3e8e:	2b0e      	cmp	r3, #14
    3e90:	f040 80bc 	bne.w	400c <bt_recv_prio+0x1e8>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3e94:	68ab      	ldr	r3, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3e96:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3e9a:	f893 8000 	ldrb.w	r8, [r3]
    3e9e:	f010 fdcb 	bl	14a38 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3ea2:	4b69      	ldr	r3, [pc, #420]	; (4048 <bt_recv_prio+0x224>)
    3ea4:	4a69      	ldr	r2, [pc, #420]	; (404c <bt_recv_prio+0x228>)
    3ea6:	9001      	str	r0, [sp, #4]
    3ea8:	4964      	ldr	r1, [pc, #400]	; (403c <bt_recv_prio+0x218>)
    3eaa:	9403      	str	r4, [sp, #12]
    3eac:	9702      	str	r7, [sp, #8]
    3eae:	9400      	str	r4, [sp, #0]
    3eb0:	4867      	ldr	r0, [pc, #412]	; (4050 <bt_recv_prio+0x22c>)
    3eb2:	f7fd f86b 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3eb6:	2103      	movs	r1, #3
    3eb8:	4630      	mov	r0, r6
    3eba:	f00f fd95 	bl	139e8 <net_buf_simple_pull>
	status = buf->data[0];
    3ebe:	68ab      	ldr	r3, [r5, #8]
	hci_cmd_done(opcode, status, buf);
    3ec0:	462a      	mov	r2, r5
    3ec2:	7819      	ldrb	r1, [r3, #0]
    3ec4:	4638      	mov	r0, r7
    3ec6:	f7fe f8f3 	bl	20b0 <hci_cmd_done>
	if (ncmd) {
    3eca:	f1b8 0f00 	cmp.w	r8, #0
    3ece:	d002      	beq.n	3ed6 <bt_recv_prio+0xb2>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3ed0:	4860      	ldr	r0, [pc, #384]	; (4054 <bt_recv_prio+0x230>)
    3ed2:	f010 fdc0 	bl	14a56 <_impl_k_sem_give>
	net_buf_unref(buf);
    3ed6:	4628      	mov	r0, r5
    3ed8:	f00f fd26 	bl	13928 <net_buf_unref>
}
    3edc:	2000      	movs	r0, #0
    3ede:	b009      	add	sp, #36	; 0x24
    3ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3ee4:	68af      	ldr	r7, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3ee6:	f8b7 8002 	ldrh.w	r8, [r7, #2]
	u8_t ncmd = evt->ncmd;
    3eea:	f897 9001 	ldrb.w	r9, [r7, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3eee:	f010 fda3 	bl	14a38 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3ef2:	4a56      	ldr	r2, [pc, #344]	; (404c <bt_recv_prio+0x228>)
    3ef4:	9001      	str	r0, [sp, #4]
    3ef6:	4b58      	ldr	r3, [pc, #352]	; (4058 <bt_recv_prio+0x234>)
    3ef8:	4950      	ldr	r1, [pc, #320]	; (403c <bt_recv_prio+0x218>)
    3efa:	9403      	str	r4, [sp, #12]
    3efc:	f8cd 8008 	str.w	r8, [sp, #8]
    3f00:	9400      	str	r4, [sp, #0]
    3f02:	4853      	ldr	r0, [pc, #332]	; (4050 <bt_recv_prio+0x22c>)
    3f04:	f7fd f842 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3f08:	2104      	movs	r1, #4
    3f0a:	4630      	mov	r0, r6
    3f0c:	f00f fd6c 	bl	139e8 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3f10:	462a      	mov	r2, r5
    3f12:	7839      	ldrb	r1, [r7, #0]
    3f14:	4640      	mov	r0, r8
    3f16:	f7fe f8cb 	bl	20b0 <hci_cmd_done>
	if (ncmd) {
    3f1a:	f1b9 0f00 	cmp.w	r9, #0
    3f1e:	d0da      	beq.n	3ed6 <bt_recv_prio+0xb2>
    3f20:	e7d6      	b.n	3ed0 <bt_recv_prio+0xac>
    3f22:	f8d5 b008 	ldr.w	fp, [r5, #8]
		BT_DBG("handle %u count %u", handle, count);
    3f26:	f8df 9114 	ldr.w	r9, [pc, #276]	; 403c <bt_recv_prio+0x218>
    3f2a:	f010 fd85 	bl	14a38 <_impl_k_current_get>
	BT_DBG("num_handles %u", evt->num_handles);
    3f2e:	9403      	str	r4, [sp, #12]
    3f30:	f89b 3000 	ldrb.w	r3, [fp]
    3f34:	9302      	str	r3, [sp, #8]
    3f36:	9001      	str	r0, [sp, #4]
    3f38:	9400      	str	r4, [sp, #0]
    3f3a:	4b48      	ldr	r3, [pc, #288]	; (405c <bt_recv_prio+0x238>)
    3f3c:	4a43      	ldr	r2, [pc, #268]	; (404c <bt_recv_prio+0x228>)
    3f3e:	493f      	ldr	r1, [pc, #252]	; (403c <bt_recv_prio+0x218>)
    3f40:	4847      	ldr	r0, [pc, #284]	; (4060 <bt_recv_prio+0x23c>)
    3f42:	f7fd f823 	bl	f8c <printk>
	for (i = 0; i < evt->num_handles; i++) {
    3f46:	f04f 0800 	mov.w	r8, #0
    3f4a:	f89b 3000 	ldrb.w	r3, [fp]
    3f4e:	4598      	cmp	r8, r3
    3f50:	dac1      	bge.n	3ed6 <bt_recv_prio+0xb2>
    3f52:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3f56:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3f5a:	f8b3 7003 	ldrh.w	r7, [r3, #3]
    3f5e:	f010 fd6b 	bl	14a38 <_impl_k_current_get>
		BT_DBG("handle %u count %u", handle, count);
    3f62:	9404      	str	r4, [sp, #16]
    3f64:	9001      	str	r0, [sp, #4]
    3f66:	9703      	str	r7, [sp, #12]
    3f68:	f8cd a008 	str.w	sl, [sp, #8]
    3f6c:	9400      	str	r4, [sp, #0]
    3f6e:	4b3b      	ldr	r3, [pc, #236]	; (405c <bt_recv_prio+0x238>)
    3f70:	4a36      	ldr	r2, [pc, #216]	; (404c <bt_recv_prio+0x228>)
    3f72:	483c      	ldr	r0, [pc, #240]	; (4064 <bt_recv_prio+0x240>)
    3f74:	4649      	mov	r1, r9
    3f76:	f7fd f809 	bl	f8c <printk>
	__asm__ volatile(
    3f7a:	f04f 0320 	mov.w	r3, #32
    3f7e:	f3ef 8211 	mrs	r2, BASEPRI
    3f82:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    3f86:	4650      	mov	r0, sl
    3f88:	9207      	str	r2, [sp, #28]
    3f8a:	f000 fcdf 	bl	494c <bt_conn_lookup_handle>
		if (!conn) {
    3f8e:	4606      	mov	r6, r0
    3f90:	b970      	cbnz	r0, 3fb0 <bt_recv_prio+0x18c>
			BT_ERR("No connection for handle %u", handle);
    3f92:	9402      	str	r4, [sp, #8]
    3f94:	e88d 0410 	stmia.w	sp, {r4, sl}
    3f98:	4b30      	ldr	r3, [pc, #192]	; (405c <bt_recv_prio+0x238>)
    3f9a:	4a27      	ldr	r2, [pc, #156]	; (4038 <bt_recv_prio+0x214>)
    3f9c:	4832      	ldr	r0, [pc, #200]	; (4068 <bt_recv_prio+0x244>)
    3f9e:	4649      	mov	r1, r9
    3fa0:	f7fc fff4 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3fa4:	9b07      	ldr	r3, [sp, #28]
    3fa6:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < evt->num_handles; i++) {
    3faa:	f108 0801 	add.w	r8, r8, #1
    3fae:	e7cc      	b.n	3f4a <bt_recv_prio+0x126>
    3fb0:	9b07      	ldr	r3, [sp, #28]
    3fb2:	f383 8811 	msr	BASEPRI, r3
			k_fifo_put(&conn->tx_notify, node);
    3fb6:	f100 0a18 	add.w	sl, r0, #24
		while (count--) {
    3fba:	b1d7      	cbz	r7, 3ff2 <bt_recv_prio+0x1ce>
	__asm__ volatile(
    3fbc:	f04f 0320 	mov.w	r3, #32
    3fc0:	f3ef 8011 	mrs	r0, BASEPRI
    3fc4:	f383 8811 	msr	BASEPRI, r3
    3fc8:	6931      	ldr	r1, [r6, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3fca:	b129      	cbz	r1, 3fd8 <bt_recv_prio+0x1b4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3fcc:	6972      	ldr	r2, [r6, #20]
	return node->next;
    3fce:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    3fd0:	6133      	str	r3, [r6, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3fd2:	4291      	cmp	r1, r2
	list->tail = node;
    3fd4:	bf08      	it	eq
    3fd6:	6173      	streq	r3, [r6, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3fd8:	f380 8811 	msr	BASEPRI, r0
    3fdc:	3f01      	subs	r7, #1
    3fde:	b2bf      	uxth	r7, r7
			if (!node) {
    3fe0:	b959      	cbnz	r1, 3ffa <bt_recv_prio+0x1d6>
				BT_ERR("packets count mismatch");
    3fe2:	9401      	str	r4, [sp, #4]
    3fe4:	9400      	str	r4, [sp, #0]
    3fe6:	4b1d      	ldr	r3, [pc, #116]	; (405c <bt_recv_prio+0x238>)
    3fe8:	4a13      	ldr	r2, [pc, #76]	; (4038 <bt_recv_prio+0x214>)
    3fea:	4820      	ldr	r0, [pc, #128]	; (406c <bt_recv_prio+0x248>)
    3fec:	4649      	mov	r1, r9
    3fee:	f7fc ffcd 	bl	f8c <printk>
		bt_conn_unref(conn);
    3ff2:	4630      	mov	r0, r6
    3ff4:	f000 fcf8 	bl	49e8 <bt_conn_unref>
    3ff8:	e7d7      	b.n	3faa <bt_recv_prio+0x186>
			k_fifo_put(&conn->tx_notify, node);
    3ffa:	4650      	mov	r0, sl
    3ffc:	f010 fa66 	bl	144cc <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4000:	4630      	mov	r0, r6
    4002:	f000 f9b3 	bl	436c <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4006:	f010 fd26 	bl	14a56 <_impl_k_sem_give>
    400a:	e7d6      	b.n	3fba <bt_recv_prio+0x196>
		net_buf_unref(buf);
    400c:	4628      	mov	r0, r5
    400e:	f00f fc8b 	bl	13928 <net_buf_unref>
		BT_ASSERT(0);
    4012:	9401      	str	r4, [sp, #4]
    4014:	9400      	str	r4, [sp, #0]
    4016:	4b07      	ldr	r3, [pc, #28]	; (4034 <bt_recv_prio+0x210>)
    4018:	4a07      	ldr	r2, [pc, #28]	; (4038 <bt_recv_prio+0x214>)
    401a:	4908      	ldr	r1, [pc, #32]	; (403c <bt_recv_prio+0x218>)
    401c:	4814      	ldr	r0, [pc, #80]	; (4070 <bt_recv_prio+0x24c>)
    401e:	e710      	b.n	3e42 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    4020:	9401      	str	r4, [sp, #4]
    4022:	9400      	str	r4, [sp, #0]
    4024:	4b03      	ldr	r3, [pc, #12]	; (4034 <bt_recv_prio+0x210>)
    4026:	4a04      	ldr	r2, [pc, #16]	; (4038 <bt_recv_prio+0x214>)
    4028:	4904      	ldr	r1, [pc, #16]	; (403c <bt_recv_prio+0x218>)
    402a:	4812      	ldr	r0, [pc, #72]	; (4074 <bt_recv_prio+0x250>)
    402c:	e709      	b.n	3e42 <bt_recv_prio+0x1e>
    402e:	bf00      	nop
    4030:	000155c5 	.word	0x000155c5
    4034:	00015e3c 	.word	0x00015e3c
    4038:	0001699e 	.word	0x0001699e
    403c:	000169ed 	.word	0x000169ed
    4040:	000167d2 	.word	0x000167d2
    4044:	00016816 	.word	0x00016816
    4048:	00015c94 	.word	0x00015c94
    404c:	000169e6 	.word	0x000169e6
    4050:	00016850 	.word	0x00016850
    4054:	20003b38 	.word	0x20003b38
    4058:	00015ca5 	.word	0x00015ca5
    405c:	00015b89 	.word	0x00015b89
    4060:	00016873 	.word	0x00016873
    4064:	00016897 	.word	0x00016897
    4068:	000168bf 	.word	0x000168bf
    406c:	000168eb 	.word	0x000168eb
    4070:	00016912 	.word	0x00016912
    4074:	00016935 	.word	0x00016935

00004078 <bt_hci_driver_register>:
{
    4078:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    407a:	4b13      	ldr	r3, [pc, #76]	; (40c8 <bt_hci_driver_register+0x50>)
    407c:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
    4080:	b085      	sub	sp, #20
    4082:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    4084:	b9cc      	cbnz	r4, 40ba <bt_hci_driver_register+0x42>
	if (!drv->open || !drv->send) {
    4086:	68c2      	ldr	r2, [r0, #12]
    4088:	b1d2      	cbz	r2, 40c0 <bt_hci_driver_register+0x48>
    408a:	6902      	ldr	r2, [r0, #16]
    408c:	b1c2      	cbz	r2, 40c0 <bt_hci_driver_register+0x48>
	bt_dev.drv = drv;
    408e:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4092:	f010 fcd1 	bl	14a38 <_impl_k_current_get>
    4096:	4a0d      	ldr	r2, [pc, #52]	; (40cc <bt_hci_driver_register+0x54>)
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    4098:	682b      	ldr	r3, [r5, #0]
    409a:	9203      	str	r2, [sp, #12]
    409c:	2b00      	cmp	r3, #0
    409e:	bf08      	it	eq
    40a0:	4613      	moveq	r3, r2
    40a2:	9302      	str	r3, [sp, #8]
    40a4:	9001      	str	r0, [sp, #4]
    40a6:	9200      	str	r2, [sp, #0]
    40a8:	4b09      	ldr	r3, [pc, #36]	; (40d0 <bt_hci_driver_register+0x58>)
    40aa:	4a0a      	ldr	r2, [pc, #40]	; (40d4 <bt_hci_driver_register+0x5c>)
    40ac:	490a      	ldr	r1, [pc, #40]	; (40d8 <bt_hci_driver_register+0x60>)
    40ae:	480b      	ldr	r0, [pc, #44]	; (40dc <bt_hci_driver_register+0x64>)
    40b0:	f7fc ff6c 	bl	f8c <printk>
	return 0;
    40b4:	4620      	mov	r0, r4
}
    40b6:	b005      	add	sp, #20
    40b8:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    40ba:	f06f 0044 	mvn.w	r0, #68	; 0x44
    40be:	e7fa      	b.n	40b6 <bt_hci_driver_register+0x3e>
		return -EINVAL;
    40c0:	f06f 0015 	mvn.w	r0, #21
    40c4:	e7f7      	b.n	40b6 <bt_hci_driver_register+0x3e>
    40c6:	bf00      	nop
    40c8:	20003a90 	.word	0x20003a90
    40cc:	000155c5 	.word	0x000155c5
    40d0:	00015e49 	.word	0x00015e49
    40d4:	000169e6 	.word	0x000169e6
    40d8:	000169ed 	.word	0x000169ed
    40dc:	000160ab 	.word	0x000160ab

000040e0 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    40e0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    40e2:	4d2a      	ldr	r5, [pc, #168]	; (418c <bt_enable+0xac>)
    40e4:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    40e8:	b086      	sub	sp, #24
    40ea:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    40ec:	b96b      	cbnz	r3, 410a <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    40ee:	4b28      	ldr	r3, [pc, #160]	; (4190 <bt_enable+0xb0>)
    40f0:	9301      	str	r3, [sp, #4]
    40f2:	9300      	str	r3, [sp, #0]
    40f4:	4a27      	ldr	r2, [pc, #156]	; (4194 <bt_enable+0xb4>)
    40f6:	4b28      	ldr	r3, [pc, #160]	; (4198 <bt_enable+0xb8>)
    40f8:	4928      	ldr	r1, [pc, #160]	; (419c <bt_enable+0xbc>)
    40fa:	4829      	ldr	r0, [pc, #164]	; (41a0 <bt_enable+0xc0>)
    40fc:	f7fc ff46 	bl	f8c <printk>
		return -ENODEV;
    4100:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    4104:	4620      	mov	r0, r4
    4106:	b006      	add	sp, #24
    4108:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    410a:	2101      	movs	r1, #1
    410c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    4110:	f7fd ff9d 	bl	204e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4114:	f010 0001 	ands.w	r0, r0, #1
    4118:	d134      	bne.n	4184 <bt_enable+0xa4>
	ready_cb = cb;
    411a:	4b22      	ldr	r3, [pc, #136]	; (41a4 <bt_enable+0xc4>)

    411c:	4922      	ldr	r1, [pc, #136]	; (41a8 <bt_enable+0xc8>)
    411e:	601e      	str	r6, [r3, #0]
    4120:	f06f 0308 	mvn.w	r3, #8
    4124:	9005      	str	r0, [sp, #20]
    4126:	9004      	str	r0, [sp, #16]
    4128:	9303      	str	r3, [sp, #12]
    412a:	9002      	str	r0, [sp, #8]
    412c:	9001      	str	r0, [sp, #4]
    412e:	9000      	str	r0, [sp, #0]
    4130:	4b1e      	ldr	r3, [pc, #120]	; (41ac <bt_enable+0xcc>)
    4132:	481f      	ldr	r0, [pc, #124]	; (41b0 <bt_enable+0xd0>)
    4134:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    4138:	f010 fe8a 	bl	14e50 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    413c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    4140:	68db      	ldr	r3, [r3, #12]
    4142:	4798      	blx	r3
	if (err) {
    4144:	4604      	mov	r4, r0
    4146:	b150      	cbz	r0, 415e <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    4148:	4b11      	ldr	r3, [pc, #68]	; (4190 <bt_enable+0xb0>)
    414a:	9302      	str	r3, [sp, #8]
    414c:	e88d 0018 	stmia.w	sp, {r3, r4}
    4150:	4a10      	ldr	r2, [pc, #64]	; (4194 <bt_enable+0xb4>)
    4152:	4b11      	ldr	r3, [pc, #68]	; (4198 <bt_enable+0xb8>)
    4154:	4911      	ldr	r1, [pc, #68]	; (419c <bt_enable+0xbc>)
    4156:	4817      	ldr	r0, [pc, #92]	; (41b4 <bt_enable+0xd4>)
    4158:	f7fc ff18 	bl	f8c <printk>
		return err;
    415c:	e7d2      	b.n	4104 <bt_enable+0x24>
	if (!cb) {
    415e:	b926      	cbnz	r6, 416a <bt_enable+0x8a>
}
    4160:	b006      	add	sp, #24
    4162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    4166:	f7fe bb39 	b.w	27dc <bt_init>
    416a:	2101      	movs	r1, #1
    416c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    4170:	f7fd ff6d 	bl	204e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4174:	07c3      	lsls	r3, r0, #31
    4176:	d4c5      	bmi.n	4104 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    4178:	f105 0164 	add.w	r1, r5, #100	; 0x64
    417c:	480e      	ldr	r0, [pc, #56]	; (41b8 <bt_enable+0xd8>)
    417e:	f010 f9a5 	bl	144cc <k_queue_append>
    4182:	e7bf      	b.n	4104 <bt_enable+0x24>
		return -EALREADY;
    4184:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4188:	e7bc      	b.n	4104 <bt_enable+0x24>
    418a:	bf00      	nop
    418c:	20003a90 	.word	0x20003a90
    4190:	000155c5 	.word	0x000155c5
    4194:	0001699e 	.word	0x0001699e
    4198:	00015e60 	.word	0x00015e60
    419c:	000169ed 	.word	0x000169ed
    41a0:	00015f4c 	.word	0x00015f4c
    41a4:	200002f8 	.word	0x200002f8
    41a8:	20001a38 	.word	0x20001a38
    41ac:	00003291 	.word	0x00003291
    41b0:	20000300 	.word	0x20000300
    41b4:	00015f75 	.word	0x00015f75
    41b8:	200019b8 	.word	0x200019b8

000041bc <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    41bc:	2000      	movs	r0, #0
    41be:	4770      	bx	lr

000041c0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    41c0:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    41c2:	7803      	ldrb	r3, [r0, #0]
    41c4:	2b01      	cmp	r3, #1
{
    41c6:	4605      	mov	r5, r0
    41c8:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    41ca:	d810      	bhi.n	41ee <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    41cc:	7843      	ldrb	r3, [r0, #1]
    41ce:	2b01      	cmp	r3, #1
    41d0:	d80d      	bhi.n	41ee <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    41d2:	8841      	ldrh	r1, [r0, #2]
    41d4:	1f0b      	subs	r3, r1, #4
    41d6:	b29b      	uxth	r3, r3
    41d8:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    41dc:	4283      	cmp	r3, r0
    41de:	d806      	bhi.n	41ee <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    41e0:	88aa      	ldrh	r2, [r5, #4]
    41e2:	1f13      	subs	r3, r2, #4
    41e4:	b29b      	uxth	r3, r3
    41e6:	4283      	cmp	r3, r0
    41e8:	d801      	bhi.n	41ee <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    41ea:	4291      	cmp	r1, r2
    41ec:	d22b      	bcs.n	4246 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    41ee:	f06f 0415 	mvn.w	r4, #21
    41f2:	e00e      	b.n	4212 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    41f4:	2108      	movs	r1, #8
    41f6:	4819      	ldr	r0, [pc, #100]	; (425c <bt_le_scan_start+0x9c>)
    41f8:	f7fd ffd0 	bl	219c <atomic_test_bit>
    41fc:	b158      	cbz	r0, 4216 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    41fe:	4610      	mov	r0, r2
    4200:	f7fe f8ac 	bl	235c <set_le_scan_enable>
		if (err) {
    4204:	4604      	mov	r4, r0
    4206:	b130      	cbz	r0, 4216 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4208:	f46f 7100 	mvn.w	r1, #512	; 0x200
    420c:	4813      	ldr	r0, [pc, #76]	; (425c <bt_le_scan_start+0x9c>)
    420e:	f7fd ff2f 	bl	2070 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    4212:	4620      	mov	r0, r4
    4214:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    4216:	786b      	ldrb	r3, [r5, #1]
    4218:	b17b      	cbz	r3, 423a <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    421a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    421e:	480f      	ldr	r0, [pc, #60]	; (425c <bt_le_scan_start+0x9c>)
    4220:	f7fd ff15 	bl	204e <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    4224:	88aa      	ldrh	r2, [r5, #4]
    4226:	8869      	ldrh	r1, [r5, #2]
    4228:	7828      	ldrb	r0, [r5, #0]
    422a:	f7fe fa61 	bl	26f0 <start_le_scan>
	if (err) {
    422e:	4604      	mov	r4, r0
    4230:	2800      	cmp	r0, #0
    4232:	d1e9      	bne.n	4208 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    4234:	4b0a      	ldr	r3, [pc, #40]	; (4260 <bt_le_scan_start+0xa0>)
    4236:	601e      	str	r6, [r3, #0]
	return 0;
    4238:	e7eb      	b.n	4212 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    423a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    423e:	4807      	ldr	r0, [pc, #28]	; (425c <bt_le_scan_start+0x9c>)
    4240:	f7fd ff16 	bl	2070 <atomic_and>
    4244:	e7ee      	b.n	4224 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4246:	f44f 7100 	mov.w	r1, #512	; 0x200
    424a:	4804      	ldr	r0, [pc, #16]	; (425c <bt_le_scan_start+0x9c>)
    424c:	f7fd feff 	bl	204e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4250:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    4254:	d0ce      	beq.n	41f4 <bt_le_scan_start+0x34>
		return -EALREADY;
    4256:	f06f 0444 	mvn.w	r4, #68	; 0x44
    425a:	e7da      	b.n	4212 <bt_le_scan_start+0x52>
    425c:	20003b00 	.word	0x20003b00
    4260:	200002fc 	.word	0x200002fc

00004264 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    4264:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4266:	f46f 7100 	mvn.w	r1, #512	; 0x200
    426a:	4807      	ldr	r0, [pc, #28]	; (4288 <bt_le_scan_stop+0x24>)
    426c:	f7fd ff00 	bl	2070 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4270:	0583      	lsls	r3, r0, #22
    4272:	d506      	bpl.n	4282 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    4274:	4b05      	ldr	r3, [pc, #20]	; (428c <bt_le_scan_stop+0x28>)
    4276:	2000      	movs	r0, #0
    4278:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    427a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    427e:	f7fe ba7b 	b.w	2778 <bt_le_scan_update>
}
    4282:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4286:	bd08      	pop	{r3, pc}
    4288:	20003b00 	.word	0x20003b00
    428c:	200002fc 	.word	0x200002fc

00004290 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    4290:	b538      	push	{r3, r4, r5, lr}
    4292:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    4294:	4805      	ldr	r0, [pc, #20]	; (42ac <bt_buf_get_rx+0x1c>)
    4296:	f00f fb17 	bl	138c8 <net_buf_alloc_fixed>
#endif

	if (buf) {
    429a:	4604      	mov	r4, r0
    429c:	b120      	cbz	r0, 42a8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    429e:	2100      	movs	r1, #0
    42a0:	3008      	adds	r0, #8
    42a2:	f00f fb30 	bl	13906 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    42a6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    42a8:	4620      	mov	r0, r4
    42aa:	bd38      	pop	{r3, r4, r5, pc}
    42ac:	20003fbc 	.word	0x20003fbc

000042b0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    42b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    42b2:	4606      	mov	r6, r0
	__asm__ volatile(
    42b4:	f04f 0320 	mov.w	r3, #32
    42b8:	f3ef 8211 	mrs	r2, BASEPRI
    42bc:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    42c0:	4b13      	ldr	r3, [pc, #76]	; (4310 <bt_buf_get_cmd_complete+0x60>)
	bt_dev.sent_cmd = NULL;
    42c2:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    42c4:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    42c8:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    42cc:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    42d0:	f010 fbb2 	bl	14a38 <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    42d4:	4b0f      	ldr	r3, [pc, #60]	; (4314 <bt_buf_get_cmd_complete+0x64>)
    42d6:	9303      	str	r3, [sp, #12]
    42d8:	9001      	str	r0, [sp, #4]
    42da:	9300      	str	r3, [sp, #0]
    42dc:	9402      	str	r4, [sp, #8]
    42de:	4b0e      	ldr	r3, [pc, #56]	; (4318 <bt_buf_get_cmd_complete+0x68>)
    42e0:	4a0e      	ldr	r2, [pc, #56]	; (431c <bt_buf_get_cmd_complete+0x6c>)
    42e2:	490f      	ldr	r1, [pc, #60]	; (4320 <bt_buf_get_cmd_complete+0x70>)
    42e4:	480f      	ldr	r0, [pc, #60]	; (4324 <bt_buf_get_cmd_complete+0x74>)
    42e6:	f7fc fe51 	bl	f8c <printk>

	if (buf) {
    42ea:	b934      	cbnz	r4, 42fa <bt_buf_get_cmd_complete+0x4a>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    42ec:	4631      	mov	r1, r6
    42ee:	2001      	movs	r0, #1
}
    42f0:	b004      	add	sp, #16
    42f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    42f6:	f7ff bfcb 	b.w	4290 <bt_buf_get_rx>
    42fa:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    42fc:	f104 0008 	add.w	r0, r4, #8
    4300:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    4302:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4304:	4629      	mov	r1, r5
    4306:	f00f fafe 	bl	13906 <net_buf_simple_reserve>
}
    430a:	4620      	mov	r0, r4
    430c:	b004      	add	sp, #16
    430e:	bd70      	pop	{r4, r5, r6, pc}
    4310:	20003a90 	.word	0x20003a90
    4314:	000155c5 	.word	0x000155c5
    4318:	00015e6a 	.word	0x00015e6a
    431c:	000169e6 	.word	0x000169e6
    4320:	000169ed 	.word	0x000169ed
    4324:	00015e82 	.word	0x00015e82

00004328 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    4328:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    432a:	4b06      	ldr	r3, [pc, #24]	; (4344 <notify_connected+0x1c>)
    432c:	681c      	ldr	r4, [r3, #0]
{
    432e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4330:	b904      	cbnz	r4, 4334 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    4332:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    4334:	6823      	ldr	r3, [r4, #0]
    4336:	b113      	cbz	r3, 433e <notify_connected+0x16>
			cb->connected(conn, conn->err);
    4338:	7a29      	ldrb	r1, [r5, #8]
    433a:	4628      	mov	r0, r5
    433c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    433e:	6924      	ldr	r4, [r4, #16]
    4340:	e7f6      	b.n	4330 <notify_connected+0x8>
    4342:	bf00      	nop
    4344:	20000370 	.word	0x20000370

00004348 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4348:	f3bf 8f5b 	dmb	ish
    434c:	6800      	ldr	r0, [r0, #0]
    434e:	f3bf 8f5b 	dmb	ish
}
    4352:	4770      	bx	lr

00004354 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    4354:	8943      	ldrh	r3, [r0, #10]
{
    4356:	b510      	push	{r4, lr}
    4358:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    435a:	b12b      	cbz	r3, 4368 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    435c:	68c0      	ldr	r0, [r0, #12]
    435e:	f00f fae3 	bl	13928 <net_buf_unref>
	conn->rx = NULL;
    4362:	2300      	movs	r3, #0
    4364:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    4366:	8163      	strh	r3, [r4, #10]
    4368:	bd10      	pop	{r4, pc}
	...

0000436c <bt_conn_get_pkts>:
}
    436c:	4800      	ldr	r0, [pc, #0]	; (4370 <bt_conn_get_pkts+0x4>)
    436e:	4770      	bx	lr
    4370:	20003b1c 	.word	0x20003b1c

00004374 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    4374:	4b08      	ldr	r3, [pc, #32]	; (4398 <notify_le_param_updated+0x24>)
{
    4376:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    4378:	681c      	ldr	r4, [r3, #0]
{
    437a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    437c:	b904      	cbnz	r4, 4380 <notify_le_param_updated+0xc>
}
    437e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    4380:	68e6      	ldr	r6, [r4, #12]
    4382:	b13e      	cbz	r6, 4394 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    4384:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    4388:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    438c:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    4390:	4628      	mov	r0, r5
    4392:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    4394:	6924      	ldr	r4, [r4, #16]
    4396:	e7f1      	b.n	437c <notify_le_param_updated+0x8>
    4398:	20000370 	.word	0x20000370

0000439c <le_param_req>:
{
    439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    439e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    43a0:	4608      	mov	r0, r1
{
    43a2:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    43a4:	f7fe f884 	bl	24b0 <bt_le_conn_params_valid>
    43a8:	4605      	mov	r5, r0
    43aa:	b910      	cbnz	r0, 43b2 <le_param_req+0x16>
		return false;
    43ac:	2500      	movs	r5, #0
}
    43ae:	4628      	mov	r0, r5
    43b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    43b2:	4b09      	ldr	r3, [pc, #36]	; (43d8 <le_param_req+0x3c>)
    43b4:	681c      	ldr	r4, [r3, #0]
    43b6:	2c00      	cmp	r4, #0
    43b8:	d0f9      	beq.n	43ae <le_param_req+0x12>
		if (!cb->le_param_req) {
    43ba:	68a3      	ldr	r3, [r4, #8]
    43bc:	b90b      	cbnz	r3, 43c2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    43be:	6924      	ldr	r4, [r4, #16]
    43c0:	e7f9      	b.n	43b6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    43c2:	4631      	mov	r1, r6
    43c4:	4638      	mov	r0, r7
    43c6:	4798      	blx	r3
    43c8:	2800      	cmp	r0, #0
    43ca:	d0ef      	beq.n	43ac <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    43cc:	4630      	mov	r0, r6
    43ce:	f7fe f86f 	bl	24b0 <bt_le_conn_params_valid>
    43d2:	2800      	cmp	r0, #0
    43d4:	d1f3      	bne.n	43be <le_param_req+0x22>
    43d6:	e7e9      	b.n	43ac <le_param_req+0x10>
    43d8:	20000370 	.word	0x20000370

000043dc <bt_conn_cb_register>:
	cb->_next = callback_list;
    43dc:	4b02      	ldr	r3, [pc, #8]	; (43e8 <bt_conn_cb_register+0xc>)
    43de:	681a      	ldr	r2, [r3, #0]
    43e0:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    43e2:	6018      	str	r0, [r3, #0]
    43e4:	4770      	bx	lr
    43e6:	bf00      	nop
    43e8:	20000370 	.word	0x20000370

000043ec <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    43ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43f0:	b086      	sub	sp, #24
    43f2:	4690      	mov	r8, r2
    43f4:	460d      	mov	r5, r1
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    43f6:	4e66      	ldr	r6, [pc, #408]	; (4590 <bt_conn_recv+0x1a4>)
{
    43f8:	4604      	mov	r4, r0
    43fa:	f010 fb1d 	bl	14a38 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    43fe:	9605      	str	r6, [sp, #20]
    4400:	f8cd 8010 	str.w	r8, [sp, #16]
    4404:	89ab      	ldrh	r3, [r5, #12]
    4406:	9303      	str	r3, [sp, #12]
    4408:	8823      	ldrh	r3, [r4, #0]
    440a:	9302      	str	r3, [sp, #8]
    440c:	9001      	str	r0, [sp, #4]
    440e:	9600      	str	r6, [sp, #0]
    4410:	4b60      	ldr	r3, [pc, #384]	; (4594 <bt_conn_recv+0x1a8>)
    4412:	4a61      	ldr	r2, [pc, #388]	; (4598 <bt_conn_recv+0x1ac>)
    4414:	4961      	ldr	r1, [pc, #388]	; (459c <bt_conn_recv+0x1b0>)
    4416:	4862      	ldr	r0, [pc, #392]	; (45a0 <bt_conn_recv+0x1b4>)
    4418:	f7fc fdb8 	bl	f8c <printk>

	/* Check packet boundary flags */
	switch (flags) {
    441c:	f1b8 0f01 	cmp.w	r8, #1
    4420:	4637      	mov	r7, r6
    4422:	d038      	beq.n	4496 <bt_conn_recv+0xaa>
    4424:	f1b8 0f02 	cmp.w	r8, #2
    4428:	f040 8094 	bne.w	4554 <bt_conn_recv+0x168>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    442c:	68ab      	ldr	r3, [r5, #8]
    442e:	881e      	ldrh	r6, [r3, #0]
    4430:	f010 fb02 	bl	14a38 <_impl_k_current_get>

		BT_DBG("First, len %u final %u", buf->len, len);
    4434:	9704      	str	r7, [sp, #16]
    4436:	9603      	str	r6, [sp, #12]
    4438:	89ab      	ldrh	r3, [r5, #12]
    443a:	9302      	str	r3, [sp, #8]
    443c:	9001      	str	r0, [sp, #4]
    443e:	4b55      	ldr	r3, [pc, #340]	; (4594 <bt_conn_recv+0x1a8>)
    4440:	9700      	str	r7, [sp, #0]
    4442:	4a55      	ldr	r2, [pc, #340]	; (4598 <bt_conn_recv+0x1ac>)
    4444:	4955      	ldr	r1, [pc, #340]	; (459c <bt_conn_recv+0x1b0>)
    4446:	4857      	ldr	r0, [pc, #348]	; (45a4 <bt_conn_recv+0x1b8>)
    4448:	f7fc fda0 	bl	f8c <printk>

		if (conn->rx_len) {
    444c:	8963      	ldrh	r3, [r4, #10]
    444e:	b153      	cbz	r3, 4466 <bt_conn_recv+0x7a>
			BT_ERR("Unexpected first L2CAP frame");
    4450:	9701      	str	r7, [sp, #4]
    4452:	9700      	str	r7, [sp, #0]
    4454:	4b4f      	ldr	r3, [pc, #316]	; (4594 <bt_conn_recv+0x1a8>)
    4456:	4a54      	ldr	r2, [pc, #336]	; (45a8 <bt_conn_recv+0x1bc>)
    4458:	4950      	ldr	r1, [pc, #320]	; (459c <bt_conn_recv+0x1b0>)
    445a:	4854      	ldr	r0, [pc, #336]	; (45ac <bt_conn_recv+0x1c0>)
    445c:	f7fc fd96 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    4460:	4620      	mov	r0, r4
    4462:	f7ff ff77 	bl	4354 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    4466:	89ab      	ldrh	r3, [r5, #12]
    4468:	1af6      	subs	r6, r6, r3
    446a:	3604      	adds	r6, #4
    446c:	8166      	strh	r6, [r4, #10]
    446e:	f010 fae3 	bl	14a38 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    4472:	8963      	ldrh	r3, [r4, #10]
    4474:	9302      	str	r3, [sp, #8]
    4476:	9001      	str	r0, [sp, #4]
    4478:	4b46      	ldr	r3, [pc, #280]	; (4594 <bt_conn_recv+0x1a8>)
    447a:	9703      	str	r7, [sp, #12]
    447c:	9700      	str	r7, [sp, #0]
    447e:	4a46      	ldr	r2, [pc, #280]	; (4598 <bt_conn_recv+0x1ac>)
    4480:	4946      	ldr	r1, [pc, #280]	; (459c <bt_conn_recv+0x1b0>)
    4482:	484b      	ldr	r0, [pc, #300]	; (45b0 <bt_conn_recv+0x1c4>)
    4484:	f7fc fd82 	bl	f8c <printk>
		if (conn->rx_len) {
    4488:	8963      	ldrh	r3, [r4, #10]
    448a:	2b00      	cmp	r3, #0
    448c:	d051      	beq.n	4532 <bt_conn_recv+0x146>
			conn->rx = buf;
    448e:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    4490:	b006      	add	sp, #24
    4492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->rx_len) {
    4496:	8963      	ldrh	r3, [r4, #10]
    4498:	b983      	cbnz	r3, 44bc <bt_conn_recv+0xd0>
			BT_ERR("Unexpected L2CAP continuation");
    449a:	4b3e      	ldr	r3, [pc, #248]	; (4594 <bt_conn_recv+0x1a8>)
    449c:	4a42      	ldr	r2, [pc, #264]	; (45a8 <bt_conn_recv+0x1bc>)
    449e:	493f      	ldr	r1, [pc, #252]	; (459c <bt_conn_recv+0x1b0>)
    44a0:	4844      	ldr	r0, [pc, #272]	; (45b4 <bt_conn_recv+0x1c8>)
    44a2:	9601      	str	r6, [sp, #4]
    44a4:	9600      	str	r6, [sp, #0]
			BT_ERR("L2CAP data overflow");
    44a6:	f7fc fd71 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    44aa:	4620      	mov	r0, r4
    44ac:	f7ff ff52 	bl	4354 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    44b0:	4628      	mov	r0, r5
}
    44b2:	b006      	add	sp, #24
    44b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			net_buf_unref(buf);
    44b8:	f00f ba36 	b.w	13928 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    44bc:	89aa      	ldrh	r2, [r5, #12]
    44be:	429a      	cmp	r2, r3
    44c0:	d906      	bls.n	44d0 <bt_conn_recv+0xe4>
			BT_ERR("L2CAP data overflow");
    44c2:	9601      	str	r6, [sp, #4]
    44c4:	9600      	str	r6, [sp, #0]
    44c6:	4b33      	ldr	r3, [pc, #204]	; (4594 <bt_conn_recv+0x1a8>)
    44c8:	4a37      	ldr	r2, [pc, #220]	; (45a8 <bt_conn_recv+0x1bc>)
    44ca:	4934      	ldr	r1, [pc, #208]	; (459c <bt_conn_recv+0x1b0>)
    44cc:	483a      	ldr	r0, [pc, #232]	; (45b8 <bt_conn_recv+0x1cc>)
    44ce:	e7ea      	b.n	44a6 <bt_conn_recv+0xba>
    44d0:	f010 fab2 	bl	14a38 <_impl_k_current_get>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    44d4:	8963      	ldrh	r3, [r4, #10]
    44d6:	9604      	str	r6, [sp, #16]
    44d8:	9303      	str	r3, [sp, #12]
    44da:	89ab      	ldrh	r3, [r5, #12]
    44dc:	9302      	str	r3, [sp, #8]
    44de:	9001      	str	r0, [sp, #4]
    44e0:	4b2c      	ldr	r3, [pc, #176]	; (4594 <bt_conn_recv+0x1a8>)
    44e2:	4a2d      	ldr	r2, [pc, #180]	; (4598 <bt_conn_recv+0x1ac>)
    44e4:	492d      	ldr	r1, [pc, #180]	; (459c <bt_conn_recv+0x1b0>)
    44e6:	9600      	str	r6, [sp, #0]
    44e8:	4834      	ldr	r0, [pc, #208]	; (45bc <bt_conn_recv+0x1d0>)
    44ea:	f7fc fd4f 	bl	f8c <printk>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    44ee:	68e0      	ldr	r0, [r4, #12]
    44f0:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    44f4:	3008      	adds	r0, #8
    44f6:	f00f fa93 	bl	13a20 <net_buf_simple_tailroom>
    44fa:	4580      	cmp	r8, r0
    44fc:	d906      	bls.n	450c <bt_conn_recv+0x120>
			BT_ERR("Not enough buffer space for L2CAP data");
    44fe:	9601      	str	r6, [sp, #4]
    4500:	9600      	str	r6, [sp, #0]
    4502:	4b24      	ldr	r3, [pc, #144]	; (4594 <bt_conn_recv+0x1a8>)
    4504:	4a28      	ldr	r2, [pc, #160]	; (45a8 <bt_conn_recv+0x1bc>)
    4506:	4925      	ldr	r1, [pc, #148]	; (459c <bt_conn_recv+0x1b0>)
    4508:	482d      	ldr	r0, [pc, #180]	; (45c0 <bt_conn_recv+0x1d4>)
    450a:	e7cc      	b.n	44a6 <bt_conn_recv+0xba>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    450c:	68e0      	ldr	r0, [r4, #12]
    450e:	89aa      	ldrh	r2, [r5, #12]
    4510:	68a9      	ldr	r1, [r5, #8]
    4512:	3008      	adds	r0, #8
    4514:	f00f fa40 	bl	13998 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    4518:	8963      	ldrh	r3, [r4, #10]
    451a:	89aa      	ldrh	r2, [r5, #12]
    451c:	1a9b      	subs	r3, r3, r2
    451e:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    4520:	4628      	mov	r0, r5
    4522:	f00f fa01 	bl	13928 <net_buf_unref>
		if (conn->rx_len) {
    4526:	8963      	ldrh	r3, [r4, #10]
    4528:	2b00      	cmp	r3, #0
    452a:	d1b1      	bne.n	4490 <bt_conn_recv+0xa4>
		buf = conn->rx;
    452c:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    452e:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    4530:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    4532:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    4534:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    4536:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    4538:	1d19      	adds	r1, r3, #4
    453a:	4291      	cmp	r1, r2
    453c:	d014      	beq.n	4568 <bt_conn_recv+0x17c>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    453e:	9202      	str	r2, [sp, #8]
    4540:	9301      	str	r3, [sp, #4]
    4542:	9703      	str	r7, [sp, #12]
    4544:	9700      	str	r7, [sp, #0]
    4546:	4b13      	ldr	r3, [pc, #76]	; (4594 <bt_conn_recv+0x1a8>)
    4548:	4a17      	ldr	r2, [pc, #92]	; (45a8 <bt_conn_recv+0x1bc>)
    454a:	4914      	ldr	r1, [pc, #80]	; (459c <bt_conn_recv+0x1b0>)
    454c:	481d      	ldr	r0, [pc, #116]	; (45c4 <bt_conn_recv+0x1d8>)
    454e:	f7fc fd1d 	bl	f8c <printk>
    4552:	e7ad      	b.n	44b0 <bt_conn_recv+0xc4>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    4554:	9602      	str	r6, [sp, #8]
    4556:	e88d 0140 	stmia.w	sp, {r6, r8}
    455a:	4b0e      	ldr	r3, [pc, #56]	; (4594 <bt_conn_recv+0x1a8>)
    455c:	4a12      	ldr	r2, [pc, #72]	; (45a8 <bt_conn_recv+0x1bc>)
    455e:	490f      	ldr	r1, [pc, #60]	; (459c <bt_conn_recv+0x1b0>)
    4560:	4819      	ldr	r0, [pc, #100]	; (45c8 <bt_conn_recv+0x1dc>)
    4562:	f7fc fd13 	bl	f8c <printk>
    4566:	e7a0      	b.n	44aa <bt_conn_recv+0xbe>
    4568:	f010 fa66 	bl	14a38 <_impl_k_current_get>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    456c:	9703      	str	r7, [sp, #12]
    456e:	89ab      	ldrh	r3, [r5, #12]
    4570:	9302      	str	r3, [sp, #8]
    4572:	9001      	str	r0, [sp, #4]
    4574:	9700      	str	r7, [sp, #0]
    4576:	4b07      	ldr	r3, [pc, #28]	; (4594 <bt_conn_recv+0x1a8>)
    4578:	4a07      	ldr	r2, [pc, #28]	; (4598 <bt_conn_recv+0x1ac>)
    457a:	4908      	ldr	r1, [pc, #32]	; (459c <bt_conn_recv+0x1b0>)
    457c:	4813      	ldr	r0, [pc, #76]	; (45cc <bt_conn_recv+0x1e0>)
    457e:	f7fc fd05 	bl	f8c <printk>
	bt_l2cap_recv(conn, buf);
    4582:	4629      	mov	r1, r5
    4584:	4620      	mov	r0, r4
}
    4586:	b006      	add	sp, #24
    4588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_recv(conn, buf);
    458c:	f001 b8b4 	b.w	56f8 <bt_l2cap_recv>
    4590:	000155c5 	.word	0x000155c5
    4594:	00016e40 	.word	0x00016e40
    4598:	000169e6 	.word	0x000169e6
    459c:	000169ed 	.word	0x000169ed
    45a0:	0001700a 	.word	0x0001700a
    45a4:	0001703b 	.word	0x0001703b
    45a8:	0001699e 	.word	0x0001699e
    45ac:	00017067 	.word	0x00017067
    45b0:	00017094 	.word	0x00017094
    45b4:	000170b3 	.word	0x000170b3
    45b8:	000170e1 	.word	0x000170e1
    45bc:	00017105 	.word	0x00017105
    45c0:	00017131 	.word	0x00017131
    45c4:	00017196 	.word	0x00017196
    45c8:	00017168 	.word	0x00017168
    45cc:	000171c2 	.word	0x000171c2

000045d0 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    45d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45d2:	460c      	mov	r4, r1
    45d4:	b087      	sub	sp, #28
    45d6:	4606      	mov	r6, r0
    45d8:	4617      	mov	r7, r2
    45da:	f010 fa2d 	bl	14a38 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    45de:	89a3      	ldrh	r3, [r4, #12]
    45e0:	4d13      	ldr	r5, [pc, #76]	; (4630 <bt_conn_send_cb+0x60>)
    45e2:	9303      	str	r3, [sp, #12]
    45e4:	8833      	ldrh	r3, [r6, #0]
    45e6:	9302      	str	r3, [sp, #8]
    45e8:	9001      	str	r0, [sp, #4]
    45ea:	4b12      	ldr	r3, [pc, #72]	; (4634 <bt_conn_send_cb+0x64>)
    45ec:	9505      	str	r5, [sp, #20]
    45ee:	9704      	str	r7, [sp, #16]
    45f0:	9500      	str	r5, [sp, #0]
    45f2:	4a11      	ldr	r2, [pc, #68]	; (4638 <bt_conn_send_cb+0x68>)
    45f4:	4911      	ldr	r1, [pc, #68]	; (463c <bt_conn_send_cb+0x6c>)
    45f6:	4812      	ldr	r0, [pc, #72]	; (4640 <bt_conn_send_cb+0x70>)
    45f8:	f7fc fcc8 	bl	f8c <printk>

	if (conn->state != BT_CONN_CONNECTED) {
    45fc:	7a73      	ldrb	r3, [r6, #9]
    45fe:	2b03      	cmp	r3, #3
    4600:	d00e      	beq.n	4620 <bt_conn_send_cb+0x50>
		BT_ERR("not connected!");
    4602:	4b0c      	ldr	r3, [pc, #48]	; (4634 <bt_conn_send_cb+0x64>)
    4604:	4a0f      	ldr	r2, [pc, #60]	; (4644 <bt_conn_send_cb+0x74>)
    4606:	490d      	ldr	r1, [pc, #52]	; (463c <bt_conn_send_cb+0x6c>)
    4608:	9501      	str	r5, [sp, #4]
    460a:	9500      	str	r5, [sp, #0]
    460c:	480e      	ldr	r0, [pc, #56]	; (4648 <bt_conn_send_cb+0x78>)
    460e:	f7fc fcbd 	bl	f8c <printk>
		net_buf_unref(buf);
    4612:	4620      	mov	r0, r4
    4614:	f00f f988 	bl	13928 <net_buf_unref>
		return -ENOTCONN;
    4618:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    461c:	b007      	add	sp, #28
    461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_put(&conn->tx_queue, buf);
    4620:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    4624:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    4626:	4621      	mov	r1, r4
    4628:	f00f f971 	bl	1390e <net_buf_put>
	return 0;
    462c:	2000      	movs	r0, #0
    462e:	e7f5      	b.n	461c <bt_conn_send_cb+0x4c>
    4630:	000155c5 	.word	0x000155c5
    4634:	00016e4d 	.word	0x00016e4d
    4638:	000169e6 	.word	0x000169e6
    463c:	000169ed 	.word	0x000169ed
    4640:	00017226 	.word	0x00017226
    4644:	0001699e 	.word	0x0001699e
    4648:	0001725b 	.word	0x0001725b

0000464c <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    464c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4650:	4606      	mov	r6, r0
    4652:	f010 f9f1 	bl	14a38 <_impl_k_current_get>
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    4656:	4b13      	ldr	r3, [pc, #76]	; (46a4 <bt_conn_notify_tx+0x58>)
    4658:	9303      	str	r3, [sp, #12]
    465a:	9001      	str	r0, [sp, #4]
    465c:	9300      	str	r3, [sp, #0]
    465e:	9602      	str	r6, [sp, #8]
    4660:	4b11      	ldr	r3, [pc, #68]	; (46a8 <bt_conn_notify_tx+0x5c>)
    4662:	4a12      	ldr	r2, [pc, #72]	; (46ac <bt_conn_notify_tx+0x60>)
    4664:	4912      	ldr	r1, [pc, #72]	; (46b0 <bt_conn_notify_tx+0x64>)
    4666:	4813      	ldr	r0, [pc, #76]	; (46b4 <bt_conn_notify_tx+0x68>)
    4668:	4d13      	ldr	r5, [pc, #76]	; (46b8 <bt_conn_notify_tx+0x6c>)
    466a:	f7fc fc8f 	bl	f8c <printk>

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    466e:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    4672:	f04f 0800 	mov.w	r8, #0
    4676:	2100      	movs	r1, #0
    4678:	4638      	mov	r0, r7
    467a:	f00f ff4b 	bl	14514 <_impl_k_queue_get>
    467e:	4604      	mov	r4, r0
    4680:	b910      	cbnz	r0, 4688 <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    4682:	b004      	add	sp, #16
    4684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    4688:	6863      	ldr	r3, [r4, #4]
    468a:	b10b      	cbz	r3, 4690 <bt_conn_notify_tx+0x44>
			tx->cb(conn);
    468c:	4630      	mov	r0, r6
    468e:	4798      	blx	r3
    4690:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    4692:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4694:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    4696:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    469a:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    469c:	2b00      	cmp	r3, #0
    469e:	d1ea      	bne.n	4676 <bt_conn_notify_tx+0x2a>
	list->tail = node;
    46a0:	606c      	str	r4, [r5, #4]
    46a2:	e7e6      	b.n	4672 <bt_conn_notify_tx+0x26>
    46a4:	000155c5 	.word	0x000155c5
    46a8:	00016e5d 	.word	0x00016e5d
    46ac:	000169e6 	.word	0x000169e6
    46b0:	000169ed 	.word	0x000169ed
    46b4:	00016f41 	.word	0x00016f41
    46b8:	2000041c 	.word	0x2000041c

000046bc <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    46bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    46c0:	b088      	sub	sp, #32
    46c2:	460f      	mov	r7, r1
    46c4:	4614      	mov	r4, r2
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    46c6:	4e57      	ldr	r6, [pc, #348]	; (4824 <send_frag+0x168>)
{
    46c8:	4605      	mov	r5, r0
    46ca:	4699      	mov	r9, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    46cc:	f010 f9b4 	bl	14a38 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    46d0:	9606      	str	r6, [sp, #24]
    46d2:	9405      	str	r4, [sp, #20]
    46d4:	89bb      	ldrh	r3, [r7, #12]
    46d6:	4a54      	ldr	r2, [pc, #336]	; (4828 <send_frag+0x16c>)
    46d8:	9304      	str	r3, [sp, #16]
    46da:	9001      	str	r0, [sp, #4]
    46dc:	4b53      	ldr	r3, [pc, #332]	; (482c <send_frag+0x170>)
    46de:	4954      	ldr	r1, [pc, #336]	; (4830 <send_frag+0x174>)
    46e0:	9703      	str	r7, [sp, #12]
    46e2:	9502      	str	r5, [sp, #8]
    46e4:	9600      	str	r6, [sp, #0]
    46e6:	4853      	ldr	r0, [pc, #332]	; (4834 <send_frag+0x178>)
    46e8:	f7fc fc50 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    46ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    46f0:	4851      	ldr	r0, [pc, #324]	; (4838 <send_frag+0x17c>)
    46f2:	f010 f9d8 	bl	14aa6 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    46f6:	4b51      	ldr	r3, [pc, #324]	; (483c <send_frag+0x180>)
    46f8:	f103 0040 	add.w	r0, r3, #64	; 0x40
    46fc:	f7ff fe24 	bl	4348 <atomic_get>
    4700:	46b0      	mov	r8, r6
    4702:	b130      	cbz	r0, 4712 <send_frag+0x56>
		if (conns[i].state == BT_CONN_CONNECTED ||
    4704:	7a5a      	ldrb	r2, [r3, #9]
    4706:	3a03      	subs	r2, #3
    4708:	2a01      	cmp	r2, #1
    470a:	d802      	bhi.n	4712 <send_frag+0x56>
			bt_conn_notify_tx(&conns[i]);
    470c:	4618      	mov	r0, r3
    470e:	f7ff ff9d 	bl	464c <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    4712:	7a6b      	ldrb	r3, [r5, #9]
    4714:	2b03      	cmp	r3, #3
    4716:	d166      	bne.n	47e6 <send_frag+0x12a>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    4718:	2104      	movs	r1, #4
    471a:	f107 0008 	add.w	r0, r7, #8
    471e:	f00f f95b 	bl	139d8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4722:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    4724:	f8d7 a014 	ldr.w	sl, [r7, #20]
    4728:	4e45      	ldr	r6, [pc, #276]	; (4840 <send_frag+0x184>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    472a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    472e:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4730:	89bb      	ldrh	r3, [r7, #12]
    4732:	3b04      	subs	r3, #4
    4734:	8043      	strh	r3, [r0, #2]
    4736:	2302      	movs	r3, #2
    4738:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    473a:	f010 f97d 	bl	14a38 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    473e:	f8cd 8010 	str.w	r8, [sp, #16]
    4742:	9001      	str	r0, [sp, #4]
    4744:	f8cd a00c 	str.w	sl, [sp, #12]
    4748:	9502      	str	r5, [sp, #8]
    474a:	f8cd 8000 	str.w	r8, [sp]
    474e:	4b3d      	ldr	r3, [pc, #244]	; (4844 <send_frag+0x188>)
    4750:	4a35      	ldr	r2, [pc, #212]	; (4828 <send_frag+0x16c>)
    4752:	4937      	ldr	r1, [pc, #220]	; (4830 <send_frag+0x174>)
    4754:	483c      	ldr	r0, [pc, #240]	; (4848 <send_frag+0x18c>)
    4756:	f7fc fc19 	bl	f8c <printk>
    475a:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    475c:	6872      	ldr	r2, [r6, #4]
	return node->next;
    475e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4760:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4762:	4294      	cmp	r4, r2
	list->tail = node;
    4764:	bf08      	it	eq
    4766:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    4768:	f8c4 a004 	str.w	sl, [r4, #4]
	__asm__ volatile(
    476c:	f04f 0320 	mov.w	r3, #32
    4770:	f3ef 8211 	mrs	r2, BASEPRI
    4774:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    4778:	2300      	movs	r3, #0
    477a:	6023      	str	r3, [r4, #0]
    477c:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    477e:	2b00      	cmp	r3, #0
    4780:	d140      	bne.n	4804 <send_frag+0x148>
	list->tail = node;
    4782:	616c      	str	r4, [r5, #20]
	list->head = node;
    4784:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4786:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    478a:	4638      	mov	r0, r7
    478c:	f7fd ff3c 	bl	2608 <bt_send>
	if (err) {
    4790:	2800      	cmp	r0, #0
    4792:	d043      	beq.n	481c <send_frag+0x160>
		BT_ERR("Unable to send to driver (err %d)", err);
    4794:	9001      	str	r0, [sp, #4]
    4796:	f8cd 8008 	str.w	r8, [sp, #8]
    479a:	f8cd 8000 	str.w	r8, [sp]
    479e:	4b23      	ldr	r3, [pc, #140]	; (482c <send_frag+0x170>)
    47a0:	4a2a      	ldr	r2, [pc, #168]	; (484c <send_frag+0x190>)
    47a2:	4923      	ldr	r1, [pc, #140]	; (4830 <send_frag+0x174>)
    47a4:	482a      	ldr	r0, [pc, #168]	; (4850 <send_frag+0x194>)
    47a6:	f7fc fbf1 	bl	f8c <printk>
	__asm__ volatile(
    47aa:	f04f 0320 	mov.w	r3, #32
    47ae:	f3ef 8111 	mrs	r1, BASEPRI
    47b2:	f383 8811 	msr	BASEPRI, r3
    47b6:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    47b8:	2200      	movs	r2, #0
    47ba:	b153      	cbz	r3, 47d2 <send_frag+0x116>
    47bc:	429c      	cmp	r4, r3
    47be:	d12a      	bne.n	4816 <send_frag+0x15a>
    47c0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    47c2:	bb12      	cbnz	r2, 480a <send_frag+0x14e>
    47c4:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    47c6:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    47c8:	4294      	cmp	r4, r2
    47ca:	d100      	bne.n	47ce <send_frag+0x112>
	list->tail = node;
    47cc:	616b      	str	r3, [r5, #20]
	parent->next = child;
    47ce:	2300      	movs	r3, #0
    47d0:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    47d2:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    47d6:	2300      	movs	r3, #0
    47d8:	6063      	str	r3, [r4, #4]
    47da:	6833      	ldr	r3, [r6, #0]
    47dc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    47de:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    47e0:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    47e2:	b903      	cbnz	r3, 47e6 <send_frag+0x12a>
	list->tail = node;
    47e4:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    47e6:	4814      	ldr	r0, [pc, #80]	; (4838 <send_frag+0x17c>)
    47e8:	f010 f935 	bl	14a56 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    47ec:	f1b9 0f00 	cmp.w	r9, #0
    47f0:	d004      	beq.n	47fc <send_frag+0x140>
		net_buf_unref(buf);
    47f2:	4638      	mov	r0, r7
    47f4:	f00f f898 	bl	13928 <net_buf_unref>
	}
	return false;
    47f8:	f04f 0900 	mov.w	r9, #0
}
    47fc:	4648      	mov	r0, r9
    47fe:	b008      	add	sp, #32
    4800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	parent->next = child;
    4804:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4806:	616c      	str	r4, [r5, #20]
    4808:	e7bd      	b.n	4786 <send_frag+0xca>
	parent->next = child;
    480a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    480c:	696b      	ldr	r3, [r5, #20]
    480e:	429c      	cmp	r4, r3
	list->tail = node;
    4810:	bf08      	it	eq
    4812:	616a      	streq	r2, [r5, #20]
    4814:	e7db      	b.n	47ce <send_frag+0x112>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4816:	461a      	mov	r2, r3
    4818:	681b      	ldr	r3, [r3, #0]
    481a:	e7ce      	b.n	47ba <send_frag+0xfe>
	return true;
    481c:	f04f 0901 	mov.w	r9, #1
    4820:	e7ec      	b.n	47fc <send_frag+0x140>
    4822:	bf00      	nop
    4824:	000155c5 	.word	0x000155c5
    4828:	000169e6 	.word	0x000169e6
    482c:	00016e7e 	.word	0x00016e7e
    4830:	000169ed 	.word	0x000169ed
    4834:	0001730c 	.word	0x0001730c
    4838:	20003b1c 	.word	0x20003b1c
    483c:	20000384 	.word	0x20000384
    4840:	2000041c 	.word	0x2000041c
    4844:	00016e6f 	.word	0x00016e6f
    4848:	00017344 	.word	0x00017344
    484c:	0001699e 	.word	0x0001699e
    4850:	00016017 	.word	0x00016017

00004854 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4856:	4c17      	ldr	r4, [pc, #92]	; (48b4 <bt_conn_add_le+0x60>)
    4858:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    485c:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    485e:	4630      	mov	r0, r6
    4860:	f7ff fd72 	bl	4348 <atomic_get>
    4864:	4605      	mov	r5, r0
    4866:	b108      	cbz	r0, 486c <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    4868:	2000      	movs	r0, #0
    486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    486c:	4601      	mov	r1, r0
    486e:	2298      	movs	r2, #152	; 0x98
    4870:	4620      	mov	r0, r4
    4872:	f7fd f9ef 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4876:	f3bf 8f5b 	dmb	ish
    487a:	2301      	movs	r3, #1
    487c:	e856 2f00 	ldrex	r2, [r6]
    4880:	e846 3100 	strex	r1, r3, [r6]
    4884:	2900      	cmp	r1, #0
    4886:	d1f9      	bne.n	487c <bt_conn_add_le+0x28>
    4888:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    488c:	2207      	movs	r2, #7
    488e:	4639      	mov	r1, r7
    4890:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4894:	f7fd f9b2 	bl	1bfc <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4898:	2318      	movs	r3, #24
    489a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    489e:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    48a0:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    48a4:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    48a6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    48aa:	4903      	ldr	r1, [pc, #12]	; (48b8 <bt_conn_add_le+0x64>)
    48ac:	f010 fbba 	bl	15024 <k_delayed_work_init>
			conn = &conns[i];
    48b0:	4620      	mov	r0, r4

	return conn;
}
    48b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48b4:	20000384 	.word	0x20000384
    48b8:	0000504d 	.word	0x0000504d

000048bc <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    48bc:	b538      	push	{r3, r4, r5, lr}
    48be:	460d      	mov	r5, r1
    48c0:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    48c2:	f100 0144 	add.w	r1, r0, #68	; 0x44
    48c6:	2207      	movs	r2, #7
    48c8:	4628      	mov	r0, r5
    48ca:	f7fd f982 	bl	1bd2 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    48ce:	b160      	cbz	r0, 48ea <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    48d0:	78e3      	ldrb	r3, [r4, #3]
    48d2:	2207      	movs	r2, #7
    48d4:	b933      	cbnz	r3, 48e4 <bt_conn_addr_le_cmp+0x28>
    48d6:	f104 0152 	add.w	r1, r4, #82	; 0x52
    48da:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    48dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    48e0:	f7fd b977 	b.w	1bd2 <memcmp>
    48e4:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    48e8:	e7f7      	b.n	48da <bt_conn_addr_le_cmp+0x1e>
    48ea:	bd38      	pop	{r3, r4, r5, pc}

000048ec <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    48ec:	b530      	push	{r4, r5, lr}
    48ee:	4604      	mov	r4, r0
    48f0:	b087      	sub	sp, #28
	atomic_inc(&conn->ref);
    48f2:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    48f6:	f3bf 8f5b 	dmb	ish
    48fa:	e855 3f00 	ldrex	r3, [r5]
    48fe:	3301      	adds	r3, #1
    4900:	e845 3200 	strex	r2, r3, [r5]
    4904:	2a00      	cmp	r2, #0
    4906:	d1f8      	bne.n	48fa <bt_conn_ref+0xe>
    4908:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    490c:	f010 f894 	bl	14a38 <_impl_k_current_get>
    4910:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4912:	4628      	mov	r0, r5
    4914:	8821      	ldrh	r1, [r4, #0]
    4916:	f7ff fd17 	bl	4348 <atomic_get>
    491a:	4b07      	ldr	r3, [pc, #28]	; (4938 <bt_conn_ref+0x4c>)
    491c:	9304      	str	r3, [sp, #16]
    491e:	9003      	str	r0, [sp, #12]
    4920:	9102      	str	r1, [sp, #8]
    4922:	9201      	str	r2, [sp, #4]
    4924:	9300      	str	r3, [sp, #0]
    4926:	4a05      	ldr	r2, [pc, #20]	; (493c <bt_conn_ref+0x50>)
    4928:	4b05      	ldr	r3, [pc, #20]	; (4940 <bt_conn_ref+0x54>)
    492a:	4906      	ldr	r1, [pc, #24]	; (4944 <bt_conn_ref+0x58>)
    492c:	4806      	ldr	r0, [pc, #24]	; (4948 <bt_conn_ref+0x5c>)
    492e:	f7fc fb2d 	bl	f8c <printk>

	return conn;
}
    4932:	4620      	mov	r0, r4
    4934:	b007      	add	sp, #28
    4936:	bd30      	pop	{r4, r5, pc}
    4938:	000155c5 	.word	0x000155c5
    493c:	000169e6 	.word	0x000169e6
    4940:	00016ecd 	.word	0x00016ecd
    4944:	000169ed 	.word	0x000169ed
    4948:	00017200 	.word	0x00017200

0000494c <bt_conn_lookup_handle>:
{
    494c:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    494e:	4b0a      	ldr	r3, [pc, #40]	; (4978 <bt_conn_lookup_handle+0x2c>)
{
    4950:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4952:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4956:	f7ff fcf7 	bl	4348 <atomic_get>
    495a:	b158      	cbz	r0, 4974 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    495c:	7a5a      	ldrb	r2, [r3, #9]
    495e:	3a03      	subs	r2, #3
    4960:	2a01      	cmp	r2, #1
    4962:	d807      	bhi.n	4974 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    4964:	881a      	ldrh	r2, [r3, #0]
    4966:	428a      	cmp	r2, r1
    4968:	d104      	bne.n	4974 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    496a:	4618      	mov	r0, r3
}
    496c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    4970:	f7ff bfbc 	b.w	48ec <bt_conn_ref>
}
    4974:	2000      	movs	r0, #0
    4976:	bd08      	pop	{r3, pc}
    4978:	20000384 	.word	0x20000384

0000497c <bt_conn_lookup_addr_le>:
{
    497c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    497e:	4c0a      	ldr	r4, [pc, #40]	; (49a8 <bt_conn_lookup_addr_le+0x2c>)
{
    4980:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4982:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4986:	f7ff fcdf 	bl	4348 <atomic_get>
    498a:	b150      	cbz	r0, 49a2 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    498c:	78a3      	ldrb	r3, [r4, #2]
    498e:	b943      	cbnz	r3, 49a2 <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4990:	4620      	mov	r0, r4
    4992:	f7ff ff93 	bl	48bc <bt_conn_addr_le_cmp>
    4996:	b920      	cbnz	r0, 49a2 <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    4998:	4620      	mov	r0, r4
}
    499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    499e:	f7ff bfa5 	b.w	48ec <bt_conn_ref>
}
    49a2:	2000      	movs	r0, #0
    49a4:	bd10      	pop	{r4, pc}
    49a6:	bf00      	nop
    49a8:	20000384 	.word	0x20000384

000049ac <bt_conn_lookup_state_le>:
{
    49ac:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    49ae:	4c0d      	ldr	r4, [pc, #52]	; (49e4 <bt_conn_lookup_state_le+0x38>)
{
    49b0:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    49b2:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    49b6:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    49b8:	f7ff fcc6 	bl	4348 <atomic_get>
    49bc:	b180      	cbz	r0, 49e0 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    49be:	78a2      	ldrb	r2, [r4, #2]
    49c0:	b972      	cbnz	r2, 49e0 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    49c2:	b93b      	cbnz	r3, 49d4 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    49c4:	7a63      	ldrb	r3, [r4, #9]
    49c6:	42ab      	cmp	r3, r5
    49c8:	d10a      	bne.n	49e0 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    49ca:	4806      	ldr	r0, [pc, #24]	; (49e4 <bt_conn_lookup_state_le+0x38>)
}
    49cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    49d0:	f7ff bf8c 	b.w	48ec <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    49d4:	4619      	mov	r1, r3
    49d6:	4620      	mov	r0, r4
    49d8:	f7ff ff70 	bl	48bc <bt_conn_addr_le_cmp>
    49dc:	2800      	cmp	r0, #0
    49de:	d0f1      	beq.n	49c4 <bt_conn_lookup_state_le+0x18>
}
    49e0:	2000      	movs	r0, #0
    49e2:	bd38      	pop	{r3, r4, r5, pc}
    49e4:	20000384 	.word	0x20000384

000049e8 <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    49e8:	b530      	push	{r4, r5, lr}
    49ea:	4605      	mov	r5, r0
    49ec:	b087      	sub	sp, #28
	atomic_dec(&conn->ref);
    49ee:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    49f2:	f3bf 8f5b 	dmb	ish
    49f6:	e854 3f00 	ldrex	r3, [r4]
    49fa:	3b01      	subs	r3, #1
    49fc:	e844 3200 	strex	r2, r3, [r4]
    4a00:	2a00      	cmp	r2, #0
    4a02:	d1f8      	bne.n	49f6 <bt_conn_unref+0xe>
    4a04:	f3bf 8f5b 	dmb	ish
    4a08:	f010 f816 	bl	14a38 <_impl_k_current_get>
    4a0c:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4a0e:	4620      	mov	r0, r4
    4a10:	8829      	ldrh	r1, [r5, #0]
    4a12:	f7ff fc99 	bl	4348 <atomic_get>
    4a16:	4b07      	ldr	r3, [pc, #28]	; (4a34 <bt_conn_unref+0x4c>)
    4a18:	9304      	str	r3, [sp, #16]
    4a1a:	9003      	str	r0, [sp, #12]
    4a1c:	9102      	str	r1, [sp, #8]
    4a1e:	9201      	str	r2, [sp, #4]
    4a20:	9300      	str	r3, [sp, #0]
    4a22:	4a05      	ldr	r2, [pc, #20]	; (4a38 <bt_conn_unref+0x50>)
    4a24:	4b05      	ldr	r3, [pc, #20]	; (4a3c <bt_conn_unref+0x54>)
    4a26:	4906      	ldr	r1, [pc, #24]	; (4a40 <bt_conn_unref+0x58>)
    4a28:	4806      	ldr	r0, [pc, #24]	; (4a44 <bt_conn_unref+0x5c>)
    4a2a:	f7fc faaf 	bl	f8c <printk>
}
    4a2e:	b007      	add	sp, #28
    4a30:	bd30      	pop	{r4, r5, pc}
    4a32:	bf00      	nop
    4a34:	000155c5 	.word	0x000155c5
    4a38:	000169e6 	.word	0x000169e6
    4a3c:	00016ed9 	.word	0x00016ed9
    4a40:	000169ed 	.word	0x000169ed
    4a44:	00017200 	.word	0x00017200

00004a48 <conn_cleanup>:
{
    4a48:	b538      	push	{r3, r4, r5, lr}
    4a4a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4a4c:	f100 0528 	add.w	r5, r0, #40	; 0x28
    4a50:	2100      	movs	r1, #0
    4a52:	4628      	mov	r0, r5
    4a54:	f00e ff3e 	bl	138d4 <net_buf_get>
    4a58:	b950      	cbnz	r0, 4a70 <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    4a5a:	4620      	mov	r0, r4
    4a5c:	f7ff fdf6 	bl	464c <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    4a60:	4620      	mov	r0, r4
    4a62:	f7ff fc77 	bl	4354 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    4a66:	4620      	mov	r0, r4
}
    4a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4a6c:	f7ff bfbc 	b.w	49e8 <bt_conn_unref>
		net_buf_unref(buf);
    4a70:	f00e ff5a 	bl	13928 <net_buf_unref>
    4a74:	e7ec      	b.n	4a50 <conn_cleanup+0x8>
	...

00004a78 <bt_conn_prepare_events>:
{
    4a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a7a:	b085      	sub	sp, #20
    4a7c:	4606      	mov	r6, r0
    4a7e:	f00f ffdb 	bl	14a38 <_impl_k_current_get>
	BT_DBG("");
    4a82:	4d2a      	ldr	r5, [pc, #168]	; (4b2c <bt_conn_prepare_events+0xb4>)
    4a84:	9001      	str	r0, [sp, #4]
    4a86:	4b2a      	ldr	r3, [pc, #168]	; (4b30 <bt_conn_prepare_events+0xb8>)
    4a88:	4a2a      	ldr	r2, [pc, #168]	; (4b34 <bt_conn_prepare_events+0xbc>)
    4a8a:	492b      	ldr	r1, [pc, #172]	; (4b38 <bt_conn_prepare_events+0xc0>)
    4a8c:	9502      	str	r5, [sp, #8]
    4a8e:	9500      	str	r5, [sp, #0]
    4a90:	482a      	ldr	r0, [pc, #168]	; (4b3c <bt_conn_prepare_events+0xc4>)
    4a92:	f7fc fa7b 	bl	f8c <printk>
	conn_change.signaled = 0;
    4a96:	4b2a      	ldr	r3, [pc, #168]	; (4b40 <bt_conn_prepare_events+0xc8>)
    4a98:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4a9a:	2101      	movs	r1, #1
    4a9c:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    4a9e:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4aa0:	f010 fc07 	bl	152b2 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    4aa4:	4b27      	ldr	r3, [pc, #156]	; (4b44 <bt_conn_prepare_events+0xcc>)
    4aa6:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4aaa:	f7ff fc4d 	bl	4348 <atomic_get>
    4aae:	461f      	mov	r7, r3
    4ab0:	b910      	cbnz	r0, 4ab8 <bt_conn_prepare_events+0x40>
			continue;
    4ab2:	2001      	movs	r0, #1
}
    4ab4:	b005      	add	sp, #20
    4ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4ab8:	7a5a      	ldrb	r2, [r3, #9]
    4aba:	b992      	cbnz	r2, 4ae2 <bt_conn_prepare_events+0x6a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4abc:	f3bf 8f5b 	dmb	ish
    4ac0:	1d1a      	adds	r2, r3, #4
    4ac2:	e852 1f00 	ldrex	r1, [r2]
    4ac6:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    4aca:	e842 0400 	strex	r4, r0, [r2]
    4ace:	2c00      	cmp	r4, #0
    4ad0:	d1f7      	bne.n	4ac2 <bt_conn_prepare_events+0x4a>
    4ad2:	f3bf 8f5b 	dmb	ish
    4ad6:	064a      	lsls	r2, r1, #25
    4ad8:	d503      	bpl.n	4ae2 <bt_conn_prepare_events+0x6a>
			conn_cleanup(conn);
    4ada:	4618      	mov	r0, r3
    4adc:	f7ff ffb4 	bl	4a48 <conn_cleanup>
    4ae0:	e7e7      	b.n	4ab2 <bt_conn_prepare_events+0x3a>
		if (conn->state != BT_CONN_CONNECTED) {
    4ae2:	7a7c      	ldrb	r4, [r7, #9]
    4ae4:	2c03      	cmp	r4, #3
    4ae6:	d1e4      	bne.n	4ab2 <bt_conn_prepare_events+0x3a>
    4ae8:	f00f ffa6 	bl	14a38 <_impl_k_current_get>
		BT_DBG("Adding conn %p to poll list", conn);
    4aec:	4b10      	ldr	r3, [pc, #64]	; (4b30 <bt_conn_prepare_events+0xb8>)
    4aee:	9001      	str	r0, [sp, #4]
    4af0:	4a10      	ldr	r2, [pc, #64]	; (4b34 <bt_conn_prepare_events+0xbc>)
    4af2:	4911      	ldr	r1, [pc, #68]	; (4b38 <bt_conn_prepare_events+0xc0>)
    4af4:	9503      	str	r5, [sp, #12]
    4af6:	9702      	str	r7, [sp, #8]
    4af8:	9500      	str	r5, [sp, #0]
    4afa:	4813      	ldr	r0, [pc, #76]	; (4b48 <bt_conn_prepare_events+0xd0>)
    4afc:	f7fc fa46 	bl	f8c <printk>
		k_poll_event_init(&events[ev_count],
    4b00:	4b12      	ldr	r3, [pc, #72]	; (4b4c <bt_conn_prepare_events+0xd4>)
    4b02:	2200      	movs	r2, #0
    4b04:	2104      	movs	r1, #4
    4b06:	f106 0014 	add.w	r0, r6, #20
    4b0a:	f010 fbd2 	bl	152b2 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4b0e:	2301      	movs	r3, #1
    4b10:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4b14:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4b18:	4b0d      	ldr	r3, [pc, #52]	; (4b50 <bt_conn_prepare_events+0xd8>)
    4b1a:	2200      	movs	r2, #0
    4b1c:	2104      	movs	r1, #4
    4b1e:	f010 fbc8 	bl	152b2 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4b22:	2302      	movs	r3, #2
    4b24:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4b28:	4620      	mov	r0, r4
	return ev_count;
    4b2a:	e7c3      	b.n	4ab4 <bt_conn_prepare_events+0x3c>
    4b2c:	000155c5 	.word	0x000155c5
    4b30:	00016e91 	.word	0x00016e91
    4b34:	000169e6 	.word	0x000169e6
    4b38:	000169ed 	.word	0x000169ed
    4b3c:	00016f5e 	.word	0x00016f5e
    4b40:	20003bb8 	.word	0x20003bb8
    4b44:	20000384 	.word	0x20000384
    4b48:	00016f74 	.word	0x00016f74
    4b4c:	2000039c 	.word	0x2000039c
    4b50:	200003ac 	.word	0x200003ac

00004b54 <bt_conn_set_state>:
{
    4b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b58:	4604      	mov	r4, r0
    4b5a:	b086      	sub	sp, #24
    4b5c:	460e      	mov	r6, r1
    4b5e:	f00f ff6b 	bl	14a38 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4b62:	7a63      	ldrb	r3, [r4, #9]
    4b64:	4f6d      	ldr	r7, [pc, #436]	; (4d1c <bt_conn_set_state+0x1c8>)
    4b66:	9001      	str	r0, [sp, #4]
    4b68:	2b04      	cmp	r3, #4
    4b6a:	bf96      	itet	ls
    4b6c:	4a6c      	ldrls	r2, [pc, #432]	; (4d20 <bt_conn_set_state+0x1cc>)
    4b6e:	4b6d      	ldrhi	r3, [pc, #436]	; (4d24 <bt_conn_set_state+0x1d0>)
    4b70:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    4b74:	9302      	str	r3, [sp, #8]
    4b76:	2e04      	cmp	r6, #4
    4b78:	bf96      	itet	ls
    4b7a:	4a69      	ldrls	r2, [pc, #420]	; (4d20 <bt_conn_set_state+0x1cc>)
    4b7c:	4a69      	ldrhi	r2, [pc, #420]	; (4d24 <bt_conn_set_state+0x1d0>)
    4b7e:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    4b82:	9203      	str	r2, [sp, #12]
    4b84:	9704      	str	r7, [sp, #16]
    4b86:	9700      	str	r7, [sp, #0]
    4b88:	4b67      	ldr	r3, [pc, #412]	; (4d28 <bt_conn_set_state+0x1d4>)
    4b8a:	4a68      	ldr	r2, [pc, #416]	; (4d2c <bt_conn_set_state+0x1d8>)
    4b8c:	4968      	ldr	r1, [pc, #416]	; (4d30 <bt_conn_set_state+0x1dc>)
    4b8e:	4869      	ldr	r0, [pc, #420]	; (4d34 <bt_conn_set_state+0x1e0>)
    4b90:	f7fc f9fc 	bl	f8c <printk>
	if (conn->state == state) {
    4b94:	7a65      	ldrb	r5, [r4, #9]
    4b96:	42ae      	cmp	r6, r5
    4b98:	46b8      	mov	r8, r7
    4b9a:	d10a      	bne.n	4bb2 <bt_conn_set_state+0x5e>
		BT_WARN("no transition");
    4b9c:	9701      	str	r7, [sp, #4]
    4b9e:	9700      	str	r7, [sp, #0]
    4ba0:	4b61      	ldr	r3, [pc, #388]	; (4d28 <bt_conn_set_state+0x1d4>)
    4ba2:	4a65      	ldr	r2, [pc, #404]	; (4d38 <bt_conn_set_state+0x1e4>)
    4ba4:	4962      	ldr	r1, [pc, #392]	; (4d30 <bt_conn_set_state+0x1dc>)
    4ba6:	4865      	ldr	r0, [pc, #404]	; (4d3c <bt_conn_set_state+0x1e8>)
    4ba8:	f7fc f9f0 	bl	f8c <printk>
}
    4bac:	b006      	add	sp, #24
    4bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->state = state;
    4bb2:	7266      	strb	r6, [r4, #9]
	switch (old_state) {
    4bb4:	b195      	cbz	r5, 4bdc <bt_conn_set_state+0x88>
    4bb6:	2d02      	cmp	r5, #2
    4bb8:	d014      	beq.n	4be4 <bt_conn_set_state+0x90>
	switch (conn->state) {
    4bba:	7a63      	ldrb	r3, [r4, #9]
    4bbc:	2b04      	cmp	r3, #4
    4bbe:	f200 80a0 	bhi.w	4d02 <bt_conn_set_state+0x1ae>
    4bc2:	a201      	add	r2, pc, #4	; (adr r2, 4bc8 <bt_conn_set_state+0x74>)
    4bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4bc8:	00004c2b 	.word	0x00004c2b
    4bcc:	00004bad 	.word	0x00004bad
    4bd0:	00004ce7 	.word	0x00004ce7
    4bd4:	00004bf5 	.word	0x00004bf5
    4bd8:	00004bad 	.word	0x00004bad
		bt_conn_ref(conn);
    4bdc:	4620      	mov	r0, r4
    4bde:	f7ff fe85 	bl	48ec <bt_conn_ref>
		break;
    4be2:	e7ea      	b.n	4bba <bt_conn_set_state+0x66>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4be4:	78a3      	ldrb	r3, [r4, #2]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d1e7      	bne.n	4bba <bt_conn_set_state+0x66>
			k_delayed_work_cancel(&conn->le.update_work);
    4bea:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4bee:	f010 fa29 	bl	15044 <k_delayed_work_cancel>
    4bf2:	e7e2      	b.n	4bba <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4bf4:	78a3      	ldrb	r3, [r4, #2]
    4bf6:	2b02      	cmp	r3, #2
    4bf8:	d0d8      	beq.n	4bac <bt_conn_set_state+0x58>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4bfa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4bfe:	f00f fc5d 	bl	144bc <_impl_k_queue_init>
    4c02:	f104 0018 	add.w	r0, r4, #24
    4c06:	f00f fc59 	bl	144bc <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4c0a:	2100      	movs	r1, #0
    4c0c:	484c      	ldr	r0, [pc, #304]	; (4d40 <bt_conn_set_state+0x1ec>)
    4c0e:	f010 fbf3 	bl	153f8 <_impl_k_poll_signal>
	list->head = NULL;
    4c12:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    4c14:	4620      	mov	r0, r4
    4c16:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4c18:	63e3      	str	r3, [r4, #60]	; 0x3c
    4c1a:	f000 fc0b 	bl	5434 <bt_l2cap_connected>
		notify_connected(conn);
    4c1e:	4620      	mov	r0, r4
}
    4c20:	b006      	add	sp, #24
    4c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    4c26:	f7ff bb7f 	b.w	4328 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4c2a:	78a3      	ldrb	r3, [r4, #2]
    4c2c:	2b02      	cmp	r3, #2
    4c2e:	d105      	bne.n	4c3c <bt_conn_set_state+0xe8>
			bt_conn_unref(conn);
    4c30:	4620      	mov	r0, r4
}
    4c32:	b006      	add	sp, #24
    4c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    4c38:	f7ff bed6 	b.w	49e8 <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4c3c:	1eeb      	subs	r3, r5, #3
    4c3e:	2b01      	cmp	r3, #1
    4c40:	d844      	bhi.n	4ccc <bt_conn_set_state+0x178>
			bt_l2cap_disconnected(conn);
    4c42:	4620      	mov	r0, r4
    4c44:	f000 fc30 	bl	54a8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4c48:	4b3e      	ldr	r3, [pc, #248]	; (4d44 <bt_conn_set_state+0x1f0>)
    4c4a:	681d      	ldr	r5, [r3, #0]
    4c4c:	b9ed      	cbnz	r5, 4c8a <bt_conn_set_state+0x136>
    4c4e:	4e3e      	ldr	r6, [pc, #248]	; (4d48 <bt_conn_set_state+0x1f4>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4c50:	4f3e      	ldr	r7, [pc, #248]	; (4d4c <bt_conn_set_state+0x1f8>)
	__asm__ volatile(
    4c52:	f04f 0320 	mov.w	r3, #32
    4c56:	f3ef 8111 	mrs	r1, BASEPRI
    4c5a:	f383 8811 	msr	BASEPRI, r3
    4c5e:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4c60:	b12b      	cbz	r3, 4c6e <bt_conn_set_state+0x11a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4c62:	6960      	ldr	r0, [r4, #20]
	return node->next;
    4c64:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4c66:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4c68:	4283      	cmp	r3, r0
	list->tail = node;
    4c6a:	bf08      	it	eq
    4c6c:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4c6e:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    4c72:	b18b      	cbz	r3, 4c98 <bt_conn_set_state+0x144>
    4c74:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    4c76:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4c78:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    4c7a:	605d      	str	r5, [r3, #4]
	list->head = node;
    4c7c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4c7e:	b902      	cbnz	r2, 4c82 <bt_conn_set_state+0x12e>
	list->tail = node;
    4c80:	6073      	str	r3, [r6, #4]
    4c82:	4638      	mov	r0, r7
    4c84:	f00f fee7 	bl	14a56 <_impl_k_sem_give>
    4c88:	e7e3      	b.n	4c52 <bt_conn_set_state+0xfe>
		if (cb->disconnected) {
    4c8a:	686b      	ldr	r3, [r5, #4]
    4c8c:	b113      	cbz	r3, 4c94 <bt_conn_set_state+0x140>
			cb->disconnected(conn, conn->err);
    4c8e:	7a21      	ldrb	r1, [r4, #8]
    4c90:	4620      	mov	r0, r4
    4c92:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4c94:	692d      	ldr	r5, [r5, #16]
    4c96:	e7d9      	b.n	4c4c <bt_conn_set_state+0xf8>
			if (conn->type == BT_CONN_TYPE_LE) {
    4c98:	78a3      	ldrb	r3, [r4, #2]
    4c9a:	b91b      	cbnz	r3, 4ca4 <bt_conn_set_state+0x150>
				k_delayed_work_cancel(&conn->le.update_work);
    4c9c:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4ca0:	f010 f9d0 	bl	15044 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4ca4:	f3bf 8f5b 	dmb	ish
    4ca8:	3404      	adds	r4, #4
    4caa:	e854 3f00 	ldrex	r3, [r4]
    4cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4cb2:	e844 3200 	strex	r2, r3, [r4]
    4cb6:	2a00      	cmp	r2, #0
    4cb8:	d1f7      	bne.n	4caa <bt_conn_set_state+0x156>
    4cba:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4cbe:	4820      	ldr	r0, [pc, #128]	; (4d40 <bt_conn_set_state+0x1ec>)
    4cc0:	2100      	movs	r1, #0
}
    4cc2:	b006      	add	sp, #24
    4cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4cc8:	f010 bb96 	b.w	153f8 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4ccc:	2d02      	cmp	r5, #2
    4cce:	d103      	bne.n	4cd8 <bt_conn_set_state+0x184>
			notify_connected(conn);
    4cd0:	4620      	mov	r0, r4
    4cd2:	f7ff fb29 	bl	4328 <notify_connected>
    4cd6:	e7ab      	b.n	4c30 <bt_conn_set_state+0xdc>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4cd8:	2d01      	cmp	r5, #1
    4cda:	f47f af67 	bne.w	4bac <bt_conn_set_state+0x58>
			if (conn->err) {
    4cde:	7a23      	ldrb	r3, [r4, #8]
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d0a5      	beq.n	4c30 <bt_conn_set_state+0xdc>
    4ce4:	e7f4      	b.n	4cd0 <bt_conn_set_state+0x17c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4ce6:	78a3      	ldrb	r3, [r4, #2]
    4ce8:	2b00      	cmp	r3, #0
    4cea:	f47f af5f 	bne.w	4bac <bt_conn_set_state+0x58>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4cee:	4818      	ldr	r0, [pc, #96]	; (4d50 <bt_conn_set_state+0x1fc>)
    4cf0:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4cf4:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4cf8:	b006      	add	sp, #24
    4cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4cfe:	f010 ba05 	b.w	1510c <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    4d02:	f8cd 8008 	str.w	r8, [sp, #8]
    4d06:	9601      	str	r6, [sp, #4]
    4d08:	f8cd 8000 	str.w	r8, [sp]
    4d0c:	4b06      	ldr	r3, [pc, #24]	; (4d28 <bt_conn_set_state+0x1d4>)
    4d0e:	4a0a      	ldr	r2, [pc, #40]	; (4d38 <bt_conn_set_state+0x1e4>)
    4d10:	4907      	ldr	r1, [pc, #28]	; (4d30 <bt_conn_set_state+0x1dc>)
    4d12:	4810      	ldr	r0, [pc, #64]	; (4d54 <bt_conn_set_state+0x200>)
    4d14:	f7fc f93a 	bl	f8c <printk>
		break;
    4d18:	e748      	b.n	4bac <bt_conn_set_state+0x58>
    4d1a:	bf00      	nop
    4d1c:	000155c5 	.word	0x000155c5
    4d20:	00016e2c 	.word	0x00016e2c
    4d24:	0001727a 	.word	0x0001727a
    4d28:	00016ebb 	.word	0x00016ebb
    4d2c:	000169e6 	.word	0x000169e6
    4d30:	000169ed 	.word	0x000169ed
    4d34:	00017284 	.word	0x00017284
    4d38:	00016a28 	.word	0x00016a28
    4d3c:	000172a2 	.word	0x000172a2
    4d40:	20003bb8 	.word	0x20003bb8
    4d44:	20000370 	.word	0x20000370
    4d48:	2000041c 	.word	0x2000041c
    4d4c:	20003b1c 	.word	0x20003b1c
    4d50:	200019b8 	.word	0x200019b8
    4d54:	000172c0 	.word	0x000172c0

00004d58 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4d58:	3044      	adds	r0, #68	; 0x44
    4d5a:	4770      	bx	lr

00004d5c <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4d5c:	b570      	push	{r4, r5, r6, lr}
    4d5e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4d60:	4608      	mov	r0, r1
{
    4d62:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4d64:	f7fd fba4 	bl	24b0 <bt_le_conn_params_valid>
    4d68:	b908      	cbnz	r0, 4d6e <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    4d6a:	2400      	movs	r4, #0
    4d6c:	e01c      	b.n	4da8 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4d6e:	481d      	ldr	r0, [pc, #116]	; (4de4 <bt_conn_create_le+0x88>)
    4d70:	f7ff faea 	bl	4348 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4d74:	0583      	lsls	r3, r0, #22
    4d76:	d4f8      	bmi.n	4d6a <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4d78:	4630      	mov	r0, r6
    4d7a:	f7ff fdff 	bl	497c <bt_conn_lookup_addr_le>
	if (conn) {
    4d7e:	4604      	mov	r4, r0
    4d80:	b1a0      	cbz	r0, 4dac <bt_conn_create_le+0x50>
		switch (conn->state) {
    4d82:	7a43      	ldrb	r3, [r0, #9]
    4d84:	2b01      	cmp	r3, #1
    4d86:	d006      	beq.n	4d96 <bt_conn_create_le+0x3a>
    4d88:	d301      	bcc.n	4d8e <bt_conn_create_le+0x32>
    4d8a:	2b03      	cmp	r3, #3
    4d8c:	d90c      	bls.n	4da8 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    4d8e:	4620      	mov	r0, r4
    4d90:	f7ff fe2a 	bl	49e8 <bt_conn_unref>
    4d94:	e7e9      	b.n	4d6a <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4d96:	886b      	ldrh	r3, [r5, #2]
    4d98:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4d9c:	88ab      	ldrh	r3, [r5, #4]
    4d9e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4da2:	88eb      	ldrh	r3, [r5, #6]
    4da4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4da8:	4620      	mov	r0, r4
    4daa:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4dac:	4630      	mov	r0, r6
    4dae:	f7ff fd51 	bl	4854 <bt_conn_add_le>
	if (!conn) {
    4db2:	4604      	mov	r4, r0
    4db4:	2800      	cmp	r0, #0
    4db6:	d0f7      	beq.n	4da8 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4db8:	2207      	movs	r2, #7
    4dba:	4631      	mov	r1, r6
    4dbc:	3052      	adds	r0, #82	; 0x52
    4dbe:	f7fc ff1d 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    4dc2:	886b      	ldrh	r3, [r5, #2]
    4dc4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4dc8:	88ab      	ldrh	r3, [r5, #4]
    4dca:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4dce:	88eb      	ldrh	r3, [r5, #6]
    4dd0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4dd4:	4620      	mov	r0, r4
    4dd6:	2101      	movs	r1, #1
    4dd8:	f7ff febc 	bl	4b54 <bt_conn_set_state>
	bt_le_scan_update(true);
    4ddc:	2001      	movs	r0, #1
    4dde:	f7fd fccb 	bl	2778 <bt_le_scan_update>
	return conn;
    4de2:	e7e1      	b.n	4da8 <bt_conn_create_le+0x4c>
    4de4:	20003b00 	.word	0x20003b00

00004de8 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4de8:	b570      	push	{r4, r5, r6, lr}
    4dea:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4dec:	460d      	mov	r5, r1
    4dee:	2900      	cmp	r1, #0
    4df0:	d13b      	bne.n	4e6a <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    4df2:	4630      	mov	r0, r6
    4df4:	f7ff fdc2 	bl	497c <bt_conn_lookup_addr_le>
	if (!conn) {
    4df8:	4604      	mov	r4, r0
    4dfa:	b928      	cbnz	r0, 4e08 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4dfc:	4630      	mov	r0, r6
    4dfe:	f7ff fd29 	bl	4854 <bt_conn_add_le>
		if (!conn) {
    4e02:	4604      	mov	r4, r0
    4e04:	2800      	cmp	r0, #0
    4e06:	d051      	beq.n	4eac <bt_le_set_auto_conn+0xc4>
    4e08:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4e0a:	2d00      	cmp	r5, #0
    4e0c:	d035      	beq.n	4e7a <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    4e0e:	886a      	ldrh	r2, [r5, #2]
    4e10:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4e14:	88aa      	ldrh	r2, [r5, #4]
    4e16:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4e1a:	88ea      	ldrh	r2, [r5, #6]
    4e1c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e20:	f3bf 8f5b 	dmb	ish
    4e24:	e853 2f00 	ldrex	r2, [r3]
    4e28:	f042 0101 	orr.w	r1, r2, #1
    4e2c:	e843 1000 	strex	r0, r1, [r3]
    4e30:	2800      	cmp	r0, #0
    4e32:	d1f7      	bne.n	4e24 <bt_le_set_auto_conn+0x3c>
    4e34:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4e38:	07d1      	lsls	r1, r2, #31
    4e3a:	d402      	bmi.n	4e42 <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4e3c:	4620      	mov	r0, r4
    4e3e:	f7ff fd55 	bl	48ec <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4e42:	7a63      	ldrb	r3, [r4, #9]
    4e44:	b963      	cbnz	r3, 4e60 <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4e46:	481b      	ldr	r0, [pc, #108]	; (4eb4 <bt_le_set_auto_conn+0xcc>)
    4e48:	f7ff fa7e 	bl	4348 <atomic_get>
    4e4c:	0783      	lsls	r3, r0, #30
    4e4e:	d507      	bpl.n	4e60 <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4e50:	b11d      	cbz	r5, 4e5a <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4e52:	2101      	movs	r1, #1
    4e54:	4620      	mov	r0, r4
    4e56:	f7ff fe7d 	bl	4b54 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    4e5a:	2000      	movs	r0, #0
    4e5c:	f7fd fc8c 	bl	2778 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    4e60:	4620      	mov	r0, r4
    4e62:	f7ff fdc1 	bl	49e8 <bt_conn_unref>

	return 0;
    4e66:	2000      	movs	r0, #0
    4e68:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    4e6a:	4608      	mov	r0, r1
    4e6c:	f7fd fb20 	bl	24b0 <bt_le_conn_params_valid>
    4e70:	2800      	cmp	r0, #0
    4e72:	d1be      	bne.n	4df2 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4e74:	f06f 0015 	mvn.w	r0, #21
    4e78:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4e7a:	f3bf 8f5b 	dmb	ish
    4e7e:	e853 2f00 	ldrex	r2, [r3]
    4e82:	f022 0101 	bic.w	r1, r2, #1
    4e86:	e843 1000 	strex	r0, r1, [r3]
    4e8a:	2800      	cmp	r0, #0
    4e8c:	d1f7      	bne.n	4e7e <bt_le_set_auto_conn+0x96>
    4e8e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    4e92:	07d2      	lsls	r2, r2, #31
    4e94:	d5d5      	bpl.n	4e42 <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    4e96:	4620      	mov	r0, r4
    4e98:	f7ff fda6 	bl	49e8 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4e9c:	7a63      	ldrb	r3, [r4, #9]
    4e9e:	2b01      	cmp	r3, #1
    4ea0:	d1cf      	bne.n	4e42 <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4ea2:	4629      	mov	r1, r5
    4ea4:	4620      	mov	r0, r4
    4ea6:	f7ff fe55 	bl	4b54 <bt_conn_set_state>
    4eaa:	e7ca      	b.n	4e42 <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4eac:	f06f 000b 	mvn.w	r0, #11
}
    4eb0:	bd70      	pop	{r4, r5, r6, pc}
    4eb2:	bf00      	nop
    4eb4:	20003b00 	.word	0x20003b00

00004eb8 <bt_conn_disconnect>:
{
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4ebc:	7881      	ldrb	r1, [r0, #2]
{
    4ebe:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4ec0:	b911      	cbnz	r1, 4ec8 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    4ec2:	3044      	adds	r0, #68	; 0x44
    4ec4:	f7ff ff90 	bl	4de8 <bt_le_set_auto_conn>
	switch (conn->state) {
    4ec8:	7a63      	ldrb	r3, [r4, #9]
    4eca:	3b01      	subs	r3, #1
    4ecc:	2b03      	cmp	r3, #3
    4ece:	d803      	bhi.n	4ed8 <bt_conn_disconnect+0x20>
    4ed0:	e8df f003 	tbb	[pc, r3]
    4ed4:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4ed8:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4edc:	4628      	mov	r0, r5
    4ede:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4ee0:	4620      	mov	r0, r4
		conn->err = reason;
    4ee2:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4ee4:	2100      	movs	r1, #0
    4ee6:	f7ff fe35 	bl	4b54 <bt_conn_set_state>
		bt_le_scan_update(false);
    4eea:	2000      	movs	r0, #0
    4eec:	f7fd fc44 	bl	2778 <bt_le_scan_update>
		return 0;
    4ef0:	2500      	movs	r5, #0
    4ef2:	e7f3      	b.n	4edc <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4ef4:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4ef8:	f010 f8a4 	bl	15044 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4efc:	2100      	movs	r1, #0
    4efe:	f242 000e 	movw	r0, #8206	; 0x200e
}
    4f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4f06:	f7fd bba9 	b.w	265c <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4f0a:	2103      	movs	r1, #3
    4f0c:	f240 4006 	movw	r0, #1030	; 0x406
    4f10:	f7fd f952 	bl	21b8 <bt_hci_cmd_create>
	if (!buf) {
    4f14:	4605      	mov	r5, r0
    4f16:	b198      	cbz	r0, 4f40 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4f18:	2103      	movs	r1, #3
    4f1a:	3008      	adds	r0, #8
    4f1c:	f00e fd36 	bl	1398c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4f20:	8823      	ldrh	r3, [r4, #0]
    4f22:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4f24:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4f26:	4629      	mov	r1, r5
    4f28:	f240 4006 	movw	r0, #1030	; 0x406
    4f2c:	f7fd fb96 	bl	265c <bt_hci_cmd_send>
	if (err) {
    4f30:	4605      	mov	r5, r0
    4f32:	2800      	cmp	r0, #0
    4f34:	d1d2      	bne.n	4edc <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4f36:	2104      	movs	r1, #4
    4f38:	4620      	mov	r0, r4
    4f3a:	f7ff fe0b 	bl	4b54 <bt_conn_set_state>
    4f3e:	e7cd      	b.n	4edc <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    4f40:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4f44:	e7ca      	b.n	4edc <bt_conn_disconnect+0x24>

00004f46 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f48:	4607      	mov	r7, r0
    4f4a:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4f4c:	f242 0013 	movw	r0, #8211	; 0x2013
    4f50:	210e      	movs	r1, #14
    4f52:	f7fd f931 	bl	21b8 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    4f56:	4606      	mov	r6, r0
    4f58:	b1c8      	cbz	r0, 4f8e <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4f5a:	210e      	movs	r1, #14
    4f5c:	3008      	adds	r0, #8
    4f5e:	f00e fd15 	bl	1398c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    4f62:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4f64:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4f66:	220e      	movs	r2, #14
    4f68:	f7fc fe74 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4f6c:	883b      	ldrh	r3, [r7, #0]
    4f6e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4f70:	882b      	ldrh	r3, [r5, #0]
    4f72:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4f74:	886b      	ldrh	r3, [r5, #2]
    4f76:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4f78:	88ab      	ldrh	r3, [r5, #4]
    4f7a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4f7c:	88eb      	ldrh	r3, [r5, #6]
    4f7e:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4f80:	4631      	mov	r1, r6
    4f82:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4f86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4f8a:	f7fd bb67 	b.w	265c <bt_hci_cmd_send>
}
    4f8e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004f94 <bt_conn_le_param_update>:
{
    4f94:	b530      	push	{r4, r5, lr}
    4f96:	460d      	mov	r5, r1
    4f98:	b08b      	sub	sp, #44	; 0x2c
    4f9a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4f9c:	f00f fd4c 	bl	14a38 <_impl_k_current_get>
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4fa0:	88ea      	ldrh	r2, [r5, #6]
    4fa2:	9207      	str	r2, [sp, #28]
    4fa4:	88aa      	ldrh	r2, [r5, #4]
    4fa6:	9206      	str	r2, [sp, #24]
    4fa8:	886a      	ldrh	r2, [r5, #2]
    4faa:	9205      	str	r2, [sp, #20]
    4fac:	882a      	ldrh	r2, [r5, #0]
    4fae:	4b21      	ldr	r3, [pc, #132]	; (5034 <bt_conn_le_param_update+0xa0>)
    4fb0:	9204      	str	r2, [sp, #16]
    4fb2:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    4fb6:	9308      	str	r3, [sp, #32]
    4fb8:	9203      	str	r2, [sp, #12]
    4fba:	9001      	str	r0, [sp, #4]
    4fbc:	9300      	str	r3, [sp, #0]
    4fbe:	4a1e      	ldr	r2, [pc, #120]	; (5038 <bt_conn_le_param_update+0xa4>)
    4fc0:	4b1e      	ldr	r3, [pc, #120]	; (503c <bt_conn_le_param_update+0xa8>)
    4fc2:	9402      	str	r4, [sp, #8]
    4fc4:	491e      	ldr	r1, [pc, #120]	; (5040 <bt_conn_le_param_update+0xac>)
    4fc6:	481f      	ldr	r0, [pc, #124]	; (5044 <bt_conn_le_param_update+0xb0>)
    4fc8:	f7fb ffe0 	bl	f8c <printk>
	if (conn->le.interval >= param->interval_min &&
    4fcc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    4fd0:	882a      	ldrh	r2, [r5, #0]
    4fd2:	429a      	cmp	r2, r3
    4fd4:	d80c      	bhi.n	4ff0 <bt_conn_le_param_update+0x5c>
    4fd6:	886a      	ldrh	r2, [r5, #2]
    4fd8:	429a      	cmp	r2, r3
    4fda:	d309      	bcc.n	4ff0 <bt_conn_le_param_update+0x5c>
	    conn->le.interval <= param->interval_max &&
    4fdc:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    4fe0:	88ab      	ldrh	r3, [r5, #4]
    4fe2:	429a      	cmp	r2, r3
    4fe4:	d104      	bne.n	4ff0 <bt_conn_le_param_update+0x5c>
	    conn->le.latency == param->latency &&
    4fe6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    4fea:	88eb      	ldrh	r3, [r5, #6]
    4fec:	429a      	cmp	r2, r3
    4fee:	d01c      	beq.n	502a <bt_conn_le_param_update+0x96>
	k_delayed_work_cancel(&conn->le.update_work);
    4ff0:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4ff4:	f010 f826 	bl	15044 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4ff8:	4b13      	ldr	r3, [pc, #76]	; (5048 <bt_conn_le_param_update+0xb4>)
    4ffa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4ffe:	079a      	lsls	r2, r3, #30
    5000:	d503      	bpl.n	500a <bt_conn_le_param_update+0x76>
    5002:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    5006:	079b      	lsls	r3, r3, #30
    5008:	d401      	bmi.n	500e <bt_conn_le_param_update+0x7a>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    500a:	78e3      	ldrb	r3, [r4, #3]
    500c:	b933      	cbnz	r3, 501c <bt_conn_le_param_update+0x88>
		return bt_conn_le_conn_update(conn, param);
    500e:	4629      	mov	r1, r5
    5010:	4620      	mov	r0, r4
}
    5012:	b00b      	add	sp, #44	; 0x2c
    5014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    5018:	f7ff bf95 	b.w	4f46 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    501c:	4629      	mov	r1, r5
    501e:	4620      	mov	r0, r4
}
    5020:	b00b      	add	sp, #44	; 0x2c
    5022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    5026:	f000 bba7 	b.w	5778 <bt_l2cap_update_conn_param>
}
    502a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    502e:	b00b      	add	sp, #44	; 0x2c
    5030:	bd30      	pop	{r4, r5, pc}
    5032:	bf00      	nop
    5034:	000155c5 	.word	0x000155c5
    5038:	000169e6 	.word	0x000169e6
    503c:	00016ee7 	.word	0x00016ee7
    5040:	000169ed 	.word	0x000169ed
    5044:	00016eff 	.word	0x00016eff
    5048:	20003a90 	.word	0x20003a90

0000504c <le_conn_update>:
{
    504c:	4603      	mov	r3, r0
    504e:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5050:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    5054:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    5056:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    505a:	d105      	bne.n	5068 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    505c:	2113      	movs	r1, #19
    505e:	f7ff ff2b 	bl	4eb8 <bt_conn_disconnect>
}
    5062:	b003      	add	sp, #12
    5064:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    5068:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    506c:	f8ad 2000 	strh.w	r2, [sp]
    5070:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    5074:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    5078:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    507a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    507e:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    5082:	f8ad 2004 	strh.w	r2, [sp, #4]
    5086:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    508a:	f7ff ff83 	bl	4f94 <bt_conn_le_param_update>
    508e:	e7e8      	b.n	5062 <le_conn_update+0x16>

00005090 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    5090:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    5092:	4b08      	ldr	r3, [pc, #32]	; (50b4 <bt_conn_create_pdu+0x24>)
{
    5094:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    5096:	2800      	cmp	r0, #0
    5098:	bf08      	it	eq
    509a:	4618      	moveq	r0, r3
    509c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    50a0:	f00e fc12 	bl	138c8 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    50a4:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    50a6:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    50a8:	3008      	adds	r0, #8
    50aa:	f00e fc2c 	bl	13906 <net_buf_simple_reserve>

	return buf;
}
    50ae:	4620      	mov	r0, r4
    50b0:	bd38      	pop	{r3, r4, r5, pc}
    50b2:	bf00      	nop
    50b4:	20003f5c 	.word	0x20003f5c

000050b8 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    50b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50bc:	4606      	mov	r6, r0
    50be:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    50c0:	4816      	ldr	r0, [pc, #88]	; (511c <create_frag.isra.8+0x64>)
    50c2:	2100      	movs	r1, #0
    50c4:	f7ff ffe4 	bl	5090 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    50c8:	7833      	ldrb	r3, [r6, #0]
    50ca:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    50cc:	4605      	mov	r5, r0
    50ce:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    50d2:	d005      	beq.n	50e0 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    50d4:	f00e fc28 	bl	13928 <net_buf_unref>
		return NULL;
    50d8:	4635      	mov	r5, r6
}
    50da:	4628      	mov	r0, r5
    50dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    50e0:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    50e2:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    50e6:	4e0e      	ldr	r6, [pc, #56]	; (5120 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    50e8:	4638      	mov	r0, r7
    50ea:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    50ee:	f00e fc97 	bl	13a20 <net_buf_simple_tailroom>
    50f2:	4580      	cmp	r8, r0
    50f4:	d20c      	bcs.n	5110 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    50f6:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    50fa:	f854 1f08 	ldr.w	r1, [r4, #8]!
    50fe:	4632      	mov	r2, r6
    5100:	4638      	mov	r0, r7
    5102:	f00e fc49 	bl	13998 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    5106:	4631      	mov	r1, r6
    5108:	4620      	mov	r0, r4
    510a:	f00e fc6d 	bl	139e8 <net_buf_simple_pull>
    510e:	e7e4      	b.n	50da <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5110:	4638      	mov	r0, r7
    5112:	f00e fc85 	bl	13a20 <net_buf_simple_tailroom>
    5116:	b286      	uxth	r6, r0
    5118:	e7ef      	b.n	50fa <create_frag.isra.8+0x42>
    511a:	bf00      	nop
    511c:	20003f7c 	.word	0x20003f7c
    5120:	20003a90 	.word	0x20003a90

00005124 <bt_conn_process_tx>:
{
    5124:	b5f0      	push	{r4, r5, r6, r7, lr}
    5126:	b087      	sub	sp, #28
    5128:	4604      	mov	r4, r0
    512a:	f00f fc85 	bl	14a38 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    512e:	4d45      	ldr	r5, [pc, #276]	; (5244 <bt_conn_process_tx+0x120>)
    5130:	9001      	str	r0, [sp, #4]
    5132:	4b45      	ldr	r3, [pc, #276]	; (5248 <bt_conn_process_tx+0x124>)
    5134:	9503      	str	r5, [sp, #12]
    5136:	9402      	str	r4, [sp, #8]
    5138:	9500      	str	r5, [sp, #0]
    513a:	4a44      	ldr	r2, [pc, #272]	; (524c <bt_conn_process_tx+0x128>)
    513c:	4944      	ldr	r1, [pc, #272]	; (5250 <bt_conn_process_tx+0x12c>)
    513e:	4845      	ldr	r0, [pc, #276]	; (5254 <bt_conn_process_tx+0x130>)
    5140:	f7fb ff24 	bl	f8c <printk>
	if (conn->state == BT_CONN_DISCONNECTED &&
    5144:	7a63      	ldrb	r3, [r4, #9]
    5146:	462e      	mov	r6, r5
    5148:	bb0b      	cbnz	r3, 518e <bt_conn_process_tx+0x6a>
    514a:	f3bf 8f5b 	dmb	ish
    514e:	1d23      	adds	r3, r4, #4
    5150:	e853 2f00 	ldrex	r2, [r3]
    5154:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    5158:	e843 1000 	strex	r0, r1, [r3]
    515c:	2800      	cmp	r0, #0
    515e:	d1f7      	bne.n	5150 <bt_conn_process_tx+0x2c>
    5160:	f3bf 8f5b 	dmb	ish
    5164:	0653      	lsls	r3, r2, #25
    5166:	d512      	bpl.n	518e <bt_conn_process_tx+0x6a>
    5168:	f00f fc66 	bl	14a38 <_impl_k_current_get>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    516c:	8823      	ldrh	r3, [r4, #0]
    516e:	9302      	str	r3, [sp, #8]
    5170:	9001      	str	r0, [sp, #4]
    5172:	9503      	str	r5, [sp, #12]
    5174:	9500      	str	r5, [sp, #0]
    5176:	4b34      	ldr	r3, [pc, #208]	; (5248 <bt_conn_process_tx+0x124>)
    5178:	4a34      	ldr	r2, [pc, #208]	; (524c <bt_conn_process_tx+0x128>)
    517a:	4935      	ldr	r1, [pc, #212]	; (5250 <bt_conn_process_tx+0x12c>)
    517c:	4836      	ldr	r0, [pc, #216]	; (5258 <bt_conn_process_tx+0x134>)
    517e:	f7fb ff05 	bl	f8c <printk>
		conn_cleanup(conn);
    5182:	4620      	mov	r0, r4
}
    5184:	b007      	add	sp, #28
    5186:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    518a:	f7ff bc5d 	b.w	4a48 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    518e:	2100      	movs	r1, #0
    5190:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5194:	f00e fb9e 	bl	138d4 <net_buf_get>
	BT_ASSERT(buf);
    5198:	4605      	mov	r5, r0
    519a:	b968      	cbnz	r0, 51b8 <bt_conn_process_tx+0x94>
    519c:	9601      	str	r6, [sp, #4]
    519e:	9600      	str	r6, [sp, #0]
    51a0:	4b29      	ldr	r3, [pc, #164]	; (5248 <bt_conn_process_tx+0x124>)
    51a2:	4a2e      	ldr	r2, [pc, #184]	; (525c <bt_conn_process_tx+0x138>)
    51a4:	492a      	ldr	r1, [pc, #168]	; (5250 <bt_conn_process_tx+0x12c>)
    51a6:	482e      	ldr	r0, [pc, #184]	; (5260 <bt_conn_process_tx+0x13c>)
    51a8:	f7fb fef0 	bl	f8c <printk>
    51ac:	4040      	eors	r0, r0
    51ae:	f380 8811 	msr	BASEPRI, r0
    51b2:	f04f 0004 	mov.w	r0, #4
    51b6:	df02      	svc	2
    51b8:	f00f fc3e 	bl	14a38 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    51bc:	9605      	str	r6, [sp, #20]
    51be:	89ab      	ldrh	r3, [r5, #12]
    51c0:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    51c2:	4e28      	ldr	r6, [pc, #160]	; (5264 <bt_conn_process_tx+0x140>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    51c4:	9304      	str	r3, [sp, #16]
    51c6:	9001      	str	r0, [sp, #4]
    51c8:	4a20      	ldr	r2, [pc, #128]	; (524c <bt_conn_process_tx+0x128>)
    51ca:	4921      	ldr	r1, [pc, #132]	; (5250 <bt_conn_process_tx+0x12c>)
    51cc:	9503      	str	r5, [sp, #12]
    51ce:	9402      	str	r4, [sp, #8]
    51d0:	4b25      	ldr	r3, [pc, #148]	; (5268 <bt_conn_process_tx+0x144>)
    51d2:	4826      	ldr	r0, [pc, #152]	; (526c <bt_conn_process_tx+0x148>)
    51d4:	f7fb feda 	bl	f8c <printk>
	if (buf->len <= conn_mtu(conn)) {
    51d8:	89a9      	ldrh	r1, [r5, #12]
    51da:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    51de:	4291      	cmp	r1, r2
    51e0:	d808      	bhi.n	51f4 <bt_conn_process_tx+0xd0>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    51e2:	2300      	movs	r3, #0
    51e4:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    51e6:	4629      	mov	r1, r5
    51e8:	4620      	mov	r0, r4
    51ea:	f7ff fa67 	bl	46bc <send_frag>
	if (!send_buf(conn, buf)) {
    51ee:	b148      	cbz	r0, 5204 <bt_conn_process_tx+0xe0>
}
    51f0:	b007      	add	sp, #28
    51f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51f4:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    51f8:	4629      	mov	r1, r5
    51fa:	4638      	mov	r0, r7
    51fc:	f7ff ff5c 	bl	50b8 <create_frag.isra.8>
	if (!frag) {
    5200:	4601      	mov	r1, r0
    5202:	b928      	cbnz	r0, 5210 <bt_conn_process_tx+0xec>
		net_buf_unref(buf);
    5204:	4628      	mov	r0, r5
}
    5206:	b007      	add	sp, #28
    5208:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    520c:	f00e bb8c 	b.w	13928 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    5210:	2301      	movs	r3, #1
    5212:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5214:	4620      	mov	r0, r4
    5216:	f7ff fa51 	bl	46bc <send_frag>
    521a:	2800      	cmp	r0, #0
    521c:	d0f2      	beq.n	5204 <bt_conn_process_tx+0xe0>
	while (buf->len > conn_mtu(conn)) {
    521e:	89aa      	ldrh	r2, [r5, #12]
    5220:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    5224:	429a      	cmp	r2, r3
    5226:	d802      	bhi.n	522e <bt_conn_process_tx+0x10a>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5228:	2300      	movs	r3, #0
    522a:	2201      	movs	r2, #1
    522c:	e7db      	b.n	51e6 <bt_conn_process_tx+0xc2>
		frag = create_frag(conn, buf);
    522e:	4629      	mov	r1, r5
    5230:	4638      	mov	r0, r7
    5232:	f7ff ff41 	bl	50b8 <create_frag.isra.8>
		if (!frag) {
    5236:	4601      	mov	r1, r0
    5238:	2800      	cmp	r0, #0
    523a:	d0e3      	beq.n	5204 <bt_conn_process_tx+0xe0>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    523c:	2301      	movs	r3, #1
    523e:	461a      	mov	r2, r3
    5240:	e7e8      	b.n	5214 <bt_conn_process_tx+0xf0>
    5242:	bf00      	nop
    5244:	000155c5 	.word	0x000155c5
    5248:	00016ea8 	.word	0x00016ea8
    524c:	000169e6 	.word	0x000169e6
    5250:	000169ed 	.word	0x000169ed
    5254:	00016f41 	.word	0x00016f41
    5258:	00016fa5 	.word	0x00016fa5
    525c:	0001699e 	.word	0x0001699e
    5260:	00016b9a 	.word	0x00016b9a
    5264:	20003a90 	.word	0x20003a90
    5268:	00016e88 	.word	0x00016e88
    526c:	00016fdf 	.word	0x00016fdf

00005270 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    5270:	4b03      	ldr	r3, [pc, #12]	; (5280 <bt_conn_get_id+0x10>)
    5272:	1ac0      	subs	r0, r0, r3
    5274:	4b03      	ldr	r3, [pc, #12]	; (5284 <bt_conn_get_id+0x14>)
    5276:	10c0      	asrs	r0, r0, #3
    5278:	4358      	muls	r0, r3
}
    527a:	b2c0      	uxtb	r0, r0
    527c:	4770      	bx	lr
    527e:	bf00      	nop
    5280:	20000384 	.word	0x20000384
    5284:	286bca1b 	.word	0x286bca1b

00005288 <bt_conn_init>:
	parent->next = child;
    5288:	4b12      	ldr	r3, [pc, #72]	; (52d4 <bt_conn_init+0x4c>)
    528a:	4a13      	ldr	r2, [pc, #76]	; (52d8 <bt_conn_init+0x50>)
    528c:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    528e:	b510      	push	{r4, lr}
    5290:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    5292:	6859      	ldr	r1, [r3, #4]
    5294:	b901      	cbnz	r1, 5298 <bt_conn_init+0x10>
	list->tail = node;
    5296:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    5298:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    529a:	6092      	str	r2, [r2, #8]
	list->head = node;
    529c:	4a0f      	ldr	r2, [pc, #60]	; (52dc <bt_conn_init+0x54>)
    529e:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    52a0:	b901      	cbnz	r1, 52a4 <bt_conn_init+0x1c>
	list->tail = node;
    52a2:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    52a4:	f001 fb66 	bl	6974 <bt_att_init>

	err = bt_smp_init();
    52a8:	f002 fc70 	bl	7b8c <bt_smp_init>
	if (err) {
    52ac:	4604      	mov	r4, r0
    52ae:	b970      	cbnz	r0, 52ce <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    52b0:	f000 fa8a 	bl	57c8 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    52b4:	480a      	ldr	r0, [pc, #40]	; (52e0 <bt_conn_init+0x58>)
    52b6:	f7ff f847 	bl	4348 <atomic_get>
    52ba:	b140      	cbz	r0, 52ce <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    52bc:	4809      	ldr	r0, [pc, #36]	; (52e4 <bt_conn_init+0x5c>)
    52be:	f7ff f843 	bl	4348 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    52c2:	07c3      	lsls	r3, r0, #31
    52c4:	d503      	bpl.n	52ce <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    52c6:	2101      	movs	r1, #1
    52c8:	4807      	ldr	r0, [pc, #28]	; (52e8 <bt_conn_init+0x60>)
    52ca:	f7ff fc43 	bl	4b54 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    52ce:	4620      	mov	r0, r4
    52d0:	bd10      	pop	{r4, pc}
    52d2:	bf00      	nop
    52d4:	2000041c 	.word	0x2000041c
    52d8:	20000374 	.word	0x20000374
    52dc:	2000037c 	.word	0x2000037c
    52e0:	200003c4 	.word	0x200003c4
    52e4:	20000388 	.word	0x20000388
    52e8:	20000384 	.word	0x20000384

000052ec <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    52ec:	4770      	bx	lr
	...

000052f0 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    52f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    52f2:	4a0b      	ldr	r2, [pc, #44]	; (5320 <l2cap_accept+0x30>)
    52f4:	6813      	ldr	r3, [r2, #0]
    52f6:	b933      	cbnz	r3, 5306 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    52f8:	480a      	ldr	r0, [pc, #40]	; (5324 <l2cap_accept+0x34>)
    52fa:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    52fc:	600a      	str	r2, [r1, #0]

		return 0;
    52fe:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    5300:	b005      	add	sp, #20
    5302:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    5306:	4b08      	ldr	r3, [pc, #32]	; (5328 <l2cap_accept+0x38>)
    5308:	9302      	str	r3, [sp, #8]
    530a:	9001      	str	r0, [sp, #4]
    530c:	9300      	str	r3, [sp, #0]
    530e:	4a07      	ldr	r2, [pc, #28]	; (532c <l2cap_accept+0x3c>)
    5310:	4b07      	ldr	r3, [pc, #28]	; (5330 <l2cap_accept+0x40>)
    5312:	4908      	ldr	r1, [pc, #32]	; (5334 <l2cap_accept+0x44>)
    5314:	4808      	ldr	r0, [pc, #32]	; (5338 <l2cap_accept+0x48>)
    5316:	f7fb fe39 	bl	f8c <printk>
	return -ENOMEM;
    531a:	f06f 000b 	mvn.w	r0, #11
    531e:	e7ef      	b.n	5300 <l2cap_accept+0x10>
    5320:	20000424 	.word	0x20000424
    5324:	20003bd4 	.word	0x20003bd4
    5328:	000155c5 	.word	0x000155c5
    532c:	0001699e 	.word	0x0001699e
    5330:	000173e2 	.word	0x000173e2
    5334:	000169ed 	.word	0x000169ed
    5338:	00017451 	.word	0x00017451

0000533c <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    533e:	4607      	mov	r7, r0
    5340:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5342:	2000      	movs	r0, #0
    5344:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5346:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5348:	f7ff fea2 	bl	5090 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    534c:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    534e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5350:	3008      	adds	r0, #8
    5352:	f00e fb1b 	bl	1398c <net_buf_simple_add>
	hdr->code = code;
    5356:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    5358:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    535a:	8045      	strh	r5, [r0, #2]
}
    535c:	4620      	mov	r0, r4
    535e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005360 <l2cap_connected>:
    5360:	4770      	bx	lr
	...

00005364 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    5364:	2300      	movs	r3, #0
    5366:	6083      	str	r3, [r0, #8]
    5368:	4b05      	ldr	r3, [pc, #20]	; (5380 <bt_l2cap_le_fixed_chan_register+0x1c>)
    536a:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    536c:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    5370:	b911      	cbnz	r1, 5378 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    5372:	605a      	str	r2, [r3, #4]
	list->head = node;
    5374:	601a      	str	r2, [r3, #0]
    5376:	4770      	bx	lr
	parent->next = child;
    5378:	600a      	str	r2, [r1, #0]
	list->tail = node;
    537a:	605a      	str	r2, [r3, #4]
    537c:	4770      	bx	lr
    537e:	bf00      	nop
    5380:	200004bc 	.word	0x200004bc

00005384 <bt_l2cap_chan_remove>:
{
    5384:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5386:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5388:	b113      	cbz	r3, 5390 <bt_l2cap_chan_remove+0xc>
    538a:	3b08      	subs	r3, #8
    538c:	2200      	movs	r2, #0
    538e:	b903      	cbnz	r3, 5392 <bt_l2cap_chan_remove+0xe>
    5390:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    5392:	428b      	cmp	r3, r1
    5394:	f103 0408 	add.w	r4, r3, #8
    5398:	d10f      	bne.n	53ba <bt_l2cap_chan_remove+0x36>
    539a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    539c:	b93a      	cbnz	r2, 53ae <bt_l2cap_chan_remove+0x2a>
    539e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    53a0:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    53a2:	4294      	cmp	r4, r2
    53a4:	d100      	bne.n	53a8 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    53a6:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    53a8:	2200      	movs	r2, #0
    53aa:	609a      	str	r2, [r3, #8]
    53ac:	bd10      	pop	{r4, pc}
    53ae:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    53b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    53b2:	428c      	cmp	r4, r1
	list->tail = node;
    53b4:	bf08      	it	eq
    53b6:	63c2      	streq	r2, [r0, #60]	; 0x3c
    53b8:	e7f6      	b.n	53a8 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    53ba:	4622      	mov	r2, r4
    53bc:	2c00      	cmp	r4, #0
    53be:	d0e7      	beq.n	5390 <bt_l2cap_chan_remove+0xc>
	return node->next;
    53c0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    53c2:	2b00      	cmp	r3, #0
    53c4:	d0e4      	beq.n	5390 <bt_l2cap_chan_remove+0xc>
    53c6:	3b08      	subs	r3, #8
    53c8:	e7e1      	b.n	538e <bt_l2cap_chan_remove+0xa>

000053ca <bt_l2cap_chan_del>:
	if (!chan->conn) {
    53ca:	6803      	ldr	r3, [r0, #0]
{
    53cc:	b510      	push	{r4, lr}
    53ce:	4604      	mov	r4, r0
	if (!chan->conn) {
    53d0:	b12b      	cbz	r3, 53de <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    53d2:	6843      	ldr	r3, [r0, #4]
    53d4:	685b      	ldr	r3, [r3, #4]
    53d6:	b103      	cbz	r3, 53da <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    53d8:	4798      	blx	r3
	chan->conn = NULL;
    53da:	2300      	movs	r3, #0
    53dc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    53de:	68e3      	ldr	r3, [r4, #12]
    53e0:	b11b      	cbz	r3, 53ea <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    53e2:	4620      	mov	r0, r4
}
    53e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    53e8:	4718      	bx	r3
    53ea:	bd10      	pop	{r4, pc}

000053ec <l2cap_rtx_timeout>:
{
    53ec:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    53ee:	4b0c      	ldr	r3, [pc, #48]	; (5420 <l2cap_rtx_timeout+0x34>)
    53f0:	4a0c      	ldr	r2, [pc, #48]	; (5424 <l2cap_rtx_timeout+0x38>)
    53f2:	490d      	ldr	r1, [pc, #52]	; (5428 <l2cap_rtx_timeout+0x3c>)
{
    53f4:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    53f6:	f1a0 0410 	sub.w	r4, r0, #16
{
    53fa:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    53fc:	9302      	str	r3, [sp, #8]
    53fe:	e88d 0018 	stmia.w	sp, {r3, r4}
    5402:	480a      	ldr	r0, [pc, #40]	; (542c <l2cap_rtx_timeout+0x40>)
    5404:	4b0a      	ldr	r3, [pc, #40]	; (5430 <l2cap_rtx_timeout+0x44>)
    5406:	f7fb fdc1 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    540a:	f855 0c10 	ldr.w	r0, [r5, #-16]
    540e:	4621      	mov	r1, r4
    5410:	f7ff ffb8 	bl	5384 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    5414:	4620      	mov	r0, r4
}
    5416:	b005      	add	sp, #20
    5418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    541c:	f7ff bfd5 	b.w	53ca <bt_l2cap_chan_del>
    5420:	000155c5 	.word	0x000155c5
    5424:	0001699e 	.word	0x0001699e
    5428:	000169ed 	.word	0x000169ed
    542c:	000175a5 	.word	0x000175a5
    5430:	0001738c 	.word	0x0001738c

00005434 <bt_l2cap_connected>:
{
    5434:	4b1a      	ldr	r3, [pc, #104]	; (54a0 <bt_l2cap_connected+0x6c>)
    5436:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    543a:	681c      	ldr	r4, [r3, #0]
    543c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    543e:	b12c      	cbz	r4, 544c <bt_l2cap_connected+0x18>
	parent->next = child;
    5440:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5442:	f8df 8060 	ldr.w	r8, [pc, #96]	; 54a4 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5446:	3c08      	subs	r4, #8
    5448:	46b9      	mov	r9, r7
    544a:	b914      	cbnz	r4, 5452 <bt_l2cap_connected+0x1e>
}
    544c:	b003      	add	sp, #12
    544e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    5452:	6863      	ldr	r3, [r4, #4]
    5454:	a901      	add	r1, sp, #4
    5456:	4630      	mov	r0, r6
    5458:	4798      	blx	r3
    545a:	2800      	cmp	r0, #0
    545c:	db18      	blt.n	5490 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    545e:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    5460:	8823      	ldrh	r3, [r4, #0]
    5462:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    5464:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5468:	4641      	mov	r1, r8
    546a:	f105 0010 	add.w	r0, r5, #16
    546e:	f00f fdd9 	bl	15024 <k_delayed_work_init>
    5472:	60af      	str	r7, [r5, #8]
    5474:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    5476:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    547a:	b972      	cbnz	r2, 549a <bt_l2cap_connected+0x66>
	list->tail = node;
    547c:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    547e:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    5480:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    5482:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    5484:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    5486:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    548a:	681b      	ldr	r3, [r3, #0]
    548c:	b103      	cbz	r3, 5490 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    548e:	4798      	blx	r3
	return node->next;
    5490:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5492:	2c00      	cmp	r4, #0
    5494:	d0da      	beq.n	544c <bt_l2cap_connected+0x18>
    5496:	3c08      	subs	r4, #8
    5498:	e7d7      	b.n	544a <bt_l2cap_connected+0x16>
	parent->next = child;
    549a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    549c:	63f3      	str	r3, [r6, #60]	; 0x3c
    549e:	e7ef      	b.n	5480 <bt_l2cap_connected+0x4c>
    54a0:	200004bc 	.word	0x200004bc
    54a4:	000053ed 	.word	0x000053ed

000054a8 <bt_l2cap_disconnected>:
{
    54a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    54aa:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    54ac:	b1a3      	cbz	r3, 54d8 <bt_l2cap_disconnected+0x30>
    54ae:	f1b3 0008 	subs.w	r0, r3, #8
    54b2:	d10a      	bne.n	54ca <bt_l2cap_disconnected+0x22>
    54b4:	bd10      	pop	{r4, pc}
    54b6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    54b8:	f7ff ff87 	bl	53ca <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    54bc:	b164      	cbz	r4, 54d8 <bt_l2cap_disconnected+0x30>
	return node->next;
    54be:	68a3      	ldr	r3, [r4, #8]
    54c0:	b103      	cbz	r3, 54c4 <bt_l2cap_disconnected+0x1c>
    54c2:	3b08      	subs	r3, #8
{
    54c4:	4620      	mov	r0, r4
    54c6:	461c      	mov	r4, r3
    54c8:	e7f6      	b.n	54b8 <bt_l2cap_disconnected+0x10>
    54ca:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    54cc:	2c00      	cmp	r4, #0
    54ce:	d1f2      	bne.n	54b6 <bt_l2cap_disconnected+0xe>
}
    54d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    54d4:	f7ff bf79 	b.w	53ca <bt_l2cap_chan_del>
    54d8:	bd10      	pop	{r4, pc}

000054da <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    54da:	3104      	adds	r1, #4
    54dc:	f7ff bdd8 	b.w	5090 <bt_conn_create_pdu>

000054e0 <bt_l2cap_send_cb>:
{
    54e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54e2:	4614      	mov	r4, r2
    54e4:	4605      	mov	r5, r0
    54e6:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    54e8:	f102 0008 	add.w	r0, r2, #8
    54ec:	2104      	movs	r1, #4
{
    54ee:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    54f0:	f00e fa72 	bl	139d8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    54f4:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    54f6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    54f8:	3904      	subs	r1, #4
    54fa:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    54fc:	4632      	mov	r2, r6
    54fe:	4621      	mov	r1, r4
    5500:	4628      	mov	r0, r5
}
    5502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    5506:	f7ff b863 	b.w	45d0 <bt_conn_send_cb>
	...

0000550c <l2cap_recv>:
{
    550c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    550e:	898b      	ldrh	r3, [r1, #12]
    5510:	2b03      	cmp	r3, #3
{
    5512:	b087      	sub	sp, #28
    5514:	4607      	mov	r7, r0
    5516:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    5518:	d809      	bhi.n	552e <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    551a:	4b5a      	ldr	r3, [pc, #360]	; (5684 <l2cap_recv+0x178>)
    551c:	9301      	str	r3, [sp, #4]
    551e:	9300      	str	r3, [sp, #0]
    5520:	4a59      	ldr	r2, [pc, #356]	; (5688 <l2cap_recv+0x17c>)
    5522:	4b5a      	ldr	r3, [pc, #360]	; (568c <l2cap_recv+0x180>)
    5524:	495a      	ldr	r1, [pc, #360]	; (5690 <l2cap_recv+0x184>)
    5526:	485b      	ldr	r0, [pc, #364]	; (5694 <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    5528:	f7fb fd30 	bl	f8c <printk>
		return;
    552c:	e014      	b.n	5558 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    552e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5530:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5532:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    5536:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5538:	f00e fa56 	bl	139e8 <net_buf_simple_pull>
	if (buf->len != len) {
    553c:	89aa      	ldrh	r2, [r5, #12]
    553e:	4296      	cmp	r6, r2
    5540:	d00c      	beq.n	555c <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    5542:	4b50      	ldr	r3, [pc, #320]	; (5684 <l2cap_recv+0x178>)
    5544:	9303      	str	r3, [sp, #12]
    5546:	9201      	str	r2, [sp, #4]
    5548:	9300      	str	r3, [sp, #0]
    554a:	9602      	str	r6, [sp, #8]
    554c:	4b4f      	ldr	r3, [pc, #316]	; (568c <l2cap_recv+0x180>)
    554e:	4a4e      	ldr	r2, [pc, #312]	; (5688 <l2cap_recv+0x17c>)
    5550:	494f      	ldr	r1, [pc, #316]	; (5690 <l2cap_recv+0x184>)
    5552:	4851      	ldr	r0, [pc, #324]	; (5698 <l2cap_recv+0x18c>)
    5554:	f7fb fd1a 	bl	f8c <printk>
}
    5558:	b007      	add	sp, #28
    555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    555c:	7861      	ldrb	r1, [r4, #1]
    555e:	b939      	cbnz	r1, 5570 <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    5560:	4b48      	ldr	r3, [pc, #288]	; (5684 <l2cap_recv+0x178>)
    5562:	9301      	str	r3, [sp, #4]
    5564:	9300      	str	r3, [sp, #0]
    5566:	4a48      	ldr	r2, [pc, #288]	; (5688 <l2cap_recv+0x17c>)
    5568:	4b48      	ldr	r3, [pc, #288]	; (568c <l2cap_recv+0x180>)
    556a:	4949      	ldr	r1, [pc, #292]	; (5690 <l2cap_recv+0x184>)
    556c:	484b      	ldr	r0, [pc, #300]	; (569c <l2cap_recv+0x190>)
    556e:	e7db      	b.n	5528 <l2cap_recv+0x1c>
	switch (hdr->code) {
    5570:	7823      	ldrb	r3, [r4, #0]
    5572:	2b12      	cmp	r3, #18
    5574:	d029      	beq.n	55ca <l2cap_recv+0xbe>
    5576:	2b13      	cmp	r3, #19
    5578:	d01d      	beq.n	55b6 <l2cap_recv+0xaa>
    557a:	2b01      	cmp	r3, #1
    557c:	d0ec      	beq.n	5558 <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    557e:	4a41      	ldr	r2, [pc, #260]	; (5684 <l2cap_recv+0x178>)
    5580:	9202      	str	r2, [sp, #8]
    5582:	e88d 000c 	stmia.w	sp, {r2, r3}
    5586:	4942      	ldr	r1, [pc, #264]	; (5690 <l2cap_recv+0x184>)
    5588:	4b40      	ldr	r3, [pc, #256]	; (568c <l2cap_recv+0x180>)
    558a:	4a45      	ldr	r2, [pc, #276]	; (56a0 <l2cap_recv+0x194>)
    558c:	4845      	ldr	r0, [pc, #276]	; (56a4 <l2cap_recv+0x198>)
    558e:	f7fb fcfd 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5592:	2202      	movs	r2, #2
    5594:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    5596:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5598:	2001      	movs	r0, #1
    559a:	f7ff fecf 	bl	533c <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    559e:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    55a0:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    55a2:	3008      	adds	r0, #8
    55a4:	f00e f9f2 	bl	1398c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    55a8:	2300      	movs	r3, #0
    55aa:	7003      	strb	r3, [r0, #0]
    55ac:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    55ae:	4622      	mov	r2, r4
    55b0:	2105      	movs	r1, #5
    55b2:	4628      	mov	r0, r5
    55b4:	e025      	b.n	5602 <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    55b6:	2e01      	cmp	r6, #1
    55b8:	d8ce      	bhi.n	5558 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    55ba:	4b32      	ldr	r3, [pc, #200]	; (5684 <l2cap_recv+0x178>)
    55bc:	9301      	str	r3, [sp, #4]
    55be:	9300      	str	r3, [sp, #0]
    55c0:	4a31      	ldr	r2, [pc, #196]	; (5688 <l2cap_recv+0x17c>)
    55c2:	4b39      	ldr	r3, [pc, #228]	; (56a8 <l2cap_recv+0x19c>)
    55c4:	4932      	ldr	r1, [pc, #200]	; (5690 <l2cap_recv+0x184>)
    55c6:	4839      	ldr	r0, [pc, #228]	; (56ac <l2cap_recv+0x1a0>)
    55c8:	e7ae      	b.n	5528 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    55ca:	2e07      	cmp	r6, #7
    55cc:	d807      	bhi.n	55de <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    55ce:	4b2d      	ldr	r3, [pc, #180]	; (5684 <l2cap_recv+0x178>)
    55d0:	9301      	str	r3, [sp, #4]
    55d2:	9300      	str	r3, [sp, #0]
    55d4:	4a2c      	ldr	r2, [pc, #176]	; (5688 <l2cap_recv+0x17c>)
    55d6:	4b36      	ldr	r3, [pc, #216]	; (56b0 <l2cap_recv+0x1a4>)
    55d8:	492d      	ldr	r1, [pc, #180]	; (5690 <l2cap_recv+0x184>)
    55da:	4836      	ldr	r0, [pc, #216]	; (56b4 <l2cap_recv+0x1a8>)
    55dc:	e7a4      	b.n	5528 <l2cap_recv+0x1c>
    55de:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    55e0:	78e6      	ldrb	r6, [r4, #3]
    55e2:	b18e      	cbz	r6, 5608 <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    55e4:	2202      	movs	r2, #2
    55e6:	2001      	movs	r0, #1
    55e8:	f7ff fea8 	bl	533c <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    55ec:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    55ee:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    55f0:	3008      	adds	r0, #8
    55f2:	f00e f9cb 	bl	1398c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    55f6:	2300      	movs	r3, #0
    55f8:	7003      	strb	r3, [r0, #0]
    55fa:	7043      	strb	r3, [r0, #1]
    55fc:	462a      	mov	r2, r5
    55fe:	2105      	movs	r1, #5
    5600:	4620      	mov	r0, r4
    5602:	f7ff ff6d 	bl	54e0 <bt_l2cap_send_cb>
    5606:	e7a7      	b.n	5558 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    5608:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    560a:	7858      	ldrb	r0, [r3, #1]
    560c:	781a      	ldrb	r2, [r3, #0]
    560e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    5612:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    5616:	78d8      	ldrb	r0, [r3, #3]
    5618:	789a      	ldrb	r2, [r3, #2]
    561a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    561e:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    5622:	7958      	ldrb	r0, [r3, #5]
    5624:	791a      	ldrb	r2, [r3, #4]
    5626:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    562a:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    562e:	799a      	ldrb	r2, [r3, #6]
    5630:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5632:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    5634:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5638:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    563a:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    563e:	f7ff fe7d 	bl	533c <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    5642:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5644:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    5646:	4620      	mov	r0, r4
    5648:	f7fe fea8 	bl	439c <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    564c:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    564e:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    5650:	f107 0008 	add.w	r0, r7, #8
    5654:	f00e f99a 	bl	1398c <net_buf_simple_add>
	if (accepted) {
    5658:	b17d      	cbz	r5, 567a <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    565a:	7006      	strb	r6, [r0, #0]
    565c:	7046      	strb	r6, [r0, #1]
    565e:	2300      	movs	r3, #0
    5660:	463a      	mov	r2, r7
    5662:	2105      	movs	r1, #5
    5664:	4620      	mov	r0, r4
    5666:	f7ff ff3b 	bl	54e0 <bt_l2cap_send_cb>
	if (accepted) {
    566a:	2d00      	cmp	r5, #0
    566c:	f43f af74 	beq.w	5558 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    5670:	a904      	add	r1, sp, #16
    5672:	4620      	mov	r0, r4
    5674:	f7ff fc67 	bl	4f46 <bt_conn_le_conn_update>
    5678:	e76e      	b.n	5558 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    567a:	2301      	movs	r3, #1
    567c:	7003      	strb	r3, [r0, #0]
    567e:	7045      	strb	r5, [r0, #1]
    5680:	e7ed      	b.n	565e <l2cap_recv+0x152>
    5682:	bf00      	nop
    5684:	000155c5 	.word	0x000155c5
    5688:	0001699e 	.word	0x0001699e
    568c:	000173c9 	.word	0x000173c9
    5690:	000169ed 	.word	0x000169ed
    5694:	00017488 	.word	0x00017488
    5698:	000174b6 	.word	0x000174b6
    569c:	000174e7 	.word	0x000174e7
    56a0:	00016a28 	.word	0x00016a28
    56a4:	00017577 	.word	0x00017577
    56a8:	0001739e 	.word	0x0001739e
    56ac:	00017518 	.word	0x00017518
    56b0:	000173b0 	.word	0x000173b0
    56b4:	00017544 	.word	0x00017544

000056b8 <bt_l2cap_le_lookup_tx_cid>:
{
    56b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    56ba:	b100      	cbz	r0, 56be <bt_l2cap_le_lookup_tx_cid+0x6>
    56bc:	3808      	subs	r0, #8
    56be:	b900      	cbnz	r0, 56c2 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    56c0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    56c2:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    56c6:	428b      	cmp	r3, r1
    56c8:	d0fa      	beq.n	56c0 <bt_l2cap_le_lookup_tx_cid+0x8>
    56ca:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    56cc:	2000      	movs	r0, #0
    56ce:	2b00      	cmp	r3, #0
    56d0:	d0f6      	beq.n	56c0 <bt_l2cap_le_lookup_tx_cid+0x8>
    56d2:	f1a3 0008 	sub.w	r0, r3, #8
    56d6:	e7f2      	b.n	56be <bt_l2cap_le_lookup_tx_cid+0x6>

000056d8 <bt_l2cap_le_lookup_rx_cid>:
{
    56d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    56da:	b100      	cbz	r0, 56de <bt_l2cap_le_lookup_rx_cid+0x6>
    56dc:	3808      	subs	r0, #8
    56de:	b900      	cbnz	r0, 56e2 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    56e0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    56e2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    56e4:	428b      	cmp	r3, r1
    56e6:	d0fb      	beq.n	56e0 <bt_l2cap_le_lookup_rx_cid+0x8>
    56e8:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    56ea:	2000      	movs	r0, #0
    56ec:	2b00      	cmp	r3, #0
    56ee:	d0f7      	beq.n	56e0 <bt_l2cap_le_lookup_rx_cid+0x8>
    56f0:	f1a3 0008 	sub.w	r0, r3, #8
    56f4:	e7f3      	b.n	56de <bt_l2cap_le_lookup_rx_cid+0x6>
	...

000056f8 <bt_l2cap_recv>:
{
    56f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    56fa:	898b      	ldrh	r3, [r1, #12]
    56fc:	2b03      	cmp	r3, #3
{
    56fe:	4606      	mov	r6, r0
    5700:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    5702:	d80e      	bhi.n	5722 <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    5704:	4b15      	ldr	r3, [pc, #84]	; (575c <bt_l2cap_recv+0x64>)
    5706:	9301      	str	r3, [sp, #4]
    5708:	9300      	str	r3, [sp, #0]
    570a:	4a15      	ldr	r2, [pc, #84]	; (5760 <bt_l2cap_recv+0x68>)
    570c:	4b15      	ldr	r3, [pc, #84]	; (5764 <bt_l2cap_recv+0x6c>)
    570e:	4916      	ldr	r1, [pc, #88]	; (5768 <bt_l2cap_recv+0x70>)
    5710:	4816      	ldr	r0, [pc, #88]	; (576c <bt_l2cap_recv+0x74>)
    5712:	f7fb fc3b 	bl	f8c <printk>
	net_buf_unref(buf);
    5716:	4620      	mov	r0, r4
}
    5718:	b004      	add	sp, #16
    571a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    571e:	f00e b903 	b.w	13928 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    5722:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5724:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    5726:	f850 3f08 	ldr.w	r3, [r0, #8]!
    572a:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    572c:	f00e f95c 	bl	139e8 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    5730:	4629      	mov	r1, r5
    5732:	4630      	mov	r0, r6
    5734:	f7ff ffd0 	bl	56d8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5738:	b950      	cbnz	r0, 5750 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    573a:	4b08      	ldr	r3, [pc, #32]	; (575c <bt_l2cap_recv+0x64>)
    573c:	9302      	str	r3, [sp, #8]
    573e:	e88d 0028 	stmia.w	sp, {r3, r5}
    5742:	4a0b      	ldr	r2, [pc, #44]	; (5770 <bt_l2cap_recv+0x78>)
    5744:	4b07      	ldr	r3, [pc, #28]	; (5764 <bt_l2cap_recv+0x6c>)
    5746:	4908      	ldr	r1, [pc, #32]	; (5768 <bt_l2cap_recv+0x70>)
    5748:	480a      	ldr	r0, [pc, #40]	; (5774 <bt_l2cap_recv+0x7c>)
    574a:	f7fb fc1f 	bl	f8c <printk>
    574e:	e7e2      	b.n	5716 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    5750:	6843      	ldr	r3, [r0, #4]
    5752:	4621      	mov	r1, r4
    5754:	691b      	ldr	r3, [r3, #16]
    5756:	4798      	blx	r3
    5758:	e7dd      	b.n	5716 <bt_l2cap_recv+0x1e>
    575a:	bf00      	nop
    575c:	000155c5 	.word	0x000155c5
    5760:	0001699e 	.word	0x0001699e
    5764:	000173d4 	.word	0x000173d4
    5768:	000169ed 	.word	0x000169ed
    576c:	000173ef 	.word	0x000173ef
    5770:	00016a28 	.word	0x00016a28
    5774:	0001741c 	.word	0x0001741c

00005778 <bt_l2cap_update_conn_param>:
{
    5778:	b570      	push	{r4, r5, r6, lr}
	ident++;
    577a:	4b12      	ldr	r3, [pc, #72]	; (57c4 <bt_l2cap_update_conn_param+0x4c>)
    577c:	781a      	ldrb	r2, [r3, #0]
    577e:	3201      	adds	r2, #1
	if (!ident) {
    5780:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    5784:	bf08      	it	eq
    5786:	2201      	moveq	r2, #1
    5788:	701a      	strb	r2, [r3, #0]
{
    578a:	460c      	mov	r4, r1
    578c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    578e:	7819      	ldrb	r1, [r3, #0]
    5790:	2208      	movs	r2, #8
    5792:	2012      	movs	r0, #18
    5794:	f7ff fdd2 	bl	533c <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5798:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    579a:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    579c:	4408      	add	r0, r1
    579e:	f00e f8f5 	bl	1398c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    57a2:	8823      	ldrh	r3, [r4, #0]
    57a4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    57a6:	8863      	ldrh	r3, [r4, #2]
    57a8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    57aa:	88a3      	ldrh	r3, [r4, #4]
    57ac:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    57ae:	88e3      	ldrh	r3, [r4, #6]
    57b0:	80c3      	strh	r3, [r0, #6]
    57b2:	4632      	mov	r2, r6
    57b4:	4628      	mov	r0, r5
    57b6:	2300      	movs	r3, #0
    57b8:	2105      	movs	r1, #5
    57ba:	f7ff fe91 	bl	54e0 <bt_l2cap_send_cb>
}
    57be:	2000      	movs	r0, #0
    57c0:	bd70      	pop	{r4, r5, r6, pc}
    57c2:	bf00      	nop
    57c4:	200004b8 	.word	0x200004b8

000057c8 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    57c8:	4801      	ldr	r0, [pc, #4]	; (57d0 <bt_l2cap_init+0x8>)
    57ca:	f7ff bdcb 	b.w	5364 <bt_l2cap_le_fixed_chan_register>
    57ce:	bf00      	nop
    57d0:	20003bc8 	.word	0x20003bc8

000057d4 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    57d4:	2006      	movs	r0, #6
    57d6:	4770      	bx	lr

000057d8 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    57d8:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    57da:	4a0a      	ldr	r2, [pc, #40]	; (5804 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    57dc:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    57de:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    57e2:	4284      	cmp	r4, r0
    57e4:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    57e8:	d102      	bne.n	57f0 <att_op_get_type+0x18>
			return handlers[i].type;
    57ea:	440a      	add	r2, r1
    57ec:	7890      	ldrb	r0, [r2, #2]
    57ee:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    57f0:	3301      	adds	r3, #1
    57f2:	2b1b      	cmp	r3, #27
    57f4:	d1f3      	bne.n	57de <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    57f6:	f010 0f40 	tst.w	r0, #64	; 0x40
    57fa:	bf14      	ite	ne
    57fc:	2000      	movne	r0, #0
    57fe:	2006      	moveq	r0, #6
}
    5800:	bd10      	pop	{r4, pc}
    5802:	bf00      	nop
    5804:	000178cc 	.word	0x000178cc

00005808 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    580a:	4d11      	ldr	r5, [pc, #68]	; (5850 <bt_att_accept+0x48>)
    580c:	682c      	ldr	r4, [r5, #0]
{
    580e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    5810:	b984      	cbnz	r4, 5834 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    5812:	22e4      	movs	r2, #228	; 0xe4
    5814:	4621      	mov	r1, r4
    5816:	4628      	mov	r0, r5
    5818:	f7fc fa1c 	bl	1c54 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    581c:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    581e:	4b0d      	ldr	r3, [pc, #52]	; (5854 <bt_att_accept+0x4c>)
    5820:	606b      	str	r3, [r5, #4]
    5822:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    5826:	4611      	mov	r1, r2
    5828:	f00f f90c 	bl	14a44 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    582c:	6035      	str	r5, [r6, #0]

		return 0;
    582e:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    5830:	b004      	add	sp, #16
    5832:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    5834:	4b08      	ldr	r3, [pc, #32]	; (5858 <bt_att_accept+0x50>)
    5836:	9302      	str	r3, [sp, #8]
    5838:	9001      	str	r0, [sp, #4]
    583a:	9300      	str	r3, [sp, #0]
    583c:	4a07      	ldr	r2, [pc, #28]	; (585c <bt_att_accept+0x54>)
    583e:	4b08      	ldr	r3, [pc, #32]	; (5860 <bt_att_accept+0x58>)
    5840:	4908      	ldr	r1, [pc, #32]	; (5864 <bt_att_accept+0x5c>)
    5842:	4809      	ldr	r0, [pc, #36]	; (5868 <bt_att_accept+0x60>)
    5844:	f7fb fba2 	bl	f8c <printk>
	return -ENOMEM;
    5848:	f06f 000b 	mvn.w	r0, #11
    584c:	e7f0      	b.n	5830 <bt_att_accept+0x28>
    584e:	bf00      	nop
    5850:	200004c4 	.word	0x200004c4
    5854:	20003bf4 	.word	0x20003bf4
    5858:	000155c5 	.word	0x000155c5
    585c:	0001699e 	.word	0x0001699e
    5860:	00017644 	.word	0x00017644
    5864:	000169ed 	.word	0x000169ed
    5868:	00017760 	.word	0x00017760

0000586c <att_req_destroy>:
{
    586c:	b510      	push	{r4, lr}
    586e:	4604      	mov	r4, r0
	if (req->buf) {
    5870:	6900      	ldr	r0, [r0, #16]
    5872:	b108      	cbz	r0, 5878 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    5874:	f00e f858 	bl	13928 <net_buf_unref>
	if (req->destroy) {
    5878:	68a3      	ldr	r3, [r4, #8]
    587a:	b10b      	cbz	r3, 5880 <att_req_destroy+0x14>
		req->destroy(req);
    587c:	4620      	mov	r0, r4
    587e:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5880:	4620      	mov	r0, r4
    5882:	2214      	movs	r2, #20
    5884:	2100      	movs	r1, #0
}
    5886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    588a:	f7fc b9e3 	b.w	1c54 <memset>

0000588e <att_notify>:
{
    588e:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5890:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5892:	f101 0008 	add.w	r0, r1, #8
{
    5896:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5898:	f00e f8b6 	bl	13a08 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    589c:	89a3      	ldrh	r3, [r4, #12]
    589e:	68a2      	ldr	r2, [r4, #8]
    58a0:	4601      	mov	r1, r0
    58a2:	4628      	mov	r0, r5
    58a4:	f002 f82e 	bl	7904 <bt_gatt_notification>
}
    58a8:	2000      	movs	r0, #0
    58aa:	bd38      	pop	{r3, r4, r5, pc}

000058ac <read_group_cb>:
{
    58ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    58b0:	680d      	ldr	r5, [r1, #0]
{
    58b2:	4606      	mov	r6, r0
    58b4:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    58b6:	f04f 0800 	mov.w	r8, #0
    58ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    58be:	a902      	add	r1, sp, #8
    58c0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    58c2:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    58c4:	f88d 8008 	strb.w	r8, [sp, #8]
    58c8:	f8ad 300a 	strh.w	r3, [sp, #10]
    58cc:	f7fc fb14 	bl	1ef8 <bt_uuid_cmp>
    58d0:	b198      	cbz	r0, 58fa <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    58d2:	f642 0301 	movw	r3, #10241	; 0x2801
    58d6:	a903      	add	r1, sp, #12
    58d8:	6830      	ldr	r0, [r6, #0]
    58da:	f88d 800c 	strb.w	r8, [sp, #12]
    58de:	f8ad 300e 	strh.w	r3, [sp, #14]
    58e2:	f7fc fb09 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    58e6:	b140      	cbz	r0, 58fa <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    58e8:	6923      	ldr	r3, [r4, #16]
    58ea:	b123      	cbz	r3, 58f6 <read_group_cb+0x4a>
    58ec:	8a32      	ldrh	r2, [r6, #16]
    58ee:	8859      	ldrh	r1, [r3, #2]
    58f0:	4291      	cmp	r1, r2
    58f2:	d200      	bcs.n	58f6 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    58f4:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    58f6:	2001      	movs	r0, #1
    58f8:	e012      	b.n	5920 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    58fa:	6861      	ldr	r1, [r4, #4]
    58fc:	6830      	ldr	r0, [r6, #0]
    58fe:	f7fc fafb 	bl	1ef8 <bt_uuid_cmp>
    5902:	b110      	cbz	r0, 590a <read_group_cb+0x5e>
		data->group = NULL;
    5904:	2300      	movs	r3, #0
    5906:	6123      	str	r3, [r4, #16]
    5908:	e7f5      	b.n	58f6 <read_group_cb+0x4a>
	if (data->rsp->len &&
    590a:	68e3      	ldr	r3, [r4, #12]
    590c:	68a0      	ldr	r0, [r4, #8]
    590e:	781a      	ldrb	r2, [r3, #0]
    5910:	b14a      	cbz	r2, 5926 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5912:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5916:	8981      	ldrh	r1, [r0, #12]
    5918:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    591a:	4293      	cmp	r3, r2
    591c:	da03      	bge.n	5926 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    591e:	2000      	movs	r0, #0
}
    5920:	b004      	add	sp, #16
    5922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5926:	2104      	movs	r1, #4
    5928:	3008      	adds	r0, #8
    592a:	f00e f82f 	bl	1398c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    592e:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5930:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5932:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5934:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5936:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5938:	898a      	ldrh	r2, [r1, #12]
    593a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    593e:	6889      	ldr	r1, [r1, #8]
    5940:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5944:	1a9b      	subs	r3, r3, r2
    5946:	2500      	movs	r5, #0
    5948:	440a      	add	r2, r1
    594a:	9500      	str	r5, [sp, #0]
    594c:	4631      	mov	r1, r6
    594e:	b29b      	uxth	r3, r3
    5950:	4638      	mov	r0, r7
    5952:	47c0      	blx	r8
	if (read < 0) {
    5954:	1e01      	subs	r1, r0, #0
    5956:	dbe2      	blt.n	591e <read_group_cb+0x72>
	if (!data->rsp->len) {
    5958:	68e0      	ldr	r0, [r4, #12]
    595a:	7802      	ldrb	r2, [r0, #0]
    595c:	1d0b      	adds	r3, r1, #4
    595e:	b92a      	cbnz	r2, 596c <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5960:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5962:	68a0      	ldr	r0, [r4, #8]
    5964:	3008      	adds	r0, #8
    5966:	f00e f811 	bl	1398c <net_buf_simple_add>
    596a:	e7c4      	b.n	58f6 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    596c:	429a      	cmp	r2, r3
    596e:	d0f8      	beq.n	5962 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5970:	68a2      	ldr	r2, [r4, #8]
    5972:	8993      	ldrh	r3, [r2, #12]
    5974:	3b04      	subs	r3, #4
    5976:	8193      	strh	r3, [r2, #12]
    5978:	e7d1      	b.n	591e <read_group_cb+0x72>

0000597a <find_info_cb>:
	if (!data->rsp) {
    597a:	688b      	ldr	r3, [r1, #8]
{
    597c:	b570      	push	{r4, r5, r6, lr}
    597e:	4605      	mov	r5, r0
    5980:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    5982:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    5984:	b963      	cbnz	r3, 59a0 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5986:	6848      	ldr	r0, [r1, #4]
    5988:	2101      	movs	r1, #1
    598a:	3008      	adds	r0, #8
    598c:	f00d fffe 	bl	1398c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5990:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5992:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5994:	781b      	ldrb	r3, [r3, #0]
    5996:	2b00      	cmp	r3, #0
    5998:	bf0c      	ite	eq
    599a:	2301      	moveq	r3, #1
    599c:	2302      	movne	r3, #2
    599e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    59a0:	68a3      	ldr	r3, [r4, #8]
    59a2:	781b      	ldrb	r3, [r3, #0]
    59a4:	2b01      	cmp	r3, #1
    59a6:	d003      	beq.n	59b0 <find_info_cb+0x36>
    59a8:	2b02      	cmp	r3, #2
    59aa:	d01a      	beq.n	59e2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    59ac:	2000      	movs	r0, #0
}
    59ae:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    59b0:	682b      	ldr	r3, [r5, #0]
    59b2:	781b      	ldrb	r3, [r3, #0]
    59b4:	2b00      	cmp	r3, #0
    59b6:	d1f9      	bne.n	59ac <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    59b8:	6860      	ldr	r0, [r4, #4]
    59ba:	2104      	movs	r1, #4
    59bc:	3008      	adds	r0, #8
    59be:	f00d ffe5 	bl	1398c <net_buf_simple_add>
    59c2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    59c4:	8a2b      	ldrh	r3, [r5, #16]
    59c6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    59c8:	682b      	ldr	r3, [r5, #0]
    59ca:	885b      	ldrh	r3, [r3, #2]
    59cc:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    59ce:	6863      	ldr	r3, [r4, #4]
    59d0:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    59d4:	899b      	ldrh	r3, [r3, #12]
    59d6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    59d8:	2804      	cmp	r0, #4
    59da:	bf94      	ite	ls
    59dc:	2000      	movls	r0, #0
    59de:	2001      	movhi	r0, #1
    59e0:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    59e2:	682b      	ldr	r3, [r5, #0]
    59e4:	781b      	ldrb	r3, [r3, #0]
    59e6:	2b02      	cmp	r3, #2
    59e8:	d1e0      	bne.n	59ac <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    59ea:	6860      	ldr	r0, [r4, #4]
    59ec:	2112      	movs	r1, #18
    59ee:	3008      	adds	r0, #8
    59f0:	f00d ffcc 	bl	1398c <net_buf_simple_add>
    59f4:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    59f6:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    59f8:	8a2b      	ldrh	r3, [r5, #16]
    59fa:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    59fe:	2210      	movs	r2, #16
    5a00:	3101      	adds	r1, #1
    5a02:	f7fc f8fb 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5a06:	6863      	ldr	r3, [r4, #4]
    5a08:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5a0c:	899b      	ldrh	r3, [r3, #12]
    5a0e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5a10:	2812      	cmp	r0, #18
    5a12:	e7e2      	b.n	59da <find_info_cb+0x60>

00005a14 <find_type_cb>:
{
    5a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5a18:	680e      	ldr	r6, [r1, #0]
{
    5a1a:	b088      	sub	sp, #32
    5a1c:	4605      	mov	r5, r0
    5a1e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5a20:	2700      	movs	r7, #0
    5a22:	f642 0301 	movw	r3, #10241	; 0x2801
    5a26:	a902      	add	r1, sp, #8
    5a28:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5a2a:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5a2e:	f88d 7008 	strb.w	r7, [sp, #8]
    5a32:	f8ad 300a 	strh.w	r3, [sp, #10]
    5a36:	f7fc fa5f 	bl	1ef8 <bt_uuid_cmp>
    5a3a:	b928      	cbnz	r0, 5a48 <find_type_cb+0x34>
		data->group = NULL;
    5a3c:	2300      	movs	r3, #0
    5a3e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    5a40:	2001      	movs	r0, #1
}
    5a42:	b008      	add	sp, #32
    5a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5a48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5a4c:	a903      	add	r1, sp, #12
    5a4e:	6828      	ldr	r0, [r5, #0]
    5a50:	f88d 700c 	strb.w	r7, [sp, #12]
    5a54:	f8ad 300e 	strh.w	r3, [sp, #14]
    5a58:	f7fc fa4e 	bl	1ef8 <bt_uuid_cmp>
    5a5c:	b140      	cbz	r0, 5a70 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    5a5e:	68a3      	ldr	r3, [r4, #8]
    5a60:	2b00      	cmp	r3, #0
    5a62:	d0ed      	beq.n	5a40 <find_type_cb+0x2c>
    5a64:	8a2a      	ldrh	r2, [r5, #16]
    5a66:	8859      	ldrh	r1, [r3, #2]
    5a68:	4291      	cmp	r1, r2
    5a6a:	d2e9      	bcs.n	5a40 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5a6c:	805a      	strh	r2, [r3, #2]
    5a6e:	e7e7      	b.n	5a40 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5a70:	6862      	ldr	r2, [r4, #4]
    5a72:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    5a76:	8992      	ldrh	r2, [r2, #12]
    5a78:	1a9b      	subs	r3, r3, r2
    5a7a:	2b03      	cmp	r3, #3
    5a7c:	d9e1      	bls.n	5a42 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5a7e:	2310      	movs	r3, #16
    5a80:	9000      	str	r0, [sp, #0]
    5a82:	eb0d 0203 	add.w	r2, sp, r3
    5a86:	686e      	ldr	r6, [r5, #4]
    5a88:	4629      	mov	r1, r5
    5a8a:	4640      	mov	r0, r8
    5a8c:	47b0      	blx	r6
	if (read < 0) {
    5a8e:	1e02      	subs	r2, r0, #0
    5a90:	dbd4      	blt.n	5a3c <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    5a92:	7c23      	ldrb	r3, [r4, #16]
    5a94:	429a      	cmp	r2, r3
    5a96:	d1d1      	bne.n	5a3c <find_type_cb+0x28>
    5a98:	a904      	add	r1, sp, #16
    5a9a:	68e0      	ldr	r0, [r4, #12]
    5a9c:	f7fc f899 	bl	1bd2 <memcmp>
    5aa0:	2800      	cmp	r0, #0
    5aa2:	d1cb      	bne.n	5a3c <find_type_cb+0x28>
	data->err = 0x00;
    5aa4:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5aa6:	6860      	ldr	r0, [r4, #4]
    5aa8:	2104      	movs	r1, #4
    5aaa:	3008      	adds	r0, #8
    5aac:	f00d ff6e 	bl	1398c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5ab0:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5ab2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5ab4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5ab6:	8043      	strh	r3, [r0, #2]
    5ab8:	e7c2      	b.n	5a40 <find_type_cb+0x2c>
	...

00005abc <bt_att_connected>:
{
    5abc:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5abe:	2317      	movs	r3, #23
{
    5ac0:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5ac2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5ac6:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5ac8:	4906      	ldr	r1, [pc, #24]	; (5ae4 <bt_att_connected+0x28>)
    5aca:	30a4      	adds	r0, #164	; 0xa4
    5acc:	f00f faaa 	bl	15024 <k_delayed_work_init>
	list->head = NULL;
    5ad0:	2300      	movs	r3, #0
    5ad2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    5ad6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    5ada:	6820      	ldr	r0, [r4, #0]
}
    5adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5ae0:	f001 bf5c 	b.w	799c <bt_gatt_connected>
    5ae4:	00006009 	.word	0x00006009

00005ae8 <check_perm.isra.4>:
	if ((mask & BT_GATT_PERM_READ) &&
    5ae8:	f011 0f01 	tst.w	r1, #1
    5aec:	7c83      	ldrb	r3, [r0, #18]
    5aee:	d004      	beq.n	5afa <check_perm.isra.4+0x12>
    5af0:	f013 0f15 	tst.w	r3, #21
    5af4:	d012      	beq.n	5b1c <check_perm.isra.4+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5af6:	6842      	ldr	r2, [r0, #4]
    5af8:	b182      	cbz	r2, 5b1c <check_perm.isra.4+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    5afa:	078a      	lsls	r2, r1, #30
    5afc:	d504      	bpl.n	5b08 <check_perm.isra.4+0x20>
    5afe:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    5b02:	d00d      	beq.n	5b20 <check_perm.isra.4+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5b04:	6882      	ldr	r2, [r0, #8]
    5b06:	b15a      	cbz	r2, 5b20 <check_perm.isra.4+0x38>
	mask &= attr->perm;
    5b08:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5b0a:	f011 0f30 	tst.w	r1, #48	; 0x30
    5b0e:	d109      	bne.n	5b24 <check_perm.isra.4+0x3c>
	return 0;
    5b10:	f011 0f0c 	tst.w	r1, #12
    5b14:	bf14      	ite	ne
    5b16:	200f      	movne	r0, #15
    5b18:	2000      	moveq	r0, #0
    5b1a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5b1c:	2002      	movs	r0, #2
    5b1e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    5b20:	2003      	movs	r0, #3
    5b22:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5b24:	2005      	movs	r0, #5
}
    5b26:	4770      	bx	lr

00005b28 <read_type_cb>:
{
    5b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5b2c:	680f      	ldr	r7, [r1, #0]
{
    5b2e:	4606      	mov	r6, r0
    5b30:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5b32:	6800      	ldr	r0, [r0, #0]
    5b34:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    5b36:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5b3a:	f7fc f9dd 	bl	1ef8 <bt_uuid_cmp>
    5b3e:	4680      	mov	r8, r0
    5b40:	2800      	cmp	r0, #0
    5b42:	d14d      	bne.n	5be0 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5b44:	2115      	movs	r1, #21
    5b46:	4630      	mov	r0, r6
    5b48:	f7ff ffce 	bl	5ae8 <check_perm.isra.4>
    5b4c:	4605      	mov	r5, r0
    5b4e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5b50:	b148      	cbz	r0, 5b66 <read_type_cb+0x3e>
		if (data->rsp->len) {
    5b52:	68e3      	ldr	r3, [r4, #12]
    5b54:	781d      	ldrb	r5, [r3, #0]
    5b56:	b115      	cbz	r5, 5b5e <read_type_cb+0x36>
			data->err = 0x00;
    5b58:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5b5c:	4645      	mov	r5, r8
}
    5b5e:	4628      	mov	r0, r5
    5b60:	b003      	add	sp, #12
    5b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5b66:	68a0      	ldr	r0, [r4, #8]
    5b68:	2102      	movs	r1, #2
    5b6a:	3008      	adds	r0, #8
    5b6c:	f00d ff0e 	bl	1398c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5b70:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5b72:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5b74:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5b76:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5b78:	898a      	ldrh	r2, [r1, #12]
    5b7a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    5b7e:	6889      	ldr	r1, [r1, #8]
    5b80:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5b84:	9500      	str	r5, [sp, #0]
    5b86:	1a9b      	subs	r3, r3, r2
    5b88:	b29b      	uxth	r3, r3
    5b8a:	440a      	add	r2, r1
    5b8c:	4648      	mov	r0, r9
    5b8e:	4631      	mov	r1, r6
    5b90:	47c0      	blx	r8
	if (read < 0) {
    5b92:	1e01      	subs	r1, r0, #0
    5b94:	da08      	bge.n	5ba8 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    5b96:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5b9a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5b9c:	bf9a      	itte	ls
    5b9e:	4249      	negls	r1, r1
    5ba0:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5ba2:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5ba4:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    5ba6:	e7da      	b.n	5b5e <read_type_cb+0x36>
	if (!data->rsp->len) {
    5ba8:	68e0      	ldr	r0, [r4, #12]
    5baa:	7802      	ldrb	r2, [r0, #0]
    5bac:	1c8b      	adds	r3, r1, #2
    5bae:	b982      	cbnz	r2, 5bd2 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5bb0:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5bb2:	68a0      	ldr	r0, [r4, #8]
    5bb4:	3008      	adds	r0, #8
    5bb6:	f00d fee9 	bl	1398c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5bba:	68a3      	ldr	r3, [r4, #8]
    5bbc:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    5bc0:	899b      	ldrh	r3, [r3, #12]
    5bc2:	1aed      	subs	r5, r5, r3
    5bc4:	68e3      	ldr	r3, [r4, #12]
    5bc6:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5bc8:	429d      	cmp	r5, r3
    5bca:	bfd4      	ite	le
    5bcc:	2500      	movle	r5, #0
    5bce:	2501      	movgt	r5, #1
    5bd0:	e7c5      	b.n	5b5e <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    5bd2:	429a      	cmp	r2, r3
    5bd4:	d0ed      	beq.n	5bb2 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    5bd6:	68a2      	ldr	r2, [r4, #8]
    5bd8:	8993      	ldrh	r3, [r2, #12]
    5bda:	3b02      	subs	r3, #2
    5bdc:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5bde:	e7be      	b.n	5b5e <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5be0:	2501      	movs	r5, #1
    5be2:	e7bc      	b.n	5b5e <read_type_cb+0x36>

00005be4 <uuid_create>:
{
    5be4:	b510      	push	{r4, lr}
	switch (buf->len) {
    5be6:	898a      	ldrh	r2, [r1, #12]
    5be8:	2a02      	cmp	r2, #2
{
    5bea:	4604      	mov	r4, r0
	switch (buf->len) {
    5bec:	d003      	beq.n	5bf6 <uuid_create+0x12>
    5bee:	2a10      	cmp	r2, #16
    5bf0:	d00a      	beq.n	5c08 <uuid_create+0x24>
	return false;
    5bf2:	2000      	movs	r0, #0
}
    5bf4:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    5bf6:	2300      	movs	r3, #0
    5bf8:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5bfa:	f101 0008 	add.w	r0, r1, #8
    5bfe:	f00d ff03 	bl	13a08 <net_buf_simple_pull_le16>
    5c02:	8060      	strh	r0, [r4, #2]
		return true;
    5c04:	2001      	movs	r0, #1
    5c06:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    5c08:	2302      	movs	r3, #2
    5c0a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5c0e:	6889      	ldr	r1, [r1, #8]
    5c10:	f7fb fff4 	bl	1bfc <memcpy>
    5c14:	e7f6      	b.n	5c04 <uuid_create+0x20>
	...

00005c18 <att_req_sent>:
{
    5c18:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5c1a:	2104      	movs	r1, #4
    5c1c:	f7ff fd4c 	bl	56b8 <bt_l2cap_le_lookup_tx_cid>
    5c20:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5c22:	30cc      	adds	r0, #204	; 0xcc
    5c24:	f00e ff17 	bl	14a56 <_impl_k_sem_give>
	if (att->req) {
    5c28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5c2c:	b143      	cbz	r3, 5c40 <att_req_sent+0x28>
    5c2e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    5c32:	f247 5230 	movw	r2, #30000	; 0x7530
    5c36:	4803      	ldr	r0, [pc, #12]	; (5c44 <att_req_sent+0x2c>)
}
    5c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c3c:	f00f ba66 	b.w	1510c <k_delayed_work_submit_to_queue>
    5c40:	bd10      	pop	{r4, pc}
    5c42:	bf00      	nop
    5c44:	200019b8 	.word	0x200019b8

00005c48 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5c48:	6803      	ldr	r3, [r0, #0]
    5c4a:	7a5b      	ldrb	r3, [r3, #9]
    5c4c:	2b03      	cmp	r3, #3
    5c4e:	d10a      	bne.n	5c66 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c50:	f3bf 8f5b 	dmb	ish
    5c54:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    5c58:	f3bf 8f5b 	dmb	ish
    5c5c:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5c60:	f000 0001 	and.w	r0, r0, #1
    5c64:	4770      	bx	lr
    5c66:	2001      	movs	r0, #1
}
    5c68:	4770      	bx	lr

00005c6a <att_prepare_write_req>:
    5c6a:	2006      	movs	r0, #6
    5c6c:	4770      	bx	lr

00005c6e <att_pdu_sent>:
{
    5c6e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5c70:	2104      	movs	r1, #4
    5c72:	f7ff fd21 	bl	56b8 <bt_l2cap_le_lookup_tx_cid>
}
    5c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5c7a:	30cc      	adds	r0, #204	; 0xcc
    5c7c:	f00e beeb 	b.w	14a56 <_impl_k_sem_give>

00005c80 <att_rsp_sent>:
{
    5c80:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5c82:	2104      	movs	r1, #4
    5c84:	f7ff fd18 	bl	56b8 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5c88:	f3bf 8f5b 	dmb	ish
    5c8c:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5c90:	e853 2f00 	ldrex	r2, [r3]
    5c94:	f022 0201 	bic.w	r2, r2, #1
    5c98:	e843 2100 	strex	r1, r2, [r3]
    5c9c:	2900      	cmp	r1, #0
    5c9e:	d1f7      	bne.n	5c90 <att_rsp_sent+0x10>
    5ca0:	f3bf 8f5b 	dmb	ish
    5ca4:	30cc      	adds	r0, #204	; 0xcc
}
    5ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5caa:	f00e bed4 	b.w	14a56 <_impl_k_sem_give>

00005cae <att_cfm_sent>:
{
    5cae:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5cb0:	2104      	movs	r1, #4
    5cb2:	f7ff fd01 	bl	56b8 <bt_l2cap_le_lookup_tx_cid>
    5cb6:	f3bf 8f5b 	dmb	ish
    5cba:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5cbe:	e853 2f00 	ldrex	r2, [r3]
    5cc2:	f022 0202 	bic.w	r2, r2, #2
    5cc6:	e843 2100 	strex	r1, r2, [r3]
    5cca:	2900      	cmp	r1, #0
    5ccc:	d1f7      	bne.n	5cbe <att_cfm_sent+0x10>
    5cce:	f3bf 8f5b 	dmb	ish
    5cd2:	30cc      	adds	r0, #204	; 0xcc
}
    5cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5cd8:	f00e bebd 	b.w	14a56 <_impl_k_sem_give>

00005cdc <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5cdc:	7a43      	ldrb	r3, [r0, #9]
    5cde:	2b03      	cmp	r3, #3
{
    5ce0:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5ce2:	d00b      	beq.n	5cfc <att_chan_get+0x20>
		BT_WARN("Not connected");
    5ce4:	4b15      	ldr	r3, [pc, #84]	; (5d3c <att_chan_get+0x60>)
    5ce6:	9301      	str	r3, [sp, #4]
    5ce8:	9300      	str	r3, [sp, #0]
    5cea:	4a15      	ldr	r2, [pc, #84]	; (5d40 <att_chan_get+0x64>)
    5cec:	4b15      	ldr	r3, [pc, #84]	; (5d44 <att_chan_get+0x68>)
    5cee:	4916      	ldr	r1, [pc, #88]	; (5d48 <att_chan_get+0x6c>)
    5cf0:	4816      	ldr	r0, [pc, #88]	; (5d4c <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    5cf2:	f7fb f94b 	bl	f8c <printk>
		return NULL;
    5cf6:	2000      	movs	r0, #0
}
    5cf8:	b002      	add	sp, #8
    5cfa:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5cfc:	2104      	movs	r1, #4
    5cfe:	f7ff fceb 	bl	56d8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5d02:	4604      	mov	r4, r0
    5d04:	b950      	cbnz	r0, 5d1c <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    5d06:	4b0d      	ldr	r3, [pc, #52]	; (5d3c <att_chan_get+0x60>)
    5d08:	9301      	str	r3, [sp, #4]
    5d0a:	9300      	str	r3, [sp, #0]
    5d0c:	4a10      	ldr	r2, [pc, #64]	; (5d50 <att_chan_get+0x74>)
    5d0e:	4b0d      	ldr	r3, [pc, #52]	; (5d44 <att_chan_get+0x68>)
    5d10:	490d      	ldr	r1, [pc, #52]	; (5d48 <att_chan_get+0x6c>)
    5d12:	4810      	ldr	r0, [pc, #64]	; (5d54 <att_chan_get+0x78>)
    5d14:	f7fb f93a 	bl	f8c <printk>
    5d18:	4620      	mov	r0, r4
    5d1a:	e7ed      	b.n	5cf8 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d1c:	f3bf 8f5b 	dmb	ish
    5d20:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5d24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5d28:	075b      	lsls	r3, r3, #29
    5d2a:	d5f5      	bpl.n	5d18 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    5d2c:	4b03      	ldr	r3, [pc, #12]	; (5d3c <att_chan_get+0x60>)
    5d2e:	9301      	str	r3, [sp, #4]
    5d30:	9300      	str	r3, [sp, #0]
    5d32:	4a03      	ldr	r2, [pc, #12]	; (5d40 <att_chan_get+0x64>)
    5d34:	4b03      	ldr	r3, [pc, #12]	; (5d44 <att_chan_get+0x68>)
    5d36:	4904      	ldr	r1, [pc, #16]	; (5d48 <att_chan_get+0x6c>)
    5d38:	4807      	ldr	r0, [pc, #28]	; (5d58 <att_chan_get+0x7c>)
    5d3a:	e7da      	b.n	5cf2 <att_chan_get+0x16>
    5d3c:	000155c5 	.word	0x000155c5
    5d40:	00016a28 	.word	0x00016a28
    5d44:	00017619 	.word	0x00017619
    5d48:	000169ed 	.word	0x000169ed
    5d4c:	0001765e 	.word	0x0001765e
    5d50:	0001699e 	.word	0x0001699e
    5d54:	0001767c 	.word	0x0001767c
    5d58:	000176a7 	.word	0x000176a7

00005d5c <write_cb>:
{
    5d5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5d60:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5d62:	f8d1 8000 	ldr.w	r8, [r1]
    5d66:	212a      	movs	r1, #42	; 0x2a
{
    5d68:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5d6a:	f7ff febd 	bl	5ae8 <check_perm.isra.4>
    5d6e:	4605      	mov	r5, r0
    5d70:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5d72:	b9e0      	cbnz	r0, 5dae <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5d74:	8a62      	ldrh	r2, [r4, #18]
    5d76:	9001      	str	r0, [sp, #4]
    5d78:	9200      	str	r2, [sp, #0]
    5d7a:	7c23      	ldrb	r3, [r4, #16]
    5d7c:	68b7      	ldr	r7, [r6, #8]
    5d7e:	68e2      	ldr	r2, [r4, #12]
    5d80:	4631      	mov	r1, r6
    5d82:	4640      	mov	r0, r8
    5d84:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    5d86:	2800      	cmp	r0, #0
    5d88:	db02      	blt.n	5d90 <write_cb+0x34>
    5d8a:	7c23      	ldrb	r3, [r4, #16]
    5d8c:	4298      	cmp	r0, r3
    5d8e:	d00b      	beq.n	5da8 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5d90:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5d94:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5d96:	bf9a      	itte	ls
    5d98:	4240      	negls	r0, r0
    5d9a:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5d9c:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5d9e:	7520      	strb	r0, [r4, #20]
}
    5da0:	4628      	mov	r0, r5
    5da2:	b002      	add	sp, #8
    5da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5da8:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5daa:	2501      	movs	r5, #1
    5dac:	e7f8      	b.n	5da0 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5dae:	2500      	movs	r5, #0
    5db0:	e7f6      	b.n	5da0 <write_cb+0x44>
	...

00005db4 <att_send_req>:
{
    5db4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5db6:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    5db8:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    5dbc:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    5dc0:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5dc2:	4630      	mov	r0, r6
    5dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5dc8:	f00e fe6d 	bl	14aa6 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5dcc:	4628      	mov	r0, r5
    5dce:	f7ff ff3b 	bl	5c48 <att_is_connected>
    5dd2:	b978      	cbnz	r0, 5df4 <att_send_req+0x40>
		BT_WARN("Disconnected");
    5dd4:	4b18      	ldr	r3, [pc, #96]	; (5e38 <att_send_req+0x84>)
    5dd6:	9301      	str	r3, [sp, #4]
    5dd8:	9300      	str	r3, [sp, #0]
    5dda:	4a18      	ldr	r2, [pc, #96]	; (5e3c <att_send_req+0x88>)
    5ddc:	4b18      	ldr	r3, [pc, #96]	; (5e40 <att_send_req+0x8c>)
    5dde:	4919      	ldr	r1, [pc, #100]	; (5e44 <att_send_req+0x90>)
    5de0:	4819      	ldr	r0, [pc, #100]	; (5e48 <att_send_req+0x94>)
    5de2:	f7fb f8d3 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5de6:	4630      	mov	r0, r6
    5de8:	f00e fe35 	bl	14a56 <_impl_k_sem_give>
		return -ENOTCONN;
    5dec:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5df0:	b002      	add	sp, #8
    5df2:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    5df4:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    5df6:	f106 0008 	add.w	r0, r6, #8
    5dfa:	f00d fe0d 	bl	13a18 <net_buf_simple_headroom>
	state->len = buf->len;
    5dfe:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    5e00:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    5e02:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5e04:	6920      	ldr	r0, [r4, #16]
    5e06:	682d      	ldr	r5, [r5, #0]
    5e08:	f00d fdbc 	bl	13984 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    5e0c:	6923      	ldr	r3, [r4, #16]
    5e0e:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5e10:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    5e12:	7818      	ldrb	r0, [r3, #0]
    5e14:	f7ff fce0 	bl	57d8 <att_op_get_type>
    5e18:	3801      	subs	r0, #1
    5e1a:	b2c0      	uxtb	r0, r0
    5e1c:	2804      	cmp	r0, #4
    5e1e:	bf96      	itet	ls
    5e20:	4b0a      	ldrls	r3, [pc, #40]	; (5e4c <att_send_req+0x98>)
    5e22:	4b0b      	ldrhi	r3, [pc, #44]	; (5e50 <att_send_req+0x9c>)
    5e24:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5e28:	4632      	mov	r2, r6
    5e2a:	4628      	mov	r0, r5
    5e2c:	2104      	movs	r1, #4
    5e2e:	f7ff fb57 	bl	54e0 <bt_l2cap_send_cb>
	return 0;
    5e32:	2000      	movs	r0, #0
    5e34:	e7dc      	b.n	5df0 <att_send_req+0x3c>
    5e36:	bf00      	nop
    5e38:	000155c5 	.word	0x000155c5
    5e3c:	00016a28 	.word	0x00016a28
    5e40:	000175dc 	.word	0x000175dc
    5e44:	000169ed 	.word	0x000169ed
    5e48:	00017702 	.word	0x00017702
    5e4c:	000175c8 	.word	0x000175c8
    5e50:	00005c6f 	.word	0x00005c6f

00005e54 <att_handle_rsp>:
{
    5e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5e58:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5e5a:	30a4      	adds	r0, #164	; 0xa4
{
    5e5c:	461e      	mov	r6, r3
    5e5e:	460f      	mov	r7, r1
    5e60:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    5e62:	f00f f8ef 	bl	15044 <k_delayed_work_cancel>
	if (!att->req) {
    5e66:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5e6a:	b9db      	cbnz	r3, 5ea4 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    5e6c:	4b1c      	ldr	r3, [pc, #112]	; (5ee0 <att_handle_rsp+0x8c>)
    5e6e:	9301      	str	r3, [sp, #4]
    5e70:	9300      	str	r3, [sp, #0]
    5e72:	4a1c      	ldr	r2, [pc, #112]	; (5ee4 <att_handle_rsp+0x90>)
    5e74:	4b1c      	ldr	r3, [pc, #112]	; (5ee8 <att_handle_rsp+0x94>)
    5e76:	491d      	ldr	r1, [pc, #116]	; (5eec <att_handle_rsp+0x98>)
    5e78:	481d      	ldr	r0, [pc, #116]	; (5ef0 <att_handle_rsp+0x9c>)
    5e7a:	f7fb f887 	bl	f8c <printk>
    5e7e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    5e82:	b159      	cbz	r1, 5e9c <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5e84:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    5e88:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5e8a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5e8e:	4291      	cmp	r1, r2
	list->tail = node;
    5e90:	bf08      	it	eq
    5e92:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    5e96:	4620      	mov	r0, r4
    5e98:	f7ff ff8c 	bl	5db4 <att_send_req>
}
    5e9c:	2000      	movs	r0, #0
    5e9e:	b003      	add	sp, #12
    5ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    5ea4:	6918      	ldr	r0, [r3, #16]
    5ea6:	b128      	cbz	r0, 5eb4 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    5ea8:	f00d fd3e 	bl	13928 <net_buf_unref>
		att->req->buf = NULL;
    5eac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5eb0:	2200      	movs	r2, #0
    5eb2:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    5eb4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5eb8:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    5eba:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5ebe:	2500      	movs	r5, #0
    5ec0:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5ec2:	463a      	mov	r2, r7
    5ec4:	9300      	str	r3, [sp, #0]
    5ec6:	4631      	mov	r1, r6
    5ec8:	4643      	mov	r3, r8
    5eca:	47c8      	blx	r9
	if (!att->req->func) {
    5ecc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5ed0:	6843      	ldr	r3, [r0, #4]
    5ed2:	b90b      	cbnz	r3, 5ed8 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    5ed4:	f7ff fcca 	bl	586c <att_req_destroy>
	att->req = NULL;
    5ed8:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    5edc:	e7cf      	b.n	5e7e <att_handle_rsp+0x2a>
    5ede:	bf00      	nop
    5ee0:	000155c5 	.word	0x000155c5
    5ee4:	00016a28 	.word	0x00016a28
    5ee8:	000175e9 	.word	0x000175e9
    5eec:	000169ed 	.word	0x000169ed
    5ef0:	000176db 	.word	0x000176db

00005ef4 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    5ef4:	898a      	ldrh	r2, [r1, #12]
    5ef6:	6889      	ldr	r1, [r1, #8]
    5ef8:	2300      	movs	r3, #0
    5efa:	f7ff bfab 	b.w	5e54 <att_handle_rsp>

00005efe <att_handle_exec_write_rsp>:
    5efe:	f7ff bff9 	b.w	5ef4 <att_confirm>

00005f02 <att_handle_prepare_write_rsp>:
    5f02:	f7ff bff7 	b.w	5ef4 <att_confirm>

00005f06 <att_handle_write_rsp>:
    5f06:	f7ff bff5 	b.w	5ef4 <att_confirm>

00005f0a <att_handle_read_mult_rsp>:
    5f0a:	f7ff bff3 	b.w	5ef4 <att_confirm>

00005f0e <att_handle_read_blob_rsp>:
    5f0e:	f7ff bff1 	b.w	5ef4 <att_confirm>

00005f12 <att_handle_read_rsp>:
    5f12:	f7ff bfef 	b.w	5ef4 <att_confirm>

00005f16 <att_handle_read_type_rsp>:
    5f16:	f7ff bfed 	b.w	5ef4 <att_confirm>

00005f1a <att_handle_find_type_rsp>:
    5f1a:	f7ff bfeb 	b.w	5ef4 <att_confirm>

00005f1e <att_handle_find_info_rsp>:
    5f1e:	f7ff bfe9 	b.w	5ef4 <att_confirm>

00005f22 <att_mtu_rsp>:
{
    5f22:	b410      	push	{r4}
    5f24:	460a      	mov	r2, r1
	if (!att) {
    5f26:	4603      	mov	r3, r0
    5f28:	b180      	cbz	r0, 5f4c <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    5f2a:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5f2c:	880c      	ldrh	r4, [r1, #0]
    5f2e:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5f30:	bf83      	ittte	hi
    5f32:	2417      	movhi	r4, #23
    5f34:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5f36:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5f3a:	2200      	movls	r2, #0
    5f3c:	bf99      	ittee	ls
    5f3e:	2304      	movls	r3, #4
    5f40:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    5f42:	2300      	movhi	r3, #0
    5f44:	8992      	ldrhhi	r2, [r2, #12]
}
    5f46:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5f48:	f7ff bf84 	b.w	5e54 <att_handle_rsp>
}
    5f4c:	bc10      	pop	{r4}
    5f4e:	4770      	bx	lr

00005f50 <att_error_rsp>:
{
    5f50:	b430      	push	{r4, r5}
	if (!att->req) {
    5f52:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    5f56:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5f58:	b16a      	cbz	r2, 5f76 <att_error_rsp+0x26>
	if (att->req->buf) {
    5f5a:	6913      	ldr	r3, [r2, #16]
    5f5c:	b12b      	cbz	r3, 5f6a <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    5f5e:	8995      	ldrh	r5, [r2, #12]
    5f60:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    5f62:	89d2      	ldrh	r2, [r2, #14]
    5f64:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    5f66:	4429      	add	r1, r5
    5f68:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5f6a:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5f6c:	2200      	movs	r2, #0
    5f6e:	4611      	mov	r1, r2
}
    5f70:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    5f72:	f7ff bf6f 	b.w	5e54 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    5f76:	230e      	movs	r3, #14
    5f78:	e7f8      	b.n	5f6c <att_error_rsp+0x1c>

00005f7a <att_reset>:
{
    5f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5f7c:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5f80:	4605      	mov	r5, r0
    5f82:	f3bf 8f5b 	dmb	ish
    5f86:	e853 2f00 	ldrex	r2, [r3]
    5f8a:	f042 0204 	orr.w	r2, r2, #4
    5f8e:	e843 2100 	strex	r1, r2, [r3]
    5f92:	2900      	cmp	r1, #0
    5f94:	d1f7      	bne.n	5f86 <att_reset+0xc>
    5f96:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5f9a:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    5f9e:	4620      	mov	r0, r4
    5fa0:	f00e fd59 	bl	14a56 <_impl_k_sem_give>
    5fa4:	4620      	mov	r0, r4
    5fa6:	f00e fd56 	bl	14a56 <_impl_k_sem_give>
    5faa:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5fae:	b98c      	cbnz	r4, 5fd4 <att_reset+0x5a>
	if (!att->req) {
    5fb0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    5fb4:	2200      	movs	r2, #0
    5fb6:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    5fba:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    5fbe:	b90b      	cbnz	r3, 5fc4 <att_reset+0x4a>
}
    5fc0:	b003      	add	sp, #12
    5fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5fc4:	230e      	movs	r3, #14
    5fc6:	4611      	mov	r1, r2
    5fc8:	4628      	mov	r0, r5
}
    5fca:	b003      	add	sp, #12
    5fcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5fd0:	f7ff bf40 	b.w	5e54 <att_handle_rsp>
	return node->next;
    5fd4:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    5fd6:	6867      	ldr	r7, [r4, #4]
    5fd8:	b12f      	cbz	r7, 5fe6 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5fda:	2300      	movs	r3, #0
    5fdc:	9400      	str	r4, [sp, #0]
    5fde:	461a      	mov	r2, r3
    5fe0:	210e      	movs	r1, #14
    5fe2:	4618      	mov	r0, r3
    5fe4:	47b8      	blx	r7
		att_req_destroy(req);
    5fe6:	4620      	mov	r0, r4
    5fe8:	f7ff fc40 	bl	586c <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5fec:	2e00      	cmp	r6, #0
    5fee:	d0df      	beq.n	5fb0 <att_reset+0x36>
    5ff0:	4634      	mov	r4, r6
    5ff2:	6836      	ldr	r6, [r6, #0]
    5ff4:	e7ef      	b.n	5fd6 <att_reset+0x5c>

00005ff6 <bt_att_disconnected>:
{
    5ff6:	b510      	push	{r4, lr}
    5ff8:	4604      	mov	r4, r0
	att_reset(att);
    5ffa:	f7ff ffbe 	bl	5f7a <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5ffe:	6820      	ldr	r0, [r4, #0]
}
    6000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    6004:	f001 bd04 	b.w	7a10 <bt_gatt_disconnected>

00006008 <att_timeout>:
{
    6008:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    600a:	4b0b      	ldr	r3, [pc, #44]	; (6038 <att_timeout+0x30>)
    600c:	4a0b      	ldr	r2, [pc, #44]	; (603c <att_timeout+0x34>)
    600e:	490c      	ldr	r1, [pc, #48]	; (6040 <att_timeout+0x38>)
    6010:	9301      	str	r3, [sp, #4]
{
    6012:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    6014:	9300      	str	r3, [sp, #0]
    6016:	480b      	ldr	r0, [pc, #44]	; (6044 <att_timeout+0x3c>)
    6018:	4b0b      	ldr	r3, [pc, #44]	; (6048 <att_timeout+0x40>)
    601a:	f7fa ffb7 	bl	f8c <printk>
	att_reset(att);
    601e:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    6022:	f7ff ffaa 	bl	5f7a <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    6026:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    602a:	f001 fcf1 	bl	7a10 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    602e:	2300      	movs	r3, #0
    6030:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    6034:	b002      	add	sp, #8
    6036:	bd10      	pop	{r4, pc}
    6038:	000155c5 	.word	0x000155c5
    603c:	0001699e 	.word	0x0001699e
    6040:	000169ed 	.word	0x000169ed
    6044:	00017744 	.word	0x00017744
    6048:	00017638 	.word	0x00017638

0000604c <read_cb>:
{
    604c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6050:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6052:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    6054:	f8d1 9000 	ldr.w	r9, [r1]
{
    6058:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    605a:	3008      	adds	r0, #8
    605c:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    605e:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6062:	f00d fc93 	bl	1398c <net_buf_simple_add>
	data->err = 0x00;
    6066:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6068:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    606a:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    606c:	2115      	movs	r1, #21
    606e:	4630      	mov	r0, r6
    6070:	f7ff fd3a 	bl	5ae8 <check_perm.isra.4>
    6074:	4605      	mov	r5, r0
    6076:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    6078:	bb08      	cbnz	r0, 60be <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    607a:	68a1      	ldr	r1, [r4, #8]
    607c:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    6080:	898a      	ldrh	r2, [r1, #12]
    6082:	6889      	ldr	r1, [r1, #8]
    6084:	88a0      	ldrh	r0, [r4, #4]
    6086:	9000      	str	r0, [sp, #0]
    6088:	1a9b      	subs	r3, r3, r2
    608a:	6877      	ldr	r7, [r6, #4]
    608c:	440a      	add	r2, r1
    608e:	b29b      	uxth	r3, r3
    6090:	4631      	mov	r1, r6
    6092:	4640      	mov	r0, r8
    6094:	47b8      	blx	r7
	if (read < 0) {
    6096:	1e01      	subs	r1, r0, #0
    6098:	da0b      	bge.n	60b2 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    609a:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    609e:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    60a0:	bf9a      	itte	ls
    60a2:	4249      	negls	r1, r1
    60a4:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    60a6:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    60a8:	7421      	strb	r1, [r4, #16]
}
    60aa:	4628      	mov	r0, r5
    60ac:	b003      	add	sp, #12
    60ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    60b2:	68a0      	ldr	r0, [r4, #8]
    60b4:	3008      	adds	r0, #8
    60b6:	f00d fc69 	bl	1398c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    60ba:	2501      	movs	r5, #1
    60bc:	e7f5      	b.n	60aa <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    60be:	463d      	mov	r5, r7
    60c0:	e7f3      	b.n	60aa <read_cb+0x5e>
	...

000060c4 <bt_att_create_pdu>:
{
    60c4:	b530      	push	{r4, r5, lr}
    60c6:	b085      	sub	sp, #20
    60c8:	460d      	mov	r5, r1
    60ca:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    60cc:	f7ff fe06 	bl	5cdc <att_chan_get>
	if (!att) {
    60d0:	b1f0      	cbz	r0, 6110 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    60d2:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    60d6:	3401      	adds	r4, #1
    60d8:	428c      	cmp	r4, r1
    60da:	d90e      	bls.n	60fa <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    60dc:	4b0d      	ldr	r3, [pc, #52]	; (6114 <bt_att_create_pdu+0x50>)
    60de:	9303      	str	r3, [sp, #12]
    60e0:	9402      	str	r4, [sp, #8]
    60e2:	9101      	str	r1, [sp, #4]
    60e4:	9300      	str	r3, [sp, #0]
    60e6:	4a0c      	ldr	r2, [pc, #48]	; (6118 <bt_att_create_pdu+0x54>)
    60e8:	4b0c      	ldr	r3, [pc, #48]	; (611c <bt_att_create_pdu+0x58>)
    60ea:	490d      	ldr	r1, [pc, #52]	; (6120 <bt_att_create_pdu+0x5c>)
    60ec:	480d      	ldr	r0, [pc, #52]	; (6124 <bt_att_create_pdu+0x60>)
    60ee:	f7fa ff4d 	bl	f8c <printk>
		return NULL;
    60f2:	2400      	movs	r4, #0
}
    60f4:	4620      	mov	r0, r4
    60f6:	b005      	add	sp, #20
    60f8:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    60fa:	2100      	movs	r1, #0
    60fc:	4608      	mov	r0, r1
    60fe:	f7ff f9ec 	bl	54da <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6102:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    6104:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6106:	3008      	adds	r0, #8
    6108:	f00d fc40 	bl	1398c <net_buf_simple_add>
	hdr->code = op;
    610c:	7005      	strb	r5, [r0, #0]
	return buf;
    610e:	e7f1      	b.n	60f4 <bt_att_create_pdu+0x30>
		return NULL;
    6110:	4604      	mov	r4, r0
    6112:	e7ef      	b.n	60f4 <bt_att_create_pdu+0x30>
    6114:	000155c5 	.word	0x000155c5
    6118:	00016a28 	.word	0x00016a28
    611c:	00017626 	.word	0x00017626
    6120:	000169ed 	.word	0x000169ed
    6124:	00017795 	.word	0x00017795

00006128 <att_indicate>:
{
    6128:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    612a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    612c:	f101 0008 	add.w	r0, r1, #8
{
    6130:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    6132:	f00d fc69 	bl	13a08 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    6136:	89ab      	ldrh	r3, [r5, #12]
    6138:	68aa      	ldr	r2, [r5, #8]
    613a:	4601      	mov	r1, r0
    613c:	4620      	mov	r0, r4
    613e:	f001 fbe1 	bl	7904 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    6142:	2200      	movs	r2, #0
    6144:	211e      	movs	r1, #30
    6146:	4620      	mov	r0, r4
    6148:	f7ff ffbc 	bl	60c4 <bt_att_create_pdu>
	if (!buf) {
    614c:	4602      	mov	r2, r0
    614e:	b120      	cbz	r0, 615a <att_indicate+0x32>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    6150:	4b03      	ldr	r3, [pc, #12]	; (6160 <att_indicate+0x38>)
    6152:	2104      	movs	r1, #4
    6154:	4620      	mov	r0, r4
    6156:	f7ff f9c3 	bl	54e0 <bt_l2cap_send_cb>
}
    615a:	2000      	movs	r0, #0
    615c:	bd38      	pop	{r3, r4, r5, pc}
    615e:	bf00      	nop
    6160:	00005caf 	.word	0x00005caf

00006164 <att_mtu_req>:
{
    6164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    6168:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    616a:	881b      	ldrh	r3, [r3, #0]
    616c:	2b16      	cmp	r3, #22
{
    616e:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6170:	d91c      	bls.n	61ac <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    6172:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    6176:	2202      	movs	r2, #2
    6178:	2103      	movs	r1, #3
    617a:	4640      	mov	r0, r8
    617c:	f7ff ffa2 	bl	60c4 <bt_att_create_pdu>
	if (!pdu) {
    6180:	4607      	mov	r7, r0
    6182:	b1b0      	cbz	r0, 61b2 <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    6184:	2102      	movs	r1, #2
    6186:	3008      	adds	r0, #8
    6188:	f00d fc00 	bl	1398c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    618c:	2617      	movs	r6, #23
    618e:	2400      	movs	r4, #0
    6190:	7006      	strb	r6, [r0, #0]
    6192:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    6194:	4b08      	ldr	r3, [pc, #32]	; (61b8 <att_mtu_req+0x54>)
    6196:	4640      	mov	r0, r8
    6198:	463a      	mov	r2, r7
    619a:	2104      	movs	r1, #4
    619c:	f7ff f9a0 	bl	54e0 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    61a0:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    61a2:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    61a6:	4620      	mov	r0, r4
    61a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    61ac:	2004      	movs	r0, #4
    61ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    61b2:	200e      	movs	r0, #14
}
    61b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61b8:	00005c81 	.word	0x00005c81

000061bc <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    61bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61c0:	4688      	mov	r8, r1
    61c2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    61c4:	2101      	movs	r1, #1
    61c6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    61c8:	4605      	mov	r5, r0
    61ca:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    61cc:	f7ff ff7a 	bl	60c4 <bt_att_create_pdu>
	if (!buf) {
    61d0:	4604      	mov	r4, r0
    61d2:	b180      	cbz	r0, 61f6 <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    61d4:	2104      	movs	r1, #4
    61d6:	3008      	adds	r0, #8
    61d8:	f00d fbd8 	bl	1398c <net_buf_simple_add>
	rsp->request = req;
    61dc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    61e0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    61e2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    61e6:	4622      	mov	r2, r4
    61e8:	4628      	mov	r0, r5
    61ea:	4b04      	ldr	r3, [pc, #16]	; (61fc <send_err_rsp.part.10+0x40>)
    61ec:	2104      	movs	r1, #4
}
    61ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    61f2:	f7ff b975 	b.w	54e0 <bt_l2cap_send_cb>
    61f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61fa:	bf00      	nop
    61fc:	00005c81 	.word	0x00005c81

00006200 <bt_att_recv>:
{
    6200:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    6202:	898b      	ldrh	r3, [r1, #12]
{
    6204:	b085      	sub	sp, #20
    6206:	4604      	mov	r4, r0
    6208:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    620a:	b953      	cbnz	r3, 6222 <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    620c:	4b4b      	ldr	r3, [pc, #300]	; (633c <bt_att_recv+0x13c>)
    620e:	9301      	str	r3, [sp, #4]
    6210:	9300      	str	r3, [sp, #0]
    6212:	4a4b      	ldr	r2, [pc, #300]	; (6340 <bt_att_recv+0x140>)
    6214:	4b4b      	ldr	r3, [pc, #300]	; (6344 <bt_att_recv+0x144>)
    6216:	494c      	ldr	r1, [pc, #304]	; (6348 <bt_att_recv+0x148>)
    6218:	484c      	ldr	r0, [pc, #304]	; (634c <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    621a:	f7fa feb7 	bl	f8c <printk>
}
    621e:	b005      	add	sp, #20
    6220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    6222:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    6224:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    6226:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    622a:	f00d fbdd 	bl	139e8 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    622e:	4a48      	ldr	r2, [pc, #288]	; (6350 <bt_att_recv+0x150>)
    6230:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6232:	2300      	movs	r3, #0
    6234:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    6236:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    623a:	4286      	cmp	r6, r0
    623c:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    6240:	d11c      	bne.n	627c <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    6242:	4472      	add	r2, lr
    6244:	7896      	ldrb	r6, [r2, #2]
    6246:	2e01      	cmp	r6, #1
    6248:	d136      	bne.n	62b8 <bt_att_recv+0xb8>
    624a:	f3bf 8f5b 	dmb	ish
    624e:	f104 0294 	add.w	r2, r4, #148	; 0x94
    6252:	e852 3f00 	ldrex	r3, [r2]
    6256:	f043 0001 	orr.w	r0, r3, #1
    625a:	e842 0c00 	strex	ip, r0, [r2]
    625e:	f1bc 0f00 	cmp.w	ip, #0
    6262:	d1f6      	bne.n	6252 <bt_att_recv+0x52>
    6264:	f3bf 8f5b 	dmb	ish
    6268:	07da      	lsls	r2, r3, #31
    626a:	d540      	bpl.n	62ee <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    626c:	4b33      	ldr	r3, [pc, #204]	; (633c <bt_att_recv+0x13c>)
    626e:	9301      	str	r3, [sp, #4]
    6270:	9300      	str	r3, [sp, #0]
    6272:	4a38      	ldr	r2, [pc, #224]	; (6354 <bt_att_recv+0x154>)
    6274:	4b33      	ldr	r3, [pc, #204]	; (6344 <bt_att_recv+0x144>)
    6276:	4934      	ldr	r1, [pc, #208]	; (6348 <bt_att_recv+0x148>)
    6278:	4837      	ldr	r0, [pc, #220]	; (6358 <bt_att_recv+0x158>)
    627a:	e7ce      	b.n	621a <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    627c:	3301      	adds	r3, #1
    627e:	2b1b      	cmp	r3, #27
    6280:	d1d9      	bne.n	6236 <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    6282:	4b2e      	ldr	r3, [pc, #184]	; (633c <bt_att_recv+0x13c>)
    6284:	9302      	str	r3, [sp, #8]
    6286:	9001      	str	r0, [sp, #4]
    6288:	9300      	str	r3, [sp, #0]
    628a:	4a32      	ldr	r2, [pc, #200]	; (6354 <bt_att_recv+0x154>)
    628c:	4b2d      	ldr	r3, [pc, #180]	; (6344 <bt_att_recv+0x144>)
    628e:	492e      	ldr	r1, [pc, #184]	; (6348 <bt_att_recv+0x148>)
    6290:	4832      	ldr	r0, [pc, #200]	; (635c <bt_att_recv+0x15c>)
    6292:	f7fa fe7b 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    6296:	782d      	ldrb	r5, [r5, #0]
    6298:	4628      	mov	r0, r5
    629a:	f7ff fa9d 	bl	57d8 <att_op_get_type>
    629e:	2800      	cmp	r0, #0
    62a0:	d0bd      	beq.n	621e <bt_att_recv+0x1e>
	if (!req) {
    62a2:	2d00      	cmp	r5, #0
    62a4:	d0bb      	beq.n	621e <bt_att_recv+0x1e>
    62a6:	2306      	movs	r3, #6
    62a8:	2200      	movs	r2, #0
    62aa:	4629      	mov	r1, r5
    62ac:	6820      	ldr	r0, [r4, #0]
}
    62ae:	b005      	add	sp, #20
    62b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    62b4:	f7ff bf82 	b.w	61bc <send_err_rsp.part.10>
		} else if (handler->type == ATT_INDICATION &&
    62b8:	2e05      	cmp	r6, #5
    62ba:	d118      	bne.n	62ee <bt_att_recv+0xee>
    62bc:	f3bf 8f5b 	dmb	ish
    62c0:	f104 0294 	add.w	r2, r4, #148	; 0x94
    62c4:	e852 3f00 	ldrex	r3, [r2]
    62c8:	f043 0002 	orr.w	r0, r3, #2
    62cc:	e842 0c00 	strex	ip, r0, [r2]
    62d0:	f1bc 0f00 	cmp.w	ip, #0
    62d4:	d1f6      	bne.n	62c4 <bt_att_recv+0xc4>
    62d6:	f3bf 8f5b 	dmb	ish
    62da:	079b      	lsls	r3, r3, #30
    62dc:	d507      	bpl.n	62ee <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    62de:	4b17      	ldr	r3, [pc, #92]	; (633c <bt_att_recv+0x13c>)
    62e0:	9301      	str	r3, [sp, #4]
    62e2:	9300      	str	r3, [sp, #0]
    62e4:	4a1b      	ldr	r2, [pc, #108]	; (6354 <bt_att_recv+0x154>)
    62e6:	4b17      	ldr	r3, [pc, #92]	; (6344 <bt_att_recv+0x144>)
    62e8:	4917      	ldr	r1, [pc, #92]	; (6348 <bt_att_recv+0x148>)
    62ea:	481d      	ldr	r0, [pc, #116]	; (6360 <bt_att_recv+0x160>)
    62ec:	e795      	b.n	621a <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    62ee:	eb01 030e 	add.w	r3, r1, lr
    62f2:	89ba      	ldrh	r2, [r7, #12]
    62f4:	7859      	ldrb	r1, [r3, #1]
    62f6:	4291      	cmp	r1, r2
    62f8:	d90f      	bls.n	631a <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    62fa:	4b10      	ldr	r3, [pc, #64]	; (633c <bt_att_recv+0x13c>)
    62fc:	9303      	str	r3, [sp, #12]
    62fe:	7829      	ldrb	r1, [r5, #0]
    6300:	9102      	str	r1, [sp, #8]
    6302:	9201      	str	r2, [sp, #4]
    6304:	9300      	str	r3, [sp, #0]
    6306:	4a0e      	ldr	r2, [pc, #56]	; (6340 <bt_att_recv+0x140>)
    6308:	4b0e      	ldr	r3, [pc, #56]	; (6344 <bt_att_recv+0x144>)
    630a:	490f      	ldr	r1, [pc, #60]	; (6348 <bt_att_recv+0x148>)
    630c:	4815      	ldr	r0, [pc, #84]	; (6364 <bt_att_recv+0x164>)
    630e:	f7fa fe3d 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    6312:	2e01      	cmp	r6, #1
    6314:	d183      	bne.n	621e <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    6316:	2304      	movs	r3, #4
    6318:	e00a      	b.n	6330 <bt_att_recv+0x130>
		err = handler->func(att, buf);
    631a:	685b      	ldr	r3, [r3, #4]
    631c:	4639      	mov	r1, r7
    631e:	4620      	mov	r0, r4
    6320:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6322:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    6324:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    6326:	f47f af7a 	bne.w	621e <bt_att_recv+0x1e>
    632a:	2800      	cmp	r0, #0
    632c:	f43f af77 	beq.w	621e <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6330:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    6332:	2900      	cmp	r1, #0
    6334:	f43f af73 	beq.w	621e <bt_att_recv+0x1e>
    6338:	2200      	movs	r2, #0
    633a:	e7b7      	b.n	62ac <bt_att_recv+0xac>
    633c:	000155c5 	.word	0x000155c5
    6340:	0001699e 	.word	0x0001699e
    6344:	0001760d 	.word	0x0001760d
    6348:	000169ed 	.word	0x000169ed
    634c:	000177ca 	.word	0x000177ca
    6350:	000178cc 	.word	0x000178cc
    6354:	00016a28 	.word	0x00016a28
    6358:	000177f5 	.word	0x000177f5
    635c:	0001787f 	.word	0x0001787f
    6360:	00017821 	.word	0x00017821
    6364:	00017850 	.word	0x00017850

00006368 <att_read_group_req>:
{
    6368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    636c:	898b      	ldrh	r3, [r1, #12]
    636e:	2b06      	cmp	r3, #6
{
    6370:	b08d      	sub	sp, #52	; 0x34
    6372:	4680      	mov	r8, r0
    6374:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6376:	d001      	beq.n	637c <att_read_group_req+0x14>
    6378:	2b14      	cmp	r3, #20
    637a:	d168      	bne.n	644e <att_read_group_req+0xe6>
	req = (void *)buf->data;
    637c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    637e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6380:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6384:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6388:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    638a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    638c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    638e:	f00d fb2b 	bl	139e8 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6392:	4621      	mov	r1, r4
    6394:	4638      	mov	r0, r7
    6396:	f7ff fc25 	bl	5be4 <uuid_create>
    639a:	2800      	cmp	r0, #0
    639c:	d059      	beq.n	6452 <att_read_group_req+0xea>
	if (!start || !end) {
    639e:	2d00      	cmp	r5, #0
    63a0:	d05a      	beq.n	6458 <att_read_group_req+0xf0>
    63a2:	2400      	movs	r4, #0
    63a4:	2e00      	cmp	r6, #0
    63a6:	d056      	beq.n	6456 <att_read_group_req+0xee>
	if (start > end) {
    63a8:	42b5      	cmp	r5, r6
    63aa:	d855      	bhi.n	6458 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    63ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    63b0:	4669      	mov	r1, sp
    63b2:	4638      	mov	r0, r7
    63b4:	f88d 4000 	strb.w	r4, [sp]
    63b8:	f8ad 3002 	strh.w	r3, [sp, #2]
    63bc:	f7fb fd9c 	bl	1ef8 <bt_uuid_cmp>
    63c0:	bb38      	cbnz	r0, 6412 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    63c2:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    63c6:	2214      	movs	r2, #20
    63c8:	2100      	movs	r1, #0
    63ca:	a807      	add	r0, sp, #28
    63cc:	f7fb fc42 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    63d0:	2201      	movs	r2, #1
    63d2:	2111      	movs	r1, #17
    63d4:	4648      	mov	r0, r9
    63d6:	f7ff fe75 	bl	60c4 <bt_att_create_pdu>
    63da:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    63dc:	2800      	cmp	r0, #0
    63de:	d038      	beq.n	6452 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    63e0:	2101      	movs	r1, #1
    63e2:	3008      	adds	r0, #8
	data.uuid = uuid;
    63e4:	9708      	str	r7, [sp, #32]
	data.att = att;
    63e6:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    63ea:	f00d facf 	bl	1398c <net_buf_simple_add>
	data.rsp->len = 0;
    63ee:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    63f0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    63f2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    63f4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    63f6:	4a1c      	ldr	r2, [pc, #112]	; (6468 <att_read_group_req+0x100>)
	data.group = NULL;
    63f8:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    63fa:	4631      	mov	r1, r6
    63fc:	4628      	mov	r0, r5
    63fe:	f001 f925 	bl	764c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6404:	781c      	ldrb	r4, [r3, #0]
    6406:	b9d4      	cbnz	r4, 643e <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    6408:	9809      	ldr	r0, [sp, #36]	; 0x24
    640a:	f00d fa8d 	bl	13928 <net_buf_unref>
    640e:	230a      	movs	r3, #10
    6410:	e00c      	b.n	642c <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6412:	f642 0301 	movw	r3, #10241	; 0x2801
    6416:	a901      	add	r1, sp, #4
    6418:	4638      	mov	r0, r7
    641a:	f88d 4004 	strb.w	r4, [sp, #4]
    641e:	f8ad 3006 	strh.w	r3, [sp, #6]
    6422:	f7fb fd69 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6426:	2800      	cmp	r0, #0
    6428:	d0cb      	beq.n	63c2 <att_read_group_req+0x5a>
    642a:	2310      	movs	r3, #16
    642c:	462a      	mov	r2, r5
    642e:	2110      	movs	r1, #16
    6430:	4648      	mov	r0, r9
    6432:	f7ff fec3 	bl	61bc <send_err_rsp.part.10>
}
    6436:	4620      	mov	r0, r4
    6438:	b00d      	add	sp, #52	; 0x34
    643a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    643e:	4b0b      	ldr	r3, [pc, #44]	; (646c <att_read_group_req+0x104>)
    6440:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6442:	2104      	movs	r1, #4
    6444:	4648      	mov	r0, r9
    6446:	f7ff f84b 	bl	54e0 <bt_l2cap_send_cb>
		return 0;
    644a:	2400      	movs	r4, #0
    644c:	e7f3      	b.n	6436 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    644e:	2404      	movs	r4, #4
    6450:	e7f1      	b.n	6436 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    6452:	240e      	movs	r4, #14
    6454:	e7ef      	b.n	6436 <att_read_group_req+0xce>
			*err = 0;
    6456:	4635      	mov	r5, r6
    6458:	2301      	movs	r3, #1
    645a:	462a      	mov	r2, r5
    645c:	2110      	movs	r1, #16
    645e:	4648      	mov	r0, r9
    6460:	f7ff feac 	bl	61bc <send_err_rsp.part.10>
    6464:	e7f1      	b.n	644a <att_read_group_req+0xe2>
    6466:	bf00      	nop
    6468:	000058ad 	.word	0x000058ad
    646c:	00005c81 	.word	0x00005c81

00006470 <att_read_mult_req>:
{
    6470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6474:	6804      	ldr	r4, [r0, #0]
{
    6476:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    6478:	2214      	movs	r2, #20
{
    647a:	4606      	mov	r6, r0
    647c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    647e:	a801      	add	r0, sp, #4
    6480:	2100      	movs	r1, #0
    6482:	f7fb fbe7 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    6486:	2200      	movs	r2, #0
    6488:	210f      	movs	r1, #15
    648a:	4620      	mov	r0, r4
    648c:	f7ff fe1a 	bl	60c4 <bt_att_create_pdu>
    6490:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6492:	b368      	cbz	r0, 64f0 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6494:	f8df 9060 	ldr.w	r9, [pc, #96]	; 64f8 <att_read_mult_req+0x88>
	data.att = att;
    6498:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    649a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    649e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    64a2:	89ab      	ldrh	r3, [r5, #12]
    64a4:	2b01      	cmp	r3, #1
    64a6:	d806      	bhi.n	64b6 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    64a8:	4b12      	ldr	r3, [pc, #72]	; (64f4 <att_read_mult_req+0x84>)
    64aa:	9a03      	ldr	r2, [sp, #12]
    64ac:	2104      	movs	r1, #4
    64ae:	4620      	mov	r0, r4
    64b0:	f7ff f816 	bl	54e0 <bt_l2cap_send_cb>
    64b4:	e018      	b.n	64e8 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    64b6:	4638      	mov	r0, r7
    64b8:	f00d faa6 	bl	13a08 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    64bc:	ab01      	add	r3, sp, #4
    64be:	464a      	mov	r2, r9
    64c0:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    64c2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    64c4:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    64c8:	f001 f8c0 	bl	764c <bt_gatt_foreach_attr>
		if (data.err) {
    64cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    64d0:	2b00      	cmp	r3, #0
    64d2:	d0e6      	beq.n	64a2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    64d4:	9803      	ldr	r0, [sp, #12]
    64d6:	f00d fa27 	bl	13928 <net_buf_unref>
    64da:	f89d 3014 	ldrb.w	r3, [sp, #20]
    64de:	4632      	mov	r2, r6
    64e0:	210e      	movs	r1, #14
    64e2:	4620      	mov	r0, r4
    64e4:	f7ff fe6a 	bl	61bc <send_err_rsp.part.10>
	return 0;
    64e8:	2000      	movs	r0, #0
}
    64ea:	b007      	add	sp, #28
    64ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    64f0:	200e      	movs	r0, #14
    64f2:	e7fa      	b.n	64ea <att_read_mult_req+0x7a>
    64f4:	00005c81 	.word	0x00005c81
    64f8:	0000604d 	.word	0x0000604d

000064fc <att_read_rsp>:
{
    64fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6500:	4607      	mov	r7, r0
    6502:	b086      	sub	sp, #24
    6504:	460c      	mov	r4, r1
    6506:	4690      	mov	r8, r2
	if (!handle) {
    6508:	461d      	mov	r5, r3
    650a:	b3a3      	cbz	r3, 6576 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    650c:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    650e:	2214      	movs	r2, #20
    6510:	2100      	movs	r1, #0
    6512:	a801      	add	r0, sp, #4
    6514:	f7fb fb9e 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6518:	2200      	movs	r2, #0
    651a:	4641      	mov	r1, r8
    651c:	4630      	mov	r0, r6
    651e:	f7ff fdd1 	bl	60c4 <bt_att_create_pdu>
    6522:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6524:	b348      	cbz	r0, 657a <att_read_rsp+0x7e>
	data.offset = offset;
    6526:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    652a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    652e:	2301      	movs	r3, #1
    6530:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6534:	4a12      	ldr	r2, [pc, #72]	; (6580 <att_read_rsp+0x84>)
	data.att = att;
    6536:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6538:	ab01      	add	r3, sp, #4
    653a:	4629      	mov	r1, r5
    653c:	4628      	mov	r0, r5
    653e:	f001 f885 	bl	764c <bt_gatt_foreach_attr>
	if (data.err) {
    6542:	f89d 7014 	ldrb.w	r7, [sp, #20]
    6546:	b17f      	cbz	r7, 6568 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    6548:	9803      	ldr	r0, [sp, #12]
    654a:	f00d f9ed 	bl	13928 <net_buf_unref>
	if (!req) {
    654e:	b13c      	cbz	r4, 6560 <att_read_rsp+0x64>
    6550:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6554:	462a      	mov	r2, r5
    6556:	4621      	mov	r1, r4
    6558:	4630      	mov	r0, r6
    655a:	f7ff fe2f 	bl	61bc <send_err_rsp.part.10>
		return 0;
    655e:	2400      	movs	r4, #0
}
    6560:	4620      	mov	r0, r4
    6562:	b006      	add	sp, #24
    6564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6568:	4b06      	ldr	r3, [pc, #24]	; (6584 <att_read_rsp+0x88>)
    656a:	9a03      	ldr	r2, [sp, #12]
    656c:	2104      	movs	r1, #4
    656e:	4630      	mov	r0, r6
    6570:	f7fe ffb6 	bl	54e0 <bt_l2cap_send_cb>
    6574:	e7f3      	b.n	655e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    6576:	2401      	movs	r4, #1
    6578:	e7f2      	b.n	6560 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    657a:	240e      	movs	r4, #14
    657c:	e7f0      	b.n	6560 <att_read_rsp+0x64>
    657e:	bf00      	nop
    6580:	0000604d 	.word	0x0000604d
    6584:	00005c81 	.word	0x00005c81

00006588 <att_read_blob_req>:
{
    6588:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    658a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    658c:	8813      	ldrh	r3, [r2, #0]
    658e:	8852      	ldrh	r2, [r2, #2]
    6590:	9200      	str	r2, [sp, #0]
    6592:	210c      	movs	r1, #12
    6594:	220d      	movs	r2, #13
    6596:	f7ff ffb1 	bl	64fc <att_read_rsp>
}
    659a:	b003      	add	sp, #12
    659c:	f85d fb04 	ldr.w	pc, [sp], #4

000065a0 <att_read_req>:
{
    65a0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    65a2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    65a4:	2200      	movs	r2, #0
    65a6:	881b      	ldrh	r3, [r3, #0]
    65a8:	9200      	str	r2, [sp, #0]
    65aa:	210a      	movs	r1, #10
    65ac:	220b      	movs	r2, #11
    65ae:	f7ff ffa5 	bl	64fc <att_read_rsp>
}
    65b2:	b003      	add	sp, #12
    65b4:	f85d fb04 	ldr.w	pc, [sp], #4

000065b8 <att_read_type_req>:
{
    65b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    65bc:	898b      	ldrh	r3, [r1, #12]
    65be:	2b06      	cmp	r3, #6
{
    65c0:	b08d      	sub	sp, #52	; 0x34
    65c2:	4607      	mov	r7, r0
    65c4:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    65c6:	d001      	beq.n	65cc <att_read_type_req+0x14>
    65c8:	2b14      	cmp	r3, #20
    65ca:	d152      	bne.n	6672 <att_read_type_req+0xba>
	req = (void *)buf->data;
    65cc:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    65ce:	2104      	movs	r1, #4
	req = (void *)buf->data;
    65d0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    65d4:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    65d8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    65da:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    65dc:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    65e0:	f00d fa02 	bl	139e8 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    65e4:	4631      	mov	r1, r6
    65e6:	4640      	mov	r0, r8
    65e8:	f7ff fafc 	bl	5be4 <uuid_create>
    65ec:	b198      	cbz	r0, 6616 <att_read_type_req+0x5e>
	if (!start || !end) {
    65ee:	2d00      	cmp	r5, #0
    65f0:	d042      	beq.n	6678 <att_read_type_req+0xc0>
    65f2:	2c00      	cmp	r4, #0
    65f4:	d03f      	beq.n	6676 <att_read_type_req+0xbe>
	if (start > end) {
    65f6:	42a5      	cmp	r5, r4
    65f8:	d83e      	bhi.n	6678 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    65fa:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    65fc:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    65fe:	2100      	movs	r1, #0
    6600:	eb0d 0002 	add.w	r0, sp, r2
    6604:	f7fb fb26 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6608:	2201      	movs	r2, #1
    660a:	2109      	movs	r1, #9
    660c:	4630      	mov	r0, r6
    660e:	f7ff fd59 	bl	60c4 <bt_att_create_pdu>
    6612:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    6614:	b908      	cbnz	r0, 661a <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    6616:	240e      	movs	r4, #14
    6618:	e027      	b.n	666a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    661a:	2101      	movs	r1, #1
    661c:	3008      	adds	r0, #8
	data.att = att;
    661e:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    6620:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6624:	f00d f9b2 	bl	1398c <net_buf_simple_add>
	data.rsp->len = 0;
    6628:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    662a:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    662c:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    662e:	4621      	mov	r1, r4
	data.rsp->len = 0;
    6630:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6632:	4a14      	ldr	r2, [pc, #80]	; (6684 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6634:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6638:	4628      	mov	r0, r5
    663a:	ab06      	add	r3, sp, #24
    663c:	f001 f806 	bl	764c <bt_gatt_foreach_attr>
	if (data.err) {
    6640:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6644:	b15c      	cbz	r4, 665e <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    6646:	9808      	ldr	r0, [sp, #32]
    6648:	f00d f96e 	bl	13928 <net_buf_unref>
    664c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6650:	462a      	mov	r2, r5
    6652:	2108      	movs	r1, #8
    6654:	4630      	mov	r0, r6
    6656:	f7ff fdb1 	bl	61bc <send_err_rsp.part.10>
		return 0;
    665a:	2400      	movs	r4, #0
    665c:	e005      	b.n	666a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    665e:	4b0a      	ldr	r3, [pc, #40]	; (6688 <att_read_type_req+0xd0>)
    6660:	9a08      	ldr	r2, [sp, #32]
    6662:	2104      	movs	r1, #4
    6664:	4630      	mov	r0, r6
    6666:	f7fe ff3b 	bl	54e0 <bt_l2cap_send_cb>
}
    666a:	4620      	mov	r0, r4
    666c:	b00d      	add	sp, #52	; 0x34
    666e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6672:	2404      	movs	r4, #4
    6674:	e7f9      	b.n	666a <att_read_type_req+0xb2>
			*err = 0;
    6676:	4625      	mov	r5, r4
    6678:	2301      	movs	r3, #1
    667a:	462a      	mov	r2, r5
    667c:	2108      	movs	r1, #8
    667e:	4648      	mov	r0, r9
    6680:	e7e9      	b.n	6656 <att_read_type_req+0x9e>
    6682:	bf00      	nop
    6684:	00005b29 	.word	0x00005b29
    6688:	00005c81 	.word	0x00005c81

0000668c <att_find_type_req>:
{
    668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6690:	f8d0 9000 	ldr.w	r9, [r0]
{
    6694:	4680      	mov	r8, r0
	req = (void *)buf->data;
    6696:	4608      	mov	r0, r1
{
    6698:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    669a:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    669e:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    66a0:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    66a2:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    66a4:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    66a6:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    66a8:	f00d f99e 	bl	139e8 <net_buf_simple_pull>
    66ac:	4682      	mov	sl, r0
	if (!start || !end) {
    66ae:	2d00      	cmp	r5, #0
    66b0:	d057      	beq.n	6762 <att_find_type_req+0xd6>
    66b2:	2400      	movs	r4, #0
    66b4:	2f00      	cmp	r7, #0
    66b6:	d053      	beq.n	6760 <att_find_type_req+0xd4>
	if (start > end) {
    66b8:	42bd      	cmp	r5, r7
    66ba:	d852      	bhi.n	6762 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    66bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    66c0:	a902      	add	r1, sp, #8
    66c2:	a801      	add	r0, sp, #4
    66c4:	f8ad 6006 	strh.w	r6, [sp, #6]
    66c8:	f88d 4004 	strb.w	r4, [sp, #4]
    66cc:	f88d 4008 	strb.w	r4, [sp, #8]
    66d0:	f8ad 300a 	strh.w	r3, [sp, #10]
    66d4:	f7fb fc10 	bl	1ef8 <bt_uuid_cmp>
    66d8:	4606      	mov	r6, r0
    66da:	b148      	cbz	r0, 66f0 <att_find_type_req+0x64>
    66dc:	230a      	movs	r3, #10
    66de:	462a      	mov	r2, r5
    66e0:	2106      	movs	r1, #6
    66e2:	4648      	mov	r0, r9
    66e4:	f7ff fd6a 	bl	61bc <send_err_rsp.part.10>
}
    66e8:	4620      	mov	r0, r4
    66ea:	b009      	add	sp, #36	; 0x24
    66ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    66f0:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    66f4:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    66f8:	2214      	movs	r2, #20
    66fa:	4631      	mov	r1, r6
    66fc:	a803      	add	r0, sp, #12
    66fe:	f7fb faa9 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    6702:	4632      	mov	r2, r6
    6704:	2107      	movs	r1, #7
    6706:	4648      	mov	r0, r9
    6708:	f7ff fcdc 	bl	60c4 <bt_att_create_pdu>
    670c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    670e:	b328      	cbz	r0, 675c <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6710:	230a      	movs	r3, #10
    6712:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6716:	4a14      	ldr	r2, [pc, #80]	; (6768 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6718:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    671c:	ab03      	add	r3, sp, #12
    671e:	4639      	mov	r1, r7
    6720:	4628      	mov	r0, r5
	data.att = att;
    6722:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    6726:	9605      	str	r6, [sp, #20]
	data.value = value;
    6728:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    672c:	f000 ff8e 	bl	764c <bt_gatt_foreach_attr>
	if (data.err) {
    6730:	f89d 401d 	ldrb.w	r4, [sp, #29]
    6734:	b15c      	cbz	r4, 674e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    6736:	9804      	ldr	r0, [sp, #16]
    6738:	f00d f8f6 	bl	13928 <net_buf_unref>
    673c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    6740:	462a      	mov	r2, r5
    6742:	2106      	movs	r1, #6
    6744:	4648      	mov	r0, r9
    6746:	f7ff fd39 	bl	61bc <send_err_rsp.part.10>
		return 0;
    674a:	2400      	movs	r4, #0
    674c:	e7cc      	b.n	66e8 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    674e:	4b07      	ldr	r3, [pc, #28]	; (676c <att_find_type_req+0xe0>)
    6750:	9a04      	ldr	r2, [sp, #16]
    6752:	2104      	movs	r1, #4
    6754:	4648      	mov	r0, r9
    6756:	f7fe fec3 	bl	54e0 <bt_l2cap_send_cb>
    675a:	e7c5      	b.n	66e8 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    675c:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    675e:	e7c3      	b.n	66e8 <att_find_type_req+0x5c>
			*err = 0;
    6760:	463d      	mov	r5, r7
    6762:	2301      	movs	r3, #1
    6764:	e7ec      	b.n	6740 <att_find_type_req+0xb4>
    6766:	bf00      	nop
    6768:	00005a15 	.word	0x00005a15
    676c:	00005c81 	.word	0x00005c81

00006770 <att_find_info_req>:
{
    6770:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    6772:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    6774:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6776:	881d      	ldrh	r5, [r3, #0]
{
    6778:	b085      	sub	sp, #20
    677a:	4607      	mov	r7, r0
	if (!start || !end) {
    677c:	b375      	cbz	r5, 67dc <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    677e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6780:	b35c      	cbz	r4, 67da <att_find_info_req+0x6a>
	if (start > end) {
    6782:	42a5      	cmp	r5, r4
    6784:	d82a      	bhi.n	67dc <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    6786:	2210      	movs	r2, #16
    6788:	2100      	movs	r1, #0
    678a:	4668      	mov	r0, sp
    678c:	f7fb fa62 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6790:	2200      	movs	r2, #0
    6792:	2105      	movs	r1, #5
    6794:	4630      	mov	r0, r6
    6796:	f7ff fc95 	bl	60c4 <bt_att_create_pdu>
    679a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    679c:	b910      	cbnz	r0, 67a4 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    679e:	200e      	movs	r0, #14
}
    67a0:	b005      	add	sp, #20
    67a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    67a4:	4621      	mov	r1, r4
    67a6:	466b      	mov	r3, sp
    67a8:	4a0d      	ldr	r2, [pc, #52]	; (67e0 <att_find_info_req+0x70>)
	data.att = att;
    67aa:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    67ac:	4628      	mov	r0, r5
    67ae:	f000 ff4d 	bl	764c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    67b2:	9c02      	ldr	r4, [sp, #8]
    67b4:	b94c      	cbnz	r4, 67ca <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    67b6:	9801      	ldr	r0, [sp, #4]
    67b8:	f00d f8b6 	bl	13928 <net_buf_unref>
    67bc:	230a      	movs	r3, #10
    67be:	462a      	mov	r2, r5
    67c0:	2104      	movs	r1, #4
    67c2:	4630      	mov	r0, r6
    67c4:	f7ff fcfa 	bl	61bc <send_err_rsp.part.10>
    67c8:	e005      	b.n	67d6 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    67ca:	4b06      	ldr	r3, [pc, #24]	; (67e4 <att_find_info_req+0x74>)
    67cc:	9a01      	ldr	r2, [sp, #4]
    67ce:	2104      	movs	r1, #4
    67d0:	4630      	mov	r0, r6
    67d2:	f7fe fe85 	bl	54e0 <bt_l2cap_send_cb>
		return 0;
    67d6:	2000      	movs	r0, #0
    67d8:	e7e2      	b.n	67a0 <att_find_info_req+0x30>
			*err = 0;
    67da:	4625      	mov	r5, r4
    67dc:	2301      	movs	r3, #1
    67de:	e7ee      	b.n	67be <att_find_info_req+0x4e>
    67e0:	0000597b 	.word	0x0000597b
    67e4:	00005c81 	.word	0x00005c81

000067e8 <att_write_rsp.part.11.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    67e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67ec:	b086      	sub	sp, #24
    67ee:	4690      	mov	r8, r2
    67f0:	4605      	mov	r5, r0
    67f2:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    67f4:	2218      	movs	r2, #24
    67f6:	2100      	movs	r1, #0
    67f8:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    67fa:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    67fc:	f7fb fa2a 	bl	1c54 <memset>
	if (rsp) {
    6800:	f1b8 0f00 	cmp.w	r8, #0
    6804:	d11f      	bne.n	6846 <att_write_rsp.part.11.constprop.17+0x5e>
	data.offset = offset;
    6806:	2300      	movs	r3, #0
    6808:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    680c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    680e:	9303      	str	r3, [sp, #12]
	data.len = len;
    6810:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    6814:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6818:	2301      	movs	r3, #1
    681a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    681e:	4a1b      	ldr	r2, [pc, #108]	; (688c <att_write_rsp.part.11.constprop.17+0xa4>)
	data.conn = conn;
    6820:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6822:	466b      	mov	r3, sp
    6824:	4639      	mov	r1, r7
    6826:	4638      	mov	r0, r7
	data.op = op;
    6828:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    682c:	f000 ff0e 	bl	764c <bt_gatt_foreach_attr>
	if (data.err) {
    6830:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6834:	b98c      	cbnz	r4, 685a <att_write_rsp.part.11.constprop.17+0x72>
	if (data.buf) {
    6836:	9a01      	ldr	r2, [sp, #4]
    6838:	b1b2      	cbz	r2, 6868 <att_write_rsp.part.11.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    683a:	4b15      	ldr	r3, [pc, #84]	; (6890 <att_write_rsp.part.11.constprop.17+0xa8>)
    683c:	2104      	movs	r1, #4
    683e:	4628      	mov	r0, r5
    6840:	f7fe fe4e 	bl	54e0 <bt_l2cap_send_cb>
    6844:	e011      	b.n	686a <att_write_rsp.part.11.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6846:	2200      	movs	r2, #0
    6848:	4641      	mov	r1, r8
    684a:	4628      	mov	r0, r5
    684c:	f7ff fc3a 	bl	60c4 <bt_att_create_pdu>
    6850:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6852:	2800      	cmp	r0, #0
    6854:	d1d7      	bne.n	6806 <att_write_rsp.part.11.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6856:	240e      	movs	r4, #14
    6858:	e007      	b.n	686a <att_write_rsp.part.11.constprop.17+0x82>
		if (rsp) {
    685a:	f1b8 0f00 	cmp.w	r8, #0
    685e:	d00f      	beq.n	6880 <att_write_rsp.part.11.constprop.17+0x98>
			net_buf_unref(data.buf);
    6860:	9801      	ldr	r0, [sp, #4]
    6862:	f00d f861 	bl	13928 <net_buf_unref>
	if (!req) {
    6866:	b926      	cbnz	r6, 6872 <att_write_rsp.part.11.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6868:	2400      	movs	r4, #0
}
    686a:	4620      	mov	r0, r4
    686c:	b006      	add	sp, #24
    686e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6872:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6876:	463a      	mov	r2, r7
    6878:	4631      	mov	r1, r6
    687a:	4628      	mov	r0, r5
    687c:	f7ff fc9e 	bl	61bc <send_err_rsp.part.10>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6880:	2e18      	cmp	r6, #24
    6882:	d1f1      	bne.n	6868 <att_write_rsp.part.11.constprop.17+0x80>
    6884:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6888:	e7ef      	b.n	686a <att_write_rsp.part.11.constprop.17+0x82>
    688a:	bf00      	nop
    688c:	00005d5d 	.word	0x00005d5d
    6890:	00005c81 	.word	0x00005c81

00006894 <att_signed_write_cmd>:
{
    6894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6898:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    689a:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    689c:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    68a0:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    68a2:	4620      	mov	r0, r4
    68a4:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    68a6:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    68aa:	f00d f895 	bl	139d8 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    68ae:	4629      	mov	r1, r5
    68b0:	4630      	mov	r0, r6
    68b2:	f001 f964 	bl	7b7e <bt_smp_sign_verify>
	if (err) {
    68b6:	4607      	mov	r7, r0
    68b8:	b160      	cbz	r0, 68d4 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    68ba:	4b13      	ldr	r3, [pc, #76]	; (6908 <att_signed_write_cmd+0x74>)
    68bc:	9301      	str	r3, [sp, #4]
    68be:	9300      	str	r3, [sp, #0]
    68c0:	4a12      	ldr	r2, [pc, #72]	; (690c <att_signed_write_cmd+0x78>)
    68c2:	4b13      	ldr	r3, [pc, #76]	; (6910 <att_signed_write_cmd+0x7c>)
    68c4:	4913      	ldr	r1, [pc, #76]	; (6914 <att_signed_write_cmd+0x80>)
    68c6:	4814      	ldr	r0, [pc, #80]	; (6918 <att_signed_write_cmd+0x84>)
    68c8:	f7fa fb60 	bl	f8c <printk>
    68cc:	2000      	movs	r0, #0
}
    68ce:	b002      	add	sp, #8
    68d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    68d4:	2101      	movs	r1, #1
    68d6:	4620      	mov	r0, r4
    68d8:	f00d f886 	bl	139e8 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    68dc:	2102      	movs	r1, #2
    68de:	4620      	mov	r0, r4
    68e0:	f00d f882 	bl	139e8 <net_buf_simple_pull>
	if (!handle) {
    68e4:	f1b8 0f00 	cmp.w	r8, #0
    68e8:	d00c      	beq.n	6904 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    68ea:	7b2b      	ldrb	r3, [r5, #12]
    68ec:	3b0c      	subs	r3, #12
    68ee:	b2db      	uxtb	r3, r3
    68f0:	9301      	str	r3, [sp, #4]
    68f2:	68ab      	ldr	r3, [r5, #8]
    68f4:	9300      	str	r3, [sp, #0]
    68f6:	463a      	mov	r2, r7
    68f8:	4643      	mov	r3, r8
    68fa:	4639      	mov	r1, r7
    68fc:	4630      	mov	r0, r6
    68fe:	f7ff ff73 	bl	67e8 <att_write_rsp.part.11.constprop.17>
    6902:	e7e4      	b.n	68ce <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    6904:	2001      	movs	r0, #1
    6906:	e7e2      	b.n	68ce <att_signed_write_cmd+0x3a>
    6908:	000155c5 	.word	0x000155c5
    690c:	0001699e 	.word	0x0001699e
    6910:	000175f8 	.word	0x000175f8
    6914:	000169ed 	.word	0x000169ed
    6918:	0001771f 	.word	0x0001771f

0000691c <att_write_cmd>:
{
    691c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    691e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6920:	f101 0008 	add.w	r0, r1, #8
{
    6924:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6926:	f00d f86f 	bl	13a08 <net_buf_simple_pull_le16>
	if (!handle) {
    692a:	4603      	mov	r3, r0
    692c:	b150      	cbz	r0, 6944 <att_write_cmd+0x28>
    692e:	7b22      	ldrb	r2, [r4, #12]
    6930:	9201      	str	r2, [sp, #4]
    6932:	68a2      	ldr	r2, [r4, #8]
    6934:	9200      	str	r2, [sp, #0]
    6936:	2200      	movs	r2, #0
    6938:	4611      	mov	r1, r2
    693a:	4628      	mov	r0, r5
    693c:	f7ff ff54 	bl	67e8 <att_write_rsp.part.11.constprop.17>
}
    6940:	b003      	add	sp, #12
    6942:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6944:	2001      	movs	r0, #1
    6946:	e7fb      	b.n	6940 <att_write_cmd+0x24>

00006948 <att_write_req>:
{
    6948:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    694a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    694c:	f101 0008 	add.w	r0, r1, #8
{
    6950:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6952:	f00d f859 	bl	13a08 <net_buf_simple_pull_le16>
	if (!handle) {
    6956:	4603      	mov	r3, r0
    6958:	b150      	cbz	r0, 6970 <att_write_req+0x28>
    695a:	7b22      	ldrb	r2, [r4, #12]
    695c:	9201      	str	r2, [sp, #4]
    695e:	68a2      	ldr	r2, [r4, #8]
    6960:	9200      	str	r2, [sp, #0]
    6962:	2112      	movs	r1, #18
    6964:	2213      	movs	r2, #19
    6966:	4628      	mov	r0, r5
    6968:	f7ff ff3e 	bl	67e8 <att_write_rsp.part.11.constprop.17>
}
    696c:	b003      	add	sp, #12
    696e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6970:	2001      	movs	r0, #1
    6972:	e7fb      	b.n	696c <att_write_req+0x24>

00006974 <bt_att_init>:

void bt_att_init(void)
{
    6974:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6976:	4803      	ldr	r0, [pc, #12]	; (6984 <bt_att_init+0x10>)
    6978:	f7fe fcf4 	bl	5364 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    697c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6980:	f000 bda2 	b.w	74c8 <bt_gatt_init>
    6984:	20003be8 	.word	0x20003be8

00006988 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    6988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    698a:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    698c:	4607      	mov	r7, r0
    698e:	2800      	cmp	r0, #0
    6990:	d04b      	beq.n	6a2a <bt_att_send+0xa2>
    6992:	2900      	cmp	r1, #0
    6994:	d049      	beq.n	6a2a <bt_att_send+0xa2>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6996:	f7ff f9a1 	bl	5cdc <att_chan_get>
	if (!att) {
    699a:	4604      	mov	r4, r0
    699c:	b1b0      	cbz	r0, 69cc <bt_att_send+0x44>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    699e:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    69a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    69a6:	4630      	mov	r0, r6
    69a8:	f00e f87d 	bl	14aa6 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    69ac:	4620      	mov	r0, r4
    69ae:	f7ff f94b 	bl	5c48 <att_is_connected>
    69b2:	b970      	cbnz	r0, 69d2 <bt_att_send+0x4a>
		BT_WARN("Disconnected");
    69b4:	4b1e      	ldr	r3, [pc, #120]	; (6a30 <bt_att_send+0xa8>)
    69b6:	9301      	str	r3, [sp, #4]
    69b8:	9300      	str	r3, [sp, #0]
    69ba:	4a1e      	ldr	r2, [pc, #120]	; (6a34 <bt_att_send+0xac>)
    69bc:	4b1e      	ldr	r3, [pc, #120]	; (6a38 <bt_att_send+0xb0>)
    69be:	491f      	ldr	r1, [pc, #124]	; (6a3c <bt_att_send+0xb4>)
    69c0:	481f      	ldr	r0, [pc, #124]	; (6a40 <bt_att_send+0xb8>)
    69c2:	f7fa fae3 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    69c6:	4630      	mov	r0, r6
    69c8:	f00e f845 	bl	14a56 <_impl_k_sem_give>
		return -ENOTCONN;
    69cc:	f06f 0438 	mvn.w	r4, #56	; 0x38
    69d0:	e015      	b.n	69fe <bt_att_send+0x76>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    69d2:	68ab      	ldr	r3, [r5, #8]
    69d4:	781b      	ldrb	r3, [r3, #0]
    69d6:	2bd2      	cmp	r3, #210	; 0xd2
    69d8:	d114      	bne.n	6a04 <bt_att_send+0x7c>
		int err;

		err = bt_smp_sign(conn, buf);
    69da:	4629      	mov	r1, r5
    69dc:	4638      	mov	r0, r7
    69de:	f001 f8d1 	bl	7b84 <bt_smp_sign>
		if (err) {
    69e2:	4604      	mov	r4, r0
    69e4:	b170      	cbz	r0, 6a04 <bt_att_send+0x7c>
			BT_ERR("Error signing data");
    69e6:	4b12      	ldr	r3, [pc, #72]	; (6a30 <bt_att_send+0xa8>)
    69e8:	9301      	str	r3, [sp, #4]
    69ea:	9300      	str	r3, [sp, #0]
    69ec:	4a15      	ldr	r2, [pc, #84]	; (6a44 <bt_att_send+0xbc>)
    69ee:	4b12      	ldr	r3, [pc, #72]	; (6a38 <bt_att_send+0xb0>)
    69f0:	4912      	ldr	r1, [pc, #72]	; (6a3c <bt_att_send+0xb4>)
    69f2:	4815      	ldr	r0, [pc, #84]	; (6a48 <bt_att_send+0xc0>)
    69f4:	f7fa faca 	bl	f8c <printk>
    69f8:	4630      	mov	r0, r6
    69fa:	f00e f82c 	bl	14a56 <_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));

	return 0;
}
    69fe:	4620      	mov	r0, r4
    6a00:	b003      	add	sp, #12
    6a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(buf->data[0])) {
    6a04:	68ab      	ldr	r3, [r5, #8]
    6a06:	7818      	ldrb	r0, [r3, #0]
    6a08:	f7fe fee6 	bl	57d8 <att_op_get_type>
    6a0c:	3801      	subs	r0, #1
    6a0e:	b2c0      	uxtb	r0, r0
    6a10:	2804      	cmp	r0, #4
    6a12:	bf96      	itet	ls
    6a14:	4b0d      	ldrls	r3, [pc, #52]	; (6a4c <bt_att_send+0xc4>)
    6a16:	4b0e      	ldrhi	r3, [pc, #56]	; (6a50 <bt_att_send+0xc8>)
    6a18:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    6a1c:	462a      	mov	r2, r5
    6a1e:	2104      	movs	r1, #4
    6a20:	4638      	mov	r0, r7
    6a22:	f7fe fd5d 	bl	54e0 <bt_l2cap_send_cb>
	return 0;
    6a26:	2400      	movs	r4, #0
    6a28:	e7e9      	b.n	69fe <bt_att_send+0x76>
		return -EINVAL;
    6a2a:	f06f 0415 	mvn.w	r4, #21
    6a2e:	e7e6      	b.n	69fe <bt_att_send+0x76>
    6a30:	000155c5 	.word	0x000155c5
    6a34:	00016a28 	.word	0x00016a28
    6a38:	00017652 	.word	0x00017652
    6a3c:	000169ed 	.word	0x000169ed
    6a40:	00017702 	.word	0x00017702
    6a44:	0001699e 	.word	0x0001699e
    6a48:	000178a7 	.word	0x000178a7
    6a4c:	000175c8 	.word	0x000175c8
    6a50:	00005c6f 	.word	0x00005c6f

00006a54 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6a54:	b510      	push	{r4, lr}
    6a56:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6a58:	b1d8      	cbz	r0, 6a92 <bt_att_req_send+0x3e>
    6a5a:	b1d1      	cbz	r1, 6a92 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6a5c:	f7ff f93e 	bl	5cdc <att_chan_get>
	if (!att) {
    6a60:	4603      	mov	r3, r0
    6a62:	b1c8      	cbz	r0, 6a98 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6a64:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    6a68:	b172      	cbz	r2, 6a88 <bt_att_req_send+0x34>
	parent->next = child;
    6a6a:	2000      	movs	r0, #0
    6a6c:	6020      	str	r0, [r4, #0]
    6a6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    6a72:	b92a      	cbnz	r2, 6a80 <bt_att_req_send+0x2c>
	list->tail = node;
    6a74:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    6a78:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6a7c:	4610      	mov	r0, r2
    6a7e:	bd10      	pop	{r4, pc}
	parent->next = child;
    6a80:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6a82:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    6a86:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6a88:	4621      	mov	r1, r4
}
    6a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    6a8e:	f7ff b991 	b.w	5db4 <att_send_req>
		return -EINVAL;
    6a92:	f06f 0015 	mvn.w	r0, #21
    6a96:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6a98:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6a9c:	bd10      	pop	{r4, pc}

00006a9e <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode);
    6a9e:	6813      	ldr	r3, [r2, #0]
    6aa0:	b939      	cbnz	r1, 6ab2 <sys_slist_remove+0x14>
    6aa2:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    6aa4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode);
    6aa6:	428a      	cmp	r2, r1
    6aa8:	d100      	bne.n	6aac <sys_slist_remove+0xe>
	list->tail = node;
    6aaa:	6043      	str	r3, [r0, #4]
	parent->next = child;
    6aac:	2300      	movs	r3, #0
    6aae:	6013      	str	r3, [r2, #0]
    6ab0:	4770      	bx	lr
    6ab2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    6ab4:	6843      	ldr	r3, [r0, #4]
    6ab6:	429a      	cmp	r2, r3
	list->tail = node;
    6ab8:	bf08      	it	eq
    6aba:	6041      	streq	r1, [r0, #4]
    6abc:	e7f6      	b.n	6aac <sys_slist_remove+0xe>

00006abe <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6abe:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6ac0:	2000      	movs	r0, #0
    6ac2:	4770      	bx	lr

00006ac4 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6ac4:	b410      	push	{r4}
    6ac6:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6ac8:	699c      	ldr	r4, [r3, #24]
    6aca:	460a      	mov	r2, r1
    6acc:	6959      	ldr	r1, [r3, #20]
    6ace:	4623      	mov	r3, r4
}
    6ad0:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6ad2:	4718      	bx	r3

00006ad4 <gatt_subscription_remove>:
	bt_addr_le_copy(&params->_peer, &conn->le.dst);
}

static void gatt_subscription_remove(struct bt_conn *conn, sys_snode_t *prev,
				     struct bt_gatt_subscribe_params *params)
{
    6ad4:	b570      	push	{r4, r5, r6, lr}
    6ad6:	4614      	mov	r4, r2
    6ad8:	4606      	mov	r6, r0
	/* Remove subscription from the list*/
	sys_slist_remove(&subscriptions, prev, &params->node);
    6ada:	3228      	adds	r2, #40	; 0x28
    6adc:	4805      	ldr	r0, [pc, #20]	; (6af4 <gatt_subscription_remove+0x20>)
    6ade:	f7ff ffde 	bl	6a9e <sys_slist_remove>

	params->notify(conn, params, NULL, 0);
    6ae2:	69e5      	ldr	r5, [r4, #28]
    6ae4:	2300      	movs	r3, #0
    6ae6:	4621      	mov	r1, r4
    6ae8:	4630      	mov	r0, r6
    6aea:	46ac      	mov	ip, r5
    6aec:	461a      	mov	r2, r3
}
    6aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->notify(conn, params, NULL, 0);
    6af2:	4760      	bx	ip
    6af4:	20000614 	.word	0x20000614

00006af8 <sc_ccc_cfg_changed>:
{
    6af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6afa:	460c      	mov	r4, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    6afc:	f00d ff9c 	bl	14a38 <_impl_k_current_get>
	BT_DBG("value 0x%04x", value);
    6b00:	4b06      	ldr	r3, [pc, #24]	; (6b1c <sc_ccc_cfg_changed+0x24>)
    6b02:	9303      	str	r3, [sp, #12]
    6b04:	9001      	str	r0, [sp, #4]
    6b06:	9300      	str	r3, [sp, #0]
    6b08:	9402      	str	r4, [sp, #8]
    6b0a:	4b05      	ldr	r3, [pc, #20]	; (6b20 <sc_ccc_cfg_changed+0x28>)
    6b0c:	4a05      	ldr	r2, [pc, #20]	; (6b24 <sc_ccc_cfg_changed+0x2c>)
    6b0e:	4906      	ldr	r1, [pc, #24]	; (6b28 <sc_ccc_cfg_changed+0x30>)
    6b10:	4806      	ldr	r0, [pc, #24]	; (6b2c <sc_ccc_cfg_changed+0x34>)
    6b12:	f7fa fa3b 	bl	f8c <printk>
}
    6b16:	b004      	add	sp, #16
    6b18:	bd10      	pop	{r4, pc}
    6b1a:	bf00      	nop
    6b1c:	000155c5 	.word	0x000155c5
    6b20:	000179a4 	.word	0x000179a4
    6b24:	000169e6 	.word	0x000169e6
    6b28:	000169ed 	.word	0x000169ed
    6b2c:	00017ded 	.word	0x00017ded

00006b30 <update_range>:
{
    6b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b32:	460c      	mov	r4, r1
    6b34:	b089      	sub	sp, #36	; 0x24
    6b36:	4617      	mov	r7, r2
    6b38:	4606      	mov	r6, r0
    6b3a:	461d      	mov	r5, r3
    6b3c:	f00d ff7c 	bl	14a38 <_impl_k_current_get>
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
    6b40:	8822      	ldrh	r2, [r4, #0]
    6b42:	4b0f      	ldr	r3, [pc, #60]	; (6b80 <update_range+0x50>)
    6b44:	9203      	str	r2, [sp, #12]
    6b46:	8832      	ldrh	r2, [r6, #0]
    6b48:	9306      	str	r3, [sp, #24]
    6b4a:	9202      	str	r2, [sp, #8]
    6b4c:	9001      	str	r0, [sp, #4]
    6b4e:	9300      	str	r3, [sp, #0]
    6b50:	9505      	str	r5, [sp, #20]
    6b52:	4b0c      	ldr	r3, [pc, #48]	; (6b84 <update_range+0x54>)
    6b54:	9704      	str	r7, [sp, #16]
    6b56:	4a0c      	ldr	r2, [pc, #48]	; (6b88 <update_range+0x58>)
    6b58:	490c      	ldr	r1, [pc, #48]	; (6b8c <update_range+0x5c>)
    6b5a:	480d      	ldr	r0, [pc, #52]	; (6b90 <update_range+0x60>)
    6b5c:	f7fa fa16 	bl	f8c <printk>
	if (new_start >= *start && new_end <= *end) {
    6b60:	8833      	ldrh	r3, [r6, #0]
    6b62:	42bb      	cmp	r3, r7
    6b64:	d805      	bhi.n	6b72 <update_range+0x42>
    6b66:	8823      	ldrh	r3, [r4, #0]
    6b68:	42ab      	cmp	r3, r5
    6b6a:	d303      	bcc.n	6b74 <update_range+0x44>
		return false;
    6b6c:	2000      	movs	r0, #0
}
    6b6e:	b009      	add	sp, #36	; 0x24
    6b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*start = new_start;
    6b72:	8037      	strh	r7, [r6, #0]
	if (*end < new_end) {
    6b74:	8823      	ldrh	r3, [r4, #0]
    6b76:	42ab      	cmp	r3, r5
    6b78:	d200      	bcs.n	6b7c <update_range+0x4c>
		*end = new_end;
    6b7a:	8025      	strh	r5, [r4, #0]
	return true;
    6b7c:	2001      	movs	r0, #1
    6b7e:	e7f6      	b.n	6b6e <update_range+0x3e>
    6b80:	000155c5 	.word	0x000155c5
    6b84:	000179e0 	.word	0x000179e0
    6b88:	000169e6 	.word	0x000169e6
    6b8c:	000169ed 	.word	0x000169ed
    6b90:	00017e7d 	.word	0x00017e7d

00006b94 <gatt_ccc_changed>:
{
    6b94:	b570      	push	{r4, r5, r6, lr}
    6b96:	460d      	mov	r5, r1
	u16_t value = 0x0000;
    6b98:	2400      	movs	r4, #0
    6b9a:	6849      	ldr	r1, [r1, #4]
{
    6b9c:	b086      	sub	sp, #24
    6b9e:	4606      	mov	r6, r0
	for (i = 0; i < ccc->cfg_len; i++) {
    6ba0:	4623      	mov	r3, r4
    6ba2:	428b      	cmp	r3, r1
    6ba4:	d118      	bne.n	6bd8 <gatt_ccc_changed+0x44>
    6ba6:	f00d ff47 	bl	14a38 <_impl_k_current_get>
	BT_DBG("ccc %p value 0x%04x", ccc, value);
    6baa:	4b11      	ldr	r3, [pc, #68]	; (6bf0 <gatt_ccc_changed+0x5c>)
    6bac:	9304      	str	r3, [sp, #16]
    6bae:	9001      	str	r0, [sp, #4]
    6bb0:	9300      	str	r3, [sp, #0]
    6bb2:	9403      	str	r4, [sp, #12]
    6bb4:	4b0f      	ldr	r3, [pc, #60]	; (6bf4 <gatt_ccc_changed+0x60>)
    6bb6:	9502      	str	r5, [sp, #8]
    6bb8:	4a0f      	ldr	r2, [pc, #60]	; (6bf8 <gatt_ccc_changed+0x64>)
    6bba:	4910      	ldr	r1, [pc, #64]	; (6bfc <gatt_ccc_changed+0x68>)
    6bbc:	4810      	ldr	r0, [pc, #64]	; (6c00 <gatt_ccc_changed+0x6c>)
    6bbe:	f7fa f9e5 	bl	f8c <printk>
	if (value != ccc->value) {
    6bc2:	892b      	ldrh	r3, [r5, #8]
    6bc4:	42a3      	cmp	r3, r4
    6bc6:	d010      	beq.n	6bea <gatt_ccc_changed+0x56>
		ccc->cfg_changed(attr, value);
    6bc8:	68eb      	ldr	r3, [r5, #12]
		ccc->value = value;
    6bca:	812c      	strh	r4, [r5, #8]
		ccc->cfg_changed(attr, value);
    6bcc:	4621      	mov	r1, r4
    6bce:	4630      	mov	r0, r6
}
    6bd0:	b006      	add	sp, #24
    6bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ccc->cfg_changed(attr, value);
    6bd6:	4718      	bx	r3
		if (ccc->cfg[i].value > value) {
    6bd8:	682a      	ldr	r2, [r5, #0]
    6bda:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6bde:	3301      	adds	r3, #1
    6be0:	8912      	ldrh	r2, [r2, #8]
    6be2:	4294      	cmp	r4, r2
    6be4:	bf38      	it	cc
    6be6:	4614      	movcc	r4, r2
    6be8:	e7db      	b.n	6ba2 <gatt_ccc_changed+0xe>
}
    6bea:	b006      	add	sp, #24
    6bec:	bd70      	pop	{r4, r5, r6, pc}
    6bee:	bf00      	nop
    6bf0:	000155c5 	.word	0x000155c5
    6bf4:	00017a22 	.word	0x00017a22
    6bf8:	000169e6 	.word	0x000169e6
    6bfc:	000169ed 	.word	0x000169ed
    6c00:	00017c03 	.word	0x00017c03

00006c04 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, u8_t err,
			       const void *pdu, u16_t length,
			       void *user_data)
{
    6c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6c06:	9c08      	ldr	r4, [sp, #32]
    6c08:	460e      	mov	r6, r1
    6c0a:	4605      	mov	r5, r0
    6c0c:	f00d ff14 	bl	14a38 <_impl_k_current_get>
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);
    6c10:	4b15      	ldr	r3, [pc, #84]	; (6c68 <gatt_write_ccc_rsp+0x64>)
    6c12:	9303      	str	r3, [sp, #12]
    6c14:	9001      	str	r0, [sp, #4]
    6c16:	9300      	str	r3, [sp, #0]
    6c18:	9602      	str	r6, [sp, #8]
    6c1a:	4b14      	ldr	r3, [pc, #80]	; (6c6c <gatt_write_ccc_rsp+0x68>)
    6c1c:	4a14      	ldr	r2, [pc, #80]	; (6c70 <gatt_write_ccc_rsp+0x6c>)
    6c1e:	4915      	ldr	r1, [pc, #84]	; (6c74 <gatt_write_ccc_rsp+0x70>)
    6c20:	4815      	ldr	r0, [pc, #84]	; (6c78 <gatt_write_ccc_rsp+0x74>)
    6c22:	f7fa f9b3 	bl	f8c <printk>

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    6c26:	b196      	cbz	r6, 6c4e <gatt_write_ccc_rsp+0x4a>
    6c28:	4b14      	ldr	r3, [pc, #80]	; (6c7c <gatt_write_ccc_rsp+0x78>)
    6c2a:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode);
    6c2c:	b1d3      	cbz	r3, 6c64 <gatt_write_ccc_rsp+0x60>
	return node->next;
    6c2e:	6819      	ldr	r1, [r3, #0]
		sys_snode_t *node, *tmp, *prev = NULL;

		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
			if (node == &params->node) {
    6c30:	f104 0228 	add.w	r2, r4, #40	; 0x28
    6c34:	4293      	cmp	r3, r2
    6c36:	d106      	bne.n	6c46 <gatt_write_ccc_rsp+0x42>
				gatt_subscription_remove(conn, tmp, params);
    6c38:	4622      	mov	r2, r4
    6c3a:	4628      	mov	r0, r5
		}
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}
    6c3c:	b004      	add	sp, #16
    6c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				gatt_subscription_remove(conn, tmp, params);
    6c42:	f7ff bf47 	b.w	6ad4 <gatt_subscription_remove>
Z_GENLIST_PEEK_NEXT(slist, snode);
    6c46:	b169      	cbz	r1, 6c64 <gatt_write_ccc_rsp+0x60>
    6c48:	460b      	mov	r3, r1
    6c4a:	6809      	ldr	r1, [r1, #0]
    6c4c:	e7f2      	b.n	6c34 <gatt_write_ccc_rsp+0x30>
	} else if (!params->value) {
    6c4e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    6c50:	b943      	cbnz	r3, 6c64 <gatt_write_ccc_rsp+0x60>
		params->notify(conn, params, NULL, 0);
    6c52:	69e6      	ldr	r6, [r4, #28]
    6c54:	461a      	mov	r2, r3
    6c56:	4621      	mov	r1, r4
    6c58:	4628      	mov	r0, r5
    6c5a:	46b4      	mov	ip, r6
}
    6c5c:	b004      	add	sp, #16
    6c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->notify(conn, params, NULL, 0);
    6c62:	4760      	bx	ip
}
    6c64:	b004      	add	sp, #16
    6c66:	bd70      	pop	{r4, r5, r6, pc}
    6c68:	000155c5 	.word	0x000155c5
    6c6c:	00017aa6 	.word	0x00017aa6
    6c70:	000169e6 	.word	0x000169e6
    6c74:	000169ed 	.word	0x000169ed
    6c78:	00017d91 	.word	0x00017d91
    6c7c:	20000614 	.word	0x20000614

00006c80 <gatt_notify>:
{
    6c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c84:	4689      	mov	r9, r1
    6c86:	b086      	sub	sp, #24
    6c88:	4692      	mov	sl, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6c8a:	211b      	movs	r1, #27
    6c8c:	1c9a      	adds	r2, r3, #2
{
    6c8e:	4607      	mov	r7, r0
    6c90:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6c92:	f7ff fa17 	bl	60c4 <bt_att_create_pdu>
    6c96:	4c1c      	ldr	r4, [pc, #112]	; (6d08 <gatt_notify+0x88>)
	if (!buf) {
    6c98:	4605      	mov	r5, r0
    6c9a:	b960      	cbnz	r0, 6cb6 <gatt_notify+0x36>
		BT_WARN("No buffer available to send notification");
    6c9c:	9401      	str	r4, [sp, #4]
    6c9e:	9400      	str	r4, [sp, #0]
    6ca0:	4b1a      	ldr	r3, [pc, #104]	; (6d0c <gatt_notify+0x8c>)
    6ca2:	4a1b      	ldr	r2, [pc, #108]	; (6d10 <gatt_notify+0x90>)
    6ca4:	491b      	ldr	r1, [pc, #108]	; (6d14 <gatt_notify+0x94>)
    6ca6:	481c      	ldr	r0, [pc, #112]	; (6d18 <gatt_notify+0x98>)
    6ca8:	f7fa f970 	bl	f8c <printk>
    6cac:	f06f 000b 	mvn.w	r0, #11
}
    6cb0:	b006      	add	sp, #24
    6cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cb6:	f00d febf 	bl	14a38 <_impl_k_current_get>
	nfy = net_buf_add(buf, sizeof(*nfy));
    6cba:	f105 0808 	add.w	r8, r5, #8
	BT_DBG("conn %p handle 0x%04x", conn, handle);
    6cbe:	4b13      	ldr	r3, [pc, #76]	; (6d0c <gatt_notify+0x8c>)
    6cc0:	4a16      	ldr	r2, [pc, #88]	; (6d1c <gatt_notify+0x9c>)
    6cc2:	9404      	str	r4, [sp, #16]
    6cc4:	9001      	str	r0, [sp, #4]
    6cc6:	9400      	str	r4, [sp, #0]
    6cc8:	4912      	ldr	r1, [pc, #72]	; (6d14 <gatt_notify+0x94>)
    6cca:	f8cd 900c 	str.w	r9, [sp, #12]
    6cce:	9702      	str	r7, [sp, #8]
    6cd0:	4813      	ldr	r0, [pc, #76]	; (6d20 <gatt_notify+0xa0>)
    6cd2:	f7fa f95b 	bl	f8c <printk>
	nfy = net_buf_add(buf, sizeof(*nfy));
    6cd6:	2102      	movs	r1, #2
    6cd8:	4640      	mov	r0, r8
    6cda:	f00c fe57 	bl	1398c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6cde:	4604      	mov	r4, r0
	net_buf_add(buf, len);
    6ce0:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6ce2:	f824 9b02 	strh.w	r9, [r4], #2
	net_buf_add(buf, len);
    6ce6:	4640      	mov	r0, r8
    6ce8:	f00c fe50 	bl	1398c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6cec:	4632      	mov	r2, r6
    6cee:	4651      	mov	r1, sl
    6cf0:	4620      	mov	r0, r4
    6cf2:	f7fa ff83 	bl	1bfc <memcpy>
    6cf6:	4638      	mov	r0, r7
    6cf8:	2300      	movs	r3, #0
    6cfa:	462a      	mov	r2, r5
    6cfc:	2104      	movs	r1, #4
    6cfe:	f7fe fbef 	bl	54e0 <bt_l2cap_send_cb>
	return 0;
    6d02:	2000      	movs	r0, #0
    6d04:	e7d4      	b.n	6cb0 <gatt_notify+0x30>
    6d06:	bf00      	nop
    6d08:	000155c5 	.word	0x000155c5
    6d0c:	00017a4a 	.word	0x00017a4a
    6d10:	00016a28 	.word	0x00016a28
    6d14:	000169ed 	.word	0x000169ed
    6d18:	00017c63 	.word	0x00017c63
    6d1c:	000169e6 	.word	0x000169e6
    6d20:	00017c9c 	.word	0x00017c9c

00006d24 <gatt_register>:
{
    6d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (sys_slist_is_empty(&db)) {
    6d28:	4d32      	ldr	r5, [pc, #200]	; (6df4 <gatt_register+0xd0>)
    6d2a:	682b      	ldr	r3, [r5, #0]
{
    6d2c:	b08b      	sub	sp, #44	; 0x2c
    6d2e:	4680      	mov	r8, r0
	u16_t count = svc->attr_count;
    6d30:	e890 0090 	ldmia.w	r0, {r4, r7}
	if (sys_slist_is_empty(&db)) {
    6d34:	b15b      	cbz	r3, 6d4e <gatt_register+0x2a>
    6d36:	686b      	ldr	r3, [r5, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6d38:	2b00      	cmp	r3, #0
    6d3a:	d058      	beq.n	6dee <gatt_register+0xca>
	handle = last->attrs[last->attr_count - 1].handle;
    6d3c:	f853 2c04 	ldr.w	r2, [r3, #-4]
    6d40:	f853 3c08 	ldr.w	r3, [r3, #-8]
    6d44:	2114      	movs	r1, #20
    6d46:	fb01 3302 	mla	r3, r1, r2, r3
    6d4a:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6d4e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 6e0c <gatt_register+0xe8>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
    6d52:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 6e00 <gatt_register+0xdc>
    6d56:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 6e10 <gatt_register+0xec>
    6d5a:	b2bf      	uxth	r7, r7
    6d5c:	2214      	movs	r2, #20
    6d5e:	fb02 4707 	mla	r7, r2, r7, r4
	for (; attrs && count; attrs++, count--) {
    6d62:	b10c      	cbz	r4, 6d68 <gatt_register+0x44>
    6d64:	42bc      	cmp	r4, r7
    6d66:	d10b      	bne.n	6d80 <gatt_register+0x5c>
    6d68:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
    6d6a:	2000      	movs	r0, #0
	sys_slist_append(&db, &svc->node);
    6d6c:	f108 0308 	add.w	r3, r8, #8
    6d70:	f8c8 0008 	str.w	r0, [r8, #8]
Z_GENLIST_APPEND(slist, snode);
    6d74:	2a00      	cmp	r2, #0
    6d76:	d137      	bne.n	6de8 <gatt_register+0xc4>
	list->tail = node;
    6d78:	606b      	str	r3, [r5, #4]
	list->head = node;
    6d7a:	602b      	str	r3, [r5, #0]
	return 0;
    6d7c:	4610      	mov	r0, r2
    6d7e:	e030      	b.n	6de2 <gatt_register+0xbe>
		if (!attrs->handle) {
    6d80:	8a26      	ldrh	r6, [r4, #16]
    6d82:	b9fe      	cbnz	r6, 6dc4 <gatt_register+0xa0>
			attrs->handle = ++handle;
    6d84:	1c5e      	adds	r6, r3, #1
    6d86:	b2b6      	uxth	r6, r6
    6d88:	8226      	strh	r6, [r4, #16]
    6d8a:	f00d fe55 	bl	14a38 <_impl_k_current_get>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
    6d8e:	8a22      	ldrh	r2, [r4, #16]
    6d90:	9009      	str	r0, [sp, #36]	; 0x24
    6d92:	6820      	ldr	r0, [r4, #0]
    6d94:	9208      	str	r2, [sp, #32]
    6d96:	f7fb f92f 	bl	1ff8 <bt_uuid_str>
    6d9a:	f8cd 9018 	str.w	r9, [sp, #24]
    6d9e:	7ca1      	ldrb	r1, [r4, #18]
    6da0:	9a08      	ldr	r2, [sp, #32]
    6da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6da4:	9105      	str	r1, [sp, #20]
    6da6:	9004      	str	r0, [sp, #16]
    6da8:	9203      	str	r2, [sp, #12]
    6daa:	9402      	str	r4, [sp, #8]
    6dac:	9301      	str	r3, [sp, #4]
    6dae:	f8cd 9000 	str.w	r9, [sp]
    6db2:	4653      	mov	r3, sl
    6db4:	465a      	mov	r2, fp
    6db6:	4910      	ldr	r1, [pc, #64]	; (6df8 <gatt_register+0xd4>)
    6db8:	4810      	ldr	r0, [pc, #64]	; (6dfc <gatt_register+0xd8>)
    6dba:	f7fa f8e7 	bl	f8c <printk>
	for (; attrs && count; attrs++, count--) {
    6dbe:	3414      	adds	r4, #20
    6dc0:	4633      	mov	r3, r6
    6dc2:	e7ce      	b.n	6d62 <gatt_register+0x3e>
		} else if (attrs->handle > handle) {
    6dc4:	42b3      	cmp	r3, r6
    6dc6:	d3e0      	bcc.n	6d8a <gatt_register+0x66>
			BT_ERR("Unable to register handle 0x%04x",
    6dc8:	f8cd 9008 	str.w	r9, [sp, #8]
    6dcc:	9601      	str	r6, [sp, #4]
    6dce:	f8cd 9000 	str.w	r9, [sp]
    6dd2:	4b0b      	ldr	r3, [pc, #44]	; (6e00 <gatt_register+0xdc>)
    6dd4:	4a0b      	ldr	r2, [pc, #44]	; (6e04 <gatt_register+0xe0>)
    6dd6:	4908      	ldr	r1, [pc, #32]	; (6df8 <gatt_register+0xd4>)
    6dd8:	480b      	ldr	r0, [pc, #44]	; (6e08 <gatt_register+0xe4>)
    6dda:	f7fa f8d7 	bl	f8c <printk>
			return -EINVAL;
    6dde:	f06f 0015 	mvn.w	r0, #21
}
    6de2:	b00b      	add	sp, #44	; 0x2c
    6de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
    6de8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6dea:	606b      	str	r3, [r5, #4]
    6dec:	e7f9      	b.n	6de2 <gatt_register+0xbe>
	handle = last->attrs[last->attr_count - 1].handle;
    6dee:	681b      	ldr	r3, [r3, #0]
    6df0:	deff      	udf	#255	; 0xff
    6df2:	bf00      	nop
    6df4:	200005a8 	.word	0x200005a8
    6df8:	000169ed 	.word	0x000169ed
    6dfc:	00017cf8 	.word	0x00017cf8
    6e00:	000179b7 	.word	0x000179b7
    6e04:	0001699e 	.word	0x0001699e
    6e08:	00017cc7 	.word	0x00017cc7
    6e0c:	000155c5 	.word	0x000155c5
    6e10:	000169e6 	.word	0x000169e6

00006e14 <gatt_send.constprop.27>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    6e14:	b530      	push	{r4, r5, lr}
    6e16:	460d      	mov	r5, r1
    6e18:	b085      	sub	sp, #20
	if (params) {
    6e1a:	b1c3      	cbz	r3, 6e4e <gatt_send.constprop.27+0x3a>
		req->func = func;
    6e1c:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    6e1e:	2200      	movs	r2, #0
		req->buf = buf;
    6e20:	6119      	str	r1, [r3, #16]
		req->destroy = destroy;
    6e22:	609a      	str	r2, [r3, #8]
		err = bt_att_req_send(conn, req);
    6e24:	4619      	mov	r1, r3
    6e26:	f7ff fe15 	bl	6a54 <bt_att_req_send>
		err = bt_att_send(conn, buf);
    6e2a:	4604      	mov	r4, r0
	if (err) {
    6e2c:	b160      	cbz	r0, 6e48 <gatt_send.constprop.27+0x34>
		BT_ERR("Error sending ATT PDU: %d", err);
    6e2e:	4b09      	ldr	r3, [pc, #36]	; (6e54 <gatt_send.constprop.27+0x40>)
    6e30:	9302      	str	r3, [sp, #8]
    6e32:	e88d 0018 	stmia.w	sp, {r3, r4}
    6e36:	4a08      	ldr	r2, [pc, #32]	; (6e58 <gatt_send.constprop.27+0x44>)
    6e38:	4b08      	ldr	r3, [pc, #32]	; (6e5c <gatt_send.constprop.27+0x48>)
    6e3a:	4909      	ldr	r1, [pc, #36]	; (6e60 <gatt_send.constprop.27+0x4c>)
    6e3c:	4809      	ldr	r0, [pc, #36]	; (6e64 <gatt_send.constprop.27+0x50>)
    6e3e:	f7fa f8a5 	bl	f8c <printk>
		net_buf_unref(buf);
    6e42:	4628      	mov	r0, r5
    6e44:	f00c fd70 	bl	13928 <net_buf_unref>
}
    6e48:	4620      	mov	r0, r4
    6e4a:	b005      	add	sp, #20
    6e4c:	bd30      	pop	{r4, r5, pc}
		err = bt_att_send(conn, buf);
    6e4e:	f7ff fd9b 	bl	6988 <bt_att_send>
    6e52:	e7ea      	b.n	6e2a <gatt_send.constprop.27+0x16>
    6e54:	000155c5 	.word	0x000155c5
    6e58:	0001699e 	.word	0x0001699e
    6e5c:	00017a56 	.word	0x00017a56
    6e60:	000169ed 	.word	0x000169ed
    6e64:	00017d37 	.word	0x00017d37

00006e68 <gatt_write_ccc.constprop.20>:

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    6e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6e6c:	460d      	mov	r5, r1
    6e6e:	b087      	sub	sp, #28
    6e70:	4616      	mov	r6, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    6e72:	2112      	movs	r1, #18
    6e74:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    6e76:	4680      	mov	r8, r0
    6e78:	4699      	mov	r9, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    6e7a:	f7ff f923 	bl	60c4 <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    6e7e:	4604      	mov	r4, r0
    6e80:	b308      	cbz	r0, 6ec6 <gatt_write_ccc.constprop.20+0x5e>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    6e82:	f100 0708 	add.w	r7, r0, #8
    6e86:	2102      	movs	r1, #2
    6e88:	4638      	mov	r0, r7
    6e8a:	f00c fd7f 	bl	1398c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    6e8e:	4631      	mov	r1, r6
	req->handle = sys_cpu_to_le16(handle);
    6e90:	8005      	strh	r5, [r0, #0]
	net_buf_add_le16(buf, value);
    6e92:	4638      	mov	r0, r7
    6e94:	f00c fd91 	bl	139ba <net_buf_simple_add_le16>
    6e98:	f00d fdce 	bl	14a38 <_impl_k_current_get>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);
    6e9c:	4b0c      	ldr	r3, [pc, #48]	; (6ed0 <gatt_write_ccc.constprop.20+0x68>)
    6e9e:	9304      	str	r3, [sp, #16]
    6ea0:	9001      	str	r0, [sp, #4]
    6ea2:	9300      	str	r3, [sp, #0]
    6ea4:	9603      	str	r6, [sp, #12]
    6ea6:	9502      	str	r5, [sp, #8]
    6ea8:	4b0a      	ldr	r3, [pc, #40]	; (6ed4 <gatt_write_ccc.constprop.20+0x6c>)
    6eaa:	4a0b      	ldr	r2, [pc, #44]	; (6ed8 <gatt_write_ccc.constprop.20+0x70>)
    6eac:	490b      	ldr	r1, [pc, #44]	; (6edc <gatt_write_ccc.constprop.20+0x74>)
    6eae:	480c      	ldr	r0, [pc, #48]	; (6ee0 <gatt_write_ccc.constprop.20+0x78>)
    6eb0:	f7fa f86c 	bl	f8c <printk>

	return gatt_send(conn, buf, func, params, NULL);
    6eb4:	4a0b      	ldr	r2, [pc, #44]	; (6ee4 <gatt_write_ccc.constprop.20+0x7c>)
    6eb6:	464b      	mov	r3, r9
    6eb8:	4621      	mov	r1, r4
    6eba:	4640      	mov	r0, r8
}
    6ebc:	b007      	add	sp, #28
    6ebe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return gatt_send(conn, buf, func, params, NULL);
    6ec2:	f7ff bfa7 	b.w	6e14 <gatt_send.constprop.27>
}
    6ec6:	f06f 000b 	mvn.w	r0, #11
    6eca:	b007      	add	sp, #28
    6ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6ed0:	000155c5 	.word	0x000155c5
    6ed4:	00017ab9 	.word	0x00017ab9
    6ed8:	000169e6 	.word	0x000169e6
    6edc:	000169ed 	.word	0x000169ed
    6ee0:	00017d61 	.word	0x00017d61
    6ee4:	00006c05 	.word	0x00006c05

00006ee8 <gatt_indicate>:
{
    6ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    6eec:	694b      	ldr	r3, [r1, #20]
{
    6eee:	b089      	sub	sp, #36	; 0x24
    6ef0:	4607      	mov	r7, r0
	u16_t value_handle = params->attr->handle;
    6ef2:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6ef4:	6818      	ldr	r0, [r3, #0]
    6ef6:	2300      	movs	r3, #0
{
    6ef8:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6efa:	f88d 301c 	strb.w	r3, [sp, #28]
    6efe:	a907      	add	r1, sp, #28
    6f00:	f642 0303 	movw	r3, #10243	; 0x2803
    6f04:	f8ad 301e 	strh.w	r3, [sp, #30]
    6f08:	f7fa fff6 	bl	1ef8 <bt_uuid_cmp>
    6f0c:	b930      	cbnz	r0, 6f1c <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    6f0e:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6f10:	68db      	ldr	r3, [r3, #12]
    6f12:	791b      	ldrb	r3, [r3, #4]
    6f14:	069b      	lsls	r3, r3, #26
    6f16:	d53d      	bpl.n	6f94 <gatt_indicate+0xac>
		value_handle += 1;
    6f18:	3501      	adds	r5, #1
    6f1a:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    6f1c:	8c22      	ldrh	r2, [r4, #32]
    6f1e:	4e1f      	ldr	r6, [pc, #124]	; (6f9c <gatt_indicate+0xb4>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6f20:	3202      	adds	r2, #2
    6f22:	211d      	movs	r1, #29
    6f24:	4638      	mov	r0, r7
    6f26:	f7ff f8cd 	bl	60c4 <bt_att_create_pdu>
	if (!buf) {
    6f2a:	4680      	mov	r8, r0
    6f2c:	b960      	cbnz	r0, 6f48 <gatt_indicate+0x60>
		BT_WARN("No buffer available to send indication");
    6f2e:	9601      	str	r6, [sp, #4]
    6f30:	9600      	str	r6, [sp, #0]
    6f32:	4b1b      	ldr	r3, [pc, #108]	; (6fa0 <gatt_indicate+0xb8>)
    6f34:	4a1b      	ldr	r2, [pc, #108]	; (6fa4 <gatt_indicate+0xbc>)
    6f36:	491c      	ldr	r1, [pc, #112]	; (6fa8 <gatt_indicate+0xc0>)
    6f38:	481c      	ldr	r0, [pc, #112]	; (6fac <gatt_indicate+0xc4>)
    6f3a:	f7fa f827 	bl	f8c <printk>
		return -ENOMEM;
    6f3e:	f06f 000b 	mvn.w	r0, #11
}
    6f42:	b009      	add	sp, #36	; 0x24
    6f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6f48:	f00d fd76 	bl	14a38 <_impl_k_current_get>
	ind = net_buf_add(buf, sizeof(*ind));
    6f4c:	f108 0908 	add.w	r9, r8, #8
	BT_DBG("conn %p handle 0x%04x", conn, value_handle);
    6f50:	4b13      	ldr	r3, [pc, #76]	; (6fa0 <gatt_indicate+0xb8>)
    6f52:	4a17      	ldr	r2, [pc, #92]	; (6fb0 <gatt_indicate+0xc8>)
    6f54:	9604      	str	r6, [sp, #16]
    6f56:	9001      	str	r0, [sp, #4]
    6f58:	9600      	str	r6, [sp, #0]
    6f5a:	9503      	str	r5, [sp, #12]
    6f5c:	9702      	str	r7, [sp, #8]
    6f5e:	4912      	ldr	r1, [pc, #72]	; (6fa8 <gatt_indicate+0xc0>)
    6f60:	4814      	ldr	r0, [pc, #80]	; (6fb4 <gatt_indicate+0xcc>)
    6f62:	f7fa f813 	bl	f8c <printk>
	ind = net_buf_add(buf, sizeof(*ind));
    6f66:	2102      	movs	r1, #2
    6f68:	4648      	mov	r0, r9
    6f6a:	f00c fd0f 	bl	1398c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6f6e:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    6f70:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    6f72:	f826 5b02 	strh.w	r5, [r6], #2
	net_buf_add(buf, params->len);
    6f76:	4648      	mov	r0, r9
    6f78:	f00c fd08 	bl	1398c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6f7c:	8c22      	ldrh	r2, [r4, #32]
    6f7e:	69e1      	ldr	r1, [r4, #28]
    6f80:	4630      	mov	r0, r6
    6f82:	f7fa fe3b 	bl	1bfc <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    6f86:	4623      	mov	r3, r4
    6f88:	4a0b      	ldr	r2, [pc, #44]	; (6fb8 <gatt_indicate+0xd0>)
    6f8a:	4641      	mov	r1, r8
    6f8c:	4638      	mov	r0, r7
    6f8e:	f7ff ff41 	bl	6e14 <gatt_send.constprop.27>
    6f92:	e7d6      	b.n	6f42 <gatt_indicate+0x5a>
			return -EINVAL;
    6f94:	f06f 0015 	mvn.w	r0, #21
    6f98:	e7d3      	b.n	6f42 <gatt_indicate+0x5a>
    6f9a:	bf00      	nop
    6f9c:	000155c5 	.word	0x000155c5
    6fa0:	00017a60 	.word	0x00017a60
    6fa4:	00016a28 	.word	0x00016a28
    6fa8:	000169ed 	.word	0x000169ed
    6fac:	00017c2c 	.word	0x00017c2c
    6fb0:	000169e6 	.word	0x000169e6
    6fb4:	00017c9c 	.word	0x00017c9c
    6fb8:	00006ac5 	.word	0x00006ac5

00006fbc <notify_cb>:
{
    6fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fc0:	b089      	sub	sp, #36	; 0x24
    6fc2:	4604      	mov	r4, r0
    6fc4:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6fc6:	2600      	movs	r6, #0
    6fc8:	f642 1302 	movw	r3, #10498	; 0x2902
    6fcc:	a906      	add	r1, sp, #24
    6fce:	6800      	ldr	r0, [r0, #0]
    6fd0:	f88d 6018 	strb.w	r6, [sp, #24]
    6fd4:	f8ad 301a 	strh.w	r3, [sp, #26]
    6fd8:	f7fa ff8e 	bl	1ef8 <bt_uuid_cmp>
    6fdc:	b178      	cbz	r0, 6ffe <notify_cb+0x42>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    6fde:	f642 0303 	movw	r3, #10243	; 0x2803
    6fe2:	6820      	ldr	r0, [r4, #0]
    6fe4:	f88d 601c 	strb.w	r6, [sp, #28]
    6fe8:	a907      	add	r1, sp, #28
    6fea:	f8ad 301e 	strh.w	r3, [sp, #30]
    6fee:	f7fa ff83 	bl	1ef8 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    6ff2:	1b80      	subs	r0, r0, r6
    6ff4:	bf18      	it	ne
    6ff6:	2001      	movne	r0, #1
}
    6ff8:	b009      	add	sp, #36	; 0x24
    6ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    6ffe:	68a2      	ldr	r2, [r4, #8]
    7000:	4b35      	ldr	r3, [pc, #212]	; (70d8 <notify_cb+0x11c>)
    7002:	429a      	cmp	r2, r3
    7004:	d001      	beq.n	700a <notify_cb+0x4e>
		return BT_GATT_ITER_CONTINUE;
    7006:	2001      	movs	r0, #1
    7008:	e7f6      	b.n	6ff8 <notify_cb+0x3c>
	ccc = attr->user_data;
    700a:	68e7      	ldr	r7, [r4, #12]
    700c:	4c33      	ldr	r4, [pc, #204]	; (70dc <notify_cb+0x120>)
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
    700e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 70f0 <notify_cb+0x134>
	for (i = 0; i < ccc->cfg_len; i++) {
    7012:	4606      	mov	r6, r0
    7014:	46a2      	mov	sl, r4
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	429e      	cmp	r6, r3
    701a:	d2f4      	bcs.n	7006 <notify_cb+0x4a>
		if (ccc->cfg[i].value != data->type) {
    701c:	6838      	ldr	r0, [r7, #0]
    701e:	88ab      	ldrh	r3, [r5, #4]
    7020:	eb00 1006 	add.w	r0, r0, r6, lsl #4
    7024:	8902      	ldrh	r2, [r0, #8]
    7026:	429a      	cmp	r2, r3
    7028:	d12b      	bne.n	7082 <notify_cb+0xc6>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    702a:	f7fd fca7 	bl	497c <bt_conn_lookup_addr_le>
		if (!conn) {
    702e:	4681      	mov	r9, r0
    7030:	2800      	cmp	r0, #0
    7032:	d133      	bne.n	709c <notify_cb+0xe0>
			if (ccc->cfg == sc_ccc_cfg) {
    7034:	683b      	ldr	r3, [r7, #0]
    7036:	4553      	cmp	r3, sl
    7038:	d123      	bne.n	7082 <notify_cb+0xc6>
				sc_save(&ccc->cfg[i], data->params);
    703a:	696b      	ldr	r3, [r5, #20]
	memcpy(&data, params->data, params->len);
    703c:	a807      	add	r0, sp, #28
    703e:	8c1a      	ldrh	r2, [r3, #32]
    7040:	69d9      	ldr	r1, [r3, #28]
    7042:	f7fa fddb 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    7046:	46a6      	mov	lr, r4
    7048:	f83e 3f0c 	ldrh.w	r3, [lr, #12]!
    704c:	b9e3      	cbnz	r3, 7088 <notify_cb+0xcc>
    704e:	89e3      	ldrh	r3, [r4, #14]
    7050:	b9d3      	cbnz	r3, 7088 <notify_cb+0xcc>
		*stored = data;
    7052:	9807      	ldr	r0, [sp, #28]
    7054:	f8ce 0000 	str.w	r0, [lr]
    7058:	f00d fcee 	bl	14a38 <_impl_k_current_get>
    705c:	4681      	mov	r9, r0
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
    705e:	4620      	mov	r0, r4
    7060:	f7fa fe78 	bl	1d54 <bt_addr_le_str>
    7064:	f8cd 8014 	str.w	r8, [sp, #20]
    7068:	89e3      	ldrh	r3, [r4, #14]
    706a:	9304      	str	r3, [sp, #16]
    706c:	89a3      	ldrh	r3, [r4, #12]
    706e:	9303      	str	r3, [sp, #12]
    7070:	9002      	str	r0, [sp, #8]
    7072:	e88d 0300 	stmia.w	sp, {r8, r9}
    7076:	4b1a      	ldr	r3, [pc, #104]	; (70e0 <notify_cb+0x124>)
    7078:	4a1a      	ldr	r2, [pc, #104]	; (70e4 <notify_cb+0x128>)
    707a:	491b      	ldr	r1, [pc, #108]	; (70e8 <notify_cb+0x12c>)
    707c:	481b      	ldr	r0, [pc, #108]	; (70ec <notify_cb+0x130>)
    707e:	f7f9 ff85 	bl	f8c <printk>
	for (i = 0; i < ccc->cfg_len; i++) {
    7082:	3601      	adds	r6, #1
    7084:	3410      	adds	r4, #16
    7086:	e7c6      	b.n	7016 <notify_cb+0x5a>
	update_range(&stored->start, &stored->end,
    7088:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    708c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7090:	f104 010e 	add.w	r1, r4, #14
    7094:	4670      	mov	r0, lr
    7096:	f7ff fd4b 	bl	6b30 <update_range>
    709a:	e7dd      	b.n	7058 <notify_cb+0x9c>
		if (conn->state != BT_CONN_CONNECTED) {
    709c:	7a43      	ldrb	r3, [r0, #9]
    709e:	2b03      	cmp	r3, #3
    70a0:	d002      	beq.n	70a8 <notify_cb+0xec>
			bt_conn_unref(conn);
    70a2:	f7fd fca1 	bl	49e8 <bt_conn_unref>
    70a6:	e7ec      	b.n	7082 <notify_cb+0xc6>
		if (data->type == BT_GATT_CCC_INDICATE) {
    70a8:	88ab      	ldrh	r3, [r5, #4]
    70aa:	2b02      	cmp	r3, #2
    70ac:	d10d      	bne.n	70ca <notify_cb+0x10e>
			err = gatt_indicate(conn, data->params);
    70ae:	6969      	ldr	r1, [r5, #20]
    70b0:	f7ff ff1a 	bl	6ee8 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    70b4:	4683      	mov	fp, r0
		bt_conn_unref(conn);
    70b6:	4648      	mov	r0, r9
    70b8:	f7fd fc96 	bl	49e8 <bt_conn_unref>
		if (err < 0) {
    70bc:	f1bb 0f00 	cmp.w	fp, #0
    70c0:	f04f 0000 	mov.w	r0, #0
    70c4:	db98      	blt.n	6ff8 <notify_cb+0x3c>
		data->err = 0;
    70c6:	6028      	str	r0, [r5, #0]
    70c8:	e7db      	b.n	7082 <notify_cb+0xc6>
			err = gatt_notify(conn, data->attr->handle,
    70ca:	68a9      	ldr	r1, [r5, #8]
    70cc:	8a2b      	ldrh	r3, [r5, #16]
    70ce:	68ea      	ldr	r2, [r5, #12]
    70d0:	8a09      	ldrh	r1, [r1, #16]
    70d2:	f7ff fdd5 	bl	6c80 <gatt_notify>
    70d6:	e7ed      	b.n	70b4 <notify_cb+0xf8>
    70d8:	0000739d 	.word	0x0000739d
    70dc:	20000604 	.word	0x20000604
    70e0:	00017a6e 	.word	0x00017a6e
    70e4:	000169e6 	.word	0x000169e6
    70e8:	000169ed 	.word	0x000169ed
    70ec:	00017db1 	.word	0x00017db1
    70f0:	000155c5 	.word	0x000155c5

000070f4 <sc_indicate.constprop.28>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    70f4:	b530      	push	{r4, r5, lr}
    70f6:	4c1e      	ldr	r4, [pc, #120]	; (7170 <sc_indicate.constprop.28+0x7c>)
    70f8:	f3bf 8f5b 	dmb	ish
    70fc:	b085      	sub	sp, #20
    70fe:	4602      	mov	r2, r0
    7100:	460b      	mov	r3, r1
    7102:	f104 0550 	add.w	r5, r4, #80	; 0x50
    7106:	e855 1f00 	ldrex	r1, [r5]
    710a:	f041 0001 	orr.w	r0, r1, #1
    710e:	e845 0e00 	strex	lr, r0, [r5]
    7112:	f1be 0f00 	cmp.w	lr, #0
    7116:	d1f6      	bne.n	7106 <sc_indicate.constprop.28+0x12>
    7118:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    711c:	07c9      	lsls	r1, r1, #31
    711e:	d415      	bmi.n	714c <sc_indicate.constprop.28+0x58>
		sc->start = start;
    7120:	84a2      	strh	r2, [r4, #36]	; 0x24
		sc->end = end;
    7122:	84e3      	strh	r3, [r4, #38]	; 0x26
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7124:	f3bf 8f5b 	dmb	ish
    7128:	6d23      	ldr	r3, [r4, #80]	; 0x50
    712a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    712e:	079b      	lsls	r3, r3, #30
    7130:	d516      	bpl.n	7160 <sc_indicate.constprop.28+0x6c>
    7132:	f00d fc81 	bl	14a38 <_impl_k_current_get>
		BT_DBG("indicate pending, waiting until complete...");
    7136:	4b0f      	ldr	r3, [pc, #60]	; (7174 <sc_indicate.constprop.28+0x80>)
    7138:	9302      	str	r3, [sp, #8]
    713a:	9001      	str	r0, [sp, #4]
    713c:	9300      	str	r3, [sp, #0]
    713e:	4a0e      	ldr	r2, [pc, #56]	; (7178 <sc_indicate.constprop.28+0x84>)
    7140:	4b0e      	ldr	r3, [pc, #56]	; (717c <sc_indicate.constprop.28+0x88>)
    7142:	490f      	ldr	r1, [pc, #60]	; (7180 <sc_indicate.constprop.28+0x8c>)
    7144:	480f      	ldr	r0, [pc, #60]	; (7184 <sc_indicate.constprop.28+0x90>)
    7146:	f7f9 ff21 	bl	f8c <printk>
    714a:	e007      	b.n	715c <sc_indicate.constprop.28+0x68>
	if (!update_range(&sc->start, &sc->end, start, end)) {
    714c:	f104 0126 	add.w	r1, r4, #38	; 0x26
    7150:	f104 0024 	add.w	r0, r4, #36	; 0x24
    7154:	f7ff fcec 	bl	6b30 <update_range>
    7158:	2800      	cmp	r0, #0
    715a:	d1e3      	bne.n	7124 <sc_indicate.constprop.28+0x30>
}
    715c:	b005      	add	sp, #20
    715e:	bd30      	pop	{r4, r5, pc}
    7160:	4909      	ldr	r1, [pc, #36]	; (7188 <sc_indicate.constprop.28+0x94>)
    7162:	480a      	ldr	r0, [pc, #40]	; (718c <sc_indicate.constprop.28+0x98>)
    7164:	220a      	movs	r2, #10
    7166:	b005      	add	sp, #20
    7168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    716c:	f00d bfce 	b.w	1510c <k_delayed_work_submit_to_queue>
    7170:	200005b0 	.word	0x200005b0
    7174:	000155c5 	.word	0x000155c5
    7178:	000169e6 	.word	0x000169e6
    717c:	000179ed 	.word	0x000179ed
    7180:	000169ed 	.word	0x000169ed
    7184:	00017e0f 	.word	0x00017e0f
    7188:	200005d8 	.word	0x200005d8
    718c:	200019b8 	.word	0x200019b8

00007190 <connected_cb>:
{
    7190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7194:	6882      	ldr	r2, [r0, #8]
    7196:	4b25      	ldr	r3, [pc, #148]	; (722c <connected_cb+0x9c>)
    7198:	429a      	cmp	r2, r3
{
    719a:	b086      	sub	sp, #24
    719c:	4607      	mov	r7, r0
    719e:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    71a0:	d13e      	bne.n	7220 <connected_cb+0x90>
	ccc = attr->user_data;
    71a2:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    71a4:	2600      	movs	r6, #0
    71a6:	686b      	ldr	r3, [r5, #4]
    71a8:	429e      	cmp	r6, r3
    71aa:	d239      	bcs.n	7220 <connected_cb+0x90>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    71ac:	6829      	ldr	r1, [r5, #0]
    71ae:	ea4f 1806 	mov.w	r8, r6, lsl #4
    71b2:	4441      	add	r1, r8
    71b4:	4620      	mov	r0, r4
    71b6:	f7fd fb81 	bl	48bc <bt_conn_addr_le_cmp>
    71ba:	2800      	cmp	r0, #0
    71bc:	d134      	bne.n	7228 <connected_cb+0x98>
		if (ccc->cfg[i].value) {
    71be:	682b      	ldr	r3, [r5, #0]
    71c0:	4443      	add	r3, r8
    71c2:	891b      	ldrh	r3, [r3, #8]
    71c4:	2b00      	cmp	r3, #0
    71c6:	d02f      	beq.n	7228 <connected_cb+0x98>
			gatt_ccc_changed(attr, ccc);
    71c8:	4629      	mov	r1, r5
    71ca:	4638      	mov	r0, r7
    71cc:	f7ff fce2 	bl	6b94 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    71d0:	682c      	ldr	r4, [r5, #0]
    71d2:	4b17      	ldr	r3, [pc, #92]	; (7230 <connected_cb+0xa0>)
    71d4:	429c      	cmp	r4, r3
    71d6:	d123      	bne.n	7220 <connected_cb+0x90>
				sc_restore(&ccc->cfg[i]);
    71d8:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    71da:	89a3      	ldrh	r3, [r4, #12]
    71dc:	b90b      	cbnz	r3, 71e2 <connected_cb+0x52>
    71de:	89e3      	ldrh	r3, [r4, #14]
    71e0:	b1f3      	cbz	r3, 7220 <connected_cb+0x90>
    71e2:	f00d fc29 	bl	14a38 <_impl_k_current_get>
    71e6:	4605      	mov	r5, r0
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
    71e8:	4620      	mov	r0, r4
    71ea:	f7fa fdb3 	bl	1d54 <bt_addr_le_str>
    71ee:	4b11      	ldr	r3, [pc, #68]	; (7234 <connected_cb+0xa4>)
    71f0:	9305      	str	r3, [sp, #20]
    71f2:	89e2      	ldrh	r2, [r4, #14]
    71f4:	9204      	str	r2, [sp, #16]
    71f6:	89a2      	ldrh	r2, [r4, #12]
    71f8:	9203      	str	r2, [sp, #12]
    71fa:	9002      	str	r0, [sp, #8]
    71fc:	4a0e      	ldr	r2, [pc, #56]	; (7238 <connected_cb+0xa8>)
    71fe:	490f      	ldr	r1, [pc, #60]	; (723c <connected_cb+0xac>)
    7200:	480f      	ldr	r0, [pc, #60]	; (7240 <connected_cb+0xb0>)
    7202:	e88d 0028 	stmia.w	sp, {r3, r5}
    7206:	4b0f      	ldr	r3, [pc, #60]	; (7244 <connected_cb+0xb4>)
    7208:	f7f9 fec0 	bl	f8c <printk>
	sc_indicate(&gatt_sc, data->start, data->end);
    720c:	89e1      	ldrh	r1, [r4, #14]
    720e:	f834 0f0c 	ldrh.w	r0, [r4, #12]!
    7212:	f7ff ff6f 	bl	70f4 <sc_indicate.constprop.28>
	memset(cfg->data, 0, sizeof(cfg->data));
    7216:	2204      	movs	r2, #4
    7218:	2100      	movs	r1, #0
    721a:	4620      	mov	r0, r4
    721c:	f7fa fd1a 	bl	1c54 <memset>
}
    7220:	2001      	movs	r0, #1
    7222:	b006      	add	sp, #24
    7224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    7228:	3601      	adds	r6, #1
    722a:	e7bc      	b.n	71a6 <connected_cb+0x16>
    722c:	0000739d 	.word	0x0000739d
    7230:	20000604 	.word	0x20000604
    7234:	000155c5 	.word	0x000155c5
    7238:	000169e6 	.word	0x000169e6
    723c:	000169ed 	.word	0x000169ed
    7240:	00017db1 	.word	0x00017db1
    7244:	00017a76 	.word	0x00017a76

00007248 <sc_indicate_rsp>:
{
    7248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    724a:	4614      	mov	r4, r2
    724c:	f00d fbf4 	bl	14a38 <_impl_k_current_get>
	BT_DBG("err 0x%02x", err);
    7250:	4b15      	ldr	r3, [pc, #84]	; (72a8 <sc_indicate_rsp+0x60>)
    7252:	9303      	str	r3, [sp, #12]
    7254:	9001      	str	r0, [sp, #4]
    7256:	9300      	str	r3, [sp, #0]
    7258:	4914      	ldr	r1, [pc, #80]	; (72ac <sc_indicate_rsp+0x64>)
    725a:	4b15      	ldr	r3, [pc, #84]	; (72b0 <sc_indicate_rsp+0x68>)
    725c:	9402      	str	r4, [sp, #8]
    725e:	4a15      	ldr	r2, [pc, #84]	; (72b4 <sc_indicate_rsp+0x6c>)
    7260:	4815      	ldr	r0, [pc, #84]	; (72b8 <sc_indicate_rsp+0x70>)
    7262:	f7f9 fe93 	bl	f8c <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7266:	f3bf 8f5b 	dmb	ish
    726a:	4914      	ldr	r1, [pc, #80]	; (72bc <sc_indicate_rsp+0x74>)
    726c:	f101 0350 	add.w	r3, r1, #80	; 0x50
    7270:	e853 2f00 	ldrex	r2, [r3]
    7274:	f022 0202 	bic.w	r2, r2, #2
    7278:	e843 2000 	strex	r0, r2, [r3]
    727c:	2800      	cmp	r0, #0
    727e:	d1f7      	bne.n	7270 <sc_indicate_rsp+0x28>
    7280:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7284:	f3bf 8f5b 	dmb	ish
    7288:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    728a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    728e:	07db      	lsls	r3, r3, #31
    7290:	d507      	bpl.n	72a2 <sc_indicate_rsp+0x5a>
    7292:	480b      	ldr	r0, [pc, #44]	; (72c0 <sc_indicate_rsp+0x78>)
    7294:	2200      	movs	r2, #0
    7296:	3128      	adds	r1, #40	; 0x28
}
    7298:	b004      	add	sp, #16
    729a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    729e:	f00d bf35 	b.w	1510c <k_delayed_work_submit_to_queue>
    72a2:	b004      	add	sp, #16
    72a4:	bd10      	pop	{r4, pc}
    72a6:	bf00      	nop
    72a8:	000155c5 	.word	0x000155c5
    72ac:	000169ed 	.word	0x000169ed
    72b0:	000179c5 	.word	0x000179c5
    72b4:	000169e6 	.word	0x000169e6
    72b8:	00017d91 	.word	0x00017d91
    72bc:	200005b0 	.word	0x200005b0
    72c0:	200019b8 	.word	0x200019b8

000072c4 <disconnected_cb>:
{
    72c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    72c8:	6882      	ldr	r2, [r0, #8]
    72ca:	4b2e      	ldr	r3, [pc, #184]	; (7384 <disconnected_cb+0xc0>)
    72cc:	429a      	cmp	r2, r3
{
    72ce:	b086      	sub	sp, #24
    72d0:	4680      	mov	r8, r0
    72d2:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    72d4:	d135      	bne.n	7342 <disconnected_cb+0x7e>
	ccc = attr->user_data;
    72d6:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    72d8:	8923      	ldrh	r3, [r4, #8]
    72da:	2b00      	cmp	r3, #0
    72dc:	d031      	beq.n	7342 <disconnected_cb+0x7e>
    72de:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    72e0:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    72e4:	6863      	ldr	r3, [r4, #4]
    72e6:	429e      	cmp	r6, r3
    72e8:	d318      	bcc.n	731c <disconnected_cb+0x58>
	memset(&ccc->value, 0, sizeof(ccc->value));
    72ea:	2202      	movs	r2, #2
    72ec:	2100      	movs	r1, #0
    72ee:	f104 0008 	add.w	r0, r4, #8
    72f2:	f7fa fcaf 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    72f6:	68e3      	ldr	r3, [r4, #12]
    72f8:	b113      	cbz	r3, 7300 <disconnected_cb+0x3c>
		ccc->cfg_changed(attr, ccc->value);
    72fa:	8921      	ldrh	r1, [r4, #8]
    72fc:	4640      	mov	r0, r8
    72fe:	4798      	blx	r3
    7300:	f00d fb9a 	bl	14a38 <_impl_k_current_get>
	BT_DBG("ccc %p reseted", ccc);
    7304:	4b20      	ldr	r3, [pc, #128]	; (7388 <disconnected_cb+0xc4>)
    7306:	9303      	str	r3, [sp, #12]
    7308:	9001      	str	r0, [sp, #4]
    730a:	9300      	str	r3, [sp, #0]
    730c:	9402      	str	r4, [sp, #8]
    730e:	4b1f      	ldr	r3, [pc, #124]	; (738c <disconnected_cb+0xc8>)
    7310:	4a1f      	ldr	r2, [pc, #124]	; (7390 <disconnected_cb+0xcc>)
    7312:	4920      	ldr	r1, [pc, #128]	; (7394 <disconnected_cb+0xd0>)
    7314:	4820      	ldr	r0, [pc, #128]	; (7398 <disconnected_cb+0xd4>)
    7316:	f7f9 fe39 	bl	f8c <printk>
    731a:	e012      	b.n	7342 <disconnected_cb+0x7e>
		if (!ccc->cfg[i].value) {
    731c:	6821      	ldr	r1, [r4, #0]
    731e:	0135      	lsls	r5, r6, #4
    7320:	4429      	add	r1, r5
    7322:	890b      	ldrh	r3, [r1, #8]
    7324:	b19b      	cbz	r3, 734e <disconnected_cb+0x8a>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7326:	4648      	mov	r0, r9
    7328:	f7fd fac8 	bl	48bc <bt_conn_addr_le_cmp>
    732c:	b188      	cbz	r0, 7352 <disconnected_cb+0x8e>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    732e:	6820      	ldr	r0, [r4, #0]
    7330:	4428      	add	r0, r5
    7332:	f7fd fb23 	bl	497c <bt_conn_lookup_addr_le>
			if (tmp) {
    7336:	b150      	cbz	r0, 734e <disconnected_cb+0x8a>
				if (tmp->state == BT_CONN_CONNECTED) {
    7338:	7a43      	ldrb	r3, [r0, #9]
    733a:	2b03      	cmp	r3, #3
    733c:	d105      	bne.n	734a <disconnected_cb+0x86>
					bt_conn_unref(tmp);
    733e:	f7fd fb53 	bl	49e8 <bt_conn_unref>
}
    7342:	2001      	movs	r0, #1
    7344:	b006      	add	sp, #24
    7346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    734a:	f7fd fb4d 	bl	49e8 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    734e:	3601      	adds	r6, #1
    7350:	e7c8      	b.n	72e4 <disconnected_cb+0x20>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7352:	4650      	mov	r0, sl
    7354:	f7fc ff32 	bl	41bc <bt_addr_le_is_bonded>
    7358:	4607      	mov	r7, r0
    735a:	6820      	ldr	r0, [r4, #0]
    735c:	b95f      	cbnz	r7, 7376 <disconnected_cb+0xb2>
    735e:	4428      	add	r0, r5
    7360:	2207      	movs	r2, #7
    7362:	a904      	add	r1, sp, #16
						BT_ADDR_LE_ANY);
    7364:	9704      	str	r7, [sp, #16]
    7366:	f8cd 7013 	str.w	r7, [sp, #19]
    736a:	f7fa fc47 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    736e:	6823      	ldr	r3, [r4, #0]
    7370:	441d      	add	r5, r3
    7372:	812f      	strh	r7, [r5, #8]
    7374:	e7eb      	b.n	734e <disconnected_cb+0x8a>
    7376:	2207      	movs	r2, #7
    7378:	4651      	mov	r1, sl
    737a:	4428      	add	r0, r5
    737c:	f7fa fc3e 	bl	1bfc <memcpy>
    7380:	e7e5      	b.n	734e <disconnected_cb+0x8a>
    7382:	bf00      	nop
    7384:	0000739d 	.word	0x0000739d
    7388:	000155c5 	.word	0x000155c5
    738c:	00017a81 	.word	0x00017a81
    7390:	000169e6 	.word	0x000169e6
    7394:	000169ed 	.word	0x000169ed
    7398:	00017bdf 	.word	0x00017bdf

0000739c <bt_gatt_attr_write_ccc>:
{
    739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73a0:	b08b      	sub	sp, #44	; 0x2c
    73a2:	4688      	mov	r8, r1
    73a4:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
	struct _bt_gatt_ccc *ccc = attr->user_data;
    73a8:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    73ac:	2902      	cmp	r1, #2
{
    73ae:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    73b0:	d875      	bhi.n	749e <bt_gatt_attr_write_ccc+0x102>
	if (offset + len > sizeof(u16_t)) {
    73b2:	4419      	add	r1, r3
    73b4:	2902      	cmp	r1, #2
    73b6:	461f      	mov	r7, r3
    73b8:	dc74      	bgt.n	74a4 <bt_gatt_attr_write_ccc+0x108>
	return ((u16_t)src[1] << 8) | src[0];
    73ba:	7853      	ldrb	r3, [r2, #1]
    73bc:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    73be:	2400      	movs	r4, #0
    73c0:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    73c4:	686b      	ldr	r3, [r5, #4]
    73c6:	429c      	cmp	r4, r3
    73c8:	d206      	bcs.n	73d8 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    73ca:	6829      	ldr	r1, [r5, #0]
    73cc:	4648      	mov	r0, r9
    73ce:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    73d2:	f7fd fa73 	bl	48bc <bt_conn_addr_le_cmp>
    73d6:	b9b8      	cbnz	r0, 7408 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    73d8:	686b      	ldr	r3, [r5, #4]
    73da:	429c      	cmp	r4, r3
    73dc:	d12f      	bne.n	743e <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    73de:	b356      	cbz	r6, 7436 <bt_gatt_attr_write_ccc+0x9a>
    73e0:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    73e2:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    73e4:	686b      	ldr	r3, [r5, #4]
    73e6:	429c      	cmp	r4, r3
    73e8:	d217      	bcs.n	741a <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    73ea:	6828      	ldr	r0, [r5, #0]
    73ec:	f8cd a018 	str.w	sl, [sp, #24]
    73f0:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    73f4:	2207      	movs	r2, #7
    73f6:	a906      	add	r1, sp, #24
    73f8:	4458      	add	r0, fp
    73fa:	f8cd a01b 	str.w	sl, [sp, #27]
    73fe:	f7fa fbe8 	bl	1bd2 <memcmp>
    7402:	b118      	cbz	r0, 740c <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    7404:	3401      	adds	r4, #1
    7406:	e7ed      	b.n	73e4 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    7408:	3401      	adds	r4, #1
    740a:	e7db      	b.n	73c4 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    740c:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    740e:	2207      	movs	r2, #7
    7410:	f109 0144 	add.w	r1, r9, #68	; 0x44
    7414:	4458      	add	r0, fp
    7416:	f7fa fbf1 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    741a:	686b      	ldr	r3, [r5, #4]
    741c:	429c      	cmp	r4, r3
    741e:	d10e      	bne.n	743e <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    7420:	4b22      	ldr	r3, [pc, #136]	; (74ac <bt_gatt_attr_write_ccc+0x110>)
    7422:	9301      	str	r3, [sp, #4]
    7424:	9300      	str	r3, [sp, #0]
    7426:	4a22      	ldr	r2, [pc, #136]	; (74b0 <bt_gatt_attr_write_ccc+0x114>)
    7428:	4b22      	ldr	r3, [pc, #136]	; (74b4 <bt_gatt_attr_write_ccc+0x118>)
    742a:	4923      	ldr	r1, [pc, #140]	; (74b8 <bt_gatt_attr_write_ccc+0x11c>)
    742c:	4823      	ldr	r0, [pc, #140]	; (74bc <bt_gatt_attr_write_ccc+0x120>)
    742e:	f7f9 fdad 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    7432:	f06f 0710 	mvn.w	r7, #16
}
    7436:	4638      	mov	r0, r7
    7438:	b00b      	add	sp, #44	; 0x2c
    743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    743e:	682b      	ldr	r3, [r5, #0]
    7440:	0124      	lsls	r4, r4, #4
    7442:	4423      	add	r3, r4
    7444:	811e      	strh	r6, [r3, #8]
    7446:	f00d faf7 	bl	14a38 <_impl_k_current_get>
	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);
    744a:	4a18      	ldr	r2, [pc, #96]	; (74ac <bt_gatt_attr_write_ccc+0x110>)
    744c:	9204      	str	r2, [sp, #16]
    744e:	682b      	ldr	r3, [r5, #0]
    7450:	4919      	ldr	r1, [pc, #100]	; (74b8 <bt_gatt_attr_write_ccc+0x11c>)
    7452:	4423      	add	r3, r4
    7454:	891b      	ldrh	r3, [r3, #8]
    7456:	9303      	str	r3, [sp, #12]
    7458:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    745c:	9302      	str	r3, [sp, #8]
    745e:	9001      	str	r0, [sp, #4]
    7460:	9200      	str	r2, [sp, #0]
    7462:	4b14      	ldr	r3, [pc, #80]	; (74b4 <bt_gatt_attr_write_ccc+0x118>)
    7464:	4a16      	ldr	r2, [pc, #88]	; (74c0 <bt_gatt_attr_write_ccc+0x124>)
    7466:	4817      	ldr	r0, [pc, #92]	; (74c4 <bt_gatt_attr_write_ccc+0x128>)
    7468:	f7f9 fd90 	bl	f8c <printk>
	if (ccc->cfg[i].value != ccc->value) {
    746c:	682b      	ldr	r3, [r5, #0]
    746e:	4423      	add	r3, r4
    7470:	891a      	ldrh	r2, [r3, #8]
    7472:	892b      	ldrh	r3, [r5, #8]
    7474:	429a      	cmp	r2, r3
    7476:	d003      	beq.n	7480 <bt_gatt_attr_write_ccc+0xe4>
		gatt_ccc_changed(attr, ccc);
    7478:	4629      	mov	r1, r5
    747a:	4640      	mov	r0, r8
    747c:	f7ff fb8a 	bl	6b94 <gatt_ccc_changed>
	if (!value) {
    7480:	2e00      	cmp	r6, #0
    7482:	d1d8      	bne.n	7436 <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    7484:	6828      	ldr	r0, [r5, #0]
    7486:	9608      	str	r6, [sp, #32]
    7488:	4420      	add	r0, r4
    748a:	2207      	movs	r2, #7
    748c:	a908      	add	r1, sp, #32
    748e:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    7492:	f7fa fbb3 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    7496:	682b      	ldr	r3, [r5, #0]
    7498:	441c      	add	r4, r3
    749a:	8126      	strh	r6, [r4, #8]
    749c:	e7cb      	b.n	7436 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    749e:	f06f 0706 	mvn.w	r7, #6
    74a2:	e7c8      	b.n	7436 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    74a4:	f06f 070c 	mvn.w	r7, #12
    74a8:	e7c5      	b.n	7436 <bt_gatt_attr_write_ccc+0x9a>
    74aa:	bf00      	nop
    74ac:	000155c5 	.word	0x000155c5
    74b0:	00016a28 	.word	0x00016a28
    74b4:	00017a33 	.word	0x00017a33
    74b8:	000169ed 	.word	0x000169ed
    74bc:	00017b5c 	.word	0x00017b5c
    74c0:	000169e6 	.word	0x000169e6
    74c4:	00017b86 	.word	0x00017b86

000074c8 <bt_gatt_init>:
{
    74c8:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    74ca:	4806      	ldr	r0, [pc, #24]	; (74e4 <bt_gatt_init+0x1c>)
    74cc:	f7ff fc2a 	bl	6d24 <gatt_register>
	gatt_register(&gatt_svc);
    74d0:	4805      	ldr	r0, [pc, #20]	; (74e8 <bt_gatt_init+0x20>)
    74d2:	f7ff fc27 	bl	6d24 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    74d6:	4905      	ldr	r1, [pc, #20]	; (74ec <bt_gatt_init+0x24>)
    74d8:	4805      	ldr	r0, [pc, #20]	; (74f0 <bt_gatt_init+0x28>)
}
    74da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    74de:	f00d bda1 	b.w	15024 <k_delayed_work_init>
    74e2:	bf00      	nop
    74e4:	20003ccc 	.word	0x20003ccc
    74e8:	20003d28 	.word	0x20003d28
    74ec:	000076cd 	.word	0x000076cd
    74f0:	200005d8 	.word	0x200005d8

000074f4 <bt_gatt_attr_read>:
{
    74f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74f6:	b087      	sub	sp, #28
    74f8:	4616      	mov	r6, r2
    74fa:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    74fe:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
	if (offset > value_len) {
    7502:	4295      	cmp	r5, r2
{
    7504:	460f      	mov	r7, r1
	if (offset > value_len) {
    7506:	d81d      	bhi.n	7544 <bt_gatt_attr_read+0x50>
	len = min(buf_len, value_len - offset);
    7508:	1b54      	subs	r4, r2, r5
    750a:	429c      	cmp	r4, r3
    750c:	bfa8      	it	ge
    750e:	461c      	movge	r4, r3
    7510:	b2a4      	uxth	r4, r4
    7512:	f00d fa91 	bl	14a38 <_impl_k_current_get>
	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
    7516:	4b0d      	ldr	r3, [pc, #52]	; (754c <bt_gatt_attr_read+0x58>)
    7518:	9305      	str	r3, [sp, #20]
    751a:	9404      	str	r4, [sp, #16]
    751c:	9503      	str	r5, [sp, #12]
    751e:	8a3a      	ldrh	r2, [r7, #16]
    7520:	9202      	str	r2, [sp, #8]
    7522:	9001      	str	r0, [sp, #4]
    7524:	9300      	str	r3, [sp, #0]
    7526:	4a0a      	ldr	r2, [pc, #40]	; (7550 <bt_gatt_attr_read+0x5c>)
    7528:	490a      	ldr	r1, [pc, #40]	; (7554 <bt_gatt_attr_read+0x60>)
    752a:	4b0b      	ldr	r3, [pc, #44]	; (7558 <bt_gatt_attr_read+0x64>)
    752c:	480b      	ldr	r0, [pc, #44]	; (755c <bt_gatt_attr_read+0x68>)
    752e:	f7f9 fd2d 	bl	f8c <printk>
	memcpy(buf, value + offset, len);
    7532:	990d      	ldr	r1, [sp, #52]	; 0x34
    7534:	4622      	mov	r2, r4
    7536:	4429      	add	r1, r5
    7538:	4630      	mov	r0, r6
    753a:	f7fa fb5f 	bl	1bfc <memcpy>
}
    753e:	4620      	mov	r0, r4
    7540:	b007      	add	sp, #28
    7542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7544:	f06f 0406 	mvn.w	r4, #6
    7548:	e7f9      	b.n	753e <bt_gatt_attr_read+0x4a>
    754a:	bf00      	nop
    754c:	000155c5 	.word	0x000155c5
    7550:	000169e6 	.word	0x000169e6
    7554:	000169ed 	.word	0x000169ed
    7558:	000179f9 	.word	0x000179f9
    755c:	00017aef 	.word	0x00017aef

00007560 <read_appearance>:
{
    7560:	b530      	push	{r4, r5, lr}
    7562:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    7564:	ac06      	add	r4, sp, #24
    7566:	2500      	movs	r5, #0
    7568:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    756c:	2502      	movs	r5, #2
    756e:	9401      	str	r4, [sp, #4]
    7570:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    7574:	9502      	str	r5, [sp, #8]
    7576:	9400      	str	r4, [sp, #0]
    7578:	f7ff ffbc 	bl	74f4 <bt_gatt_attr_read>
}
    757c:	b007      	add	sp, #28
    757e:	bd30      	pop	{r4, r5, pc}

00007580 <read_name>:
{
    7580:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    7584:	4c0b      	ldr	r4, [pc, #44]	; (75b4 <read_name+0x34>)
{
    7586:	4605      	mov	r5, r0
				 strlen(gap_name));
    7588:	4620      	mov	r0, r4
{
    758a:	4698      	mov	r8, r3
    758c:	460e      	mov	r6, r1
    758e:	4617      	mov	r7, r2
				 strlen(gap_name));
    7590:	f7fa fb0a 	bl	1ba8 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    7594:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7598:	9300      	str	r3, [sp, #0]
    759a:	b280      	uxth	r0, r0
    759c:	9002      	str	r0, [sp, #8]
    759e:	9401      	str	r4, [sp, #4]
    75a0:	4643      	mov	r3, r8
    75a2:	463a      	mov	r2, r7
    75a4:	4631      	mov	r1, r6
    75a6:	4628      	mov	r0, r5
    75a8:	f7ff ffa4 	bl	74f4 <bt_gatt_attr_read>
}
    75ac:	b004      	add	sp, #16
    75ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75b2:	bf00      	nop
    75b4:	00017de6 	.word	0x00017de6

000075b8 <bt_gatt_attr_read_service>:
{
    75b8:	b570      	push	{r4, r5, r6, lr}
	struct bt_uuid *uuid = attr->user_data;
    75ba:	68cc      	ldr	r4, [r1, #12]
{
    75bc:	b086      	sub	sp, #24
	if (uuid->type == BT_UUID_TYPE_16) {
    75be:	7826      	ldrb	r6, [r4, #0]
{
    75c0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	if (uuid->type == BT_UUID_TYPE_16) {
    75c4:	b95e      	cbnz	r6, 75de <bt_gatt_attr_read_service+0x26>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    75c6:	8866      	ldrh	r6, [r4, #2]
    75c8:	ac06      	add	r4, sp, #24
    75ca:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    75ce:	2602      	movs	r6, #2
    75d0:	9602      	str	r6, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    75d2:	9401      	str	r4, [sp, #4]
    75d4:	9500      	str	r5, [sp, #0]
    75d6:	f7ff ff8d 	bl	74f4 <bt_gatt_attr_read>
}
    75da:	b006      	add	sp, #24
    75dc:	bd70      	pop	{r4, r5, r6, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    75de:	2610      	movs	r6, #16
    75e0:	9602      	str	r6, [sp, #8]
				 BT_UUID_128(uuid)->val, 16);
    75e2:	3401      	adds	r4, #1
    75e4:	e7f5      	b.n	75d2 <bt_gatt_attr_read_service+0x1a>

000075e6 <bt_gatt_attr_read_ccc>:
{
    75e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    75ea:	68cd      	ldr	r5, [r1, #12]
{
    75ec:	b086      	sub	sp, #24
    75ee:	4606      	mov	r6, r0
    75f0:	460f      	mov	r7, r1
    75f2:	4691      	mov	r9, r2
    75f4:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    75f6:	2400      	movs	r4, #0
    75f8:	686b      	ldr	r3, [r5, #4]
    75fa:	429c      	cmp	r4, r3
    75fc:	d20e      	bcs.n	761c <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    75fe:	6829      	ldr	r1, [r5, #0]
    7600:	ea4f 1804 	mov.w	r8, r4, lsl #4
    7604:	4441      	add	r1, r8
    7606:	4630      	mov	r0, r6
    7608:	f7fd f958 	bl	48bc <bt_conn_addr_le_cmp>
    760c:	b108      	cbz	r0, 7612 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    760e:	3401      	adds	r4, #1
    7610:	e7f2      	b.n	75f8 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    7612:	6829      	ldr	r1, [r5, #0]
    7614:	4441      	add	r1, r8
    7616:	890b      	ldrh	r3, [r1, #8]
    7618:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    761c:	686b      	ldr	r3, [r5, #4]
    761e:	429c      	cmp	r4, r3
		value = 0x0000;
    7620:	bf04      	itt	eq
    7622:	2300      	moveq	r3, #0
    7624:	f8ad 3016 	strheq.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    7628:	2302      	movs	r3, #2
    762a:	9302      	str	r3, [sp, #8]
    762c:	f10d 0316 	add.w	r3, sp, #22
    7630:	9301      	str	r3, [sp, #4]
    7632:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    7636:	9300      	str	r3, [sp, #0]
    7638:	464a      	mov	r2, r9
    763a:	4653      	mov	r3, sl
    763c:	4639      	mov	r1, r7
    763e:	4630      	mov	r0, r6
    7640:	f7ff ff58 	bl	74f4 <bt_gatt_attr_read>
}
    7644:	b006      	add	sp, #24
    7646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000764c <bt_gatt_foreach_attr>:
{
    764c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7650:	4699      	mov	r9, r3
    7652:	4b12      	ldr	r3, [pc, #72]	; (769c <bt_gatt_foreach_attr+0x50>)
    7654:	681c      	ldr	r4, [r3, #0]
    7656:	4606      	mov	r6, r0
    7658:	460f      	mov	r7, r1
    765a:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    765c:	b1dc      	cbz	r4, 7696 <bt_gatt_foreach_attr+0x4a>
    765e:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7660:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7664:	b1bc      	cbz	r4, 7696 <bt_gatt_foreach_attr+0x4a>
    7666:	2500      	movs	r5, #0
    7668:	e006      	b.n	7678 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    766a:	6820      	ldr	r0, [r4, #0]
    766c:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    7670:	8a03      	ldrh	r3, [r0, #16]
    7672:	42b3      	cmp	r3, r6
    7674:	d207      	bcs.n	7686 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    7676:	3501      	adds	r5, #1
    7678:	6863      	ldr	r3, [r4, #4]
    767a:	42ab      	cmp	r3, r5
    767c:	d8f5      	bhi.n	766a <bt_gatt_foreach_attr+0x1e>
	return node->next;
    767e:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7680:	b14c      	cbz	r4, 7696 <bt_gatt_foreach_attr+0x4a>
    7682:	3c08      	subs	r4, #8
    7684:	e7ee      	b.n	7664 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    7686:	42bb      	cmp	r3, r7
    7688:	d8f5      	bhi.n	7676 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    768a:	4649      	mov	r1, r9
    768c:	47c0      	blx	r8
    768e:	2800      	cmp	r0, #0
    7690:	d1f1      	bne.n	7676 <bt_gatt_foreach_attr+0x2a>
    7692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    769a:	bf00      	nop
    769c:	200005a8 	.word	0x200005a8

000076a0 <bt_gatt_indicate.part.13>:
int bt_gatt_indicate(struct bt_conn *conn,
    76a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    76a2:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    76a6:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    76a8:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    76aa:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    76ac:	2302      	movs	r3, #2
    76ae:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    76b2:	4a05      	ldr	r2, [pc, #20]	; (76c8 <bt_gatt_indicate.part.13+0x28>)
    76b4:	8a00      	ldrh	r0, [r0, #16]
    76b6:	466b      	mov	r3, sp
    76b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    76bc:	f7ff ffc6 	bl	764c <bt_gatt_foreach_attr>
}
    76c0:	9800      	ldr	r0, [sp, #0]
    76c2:	b007      	add	sp, #28
    76c4:	f85d fb04 	ldr.w	pc, [sp], #4
    76c8:	00006fbd 	.word	0x00006fbd

000076cc <sc_process>:
{
    76cc:	b530      	push	{r4, r5, lr}
    76ce:	4604      	mov	r4, r0
    76d0:	b089      	sub	sp, #36	; 0x24
    76d2:	f00d f9b1 	bl	14a38 <_impl_k_current_get>
	BT_DBG("start 0x%04x end 0x%04x", sc->start, sc->end);
    76d6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
    76da:	4b24      	ldr	r3, [pc, #144]	; (776c <sc_process+0xa0>)
    76dc:	9203      	str	r2, [sp, #12]
    76de:	f834 2c04 	ldrh.w	r2, [r4, #-4]
    76e2:	9304      	str	r3, [sp, #16]
    76e4:	9202      	str	r2, [sp, #8]
    76e6:	9001      	str	r0, [sp, #4]
    76e8:	9300      	str	r3, [sp, #0]
    76ea:	4a21      	ldr	r2, [pc, #132]	; (7770 <sc_process+0xa4>)
    76ec:	4b21      	ldr	r3, [pc, #132]	; (7774 <sc_process+0xa8>)
    76ee:	4922      	ldr	r1, [pc, #136]	; (7778 <sc_process+0xac>)
    76f0:	4822      	ldr	r0, [pc, #136]	; (777c <sc_process+0xb0>)
    76f2:	f7f9 fc4b 	bl	f8c <printk>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    76f6:	f834 3c04 	ldrh.w	r3, [r4, #-4]
    76fa:	f8ad 301c 	strh.w	r3, [sp, #28]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    76fe:	f834 3c02 	ldrh.w	r3, [r4, #-2]
    7702:	f8ad 301e 	strh.w	r3, [sp, #30]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    7706:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
    770a:	f104 0528 	add.w	r5, r4, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    770e:	f3bf 8f5b 	dmb	ish
    7712:	e855 3f00 	ldrex	r3, [r5]
    7716:	f023 0301 	bic.w	r3, r3, #1
    771a:	e845 3200 	strex	r2, r3, [r5]
    771e:	2a00      	cmp	r2, #0
    7720:	d1f7      	bne.n	7712 <sc_process+0x46>
    7722:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    7726:	2300      	movs	r3, #0
    7728:	f824 3c04 	strh.w	r3, [r4, #-4]
	sc->end = 0;
    772c:	f824 3c02 	strh.w	r3, [r4, #-2]
	sc->params.attr = &gatt_attrs[2];
    7730:	4b13      	ldr	r3, [pc, #76]	; (7780 <sc_process+0xb4>)
    7732:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    7736:	4b13      	ldr	r3, [pc, #76]	; (7784 <sc_process+0xb8>)
    7738:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    773c:	ab07      	add	r3, sp, #28
    773e:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    7742:	2304      	movs	r3, #4
    7744:	f824 3c08 	strh.w	r3, [r4, #-8]
    7748:	f7ff ffaa 	bl	76a0 <bt_gatt_indicate.part.13>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    774c:	b958      	cbnz	r0, 7766 <sc_process+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    774e:	f3bf 8f5b 	dmb	ish
    7752:	e855 3f00 	ldrex	r3, [r5]
    7756:	f043 0302 	orr.w	r3, r3, #2
    775a:	e845 3200 	strex	r2, r3, [r5]
    775e:	2a00      	cmp	r2, #0
    7760:	d1f7      	bne.n	7752 <sc_process+0x86>
    7762:	f3bf 8f5b 	dmb	ish
}
    7766:	b009      	add	sp, #36	; 0x24
    7768:	bd30      	pop	{r4, r5, pc}
    776a:	bf00      	nop
    776c:	000155c5 	.word	0x000155c5
    7770:	000169e6 	.word	0x000169e6
    7774:	000179d5 	.word	0x000179d5
    7778:	000169ed 	.word	0x000169ed
    777c:	00017e50 	.word	0x00017e50
    7780:	20003d00 	.word	0x20003d00
    7784:	00007249 	.word	0x00007249

00007788 <bt_gatt_attr_next>:
{
    7788:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    778a:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    778c:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    778e:	3101      	adds	r1, #1
    7790:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    7792:	2200      	movs	r2, #0
    7794:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7798:	4608      	mov	r0, r1
    779a:	4a03      	ldr	r2, [pc, #12]	; (77a8 <bt_gatt_attr_next+0x20>)
    779c:	f7ff ff56 	bl	764c <bt_gatt_foreach_attr>
}
    77a0:	9801      	ldr	r0, [sp, #4]
    77a2:	b003      	add	sp, #12
    77a4:	f85d fb04 	ldr.w	pc, [sp], #4
    77a8:	00006abf 	.word	0x00006abf

000077ac <bt_gatt_attr_read_chrc>:
{
    77ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    77b0:	68ce      	ldr	r6, [r1, #12]
{
    77b2:	b08b      	sub	sp, #44	; 0x2c
    77b4:	4607      	mov	r7, r0
    77b6:	4699      	mov	r9, r3
	next = bt_gatt_attr_next(attr);
    77b8:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    77ba:	7933      	ldrb	r3, [r6, #4]
    77bc:	f88d 3014 	strb.w	r3, [sp, #20]
{
    77c0:	460c      	mov	r4, r1
    77c2:	4690      	mov	r8, r2
	next = bt_gatt_attr_next(attr);
    77c4:	f7ff ffe0 	bl	7788 <bt_gatt_attr_next>
	if (!next) {
    77c8:	4605      	mov	r5, r0
    77ca:	bb20      	cbnz	r0, 7816 <bt_gatt_attr_read_chrc+0x6a>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    77cc:	4b18      	ldr	r3, [pc, #96]	; (7830 <bt_gatt_attr_read_chrc+0x84>)
    77ce:	8a22      	ldrh	r2, [r4, #16]
    77d0:	9302      	str	r3, [sp, #8]
    77d2:	9201      	str	r2, [sp, #4]
    77d4:	9300      	str	r3, [sp, #0]
    77d6:	4a17      	ldr	r2, [pc, #92]	; (7834 <bt_gatt_attr_read_chrc+0x88>)
    77d8:	4b17      	ldr	r3, [pc, #92]	; (7838 <bt_gatt_attr_read_chrc+0x8c>)
    77da:	4918      	ldr	r1, [pc, #96]	; (783c <bt_gatt_attr_read_chrc+0x90>)
    77dc:	4818      	ldr	r0, [pc, #96]	; (7840 <bt_gatt_attr_read_chrc+0x94>)
    77de:	f7f9 fbd5 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    77e2:	f88d 5015 	strb.w	r5, [sp, #21]
    77e6:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    77ea:	6831      	ldr	r1, [r6, #0]
    77ec:	780b      	ldrb	r3, [r1, #0]
    77ee:	b9b3      	cbnz	r3, 781e <bt_gatt_attr_read_chrc+0x72>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    77f0:	884b      	ldrh	r3, [r1, #2]
    77f2:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    77f6:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    77f8:	9302      	str	r3, [sp, #8]
    77fa:	ab05      	add	r3, sp, #20
    77fc:	9301      	str	r3, [sp, #4]
    77fe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    7802:	9300      	str	r3, [sp, #0]
    7804:	4642      	mov	r2, r8
    7806:	464b      	mov	r3, r9
    7808:	4621      	mov	r1, r4
    780a:	4638      	mov	r0, r7
    780c:	f7ff fe72 	bl	74f4 <bt_gatt_attr_read>
}
    7810:	b00b      	add	sp, #44	; 0x2c
    7812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    7816:	8a03      	ldrh	r3, [r0, #16]
    7818:	f8ad 3015 	strh.w	r3, [sp, #21]
    781c:	e7e5      	b.n	77ea <bt_gatt_attr_read_chrc+0x3e>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    781e:	2210      	movs	r2, #16
    7820:	3101      	adds	r1, #1
    7822:	f10d 0017 	add.w	r0, sp, #23
    7826:	f7fa f9e9 	bl	1bfc <memcpy>
		value_len += 16;
    782a:	2313      	movs	r3, #19
    782c:	e7e4      	b.n	77f8 <bt_gatt_attr_read_chrc+0x4c>
    782e:	bf00      	nop
    7830:	000155c5 	.word	0x000155c5
    7834:	00016a28 	.word	0x00016a28
    7838:	00017a0b 	.word	0x00017a0b
    783c:	000169ed 	.word	0x000169ed
    7840:	00017b26 	.word	0x00017b26

00007844 <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    7844:	7a43      	ldrb	r3, [r0, #9]
    7846:	2b03      	cmp	r3, #3
{
    7848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    784c:	4680      	mov	r8, r0
    784e:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    7850:	d144      	bne.n	78dc <bt_gatt_unsubscribe+0x98>
    7852:	4b2b      	ldr	r3, [pc, #172]	; (7900 <bt_gatt_unsubscribe+0xbc>)
    7854:	681c      	ldr	r4, [r3, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7856:	b1cc      	cbz	r4, 788c <bt_gatt_unsubscribe+0x48>
    7858:	f1b4 0528 	subs.w	r5, r4, #40	; 0x28
    785c:	d144      	bne.n	78e8 <bt_gatt_unsubscribe+0xa4>
    785e:	462c      	mov	r4, r5
    7860:	f04f 0b00 	mov.w	fp, #0
		/* Remove subscription */
		if (params == tmp) {
			found = true;
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    7864:	f8df a098 	ldr.w	sl, [pc, #152]	; 7900 <bt_gatt_unsubscribe+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7868:	465a      	mov	r2, fp
    786a:	465f      	mov	r7, fp
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    786c:	f106 0928 	add.w	r9, r6, #40	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7870:	b975      	cbnz	r5, 7890 <bt_gatt_unsubscribe+0x4c>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    7872:	2a00      	cmp	r2, #0
    7874:	d035      	beq.n	78e2 <bt_gatt_unsubscribe+0x9e>
		return -EINVAL;
	}

	if (has_subscription) {
    7876:	b33f      	cbz	r7, 78c8 <bt_gatt_unsubscribe+0x84>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    7878:	69f4      	ldr	r4, [r6, #28]
    787a:	462b      	mov	r3, r5
    787c:	462a      	mov	r2, r5
    787e:	4631      	mov	r1, r6
    7880:	4640      	mov	r0, r8
    7882:	47a0      	blx	r4
		return 0;
    7884:	4628      	mov	r0, r5

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    7886:	b003      	add	sp, #12
    7888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    788c:	4625      	mov	r5, r4
    788e:	e7e7      	b.n	7860 <bt_gatt_unsubscribe+0x1c>
		if (params == tmp) {
    7890:	42b5      	cmp	r5, r6
    7892:	d108      	bne.n	78a6 <bt_gatt_unsubscribe+0x62>
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    7894:	464a      	mov	r2, r9
    7896:	4659      	mov	r1, fp
    7898:	4650      	mov	r0, sl
    789a:	f7ff f900 	bl	6a9e <sys_slist_remove>
			found = true;
    789e:	2201      	movs	r2, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    78a0:	bb3c      	cbnz	r4, 78f2 <bt_gatt_unsubscribe+0xae>
    78a2:	4623      	mov	r3, r4
    78a4:	e028      	b.n	78f8 <bt_gatt_unsubscribe+0xb4>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    78a6:	f105 0114 	add.w	r1, r5, #20
    78aa:	4640      	mov	r0, r8
    78ac:	9201      	str	r2, [sp, #4]
    78ae:	f7fd f805 	bl	48bc <bt_conn_addr_le_cmp>
			prev = &tmp->node;
    78b2:	f105 0b28 	add.w	fp, r5, #40	; 0x28
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    78b6:	9a01      	ldr	r2, [sp, #4]
    78b8:	2800      	cmp	r0, #0
    78ba:	d1f1      	bne.n	78a0 <bt_gatt_unsubscribe+0x5c>
    78bc:	8c29      	ldrh	r1, [r5, #32]
    78be:	8c33      	ldrh	r3, [r6, #32]
			has_subscription = true;
    78c0:	4299      	cmp	r1, r3
    78c2:	bf08      	it	eq
    78c4:	2701      	moveq	r7, #1
    78c6:	e7eb      	b.n	78a0 <bt_gatt_unsubscribe+0x5c>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    78c8:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	params->value = 0x0000;
    78ca:	84b7      	strh	r7, [r6, #36]	; 0x24
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    78cc:	4633      	mov	r3, r6
    78ce:	463a      	mov	r2, r7
    78d0:	4640      	mov	r0, r8
}
    78d2:	b003      	add	sp, #12
    78d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    78d8:	f7ff bac6 	b.w	6e68 <gatt_write_ccc.constprop.20>
		return -ENOTCONN;
    78dc:	f06f 0038 	mvn.w	r0, #56	; 0x38
    78e0:	e7d1      	b.n	7886 <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    78e2:	f06f 0015 	mvn.w	r0, #21
    78e6:	e7ce      	b.n	7886 <bt_gatt_unsubscribe+0x42>
    78e8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    78ea:	2c00      	cmp	r4, #0
    78ec:	d0b8      	beq.n	7860 <bt_gatt_unsubscribe+0x1c>
    78ee:	3c28      	subs	r4, #40	; 0x28
    78f0:	e7b6      	b.n	7860 <bt_gatt_unsubscribe+0x1c>
    78f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    78f4:	b103      	cbz	r3, 78f8 <bt_gatt_unsubscribe+0xb4>
    78f6:	3b28      	subs	r3, #40	; 0x28
    78f8:	4625      	mov	r5, r4
    78fa:	461c      	mov	r4, r3
    78fc:	e7b8      	b.n	7870 <bt_gatt_unsubscribe+0x2c>
    78fe:	bf00      	nop
    7900:	20000614 	.word	0x20000614

00007904 <bt_gatt_notification>:
{
    7904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7908:	b086      	sub	sp, #24
    790a:	4688      	mov	r8, r1
    790c:	461f      	mov	r7, r3
    790e:	4691      	mov	r9, r2
    7910:	4605      	mov	r5, r0
    7912:	f00d f891 	bl	14a38 <_impl_k_current_get>
	BT_DBG("handle 0x%04x length %u", handle, length);
    7916:	4b1b      	ldr	r3, [pc, #108]	; (7984 <bt_gatt_notification+0x80>)
    7918:	9304      	str	r3, [sp, #16]
    791a:	9001      	str	r0, [sp, #4]
    791c:	9300      	str	r3, [sp, #0]
    791e:	9703      	str	r7, [sp, #12]
    7920:	4b19      	ldr	r3, [pc, #100]	; (7988 <bt_gatt_notification+0x84>)
    7922:	f8cd 8008 	str.w	r8, [sp, #8]
    7926:	4a19      	ldr	r2, [pc, #100]	; (798c <bt_gatt_notification+0x88>)
    7928:	4919      	ldr	r1, [pc, #100]	; (7990 <bt_gatt_notification+0x8c>)
    792a:	481a      	ldr	r0, [pc, #104]	; (7994 <bt_gatt_notification+0x90>)
    792c:	f7f9 fb2e 	bl	f8c <printk>
    7930:	4b19      	ldr	r3, [pc, #100]	; (7998 <bt_gatt_notification+0x94>)
    7932:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7934:	b113      	cbz	r3, 793c <bt_gatt_notification+0x38>
    7936:	f1b3 0a28 	subs.w	sl, r3, #40	; 0x28
    793a:	d102      	bne.n	7942 <bt_gatt_notification+0x3e>
}
    793c:	b006      	add	sp, #24
    793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7942:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7944:	b104      	cbz	r4, 7948 <bt_gatt_notification+0x44>
    7946:	3c28      	subs	r4, #40	; 0x28
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    7948:	f10a 0114 	add.w	r1, sl, #20
    794c:	4628      	mov	r0, r5
    794e:	f7fc ffb5 	bl	48bc <bt_conn_addr_le_cmp>
    7952:	b978      	cbnz	r0, 7974 <bt_gatt_notification+0x70>
    7954:	f8ba 3020 	ldrh.w	r3, [sl, #32]
    7958:	4543      	cmp	r3, r8
    795a:	d10b      	bne.n	7974 <bt_gatt_notification+0x70>
		if (params->notify(conn, params, data, length) ==
    795c:	463b      	mov	r3, r7
    795e:	464a      	mov	r2, r9
    7960:	4651      	mov	r1, sl
    7962:	4628      	mov	r0, r5
    7964:	f8da 601c 	ldr.w	r6, [sl, #28]
    7968:	47b0      	blx	r6
    796a:	b918      	cbnz	r0, 7974 <bt_gatt_notification+0x70>
			bt_gatt_unsubscribe(conn, params);
    796c:	4651      	mov	r1, sl
    796e:	4628      	mov	r0, r5
    7970:	f7ff ff68 	bl	7844 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7974:	2c00      	cmp	r4, #0
    7976:	d0e1      	beq.n	793c <bt_gatt_notification+0x38>
    7978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    797a:	b103      	cbz	r3, 797e <bt_gatt_notification+0x7a>
    797c:	3b28      	subs	r3, #40	; 0x28
    797e:	46a2      	mov	sl, r4
    7980:	461c      	mov	r4, r3
    7982:	e7e1      	b.n	7948 <bt_gatt_notification+0x44>
    7984:	000155c5 	.word	0x000155c5
    7988:	00017a91 	.word	0x00017a91
    798c:	000169e6 	.word	0x000169e6
    7990:	000169ed 	.word	0x000169ed
    7994:	00017bb2 	.word	0x00017bb2
    7998:	20000614 	.word	0x20000614

0000799c <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    799c:	b530      	push	{r4, r5, lr}
    799e:	b085      	sub	sp, #20
    79a0:	4605      	mov	r5, r0
    79a2:	f00d f849 	bl	14a38 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    79a6:	4b13      	ldr	r3, [pc, #76]	; (79f4 <bt_gatt_connected+0x58>)
    79a8:	9303      	str	r3, [sp, #12]
    79aa:	9001      	str	r0, [sp, #4]
    79ac:	9300      	str	r3, [sp, #0]
    79ae:	4a12      	ldr	r2, [pc, #72]	; (79f8 <bt_gatt_connected+0x5c>)
    79b0:	4b12      	ldr	r3, [pc, #72]	; (79fc <bt_gatt_connected+0x60>)
    79b2:	4913      	ldr	r1, [pc, #76]	; (7a00 <bt_gatt_connected+0x64>)
    79b4:	9502      	str	r5, [sp, #8]
    79b6:	4813      	ldr	r0, [pc, #76]	; (7a04 <bt_gatt_connected+0x68>)
    79b8:	f7f9 fae8 	bl	f8c <printk>
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    79bc:	462b      	mov	r3, r5
    79be:	4a12      	ldr	r2, [pc, #72]	; (7a08 <bt_gatt_connected+0x6c>)
    79c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    79c4:	2001      	movs	r0, #1
    79c6:	f7ff fe41 	bl	764c <bt_gatt_foreach_attr>
    79ca:	4b10      	ldr	r3, [pc, #64]	; (7a0c <bt_gatt_connected+0x70>)
    79cc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    79ce:	b10c      	cbz	r4, 79d4 <bt_gatt_connected+0x38>
    79d0:	3c28      	subs	r4, #40	; 0x28
    79d2:	b90c      	cbnz	r4, 79d8 <bt_gatt_connected+0x3c>
#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    79d4:	b005      	add	sp, #20
    79d6:	bd30      	pop	{r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    79d8:	f104 0114 	add.w	r1, r4, #20
    79dc:	4628      	mov	r0, r5
    79de:	f7fc ff6d 	bl	48bc <bt_conn_addr_le_cmp>
    79e2:	b928      	cbnz	r0, 79f0 <bt_gatt_connected+0x54>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    79e4:	4623      	mov	r3, r4
    79e6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    79e8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    79ea:	4628      	mov	r0, r5
    79ec:	f7ff fa3c 	bl	6e68 <gatt_write_ccc.constprop.20>
    79f0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    79f2:	e7ec      	b.n	79ce <bt_gatt_connected+0x32>
    79f4:	000155c5 	.word	0x000155c5
    79f8:	000169e6 	.word	0x000169e6
    79fc:	00017ac8 	.word	0x00017ac8
    7a00:	000169ed 	.word	0x000169ed
    7a04:	00016f41 	.word	0x00016f41
    7a08:	00007191 	.word	0x00007191
    7a0c:	20000614 	.word	0x20000614

00007a10 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    7a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7a14:	4607      	mov	r7, r0
    7a16:	f00d f80f 	bl	14a38 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    7a1a:	4b26      	ldr	r3, [pc, #152]	; (7ab4 <bt_gatt_disconnected+0xa4>)
    7a1c:	9303      	str	r3, [sp, #12]
    7a1e:	9001      	str	r0, [sp, #4]
    7a20:	9300      	str	r3, [sp, #0]
    7a22:	4a25      	ldr	r2, [pc, #148]	; (7ab8 <bt_gatt_disconnected+0xa8>)
    7a24:	4b25      	ldr	r3, [pc, #148]	; (7abc <bt_gatt_disconnected+0xac>)
    7a26:	4926      	ldr	r1, [pc, #152]	; (7ac0 <bt_gatt_disconnected+0xb0>)
    7a28:	9702      	str	r7, [sp, #8]
    7a2a:	4826      	ldr	r0, [pc, #152]	; (7ac4 <bt_gatt_disconnected+0xb4>)
    7a2c:	f7f9 faae 	bl	f8c <printk>
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7a30:	463b      	mov	r3, r7
    7a32:	4a25      	ldr	r2, [pc, #148]	; (7ac8 <bt_gatt_disconnected+0xb8>)
    7a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7a38:	2001      	movs	r0, #1
    7a3a:	f7ff fe07 	bl	764c <bt_gatt_foreach_attr>
    7a3e:	4b23      	ldr	r3, [pc, #140]	; (7acc <bt_gatt_disconnected+0xbc>)
    7a40:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7a42:	b113      	cbz	r3, 7a4a <bt_gatt_disconnected+0x3a>
    7a44:	f1b3 0628 	subs.w	r6, r3, #40	; 0x28
    7a48:	d121      	bne.n	7a8e <bt_gatt_disconnected+0x7e>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    7a4a:	b004      	add	sp, #16
    7a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    7a50:	4640      	mov	r0, r8
    7a52:	f7fc fbb3 	bl	41bc <bt_addr_le_is_bonded>
    7a56:	b118      	cbz	r0, 7a60 <bt_gatt_disconnected+0x50>
    7a58:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    7a5c:	07db      	lsls	r3, r3, #31
    7a5e:	d50e      	bpl.n	7a7e <bt_gatt_disconnected+0x6e>
			params->value = 0;
    7a60:	f8a6 9024 	strh.w	r9, [r6, #36]	; 0x24
			gatt_subscription_remove(conn, prev, params);
    7a64:	4632      	mov	r2, r6
    7a66:	4629      	mov	r1, r5
    7a68:	4638      	mov	r0, r7
    7a6a:	f7ff f833 	bl	6ad4 <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7a6e:	2c00      	cmp	r4, #0
    7a70:	d0eb      	beq.n	7a4a <bt_gatt_disconnected+0x3a>
    7a72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7a74:	b103      	cbz	r3, 7a78 <bt_gatt_disconnected+0x68>
    7a76:	3b28      	subs	r3, #40	; 0x28
    7a78:	4626      	mov	r6, r4
    7a7a:	461c      	mov	r4, r3
    7a7c:	e00e      	b.n	7a9c <bt_gatt_disconnected+0x8c>
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    7a7e:	7d33      	ldrb	r3, [r6, #20]
    7a80:	b1a3      	cbz	r3, 7aac <bt_gatt_disconnected+0x9c>
    7a82:	2207      	movs	r2, #7
    7a84:	4641      	mov	r1, r8
    7a86:	4650      	mov	r0, sl
    7a88:	f7fa f8b8 	bl	1bfc <memcpy>
    7a8c:	e00e      	b.n	7aac <bt_gatt_disconnected+0x9c>
    7a8e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7a90:	b104      	cbz	r4, 7a94 <bt_gatt_disconnected+0x84>
    7a92:	3c28      	subs	r4, #40	; 0x28
    7a94:	2500      	movs	r5, #0
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    7a96:	f107 0844 	add.w	r8, r7, #68	; 0x44
			params->value = 0;
    7a9a:	46a9      	mov	r9, r5
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    7a9c:	f106 0a14 	add.w	sl, r6, #20
    7aa0:	4651      	mov	r1, sl
    7aa2:	4638      	mov	r0, r7
    7aa4:	f7fc ff0a 	bl	48bc <bt_conn_addr_le_cmp>
    7aa8:	2800      	cmp	r0, #0
    7aaa:	d0d1      	beq.n	7a50 <bt_gatt_disconnected+0x40>
			prev = &params->node;
    7aac:	f106 0528 	add.w	r5, r6, #40	; 0x28
    7ab0:	e7dd      	b.n	7a6e <bt_gatt_disconnected+0x5e>
    7ab2:	bf00      	nop
    7ab4:	000155c5 	.word	0x000155c5
    7ab8:	000169e6 	.word	0x000169e6
    7abc:	00017ada 	.word	0x00017ada
    7ac0:	000169ed 	.word	0x000169ed
    7ac4:	00016f41 	.word	0x00016f41
    7ac8:	000072c5 	.word	0x000072c5
    7acc:	20000614 	.word	0x20000614

00007ad0 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7ad0:	b570      	push	{r4, r5, r6, lr}
    7ad2:	b086      	sub	sp, #24
    7ad4:	4605      	mov	r5, r0
    7ad6:	460e      	mov	r6, r1
    7ad8:	f00c ffae 	bl	14a38 <_impl_k_current_get>
	int i;
	static struct bt_l2cap_chan_ops ops = {
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    7adc:	4c10      	ldr	r4, [pc, #64]	; (7b20 <bt_smp_accept+0x50>)
    7ade:	882b      	ldrh	r3, [r5, #0]
    7ae0:	9303      	str	r3, [sp, #12]
    7ae2:	9001      	str	r0, [sp, #4]
    7ae4:	4b0f      	ldr	r3, [pc, #60]	; (7b24 <bt_smp_accept+0x54>)
    7ae6:	9404      	str	r4, [sp, #16]
    7ae8:	9502      	str	r5, [sp, #8]
    7aea:	9400      	str	r4, [sp, #0]
    7aec:	4a0e      	ldr	r2, [pc, #56]	; (7b28 <bt_smp_accept+0x58>)
    7aee:	490f      	ldr	r1, [pc, #60]	; (7b2c <bt_smp_accept+0x5c>)
    7af0:	480f      	ldr	r0, [pc, #60]	; (7b30 <bt_smp_accept+0x60>)
    7af2:	f7f9 fa4b 	bl	f8c <printk>

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    7af6:	4b0f      	ldr	r3, [pc, #60]	; (7b34 <bt_smp_accept+0x64>)
    7af8:	6818      	ldr	r0, [r3, #0]
    7afa:	b920      	cbnz	r0, 7b06 <bt_smp_accept+0x36>
			continue;
		}

		smp->chan.ops = &ops;
    7afc:	4a0e      	ldr	r2, [pc, #56]	; (7b38 <bt_smp_accept+0x68>)
    7afe:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    7b00:	6033      	str	r3, [r6, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    7b02:	b006      	add	sp, #24
    7b04:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    7b06:	9402      	str	r4, [sp, #8]
    7b08:	e88d 0030 	stmia.w	sp, {r4, r5}
    7b0c:	4b05      	ldr	r3, [pc, #20]	; (7b24 <bt_smp_accept+0x54>)
    7b0e:	4a0b      	ldr	r2, [pc, #44]	; (7b3c <bt_smp_accept+0x6c>)
    7b10:	4906      	ldr	r1, [pc, #24]	; (7b2c <bt_smp_accept+0x5c>)
    7b12:	480b      	ldr	r0, [pc, #44]	; (7b40 <bt_smp_accept+0x70>)
    7b14:	f7f9 fa3a 	bl	f8c <printk>
	return -ENOMEM;
    7b18:	f06f 000b 	mvn.w	r0, #11
    7b1c:	e7f1      	b.n	7b02 <bt_smp_accept+0x32>
    7b1e:	bf00      	nop
    7b20:	000155c5 	.word	0x000155c5
    7b24:	00017eca 	.word	0x00017eca
    7b28:	000169e6 	.word	0x000169e6
    7b2c:	000169ed 	.word	0x000169ed
    7b30:	00017ed8 	.word	0x00017ed8
    7b34:	2000061c 	.word	0x2000061c
    7b38:	20003d40 	.word	0x20003d40
    7b3c:	0001699e 	.word	0x0001699e
    7b40:	00017eff 	.word	0x00017eff

00007b44 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    7b44:	2100      	movs	r1, #0
{
    7b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    7b4a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    7b4c:	4608      	mov	r0, r1
    7b4e:	f7fd fcc4 	bl	54da <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b52:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    7b56:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b58:	2101      	movs	r1, #1
    7b5a:	4630      	mov	r0, r6
    7b5c:	f00b ff16 	bl	1398c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    7b60:	2505      	movs	r5, #5
    7b62:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7b64:	2101      	movs	r1, #1
    7b66:	4630      	mov	r0, r6
    7b68:	f00b ff10 	bl	1398c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    7b6c:	7005      	strb	r5, [r0, #0]
    7b6e:	4622      	mov	r2, r4
    7b70:	4638      	mov	r0, r7
    7b72:	2300      	movs	r3, #0
    7b74:	2106      	movs	r1, #6
}
    7b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b7a:	f7fd bcb1 	b.w	54e0 <bt_l2cap_send_cb>

00007b7e <bt_smp_sign_verify>:
    7b7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7b82:	4770      	bx	lr

00007b84 <bt_smp_sign>:
}
    7b84:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7b88:	4770      	bx	lr
	...

00007b8c <bt_smp_init>:

int bt_smp_init(void)
{
    7b8c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    7b8e:	4802      	ldr	r0, [pc, #8]	; (7b98 <bt_smp_init+0xc>)
    7b90:	f7fd fbe8 	bl	5364 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    7b94:	2000      	movs	r0, #0
    7b96:	bd08      	pop	{r3, pc}
    7b98:	20003d34 	.word	0x20003d34

00007b9c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    7b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    7b9e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7ba0:	1dc3      	adds	r3, r0, #7
{
    7ba2:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7ba4:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7ba8:	1e50      	subs	r0, r2, #1
{
    7baa:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7bac:	b280      	uxth	r0, r0
{
    7bae:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7bb0:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7bb2:	2100      	movs	r1, #0
    7bb4:	2204      	movs	r2, #4
    7bb6:	fb06 5000 	mla	r0, r6, r0, r5
    7bba:	f7fa f84b 	bl	1c54 <memset>
    7bbe:	3c02      	subs	r4, #2
    7bc0:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    7bc2:	f64f 77ff 	movw	r7, #65535	; 0xffff
    7bc6:	42bc      	cmp	r4, r7
    7bc8:	d101      	bne.n	7bce <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    7bca:	b003      	add	sp, #12
    7bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    7bce:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    7bd2:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7bd4:	2204      	movs	r2, #4
    7bd6:	1b80      	subs	r0, r0, r6
    7bd8:	eb0d 0102 	add.w	r1, sp, r2
    7bdc:	4428      	add	r0, r5
    7bde:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    7be0:	9301      	str	r3, [sp, #4]
    7be2:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7be4:	f7fa f80a 	bl	1bfc <memcpy>
    7be8:	e7ed      	b.n	7bc6 <mem_init+0x2a>

00007bea <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    7bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    7bec:	6805      	ldr	r5, [r0, #0]
{
    7bee:	4606      	mov	r6, r0
	if (*mem_head) {
    7bf0:	b195      	cbz	r5, 7c18 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7bf2:	1deb      	adds	r3, r5, #7
    7bf4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    7bf8:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7bfa:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    7bfc:	4629      	mov	r1, r5
    7bfe:	eb0d 0002 	add.w	r0, sp, r2
    7c02:	f7f9 fffb 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    7c06:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    7c08:	3c01      	subs	r4, #1
    7c0a:	b2a4      	uxth	r4, r4
		if (head) {
    7c0c:	b11b      	cbz	r3, 7c16 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    7c0e:	1dda      	adds	r2, r3, #7
    7c10:	f022 0203 	bic.w	r2, r2, #3
    7c14:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    7c16:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    7c18:	4628      	mov	r0, r5
    7c1a:	b002      	add	sp, #8
    7c1c:	bd70      	pop	{r4, r5, r6, pc}

00007c1e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    7c1e:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    7c20:	680c      	ldr	r4, [r1, #0]
{
    7c22:	4606      	mov	r6, r0
    7c24:	460d      	mov	r5, r1
	if (*mem_head) {
    7c26:	b11c      	cbz	r4, 7c30 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7c28:	1de3      	adds	r3, r4, #7
    7c2a:	f023 0303 	bic.w	r3, r3, #3
    7c2e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    7c30:	2204      	movs	r2, #4
    7c32:	4629      	mov	r1, r5
    7c34:	4630      	mov	r0, r6
    7c36:	f7f9 ffe1 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    7c3a:	1df2      	adds	r2, r6, #7
    7c3c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    7c40:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    7c42:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    7c44:	602e      	str	r6, [r5, #0]
    7c46:	bd70      	pop	{r4, r5, r6, pc}

00007c48 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    7c48:	b118      	cbz	r0, 7c52 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    7c4a:	3007      	adds	r0, #7
    7c4c:	f020 0003 	bic.w	r0, r0, #3
    7c50:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    7c52:	4770      	bx	lr

00007c54 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    7c54:	fb02 0001 	mla	r0, r2, r1, r0
    7c58:	4770      	bx	lr

00007c5a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    7c5a:	1a40      	subs	r0, r0, r1
    7c5c:	b280      	uxth	r0, r0
}
    7c5e:	fbb0 f0f2 	udiv	r0, r0, r2
    7c62:	4770      	bx	lr

00007c64 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    7c64:	b510      	push	{r4, lr}
	src += len;
    7c66:	4411      	add	r1, r2
    7c68:	3801      	subs	r0, #1
	while (len--) {
    7c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7c6e:	3a01      	subs	r2, #1
    7c70:	b292      	uxth	r2, r2
    7c72:	429a      	cmp	r2, r3
    7c74:	d100      	bne.n	7c78 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    7c76:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    7c78:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    7c7c:	f800 4f01 	strb.w	r4, [r0, #1]!
    7c80:	e7f5      	b.n	7c6e <mem_rcopy+0xa>

00007c82 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    7c82:	4401      	add	r1, r0
	while (len--) {
    7c84:	4288      	cmp	r0, r1
    7c86:	d101      	bne.n	7c8c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7c88:	2000      	movs	r0, #0
    7c8a:	4770      	bx	lr
		if (*src++) {
    7c8c:	f810 3b01 	ldrb.w	r3, [r0], #1
    7c90:	2b00      	cmp	r3, #0
    7c92:	d0f7      	beq.n	7c84 <mem_nz+0x2>
			return 1;
    7c94:	2001      	movs	r0, #1
}
    7c96:	4770      	bx	lr

00007c98 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7c98:	6010      	str	r0, [r2, #0]
    7c9a:	6008      	str	r0, [r1, #0]

	return link;
}
    7c9c:	4770      	bx	lr

00007c9e <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    7c9e:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    7ca0:	6814      	ldr	r4, [r2, #0]
    7ca2:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    7ca4:	6814      	ldr	r4, [r2, #0]
    7ca6:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7ca8:	6010      	str	r0, [r2, #0]

	return link;
}
    7caa:	bd10      	pop	{r4, pc}

00007cac <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    7cac:	4288      	cmp	r0, r1
    7cae:	d003      	beq.n	7cb8 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    7cb0:	b11a      	cbz	r2, 7cba <memq_peek+0xe>
		*mem = head->mem;
    7cb2:	6843      	ldr	r3, [r0, #4]
    7cb4:	6013      	str	r3, [r2, #0]
    7cb6:	4770      	bx	lr
		return NULL;
    7cb8:	2000      	movs	r0, #0
	}

	return head;
}
    7cba:	4770      	bx	lr

00007cbc <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    7cbc:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    7cbe:	4283      	cmp	r3, r0
    7cc0:	d009      	beq.n	7cd6 <memq_dequeue+0x1a>
	if (mem) {
    7cc2:	b122      	cbz	r2, 7cce <memq_dequeue+0x12>
		*mem = head->mem;
    7cc4:	6858      	ldr	r0, [r3, #4]
    7cc6:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7cc8:	681a      	ldr	r2, [r3, #0]
    7cca:	600a      	str	r2, [r1, #0]

	return link;
    7ccc:	e001      	b.n	7cd2 <memq_dequeue+0x16>
	if (!link) {
    7cce:	2b00      	cmp	r3, #0
    7cd0:	d1fa      	bne.n	7cc8 <memq_dequeue+0xc>
}
    7cd2:	4618      	mov	r0, r3
    7cd4:	4770      	bx	lr
		return NULL;
    7cd6:	2300      	movs	r3, #0
    7cd8:	e7fb      	b.n	7cd2 <memq_dequeue+0x16>
	...

00007cdc <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    7cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    7ce0:	4f11      	ldr	r7, [pc, #68]	; (7d28 <mayfly_init+0x4c>)
    7ce2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 7d2c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    7ce6:	2604      	movs	r6, #4
	while (callee_id--) {
    7ce8:	3e01      	subs	r6, #1
    7cea:	b2f6      	uxtb	r6, r6
    7cec:	2eff      	cmp	r6, #255	; 0xff
    7cee:	d019      	beq.n	7d24 <mayfly_init+0x48>
    7cf0:	b233      	sxth	r3, r6
    7cf2:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7cf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7cfa:	011d      	lsls	r5, r3, #4
    7cfc:	2404      	movs	r4, #4
    7cfe:	f04f 0a0c 	mov.w	sl, #12
    7d02:	e00a      	b.n	7d1a <mayfly_init+0x3e>
    7d04:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    7d08:	1d0a      	adds	r2, r1, #4
    7d0a:	eb04 0008 	add.w	r0, r4, r8
    7d0e:	443a      	add	r2, r7
    7d10:	4439      	add	r1, r7
    7d12:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    7d16:	f7ff ffbf 	bl	7c98 <memq_init>
		while (caller_id--) {
    7d1a:	3c01      	subs	r4, #1
    7d1c:	b2e4      	uxtb	r4, r4
    7d1e:	2cff      	cmp	r4, #255	; 0xff
    7d20:	d1f0      	bne.n	7d04 <mayfly_init+0x28>
    7d22:	e7e1      	b.n	7ce8 <mayfly_init+0xc>
    7d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d28:	20000730 	.word	0x20000730
    7d2c:	200006b0 	.word	0x200006b0

00007d30 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    7d30:	b4f0      	push	{r4, r5, r6, r7}
    7d32:	4b12      	ldr	r3, [pc, #72]	; (7d7c <mayfly_enable+0x4c>)
    7d34:	4605      	mov	r5, r0
    7d36:	460f      	mov	r7, r1
    7d38:	260c      	movs	r6, #12
    7d3a:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    7d3c:	b172      	cbz	r2, 7d5c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    7d3e:	4361      	muls	r1, r4
    7d40:	fb06 1400 	mla	r4, r6, r0, r1
    7d44:	4423      	add	r3, r4
    7d46:	7a59      	ldrb	r1, [r3, #9]
    7d48:	7a18      	ldrb	r0, [r3, #8]
    7d4a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    7d4c:	bf04      	itt	eq
    7d4e:	3101      	addeq	r1, #1
    7d50:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    7d52:	4628      	mov	r0, r5
    7d54:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    7d56:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    7d58:	f00b bc12 	b.w	13580 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    7d5c:	434c      	muls	r4, r1
    7d5e:	fb06 4400 	mla	r4, r6, r0, r4
    7d62:	4423      	add	r3, r4
    7d64:	7a9c      	ldrb	r4, [r3, #10]
    7d66:	7ada      	ldrb	r2, [r3, #11]
    7d68:	42a2      	cmp	r2, r4
    7d6a:	d104      	bne.n	7d76 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    7d6c:	3201      	adds	r2, #1
    7d6e:	729a      	strb	r2, [r3, #10]
}
    7d70:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    7d72:	f00b bc65 	b.w	13640 <mayfly_pend>
}
    7d76:	bcf0      	pop	{r4, r5, r6, r7}
    7d78:	4770      	bx	lr
    7d7a:	bf00      	nop
    7d7c:	20000730 	.word	0x20000730

00007d80 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    7d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d82:	4605      	mov	r5, r0
    7d84:	460e      	mov	r6, r1
    7d86:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7d88:	b18a      	cbz	r2, 7dae <mayfly_enqueue+0x2e>
    7d8a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    7d8c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    7d8e:	7820      	ldrb	r0, [r4, #0]
    7d90:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    7d92:	f010 0703 	ands.w	r7, r0, #3
    7d96:	d029      	beq.n	7dec <mayfly_enqueue+0x6c>
		if (chain) {
    7d98:	b303      	cbz	r3, 7ddc <mayfly_enqueue+0x5c>
			if (state != 1) {
    7d9a:	2f01      	cmp	r7, #1
    7d9c:	d039      	beq.n	7e12 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    7d9e:	3201      	adds	r2, #1
    7da0:	b2d2      	uxtb	r2, r2
    7da2:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    7da4:	4631      	mov	r1, r6
    7da6:	4628      	mov	r0, r5
    7da8:	f00b fc4a 	bl	13640 <mayfly_pend>
    7dac:	e01c      	b.n	7de8 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7dae:	f00b fc35 	bl	1361c <mayfly_prio_is_equal>
    7db2:	2800      	cmp	r0, #0
    7db4:	d0e9      	beq.n	7d8a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    7db6:	4631      	mov	r1, r6
    7db8:	4628      	mov	r0, r5
    7dba:	f00b fc09 	bl	135d0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7dbe:	2800      	cmp	r0, #0
    7dc0:	d0e3      	beq.n	7d8a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    7dc2:	2330      	movs	r3, #48	; 0x30
    7dc4:	220c      	movs	r2, #12
    7dc6:	4373      	muls	r3, r6
    7dc8:	fb02 3305 	mla	r3, r2, r5, r3
    7dcc:	4a12      	ldr	r2, [pc, #72]	; (7e18 <mayfly_enqueue+0x98>)
    7dce:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    7dd0:	7a93      	ldrb	r3, [r2, #10]
    7dd2:	7ad2      	ldrb	r2, [r2, #11]
    7dd4:	1a9b      	subs	r3, r3, r2
    7dd6:	bf18      	it	ne
    7dd8:	2301      	movne	r3, #1
    7dda:	e7d7      	b.n	7d8c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    7ddc:	3202      	adds	r2, #2
    7dde:	b2d2      	uxtb	r2, r2
    7de0:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    7de2:	68e3      	ldr	r3, [r4, #12]
    7de4:	68a0      	ldr	r0, [r4, #8]
    7de6:	4798      	blx	r3
		return 0;
    7de8:	2000      	movs	r0, #0
    7dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    7dec:	2b00      	cmp	r3, #0
    7dee:	d0f8      	beq.n	7de2 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    7df0:	3201      	adds	r2, #1
    7df2:	b2d2      	uxtb	r2, r2
    7df4:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7df6:	2304      	movs	r3, #4
    7df8:	2230      	movs	r2, #48	; 0x30
    7dfa:	fb12 3206 	smlabb	r2, r2, r6, r3
    7dfe:	230c      	movs	r3, #12
    7e00:	fb13 2305 	smlabb	r3, r3, r5, r2
    7e04:	4a04      	ldr	r2, [pc, #16]	; (7e18 <mayfly_enqueue+0x98>)
    7e06:	6860      	ldr	r0, [r4, #4]
    7e08:	441a      	add	r2, r3
    7e0a:	4621      	mov	r1, r4
    7e0c:	f7ff ff47 	bl	7c9e <memq_enqueue>
    7e10:	e7c8      	b.n	7da4 <mayfly_enqueue+0x24>
			return 1;
    7e12:	4638      	mov	r0, r7

	return 0;
}
    7e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e16:	bf00      	nop
    7e18:	20000730 	.word	0x20000730

00007e1c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    7e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e20:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7e24:	b089      	sub	sp, #36	; 0x24
    7e26:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    7e28:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    7e2c:	4e43      	ldr	r6, [pc, #268]	; (7f3c <mayfly_run+0x120>)
    7e2e:	9304      	str	r3, [sp, #16]
{
    7e30:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    7e32:	2404      	movs	r4, #4
	u8_t disable = 0;
    7e34:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    7e38:	3c01      	subs	r4, #1
    7e3a:	b2e4      	uxtb	r4, r4
    7e3c:	2cff      	cmp	r4, #255	; 0xff
    7e3e:	d10b      	bne.n	7e58 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    7e40:	9b01      	ldr	r3, [sp, #4]
    7e42:	2b00      	cmp	r3, #0
    7e44:	d076      	beq.n	7f34 <mayfly_run+0x118>
    7e46:	f1b8 0f00 	cmp.w	r8, #0
    7e4a:	d173      	bne.n	7f34 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    7e4c:	4642      	mov	r2, r8
    7e4e:	4629      	mov	r1, r5
    7e50:	4628      	mov	r0, r5
    7e52:	f00b fb95 	bl	13580 <mayfly_enable_cb>
    7e56:	e06d      	b.n	7f34 <mayfly_run+0x118>
		struct mayfly *m = 0;
    7e58:	f10d 0b20 	add.w	fp, sp, #32
    7e5c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    7e5e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    7e60:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    7e64:	f04f 0930 	mov.w	r9, #48	; 0x30
    7e68:	fb07 f304 	mul.w	r3, r7, r4
    7e6c:	fb09 3005 	mla	r0, r9, r5, r3
    7e70:	1831      	adds	r1, r6, r0
    7e72:	465a      	mov	r2, fp
    7e74:	6849      	ldr	r1, [r1, #4]
    7e76:	5830      	ldr	r0, [r6, r0]
    7e78:	9302      	str	r3, [sp, #8]
    7e7a:	f7ff ff17 	bl	7cac <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7e7e:	9b04      	ldr	r3, [sp, #16]
    7e80:	fb17 3704 	smlabb	r7, r7, r4, r3
    7e84:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    7e86:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7e88:	9303      	str	r3, [sp, #12]
		while (link) {
    7e8a:	f1ba 0f00 	cmp.w	sl, #0
    7e8e:	d119      	bne.n	7ec4 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7e90:	2230      	movs	r2, #48	; 0x30
    7e92:	230c      	movs	r3, #12
    7e94:	436a      	muls	r2, r5
    7e96:	fb03 2204 	mla	r2, r3, r4, r2
    7e9a:	4432      	add	r2, r6
    7e9c:	7a91      	ldrb	r1, [r2, #10]
    7e9e:	7ad0      	ldrb	r0, [r2, #11]
    7ea0:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    7ea2:	bf1e      	ittt	ne
    7ea4:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    7ea6:	2201      	movne	r2, #1
    7ea8:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    7eaa:	2230      	movs	r2, #48	; 0x30
    7eac:	436a      	muls	r2, r5
    7eae:	fb03 2304 	mla	r3, r3, r4, r2
    7eb2:	4433      	add	r3, r6
    7eb4:	7a1a      	ldrb	r2, [r3, #8]
    7eb6:	7a59      	ldrb	r1, [r3, #9]
    7eb8:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    7eba:	bf1c      	itt	ne
    7ebc:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    7ebe:	f04f 0801 	movne.w	r8, #1
    7ec2:	e7b9      	b.n	7e38 <mayfly_run+0x1c>
			req = m->_req;
    7ec4:	9b07      	ldr	r3, [sp, #28]
    7ec6:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7ec8:	785a      	ldrb	r2, [r3, #1]
    7eca:	1abf      	subs	r7, r7, r2
    7ecc:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7ed0:	2f01      	cmp	r7, #1
    7ed2:	d104      	bne.n	7ede <mayfly_run+0xc2>
				m->_ack--;
    7ed4:	3a01      	subs	r2, #1
    7ed6:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    7ed8:	6898      	ldr	r0, [r3, #8]
    7eda:	68da      	ldr	r2, [r3, #12]
    7edc:	4790      	blx	r2
			req = m->_req;
    7ede:	9a07      	ldr	r2, [sp, #28]
    7ee0:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    7ee2:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    7ee4:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    7ee6:	1a9a      	subs	r2, r3, r2
    7ee8:	f002 0203 	and.w	r2, r2, #3
    7eec:	2a01      	cmp	r2, #1
    7eee:	9305      	str	r3, [sp, #20]
    7ef0:	d00d      	beq.n	7f0e <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7ef2:	9b02      	ldr	r3, [sp, #8]
    7ef4:	9903      	ldr	r1, [sp, #12]
    7ef6:	fb09 3005 	mla	r0, r9, r5, r3
    7efa:	4430      	add	r0, r6
    7efc:	2200      	movs	r2, #0
    7efe:	6840      	ldr	r0, [r0, #4]
    7f00:	f7ff fedc 	bl	7cbc <memq_dequeue>
				m->_link = link;
    7f04:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    7f06:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    7f08:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    7f0c:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    7f0e:	9b02      	ldr	r3, [sp, #8]
    7f10:	fb09 3305 	mla	r3, r9, r5, r3
    7f14:	18f1      	adds	r1, r6, r3
    7f16:	465a      	mov	r2, fp
    7f18:	6849      	ldr	r1, [r1, #4]
    7f1a:	58f0      	ldr	r0, [r6, r3]
    7f1c:	f7ff fec6 	bl	7cac <memq_peek>
			if (state == 1) {
    7f20:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    7f22:	4682      	mov	sl, r0
			if (state == 1) {
    7f24:	d1b1      	bne.n	7e8a <mayfly_run+0x6e>
				if (caller_id || link) {
    7f26:	b90c      	cbnz	r4, 7f2c <mayfly_run+0x110>
    7f28:	2800      	cmp	r0, #0
    7f2a:	d0b1      	beq.n	7e90 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    7f2c:	4629      	mov	r1, r5
    7f2e:	4628      	mov	r0, r5
    7f30:	f00b fb86 	bl	13640 <mayfly_pend>
	}
}
    7f34:	b009      	add	sp, #36	; 0x24
    7f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f3a:	bf00      	nop
    7f3c:	20000730 	.word	0x20000730

00007f40 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7f40:	b510      	push	{r4, lr}
    7f42:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    7f44:	2000      	movs	r0, #0

	while (octets_len--) {
    7f46:	3901      	subs	r1, #1
    7f48:	b2c9      	uxtb	r1, r1
    7f4a:	29ff      	cmp	r1, #255	; 0xff
    7f4c:	d100      	bne.n	7f50 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    7f4e:	bd10      	pop	{r4, pc}
		bite = *octets;
    7f50:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7f54:	2b00      	cmp	r3, #0
    7f56:	d0f6      	beq.n	7f46 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7f58:	1e5c      	subs	r4, r3, #1
			one_count++;
    7f5a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    7f5c:	4023      	ands	r3, r4
			one_count++;
    7f5e:	b2c0      	uxtb	r0, r0
    7f60:	e7f8      	b.n	7f54 <util_ones_count_get+0x14>

00007f62 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7f62:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7f64:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7f66:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7f68:	461a      	mov	r2, r3
	total = 0;
    7f6a:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7f6c:	2aff      	cmp	r2, #255	; 0xff
    7f6e:	d101      	bne.n	7f74 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7f70:	2000      	movs	r0, #0
    7f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7f74:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7f78:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    7f7a:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    7f7e:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7f82:	d004      	beq.n	7f8e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7f84:	68b3      	ldr	r3, [r6, #8]
    7f86:	441c      	add	r4, r3
		current = ticker_current->next;
    7f88:	4613      	mov	r3, r2
    7f8a:	463a      	mov	r2, r7
    7f8c:	e7ee      	b.n	7f6c <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    7f8e:	4293      	cmp	r3, r2
    7f90:	d100      	bne.n	7f94 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7f92:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7f94:	b21b      	sxth	r3, r3
    7f96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7f9a:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    7f9c:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    7f9e:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7fa2:	7833      	ldrb	r3, [r6, #0]
    7fa4:	2bff      	cmp	r3, #255	; 0xff
    7fa6:	d006      	beq.n	7fb6 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7fa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7fac:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7fb0:	689a      	ldr	r2, [r3, #8]
    7fb2:	4402      	add	r2, r0
    7fb4:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7fb6:	4420      	add	r0, r4
    7fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007fba <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7fba:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7fbc:	1a55      	subs	r5, r2, r1
    7fbe:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7fc2:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7fc4:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7fc6:	d109      	bne.n	7fdc <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7fc8:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7fcc:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7fce:	42a2      	cmp	r2, r4
    7fd0:	d90e      	bls.n	7ff0 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7fd2:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7fd4:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7fd6:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7fd8:	6144      	str	r4, [r0, #20]
    7fda:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7fdc:	1a8a      	subs	r2, r1, r2
    7fde:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7fe2:	4293      	cmp	r3, r2
    7fe4:	d901      	bls.n	7fea <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7fe6:	1a9a      	subs	r2, r3, r2
    7fe8:	e7f1      	b.n	7fce <ticks_to_expire_prep+0x14>
    7fea:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7fec:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    7fee:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7ff0:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    7ff2:	2200      	movs	r2, #0
    7ff4:	e7ef      	b.n	7fd6 <ticks_to_expire_prep+0x1c>

00007ff6 <ticker_job_op_cb>:
{
    7ff6:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7ff8:	2200      	movs	r2, #0
    7ffa:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    7ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    7ffe:	6259      	str	r1, [r3, #36]	; 0x24
{
    8000:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    8002:	b10a      	cbz	r2, 8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8006:	4710      	bx	r2
    8008:	4770      	bx	lr

0000800a <ticker_worker>:
{
    800a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    800e:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    8010:	2301      	movs	r3, #1
{
    8012:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    8014:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    8016:	2d00      	cmp	r5, #0
    8018:	d14c      	bne.n	80b4 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    801a:	7f43      	ldrb	r3, [r0, #29]
    801c:	2bff      	cmp	r3, #255	; 0xff
    801e:	d102      	bne.n	8026 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    8020:	77c5      	strb	r5, [r0, #31]
		return;
    8022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    8026:	f00a fe15 	bl	12c54 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    802a:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    802c:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    802e:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8032:	1bc7      	subs	r7, r0, r7
    8034:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    8038:	2eff      	cmp	r6, #255	; 0xff
    803a:	d006      	beq.n	804a <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    803c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    8040:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    8044:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    8046:	429f      	cmp	r7, r3
    8048:	d218      	bcs.n	807c <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    804a:	7aa2      	ldrb	r2, [r4, #10]
    804c:	7ae3      	ldrb	r3, [r4, #11]
    804e:	4293      	cmp	r3, r2
    8050:	d105      	bne.n	805e <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    8052:	3301      	adds	r3, #1
    8054:	b2db      	uxtb	r3, r3
			last = 0;
    8056:	2b02      	cmp	r3, #2
    8058:	bf08      	it	eq
    805a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    805c:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    805e:	7ae3      	ldrb	r3, [r4, #11]
    8060:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    8064:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    8066:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    8068:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    806a:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    806c:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    806e:	46ac      	mov	ip, r5
    8070:	4623      	mov	r3, r4
    8072:	2104      	movs	r1, #4
    8074:	2003      	movs	r0, #3
}
    8076:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    807a:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    807c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    807e:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    8080:	788a      	ldrb	r2, [r1, #2]
    8082:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    8084:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    8088:	1a9b      	subs	r3, r3, r2
    808a:	b2db      	uxtb	r3, r3
    808c:	2b01      	cmp	r3, #1
    808e:	d1d3      	bne.n	8038 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    8090:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    8094:	3a01      	subs	r2, #1
    8096:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    8098:	f1b9 0f00 	cmp.w	r9, #0
    809c:	d0cc      	beq.n	8038 <ticker_worker+0x2e>
					   ticks_expired -
    809e:	6948      	ldr	r0, [r1, #20]
    80a0:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    80a2:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    80a4:	1a28      	subs	r0, r5, r0
    80a6:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    80a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    80ac:	690b      	ldr	r3, [r1, #16]
    80ae:	6a49      	ldr	r1, [r1, #36]	; 0x24
    80b0:	47c8      	blx	r9
    80b2:	e7c1      	b.n	8038 <ticker_worker+0x2e>
    80b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000080b8 <ticker_job>:
{
    80b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    80bc:	7fc2      	ldrb	r2, [r0, #31]
{
    80be:	b095      	sub	sp, #84	; 0x54
    80c0:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    80c2:	2a00      	cmp	r2, #0
    80c4:	f040 83be 	bne.w	8844 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    80c8:	6943      	ldr	r3, [r0, #20]
    80ca:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    80cc:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    80ce:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    80d0:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    80d2:	7ac0      	ldrb	r0, [r0, #11]
    80d4:	4298      	cmp	r0, r3
    80d6:	f000 808f 	beq.w	81f8 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    80da:	440b      	add	r3, r1
    80dc:	b2db      	uxtb	r3, r3
			first = 0;
    80de:	2b02      	cmp	r3, #2
    80e0:	bf08      	it	eq
    80e2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    80e4:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    80e8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    80ec:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    80ee:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    80f2:	9b07      	ldr	r3, [sp, #28]
    80f4:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    80f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    80fa:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    80fe:	f89b 301d 	ldrb.w	r3, [fp, #29]
    8102:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    8104:	f8db 3000 	ldr.w	r3, [fp]
    8108:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    810a:	f8db 3004 	ldr.w	r3, [fp, #4]
    810e:	930d      	str	r3, [sp, #52]	; 0x34
    8110:	f89b 3009 	ldrb.w	r3, [fp, #9]
    8114:	3b01      	subs	r3, #1
    8116:	b2db      	uxtb	r3, r3
    8118:	9304      	str	r3, [sp, #16]
	pending = 0;
    811a:	2300      	movs	r3, #0
    811c:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    811e:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    8122:	9b04      	ldr	r3, [sp, #16]
    8124:	2bff      	cmp	r3, #255	; 0xff
    8126:	d16a      	bne.n	81fe <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    8128:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    812c:	9a05      	ldr	r2, [sp, #20]
    812e:	1a9b      	subs	r3, r3, r2
    8130:	bf18      	it	ne
    8132:	2301      	movne	r3, #1
    8134:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    8136:	9b03      	ldr	r3, [sp, #12]
    8138:	b1e3      	cbz	r3, 8174 <ticker_job+0xbc>
	node = &instance->node[0];
    813a:	f8db 3000 	ldr.w	r3, [fp]
    813e:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    8140:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    8144:	f89b 601d 	ldrb.w	r6, [fp, #29]
    8148:	2eff      	cmp	r6, #255	; 0xff
    814a:	d00c      	beq.n	8166 <ticker_job+0xae>
		ticker = &node[id_expired];
    814c:	b237      	sxth	r7, r6
    814e:	9b06      	ldr	r3, [sp, #24]
    8150:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    8154:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    8158:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    815a:	4545      	cmp	r5, r8
    815c:	f240 8136 	bls.w	83cc <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    8160:	eba5 0508 	sub.w	r5, r5, r8
    8164:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    8166:	9b04      	ldr	r3, [sp, #16]
    8168:	9a03      	ldr	r2, [sp, #12]
    816a:	9905      	ldr	r1, [sp, #20]
    816c:	42b1      	cmp	r1, r6
    816e:	bf18      	it	ne
    8170:	4613      	movne	r3, r2
    8172:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    8174:	f8db 3000 	ldr.w	r3, [fp]
    8178:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    817a:	f8db 3004 	ldr.w	r3, [fp, #4]
    817e:	9312      	str	r3, [sp, #72]	; 0x48
    8180:	f89b 3009 	ldrb.w	r3, [fp, #9]
    8184:	3b01      	subs	r3, #1
    8186:	b2db      	uxtb	r3, r3
    8188:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    818a:	9b03      	ldr	r3, [sp, #12]
    818c:	2bff      	cmp	r3, #255	; 0xff
    818e:	f040 8170 	bne.w	8472 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    8192:	f89b 301d 	ldrb.w	r3, [fp, #29]
    8196:	9a05      	ldr	r2, [sp, #20]
    8198:	4293      	cmp	r3, r2
	if (!pending) {
    819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    819c:	f040 8349 	bne.w	8832 <ticker_job+0x77a>
	if (!pending) {
    81a0:	b95b      	cbnz	r3, 81ba <ticker_job+0x102>
    81a2:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    81a6:	f8db 3004 	ldr.w	r3, [fp, #4]
    81aa:	9303      	str	r3, [sp, #12]
    81ac:	3c01      	subs	r4, #1
    81ae:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    81b0:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    81b4:	2cff      	cmp	r4, #255	; 0xff
    81b6:	f040 82a0 	bne.w	86fa <ticker_job+0x642>
	instance->job_guard = 0;
    81ba:	2300      	movs	r3, #0
    81bc:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    81c0:	9b04      	ldr	r3, [sp, #16]
    81c2:	b14b      	cbz	r3, 81d8 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    81c4:	f89b 301d 	ldrb.w	r3, [fp, #29]
    81c8:	2bff      	cmp	r3, #255	; 0xff
    81ca:	f040 82e9 	bne.w	87a0 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    81ce:	f00a fd13 	bl	12bf8 <cntr_stop>
    81d2:	b908      	cbnz	r0, 81d8 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    81d4:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    81d8:	f89b 301f 	ldrb.w	r3, [fp, #31]
    81dc:	2b00      	cmp	r3, #0
    81de:	f000 8331 	beq.w	8844 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    81e2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    81e6:	465b      	mov	r3, fp
    81e8:	2201      	movs	r2, #1
    81ea:	2103      	movs	r1, #3
    81ec:	2004      	movs	r0, #4
    81ee:	46a4      	mov	ip, r4
}
    81f0:	b015      	add	sp, #84	; 0x54
    81f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    81f6:	4760      	bx	ip
		flag_elapsed = 0;
    81f8:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    81fa:	4690      	mov	r8, r2
    81fc:	e77f      	b.n	80fe <ticker_job+0x46>
		user = &users[count_user];
    81fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8200:	9a04      	ldr	r2, [sp, #16]
    8202:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    8206:	687b      	ldr	r3, [r7, #4]
    8208:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    820a:	78f9      	ldrb	r1, [r7, #3]
    820c:	78be      	ldrb	r6, [r7, #2]
    820e:	428e      	cmp	r6, r1
    8210:	f000 80d7 	beq.w	83c2 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    8214:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    8216:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    8218:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    821c:	0112      	lsls	r2, r2, #4
    821e:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    8220:	1c73      	adds	r3, r6, #1
    8222:	b2db      	uxtb	r3, r3
				middle = 0;
    8224:	4298      	cmp	r0, r3
    8226:	bf08      	it	eq
    8228:	2300      	moveq	r3, #0
			user->middle = middle;
    822a:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    822c:	9b08      	ldr	r3, [sp, #32]
    822e:	5c9a      	ldrb	r2, [r3, r2]
    8230:	2a03      	cmp	r2, #3
    8232:	d9eb      	bls.n	820c <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    8234:	2a05      	cmp	r2, #5
    8236:	d817      	bhi.n	8268 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    8238:	7869      	ldrb	r1, [r5, #1]
    823a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    823e:	930c      	str	r3, [sp, #48]	; 0x30
    8240:	980c      	ldr	r0, [sp, #48]	; 0x30
    8242:	9b06      	ldr	r3, [sp, #24]
    8244:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    8248:	7863      	ldrb	r3, [r4, #1]
    824a:	78a0      	ldrb	r0, [r4, #2]
    824c:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    824e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8252:	d009      	beq.n	8268 <ticker_job+0x1b0>
			    (state == 0) ||
    8254:	2a04      	cmp	r2, #4
    8256:	d10c      	bne.n	8272 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    8258:	686a      	ldr	r2, [r5, #4]
    825a:	b952      	cbnz	r2, 8272 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    825c:	68aa      	ldr	r2, [r5, #8]
    825e:	b942      	cbnz	r2, 8272 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    8260:	68ea      	ldr	r2, [r5, #12]
    8262:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8266:	d104      	bne.n	8272 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    8268:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    826a:	4628      	mov	r0, r5
    826c:	f7ff fec3 	bl	7ff6 <ticker_job_op_cb>
    8270:	e7cb      	b.n	820a <ticker_job+0x152>
			if (state == 1) {
    8272:	2b01      	cmp	r3, #1
    8274:	f040 809b 	bne.w	83ae <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8278:	4658      	mov	r0, fp
    827a:	f7ff fe72 	bl	7f62 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    827e:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8280:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8282:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8284:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8286:	f040 8084 	bne.w	8392 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    828a:	f8db 3014 	ldr.w	r3, [fp, #20]
    828e:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    8290:	f00a fce0 	bl	12c54 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    8296:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8298:	1ac3      	subs	r3, r0, r3
    829a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    829e:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    82a0:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    82a2:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    82a4:	bf9e      	ittt	ls
    82a6:	6962      	ldrls	r2, [r4, #20]
    82a8:	1b92      	subls	r2, r2, r6
    82aa:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    82ac:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    82ae:	bf96      	itet	ls
    82b0:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    82b2:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    82b4:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    82b6:	b18a      	cbz	r2, 82dc <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    82b8:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    82ba:	b179      	cbz	r1, 82dc <ticker_job+0x224>
		user_op->params.update.lazy--;
    82bc:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    82c0:	fa1f fe8e 	uxth.w	lr, lr
    82c4:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    82c8:	429a      	cmp	r2, r3
    82ca:	d32b      	bcc.n	8324 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    82cc:	f8df 9324 	ldr.w	r9, [pc, #804]	; 85f4 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    82d0:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    82d4:	45e6      	cmp	lr, ip
    82d6:	d847      	bhi.n	8368 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    82d8:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    82dc:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    82de:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    82e0:	4413      	add	r3, r2
    82e2:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    82e4:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    82e6:	6963      	ldr	r3, [r4, #20]
    82e8:	4413      	add	r3, r2
    82ea:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    82ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    82ee:	4620      	mov	r0, r4
    82f0:	f7ff fe63 	bl	7fba <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    82f4:	69a2      	ldr	r2, [r4, #24]
    82f6:	892b      	ldrh	r3, [r5, #8]
    82f8:	4413      	add	r3, r2
    82fa:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    82fc:	896a      	ldrh	r2, [r5, #10]
    82fe:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    8300:	bf8c      	ite	hi
    8302:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    8304:	2300      	movls	r3, #0
    8306:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    8308:	7bab      	ldrb	r3, [r5, #14]
    830a:	b103      	cbz	r3, 830e <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    830c:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    830e:	9b06      	ldr	r3, [sp, #24]
    8310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8312:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    8316:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    8318:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    831c:	3301      	adds	r3, #1
    831e:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    8320:	2100      	movs	r1, #0
    8322:	e7a2      	b.n	826a <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    8324:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8328:	45e6      	cmp	lr, ip
    832a:	d2cf      	bcs.n	82cc <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    832c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    832e:	4eaf      	ldr	r6, [pc, #700]	; (85ec <ticker_job+0x534>)
    8330:	48af      	ldr	r0, [pc, #700]	; (85f0 <ticker_job+0x538>)
    8332:	198e      	adds	r6, r1, r6
    8334:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    8336:	bf81      	itttt	hi
    8338:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    833c:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    8340:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    8344:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    8346:	6a66      	ldr	r6, [r4, #36]	; 0x24
    8348:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    834a:	bf8c      	ite	hi
    834c:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    8350:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    8354:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    8356:	4491      	add	r9, r2
			ticker->lazy_current--;
    8358:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    835c:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    835e:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    8362:	f8a4 c01e 	strh.w	ip, [r4, #30]
    8366:	e7af      	b.n	82c8 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    8368:	6a66      	ldr	r6, [r4, #36]	; 0x24
    836a:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    836c:	48a0      	ldr	r0, [pc, #640]	; (85f0 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    836e:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    8370:	499e      	ldr	r1, [pc, #632]	; (85ec <ticker_job+0x534>)
    8372:	1871      	adds	r1, r6, r1
    8374:	4281      	cmp	r1, r0
	return 0;
    8376:	bf8e      	itee	hi
    8378:	2100      	movhi	r1, #0
		return 1;
    837a:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    837c:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    837e:	4411      	add	r1, r2
			ticker->lazy_current++;
    8380:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    8384:	bf8c      	ite	hi
    8386:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    8388:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    838a:	440b      	add	r3, r1
			ticker->lazy_current++;
    838c:	f8a4 c01e 	strh.w	ip, [r4, #30]
    8390:	e79e      	b.n	82d0 <ticker_job+0x218>
		ticker->req = ticker->ack;
    8392:	78a3      	ldrb	r3, [r4, #2]
    8394:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    8396:	786b      	ldrb	r3, [r5, #1]
    8398:	f89b 201c 	ldrb.w	r2, [fp, #28]
    839c:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    839e:	bf01      	itttt	eq
    83a0:	23ff      	moveq	r3, #255	; 0xff
    83a2:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    83a6:	2300      	moveq	r3, #0
    83a8:	f8cb 3018 	streq.w	r3, [fp, #24]
    83ac:	e7b8      	b.n	8320 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    83ae:	2104      	movs	r1, #4
    83b0:	465b      	mov	r3, fp
    83b2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    83b6:	2201      	movs	r2, #1
    83b8:	4608      	mov	r0, r1
    83ba:	47a0      	blx	r4
				pending = 1;
    83bc:	2301      	movs	r3, #1
				user->middle = prev;
    83be:	70be      	strb	r6, [r7, #2]
				pending = 1;
    83c0:	9309      	str	r3, [sp, #36]	; 0x24
    83c2:	9b04      	ldr	r3, [sp, #16]
    83c4:	3b01      	subs	r3, #1
    83c6:	b2db      	uxtb	r3, r3
    83c8:	9304      	str	r3, [sp, #16]
    83ca:	e6aa      	b.n	8122 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    83cc:	f8db 3018 	ldr.w	r3, [fp, #24]
    83d0:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    83d2:	bf29      	itett	cs
    83d4:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    83d6:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    83d8:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    83dc:	2300      	movcs	r3, #0
    83de:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    83e2:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    83e4:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    83e6:	b11b      	cbz	r3, 83f0 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    83e8:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    83ec:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    83f0:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    83f2:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    83f4:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    83f6:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    83fa:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    83fe:	f8d4 e004 	ldr.w	lr, [r4, #4]
    8402:	f1be 0f00 	cmp.w	lr, #0
    8406:	d030      	beq.n	846a <ticker_job+0x3b2>
    8408:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    840a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 85f0 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    840e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8410:	6a21      	ldr	r1, [r4, #32]
    8412:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    8414:	4975      	ldr	r1, [pc, #468]	; (85ec <ticker_job+0x534>)
    8416:	1859      	adds	r1, r3, r1
    8418:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    841a:	bf9f      	itttt	ls
    841c:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    8420:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    8424:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    8428:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    842a:	bf92      	itee	ls
    842c:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    842e:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    8430:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    8432:	4473      	add	r3, lr
			while (count--) {
    8434:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    8438:	441a      	add	r2, r3
			while (count--) {
    843a:	d2e8      	bcs.n	840e <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    843c:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    843e:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    8440:	f8db 1014 	ldr.w	r1, [fp, #20]
    8444:	eb03 0209 	add.w	r2, r3, r9
    8448:	4620      	mov	r0, r4
    844a:	f7ff fdb6 	bl	7fba <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    844e:	8ba3      	ldrh	r3, [r4, #28]
    8450:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    8452:	2300      	movs	r3, #0
    8454:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    8456:	9b06      	ldr	r3, [sp, #24]
    8458:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    845c:	7863      	ldrb	r3, [r4, #1]
    845e:	3301      	adds	r3, #1
    8460:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    8462:	eba8 0805 	sub.w	r8, r8, r5
    8466:	46b2      	mov	sl, r6
    8468:	e66c      	b.n	8144 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    846a:	78a3      	ldrb	r3, [r4, #2]
    846c:	7063      	strb	r3, [r4, #1]
    846e:	4656      	mov	r6, sl
    8470:	e7f7      	b.n	8462 <ticker_job+0x3aa>
		user = &users[count_user];
    8472:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8474:	9a03      	ldr	r2, [sp, #12]
    8476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    847a:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    847c:	685b      	ldr	r3, [r3, #4]
    847e:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    8480:	9b06      	ldr	r3, [sp, #24]
    8482:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    8486:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    848a:	f000 808e 	beq.w	85aa <ticker_job+0x4f2>
				ticker = &node[id_insert];
    848e:	fa0f f38a 	sxth.w	r3, sl
    8492:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    8498:	46d0      	mov	r8, sl
    849a:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    849e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    84a2:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    84a4:	f8db 3000 	ldr.w	r3, [fp]
    84a8:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    84aa:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    84ac:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    84ae:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    84b0:	8be3      	ldrh	r3, [r4, #30]
    84b2:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    84b4:	bf86      	itte	hi
    84b6:	1a9b      	subhi	r3, r3, r2
    84b8:	b29b      	uxthhi	r3, r3
		skip = 0;
    84ba:	2300      	movls	r3, #0
    84bc:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    84be:	fa0f f388 	sxth.w	r3, r8
    84c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    84c6:	00db      	lsls	r3, r3, #3
    84c8:	9313      	str	r3, [sp, #76]	; 0x4c
    84ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    84cc:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    84d0:	f8db 0018 	ldr.w	r0, [fp, #24]
    84d4:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    84d6:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    84da:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    84dc:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    84e0:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    84e4:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    84e6:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    84e8:	2bff      	cmp	r3, #255	; 0xff
    84ea:	d007      	beq.n	84fc <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    84ec:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    84f0:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    84f4:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    84f6:	4281      	cmp	r1, r0
    84f8:	f200 80a9 	bhi.w	864e <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    84fc:	f8de 0018 	ldr.w	r0, [lr, #24]
    8500:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    8502:	eb01 0c00 	add.w	ip, r1, r0
    8506:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    8508:	2eff      	cmp	r6, #255	; 0xff
    850a:	f040 80ae 	bne.w	866a <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    850e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8510:	b130      	cbz	r0, 8520 <ticker_job+0x468>
    8512:	9807      	ldr	r0, [sp, #28]
    8514:	4281      	cmp	r1, r0
    8516:	f0c0 80bf 	bcc.w	8698 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    851a:	2eff      	cmp	r6, #255	; 0xff
    851c:	f040 818e 	bne.w	883c <ticker_job+0x784>
		if (previous == current) {
    8520:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    8522:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    8526:	4283      	cmp	r3, r0
			node[previous].next = id;
    8528:	bf18      	it	ne
    852a:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    852e:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    8532:	bf16      	itet	ne
    8534:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    8538:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    853c:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    8540:	2bff      	cmp	r3, #255	; 0xff
    8542:	d006      	beq.n	8552 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    8544:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8548:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    854c:	689a      	ldr	r2, [r3, #8]
    854e:	1a51      	subs	r1, r2, r1
    8550:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    8552:	78a3      	ldrb	r3, [r4, #2]
    8554:	3301      	adds	r3, #1
    8556:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    8558:	2100      	movs	r1, #0
			if (user_op) {
    855a:	2d00      	cmp	r5, #0
    855c:	d093      	beq.n	8486 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    855e:	4628      	mov	r0, r5
    8560:	f7ff fd49 	bl	7ff6 <ticker_job_op_cb>
    8564:	e78f      	b.n	8486 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    8566:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    856a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    856c:	011b      	lsls	r3, r3, #4
    856e:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    8570:	f109 0201 	add.w	r2, r9, #1
    8574:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    8578:	9a06      	ldr	r2, [sp, #24]
    857a:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    857c:	454a      	cmp	r2, r9
    857e:	bf08      	it	eq
    8580:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    8584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8586:	5cd3      	ldrb	r3, [r2, r3]
    8588:	2b03      	cmp	r3, #3
    858a:	d10e      	bne.n	85aa <ticker_job+0x4f2>
				id_insert = user_op->id;
    858c:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    8590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8592:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    8596:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    859a:	7862      	ldrb	r2, [r4, #1]
    859c:	78a3      	ldrb	r3, [r4, #2]
    859e:	429a      	cmp	r2, r3
    85a0:	d009      	beq.n	85b6 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    85a2:	2101      	movs	r1, #1
    85a4:	4628      	mov	r0, r5
    85a6:	f7ff fd26 	bl	7ff6 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    85aa:	9b06      	ldr	r3, [sp, #24]
    85ac:	789b      	ldrb	r3, [r3, #2]
    85ae:	454b      	cmp	r3, r9
    85b0:	d1d9      	bne.n	8566 <ticker_job+0x4ae>
    85b2:	9b03      	ldr	r3, [sp, #12]
    85b4:	e5e6      	b.n	8184 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    85b6:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    85b8:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    85bc:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    85be:	692b      	ldr	r3, [r5, #16]
    85c0:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    85c2:	8aab      	ldrh	r3, [r5, #20]
    85c4:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    85c6:	69ab      	ldr	r3, [r5, #24]
    85c8:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    85ca:	69eb      	ldr	r3, [r5, #28]
    85cc:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    85ce:	6a2b      	ldr	r3, [r5, #32]
    85d0:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    85d2:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    85d4:	68ab      	ldr	r3, [r5, #8]
    85d6:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    85d8:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    85da:	686a      	ldr	r2, [r5, #4]
    85dc:	4620      	mov	r0, r4
    85de:	f7ff fcec 	bl	7fba <ticks_to_expire_prep>
	ticker->force = 1;
    85e2:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    85e4:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    85e6:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    85e8:	70e3      	strb	r3, [r4, #3]
    85ea:	e75b      	b.n	84a4 <ticker_job+0x3ec>
    85ec:	ff172b5a 	.word	0xff172b5a
    85f0:	7f172b59 	.word	0x7f172b59
    85f4:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    85f8:	6860      	ldr	r0, [r4, #4]
    85fa:	2800      	cmp	r0, #0
    85fc:	d07b      	beq.n	86f6 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    85fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8600:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    8602:	4b92      	ldr	r3, [pc, #584]	; (884c <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    8604:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    8606:	4992      	ldr	r1, [pc, #584]	; (8850 <ticker_job+0x798>)
    8608:	18d3      	adds	r3, r2, r3
    860a:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    860c:	bf9c      	itt	ls
    860e:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    8612:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8616:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    8618:	bf8b      	itete	hi
    861a:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    861c:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    8620:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    8622:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8624:	4403      	add	r3, r0
		return 1;
    8626:	bf98      	it	ls
    8628:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    862a:	4413      	add	r3, r2
			ticker->lazy_current++;
    862c:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    862e:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    8630:	3201      	adds	r2, #1
    8632:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    8634:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    8636:	4293      	cmp	r3, r2
    8638:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    863c:	bf89      	itett	hi
    863e:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    8640:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    8642:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    8644:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    8646:	bf9c      	itt	ls
    8648:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    864a:	60a1      	strls	r1, [r4, #8]
    864c:	e73d      	b.n	84ca <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    864e:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    8650:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    8652:	b946      	cbnz	r6, 8666 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    8654:	9f07      	ldr	r7, [sp, #28]
    8656:	42b8      	cmp	r0, r7
    8658:	d200      	bcs.n	865c <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    865a:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    865c:	930b      	str	r3, [sp, #44]	; 0x2c
    865e:	9607      	str	r6, [sp, #28]
    8660:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    8664:	e740      	b.n	84e8 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    8666:	9308      	str	r3, [sp, #32]
    8668:	e7f8      	b.n	865c <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    866a:	b230      	sxth	r0, r6
    866c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8670:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    8674:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    8676:	68bf      	ldr	r7, [r7, #8]
    8678:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    867a:	4567      	cmp	r7, ip
    867c:	d20a      	bcs.n	8694 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    867e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    8680:	69bf      	ldr	r7, [r7, #24]
    8682:	2f00      	cmp	r7, #0
    8684:	f47f af43 	bne.w	850e <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    8688:	9e11      	ldr	r6, [sp, #68]	; 0x44
    868a:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    868e:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    8692:	e739      	b.n	8508 <ticker_job+0x450>
			return TICKER_NULL;
    8694:	26ff      	movs	r6, #255	; 0xff
    8696:	e73a      	b.n	850e <ticker_job+0x456>
	while (id_insert !=
    8698:	9b08      	ldr	r3, [sp, #32]
    869a:	4598      	cmp	r8, r3
    869c:	f43f af59 	beq.w	8552 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    86a0:	9b08      	ldr	r3, [sp, #32]
    86a2:	2bff      	cmp	r3, #255	; 0xff
    86a4:	d0a8      	beq.n	85f8 <ticker_job+0x540>
    86a6:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    86a8:	b233      	sxth	r3, r6
    86aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    86ae:	9307      	str	r3, [sp, #28]
    86b0:	9a07      	ldr	r2, [sp, #28]
    86b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    86b4:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    86b8:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    86ba:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    86bc:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    86be:	bf88      	it	hi
    86c0:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    86c2:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    86c4:	bf8c      	ite	hi
    86c6:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    86c8:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    86ca:	2a00      	cmp	r2, #0
    86cc:	d094      	beq.n	85f8 <ticker_job+0x540>
    86ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    86d0:	4293      	cmp	r3, r2
    86d2:	d891      	bhi.n	85f8 <ticker_job+0x540>
			    skip_collide <= skip &&
    86d4:	78fa      	ldrb	r2, [r7, #3]
    86d6:	78e3      	ldrb	r3, [r4, #3]
    86d8:	429a      	cmp	r2, r3
    86da:	d28d      	bcs.n	85f8 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    86dc:	4631      	mov	r1, r6
    86de:	4658      	mov	r0, fp
    86e0:	f7ff fc3f 	bl	7f62 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    86e4:	78bb      	ldrb	r3, [r7, #2]
    86e6:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    86e8:	9a07      	ldr	r2, [sp, #28]
    86ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    86ec:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    86ee:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    86f2:	46b2      	mov	sl, r6
    86f4:	e6e9      	b.n	84ca <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    86f6:	2101      	movs	r1, #1
    86f8:	e72f      	b.n	855a <ticker_job+0x4a2>
		user = &users[count_user];
    86fa:	9b03      	ldr	r3, [sp, #12]
    86fc:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    8700:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    8702:	786b      	ldrb	r3, [r5, #1]
    8704:	78ea      	ldrb	r2, [r5, #3]
    8706:	429a      	cmp	r2, r3
    8708:	d102      	bne.n	8710 <ticker_job+0x658>
    870a:	3c01      	subs	r4, #1
    870c:	b2e4      	uxtb	r4, r4
    870e:	e551      	b.n	81b4 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    8710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8714:	011b      	lsls	r3, r3, #4
    8716:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    8718:	5cf3      	ldrb	r3, [r6, r3]
    871a:	2b01      	cmp	r3, #1
    871c:	d025      	beq.n	876a <ticker_job+0x6b2>
    871e:	2b02      	cmp	r3, #2
    8720:	d12a      	bne.n	8778 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    8722:	f8d2 c004 	ldr.w	ip, [r2, #4]
    8726:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    8728:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    872c:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    8730:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    8734:	28ff      	cmp	r0, #255	; 0xff
    8736:	d004      	beq.n	8742 <ticker_job+0x68a>
    8738:	6819      	ldr	r1, [r3, #0]
    873a:	f8db 7014 	ldr.w	r7, [fp, #20]
    873e:	42b9      	cmp	r1, r7
    8740:	d023      	beq.n	878a <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    8742:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    8746:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    874a:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    874c:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    874e:	29ff      	cmp	r1, #255	; 0xff
    8750:	d007      	beq.n	8762 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    8752:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    8756:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    875a:	6987      	ldr	r7, [r0, #24]
    875c:	6880      	ldr	r0, [r0, #8]
    875e:	b1df      	cbz	r7, 8798 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    8760:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    8762:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    8766:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    876a:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    876c:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    8770:	b113      	cbz	r3, 8778 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    8772:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8774:	2000      	movs	r0, #0
    8776:	4798      	blx	r3
			first = user->first + 1;
    8778:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    877a:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    877c:	3301      	adds	r3, #1
    877e:	b2db      	uxtb	r3, r3
				first = 0;
    8780:	429a      	cmp	r2, r3
    8782:	bf08      	it	eq
    8784:	2300      	moveq	r3, #0
			user->first = first;
    8786:	706b      	strb	r3, [r5, #1]
    8788:	e7bb      	b.n	8702 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    878a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    878e:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    8792:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    8796:	e7da      	b.n	874e <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    8798:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    879a:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    879e:	e7d6      	b.n	874e <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    87a0:	9b05      	ldr	r3, [sp, #20]
    87a2:	2bff      	cmp	r3, #255	; 0xff
    87a4:	d107      	bne.n	87b6 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    87a6:	f00a fa55 	bl	12c54 <cntr_cnt_get>
    87aa:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    87ac:	f00a fa16 	bl	12bdc <cntr_start>
    87b0:	b908      	cbnz	r0, 87b6 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    87b2:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    87b6:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    87ba:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    87be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    87c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    87c6:	260a      	movs	r6, #10
    87c8:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    87ca:	f00a fa43 	bl	12c54 <cntr_cnt_get>
		cc = instance->ticks_current;
    87ce:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    87d2:	1b03      	subs	r3, r0, r4
    87d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    87d8:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    87da:	42ab      	cmp	r3, r5
    87dc:	bf2c      	ite	cs
    87de:	18e4      	addcs	r4, r4, r3
    87e0:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    87e2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    87e6:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    87e8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    87ec:	4620      	mov	r0, r4
    87ee:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    87f0:	f00a fa30 	bl	12c54 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    87f4:	1bc0      	subs	r0, r0, r7
    87f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    87fa:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    87fc:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    87fe:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    8802:	42a0      	cmp	r0, r4
    8804:	f67f ace8 	bls.w	81d8 <ticker_job+0x120>
		LL_ASSERT(i);
    8808:	3e01      	subs	r6, #1
    880a:	d1de      	bne.n	87ca <ticker_job+0x712>
    880c:	4b11      	ldr	r3, [pc, #68]	; (8854 <ticker_job+0x79c>)
    880e:	9301      	str	r3, [sp, #4]
    8810:	9300      	str	r3, [sp, #0]
    8812:	4a11      	ldr	r2, [pc, #68]	; (8858 <ticker_job+0x7a0>)
    8814:	4b11      	ldr	r3, [pc, #68]	; (885c <ticker_job+0x7a4>)
    8816:	4912      	ldr	r1, [pc, #72]	; (8860 <ticker_job+0x7a8>)
    8818:	4812      	ldr	r0, [pc, #72]	; (8864 <ticker_job+0x7ac>)
    881a:	f7f8 fbb7 	bl	f8c <printk>
    881e:	4040      	eors	r0, r0
    8820:	f380 8811 	msr	BASEPRI, r0
    8824:	f04f 0004 	mov.w	r0, #4
    8828:	df02      	svc	2
	instance->job_guard = 0;
    882a:	2300      	movs	r3, #0
    882c:	f88b 301e 	strb.w	r3, [fp, #30]
    8830:	e4c8      	b.n	81c4 <ticker_job+0x10c>
	if (!pending) {
    8832:	2b00      	cmp	r3, #0
    8834:	d1f9      	bne.n	882a <ticker_job+0x772>
		flag_compare_update = 1;
    8836:	2301      	movs	r3, #1
    8838:	9304      	str	r3, [sp, #16]
    883a:	e4b2      	b.n	81a2 <ticker_job+0xea>
	while (id_insert !=
    883c:	45b0      	cmp	r8, r6
    883e:	f47f af33 	bne.w	86a8 <ticker_job+0x5f0>
    8842:	e686      	b.n	8552 <ticker_job+0x49a>
}
    8844:	b015      	add	sp, #84	; 0x54
    8846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    884a:	bf00      	nop
    884c:	ff172b5a 	.word	0xff172b5a
    8850:	7f172b59 	.word	0x7f172b59
    8854:	000155c5 	.word	0x000155c5
    8858:	0001699e 	.word	0x0001699e
    885c:	00017f34 	.word	0x00017f34
    8860:	000169ed 	.word	0x000169ed
    8864:	00017f4e 	.word	0x00017f4e

00008868 <ticker_init>:
{
    8868:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    886a:	4d1a      	ldr	r5, [pc, #104]	; (88d4 <ticker_init+0x6c>)
{
    886c:	9f05      	ldr	r7, [sp, #20]
    886e:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    8872:	262c      	movs	r6, #44	; 0x2c
    8874:	4346      	muls	r6, r0
    8876:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    887a:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    887c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    8880:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    8882:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    8886:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    888a:	3b01      	subs	r3, #1
    888c:	b2db      	uxtb	r3, r3
    888e:	2bff      	cmp	r3, #255	; 0xff
    8890:	d111      	bne.n	88b6 <ticker_init+0x4e>
	if (count_op) {
    8892:	b9ec      	cbnz	r4, 88d0 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    8894:	222c      	movs	r2, #44	; 0x2c
    8896:	fb02 5200 	mla	r2, r2, r0, r5
    889a:	9908      	ldr	r1, [sp, #32]
    889c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    889e:	9909      	ldr	r1, [sp, #36]	; 0x24
    88a0:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    88a2:	990a      	ldr	r1, [sp, #40]	; 0x28
    88a4:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    88a6:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    88a8:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    88aa:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    88ac:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    88ae:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    88b0:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    88b2:	4620      	mov	r0, r4
    88b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    88b6:	b21a      	sxth	r2, r3
    88b8:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    88bc:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    88be:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    88c2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    88c6:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    88c8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    88cc:	b2e4      	uxtb	r4, r4
    88ce:	e7dc      	b.n	888a <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    88d0:	2001      	movs	r0, #1
}
    88d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88d4:	200007f0 	.word	0x200007f0

000088d8 <ticker_trigger>:
	instance = &_instance[instance_index];
    88d8:	4a07      	ldr	r2, [pc, #28]	; (88f8 <ticker_trigger+0x20>)
    88da:	212c      	movs	r1, #44	; 0x2c
    88dc:	fb00 2301 	mla	r3, r0, r1, r2
{
    88e0:	b410      	push	{r4}
	if (instance->sched_cb) {
    88e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    88e4:	b12c      	cbz	r4, 88f2 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    88e6:	46a4      	mov	ip, r4
    88e8:	2201      	movs	r2, #1
    88ea:	2103      	movs	r1, #3
    88ec:	2002      	movs	r0, #2
}
    88ee:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    88f0:	4760      	bx	ip
}
    88f2:	bc10      	pop	{r4}
    88f4:	4770      	bx	lr
    88f6:	bf00      	nop
    88f8:	200007f0 	.word	0x200007f0

000088fc <ticker_start>:
{
    88fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8900:	4f25      	ldr	r7, [pc, #148]	; (8998 <ticker_start+0x9c>)
    8902:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    8906:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8908:	fb08 7000 	mla	r0, r8, r0, r7
    890c:	fa0f fc81 	sxth.w	ip, r1
    8910:	f8d0 e004 	ldr.w	lr, [r0, #4]
    8914:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    8918:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    891c:	78f4      	ldrb	r4, [r6, #3]
    891e:	1c65      	adds	r5, r4, #1
    8920:	b2ed      	uxtb	r5, r5
		last = 0;
    8922:	45ae      	cmp	lr, r5
    8924:	bf98      	it	ls
    8926:	2500      	movls	r5, #0
	if (last == user->first) {
    8928:	f896 e001 	ldrb.w	lr, [r6, #1]
    892c:	45ae      	cmp	lr, r5
    892e:	d02f      	beq.n	8990 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    8930:	f8d6 c004 	ldr.w	ip, [r6, #4]
    8934:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8938:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    893c:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    8940:	f04f 0a03 	mov.w	sl, #3
    8944:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    8948:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    894a:	9b08      	ldr	r3, [sp, #32]
    894c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    894e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8950:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    8952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8954:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    8956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8958:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    895a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    895e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    8960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8962:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    8964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8966:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    8968:	2302      	movs	r3, #2
    896a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    896c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    896e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    8970:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    8972:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    8974:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8976:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8978:	6a45      	ldr	r5, [r0, #36]	; 0x24
    897a:	6a03      	ldr	r3, [r0, #32]
    897c:	4608      	mov	r0, r1
    897e:	4798      	blx	r3
    8980:	fb09 7308 	mla	r3, r9, r8, r7
    8984:	2200      	movs	r2, #0
    8986:	2104      	movs	r1, #4
    8988:	47a8      	blx	r5
	return user_op->status;
    898a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8990:	2001      	movs	r0, #1
}
    8992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8996:	bf00      	nop
    8998:	200007f0 	.word	0x200007f0

0000899c <ticker_update>:
{
    899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    89a0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8a34 <ticker_update+0x98>
    89a4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    89a8:	fb0a 8e00 	mla	lr, sl, r0, r8
    89ac:	b20f      	sxth	r7, r1
    89ae:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    89b2:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    89b4:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    89b8:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    89bc:	78c4      	ldrb	r4, [r0, #3]
    89be:	1c66      	adds	r6, r4, #1
    89c0:	b2f6      	uxtb	r6, r6
		last = 0;
    89c2:	42b5      	cmp	r5, r6
    89c4:	bf98      	it	ls
    89c6:	2600      	movls	r6, #0
	if (last == user->first) {
    89c8:	7845      	ldrb	r5, [r0, #1]
    89ca:	42b5      	cmp	r5, r6
    89cc:	d02f      	beq.n	8a2e <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    89ce:	f8d0 c004 	ldr.w	ip, [r0, #4]
    89d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    89d6:	0125      	lsls	r5, r4, #4
    89d8:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    89dc:	2704      	movs	r7, #4
    89de:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    89e2:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    89e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    89e8:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    89ea:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    89ee:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    89f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    89f4:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    89f6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    89fa:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    89fc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    8a00:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    8a02:	2302      	movs	r3, #2
    8a04:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    8a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a08:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    8a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    8a0c:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    8a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8a10:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8a12:	f8de 3020 	ldr.w	r3, [lr, #32]
    8a16:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    8a1a:	4608      	mov	r0, r1
    8a1c:	4798      	blx	r3
    8a1e:	fb09 830a 	mla	r3, r9, sl, r8
    8a22:	2200      	movs	r2, #0
    8a24:	4639      	mov	r1, r7
    8a26:	47a8      	blx	r5
	return user_op->status;
    8a28:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8a2e:	2001      	movs	r0, #1
}
    8a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a34:	200007f0 	.word	0x200007f0

00008a38 <ticker_stop>:
{
    8a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8a3c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8aac <ticker_stop+0x74>
    8a40:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8a44:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    8a48:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    8a4a:	f8de 0004 	ldr.w	r0, [lr, #4]
    8a4e:	b20e      	sxth	r6, r1
    8a50:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    8a54:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    8a58:	78fc      	ldrb	r4, [r7, #3]
    8a5a:	1c65      	adds	r5, r4, #1
    8a5c:	b2ed      	uxtb	r5, r5
		last = 0;
    8a5e:	42a8      	cmp	r0, r5
    8a60:	bf98      	it	ls
    8a62:	2500      	movls	r5, #0
	if (last == user->first) {
    8a64:	7878      	ldrb	r0, [r7, #1]
    8a66:	42a8      	cmp	r0, r5
    8a68:	d01d      	beq.n	8aa6 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    8a6a:	6878      	ldr	r0, [r7, #4]
    8a6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8a70:	0124      	lsls	r4, r4, #4
    8a72:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    8a74:	f04f 0c05 	mov.w	ip, #5
    8a78:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    8a7c:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    8a7e:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    8a80:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    8a82:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    8a84:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    8a86:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8a88:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8a8a:	f8de 3020 	ldr.w	r3, [lr, #32]
    8a8e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    8a92:	4608      	mov	r0, r1
    8a94:	4798      	blx	r3
    8a96:	fb08 930a 	mla	r3, r8, sl, r9
    8a9a:	2200      	movs	r2, #0
    8a9c:	2104      	movs	r1, #4
    8a9e:	47a0      	blx	r4
	return user_op->status;
    8aa0:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8aa6:	2001      	movs	r0, #1
}
    8aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8aac:	200007f0 	.word	0x200007f0

00008ab0 <ticker_next_slot_get>:
{
    8ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8ab4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8b30 <ticker_next_slot_get+0x80>
    8ab8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    8abc:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8abe:	fb0a 8000 	mla	r0, sl, r0, r8
    8ac2:	fa0f fe81 	sxth.w	lr, r1
    8ac6:	6845      	ldr	r5, [r0, #4]
    8ac8:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    8acc:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    8ad0:	78fc      	ldrb	r4, [r7, #3]
    8ad2:	1c66      	adds	r6, r4, #1
    8ad4:	b2f6      	uxtb	r6, r6
		last = 0;
    8ad6:	42b5      	cmp	r5, r6
    8ad8:	bf98      	it	ls
    8ada:	2600      	movls	r6, #0
	if (last == user->first) {
    8adc:	787d      	ldrb	r5, [r7, #1]
    8ade:	42b5      	cmp	r5, r6
    8ae0:	d023      	beq.n	8b2a <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    8ae2:	f8d7 c004 	ldr.w	ip, [r7, #4]
    8ae6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8aea:	0125      	lsls	r5, r4, #4
    8aec:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    8af0:	f04f 0e02 	mov.w	lr, #2
    8af4:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    8af8:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    8afa:	9b08      	ldr	r3, [sp, #32]
    8afc:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    8afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b00:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    8b02:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    8b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    8b06:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    8b08:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    8b0a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    8b0e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8b10:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8b12:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8b14:	6a03      	ldr	r3, [r0, #32]
    8b16:	4608      	mov	r0, r1
    8b18:	4798      	blx	r3
    8b1a:	fb09 830a 	mla	r3, r9, sl, r8
    8b1e:	2200      	movs	r2, #0
    8b20:	2104      	movs	r1, #4
    8b22:	47a8      	blx	r5
	return user_op->status;
    8b24:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8b2a:	2001      	movs	r0, #1
}
    8b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b30:	200007f0 	.word	0x200007f0

00008b34 <ticker_job_idle_get>:
{
    8b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8b38:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8ba8 <ticker_job_idle_get+0x74>
    8b3c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8b40:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    8b44:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    8b46:	f8de 0004 	ldr.w	r0, [lr, #4]
    8b4a:	b20e      	sxth	r6, r1
    8b4c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    8b50:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    8b54:	78fc      	ldrb	r4, [r7, #3]
    8b56:	1c65      	adds	r5, r4, #1
    8b58:	b2ed      	uxtb	r5, r5
		last = 0;
    8b5a:	42a8      	cmp	r0, r5
    8b5c:	bf98      	it	ls
    8b5e:	2500      	movls	r5, #0
	if (last == user->first) {
    8b60:	7878      	ldrb	r0, [r7, #1]
    8b62:	42a8      	cmp	r0, r5
    8b64:	d01d      	beq.n	8ba2 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    8b66:	6878      	ldr	r0, [r7, #4]
    8b68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8b6c:	0124      	lsls	r4, r4, #4
    8b6e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    8b70:	f04f 0c01 	mov.w	ip, #1
    8b74:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    8b78:	20ff      	movs	r0, #255	; 0xff
    8b7a:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    8b7c:	2002      	movs	r0, #2
    8b7e:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    8b80:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    8b82:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8b84:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8b86:	f8de 3020 	ldr.w	r3, [lr, #32]
    8b8a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    8b8e:	4608      	mov	r0, r1
    8b90:	4798      	blx	r3
    8b92:	fb08 930a 	mla	r3, r8, sl, r9
    8b96:	2200      	movs	r2, #0
    8b98:	2104      	movs	r1, #4
    8b9a:	47a0      	blx	r4
	return user_op->status;
    8b9c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8ba2:	2001      	movs	r0, #1
}
    8ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8ba8:	200007f0 	.word	0x200007f0

00008bac <ticker_job_sched>:
{
    8bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8bb0:	4c08      	ldr	r4, [pc, #32]	; (8bd4 <ticker_job_sched+0x28>)
    8bb2:	252c      	movs	r5, #44	; 0x2c
    8bb4:	fb05 4300 	mla	r3, r5, r0, r4
{
    8bb8:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8bba:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    8bbc:	6a1b      	ldr	r3, [r3, #32]
    8bbe:	4608      	mov	r0, r1
    8bc0:	4798      	blx	r3
    8bc2:	fb06 4305 	mla	r3, r6, r5, r4
    8bc6:	46bc      	mov	ip, r7
    8bc8:	2200      	movs	r2, #0
    8bca:	2104      	movs	r1, #4
}
    8bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8bd0:	4760      	bx	ip
    8bd2:	bf00      	nop
    8bd4:	200007f0 	.word	0x200007f0

00008bd8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    8bd8:	f00a b83c 	b.w	12c54 <cntr_cnt_get>

00008bdc <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8bdc:	1a40      	subs	r0, r0, r1
}
    8bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8be2:	4770      	bx	lr

00008be4 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    8be4:	b508      	push	{r3, lr}
    8be6:	4603      	mov	r3, r0
	if (addr_type > 1) {
    8be8:	2b01      	cmp	r3, #1
{
    8bea:	4608      	mov	r0, r1
	if (addr_type > 1) {
    8bec:	d80e      	bhi.n	8c0c <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    8bee:	b133      	cbz	r3, 8bfe <ll_addr_get+0x1a>
		if (bdaddr) {
    8bf0:	b119      	cbz	r1, 8bfa <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    8bf2:	2206      	movs	r2, #6
    8bf4:	4906      	ldr	r1, [pc, #24]	; (8c10 <ll_addr_get+0x2c>)
    8bf6:	f7f9 f801 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    8bfa:	4805      	ldr	r0, [pc, #20]	; (8c10 <ll_addr_get+0x2c>)
    8bfc:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    8bfe:	b119      	cbz	r1, 8c08 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    8c00:	2206      	movs	r2, #6
    8c02:	4904      	ldr	r1, [pc, #16]	; (8c14 <ll_addr_get+0x30>)
    8c04:	f7f8 fffa 	bl	1bfc <memcpy>
	}

	return pub_addr;
    8c08:	4802      	ldr	r0, [pc, #8]	; (8c14 <ll_addr_get+0x30>)
}
    8c0a:	bd08      	pop	{r3, pc}
		return NULL;
    8c0c:	2000      	movs	r0, #0
    8c0e:	bd08      	pop	{r3, pc}
    8c10:	2000084e 	.word	0x2000084e
    8c14:	20000848 	.word	0x20000848

00008c18 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    8c18:	b570      	push	{r4, r5, r6, lr}
    8c1a:	4606      	mov	r6, r0
    8c1c:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    8c1e:	f008 f8b3 	bl	10d88 <ll_adv_is_enabled>
    8c22:	4604      	mov	r4, r0
    8c24:	b110      	cbz	r0, 8c2c <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    8c26:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    8c28:	4620      	mov	r0, r4
    8c2a:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    8c2c:	f008 f8c0 	bl	10db0 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    8c30:	f010 0f06 	tst.w	r0, #6
    8c34:	d1f7      	bne.n	8c26 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    8c36:	2206      	movs	r2, #6
    8c38:	4629      	mov	r1, r5
	if (addr_type) {
    8c3a:	b11e      	cbz	r6, 8c44 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    8c3c:	4802      	ldr	r0, [pc, #8]	; (8c48 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    8c3e:	f7f8 ffdd 	bl	1bfc <memcpy>
    8c42:	e7f1      	b.n	8c28 <ll_addr_set+0x10>
    8c44:	4801      	ldr	r0, [pc, #4]	; (8c4c <ll_addr_set+0x34>)
    8c46:	e7fa      	b.n	8c3e <ll_addr_set+0x26>
    8c48:	2000084e 	.word	0x2000084e
    8c4c:	20000848 	.word	0x20000848

00008c50 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    8c50:	2300      	movs	r3, #0
    8c52:	7003      	strb	r3, [r0, #0]
	*max = 0;
    8c54:	700b      	strb	r3, [r1, #0]
    8c56:	4770      	bx	lr

00008c58 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    8c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8c5a:	4607      	mov	r7, r0
    8c5c:	460e      	mov	r6, r1
	while (len) {
    8c5e:	460c      	mov	r4, r1
    8c60:	1b35      	subs	r5, r6, r4
    8c62:	443d      	add	r5, r7
    8c64:	b18c      	cbz	r4, 8c8a <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    8c66:	f7f8 f9bd 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    8c6a:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    8c6c:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    8c6e:	d907      	bls.n	8c80 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    8c70:	2204      	movs	r2, #4
    8c72:	eb0d 0102 	add.w	r1, sp, r2
    8c76:	4628      	mov	r0, r5
    8c78:	f7f8 ffc0 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    8c7c:	3c04      	subs	r4, #4
    8c7e:	e7ef      	b.n	8c60 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    8c80:	4622      	mov	r2, r4
    8c82:	a901      	add	r1, sp, #4
    8c84:	4628      	mov	r0, r5
    8c86:	f7f8 ffb9 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    8c8a:	2000      	movs	r0, #0
    8c8c:	b003      	add	sp, #12
    8c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008c90 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    8c90:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    8c92:	2300      	movs	r3, #0
    8c94:	f00a f812 	bl	12cbc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    8c98:	2000      	movs	r0, #0
    8c9a:	bd08      	pop	{r3, pc}

00008c9c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8c9c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    8c9e:	4802      	ldr	r0, [pc, #8]	; (8ca8 <_hci_driver_init+0xc>)
    8ca0:	f7fb f9ea 	bl	4078 <bt_hci_driver_register>

	return 0;
}
    8ca4:	2000      	movs	r0, #0
    8ca6:	bd08      	pop	{r3, pc}
    8ca8:	00017fa0 	.word	0x00017fa0

00008cac <recv_thread>:
{
    8cac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    8cae:	4d28      	ldr	r5, [pc, #160]	; (8d50 <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    8cb0:	2600      	movs	r6, #0
    8cb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8cb6:	4628      	mov	r0, r5
    8cb8:	f00b fc2c 	bl	14514 <_impl_k_queue_get>
		if (node_rx && !buf) {
    8cbc:	4604      	mov	r4, r0
    8cbe:	2800      	cmp	r0, #0
    8cc0:	d036      	beq.n	8d30 <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    8cc2:	f001 fd0f 	bl	a6e4 <hci_get_class>
	switch (class) {
    8cc6:	1e03      	subs	r3, r0, #0
    8cc8:	9403      	str	r4, [sp, #12]
    8cca:	db03      	blt.n	8cd4 <recv_thread+0x28>
    8ccc:	2b02      	cmp	r3, #2
    8cce:	dd10      	ble.n	8cf2 <recv_thread+0x46>
    8cd0:	2b03      	cmp	r3, #3
    8cd2:	d030      	beq.n	8d36 <recv_thread+0x8a>
		LL_ASSERT(0);
    8cd4:	4b1f      	ldr	r3, [pc, #124]	; (8d54 <recv_thread+0xa8>)
    8cd6:	9301      	str	r3, [sp, #4]
    8cd8:	9300      	str	r3, [sp, #0]
    8cda:	4a1f      	ldr	r2, [pc, #124]	; (8d58 <recv_thread+0xac>)
    8cdc:	4b1f      	ldr	r3, [pc, #124]	; (8d5c <recv_thread+0xb0>)
    8cde:	4920      	ldr	r1, [pc, #128]	; (8d60 <recv_thread+0xb4>)
    8ce0:	4820      	ldr	r0, [pc, #128]	; (8d64 <recv_thread+0xb8>)
    8ce2:	f7f8 f953 	bl	f8c <printk>
    8ce6:	4040      	eors	r0, r0
    8ce8:	f380 8811 	msr	BASEPRI, r0
    8cec:	f04f 0004 	mov.w	r0, #4
    8cf0:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    8cf2:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    8cf4:	bf0e      	itee	eq
    8cf6:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8cf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8cfc:	2001      	movne	r0, #1
    8cfe:	f7fb fac7 	bl	4290 <bt_buf_get_rx>
    8d02:	4604      	mov	r4, r0
		if (buf) {
    8d04:	b118      	cbz	r0, 8d0e <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    8d06:	4601      	mov	r1, r0
    8d08:	9803      	ldr	r0, [sp, #12]
    8d0a:	f001 f935 	bl	9f78 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    8d0e:	9b03      	ldr	r3, [sp, #12]
    8d10:	2100      	movs	r1, #0
    8d12:	88d8      	ldrh	r0, [r3, #6]
    8d14:	f008 fcb6 	bl	11684 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    8d18:	a804      	add	r0, sp, #16
    8d1a:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    8d1e:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    8d20:	f008 fc3a 	bl	11598 <ll_rx_mem_release>
		if (buf) {
    8d24:	b124      	cbz	r4, 8d30 <recv_thread+0x84>
			if (buf->len) {
    8d26:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    8d28:	4620      	mov	r0, r4
			if (buf->len) {
    8d2a:	b173      	cbz	r3, 8d4a <recv_thread+0x9e>
				bt_recv(buf);
    8d2c:	f7fa fbec 	bl	3508 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    8d30:	f00b fe52 	bl	149d8 <_impl_k_yield>
    8d34:	e7bd      	b.n	8cb2 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    8d36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8d3a:	f7fb faa9 	bl	4290 <bt_buf_get_rx>
    8d3e:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    8d40:	4601      	mov	r1, r0
    8d42:	9803      	ldr	r0, [sp, #12]
    8d44:	f001 f8d8 	bl	9ef8 <hci_acl_encode>
    8d48:	e7e1      	b.n	8d0e <recv_thread+0x62>
				net_buf_unref(buf);
    8d4a:	f00a fded 	bl	13928 <net_buf_unref>
    8d4e:	e7ef      	b.n	8d30 <recv_thread+0x84>
    8d50:	20003f4c 	.word	0x20003f4c
    8d54:	000155c5 	.word	0x000155c5
    8d58:	0001699e 	.word	0x0001699e
    8d5c:	00017f71 	.word	0x00017f71
    8d60:	000169ed 	.word	0x000169ed
    8d64:	00016912 	.word	0x00016912

00008d68 <hci_driver_send>:
{
    8d68:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    8d6a:	8983      	ldrh	r3, [r0, #12]
{
    8d6c:	b087      	sub	sp, #28
    8d6e:	4605      	mov	r5, r0
	if (!buf->len) {
    8d70:	b96b      	cbnz	r3, 8d8e <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    8d72:	4b20      	ldr	r3, [pc, #128]	; (8df4 <hci_driver_send+0x8c>)
    8d74:	9301      	str	r3, [sp, #4]
    8d76:	9300      	str	r3, [sp, #0]
    8d78:	4a1f      	ldr	r2, [pc, #124]	; (8df8 <hci_driver_send+0x90>)
    8d7a:	4b20      	ldr	r3, [pc, #128]	; (8dfc <hci_driver_send+0x94>)
    8d7c:	4920      	ldr	r1, [pc, #128]	; (8e00 <hci_driver_send+0x98>)
    8d7e:	4821      	ldr	r0, [pc, #132]	; (8e04 <hci_driver_send+0x9c>)
    8d80:	f7f8 f904 	bl	f8c <printk>
		return -EINVAL;
    8d84:	f06f 0415 	mvn.w	r4, #21
}
    8d88:	4620      	mov	r0, r4
    8d8a:	b007      	add	sp, #28
    8d8c:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8d8e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    8d90:	b183      	cbz	r3, 8db4 <hci_driver_send+0x4c>
    8d92:	2b02      	cmp	r3, #2
    8d94:	d11f      	bne.n	8dd6 <hci_driver_send+0x6e>
	err = hci_acl_handle(buf, &evt);
    8d96:	a905      	add	r1, sp, #20
    8d98:	f001 f81e 	bl	9dd8 <hci_acl_handle>
    8d9c:	4604      	mov	r4, r0
	if (evt) {
    8d9e:	9805      	ldr	r0, [sp, #20]
    8da0:	b108      	cbz	r0, 8da6 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    8da2:	f7fb f83f 	bl	3e24 <bt_recv_prio>
	if (!err) {
    8da6:	2c00      	cmp	r4, #0
    8da8:	d1ee      	bne.n	8d88 <hci_driver_send+0x20>
		net_buf_unref(buf);
    8daa:	4628      	mov	r0, r5
    8dac:	f00a fdbc 	bl	13928 <net_buf_unref>
    8db0:	2400      	movs	r4, #0
    8db2:	e7e9      	b.n	8d88 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    8db4:	f000 faaa 	bl	930c <hci_cmd_handle>
	if (evt) {
    8db8:	4602      	mov	r2, r0
    8dba:	2800      	cmp	r0, #0
    8dbc:	d0f5      	beq.n	8daa <hci_driver_send+0x42>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    8dbe:	6883      	ldr	r3, [r0, #8]
    8dc0:	7819      	ldrb	r1, [r3, #0]
    8dc2:	2913      	cmp	r1, #19
    8dc4:	d812      	bhi.n	8dec <hci_driver_send+0x84>
    8dc6:	2301      	movs	r3, #1
    8dc8:	408b      	lsls	r3, r1
    8dca:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    8dce:	d00d      	beq.n	8dec <hci_driver_send+0x84>
			bt_recv_prio(evt);
    8dd0:	f7fb f828 	bl	3e24 <bt_recv_prio>
    8dd4:	e7e9      	b.n	8daa <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    8dd6:	4a07      	ldr	r2, [pc, #28]	; (8df4 <hci_driver_send+0x8c>)
    8dd8:	9202      	str	r2, [sp, #8]
    8dda:	e88d 000c 	stmia.w	sp, {r2, r3}
    8dde:	4908      	ldr	r1, [pc, #32]	; (8e00 <hci_driver_send+0x98>)
    8de0:	4b06      	ldr	r3, [pc, #24]	; (8dfc <hci_driver_send+0x94>)
    8de2:	4a05      	ldr	r2, [pc, #20]	; (8df8 <hci_driver_send+0x90>)
    8de4:	4808      	ldr	r0, [pc, #32]	; (8e08 <hci_driver_send+0xa0>)
    8de6:	f7f8 f8d1 	bl	f8c <printk>
    8dea:	e7cb      	b.n	8d84 <hci_driver_send+0x1c>
			bt_recv(evt);
    8dec:	4610      	mov	r0, r2
    8dee:	f7fa fb8b 	bl	3508 <bt_recv>
    8df2:	e7da      	b.n	8daa <hci_driver_send+0x42>
    8df4:	000155c5 	.word	0x000155c5
    8df8:	0001699e 	.word	0x0001699e
    8dfc:	00017f7d 	.word	0x00017f7d
    8e00:	000169ed 	.word	0x000169ed
    8e04:	00017fe1 	.word	0x00017fe1
    8e08:	00018002 	.word	0x00018002

00008e0c <prio_recv_thread>:
{
    8e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8e0e:	4d14      	ldr	r5, [pc, #80]	; (8e60 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    8e10:	4e14      	ldr	r6, [pc, #80]	; (8e64 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8e12:	f10d 0102 	add.w	r1, sp, #2
    8e16:	a801      	add	r0, sp, #4
    8e18:	f008 fb86 	bl	11528 <ll_rx_get>
    8e1c:	4604      	mov	r4, r0
    8e1e:	b940      	cbnz	r0, 8e32 <prio_recv_thread+0x26>
		if (node_rx) {
    8e20:	9b01      	ldr	r3, [sp, #4]
    8e22:	b1bb      	cbz	r3, 8e54 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    8e24:	f008 fe62 	bl	11aec <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    8e28:	9901      	ldr	r1, [sp, #4]
    8e2a:	4630      	mov	r0, r6
    8e2c:	f00b fb4e 	bl	144cc <k_queue_append>
    8e30:	e7ef      	b.n	8e12 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8e32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8e36:	2001      	movs	r0, #1
    8e38:	f7fb fa2a 	bl	4290 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8e3c:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8e3e:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8e40:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    8e44:	f001 fc3a 	bl	a6bc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    8e48:	4638      	mov	r0, r7
    8e4a:	f7fa ffeb 	bl	3e24 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    8e4e:	f00b fdc3 	bl	149d8 <_impl_k_yield>
    8e52:	e7de      	b.n	8e12 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8e58:	4628      	mov	r0, r5
    8e5a:	f00b fe24 	bl	14aa6 <_impl_k_sem_take>
    8e5e:	e7d8      	b.n	8e12 <prio_recv_thread+0x6>
    8e60:	20003f34 	.word	0x20003f34
    8e64:	20003f4c 	.word	0x20003f4c

00008e68 <hci_driver_open>:
{
    8e68:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    8e6a:	481a      	ldr	r0, [pc, #104]	; (8ed4 <hci_driver_open+0x6c>)
{
    8e6c:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    8e6e:	f008 ff1b 	bl	11ca8 <ll_init>
	if (err) {
    8e72:	4604      	mov	r4, r0
    8e74:	b160      	cbz	r0, 8e90 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    8e76:	4b18      	ldr	r3, [pc, #96]	; (8ed8 <hci_driver_open+0x70>)
    8e78:	9302      	str	r3, [sp, #8]
    8e7a:	e88d 0018 	stmia.w	sp, {r3, r4}
    8e7e:	4a17      	ldr	r2, [pc, #92]	; (8edc <hci_driver_open+0x74>)
    8e80:	4b17      	ldr	r3, [pc, #92]	; (8ee0 <hci_driver_open+0x78>)
    8e82:	4918      	ldr	r1, [pc, #96]	; (8ee4 <hci_driver_open+0x7c>)
    8e84:	4818      	ldr	r0, [pc, #96]	; (8ee8 <hci_driver_open+0x80>)
    8e86:	f7f8 f881 	bl	f8c <printk>
}
    8e8a:	4620      	mov	r0, r4
    8e8c:	b006      	add	sp, #24
    8e8e:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    8e90:	f001 fc40 	bl	a714 <hci_init>

    8e94:	f06f 0309 	mvn.w	r3, #9
    8e98:	9303      	str	r3, [sp, #12]
    8e9a:	9405      	str	r4, [sp, #20]
    8e9c:	9404      	str	r4, [sp, #16]
    8e9e:	9402      	str	r4, [sp, #8]
    8ea0:	9401      	str	r4, [sp, #4]
    8ea2:	9400      	str	r4, [sp, #0]
    8ea4:	4b11      	ldr	r3, [pc, #68]	; (8eec <hci_driver_open+0x84>)
    8ea6:	4912      	ldr	r1, [pc, #72]	; (8ef0 <hci_driver_open+0x88>)
    8ea8:	4812      	ldr	r0, [pc, #72]	; (8ef4 <hci_driver_open+0x8c>)
    8eaa:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    8eae:	f00b ffcf 	bl	14e50 <_impl_k_thread_create>
    8eb2:	f06f 0307 	mvn.w	r3, #7
    8eb6:	9303      	str	r3, [sp, #12]
    8eb8:	9405      	str	r4, [sp, #20]
    8eba:	9404      	str	r4, [sp, #16]
    8ebc:	9402      	str	r4, [sp, #8]
    8ebe:	9401      	str	r4, [sp, #4]
    8ec0:	9400      	str	r4, [sp, #0]
    8ec2:	4b0d      	ldr	r3, [pc, #52]	; (8ef8 <hci_driver_open+0x90>)
    8ec4:	490d      	ldr	r1, [pc, #52]	; (8efc <hci_driver_open+0x94>)
    8ec6:	480e      	ldr	r0, [pc, #56]	; (8f00 <hci_driver_open+0x98>)
    8ec8:	f240 522c 	movw	r2, #1324	; 0x52c
    8ecc:	f00b ffc0 	bl	14e50 <_impl_k_thread_create>
    8ed0:	e7db      	b.n	8e8a <hci_driver_open+0x22>
    8ed2:	bf00      	nop
    8ed4:	20003f34 	.word	0x20003f34
    8ed8:	000155c5 	.word	0x000155c5
    8edc:	0001699e 	.word	0x0001699e
    8ee0:	00017f8d 	.word	0x00017f8d
    8ee4:	000169ed 	.word	0x000169ed
    8ee8:	00017fb4 	.word	0x00017fb4
    8eec:	00008e0d 	.word	0x00008e0d
    8ef0:	200020f0 	.word	0x200020f0
    8ef4:	200018d0 	.word	0x200018d0
    8ef8:	00008cad 	.word	0x00008cad
    8efc:	200023e0 	.word	0x200023e0
    8f00:	20001860 	.word	0x20001860

00008f04 <sys_put_le32>:
	dst[1] = val >> 8;
    8f04:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    8f08:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    8f0a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    8f0c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    8f0e:	0a00      	lsrs	r0, r0, #8
    8f10:	704b      	strb	r3, [r1, #1]
    8f12:	70c8      	strb	r0, [r1, #3]
    8f14:	4770      	bx	lr

00008f16 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    8f16:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    8f18:	3008      	adds	r0, #8
{
    8f1a:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    8f1c:	2102      	movs	r1, #2
{
    8f1e:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    8f20:	f00a fd34 	bl	1398c <net_buf_simple_add>
	hdr->evt = evt;
    8f24:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    8f26:	7044      	strb	r4, [r0, #1]
    8f28:	bd38      	pop	{r3, r4, r5, pc}
	...

00008f2c <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    8f2c:	b538      	push	{r3, r4, r5, lr}
    8f2e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f34:	f7fb f9bc 	bl	42b0 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8f38:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8f3a:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8f3c:	210f      	movs	r1, #15
    8f3e:	f7ff ffea 	bl	8f16 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8f42:	2104      	movs	r1, #4
    8f44:	f104 0008 	add.w	r0, r4, #8
    8f48:	f00a fd20 	bl	1398c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    8f4c:	2301      	movs	r3, #1
    8f4e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8f50:	4b02      	ldr	r3, [pc, #8]	; (8f5c <cmd_status+0x30>)
	cs->status = status;
    8f52:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8f54:	881b      	ldrh	r3, [r3, #0]
    8f56:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8f58:	4620      	mov	r0, r4
    8f5a:	bd38      	pop	{r3, r4, r5, pc}
    8f5c:	20000854 	.word	0x20000854

00008f60 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8f60:	b570      	push	{r4, r5, r6, lr}
    8f62:	4604      	mov	r4, r0
    8f64:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8f66:	3201      	adds	r2, #1
{
    8f68:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    8f6a:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8f6c:	b2d2      	uxtb	r2, r2
    8f6e:	213e      	movs	r1, #62	; 0x3e
    8f70:	f7ff ffd1 	bl	8f16 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8f74:	2101      	movs	r1, #1
    8f76:	4620      	mov	r0, r4
    8f78:	f00a fd08 	bl	1398c <net_buf_simple_add>
	me->subevent = subevt;
    8f7c:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    8f7e:	4629      	mov	r1, r5
    8f80:	4620      	mov	r0, r4
}
    8f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8f86:	f00a bd01 	b.w	1398c <net_buf_simple_add>
	...

00008f8c <cmd_complete>:
{
    8f8c:	b538      	push	{r3, r4, r5, lr}
    8f8e:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8f94:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8f96:	f7fb f98b 	bl	42b0 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8f9a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8f9c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8f9e:	b2d2      	uxtb	r2, r2
    8fa0:	210e      	movs	r1, #14
    8fa2:	f7ff ffb8 	bl	8f16 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8fa6:	6820      	ldr	r0, [r4, #0]
    8fa8:	2103      	movs	r1, #3
    8faa:	3008      	adds	r0, #8
    8fac:	f00a fcee 	bl	1398c <net_buf_simple_add>
	cc->ncmd = 1;
    8fb0:	2301      	movs	r3, #1
    8fb2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8fb4:	4b05      	ldr	r3, [pc, #20]	; (8fcc <cmd_complete+0x40>)
    8fb6:	881b      	ldrh	r3, [r3, #0]
    8fb8:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    8fbc:	6820      	ldr	r0, [r4, #0]
    8fbe:	4629      	mov	r1, r5
    8fc0:	3008      	adds	r0, #8
}
    8fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    8fc6:	f00a bce1 	b.w	1398c <net_buf_simple_add>
    8fca:	bf00      	nop
    8fcc:	20000854 	.word	0x20000854

00008fd0 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8fd0:	4b0e      	ldr	r3, [pc, #56]	; (900c <encrypt_change+0x3c>)
{
    8fd2:	b570      	push	{r4, r5, r6, lr}
    8fd4:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
    8fda:	2300      	movs	r3, #0
    8fdc:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8fe0:	4313      	orrs	r3, r2
{
    8fe2:	4604      	mov	r4, r0
    8fe4:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8fe6:	d010      	beq.n	900a <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8fe8:	2204      	movs	r2, #4
    8fea:	2108      	movs	r1, #8
    8fec:	4628      	mov	r0, r5
    8fee:	f7ff ff92 	bl	8f16 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8ff2:	2104      	movs	r1, #4
    8ff4:	f105 0008 	add.w	r0, r5, #8
    8ff8:	f00a fcc8 	bl	1398c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    8ffc:	fab4 f384 	clz	r3, r4
    9000:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    9002:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9004:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    9008:	70c3      	strb	r3, [r0, #3]
    900a:	bd70      	pop	{r4, r5, r6, pc}
    900c:	20003d58 	.word	0x20003d58

00009010 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    9010:	b570      	push	{r4, r5, r6, lr}
    9012:	4604      	mov	r4, r0
    9014:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9016:	4b13      	ldr	r3, [pc, #76]	; (9064 <le_remote_feat_complete+0x54>)
{
    9018:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    901a:	e9d3 2300 	ldrd	r2, r3, [r3]
    901e:	2200      	movs	r2, #0
    9020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9024:	4313      	orrs	r3, r2
{
    9026:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9028:	d01b      	beq.n	9062 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    902a:	4b0f      	ldr	r3, [pc, #60]	; (9068 <le_remote_feat_complete+0x58>)
    902c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9030:	2300      	movs	r3, #0
    9032:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9036:	4313      	orrs	r3, r2
    9038:	d013      	beq.n	9062 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    903a:	220b      	movs	r2, #11
    903c:	2104      	movs	r1, #4
    903e:	f7ff ff8f 	bl	8f60 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    9042:	2208      	movs	r2, #8
	sep->status = status;
    9044:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9046:	f8a0 6001 	strh.w	r6, [r0, #1]
    904a:	3003      	adds	r0, #3
	if (!status) {
    904c:	b924      	cbnz	r4, 9058 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    904e:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    9050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    9054:	f7f8 bdd2 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    9058:	2100      	movs	r1, #0
}
    905a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    905e:	f7f8 bdf9 	b.w	1c54 <memset>
    9062:	bd70      	pop	{r4, r5, r6, pc}
    9064:	20003d58 	.word	0x20003d58
    9068:	20003d60 	.word	0x20003d60

0000906c <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    906c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9070:	4605      	mov	r5, r0
    9072:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9074:	4b46      	ldr	r3, [pc, #280]	; (9190 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    9076:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9078:	e9d3 2300 	ldrd	r2, r3, [r3]
    907c:	f240 2801 	movw	r8, #513	; 0x201
    9080:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    9084:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9088:	ea03 0309 	and.w	r3, r3, r9
    908c:	ea02 0208 	and.w	r2, r2, r8
    9090:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    9092:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    9094:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9098:	d077      	beq.n	918a <le_conn_complete.part.39+0x11e>
	if (!status) {
    909a:	2d00      	cmp	r5, #0
    909c:	d150      	bne.n	9140 <le_conn_complete.part.39+0xd4>
		conn_count++;
    909e:	4a3d      	ldr	r2, [pc, #244]	; (9194 <le_conn_complete.part.39+0x128>)
    90a0:	6813      	ldr	r3, [r2, #0]
    90a2:	3301      	adds	r3, #1
    90a4:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    90a6:	ea5a 030b 	orrs.w	r3, sl, fp
    90aa:	f101 0803 	add.w	r8, r1, #3
    90ae:	d151      	bne.n	9154 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    90b0:	2212      	movs	r2, #18
    90b2:	2101      	movs	r1, #1
    90b4:	f7ff ff54 	bl	8f60 <meta_evt>
	lecc->status = 0x00;
    90b8:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    90ba:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    90be:	7863      	ldrb	r3, [r4, #1]
    90c0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    90c2:	78a3      	ldrb	r3, [r4, #2]
    90c4:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    90c6:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    90c8:	2206      	movs	r2, #6
    90ca:	4641      	mov	r1, r8
    90cc:	3005      	adds	r0, #5
    90ce:	f7f8 fd95 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    90d2:	8ae3      	ldrh	r3, [r4, #22]
    90d4:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    90d8:	8b23      	ldrh	r3, [r4, #24]
    90da:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    90de:	8b63      	ldrh	r3, [r4, #26]
    90e0:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    90e4:	7f23      	ldrb	r3, [r4, #28]
    90e6:	747b      	strb	r3, [r7, #17]
    90e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    90ec:	221e      	movs	r2, #30
    90ee:	210a      	movs	r1, #10
    90f0:	f7ff ff36 	bl	8f60 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    90f4:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    90f6:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    90f8:	2100      	movs	r1, #0
    90fa:	f7f8 fdab 	bl	1c54 <memset>
		lecc->status = status;
    90fe:	7025      	strb	r5, [r4, #0]
    9100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    9104:	7d63      	ldrb	r3, [r4, #21]
    9106:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    910a:	2b40      	cmp	r3, #64	; 0x40
    910c:	d138      	bne.n	9180 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    910e:	2206      	movs	r2, #6
    9110:	f104 0110 	add.w	r1, r4, #16
    9114:	f7f8 fd72 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    9118:	2206      	movs	r2, #6
    911a:	f104 0109 	add.w	r1, r4, #9
    911e:	f107 0011 	add.w	r0, r7, #17
    9122:	f7f8 fd6b 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    9126:	8ae3      	ldrh	r3, [r4, #22]
    9128:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    912c:	8b23      	ldrh	r3, [r4, #24]
    912e:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    9132:	8b63      	ldrh	r3, [r4, #26]
    9134:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    9138:	7f23      	ldrb	r3, [r4, #28]
    913a:	777b      	strb	r3, [r7, #29]
    913c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    9140:	ea5a 030b 	orrs.w	r3, sl, fp
    9144:	d1d2      	bne.n	90ec <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9146:	2212      	movs	r2, #18
    9148:	2101      	movs	r1, #1
    914a:	f7ff ff09 	bl	8f60 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    914e:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9150:	4604      	mov	r4, r0
    9152:	e7d1      	b.n	90f8 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9154:	221e      	movs	r2, #30
    9156:	210a      	movs	r1, #10
    9158:	f7ff ff02 	bl	8f60 <meta_evt>
		leecc->status = 0x00;
    915c:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    915e:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    9162:	7863      	ldrb	r3, [r4, #1]
    9164:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    9166:	78a3      	ldrb	r3, [r4, #2]
    9168:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    916a:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    916c:	2206      	movs	r2, #6
    916e:	4641      	mov	r1, r8
    9170:	3005      	adds	r0, #5
    9172:	f7f8 fd43 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    9176:	7be3      	ldrb	r3, [r4, #15]
    9178:	f107 000b 	add.w	r0, r7, #11
    917c:	2b00      	cmp	r3, #0
    917e:	d1c1      	bne.n	9104 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    9180:	2206      	movs	r2, #6
    9182:	2100      	movs	r1, #0
    9184:	f7f8 fd66 	bl	1c54 <memset>
    9188:	e7c6      	b.n	9118 <le_conn_complete.part.39+0xac>
    918a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    918e:	bf00      	nop
    9190:	20003d60 	.word	0x20003d60
    9194:	20000858 	.word	0x20000858

00009198 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9198:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    919a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    919c:	b08a      	sub	sp, #40	; 0x28
    919e:	4604      	mov	r4, r0
    91a0:	460e      	mov	r6, r1
    91a2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    91a4:	2b03      	cmp	r3, #3
    91a6:	d820      	bhi.n	91ea <bt_addr_le_to_str.constprop.70+0x52>
    91a8:	e8df f003 	tbb	[pc, r3]
    91ac:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    91b0:	4911      	ldr	r1, [pc, #68]	; (91f8 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    91b2:	4628      	mov	r0, r5
    91b4:	f7f8 fcee 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    91b8:	7862      	ldrb	r2, [r4, #1]
    91ba:	9204      	str	r2, [sp, #16]
    91bc:	78a2      	ldrb	r2, [r4, #2]
    91be:	9203      	str	r2, [sp, #12]
    91c0:	78e2      	ldrb	r2, [r4, #3]
    91c2:	9202      	str	r2, [sp, #8]
    91c4:	7922      	ldrb	r2, [r4, #4]
    91c6:	9201      	str	r2, [sp, #4]
    91c8:	7962      	ldrb	r2, [r4, #5]
    91ca:	9200      	str	r2, [sp, #0]
    91cc:	79a3      	ldrb	r3, [r4, #6]
    91ce:	9505      	str	r5, [sp, #20]
    91d0:	4a0a      	ldr	r2, [pc, #40]	; (91fc <bt_addr_le_to_str.constprop.70+0x64>)
    91d2:	211b      	movs	r1, #27
    91d4:	4630      	mov	r0, r6
    91d6:	f7f7 fee7 	bl	fa8 <snprintk>
}
    91da:	b00a      	add	sp, #40	; 0x28
    91dc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    91de:	4908      	ldr	r1, [pc, #32]	; (9200 <bt_addr_le_to_str.constprop.70+0x68>)
    91e0:	e7e7      	b.n	91b2 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    91e2:	4908      	ldr	r1, [pc, #32]	; (9204 <bt_addr_le_to_str.constprop.70+0x6c>)
    91e4:	e7e5      	b.n	91b2 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    91e6:	4908      	ldr	r1, [pc, #32]	; (9208 <bt_addr_le_to_str.constprop.70+0x70>)
    91e8:	e7e3      	b.n	91b2 <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    91ea:	4a08      	ldr	r2, [pc, #32]	; (920c <bt_addr_le_to_str.constprop.70+0x74>)
    91ec:	210a      	movs	r1, #10
    91ee:	4628      	mov	r0, r5
    91f0:	f7f7 feda 	bl	fa8 <snprintk>
    91f4:	e7e0      	b.n	91b8 <bt_addr_le_to_str.constprop.70+0x20>
    91f6:	bf00      	nop
    91f8:	00015531 	.word	0x00015531
    91fc:	0001555a 	.word	0x0001555a
    9200:	00015538 	.word	0x00015538
    9204:	0001553f 	.word	0x0001553f
    9208:	00015549 	.word	0x00015549
    920c:	00015553 	.word	0x00015553

00009210 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    9210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9214:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    9216:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9218:	4d32      	ldr	r5, [pc, #200]	; (92e4 <le_adv_ext_report.isra.66+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    921a:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    921c:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    921e:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9220:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9222:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9224:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9226:	b25b      	sxtb	r3, r3
    9228:	9306      	str	r3, [sp, #24]
    922a:	7823      	ldrb	r3, [r4, #0]
    922c:	9201      	str	r2, [sp, #4]
    922e:	09d9      	lsrs	r1, r3, #7
    9230:	9105      	str	r1, [sp, #20]
    9232:	f3c3 1180 	ubfx	r1, r3, #6, #1
    9236:	f003 030f 	and.w	r3, r3, #15
    923a:	9104      	str	r1, [sp, #16]
    923c:	9302      	str	r3, [sp, #8]
    923e:	9500      	str	r5, [sp, #0]
    9240:	4b29      	ldr	r3, [pc, #164]	; (92e8 <le_adv_ext_report.isra.66+0xd8>)
    9242:	4a2a      	ldr	r2, [pc, #168]	; (92ec <le_adv_ext_report.isra.66+0xdc>)
    9244:	492a      	ldr	r1, [pc, #168]	; (92f0 <le_adv_ext_report.isra.66+0xe0>)
    9246:	482b      	ldr	r0, [pc, #172]	; (92f4 <le_adv_ext_report.isra.66+0xe4>)
    9248:	f7f7 fea0 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    924c:	7823      	ldrb	r3, [r4, #0]
    924e:	f003 030f 	and.w	r3, r3, #15
    9252:	2b07      	cmp	r3, #7
    9254:	d143      	bne.n	92de <le_adv_ext_report.isra.66+0xce>
    9256:	7863      	ldrb	r3, [r4, #1]
    9258:	2b00      	cmp	r3, #0
    925a:	d040      	beq.n	92de <le_adv_ext_report.isra.66+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    925c:	78a3      	ldrb	r3, [r4, #2]
    925e:	4924      	ldr	r1, [pc, #144]	; (92f0 <le_adv_ext_report.isra.66+0xe0>)
    9260:	9503      	str	r5, [sp, #12]
    9262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    9266:	099b      	lsrs	r3, r3, #6
    9268:	9202      	str	r2, [sp, #8]
    926a:	9301      	str	r3, [sp, #4]
    926c:	9500      	str	r5, [sp, #0]
    926e:	4b1e      	ldr	r3, [pc, #120]	; (92e8 <le_adv_ext_report.isra.66+0xd8>)
    9270:	4a1e      	ldr	r2, [pc, #120]	; (92ec <le_adv_ext_report.isra.66+0xdc>)
    9272:	4821      	ldr	r0, [pc, #132]	; (92f8 <le_adv_ext_report.isra.66+0xe8>)
    9274:	f7f7 fe8a 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    9278:	78a3      	ldrb	r3, [r4, #2]
    927a:	0699      	lsls	r1, r3, #26
    927c:	d02f      	beq.n	92de <le_adv_ext_report.isra.66+0xce>
		if (h->adv_addr) {
    927e:	78e3      	ldrb	r3, [r4, #3]
    9280:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    9282:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    9286:	d51c      	bpl.n	92c2 <le_adv_ext_report.isra.66+0xb2>
			addr.type = adv->tx_addr;
    9288:	7823      	ldrb	r3, [r4, #0]
    928a:	af12      	add	r7, sp, #72	; 0x48
    928c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9290:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    9294:	2206      	movs	r2, #6
    9296:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9298:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    929c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    92a0:	f7f8 fcac 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    92a4:	4641      	mov	r1, r8
    92a6:	4638      	mov	r0, r7
    92a8:	f7ff ff76 	bl	9198 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    92ac:	9502      	str	r5, [sp, #8]
    92ae:	e88d 0120 	stmia.w	sp, {r5, r8}
    92b2:	4b0d      	ldr	r3, [pc, #52]	; (92e8 <le_adv_ext_report.isra.66+0xd8>)
    92b4:	4a0d      	ldr	r2, [pc, #52]	; (92ec <le_adv_ext_report.isra.66+0xdc>)
    92b6:	490e      	ldr	r1, [pc, #56]	; (92f0 <le_adv_ext_report.isra.66+0xe0>)
    92b8:	4810      	ldr	r0, [pc, #64]	; (92fc <le_adv_ext_report.isra.66+0xec>)
			ptr += BDADDR_SIZE;
    92ba:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    92be:	f7f7 fe65 	bl	f8c <printk>
		if (h->tx_pwr) {
    92c2:	78e3      	ldrb	r3, [r4, #3]
    92c4:	065b      	lsls	r3, r3, #25
    92c6:	d50a      	bpl.n	92de <le_adv_ext_report.isra.66+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    92c8:	9502      	str	r5, [sp, #8]
    92ca:	f996 3000 	ldrsb.w	r3, [r6]
    92ce:	9301      	str	r3, [sp, #4]
    92d0:	9500      	str	r5, [sp, #0]
    92d2:	4b05      	ldr	r3, [pc, #20]	; (92e8 <le_adv_ext_report.isra.66+0xd8>)
    92d4:	4a05      	ldr	r2, [pc, #20]	; (92ec <le_adv_ext_report.isra.66+0xdc>)
    92d6:	4906      	ldr	r1, [pc, #24]	; (92f0 <le_adv_ext_report.isra.66+0xe0>)
    92d8:	4809      	ldr	r0, [pc, #36]	; (9300 <le_adv_ext_report.isra.66+0xf0>)
    92da:	f7f7 fe57 	bl	f8c <printk>
}
    92de:	b012      	add	sp, #72	; 0x48
    92e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92e4:	000155c5 	.word	0x000155c5
    92e8:	00018070 	.word	0x00018070
    92ec:	00016a28 	.word	0x00016a28
    92f0:	000169ed 	.word	0x000169ed
    92f4:	000182cd 	.word	0x000182cd
    92f8:	0001831a 	.word	0x0001831a
    92fc:	0001834b 	.word	0x0001834b
    9300:	00018364 	.word	0x00018364

00009304 <sys_get_le64>:
{
    9304:	4603      	mov	r3, r0
}
    9306:	6800      	ldr	r0, [r0, #0]
    9308:	6859      	ldr	r1, [r3, #4]
    930a:	4770      	bx	lr

0000930c <hci_cmd_handle>:
{
    930c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    930e:	8981      	ldrh	r1, [r0, #12]
{
    9310:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    9312:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    9314:	2902      	cmp	r1, #2
{
    9316:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    9318:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    931a:	d80b      	bhi.n	9334 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    931c:	4bbe      	ldr	r3, [pc, #760]	; (9618 <hci_cmd_handle+0x30c>)
    931e:	9301      	str	r3, [sp, #4]
    9320:	9300      	str	r3, [sp, #0]
    9322:	4abe      	ldr	r2, [pc, #760]	; (961c <hci_cmd_handle+0x310>)
    9324:	4bbe      	ldr	r3, [pc, #760]	; (9620 <hci_cmd_handle+0x314>)
    9326:	49bf      	ldr	r1, [pc, #764]	; (9624 <hci_cmd_handle+0x318>)
    9328:	48bf      	ldr	r0, [pc, #764]	; (9628 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    932a:	f7f7 fe2f 	bl	f8c <printk>
		return NULL;
    932e:	4628      	mov	r0, r5
}
    9330:	b013      	add	sp, #76	; 0x4c
    9332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    9334:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9336:	4ebd      	ldr	r6, [pc, #756]	; (962c <hci_cmd_handle+0x320>)
    9338:	781a      	ldrb	r2, [r3, #0]
    933a:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    933c:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    933e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    9342:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9344:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    9346:	d907      	bls.n	9358 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    9348:	4bb3      	ldr	r3, [pc, #716]	; (9618 <hci_cmd_handle+0x30c>)
    934a:	9301      	str	r3, [sp, #4]
    934c:	9300      	str	r3, [sp, #0]
    934e:	4ab3      	ldr	r2, [pc, #716]	; (961c <hci_cmd_handle+0x310>)
    9350:	4bb3      	ldr	r3, [pc, #716]	; (9620 <hci_cmd_handle+0x314>)
    9352:	49b4      	ldr	r1, [pc, #720]	; (9624 <hci_cmd_handle+0x318>)
    9354:	48b6      	ldr	r0, [pc, #728]	; (9630 <hci_cmd_handle+0x324>)
    9356:	e7e8      	b.n	932a <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    9358:	2103      	movs	r1, #3
    935a:	f104 0008 	add.w	r0, r4, #8
    935e:	f00a fb43 	bl	139e8 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    9362:	8833      	ldrh	r3, [r6, #0]
    9364:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    9368:	0a9b      	lsrs	r3, r3, #10
    936a:	2b04      	cmp	r3, #4
    936c:	f000 80bc 	beq.w	94e8 <hci_cmd_handle+0x1dc>
    9370:	d809      	bhi.n	9386 <hci_cmd_handle+0x7a>
    9372:	2b01      	cmp	r3, #1
    9374:	d026      	beq.n	93c4 <hci_cmd_handle+0xb8>
    9376:	2b03      	cmp	r3, #3
    9378:	d03b      	beq.n	93f2 <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    937a:	2101      	movs	r1, #1
    937c:	a807      	add	r0, sp, #28
    937e:	f7ff fe05 	bl	8f8c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    9382:	2301      	movs	r3, #1
    9384:	e298      	b.n	98b8 <hci_cmd_handle+0x5ac>
	switch (BT_OGF(_opcode)) {
    9386:	2b08      	cmp	r3, #8
    9388:	f000 8168 	beq.w	965c <hci_cmd_handle+0x350>
    938c:	2b3f      	cmp	r3, #63	; 0x3f
    938e:	d1f4      	bne.n	937a <hci_cmd_handle+0x6e>
	switch (ocf) {
    9390:	3a01      	subs	r2, #1
    9392:	2a09      	cmp	r2, #9
    9394:	d8f1      	bhi.n	937a <hci_cmd_handle+0x6e>
    9396:	a301      	add	r3, pc, #4	; (adr r3, 939c <hci_cmd_handle+0x90>)
    9398:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    939c:	00009bf1 	.word	0x00009bf1
    93a0:	00009c21 	.word	0x00009c21
    93a4:	00009c4b 	.word	0x00009c4b
    93a8:	0000937b 	.word	0x0000937b
    93ac:	0000937b 	.word	0x0000937b
    93b0:	00009c91 	.word	0x00009c91
    93b4:	0000937b 	.word	0x0000937b
    93b8:	00009c63 	.word	0x00009c63
    93bc:	00009c9d 	.word	0x00009c9d
    93c0:	00009d0b 	.word	0x00009d0b
	switch (ocf) {
    93c4:	2a06      	cmp	r2, #6
    93c6:	d006      	beq.n	93d6 <hci_cmd_handle+0xca>
    93c8:	2a1d      	cmp	r2, #29
    93ca:	d1d6      	bne.n	937a <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    93cc:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    93ce:	8818      	ldrh	r0, [r3, #0]
    93d0:	f007 ffbf 	bl	11352 <ll_version_ind_send>
    93d4:	e004      	b.n	93e0 <hci_cmd_handle+0xd4>
    93d6:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    93d8:	7899      	ldrb	r1, [r3, #2]
    93da:	8818      	ldrh	r0, [r3, #0]
    93dc:	f007 ffcd 	bl	1137a <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    93e0:	2800      	cmp	r0, #0
    93e2:	bf14      	ite	ne
    93e4:	200c      	movne	r0, #12
    93e6:	2000      	moveq	r0, #0
    93e8:	f7ff fda0 	bl	8f2c <cmd_status>
    93ec:	9007      	str	r0, [sp, #28]
	return evt;
    93ee:	9807      	ldr	r0, [sp, #28]
    93f0:	e79e      	b.n	9330 <hci_cmd_handle+0x24>
	switch (ocf) {
    93f2:	2a2d      	cmp	r2, #45	; 0x2d
    93f4:	d03a      	beq.n	946c <hci_cmd_handle+0x160>
    93f6:	d820      	bhi.n	943a <hci_cmd_handle+0x12e>
    93f8:	2a01      	cmp	r2, #1
    93fa:	d02b      	beq.n	9454 <hci_cmd_handle+0x148>
    93fc:	2a03      	cmp	r2, #3
    93fe:	d1bc      	bne.n	937a <hci_cmd_handle+0x6e>
	dup_count = -1;
    9400:	4b8c      	ldr	r3, [pc, #560]	; (9634 <hci_cmd_handle+0x328>)
    9402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9406:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9408:	4b8b      	ldr	r3, [pc, #556]	; (9638 <hci_cmd_handle+0x32c>)
    940a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    940e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9412:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9416:	4b89      	ldr	r3, [pc, #548]	; (963c <hci_cmd_handle+0x330>)
    9418:	2000      	movs	r0, #0
    941a:	2100      	movs	r1, #0
    941c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9420:	4b87      	ldr	r3, [pc, #540]	; (9640 <hci_cmd_handle+0x334>)
    9422:	201f      	movs	r0, #31
    9424:	2100      	movs	r1, #0
    9426:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    942a:	f007 fc5d 	bl	10ce8 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    942e:	2101      	movs	r1, #1
    9430:	a807      	add	r0, sp, #28
    9432:	f7ff fdab 	bl	8f8c <cmd_complete>
	ccst->status = 0x00;
    9436:	2300      	movs	r3, #0
    9438:	e23e      	b.n	98b8 <hci_cmd_handle+0x5ac>
	switch (ocf) {
    943a:	2a7b      	cmp	r2, #123	; 0x7b
    943c:	d02c      	beq.n	9498 <hci_cmd_handle+0x18c>
    943e:	2a7c      	cmp	r2, #124	; 0x7c
    9440:	d041      	beq.n	94c6 <hci_cmd_handle+0x1ba>
    9442:	2a63      	cmp	r2, #99	; 0x63
    9444:	d199      	bne.n	937a <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    9446:	68a0      	ldr	r0, [r4, #8]
    9448:	f7ff ff5c 	bl	9304 <sys_get_le64>
    944c:	4b7b      	ldr	r3, [pc, #492]	; (963c <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    944e:	e9c3 0100 	strd	r0, r1, [r3]
    9452:	e7ec      	b.n	942e <hci_cmd_handle+0x122>
	event_mask = sys_get_le64(cmd->events);
    9454:	68a0      	ldr	r0, [r4, #8]
    9456:	f7ff ff55 	bl	9304 <sys_get_le64>
    945a:	4b77      	ldr	r3, [pc, #476]	; (9638 <hci_cmd_handle+0x32c>)
    945c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9460:	4611      	mov	r1, r2
    9462:	a807      	add	r0, sp, #28
    9464:	f7ff fd92 	bl	8f8c <cmd_complete>
	ccst->status = 0x00;
    9468:	7005      	strb	r5, [r0, #0]
    946a:	e7c0      	b.n	93ee <hci_cmd_handle+0xe2>
    946c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    946e:	2104      	movs	r1, #4
    9470:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9472:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    9474:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    9476:	f7ff fd89 	bl	8f8c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    947a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    947c:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    947e:	1cc2      	adds	r2, r0, #3
    9480:	4639      	mov	r1, r7
    9482:	4630      	mov	r0, r6
    9484:	f007 ff8d 	bl	113a2 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    9488:	2800      	cmp	r0, #0
    948a:	bf14      	ite	ne
    948c:	2302      	movne	r3, #2
    948e:	2300      	moveq	r3, #0
    9490:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    9492:	f8a4 5001 	strh.w	r5, [r4, #1]
    9496:	e7aa      	b.n	93ee <hci_cmd_handle+0xe2>
	handle = sys_le16_to_cpu(cmd->handle);
    9498:	68a3      	ldr	r3, [r4, #8]
    949a:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    949c:	a908      	add	r1, sp, #32
    949e:	b2a0      	uxth	r0, r4
    94a0:	f007 ff89 	bl	113b6 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    94a4:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    94a6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    94a8:	a807      	add	r0, sp, #28
    94aa:	f7ff fd6f 	bl	8f8c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    94ae:	2d00      	cmp	r5, #0
    94b0:	bf14      	ite	ne
    94b2:	230c      	movne	r3, #12
    94b4:	2300      	moveq	r3, #0
    94b6:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    94b8:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    94bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    94c0:	f8a0 3003 	strh.w	r3, [r0, #3]
    94c4:	e793      	b.n	93ee <hci_cmd_handle+0xe2>
    94c6:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    94c8:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    94ca:	8859      	ldrh	r1, [r3, #2]
    94cc:	b2a0      	uxth	r0, r4
    94ce:	f007 ff86 	bl	113de <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    94d2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    94d4:	2103      	movs	r1, #3
    94d6:	a807      	add	r0, sp, #28
    94d8:	f7ff fd58 	bl	8f8c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    94dc:	2d00      	cmp	r5, #0
    94de:	bf14      	ite	ne
    94e0:	230c      	movne	r3, #12
    94e2:	2300      	moveq	r3, #0
    94e4:	7003      	strb	r3, [r0, #0]
    94e6:	e27d      	b.n	99e4 <hci_cmd_handle+0x6d8>
	switch (ocf) {
    94e8:	3a01      	subs	r2, #1
    94ea:	2a08      	cmp	r2, #8
    94ec:	f63f af45 	bhi.w	937a <hci_cmd_handle+0x6e>
    94f0:	a301      	add	r3, pc, #4	; (adr r3, 94f8 <hci_cmd_handle+0x1ec>)
    94f2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    94f6:	bf00      	nop
    94f8:	0000951d 	.word	0x0000951d
    94fc:	00009547 	.word	0x00009547
    9500:	000095fb 	.word	0x000095fb
    9504:	0000937b 	.word	0x0000937b
    9508:	0000937b 	.word	0x0000937b
    950c:	0000937b 	.word	0x0000937b
    9510:	0000937b 	.word	0x0000937b
    9514:	0000937b 	.word	0x0000937b
    9518:	00009645 	.word	0x00009645
	rp = cmd_complete(evt, sizeof(*rp));
    951c:	2109      	movs	r1, #9
    951e:	a807      	add	r0, sp, #28
    9520:	f7ff fd34 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9524:	2300      	movs	r3, #0
    9526:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    9528:	7083      	strb	r3, [r0, #2]
    952a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    952c:	f06f 030e 	mvn.w	r3, #14
    9530:	7143      	strb	r3, [r0, #5]
    9532:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    9534:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    9536:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    9538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    953c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    953e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    9540:	71c3      	strb	r3, [r0, #7]
    9542:	7203      	strb	r3, [r0, #8]
    9544:	e753      	b.n	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9546:	2141      	movs	r1, #65	; 0x41
    9548:	a807      	add	r0, sp, #28
    954a:	f7ff fd1f 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    954e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9550:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9552:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9554:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9558:	f7f8 fb7c 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    955c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    955e:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    9560:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9564:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    9566:	79a3      	ldrb	r3, [r4, #6]
    9568:	f063 033f 	orn	r3, r3, #63	; 0x3f
    956c:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    956e:	7ae3      	ldrb	r3, [r4, #11]
    9570:	f043 0304 	orr.w	r3, r3, #4
    9574:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    9576:	7be3      	ldrb	r3, [r4, #15]
    9578:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    957c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    957e:	7c23      	ldrb	r3, [r4, #16]
    9580:	f043 0302 	orr.w	r3, r3, #2
    9584:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    9586:	7de3      	ldrb	r3, [r4, #23]
    9588:	f043 0304 	orr.w	r3, r3, #4
    958c:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    958e:	7ea3      	ldrb	r3, [r4, #26]
    9590:	f043 0317 	orr.w	r3, r3, #23
    9594:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    9596:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    9598:	f043 0309 	orr.w	r3, r3, #9
    959c:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    959e:	7863      	ldrb	r3, [r4, #1]
    95a0:	f043 0320 	orr.w	r3, r3, #32
    95a4:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    95a6:	23ff      	movs	r3, #255	; 0xff
    95a8:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    95aa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    95ae:	f063 030f 	orn	r3, r3, #15
    95b2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    95b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    95ba:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    95be:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    95c2:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    95c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    95c8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    95cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    95d0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    95d4:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    95d8:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    95dc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    95e0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    95e4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    95e8:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    95ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    95f0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    95f4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    95f8:	e6f9      	b.n	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    95fa:	2109      	movs	r1, #9
    95fc:	a807      	add	r0, sp, #28
    95fe:	f7ff fcc5 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9602:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9604:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9606:	2208      	movs	r2, #8
	rp->status = 0x00;
    9608:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    960c:	f7f8 fb22 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    9610:	2360      	movs	r3, #96	; 0x60
    9612:	7163      	strb	r3, [r4, #5]
    9614:	e6eb      	b.n	93ee <hci_cmd_handle+0xe2>
    9616:	bf00      	nop
    9618:	000155c5 	.word	0x000155c5
    961c:	0001699e 	.word	0x0001699e
    9620:	0001803c 	.word	0x0001803c
    9624:	000169ed 	.word	0x000169ed
    9628:	0001817f 	.word	0x0001817f
    962c:	20000854 	.word	0x20000854
    9630:	000181a5 	.word	0x000181a5
    9634:	2000085c 	.word	0x2000085c
    9638:	20003d58 	.word	0x20003d58
    963c:	200008e8 	.word	0x200008e8
    9640:	20003d60 	.word	0x20003d60
	rp = cmd_complete(evt, sizeof(*rp));
    9644:	2107      	movs	r1, #7
    9646:	a807      	add	r0, sp, #28
    9648:	f7ff fca0 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    964c:	4601      	mov	r1, r0
    964e:	2300      	movs	r3, #0
    9650:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    9654:	4618      	mov	r0, r3
    9656:	f7ff fac5 	bl	8be4 <ll_addr_get>
    965a:	e6c8      	b.n	93ee <hci_cmd_handle+0xe2>
	switch (ocf) {
    965c:	3a01      	subs	r2, #1
    965e:	2a4d      	cmp	r2, #77	; 0x4d
    9660:	f63f ae8b 	bhi.w	937a <hci_cmd_handle+0x6e>
    9664:	a301      	add	r3, pc, #4	; (adr r3, 966c <hci_cmd_handle+0x360>)
    9666:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    966a:	bf00      	nop
    966c:	000097a5 	.word	0x000097a5
    9670:	000097af 	.word	0x000097af
    9674:	000097c7 	.word	0x000097c7
    9678:	0000937b 	.word	0x0000937b
    967c:	000097eb 	.word	0x000097eb
    9680:	0000937b 	.word	0x0000937b
    9684:	0000937b 	.word	0x0000937b
    9688:	0000937b 	.word	0x0000937b
    968c:	0000937b 	.word	0x0000937b
    9690:	0000937b 	.word	0x0000937b
    9694:	0000988f 	.word	0x0000988f
    9698:	000098bd 	.word	0x000098bd
    969c:	000098dd 	.word	0x000098dd
    96a0:	00009907 	.word	0x00009907
    96a4:	000097f7 	.word	0x000097f7
    96a8:	0000980d 	.word	0x0000980d
    96ac:	0000981f 	.word	0x0000981f
    96b0:	00009827 	.word	0x00009827
    96b4:	000099a7 	.word	0x000099a7
    96b8:	00009967 	.word	0x00009967
    96bc:	00009983 	.word	0x00009983
    96c0:	0000999d 	.word	0x0000999d
    96c4:	0000982f 	.word	0x0000982f
    96c8:	00009855 	.word	0x00009855
    96cc:	0000996f 	.word	0x0000996f
    96d0:	0000937b 	.word	0x0000937b
    96d4:	0000937b 	.word	0x0000937b
    96d8:	0000986b 	.word	0x0000986b
    96dc:	0000937b 	.word	0x0000937b
    96e0:	0000937b 	.word	0x0000937b
    96e4:	0000937b 	.word	0x0000937b
    96e8:	000099c1 	.word	0x000099c1
    96ec:	000099eb 	.word	0x000099eb
    96f0:	000099f9 	.word	0x000099f9
    96f4:	00009a09 	.word	0x00009a09
    96f8:	00009a21 	.word	0x00009a21
    96fc:	0000937b 	.word	0x0000937b
    9700:	0000937b 	.word	0x0000937b
    9704:	00009b39 	.word	0x00009b39
    9708:	00009b47 	.word	0x00009b47
    970c:	00009b4f 	.word	0x00009b4f
    9710:	00009b5f 	.word	0x00009b5f
    9714:	00009b71 	.word	0x00009b71
    9718:	00009b8f 	.word	0x00009b8f
    971c:	00009bad 	.word	0x00009bad
    9720:	00009bc3 	.word	0x00009bc3
    9724:	00009a3d 	.word	0x00009a3d
    9728:	00009a69 	.word	0x00009a69
    972c:	00009abf 	.word	0x00009abf
    9730:	00009add 	.word	0x00009add
    9734:	0000937b 	.word	0x0000937b
    9738:	0000937b 	.word	0x0000937b
    973c:	0000937b 	.word	0x0000937b
    9740:	0000937b 	.word	0x0000937b
    9744:	0000937b 	.word	0x0000937b
    9748:	0000937b 	.word	0x0000937b
    974c:	0000937b 	.word	0x0000937b
    9750:	0000937b 	.word	0x0000937b
    9754:	0000937b 	.word	0x0000937b
    9758:	0000937b 	.word	0x0000937b
    975c:	0000937b 	.word	0x0000937b
    9760:	0000937b 	.word	0x0000937b
    9764:	0000937b 	.word	0x0000937b
    9768:	0000937b 	.word	0x0000937b
    976c:	0000937b 	.word	0x0000937b
    9770:	0000937b 	.word	0x0000937b
    9774:	0000937b 	.word	0x0000937b
    9778:	0000937b 	.word	0x0000937b
    977c:	0000937b 	.word	0x0000937b
    9780:	0000937b 	.word	0x0000937b
    9784:	0000937b 	.word	0x0000937b
    9788:	0000937b 	.word	0x0000937b
    978c:	0000937b 	.word	0x0000937b
    9790:	0000937b 	.word	0x0000937b
    9794:	00009bd7 	.word	0x00009bd7
    9798:	0000937b 	.word	0x0000937b
    979c:	0000937b 	.word	0x0000937b
    97a0:	00009bcd 	.word	0x00009bcd
	le_event_mask = sys_get_le64(cmd->events);
    97a4:	68a0      	ldr	r0, [r4, #8]
    97a6:	f7ff fdad 	bl	9304 <sys_get_le64>
    97aa:	4baa      	ldr	r3, [pc, #680]	; (9a54 <hci_cmd_handle+0x748>)
    97ac:	e64f      	b.n	944e <hci_cmd_handle+0x142>
	rp = cmd_complete(evt, sizeof(*rp));
    97ae:	2104      	movs	r1, #4
    97b0:	a807      	add	r0, sp, #28
    97b2:	f7ff fbeb 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    97b6:	2300      	movs	r3, #0
    97b8:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    97ba:	221b      	movs	r2, #27
    97bc:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    97be:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    97c0:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    97c2:	70c3      	strb	r3, [r0, #3]
    97c4:	e613      	b.n	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    97c6:	2109      	movs	r1, #9
    97c8:	a807      	add	r0, sp, #28
    97ca:	f7ff fbdf 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    97ce:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    97d0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    97d2:	2208      	movs	r2, #8
	rp->status = 0x00;
    97d4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    97d8:	f7f8 fa3c 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    97dc:	23ff      	movs	r3, #255	; 0xff
    97de:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    97e0:	2341      	movs	r3, #65	; 0x41
    97e2:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    97e4:	2301      	movs	r3, #1
    97e6:	70e3      	strb	r3, [r4, #3]
    97e8:	e601      	b.n	93ee <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    97ea:	68a1      	ldr	r1, [r4, #8]
    97ec:	2001      	movs	r0, #1
    97ee:	f7ff fa13 	bl	8c18 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    97f2:	4604      	mov	r4, r0
    97f4:	e0af      	b.n	9956 <hci_cmd_handle+0x64a>
	rp = cmd_complete(evt, sizeof(*rp));
    97f6:	2102      	movs	r1, #2
    97f8:	a807      	add	r0, sp, #28
    97fa:	f7ff fbc7 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    97fe:	2300      	movs	r3, #0
    9800:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9802:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    9804:	f008 fd32 	bl	1226c <ll_wl_size_get>
    9808:	7060      	strb	r0, [r4, #1]
    980a:	e5f0      	b.n	93ee <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    980c:	2101      	movs	r1, #1
    980e:	a807      	add	r0, sp, #28
    9810:	f7ff fbbc 	bl	8f8c <cmd_complete>
    9814:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    9816:	f008 fd2b 	bl	12270 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    981a:	7020      	strb	r0, [r4, #0]
    981c:	e5e7      	b.n	93ee <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    981e:	68a0      	ldr	r0, [r4, #8]
    9820:	f008 fdd2 	bl	123c8 <ll_wl_add>
    9824:	e7e5      	b.n	97f2 <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    9826:	68a0      	ldr	r0, [r4, #8]
    9828:	f008 fd42 	bl	122b0 <ll_wl_remove>
    982c:	e7e1      	b.n	97f2 <hci_cmd_handle+0x4e6>
    982e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    9830:	2300      	movs	r3, #0
    9832:	aa08      	add	r2, sp, #32
    9834:	f100 0110 	add.w	r1, r0, #16
    9838:	f009 fa40 	bl	12cbc <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    983c:	2111      	movs	r1, #17
    983e:	a807      	add	r0, sp, #28
    9840:	f7ff fba4 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9844:	2300      	movs	r3, #0
    9846:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    984a:	2210      	movs	r2, #16
    984c:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    984e:	f7f8 f9d5 	bl	1bfc <memcpy>
    9852:	e5cc      	b.n	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9854:	2109      	movs	r1, #9
    9856:	a807      	add	r0, sp, #28
    9858:	f7ff fb98 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    985c:	2300      	movs	r3, #0
    985e:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    9862:	2108      	movs	r1, #8
    9864:	f7ff f9f8 	bl	8c58 <bt_rand>
    9868:	e5c1      	b.n	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    986a:	2109      	movs	r1, #9
    986c:	a807      	add	r0, sp, #28
    986e:	f7ff fb8d 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9872:	4601      	mov	r1, r0
    9874:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9876:	4602      	mov	r2, r0
	rp->status = 0x00;
    9878:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    987c:	4876      	ldr	r0, [pc, #472]	; (9a58 <hci_cmd_handle+0x74c>)
    987e:	f7ff fb41 	bl	8f04 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    9882:	f240 203f 	movw	r0, #575	; 0x23f
    9886:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    9888:	f7ff fb3c 	bl	8f04 <sys_put_le32>
    988c:	e5af      	b.n	93ee <hci_cmd_handle+0xe2>
    988e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    9890:	7963      	ldrb	r3, [r4, #5]
    9892:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    9896:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    989a:	7820      	ldrb	r0, [r4, #0]
    989c:	79a4      	ldrb	r4, [r4, #6]
    989e:	9400      	str	r4, [sp, #0]
    98a0:	f008 faa8 	bl	11df4 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    98a4:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    98a6:	2101      	movs	r1, #1
    98a8:	a807      	add	r0, sp, #28
    98aa:	f7ff fb6f 	bl	8f8c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    98ae:	2c00      	cmp	r4, #0
    98b0:	bf18      	it	ne
    98b2:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    98b4:	bf08      	it	eq
    98b6:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    98b8:	7003      	strb	r3, [r0, #0]
    98ba:	e598      	b.n	93ee <hci_cmd_handle+0xe2>
    98bc:	68a2      	ldr	r2, [r4, #8]
    98be:	4b67      	ldr	r3, [pc, #412]	; (9a5c <hci_cmd_handle+0x750>)
	if (cmd->enable && cmd->filter_dup) {
    98c0:	7810      	ldrb	r0, [r2, #0]
    98c2:	b140      	cbz	r0, 98d6 <hci_cmd_handle+0x5ca>
    98c4:	7852      	ldrb	r2, [r2, #1]
    98c6:	b132      	cbz	r2, 98d6 <hci_cmd_handle+0x5ca>
		dup_count = 0;
    98c8:	2200      	movs	r2, #0
    98ca:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    98cc:	4b64      	ldr	r3, [pc, #400]	; (9a60 <hci_cmd_handle+0x754>)
		dup_count = -1;
    98ce:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    98d0:	f008 fab0 	bl	11e34 <ll_scan_enable>
    98d4:	e7e6      	b.n	98a4 <hci_cmd_handle+0x598>
		dup_count = -1;
    98d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    98da:	e7f8      	b.n	98ce <hci_cmd_handle+0x5c2>
    98dc:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    98de:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    98e2:	7963      	ldrb	r3, [r4, #5]
    98e4:	7922      	ldrb	r2, [r4, #4]
    98e6:	8861      	ldrh	r1, [r4, #2]
    98e8:	8820      	ldrh	r0, [r4, #0]
    98ea:	9504      	str	r5, [sp, #16]
    98ec:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    98f0:	9503      	str	r5, [sp, #12]
    98f2:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    98f6:	9502      	str	r5, [sp, #8]
    98f8:	7b25      	ldrb	r5, [r4, #12]
    98fa:	9501      	str	r5, [sp, #4]
    98fc:	3406      	adds	r4, #6
    98fe:	9400      	str	r4, [sp, #0]
    9900:	f008 fad2 	bl	11ea8 <ll_create_connection>
    9904:	e56c      	b.n	93e0 <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    9906:	f008 f8e7 	bl	11ad8 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    990a:	4606      	mov	r6, r0
    990c:	bb48      	cbnz	r0, 9962 <hci_cmd_handle+0x656>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    990e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9912:	2001      	movs	r0, #1
    9914:	f7fa fcbc 	bl	4290 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9918:	4a52      	ldr	r2, [pc, #328]	; (9a64 <hci_cmd_handle+0x758>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    991a:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    991c:	e9d2 4500 	ldrd	r4, r5, [r2]
    9920:	2400      	movs	r4, #0
    9922:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    9926:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    992a:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    992c:	d004      	beq.n	9938 <hci_cmd_handle+0x62c>
    992e:	4632      	mov	r2, r6
    9930:	4631      	mov	r1, r6
    9932:	2002      	movs	r0, #2
    9934:	f7ff fb9a 	bl	906c <le_conn_complete.part.39>
		if ((*evt)->len) {
    9938:	9807      	ldr	r0, [sp, #28]
    993a:	8984      	ldrh	r4, [r0, #12]
    993c:	b14c      	cbz	r4, 9952 <hci_cmd_handle+0x646>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    993e:	2101      	movs	r1, #1
    9940:	a808      	add	r0, sp, #32
    9942:	f7ff fb23 	bl	8f8c <cmd_complete>
			ccst->status = cmd_status;
    9946:	2300      	movs	r3, #0
    9948:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    994a:	9808      	ldr	r0, [sp, #32]
    994c:	f7fa fa6a 	bl	3e24 <bt_recv_prio>
    9950:	e54d      	b.n	93ee <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    9952:	f009 ffe9 	bl	13928 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9956:	2101      	movs	r1, #1
    9958:	a807      	add	r0, sp, #28
    995a:	f7ff fb17 	bl	8f8c <cmd_complete>
	ccst->status = status;
    995e:	7004      	strb	r4, [r0, #0]
    9960:	e545      	b.n	93ee <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    9962:	240c      	movs	r4, #12
    9964:	e7f7      	b.n	9956 <hci_cmd_handle+0x64a>
	status = ll_chm_update(&cmd->ch_map[0]);
    9966:	68a0      	ldr	r0, [r4, #8]
    9968:	f007 fc88 	bl	1127c <ll_chm_update>
    996c:	e79a      	b.n	98a4 <hci_cmd_handle+0x598>
    996e:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    9970:	f100 030c 	add.w	r3, r0, #12
    9974:	f100 020a 	add.w	r2, r0, #10
    9978:	1c81      	adds	r1, r0, #2
    997a:	8800      	ldrh	r0, [r0, #0]
    997c:	f007 ff32 	bl	117e4 <ll_enc_req_send>
    9980:	e52e      	b.n	93e0 <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    9982:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9984:	2108      	movs	r1, #8
    9986:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9988:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    998a:	f7ff faff 	bl	8f8c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    998e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9990:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    9992:	1cc1      	adds	r1, r0, #3
    9994:	4630      	mov	r0, r6
    9996:	f007 fcb3 	bl	11300 <ll_chm_get>
    999a:	e575      	b.n	9488 <hci_cmd_handle+0x17c>
	handle = sys_le16_to_cpu(cmd->handle);
    999c:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    999e:	8818      	ldrh	r0, [r3, #0]
    99a0:	f007 fcc3 	bl	1132a <ll_feature_req_send>
    99a4:	e51c      	b.n	93e0 <hci_cmd_handle+0xd4>
    99a6:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    99a8:	8911      	ldrh	r1, [r2, #8]
    99aa:	8893      	ldrh	r3, [r2, #4]
    99ac:	8810      	ldrh	r0, [r2, #0]
    99ae:	9101      	str	r1, [sp, #4]
    99b0:	88d2      	ldrh	r2, [r2, #6]
    99b2:	9200      	str	r2, [sp, #0]
    99b4:	2200      	movs	r2, #0
    99b6:	4611      	mov	r1, r2
    99b8:	f007 fbe8 	bl	1118c <ll_conn_update>
	*evt = cmd_status(status);
    99bc:	b2c0      	uxtb	r0, r0
    99be:	e513      	b.n	93e8 <hci_cmd_handle+0xdc>
    99c0:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    99c2:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    99c4:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    99c6:	8893      	ldrh	r3, [r2, #4]
    99c8:	9101      	str	r1, [sp, #4]
    99ca:	88d2      	ldrh	r2, [r2, #6]
    99cc:	9200      	str	r2, [sp, #0]
    99ce:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    99d0:	2102      	movs	r1, #2
    99d2:	b2a0      	uxth	r0, r4
    99d4:	f007 fbda 	bl	1118c <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    99d8:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    99da:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    99dc:	a807      	add	r0, sp, #28
    99de:	f7ff fad5 	bl	8f8c <cmd_complete>
	rp->status = status;
    99e2:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    99e4:	f8a0 4001 	strh.w	r4, [r0, #1]
    99e8:	e501      	b.n	93ee <hci_cmd_handle+0xe2>
    99ea:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    99ec:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    99ee:	789a      	ldrb	r2, [r3, #2]
    99f0:	2300      	movs	r3, #0
    99f2:	9301      	str	r3, [sp, #4]
    99f4:	9300      	str	r3, [sp, #0]
    99f6:	e7eb      	b.n	99d0 <hci_cmd_handle+0x6c4>
    99f8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    99fa:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    99fc:	889a      	ldrh	r2, [r3, #4]
    99fe:	8859      	ldrh	r1, [r3, #2]
    9a00:	b2a0      	uxth	r0, r4
    9a02:	f007 fd02 	bl	1140a <ll_length_req_send>
    9a06:	e564      	b.n	94d2 <hci_cmd_handle+0x1c6>
	rp = cmd_complete(evt, sizeof(*rp));
    9a08:	2105      	movs	r1, #5
    9a0a:	a807      	add	r0, sp, #28
    9a0c:	f7ff fabe 	bl	8f8c <cmd_complete>
    9a10:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    9a12:	1cc1      	adds	r1, r0, #3
    9a14:	3001      	adds	r0, #1
    9a16:	f007 fd1b 	bl	11450 <ll_length_default_get>
	rp->status = 0x00;
    9a1a:	2300      	movs	r3, #0
    9a1c:	7023      	strb	r3, [r4, #0]
    9a1e:	e4e6      	b.n	93ee <hci_cmd_handle+0xe2>
    9a20:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    9a22:	8859      	ldrh	r1, [r3, #2]
    9a24:	8818      	ldrh	r0, [r3, #0]
    9a26:	f007 fd1d 	bl	11464 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9a2a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    9a2c:	2101      	movs	r1, #1
    9a2e:	a807      	add	r0, sp, #28
    9a30:	f7ff faac 	bl	8f8c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9a34:	2c00      	cmp	r4, #0
    9a36:	bf18      	it	ne
    9a38:	231e      	movne	r3, #30
    9a3a:	e73b      	b.n	98b4 <hci_cmd_handle+0x5a8>
	rp = cmd_complete(evt, sizeof(*rp));
    9a3c:	2109      	movs	r1, #9
    9a3e:	a807      	add	r0, sp, #28
    9a40:	f7ff faa4 	bl	8f8c <cmd_complete>
    9a44:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    9a46:	1dc3      	adds	r3, r0, #7
    9a48:	1d42      	adds	r2, r0, #5
    9a4a:	1cc1      	adds	r1, r0, #3
    9a4c:	3001      	adds	r0, #1
    9a4e:	f007 fd13 	bl	11478 <ll_length_max_get>
    9a52:	e7e2      	b.n	9a1a <hci_cmd_handle+0x70e>
    9a54:	20003d60 	.word	0x20003d60
    9a58:	130f3370 	.word	0x130f3370
    9a5c:	2000085c 	.word	0x2000085c
    9a60:	20000860 	.word	0x20000860
    9a64:	20003d58 	.word	0x20003d58
	handle = sys_le16_to_cpu(cmd->handle);
    9a68:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9a6a:	2105      	movs	r1, #5
    9a6c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9a6e:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9a70:	f7ff fa8c 	bl	8f8c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9a74:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9a76:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9a78:	1d02      	adds	r2, r0, #4
    9a7a:	1cc1      	adds	r1, r0, #3
    9a7c:	4630      	mov	r0, r6
    9a7e:	f007 fd04 	bl	1148a <ll_phy_get>
	return __builtin_ffs(op);
    9a82:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    9a84:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9a88:	2800      	cmp	r0, #0
    9a8a:	bf14      	ite	ne
    9a8c:	230c      	movne	r3, #12
    9a8e:	2300      	moveq	r3, #0
    9a90:	7023      	strb	r3, [r4, #0]
    9a92:	2a00      	cmp	r2, #0
    9a94:	fa92 f3a2 	rbit	r3, r2
    9a98:	fab3 f383 	clz	r3, r3
    9a9c:	7922      	ldrb	r2, [r4, #4]
    9a9e:	bf08      	it	eq
    9aa0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9aa4:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    9aa6:	70e3      	strb	r3, [r4, #3]
    9aa8:	2a00      	cmp	r2, #0
    9aaa:	fa92 f3a2 	rbit	r3, r2
    9aae:	fab3 f383 	clz	r3, r3
    9ab2:	bf08      	it	eq
    9ab4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9ab8:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    9aba:	7123      	strb	r3, [r4, #4]
    9abc:	e497      	b.n	93ee <hci_cmd_handle+0xe2>
    9abe:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9ac0:	781a      	ldrb	r2, [r3, #0]
    9ac2:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    9ac4:	bf44      	itt	mi
    9ac6:	2107      	movmi	r1, #7
    9ac8:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9aca:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    9acc:	bf44      	itt	mi
    9ace:	2207      	movmi	r2, #7
    9ad0:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9ad2:	7899      	ldrb	r1, [r3, #2]
    9ad4:	7858      	ldrb	r0, [r3, #1]
    9ad6:	f007 fced 	bl	114b4 <ll_phy_default_set>
    9ada:	e7a6      	b.n	9a2a <hci_cmd_handle+0x71e>
    9adc:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9ade:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    9ae0:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    9ae2:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9ae6:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    9ae8:	bf44      	itt	mi
    9aea:	2103      	movmi	r1, #3
    9aec:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    9aee:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9af0:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    9af2:	bf44      	itt	mi
    9af4:	2203      	movmi	r2, #3
    9af6:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9af8:	074d      	lsls	r5, r1, #29
    9afa:	d002      	beq.n	9b02 <hci_cmd_handle+0x7f6>
	    !(cmd->rx_phys & 0x07)) {
    9afc:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9afe:	075a      	lsls	r2, r3, #29
    9b00:	d105      	bne.n	9b0e <hci_cmd_handle+0x802>
		ccst = cmd_complete(evt, sizeof(*ccst));
    9b02:	2101      	movs	r1, #1
    9b04:	a807      	add	r0, sp, #28
    9b06:	f7ff fa41 	bl	8f8c <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    9b0a:	2312      	movs	r3, #18
    9b0c:	e6d4      	b.n	98b8 <hci_cmd_handle+0x5ac>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    9b0e:	ea41 0203 	orr.w	r2, r1, r3
    9b12:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    9b16:	d005      	beq.n	9b24 <hci_cmd_handle+0x818>
		ccst = cmd_complete(evt, sizeof(*ccst));
    9b18:	2101      	movs	r1, #1
    9b1a:	a807      	add	r0, sp, #28
    9b1c:	f7ff fa36 	bl	8f8c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    9b20:	2311      	movs	r3, #17
    9b22:	e6c9      	b.n	98b8 <hci_cmd_handle+0x5ac>
	if (phy_opts & 0x03) {
    9b24:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    9b28:	bf1c      	itt	ne
    9b2a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    9b2e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    9b32:	f007 fcc9 	bl	114c8 <ll_phy_req_send>
    9b36:	e453      	b.n	93e0 <hci_cmd_handle+0xd4>
    9b38:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    9b3a:	f100 0217 	add.w	r2, r0, #23
    9b3e:	1dc1      	adds	r1, r0, #7
    9b40:	f008 fe4c 	bl	127dc <ll_rl_add>
    9b44:	e655      	b.n	97f2 <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    9b46:	68a0      	ldr	r0, [r4, #8]
    9b48:	f008 feea 	bl	12920 <ll_rl_remove>
    9b4c:	e651      	b.n	97f2 <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9b4e:	2101      	movs	r1, #1
    9b50:	a807      	add	r0, sp, #28
    9b52:	f7ff fa1b 	bl	8f8c <cmd_complete>
    9b56:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    9b58:	f008 fe26 	bl	127a8 <ll_rl_clear>
    9b5c:	e65d      	b.n	981a <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    9b5e:	2102      	movs	r1, #2
    9b60:	a807      	add	r0, sp, #28
    9b62:	f7ff fa13 	bl	8f8c <cmd_complete>
    9b66:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    9b68:	f008 fe1c 	bl	127a4 <ll_rl_size_get>
    9b6c:	7060      	strb	r0, [r4, #1]
    9b6e:	e754      	b.n	9a1a <hci_cmd_handle+0x70e>
    9b70:	2207      	movs	r2, #7
    9b72:	68a1      	ldr	r1, [r4, #8]
    9b74:	a808      	add	r0, sp, #32
    9b76:	f7f8 f841 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9b7a:	2107      	movs	r1, #7
    9b7c:	a807      	add	r0, sp, #28
    9b7e:	f7ff fa05 	bl	8f8c <cmd_complete>
    9b82:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    9b84:	1c41      	adds	r1, r0, #1
    9b86:	a808      	add	r0, sp, #32
    9b88:	f008 ff58 	bl	12a3c <ll_rl_crpa_get>
    9b8c:	e645      	b.n	981a <hci_cmd_handle+0x50e>
    9b8e:	2207      	movs	r2, #7
    9b90:	68a1      	ldr	r1, [r4, #8]
    9b92:	a808      	add	r0, sp, #32
    9b94:	f7f8 f832 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9b98:	2107      	movs	r1, #7
    9b9a:	a807      	add	r0, sp, #28
    9b9c:	f7ff f9f6 	bl	8f8c <cmd_complete>
    9ba0:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9ba2:	1c41      	adds	r1, r0, #1
    9ba4:	a808      	add	r0, sp, #32
    9ba6:	f008 ff69 	bl	12a7c <ll_rl_lrpa_get>
    9baa:	e636      	b.n	981a <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    9bac:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9bae:	2101      	movs	r1, #1
    9bb0:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    9bb2:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9bb4:	f7ff f9ea 	bl	8f8c <cmd_complete>
    9bb8:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    9bba:	4628      	mov	r0, r5
    9bbc:	f008 ff76 	bl	12aac <ll_rl_enable>
    9bc0:	e62b      	b.n	981a <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    9bc2:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    9bc4:	8818      	ldrh	r0, [r3, #0]
    9bc6:	f008 ff83 	bl	12ad0 <ll_rl_timeout_set>
    9bca:	e430      	b.n	942e <hci_cmd_handle+0x122>
    9bcc:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9bce:	79c1      	ldrb	r1, [r0, #7]
    9bd0:	f008 ff86 	bl	12ae0 <ll_priv_mode_set>
    9bd4:	e60d      	b.n	97f2 <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    9bd6:	2103      	movs	r1, #3
    9bd8:	a807      	add	r0, sp, #28
    9bda:	f7ff f9d7 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9bde:	4601      	mov	r1, r0
    9be0:	2300      	movs	r3, #0
    9be2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    9be6:	3001      	adds	r0, #1
    9be8:	f7ff f832 	bl	8c50 <ll_tx_pwr_get>
    9bec:	f7ff bbff 	b.w	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9bf0:	210d      	movs	r1, #13
    9bf2:	a807      	add	r0, sp, #28
    9bf4:	f7ff f9ca 	bl	8f8c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9bf8:	2202      	movs	r2, #2
    9bfa:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9bfc:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    9bfe:	2201      	movs	r2, #1
    9c00:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9c02:	220c      	movs	r2, #12
	rp->status = 0x00;
    9c04:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9c06:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    9c08:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    9c0a:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9c0c:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9c0e:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    9c10:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9c12:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    9c14:	7242      	strb	r2, [r0, #9]
    9c16:	7283      	strb	r3, [r0, #10]
    9c18:	72c3      	strb	r3, [r0, #11]
    9c1a:	7303      	strb	r3, [r0, #12]
    9c1c:	f7ff bbe7 	b.w	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9c20:	2141      	movs	r1, #65	; 0x41
    9c22:	a807      	add	r0, sp, #28
    9c24:	f7ff f9b2 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9c28:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9c2a:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9c2c:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9c2e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9c32:	f7f8 f80f 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    9c36:	7863      	ldrb	r3, [r4, #1]
    9c38:	f063 0358 	orn	r3, r3, #88	; 0x58
    9c3c:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9c3e:	78a3      	ldrb	r3, [r4, #2]
    9c40:	f043 0303 	orr.w	r3, r3, #3
    9c44:	70a3      	strb	r3, [r4, #2]
    9c46:	f7ff bbd2 	b.w	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9c4a:	2109      	movs	r1, #9
    9c4c:	a807      	add	r0, sp, #28
    9c4e:	f7ff f99d 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9c52:	2100      	movs	r1, #0
    9c54:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9c58:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    9c5a:	f7f7 fffb 	bl	1c54 <memset>
    9c5e:	f7ff bbc6 	b.w	93ee <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    9c62:	4b5c      	ldr	r3, [pc, #368]	; (9dd4 <hci_cmd_handle+0xac8>)
    9c64:	aa08      	add	r2, sp, #32
    9c66:	f103 0628 	add.w	r6, r3, #40	; 0x28
    9c6a:	4615      	mov	r5, r2
    9c6c:	6818      	ldr	r0, [r3, #0]
    9c6e:	6859      	ldr	r1, [r3, #4]
    9c70:	4614      	mov	r4, r2
    9c72:	c403      	stmia	r4!, {r0, r1}
    9c74:	3308      	adds	r3, #8
    9c76:	42b3      	cmp	r3, r6
    9c78:	4622      	mov	r2, r4
    9c7a:	d1f7      	bne.n	9c6c <hci_cmd_handle+0x960>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    9c7c:	2129      	movs	r1, #41	; 0x29
    9c7e:	a807      	add	r0, sp, #28
    9c80:	f7ff f984 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9c84:	2300      	movs	r3, #0
    9c86:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    9c8a:	2228      	movs	r2, #40	; 0x28
    9c8c:	4629      	mov	r1, r5
    9c8e:	e5de      	b.n	984e <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9c90:	68a1      	ldr	r1, [r4, #8]
    9c92:	2000      	movs	r0, #0
    9c94:	f7fe ffc0 	bl	8c18 <ll_addr_set>
    9c98:	f7ff bbc9 	b.w	942e <hci_cmd_handle+0x122>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9ca0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    9ca4:	3201      	adds	r2, #1
    9ca6:	d106      	bne.n	9cb6 <hci_cmd_handle+0x9aa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9ca8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9cb0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9cb2:	4293      	cmp	r3, r2
    9cb4:	d020      	beq.n	9cf8 <hci_cmd_handle+0x9ec>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    9cb6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    9cba:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9cbe:	07db      	lsls	r3, r3, #31
    9cc0:	d51a      	bpl.n	9cf8 <hci_cmd_handle+0x9ec>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9cc2:	2118      	movs	r1, #24
    9cc4:	a807      	add	r0, sp, #28
    9cc6:	f7ff f961 	bl	8f8c <cmd_complete>
		rp->status = 0x00;
    9cca:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    9ccc:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9cce:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    9cd0:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    9cd2:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    9cd4:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    9cd8:	1ca1      	adds	r1, r4, #2
    9cda:	f7ff f913 	bl	8f04 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    9cde:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    9ce2:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    9ce4:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    9ce8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    9cec:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    9cee:	2210      	movs	r2, #16
    9cf0:	4631      	mov	r1, r6
    9cf2:	f104 0008 	add.w	r0, r4, #8
    9cf6:	e7b0      	b.n	9c5a <hci_cmd_handle+0x94e>
	rp = cmd_complete(evt, sizeof(*rp));
    9cf8:	2102      	movs	r1, #2
    9cfa:	a807      	add	r0, sp, #28
    9cfc:	f7ff f946 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9d00:	2300      	movs	r3, #0
    9d02:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    9d04:	7043      	strb	r3, [r0, #1]
    9d06:	f7ff bb72 	b.w	93ee <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9d0a:	2121      	movs	r1, #33	; 0x21
    9d0c:	a807      	add	r0, sp, #28
    9d0e:	f7ff f93d 	bl	8f8c <cmd_complete>
	rp->status = 0x00;
    9d12:	4603      	mov	r3, r0
    9d14:	2200      	movs	r2, #0
    9d16:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    9d1e:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9d20:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9d24:	3101      	adds	r1, #1
    9d26:	d04b      	beq.n	9dc0 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    9d28:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9d2c:	3101      	adds	r1, #1
    9d2e:	d047      	beq.n	9dc0 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9d30:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    9d34:	3101      	adds	r1, #1
    9d36:	d043      	beq.n	9dc0 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    9d38:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9d3c:	3101      	adds	r1, #1
    9d3e:	d03f      	beq.n	9dc0 <hci_cmd_handle+0xab4>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    9d40:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    9d44:	4619      	mov	r1, r3
    9d46:	f7ff f8dd 	bl	8f04 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    9d4a:	1d61      	adds	r1, r4, #5
    9d4c:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    9d50:	f7ff f8d8 	bl	8f04 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    9d54:	f104 0109 	add.w	r1, r4, #9
    9d58:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    9d5c:	f7ff f8d2 	bl	8f04 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    9d60:	f104 010d 	add.w	r1, r4, #13
    9d64:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    9d68:	f7ff f8cc 	bl	8f04 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9d70:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9d74:	3301      	adds	r3, #1
    9d76:	f104 0311 	add.w	r3, r4, #17
    9d7a:	d027      	beq.n	9dcc <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9d7c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9d80:	3101      	adds	r1, #1
    9d82:	d023      	beq.n	9dcc <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9d84:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9d88:	3101      	adds	r1, #1
    9d8a:	d01f      	beq.n	9dcc <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    9d8c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9d90:	3101      	adds	r1, #1
    9d92:	d01b      	beq.n	9dcc <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    9d94:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    9d98:	4619      	mov	r1, r3
    9d9a:	f7ff f8b3 	bl	8f04 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    9d9e:	f104 0115 	add.w	r1, r4, #21
    9da2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    9da6:	f7ff f8ad 	bl	8f04 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    9daa:	f104 0119 	add.w	r1, r4, #25
    9dae:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    9db2:	f7ff f8a7 	bl	8f04 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    9db6:	f104 011d 	add.w	r1, r4, #29
    9dba:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    9dbe:	e563      	b.n	9888 <hci_cmd_handle+0x57c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    9dc0:	2210      	movs	r2, #16
    9dc2:	2100      	movs	r1, #0
    9dc4:	4618      	mov	r0, r3
    9dc6:	f7f7 ff45 	bl	1c54 <memset>
    9dca:	e7cf      	b.n	9d6c <hci_cmd_handle+0xa60>
		memset(rp->er, 0x00, sizeof(rp->er));
    9dcc:	2210      	movs	r2, #16
    9dce:	2100      	movs	r1, #0
    9dd0:	4618      	mov	r0, r3
    9dd2:	e742      	b.n	9c5a <hci_cmd_handle+0x94e>
    9dd4:	000181d3 	.word	0x000181d3

00009dd8 <hci_acl_handle>:
{
    9dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    9ddc:	2300      	movs	r3, #0
    9dde:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9de0:	8983      	ldrh	r3, [r0, #12]
    9de2:	2b03      	cmp	r3, #3
{
    9de4:	4606      	mov	r6, r0
    9de6:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    9de8:	d80d      	bhi.n	9e06 <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    9dea:	4b3a      	ldr	r3, [pc, #232]	; (9ed4 <hci_acl_handle+0xfc>)
    9dec:	9301      	str	r3, [sp, #4]
    9dee:	9300      	str	r3, [sp, #0]
    9df0:	4a39      	ldr	r2, [pc, #228]	; (9ed8 <hci_acl_handle+0x100>)
    9df2:	4b3a      	ldr	r3, [pc, #232]	; (9edc <hci_acl_handle+0x104>)
    9df4:	493a      	ldr	r1, [pc, #232]	; (9ee0 <hci_acl_handle+0x108>)
    9df6:	483b      	ldr	r0, [pc, #236]	; (9ee4 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    9df8:	f7f7 f8c8 	bl	f8c <printk>
		return -EINVAL;
    9dfc:	f06f 0015 	mvn.w	r0, #21
}
    9e00:	b003      	add	sp, #12
    9e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    9e06:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    9e0a:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    9e0c:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9e0e:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    9e10:	f009 fdea 	bl	139e8 <net_buf_simple_pull>
	if (buf->len < len) {
    9e14:	89b3      	ldrh	r3, [r6, #12]
    9e16:	42bb      	cmp	r3, r7
    9e18:	d207      	bcs.n	9e2a <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    9e1a:	4b2e      	ldr	r3, [pc, #184]	; (9ed4 <hci_acl_handle+0xfc>)
    9e1c:	9301      	str	r3, [sp, #4]
    9e1e:	9300      	str	r3, [sp, #0]
    9e20:	4a2d      	ldr	r2, [pc, #180]	; (9ed8 <hci_acl_handle+0x100>)
    9e22:	4b2e      	ldr	r3, [pc, #184]	; (9edc <hci_acl_handle+0x104>)
    9e24:	492e      	ldr	r1, [pc, #184]	; (9ee0 <hci_acl_handle+0x108>)
    9e26:	4830      	ldr	r0, [pc, #192]	; (9ee8 <hci_acl_handle+0x110>)
    9e28:	e7e6      	b.n	9df8 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    9e2a:	f007 fc57 	bl	116dc <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    9e2e:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    9e32:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    9e34:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    9e38:	bb30      	cbnz	r0, 9e88 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    9e3a:	4b26      	ldr	r3, [pc, #152]	; (9ed4 <hci_acl_handle+0xfc>)
    9e3c:	9301      	str	r3, [sp, #4]
    9e3e:	9300      	str	r3, [sp, #0]
    9e40:	4a25      	ldr	r2, [pc, #148]	; (9ed8 <hci_acl_handle+0x100>)
    9e42:	4b26      	ldr	r3, [pc, #152]	; (9edc <hci_acl_handle+0x104>)
    9e44:	4926      	ldr	r1, [pc, #152]	; (9ee0 <hci_acl_handle+0x108>)
    9e46:	4829      	ldr	r0, [pc, #164]	; (9eec <hci_acl_handle+0x114>)
    9e48:	f7f7 f8a0 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    9e4c:	4b28      	ldr	r3, [pc, #160]	; (9ef0 <hci_acl_handle+0x118>)
    9e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e52:	2300      	movs	r3, #0
    9e54:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    9e58:	4313      	orrs	r3, r2
    9e5a:	d012      	beq.n	9e82 <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9e60:	2001      	movs	r0, #1
    9e62:	f7fa fa15 	bl	4290 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9e66:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9e68:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9e6c:	211a      	movs	r1, #26
    9e6e:	f7ff f852 	bl	8f16 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    9e72:	f8d8 0000 	ldr.w	r0, [r8]
    9e76:	2101      	movs	r1, #1
    9e78:	3008      	adds	r0, #8
    9e7a:	f009 fd87 	bl	1398c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    9e7e:	2301      	movs	r3, #1
    9e80:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    9e82:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9e86:	e7bb      	b.n	9e00 <hci_acl_handle+0x28>
    9e88:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9e8a:	f1b9 0f00 	cmp.w	r9, #0
    9e8e:	d002      	beq.n	9e96 <hci_acl_handle+0xbe>
    9e90:	f1b9 0f02 	cmp.w	r9, #2
    9e94:	d11c      	bne.n	9ed0 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9e96:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9e98:	f362 0301 	bfi	r3, r2, #0, #2
    9e9c:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    9e9e:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    9ea0:	68b1      	ldr	r1, [r6, #8]
    9ea2:	463a      	mov	r2, r7
    9ea4:	1de0      	adds	r0, r4, #7
    9ea6:	f7f7 fea9 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    9eaa:	4621      	mov	r1, r4
    9eac:	4628      	mov	r0, r5
    9eae:	f007 fc21 	bl	116f4 <ll_tx_mem_enqueue>
    9eb2:	2800      	cmp	r0, #0
    9eb4:	d0a4      	beq.n	9e00 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    9eb6:	4b07      	ldr	r3, [pc, #28]	; (9ed4 <hci_acl_handle+0xfc>)
    9eb8:	9301      	str	r3, [sp, #4]
    9eba:	9300      	str	r3, [sp, #0]
    9ebc:	4a06      	ldr	r2, [pc, #24]	; (9ed8 <hci_acl_handle+0x100>)
    9ebe:	4b07      	ldr	r3, [pc, #28]	; (9edc <hci_acl_handle+0x104>)
    9ec0:	4907      	ldr	r1, [pc, #28]	; (9ee0 <hci_acl_handle+0x108>)
    9ec2:	480c      	ldr	r0, [pc, #48]	; (9ef4 <hci_acl_handle+0x11c>)
    9ec4:	f7f7 f862 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    9ec8:	4620      	mov	r0, r4
    9eca:	f007 fc0d 	bl	116e8 <ll_tx_mem_release>
    9ece:	e795      	b.n	9dfc <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9ed0:	2201      	movs	r2, #1
    9ed2:	e7e1      	b.n	9e98 <hci_acl_handle+0xc0>
    9ed4:	000155c5 	.word	0x000155c5
    9ed8:	0001699e 	.word	0x0001699e
    9edc:	0001804b 	.word	0x0001804b
    9ee0:	000169ed 	.word	0x000169ed
    9ee4:	000180e9 	.word	0x000180e9
    9ee8:	0001810b 	.word	0x0001810b
    9eec:	00018139 	.word	0x00018139
    9ef0:	20003d58 	.word	0x20003d58
    9ef4:	0001815c 	.word	0x0001815c

00009ef8 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9ef8:	7a03      	ldrb	r3, [r0, #8]
    9efa:	f003 0303 	and.w	r3, r3, #3
    9efe:	3b01      	subs	r3, #1
    9f00:	2b01      	cmp	r3, #1
{
    9f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9f04:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    9f06:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    9f08:	d81c      	bhi.n	9f44 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    9f0a:	f101 0608 	add.w	r6, r1, #8
    9f0e:	4630      	mov	r0, r6
    9f10:	2104      	movs	r1, #4
    9f12:	f009 fd3b 	bl	1398c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9f16:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    9f18:	7a61      	ldrb	r1, [r4, #9]
    9f1a:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9f1c:	f003 0303 	and.w	r3, r3, #3
    9f20:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    9f22:	bf0c      	ite	eq
    9f24:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    9f28:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    9f2c:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    9f2e:	4630      	mov	r0, r6
    9f30:	f009 fd2c 	bl	1398c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9f34:	7a62      	ldrb	r2, [r4, #9]
    9f36:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    9f3a:	b002      	add	sp, #8
    9f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9f40:	f7f7 be5c 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    9f44:	4b07      	ldr	r3, [pc, #28]	; (9f64 <hci_acl_encode+0x6c>)
    9f46:	9301      	str	r3, [sp, #4]
    9f48:	9300      	str	r3, [sp, #0]
    9f4a:	4a07      	ldr	r2, [pc, #28]	; (9f68 <hci_acl_encode+0x70>)
    9f4c:	4b07      	ldr	r3, [pc, #28]	; (9f6c <hci_acl_encode+0x74>)
    9f4e:	4908      	ldr	r1, [pc, #32]	; (9f70 <hci_acl_encode+0x78>)
    9f50:	4808      	ldr	r0, [pc, #32]	; (9f74 <hci_acl_encode+0x7c>)
    9f52:	f7f7 f81b 	bl	f8c <printk>
    9f56:	4040      	eors	r0, r0
    9f58:	f380 8811 	msr	BASEPRI, r0
    9f5c:	f04f 0004 	mov.w	r0, #4
    9f60:	df02      	svc	2
    9f62:	bf00      	nop
    9f64:	000155c5 	.word	0x000155c5
    9f68:	0001699e 	.word	0x0001699e
    9f6c:	000180da 	.word	0x000180da
    9f70:	000169ed 	.word	0x000169ed
    9f74:	00016912 	.word	0x00016912

00009f78 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9f7c:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    9f7e:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9f80:	2b01      	cmp	r3, #1
{
    9f82:	b093      	sub	sp, #76	; 0x4c
    9f84:	4604      	mov	r4, r0
    9f86:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9f88:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9f8c:	f000 82a6 	beq.w	a4dc <hci_evt_encode+0x564>
	switch (node_rx->hdr.type) {
    9f90:	3b02      	subs	r3, #2
    9f92:	2b0a      	cmp	r3, #10
    9f94:	f200 829a 	bhi.w	a4cc <hci_evt_encode+0x554>
    9f98:	e8df f013 	tbh	[pc, r3, lsl #1]
    9f9c:	0134000b 	.word	0x0134000b
    9fa0:	013c013a 	.word	0x013c013a
    9fa4:	01ba0183 	.word	0x01ba0183
    9fa8:	01fd01d8 	.word	0x01fd01d8
    9fac:	022a0215 	.word	0x022a0215
    9fb0:	0245      	.short	0x0245
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9fb2:	2301      	movs	r3, #1
    9fb4:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9fb8:	2303      	movs	r3, #3
    9fba:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    9fbe:	23ff      	movs	r3, #255	; 0xff
    9fc0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9fc4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9fc8:	2302      	movs	r3, #2
    9fca:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9fce:	7a43      	ldrb	r3, [r0, #9]
    9fd0:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9fd2:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9fd4:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9fd8:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9fda:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    9fde:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    9fe0:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9fe2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    9fe6:	d505      	bpl.n	9ff4 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9fe8:	f104 030a 	add.w	r3, r4, #10
    9fec:	464a      	mov	r2, r9
    9fee:	4608      	mov	r0, r1
    9ff0:	f008 fd02 	bl	129f8 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    9ff4:	4bb8      	ldr	r3, [pc, #736]	; (a2d8 <hci_evt_encode+0x360>)
    9ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ffa:	2200      	movs	r2, #0
    9ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a000:	4313      	orrs	r3, r2
    a002:	f000 80b9 	beq.w	a178 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a006:	7a63      	ldrb	r3, [r4, #9]
    a008:	4423      	add	r3, r4
    a00a:	f893 a00c 	ldrb.w	sl, [r3, #12]
    a00e:	4bb3      	ldr	r3, [pc, #716]	; (a2dc <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    a010:	e9d3 2300 	ldrd	r2, r3, [r3]
    a014:	f1ba 0f00 	cmp.w	sl, #0
    a018:	d13d      	bne.n	a096 <hci_evt_encode+0x11e>
    a01a:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    a01e:	2300      	movs	r3, #0
    a020:	4313      	orrs	r3, r2
    a022:	f000 80a9 	beq.w	a178 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    a026:	4bae      	ldr	r3, [pc, #696]	; (a2e0 <hci_evt_encode+0x368>)
    a028:	681a      	ldr	r2, [r3, #0]
    a02a:	2a00      	cmp	r2, #0
    a02c:	4698      	mov	r8, r3
    a02e:	db54      	blt.n	a0da <hci_evt_encode+0x162>
    a030:	f8df b2d8 	ldr.w	fp, [pc, #728]	; a30c <hci_evt_encode+0x394>
    a034:	2600      	movs	r6, #0
    a036:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    a03a:	f8d8 2000 	ldr.w	r2, [r8]
    a03e:	4296      	cmp	r6, r2
    a040:	db2c      	blt.n	a09c <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    a042:	4ea8      	ldr	r6, [pc, #672]	; (a2e4 <hci_evt_encode+0x36c>)
    a044:	f8df b2a0 	ldr.w	fp, [pc, #672]	; a2e8 <hci_evt_encode+0x370>
    a048:	6830      	ldr	r0, [r6, #0]
    a04a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    a04e:	4619      	mov	r1, r3
    a050:	2206      	movs	r2, #6
    a052:	3002      	adds	r0, #2
    a054:	f7f7 fdd2 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    a058:	6832      	ldr	r2, [r6, #0]
    a05a:	7a23      	ldrb	r3, [r4, #8]
    a05c:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    a060:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a064:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    a066:	7a23      	ldrb	r3, [r4, #8]
    a068:	f003 010f 	and.w	r1, r3, #15
    a06c:	2301      	movs	r3, #1
    a06e:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a070:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    a074:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a078:	290f      	cmp	r1, #15
			dup_count++;
    a07a:	bfd5      	itete	le
    a07c:	3101      	addle	r1, #1
			dup_curr++;
    a07e:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    a080:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    a082:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a084:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    a086:	bfd8      	it	le
    a088:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a08c:	2a10      	cmp	r2, #16
    a08e:	d124      	bne.n	a0da <hci_evt_encode+0x162>
			dup_curr = 0;
    a090:	2200      	movs	r2, #0
    a092:	6032      	str	r2, [r6, #0]
    a094:	e021      	b.n	a0da <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    a096:	f002 020b 	and.w	r2, r2, #11
    a09a:	e7c0      	b.n	a01e <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    a09c:	4618      	mov	r0, r3
    a09e:	2206      	movs	r2, #6
    a0a0:	4659      	mov	r1, fp
    a0a2:	9307      	str	r3, [sp, #28]
    a0a4:	f7f7 fd95 	bl	1bd2 <memcmp>
    a0a8:	9b07      	ldr	r3, [sp, #28]
    a0aa:	bb00      	cbnz	r0, a0ee <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    a0ac:	7a21      	ldrb	r1, [r4, #8]
    a0ae:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    a0b2:	460a      	mov	r2, r1
    a0b4:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    a0b8:	4281      	cmp	r1, r0
    a0ba:	d118      	bne.n	a0ee <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    a0bc:	488a      	ldr	r0, [pc, #552]	; (a2e8 <hci_evt_encode+0x370>)
    a0be:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    a0c2:	f002 020f 	and.w	r2, r2, #15
    a0c6:	fa23 f102 	lsr.w	r1, r3, r2
    a0ca:	07c9      	lsls	r1, r1, #31
    a0cc:	d454      	bmi.n	a178 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    a0ce:	2101      	movs	r1, #1
    a0d0:	fa01 f202 	lsl.w	r2, r1, r2
    a0d4:	4313      	orrs	r3, r2
    a0d6:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    a0da:	f894 b008 	ldrb.w	fp, [r4, #8]
    a0de:	7a63      	ldrb	r3, [r4, #9]
    a0e0:	f00b 0b0f 	and.w	fp, fp, #15
    a0e4:	f1bb 0f01 	cmp.w	fp, #1
    a0e8:	d105      	bne.n	a0f6 <hci_evt_encode+0x17e>
		data_len = 0;
    a0ea:	2600      	movs	r6, #0
    a0ec:	e005      	b.n	a0fa <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    a0ee:	3601      	adds	r6, #1
    a0f0:	f10b 0b08 	add.w	fp, fp, #8
    a0f4:	e7a1      	b.n	a03a <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    a0f6:	1f9e      	subs	r6, r3, #6
    a0f8:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a0fa:	4423      	add	r3, r4
    a0fc:	f893 800a 	ldrb.w	r8, [r3, #10]
    a100:	f1c8 0800 	rsb	r8, r8, #0
    a104:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    a108:	f1ba 0f00 	cmp.w	sl, #0
    a10c:	d041      	beq.n	a192 <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    a10e:	f1bb 0f01 	cmp.w	fp, #1
    a112:	d00e      	beq.n	a132 <hci_evt_encode+0x1ba>
    a114:	4b75      	ldr	r3, [pc, #468]	; (a2ec <hci_evt_encode+0x374>)
    a116:	9301      	str	r3, [sp, #4]
    a118:	9300      	str	r3, [sp, #0]
    a11a:	4a75      	ldr	r2, [pc, #468]	; (a2f0 <hci_evt_encode+0x378>)
    a11c:	4b75      	ldr	r3, [pc, #468]	; (a2f4 <hci_evt_encode+0x37c>)
    a11e:	4976      	ldr	r1, [pc, #472]	; (a2f8 <hci_evt_encode+0x380>)
    a120:	4876      	ldr	r0, [pc, #472]	; (a2fc <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    a122:	f7f6 ff33 	bl	f8c <printk>
    a126:	4040      	eors	r0, r0
    a128:	f380 8811 	msr	BASEPRI, r0
    a12c:	f04f 0004 	mov.w	r0, #4
    a130:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    a132:	2211      	movs	r2, #17
    a134:	210b      	movs	r1, #11
    a136:	4628      	mov	r0, r5
    a138:	f7fe ff12 	bl	8f60 <meta_evt>
		drp->num_reports = 1;
    a13c:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    a140:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    a144:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    a146:	f008 fb2d 	bl	127a4 <ll_rl_size_get>
    a14a:	4581      	cmp	r9, r0
    a14c:	f105 0003 	add.w	r0, r5, #3
    a150:	d215      	bcs.n	a17e <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    a152:	4602      	mov	r2, r0
    a154:	1ca9      	adds	r1, r5, #2
    a156:	4648      	mov	r0, r9
    a158:	f008 f9c2 	bl	124e0 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    a15c:	78ab      	ldrb	r3, [r5, #2]
    a15e:	3302      	adds	r3, #2
    a160:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    a162:	2301      	movs	r3, #1
    a164:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    a166:	2206      	movs	r2, #6
    a168:	f107 0108 	add.w	r1, r7, #8
    a16c:	f105 000a 	add.w	r0, r5, #10
    a170:	f7f7 fd44 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    a174:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    a178:	b013      	add	sp, #76	; 0x4c
    a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    a17e:	7a23      	ldrb	r3, [r4, #8]
    a180:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a184:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    a186:	2206      	movs	r2, #6
    a188:	f104 010a 	add.w	r1, r4, #10
    a18c:	f7f7 fd36 	bl	1bfc <memcpy>
    a190:	e7e7      	b.n	a162 <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    a192:	f106 020b 	add.w	r2, r6, #11
    a196:	b2d2      	uxtb	r2, r2
    a198:	2102      	movs	r1, #2
    a19a:	4628      	mov	r0, r5
    a19c:	f7fe fee0 	bl	8f60 <meta_evt>
	sep->num_reports = 1;
    a1a0:	2301      	movs	r3, #1
    a1a2:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    a1a4:	7a23      	ldrb	r3, [r4, #8]
    a1a6:	aa12      	add	r2, sp, #72	; 0x48
    a1a8:	f003 030f 	and.w	r3, r3, #15
    a1ac:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    a1ae:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    a1b0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    a1b4:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a1b6:	7a63      	ldrb	r3, [r4, #9]
    a1b8:	4423      	add	r3, r4
    a1ba:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    a1be:	f008 faf1 	bl	127a4 <ll_rl_size_get>
    a1c2:	4581      	cmp	r9, r0
    a1c4:	f105 0003 	add.w	r0, r5, #3
    a1c8:	d212      	bcs.n	a1f0 <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    a1ca:	4602      	mov	r2, r0
    a1cc:	1ca9      	adds	r1, r5, #2
    a1ce:	4648      	mov	r0, r9
    a1d0:	f008 f986 	bl	124e0 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    a1d4:	78ab      	ldrb	r3, [r5, #2]
    a1d6:	3302      	adds	r3, #2
    a1d8:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    a1da:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    a1dc:	350a      	adds	r5, #10
    a1de:	4632      	mov	r2, r6
    a1e0:	f107 0108 	add.w	r1, r7, #8
    a1e4:	4628      	mov	r0, r5
    a1e6:	f7f7 fd09 	bl	1bfc <memcpy>
	*prssi = rssi;
    a1ea:	f805 8006 	strb.w	r8, [r5, r6]
    a1ee:	e7c3      	b.n	a178 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    a1f0:	7a23      	ldrb	r3, [r4, #8]
    a1f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a1f6:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    a1f8:	2206      	movs	r2, #6
    a1fa:	f104 010a 	add.w	r1, r4, #10
    a1fe:	f7f7 fcfd 	bl	1bfc <memcpy>
    a202:	e7ea      	b.n	a1da <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    a204:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    a206:	4621      	mov	r1, r4
    a208:	4638      	mov	r0, r7
    a20a:	f7ff f801 	bl	9210 <le_adv_ext_report.isra.66>
    a20e:	e7b3      	b.n	a178 <hci_evt_encode+0x200>
    a210:	2204      	movs	r2, #4
    a212:	e7f8      	b.n	a206 <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a214:	4b30      	ldr	r3, [pc, #192]	; (a2d8 <hci_evt_encode+0x360>)
    a216:	e9d3 2300 	ldrd	r2, r3, [r3]
    a21a:	2200      	movs	r2, #0
    a21c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a220:	4313      	orrs	r3, r2
    a222:	f100 060a 	add.w	r6, r0, #10
    a226:	d007      	beq.n	a238 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    a228:	4b2c      	ldr	r3, [pc, #176]	; (a2dc <hci_evt_encode+0x364>)
    a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a22e:	2300      	movs	r3, #0
    a230:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a234:	4313      	orrs	r3, r2
    a236:	d123      	bne.n	a280 <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    a238:	7a23      	ldrb	r3, [r4, #8]
    a23a:	ad12      	add	r5, sp, #72	; 0x48
    a23c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    a240:	2206      	movs	r2, #6
    a242:	4631      	mov	r1, r6
    a244:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    a248:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    a24c:	f7f7 fcd6 	bl	1bfc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    a250:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a252:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    a254:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a256:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    a258:	4631      	mov	r1, r6
    a25a:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a25c:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    a25e:	f7fe ff9b 	bl	9198 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a262:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    a264:	4b21      	ldr	r3, [pc, #132]	; (a2ec <hci_evt_encode+0x374>)
    a266:	9304      	str	r3, [sp, #16]
    a268:	2200      	movs	r2, #0
    a26a:	9201      	str	r2, [sp, #4]
    a26c:	9300      	str	r3, [sp, #0]
    a26e:	9403      	str	r4, [sp, #12]
    a270:	9602      	str	r6, [sp, #8]
    a272:	4b23      	ldr	r3, [pc, #140]	; (a300 <hci_evt_encode+0x388>)
    a274:	4a23      	ldr	r2, [pc, #140]	; (a304 <hci_evt_encode+0x38c>)
    a276:	4920      	ldr	r1, [pc, #128]	; (a2f8 <hci_evt_encode+0x380>)
    a278:	4823      	ldr	r0, [pc, #140]	; (a308 <hci_evt_encode+0x390>)
    a27a:	f7f6 fe87 	bl	f8c <printk>
    a27e:	e77b      	b.n	a178 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    a280:	2208      	movs	r2, #8
    a282:	2113      	movs	r1, #19
    a284:	4628      	mov	r0, r5
    a286:	f7fe fe6b 	bl	8f60 <meta_evt>
	sep->handle = 0;
    a28a:	2300      	movs	r3, #0
    a28c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    a28e:	7a23      	ldrb	r3, [r4, #8]
    a290:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a294:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    a296:	2206      	movs	r2, #6
    a298:	4631      	mov	r1, r6
    a29a:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    a29c:	f7f7 fcae 	bl	1bfc <memcpy>
    a2a0:	e76a      	b.n	a178 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    a2a2:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    a2a4:	b93f      	cbnz	r7, a2b6 <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    a2a6:	f100 0314 	add.w	r3, r0, #20
    a2aa:	f100 010e 	add.w	r1, r0, #14
    a2ae:	22ff      	movs	r2, #255	; 0xff
    a2b0:	7b40      	ldrb	r0, [r0, #13]
    a2b2:	f008 fba1 	bl	129f8 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a2b6:	4b08      	ldr	r3, [pc, #32]	; (a2d8 <hci_evt_encode+0x360>)
    a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2bc:	2200      	movs	r2, #0
    a2be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a2c2:	4313      	orrs	r3, r2
    a2c4:	f43f af58 	beq.w	a178 <hci_evt_encode+0x200>
    a2c8:	462b      	mov	r3, r5
    a2ca:	4632      	mov	r2, r6
    a2cc:	f104 010b 	add.w	r1, r4, #11
    a2d0:	4638      	mov	r0, r7
    a2d2:	f7fe fecb 	bl	906c <le_conn_complete.part.39>
    a2d6:	e74f      	b.n	a178 <hci_evt_encode+0x200>
    a2d8:	20003d58 	.word	0x20003d58
    a2dc:	20003d60 	.word	0x20003d60
    a2e0:	2000085c 	.word	0x2000085c
    a2e4:	20000860 	.word	0x20000860
    a2e8:	20000864 	.word	0x20000864
    a2ec:	000155c5 	.word	0x000155c5
    a2f0:	0001699e 	.word	0x0001699e
    a2f4:	0001805a 	.word	0x0001805a
    a2f8:	000169ed 	.word	0x000169ed
    a2fc:	000181fb 	.word	0x000181fb
    a300:	00018082 	.word	0x00018082
    a304:	00016a28 	.word	0x00016a28
    a308:	00018241 	.word	0x00018241
    a30c:	20000866 	.word	0x20000866
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    a310:	4bb2      	ldr	r3, [pc, #712]	; (a5dc <hci_evt_encode+0x664>)
    a312:	e9d3 2300 	ldrd	r2, r3, [r3]
    a316:	2300      	movs	r3, #0
    a318:	f002 0210 	and.w	r2, r2, #16
    a31c:	4313      	orrs	r3, r2
    a31e:	f43f af2b 	beq.w	a178 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    a322:	2204      	movs	r2, #4
    a324:	2105      	movs	r1, #5
    a326:	4628      	mov	r0, r5
    a328:	f7fe fdf5 	bl	8f16 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a32c:	2104      	movs	r1, #4
    a32e:	f105 0008 	add.w	r0, r5, #8
    a332:	f009 fb2b 	bl	1398c <net_buf_simple_add>
	ep->status = 0x00;
    a336:	2300      	movs	r3, #0
	conn_count--;
    a338:	4aa9      	ldr	r2, [pc, #676]	; (a5e0 <hci_evt_encode+0x668>)
	ep->status = 0x00;
    a33a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a33c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    a340:	7a23      	ldrb	r3, [r4, #8]
    a342:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    a344:	6813      	ldr	r3, [r2, #0]
    a346:	3b01      	subs	r3, #1
    a348:	6013      	str	r3, [r2, #0]
    a34a:	e715      	b.n	a178 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a34c:	4ba3      	ldr	r3, [pc, #652]	; (a5dc <hci_evt_encode+0x664>)
    a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a352:	2200      	movs	r2, #0
    a354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a358:	4313      	orrs	r3, r2
    a35a:	f43f af0d 	beq.w	a178 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    a35e:	4ba1      	ldr	r3, [pc, #644]	; (a5e4 <hci_evt_encode+0x66c>)
    a360:	e9d3 2300 	ldrd	r2, r3, [r3]
    a364:	2300      	movs	r3, #0
    a366:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a36a:	4313      	orrs	r3, r2
    a36c:	f43f af04 	beq.w	a178 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    a370:	2209      	movs	r2, #9
    a372:	2103      	movs	r1, #3
    a374:	4628      	mov	r0, r5
    a376:	f7fe fdf3 	bl	8f60 <meta_evt>
	sep->status = radio_cu->status;
    a37a:	7ae3      	ldrb	r3, [r4, #11]
    a37c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    a37e:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    a380:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    a384:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    a388:	89e3      	ldrh	r3, [r4, #14]
    a38a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    a38e:	8a23      	ldrh	r3, [r4, #16]
    a390:	f8a0 3007 	strh.w	r3, [r0, #7]
    a394:	e6f0      	b.n	a178 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    a396:	4b91      	ldr	r3, [pc, #580]	; (a5dc <hci_evt_encode+0x664>)
    a398:	e9d3 2300 	ldrd	r2, r3, [r3]
    a39c:	2200      	movs	r2, #0
    a39e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a3a2:	4313      	orrs	r3, r2
    a3a4:	f43f aee8 	beq.w	a178 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    a3a8:	2203      	movs	r2, #3
    a3aa:	2130      	movs	r1, #48	; 0x30
    a3ac:	4628      	mov	r0, r5
    a3ae:	f7fe fdb2 	bl	8f16 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a3b2:	2103      	movs	r1, #3
    a3b4:	f105 0008 	add.w	r0, r5, #8
    a3b8:	f009 fae8 	bl	1398c <net_buf_simple_add>
	ep->status = 0x00;
    a3bc:	2300      	movs	r3, #0
    a3be:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a3c0:	f8a0 6001 	strh.w	r6, [r0, #1]
    a3c4:	e6d8      	b.n	a178 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    a3c6:	4b88      	ldr	r3, [pc, #544]	; (a5e8 <hci_evt_encode+0x670>)
    a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a3cc:	2300      	movs	r3, #0
    a3ce:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    a3d2:	4313      	orrs	r3, r2
    a3d4:	f43f aed0 	beq.w	a178 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    a3d8:	2202      	movs	r2, #2
    a3da:	2157      	movs	r1, #87	; 0x57
    a3dc:	4628      	mov	r0, r5
    a3de:	f7fe fd9a 	bl	8f16 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a3e2:	2102      	movs	r1, #2
    a3e4:	f105 0008 	add.w	r0, r5, #8
    a3e8:	f009 fad0 	bl	1398c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    a3ec:	8006      	strh	r6, [r0, #0]
    a3ee:	e6c3      	b.n	a178 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a3f0:	4b7a      	ldr	r3, [pc, #488]	; (a5dc <hci_evt_encode+0x664>)
    a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a3f6:	2200      	movs	r2, #0
    a3f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a3fc:	4313      	orrs	r3, r2
    a3fe:	f43f aebb 	beq.w	a178 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    a402:	4b78      	ldr	r3, [pc, #480]	; (a5e4 <hci_evt_encode+0x66c>)
    a404:	e9d3 2300 	ldrd	r2, r3, [r3]
    a408:	2300      	movs	r3, #0
    a40a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a40e:	4313      	orrs	r3, r2
    a410:	f43f aeb2 	beq.w	a178 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    a414:	2203      	movs	r2, #3
    a416:	2114      	movs	r1, #20
    a418:	4628      	mov	r0, r5
    a41a:	f7fe fda1 	bl	8f60 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a41e:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    a420:	7ae3      	ldrb	r3, [r4, #11]
    a422:	7083      	strb	r3, [r0, #2]
    a424:	e6a8      	b.n	a178 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a426:	4b6d      	ldr	r3, [pc, #436]	; (a5dc <hci_evt_encode+0x664>)
    a428:	e9d3 2300 	ldrd	r2, r3, [r3]
    a42c:	2200      	movs	r2, #0
    a42e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a432:	4313      	orrs	r3, r2
    a434:	d007      	beq.n	a446 <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    a436:	4b6b      	ldr	r3, [pc, #428]	; (a5e4 <hci_evt_encode+0x66c>)
    a438:	e9d3 2300 	ldrd	r2, r3, [r3]
    a43c:	2300      	movs	r3, #0
    a43e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a442:	4313      	orrs	r3, r2
    a444:	d122      	bne.n	a48c <hci_evt_encode+0x514>
    a446:	7b22      	ldrb	r2, [r4, #12]
    a448:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    a44a:	4868      	ldr	r0, [pc, #416]	; (a5ec <hci_evt_encode+0x674>)
    a44c:	2a00      	cmp	r2, #0
    a44e:	fa92 f3a2 	rbit	r3, r2
    a452:	fab3 f383 	clz	r3, r3
    a456:	fa91 f2a1 	rbit	r2, r1
    a45a:	bf08      	it	eq
    a45c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a460:	2900      	cmp	r1, #0
    a462:	fab2 f282 	clz	r2, r2
    a466:	bf08      	it	eq
    a468:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    a46c:	4960      	ldr	r1, [pc, #384]	; (a5f0 <hci_evt_encode+0x678>)
    a46e:	9105      	str	r1, [sp, #20]
    a470:	3301      	adds	r3, #1
    a472:	3201      	adds	r2, #1
    a474:	9204      	str	r2, [sp, #16]
    a476:	9303      	str	r3, [sp, #12]
    a478:	7ae3      	ldrb	r3, [r4, #11]
    a47a:	9302      	str	r3, [sp, #8]
    a47c:	e88d 0042 	stmia.w	sp, {r1, r6}
    a480:	4b5c      	ldr	r3, [pc, #368]	; (a5f4 <hci_evt_encode+0x67c>)
    a482:	4a5d      	ldr	r2, [pc, #372]	; (a5f8 <hci_evt_encode+0x680>)
    a484:	495d      	ldr	r1, [pc, #372]	; (a5fc <hci_evt_encode+0x684>)
    a486:	f7f6 fd81 	bl	f8c <printk>
    a48a:	e675      	b.n	a178 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    a48c:	2205      	movs	r2, #5
    a48e:	210c      	movs	r1, #12
    a490:	4628      	mov	r0, r5
    a492:	f7fe fd65 	bl	8f60 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    a496:	7ae3      	ldrb	r3, [r4, #11]
    a498:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a49a:	f8a0 6001 	strh.w	r6, [r0, #1]
    a49e:	7b22      	ldrb	r2, [r4, #12]
    a4a0:	2a00      	cmp	r2, #0
    a4a2:	fa92 f3a2 	rbit	r3, r2
    a4a6:	fab3 f383 	clz	r3, r3
    a4aa:	bf08      	it	eq
    a4ac:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a4b0:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    a4b2:	70c3      	strb	r3, [r0, #3]
    a4b4:	7b62      	ldrb	r2, [r4, #13]
    a4b6:	fa92 f3a2 	rbit	r3, r2
    a4ba:	2a00      	cmp	r2, #0
    a4bc:	fab3 f383 	clz	r3, r3
    a4c0:	bf08      	it	eq
    a4c2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a4c6:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    a4c8:	7103      	strb	r3, [r0, #4]
    a4ca:	e655      	b.n	a178 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    a4cc:	4b48      	ldr	r3, [pc, #288]	; (a5f0 <hci_evt_encode+0x678>)
    a4ce:	9301      	str	r3, [sp, #4]
    a4d0:	9300      	str	r3, [sp, #0]
    a4d2:	4b4b      	ldr	r3, [pc, #300]	; (a600 <hci_evt_encode+0x688>)
    a4d4:	4a4b      	ldr	r2, [pc, #300]	; (a604 <hci_evt_encode+0x68c>)
    a4d6:	4949      	ldr	r1, [pc, #292]	; (a5fc <hci_evt_encode+0x684>)
    a4d8:	484b      	ldr	r0, [pc, #300]	; (a608 <hci_evt_encode+0x690>)
    a4da:	e622      	b.n	a122 <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    a4dc:	7ac3      	ldrb	r3, [r0, #11]
    a4de:	3b03      	subs	r3, #3
    a4e0:	2b12      	cmp	r3, #18
    a4e2:	f200 80d5 	bhi.w	a690 <hci_evt_encode+0x718>
    a4e6:	e8df f003 	tbb	[pc, r3]
    a4ea:	d30a      	.short	0xd30a
    a4ec:	d3c02fd3 	.word	0xd3c02fd3
    a4f0:	3cd3d335 	.word	0x3cd3d335
    a4f4:	d35fd35b 	.word	0xd35fd35b
    a4f8:	a0d3d3d3 	.word	0xa0d3d3d3
    a4fc:	a0          	.byte	0xa0
    a4fd:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a4fe:	4b37      	ldr	r3, [pc, #220]	; (a5dc <hci_evt_encode+0x664>)
    a500:	e9d3 2300 	ldrd	r2, r3, [r3]
    a504:	2200      	movs	r2, #0
    a506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a50a:	4313      	orrs	r3, r2
    a50c:	f43f ae34 	beq.w	a178 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    a510:	4b34      	ldr	r3, [pc, #208]	; (a5e4 <hci_evt_encode+0x66c>)
    a512:	e9d3 2300 	ldrd	r2, r3, [r3]
    a516:	2300      	movs	r3, #0
    a518:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a51c:	4313      	orrs	r3, r2
    a51e:	f43f ae2b 	beq.w	a178 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a522:	220c      	movs	r2, #12
    a524:	2105      	movs	r1, #5
    a526:	4628      	mov	r0, r5
    a528:	f7fe fd1a 	bl	8f60 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a52c:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a52e:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a530:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    a534:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a538:	f7f7 fb60 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    a53c:	2202      	movs	r2, #2
    a53e:	f104 0114 	add.w	r1, r4, #20
    a542:	f105 000a 	add.w	r0, r5, #10
    a546:	e6a9      	b.n	a29c <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    a548:	460a      	mov	r2, r1
    a54a:	2000      	movs	r0, #0
    a54c:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a54e:	f7fe fd3f 	bl	8fd0 <encrypt_change>
    a552:	e611      	b.n	a178 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    a554:	460b      	mov	r3, r1
    a556:	4632      	mov	r2, r6
    a558:	4639      	mov	r1, r7
    a55a:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a55c:	f7fe fd58 	bl	9010 <le_remote_feat_complete>
    a560:	e60a      	b.n	a178 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    a562:	4b1e      	ldr	r3, [pc, #120]	; (a5dc <hci_evt_encode+0x664>)
    a564:	e9d3 2300 	ldrd	r2, r3, [r3]
    a568:	2300      	movs	r3, #0
    a56a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    a56e:	4313      	orrs	r3, r2
    a570:	f43f ae02 	beq.w	a178 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    a574:	2208      	movs	r2, #8
    a576:	210c      	movs	r1, #12
    a578:	4628      	mov	r0, r5
    a57a:	f7fe fccc 	bl	8f16 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a57e:	2108      	movs	r1, #8
    a580:	1868      	adds	r0, r5, r1
    a582:	f009 fa03 	bl	1398c <net_buf_simple_add>
	ep->status = 0x00;
    a586:	2300      	movs	r3, #0
    a588:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a58a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    a58e:	7b23      	ldrb	r3, [r4, #12]
    a590:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    a592:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    a596:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    a598:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    a59c:	80c3      	strh	r3, [r0, #6]
    a59e:	e5eb      	b.n	a178 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a5a0:	460a      	mov	r2, r1
    a5a2:	7b00      	ldrb	r0, [r0, #12]
    a5a4:	4631      	mov	r1, r6
    a5a6:	e7d2      	b.n	a54e <hci_evt_encode+0x5d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a5a8:	4b0c      	ldr	r3, [pc, #48]	; (a5dc <hci_evt_encode+0x664>)
    a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5ae:	2200      	movs	r2, #0
    a5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a5b4:	4313      	orrs	r3, r2
    a5b6:	d007      	beq.n	a5c8 <hci_evt_encode+0x650>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    a5b8:	4b0a      	ldr	r3, [pc, #40]	; (a5e4 <hci_evt_encode+0x66c>)
    a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5be:	2300      	movs	r3, #0
    a5c0:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a5c4:	4313      	orrs	r3, r2
    a5c6:	d121      	bne.n	a60c <hci_evt_encode+0x694>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a5c8:	2300      	movs	r3, #0
    a5ca:	9301      	str	r3, [sp, #4]
    a5cc:	9300      	str	r3, [sp, #0]
    a5ce:	221a      	movs	r2, #26
    a5d0:	2102      	movs	r1, #2
    a5d2:	4630      	mov	r0, r6
    a5d4:	f006 fdda 	bl	1118c <ll_conn_update>
    a5d8:	e5ce      	b.n	a178 <hci_evt_encode+0x200>
    a5da:	bf00      	nop
    a5dc:	20003d58 	.word	0x20003d58
    a5e0:	20000858 	.word	0x20000858
    a5e4:	20003d60 	.word	0x20003d60
    a5e8:	200008e8 	.word	0x200008e8
    a5ec:	00018274 	.word	0x00018274
    a5f0:	000155c5 	.word	0x000155c5
    a5f4:	00018097 	.word	0x00018097
    a5f8:	00016a28 	.word	0x00016a28
    a5fc:	000169ed 	.word	0x000169ed
    a600:	000180ab 	.word	0x000180ab
    a604:	0001699e 	.word	0x0001699e
    a608:	00016912 	.word	0x00016912
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    a60c:	220a      	movs	r2, #10
    a60e:	2106      	movs	r1, #6
    a610:	4628      	mov	r0, r5
    a612:	f7fe fca5 	bl	8f60 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a616:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    a618:	89a3      	ldrh	r3, [r4, #12]
    a61a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    a61c:	89e3      	ldrh	r3, [r4, #14]
    a61e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    a620:	8a23      	ldrh	r3, [r4, #16]
    a622:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    a624:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a626:	8103      	strh	r3, [r0, #8]
    a628:	e5a6      	b.n	a178 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a62a:	4b1c      	ldr	r3, [pc, #112]	; (a69c <hci_evt_encode+0x724>)
    a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a630:	2200      	movs	r2, #0
    a632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a636:	4313      	orrs	r3, r2
    a638:	f43f ad9e 	beq.w	a178 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    a63c:	4b18      	ldr	r3, [pc, #96]	; (a6a0 <hci_evt_encode+0x728>)
    a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a642:	2300      	movs	r3, #0
    a644:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a648:	4313      	orrs	r3, r2
    a64a:	f43f ad95 	beq.w	a178 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    a64e:	220a      	movs	r2, #10
    a650:	2107      	movs	r1, #7
    a652:	4628      	mov	r0, r5
    a654:	f7fe fc84 	bl	8f60 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a658:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    a65a:	8a23      	ldrh	r3, [r4, #16]
    a65c:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    a65e:	8a63      	ldrh	r3, [r4, #18]
    a660:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    a662:	89a3      	ldrh	r3, [r4, #12]
    a664:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a666:	89e3      	ldrh	r3, [r4, #14]
    a668:	e7dd      	b.n	a626 <hci_evt_encode+0x6ae>
    a66a:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a66c:	2a0e      	cmp	r2, #14
    a66e:	d104      	bne.n	a67a <hci_evt_encode+0x702>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a670:	460b      	mov	r3, r1
    a672:	4632      	mov	r2, r6
    a674:	2100      	movs	r1, #0
    a676:	201a      	movs	r0, #26
    a678:	e770      	b.n	a55c <hci_evt_encode+0x5e4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    a67a:	4b0a      	ldr	r3, [pc, #40]	; (a6a4 <hci_evt_encode+0x72c>)
    a67c:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a67e:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    a680:	9300      	str	r3, [sp, #0]
    a682:	4a09      	ldr	r2, [pc, #36]	; (a6a8 <hci_evt_encode+0x730>)
    a684:	4b09      	ldr	r3, [pc, #36]	; (a6ac <hci_evt_encode+0x734>)
    a686:	490a      	ldr	r1, [pc, #40]	; (a6b0 <hci_evt_encode+0x738>)
    a688:	480a      	ldr	r0, [pc, #40]	; (a6b4 <hci_evt_encode+0x73c>)
    a68a:	f7f6 fc7f 	bl	f8c <printk>
    a68e:	e573      	b.n	a178 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    a690:	4b04      	ldr	r3, [pc, #16]	; (a6a4 <hci_evt_encode+0x72c>)
    a692:	9301      	str	r3, [sp, #4]
    a694:	9300      	str	r3, [sp, #0]
    a696:	4b08      	ldr	r3, [pc, #32]	; (a6b8 <hci_evt_encode+0x740>)
    a698:	e71c      	b.n	a4d4 <hci_evt_encode+0x55c>
    a69a:	bf00      	nop
    a69c:	20003d58 	.word	0x20003d58
    a6a0:	20003d60 	.word	0x20003d60
    a6a4:	000155c5 	.word	0x000155c5
    a6a8:	00016a28 	.word	0x00016a28
    a6ac:	000180ba 	.word	0x000180ba
    a6b0:	000169ed 	.word	0x000169ed
    a6b4:	000182b0 	.word	0x000182b0
    a6b8:	000180c9 	.word	0x000180c9

0000a6bc <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    a6bc:	b570      	push	{r4, r5, r6, lr}
    a6be:	4606      	mov	r6, r0
    a6c0:	460d      	mov	r5, r1
    a6c2:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    a6c4:	2113      	movs	r1, #19
    a6c6:	2205      	movs	r2, #5
    a6c8:	f7fe fc25 	bl	8f16 <evt_create>

	ep = net_buf_add(buf, len);
    a6cc:	2105      	movs	r1, #5
    a6ce:	f106 0008 	add.w	r0, r6, #8
    a6d2:	f009 f95b 	bl	1398c <net_buf_simple_add>
	ep->num_handles = num_handles;
    a6d6:	2301      	movs	r3, #1
    a6d8:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    a6da:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    a6de:	f8a0 4003 	strh.w	r4, [r0, #3]
    a6e2:	bd70      	pop	{r4, r5, r6, pc}

0000a6e4 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a6e4:	7903      	ldrb	r3, [r0, #4]
    a6e6:	2b01      	cmp	r3, #1
    a6e8:	d006      	beq.n	a6f8 <hci_get_class+0x14>
    a6ea:	3b02      	subs	r3, #2
    a6ec:	b2db      	uxtb	r3, r3
    a6ee:	2b0a      	cmp	r3, #10
    a6f0:	d80a      	bhi.n	a708 <hci_get_class+0x24>
    a6f2:	4a07      	ldr	r2, [pc, #28]	; (a710 <hci_get_class+0x2c>)
    a6f4:	56d0      	ldrsb	r0, [r2, r3]
    a6f6:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    a6f8:	7a03      	ldrb	r3, [r0, #8]
    a6fa:	f003 0303 	and.w	r3, r3, #3
    a6fe:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    a700:	bf0c      	ite	eq
    a702:	2002      	moveq	r0, #2
    a704:	2003      	movne	r0, #3
    a706:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    a70c:	4770      	bx	lr
    a70e:	bf00      	nop
    a710:	00018031 	.word	0x00018031

0000a714 <hci_init>:
	dup_count = -1;
    a714:	4b0a      	ldr	r3, [pc, #40]	; (a740 <hci_init+0x2c>)
    a716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a71a:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    a71c:	4b09      	ldr	r3, [pc, #36]	; (a744 <hci_init+0x30>)
    a71e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a722:	f641 71ff 	movw	r1, #8191	; 0x1fff
    a726:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a72a:	4b07      	ldr	r3, [pc, #28]	; (a748 <hci_init+0x34>)
    a72c:	2000      	movs	r0, #0
    a72e:	2100      	movs	r1, #0
    a730:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a734:	4b05      	ldr	r3, [pc, #20]	; (a74c <hci_init+0x38>)
    a736:	201f      	movs	r0, #31
    a738:	2100      	movs	r1, #0
    a73a:	e9c3 0100 	strd	r0, r1, [r3]
    a73e:	4770      	bx	lr
    a740:	2000085c 	.word	0x2000085c
    a744:	20003d58 	.word	0x20003d58
    a748:	200008e8 	.word	0x200008e8
    a74c:	20003d60 	.word	0x20003d60

0000a750 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    a750:	bf20      	wfe
	__SEV();
    a752:	bf40      	sev
	__WFE();
    a754:	bf20      	wfe
    a756:	4770      	bx	lr

0000a758 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    a758:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    a75a:	4b0d      	ldr	r3, [pc, #52]	; (a790 <pdu_len_cmp+0x38>)
{
    a75c:	b089      	sub	sp, #36	; 0x24
    a75e:	4605      	mov	r5, r0
    a760:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    a762:	aa01      	add	r2, sp, #4
    a764:	f103 0718 	add.w	r7, r3, #24
    a768:	6818      	ldr	r0, [r3, #0]
    a76a:	6859      	ldr	r1, [r3, #4]
    a76c:	4614      	mov	r4, r2
    a76e:	c403      	stmia	r4!, {r0, r1}
    a770:	3308      	adds	r3, #8
    a772:	42bb      	cmp	r3, r7
    a774:	4622      	mov	r2, r4
    a776:	d1f7      	bne.n	a768 <pdu_len_cmp+0x10>
    a778:	881b      	ldrh	r3, [r3, #0]
    a77a:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    a77c:	ab08      	add	r3, sp, #32
    a77e:	441d      	add	r5, r3
    a780:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    a784:	1b83      	subs	r3, r0, r6
    a786:	4258      	negs	r0, r3
    a788:	4158      	adcs	r0, r3
    a78a:	b009      	add	sp, #36	; 0x24
    a78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a78e:	bf00      	nop
    a790:	00015517 	.word	0x00015517

0000a794 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    a794:	6008      	str	r0, [r1, #0]
    a796:	4770      	bx	lr

0000a798 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    a798:	b918      	cbnz	r0, a7a2 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    a79a:	680b      	ldr	r3, [r1, #0]
    a79c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a7a0:	600b      	str	r3, [r1, #0]
    a7a2:	4770      	bx	lr

0000a7a4 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    a7a4:	b918      	cbnz	r0, a7ae <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    a7a6:	680b      	ldr	r3, [r1, #0]
    a7a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a7ac:	600b      	str	r3, [r1, #0]
    a7ae:	4770      	bx	lr

0000a7b0 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    a7b0:	b570      	push	{r4, r5, r6, lr}
    a7b2:	1d03      	adds	r3, r0, #4
    a7b4:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    a7b6:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    a7b8:	429d      	cmp	r5, r3
    a7ba:	d101      	bne.n	a7c0 <chan_sel_remap+0x10>
    a7bc:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    a7be:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    a7c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    a7c4:	2200      	movs	r2, #0
    a7c6:	18a0      	adds	r0, r4, r2
    a7c8:	2a08      	cmp	r2, #8
    a7ca:	b2c0      	uxtb	r0, r0
    a7cc:	d101      	bne.n	a7d2 <chan_sel_remap+0x22>
    a7ce:	4604      	mov	r4, r0
    a7d0:	e7f2      	b.n	a7b8 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    a7d2:	f016 0f01 	tst.w	r6, #1
    a7d6:	d003      	beq.n	a7e0 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    a7d8:	2900      	cmp	r1, #0
    a7da:	d0f0      	beq.n	a7be <chan_sel_remap+0xe>
				chan_index--;
    a7dc:	3901      	subs	r1, #1
    a7de:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    a7e0:	0876      	lsrs	r6, r6, #1
    a7e2:	3201      	adds	r2, #1
    a7e4:	e7ef      	b.n	a7c6 <chan_sel_remap+0x16>
	...

0000a7e8 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    a7e8:	4b09      	ldr	r3, [pc, #36]	; (a810 <packet_rx_acquired_count_get+0x28>)
    a7ea:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    a7ee:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    a7f2:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    a7f4:	bf3b      	ittet	cc
    a7f6:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    a7fa:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    a7fe:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    a802:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    a804:	bf2c      	ite	cs
    a806:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    a808:	1a80      	subcc	r0, r0, r2
    a80a:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    a80c:	4770      	bx	lr
    a80e:	bf00      	nop
    a810:	200008f0 	.word	0x200008f0

0000a814 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    a814:	b508      	push	{r3, lr}
    a816:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    a818:	f7ff ffe6 	bl	a7e8 <packet_rx_acquired_count_get>
    a81c:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    a81e:	bf21      	itttt	cs
    a820:	4b04      	ldrcs	r3, [pc, #16]	; (a834 <packet_rx_reserve_get+0x20>)
    a822:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    a826:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    a82a:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    a82e:	bf38      	it	cc
    a830:	2000      	movcc	r0, #0
}
    a832:	bd08      	pop	{r3, pc}
    a834:	200008f0 	.word	0x200008f0

0000a838 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    a838:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    a83a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    a83e:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    a842:	429c      	cmp	r4, r3
    a844:	d15a      	bne.n	a8fc <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    a846:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a84a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    a84e:	428b      	cmp	r3, r1
    a850:	d154      	bne.n	a8fc <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    a852:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a856:	2b00      	cmp	r3, #0
    a858:	db25      	blt.n	a8a6 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    a85a:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    a85c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    a85e:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    a862:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    a864:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    a868:	4351      	muls	r1, r2
					      conn->supervision_reload *
    a86a:	227d      	movs	r2, #125	; 0x7d
    a86c:	434a      	muls	r2, r1
					      125 / 1000;
    a86e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a872:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    a876:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    a87a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    a87e:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    a880:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    a884:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    a886:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    a888:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    a88c:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    a88e:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    a892:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    a896:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    a89a:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    a89e:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    a8a2:	4618      	mov	r0, r3
    a8a4:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    a8a6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    a8aa:	06dc      	lsls	r4, r3, #27
    a8ac:	d428      	bmi.n	a900 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    a8ae:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    a8b2:	069a      	lsls	r2, r3, #26
    a8b4:	d503      	bpl.n	a8be <conn_update_req+0x86>
		    (conn->llcp_features &
    a8b6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    a8ba:	079b      	lsls	r3, r3, #30
    a8bc:	d520      	bpl.n	a900 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    a8be:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    a8c0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    a8c2:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    a8c6:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    a8c8:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    a8cc:	4354      	muls	r4, r2
						conn->supervision_reload *
    a8ce:	227d      	movs	r2, #125	; 0x7d
    a8d0:	4362      	muls	r2, r4
						125 / 1000;
    a8d2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    a8d6:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    a8da:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    a8de:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    a8e2:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    a8e4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    a8e8:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    a8ec:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    a8ee:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    a8f2:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    a8f6:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    a8fa:	e7d2      	b.n	a8a2 <conn_update_req+0x6a>
		return 1;
    a8fc:	2001      	movs	r0, #1
    a8fe:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    a900:	2002      	movs	r0, #2
}
    a902:	bd30      	pop	{r4, r5, pc}

0000a904 <packet_rx_allocate>:
{
    a904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    a908:	4d22      	ldr	r5, [pc, #136]	; (a994 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    a90a:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    a90e:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    a912:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    a916:	3401      	adds	r4, #1
    a918:	4581      	cmp	r9, r0
    a91a:	b2e4      	uxtb	r4, r4
    a91c:	bf28      	it	cs
    a91e:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    a920:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    a924:	42a3      	cmp	r3, r4
    a926:	bf08      	it	eq
    a928:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    a92a:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    a92e:	f1b9 0f00 	cmp.w	r9, #0
    a932:	d003      	beq.n	a93c <packet_rx_allocate+0x38>
    a934:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    a938:	429c      	cmp	r4, r3
    a93a:	d101      	bne.n	a940 <packet_rx_allocate+0x3c>
    a93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    a940:	4638      	mov	r0, r7
    a942:	f7fd f952 	bl	7bea <mem_acquire>
		if (!link) {
    a946:	4606      	mov	r6, r0
    a948:	2800      	cmp	r0, #0
    a94a:	d0f7      	beq.n	a93c <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    a94c:	4640      	mov	r0, r8
    a94e:	f7fd f94c 	bl	7bea <mem_acquire>
		if (!node_rx) {
    a952:	b928      	cbnz	r0, a960 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    a954:	4630      	mov	r0, r6
    a956:	4910      	ldr	r1, [pc, #64]	; (a998 <packet_rx_allocate+0x94>)
}
    a958:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    a95c:	f7fd b95f 	b.w	7c1e <mem_release>
		node_rx->hdr.onion.link = link;
    a960:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    a962:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    a966:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    a96a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    a96e:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    a972:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    a976:	3401      	adds	r4, #1
    a978:	b2e4      	uxtb	r4, r4
			acquire = 0;
    a97a:	42a3      	cmp	r3, r4
    a97c:	bf08      	it	eq
    a97e:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    a980:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    a984:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a988:	3b01      	subs	r3, #1
    a98a:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    a98e:	fa5f f989 	uxtb.w	r9, r9
    a992:	e7cc      	b.n	a92e <packet_rx_allocate+0x2a>
    a994:	200008f0 	.word	0x200008f0
    a998:	20000a38 	.word	0x20000a38

0000a99c <common_init>:
{
    a99c:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    a99e:	4c39      	ldr	r4, [pc, #228]	; (aa84 <common_init+0xe8>)
    a9a0:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    a9a4:	2a00      	cmp	r2, #0
    a9a6:	d040      	beq.n	aa2a <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    a9a8:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    a9ac:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a9b0:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    a9b4:	f7fd f8f2 	bl	7b9c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    a9b8:	4b33      	ldr	r3, [pc, #204]	; (aa88 <common_init+0xec>)
    a9ba:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    a9be:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    a9c2:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    a9c6:	f7fd f8e9 	bl	7b9c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    a9ca:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    a9ce:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    a9d2:	4b2e      	ldr	r3, [pc, #184]	; (aa8c <common_init+0xf0>)
    a9d4:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    a9d8:	440a      	add	r2, r1
    a9da:	2108      	movs	r1, #8
    a9dc:	f7fd f8de 	bl	7b9c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    a9e0:	4b2b      	ldr	r3, [pc, #172]	; (aa90 <common_init+0xf4>)
    a9e2:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    a9e6:	2202      	movs	r2, #2
    a9e8:	2124      	movs	r1, #36	; 0x24
    a9ea:	f7fd f8d7 	bl	7b9c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    a9ee:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    a9f2:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    a9f6:	4b27      	ldr	r3, [pc, #156]	; (aa94 <common_init+0xf8>)
    a9f8:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    a9fc:	3a01      	subs	r2, #1
    a9fe:	b292      	uxth	r2, r2
    aa00:	f7fd f8cc 	bl	7b9c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    aa04:	4821      	ldr	r0, [pc, #132]	; (aa8c <common_init+0xf0>)
    aa06:	f7fd f8f0 	bl	7bea <mem_acquire>
	LL_ASSERT(link);
    aa0a:	b988      	cbnz	r0, aa30 <common_init+0x94>
    aa0c:	4b22      	ldr	r3, [pc, #136]	; (aa98 <common_init+0xfc>)
    aa0e:	9301      	str	r3, [sp, #4]
    aa10:	9300      	str	r3, [sp, #0]
    aa12:	4a22      	ldr	r2, [pc, #136]	; (aa9c <common_init+0x100>)
    aa14:	4b22      	ldr	r3, [pc, #136]	; (aaa0 <common_init+0x104>)
    aa16:	4923      	ldr	r1, [pc, #140]	; (aaa4 <common_init+0x108>)
    aa18:	4823      	ldr	r0, [pc, #140]	; (aaa8 <common_init+0x10c>)
    aa1a:	f7f6 fab7 	bl	f8c <printk>
    aa1e:	4040      	eors	r0, r0
    aa20:	f380 8811 	msr	BASEPRI, r0
    aa24:	f04f 0004 	mov.w	r0, #4
    aa28:	df02      	svc	2
		_radio.conn_free = NULL;
    aa2a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    aa2e:	e7c3      	b.n	a9b8 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    aa30:	4a1e      	ldr	r2, [pc, #120]	; (aaac <common_init+0x110>)
    aa32:	1f11      	subs	r1, r2, #4
    aa34:	f7fd f930 	bl	7c98 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    aa38:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    aa3c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    aa40:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    aa44:	231f      	movs	r3, #31
    aa46:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    aa4a:	2325      	movs	r3, #37	; 0x25
    aa4c:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    aa50:	231b      	movs	r3, #27
    aa52:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    aa56:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    aa5a:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    aa5c:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    aa60:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    aa62:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    aa66:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    aa6a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    aa6e:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    aa72:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    aa76:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    aa7a:	b002      	add	sp, #8
    aa7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    aa80:	f7ff bf40 	b.w	a904 <packet_rx_allocate>
    aa84:	200008f0 	.word	0x200008f0
    aa88:	20000a20 	.word	0x20000a20
    aa8c:	20000a38 	.word	0x20000a38
    aa90:	20000a4c 	.word	0x20000a4c
    aa94:	20000a54 	.word	0x20000a54
    aa98:	000155c5 	.word	0x000155c5
    aa9c:	0001699e 	.word	0x0001699e
    aaa0:	00018382 	.word	0x00018382
    aaa4:	000169ed 	.word	0x000169ed
    aaa8:	000187ff 	.word	0x000187ff
    aaac:	20000a40 	.word	0x20000a40

0000aab0 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    aab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    aab4:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    aab6:	4294      	cmp	r4, r2
{
    aab8:	4681      	mov	r9, r0
    aaba:	460f      	mov	r7, r1
    aabc:	4690      	mov	r8, r2
	if (_first == last) {
    aabe:	d03d      	beq.n	ab3c <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    aac0:	4e1f      	ldr	r6, [pc, #124]	; (ab40 <tx_cmplt_get+0x90>)
    aac2:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    aac6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    aaca:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    aacc:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    aace:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    aad2:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    aad6:	b222      	sxth	r2, r4
    aad8:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    aadc:	f8b9 e000 	ldrh.w	lr, [r9]
    aae0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    aae4:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    aae8:	4596      	cmp	lr, r2
    aaea:	d120      	bne.n	ab2e <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    aaec:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    aaee:	2801      	cmp	r0, #1
    aaf0:	f020 0303 	bic.w	r3, r0, #3
    aaf4:	d90a      	bls.n	ab0c <tx_cmplt_get+0x5c>
    aaf6:	b1f3      	cbz	r3, ab36 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    aaf8:	1d02      	adds	r2, r0, #4
    aafa:	d01c      	beq.n	ab36 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    aafc:	7942      	ldrb	r2, [r0, #5]
    aafe:	b1d2      	cbz	r2, ab36 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    ab00:	7902      	ldrb	r2, [r0, #4]
    ab02:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    ab06:	3a01      	subs	r2, #1
    ab08:	2a01      	cmp	r2, #1
    ab0a:	d814      	bhi.n	ab36 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    ab0c:	2201      	movs	r2, #1
			cmplt++;
    ab0e:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    ab10:	604a      	str	r2, [r1, #4]
			cmplt++;
    ab12:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    ab14:	b113      	cbz	r3, ab1c <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    ab16:	4651      	mov	r1, sl
    ab18:	f7fd f881 	bl	7c1e <mem_release>
		}

		_first = _first + 1;
    ab1c:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    ab1e:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    ab22:	b2e4      	uxtb	r4, r4
			_first = 0;
    ab24:	42a2      	cmp	r2, r4
    ab26:	bf08      	it	eq
    ab28:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    ab2a:	4544      	cmp	r4, r8
    ab2c:	d1d3      	bne.n	aad6 <tx_cmplt_get+0x26>

	*first = _first;
    ab2e:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    ab30:	4628      	mov	r0, r5
    ab32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    ab36:	f8c1 b004 	str.w	fp, [r1, #4]
    ab3a:	e7eb      	b.n	ab14 <tx_cmplt_get+0x64>
		return 0;
    ab3c:	2500      	movs	r5, #0
    ab3e:	e7f7      	b.n	ab30 <tx_cmplt_get+0x80>
    ab40:	200008f0 	.word	0x200008f0

0000ab44 <connection_get>:
{
    ab44:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    ab46:	4b09      	ldr	r3, [pc, #36]	; (ab6c <connection_get+0x28>)
    ab48:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    ab4c:	4282      	cmp	r2, r0
{
    ab4e:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    ab50:	d90a      	bls.n	ab68 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    ab52:	4602      	mov	r2, r0
    ab54:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ab58:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    ab5c:	f7fd f87a 	bl	7c54 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    ab60:	b110      	cbz	r0, ab68 <connection_get+0x24>
    ab62:	8c03      	ldrh	r3, [r0, #32]
    ab64:	42a3      	cmp	r3, r4
    ab66:	d000      	beq.n	ab6a <connection_get+0x26>
	return 0;
    ab68:	2000      	movs	r0, #0
}
    ab6a:	bd10      	pop	{r4, pc}
    ab6c:	200008f0 	.word	0x200008f0

0000ab70 <role_disable>:
{
    ab70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab74:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ab76:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    ab78:	2805      	cmp	r0, #5
{
    ab7a:	4605      	mov	r5, r0
    ab7c:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ab7e:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    ab80:	d00c      	beq.n	ab9c <role_disable+0x2c>
    ab82:	2806      	cmp	r0, #6
    ab84:	d040      	beq.n	ac08 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ab86:	d945      	bls.n	ac14 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    ab88:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    ab8a:	b280      	uxth	r0, r0
    ab8c:	f7ff ffda 	bl	ab44 <connection_get>
			if (!conn) {
    ab90:	2800      	cmp	r0, #0
    ab92:	f000 8123 	beq.w	addc <role_disable+0x26c>
			ticks_active_to_start =
    ab96:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    ab9a:	e00f      	b.n	abbc <role_disable+0x4c>
		ticks_xtal_to_start =
    ab9c:	4b90      	ldr	r3, [pc, #576]	; (ade0 <role_disable+0x270>)
    ab9e:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    aba0:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    aba4:	ab02      	add	r3, sp, #8
    aba6:	9300      	str	r3, [sp, #0]
    aba8:	460a      	mov	r2, r1
    abaa:	4b8e      	ldr	r3, [pc, #568]	; (ade4 <role_disable+0x274>)
    abac:	2103      	movs	r1, #3
    abae:	2000      	movs	r0, #0
    abb0:	f7fd ff42 	bl	8a38 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    abb4:	2802      	cmp	r0, #2
    abb6:	d011      	beq.n	abdc <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    abb8:	9b02      	ldr	r3, [sp, #8]
    abba:	b99b      	cbnz	r3, abe4 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    abbc:	4c88      	ldr	r4, [pc, #544]	; (ade0 <role_disable+0x270>)
    abbe:	7ca3      	ldrb	r3, [r4, #18]
    abc0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    abc4:	2b00      	cmp	r3, #0
    abc6:	d02d      	beq.n	ac24 <role_disable+0xb4>
    abc8:	4b87      	ldr	r3, [pc, #540]	; (ade8 <role_disable+0x278>)
    abca:	9301      	str	r3, [sp, #4]
    abcc:	9300      	str	r3, [sp, #0]
    abce:	4a87      	ldr	r2, [pc, #540]	; (adec <role_disable+0x27c>)
    abd0:	4b87      	ldr	r3, [pc, #540]	; (adf0 <role_disable+0x280>)
    abd2:	4988      	ldr	r1, [pc, #544]	; (adf4 <role_disable+0x284>)
    abd4:	4888      	ldr	r0, [pc, #544]	; (adf8 <role_disable+0x288>)
    abd6:	e00f      	b.n	abf8 <role_disable+0x88>
				cpu_sleep();
    abd8:	f7ff fdba 	bl	a750 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    abdc:	9b02      	ldr	r3, [sp, #8]
    abde:	2b02      	cmp	r3, #2
    abe0:	d0fa      	beq.n	abd8 <role_disable+0x68>
    abe2:	e7e9      	b.n	abb8 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    abe4:	9b02      	ldr	r3, [sp, #8]
    abe6:	2b01      	cmp	r3, #1
    abe8:	d0e8      	beq.n	abbc <role_disable+0x4c>
    abea:	4b7f      	ldr	r3, [pc, #508]	; (ade8 <role_disable+0x278>)
    abec:	9301      	str	r3, [sp, #4]
    abee:	9300      	str	r3, [sp, #0]
    abf0:	4a7e      	ldr	r2, [pc, #504]	; (adec <role_disable+0x27c>)
    abf2:	4b7f      	ldr	r3, [pc, #508]	; (adf0 <role_disable+0x280>)
    abf4:	497f      	ldr	r1, [pc, #508]	; (adf4 <role_disable+0x284>)
    abf6:	4881      	ldr	r0, [pc, #516]	; (adfc <role_disable+0x28c>)
			LL_ASSERT(0);
    abf8:	f7f6 f9c8 	bl	f8c <printk>
    abfc:	4040      	eors	r0, r0
    abfe:	f380 8811 	msr	BASEPRI, r0
    ac02:	f04f 0004 	mov.w	r0, #4
    ac06:	df02      	svc	2
		ticks_xtal_to_start =
    ac08:	4b75      	ldr	r3, [pc, #468]	; (ade0 <role_disable+0x270>)
    ac0a:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    ac0e:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    ac12:	e7d3      	b.n	abbc <role_disable+0x4c>
			LL_ASSERT(0);
    ac14:	4b74      	ldr	r3, [pc, #464]	; (ade8 <role_disable+0x278>)
    ac16:	9301      	str	r3, [sp, #4]
    ac18:	9300      	str	r3, [sp, #0]
    ac1a:	4b75      	ldr	r3, [pc, #468]	; (adf0 <role_disable+0x280>)
    ac1c:	4a73      	ldr	r2, [pc, #460]	; (adec <role_disable+0x27c>)
    ac1e:	4975      	ldr	r1, [pc, #468]	; (adf4 <role_disable+0x284>)
    ac20:	4877      	ldr	r0, [pc, #476]	; (ae00 <role_disable+0x290>)
    ac22:	e7e9      	b.n	abf8 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    ac24:	ab06      	add	r3, sp, #24
    ac26:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    ac28:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    ac2a:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ac2e:	2103      	movs	r1, #3
    ac30:	9300      	str	r3, [sp, #0]
    ac32:	462a      	mov	r2, r5
    ac34:	4b6b      	ldr	r3, [pc, #428]	; (ade4 <role_disable+0x274>)
    ac36:	f7fd feff 	bl	8a38 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ac3a:	2802      	cmp	r0, #2
    ac3c:	d025      	beq.n	ac8a <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    ac3e:	9b02      	ldr	r3, [sp, #8]
    ac40:	2b00      	cmp	r3, #0
    ac42:	d169      	bne.n	ad18 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    ac44:	7c23      	ldrb	r3, [r4, #16]
    ac46:	429d      	cmp	r5, r3
    ac48:	d002      	beq.n	ac50 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    ac4a:	7c63      	ldrb	r3, [r4, #17]
    ac4c:	429d      	cmp	r5, r3
    ac4e:	d15f      	bne.n	ad10 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    ac50:	ab06      	add	r3, sp, #24
    ac52:	2202      	movs	r2, #2
    ac54:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ac58:	2200      	movs	r2, #0
    ac5a:	9300      	str	r3, [sp, #0]
    ac5c:	2103      	movs	r1, #3
    ac5e:	4b61      	ldr	r3, [pc, #388]	; (ade4 <role_disable+0x274>)
    ac60:	4610      	mov	r0, r2
    ac62:	f7fd fee9 	bl	8a38 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ac66:	2802      	cmp	r0, #2
    ac68:	d11d      	bne.n	aca6 <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ac6a:	2201      	movs	r2, #1
    ac6c:	4611      	mov	r1, r2
    ac6e:	2003      	movs	r0, #3
    ac70:	f7fd f85e 	bl	7d30 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    ac74:	9b03      	ldr	r3, [sp, #12]
    ac76:	2b02      	cmp	r3, #2
    ac78:	d115      	bne.n	aca6 <role_disable+0x136>
    ac7a:	4b5b      	ldr	r3, [pc, #364]	; (ade8 <role_disable+0x278>)
    ac7c:	9301      	str	r3, [sp, #4]
    ac7e:	9300      	str	r3, [sp, #0]
    ac80:	4a5a      	ldr	r2, [pc, #360]	; (adec <role_disable+0x27c>)
    ac82:	4b60      	ldr	r3, [pc, #384]	; (ae04 <role_disable+0x294>)
    ac84:	495b      	ldr	r1, [pc, #364]	; (adf4 <role_disable+0x284>)
    ac86:	4860      	ldr	r0, [pc, #384]	; (ae08 <role_disable+0x298>)
    ac88:	e7b6      	b.n	abf8 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    ac8a:	7c63      	ldrb	r3, [r4, #17]
    ac8c:	429d      	cmp	r5, r3
    ac8e:	d104      	bne.n	ac9a <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ac90:	2201      	movs	r2, #1
    ac92:	4611      	mov	r1, r2
    ac94:	2003      	movs	r0, #3
    ac96:	f7fd f84b 	bl	7d30 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    ac9a:	9b02      	ldr	r3, [sp, #8]
    ac9c:	2b02      	cmp	r3, #2
    ac9e:	d1ce      	bne.n	ac3e <role_disable+0xce>
			cpu_sleep();
    aca0:	f7ff fd56 	bl	a750 <cpu_sleep>
    aca4:	e7f9      	b.n	ac9a <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    aca6:	9803      	ldr	r0, [sp, #12]
    aca8:	2800      	cmp	r0, #0
    acaa:	d150      	bne.n	ad4e <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    acac:	2302      	movs	r3, #2
    acae:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    acb0:	7c23      	ldrb	r3, [r4, #16]
    acb2:	b93b      	cbnz	r3, acc4 <role_disable+0x154>
    acb4:	4b4c      	ldr	r3, [pc, #304]	; (ade8 <role_disable+0x278>)
    acb6:	9301      	str	r3, [sp, #4]
    acb8:	9300      	str	r3, [sp, #0]
    acba:	4a4c      	ldr	r2, [pc, #304]	; (adec <role_disable+0x27c>)
    acbc:	4b51      	ldr	r3, [pc, #324]	; (ae04 <role_disable+0x294>)
    acbe:	494d      	ldr	r1, [pc, #308]	; (adf4 <role_disable+0x284>)
    acc0:	4852      	ldr	r0, [pc, #328]	; (ae0c <role_disable+0x29c>)
    acc2:	e799      	b.n	abf8 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    acc4:	ab04      	add	r3, sp, #16
    acc6:	9300      	str	r3, [sp, #0]
    acc8:	2201      	movs	r2, #1
    acca:	4b46      	ldr	r3, [pc, #280]	; (ade4 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    accc:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    acce:	2103      	movs	r1, #3
    acd0:	f7fd feb2 	bl	8a38 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    acd4:	2802      	cmp	r0, #2
    acd6:	d10f      	bne.n	acf8 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    acd8:	2201      	movs	r2, #1
    acda:	4611      	mov	r1, r2
    acdc:	2003      	movs	r0, #3
    acde:	f7fd f827 	bl	7d30 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    ace2:	9b04      	ldr	r3, [sp, #16]
    ace4:	2b02      	cmp	r3, #2
    ace6:	d107      	bne.n	acf8 <role_disable+0x188>
    ace8:	4b3f      	ldr	r3, [pc, #252]	; (ade8 <role_disable+0x278>)
    acea:	9301      	str	r3, [sp, #4]
    acec:	9300      	str	r3, [sp, #0]
    acee:	4a3f      	ldr	r2, [pc, #252]	; (adec <role_disable+0x27c>)
    acf0:	4b44      	ldr	r3, [pc, #272]	; (ae04 <role_disable+0x294>)
    acf2:	4940      	ldr	r1, [pc, #256]	; (adf4 <role_disable+0x284>)
    acf4:	4846      	ldr	r0, [pc, #280]	; (ae10 <role_disable+0x2a0>)
    acf6:	e77f      	b.n	abf8 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    acf8:	9a04      	ldr	r2, [sp, #16]
    acfa:	b99a      	cbnz	r2, ad24 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    acfc:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    ad00:	45b0      	cmp	r8, r6
    ad02:	d922      	bls.n	ad4a <role_disable+0x1da>
				ret = mayfly_enqueue(
    ad04:	4b43      	ldr	r3, [pc, #268]	; (ae14 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    ad06:	4611      	mov	r1, r2
    ad08:	2003      	movs	r0, #3
    ad0a:	f7fd f839 	bl	7d80 <mayfly_enqueue>
			LL_ASSERT(!ret);
    ad0e:	b9a0      	cbnz	r0, ad3a <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    ad10:	7ca3      	ldrb	r3, [r4, #18]
    ad12:	b90b      	cbnz	r3, ad18 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    ad14:	2301      	movs	r3, #1
    ad16:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    ad18:	2300      	movs	r3, #0
    ad1a:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    ad1c:	9802      	ldr	r0, [sp, #8]
}
    ad1e:	b006      	add	sp, #24
    ad20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    ad24:	9b04      	ldr	r3, [sp, #16]
    ad26:	2b01      	cmp	r3, #1
    ad28:	d153      	bne.n	add2 <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    ad2a:	2200      	movs	r2, #0
    ad2c:	4611      	mov	r1, r2
    ad2e:	4b39      	ldr	r3, [pc, #228]	; (ae14 <role_disable+0x2a4>)
    ad30:	2003      	movs	r0, #3
    ad32:	f7fd f825 	bl	7d80 <mayfly_enqueue>
			LL_ASSERT(!ret);
    ad36:	4602      	mov	r2, r0
    ad38:	b138      	cbz	r0, ad4a <role_disable+0x1da>
			LL_ASSERT(!ret);
    ad3a:	4b2b      	ldr	r3, [pc, #172]	; (ade8 <role_disable+0x278>)
    ad3c:	9301      	str	r3, [sp, #4]
    ad3e:	9300      	str	r3, [sp, #0]
    ad40:	4a2a      	ldr	r2, [pc, #168]	; (adec <role_disable+0x27c>)
    ad42:	4b30      	ldr	r3, [pc, #192]	; (ae04 <role_disable+0x294>)
    ad44:	492b      	ldr	r1, [pc, #172]	; (adf4 <role_disable+0x284>)
    ad46:	4834      	ldr	r0, [pc, #208]	; (ae18 <role_disable+0x2a8>)
    ad48:	e756      	b.n	abf8 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    ad4a:	4b34      	ldr	r3, [pc, #208]	; (ae1c <role_disable+0x2ac>)
    ad4c:	e7db      	b.n	ad06 <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    ad4e:	9d03      	ldr	r5, [sp, #12]
    ad50:	2d01      	cmp	r5, #1
    ad52:	d13e      	bne.n	add2 <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    ad54:	2fff      	cmp	r7, #255	; 0xff
    ad56:	d029      	beq.n	adac <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    ad58:	ab06      	add	r3, sp, #24
    ad5a:	2202      	movs	r2, #2
    ad5c:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad60:	2103      	movs	r1, #3
    ad62:	9300      	str	r3, [sp, #0]
    ad64:	463a      	mov	r2, r7
    ad66:	4b1f      	ldr	r3, [pc, #124]	; (ade4 <role_disable+0x274>)
    ad68:	2000      	movs	r0, #0
    ad6a:	f7fd fe65 	bl	8a38 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    ad6e:	2802      	cmp	r0, #2
    ad70:	d10f      	bne.n	ad92 <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ad72:	462a      	mov	r2, r5
    ad74:	4629      	mov	r1, r5
    ad76:	2003      	movs	r0, #3
    ad78:	f7fc ffda 	bl	7d30 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    ad7c:	9b05      	ldr	r3, [sp, #20]
    ad7e:	2b02      	cmp	r3, #2
    ad80:	d107      	bne.n	ad92 <role_disable+0x222>
    ad82:	4b19      	ldr	r3, [pc, #100]	; (ade8 <role_disable+0x278>)
    ad84:	9301      	str	r3, [sp, #4]
    ad86:	9300      	str	r3, [sp, #0]
    ad88:	4a18      	ldr	r2, [pc, #96]	; (adec <role_disable+0x27c>)
    ad8a:	4b1e      	ldr	r3, [pc, #120]	; (ae04 <role_disable+0x294>)
    ad8c:	4919      	ldr	r1, [pc, #100]	; (adf4 <role_disable+0x284>)
    ad8e:	4824      	ldr	r0, [pc, #144]	; (ae20 <role_disable+0x2b0>)
    ad90:	e732      	b.n	abf8 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    ad92:	9b05      	ldr	r3, [sp, #20]
    ad94:	b153      	cbz	r3, adac <role_disable+0x23c>
    ad96:	9b05      	ldr	r3, [sp, #20]
    ad98:	2b01      	cmp	r3, #1
    ad9a:	d007      	beq.n	adac <role_disable+0x23c>
    ad9c:	4b12      	ldr	r3, [pc, #72]	; (ade8 <role_disable+0x278>)
    ad9e:	9301      	str	r3, [sp, #4]
    ada0:	9300      	str	r3, [sp, #0]
    ada2:	4a12      	ldr	r2, [pc, #72]	; (adec <role_disable+0x27c>)
    ada4:	4b17      	ldr	r3, [pc, #92]	; (ae04 <role_disable+0x294>)
    ada6:	4913      	ldr	r1, [pc, #76]	; (adf4 <role_disable+0x284>)
    ada8:	481e      	ldr	r0, [pc, #120]	; (ae24 <role_disable+0x2b4>)
    adaa:	e725      	b.n	abf8 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    adac:	7ce3      	ldrb	r3, [r4, #19]
    adae:	2b00      	cmp	r3, #0
    adb0:	d0ae      	beq.n	ad10 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    adb2:	4b1d      	ldr	r3, [pc, #116]	; (ae28 <role_disable+0x2b8>)
    adb4:	2204      	movs	r2, #4
    adb6:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    adb8:	2200      	movs	r2, #0
    adba:	4611      	mov	r1, r2
    adbc:	2003      	movs	r0, #3
    adbe:	f7fc ffdf 	bl	7d80 <mayfly_enqueue>
			LL_ASSERT(!ret);
    adc2:	2800      	cmp	r0, #0
    adc4:	d1b9      	bne.n	ad3a <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    adc6:	7ce3      	ldrb	r3, [r4, #19]
    adc8:	2b00      	cmp	r3, #0
    adca:	d0a1      	beq.n	ad10 <role_disable+0x1a0>
				cpu_sleep();
    adcc:	f7ff fcc0 	bl	a750 <cpu_sleep>
    add0:	e7f9      	b.n	adc6 <role_disable+0x256>
		LL_ASSERT(0);
    add2:	4b05      	ldr	r3, [pc, #20]	; (ade8 <role_disable+0x278>)
    add4:	9301      	str	r3, [sp, #4]
    add6:	9300      	str	r3, [sp, #0]
    add8:	4b0a      	ldr	r3, [pc, #40]	; (ae04 <role_disable+0x294>)
    adda:	e71f      	b.n	ac1c <role_disable+0xac>
				return 1;
    addc:	2001      	movs	r0, #1
    adde:	e79e      	b.n	ad1e <role_disable+0x1ae>
    ade0:	200008f0 	.word	0x200008f0
    ade4:	0000a795 	.word	0x0000a795
    ade8:	000155c5 	.word	0x000155c5
    adec:	0001699e 	.word	0x0001699e
    adf0:	000187a4 	.word	0x000187a4
    adf4:	000169ed 	.word	0x000169ed
    adf8:	00019116 	.word	0x00019116
    adfc:	000190d6 	.word	0x000190d6
    ae00:	00016912 	.word	0x00016912
    ae04:	00018790 	.word	0x00018790
    ae08:	0001914e 	.word	0x0001914e
    ae0c:	0001917f 	.word	0x0001917f
    ae10:	000191b9 	.word	0x000191b9
    ae14:	20003d88 	.word	0x20003d88
    ae18:	000191e9 	.word	0x000191e9
    ae1c:	20003e28 	.word	0x20003e28
    ae20:	0001920f 	.word	0x0001920f
    ae24:	00019241 	.word	0x00019241
    ae28:	20003da8 	.word	0x20003da8

0000ae2c <mayfly_xtal_retain>:
{
    ae2c:	b513      	push	{r0, r1, r4, lr}
    ae2e:	4b1d      	ldr	r3, [pc, #116]	; (aea4 <mayfly_xtal_retain+0x78>)
    ae30:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    ae32:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    ae34:	b301      	cbz	r1, ae78 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    ae36:	2a00      	cmp	r2, #0
    ae38:	d132      	bne.n	aea0 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    ae3a:	2801      	cmp	r0, #1
    ae3c:	d00e      	beq.n	ae5c <mayfly_xtal_retain+0x30>
    ae3e:	4b1a      	ldr	r3, [pc, #104]	; (aea8 <mayfly_xtal_retain+0x7c>)
    ae40:	9301      	str	r3, [sp, #4]
    ae42:	9300      	str	r3, [sp, #0]
    ae44:	4a19      	ldr	r2, [pc, #100]	; (aeac <mayfly_xtal_retain+0x80>)
    ae46:	4b1a      	ldr	r3, [pc, #104]	; (aeb0 <mayfly_xtal_retain+0x84>)
    ae48:	491a      	ldr	r1, [pc, #104]	; (aeb4 <mayfly_xtal_retain+0x88>)
    ae4a:	481b      	ldr	r0, [pc, #108]	; (aeb8 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    ae4c:	f7f6 f89e 	bl	f8c <printk>
    ae50:	4040      	eors	r0, r0
    ae52:	f380 8811 	msr	BASEPRI, r0
    ae56:	f04f 0004 	mov.w	r0, #4
    ae5a:	df02      	svc	2
			s_xtal_retained = 1;
    ae5c:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    ae5e:	4b17      	ldr	r3, [pc, #92]	; (aebc <mayfly_xtal_retain+0x90>)
    ae60:	4611      	mov	r1, r2
    ae62:	f7fc ff8d 	bl	7d80 <mayfly_enqueue>
			LL_ASSERT(!retval);
    ae66:	b1d8      	cbz	r0, aea0 <mayfly_xtal_retain+0x74>
    ae68:	4b0f      	ldr	r3, [pc, #60]	; (aea8 <mayfly_xtal_retain+0x7c>)
    ae6a:	9301      	str	r3, [sp, #4]
    ae6c:	9300      	str	r3, [sp, #0]
    ae6e:	4a0f      	ldr	r2, [pc, #60]	; (aeac <mayfly_xtal_retain+0x80>)
    ae70:	4b0f      	ldr	r3, [pc, #60]	; (aeb0 <mayfly_xtal_retain+0x84>)
    ae72:	4910      	ldr	r1, [pc, #64]	; (aeb4 <mayfly_xtal_retain+0x88>)
    ae74:	4812      	ldr	r0, [pc, #72]	; (aec0 <mayfly_xtal_retain+0x94>)
    ae76:	e7e9      	b.n	ae4c <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    ae78:	b192      	cbz	r2, aea0 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    ae7a:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    ae7c:	b170      	cbz	r0, ae9c <mayfly_xtal_retain+0x70>
    ae7e:	2801      	cmp	r0, #1
    ae80:	d104      	bne.n	ae8c <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    ae82:	4b10      	ldr	r3, [pc, #64]	; (aec4 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    ae84:	2200      	movs	r2, #0
    ae86:	4611      	mov	r1, r2
    ae88:	4620      	mov	r0, r4
    ae8a:	e7ea      	b.n	ae62 <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    ae8c:	4b06      	ldr	r3, [pc, #24]	; (aea8 <mayfly_xtal_retain+0x7c>)
    ae8e:	9301      	str	r3, [sp, #4]
    ae90:	9300      	str	r3, [sp, #0]
    ae92:	4a06      	ldr	r2, [pc, #24]	; (aeac <mayfly_xtal_retain+0x80>)
    ae94:	4b06      	ldr	r3, [pc, #24]	; (aeb0 <mayfly_xtal_retain+0x84>)
    ae96:	4907      	ldr	r1, [pc, #28]	; (aeb4 <mayfly_xtal_retain+0x88>)
    ae98:	480b      	ldr	r0, [pc, #44]	; (aec8 <mayfly_xtal_retain+0x9c>)
    ae9a:	e7d7      	b.n	ae4c <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    ae9c:	4b0b      	ldr	r3, [pc, #44]	; (aecc <mayfly_xtal_retain+0xa0>)
    ae9e:	e7f1      	b.n	ae84 <mayfly_xtal_retain+0x58>
}
    aea0:	b002      	add	sp, #8
    aea2:	bd10      	pop	{r4, pc}
    aea4:	20000af0 	.word	0x20000af0
    aea8:	000155c5 	.word	0x000155c5
    aeac:	0001699e 	.word	0x0001699e
    aeb0:	00018549 	.word	0x00018549
    aeb4:	000169ed 	.word	0x000169ed
    aeb8:	00018f2f 	.word	0x00018f2f
    aebc:	20003df8 	.word	0x20003df8
    aec0:	00018f5f 	.word	0x00018f5f
    aec4:	20003e18 	.word	0x20003e18
    aec8:	00016912 	.word	0x00016912
    aecc:	20003e08 	.word	0x20003e08

0000aed0 <rx_packet_set>:
{
    aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    aed2:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    aed6:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    aed8:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    aeda:	f004 0407 	and.w	r4, r4, #7
{
    aede:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    aee0:	4620      	mov	r0, r4
    aee2:	2100      	movs	r1, #0
    aee4:	f007 ffe0 	bl	12ea8 <radio_phy_set>
	if (conn->enc_rx) {
    aee8:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    aeec:	f013 0f10 	tst.w	r3, #16
    aef0:	ea4f 0244 	mov.w	r2, r4, lsl #1
    aef4:	d010      	beq.n	af18 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    aef6:	1d29      	adds	r1, r5, #4
    aef8:	f042 0201 	orr.w	r2, r2, #1
    aefc:	b2c9      	uxtb	r1, r1
    aefe:	2008      	movs	r0, #8
    af00:	f008 f818 	bl	12f34 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    af04:	463a      	mov	r2, r7
    af06:	4621      	mov	r1, r4
    af08:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    af0c:	f008 fa56 	bl	133bc <radio_ccm_rx_pkt_set>
}
    af10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    af14:	f008 b83c 	b.w	12f90 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    af18:	2008      	movs	r0, #8
    af1a:	f042 0201 	orr.w	r2, r2, #1
    af1e:	b2e9      	uxtb	r1, r5
    af20:	f008 f808 	bl	12f34 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    af24:	4638      	mov	r0, r7
    af26:	e7f3      	b.n	af10 <rx_packet_set+0x40>

0000af28 <tx_packet_set>:
{
    af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af2a:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    af2c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    af30:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    af32:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    af36:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    af38:	09c9      	lsrs	r1, r1, #7
    af3a:	4620      	mov	r0, r4
    af3c:	f007 ffb4 	bl	12ea8 <radio_phy_set>
	if (conn->enc_tx) {
    af40:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    af44:	f013 0f20 	tst.w	r3, #32
    af48:	ea4f 0244 	mov.w	r2, r4, lsl #1
    af4c:	d00f      	beq.n	af6e <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    af4e:	1d29      	adds	r1, r5, #4
    af50:	b2c9      	uxtb	r1, r1
    af52:	2008      	movs	r0, #8
    af54:	f042 0201 	orr.w	r2, r2, #1
    af58:	f007 ffec 	bl	12f34 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    af5c:	4639      	mov	r1, r7
    af5e:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    af62:	f008 fa67 	bl	13434 <radio_ccm_tx_pkt_set>
}
    af66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    af6a:	f008 b817 	b.w	12f9c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    af6e:	2008      	movs	r0, #8
    af70:	f042 0201 	orr.w	r2, r2, #1
    af74:	b2e9      	uxtb	r1, r5
    af76:	f007 ffdd 	bl	12f34 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    af7a:	4638      	mov	r0, r7
    af7c:	e7f3      	b.n	af66 <tx_packet_set+0x3e>
	...

0000af80 <sched_free_win_offset_calc>:
{
    af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af84:	b08f      	sub	sp, #60	; 0x3c
    af86:	4692      	mov	sl, r2
    af88:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    af8a:	6803      	ldr	r3, [r0, #0]
{
    af8c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    af8e:	2b00      	cmp	r3, #0
{
    af90:	4680      	mov	r8, r0
    af92:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    af94:	da3a      	bge.n	b00c <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    af96:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    af98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    af9c:	4291      	cmp	r1, r2
    af9e:	bf2c      	ite	cs
    afa0:	1a5a      	subcs	r2, r3, r1
    afa2:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    afa4:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    afa6:	f8d8 200c 	ldr.w	r2, [r8, #12]
    afaa:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    afac:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    afae:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    afb0:	18d3      	adds	r3, r2, r3
    afb2:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    afb4:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    afb8:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    afbc:	940c      	str	r4, [sp, #48]	; 0x30
    afbe:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    afc0:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    afc2:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    afc4:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    afc6:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    afc8:	2302      	movs	r3, #2
    afca:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    afcc:	ab0d      	add	r3, sp, #52	; 0x34
    afce:	9302      	str	r3, [sp, #8]
    afd0:	4b81      	ldr	r3, [pc, #516]	; (b1d8 <sched_free_win_offset_calc+0x258>)
    afd2:	9301      	str	r3, [sp, #4]
    afd4:	ab0b      	add	r3, sp, #44	; 0x2c
    afd6:	9300      	str	r3, [sp, #0]
    afd8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    afdc:	ab0c      	add	r3, sp, #48	; 0x30
    afde:	2101      	movs	r1, #1
    afe0:	2000      	movs	r0, #0
    afe2:	f7fd fd65 	bl	8ab0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    afe6:	2802      	cmp	r0, #2
    afe8:	d019      	beq.n	b01e <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    afea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    afec:	b1db      	cbz	r3, b026 <sched_free_win_offset_calc+0xa6>
    afee:	4b7b      	ldr	r3, [pc, #492]	; (b1dc <sched_free_win_offset_calc+0x25c>)
    aff0:	9301      	str	r3, [sp, #4]
    aff2:	9300      	str	r3, [sp, #0]
    aff4:	4a7a      	ldr	r2, [pc, #488]	; (b1e0 <sched_free_win_offset_calc+0x260>)
    aff6:	4b7b      	ldr	r3, [pc, #492]	; (b1e4 <sched_free_win_offset_calc+0x264>)
    aff8:	497b      	ldr	r1, [pc, #492]	; (b1e8 <sched_free_win_offset_calc+0x268>)
    affa:	487c      	ldr	r0, [pc, #496]	; (b1ec <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    affc:	f7f5 ffc6 	bl	f8c <printk>
    b000:	4040      	eors	r0, r0
    b002:	f380 8811 	msr	BASEPRI, r0
    b006:	f04f 0004 	mov.w	r0, #4
    b00a:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    b00c:	4293      	cmp	r3, r2
    b00e:	bf38      	it	cc
    b010:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    b012:	2200      	movs	r2, #0
    b014:	e7c6      	b.n	afa4 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b016:	2101      	movs	r1, #1
    b018:	2000      	movs	r0, #0
    b01a:	f7fd fdc7 	bl	8bac <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b01e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b020:	2b02      	cmp	r3, #2
    b022:	d0f8      	beq.n	b016 <sched_free_win_offset_calc+0x96>
    b024:	e7e1      	b.n	afea <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    b026:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    b02a:	2aff      	cmp	r2, #255	; 0xff
    b02c:	d065      	beq.n	b0fa <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    b02e:	2fff      	cmp	r7, #255	; 0xff
    b030:	d00a      	beq.n	b048 <sched_free_win_offset_calc+0xc8>
    b032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b034:	4599      	cmp	r9, r3
    b036:	d007      	beq.n	b048 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    b038:	4b68      	ldr	r3, [pc, #416]	; (b1dc <sched_free_win_offset_calc+0x25c>)
    b03a:	9301      	str	r3, [sp, #4]
    b03c:	9300      	str	r3, [sp, #0]
    b03e:	4a68      	ldr	r2, [pc, #416]	; (b1e0 <sched_free_win_offset_calc+0x260>)
    b040:	4b68      	ldr	r3, [pc, #416]	; (b1e4 <sched_free_win_offset_calc+0x264>)
    b042:	4969      	ldr	r1, [pc, #420]	; (b1e8 <sched_free_win_offset_calc+0x268>)
    b044:	486a      	ldr	r0, [pc, #424]	; (b1f0 <sched_free_win_offset_calc+0x270>)
    b046:	e7d9      	b.n	affc <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    b048:	2a05      	cmp	r2, #5
    b04a:	d951      	bls.n	b0f0 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    b04c:	4869      	ldr	r0, [pc, #420]	; (b1f4 <sched_free_win_offset_calc+0x274>)
    b04e:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b052:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    b054:	429a      	cmp	r2, r3
    b056:	da4b      	bge.n	b0f0 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    b058:	2a06      	cmp	r2, #6
    b05a:	f000 8092 	beq.w	b182 <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    b05e:	9b06      	ldr	r3, [sp, #24]
    b060:	2bff      	cmp	r3, #255	; 0xff
    b062:	d14a      	bne.n	b0fa <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b064:	3a07      	subs	r2, #7
    b066:	b292      	uxth	r2, r2
    b068:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b06c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b070:	f7fc fdf0 	bl	7c54 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    b074:	4580      	cmp	r8, r0
    b076:	d03b      	beq.n	b0f0 <sched_free_win_offset_calc+0x170>
    b078:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b07a:	b91b      	cbnz	r3, b084 <sched_free_win_offset_calc+0x104>
    b07c:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b080:	2b00      	cmp	r3, #0
    b082:	db35      	blt.n	b0f0 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    b084:	9b05      	ldr	r3, [sp, #20]
    b086:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b088:	6841      	ldr	r1, [r0, #4]
    b08a:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b08c:	6803      	ldr	r3, [r0, #0]
    b08e:	2b00      	cmp	r3, #0
    b090:	da4e      	bge.n	b130 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    b092:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    b094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b098:	428a      	cmp	r2, r1
    b09a:	bf2c      	ite	cs
    b09c:	18b6      	addcs	r6, r6, r2
    b09e:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    b0a0:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    b0a2:	68c2      	ldr	r2, [r0, #12]
    b0a4:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    b0a8:	444b      	add	r3, r9
    b0aa:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    b0ac:	f8da 3000 	ldr.w	r3, [sl]
    b0b0:	429e      	cmp	r6, r3
    b0b2:	d916      	bls.n	b0e2 <sched_free_win_offset_calc+0x162>
    b0b4:	429d      	cmp	r5, r3
    b0b6:	bf38      	it	cc
    b0b8:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    b0ba:	9b07      	ldr	r3, [sp, #28]
    b0bc:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    b0c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b0c2:	781b      	ldrb	r3, [r3, #0]
    b0c4:	42a3      	cmp	r3, r4
    b0c6:	d905      	bls.n	b0d4 <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    b0c8:	4629      	mov	r1, r5
    b0ca:	4630      	mov	r0, r6
    b0cc:	f7fd fd86 	bl	8bdc <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    b0d0:	42b8      	cmp	r0, r7
    b0d2:	d231      	bcs.n	b138 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    b0d4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    b0d8:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    b0da:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    b0de:	4293      	cmp	r3, r2
    b0e0:	d20b      	bcs.n	b0fa <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    b0e2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    b0e6:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    b0ea:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    b0ee:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    b0f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b0f2:	781b      	ldrb	r3, [r3, #0]
    b0f4:	42a3      	cmp	r3, r4
    b0f6:	f63f af67 	bhi.w	afc8 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    b0fa:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    b0fe:	2bff      	cmp	r3, #255	; 0xff
    b100:	d111      	bne.n	b126 <sched_free_win_offset_calc+0x1a6>
    b102:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b106:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b1f8 <sched_free_win_offset_calc+0x278>
    b10a:	a731      	add	r7, pc, #196	; (adr r7, b1d0 <sched_free_win_offset_calc+0x250>)
    b10c:	e9d7 6700 	ldrd	r6, r7, [r7]
    b110:	429d      	cmp	r5, r3
    b112:	bf38      	it	cc
    b114:	461d      	movcc	r5, r3
    b116:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    b11a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b11c:	781b      	ldrb	r3, [r3, #0]
    b11e:	42a3      	cmp	r3, r4
    b120:	d831      	bhi.n	b186 <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    b122:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    b126:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b128:	701c      	strb	r4, [r3, #0]
}
    b12a:	b00f      	add	sp, #60	; 0x3c
    b12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    b130:	428b      	cmp	r3, r1
    b132:	bf38      	it	cc
    b134:	460b      	movcc	r3, r1
    b136:	e7b4      	b.n	b0a2 <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b138:	4a2f      	ldr	r2, [pc, #188]	; (b1f8 <sched_free_win_offset_calc+0x278>)
    b13a:	eb05 030b 	add.w	r3, r5, fp
    b13e:	fba3 0102 	umull	r0, r1, r3, r2
    b142:	2207      	movs	r2, #7
    b144:	fb02 1103 	mla	r1, r2, r3, r1
    b148:	a321      	add	r3, pc, #132	; (adr r3, b1d0 <sched_free_win_offset_calc+0x250>)
    b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b14e:	f7f5 f861 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    b152:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b156:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    b15a:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b15c:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    b15e:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b160:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    b164:	d20b      	bcs.n	b17e <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    b166:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b168:	2202      	movs	r2, #2
    b16a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    b16e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    b172:	3401      	adds	r4, #1
					memcpy(win_offset +
    b174:	f7f6 fd42 	bl	1bfc <memcpy>
					offset_index++;
    b178:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    b17a:	3528      	adds	r5, #40	; 0x28
    b17c:	e7a0      	b.n	b0c0 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    b17e:	2500      	movs	r5, #0
    b180:	e7a8      	b.n	b0d4 <sched_free_win_offset_calc+0x154>
    b182:	9206      	str	r2, [sp, #24]
    b184:	e7b4      	b.n	b0f0 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b186:	eb05 030b 	add.w	r3, r5, fp
    b18a:	fba3 0108 	umull	r0, r1, r3, r8
    b18e:	fb09 1103 	mla	r1, r9, r3, r1
    b192:	4632      	mov	r2, r6
    b194:	463b      	mov	r3, r7
    b196:	f7f5 f83d 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    b19a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b19e:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    b1a2:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b1a4:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    b1a6:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b1a8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    b1ac:	d90b      	bls.n	b1c6 <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    b1ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b1b0:	2202      	movs	r2, #2
    b1b2:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    b1b6:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    b1ba:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    b1bc:	f7f6 fd1e 	bl	1bfc <memcpy>
			offset_index++;
    b1c0:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    b1c2:	3528      	adds	r5, #40	; 0x28
    b1c4:	e7a9      	b.n	b11a <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    b1c6:	2500      	movs	r5, #0
    b1c8:	e7ab      	b.n	b122 <sched_free_win_offset_calc+0x1a2>
    b1ca:	bf00      	nop
    b1cc:	f3af 8000 	nop.w
    b1d0:	3b9aca00 	.word	0x3b9aca00
    b1d4:	00000000 	.word	0x00000000
    b1d8:	0000a795 	.word	0x0000a795
    b1dc:	000155c5 	.word	0x000155c5
    b1e0:	0001699e 	.word	0x0001699e
    b1e4:	000185c5 	.word	0x000185c5
    b1e8:	000169ed 	.word	0x000169ed
    b1ec:	000192e4 	.word	0x000192e4
    b1f0:	00016912 	.word	0x00016912
    b1f4:	200008f0 	.word	0x200008f0
    b1f8:	1afd498d 	.word	0x1afd498d

0000b1fc <mayfly_sched_free_win_offset_calc>:
{
    b1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    b1fe:	2300      	movs	r3, #0
    b200:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    b202:	2306      	movs	r3, #6
    b204:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    b208:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b20c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    b210:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    b212:	bfbe      	ittt	lt
    b214:	4602      	movlt	r2, r0
    b216:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    b218:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b21c:	9101      	str	r1, [sp, #4]
    b21e:	f10d 010b 	add.w	r1, sp, #11
    b222:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    b224:	bfa8      	it	ge
    b226:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b228:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    b22c:	2100      	movs	r1, #0
    b22e:	f7ff fea7 	bl	af80 <sched_free_win_offset_calc>
}
    b232:	b005      	add	sp, #20
    b234:	f85d fb04 	ldr.w	pc, [sp], #4

0000b238 <mayfly_sched_win_offset_select>:
{
    b238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b23c:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    b240:	b089      	sub	sp, #36	; 0x24
    b242:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b244:	4840      	ldr	r0, [pc, #256]	; (b348 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    b246:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b248:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b24a:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    b24e:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b252:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b256:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b258:	fb03 1102 	mla	r1, r3, r2, r1
    b25c:	a338      	add	r3, pc, #224	; (adr r3, b340 <mayfly_sched_win_offset_select+0x108>)
    b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b262:	9505      	str	r5, [sp, #20]
    b264:	6075      	str	r5, [r6, #4]
    b266:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b268:	f7f4 ffd4 	bl	214 <__aeabi_uldivmod>
    b26c:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    b26e:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b272:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    b276:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    b27a:	9100      	str	r1, [sp, #0]
    b27c:	9601      	str	r6, [sp, #4]
    b27e:	2101      	movs	r1, #1
    b280:	4620      	mov	r0, r4
    b282:	f7ff fe7d 	bl	af80 <sched_free_win_offset_calc>
    b286:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    b28a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    b28e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    b292:	2202      	movs	r2, #2
    b294:	4639      	mov	r1, r7
    b296:	f10d 000e 	add.w	r0, sp, #14
    b29a:	f7f6 fcaf 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    b29e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    b2a2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    b2a6:	2300      	movs	r3, #0
    b2a8:	b2d9      	uxtb	r1, r3
    b2aa:	4288      	cmp	r0, r1
    b2ac:	d811      	bhi.n	b2d2 <mayfly_sched_win_offset_select+0x9a>
    b2ae:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    b2b0:	4547      	cmp	r7, r8
    b2b2:	d1ee      	bne.n	b292 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    b2b4:	b9b5      	cbnz	r5, b2e4 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    b2b6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    b2ba:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b2be:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    b2c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b2c4:	2202      	movs	r2, #2
    b2c6:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b2c8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b2cc:	f7f6 fc96 	bl	1bfc <memcpy>
    b2d0:	e027      	b.n	b322 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    b2d2:	454a      	cmp	r2, r9
    b2d4:	d004      	beq.n	b2e0 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    b2d6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    b2da:	4291      	cmp	r1, r2
    b2dc:	d024      	beq.n	b328 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    b2de:	2501      	movs	r5, #1
    b2e0:	3301      	adds	r3, #1
    b2e2:	e7e1      	b.n	b2a8 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    b2e4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    b2e8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b2ec:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b2f0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    b2f4:	4b15      	ldr	r3, [pc, #84]	; (b34c <mayfly_sched_win_offset_select+0x114>)
    b2f6:	2200      	movs	r2, #0
    b2f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    b2fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b300:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    b304:	f042 0203 	orr.w	r2, r2, #3
    b308:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    b30c:	2203      	movs	r2, #3
    b30e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    b312:	2211      	movs	r2, #17
    b314:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    b318:	220f      	movs	r2, #15
    b31a:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    b31e:	2220      	movs	r2, #32
    b320:	701a      	strb	r2, [r3, #0]
}
    b322:	b009      	add	sp, #36	; 0x24
    b324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    b328:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b32c:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    b32e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b332:	2202      	movs	r2, #2
    b334:	f10d 010e 	add.w	r1, sp, #14
    b338:	e7c6      	b.n	b2c8 <mayfly_sched_win_offset_select+0x90>
    b33a:	bf00      	nop
    b33c:	f3af 8000 	nop.w
    b340:	1afd498d 	.word	0x1afd498d
    b344:	00000007 	.word	0x00000007
    b348:	09ce5400 	.word	0x09ce5400
    b34c:	200008f0 	.word	0x200008f0

0000b350 <sched_after_mstr_free_slot_get>:
{
    b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b354:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    b356:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    b358:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    b35a:	f8df 9140 	ldr.w	r9, [pc, #320]	; b49c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    b35e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    b362:	4680      	mov	r8, r0
    b364:	4693      	mov	fp, r2
    b366:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    b368:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    b36c:	601c      	str	r4, [r3, #0]
    b36e:	9408      	str	r4, [sp, #32]
    b370:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b372:	2302      	movs	r3, #2
    b374:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b376:	ab09      	add	r3, sp, #36	; 0x24
    b378:	9302      	str	r3, [sp, #8]
    b37a:	4b41      	ldr	r3, [pc, #260]	; (b480 <sched_after_mstr_free_slot_get+0x130>)
    b37c:	9301      	str	r3, [sp, #4]
    b37e:	ab08      	add	r3, sp, #32
    b380:	9300      	str	r3, [sp, #0]
    b382:	f10d 021f 	add.w	r2, sp, #31
    b386:	465b      	mov	r3, fp
    b388:	4641      	mov	r1, r8
    b38a:	2000      	movs	r0, #0
    b38c:	f7fd fb90 	bl	8ab0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b390:	2802      	cmp	r0, #2
    b392:	d014      	beq.n	b3be <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b396:	b1b3      	cbz	r3, b3c6 <sched_after_mstr_free_slot_get+0x76>
    b398:	4b3a      	ldr	r3, [pc, #232]	; (b484 <sched_after_mstr_free_slot_get+0x134>)
    b39a:	9301      	str	r3, [sp, #4]
    b39c:	9300      	str	r3, [sp, #0]
    b39e:	4a3a      	ldr	r2, [pc, #232]	; (b488 <sched_after_mstr_free_slot_get+0x138>)
    b3a0:	4b3a      	ldr	r3, [pc, #232]	; (b48c <sched_after_mstr_free_slot_get+0x13c>)
    b3a2:	493b      	ldr	r1, [pc, #236]	; (b490 <sched_after_mstr_free_slot_get+0x140>)
    b3a4:	483b      	ldr	r0, [pc, #236]	; (b494 <sched_after_mstr_free_slot_get+0x144>)
    b3a6:	f7f5 fdf1 	bl	f8c <printk>
    b3aa:	4040      	eors	r0, r0
    b3ac:	f380 8811 	msr	BASEPRI, r0
    b3b0:	f04f 0004 	mov.w	r0, #4
    b3b4:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b3b6:	4641      	mov	r1, r8
    b3b8:	2000      	movs	r0, #0
    b3ba:	f7fd fbf7 	bl	8bac <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b3c0:	2b02      	cmp	r3, #2
    b3c2:	d0f8      	beq.n	b3b6 <sched_after_mstr_free_slot_get+0x66>
    b3c4:	e7e6      	b.n	b394 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    b3c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b3ca:	2aff      	cmp	r2, #255	; 0xff
    b3cc:	d04e      	beq.n	b46c <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    b3ce:	2a06      	cmp	r2, #6
    b3d0:	d9cf      	bls.n	b372 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    b3d2:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b3d6:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    b3d8:	429a      	cmp	r2, r3
    b3da:	daca      	bge.n	b372 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b3dc:	3a07      	subs	r2, #7
    b3de:	b292      	uxth	r2, r2
    b3e0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b3e4:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    b3e8:	f7fc fc34 	bl	7c54 <mem_get>
		if (conn && !conn->role) {
    b3ec:	2800      	cmp	r0, #0
    b3ee:	d0c0      	beq.n	b372 <sched_after_mstr_free_slot_get+0x22>
    b3f0:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	dbbc      	blt.n	b372 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b3f8:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    b3fa:	9a08      	ldr	r2, [sp, #32]
    b3fc:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b400:	2b00      	cmp	r3, #0
    b402:	da12      	bge.n	b42a <sched_after_mstr_free_slot_get+0xda>
    b404:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    b406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b40a:	4571      	cmp	r1, lr
    b40c:	bf2c      	ite	cs
    b40e:	1852      	addcs	r2, r2, r1
    b410:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    b412:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    b414:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    b416:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    b418:	f101 0104 	add.w	r1, r1, #4
    b41c:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    b41e:	d108      	bne.n	b432 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    b420:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    b424:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    b426:	4616      	mov	r6, r2
    b428:	e7a3      	b.n	b372 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    b42a:	4573      	cmp	r3, lr
    b42c:	bf38      	it	cc
    b42e:	4673      	movcc	r3, lr
    b430:	e7f0      	b.n	b414 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    b432:	4631      	mov	r1, r6
    b434:	4610      	mov	r0, r2
    b436:	9305      	str	r3, [sp, #20]
    b438:	9204      	str	r2, [sp, #16]
    b43a:	f7fd fbcf 	bl	8bdc <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    b43e:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    b442:	4288      	cmp	r0, r1
    b444:	9a04      	ldr	r2, [sp, #16]
    b446:	9b05      	ldr	r3, [sp, #20]
    b448:	d9ea      	bls.n	b420 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    b44a:	4813      	ldr	r0, [pc, #76]	; (b498 <sched_after_mstr_free_slot_get+0x148>)
    b44c:	4434      	add	r4, r6
    b44e:	fba4 0100 	umull	r0, r1, r4, r0
    b452:	2307      	movs	r3, #7
    b454:	fb03 1104 	mla	r1, r3, r4, r1
    b458:	a307      	add	r3, pc, #28	; (adr r3, b478 <sched_after_mstr_free_slot_get+0x128>)
    b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b45e:	f7f4 fed9 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    b462:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    b464:	6038      	str	r0, [r7, #0]
}
    b466:	b00b      	add	sp, #44	; 0x2c
    b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    b46c:	2dff      	cmp	r5, #255	; 0xff
    b46e:	d1ec      	bne.n	b44a <sched_after_mstr_free_slot_get+0xfa>
    b470:	e7f9      	b.n	b466 <sched_after_mstr_free_slot_get+0x116>
    b472:	bf00      	nop
    b474:	f3af 8000 	nop.w
    b478:	3b9aca00 	.word	0x3b9aca00
    b47c:	00000000 	.word	0x00000000
    b480:	0000a795 	.word	0x0000a795
    b484:	000155c5 	.word	0x000155c5
    b488:	0001699e 	.word	0x0001699e
    b48c:	00018585 	.word	0x00018585
    b490:	000169ed 	.word	0x000169ed
    b494:	000192e4 	.word	0x000192e4
    b498:	1afd498d 	.word	0x1afd498d
    b49c:	200008f0 	.word	0x200008f0

0000b4a0 <isr_adv_ci_adva_check>:
{
    b4a0:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    b4a2:	7804      	ldrb	r4, [r0, #0]
    b4a4:	780a      	ldrb	r2, [r1, #0]
    b4a6:	f3c4 1380 	ubfx	r3, r4, #6, #1
    b4aa:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    b4ae:	d119      	bne.n	b4e4 <isr_adv_ci_adva_check+0x44>
    b4b0:	f004 040f 	and.w	r4, r4, #15
    b4b4:	2c01      	cmp	r4, #1
    b4b6:	f101 0608 	add.w	r6, r1, #8
    b4ba:	f100 0502 	add.w	r5, r0, #2
    b4be:	d008      	beq.n	b4d2 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    b4c0:	2206      	movs	r2, #6
    b4c2:	4631      	mov	r1, r6
    b4c4:	4628      	mov	r0, r5
    b4c6:	f7f6 fb84 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    b4ca:	fab0 f080 	clz	r0, r0
    b4ce:	0940      	lsrs	r0, r0, #5
    b4d0:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    b4d2:	2206      	movs	r2, #6
    b4d4:	4631      	mov	r1, r6
    b4d6:	4628      	mov	r0, r5
    b4d8:	f7f6 fb7b 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    b4dc:	2800      	cmp	r0, #0
    b4de:	d1ef      	bne.n	b4c0 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    b4e0:	4620      	mov	r0, r4
    b4e2:	bd70      	pop	{r4, r5, r6, pc}
    b4e4:	2000      	movs	r0, #0
}
    b4e6:	bd70      	pop	{r4, r5, r6, pc}

0000b4e8 <packet_rx_enqueue>:
{
    b4e8:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    b4ea:	4a1e      	ldr	r2, [pc, #120]	; (b564 <packet_rx_enqueue+0x7c>)
    b4ec:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    b4f0:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    b4f4:	4299      	cmp	r1, r3
    b4f6:	d10e      	bne.n	b516 <packet_rx_enqueue+0x2e>
    b4f8:	4b1b      	ldr	r3, [pc, #108]	; (b568 <packet_rx_enqueue+0x80>)
    b4fa:	9301      	str	r3, [sp, #4]
    b4fc:	9300      	str	r3, [sp, #0]
    b4fe:	4a1b      	ldr	r2, [pc, #108]	; (b56c <packet_rx_enqueue+0x84>)
    b500:	4b1b      	ldr	r3, [pc, #108]	; (b570 <packet_rx_enqueue+0x88>)
    b502:	491c      	ldr	r1, [pc, #112]	; (b574 <packet_rx_enqueue+0x8c>)
    b504:	481c      	ldr	r0, [pc, #112]	; (b578 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    b506:	f7f5 fd41 	bl	f8c <printk>
    b50a:	4040      	eors	r0, r0
    b50c:	f380 8811 	msr	BASEPRI, r0
    b510:	f04f 0004 	mov.w	r0, #4
    b514:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b516:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    b51a:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    b51e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b522:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    b526:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b528:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    b52a:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    b52e:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    b532:	3301      	adds	r3, #1
    b534:	b2db      	uxtb	r3, r3
		last = 0;
    b536:	429c      	cmp	r4, r3
    b538:	bf08      	it	eq
    b53a:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    b53c:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b540:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b544:	f7fc fbab 	bl	7c9e <memq_enqueue>
	LL_ASSERT(link);
    b548:	b938      	cbnz	r0, b55a <packet_rx_enqueue+0x72>
    b54a:	4b07      	ldr	r3, [pc, #28]	; (b568 <packet_rx_enqueue+0x80>)
    b54c:	9301      	str	r3, [sp, #4]
    b54e:	9300      	str	r3, [sp, #0]
    b550:	4a06      	ldr	r2, [pc, #24]	; (b56c <packet_rx_enqueue+0x84>)
    b552:	4b07      	ldr	r3, [pc, #28]	; (b570 <packet_rx_enqueue+0x88>)
    b554:	4907      	ldr	r1, [pc, #28]	; (b574 <packet_rx_enqueue+0x8c>)
    b556:	4809      	ldr	r0, [pc, #36]	; (b57c <packet_rx_enqueue+0x94>)
    b558:	e7d5      	b.n	b506 <packet_rx_enqueue+0x1e>
}
    b55a:	b002      	add	sp, #8
    b55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b560:	f006 bb9c 	b.w	11c9c <radio_event_callback>
    b564:	200008f0 	.word	0x200008f0
    b568:	000155c5 	.word	0x000155c5
    b56c:	0001699e 	.word	0x0001699e
    b570:	00018716 	.word	0x00018716
    b574:	000169ed 	.word	0x000169ed
    b578:	00018fdc 	.word	0x00018fdc
    b57c:	000187ff 	.word	0x000187ff

0000b580 <isr_scan_tgta_check>:
{
    b580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b584:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b586:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    b588:	f101 0808 	add.w	r8, r1, #8
{
    b58c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b58e:	09c0      	lsrs	r0, r0, #7
    b590:	4641      	mov	r1, r8
{
    b592:	4691      	mov	r9, r2
    b594:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b596:	f007 f81d 	bl	125d4 <ctrl_rl_addr_resolve>
    b59a:	4604      	mov	r4, r0
    b59c:	b9d8      	cbnz	r0, b5d6 <isr_scan_tgta_check+0x56>
    b59e:	4f1c      	ldr	r7, [pc, #112]	; (b610 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    b5a0:	f1ba 0f00 	cmp.w	sl, #0
    b5a4:	d10e      	bne.n	b5c4 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    b5a6:	782b      	ldrb	r3, [r5, #0]
    b5a8:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    b5ac:	09db      	lsrs	r3, r3, #7
    b5ae:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    b5b2:	d113      	bne.n	b5dc <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    b5b4:	2206      	movs	r2, #6
    b5b6:	4641      	mov	r1, r8
    b5b8:	4816      	ldr	r0, [pc, #88]	; (b614 <isr_scan_tgta_check+0x94>)
    b5ba:	f7f6 fb0a 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    b5be:	b968      	cbnz	r0, b5dc <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    b5c0:	2001      	movs	r0, #1
    b5c2:	e012      	b.n	b5ea <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    b5c4:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    b5c8:	07db      	lsls	r3, r3, #31
    b5ca:	d5ec      	bpl.n	b5a6 <isr_scan_tgta_check+0x26>
    b5cc:	4648      	mov	r0, r9
    b5ce:	f006 fd5d 	bl	1208c <ctrl_lrpa_get>
    b5d2:	2800      	cmp	r0, #0
    b5d4:	d0e7      	beq.n	b5a6 <isr_scan_tgta_check+0x26>
}
    b5d6:	4620      	mov	r0, r4
    b5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b5dc:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    b5e0:	f3c0 1001 	ubfx	r0, r0, #4, #2
    b5e4:	f010 0002 	ands.w	r0, r0, #2
    b5e8:	d101      	bne.n	b5ee <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    b5ea:	4604      	mov	r4, r0
    b5ec:	e7f3      	b.n	b5d6 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b5ee:	f995 3000 	ldrsb.w	r3, [r5]
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	da09      	bge.n	b60a <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    b5f6:	7b6b      	ldrb	r3, [r5, #13]
    b5f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b5fc:	2b40      	cmp	r3, #64	; 0x40
    b5fe:	d104      	bne.n	b60a <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    b600:	2e00      	cmp	r6, #0
    b602:	d0dd      	beq.n	b5c0 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    b604:	2001      	movs	r0, #1
    b606:	7030      	strb	r0, [r6, #0]
    b608:	e7ef      	b.n	b5ea <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    b60a:	2000      	movs	r0, #0
    b60c:	e7ed      	b.n	b5ea <isr_scan_tgta_check+0x6a>
    b60e:	bf00      	nop
    b610:	200008f0 	.word	0x200008f0
    b614:	200009d4 	.word	0x200009d4

0000b618 <isr_rx_scan_report>:
{
    b618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b61c:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    b61e:	2003      	movs	r0, #3
{
    b620:	460f      	mov	r7, r1
    b622:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    b624:	f7ff f8f6 	bl	a814 <packet_rx_reserve_get>
	if (node_rx == 0) {
    b628:	4604      	mov	r4, r0
    b62a:	2800      	cmp	r0, #0
    b62c:	d03e      	beq.n	b6ac <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    b62e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b632:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    b634:	4b1e      	ldr	r3, [pc, #120]	; (b6b0 <isr_rx_scan_report+0x98>)
    b636:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    b63a:	075a      	lsls	r2, r3, #29
    b63c:	d032      	beq.n	b6a4 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    b63e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b642:	b2da      	uxtb	r2, r3
    b644:	2a01      	cmp	r2, #1
    b646:	d010      	beq.n	b66a <isr_rx_scan_report+0x52>
    b648:	2a04      	cmp	r2, #4
    b64a:	d00f      	beq.n	b66c <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    b64c:	4b19      	ldr	r3, [pc, #100]	; (b6b4 <isr_rx_scan_report+0x9c>)
    b64e:	9301      	str	r3, [sp, #4]
    b650:	9300      	str	r3, [sp, #0]
    b652:	4a19      	ldr	r2, [pc, #100]	; (b6b8 <isr_rx_scan_report+0xa0>)
    b654:	4b19      	ldr	r3, [pc, #100]	; (b6bc <isr_rx_scan_report+0xa4>)
    b656:	491a      	ldr	r1, [pc, #104]	; (b6c0 <isr_rx_scan_report+0xa8>)
    b658:	481a      	ldr	r0, [pc, #104]	; (b6c4 <isr_rx_scan_report+0xac>)
    b65a:	f7f5 fc97 	bl	f8c <printk>
    b65e:	4040      	eors	r0, r0
    b660:	f380 8811 	msr	BASEPRI, r0
    b664:	f04f 0004 	mov.w	r0, #4
    b668:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    b66a:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    b66c:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b670:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    b672:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b676:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    b67a:	f1b9 0f00 	cmp.w	r9, #0
    b67e:	d013      	beq.n	b6a8 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    b680:	f007 fd34 	bl	130ec <radio_rssi_get>
			     pdu_adv_rx->len] =
    b684:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b688:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b68c:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    b68e:	442b      	add	r3, r5
    b690:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b692:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    b694:	441d      	add	r5, r3
    b696:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    b698:	f7ff ff26 	bl	b4e8 <packet_rx_enqueue>
	return 0;
    b69c:	2000      	movs	r0, #0
}
    b69e:	b003      	add	sp, #12
    b6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b6a4:	2302      	movs	r3, #2
    b6a6:	e7e1      	b.n	b66c <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    b6a8:	207f      	movs	r0, #127	; 0x7f
    b6aa:	e7ed      	b.n	b688 <isr_rx_scan_report+0x70>
		return 1;
    b6ac:	2001      	movs	r0, #1
    b6ae:	e7f6      	b.n	b69e <isr_rx_scan_report+0x86>
    b6b0:	200008f0 	.word	0x200008f0
    b6b4:	000155c5 	.word	0x000155c5
    b6b8:	0001699e 	.word	0x0001699e
    b6bc:	000183ac 	.word	0x000183ac
    b6c0:	000169ed 	.word	0x000169ed
    b6c4:	00016912 	.word	0x00016912

0000b6c8 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    b6c8:	4a0b      	ldr	r2, [pc, #44]	; (b6f8 <rx_fc_lock+0x30>)
    b6ca:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b6ce:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    b6d2:	4299      	cmp	r1, r3
    b6d4:	d10e      	bne.n	b6f4 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    b6d6:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b6da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    b6de:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    b6e2:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b6e6:	3301      	adds	r3, #1
    b6e8:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    b6ea:	2b03      	cmp	r3, #3
    b6ec:	bf08      	it	eq
    b6ee:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    b6f0:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    b6f4:	4770      	bx	lr
    b6f6:	bf00      	nop
    b6f8:	200008f0 	.word	0x200008f0

0000b6fc <ticker_success_assert>:
{
    b6fc:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b6fe:	b170      	cbz	r0, b71e <ticker_success_assert+0x22>
    b700:	4b08      	ldr	r3, [pc, #32]	; (b724 <ticker_success_assert+0x28>)
    b702:	9301      	str	r3, [sp, #4]
    b704:	9300      	str	r3, [sp, #0]
    b706:	4a08      	ldr	r2, [pc, #32]	; (b728 <ticker_success_assert+0x2c>)
    b708:	4b08      	ldr	r3, [pc, #32]	; (b72c <ticker_success_assert+0x30>)
    b70a:	4909      	ldr	r1, [pc, #36]	; (b730 <ticker_success_assert+0x34>)
    b70c:	4809      	ldr	r0, [pc, #36]	; (b734 <ticker_success_assert+0x38>)
    b70e:	f7f5 fc3d 	bl	f8c <printk>
    b712:	4040      	eors	r0, r0
    b714:	f380 8811 	msr	BASEPRI, r0
    b718:	f04f 0004 	mov.w	r0, #4
    b71c:	df02      	svc	2
}
    b71e:	b003      	add	sp, #12
    b720:	f85d fb04 	ldr.w	pc, [sp], #4
    b724:	000155c5 	.word	0x000155c5
    b728:	0001699e 	.word	0x0001699e
    b72c:	00018495 	.word	0x00018495
    b730:	000169ed 	.word	0x000169ed
    b734:	000193fc 	.word	0x000193fc

0000b738 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b738:	2801      	cmp	r0, #1
{
    b73a:	b507      	push	{r0, r1, r2, lr}
    b73c:	4b11      	ldr	r3, [pc, #68]	; (b784 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    b73e:	d116      	bne.n	b76e <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    b740:	7c9a      	ldrb	r2, [r3, #18]
    b742:	2a05      	cmp	r2, #5
    b744:	d104      	bne.n	b750 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    b746:	2200      	movs	r2, #0
    b748:	749a      	strb	r2, [r3, #18]
}
    b74a:	b003      	add	sp, #12
    b74c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    b750:	4b0d      	ldr	r3, [pc, #52]	; (b788 <ticker_stop_adv_assert+0x50>)
    b752:	9301      	str	r3, [sp, #4]
    b754:	9300      	str	r3, [sp, #0]
    b756:	4a0d      	ldr	r2, [pc, #52]	; (b78c <ticker_stop_adv_assert+0x54>)
    b758:	4b0d      	ldr	r3, [pc, #52]	; (b790 <ticker_stop_adv_assert+0x58>)
    b75a:	490e      	ldr	r1, [pc, #56]	; (b794 <ticker_stop_adv_assert+0x5c>)
    b75c:	480e      	ldr	r0, [pc, #56]	; (b798 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    b75e:	f7f5 fc15 	bl	f8c <printk>
    b762:	4040      	eors	r0, r0
    b764:	f380 8811 	msr	BASEPRI, r0
    b768:	f04f 0004 	mov.w	r0, #4
    b76c:	df02      	svc	2
    b76e:	7c1b      	ldrb	r3, [r3, #16]
    b770:	2b05      	cmp	r3, #5
    b772:	d1ea      	bne.n	b74a <ticker_stop_adv_assert+0x12>
    b774:	4b04      	ldr	r3, [pc, #16]	; (b788 <ticker_stop_adv_assert+0x50>)
    b776:	9301      	str	r3, [sp, #4]
    b778:	9300      	str	r3, [sp, #0]
    b77a:	4a04      	ldr	r2, [pc, #16]	; (b78c <ticker_stop_adv_assert+0x54>)
    b77c:	4b04      	ldr	r3, [pc, #16]	; (b790 <ticker_stop_adv_assert+0x58>)
    b77e:	4905      	ldr	r1, [pc, #20]	; (b794 <ticker_stop_adv_assert+0x5c>)
    b780:	4806      	ldr	r0, [pc, #24]	; (b79c <ticker_stop_adv_assert+0x64>)
    b782:	e7ec      	b.n	b75e <ticker_stop_adv_assert+0x26>
    b784:	200008f0 	.word	0x200008f0
    b788:	000155c5 	.word	0x000155c5
    b78c:	0001699e 	.word	0x0001699e
    b790:	000184ab 	.word	0x000184ab
    b794:	000169ed 	.word	0x000169ed
    b798:	00016912 	.word	0x00016912
    b79c:	0001937e 	.word	0x0001937e

0000b7a0 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b7a0:	2801      	cmp	r0, #1
{
    b7a2:	b507      	push	{r0, r1, r2, lr}
    b7a4:	4b11      	ldr	r3, [pc, #68]	; (b7ec <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    b7a6:	d116      	bne.n	b7d6 <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    b7a8:	7c9a      	ldrb	r2, [r3, #18]
    b7aa:	2a06      	cmp	r2, #6
    b7ac:	d104      	bne.n	b7b8 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    b7ae:	2200      	movs	r2, #0
    b7b0:	749a      	strb	r2, [r3, #18]
}
    b7b2:	b003      	add	sp, #12
    b7b4:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    b7b8:	4b0d      	ldr	r3, [pc, #52]	; (b7f0 <ticker_stop_scan_assert+0x50>)
    b7ba:	9301      	str	r3, [sp, #4]
    b7bc:	9300      	str	r3, [sp, #0]
    b7be:	4a0d      	ldr	r2, [pc, #52]	; (b7f4 <ticker_stop_scan_assert+0x54>)
    b7c0:	4b0d      	ldr	r3, [pc, #52]	; (b7f8 <ticker_stop_scan_assert+0x58>)
    b7c2:	490e      	ldr	r1, [pc, #56]	; (b7fc <ticker_stop_scan_assert+0x5c>)
    b7c4:	480e      	ldr	r0, [pc, #56]	; (b800 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    b7c6:	f7f5 fbe1 	bl	f8c <printk>
    b7ca:	4040      	eors	r0, r0
    b7cc:	f380 8811 	msr	BASEPRI, r0
    b7d0:	f04f 0004 	mov.w	r0, #4
    b7d4:	df02      	svc	2
    b7d6:	7c1b      	ldrb	r3, [r3, #16]
    b7d8:	2b06      	cmp	r3, #6
    b7da:	d1ea      	bne.n	b7b2 <ticker_stop_scan_assert+0x12>
    b7dc:	4b04      	ldr	r3, [pc, #16]	; (b7f0 <ticker_stop_scan_assert+0x50>)
    b7de:	9301      	str	r3, [sp, #4]
    b7e0:	9300      	str	r3, [sp, #0]
    b7e2:	4a04      	ldr	r2, [pc, #16]	; (b7f4 <ticker_stop_scan_assert+0x54>)
    b7e4:	4b04      	ldr	r3, [pc, #16]	; (b7f8 <ticker_stop_scan_assert+0x58>)
    b7e6:	4905      	ldr	r1, [pc, #20]	; (b7fc <ticker_stop_scan_assert+0x5c>)
    b7e8:	4806      	ldr	r0, [pc, #24]	; (b804 <ticker_stop_scan_assert+0x64>)
    b7ea:	e7ec      	b.n	b7c6 <ticker_stop_scan_assert+0x26>
    b7ec:	200008f0 	.word	0x200008f0
    b7f0:	000155c5 	.word	0x000155c5
    b7f4:	0001699e 	.word	0x0001699e
    b7f8:	000184c2 	.word	0x000184c2
    b7fc:	000169ed 	.word	0x000169ed
    b800:	00016912 	.word	0x00016912
    b804:	000193bd 	.word	0x000193bd

0000b808 <ticker_update_adv_assert>:
{
    b808:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b80a:	b190      	cbz	r0, b832 <ticker_update_adv_assert+0x2a>
    b80c:	4b0a      	ldr	r3, [pc, #40]	; (b838 <ticker_update_adv_assert+0x30>)
    b80e:	7c9b      	ldrb	r3, [r3, #18]
    b810:	2b05      	cmp	r3, #5
    b812:	d00e      	beq.n	b832 <ticker_update_adv_assert+0x2a>
    b814:	4b09      	ldr	r3, [pc, #36]	; (b83c <ticker_update_adv_assert+0x34>)
    b816:	9301      	str	r3, [sp, #4]
    b818:	9300      	str	r3, [sp, #0]
    b81a:	4a09      	ldr	r2, [pc, #36]	; (b840 <ticker_update_adv_assert+0x38>)
    b81c:	4b09      	ldr	r3, [pc, #36]	; (b844 <ticker_update_adv_assert+0x3c>)
    b81e:	490a      	ldr	r1, [pc, #40]	; (b848 <ticker_update_adv_assert+0x40>)
    b820:	480a      	ldr	r0, [pc, #40]	; (b84c <ticker_update_adv_assert+0x44>)
    b822:	f7f5 fbb3 	bl	f8c <printk>
    b826:	4040      	eors	r0, r0
    b828:	f380 8811 	msr	BASEPRI, r0
    b82c:	f04f 0004 	mov.w	r0, #4
    b830:	df02      	svc	2
}
    b832:	b003      	add	sp, #12
    b834:	f85d fb04 	ldr.w	pc, [sp], #4
    b838:	200008f0 	.word	0x200008f0
    b83c:	000155c5 	.word	0x000155c5
    b840:	0001699e 	.word	0x0001699e
    b844:	000184da 	.word	0x000184da
    b848:	000169ed 	.word	0x000169ed
    b84c:	00019429 	.word	0x00019429

0000b850 <ticker_update_slave_assert>:
{
    b850:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b852:	b198      	cbz	r0, b87c <ticker_update_slave_assert+0x2c>
    b854:	4b0b      	ldr	r3, [pc, #44]	; (b884 <ticker_update_slave_assert+0x34>)
    b856:	7c9b      	ldrb	r3, [r3, #18]
    b858:	b2c9      	uxtb	r1, r1
    b85a:	4299      	cmp	r1, r3
    b85c:	d00e      	beq.n	b87c <ticker_update_slave_assert+0x2c>
    b85e:	4b0a      	ldr	r3, [pc, #40]	; (b888 <ticker_update_slave_assert+0x38>)
    b860:	9301      	str	r3, [sp, #4]
    b862:	9300      	str	r3, [sp, #0]
    b864:	4a09      	ldr	r2, [pc, #36]	; (b88c <ticker_update_slave_assert+0x3c>)
    b866:	4b0a      	ldr	r3, [pc, #40]	; (b890 <ticker_update_slave_assert+0x40>)
    b868:	490a      	ldr	r1, [pc, #40]	; (b894 <ticker_update_slave_assert+0x44>)
    b86a:	480b      	ldr	r0, [pc, #44]	; (b898 <ticker_update_slave_assert+0x48>)
    b86c:	f7f5 fb8e 	bl	f8c <printk>
    b870:	4040      	eors	r0, r0
    b872:	f380 8811 	msr	BASEPRI, r0
    b876:	f04f 0004 	mov.w	r0, #4
    b87a:	df02      	svc	2
}
    b87c:	b003      	add	sp, #12
    b87e:	f85d fb04 	ldr.w	pc, [sp], #4
    b882:	bf00      	nop
    b884:	200008f0 	.word	0x200008f0
    b888:	000155c5 	.word	0x000155c5
    b88c:	0001699e 	.word	0x0001699e
    b890:	000184f3 	.word	0x000184f3
    b894:	000169ed 	.word	0x000169ed
    b898:	00019478 	.word	0x00019478

0000b89c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    b89c:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    b89e:	b170      	cbz	r0, b8be <ticker_op_latency_cancelled+0x22>
    b8a0:	4b0b      	ldr	r3, [pc, #44]	; (b8d0 <ticker_op_latency_cancelled+0x34>)
    b8a2:	9301      	str	r3, [sp, #4]
    b8a4:	9300      	str	r3, [sp, #0]
    b8a6:	4a0b      	ldr	r2, [pc, #44]	; (b8d4 <ticker_op_latency_cancelled+0x38>)
    b8a8:	4b0b      	ldr	r3, [pc, #44]	; (b8d8 <ticker_op_latency_cancelled+0x3c>)
    b8aa:	490c      	ldr	r1, [pc, #48]	; (b8dc <ticker_op_latency_cancelled+0x40>)
    b8ac:	480c      	ldr	r0, [pc, #48]	; (b8e0 <ticker_op_latency_cancelled+0x44>)
    b8ae:	f7f5 fb6d 	bl	f8c <printk>
    b8b2:	4040      	eors	r0, r0
    b8b4:	f380 8811 	msr	BASEPRI, r0
    b8b8:	f04f 0004 	mov.w	r0, #4
    b8bc:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    b8be:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    b8c2:	f360 0341 	bfi	r3, r0, #1, #1
    b8c6:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    b8ca:	b003      	add	sp, #12
    b8cc:	f85d fb04 	ldr.w	pc, [sp], #4
    b8d0:	000155c5 	.word	0x000155c5
    b8d4:	0001699e 	.word	0x0001699e
    b8d8:	000187d1 	.word	0x000187d1
    b8dc:	000169ed 	.word	0x000169ed
    b8e0:	0001934a 	.word	0x0001934a

0000b8e4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    b8e4:	4b04      	ldr	r3, [pc, #16]	; (b8f8 <ticker_job_disable+0x14>)
    b8e6:	7d1b      	ldrb	r3, [r3, #20]
    b8e8:	b123      	cbz	r3, b8f4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    b8ea:	2101      	movs	r1, #1
    b8ec:	2200      	movs	r2, #0
    b8ee:	4608      	mov	r0, r1
    b8f0:	f7fc ba1e 	b.w	7d30 <mayfly_enable>
    b8f4:	4770      	bx	lr
    b8f6:	bf00      	nop
    b8f8:	200008f0 	.word	0x200008f0

0000b8fc <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b8fc:	2806      	cmp	r0, #6
{
    b8fe:	b510      	push	{r4, lr}
    b900:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b902:	d90a      	bls.n	b91a <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b904:	4b09      	ldr	r3, [pc, #36]	; (b92c <hdr_conn_get+0x30>)
    b906:	1fc2      	subs	r2, r0, #7
    b908:	b292      	uxth	r2, r2
    b90a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b90e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    b912:	f7fc f99f 	bl	7c54 <mem_get>
    b916:	6020      	str	r0, [r4, #0]
    b918:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    b91a:	2805      	cmp	r0, #5
    b91c:	d004      	beq.n	b928 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    b91e:	2806      	cmp	r0, #6
	return NULL;
    b920:	4803      	ldr	r0, [pc, #12]	; (b930 <hdr_conn_get+0x34>)
    b922:	bf18      	it	ne
    b924:	2000      	movne	r0, #0
    b926:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    b928:	4802      	ldr	r0, [pc, #8]	; (b934 <hdr_conn_get+0x38>)
}
    b92a:	bd10      	pop	{r4, pc}
    b92c:	200008f0 	.word	0x200008f0
    b930:	200009c0 	.word	0x200009c0
    b934:	20000908 	.word	0x20000908

0000b938 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b938:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    b93a:	4b07      	ldr	r3, [pc, #28]	; (b958 <event_stop.part.10+0x20>)
    b93c:	9301      	str	r3, [sp, #4]
    b93e:	9300      	str	r3, [sp, #0]
    b940:	4a06      	ldr	r2, [pc, #24]	; (b95c <event_stop.part.10+0x24>)
    b942:	4b07      	ldr	r3, [pc, #28]	; (b960 <event_stop.part.10+0x28>)
    b944:	4907      	ldr	r1, [pc, #28]	; (b964 <event_stop.part.10+0x2c>)
    b946:	4808      	ldr	r0, [pc, #32]	; (b968 <event_stop.part.10+0x30>)
    b948:	f7f5 fb20 	bl	f8c <printk>
    b94c:	4040      	eors	r0, r0
    b94e:	f380 8811 	msr	BASEPRI, r0
    b952:	f04f 0004 	mov.w	r0, #4
    b956:	df02      	svc	2
    b958:	000155c5 	.word	0x000155c5
    b95c:	0001699e 	.word	0x0001699e
    b960:	000185f2 	.word	0x000185f2
    b964:	000169ed 	.word	0x000169ed
    b968:	00018f5f 	.word	0x00018f5f

0000b96c <event_stop>:
	s_mfy_radio_stop.param = context;
    b96c:	4a06      	ldr	r2, [pc, #24]	; (b988 <event_stop+0x1c>)
{
    b96e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b970:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b972:	4613      	mov	r3, r2
    b974:	2200      	movs	r2, #0
    b976:	4611      	mov	r1, r2
    b978:	4610      	mov	r0, r2
    b97a:	f7fc fa01 	bl	7d80 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b97e:	b108      	cbz	r0, b984 <event_stop+0x18>
    b980:	f7ff ffda 	bl	b938 <event_stop.part.10>
    b984:	bd08      	pop	{r3, pc}
    b986:	bf00      	nop
    b988:	20003d98 	.word	0x20003d98

0000b98c <event_active>:
{
    b98c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b98e:	2200      	movs	r2, #0
    b990:	4b0b      	ldr	r3, [pc, #44]	; (b9c0 <event_active+0x34>)
    b992:	4611      	mov	r1, r2
    b994:	4610      	mov	r0, r2
    b996:	f7fc f9f3 	bl	7d80 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b99a:	b170      	cbz	r0, b9ba <event_active+0x2e>
    b99c:	4b09      	ldr	r3, [pc, #36]	; (b9c4 <event_active+0x38>)
    b99e:	9301      	str	r3, [sp, #4]
    b9a0:	9300      	str	r3, [sp, #0]
    b9a2:	4a09      	ldr	r2, [pc, #36]	; (b9c8 <event_active+0x3c>)
    b9a4:	4b09      	ldr	r3, [pc, #36]	; (b9cc <event_active+0x40>)
    b9a6:	490a      	ldr	r1, [pc, #40]	; (b9d0 <event_active+0x44>)
    b9a8:	480a      	ldr	r0, [pc, #40]	; (b9d4 <event_active+0x48>)
    b9aa:	f7f5 faef 	bl	f8c <printk>
    b9ae:	4040      	eors	r0, r0
    b9b0:	f380 8811 	msr	BASEPRI, r0
    b9b4:	f04f 0004 	mov.w	r0, #4
    b9b8:	df02      	svc	2
}
    b9ba:	b003      	add	sp, #12
    b9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b9c0:	20003d68 	.word	0x20003d68
    b9c4:	000155c5 	.word	0x000155c5
    b9c8:	0001699e 	.word	0x0001699e
    b9cc:	00018522 	.word	0x00018522
    b9d0:	000169ed 	.word	0x000169ed
    b9d4:	00018f5f 	.word	0x00018f5f

0000b9d8 <event_xtal>:
{
    b9d8:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b9da:	2200      	movs	r2, #0
    b9dc:	4b0b      	ldr	r3, [pc, #44]	; (ba0c <event_xtal+0x34>)
    b9de:	4611      	mov	r1, r2
    b9e0:	4610      	mov	r0, r2
    b9e2:	f7fc f9cd 	bl	7d80 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b9e6:	b170      	cbz	r0, ba06 <event_xtal+0x2e>
    b9e8:	4b09      	ldr	r3, [pc, #36]	; (ba10 <event_xtal+0x38>)
    b9ea:	9301      	str	r3, [sp, #4]
    b9ec:	9300      	str	r3, [sp, #0]
    b9ee:	4a09      	ldr	r2, [pc, #36]	; (ba14 <event_xtal+0x3c>)
    b9f0:	4b09      	ldr	r3, [pc, #36]	; (ba18 <event_xtal+0x40>)
    b9f2:	490a      	ldr	r1, [pc, #40]	; (ba1c <event_xtal+0x44>)
    b9f4:	480a      	ldr	r0, [pc, #40]	; (ba20 <event_xtal+0x48>)
    b9f6:	f7f5 fac9 	bl	f8c <printk>
    b9fa:	4040      	eors	r0, r0
    b9fc:	f380 8811 	msr	BASEPRI, r0
    ba00:	f04f 0004 	mov.w	r0, #4
    ba04:	df02      	svc	2
}
    ba06:	b003      	add	sp, #12
    ba08:	f85d fb04 	ldr.w	pc, [sp], #4
    ba0c:	20003de8 	.word	0x20003de8
    ba10:	000155c5 	.word	0x000155c5
    ba14:	0001699e 	.word	0x0001699e
    ba18:	0001853e 	.word	0x0001853e
    ba1c:	000169ed 	.word	0x000169ed
    ba20:	00018f5f 	.word	0x00018f5f

0000ba24 <mayfly_radio_active>:
{
    ba24:	b507      	push	{r0, r1, r2, lr}
    ba26:	4a12      	ldr	r2, [pc, #72]	; (ba70 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    ba28:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    ba2a:	b140      	cbz	r0, ba3e <mayfly_radio_active+0x1a>
		if (s_active++) {
    ba2c:	1c59      	adds	r1, r3, #1
    ba2e:	7011      	strb	r1, [r2, #0]
    ba30:	b9d3      	cbnz	r3, ba68 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    ba32:	2001      	movs	r0, #1
}
    ba34:	b003      	add	sp, #12
    ba36:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    ba3a:	f006 b92d 	b.w	11c98 <radio_active_callback>
		LL_ASSERT(s_active);
    ba3e:	b973      	cbnz	r3, ba5e <mayfly_radio_active+0x3a>
    ba40:	4b0c      	ldr	r3, [pc, #48]	; (ba74 <mayfly_radio_active+0x50>)
    ba42:	9301      	str	r3, [sp, #4]
    ba44:	9300      	str	r3, [sp, #0]
    ba46:	4a0c      	ldr	r2, [pc, #48]	; (ba78 <mayfly_radio_active+0x54>)
    ba48:	4b0c      	ldr	r3, [pc, #48]	; (ba7c <mayfly_radio_active+0x58>)
    ba4a:	490d      	ldr	r1, [pc, #52]	; (ba80 <mayfly_radio_active+0x5c>)
    ba4c:	480d      	ldr	r0, [pc, #52]	; (ba84 <mayfly_radio_active+0x60>)
    ba4e:	f7f5 fa9d 	bl	f8c <printk>
    ba52:	4040      	eors	r0, r0
    ba54:	f380 8811 	msr	BASEPRI, r0
    ba58:	f04f 0004 	mov.w	r0, #4
    ba5c:	df02      	svc	2
		if (--s_active) {
    ba5e:	3b01      	subs	r3, #1
    ba60:	b2db      	uxtb	r3, r3
    ba62:	7013      	strb	r3, [r2, #0]
    ba64:	2b00      	cmp	r3, #0
    ba66:	d0e5      	beq.n	ba34 <mayfly_radio_active+0x10>
}
    ba68:	b003      	add	sp, #12
    ba6a:	f85d fb04 	ldr.w	pc, [sp], #4
    ba6e:	bf00      	nop
    ba70:	20000a94 	.word	0x20000a94
    ba74:	000155c5 	.word	0x000155c5
    ba78:	0001699e 	.word	0x0001699e
    ba7c:	0001850e 	.word	0x0001850e
    ba80:	000169ed 	.word	0x000169ed
    ba84:	00018eb4 	.word	0x00018eb4

0000ba88 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    ba88:	2000      	movs	r0, #0
    ba8a:	f7ff bfcb 	b.w	ba24 <mayfly_radio_active>
	...

0000ba90 <mayfly_radio_stop>:
{
    ba90:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    ba92:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    ba94:	1f03      	subs	r3, r0, #4
    ba96:	2b01      	cmp	r3, #1
    ba98:	d90e      	bls.n	bab8 <mayfly_radio_stop+0x28>
    ba9a:	4b11      	ldr	r3, [pc, #68]	; (bae0 <mayfly_radio_stop+0x50>)
    ba9c:	9301      	str	r3, [sp, #4]
    ba9e:	9300      	str	r3, [sp, #0]
    baa0:	4a10      	ldr	r2, [pc, #64]	; (bae4 <mayfly_radio_stop+0x54>)
    baa2:	4b11      	ldr	r3, [pc, #68]	; (bae8 <mayfly_radio_stop+0x58>)
    baa4:	4911      	ldr	r1, [pc, #68]	; (baec <mayfly_radio_stop+0x5c>)
    baa6:	4812      	ldr	r0, [pc, #72]	; (baf0 <mayfly_radio_stop+0x60>)
    baa8:	f7f5 fa70 	bl	f8c <printk>
    baac:	4040      	eors	r0, r0
    baae:	f380 8811 	msr	BASEPRI, r0
    bab2:	f04f 0004 	mov.w	r0, #4
    bab6:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    bab8:	4a0e      	ldr	r2, [pc, #56]	; (baf4 <mayfly_radio_stop+0x64>)
    baba:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    babc:	b143      	cbz	r3, bad0 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    babe:	3b04      	subs	r3, #4
    bac0:	2b01      	cmp	r3, #1
    bac2:	d905      	bls.n	bad0 <mayfly_radio_stop+0x40>
			_radio.state = state;
    bac4:	7510      	strb	r0, [r2, #20]
}
    bac6:	b003      	add	sp, #12
    bac8:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    bacc:	f007 ba86 	b.w	12fdc <radio_disable>
	if (radio_used || !radio_is_idle()) {
    bad0:	f007 fab6 	bl	13040 <radio_is_idle>
    bad4:	2800      	cmp	r0, #0
    bad6:	d0f6      	beq.n	bac6 <mayfly_radio_stop+0x36>
}
    bad8:	b003      	add	sp, #12
    bada:	f85d fb04 	ldr.w	pc, [sp], #4
    bade:	bf00      	nop
    bae0:	000155c5 	.word	0x000155c5
    bae4:	0001699e 	.word	0x0001699e
    bae8:	000185e0 	.word	0x000185e0
    baec:	000169ed 	.word	0x000169ed
    baf0:	00018ede 	.word	0x00018ede
    baf4:	200008f0 	.word	0x200008f0

0000baf8 <pdu_node_tx_release>:
{
    baf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    bafa:	4a17      	ldr	r2, [pc, #92]	; (bb58 <pdu_node_tx_release+0x60>)
    bafc:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    bb00:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    bb04:	3301      	adds	r3, #1
    bb06:	b2db      	uxtb	r3, r3
		last = 0;
    bb08:	429c      	cmp	r4, r3
    bb0a:	bf08      	it	eq
    bb0c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    bb0e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    bb12:	429c      	cmp	r4, r3
    bb14:	d10e      	bne.n	bb34 <pdu_node_tx_release+0x3c>
    bb16:	4b11      	ldr	r3, [pc, #68]	; (bb5c <pdu_node_tx_release+0x64>)
    bb18:	9301      	str	r3, [sp, #4]
    bb1a:	9300      	str	r3, [sp, #0]
    bb1c:	4a10      	ldr	r2, [pc, #64]	; (bb60 <pdu_node_tx_release+0x68>)
    bb1e:	4b11      	ldr	r3, [pc, #68]	; (bb64 <pdu_node_tx_release+0x6c>)
    bb20:	4911      	ldr	r1, [pc, #68]	; (bb68 <pdu_node_tx_release+0x70>)
    bb22:	4812      	ldr	r0, [pc, #72]	; (bb6c <pdu_node_tx_release+0x74>)
    bb24:	f7f5 fa32 	bl	f8c <printk>
    bb28:	4040      	eors	r0, r0
    bb2a:	f380 8811 	msr	BASEPRI, r0
    bb2e:	f04f 0004 	mov.w	r0, #4
    bb32:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    bb34:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    bb38:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    bb3c:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    bb40:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    bb44:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    bb48:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    bb4a:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    bb4e:	b003      	add	sp, #12
    bb50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    bb54:	f006 b8a2 	b.w	11c9c <radio_event_callback>
    bb58:	200008f0 	.word	0x200008f0
    bb5c:	000155c5 	.word	0x000155c5
    bb60:	0001699e 	.word	0x0001699e
    bb64:	00018728 	.word	0x00018728
    bb68:	000169ed 	.word	0x000169ed
    bb6c:	0001902f 	.word	0x0001902f

0000bb70 <packet_tx_enqueue>:
{
    bb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    bb74:	4c24      	ldr	r4, [pc, #144]	; (bc08 <packet_tx_enqueue+0x98>)
{
    bb76:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    bb78:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    bb7a:	b12e      	cbz	r6, bb88 <packet_tx_enqueue+0x18>
    bb7c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    bb80:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    bb84:	429a      	cmp	r2, r3
    bb86:	d101      	bne.n	bb8c <packet_tx_enqueue+0x1c>
    bb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    bb8c:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    bb90:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bb94:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    bb98:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    bb9c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bba0:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    bba4:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    bba6:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bba8:	f7fc f854 	bl	7c54 <mem_get>
    bbac:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    bbae:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    bbb2:	8c1a      	ldrh	r2, [r3, #32]
    bbb4:	4282      	cmp	r2, r0
    bbb6:	d11f      	bne.n	bbf8 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    bbb8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    bbbc:	b942      	cbnz	r2, bbd0 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    bbbe:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    bbc2:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    bbc6:	b91a      	cbnz	r2, bbd0 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    bbc8:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    bbcc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    bbd0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    bbd4:	b102      	cbz	r2, bbd8 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    bbd6:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    bbd8:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    bbdc:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    bbe0:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    bbe4:	3301      	adds	r3, #1
    bbe6:	b2db      	uxtb	r3, r3
			first = 0;
    bbe8:	429a      	cmp	r2, r3
    bbea:	bf08      	it	eq
    bbec:	2300      	moveq	r3, #0
    bbee:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    bbf0:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    bbf4:	b2f6      	uxtb	r6, r6
    bbf6:	e7c0      	b.n	bb7a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    bbf8:	792b      	ldrb	r3, [r5, #4]
    bbfa:	f367 0301 	bfi	r3, r7, #0, #2
    bbfe:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    bc00:	4629      	mov	r1, r5
    bc02:	f7ff ff79 	bl	baf8 <pdu_node_tx_release>
    bc06:	e7e9      	b.n	bbdc <packet_tx_enqueue+0x6c>
    bc08:	200008f0 	.word	0x200008f0

0000bc0c <connection_release>:
{
    bc0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    bc0e:	2201      	movs	r2, #1
{
    bc10:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    bc12:	4611      	mov	r1, r2
    bc14:	2000      	movs	r0, #0
    bc16:	f7fc f88b 	bl	7d30 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bc1a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    bc1e:	2100      	movs	r1, #0
    bc20:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bc24:	3207      	adds	r2, #7
	ticker_status =
    bc26:	9300      	str	r3, [sp, #0]
    bc28:	4608      	mov	r0, r1
    bc2a:	4b3e      	ldr	r3, [pc, #248]	; (bd24 <connection_release+0x118>)
    bc2c:	b2d2      	uxtb	r2, r2
    bc2e:	f7fc ff03 	bl	8a38 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc32:	f030 0102 	bics.w	r1, r0, #2
    bc36:	d00e      	beq.n	bc56 <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc38:	4b3b      	ldr	r3, [pc, #236]	; (bd28 <connection_release+0x11c>)
    bc3a:	9301      	str	r3, [sp, #4]
    bc3c:	9300      	str	r3, [sp, #0]
    bc3e:	4a3b      	ldr	r2, [pc, #236]	; (bd2c <connection_release+0x120>)
    bc40:	4b3b      	ldr	r3, [pc, #236]	; (bd30 <connection_release+0x124>)
    bc42:	493c      	ldr	r1, [pc, #240]	; (bd34 <connection_release+0x128>)
    bc44:	483c      	ldr	r0, [pc, #240]	; (bd38 <connection_release+0x12c>)
    bc46:	f7f5 f9a1 	bl	f8c <printk>
    bc4a:	4040      	eors	r0, r0
    bc4c:	f380 8811 	msr	BASEPRI, r0
    bc50:	f04f 0004 	mov.w	r0, #4
    bc54:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    bc56:	4b39      	ldr	r3, [pc, #228]	; (bd3c <connection_release+0x130>)
    bc58:	7d1a      	ldrb	r2, [r3, #20]
    bc5a:	2a05      	cmp	r2, #5
    bc5c:	461d      	mov	r5, r3
    bc5e:	d11b      	bne.n	bc98 <connection_release+0x8c>
					  conn->handle))) {
    bc60:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    bc62:	7c18      	ldrb	r0, [r3, #16]
    bc64:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    bc66:	4290      	cmp	r0, r2
    bc68:	d116      	bne.n	bc98 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    bc6a:	7419      	strb	r1, [r3, #16]
		ticker_status =
    bc6c:	f242 23fb 	movw	r3, #8955	; 0x22fb
    bc70:	9300      	str	r3, [sp, #0]
    bc72:	2201      	movs	r2, #1
    bc74:	4b2b      	ldr	r3, [pc, #172]	; (bd24 <connection_release+0x118>)
    bc76:	4608      	mov	r0, r1
    bc78:	f7fc fede 	bl	8a38 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc7c:	f030 0202 	bics.w	r2, r0, #2
    bc80:	d1da      	bne.n	bc38 <connection_release+0x2c>
		ticker_status =
    bc82:	f242 3302 	movw	r3, #8962	; 0x2302
    bc86:	9300      	str	r3, [sp, #0]
    bc88:	4611      	mov	r1, r2
    bc8a:	4b26      	ldr	r3, [pc, #152]	; (bd24 <connection_release+0x118>)
    bc8c:	4610      	mov	r0, r2
    bc8e:	f7fc fed3 	bl	8a38 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc92:	f030 0302 	bics.w	r3, r0, #2
    bc96:	d1cf      	bne.n	bc38 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    bc98:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    bc9c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    bca0:	4299      	cmp	r1, r3
    bca2:	d003      	beq.n	bcac <connection_release+0xa0>
    bca4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    bca8:	4299      	cmp	r1, r3
    bcaa:	d101      	bne.n	bcb0 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    bcac:	4e24      	ldr	r6, [pc, #144]	; (bd40 <connection_release+0x134>)
    bcae:	e012      	b.n	bcd6 <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    bcb0:	790b      	ldrb	r3, [r1, #4]
    bcb2:	f36f 0301 	bfc	r3, #0, #2
    bcb6:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    bcb8:	680b      	ldr	r3, [r1, #0]
    bcba:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    bcbe:	8c20      	ldrh	r0, [r4, #32]
    bcc0:	f7ff ff1a 	bl	baf8 <pdu_node_tx_release>
    bcc4:	e7e8      	b.n	bc98 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    bcc6:	6803      	ldr	r3, [r0, #0]
    bcc8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    bccc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    bcd0:	4631      	mov	r1, r6
    bcd2:	f7fb ffa4 	bl	7c1e <mem_release>
	while ((conn->pkt_tx_head) &&
    bcd6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    bcda:	b118      	cbz	r0, bce4 <connection_release+0xd8>
    bcdc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    bce0:	4298      	cmp	r0, r3
    bce2:	d1f0      	bne.n	bcc6 <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    bce4:	2300      	movs	r3, #0
    bce6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    bcea:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    bcee:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    bcf2:	b951      	cbnz	r1, bd0a <connection_release+0xfe>
	conn->handle = 0xffff;
    bcf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bcf8:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    bcfa:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    bcfe:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    bd00:	bf08      	it	eq
    bd02:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    bd06:	b002      	add	sp, #8
    bd08:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    bd0a:	790b      	ldrb	r3, [r1, #4]
    bd0c:	f36f 0301 	bfc	r3, #0, #2
    bd10:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    bd12:	680b      	ldr	r3, [r1, #0]
    bd14:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    bd18:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    bd1c:	8c20      	ldrh	r0, [r4, #32]
    bd1e:	f7ff feeb 	bl	baf8 <pdu_node_tx_release>
    bd22:	e7e4      	b.n	bcee <connection_release+0xe2>
    bd24:	0000b6fd 	.word	0x0000b6fd
    bd28:	000155c5 	.word	0x000155c5
    bd2c:	0001699e 	.word	0x0001699e
    bd30:	0001873c 	.word	0x0001873c
    bd34:	000169ed 	.word	0x000169ed
    bd38:	00018825 	.word	0x00018825
    bd3c:	200008f0 	.word	0x200008f0
    bd40:	20000a4c 	.word	0x20000a4c

0000bd44 <chan_set>:
	switch (chan) {
    bd44:	2826      	cmp	r0, #38	; 0x26
{
    bd46:	b513      	push	{r0, r1, r4, lr}
    bd48:	4604      	mov	r4, r0
	switch (chan) {
    bd4a:	d00c      	beq.n	bd66 <chan_set+0x22>
    bd4c:	2827      	cmp	r0, #39	; 0x27
    bd4e:	d00c      	beq.n	bd6a <chan_set+0x26>
    bd50:	2825      	cmp	r0, #37	; 0x25
    bd52:	d10c      	bne.n	bd6e <chan_set+0x2a>
		radio_freq_chan_set(2);
    bd54:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    bd56:	f007 f8bd 	bl	12ed4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    bd5a:	4620      	mov	r0, r4
}
    bd5c:	b002      	add	sp, #8
    bd5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    bd62:	f007 b8bd 	b.w	12ee0 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    bd66:	201a      	movs	r0, #26
    bd68:	e7f5      	b.n	bd56 <chan_set+0x12>
		radio_freq_chan_set(80);
    bd6a:	2050      	movs	r0, #80	; 0x50
    bd6c:	e7f3      	b.n	bd56 <chan_set+0x12>
		if (chan < 11) {
    bd6e:	280a      	cmp	r0, #10
    bd70:	d802      	bhi.n	bd78 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    bd72:	3002      	adds	r0, #2
    bd74:	0040      	lsls	r0, r0, #1
    bd76:	e7ee      	b.n	bd56 <chan_set+0x12>
		} else if (chan < 40) {
    bd78:	2827      	cmp	r0, #39	; 0x27
    bd7a:	d801      	bhi.n	bd80 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    bd7c:	3003      	adds	r0, #3
    bd7e:	e7f9      	b.n	bd74 <chan_set+0x30>
			LL_ASSERT(0);
    bd80:	4b07      	ldr	r3, [pc, #28]	; (bda0 <chan_set+0x5c>)
    bd82:	9301      	str	r3, [sp, #4]
    bd84:	9300      	str	r3, [sp, #0]
    bd86:	4a07      	ldr	r2, [pc, #28]	; (bda4 <chan_set+0x60>)
    bd88:	4b07      	ldr	r3, [pc, #28]	; (bda8 <chan_set+0x64>)
    bd8a:	4908      	ldr	r1, [pc, #32]	; (bdac <chan_set+0x68>)
    bd8c:	4808      	ldr	r0, [pc, #32]	; (bdb0 <chan_set+0x6c>)
    bd8e:	f7f5 f8fd 	bl	f8c <printk>
    bd92:	4040      	eors	r0, r0
    bd94:	f380 8811 	msr	BASEPRI, r0
    bd98:	f04f 0004 	mov.w	r0, #4
    bd9c:	df02      	svc	2
    bd9e:	bf00      	nop
    bda0:	000155c5 	.word	0x000155c5
    bda4:	0001699e 	.word	0x0001699e
    bda8:	00018612 	.word	0x00018612
    bdac:	000169ed 	.word	0x000169ed
    bdb0:	00016912 	.word	0x00016912

0000bdb4 <adv_setup>:
{
    bdb4:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    bdb6:	4c31      	ldr	r4, [pc, #196]	; (be7c <adv_setup+0xc8>)
    bdb8:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    bdbc:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    bdc0:	429a      	cmp	r2, r3
    bdc2:	d051      	beq.n	be68 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    bdc4:	3301      	adds	r3, #1
    bdc6:	b2db      	uxtb	r3, r3
			first = 0;
    bdc8:	2b02      	cmp	r3, #2
    bdca:	bf08      	it	eq
    bdcc:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    bdce:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    bdd2:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    bdd4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bdd8:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    bddc:	4299      	cmp	r1, r3
    bdde:	d007      	beq.n	bdf0 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    bde0:	3301      	adds	r3, #1
    bde2:	b2db      	uxtb	r3, r3
			first = 0;
    bde4:	2b02      	cmp	r3, #2
    bde6:	bf08      	it	eq
    bde8:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    bdea:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    bdee:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    bdf0:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    bdf4:	2327      	movs	r3, #39	; 0x27
    bdf6:	212b      	movs	r1, #43	; 0x2b
    bdf8:	fb13 1505 	smlabb	r5, r3, r5, r1
    bdfc:	1966      	adds	r6, r4, r5
	if (upd) {
    bdfe:	b142      	cbz	r2, be12 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    be00:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    be04:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    be08:	2206      	movs	r2, #6
    be0a:	1cb1      	adds	r1, r6, #2
    be0c:	307d      	adds	r0, #125	; 0x7d
    be0e:	f7f5 fef5 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    be12:	4630      	mov	r0, r6
    be14:	f007 f8c2 	bl	12f9c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    be18:	5d63      	ldrb	r3, [r4, r5]
    be1a:	f003 030f 	and.w	r3, r3, #15
    be1e:	2b02      	cmp	r3, #2
    be20:	d024      	beq.n	be6c <adv_setup+0xb8>
    be22:	2b07      	cmp	r3, #7
    be24:	d022      	beq.n	be6c <adv_setup+0xb8>
		_radio.state = STATE_TX;
    be26:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    be28:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    be2a:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    be2c:	f007 f9cc 	bl	131c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    be30:	2000      	movs	r0, #0
    be32:	f007 f92d 	bl	13090 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    be36:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    be3a:	f3c3 0202 	ubfx	r2, r3, #0, #3
    be3e:	b2d3      	uxtb	r3, r2
    be40:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    be42:	2000      	movs	r0, #0
    be44:	07ce      	lsls	r6, r1, #31
    be46:	f100 0501 	add.w	r5, r0, #1
    be4a:	d514      	bpl.n	be76 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    be4c:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    be4e:	4013      	ands	r3, r2
    be50:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    be54:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    be56:	f363 0202 	bfi	r2, r3, #0, #3
    be5a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    be5e:	3025      	adds	r0, #37	; 0x25
}
    be60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    be64:	f7ff bf6e 	b.w	bd44 <chan_set>
	u8_t upd = 0;
    be68:	2200      	movs	r2, #0
    be6a:	e7b3      	b.n	bdd4 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    be6c:	2303      	movs	r3, #3
    be6e:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    be70:	f007 f924 	bl	130bc <radio_switch_complete_and_disable>
    be74:	e7df      	b.n	be36 <adv_setup+0x82>
		bitmap >>= 1;
    be76:	0849      	lsrs	r1, r1, #1
    be78:	4628      	mov	r0, r5
    be7a:	e7e3      	b.n	be44 <adv_setup+0x90>
    be7c:	200008f0 	.word	0x200008f0

0000be80 <sched_after_mstr_free_offset_get>:
{
    be80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    be82:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    be84:	aa04      	add	r2, sp, #16
{
    be86:	461c      	mov	r4, r3
    be88:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    be8a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    be8e:	3127      	adds	r1, #39	; 0x27
    be90:	2001      	movs	r0, #1
    be92:	f7ff fa5d 	bl	b350 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    be96:	6823      	ldr	r3, [r4, #0]
    be98:	b363      	cbz	r3, bef4 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    be9a:	9803      	ldr	r0, [sp, #12]
    be9c:	1b83      	subs	r3, r0, r6
    be9e:	021b      	lsls	r3, r3, #8
    bea0:	d50e      	bpl.n	bec0 <sched_after_mstr_free_offset_get+0x40>
    bea2:	4b19      	ldr	r3, [pc, #100]	; (bf08 <sched_after_mstr_free_offset_get+0x88>)
    bea4:	9301      	str	r3, [sp, #4]
    bea6:	9300      	str	r3, [sp, #0]
    bea8:	4a18      	ldr	r2, [pc, #96]	; (bf0c <sched_after_mstr_free_offset_get+0x8c>)
    beaa:	4b19      	ldr	r3, [pc, #100]	; (bf10 <sched_after_mstr_free_offset_get+0x90>)
    beac:	4919      	ldr	r1, [pc, #100]	; (bf14 <sched_after_mstr_free_offset_get+0x94>)
    beae:	481a      	ldr	r0, [pc, #104]	; (bf18 <sched_after_mstr_free_offset_get+0x98>)
    beb0:	f7f5 f86c 	bl	f8c <printk>
    beb4:	4040      	eors	r0, r0
    beb6:	f380 8811 	msr	BASEPRI, r0
    beba:	f04f 0004 	mov.w	r0, #4
    bebe:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    bec0:	4631      	mov	r1, r6
    bec2:	f7fc fe8b 	bl	8bdc <ticker_ticks_diff_get>
    bec6:	4602      	mov	r2, r0
    bec8:	4814      	ldr	r0, [pc, #80]	; (bf1c <sched_after_mstr_free_offset_get+0x9c>)
    beca:	2307      	movs	r3, #7
    becc:	fba2 0100 	umull	r0, r1, r2, r0
    bed0:	fb03 1102 	mla	r1, r3, r2, r1
    bed4:	a30a      	add	r3, pc, #40	; (adr r3, bf00 <sched_after_mstr_free_offset_get+0x80>)
    bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
    beda:	f7f4 f99b 	bl	214 <__aeabi_uldivmod>
    bede:	6823      	ldr	r3, [r4, #0]
    bee0:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    bee2:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    bee4:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    bee6:	db05      	blt.n	bef4 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    bee8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    beec:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    beee:	6823      	ldr	r3, [r4, #0]
    bef0:	4298      	cmp	r0, r3
    bef2:	d301      	bcc.n	bef8 <sched_after_mstr_free_offset_get+0x78>
}
    bef4:	b004      	add	sp, #16
    bef6:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    bef8:	1a1b      	subs	r3, r3, r0
    befa:	6023      	str	r3, [r4, #0]
    befc:	e7f7      	b.n	beee <sched_after_mstr_free_offset_get+0x6e>
    befe:	bf00      	nop
    bf00:	3b9aca00 	.word	0x3b9aca00
    bf04:	00000000 	.word	0x00000000
    bf08:	000155c5 	.word	0x000155c5
    bf0c:	0001699e 	.word	0x0001699e
    bf10:	000185a4 	.word	0x000185a4
    bf14:	000169ed 	.word	0x000169ed
    bf18:	0001928b 	.word	0x0001928b
    bf1c:	1afd498d 	.word	0x1afd498d

0000bf20 <mayfly_sched_win_offset_use>:
{
    bf20:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    bf22:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    bf26:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    bf28:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    bf2c:	68c1      	ldr	r1, [r0, #12]
    bf2e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    bf30:	f7ff ffa6 	bl	be80 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bf34:	a902      	add	r1, sp, #8
    bf36:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    bf3a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bf3e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    bf42:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    bf46:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bf48:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    bf4c:	f7f5 fe56 	bl	1bfc <memcpy>
}
    bf50:	b002      	add	sp, #8
    bf52:	bd10      	pop	{r4, pc}

0000bf54 <mayfly_sched_after_mstr_free_offset_get>:
{
    bf54:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    bf56:	4c05      	ldr	r4, [pc, #20]	; (bf6c <mayfly_sched_after_mstr_free_offset_get+0x18>)
    bf58:	4602      	mov	r2, r0
    bf5a:	f504 7382 	add.w	r3, r4, #260	; 0x104
    bf5e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    bf62:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    bf66:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    bf68:	f7ff bf8a 	b.w	be80 <sched_after_mstr_free_offset_get>
    bf6c:	200008f0 	.word	0x200008f0

0000bf70 <terminate_ind_rx_enqueue>:
{
    bf70:	b513      	push	{r0, r1, r4, lr}
    bf72:	4603      	mov	r3, r0
    bf74:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    bf76:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    bf7a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    bf7e:	b970      	cbnz	r0, bf9e <terminate_ind_rx_enqueue+0x2e>
    bf80:	4b16      	ldr	r3, [pc, #88]	; (bfdc <terminate_ind_rx_enqueue+0x6c>)
    bf82:	9301      	str	r3, [sp, #4]
    bf84:	9300      	str	r3, [sp, #0]
    bf86:	4a16      	ldr	r2, [pc, #88]	; (bfe0 <terminate_ind_rx_enqueue+0x70>)
    bf88:	4b16      	ldr	r3, [pc, #88]	; (bfe4 <terminate_ind_rx_enqueue+0x74>)
    bf8a:	4917      	ldr	r1, [pc, #92]	; (bfe8 <terminate_ind_rx_enqueue+0x78>)
    bf8c:	4817      	ldr	r0, [pc, #92]	; (bfec <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    bf8e:	f7f4 fffd 	bl	f8c <printk>
    bf92:	4040      	eors	r0, r0
    bf94:	f380 8811 	msr	BASEPRI, r0
    bf98:	f04f 0004 	mov.w	r0, #4
    bf9c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    bf9e:	8c1c      	ldrh	r4, [r3, #32]
    bfa0:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    bfa4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    bfa8:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    bfaa:	4a11      	ldr	r2, [pc, #68]	; (bff0 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    bfac:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    bfb0:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    bfb4:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    bfb8:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    bfbc:	f7fb fe6f 	bl	7c9e <memq_enqueue>
	LL_ASSERT(link);
    bfc0:	b938      	cbnz	r0, bfd2 <terminate_ind_rx_enqueue+0x62>
    bfc2:	4b06      	ldr	r3, [pc, #24]	; (bfdc <terminate_ind_rx_enqueue+0x6c>)
    bfc4:	9301      	str	r3, [sp, #4]
    bfc6:	9300      	str	r3, [sp, #0]
    bfc8:	4a05      	ldr	r2, [pc, #20]	; (bfe0 <terminate_ind_rx_enqueue+0x70>)
    bfca:	4b06      	ldr	r3, [pc, #24]	; (bfe4 <terminate_ind_rx_enqueue+0x74>)
    bfcc:	4906      	ldr	r1, [pc, #24]	; (bfe8 <terminate_ind_rx_enqueue+0x78>)
    bfce:	4809      	ldr	r0, [pc, #36]	; (bff4 <terminate_ind_rx_enqueue+0x84>)
    bfd0:	e7dd      	b.n	bf8e <terminate_ind_rx_enqueue+0x1e>
}
    bfd2:	b002      	add	sp, #8
    bfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    bfd8:	f005 be60 	b.w	11c9c <radio_event_callback>
    bfdc:	000155c5 	.word	0x000155c5
    bfe0:	0001699e 	.word	0x0001699e
    bfe4:	0001874f 	.word	0x0001874f
    bfe8:	000169ed 	.word	0x000169ed
    bfec:	00019311 	.word	0x00019311
    bff0:	200008f0 	.word	0x200008f0
    bff4:	000187ff 	.word	0x000187ff

0000bff8 <prepare_normal_set>:
{
    bff8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    bffa:	6804      	ldr	r4, [r0, #0]
    bffc:	2c00      	cmp	r4, #0
{
    bffe:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    c000:	da26      	bge.n	c050 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    c002:	6843      	ldr	r3, [r0, #4]
    c004:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    c006:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    c008:	429d      	cmp	r5, r3
    c00a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    c00e:	bf34      	ite	cc
    c010:	1ae4      	subcc	r4, r4, r3
    c012:	1b64      	subcs	r4, r4, r5
		ticker_status =
    c014:	4b0f      	ldr	r3, [pc, #60]	; (c054 <prepare_normal_set+0x5c>)
    c016:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c018:	b2a4      	uxth	r4, r4
		ticker_status =
    c01a:	2300      	movs	r3, #0
    c01c:	9304      	str	r3, [sp, #16]
    c01e:	9303      	str	r3, [sp, #12]
    c020:	9302      	str	r3, [sp, #8]
    c022:	4618      	mov	r0, r3
    c024:	9401      	str	r4, [sp, #4]
    c026:	9400      	str	r4, [sp, #0]
    c028:	f7fc fcb8 	bl	899c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c02c:	f030 0302 	bics.w	r3, r0, #2
    c030:	d00e      	beq.n	c050 <prepare_normal_set+0x58>
    c032:	4b09      	ldr	r3, [pc, #36]	; (c058 <prepare_normal_set+0x60>)
    c034:	9301      	str	r3, [sp, #4]
    c036:	9300      	str	r3, [sp, #0]
    c038:	4a08      	ldr	r2, [pc, #32]	; (c05c <prepare_normal_set+0x64>)
    c03a:	4b09      	ldr	r3, [pc, #36]	; (c060 <prepare_normal_set+0x68>)
    c03c:	4909      	ldr	r1, [pc, #36]	; (c064 <prepare_normal_set+0x6c>)
    c03e:	480a      	ldr	r0, [pc, #40]	; (c068 <prepare_normal_set+0x70>)
    c040:	f7f4 ffa4 	bl	f8c <printk>
    c044:	4040      	eors	r0, r0
    c046:	f380 8811 	msr	BASEPRI, r0
    c04a:	f04f 0004 	mov.w	r0, #4
    c04e:	df02      	svc	2
}
    c050:	b009      	add	sp, #36	; 0x24
    c052:	bd30      	pop	{r4, r5, pc}
    c054:	0000a7a5 	.word	0x0000a7a5
    c058:	000155c5 	.word	0x000155c5
    c05c:	0001699e 	.word	0x0001699e
    c060:	0001855c 	.word	0x0001855c
    c064:	000169ed 	.word	0x000169ed
    c068:	00018825 	.word	0x00018825
    c06c:	00000000 	.word	0x00000000

0000c070 <mayfly_xtal_stop_calc>:
{
    c070:	b570      	push	{r4, r5, r6, lr}
    c072:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c074:	2302      	movs	r3, #2
    c076:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    c078:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    c07a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c07c:	4e7e      	ldr	r6, [pc, #504]	; (c278 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    c07e:	4d7f      	ldr	r5, [pc, #508]	; (c27c <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    c080:	930a      	str	r3, [sp, #40]	; 0x28
{
    c082:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    c084:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    c086:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    c08a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c08c:	ab09      	add	r3, sp, #36	; 0x24
    c08e:	9302      	str	r3, [sp, #8]
    c090:	ab0c      	add	r3, sp, #48	; 0x30
    c092:	9300      	str	r3, [sp, #0]
    c094:	9601      	str	r6, [sp, #4]
    c096:	ab0d      	add	r3, sp, #52	; 0x34
    c098:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    c09c:	2101      	movs	r1, #1
    c09e:	2000      	movs	r0, #0
    c0a0:	f7fc fd06 	bl	8ab0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    c0a4:	2802      	cmp	r0, #2
    c0a6:	d014      	beq.n	c0d2 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    c0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0aa:	b1b3      	cbz	r3, c0da <mayfly_xtal_stop_calc+0x6a>
    c0ac:	4b74      	ldr	r3, [pc, #464]	; (c280 <mayfly_xtal_stop_calc+0x210>)
    c0ae:	9301      	str	r3, [sp, #4]
    c0b0:	9300      	str	r3, [sp, #0]
    c0b2:	4a74      	ldr	r2, [pc, #464]	; (c284 <mayfly_xtal_stop_calc+0x214>)
    c0b4:	4b74      	ldr	r3, [pc, #464]	; (c288 <mayfly_xtal_stop_calc+0x218>)
    c0b6:	4975      	ldr	r1, [pc, #468]	; (c28c <mayfly_xtal_stop_calc+0x21c>)
    c0b8:	4875      	ldr	r0, [pc, #468]	; (c290 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    c0ba:	f7f4 ff67 	bl	f8c <printk>
    c0be:	4040      	eors	r0, r0
    c0c0:	f380 8811 	msr	BASEPRI, r0
    c0c4:	f04f 0004 	mov.w	r0, #4
    c0c8:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    c0ca:	2101      	movs	r1, #1
    c0cc:	2000      	movs	r0, #0
    c0ce:	f7fc fd6d 	bl	8bac <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    c0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0d4:	2b02      	cmp	r3, #2
    c0d6:	d0f8      	beq.n	c0ca <mayfly_xtal_stop_calc+0x5a>
    c0d8:	e7e6      	b.n	c0a8 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    c0da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    c0de:	2bff      	cmp	r3, #255	; 0xff
    c0e0:	d004      	beq.n	c0ec <mayfly_xtal_stop_calc+0x7c>
    c0e2:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c0e6:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    c0e8:	4293      	cmp	r3, r2
    c0ea:	dacf      	bge.n	c08c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    c0ec:	1f5a      	subs	r2, r3, #5
    c0ee:	b2d2      	uxtb	r2, r2
    c0f0:	2af9      	cmp	r2, #249	; 0xf9
    c0f2:	d805      	bhi.n	c100 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    c0f4:	4a61      	ldr	r2, [pc, #388]	; (c27c <mayfly_xtal_stop_calc+0x20c>)
    c0f6:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c0fa:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    c0fc:	4293      	cmp	r3, r2
    c0fe:	db05      	blt.n	c10c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    c100:	2100      	movs	r1, #0
    c102:	2001      	movs	r0, #1
    c104:	f7fe fe92 	bl	ae2c <mayfly_xtal_retain>
}
    c108:	b00e      	add	sp, #56	; 0x38
    c10a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    c10c:	a90a      	add	r1, sp, #40	; 0x28
    c10e:	b2e0      	uxtb	r0, r4
    c110:	f7ff fbf4 	bl	b8fc <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    c114:	b938      	cbnz	r0, c126 <mayfly_xtal_stop_calc+0xb6>
    c116:	4b5a      	ldr	r3, [pc, #360]	; (c280 <mayfly_xtal_stop_calc+0x210>)
    c118:	9301      	str	r3, [sp, #4]
    c11a:	9300      	str	r3, [sp, #0]
    c11c:	4a59      	ldr	r2, [pc, #356]	; (c284 <mayfly_xtal_stop_calc+0x214>)
    c11e:	4b5a      	ldr	r3, [pc, #360]	; (c288 <mayfly_xtal_stop_calc+0x218>)
    c120:	495a      	ldr	r1, [pc, #360]	; (c28c <mayfly_xtal_stop_calc+0x21c>)
    c122:	485c      	ldr	r0, [pc, #368]	; (c294 <mayfly_xtal_stop_calc+0x224>)
    c124:	e7c9      	b.n	c0ba <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    c126:	6803      	ldr	r3, [r0, #0]
    c128:	6844      	ldr	r4, [r0, #4]
    c12a:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    c12c:	bfb8      	it	lt
    c12e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    c130:	429c      	cmp	r4, r3
    c132:	bf38      	it	cc
    c134:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    c136:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    c138:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    c13c:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    c13e:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    c140:	f7ff fbdc 	bl	b8fc <hdr_conn_get>
	LL_ASSERT(hdr_next);
    c144:	4605      	mov	r5, r0
    c146:	b938      	cbnz	r0, c158 <mayfly_xtal_stop_calc+0xe8>
    c148:	4b4d      	ldr	r3, [pc, #308]	; (c280 <mayfly_xtal_stop_calc+0x210>)
    c14a:	9301      	str	r3, [sp, #4]
    c14c:	9300      	str	r3, [sp, #0]
    c14e:	4a4d      	ldr	r2, [pc, #308]	; (c284 <mayfly_xtal_stop_calc+0x214>)
    c150:	4b4d      	ldr	r3, [pc, #308]	; (c288 <mayfly_xtal_stop_calc+0x218>)
    c152:	494e      	ldr	r1, [pc, #312]	; (c28c <mayfly_xtal_stop_calc+0x21c>)
    c154:	4850      	ldr	r0, [pc, #320]	; (c298 <mayfly_xtal_stop_calc+0x228>)
    c156:	e7b0      	b.n	c0ba <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    c158:	6886      	ldr	r6, [r0, #8]
    c15a:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    c15c:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    c15e:	429e      	cmp	r6, r3
    c160:	bf38      	it	cc
    c162:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    c164:	2a00      	cmp	r2, #0
    c166:	da05      	bge.n	c174 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    c168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    c16a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    c16e:	4433      	add	r3, r6
    c170:	1a9b      	subs	r3, r3, r2
    c172:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    c174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    c176:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    c17a:	4293      	cmp	r3, r2
    c17c:	d20a      	bcs.n	c194 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    c17e:	2100      	movs	r1, #0
    c180:	2001      	movs	r0, #1
    c182:	f7fe fe53 	bl	ae2c <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    c186:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c18a:	2101      	movs	r1, #1
    c18c:	4628      	mov	r0, r5
    c18e:	f7ff ff33 	bl	bff8 <prepare_normal_set>
    c192:	e7b9      	b.n	c108 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    c194:	2101      	movs	r1, #1
    c196:	4608      	mov	r0, r1
    c198:	f7fe fe48 	bl	ae2c <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    c19c:	682b      	ldr	r3, [r5, #0]
    c19e:	2b00      	cmp	r3, #0
    c1a0:	db1c      	blt.n	c1dc <mayfly_xtal_stop_calc+0x16c>
    c1a2:	429e      	cmp	r6, r3
    c1a4:	d21a      	bcs.n	c1dc <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    c1a6:	1b9b      	subs	r3, r3, r6
			ticker_status =
    c1a8:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c1aa:	b29b      	uxth	r3, r3
			ticker_status =
    c1ac:	493b      	ldr	r1, [pc, #236]	; (c29c <mayfly_xtal_stop_calc+0x22c>)
    c1ae:	9105      	str	r1, [sp, #20]
    c1b0:	9302      	str	r3, [sp, #8]
    c1b2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c1b6:	9506      	str	r5, [sp, #24]
    c1b8:	9004      	str	r0, [sp, #16]
    c1ba:	9003      	str	r0, [sp, #12]
    c1bc:	9001      	str	r0, [sp, #4]
    c1be:	9000      	str	r0, [sp, #0]
    c1c0:	2101      	movs	r1, #1
    c1c2:	f7fc fbeb 	bl	899c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c1c6:	f030 0302 	bics.w	r3, r0, #2
    c1ca:	d007      	beq.n	c1dc <mayfly_xtal_stop_calc+0x16c>
    c1cc:	4b2c      	ldr	r3, [pc, #176]	; (c280 <mayfly_xtal_stop_calc+0x210>)
    c1ce:	9301      	str	r3, [sp, #4]
    c1d0:	9300      	str	r3, [sp, #0]
    c1d2:	4a2c      	ldr	r2, [pc, #176]	; (c284 <mayfly_xtal_stop_calc+0x214>)
    c1d4:	4b2c      	ldr	r3, [pc, #176]	; (c288 <mayfly_xtal_stop_calc+0x218>)
    c1d6:	492d      	ldr	r1, [pc, #180]	; (c28c <mayfly_xtal_stop_calc+0x21c>)
    c1d8:	4831      	ldr	r0, [pc, #196]	; (c2a0 <mayfly_xtal_stop_calc+0x230>)
    c1da:	e76e      	b.n	c0ba <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    c1dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c1de:	2e00      	cmp	r6, #0
    c1e0:	d092      	beq.n	c108 <mayfly_xtal_stop_calc+0x98>
    c1e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c1e4:	2d00      	cmp	r5, #0
    c1e6:	d08f      	beq.n	c108 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    c1e8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    c1ea:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    c1ec:	429a      	cmp	r2, r3
    c1ee:	d18b      	bne.n	c108 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    c1f0:	482c      	ldr	r0, [pc, #176]	; (c2a4 <mayfly_xtal_stop_calc+0x234>)
    c1f2:	b292      	uxth	r2, r2
    c1f4:	fba2 0100 	umull	r0, r1, r2, r0
    c1f8:	f240 1323 	movw	r3, #291	; 0x123
    c1fc:	fb03 1102 	mla	r1, r3, r2, r1
    c200:	a31b      	add	r3, pc, #108	; (adr r3, c270 <mayfly_xtal_stop_calc+0x200>)
    c202:	e9d3 2300 	ldrd	r2, r3, [r3]
    c206:	f7f4 f805 	bl	214 <__aeabi_uldivmod>
    c20a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c20c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    c210:	2200      	movs	r2, #0
    c212:	4298      	cmp	r0, r3
    c214:	d318      	bcc.n	c248 <mayfly_xtal_stop_calc+0x1d8>
    c216:	b102      	cbz	r2, c21a <mayfly_xtal_stop_calc+0x1aa>
    c218:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    c21a:	f996 201d 	ldrsb.w	r2, [r6, #29]
    c21e:	2a00      	cmp	r2, #0
    c220:	f995 201d 	ldrsb.w	r2, [r5, #29]
    c224:	da13      	bge.n	c24e <mayfly_xtal_stop_calc+0x1de>
    c226:	2a00      	cmp	r2, #0
    c228:	f6ff af6e 	blt.w	c108 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    c22c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    c22e:	429c      	cmp	r4, r3
    c230:	f67f af6a 	bls.w	c108 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    c234:	4630      	mov	r0, r6
    c236:	f7fe faff 	bl	a838 <conn_update_req>
				if (status == 2) {
    c23a:	2802      	cmp	r0, #2
    c23c:	f47f af64 	bne.w	c108 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    c240:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    c242:	f7fe faf9 	bl	a838 <conn_update_req>
    c246:	e75f      	b.n	c108 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    c248:	1a1b      	subs	r3, r3, r0
    c24a:	2201      	movs	r2, #1
    c24c:	e7e1      	b.n	c212 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    c24e:	2a00      	cmp	r2, #0
    c250:	f6bf af5a 	bge.w	c108 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    c254:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    c256:	429c      	cmp	r4, r3
    c258:	f67f af56 	bls.w	c108 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    c25c:	4628      	mov	r0, r5
    c25e:	f7fe faeb 	bl	a838 <conn_update_req>
				if (status == 2) {
    c262:	2802      	cmp	r0, #2
    c264:	f47f af50 	bne.w	c108 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    c268:	980a      	ldr	r0, [sp, #40]	; 0x28
    c26a:	e7ea      	b.n	c242 <mayfly_xtal_stop_calc+0x1d2>
    c26c:	f3af 8000 	nop.w
    c270:	1afd498d 	.word	0x1afd498d
    c274:	00000007 	.word	0x00000007
    c278:	0000a795 	.word	0x0000a795
    c27c:	200008f0 	.word	0x200008f0
    c280:	000155c5 	.word	0x000155c5
    c284:	0001699e 	.word	0x0001699e
    c288:	0001856f 	.word	0x0001856f
    c28c:	000169ed 	.word	0x000169ed
    c290:	000192e4 	.word	0x000192e4
    c294:	00018f88 	.word	0x00018f88
    c298:	00018fb2 	.word	0x00018fb2
    c29c:	0000a799 	.word	0x0000a799
    c2a0:	00018825 	.word	0x00018825
    c2a4:	09ce5400 	.word	0x09ce5400

0000c2a8 <preempt_calc>:
{
    c2a8:	b570      	push	{r4, r5, r6, lr}
    c2aa:	4614      	mov	r4, r2
    c2ac:	460e      	mov	r6, r1
    c2ae:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    c2b0:	f7fc fc92 	bl	8bd8 <ticker_ticks_now_get>
	u32_t diff =
    c2b4:	4621      	mov	r1, r4
    c2b6:	f7fc fc91 	bl	8bdc <ticker_ticks_diff_get>
	diff += 3;
    c2ba:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    c2bc:	2c09      	cmp	r4, #9
    c2be:	d90f      	bls.n	c2e0 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    c2c0:	2100      	movs	r1, #0
    c2c2:	4608      	mov	r0, r1
    c2c4:	f7fe fdb2 	bl	ae2c <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    c2c8:	4632      	mov	r2, r6
    c2ca:	2100      	movs	r1, #0
    c2cc:	4628      	mov	r0, r5
    c2ce:	f7ff fe93 	bl	bff8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    c2d2:	68ab      	ldr	r3, [r5, #8]
    c2d4:	441c      	add	r4, r3
		if (diff <
    c2d6:	2c26      	cmp	r4, #38	; 0x26
    c2d8:	d800      	bhi.n	c2dc <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    c2da:	60ac      	str	r4, [r5, #8]
		return 1;
    c2dc:	2001      	movs	r0, #1
}
    c2de:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    c2e0:	2000      	movs	r0, #0
    c2e2:	bd70      	pop	{r4, r5, r6, pc}

0000c2e4 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    c2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    c2e6:	ad02      	add	r5, sp, #8
    c2e8:	4b10      	ldr	r3, [pc, #64]	; (c32c <adv_scan_configure.constprop.30+0x48>)
    c2ea:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    c2ee:	4604      	mov	r4, r0
	radio_reset();
    c2f0:	f006 fdc0 	bl	12e74 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    c2f4:	2000      	movs	r0, #0
    c2f6:	f006 fde7 	bl	12ec8 <radio_tx_power_set>
	radio_isr_set(isr);
    c2fa:	480d      	ldr	r0, [pc, #52]	; (c330 <adv_scan_configure.constprop.30+0x4c>)
    c2fc:	f006 fd84 	bl	12e08 <radio_isr_set>
	radio_phy_set(phy, flags);
    c300:	2101      	movs	r1, #1
    c302:	4620      	mov	r0, r4
    c304:	f006 fdd0 	bl	12ea8 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    c308:	4628      	mov	r0, r5
    c30a:	f006 fdfb 	bl	12f04 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    c30e:	0062      	lsls	r2, r4, #1
    c310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    c314:	2125      	movs	r1, #37	; 0x25
    c316:	2008      	movs	r0, #8
    c318:	f006 fe0c 	bl	12f34 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c31c:	4905      	ldr	r1, [pc, #20]	; (c334 <adv_scan_configure.constprop.30+0x50>)
    c31e:	f240 605b 	movw	r0, #1627	; 0x65b
    c322:	f006 fe97 	bl	13054 <radio_crc_configure>
}
    c326:	b003      	add	sp, #12
    c328:	bd30      	pop	{r4, r5, pc}
    c32a:	bf00      	nop
    c32c:	8e89bed6 	.word	0x8e89bed6
    c330:	0000f291 	.word	0x0000f291
    c334:	00555555 	.word	0x00555555

0000c338 <event_scan>:
{
    c338:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    c33a:	4b62      	ldr	r3, [pc, #392]	; (c4c4 <event_scan+0x18c>)
    c33c:	7cda      	ldrb	r2, [r3, #19]
{
    c33e:	b08d      	sub	sp, #52	; 0x34
    c340:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    c342:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    c346:	461c      	mov	r4, r3
    c348:	b172      	cbz	r2, c368 <event_scan+0x30>
    c34a:	4b5f      	ldr	r3, [pc, #380]	; (c4c8 <event_scan+0x190>)
    c34c:	9301      	str	r3, [sp, #4]
    c34e:	9300      	str	r3, [sp, #0]
    c350:	4a5e      	ldr	r2, [pc, #376]	; (c4cc <event_scan+0x194>)
    c352:	4b5f      	ldr	r3, [pc, #380]	; (c4d0 <event_scan+0x198>)
    c354:	495f      	ldr	r1, [pc, #380]	; (c4d4 <event_scan+0x19c>)
    c356:	4860      	ldr	r0, [pc, #384]	; (c4d8 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    c358:	f7f4 fe18 	bl	f8c <printk>
    c35c:	4040      	eors	r0, r0
    c35e:	f380 8811 	msr	BASEPRI, r0
    c362:	f04f 0004 	mov.w	r0, #4
    c366:	df02      	svc	2
    c368:	7c1b      	ldrb	r3, [r3, #16]
    c36a:	b2db      	uxtb	r3, r3
    c36c:	2b06      	cmp	r3, #6
    c36e:	d007      	beq.n	c380 <event_scan+0x48>
    c370:	4b55      	ldr	r3, [pc, #340]	; (c4c8 <event_scan+0x190>)
    c372:	9301      	str	r3, [sp, #4]
    c374:	9300      	str	r3, [sp, #0]
    c376:	4a55      	ldr	r2, [pc, #340]	; (c4cc <event_scan+0x194>)
    c378:	4b55      	ldr	r3, [pc, #340]	; (c4d0 <event_scan+0x198>)
    c37a:	4956      	ldr	r1, [pc, #344]	; (c4d4 <event_scan+0x19c>)
    c37c:	4857      	ldr	r0, [pc, #348]	; (c4dc <event_scan+0x1a4>)
    c37e:	e7eb      	b.n	c358 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    c380:	2202      	movs	r2, #2
    c382:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    c384:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    c386:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c388:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    c38c:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    c38e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    c392:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    c394:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c398:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    c39c:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    c39e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c3a2:	f7ff ff9f 	bl	c2e4 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    c3a6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    c3aa:	f3c3 0081 	ubfx	r0, r3, #2, #2
    c3ae:	1c42      	adds	r2, r0, #1
    c3b0:	f362 0383 	bfi	r3, r2, #2, #2
    c3b4:	3025      	adds	r0, #37	; 0x25
    c3b6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    c3ba:	f7ff fcc3 	bl	bd44 <chan_set>
	if (_radio.scanner.chan == 3) {
    c3be:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    c3c2:	f003 020c 	and.w	r2, r3, #12
    c3c6:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    c3c8:	bf08      	it	eq
    c3ca:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    c3ce:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    c3d2:	bf08      	it	eq
    c3d4:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    c3d8:	f006 fef6 	bl	131c8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    c3dc:	2300      	movs	r3, #0
    c3de:	4619      	mov	r1, r3
    c3e0:	461a      	mov	r2, r3
    c3e2:	4618      	mov	r0, r3
    c3e4:	f006 fe60 	bl	130a8 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c3e8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c3ec:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c3f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c3f4:	3008      	adds	r0, #8
    c3f6:	f006 fdcb 	bl	12f90 <radio_pkt_rx_set>
	radio_rssi_measure();
    c3fa:	f006 fe6d 	bl	130d8 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    c3fe:	f006 f909 	bl	12614 <ctrl_rl_enabled>
    c402:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    c406:	b340      	cbz	r0, c45a <event_scan+0x122>
		struct ll_filter *filter =
    c408:	f3c3 1000 	ubfx	r0, r3, #4, #1
    c40c:	f005 ff22 	bl	12254 <ctrl_filter_get>
    c410:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    c412:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    c416:	f005 fe4d 	bl	120b4 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    c41a:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    c41c:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    c41e:	1cb2      	adds	r2, r6, #2
    c420:	7830      	ldrb	r0, [r6, #0]
    c422:	f006 fe7b 	bl	1311c <radio_filter_configure>
		radio_ar_configure(count, irks);
    c426:	4639      	mov	r1, r7
    c428:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c42c:	f007 f850 	bl	134d0 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c430:	68e2      	ldr	r2, [r4, #12]
    c432:	f105 0109 	add.w	r1, r5, #9
    c436:	2000      	movs	r0, #0
    c438:	f006 fed2 	bl	131e0 <radio_tmr_start>
	radio_tmr_end_capture();
    c43c:	f006 ffa0 	bl	13380 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    c440:	2106      	movs	r1, #6
    c442:	462a      	mov	r2, r5
    c444:	4826      	ldr	r0, [pc, #152]	; (c4e0 <event_scan+0x1a8>)
    c446:	f7ff ff2f 	bl	c2a8 <preempt_calc>
    c44a:	4601      	mov	r1, r0
    c44c:	b188      	cbz	r0, c472 <event_scan+0x13a>
		_radio.state = STATE_STOP;
    c44e:	2304      	movs	r3, #4
    c450:	7523      	strb	r3, [r4, #20]
		radio_disable();
    c452:	f006 fdc3 	bl	12fdc <radio_disable>
}
    c456:	b00d      	add	sp, #52	; 0x34
    c458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    c45a:	f013 0f30 	tst.w	r3, #48	; 0x30
    c45e:	d0e7      	beq.n	c430 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    c460:	2001      	movs	r0, #1
    c462:	f005 fef7 	bl	12254 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    c466:	1c82      	adds	r2, r0, #2
    c468:	7841      	ldrb	r1, [r0, #1]
    c46a:	7800      	ldrb	r0, [r0, #0]
    c46c:	f006 fe56 	bl	1311c <radio_filter_configure>
    c470:	e7de      	b.n	c430 <event_scan+0xf8>
		ret = ticker_start(
    c472:	f641 1336 	movw	r3, #6454	; 0x1936
    c476:	9308      	str	r3, [sp, #32]
    c478:	4b1a      	ldr	r3, [pc, #104]	; (c4e4 <event_scan+0x1ac>)
    c47a:	9307      	str	r3, [sp, #28]
    c47c:	2204      	movs	r2, #4
    c47e:	4b1a      	ldr	r3, [pc, #104]	; (c4e8 <event_scan+0x1b0>)
    c480:	9206      	str	r2, [sp, #24]
    c482:	9305      	str	r3, [sp, #20]
    c484:	9004      	str	r0, [sp, #16]
    c486:	9003      	str	r0, [sp, #12]
    c488:	9002      	str	r0, [sp, #8]
    c48a:	9001      	str	r0, [sp, #4]
    c48c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    c490:	3309      	adds	r3, #9
    c492:	9300      	str	r3, [sp, #0]
    c494:	462b      	mov	r3, r5
    c496:	f7fc fa31 	bl	88fc <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c49a:	f030 0302 	bics.w	r3, r0, #2
    c49e:	d007      	beq.n	c4b0 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c4a0:	4b09      	ldr	r3, [pc, #36]	; (c4c8 <event_scan+0x190>)
    c4a2:	9301      	str	r3, [sp, #4]
    c4a4:	9300      	str	r3, [sp, #0]
    c4a6:	4a09      	ldr	r2, [pc, #36]	; (c4cc <event_scan+0x194>)
    c4a8:	4b09      	ldr	r3, [pc, #36]	; (c4d0 <event_scan+0x198>)
    c4aa:	490a      	ldr	r1, [pc, #40]	; (c4d4 <event_scan+0x19c>)
    c4ac:	480f      	ldr	r0, [pc, #60]	; (c4ec <event_scan+0x1b4>)
    c4ae:	e753      	b.n	c358 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c4b0:	4619      	mov	r1, r3
    c4b2:	4618      	mov	r0, r3
    c4b4:	4a0e      	ldr	r2, [pc, #56]	; (c4f0 <event_scan+0x1b8>)
    c4b6:	f7fc fb3d 	bl	8b34 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c4ba:	f030 0302 	bics.w	r3, r0, #2
    c4be:	d1ef      	bne.n	c4a0 <event_scan+0x168>
    c4c0:	e7c9      	b.n	c456 <event_scan+0x11e>
    c4c2:	bf00      	nop
    c4c4:	200008f0 	.word	0x200008f0
    c4c8:	000155c5 	.word	0x000155c5
    c4cc:	0001699e 	.word	0x0001699e
    c4d0:	0001863e 	.word	0x0001863e
    c4d4:	000169ed 	.word	0x000169ed
    c4d8:	00018941 	.word	0x00018941
    c4dc:	0001897b 	.word	0x0001897b
    c4e0:	200009c0 	.word	0x200009c0
    c4e4:	0000b6fd 	.word	0x0000b6fd
    c4e8:	0000b96d 	.word	0x0000b96d
    c4ec:	000189ba 	.word	0x000189ba
    c4f0:	0000b8e5 	.word	0x0000b8e5

0000c4f4 <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    c4f4:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    c4f6:	4b05      	ldr	r3, [pc, #20]	; (c50c <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c4f8:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    c4fa:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c4fc:	4611      	mov	r1, r2
    c4fe:	4610      	mov	r0, r2
    c500:	f7fb fc3e 	bl	7d80 <mayfly_enqueue>
	LL_ASSERT(!retval);
    c504:	b108      	cbz	r0, c50a <event_stop.constprop.31+0x16>
    c506:	f7ff fa17 	bl	b938 <event_stop.part.10>
    c50a:	bd08      	pop	{r3, pc}
    c50c:	20003d98 	.word	0x20003d98

0000c510 <event_common_prepare>:
{
    c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    c514:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    c516:	681d      	ldr	r5, [r3, #0]
{
    c518:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c51a:	2c00      	cmp	r4, #0
{
    c51c:	4681      	mov	r9, r0
    c51e:	910b      	str	r1, [sp, #44]	; 0x2c
    c520:	4690      	mov	r8, r2
    c522:	469b      	mov	fp, r3
    c524:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c528:	da03      	bge.n	c532 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    c52a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c52c:	42ac      	cmp	r4, r5
    c52e:	bf38      	it	cc
    c530:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    c532:	42ac      	cmp	r4, r5
    c534:	4f56      	ldr	r7, [pc, #344]	; (c690 <event_common_prepare+0x180>)
    c536:	d924      	bls.n	c582 <event_common_prepare+0x72>
		ticker_status =
    c538:	f241 5374 	movw	r3, #5492	; 0x1574
    c53c:	9308      	str	r3, [sp, #32]
    c53e:	4b55      	ldr	r3, [pc, #340]	; (c694 <event_common_prepare+0x184>)
    c540:	9305      	str	r3, [sp, #20]
    c542:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    c544:	1b63      	subs	r3, r4, r5
		ticker_status =
    c546:	9300      	str	r3, [sp, #0]
    c548:	9707      	str	r7, [sp, #28]
    c54a:	464b      	mov	r3, r9
    c54c:	9106      	str	r1, [sp, #24]
    c54e:	9104      	str	r1, [sp, #16]
    c550:	9103      	str	r1, [sp, #12]
    c552:	9102      	str	r1, [sp, #8]
    c554:	9101      	str	r1, [sp, #4]
    c556:	2201      	movs	r2, #1
    c558:	4608      	mov	r0, r1
    c55a:	f7fc f9cf 	bl	88fc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c55e:	f030 0302 	bics.w	r3, r0, #2
    c562:	d034      	beq.n	c5ce <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c564:	4b4c      	ldr	r3, [pc, #304]	; (c698 <event_common_prepare+0x188>)
    c566:	9301      	str	r3, [sp, #4]
    c568:	9300      	str	r3, [sp, #0]
    c56a:	4a4c      	ldr	r2, [pc, #304]	; (c69c <event_common_prepare+0x18c>)
    c56c:	4b4c      	ldr	r3, [pc, #304]	; (c6a0 <event_common_prepare+0x190>)
    c56e:	494d      	ldr	r1, [pc, #308]	; (c6a4 <event_common_prepare+0x194>)
    c570:	484d      	ldr	r0, [pc, #308]	; (c6a8 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    c572:	f7f4 fd0b 	bl	f8c <printk>
    c576:	4040      	eors	r0, r0
    c578:	f380 8811 	msr	BASEPRI, r0
    c57c:	f04f 0004 	mov.w	r0, #4
    c580:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    c582:	d21d      	bcs.n	c5c0 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    c584:	2300      	movs	r3, #0
    c586:	461a      	mov	r2, r3
    c588:	4619      	mov	r1, r3
    c58a:	4618      	mov	r0, r3
    c58c:	f7ff f9fe 	bl	b98c <event_active>
		ticker_status =
    c590:	f241 5389 	movw	r3, #5513	; 0x1589
    c594:	2100      	movs	r1, #0
    c596:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    c598:	1b2c      	subs	r4, r5, r4
		ticker_status =
    c59a:	4b44      	ldr	r3, [pc, #272]	; (c6ac <event_common_prepare+0x19c>)
    c59c:	9305      	str	r3, [sp, #20]
    c59e:	9707      	str	r7, [sp, #28]
    c5a0:	464b      	mov	r3, r9
    c5a2:	9106      	str	r1, [sp, #24]
    c5a4:	9104      	str	r1, [sp, #16]
    c5a6:	9103      	str	r1, [sp, #12]
    c5a8:	9102      	str	r1, [sp, #8]
    c5aa:	9101      	str	r1, [sp, #4]
    c5ac:	9400      	str	r4, [sp, #0]
    c5ae:	2201      	movs	r2, #1
    c5b0:	4608      	mov	r0, r1
    c5b2:	f7fc f9a3 	bl	88fc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5b6:	f030 0302 	bics.w	r3, r0, #2
    c5ba:	d1d3      	bne.n	c564 <event_common_prepare+0x54>
    c5bc:	462c      	mov	r4, r5
    c5be:	e00b      	b.n	c5d8 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    c5c0:	2300      	movs	r3, #0
    c5c2:	461a      	mov	r2, r3
    c5c4:	4619      	mov	r1, r3
    c5c6:	4618      	mov	r0, r3
    c5c8:	f7ff f9e0 	bl	b98c <event_active>
		event_xtal(0, 0, 0, NULL);
    c5cc:	2300      	movs	r3, #0
    c5ce:	461a      	mov	r2, r3
    c5d0:	4619      	mov	r1, r3
    c5d2:	4618      	mov	r0, r3
    c5d4:	f7ff fa00 	bl	b9d8 <event_xtal>
	_radio.remainder_anchor = remainder;
    c5d8:	4e35      	ldr	r6, [pc, #212]	; (c6b0 <event_common_prepare+0x1a0>)
    c5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5dc:	60f3      	str	r3, [r6, #12]
	ticker_status =
    c5de:	f241 53a1 	movw	r3, #5537	; 0x15a1
    c5e2:	9308      	str	r3, [sp, #32]
    c5e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c5e6:	9306      	str	r3, [sp, #24]
    c5e8:	2200      	movs	r2, #0
    c5ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c5ec:	9305      	str	r3, [sp, #20]
    c5ee:	9707      	str	r7, [sp, #28]
    c5f0:	464b      	mov	r3, r9
    c5f2:	9204      	str	r2, [sp, #16]
    c5f4:	9203      	str	r2, [sp, #12]
    c5f6:	9202      	str	r2, [sp, #8]
    c5f8:	9201      	str	r2, [sp, #4]
    c5fa:	9400      	str	r4, [sp, #0]
    c5fc:	4611      	mov	r1, r2
    c5fe:	4610      	mov	r0, r2
    c600:	f7fc f97c 	bl	88fc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c604:	f030 0302 	bics.w	r3, r0, #2
    c608:	d1ac      	bne.n	c564 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    c60a:	2005      	movs	r0, #5
    c60c:	f7ff ff72 	bl	c4f4 <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    c610:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    c614:	429d      	cmp	r5, r3
    c616:	d023      	beq.n	c660 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    c618:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c61c:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    c620:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c622:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    c624:	bfbc      	itt	lt
    c626:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    c62a:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    c62e:	f8d8 2000 	ldr.w	r2, [r8]
    c632:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    c636:	428a      	cmp	r2, r1
    c638:	bf38      	it	cc
    c63a:	460a      	movcc	r2, r1
		ticker_status =
    c63c:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c640:	b2a3      	uxth	r3, r4
    c642:	b292      	uxth	r2, r2
		ticker_status =
    c644:	9106      	str	r1, [sp, #24]
    c646:	2100      	movs	r1, #0
    c648:	9302      	str	r3, [sp, #8]
    c64a:	9201      	str	r2, [sp, #4]
    c64c:	9200      	str	r2, [sp, #0]
    c64e:	9104      	str	r1, [sp, #16]
    c650:	9103      	str	r1, [sp, #12]
    c652:	4652      	mov	r2, sl
    c654:	4608      	mov	r0, r1
    c656:	f7fc f9a1 	bl	899c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c65a:	f030 0302 	bics.w	r3, r0, #2
    c65e:	d181      	bne.n	c564 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    c660:	20ff      	movs	r0, #255	; 0xff
    c662:	f7ff fa85 	bl	bb70 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c666:	4b13      	ldr	r3, [pc, #76]	; (c6b4 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c668:	2201      	movs	r2, #1
    c66a:	4611      	mov	r1, r2
    c66c:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c66e:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c672:	f7fb fb85 	bl	7d80 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c676:	b138      	cbz	r0, c688 <event_common_prepare+0x178>
    c678:	4b07      	ldr	r3, [pc, #28]	; (c698 <event_common_prepare+0x188>)
    c67a:	9301      	str	r3, [sp, #4]
    c67c:	9300      	str	r3, [sp, #0]
    c67e:	4a07      	ldr	r2, [pc, #28]	; (c69c <event_common_prepare+0x18c>)
    c680:	4b07      	ldr	r3, [pc, #28]	; (c6a0 <event_common_prepare+0x190>)
    c682:	4908      	ldr	r1, [pc, #32]	; (c6a4 <event_common_prepare+0x194>)
    c684:	480c      	ldr	r0, [pc, #48]	; (c6b8 <event_common_prepare+0x1a8>)
    c686:	e774      	b.n	c572 <event_common_prepare+0x62>
}
    c688:	b00d      	add	sp, #52	; 0x34
    c68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c68e:	bf00      	nop
    c690:	0000b6fd 	.word	0x0000b6fd
    c694:	0000b98d 	.word	0x0000b98d
    c698:	000155c5 	.word	0x000155c5
    c69c:	0001699e 	.word	0x0001699e
    c6a0:	000185fd 	.word	0x000185fd
    c6a4:	000169ed 	.word	0x000169ed
    c6a8:	00018825 	.word	0x00018825
    c6ac:	0000b9d9 	.word	0x0000b9d9
    c6b0:	200008f0 	.word	0x200008f0
    c6b4:	20003e38 	.word	0x20003e38
    c6b8:	00018f5f 	.word	0x00018f5f

0000c6bc <event_scan_prepare>:
{
    c6bc:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c6be:	4c25      	ldr	r4, [pc, #148]	; (c754 <event_scan_prepare+0x98>)
    c6c0:	7c23      	ldrb	r3, [r4, #16]
{
    c6c2:	b085      	sub	sp, #20
    c6c4:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c6c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    c6ca:	b173      	cbz	r3, c6ea <event_scan_prepare+0x2e>
    c6cc:	4b22      	ldr	r3, [pc, #136]	; (c758 <event_scan_prepare+0x9c>)
    c6ce:	9301      	str	r3, [sp, #4]
    c6d0:	9300      	str	r3, [sp, #0]
    c6d2:	4a22      	ldr	r2, [pc, #136]	; (c75c <event_scan_prepare+0xa0>)
    c6d4:	4b22      	ldr	r3, [pc, #136]	; (c760 <event_scan_prepare+0xa4>)
    c6d6:	4923      	ldr	r1, [pc, #140]	; (c764 <event_scan_prepare+0xa8>)
    c6d8:	4823      	ldr	r0, [pc, #140]	; (c768 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    c6da:	f7f4 fc57 	bl	f8c <printk>
    c6de:	4040      	eors	r0, r0
    c6e0:	f380 8811 	msr	BASEPRI, r0
    c6e4:	f04f 0004 	mov.w	r0, #4
    c6e8:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    c6ea:	2306      	movs	r3, #6
    c6ec:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    c6ee:	9203      	str	r2, [sp, #12]
    c6f0:	9301      	str	r3, [sp, #4]
    c6f2:	4a1e      	ldr	r2, [pc, #120]	; (c76c <event_scan_prepare+0xb0>)
    c6f4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    c6f8:	9202      	str	r2, [sp, #8]
    c6fa:	9300      	str	r3, [sp, #0]
    c6fc:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    c700:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    c704:	f7ff ff04 	bl	c510 <event_common_prepare>
	if (_radio.scanner.conn) {
    c708:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    c70c:	b303      	cbz	r3, c750 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    c70e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    c712:	2b00      	cmp	r3, #0
    c714:	da0c      	bge.n	c730 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    c716:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    c71a:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    c71e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    c722:	4291      	cmp	r1, r2
    c724:	bf2c      	ite	cs
    c726:	ebc3 0301 	rsbcs	r3, r3, r1
    c72a:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    c72e:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    c730:	4b0f      	ldr	r3, [pc, #60]	; (c770 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c732:	2201      	movs	r2, #1
    c734:	4611      	mov	r1, r2
    c736:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    c738:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c73a:	f7fb fb21 	bl	7d80 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c73e:	b138      	cbz	r0, c750 <event_scan_prepare+0x94>
    c740:	4b05      	ldr	r3, [pc, #20]	; (c758 <event_scan_prepare+0x9c>)
    c742:	9301      	str	r3, [sp, #4]
    c744:	9300      	str	r3, [sp, #0]
    c746:	4a05      	ldr	r2, [pc, #20]	; (c75c <event_scan_prepare+0xa0>)
    c748:	4b05      	ldr	r3, [pc, #20]	; (c760 <event_scan_prepare+0xa4>)
    c74a:	4906      	ldr	r1, [pc, #24]	; (c764 <event_scan_prepare+0xa8>)
    c74c:	4809      	ldr	r0, [pc, #36]	; (c774 <event_scan_prepare+0xb8>)
    c74e:	e7c4      	b.n	c6da <event_scan_prepare+0x1e>
}
    c750:	b005      	add	sp, #20
    c752:	bd30      	pop	{r4, r5, pc}
    c754:	200008f0 	.word	0x200008f0
    c758:	000155c5 	.word	0x000155c5
    c75c:	0001699e 	.word	0x0001699e
    c760:	0001862b 	.word	0x0001862b
    c764:	000169ed 	.word	0x000169ed
    c768:	0001909b 	.word	0x0001909b
    c76c:	0000c339 	.word	0x0000c339
    c770:	20003db8 	.word	0x20003db8
    c774:	00018f5f 	.word	0x00018f5f

0000c778 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    c778:	4b02      	ldr	r3, [pc, #8]	; (c784 <mayfly_xtal_start+0xc>)
    c77a:	6818      	ldr	r0, [r3, #0]
    c77c:	6843      	ldr	r3, [r0, #4]
    c77e:	2100      	movs	r1, #0
    c780:	681b      	ldr	r3, [r3, #0]
    c782:	4718      	bx	r3
    c784:	200008f0 	.word	0x200008f0

0000c788 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    c788:	4b02      	ldr	r3, [pc, #8]	; (c794 <mayfly_xtal_stop+0xc>)
    c78a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    c78c:	6843      	ldr	r3, [r0, #4]
    c78e:	2100      	movs	r1, #0
    c790:	685b      	ldr	r3, [r3, #4]
    c792:	4718      	bx	r3
    c794:	200008f0 	.word	0x200008f0

0000c798 <chan_sel_2>:
{
    c798:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    c79a:	4048      	eors	r0, r1
    c79c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c79e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    c7a2:	2608      	movs	r6, #8
	o = 0;
    c7a4:	2400      	movs	r4, #0
		o |= (i & 1);
    c7a6:	f00e 0501 	and.w	r5, lr, #1
    c7aa:	3e01      	subs	r6, #1
    c7ac:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    c7b0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    c7b4:	b2ec      	uxtb	r4, r5
		i >>= 1;
    c7b6:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    c7ba:	d1f4      	bne.n	c7a6 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c7bc:	0225      	lsls	r5, r4, #8
    c7be:	b22d      	sxth	r5, r5
    c7c0:	b2c0      	uxtb	r0, r0
    c7c2:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    c7c6:	4634      	mov	r4, r6
		o |= (i & 1);
    c7c8:	f000 0601 	and.w	r6, r0, #1
    c7cc:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    c7d0:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    c7d4:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    c7d8:	b2e4      	uxtb	r4, r4
		i >>= 1;
    c7da:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    c7de:	d1f3      	bne.n	c7c8 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c7e0:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    c7e2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    c7e6:	3f01      	subs	r7, #1
    c7e8:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    c7ea:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    c7ee:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    c7f0:	d1d5      	bne.n	c79e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    c7f2:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    c7f4:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    c7f6:	fbb1 f0f4 	udiv	r0, r1, r4
    c7fa:	fb04 1010 	mls	r0, r4, r0, r1
    c7fe:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c800:	08c4      	lsrs	r4, r0, #3
    c802:	f000 0507 	and.w	r5, r0, #7
    c806:	5d14      	ldrb	r4, [r2, r4]
    c808:	412c      	asrs	r4, r5
    c80a:	07e4      	lsls	r4, r4, #31
    c80c:	d407      	bmi.n	c81e <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    c80e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    c810:	f3c1 4107 	ubfx	r1, r1, #16, #8
    c814:	4610      	mov	r0, r2
}
    c816:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    c81a:	f7fd bfc9 	b.w	a7b0 <chan_sel_remap>
}
    c81e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c820 <ctrl_tx_enqueue>:
{
    c820:	b510      	push	{r4, lr}
	    !conn->empty &&
    c822:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    c826:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    c82a:	f014 0f80 	tst.w	r4, #128	; 0x80
    c82e:	d118      	bne.n	c862 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    c830:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    c834:	b1ab      	cbz	r3, c862 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    c836:	0724      	lsls	r4, r4, #28
    c838:	d413      	bmi.n	c862 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    c83a:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    c83e:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    c840:	bf04      	itt	eq
    c842:	681c      	ldreq	r4, [r3, #0]
    c844:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    c848:	b992      	cbnz	r2, c870 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    c84a:	681a      	ldr	r2, [r3, #0]
    c84c:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    c84e:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    c850:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    c854:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    c858:	680b      	ldr	r3, [r1, #0]
    c85a:	b90b      	cbnz	r3, c860 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    c85c:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    c860:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    c862:	b92a      	cbnz	r2, c870 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    c864:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    c868:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    c86a:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    c86e:	e7ef      	b.n	c850 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    c870:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    c874:	681a      	ldr	r2, [r3, #0]
    c876:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    c878:	6019      	str	r1, [r3, #0]
    c87a:	e7eb      	b.n	c854 <ctrl_tx_enqueue+0x34>

0000c87c <ctrl_tx_sec_enqueue>:
{
    c87c:	b410      	push	{r4}
	if (conn->pause_tx) {
    c87e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    c882:	0724      	lsls	r4, r4, #28
{
    c884:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    c886:	d50f      	bpl.n	c8a8 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    c888:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    c88c:	b931      	cbnz	r1, c89c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    c88e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    c892:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    c894:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    c898:	bc10      	pop	{r4}
    c89a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    c89c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    c8a0:	6819      	ldr	r1, [r3, #0]
    c8a2:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    c8a4:	601a      	str	r2, [r3, #0]
    c8a6:	e7f7      	b.n	c898 <ctrl_tx_sec_enqueue+0x1c>
}
    c8a8:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    c8aa:	f7ff bfb9 	b.w	c820 <ctrl_tx_enqueue>
	...

0000c8b0 <feature_rsp_send>:
{
    c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c8b2:	4f21      	ldr	r7, [pc, #132]	; (c938 <feature_rsp_send+0x88>)
{
    c8b4:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c8b6:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    c8ba:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c8bc:	f7fb f995 	bl	7bea <mem_acquire>
	if (!node_tx) {
    c8c0:	4604      	mov	r4, r0
    c8c2:	b3b0      	cbz	r0, c932 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c8c4:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    c8c6:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c8c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c8cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    c8d0:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    c8d4:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    c8d8:	f043 0310 	orr.w	r3, r3, #16
    c8dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    c8e0:	79b1      	ldrb	r1, [r6, #6]
    c8e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c8e6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    c8ea:	f3c1 0110 	ubfx	r1, r1, #0, #17
    c8ee:	400b      	ands	r3, r1
    c8f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    c8f4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    c8f8:	f043 0320 	orr.w	r3, r3, #32
    c8fc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c900:	7903      	ldrb	r3, [r0, #4]
    c902:	f043 0303 	orr.w	r3, r3, #3
    c906:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c908:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    c90a:	2309      	movs	r3, #9
    c90c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    c90e:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c910:	2100      	movs	r1, #0
    c912:	4410      	add	r0, r2
    c914:	f7f5 f99e 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    c918:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c91c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    c91e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    c920:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    c922:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c924:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c926:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    c928:	4621      	mov	r1, r4
    c92a:	f7ff ffa7 	bl	c87c <ctrl_tx_sec_enqueue>
	return 0;
    c92e:	2000      	movs	r0, #0
    c930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    c932:	2001      	movs	r0, #1
}
    c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c936:	bf00      	nop
    c938:	200008f0 	.word	0x200008f0

0000c93c <start_enc_rsp_send>:
{
    c93c:	b510      	push	{r4, lr}
    c93e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    c940:	b9c9      	cbnz	r1, c976 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c942:	480f      	ldr	r0, [pc, #60]	; (c980 <start_enc_rsp_send+0x44>)
    c944:	f7fb f951 	bl	7bea <mem_acquire>
		if (!node_tx) {
    c948:	b1b8      	cbz	r0, c97a <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c94a:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    c94c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c950:	f043 0320 	orr.w	r3, r3, #32
    c954:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c958:	780b      	ldrb	r3, [r1, #0]
    c95a:	f043 0303 	orr.w	r3, r3, #3
    c95e:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    c960:	2301      	movs	r3, #1
    c962:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    c964:	2306      	movs	r3, #6
    c966:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    c968:	b140      	cbz	r0, c97c <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    c96a:	4601      	mov	r1, r0
    c96c:	4620      	mov	r0, r4
    c96e:	f7ff ff57 	bl	c820 <ctrl_tx_enqueue>
	return 0;
    c972:	2000      	movs	r0, #0
    c974:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    c976:	2000      	movs	r0, #0
    c978:	e7e8      	b.n	c94c <start_enc_rsp_send+0x10>
			return 1;
    c97a:	2001      	movs	r0, #1
}
    c97c:	bd10      	pop	{r4, pc}
    c97e:	bf00      	nop
    c980:	20000a4c 	.word	0x20000a4c

0000c984 <reject_ext_ind_send>:
{
    c984:	b570      	push	{r4, r5, r6, lr}
    c986:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c988:	480b      	ldr	r0, [pc, #44]	; (c9b8 <reject_ext_ind_send+0x34>)
{
    c98a:	460e      	mov	r6, r1
    c98c:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c98e:	f7fb f92c 	bl	7bea <mem_acquire>
	if (!node_tx) {
    c992:	b178      	cbz	r0, c9b4 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c994:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    c996:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c998:	f043 0303 	orr.w	r3, r3, #3
    c99c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c99e:	2303      	movs	r3, #3
    c9a0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c9a2:	2311      	movs	r3, #17
    c9a4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    c9a6:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    c9a8:	4601      	mov	r1, r0
    c9aa:	4620      	mov	r0, r4
    c9ac:	f7ff ff38 	bl	c820 <ctrl_tx_enqueue>
	return 0;
    c9b0:	2000      	movs	r0, #0
    c9b2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    c9b4:	2001      	movs	r0, #1
}
    c9b6:	bd70      	pop	{r4, r5, r6, pc}
    c9b8:	20000a4c 	.word	0x20000a4c
    c9bc:	00000000 	.word	0x00000000

0000c9c0 <event_connection_prepare>:
{
    c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c9c4:	4db8      	ldr	r5, [pc, #736]	; (cca8 <event_connection_prepare+0x2e8>)
{
    c9c6:	b08f      	sub	sp, #60	; 0x3c
    c9c8:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    c9ca:	7c2b      	ldrb	r3, [r5, #16]
{
    c9cc:	910c      	str	r1, [sp, #48]	; 0x30
    c9ce:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c9d0:	b173      	cbz	r3, c9f0 <event_connection_prepare+0x30>
    c9d2:	4bb6      	ldr	r3, [pc, #728]	; (ccac <event_connection_prepare+0x2ec>)
    c9d4:	9301      	str	r3, [sp, #4]
    c9d6:	9300      	str	r3, [sp, #0]
    c9d8:	4ab5      	ldr	r2, [pc, #724]	; (ccb0 <event_connection_prepare+0x2f0>)
    c9da:	4bb6      	ldr	r3, [pc, #728]	; (ccb4 <event_connection_prepare+0x2f4>)
    c9dc:	49b6      	ldr	r1, [pc, #728]	; (ccb8 <event_connection_prepare+0x2f8>)
    c9de:	48b7      	ldr	r0, [pc, #732]	; (ccbc <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    c9e0:	f7f4 fad4 	bl	f8c <printk>
    c9e4:	4040      	eors	r0, r0
    c9e6:	f380 8811 	msr	BASEPRI, r0
    c9ea:	f04f 0004 	mov.w	r0, #4
    c9ee:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    c9f0:	f894 3020 	ldrb.w	r3, [r4, #32]
    c9f4:	3307      	adds	r3, #7
    c9f6:	b2db      	uxtb	r3, r3
    c9f8:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    c9fa:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c9fe:	2b00      	cmp	r3, #0
    ca00:	da09      	bge.n	ca16 <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    ca02:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    ca04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    ca06:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    ca0a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    ca0c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    ca0e:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    ca10:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    ca12:	bf88      	it	hi
    ca14:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    ca16:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    ca18:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    ca1c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    ca1e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    ca20:	b292      	uxth	r2, r2
    ca22:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    ca24:	4432      	add	r2, r6
    ca26:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    ca28:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    ca2c:	429a      	cmp	r2, r3
    ca2e:	f040 81ba 	bne.w	cda6 <event_connection_prepare+0x3e6>
    ca32:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ca36:	075f      	lsls	r7, r3, #29
    ca38:	f100 84ab 	bmi.w	d392 <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    ca3c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    ca40:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ca44:	429a      	cmp	r2, r3
    ca46:	f000 8096 	beq.w	cb76 <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    ca4a:	2005      	movs	r0, #5
    ca4c:	f7ff fd52 	bl	c4f4 <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    ca50:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    ca54:	b113      	cbz	r3, ca5c <event_connection_prepare+0x9c>
    ca56:	429c      	cmp	r4, r3
    ca58:	f040 808d 	bne.w	cb76 <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    ca5c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    ca60:	f003 0307 	and.w	r3, r3, #7
    ca64:	2b05      	cmp	r3, #5
    ca66:	f200 815d 	bhi.w	cd24 <event_connection_prepare+0x364>
    ca6a:	e8df f013 	tbh	[pc, r3, lsl #1]
    ca6e:	0006      	.short	0x0006
    ca70:	01310065 	.word	0x01310065
    ca74:	00840084 	.word	0x00840084
    ca78:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ca7a:	4891      	ldr	r0, [pc, #580]	; (ccc0 <event_connection_prepare+0x300>)
    ca7c:	f7fb f8b5 	bl	7bea <mem_acquire>
	if (!node_tx) {
    ca80:	4607      	mov	r7, r0
    ca82:	2800      	cmp	r0, #0
    ca84:	d077      	beq.n	cb76 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    ca86:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    ca8a:	2204      	movs	r2, #4
    ca8c:	f362 0302 	bfi	r3, r2, #0, #3
    ca90:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca94:	7903      	ldrb	r3, [r0, #4]
    ca96:	f043 0303 	orr.w	r3, r3, #3
    ca9a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    ca9c:	2318      	movs	r3, #24
    ca9e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    caa0:	230f      	movs	r3, #15
    caa2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    caa4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    caa8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    caaa:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    caac:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    cab0:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    cab2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    cab6:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    cab8:	2300      	movs	r3, #0
    caba:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    cabc:	74c3      	strb	r3, [r0, #19]
    cabe:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    cac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cac4:	7543      	strb	r3, [r0, #21]
    cac6:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    cac8:	75c3      	strb	r3, [r0, #23]
    caca:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    cacc:	7643      	strb	r3, [r0, #25]
    cace:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    cad0:	76c3      	strb	r3, [r0, #27]
    cad2:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    cad4:	7743      	strb	r3, [r0, #29]
    cad6:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    cad8:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    cadc:	4601      	mov	r1, r0
    cade:	4620      	mov	r0, r4
    cae0:	f7ff fe9e 	bl	c820 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cae4:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    cae6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    caea:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    caee:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    caf0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    caf4:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    caf8:	da0b      	bge.n	cb12 <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    cafa:	68a3      	ldr	r3, [r4, #8]
    cafc:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    cafe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    cb02:	428b      	cmp	r3, r1
    cb04:	bf2c      	ite	cs
    cb06:	4443      	addcs	r3, r8
    cb08:	eb08 0301 	addcc.w	r3, r8, r1
    cb0c:	1a9b      	subs	r3, r3, r2
    cb0e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    cb12:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    cb14:	4b6b      	ldr	r3, [pc, #428]	; (ccc4 <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    cb16:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cb1a:	2201      	movs	r2, #1
    cb1c:	4611      	mov	r1, r2
    cb1e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    cb20:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cb22:	f7fb f92d 	bl	7d80 <mayfly_enqueue>
		LL_ASSERT(!retval);
    cb26:	b330      	cbz	r0, cb76 <event_connection_prepare+0x1b6>
    cb28:	4b60      	ldr	r3, [pc, #384]	; (ccac <event_connection_prepare+0x2ec>)
    cb2a:	9301      	str	r3, [sp, #4]
    cb2c:	9300      	str	r3, [sp, #0]
    cb2e:	4b66      	ldr	r3, [pc, #408]	; (ccc8 <event_connection_prepare+0x308>)
    cb30:	4a5f      	ldr	r2, [pc, #380]	; (ccb0 <event_connection_prepare+0x2f0>)
    cb32:	4961      	ldr	r1, [pc, #388]	; (ccb8 <event_connection_prepare+0x2f8>)
    cb34:	4865      	ldr	r0, [pc, #404]	; (cccc <event_connection_prepare+0x30c>)
    cb36:	e753      	b.n	c9e0 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    cb38:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    cb3c:	b397      	cbz	r7, cba4 <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb3e:	4860      	ldr	r0, [pc, #384]	; (ccc0 <event_connection_prepare+0x300>)
    cb40:	f7fb f853 	bl	7bea <mem_acquire>
		if (!node_tx) {
    cb44:	4601      	mov	r1, r0
    cb46:	b1b0      	cbz	r0, cb76 <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    cb48:	7903      	ldrb	r3, [r0, #4]
    cb4a:	f043 0303 	orr.w	r3, r3, #3
    cb4e:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    cb50:	2311      	movs	r3, #17
    cb52:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    cb54:	2303      	movs	r3, #3
    cb56:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    cb58:	230f      	movs	r3, #15
    cb5a:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    cb5c:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    cb60:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    cb62:	4620      	mov	r0, r4
    cb64:	f7ff fe5c 	bl	c820 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cb68:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    cb6c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    cb70:	2300      	movs	r3, #0
    cb72:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    cb76:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    cb7a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    cb7e:	429a      	cmp	r2, r3
    cb80:	f000 810a 	beq.w	cd98 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    cb84:	2005      	movs	r0, #5
    cb86:	f7ff fcb5 	bl	c4f4 <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    cb8a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    cb8e:	f003 0203 	and.w	r2, r3, #3
    cb92:	2a03      	cmp	r2, #3
    cb94:	f200 8179 	bhi.w	ce8a <event_connection_prepare+0x4ca>
    cb98:	e8df f012 	tbh	[pc, r2, lsl #1]
    cb9c:	00fe00cc 	.word	0x00fe00cc
    cba0:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    cba4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    cba8:	2b00      	cmp	r3, #0
    cbaa:	db3b      	blt.n	cc24 <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    cbac:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    cbb0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    cbb4:	428b      	cmp	r3, r1
    cbb6:	d1de      	bne.n	cb76 <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    cbb8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    cbbc:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    cbc0:	2205      	movs	r2, #5
    cbc2:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    cbc6:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    cbca:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    cbce:	2301      	movs	r3, #1
    cbd0:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    cbd4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    cbd8:	b122      	cbz	r2, cbe4 <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    cbda:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    cbde:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    cbe0:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    cbe4:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    cbe8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    cbec:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    cbf0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    cbf4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    cbf8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cbfc:	2202      	movs	r2, #2
    cbfe:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    cc02:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    cc06:	f082 0208 	eor.w	r2, r2, #8
    cc0a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    cc0e:	f362 0382 	bfi	r3, r2, #2, #1
    cc12:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    cc16:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    cc18:	2301      	movs	r3, #1
    cc1a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    cc1e:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    cc22:	e7a8      	b.n	cb76 <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cc24:	4826      	ldr	r0, [pc, #152]	; (ccc0 <event_connection_prepare+0x300>)
    cc26:	f7fa ffe0 	bl	7bea <mem_acquire>
	if (!node_tx) {
    cc2a:	4601      	mov	r1, r0
    cc2c:	2800      	cmp	r0, #0
    cc2e:	d0a2      	beq.n	cb76 <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    cc30:	7903      	ldrb	r3, [r0, #4]
    cc32:	f043 0303 	orr.w	r3, r3, #3
    cc36:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    cc38:	2318      	movs	r3, #24
    cc3a:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    cc3c:	2310      	movs	r3, #16
    cc3e:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    cc40:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    cc44:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    cc46:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    cc48:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    cc4c:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    cc4e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    cc52:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    cc54:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    cc58:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    cc5a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    cc5e:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    cc62:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    cc66:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    cc6a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    cc6e:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    cc72:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    cc76:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    cc7a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    cc7e:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    cc82:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    cc86:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    cc8a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    cc8e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    cc92:	4620      	mov	r0, r4
    cc94:	f7ff fdc4 	bl	c820 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cc98:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    cc9c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    cca0:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    cca4:	e767      	b.n	cb76 <event_connection_prepare+0x1b6>
    cca6:	bf00      	nop
    cca8:	200008f0 	.word	0x200008f0
    ccac:	000155c5 	.word	0x000155c5
    ccb0:	0001699e 	.word	0x0001699e
    ccb4:	000186e4 	.word	0x000186e4
    ccb8:	000169ed 	.word	0x000169ed
    ccbc:	0001909b 	.word	0x0001909b
    ccc0:	20000a4c 	.word	0x20000a4c
    ccc4:	20003dd8 	.word	0x20003dd8
    ccc8:	00018680 	.word	0x00018680
    cccc:	00018f5f 	.word	0x00018f5f
	if (conn->pause_tx) {
    ccd0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ccd4:	0718      	lsls	r0, r3, #28
    ccd6:	f53f af4e 	bmi.w	cb76 <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    ccda:	2002      	movs	r0, #2
    ccdc:	f7fd fd9a 	bl	a814 <packet_rx_reserve_get>
	if (!node_rx) {
    cce0:	2800      	cmp	r0, #0
    cce2:	f43f af48 	beq.w	cb76 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    cce6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    ccea:	2203      	movs	r2, #3
    ccec:	f362 0302 	bfi	r3, r2, #0, #3
    ccf0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    ccf4:	8c23      	ldrh	r3, [r4, #32]
    ccf6:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ccf8:	2301      	movs	r3, #1
    ccfa:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ccfc:	7a03      	ldrb	r3, [r0, #8]
    ccfe:	4313      	orrs	r3, r2
    cd00:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    cd02:	2318      	movs	r3, #24
    cd04:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    cd06:	230f      	movs	r3, #15
    cd08:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    cd0a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    cd0e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    cd10:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    cd12:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    cd16:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    cd18:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    cd1c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    cd1e:	f7fe fbe3 	bl	b4e8 <packet_rx_enqueue>
    cd22:	e728      	b.n	cb76 <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    cd24:	4bb9      	ldr	r3, [pc, #740]	; (d00c <event_connection_prepare+0x64c>)
    cd26:	9301      	str	r3, [sp, #4]
    cd28:	9300      	str	r3, [sp, #0]
    cd2a:	4bb9      	ldr	r3, [pc, #740]	; (d010 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    cd2c:	4ab9      	ldr	r2, [pc, #740]	; (d014 <event_connection_prepare+0x654>)
    cd2e:	49ba      	ldr	r1, [pc, #744]	; (d018 <event_connection_prepare+0x658>)
    cd30:	48ba      	ldr	r0, [pc, #744]	; (d01c <event_connection_prepare+0x65c>)
    cd32:	e655      	b.n	c9e0 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cd34:	48ba      	ldr	r0, [pc, #744]	; (d020 <event_connection_prepare+0x660>)
    cd36:	f7fa ff58 	bl	7bea <mem_acquire>
		if (!node_tx) {
    cd3a:	4601      	mov	r1, r0
    cd3c:	b360      	cbz	r0, cd98 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    cd3e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    cd42:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    cd46:	2201      	movs	r2, #1
    cd48:	f362 0301 	bfi	r3, r2, #0, #2
    cd4c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cd50:	b2db      	uxtb	r3, r3
    cd52:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    cd56:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cd5a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    cd5e:	f363 07c5 	bfi	r7, r3, #3, #3
    cd62:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    cd66:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cd6a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    cd6e:	f367 1286 	bfi	r2, r7, #6, #1
    cd72:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cd76:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    cd78:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cd7a:	f042 0203 	orr.w	r2, r2, #3
    cd7e:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    cd80:	2203      	movs	r2, #3
    cd82:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    cd84:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    cd86:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    cd88:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    cd8a:	4620      	mov	r0, r4
    cd8c:	f7ff fd48 	bl	c820 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    cd90:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    cd94:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    cd98:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    cd9c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cda0:	429a      	cmp	r2, r3
    cda2:	f000 82f6 	beq.w	d392 <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cda6:	2005      	movs	r0, #5
    cda8:	f7ff fba4 	bl	c4f4 <event_stop.constprop.31>
		switch (conn->llcp_type) {
    cdac:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    cdb0:	3b01      	subs	r3, #1
    cdb2:	2b07      	cmp	r3, #7
    cdb4:	f200 85a7 	bhi.w	d906 <event_connection_prepare+0xf46>
    cdb8:	e8df f013 	tbh	[pc, r3, lsl #1]
    cdbc:	02c4006c 	.word	0x02c4006c
    cdc0:	045e0343 	.word	0x045e0343
    cdc4:	05a5048e 	.word	0x05a5048e
    cdc8:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    cdcc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    cdd0:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    cdd4:	f3c3 0282 	ubfx	r2, r3, #2, #3
    cdd8:	0791      	lsls	r1, r2, #30
    cdda:	d544      	bpl.n	ce66 <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    cddc:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    cdde:	f362 0384 	bfi	r3, r2, #2, #3
    cde2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    cde6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    cdea:	095a      	lsrs	r2, r3, #5
    cdec:	0790      	lsls	r0, r2, #30
    cdee:	d543      	bpl.n	ce78 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    cdf0:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    cdf2:	f362 1347 	bfi	r3, r2, #5, #3
    cdf6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    cdfa:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    cdfe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ce02:	f3c2 0182 	ubfx	r1, r2, #2, #3
    ce06:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ce0a:	428b      	cmp	r3, r1
    ce0c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    ce10:	bf14      	ite	ne
    ce12:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    ce16:	f36f 0384 	bfceq	r3, #2, #3
    ce1a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    ce1e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ce22:	0952      	lsrs	r2, r2, #5
    ce24:	f003 0307 	and.w	r3, r3, #7
    ce28:	4293      	cmp	r3, r2
    ce2a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    ce2e:	bf14      	ite	ne
    ce30:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    ce34:	f36f 1347 	bfceq	r3, #5, #3
    ce38:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    ce3c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    ce40:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    ce44:	f043 0301 	orr.w	r3, r3, #1
    ce48:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ce4c:	f362 0341 	bfi	r3, r2, #1, #1
    ce50:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    ce54:	2308      	movs	r3, #8
    ce56:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    ce5a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    ce5e:	3b01      	subs	r3, #1
    ce60:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    ce64:	e798      	b.n	cd98 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    ce66:	07d7      	lsls	r7, r2, #31
    ce68:	d501      	bpl.n	ce6e <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    ce6a:	2201      	movs	r2, #1
    ce6c:	e7b7      	b.n	cdde <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    ce6e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    ce72:	bf18      	it	ne
    ce74:	2204      	movne	r2, #4
    ce76:	e7b2      	b.n	cdde <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    ce78:	07d1      	lsls	r1, r2, #31
    ce7a:	d501      	bpl.n	ce80 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    ce7c:	2201      	movs	r2, #1
    ce7e:	e7b8      	b.n	cdf2 <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    ce80:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    ce84:	bf18      	it	ne
    ce86:	2204      	movne	r2, #4
    ce88:	e7b3      	b.n	cdf2 <event_connection_prepare+0x432>
		LL_ASSERT(0);
    ce8a:	4b60      	ldr	r3, [pc, #384]	; (d00c <event_connection_prepare+0x64c>)
    ce8c:	9301      	str	r3, [sp, #4]
    ce8e:	9300      	str	r3, [sp, #0]
    ce90:	4b64      	ldr	r3, [pc, #400]	; (d024 <event_connection_prepare+0x664>)
    ce92:	e74b      	b.n	cd2c <event_connection_prepare+0x36c>
	if (!conn_upd) {
    ce94:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    ce98:	b90b      	cbnz	r3, ce9e <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    ce9a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    ce9e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cea2:	f013 0303 	ands.w	r3, r3, #3
    cea6:	d068      	beq.n	cf7a <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cea8:	485d      	ldr	r0, [pc, #372]	; (d020 <event_connection_prepare+0x660>)
    ceaa:	f7fa fe9e 	bl	7bea <mem_acquire>
		if (!node_tx) {
    ceae:	4607      	mov	r7, r0
    ceb0:	2800      	cmp	r0, #0
    ceb2:	f000 826e 	beq.w	d392 <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    ceb6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ceba:	f003 0303 	and.w	r3, r3, #3
    cebe:	2b01      	cmp	r3, #1
    cec0:	d059      	beq.n	cf76 <event_connection_prepare+0x5b6>
    cec2:	2b02      	cmp	r3, #2
    cec4:	d152      	bne.n	cf6c <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    cec6:	4a58      	ldr	r2, [pc, #352]	; (d028 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    cec8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cecc:	f36f 0301 	bfc	r3, #0, #2
    ced0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    ced4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    ced6:	3306      	adds	r3, #6
    ced8:	4433      	add	r3, r6
    ceda:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    cedc:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cee0:	7939      	ldrb	r1, [r7, #4]
    cee2:	f041 0103 	orr.w	r1, r1, #3
    cee6:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    cee8:	210c      	movs	r1, #12
    ceea:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    ceec:	2100      	movs	r1, #0
    ceee:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    cef0:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    cef4:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    cef6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    cefa:	f240 40e2 	movw	r0, #1250	; 0x4e2
    cefe:	fbb1 f1f0 	udiv	r1, r1, r0
    cf02:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    cf06:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    cf0a:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    cf0e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    cf12:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    cf16:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    cf1a:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    cf1e:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cf22:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    cf24:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cf28:	2900      	cmp	r1, #0
    cf2a:	da0b      	bge.n	cf44 <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    cf2c:	68a3      	ldr	r3, [r4, #8]
    cf2e:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    cf30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    cf34:	4283      	cmp	r3, r0
    cf36:	bf2c      	ite	cs
    cf38:	4443      	addcs	r3, r8
    cf3a:	eb08 0300 	addcc.w	r3, r8, r0
    cf3e:	1a5b      	subs	r3, r3, r1
    cf40:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    cf44:	f107 0309 	add.w	r3, r7, #9
    cf48:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    cf4c:	4b37      	ldr	r3, [pc, #220]	; (d02c <event_connection_prepare+0x66c>)
    cf4e:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cf50:	2201      	movs	r2, #1
    cf52:	4611      	mov	r1, r2
    cf54:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    cf56:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cf58:	f7fa ff12 	bl	7d80 <mayfly_enqueue>
		LL_ASSERT(!retval);
    cf5c:	2800      	cmp	r0, #0
    cf5e:	f000 8214 	beq.w	d38a <event_connection_prepare+0x9ca>
    cf62:	4b2a      	ldr	r3, [pc, #168]	; (d00c <event_connection_prepare+0x64c>)
    cf64:	9301      	str	r3, [sp, #4]
    cf66:	9300      	str	r3, [sp, #0]
    cf68:	4b31      	ldr	r3, [pc, #196]	; (d030 <event_connection_prepare+0x670>)
    cf6a:	e5e1      	b.n	cb30 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    cf6c:	4b27      	ldr	r3, [pc, #156]	; (d00c <event_connection_prepare+0x64c>)
    cf6e:	9301      	str	r3, [sp, #4]
    cf70:	9300      	str	r3, [sp, #0]
    cf72:	4b30      	ldr	r3, [pc, #192]	; (d034 <event_connection_prepare+0x674>)
    cf74:	e6da      	b.n	cd2c <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    cf76:	4a30      	ldr	r2, [pc, #192]	; (d038 <event_connection_prepare+0x678>)
    cf78:	e7a6      	b.n	cec8 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    cf7a:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    cf7e:	1bf7      	subs	r7, r6, r7
    cf80:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    cf82:	043a      	lsls	r2, r7, #16
    cf84:	f100 8205 	bmi.w	d392 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    cf88:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cf8c:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cf90:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    cf94:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    cf98:	428a      	cmp	r2, r1
    cf9a:	d009      	beq.n	cfb0 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    cf9c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cfa0:	f002 0207 	and.w	r2, r2, #7
    cfa4:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cfa6:	bf04      	itt	eq
    cfa8:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    cfac:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    cfb0:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    cfb4:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    cfb6:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    cfb8:	bf08      	it	eq
    cfba:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    cfbe:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    cfc0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    cfc2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cfc6:	429a      	cmp	r2, r3
    cfc8:	d114      	bne.n	cff4 <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    cfca:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    cfce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cfd0:	4299      	cmp	r1, r3
    cfd2:	d10f      	bne.n	cff4 <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    cfd4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    cfd8:	435a      	muls	r2, r3
    cfda:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cfde:	f242 7110 	movw	r1, #10000	; 0x2710
    cfe2:	fb01 2303 	mla	r3, r1, r3, r2
    cfe6:	3b01      	subs	r3, #1
    cfe8:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    cfec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    cfee:	b29b      	uxth	r3, r3
    cff0:	429a      	cmp	r2, r3
    cff2:	d036      	beq.n	d062 <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    cff4:	2002      	movs	r0, #2
    cff6:	f7fd fc0d 	bl	a814 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    cffa:	bb08      	cbnz	r0, d040 <event_connection_prepare+0x680>
    cffc:	4b03      	ldr	r3, [pc, #12]	; (d00c <event_connection_prepare+0x64c>)
    cffe:	9301      	str	r3, [sp, #4]
    d000:	9300      	str	r3, [sp, #0]
    d002:	4b0c      	ldr	r3, [pc, #48]	; (d034 <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    d004:	4a03      	ldr	r2, [pc, #12]	; (d014 <event_connection_prepare+0x654>)
    d006:	4904      	ldr	r1, [pc, #16]	; (d018 <event_connection_prepare+0x658>)
    d008:	480c      	ldr	r0, [pc, #48]	; (d03c <event_connection_prepare+0x67c>)
    d00a:	e4e9      	b.n	c9e0 <event_connection_prepare+0x20>
    d00c:	000155c5 	.word	0x000155c5
    d010:	00018695 	.word	0x00018695
    d014:	0001699e 	.word	0x0001699e
    d018:	000169ed 	.word	0x000169ed
    d01c:	00016912 	.word	0x00016912
    d020:	20000a4c 	.word	0x20000a4c
    d024:	000186ba 	.word	0x000186ba
    d028:	0000b239 	.word	0x0000b239
    d02c:	20003dc8 	.word	0x20003dc8
    d030:	00018649 	.word	0x00018649
    d034:	0001865d 	.word	0x0001865d
    d038:	0000bf21 	.word	0x0000bf21
    d03c:	00018e8b 	.word	0x00018e8b
			node_rx->hdr.handle = conn->handle;
    d040:	8c23      	ldrh	r3, [r4, #32]
    d042:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d044:	2308      	movs	r3, #8
    d046:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    d048:	2300      	movs	r3, #0
    d04a:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    d04c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d050:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    d052:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    d056:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    d058:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d05c:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    d05e:	f7fe fa43 	bl	b4e8 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d062:	6823      	ldr	r3, [r4, #0]
    d064:	6866      	ldr	r6, [r4, #4]
    d066:	2b00      	cmp	r3, #0
    d068:	da09      	bge.n	d07e <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    d06a:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    d06c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d070:	42b0      	cmp	r0, r6
    d072:	bf2c      	ite	cs
    d074:	4480      	addcs	r8, r0
    d076:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    d078:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d07a:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    d07e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    d080:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    d084:	49a0      	ldr	r1, [pc, #640]	; (d308 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    d086:	fb13 f307 	smulbb	r3, r3, r7
    d08a:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    d08c:	fbb3 f2fa 	udiv	r2, r3, sl
    d090:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    d094:	fb1a f009 	smulbb	r0, sl, r9
    d098:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    d09a:	4283      	cmp	r3, r0
    d09c:	f080 80bf 	bcs.w	d21e <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    d0a0:	1ac0      	subs	r0, r0, r3
    d0a2:	f240 1223 	movw	r2, #291	; 0x123
    d0a6:	4342      	muls	r2, r0
    d0a8:	17c3      	asrs	r3, r0, #31
    d0aa:	fb01 2303 	mla	r3, r1, r3, r2
    d0ae:	fba0 0101 	umull	r0, r1, r0, r1
    d0b2:	4419      	add	r1, r3
    d0b4:	a392      	add	r3, pc, #584	; (adr r3, d300 <event_connection_prepare+0x940>)
    d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0ba:	f7f3 f8ab 	bl	214 <__aeabi_uldivmod>
    d0be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d0c2:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d0c6:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    d0c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d0ca:	f8df b274 	ldr.w	fp, [pc, #628]	; d340 <event_connection_prepare+0x980>
    d0ce:	1bdb      	subs	r3, r3, r7
    d0d0:	444b      	add	r3, r9
    d0d2:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    d0d4:	6823      	ldr	r3, [r4, #0]
    d0d6:	42b3      	cmp	r3, r6
    d0d8:	bf38      	it	cc
    d0da:	4633      	movcc	r3, r6
    d0dc:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    d0de:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    d0e2:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    d0ec:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    d0ee:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    d0f2:	f280 80a5 	bge.w	d240 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    d0f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    d0f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d0fa:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    d0fe:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    d102:	4a82      	ldr	r2, [pc, #520]	; (d30c <event_connection_prepare+0x94c>)
    d104:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    d108:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d10c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    d114:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    d118:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    d11a:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d11c:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    d120:	4b7b      	ldr	r3, [pc, #492]	; (d310 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    d122:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d126:	f205 253f 	addw	r5, r5, #575	; 0x23f
    d12a:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    d12e:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    d130:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    d134:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    d136:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    d138:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    d13a:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    d13c:	429f      	cmp	r7, r3
    d13e:	bf94      	ite	ls
    d140:	65e7      	strls	r7, [r4, #92]	; 0x5c
    d142:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    d144:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    d146:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    d148:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d14a:	fba0 010b 	umull	r0, r1, r0, fp
    d14e:	a36c      	add	r3, pc, #432	; (adr r3, d300 <event_connection_prepare+0x940>)
    d150:	e9d3 2300 	ldrd	r2, r3, [r3]
    d154:	f7f3 f85e 	bl	214 <__aeabi_uldivmod>
    d158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d15a:	1a1b      	subs	r3, r3, r0
    d15c:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d15e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d160:	fbb3 f0f8 	udiv	r0, r3, r8
    d164:	fb08 f000 	mul.w	r0, r8, r0
    d168:	a365      	add	r3, pc, #404	; (adr r3, d300 <event_connection_prepare+0x940>)
    d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d16e:	fba0 010b 	umull	r0, r1, r0, fp
    d172:	f7f3 f84f 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    d176:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d178:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    d17c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    d180:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    d184:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    d186:	f242 7110 	movw	r1, #10000	; 0x2710
    d18a:	fb01 6303 	mla	r3, r1, r3, r6
    d18e:	3b01      	subs	r3, #1
    d190:	fbb3 f3f6 	udiv	r3, r3, r6
    d194:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d196:	4b5f      	ldr	r3, [pc, #380]	; (d314 <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    d198:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d19c:	4433      	add	r3, r6
    d19e:	fbb3 f3f6 	udiv	r3, r3, r6
    d1a2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d1a6:	4b5c      	ldr	r3, [pc, #368]	; (d318 <event_connection_prepare+0x958>)
    d1a8:	4433      	add	r3, r6
    d1aa:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d1ae:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d1b0:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d1b2:	4299      	cmp	r1, r3
    d1b4:	bfc4      	itt	gt
    d1b6:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    d1ba:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d1bc:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d1c0:	bfc8      	it	gt
    d1c2:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    d1c4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d1c8:	bfc8      	it	gt
    d1ca:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    d1cc:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    d1d0:	bf08      	it	eq
    d1d2:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d1d6:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    d1da:	2000      	movs	r0, #0
    d1dc:	2101      	movs	r1, #1
    d1de:	f006 f9f7 	bl	135d0 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d1e2:	2200      	movs	r2, #0
    d1e4:	2101      	movs	r1, #1
		mayfly_was_enabled =
    d1e6:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d1e8:	4610      	mov	r0, r2
    d1ea:	f7fa fda1 	bl	7d30 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d1ee:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    d1f2:	f641 2385 	movw	r3, #6789	; 0x1a85
    d1f6:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d1f8:	3207      	adds	r2, #7
		ticker_status =
    d1fa:	9300      	str	r3, [sp, #0]
    d1fc:	b2d2      	uxtb	r2, r2
    d1fe:	4b47      	ldr	r3, [pc, #284]	; (d31c <event_connection_prepare+0x95c>)
    d200:	4608      	mov	r0, r1
    d202:	f7fb fc19 	bl	8a38 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d206:	f030 0802 	bics.w	r8, r0, #2
    d20a:	d026      	beq.n	d25a <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d20c:	4b44      	ldr	r3, [pc, #272]	; (d320 <event_connection_prepare+0x960>)
    d20e:	9301      	str	r3, [sp, #4]
    d210:	9300      	str	r3, [sp, #0]
    d212:	4a44      	ldr	r2, [pc, #272]	; (d324 <event_connection_prepare+0x964>)
    d214:	4b44      	ldr	r3, [pc, #272]	; (d328 <event_connection_prepare+0x968>)
    d216:	4945      	ldr	r1, [pc, #276]	; (d32c <event_connection_prepare+0x96c>)
    d218:	4845      	ldr	r0, [pc, #276]	; (d330 <event_connection_prepare+0x970>)
    d21a:	f7ff bbe1 	b.w	c9e0 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d21e:	fb0a 3212 	mls	r2, sl, r2, r3
    d222:	b292      	uxth	r2, r2
    d224:	fba2 0101 	umull	r0, r1, r2, r1
    d228:	f240 1323 	movw	r3, #291	; 0x123
    d22c:	fb03 1102 	mla	r1, r3, r2, r1
    d230:	a333      	add	r3, pc, #204	; (adr r3, d300 <event_connection_prepare+0x940>)
    d232:	e9d3 2300 	ldrd	r2, r3, [r3]
    d236:	f7f2 ffed 	bl	214 <__aeabi_uldivmod>
    d23a:	eba8 0300 	sub.w	r3, r8, r0
    d23e:	e742      	b.n	d0c6 <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d240:	990c      	ldr	r1, [sp, #48]	; 0x30
    d242:	a32f      	add	r3, pc, #188	; (adr r3, d300 <event_connection_prepare+0x940>)
    d244:	e9d3 2300 	ldrd	r2, r3, [r3]
    d248:	fba1 010b 	umull	r0, r1, r1, fp
    d24c:	f7f2 ffe2 	bl	214 <__aeabi_uldivmod>
    d250:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    d254:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    d256:	4635      	mov	r5, r6
    d258:	e790      	b.n	d17c <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    d25a:	fba5 ab0b 	umull	sl, fp, r5, fp
    d25e:	a328      	add	r3, pc, #160	; (adr r3, d300 <event_connection_prepare+0x940>)
    d260:	e9d3 2300 	ldrd	r2, r3, [r3]
    d264:	4650      	mov	r0, sl
    d266:	4659      	mov	r1, fp
    d268:	f7f2 ffd4 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    d26c:	4a31      	ldr	r2, [pc, #196]	; (d334 <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d26e:	f894 6020 	ldrb.w	r6, [r4, #32]
    d272:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    d276:	2307      	movs	r3, #7
    d278:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d27c:	2100      	movs	r1, #0
    d27e:	4343      	muls	r3, r0
    d280:	fb02 3301 	mla	r3, r2, r1, r3
    d284:	fba0 0102 	umull	r0, r1, r0, r2
    d288:	ebba 0000 	subs.w	r0, sl, r0
    d28c:	4419      	add	r1, r3
    d28e:	eb6b 0101 	sbc.w	r1, fp, r1
    d292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d296:	2300      	movs	r3, #0
    d298:	f7f2 ffbc 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d29c:	68e3      	ldr	r3, [r4, #12]
    d29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d2a0:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    d2a4:	4924      	ldr	r1, [pc, #144]	; (d338 <event_connection_prepare+0x978>)
		ticker_status =
    d2a6:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d2a8:	441a      	add	r2, r3
    d2aa:	4613      	mov	r3, r2
    d2ac:	4a23      	ldr	r2, [pc, #140]	; (d33c <event_connection_prepare+0x97c>)
		ticker_status =
    d2ae:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d2b0:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    d2b4:	bf38      	it	cc
    d2b6:	460a      	movcc	r2, r1
    d2b8:	3607      	adds	r6, #7
		ticker_status =
    d2ba:	f641 2195 	movw	r1, #6805	; 0x1a95
    d2be:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d2c0:	b2f6      	uxtb	r6, r6
		ticker_status =
    d2c2:	4916      	ldr	r1, [pc, #88]	; (d31c <event_connection_prepare+0x95c>)
    d2c4:	9107      	str	r1, [sp, #28]
    d2c6:	9205      	str	r2, [sp, #20]
    d2c8:	9406      	str	r4, [sp, #24]
    d2ca:	f8cd 800c 	str.w	r8, [sp, #12]
    d2ce:	9501      	str	r5, [sp, #4]
    d2d0:	9700      	str	r7, [sp, #0]
    d2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d2d4:	4632      	mov	r2, r6
    d2d6:	4641      	mov	r1, r8
    d2d8:	4640      	mov	r0, r8
    d2da:	f7fb fb0f 	bl	88fc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d2de:	f030 0002 	bics.w	r0, r0, #2
    d2e2:	d193      	bne.n	d20c <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    d2e4:	f1b9 0f00 	cmp.w	r9, #0
    d2e8:	f000 8383 	beq.w	d9f2 <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d2ec:	2201      	movs	r2, #1
    d2ee:	4611      	mov	r1, r2
}
    d2f0:	b00f      	add	sp, #60	; 0x3c
    d2f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d2f6:	f7fa bd1b 	b.w	7d30 <mayfly_enable>
    d2fa:	bf00      	nop
    d2fc:	f3af 8000 	nop.w
    d300:	1afd498d 	.word	0x1afd498d
    d304:	00000007 	.word	0x00000007
    d308:	09ce5400 	.word	0x09ce5400
    d30c:	00018a44 	.word	0x00018a44
    d310:	000f4240 	.word	0x000f4240
    d314:	026259ff 	.word	0x026259ff
    d318:	01c9c37f 	.word	0x01c9c37f
    d31c:	0000b6fd 	.word	0x0000b6fd
    d320:	000155c5 	.word	0x000155c5
    d324:	0001699e 	.word	0x0001699e
    d328:	0001865d 	.word	0x0001865d
    d32c:	000169ed 	.word	0x000169ed
    d330:	00018825 	.word	0x00018825
    d334:	1afd498d 	.word	0x1afd498d
    d338:	0000dba1 	.word	0x0000dba1
    d33c:	0000dba5 	.word	0x0000dba5
    d340:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    d344:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d348:	2b00      	cmp	r3, #0
    d34a:	d05e      	beq.n	d40a <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d34c:	48c9      	ldr	r0, [pc, #804]	; (d674 <event_connection_prepare+0xcb4>)
    d34e:	f7fa fc4c 	bl	7bea <mem_acquire>
		if (node_tx) {
    d352:	4607      	mov	r7, r0
    d354:	b1e8      	cbz	r0, d392 <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    d356:	2300      	movs	r3, #0
    d358:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    d35c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d35e:	3306      	adds	r3, #6
    d360:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    d362:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d366:	7903      	ldrb	r3, [r0, #4]
    d368:	f043 0303 	orr.w	r3, r3, #3
    d36c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d36e:	2308      	movs	r3, #8
    d370:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d372:	2301      	movs	r3, #1
    d374:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    d376:	2205      	movs	r2, #5
    d378:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d37c:	3008      	adds	r0, #8
    d37e:	f7f4 fc3d 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    d382:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d386:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    d38a:	4639      	mov	r1, r7
    d38c:	4620      	mov	r0, r4
    d38e:	f7ff fa47 	bl	c820 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    d392:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    d396:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    d39a:	429a      	cmp	r2, r3
    d39c:	d01e      	beq.n	d3dc <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d39e:	2005      	movs	r0, #5
    d3a0:	f7ff f8a8 	bl	c4f4 <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3a4:	48b3      	ldr	r0, [pc, #716]	; (d674 <event_connection_prepare+0xcb4>)
    d3a6:	f7fa fc20 	bl	7bea <mem_acquire>
		if (node_tx) {
    d3aa:	4601      	mov	r1, r0
    d3ac:	b1b0      	cbz	r0, d3dc <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    d3ae:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    d3b2:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d3b6:	7903      	ldrb	r3, [r0, #4]
    d3b8:	f043 0303 	orr.w	r3, r3, #3
    d3bc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d3be:	2302      	movs	r3, #2
    d3c0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d3c2:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    d3c4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    d3c8:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    d3ca:	4620      	mov	r0, r4
    d3cc:	f7ff fa28 	bl	c820 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    d3d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    d3d2:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    d3d4:	bf98      	it	ls
    d3d6:	3301      	addls	r3, #1
    d3d8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    d3dc:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    d3e0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d3e4:	429a      	cmp	r2, r3
    d3e6:	f000 82eb 	beq.w	d9c0 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d3ea:	2005      	movs	r0, #5
    d3ec:	f7ff f882 	bl	c4f4 <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    d3f0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    d3f4:	f003 0303 	and.w	r3, r3, #3
    d3f8:	2b03      	cmp	r3, #3
    d3fa:	f200 830c 	bhi.w	da16 <event_connection_prepare+0x1056>
    d3fe:	e8df f013 	tbh	[pc, r3, lsl #1]
    d402:	0288      	.short	0x0288
    d404:	02df02df 	.word	0x02df02df
    d408:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    d40a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d40e:	1af3      	subs	r3, r6, r3
    d410:	041f      	lsls	r7, r3, #16
    d412:	d4be      	bmi.n	d392 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d414:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d418:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    d41c:	f104 0717 	add.w	r7, r4, #23
    d420:	2205      	movs	r2, #5
    d422:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d426:	4638      	mov	r0, r7
    d428:	f7f4 fbe8 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    d42c:	2105      	movs	r1, #5
    d42e:	4638      	mov	r0, r7
    d430:	f7fa fd86 	bl	7f40 <util_ones_count_get>
		conn->data_chan_count =
    d434:	7f63      	ldrb	r3, [r4, #29]
    d436:	f360 0305 	bfi	r3, r0, #0, #6
    d43a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    d43c:	2301      	movs	r3, #1
    d43e:	7723      	strb	r3, [r4, #28]
    d440:	e7a7      	b.n	d392 <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    d442:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    d446:	f1b9 0f00 	cmp.w	r9, #0
    d44a:	d1a2      	bne.n	d392 <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d44c:	4889      	ldr	r0, [pc, #548]	; (d674 <event_connection_prepare+0xcb4>)
    d44e:	f7fa fbcc 	bl	7bea <mem_acquire>
	if (!node_tx) {
    d452:	4607      	mov	r7, r0
    d454:	2800      	cmp	r0, #0
    d456:	d09c      	beq.n	d392 <event_connection_prepare+0x9d2>
	if (!conn->role) {
    d458:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d45c:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    d45e:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    d462:	db4d      	blt.n	d500 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d464:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    d468:	465b      	mov	r3, fp
    d46a:	464a      	mov	r2, r9
    d46c:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d470:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d474:	f005 fc22 	bl	12cbc <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    d478:	2210      	movs	r2, #16
    d47a:	4659      	mov	r1, fp
    d47c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d480:	f7f4 fbbc 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d484:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d488:	2208      	movs	r2, #8
    d48a:	f204 1033 	addw	r0, r4, #307	; 0x133
    d48e:	f7f4 fbb5 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    d492:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    d496:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    d49a:	f369 0300 	bfi	r3, r9, #0, #1
    d49e:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    d4a2:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    d4a6:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    d4aa:	f043 0301 	orr.w	r3, r3, #1
    d4ae:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    d4b2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    d4b6:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    d4ba:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    d4be:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    d4c2:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d4c6:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d4ca:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d4ce:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    d4d2:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d4d6:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d4da:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d4de:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    d4e2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    d4e6:	4651      	mov	r1, sl
    d4e8:	4620      	mov	r0, r4
    d4ea:	f7ff fa27 	bl	c93c <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    d4ee:	4639      	mov	r1, r7
    d4f0:	4620      	mov	r0, r4
    d4f2:	f7ff f995 	bl	c820 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    d4f6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d4fa:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    d4fe:	e748      	b.n	d392 <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    d500:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d504:	f003 0348 	and.w	r3, r3, #72	; 0x48
    d508:	2b08      	cmp	r3, #8
    d50a:	f000 80a2 	beq.w	d652 <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    d50e:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    d512:	f1b9 0f00 	cmp.w	r9, #0
    d516:	d020      	beq.n	d55a <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d518:	7903      	ldrb	r3, [r0, #4]
    d51a:	f043 0303 	orr.w	r3, r3, #3
    d51e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    d520:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d524:	0698      	lsls	r0, r3, #26
    d526:	d512      	bpl.n	d54e <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    d528:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    d52c:	0759      	lsls	r1, r3, #29
    d52e:	d50e      	bpl.n	d54e <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d530:	2311      	movs	r3, #17
    d532:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d534:	2303      	movs	r3, #3
    d536:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    d538:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    d53c:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d53e:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    d540:	797b      	ldrb	r3, [r7, #5]
    d542:	3301      	adds	r3, #1
    d544:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    d546:	2300      	movs	r3, #0
    d548:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    d54c:	e7cf      	b.n	d4ee <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    d54e:	230d      	movs	r3, #13
    d550:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    d552:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d556:	2301      	movs	r3, #1
    d558:	e7f1      	b.n	d53e <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d55a:	4846      	ldr	r0, [pc, #280]	; (d674 <event_connection_prepare+0xcb4>)
    d55c:	f7fa fb45 	bl	7bea <mem_acquire>
	if (!node_tx) {
    d560:	4682      	mov	sl, r0
    d562:	2800      	cmp	r0, #0
    d564:	f000 8300 	beq.w	db68 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d568:	7903      	ldrb	r3, [r0, #4]
    d56a:	f043 0303 	orr.w	r3, r3, #3
    d56e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d570:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    d574:	230d      	movs	r3, #13
    d576:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d578:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    d57c:	f100 0308 	add.w	r3, r0, #8
    d580:	4619      	mov	r1, r3
    d582:	2208      	movs	r2, #8
    d584:	6868      	ldr	r0, [r5, #4]
    d586:	930d      	str	r3, [sp, #52]	; 0x34
    d588:	f006 fd62 	bl	14050 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    d58c:	f10a 0310 	add.w	r3, sl, #16
    d590:	4619      	mov	r1, r3
    d592:	465a      	mov	r2, fp
    d594:	6868      	ldr	r0, [r5, #4]
    d596:	930b      	str	r3, [sp, #44]	; 0x2c
    d598:	f006 fd5a 	bl	14050 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    d59c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d59e:	2208      	movs	r2, #8
    d5a0:	4619      	mov	r1, r3
    d5a2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    d5a6:	f7f4 fb29 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    d5aa:	465a      	mov	r2, fp
    d5ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d5ae:	f504 708b 	add.w	r0, r4, #278	; 0x116
    d5b2:	f7f4 fb23 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    d5b6:	4651      	mov	r1, sl
    d5b8:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d5ba:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    d5be:	f7ff f92f 	bl	c820 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d5c2:	4653      	mov	r3, sl
    d5c4:	464a      	mov	r2, r9
    d5c6:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d5ca:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d5ce:	f005 fb75 	bl	12cbc <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    d5d2:	2210      	movs	r2, #16
    d5d4:	4651      	mov	r1, sl
    d5d6:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d5da:	f7f4 fb0f 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d5de:	2208      	movs	r2, #8
    d5e0:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d5e4:	f204 1033 	addw	r0, r4, #307	; 0x133
    d5e8:	f7f4 fb08 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    d5ec:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    d5f0:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    d5f4:	f043 0301 	orr.w	r3, r3, #1
    d5f8:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    d5fc:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    d600:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    d604:	f369 0300 	bfi	r3, r9, #0, #1
    d608:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    d60c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    d610:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    d614:	f043 0310 	orr.w	r3, r3, #16
    d618:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d61c:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    d61e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d622:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    d626:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d62a:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d62e:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d632:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    d636:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d63a:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d63e:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d642:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d646:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d648:	2301      	movs	r3, #1
    d64a:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d64c:	2305      	movs	r3, #5
    d64e:	71fb      	strb	r3, [r7, #7]
    d650:	e74d      	b.n	d4ee <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    d652:	4651      	mov	r1, sl
    d654:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d658:	f7ff f970 	bl	c93c <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    d65c:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d660:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d664:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    d668:	f369 03c3 	bfi	r3, r9, #3, #1
    d66c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d670:	e73d      	b.n	d4ee <event_connection_prepare+0xb2e>
    d672:	bf00      	nop
    d674:	20000a4c 	.word	0x20000a4c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d678:	48b0      	ldr	r0, [pc, #704]	; (d93c <event_connection_prepare+0xf7c>)
    d67a:	f7fa fab6 	bl	7bea <mem_acquire>
	if (node_tx) {
    d67e:	4607      	mov	r7, r0
    d680:	2800      	cmp	r0, #0
    d682:	f43f ae86 	beq.w	d392 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d686:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d68a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    d68e:	4bac      	ldr	r3, [pc, #688]	; (d940 <event_connection_prepare+0xf80>)
    d690:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d694:	7903      	ldrb	r3, [r0, #4]
    d696:	f043 0303 	orr.w	r3, r3, #3
    d69a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d69c:	2309      	movs	r3, #9
    d69e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    d6a0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d6a4:	2b00      	cmp	r3, #0
    d6a6:	bfac      	ite	ge
    d6a8:	2308      	movge	r3, #8
    d6aa:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    d6ac:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    d6ae:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    d6b0:	2100      	movs	r1, #0
    d6b2:	4410      	add	r0, r2
    d6b4:	f7f4 face 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    d6b8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    d6bc:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    d6be:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    d6c0:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    d6c2:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    d6c4:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    d6c6:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    d6c8:	4620      	mov	r0, r4
    d6ca:	f7ff f8a9 	bl	c820 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d6ce:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d6d2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    d6d6:	e65c      	b.n	d392 <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    d6d8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    d6dc:	07da      	lsls	r2, r3, #31
    d6de:	d424      	bmi.n	d72a <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d6e0:	4896      	ldr	r0, [pc, #600]	; (d93c <event_connection_prepare+0xf7c>)
    d6e2:	f7fa fa82 	bl	7bea <mem_acquire>
		if (node_tx) {
    d6e6:	4601      	mov	r1, r0
    d6e8:	2800      	cmp	r0, #0
    d6ea:	f43f ae52 	beq.w	d392 <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    d6ee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d6f2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    d6f6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    d6fa:	f043 0301 	orr.w	r3, r3, #1
    d6fe:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d702:	7903      	ldrb	r3, [r0, #4]
    d704:	f043 0303 	orr.w	r3, r3, #3
    d708:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    d70a:	2306      	movs	r3, #6
    d70c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d70e:	230c      	movs	r3, #12
    d710:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    d712:	2309      	movs	r3, #9
    d714:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    d716:	f06f 030e 	mvn.w	r3, #14
    d71a:	7243      	strb	r3, [r0, #9]
    d71c:	2305      	movs	r3, #5
    d71e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    d720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d724:	72c3      	strb	r3, [r0, #11]
    d726:	7303      	strb	r3, [r0, #12]
    d728:	e7ce      	b.n	d6c8 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    d72a:	079b      	lsls	r3, r3, #30
    d72c:	d526      	bpl.n	d77c <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    d72e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d732:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    d736:	2002      	movs	r0, #2
    d738:	f7fd f86c 	bl	a814 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d73c:	b920      	cbnz	r0, d748 <event_connection_prepare+0xd88>
    d73e:	4b81      	ldr	r3, [pc, #516]	; (d944 <event_connection_prepare+0xf84>)
    d740:	9301      	str	r3, [sp, #4]
    d742:	9300      	str	r3, [sp, #0]
    d744:	4b80      	ldr	r3, [pc, #512]	; (d948 <event_connection_prepare+0xf88>)
    d746:	e45d      	b.n	d004 <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    d748:	8c23      	ldrh	r3, [r4, #32]
    d74a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d74c:	2301      	movs	r3, #1
    d74e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    d750:	7a03      	ldrb	r3, [r0, #8]
    d752:	f043 0303 	orr.w	r3, r3, #3
    d756:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    d758:	2306      	movs	r3, #6
    d75a:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    d75c:	230c      	movs	r3, #12
    d75e:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    d760:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    d764:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    d766:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    d76a:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    d76e:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    d772:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    d776:	f7fd feb7 	bl	b4e8 <packet_rx_enqueue>
    d77a:	e60a      	b.n	d392 <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    d77c:	4b71      	ldr	r3, [pc, #452]	; (d944 <event_connection_prepare+0xf84>)
    d77e:	9301      	str	r3, [sp, #4]
    d780:	9300      	str	r3, [sp, #0]
    d782:	4b71      	ldr	r3, [pc, #452]	; (d948 <event_connection_prepare+0xf88>)
    d784:	f7ff bad2 	b.w	cd2c <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d788:	486c      	ldr	r0, [pc, #432]	; (d93c <event_connection_prepare+0xf7c>)
    d78a:	f7fa fa2e 	bl	7bea <mem_acquire>
	if (node_tx) {
    d78e:	4601      	mov	r1, r0
    d790:	2800      	cmp	r0, #0
    d792:	f43f adfe 	beq.w	d392 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d796:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d79a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d79e:	7903      	ldrb	r3, [r0, #4]
    d7a0:	f043 0303 	orr.w	r3, r3, #3
    d7a4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    d7a6:	2301      	movs	r3, #1
    d7a8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    d7aa:	2312      	movs	r3, #18
    d7ac:	71c3      	strb	r3, [r0, #7]
    d7ae:	e78b      	b.n	d6c8 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    d7b0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    d7b4:	07d7      	lsls	r7, r2, #31
    d7b6:	d551      	bpl.n	d85c <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d7b8:	4860      	ldr	r0, [pc, #384]	; (d93c <event_connection_prepare+0xf7c>)
    d7ba:	f7fa fa16 	bl	7bea <mem_acquire>
		if (node_tx) {
    d7be:	4607      	mov	r7, r0
    d7c0:	2800      	cmp	r0, #0
    d7c2:	f43f ade6 	beq.w	d392 <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    d7c6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d7ca:	f36f 0300 	bfc	r3, #0, #1
    d7ce:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    d7d2:	b2db      	uxtb	r3, r3
    d7d4:	f3c3 0982 	ubfx	r9, r3, #2, #3
    d7d8:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    d7dc:	d138      	bne.n	d850 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    d7de:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    d7e2:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    d7e6:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    d7e8:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    d7ec:	d51a      	bpl.n	d824 <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    d7ee:	2002      	movs	r0, #2
    d7f0:	f7fd f810 	bl	a814 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    d7f4:	b920      	cbnz	r0, d800 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    d7f6:	4b53      	ldr	r3, [pc, #332]	; (d944 <event_connection_prepare+0xf84>)
    d7f8:	9301      	str	r3, [sp, #4]
    d7fa:	9300      	str	r3, [sp, #0]
    d7fc:	4b53      	ldr	r3, [pc, #332]	; (d94c <event_connection_prepare+0xf8c>)
    d7fe:	e401      	b.n	d004 <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    d800:	8c23      	ldrh	r3, [r4, #32]
    d802:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    d804:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    d808:	230c      	movs	r3, #12
    d80a:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    d80c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d810:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d814:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    d816:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d81a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d81e:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    d820:	f7fd fe62 	bl	b4e8 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d824:	793b      	ldrb	r3, [r7, #4]
    d826:	f043 0303 	orr.w	r3, r3, #3
    d82a:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    d82c:	2305      	movs	r3, #5
    d82e:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d830:	2318      	movs	r3, #24
    d832:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    d834:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d838:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d83c:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    d83e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d842:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d846:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    d848:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d84c:	817b      	strh	r3, [r7, #10]
    d84e:	e59c      	b.n	d38a <event_connection_prepare+0x9ca>
								 conn->latency +
    d850:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d852:	3306      	adds	r3, #6
    d854:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    d856:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    d85a:	e7e3      	b.n	d824 <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    d85c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d860:	1af3      	subs	r3, r6, r3
    d862:	0419      	lsls	r1, r3, #16
    d864:	f53f ad95 	bmi.w	d392 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d868:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d86c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    d870:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    d874:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    d878:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d87c:	bf18      	it	ne
    d87e:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    d882:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d886:	bf1c      	itt	ne
    d888:	f367 03c5 	bfine	r3, r7, #3, #3
    d88c:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    d890:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    d894:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    d898:	d008      	beq.n	d8ac <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    d89a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d89e:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    d8a2:	095b      	lsrs	r3, r3, #5
    d8a4:	f363 0702 	bfi	r7, r3, #0, #3
    d8a8:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    d8ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d8b0:	461f      	mov	r7, r3
    d8b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d8b6:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d8ba:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    d8bc:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d8c0:	d40b      	bmi.n	d8da <event_connection_prepare+0xf1a>
    d8c2:	b2fb      	uxtb	r3, r7
    d8c4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d8c8:	4283      	cmp	r3, r0
    d8ca:	d106      	bne.n	d8da <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    d8cc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d8d0:	f003 0307 	and.w	r3, r3, #7
    d8d4:	428b      	cmp	r3, r1
    d8d6:	f43f ad5c 	beq.w	d392 <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    d8da:	2002      	movs	r0, #2
    d8dc:	f7fc ff9a 	bl	a814 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d8e0:	2800      	cmp	r0, #0
    d8e2:	d088      	beq.n	d7f6 <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    d8e4:	8c23      	ldrh	r3, [r4, #32]
    d8e6:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d8e8:	230c      	movs	r3, #12
    d8ea:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    d8ec:	2300      	movs	r3, #0
    d8ee:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    d8f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d8f4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d8f8:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    d8fa:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d8fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d902:	7343      	strb	r3, [r0, #13]
    d904:	e737      	b.n	d776 <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    d906:	4b0f      	ldr	r3, [pc, #60]	; (d944 <event_connection_prepare+0xf84>)
    d908:	9301      	str	r3, [sp, #4]
    d90a:	9300      	str	r3, [sp, #0]
    d90c:	4b10      	ldr	r3, [pc, #64]	; (d950 <event_connection_prepare+0xf90>)
    d90e:	f7ff ba0d 	b.w	cd2c <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    d912:	f7fc ff69 	bl	a7e8 <packet_rx_acquired_count_get>
    d916:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d918:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d91c:	f7fa f994 	bl	7c48 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d920:	4438      	add	r0, r7
    d922:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d924:	28ff      	cmp	r0, #255	; 0xff
    d926:	d91d      	bls.n	d964 <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    d928:	4b06      	ldr	r3, [pc, #24]	; (d944 <event_connection_prepare+0xf84>)
    d92a:	9301      	str	r3, [sp, #4]
    d92c:	9300      	str	r3, [sp, #0]
    d92e:	4a09      	ldr	r2, [pc, #36]	; (d954 <event_connection_prepare+0xf94>)
    d930:	4b09      	ldr	r3, [pc, #36]	; (d958 <event_connection_prepare+0xf98>)
    d932:	490a      	ldr	r1, [pc, #40]	; (d95c <event_connection_prepare+0xf9c>)
    d934:	480a      	ldr	r0, [pc, #40]	; (d960 <event_connection_prepare+0xfa0>)
    d936:	f7ff b853 	b.w	c9e0 <event_connection_prepare+0x20>
    d93a:	bf00      	nop
    d93c:	20000a4c 	.word	0x20000a4c
    d940:	000141ff 	.word	0x000141ff
    d944:	000155c5 	.word	0x000155c5
    d948:	00018671 	.word	0x00018671
    d94c:	000186cd 	.word	0x000186cd
    d950:	000186e4 	.word	0x000186e4
    d954:	0001699e 	.word	0x0001699e
    d958:	000186ab 	.word	0x000186ab
    d95c:	000169ed 	.word	0x000169ed
    d960:	00018873 	.word	0x00018873
		if (_radio.packet_rx_data_count != free_count_rx) {
    d964:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d968:	4283      	cmp	r3, r0
    d96a:	d129      	bne.n	d9c0 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d96c:	4881      	ldr	r0, [pc, #516]	; (db74 <event_connection_prepare+0x11b4>)
    d96e:	f7fa f93c 	bl	7bea <mem_acquire>
		if (!node_tx) {
    d972:	4601      	mov	r1, r0
    d974:	b320      	cbz	r0, d9c0 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d976:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    d97a:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d97e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    d982:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d984:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d986:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d988:	f365 0301 	bfi	r3, r5, #0, #2
    d98c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d990:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    d992:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d994:	f043 0303 	orr.w	r3, r3, #3
    d998:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    d99a:	2309      	movs	r3, #9
    d99c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    d99e:	2314      	movs	r3, #20
    d9a0:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    d9a2:	231b      	movs	r3, #27
    d9a4:	720b      	strb	r3, [r1, #8]
    d9a6:	2300      	movs	r3, #0
    d9a8:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d9aa:	2348      	movs	r3, #72	; 0x48
    d9ac:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    d9ae:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d9b0:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    d9b2:	4620      	mov	r0, r4
    d9b4:	f7fe ff34 	bl	c820 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d9b8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d9bc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    d9c0:	f894 3020 	ldrb.w	r3, [r4, #32]
    d9c4:	f994 501d 	ldrsb.w	r5, [r4, #29]
    d9c8:	486b      	ldr	r0, [pc, #428]	; (db78 <event_connection_prepare+0x11b8>)
    d9ca:	496c      	ldr	r1, [pc, #432]	; (db7c <event_connection_prepare+0x11bc>)
    d9cc:	68a2      	ldr	r2, [r4, #8]
    d9ce:	9403      	str	r4, [sp, #12]
    d9d0:	3307      	adds	r3, #7
    d9d2:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    d9d6:	bf38      	it	cc
    d9d8:	4601      	movcc	r1, r0
    d9da:	b2db      	uxtb	r3, r3
    d9dc:	e88d 000c 	stmia.w	sp, {r2, r3}
    d9e0:	9102      	str	r1, [sp, #8]
    d9e2:	1d23      	adds	r3, r4, #4
    d9e4:	4622      	mov	r2, r4
    d9e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    d9e8:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    d9ea:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    d9ec:	f7fe fd90 	bl	c510 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    d9f0:	8466      	strh	r6, [r4, #34]	; 0x22
}
    d9f2:	b00f      	add	sp, #60	; 0x3c
    d9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    d9f8:	f7fc fef6 	bl	a7e8 <packet_rx_acquired_count_get>
    d9fc:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d9fe:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    da02:	f7fa f921 	bl	7c48 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    da06:	4438      	add	r0, r7
    da08:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    da0a:	28ff      	cmp	r0, #255	; 0xff
    da0c:	d88c      	bhi.n	d928 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    da0e:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    da12:	4283      	cmp	r3, r0
    da14:	d005      	beq.n	da22 <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    da16:	4b5a      	ldr	r3, [pc, #360]	; (db80 <event_connection_prepare+0x11c0>)
    da18:	9301      	str	r3, [sp, #4]
    da1a:	9300      	str	r3, [sp, #0]
    da1c:	4b59      	ldr	r3, [pc, #356]	; (db84 <event_connection_prepare+0x11c4>)
    da1e:	f7ff b985 	b.w	cd2c <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    da22:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    da26:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    da2a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    da2e:	2100      	movs	r1, #0
    da30:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    da34:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    da38:	f361 02c3 	bfi	r2, r1, #3, #1
    da3c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    da40:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    da44:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    da46:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    da4a:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    da4c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    da50:	f7fa f8fa 	bl	7c48 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    da54:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    da58:	b10b      	cbz	r3, da5e <event_connection_prepare+0x109e>
			free_count_conn++;
    da5a:	3001      	adds	r0, #1
    da5c:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    da5e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    da62:	b10b      	cbz	r3, da68 <event_connection_prepare+0x10a8>
			free_count_conn++;
    da64:	3001      	adds	r0, #1
    da66:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    da68:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    da6a:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    da6e:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    da70:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    da72:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    da76:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    da78:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    da7a:	d052      	beq.n	db22 <event_connection_prepare+0x1162>
    da7c:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    da80:	42bb      	cmp	r3, r7
    da82:	d34e      	bcc.n	db22 <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    da84:	2002      	movs	r0, #2
    da86:	f7fc fec5 	bl	a814 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    da8a:	2800      	cmp	r0, #0
    da8c:	d155      	bne.n	db3a <event_connection_prepare+0x117a>
    da8e:	4b3c      	ldr	r3, [pc, #240]	; (db80 <event_connection_prepare+0x11c0>)
    da90:	9301      	str	r3, [sp, #4]
    da92:	9300      	str	r3, [sp, #0]
    da94:	4b3b      	ldr	r3, [pc, #236]	; (db84 <event_connection_prepare+0x11c4>)
    da96:	f7ff bab5 	b.w	d004 <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    da9a:	b90b      	cbnz	r3, daa0 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    da9c:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    daa0:	3b01      	subs	r3, #1
    daa2:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    daa6:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    daaa:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    daae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    dab2:	4649      	mov	r1, r9
    dab4:	6818      	ldr	r0, [r3, #0]
    dab6:	f7fa f8b2 	bl	7c1e <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    daba:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    dabe:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    dac2:	3a01      	subs	r2, #1
    dac4:	4293      	cmp	r3, r2
    dac6:	db08      	blt.n	dada <event_connection_prepare+0x111a>
    dac8:	4b2d      	ldr	r3, [pc, #180]	; (db80 <event_connection_prepare+0x11c0>)
    daca:	9301      	str	r3, [sp, #4]
    dacc:	9300      	str	r3, [sp, #0]
    dace:	4a2e      	ldr	r2, [pc, #184]	; (db88 <event_connection_prepare+0x11c8>)
    dad0:	4b2c      	ldr	r3, [pc, #176]	; (db84 <event_connection_prepare+0x11c4>)
    dad2:	492e      	ldr	r1, [pc, #184]	; (db8c <event_connection_prepare+0x11cc>)
    dad4:	482e      	ldr	r0, [pc, #184]	; (db90 <event_connection_prepare+0x11d0>)
    dad6:	f7fe bf83 	b.w	c9e0 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    dada:	3301      	adds	r3, #1
    dadc:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    dae0:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    dae4:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    dae8:	4293      	cmp	r3, r2
    daea:	d1d6      	bne.n	da9a <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    daec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    daee:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    daf2:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    daf4:	bf9a      	itte	ls
    daf6:	2334      	movls	r3, #52	; 0x34
    daf8:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    dafc:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    db00:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    db04:	fbb2 f2f1 	udiv	r2, r2, r1
    db08:	b2d2      	uxtb	r2, r2
    db0a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    db0e:	b95a      	cbnz	r2, db28 <event_connection_prepare+0x1168>
    db10:	4b1b      	ldr	r3, [pc, #108]	; (db80 <event_connection_prepare+0x11c0>)
    db12:	9301      	str	r3, [sp, #4]
    db14:	9300      	str	r3, [sp, #0]
    db16:	4a1c      	ldr	r2, [pc, #112]	; (db88 <event_connection_prepare+0x11c8>)
    db18:	4b1a      	ldr	r3, [pc, #104]	; (db84 <event_connection_prepare+0x11c4>)
    db1a:	491c      	ldr	r1, [pc, #112]	; (db8c <event_connection_prepare+0x11cc>)
    db1c:	481d      	ldr	r0, [pc, #116]	; (db94 <event_connection_prepare+0x11d4>)
    db1e:	f7fe bf5f 	b.w	c9e0 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    db22:	f8df 9078 	ldr.w	r9, [pc, #120]	; db9c <event_connection_prepare+0x11dc>
    db26:	e7db      	b.n	dae0 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    db28:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    db2c:	4b1a      	ldr	r3, [pc, #104]	; (db98 <event_connection_prepare+0x11d8>)
    db2e:	f7fa f835 	bl	7b9c <mem_init>
			packet_rx_allocate(4);
    db32:	2004      	movs	r0, #4
    db34:	f7fc fee6 	bl	a904 <packet_rx_allocate>
    db38:	e7a4      	b.n	da84 <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    db3a:	8c23      	ldrh	r3, [r4, #32]
    db3c:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    db3e:	2301      	movs	r3, #1
    db40:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    db42:	7a03      	ldrb	r3, [r0, #8]
    db44:	f043 0303 	orr.w	r3, r3, #3
    db48:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    db4a:	2309      	movs	r3, #9
    db4c:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    db4e:	2315      	movs	r3, #21
    db50:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    db52:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    db54:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    db56:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    db58:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    db5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    db5c:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    db5e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    db60:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    db62:	f7fd fcc1 	bl	b4e8 <packet_rx_enqueue>
    db66:	e72b      	b.n	d9c0 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    db68:	4902      	ldr	r1, [pc, #8]	; (db74 <event_connection_prepare+0x11b4>)
    db6a:	4638      	mov	r0, r7
    db6c:	f7fa f857 	bl	7c1e <mem_release>
    db70:	e40f      	b.n	d392 <event_connection_prepare+0x9d2>
    db72:	bf00      	nop
    db74:	20000a4c 	.word	0x20000a4c
    db78:	0000decd 	.word	0x0000decd
    db7c:	0000dbe5 	.word	0x0000dbe5
    db80:	000155c5 	.word	0x000155c5
    db84:	000186ab 	.word	0x000186ab
    db88:	0001699e 	.word	0x0001699e
    db8c:	000169ed 	.word	0x000169ed
    db90:	000188aa 	.word	0x000188aa
    db94:	00018904 	.word	0x00018904
    db98:	20000a20 	.word	0x20000a20
    db9c:	20000a38 	.word	0x20000a38

0000dba0 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    dba0:	f7fe bf0e 	b.w	c9c0 <event_connection_prepare>

0000dba4 <event_slave_prepare>:
    dba4:	f7fe bf0c 	b.w	c9c0 <event_connection_prepare>

0000dba8 <connection_configure>:
{
    dba8:	b510      	push	{r4, lr}
    dbaa:	4604      	mov	r4, r0
	radio_reset();
    dbac:	f005 f962 	bl	12e74 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    dbb0:	2000      	movs	r0, #0
    dbb2:	f005 f989 	bl	12ec8 <radio_tx_power_set>
	radio_isr_set(isr);
    dbb6:	480a      	ldr	r0, [pc, #40]	; (dbe0 <connection_configure+0x38>)
    dbb8:	f005 f926 	bl	12e08 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    dbbc:	f104 0010 	add.w	r0, r4, #16
    dbc0:	f005 f9a0 	bl	12f04 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    dbc4:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    dbc6:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    dbc8:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    dbca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    dbce:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    dbd0:	f240 605b 	movw	r0, #1627	; 0x65b
    dbd4:	4319      	orrs	r1, r3
}
    dbd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    dbda:	f005 ba3b 	b.w	13054 <radio_crc_configure>
    dbde:	bf00      	nop
    dbe0:	0000f291 	.word	0x0000f291

0000dbe4 <event_slave>:
{
    dbe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    dbe8:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    dbea:	4b71      	ldr	r3, [pc, #452]	; (ddb0 <event_slave+0x1cc>)
    dbec:	7cda      	ldrb	r2, [r3, #19]
{
    dbee:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    dbf0:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    dbf4:	461d      	mov	r5, r3
    dbf6:	b172      	cbz	r2, dc16 <event_slave+0x32>
    dbf8:	4b6e      	ldr	r3, [pc, #440]	; (ddb4 <event_slave+0x1d0>)
    dbfa:	9301      	str	r3, [sp, #4]
    dbfc:	9300      	str	r3, [sp, #0]
    dbfe:	4a6e      	ldr	r2, [pc, #440]	; (ddb8 <event_slave+0x1d4>)
    dc00:	4b6e      	ldr	r3, [pc, #440]	; (ddbc <event_slave+0x1d8>)
    dc02:	496f      	ldr	r1, [pc, #444]	; (ddc0 <event_slave+0x1dc>)
    dc04:	486f      	ldr	r0, [pc, #444]	; (ddc4 <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    dc06:	f7f3 f9c1 	bl	f8c <printk>
    dc0a:	4040      	eors	r0, r0
    dc0c:	f380 8811 	msr	BASEPRI, r0
    dc10:	f04f 0004 	mov.w	r0, #4
    dc14:	df02      	svc	2
    dc16:	7c1b      	ldrb	r3, [r3, #16]
    dc18:	8c22      	ldrh	r2, [r4, #32]
    dc1a:	b2db      	uxtb	r3, r3
    dc1c:	3207      	adds	r2, #7
    dc1e:	4293      	cmp	r3, r2
    dc20:	d007      	beq.n	dc32 <event_slave+0x4e>
    dc22:	4b64      	ldr	r3, [pc, #400]	; (ddb4 <event_slave+0x1d0>)
    dc24:	9301      	str	r3, [sp, #4]
    dc26:	9300      	str	r3, [sp, #0]
    dc28:	4a63      	ldr	r2, [pc, #396]	; (ddb8 <event_slave+0x1d4>)
    dc2a:	4b64      	ldr	r3, [pc, #400]	; (ddbc <event_slave+0x1d8>)
    dc2c:	4964      	ldr	r1, [pc, #400]	; (ddc0 <event_slave+0x1dc>)
    dc2e:	4866      	ldr	r0, [pc, #408]	; (ddc8 <event_slave+0x1e4>)
    dc30:	e7e9      	b.n	dc06 <event_slave+0x22>
	_radio.packet_counter = 0;
    dc32:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    dc36:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    dc3a:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    dc3c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    dc3e:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    dc40:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    dc42:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    dc44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    dc46:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    dc4a:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    dc4c:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    dc4e:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    dc50:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    dc52:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    dc54:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    dc56:	f7ff ffa7 	bl	dba8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    dc5a:	2096      	movs	r0, #150	; 0x96
    dc5c:	f005 fab4 	bl	131c8 <radio_tmr_tifs_set>
				     conn->phy_flags);
    dc60:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    dc64:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    dc68:	09d3      	lsrs	r3, r2, #7
    dc6a:	4631      	mov	r1, r6
    dc6c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dc70:	f000 0007 	and.w	r0, r0, #7
    dc74:	f005 fa18 	bl	130a8 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    dc78:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    dc7c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    dc80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    dc84:	4620      	mov	r0, r4
    dc86:	3108      	adds	r1, #8
    dc88:	f7fd f922 	bl	aed0 <rx_packet_set>
	if (conn->data_chan_sel) {
    dc8c:	7f63      	ldrb	r3, [r4, #29]
    dc8e:	f013 0f40 	tst.w	r3, #64	; 0x40
    dc92:	f104 0217 	add.w	r2, r4, #23
    dc96:	d05a      	beq.n	dd4e <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    dc98:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    dc9a:	8be1      	ldrh	r1, [r4, #30]
    dc9c:	3801      	subs	r0, #1
    dc9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dca2:	b280      	uxth	r0, r0
    dca4:	f7fe fd78 	bl	c798 <chan_sel_2>
	chan_set(data_chan_use);
    dca8:	f7fe f84c 	bl	bd44 <chan_set>
	conn->slave.window_widening_event_us +=
    dcac:	6e23      	ldr	r3, [r4, #96]	; 0x60
    dcae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    dcb0:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    dcb2:	2200      	movs	r2, #0
    dcb4:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    dcb6:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    dcb8:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    dcba:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    dcbc:	bf88      	it	hi
    dcbe:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    dcc0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    dcc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    dcc4:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    dcc6:	4413      	add	r3, r2
    dcc8:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    dcca:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    dccc:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    dcce:	f107 0109 	add.w	r1, r7, #9
    dcd2:	4630      	mov	r0, r6
    dcd4:	f005 fa84 	bl	131e0 <radio_tmr_start>
    dcd8:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    dcda:	f005 fb1d 	bl	13318 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    dcde:	4630      	mov	r0, r6
    dce0:	f005 fb3c 	bl	1335c <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    dce4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    dce6:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    dce8:	f103 0650 	add.w	r6, r3, #80	; 0x50
    dcec:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    dcf0:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    dcf4:	2101      	movs	r1, #1
    dcf6:	f000 0007 	and.w	r0, r0, #7
    dcfa:	f005 f95c 	bl	12fb6 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    dcfe:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    dd00:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    dd02:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    dd06:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    dd0a:	2802      	cmp	r0, #2
    dd0c:	d03f      	beq.n	dd8e <event_slave+0x1aa>
		return 40;
    dd0e:	2804      	cmp	r0, #4
    dd10:	bf0c      	ite	eq
    dd12:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    dd16:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    dd18:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    dd1a:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    dd1c:	f005 f94d 	bl	12fba <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    dd20:	4430      	add	r0, r6
    dd22:	f005 fadb 	bl	132dc <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    dd26:	f894 1020 	ldrb.w	r1, [r4, #32]
    dd2a:	3107      	adds	r1, #7
    dd2c:	463a      	mov	r2, r7
    dd2e:	b2c9      	uxtb	r1, r1
    dd30:	4620      	mov	r0, r4
    dd32:	f7fe fab9 	bl	c2a8 <preempt_calc>
    dd36:	4603      	mov	r3, r0
    dd38:	b358      	cbz	r0, dd92 <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    dd3a:	2304      	movs	r3, #4
    dd3c:	752b      	strb	r3, [r5, #20]
		radio_disable();
    dd3e:	f005 f94d 	bl	12fdc <radio_disable>
	packet_tx_enqueue(2);
    dd42:	2002      	movs	r0, #2
}
    dd44:	b002      	add	sp, #8
    dd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    dd4a:	f7fd bf11 	b.w	bb70 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    dd4e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    dd50:	7fa6      	ldrb	r6, [r4, #30]
    dd52:	fb01 6606 	mla	r6, r1, r6, r6
    dd56:	7fe1      	ldrb	r1, [r4, #31]
    dd58:	2025      	movs	r0, #37	; 0x25
    dd5a:	440e      	add	r6, r1
    dd5c:	fb96 f1f0 	sdiv	r1, r6, r0
    dd60:	fb00 6611 	mls	r6, r0, r1, r6
    dd64:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dd66:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    dd68:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dd6a:	5c51      	ldrb	r1, [r2, r1]
    dd6c:	f006 0607 	and.w	r6, r6, #7
    dd70:	fa41 f606 	asr.w	r6, r1, r6
    dd74:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    dd76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dd7a:	d495      	bmi.n	dca8 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    dd7c:	fbb0 f1f3 	udiv	r1, r0, r3
    dd80:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    dd84:	b2c9      	uxtb	r1, r1
    dd86:	4610      	mov	r0, r2
    dd88:	f7fc fd12 	bl	a7b0 <chan_sel_remap>
    dd8c:	e78c      	b.n	dca8 <event_slave+0xc4>
		return 24;
    dd8e:	2318      	movs	r3, #24
    dd90:	e7c2      	b.n	dd18 <event_slave+0x134>
		ticker_status =
    dd92:	4a0e      	ldr	r2, [pc, #56]	; (ddcc <event_slave+0x1e8>)
    dd94:	4601      	mov	r1, r0
    dd96:	f7fa fecd 	bl	8b34 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    dd9a:	f030 0302 	bics.w	r3, r0, #2
    dd9e:	d0d0      	beq.n	dd42 <event_slave+0x15e>
    dda0:	4b04      	ldr	r3, [pc, #16]	; (ddb4 <event_slave+0x1d0>)
    dda2:	9301      	str	r3, [sp, #4]
    dda4:	9300      	str	r3, [sp, #0]
    dda6:	4a04      	ldr	r2, [pc, #16]	; (ddb8 <event_slave+0x1d4>)
    dda8:	4b04      	ldr	r3, [pc, #16]	; (ddbc <event_slave+0x1d8>)
    ddaa:	4905      	ldr	r1, [pc, #20]	; (ddc0 <event_slave+0x1dc>)
    ddac:	4808      	ldr	r0, [pc, #32]	; (ddd0 <event_slave+0x1ec>)
    ddae:	e72a      	b.n	dc06 <event_slave+0x22>
    ddb0:	200008f0 	.word	0x200008f0
    ddb4:	000155c5 	.word	0x000155c5
    ddb8:	0001699e 	.word	0x0001699e
    ddbc:	000186fd 	.word	0x000186fd
    ddc0:	000169ed 	.word	0x000169ed
    ddc4:	00018941 	.word	0x00018941
    ddc8:	000189f4 	.word	0x000189f4
    ddcc:	0000b8e5 	.word	0x0000b8e5
    ddd0:	00018825 	.word	0x00018825

0000ddd4 <prepare_pdu_data_tx>:
	    conn->empty ||
    ddd4:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    ddd8:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    dddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddde:	4604      	mov	r4, r0
    dde0:	460e      	mov	r6, r1
	if (/* empty packet */
    dde2:	d109      	bne.n	ddf8 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    dde4:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    dde8:	b131      	cbz	r1, ddf8 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    ddea:	f01c 0f08 	tst.w	ip, #8
    ddee:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    ddf2:	d022      	beq.n	de3a <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    ddf4:	4571      	cmp	r1, lr
    ddf6:	d020      	beq.n	de3a <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    ddf8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ddfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    de00:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    de04:	f005 f93c 	bl	13080 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    de08:	7803      	ldrb	r3, [r0, #0]
    de0a:	2201      	movs	r2, #1
    de0c:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    de10:	2200      	movs	r2, #0
    de12:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    de14:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    de18:	7003      	strb	r3, [r0, #0]
    de1a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    de1c:	b152      	cbz	r2, de34 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    de1e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    de22:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    de24:	7803      	ldrb	r3, [r0, #0]
    de26:	f36f 1347 	bfc	r3, #5, #3
    de2a:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    de2c:	2300      	movs	r3, #0
    de2e:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    de30:	6030      	str	r0, [r6, #0]
    de32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    de34:	f362 1304 	bfi	r3, r2, #4, #1
    de38:	e7f3      	b.n	de22 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    de3a:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    de3e:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    de42:	1d0d      	adds	r5, r1, #4
    de44:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    de46:	b913      	cbnz	r3, de4e <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    de48:	7843      	ldrb	r3, [r0, #1]
    de4a:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    de4e:	b122      	cbz	r2, de5a <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    de50:	5cab      	ldrb	r3, [r5, r2]
    de52:	2701      	movs	r7, #1
    de54:	f367 0301 	bfi	r3, r7, #0, #2
    de58:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    de5a:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    de5e:	1abf      	subs	r7, r7, r2
    de60:	b2ff      	uxtb	r7, r7
    de62:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    de64:	5cab      	ldrb	r3, [r5, r2]
    de66:	f36f 1304 	bfc	r3, #4, #1
    de6a:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    de6c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    de70:	f003 0307 	and.w	r3, r3, #7
    de74:	2b02      	cmp	r3, #2
    de76:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    de78:	bf15      	itete	ne
    de7a:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    de7c:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    de7e:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    de80:	3b0b      	subeq	r3, #11
    de82:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    de84:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    de88:	bf18      	it	ne
    de8a:	3b04      	subne	r3, #4
    de8c:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    de90:	bf18      	it	ne
    de92:	b29b      	uxthne	r3, r3
    de94:	4563      	cmp	r3, ip
    de96:	bf28      	it	cs
    de98:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    de9a:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    de9c:	bf81      	itttt	hi
    de9e:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    dea0:	5cab      	ldrbhi	r3, [r5, r2]
    dea2:	f043 0310 	orrhi.w	r3, r3, #16
    dea6:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    dea8:	680b      	ldr	r3, [r1, #0]
    deaa:	b11b      	cbz	r3, deb4 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    deac:	5cab      	ldrb	r3, [r5, r2]
    deae:	f043 0310 	orr.w	r3, r3, #16
    deb2:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    deb4:	f1be 0f00 	cmp.w	lr, #0
    deb8:	d1b4      	bne.n	de24 <prepare_pdu_data_tx+0x50>
    deba:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    debe:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    dec0:	bf1c      	itt	ne
    dec2:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    dec6:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    deca:	e7ab      	b.n	de24 <prepare_pdu_data_tx+0x50>

0000decc <event_master>:
{
    decc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dece:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    ded0:	4b56      	ldr	r3, [pc, #344]	; (e02c <event_master+0x160>)
    ded2:	7cd9      	ldrb	r1, [r3, #19]
{
    ded4:	b085      	sub	sp, #20
    ded6:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    ded8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    dedc:	461d      	mov	r5, r3
    dede:	b171      	cbz	r1, defe <event_master+0x32>
    dee0:	4b53      	ldr	r3, [pc, #332]	; (e030 <event_master+0x164>)
    dee2:	9301      	str	r3, [sp, #4]
    dee4:	9300      	str	r3, [sp, #0]
    dee6:	4a53      	ldr	r2, [pc, #332]	; (e034 <event_master+0x168>)
    dee8:	4b53      	ldr	r3, [pc, #332]	; (e038 <event_master+0x16c>)
    deea:	4954      	ldr	r1, [pc, #336]	; (e03c <event_master+0x170>)
    deec:	4854      	ldr	r0, [pc, #336]	; (e040 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    deee:	f7f3 f84d 	bl	f8c <printk>
    def2:	4040      	eors	r0, r0
    def4:	f380 8811 	msr	BASEPRI, r0
    def8:	f04f 0004 	mov.w	r0, #4
    defc:	df02      	svc	2
    defe:	7c1b      	ldrb	r3, [r3, #16]
    df00:	8c21      	ldrh	r1, [r4, #32]
    df02:	b2db      	uxtb	r3, r3
    df04:	3107      	adds	r1, #7
    df06:	428b      	cmp	r3, r1
    df08:	d007      	beq.n	df1a <event_master+0x4e>
    df0a:	4b49      	ldr	r3, [pc, #292]	; (e030 <event_master+0x164>)
    df0c:	9301      	str	r3, [sp, #4]
    df0e:	9300      	str	r3, [sp, #0]
    df10:	4a48      	ldr	r2, [pc, #288]	; (e034 <event_master+0x168>)
    df12:	4b49      	ldr	r3, [pc, #292]	; (e038 <event_master+0x16c>)
    df14:	4949      	ldr	r1, [pc, #292]	; (e03c <event_master+0x170>)
    df16:	484b      	ldr	r0, [pc, #300]	; (e044 <event_master+0x178>)
    df18:	e7e9      	b.n	deee <event_master+0x22>
	_radio.packet_counter = 0;
    df1a:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    df1e:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    df22:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    df24:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    df26:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    df28:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    df2a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    df2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    df2e:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    df32:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    df34:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    df36:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    df38:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    df3a:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    df3c:	f7fd fe18 	bl	bb70 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    df40:	a903      	add	r1, sp, #12
    df42:	4620      	mov	r0, r4
    df44:	f7ff ff46 	bl	ddd4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    df48:	9903      	ldr	r1, [sp, #12]
    df4a:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    df4e:	780b      	ldrb	r3, [r1, #0]
    df50:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    df54:	f3c2 0240 	ubfx	r2, r2, #1, #1
    df58:	f362 0382 	bfi	r3, r2, #2, #1
    df5c:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    df5e:	4620      	mov	r0, r4
    df60:	f7ff fe22 	bl	dba8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    df64:	2096      	movs	r0, #150	; 0x96
    df66:	f005 f92f 	bl	131c8 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    df6a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    df6e:	f000 0007 	and.w	r0, r0, #7
    df72:	f005 f88d 	bl	13090 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    df76:	9903      	ldr	r1, [sp, #12]
    df78:	4620      	mov	r0, r4
    df7a:	f7fc ffd5 	bl	af28 <tx_packet_set>
	if (conn->data_chan_sel) {
    df7e:	7f63      	ldrb	r3, [r4, #29]
    df80:	f013 0f40 	tst.w	r3, #64	; 0x40
    df84:	f104 0217 	add.w	r2, r4, #23
    df88:	d021      	beq.n	dfce <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    df8a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    df8c:	8be1      	ldrh	r1, [r4, #30]
    df8e:	3801      	subs	r0, #1
    df90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    df94:	b280      	uxth	r0, r0
    df96:	f7fe fbff 	bl	c798 <chan_sel_2>
	chan_set(data_chan_use);
    df9a:	f7fd fed3 	bl	bd44 <chan_set>
		remainder_us = radio_tmr_start(1,
    df9e:	68ea      	ldr	r2, [r5, #12]
    dfa0:	f107 0109 	add.w	r1, r7, #9
    dfa4:	2001      	movs	r0, #1
    dfa6:	f005 f91b 	bl	131e0 <radio_tmr_start>
		radio_tmr_end_capture();
    dfaa:	f005 f9e9 	bl	13380 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    dfae:	f894 1020 	ldrb.w	r1, [r4, #32]
    dfb2:	3107      	adds	r1, #7
    dfb4:	463a      	mov	r2, r7
    dfb6:	b2c9      	uxtb	r1, r1
    dfb8:	4620      	mov	r0, r4
    dfba:	f7fe f975 	bl	c2a8 <preempt_calc>
	if (0 !=
    dfbe:	4603      	mov	r3, r0
    dfc0:	b328      	cbz	r0, e00e <event_master+0x142>
		_radio.state = STATE_STOP;
    dfc2:	2304      	movs	r3, #4
    dfc4:	752b      	strb	r3, [r5, #20]
		radio_disable();
    dfc6:	f005 f809 	bl	12fdc <radio_disable>
}
    dfca:	b005      	add	sp, #20
    dfcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    dfce:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    dfd0:	7fa6      	ldrb	r6, [r4, #30]
    dfd2:	fb01 6606 	mla	r6, r1, r6, r6
    dfd6:	7fe1      	ldrb	r1, [r4, #31]
    dfd8:	2025      	movs	r0, #37	; 0x25
    dfda:	440e      	add	r6, r1
    dfdc:	fb96 f1f0 	sdiv	r1, r6, r0
    dfe0:	fb00 6611 	mls	r6, r0, r1, r6
    dfe4:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dfe6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    dfe8:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dfea:	5c51      	ldrb	r1, [r2, r1]
    dfec:	f006 0607 	and.w	r6, r6, #7
    dff0:	fa41 f606 	asr.w	r6, r1, r6
    dff4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    dff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    dffa:	d4ce      	bmi.n	df9a <event_master+0xce>
		chan_index = chan_next % chan_count;
    dffc:	fbb0 f1f3 	udiv	r1, r0, r3
    e000:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    e004:	b2c9      	uxtb	r1, r1
    e006:	4610      	mov	r0, r2
    e008:	f7fc fbd2 	bl	a7b0 <chan_sel_remap>
    e00c:	e7c5      	b.n	df9a <event_master+0xce>
		ticker_status =
    e00e:	4a0e      	ldr	r2, [pc, #56]	; (e048 <event_master+0x17c>)
    e010:	4601      	mov	r1, r0
    e012:	f7fa fd8f 	bl	8b34 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e016:	f030 0302 	bics.w	r3, r0, #2
    e01a:	d0d6      	beq.n	dfca <event_master+0xfe>
    e01c:	4b04      	ldr	r3, [pc, #16]	; (e030 <event_master+0x164>)
    e01e:	9301      	str	r3, [sp, #4]
    e020:	9300      	str	r3, [sp, #0]
    e022:	4a04      	ldr	r2, [pc, #16]	; (e034 <event_master+0x168>)
    e024:	4b04      	ldr	r3, [pc, #16]	; (e038 <event_master+0x16c>)
    e026:	4905      	ldr	r1, [pc, #20]	; (e03c <event_master+0x170>)
    e028:	4808      	ldr	r0, [pc, #32]	; (e04c <event_master+0x180>)
    e02a:	e760      	b.n	deee <event_master+0x22>
    e02c:	200008f0 	.word	0x200008f0
    e030:	000155c5 	.word	0x000155c5
    e034:	0001699e 	.word	0x0001699e
    e038:	00018709 	.word	0x00018709
    e03c:	000169ed 	.word	0x000169ed
    e040:	00018941 	.word	0x00018941
    e044:	000189f4 	.word	0x000189f4
    e048:	0000b8e5 	.word	0x0000b8e5
    e04c:	00018825 	.word	0x00018825

0000e050 <isr_rx_conn_pkt_ctrl>:
{
    e050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    e054:	7ac7      	ldrb	r7, [r0, #11]
{
    e056:	4604      	mov	r4, r0
    e058:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    e05a:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    e05e:	2f19      	cmp	r7, #25
    e060:	f201 80e0 	bhi.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
    e064:	e8df f017 	tbh	[pc, r7, lsl #1]
    e068:	0081001a 	.word	0x0081001a
    e06c:	00cc00bd 	.word	0x00cc00bd
    e070:	012200fa 	.word	0x012200fa
    e074:	05850154 	.word	0x05850154
    e078:	01c40190 	.word	0x01c40190
    e07c:	021c01f2 	.word	0x021c01f2
    e080:	02b6024d 	.word	0x02b6024d
    e084:	02ce01a6 	.word	0x02ce01a6
    e088:	04a40421 	.word	0x04a40421
    e08c:	057a0560 	.word	0x057a0560
    e090:	06480648 	.word	0x06480648
    e094:	07ea071d 	.word	0x07ea071d
    e098:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    e09c:	4ecb      	ldr	r6, [pc, #812]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e09e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e0a2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e0a6:	2b00      	cmp	r3, #0
    e0a8:	f281 80bc 	bge.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    e0ac:	7a41      	ldrb	r1, [r0, #9]
    e0ae:	2000      	movs	r0, #0
    e0b0:	f7fc fb52 	bl	a758 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e0b4:	2800      	cmp	r0, #0
    e0b6:	f001 80b5 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    e0ba:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    e0be:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    e0c0:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    e0c2:	041b      	lsls	r3, r3, #16
    e0c4:	f101 80c4 	bmi.w	f250 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e0c8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e0cc:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    e0d0:	429a      	cmp	r2, r3
    e0d2:	d007      	beq.n	e0e4 <isr_rx_conn_pkt_ctrl+0x94>
    e0d4:	4bbe      	ldr	r3, [pc, #760]	; (e3d0 <isr_rx_conn_pkt_ctrl+0x380>)
    e0d6:	9301      	str	r3, [sp, #4]
    e0d8:	9300      	str	r3, [sp, #0]
    e0da:	4bbe      	ldr	r3, [pc, #760]	; (e3d4 <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e0dc:	4abe      	ldr	r2, [pc, #760]	; (e3d8 <isr_rx_conn_pkt_ctrl+0x388>)
    e0de:	49bf      	ldr	r1, [pc, #764]	; (e3dc <isr_rx_conn_pkt_ctrl+0x38c>)
    e0e0:	48bf      	ldr	r0, [pc, #764]	; (e3e0 <isr_rx_conn_pkt_ctrl+0x390>)
    e0e2:	e0f7      	b.n	e2d4 <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    e0e4:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    e0e8:	b90a      	cbnz	r2, e0ee <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    e0ea:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    e0ee:	7b22      	ldrb	r2, [r4, #12]
    e0f0:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    e0f4:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    e0f8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e0fc:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    e0fe:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    e102:	7c20      	ldrb	r0, [r4, #16]
    e104:	7be2      	ldrb	r2, [r4, #15]
    e106:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    e10a:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    e10e:	7ca0      	ldrb	r0, [r4, #18]
    e110:	7c62      	ldrb	r2, [r4, #17]
    e112:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    e116:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    e11a:	7ce2      	ldrb	r2, [r4, #19]
    e11c:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    e11e:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    e122:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    e126:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    e12a:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    e12e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e132:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    e136:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    e138:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    e13c:	2201      	movs	r2, #1
    e13e:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    e142:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e146:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e14a:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e14e:	4293      	cmp	r3, r2
    e150:	d007      	beq.n	e162 <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    e152:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e156:	f003 0307 	and.w	r3, r3, #7
    e15a:	2b04      	cmp	r3, #4
    e15c:	d101      	bne.n	e162 <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e15e:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    e162:	2000      	movs	r0, #0
    e164:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    e168:	e038      	b.n	e1dc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    e16a:	4b98      	ldr	r3, [pc, #608]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e16c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e170:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e174:	2b00      	cmp	r3, #0
    e176:	f281 8055 	bge.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    e17a:	7a41      	ldrb	r1, [r0, #9]
    e17c:	2001      	movs	r0, #1
    e17e:	f7fc faeb 	bl	a758 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e182:	2800      	cmp	r0, #0
    e184:	f001 804e 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    e188:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    e18c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    e18e:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    e190:	041f      	lsls	r7, r3, #16
    e192:	f101 805d 	bmi.w	f250 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e196:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e19a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e19e:	429a      	cmp	r2, r3
    e1a0:	d004      	beq.n	e1ac <isr_rx_conn_pkt_ctrl+0x15c>
    e1a2:	4b8b      	ldr	r3, [pc, #556]	; (e3d0 <isr_rx_conn_pkt_ctrl+0x380>)
    e1a4:	9301      	str	r3, [sp, #4]
    e1a6:	9300      	str	r3, [sp, #0]
    e1a8:	4b8e      	ldr	r3, [pc, #568]	; (e3e4 <isr_rx_conn_pkt_ctrl+0x394>)
    e1aa:	e797      	b.n	e0dc <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    e1ac:	2205      	movs	r2, #5
    e1ae:	f104 010c 	add.w	r1, r4, #12
    e1b2:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e1b6:	f7f3 fd21 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    e1ba:	7c63      	ldrb	r3, [r4, #17]
    e1bc:	7ca2      	ldrb	r2, [r4, #18]
    e1be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    e1c2:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    e1c6:	2302      	movs	r3, #2
    e1c8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    e1cc:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    e1d0:	2000      	movs	r0, #0
	conn->llcp_ack--;
    e1d2:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    e1d4:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    e1d8:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    e1dc:	b003      	add	sp, #12
    e1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    e1e2:	7a41      	ldrb	r1, [r0, #9]
    e1e4:	2002      	movs	r0, #2
    e1e6:	f7fc fab7 	bl	a758 <pdu_len_cmp>
    e1ea:	2800      	cmp	r0, #0
    e1ec:	f001 801a 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    e1f0:	4b76      	ldr	r3, [pc, #472]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e1f2:	7b22      	ldrb	r2, [r4, #12]
    e1f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e1f8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    e1fc:	2000      	movs	r0, #0
	return nack;
    e1fe:	e7ed      	b.n	e1dc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    e200:	4e72      	ldr	r6, [pc, #456]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e202:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    e206:	f998 301d 	ldrsb.w	r3, [r8, #29]
    e20a:	2b00      	cmp	r3, #0
    e20c:	f281 800a 	bge.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    e210:	7a41      	ldrb	r1, [r0, #9]
    e212:	2003      	movs	r0, #3
    e214:	f7fc faa0 	bl	a758 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e218:	2800      	cmp	r0, #0
    e21a:	f001 8003 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    e21e:	2208      	movs	r2, #8
    e220:	f104 0116 	add.w	r1, r4, #22
    e224:	f108 0094 	add.w	r0, r8, #148	; 0x94
    e228:	f7f3 fce8 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    e22c:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    e230:	2204      	movs	r2, #4
    e232:	f104 011e 	add.w	r1, r4, #30
    e236:	f500 7089 	add.w	r0, r0, #274	; 0x112
    e23a:	f7f3 fcdf 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    e23e:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    e242:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e246:	f042 0204 	orr.w	r2, r2, #4
    e24a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    e24e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    e252:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    e256:	2301      	movs	r3, #1
    e258:	702b      	strb	r3, [r5, #0]
    e25a:	e7cf      	b.n	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    e25c:	4d5b      	ldr	r5, [pc, #364]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e25e:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    e262:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e266:	2b00      	cmp	r3, #0
    e268:	f2c0 87dc 	blt.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    e26c:	7a41      	ldrb	r1, [r0, #9]
    e26e:	2004      	movs	r0, #4
    e270:	f7fc fa72 	bl	a758 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e274:	2800      	cmp	r0, #0
    e276:	f000 87d5 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    e27a:	2208      	movs	r2, #8
    e27c:	f104 010c 	add.w	r1, r4, #12
    e280:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    e284:	f7f3 fcba 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    e288:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    e28c:	2204      	movs	r2, #4
    e28e:	f104 0114 	add.w	r1, r4, #20
    e292:	f500 708b 	add.w	r0, r0, #278	; 0x116
    e296:	f7f3 fcb1 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    e29a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    e29e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    e2a2:	f043 0304 	orr.w	r3, r3, #4
    e2a6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    e2aa:	e7a7      	b.n	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    e2ac:	4b47      	ldr	r3, [pc, #284]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e2ae:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e2b2:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    e2b6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e2ba:	42b3      	cmp	r3, r6
    e2bc:	d012      	beq.n	e2e4 <isr_rx_conn_pkt_ctrl+0x294>
    e2be:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    e2c2:	2b03      	cmp	r3, #3
    e2c4:	d00e      	beq.n	e2e4 <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    e2c6:	4b42      	ldr	r3, [pc, #264]	; (e3d0 <isr_rx_conn_pkt_ctrl+0x380>)
    e2c8:	9301      	str	r3, [sp, #4]
    e2ca:	9300      	str	r3, [sp, #0]
    e2cc:	4a42      	ldr	r2, [pc, #264]	; (e3d8 <isr_rx_conn_pkt_ctrl+0x388>)
    e2ce:	4b46      	ldr	r3, [pc, #280]	; (e3e8 <isr_rx_conn_pkt_ctrl+0x398>)
    e2d0:	4942      	ldr	r1, [pc, #264]	; (e3dc <isr_rx_conn_pkt_ctrl+0x38c>)
    e2d2:	4846      	ldr	r0, [pc, #280]	; (e3ec <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e2d4:	f7f2 fe5a 	bl	f8c <printk>
    e2d8:	4040      	eors	r0, r0
    e2da:	f380 8811 	msr	BASEPRI, r0
    e2de:	f04f 0004 	mov.w	r0, #4
    e2e2:	df02      	svc	2
		if (_radio.conn_curr->role ||
    e2e4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	f2c0 879b 	blt.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    e2ee:	7a61      	ldrb	r1, [r4, #9]
    e2f0:	2005      	movs	r0, #5
    e2f2:	f7fc fa31 	bl	a758 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e2f6:	2800      	cmp	r0, #0
    e2f8:	f000 8794 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    e2fc:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e2fe:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    e300:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    e302:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e306:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    e30a:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    e30e:	e765      	b.n	e1dc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    e310:	7a41      	ldrb	r1, [r0, #9]
    e312:	2006      	movs	r0, #6
    e314:	f7fc fa20 	bl	a758 <pdu_len_cmp>
    e318:	2800      	cmp	r0, #0
    e31a:	f000 8783 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    e31e:	4b2b      	ldr	r3, [pc, #172]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e320:	7cda      	ldrb	r2, [r3, #19]
    e322:	2a03      	cmp	r2, #3
    e324:	4619      	mov	r1, r3
    e326:	d124      	bne.n	e372 <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    e328:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e32c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    e330:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    e334:	4290      	cmp	r0, r2
    e336:	d003      	beq.n	e340 <isr_rx_conn_pkt_ctrl+0x2f0>
    e338:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    e33c:	2803      	cmp	r0, #3
    e33e:	d1c2      	bne.n	e2c6 <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    e340:	2000      	movs	r0, #0
    e342:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    e346:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e348:	2003      	movs	r0, #3
    e34a:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    e34e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    e352:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    e356:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    e35a:	065e      	lsls	r6, r3, #25
    e35c:	d505      	bpl.n	e36a <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    e35e:	f36f 1386 	bfc	r3, #6, #1
    e362:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    e366:	2309      	movs	r3, #9
    e368:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    e36a:	2301      	movs	r3, #1
    e36c:	702b      	strb	r3, [r5, #0]
				break;
    e36e:	f000 bcbf 	b.w	ecf0 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    e372:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e376:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    e37a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e37e:	f36f 03c3 	bfc	r3, #3, #1
    e382:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    e386:	e7e4      	b.n	e352 <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    e388:	4b10      	ldr	r3, [pc, #64]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e38a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e38e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e392:	2b00      	cmp	r3, #0
    e394:	f280 8746 	bge.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    e398:	7a41      	ldrb	r1, [r0, #9]
    e39a:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e39c:	f7fc f9dc 	bl	a758 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e3a0:	2800      	cmp	r0, #0
    e3a2:	f000 873f 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e3a6:	4631      	mov	r1, r6
    e3a8:	4628      	mov	r0, r5
}
    e3aa:	b003      	add	sp, #12
    e3ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e3b0:	f7fe ba7e 	b.w	c8b0 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    e3b4:	4b05      	ldr	r3, [pc, #20]	; (e3cc <isr_rx_conn_pkt_ctrl+0x37c>)
    e3b6:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e3ba:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e3be:	2b00      	cmp	r3, #0
    e3c0:	f2c0 8730 	blt.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e3c4:	7a41      	ldrb	r1, [r0, #9]
    e3c6:	200e      	movs	r0, #14
    e3c8:	e7e8      	b.n	e39c <isr_rx_conn_pkt_ctrl+0x34c>
    e3ca:	bf00      	nop
    e3cc:	200008f0 	.word	0x200008f0
    e3d0:	000155c5 	.word	0x000155c5
    e3d4:	00018768 	.word	0x00018768
    e3d8:	0001699e 	.word	0x0001699e
    e3dc:	000169ed 	.word	0x000169ed
    e3e0:	00018bf0 	.word	0x00018bf0
    e3e4:	00018774 	.word	0x00018774
    e3e8:	0001841a 	.word	0x0001841a
    e3ec:	00018c32 	.word	0x00018c32
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    e3f0:	7a41      	ldrb	r1, [r0, #9]
    e3f2:	2009      	movs	r0, #9
    e3f4:	f7fc f9b0 	bl	a758 <pdu_len_cmp>
    e3f8:	2800      	cmp	r0, #0
    e3fa:	f000 8713 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e3fe:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    e400:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e402:	48b2      	ldr	r0, [pc, #712]	; (e6cc <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    e408:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    e40c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    e410:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e414:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e418:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    e41c:	7ba1      	ldrb	r1, [r4, #14]
    e41e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e422:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    e426:	f3c1 0110 	ubfx	r1, r1, #0, #17
    e42a:	400b      	ands	r3, r1
    e42c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    e430:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e434:	f043 0320 	orr.w	r3, r3, #32
    e438:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    e43c:	2301      	movs	r3, #1
    e43e:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    e440:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    e444:	2000      	movs	r0, #0
    e446:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    e44a:	e6c7      	b.n	e1dc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    e44c:	4e9f      	ldr	r6, [pc, #636]	; (e6cc <isr_rx_conn_pkt_ctrl+0x67c>)
    e44e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e452:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e456:	2b00      	cmp	r3, #0
    e458:	f280 86e4 	bge.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    e45c:	7a41      	ldrb	r1, [r0, #9]
    e45e:	200a      	movs	r0, #10
    e460:	f7fc f97a 	bl	a758 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e464:	2800      	cmp	r0, #0
    e466:	f000 86dd 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e46a:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    e46e:	f7f9 fbbc 	bl	7bea <mem_acquire>
		if (!node_tx) {
    e472:	4601      	mov	r1, r0
    e474:	b908      	cbnz	r0, e47a <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e476:	2001      	movs	r0, #1
    e478:	e6b0      	b.n	e1dc <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    e47a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    e47e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    e482:	f36f 1304 	bfc	r3, #4, #1
    e486:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e48a:	7903      	ldrb	r3, [r0, #4]
    e48c:	f043 0303 	orr.w	r3, r3, #3
    e490:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e492:	2301      	movs	r3, #1
    e494:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e496:	230b      	movs	r3, #11
    e498:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e49a:	4628      	mov	r0, r5
    e49c:	f000 bcdc 	b.w	ee58 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    e4a0:	7a41      	ldrb	r1, [r0, #9]
    e4a2:	200b      	movs	r0, #11
    e4a4:	f7fc f958 	bl	a758 <pdu_len_cmp>
    e4a8:	2800      	cmp	r0, #0
    e4aa:	f000 86bb 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    e4ae:	4887      	ldr	r0, [pc, #540]	; (e6cc <isr_rx_conn_pkt_ctrl+0x67c>)
    e4b0:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    e4b4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    e4b8:	2b00      	cmp	r3, #0
    e4ba:	db1b      	blt.n	e4f4 <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e4bc:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e4c0:	f7f9 fb93 	bl	7bea <mem_acquire>
		if (!node_tx) {
    e4c4:	4601      	mov	r1, r0
    e4c6:	2800      	cmp	r0, #0
    e4c8:	d0d5      	beq.n	e476 <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    e4ca:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    e4ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    e4d2:	f043 0304 	orr.w	r3, r3, #4
    e4d6:	f36f 1304 	bfc	r3, #4, #1
    e4da:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e4de:	7903      	ldrb	r3, [r0, #4]
    e4e0:	f043 0303 	orr.w	r3, r3, #3
    e4e4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e4e6:	2301      	movs	r3, #1
    e4e8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e4ea:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e4ec:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e4ee:	4620      	mov	r0, r4
    e4f0:	f000 bcb2 	b.w	ee58 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    e4f4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    e4f8:	f36f 1345 	bfc	r3, #5, #1
    e4fc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    e500:	e67c      	b.n	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    e502:	7a41      	ldrb	r1, [r0, #9]
    e504:	200c      	movs	r0, #12
    e506:	f7fc f927 	bl	a758 <pdu_len_cmp>
    e50a:	2800      	cmp	r0, #0
    e50c:	f000 868a 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    e510:	486e      	ldr	r0, [pc, #440]	; (e6cc <isr_rx_conn_pkt_ctrl+0x67c>)
    e512:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    e516:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e51a:	f013 0701 	ands.w	r7, r3, #1
    e51e:	d150      	bne.n	e5c2 <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e520:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e524:	f7f9 fb61 	bl	7bea <mem_acquire>
		if (!node_tx) {
    e528:	4601      	mov	r1, r0
    e52a:	2800      	cmp	r0, #0
    e52c:	d0a3      	beq.n	e476 <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    e52e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e532:	f043 0301 	orr.w	r3, r3, #1
    e536:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e53a:	7903      	ldrb	r3, [r0, #4]
    e53c:	f043 0303 	orr.w	r3, r3, #3
    e540:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    e542:	2306      	movs	r3, #6
    e544:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    e546:	230c      	movs	r3, #12
    e548:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    e54a:	2309      	movs	r3, #9
    e54c:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    e54e:	f06f 030e 	mvn.w	r3, #14
    e552:	7243      	strb	r3, [r0, #9]
    e554:	2305      	movs	r3, #5
    e556:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    e558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e55c:	72c3      	strb	r3, [r0, #11]
    e55e:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    e560:	4630      	mov	r0, r6
    e562:	f7fe f98b 	bl	c87c <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    e566:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    e56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e56e:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    e572:	f004 fd85 	bl	13080 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e576:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    e578:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e57a:	2201      	movs	r2, #1
    e57c:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    e580:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e584:	7003      	strb	r3, [r0, #0]
    e586:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    e588:	b1c2      	cbz	r2, e5bc <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    e58a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    e58e:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    e590:	7b23      	ldrb	r3, [r4, #12]
    e592:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    e596:	7ba2      	ldrb	r2, [r4, #14]
    e598:	7b63      	ldrb	r3, [r4, #13]
    e59a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e59e:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    e5a2:	7be3      	ldrb	r3, [r4, #15]
    e5a4:	7c22      	ldrb	r2, [r4, #16]
    e5a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e5aa:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    e5ae:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e5b2:	f043 0302 	orr.w	r3, r3, #2
    e5b6:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    e5ba:	e61f      	b.n	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    e5bc:	f362 1304 	bfi	r3, r2, #4, #1
    e5c0:	e7e5      	b.n	e58e <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    e5c2:	f013 0302 	ands.w	r3, r3, #2
    e5c6:	f47f ae19 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    e5ca:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    e5ce:	2301      	movs	r3, #1
    e5d0:	702b      	strb	r3, [r5, #0]
    e5d2:	e7dd      	b.n	e590 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    e5d4:	7a41      	ldrb	r1, [r0, #9]
    e5d6:	200d      	movs	r0, #13
    e5d8:	f7fc f8be 	bl	a758 <pdu_len_cmp>
    e5dc:	2800      	cmp	r0, #0
    e5de:	f000 8621 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    e5e2:	4b3a      	ldr	r3, [pc, #232]	; (e6cc <isr_rx_conn_pkt_ctrl+0x67c>)
    e5e4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e5e8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    e5ec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e5f0:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    e5f4:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    e5f6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    e5fa:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    e5fe:	2301      	movs	r3, #1
    e600:	702b      	strb	r3, [r5, #0]
    e602:	e5eb      	b.n	e1dc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    e604:	7a41      	ldrb	r1, [r0, #9]
    e606:	200f      	movs	r0, #15
    e608:	f7fc f8a6 	bl	a758 <pdu_len_cmp>
    e60c:	2800      	cmp	r0, #0
    e60e:	f000 8609 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    e612:	4b2e      	ldr	r3, [pc, #184]	; (e6cc <isr_rx_conn_pkt_ctrl+0x67c>)
    e614:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    e618:	461a      	mov	r2, r3
    e61a:	b151      	cbz	r1, e632 <isr_rx_conn_pkt_ctrl+0x5e2>
    e61c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    e620:	4281      	cmp	r1, r0
    e622:	d006      	beq.n	e632 <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    e624:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    e626:	210f      	movs	r1, #15
}
    e628:	b003      	add	sp, #12
    e62a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    e62e:	f7fe b9a9 	b.w	c984 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    e632:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    e636:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e63a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    e63e:	2b00      	cmp	r3, #0
    e640:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e644:	f2c0 80a7 	blt.w	e796 <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    e648:	4299      	cmp	r1, r3
    e64a:	d009      	beq.n	e660 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    e64c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    e650:	f013 0307 	ands.w	r3, r3, #7
    e654:	d002      	beq.n	e65c <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    e656:	3b04      	subs	r3, #4
    e658:	2b01      	cmp	r3, #1
    e65a:	d801      	bhi.n	e660 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e65c:	2223      	movs	r2, #35	; 0x23
    e65e:	e7e2      	b.n	e626 <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    e660:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e664:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e668:	4299      	cmp	r1, r3
    e66a:	d003      	beq.n	e674 <isr_rx_conn_pkt_ctrl+0x624>
    e66c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    e670:	2b03      	cmp	r3, #3
    e672:	d105      	bne.n	e680 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    e674:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    e678:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    e67c:	4299      	cmp	r1, r3
    e67e:	d001      	beq.n	e684 <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e680:	222a      	movs	r2, #42	; 0x2a
    e682:	e7d0      	b.n	e626 <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    e684:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    e688:	4643      	mov	r3, r8
    e68a:	2b05      	cmp	r3, #5
    e68c:	d91b      	bls.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    e68e:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    e690:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    e694:	d817      	bhi.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    e696:	45b8      	cmp	r8, r7
    e698:	d815      	bhi.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    e69a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    e69e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    e6a2:	d210      	bcs.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    e6a4:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    e6a8:	f1ae 060a 	sub.w	r6, lr, #10
    e6ac:	b2b6      	uxth	r6, r6
    e6ae:	f640 4976 	movw	r9, #3190	; 0xc76
    e6b2:	454e      	cmp	r6, r9
    e6b4:	d807      	bhi.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    e6b6:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    e6ba:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    e6be:	da02      	bge.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    e6c0:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    e6c2:	428f      	cmp	r7, r1
    e6c4:	d204      	bcs.n	e6d0 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    e6c6:	221e      	movs	r2, #30
    e6c8:	e7ad      	b.n	e626 <isr_rx_conn_pkt_ctrl+0x5d6>
    e6ca:	bf00      	nop
    e6cc:	200008f0 	.word	0x200008f0
				conn->llcp_conn_param.interval = cpr->interval_min;
    e6d0:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    e6d4:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    e6d8:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    e6dc:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    e6e0:	7da6      	ldrb	r6, [r4, #22]
    e6e2:	7d61      	ldrb	r1, [r4, #21]
    e6e4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    e6e8:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    e6ec:	7e26      	ldrb	r6, [r4, #24]
    e6ee:	7de1      	ldrb	r1, [r4, #23]
    e6f0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e6f4:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    e6f8:	7ea6      	ldrb	r6, [r4, #26]
    e6fa:	7e61      	ldrb	r1, [r4, #25]
    e6fc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e700:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    e704:	7f26      	ldrb	r6, [r4, #28]
    e706:	7ee1      	ldrb	r1, [r4, #27]
    e708:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e70c:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    e710:	7fa6      	ldrb	r6, [r4, #30]
    e712:	7f61      	ldrb	r1, [r4, #29]
    e714:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e718:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    e71c:	7fe1      	ldrb	r1, [r4, #31]
    e71e:	f894 6020 	ldrb.w	r6, [r4, #32]
    e722:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e726:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    e72a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e72e:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e732:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e736:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    e73a:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    e73e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e740:	428c      	cmp	r4, r1
    e742:	d10f      	bne.n	e764 <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e744:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    e746:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e74a:	4361      	muls	r1, r4
    e74c:	f242 7410 	movw	r4, #10000	; 0x2710
    e750:	fb04 130e 	mla	r3, r4, lr, r1
    e754:	3b01      	subs	r3, #1
    e756:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    e75a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e75c:	b29b      	uxth	r3, r3
    e75e:	4299      	cmp	r1, r3
    e760:	f000 8092 	beq.w	e888 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    e764:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    e768:	071c      	lsls	r4, r3, #28
    e76a:	f140 8087 	bpl.w	e87c <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    e76e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e772:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    e774:	f361 0302 	bfi	r3, r1, #0, #3
    e778:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    e77c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e780:	3b01      	subs	r3, #1
    e782:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    e786:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    e78a:	2b00      	cmp	r3, #0
    e78c:	f47f ad36 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    e790:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    e794:	e532      	b.n	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    e796:	4299      	cmp	r1, r3
    e798:	d003      	beq.n	e7a2 <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    e79a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e79e:	0799      	lsls	r1, r3, #30
    e7a0:	d17b      	bne.n	e89a <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    e7a2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    e7a6:	4643      	mov	r3, r8
    e7a8:	2b05      	cmp	r3, #5
    e7aa:	d98c      	bls.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    e7ac:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    e7ae:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    e7b2:	d888      	bhi.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    e7b4:	45b8      	cmp	r8, r7
    e7b6:	d886      	bhi.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    e7b8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    e7bc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    e7c0:	d281      	bcs.n	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e7c2:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    e7c6:	f1ae 060a 	sub.w	r6, lr, #10
    e7ca:	b2b6      	uxth	r6, r6
    e7cc:	f640 4976 	movw	r9, #3190	; 0xc76
    e7d0:	454e      	cmp	r6, r9
    e7d2:	f63f af78 	bhi.w	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    e7d6:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e7da:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    e7de:	f6bf af72 	bge.w	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    e7e2:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    e7e4:	428f      	cmp	r7, r1
    e7e6:	f4ff af6e 	bcc.w	e6c6 <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    e7ea:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    e7ee:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    e7f2:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    e7f6:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    e7fa:	7da6      	ldrb	r6, [r4, #22]
    e7fc:	7d61      	ldrb	r1, [r4, #21]
    e7fe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e802:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    e806:	7e26      	ldrb	r6, [r4, #24]
    e808:	7de1      	ldrb	r1, [r4, #23]
    e80a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e80e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    e812:	7ea6      	ldrb	r6, [r4, #26]
    e814:	7e61      	ldrb	r1, [r4, #25]
    e816:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e81a:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    e81e:	7f26      	ldrb	r6, [r4, #28]
    e820:	7ee1      	ldrb	r1, [r4, #27]
    e822:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e826:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    e82a:	7fa6      	ldrb	r6, [r4, #30]
    e82c:	7f61      	ldrb	r1, [r4, #29]
    e82e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e832:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    e836:	7fe1      	ldrb	r1, [r4, #31]
    e838:	f894 6020 	ldrb.w	r6, [r4, #32]
    e83c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e840:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e844:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e848:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e84c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e850:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    e854:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    e858:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e85a:	428c      	cmp	r4, r1
    e85c:	d10e      	bne.n	e87c <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e85e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    e860:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e864:	4361      	muls	r1, r4
    e866:	f242 7410 	movw	r4, #10000	; 0x2710
    e86a:	fb04 130e 	mla	r3, r4, lr, r1
    e86e:	3b01      	subs	r3, #1
    e870:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    e874:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e876:	b29b      	uxth	r3, r3
    e878:	4299      	cmp	r1, r3
    e87a:	d005      	beq.n	e888 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    e87c:	2301      	movs	r3, #1
    e87e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    e880:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e884:	2103      	movs	r1, #3
    e886:	e775      	b.n	e774 <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    e888:	2300      	movs	r3, #0
    e88a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    e88e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    e892:	2101      	movs	r1, #1
    e894:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    e898:	e76c      	b.n	e774 <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    e89a:	4bc9      	ldr	r3, [pc, #804]	; (ebc0 <isr_rx_conn_pkt_ctrl+0xb70>)
    e89c:	9301      	str	r3, [sp, #4]
    e89e:	9300      	str	r3, [sp, #0]
    e8a0:	4ac8      	ldr	r2, [pc, #800]	; (ebc4 <isr_rx_conn_pkt_ctrl+0xb74>)
    e8a2:	4bc9      	ldr	r3, [pc, #804]	; (ebc8 <isr_rx_conn_pkt_ctrl+0xb78>)
    e8a4:	49c9      	ldr	r1, [pc, #804]	; (ebcc <isr_rx_conn_pkt_ctrl+0xb7c>)
    e8a6:	48ca      	ldr	r0, [pc, #808]	; (ebd0 <isr_rx_conn_pkt_ctrl+0xb80>)
    e8a8:	e514      	b.n	e2d4 <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    e8aa:	4bca      	ldr	r3, [pc, #808]	; (ebd4 <isr_rx_conn_pkt_ctrl+0xb84>)
    e8ac:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e8b0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e8b4:	2b00      	cmp	r3, #0
    e8b6:	f2c0 84b5 	blt.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    e8ba:	7a41      	ldrb	r1, [r0, #9]
    e8bc:	2010      	movs	r0, #16
    e8be:	f7fb ff4b 	bl	a758 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e8c2:	2800      	cmp	r0, #0
    e8c4:	f000 84ae 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    e8c8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e8cc:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e8d0:	429a      	cmp	r2, r3
    e8d2:	f43f ac93 	beq.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    e8d6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    e8da:	f003 0307 	and.w	r3, r3, #7
    e8de:	2b04      	cmp	r3, #4
    e8e0:	f47f ac8c 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    e8e4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    e8e8:	fa1f f28e 	uxth.w	r2, lr
    e8ec:	2a05      	cmp	r2, #5
    e8ee:	d91b      	bls.n	e928 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    e8f0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    e8f2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    e8f6:	d817      	bhi.n	e928 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    e8f8:	429a      	cmp	r2, r3
    e8fa:	d815      	bhi.n	e928 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    e8fc:	8a27      	ldrh	r7, [r4, #16]
    e8fe:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    e900:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    e904:	d210      	bcs.n	e928 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e906:	8a66      	ldrh	r6, [r4, #18]
    e908:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    e90a:	f1a0 010a 	sub.w	r1, r0, #10
    e90e:	b289      	uxth	r1, r1
    e910:	f640 4c76 	movw	ip, #3190	; 0xc76
    e914:	4561      	cmp	r1, ip
    e916:	d807      	bhi.n	e928 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    e918:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e91c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    e920:	da02      	bge.n	e928 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    e922:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    e924:	4293      	cmp	r3, r2
    e926:	d203      	bcs.n	e930 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    e928:	221e      	movs	r2, #30
    e92a:	2110      	movs	r1, #16
    e92c:	4628      	mov	r0, r5
    e92e:	e67b      	b.n	e628 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    e930:	2000      	movs	r0, #0
    e932:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    e936:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    e93a:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    e93e:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    e942:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    e946:	7da2      	ldrb	r2, [r4, #22]
    e948:	7d63      	ldrb	r3, [r4, #21]
    e94a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e94e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    e952:	7e22      	ldrb	r2, [r4, #24]
    e954:	7de3      	ldrb	r3, [r4, #23]
    e956:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e95a:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    e95e:	7ea2      	ldrb	r2, [r4, #26]
    e960:	7e63      	ldrb	r3, [r4, #25]
    e962:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e966:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    e96a:	7f22      	ldrb	r2, [r4, #28]
    e96c:	7ee3      	ldrb	r3, [r4, #27]
    e96e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e972:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    e976:	7fa2      	ldrb	r2, [r4, #30]
    e978:	7f63      	ldrb	r3, [r4, #29]
    e97a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e97e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    e982:	f894 2020 	ldrb.w	r2, [r4, #32]
    e986:	7fe3      	ldrb	r3, [r4, #31]
    e988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e98c:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e990:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    e994:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e998:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e99c:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e9a0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    e9a4:	2201      	movs	r2, #1
    e9a6:	f362 0302 	bfi	r3, r2, #0, #3
    e9aa:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    e9ae:	e415      	b.n	e1dc <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    e9b0:	7a41      	ldrb	r1, [r0, #9]
    e9b2:	2011      	movs	r0, #17
    e9b4:	f7fb fed0 	bl	a758 <pdu_len_cmp>
    e9b8:	2800      	cmp	r0, #0
    e9ba:	f000 8433 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e9be:	4a85      	ldr	r2, [pc, #532]	; (ebd4 <isr_rx_conn_pkt_ctrl+0xb84>)
    e9c0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e9c4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    e9c8:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e9cc:	4281      	cmp	r1, r0
    e9ce:	7b21      	ldrb	r1, [r4, #12]
    e9d0:	d027      	beq.n	ea22 <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    e9d2:	2916      	cmp	r1, #22
    e9d4:	f47f ac12 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    e9d8:	7b61      	ldrb	r1, [r4, #13]
    e9da:	2923      	cmp	r1, #35	; 0x23
    e9dc:	d00e      	beq.n	e9fc <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    e9de:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    e9e2:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    e9e6:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    e9ea:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e9ee:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    e9f2:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    e9f4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    e9f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    e9fc:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    ea00:	0792      	lsls	r2, r2, #30
    ea02:	f57f abfb 	bpl.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ea06:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    ea08:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ea0a:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    ea0c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    ea10:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ea14:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    ea16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    ea1a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ea1e:	7363      	strb	r3, [r4, #13]
    ea20:	e419      	b.n	e256 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    ea22:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    ea26:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    ea2a:	42b8      	cmp	r0, r7
    ea2c:	d048      	beq.n	eac0 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    ea2e:	290f      	cmp	r1, #15
    ea30:	f47f abe4 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
    ea34:	f993 001d 	ldrsb.w	r0, [r3, #29]
    ea38:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    ea3a:	2800      	cmp	r0, #0
    ea3c:	db0e      	blt.n	ea5c <isr_rx_conn_pkt_ctrl+0xa0c>
    ea3e:	291a      	cmp	r1, #26
    ea40:	d10c      	bne.n	ea5c <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    ea42:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    ea46:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    ea4a:	4294      	cmp	r4, r2
    ea4c:	f000 80c8 	beq.w	ebe0 <isr_rx_conn_pkt_ctrl+0xb90>
    ea50:	4b5b      	ldr	r3, [pc, #364]	; (ebc0 <isr_rx_conn_pkt_ctrl+0xb70>)
    ea52:	9301      	str	r3, [sp, #4]
    ea54:	9300      	str	r3, [sp, #0]
    ea56:	4b60      	ldr	r3, [pc, #384]	; (ebd8 <isr_rx_conn_pkt_ctrl+0xb88>)
    ea58:	f7ff bb40 	b.w	e0dc <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    ea5c:	2923      	cmp	r1, #35	; 0x23
    ea5e:	d018      	beq.n	ea92 <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    ea60:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    ea64:	42b3      	cmp	r3, r6
    ea66:	d007      	beq.n	ea78 <isr_rx_conn_pkt_ctrl+0xa28>
    ea68:	4b55      	ldr	r3, [pc, #340]	; (ebc0 <isr_rx_conn_pkt_ctrl+0xb70>)
    ea6a:	9301      	str	r3, [sp, #4]
    ea6c:	9300      	str	r3, [sp, #0]
    ea6e:	4b5a      	ldr	r3, [pc, #360]	; (ebd8 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    ea70:	4a54      	ldr	r2, [pc, #336]	; (ebc4 <isr_rx_conn_pkt_ctrl+0xb74>)
    ea72:	4956      	ldr	r1, [pc, #344]	; (ebcc <isr_rx_conn_pkt_ctrl+0xb7c>)
    ea74:	4859      	ldr	r0, [pc, #356]	; (ebdc <isr_rx_conn_pkt_ctrl+0xb8c>)
    ea76:	e42d      	b.n	e2d4 <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    ea78:	2600      	movs	r6, #0
		if (conn->role) {
    ea7a:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    ea7c:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    ea80:	bfb8      	it	lt
    ea82:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    ea86:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    ea8a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    ea8e:	bfb8      	it	lt
    ea90:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    ea92:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    ea96:	0717      	lsls	r7, r2, #28
    ea98:	f57f abb0 	bpl.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    ea9c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ea9e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    eaa0:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    eaa2:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    eaa4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    eaa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    eaa8:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    eaaa:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    eaac:	237d      	movs	r3, #125	; 0x7d
    eaae:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    eab0:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    eab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eab6:	fb93 f3f2 	sdiv	r3, r3, r2
    eaba:	8223      	strh	r3, [r4, #16]
    eabc:	f7ff bbcb 	b.w	e256 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    eac0:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    eac4:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    eac8:	4290      	cmp	r0, r2
    eaca:	d01a      	beq.n	eb02 <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    eacc:	2914      	cmp	r1, #20
    eace:	f47f ab95 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    ead2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    ead6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    eada:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    eadc:	f360 02c3 	bfi	r2, r0, #3, #1
    eae0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    eae4:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    eae6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    eaea:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    eaec:	2215      	movs	r2, #21
    eaee:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    eaf0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    eaf2:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    eaf4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    eaf6:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    eaf8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    eafa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    eafc:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    eafe:	8263      	strh	r3, [r4, #18]
    eb00:	e57d      	b.n	e5fe <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    eb02:	2903      	cmp	r1, #3
    eb04:	f47f ab7a 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    eb08:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    eb0c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    eb10:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    eb14:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    eb16:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    eb1a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    eb1e:	230d      	movs	r3, #13
    eb20:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    eb22:	7b63      	ldrb	r3, [r4, #13]
    eb24:	7323      	strb	r3, [r4, #12]
    eb26:	e56a      	b.n	e5fe <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    eb28:	7a41      	ldrb	r1, [r0, #9]
    eb2a:	2012      	movs	r0, #18
    eb2c:	f7fb fe14 	bl	a758 <pdu_len_cmp>
    eb30:	2800      	cmp	r0, #0
    eb32:	f000 8377 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    eb36:	4827      	ldr	r0, [pc, #156]	; (ebd4 <isr_rx_conn_pkt_ctrl+0xb84>)
    eb38:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    eb3c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    eb40:	f7f9 f853 	bl	7bea <mem_acquire>
	if (!node_tx) {
    eb44:	4601      	mov	r1, r0
    eb46:	2800      	cmp	r0, #0
    eb48:	f43f ac95 	beq.w	e476 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eb4c:	7903      	ldrb	r3, [r0, #4]
    eb4e:	f043 0303 	orr.w	r3, r3, #3
    eb52:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    eb54:	2301      	movs	r3, #1
    eb56:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    eb58:	2313      	movs	r3, #19
    eb5a:	e4c7      	b.n	e4ec <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    eb5c:	7a41      	ldrb	r1, [r0, #9]
    eb5e:	2013      	movs	r0, #19
    eb60:	f7fb fdfa 	bl	a758 <pdu_len_cmp>
    eb64:	2800      	cmp	r0, #0
    eb66:	f000 835d 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    eb6a:	4b1a      	ldr	r3, [pc, #104]	; (ebd4 <isr_rx_conn_pkt_ctrl+0xb84>)
    eb6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    eb70:	e468      	b.n	e444 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    eb72:	7a41      	ldrb	r1, [r0, #9]
    eb74:	2007      	movs	r0, #7
    eb76:	f7fb fdef 	bl	a758 <pdu_len_cmp>
    eb7a:	2800      	cmp	r0, #0
    eb7c:	f000 8352 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    eb80:	4a14      	ldr	r2, [pc, #80]	; (ebd4 <isr_rx_conn_pkt_ctrl+0xb84>)
    eb82:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    eb86:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    eb8a:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    eb8e:	42b1      	cmp	r1, r6
    eb90:	4611      	mov	r1, r2
    eb92:	d077      	beq.n	ec84 <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    eb94:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    eb98:	f040 0010 	orr.w	r0, r0, #16
    eb9c:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    eba0:	f993 001d 	ldrsb.w	r0, [r3, #29]
    eba4:	2800      	cmp	r0, #0
    eba6:	db47      	blt.n	ec38 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    eba8:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    ebac:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    ebb0:	4294      	cmp	r4, r2
    ebb2:	d015      	beq.n	ebe0 <isr_rx_conn_pkt_ctrl+0xb90>
    ebb4:	4b02      	ldr	r3, [pc, #8]	; (ebc0 <isr_rx_conn_pkt_ctrl+0xb70>)
    ebb6:	9301      	str	r3, [sp, #4]
    ebb8:	9300      	str	r3, [sp, #0]
    ebba:	4b03      	ldr	r3, [pc, #12]	; (ebc8 <isr_rx_conn_pkt_ctrl+0xb78>)
    ebbc:	f7ff ba8e 	b.w	e0dc <isr_rx_conn_pkt_ctrl+0x8c>
    ebc0:	000155c5 	.word	0x000155c5
    ebc4:	0001699e 	.word	0x0001699e
    ebc8:	0001841a 	.word	0x0001841a
    ebcc:	000169ed 	.word	0x000169ed
    ebd0:	00016912 	.word	0x00016912
    ebd4:	200008f0 	.word	0x200008f0
    ebd8:	000183df 	.word	0x000183df
    ebdc:	00018cc2 	.word	0x00018cc2
				conn->llcp_conn_param.state =
    ebe0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    ebe4:	2105      	movs	r1, #5
    ebe6:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    ebea:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    ebee:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    ebf2:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    ebf6:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    ebfa:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    ebfe:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    ec02:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    ec06:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    ec0a:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    ec0c:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    ec10:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    ec14:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    ec18:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    ec1a:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    ec1e:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    ec20:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    ec24:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    ec28:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    ec2c:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    ec30:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    ec34:	f7ff bad2 	b.w	e1dc <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    ec38:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    ec3c:	4293      	cmp	r3, r2
    ec3e:	d004      	beq.n	ec4a <isr_rx_conn_pkt_ctrl+0xbfa>
    ec40:	4bc9      	ldr	r3, [pc, #804]	; (ef68 <isr_rx_conn_pkt_ctrl+0xf18>)
    ec42:	9301      	str	r3, [sp, #4]
    ec44:	9300      	str	r3, [sp, #0]
    ec46:	4bc9      	ldr	r3, [pc, #804]	; (ef6c <isr_rx_conn_pkt_ctrl+0xf1c>)
    ec48:	e712      	b.n	ea70 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    ec4a:	2200      	movs	r2, #0
    ec4c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    ec50:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ec54:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    ec58:	0716      	lsls	r6, r2, #28
    ec5a:	f57f aacf 	bpl.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ec5e:	2208      	movs	r2, #8
    ec60:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    ec62:	221a      	movs	r2, #26
    ec64:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    ec66:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    ec68:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    ec6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    ec6c:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    ec6e:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    ec70:	237d      	movs	r3, #125	; 0x7d
    ec72:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    ec74:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    ec76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ec7a:	fb93 f3f2 	sdiv	r3, r3, r2
    ec7e:	8223      	strh	r3, [r4, #16]
    ec80:	f7ff bb73 	b.w	e36a <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    ec84:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    ec88:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    ec8c:	4290      	cmp	r0, r2
    ec8e:	d009      	beq.n	eca4 <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    ec90:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    ec94:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ec98:	f36f 02c3 	bfc	r2, #3, #1
    ec9c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    eca0:	f7ff bb63 	b.w	e36a <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    eca4:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    eca8:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    ecac:	4290      	cmp	r0, r2
    ecae:	d01b      	beq.n	ece8 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    ecb0:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    ecb4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    ecb8:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    ecbc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    ecc0:	f362 0002 	bfi	r0, r2, #0, #3
    ecc4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    ecc8:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    eccc:	0780      	lsls	r0, r0, #30
    ecce:	d50f      	bpl.n	ecf0 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ecd0:	200c      	movs	r0, #12
    ecd2:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    ecd4:	2000      	movs	r0, #0
    ecd6:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    ecd8:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    ecda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    ecde:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ece2:	7363      	strb	r3, [r4, #13]
    ece4:	f7ff bb41 	b.w	e36a <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    ece8:	7b23      	ldrb	r3, [r4, #12]
    ecea:	2b12      	cmp	r3, #18
    ecec:	f47f ab3d 	bne.w	e36a <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    ecf0:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    ecf4:	f7ff bba6 	b.w	e444 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    ecf8:	7a41      	ldrb	r1, [r0, #9]
    ecfa:	2014      	movs	r0, #20
    ecfc:	f7fb fd2c 	bl	a758 <pdu_len_cmp>
    ed00:	2800      	cmp	r0, #0
    ed02:	f000 828f 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    ed06:	2f14      	cmp	r7, #20
    ed08:	d127      	bne.n	ed5a <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ed0a:	4899      	ldr	r0, [pc, #612]	; (ef70 <isr_rx_conn_pkt_ctrl+0xf20>)
    ed0c:	f7f8 ff6d 	bl	7bea <mem_acquire>
		if (!node_tx) {
    ed10:	4606      	mov	r6, r0
    ed12:	2800      	cmp	r0, #0
    ed14:	f43f abaf 	beq.w	e476 <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ed18:	4f96      	ldr	r7, [pc, #600]	; (ef74 <isr_rx_conn_pkt_ctrl+0xf24>)
    ed1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    ed1e:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    ed22:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ed26:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    ed28:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    ed2a:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    ed2c:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    ed30:	45e0      	cmp	r8, ip
    ed32:	46b9      	mov	r9, r7
    ed34:	f894 800b 	ldrb.w	r8, [r4, #11]
    ed38:	d111      	bne.n	ed5e <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    ed3a:	f1b8 0f14 	cmp.w	r8, #20
    ed3e:	d01a      	beq.n	ed76 <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    ed40:	f1b8 0f15 	cmp.w	r8, #21
    ed44:	f000 8292 	beq.w	f26c <isr_rx_conn_pkt_ctrl+0x121c>
    ed48:	4b87      	ldr	r3, [pc, #540]	; (ef68 <isr_rx_conn_pkt_ctrl+0xf18>)
    ed4a:	9301      	str	r3, [sp, #4]
    ed4c:	9300      	str	r3, [sp, #0]
    ed4e:	4a8a      	ldr	r2, [pc, #552]	; (ef78 <isr_rx_conn_pkt_ctrl+0xf28>)
    ed50:	4b8a      	ldr	r3, [pc, #552]	; (ef7c <isr_rx_conn_pkt_ctrl+0xf2c>)
    ed52:	498b      	ldr	r1, [pc, #556]	; (ef80 <isr_rx_conn_pkt_ctrl+0xf30>)
    ed54:	488b      	ldr	r0, [pc, #556]	; (ef84 <isr_rx_conn_pkt_ctrl+0xf34>)
    ed56:	f7ff babd 	b.w	e2d4 <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    ed5a:	2600      	movs	r6, #0
    ed5c:	e7dc      	b.n	ed18 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    ed5e:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    ed62:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    ed66:	2f01      	cmp	r7, #1
    ed68:	d9e7      	bls.n	ed3a <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    ed6a:	2f02      	cmp	r7, #2
    ed6c:	d1e8      	bne.n	ed40 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    ed6e:	f1a8 0714 	sub.w	r7, r8, #20
    ed72:	2f01      	cmp	r7, #1
    ed74:	d8e4      	bhi.n	ed40 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ed76:	89a7      	ldrh	r7, [r4, #12]
    ed78:	2f1a      	cmp	r7, #26
    ed7a:	d934      	bls.n	ede6 <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    ed7c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    ed80:	4547      	cmp	r7, r8
    ed82:	bf28      	it	cs
    ed84:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ed86:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    ed8a:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    ed8e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    ed92:	bf34      	ite	cc
    ed94:	4693      	movcc	fp, r2
    ed96:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    ed9a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    ed9e:	d324      	bcc.n	edea <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    eda0:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    eda4:	45d0      	cmp	r8, sl
    eda6:	bf28      	it	cs
    eda8:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    edaa:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    edae:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    edb2:	bf34      	ite	cc
    edb4:	4682      	movcc	sl, r0
    edb6:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    edba:	455a      	cmp	r2, fp
    edbc:	d050      	beq.n	ee60 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    edbe:	f7fb fd13 	bl	a7e8 <packet_rx_acquired_count_get>
    edc2:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    edc4:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    edc8:	f7f8 ff3e 	bl	7c48 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    edcc:	4420      	add	r0, r4
    edce:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    edd0:	28ff      	cmp	r0, #255	; 0xff
    edd2:	d90c      	bls.n	edee <isr_rx_conn_pkt_ctrl+0xd9e>
    edd4:	4b64      	ldr	r3, [pc, #400]	; (ef68 <isr_rx_conn_pkt_ctrl+0xf18>)
    edd6:	9301      	str	r3, [sp, #4]
    edd8:	9300      	str	r3, [sp, #0]
    edda:	4a67      	ldr	r2, [pc, #412]	; (ef78 <isr_rx_conn_pkt_ctrl+0xf28>)
    eddc:	4b67      	ldr	r3, [pc, #412]	; (ef7c <isr_rx_conn_pkt_ctrl+0xf2c>)
    edde:	4968      	ldr	r1, [pc, #416]	; (ef80 <isr_rx_conn_pkt_ctrl+0xf30>)
    ede0:	4869      	ldr	r0, [pc, #420]	; (ef88 <isr_rx_conn_pkt_ctrl+0xf38>)
    ede2:	f7ff ba77 	b.w	e2d4 <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    ede6:	460f      	mov	r7, r1
    ede8:	e7cd      	b.n	ed86 <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    edea:	46f0      	mov	r8, lr
    edec:	e7dd      	b.n	edaa <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    edee:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    edf2:	4283      	cmp	r3, r0
    edf4:	f040 8231 	bne.w	f25a <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    edf8:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    edfc:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    ee00:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    ee02:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    ee04:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    ee08:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    ee0c:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    ee10:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    ee14:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    ee18:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    ee1c:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    ee20:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    ee24:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    ee28:	2303      	movs	r3, #3
    ee2a:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    ee2e:	2e00      	cmp	r6, #0
    ee30:	f43f a9e4 	beq.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ee34:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    ee36:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    ee3a:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ee3e:	f043 0303 	orr.w	r3, r3, #3
    ee42:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    ee44:	2309      	movs	r3, #9
    ee46:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    ee48:	2315      	movs	r3, #21
    ee4a:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    ee4c:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    ee4e:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    ee52:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    ee56:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    ee58:	f7fd fce2 	bl	c820 <ctrl_tx_enqueue>
    ee5c:	f7ff b9ce 	b.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    ee60:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    ee64:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    ee68:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    ee6c:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    ee70:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    ee72:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    ee76:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    ee7a:	d103      	bne.n	ee84 <isr_rx_conn_pkt_ctrl+0xe34>
    ee7c:	45c6      	cmp	lr, r8
    ee7e:	d101      	bne.n	ee84 <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    ee80:	4550      	cmp	r0, sl
    ee82:	d0d4      	beq.n	ee2e <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    ee84:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    ee86:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    ee8a:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    ee8e:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    ee90:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    ee94:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    ee96:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    ee9a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    ee9e:	702b      	strb	r3, [r5, #0]
    eea0:	e7c5      	b.n	ee2e <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    eea2:	7a41      	ldrb	r1, [r0, #9]
    eea4:	2016      	movs	r0, #22
    eea6:	f7fb fc57 	bl	a758 <pdu_len_cmp>
    eeaa:	2800      	cmp	r0, #0
    eeac:	f000 81ba 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    eeb0:	4830      	ldr	r0, [pc, #192]	; (ef74 <isr_rx_conn_pkt_ctrl+0xf24>)
    eeb2:	7cc3      	ldrb	r3, [r0, #19]
    eeb4:	2b04      	cmp	r3, #4
    eeb6:	d169      	bne.n	ef8c <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    eeb8:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    eebc:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    eec0:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    eec4:	428b      	cmp	r3, r1
    eec6:	d00a      	beq.n	eede <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    eec8:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    eecc:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    eed0:	3a01      	subs	r2, #1
    eed2:	2a02      	cmp	r2, #2
    eed4:	d803      	bhi.n	eede <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    eed6:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    eed8:	2116      	movs	r1, #22
    eeda:	f7ff bba5 	b.w	e628 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    eede:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    eee2:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    eee6:	4295      	cmp	r5, r2
    eee8:	d003      	beq.n	eef2 <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    eeea:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    eeee:	2a03      	cmp	r2, #3
    eef0:	d105      	bne.n	eefe <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    eef2:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    eef6:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    eefa:	4295      	cmp	r5, r2
    eefc:	d001      	beq.n	ef02 <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    eefe:	222a      	movs	r2, #42	; 0x2a
    ef00:	e7ea      	b.n	eed8 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    ef02:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    ef06:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    ef08:	f042 0203 	orr.w	r2, r2, #3
    ef0c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    ef10:	d116      	bne.n	ef40 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    ef12:	3b01      	subs	r3, #1
    ef14:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    ef18:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    ef1c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    ef20:	f36f 0341 	bfc	r3, #1, #1
    ef24:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    ef28:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    ef2c:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    ef30:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    ef34:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ef38:	f362 1347 	bfi	r3, r2, #5, #3
    ef3c:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    ef40:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    ef44:	7b62      	ldrb	r2, [r4, #13]
    ef46:	f3c3 0182 	ubfx	r1, r3, #2, #3
    ef4a:	400a      	ands	r2, r1
    ef4c:	f362 0384 	bfi	r3, r2, #2, #3
    ef50:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    ef54:	7b22      	ldrb	r2, [r4, #12]
    ef56:	b2db      	uxtb	r3, r3
    ef58:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    ef5c:	f362 1347 	bfi	r3, r2, #5, #3
    ef60:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    ef64:	f7ff b94a 	b.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
    ef68:	000155c5 	.word	0x000155c5
    ef6c:	0001841a 	.word	0x0001841a
    ef70:	20000a4c 	.word	0x20000a4c
    ef74:	200008f0 	.word	0x200008f0
    ef78:	0001699e 	.word	0x0001699e
    ef7c:	00018401 	.word	0x00018401
    ef80:	000169ed 	.word	0x000169ed
    ef84:	00018cfb 	.word	0x00018cfb
    ef88:	00018873 	.word	0x00018873
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    ef8c:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ef90:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    ef94:	f7f8 fe29 	bl	7bea <mem_acquire>
	if (!node_tx) {
    ef98:	4601      	mov	r1, r0
    ef9a:	2800      	cmp	r0, #0
    ef9c:	f43f aa6b 	beq.w	e476 <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    efa0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    efa4:	2202      	movs	r2, #2
    efa6:	f362 0301 	bfi	r3, r2, #0, #2
    efaa:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    efae:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    efb2:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    efb6:	4293      	cmp	r3, r2
    efb8:	d11a      	bne.n	eff0 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    efba:	3b01      	subs	r3, #1
    efbc:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    efc0:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    efc4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    efc8:	f36f 0341 	bfc	r3, #1, #1
    efcc:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    efd0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    efd4:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    efd8:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    efdc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    efe0:	f362 1347 	bfi	r3, r2, #5, #3
    efe4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    efe8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    efec:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    eff0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    eff4:	7b62      	ldrb	r2, [r4, #13]
    eff6:	f3c3 0082 	ubfx	r0, r3, #2, #3
    effa:	4002      	ands	r2, r0
    effc:	f362 0384 	bfi	r3, r2, #2, #3
    f000:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    f004:	7b22      	ldrb	r2, [r4, #12]
    f006:	b2db      	uxtb	r3, r3
    f008:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f00c:	f362 1347 	bfi	r3, r2, #5, #3
    f010:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f014:	790b      	ldrb	r3, [r1, #4]
    f016:	f043 0303 	orr.w	r3, r3, #3
    f01a:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    f01c:	2303      	movs	r3, #3
    f01e:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f020:	2317      	movs	r3, #23
    f022:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    f024:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f028:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f02c:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    f02e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    f032:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f036:	724b      	strb	r3, [r1, #9]
    f038:	f7ff ba2f 	b.w	e49a <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    f03c:	4e90      	ldr	r6, [pc, #576]	; (f280 <isr_rx_conn_pkt_ctrl+0x1230>)
    f03e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    f042:	f995 301d 	ldrsb.w	r3, [r5, #29]
    f046:	2b00      	cmp	r3, #0
    f048:	f2c0 80ec 	blt.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    f04c:	7a41      	ldrb	r1, [r0, #9]
    f04e:	2017      	movs	r0, #23
    f050:	f7fb fb82 	bl	a758 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    f054:	2800      	cmp	r0, #0
    f056:	f000 80e5 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    f05a:	7cf3      	ldrb	r3, [r6, #19]
    f05c:	2b04      	cmp	r3, #4
    f05e:	f47f a8cd 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
    f062:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    f066:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    f06a:	429a      	cmp	r2, r3
    f06c:	f43f a8c6 	beq.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    f070:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    f074:	f003 0203 	and.w	r2, r3, #3
    f078:	2a02      	cmp	r2, #2
    f07a:	f47f a8bf 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    f07e:	f043 0303 	orr.w	r3, r3, #3
    f082:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f086:	7b62      	ldrb	r2, [r4, #13]
    f088:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f08c:	400a      	ands	r2, r1
    f08e:	f362 0384 	bfi	r3, r2, #2, #3
    f092:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f096:	7b22      	ldrb	r2, [r4, #12]
    f098:	b2db      	uxtb	r3, r3
    f09a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f09e:	f362 1347 	bfi	r3, r2, #5, #3
    f0a2:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    f0a6:	f7ff b85c 	b.w	e162 <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    f0aa:	4b75      	ldr	r3, [pc, #468]	; (f280 <isr_rx_conn_pkt_ctrl+0x1230>)
    f0ac:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    f0b0:	f996 301d 	ldrsb.w	r3, [r6, #29]
    f0b4:	2b00      	cmp	r3, #0
    f0b6:	f280 80b5 	bge.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    f0ba:	7a41      	ldrb	r1, [r0, #9]
    f0bc:	2018      	movs	r0, #24
    f0be:	f7fb fb4b 	bl	a758 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    f0c2:	2800      	cmp	r0, #0
    f0c4:	f000 80ae 	beq.w	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    f0c8:	7b27      	ldrb	r7, [r4, #12]
    f0ca:	7b62      	ldrb	r2, [r4, #13]
    f0cc:	ea47 0002 	orr.w	r0, r7, r2
    f0d0:	f010 0007 	ands.w	r0, r0, #7
    f0d4:	d125      	bne.n	f122 <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f0d6:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    f0da:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    f0de:	4293      	cmp	r3, r2
    f0e0:	f43f a88c 	beq.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    f0e4:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f0e8:	f003 0303 	and.w	r3, r3, #3
    f0ec:	2b02      	cmp	r3, #2
    f0ee:	f47f a885 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    f0f2:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f0f6:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    f0fa:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    f0fc:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    f100:	f57f a87c 	bpl.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f104:	230c      	movs	r3, #12
		upd->status = 0;
    f106:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f108:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    f10a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    f10e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f112:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    f114:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    f118:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f11c:	7363      	strb	r3, [r4, #13]
    f11e:	f7ff ba6e 	b.w	e5fe <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    f122:	89e0      	ldrh	r0, [r4, #14]
    f124:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    f126:	1ac3      	subs	r3, r0, r3
    f128:	041b      	lsls	r3, r3, #16
    f12a:	f100 80a4 	bmi.w	f276 <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f12e:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    f132:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    f136:	428b      	cmp	r3, r1
    f138:	d005      	beq.n	f146 <isr_rx_conn_pkt_ctrl+0x10f6>
    f13a:	4b52      	ldr	r3, [pc, #328]	; (f284 <isr_rx_conn_pkt_ctrl+0x1234>)
    f13c:	9301      	str	r3, [sp, #4]
    f13e:	9300      	str	r3, [sp, #0]
    f140:	4b51      	ldr	r3, [pc, #324]	; (f288 <isr_rx_conn_pkt_ctrl+0x1238>)
    f142:	f7fe bfcb 	b.w	e0dc <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f146:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    f14a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    f14e:	42a3      	cmp	r3, r4
    f150:	d014      	beq.n	f17c <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    f152:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f156:	f003 0303 	and.w	r3, r3, #3
    f15a:	2b02      	cmp	r3, #2
    f15c:	d10e      	bne.n	f17c <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f15e:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f162:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f166:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    f16a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f16e:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    f172:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f174:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    f178:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f17c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    f180:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f184:	f002 0207 	and.w	r2, r2, #7
    f188:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    f18c:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    f190:	f36f 0300 	bfc	r3, #0, #1
    f194:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    f198:	2008      	movs	r0, #8
	conn->llcp_ack--;
    f19a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    f19c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    f1a0:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    f1a4:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    f1a8:	2b00      	cmp	r3, #0
    f1aa:	f43f a827 	beq.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    f1ae:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    f1b2:	f362 0302 	bfi	r3, r2, #0, #3
    f1b6:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    f1ba:	f7ff b81f 	b.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    f1be:	4e30      	ldr	r6, [pc, #192]	; (f280 <isr_rx_conn_pkt_ctrl+0x1230>)
    f1c0:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    f1c4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    f1c8:	2b00      	cmp	r3, #0
    f1ca:	db2b      	blt.n	f224 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    f1cc:	7a41      	ldrb	r1, [r0, #9]
    f1ce:	2019      	movs	r0, #25
    f1d0:	f7fb fac2 	bl	a758 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    f1d4:	b330      	cbz	r0, f224 <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    f1d6:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    f1da:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    f1de:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    f1e2:	7b22      	ldrb	r2, [r4, #12]
    f1e4:	f003 0307 	and.w	r3, r3, #7
    f1e8:	4213      	tst	r3, r2
    f1ea:	f43f a807 	beq.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    f1ee:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    f1f2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    f1f6:	429a      	cmp	r2, r3
    f1f8:	f47f a800 	bne.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    f1fc:	2205      	movs	r2, #5
    f1fe:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    f202:	f105 0079 	add.w	r0, r5, #121	; 0x79
    f206:	f7f2 fcf9 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    f20a:	2301      	movs	r3, #1
    f20c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    f210:	2302      	movs	r3, #2
    f212:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    f216:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    f21a:	3b01      	subs	r3, #1
    f21c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    f220:	f7fe bfec 	b.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    f224:	4816      	ldr	r0, [pc, #88]	; (f280 <isr_rx_conn_pkt_ctrl+0x1230>)
    f226:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f22a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    f22e:	f7f8 fcdc 	bl	7bea <mem_acquire>
	if (!node_tx) {
    f232:	4601      	mov	r1, r0
    f234:	2800      	cmp	r0, #0
    f236:	f43f a91e 	beq.w	e476 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f23a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    f23c:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f23e:	f043 0303 	orr.w	r3, r3, #3
    f242:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    f244:	2302      	movs	r3, #2
    f246:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    f248:	2307      	movs	r3, #7
    f24a:	71c3      	strb	r3, [r0, #7]
    f24c:	f7ff b94f 	b.w	e4ee <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    f250:	2328      	movs	r3, #40	; 0x28
    f252:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    f256:	f7fe bfd1 	b.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    f25a:	2e00      	cmp	r6, #0
    f25c:	f43f a90b 	beq.w	e476 <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f260:	490a      	ldr	r1, [pc, #40]	; (f28c <isr_rx_conn_pkt_ctrl+0x123c>)
    f262:	4630      	mov	r0, r6
    f264:	f7f8 fcdb 	bl	7c1e <mem_release>
    f268:	f7ff b905 	b.w	e476 <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f26c:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    f26e:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f270:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f272:	4693      	mov	fp, r2
    f274:	e5db      	b.n	ee2e <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    f276:	2328      	movs	r3, #40	; 0x28
    f278:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    f27c:	f7fe bfbe 	b.w	e1fc <isr_rx_conn_pkt_ctrl+0x1ac>
    f280:	200008f0 	.word	0x200008f0
    f284:	000155c5 	.word	0x000155c5
    f288:	00018784 	.word	0x00018784
    f28c:	20000a4c 	.word	0x20000a4c

0000f290 <isr>:
{
    f290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f294:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    f296:	f003 fec9 	bl	1302c <radio_is_done>
    f29a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    f29c:	b366      	cbz	r6, f2f8 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    f29e:	f003 fee5 	bl	1306c <radio_crc_is_valid>
    f2a2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    f2a4:	f003 ff66 	bl	13174 <radio_filter_has_match>
    f2a8:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    f2ac:	f003 ff6c 	bl	13188 <radio_filter_match_get>
    f2b0:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    f2b4:	f004 f950 	bl	13558 <radio_ar_has_match>
    f2b8:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    f2bc:	f004 f93a 	bl	13534 <radio_ar_match_get>
    f2c0:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    f2c4:	f003 ff20 	bl	13108 <radio_rssi_is_ready>
    f2c8:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    f2ca:	4cb4      	ldr	r4, [pc, #720]	; (f59c <isr+0x30c>)
	radio_status_reset();
    f2cc:	f003 fe98 	bl	13000 <radio_status_reset>
	radio_tmr_status_reset();
    f2d0:	f003 ff6c 	bl	131ac <radio_tmr_status_reset>
	radio_filter_status_reset();
    f2d4:	f003 ff46 	bl	13164 <radio_filter_status_reset>
	radio_ar_status_reset();
    f2d8:	f004 f932 	bl	13540 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f2dc:	f003 ff0c 	bl	130f8 <radio_rssi_status_reset>
	switch (_radio.state) {
    f2e0:	7d23      	ldrb	r3, [r4, #20]
    f2e2:	2b05      	cmp	r3, #5
    f2e4:	f201 846e 	bhi.w	10bc4 <__kernel_ram_size+0xbc4>
    f2e8:	e8df f013 	tbh	[pc, r3, lsl #1]
    f2ec:	00cd007c 	.word	0x00cd007c
    f2f0:	0a1c000e 	.word	0x0a1c000e
    f2f4:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    f2f8:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f2fc:	4635      	mov	r5, r6
    f2fe:	46b2      	mov	sl, r6
    f300:	46b1      	mov	r9, r6
    f302:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    f304:	46d8      	mov	r8, fp
    f306:	e7e0      	b.n	f2ca <isr+0x3a>
	_radio.state = STATE_RX;
    f308:	2301      	movs	r3, #1
    f30a:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    f30c:	f004 f850 	bl	133b0 <radio_tmr_tifs_base_get>
    f310:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    f312:	2096      	movs	r0, #150	; 0x96
    f314:	f003 ff58 	bl	131c8 <radio_tmr_tifs_set>
	switch (_radio.role) {
    f318:	7ce3      	ldrb	r3, [r4, #19]
    f31a:	3b01      	subs	r3, #1
    f31c:	2b03      	cmp	r3, #3
    f31e:	f200 80aa 	bhi.w	f476 <isr+0x1e6>
    f322:	e8df f003 	tbb	[pc, r3]
    f326:	3202      	.short	0x3202
    f328:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f32a:	2300      	movs	r3, #0
    f32c:	461a      	mov	r2, r3
    f32e:	4619      	mov	r1, r3
    f330:	4618      	mov	r0, r3
    f332:	f003 feb9 	bl	130a8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f336:	f003 fea7 	bl	13088 <radio_pkt_scratch_get>
    f33a:	f003 fe29 	bl	12f90 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f33e:	f003 fe6b 	bl	13018 <radio_is_ready>
    f342:	b138      	cbz	r0, f354 <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    f344:	4b96      	ldr	r3, [pc, #600]	; (f5a0 <isr+0x310>)
    f346:	9301      	str	r3, [sp, #4]
    f348:	9300      	str	r3, [sp, #0]
    f34a:	4b96      	ldr	r3, [pc, #600]	; (f5a4 <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    f34c:	4a96      	ldr	r2, [pc, #600]	; (f5a8 <isr+0x318>)
    f34e:	4997      	ldr	r1, [pc, #604]	; (f5ac <isr+0x31c>)
    f350:	4897      	ldr	r0, [pc, #604]	; (f5b0 <isr+0x320>)
    f352:	e34b      	b.n	f9ec <isr+0x75c>
		if (ctrl_rl_enabled()) {
    f354:	f003 f95e 	bl	12614 <ctrl_rl_enabled>
    f358:	b138      	cbz	r0, f36a <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    f35a:	a810      	add	r0, sp, #64	; 0x40
    f35c:	f002 feaa 	bl	120b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f360:	4601      	mov	r1, r0
    f362:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f366:	f004 f8b3 	bl	134d0 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f36a:	2100      	movs	r1, #0
    f36c:	4608      	mov	r0, r1
    f36e:	f003 fe24 	bl	12fba <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f372:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f374:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f376:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f378:	4608      	mov	r0, r1
    f37a:	f003 fe1a 	bl	12fb2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f37e:	1a28      	subs	r0, r5, r0
    f380:	f003 ffac 	bl	132dc <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f384:	f003 fffc 	bl	13380 <radio_tmr_end_capture>
    f388:	e02c      	b.n	f3e4 <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f38a:	2300      	movs	r3, #0
    f38c:	461a      	mov	r2, r3
    f38e:	4619      	mov	r1, r3
    f390:	4618      	mov	r0, r3
    f392:	f003 fe89 	bl	130a8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f396:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f39a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f39e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f3a2:	3008      	adds	r0, #8
    f3a4:	f003 fdf4 	bl	12f90 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f3a8:	f003 fe36 	bl	13018 <radio_is_ready>
    f3ac:	2800      	cmp	r0, #0
    f3ae:	d1c9      	bne.n	f344 <isr+0xb4>
		if (ctrl_rl_enabled()) {
    f3b0:	f003 f930 	bl	12614 <ctrl_rl_enabled>
    f3b4:	b138      	cbz	r0, f3c6 <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    f3b6:	a810      	add	r0, sp, #64	; 0x40
    f3b8:	f002 fe7c 	bl	120b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f3bc:	4601      	mov	r1, r0
    f3be:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f3c2:	f004 f885 	bl	134d0 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f3c6:	2100      	movs	r1, #0
    f3c8:	4608      	mov	r0, r1
    f3ca:	f003 fdf6 	bl	12fba <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f3ce:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f3d0:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f3d2:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f3d4:	4608      	mov	r0, r1
    f3d6:	f003 fdec 	bl	12fb2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f3da:	1a28      	subs	r0, r5, r0
    f3dc:	f003 ff7e 	bl	132dc <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f3e0:	f003 fe7a 	bl	130d8 <radio_rssi_measure>
}
    f3e4:	b013      	add	sp, #76	; 0x4c
    f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f3ea:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    f3ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f3f2:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f3f6:	2100      	movs	r1, #0
    f3f8:	09d3      	lsrs	r3, r2, #7
    f3fa:	f000 0007 	and.w	r0, r0, #7
    f3fe:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f402:	f003 fe51 	bl	130a8 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f406:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f40a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    f40e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f412:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    f416:	3108      	adds	r1, #8
    f418:	f7fb fd5a 	bl	aed0 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f41c:	f003 fdfc 	bl	13018 <radio_is_ready>
    f420:	2800      	cmp	r0, #0
    f422:	d18f      	bne.n	f344 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f424:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f428:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f42c:	2101      	movs	r1, #1
    f42e:	f000 0007 	and.w	r0, r0, #7
    f432:	f003 fdc2 	bl	12fba <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f436:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f43a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    f43e:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    f442:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    f444:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f446:	4405      	add	r5, r0
	switch (phy) {
    f448:	d013      	beq.n	f472 <isr+0x1e2>
		return 40;
    f44a:	2b04      	cmp	r3, #4
    f44c:	bf0c      	ite	eq
    f44e:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    f452:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f454:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    f456:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f45a:	09c1      	lsrs	r1, r0, #7
    f45c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f460:	f003 fda7 	bl	12fb2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f464:	1a28      	subs	r0, r5, r0
    f466:	f003 ff39 	bl	132dc <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f46a:	2001      	movs	r0, #1
    f46c:	f7fc fb80 	bl	bb70 <packet_tx_enqueue>
    f470:	e7b8      	b.n	f3e4 <isr+0x154>
		return 24;
    f472:	2018      	movs	r0, #24
    f474:	e7ee      	b.n	f454 <isr+0x1c4>
		LL_ASSERT(0);
    f476:	4b4a      	ldr	r3, [pc, #296]	; (f5a0 <isr+0x310>)
    f478:	9301      	str	r3, [sp, #4]
    f47a:	9300      	str	r3, [sp, #0]
    f47c:	4b49      	ldr	r3, [pc, #292]	; (f5a4 <isr+0x314>)
		LL_ASSERT(0);
    f47e:	4a4a      	ldr	r2, [pc, #296]	; (f5a8 <isr+0x318>)
    f480:	494a      	ldr	r1, [pc, #296]	; (f5ac <isr+0x31c>)
    f482:	484c      	ldr	r0, [pc, #304]	; (f5b4 <isr+0x324>)
    f484:	e2b2      	b.n	f9ec <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f486:	b926      	cbnz	r6, f492 <isr+0x202>
		_radio.state = STATE_CLOSE;
    f488:	2303      	movs	r3, #3
    f48a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f48c:	f003 fda6 	bl	12fdc <radio_disable>
    f490:	e7a8      	b.n	f3e4 <isr+0x154>
	switch (_radio.role) {
    f492:	7ce3      	ldrb	r3, [r4, #19]
    f494:	3b01      	subs	r3, #1
    f496:	2b03      	cmp	r3, #3
    f498:	f201 813e 	bhi.w	10718 <__kernel_ram_size+0x718>
    f49c:	e8df f013 	tbh	[pc, r3, lsl #1]
    f4a0:	02ae0004 	.word	0x02ae0004
    f4a4:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    f4a8:	2f00      	cmp	r7, #0
    f4aa:	d0ed      	beq.n	f488 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f4ac:	f1ba 0f00 	cmp.w	sl, #0
    f4b0:	d039      	beq.n	f526 <isr+0x296>
    f4b2:	4658      	mov	r0, fp
    f4b4:	f002 fe5c 	bl	12170 <ctrl_rl_irk_idx>
    f4b8:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    f4bc:	f003 fde4 	bl	13088 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f4c0:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    f4c4:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f4c6:	232b      	movs	r3, #43	; 0x2b
    f4c8:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f4ca:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f4cc:	fb11 3302 	smlabb	r3, r1, r2, r3
    f4d0:	930a      	str	r3, [sp, #40]	; 0x28
    f4d2:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f4d4:	f000 030f 	and.w	r3, r0, #15
    f4d8:	2b03      	cmp	r3, #3
    f4da:	d10a      	bne.n	f4f2 <isr+0x262>
    f4dc:	7873      	ldrb	r3, [r6, #1]
    f4de:	2b0c      	cmp	r3, #12
    f4e0:	d107      	bne.n	f4f2 <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f4e2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f4e6:	065f      	lsls	r7, r3, #25
    f4e8:	d51f      	bpl.n	f52a <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f4ea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    f4ee:	0658      	lsls	r0, r3, #25
    f4f0:	d449      	bmi.n	f586 <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    f4f2:	7830      	ldrb	r0, [r6, #0]
    f4f4:	f000 030f 	and.w	r3, r0, #15
    f4f8:	2b05      	cmp	r3, #5
    f4fa:	d1c5      	bne.n	f488 <isr+0x1f8>
    f4fc:	7873      	ldrb	r3, [r6, #1]
    f4fe:	2b22      	cmp	r3, #34	; 0x22
    f500:	d1c2      	bne.n	f488 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f504:	5ce3      	ldrb	r3, [r4, r3]
    f506:	f003 030f 	and.w	r3, r3, #15
    f50a:	2b01      	cmp	r3, #1
    f50c:	f040 814f 	bne.w	f7ae <isr+0x51e>
					    ci->connect_ind.init_addr,
    f510:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    f512:	aa10      	add	r2, sp, #64	; 0x40
    f514:	4639      	mov	r1, r7
    f516:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f51a:	f003 f81f 	bl	1255c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    f51e:	2800      	cmp	r0, #0
    f520:	d14c      	bne.n	f5bc <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f522:	2000      	movs	r0, #0
    f524:	e05a      	b.n	f5dc <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f526:	20ff      	movs	r0, #255	; 0xff
    f528:	e7c6      	b.n	f4b8 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    f52a:	aa10      	add	r2, sp, #64	; 0x40
    f52c:	1cb1      	adds	r1, r6, #2
    f52e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f532:	f003 f813 	bl	1255c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f536:	2800      	cmp	r0, #0
    f538:	d0d7      	beq.n	f4ea <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    f53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f53c:	7832      	ldrb	r2, [r6, #0]
    f53e:	5ce3      	ldrb	r3, [r4, r3]
    f540:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f544:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f548:	d1d3      	bne.n	f4f2 <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    f54a:	2206      	movs	r2, #6
    f54c:	f106 0108 	add.w	r1, r6, #8
    f550:	1ca8      	adds	r0, r5, #2
    f552:	f7f2 fb3e 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    f556:	2800      	cmp	r0, #0
    f558:	d1cb      	bne.n	f4f2 <isr+0x262>
		_radio.state = STATE_CLOSE;
    f55a:	2303      	movs	r3, #3
    f55c:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    f55e:	f003 fdad 	bl	130bc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    f562:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    f566:	2327      	movs	r3, #39	; 0x27
    f568:	fb03 4000 	mla	r0, r3, r0, r4
    f56c:	307b      	adds	r0, #123	; 0x7b
    f56e:	f003 fd15 	bl	12f9c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f572:	f003 fd51 	bl	13018 <radio_is_ready>
    f576:	2800      	cmp	r0, #0
    f578:	f43f af34 	beq.w	f3e4 <isr+0x154>
    f57c:	4b08      	ldr	r3, [pc, #32]	; (f5a0 <isr+0x310>)
    f57e:	9301      	str	r3, [sp, #4]
    f580:	9300      	str	r3, [sp, #0]
    f582:	4b0d      	ldr	r3, [pc, #52]	; (f5b8 <isr+0x328>)
    f584:	e6e2      	b.n	f34c <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f586:	f1b9 0f00 	cmp.w	r9, #0
    f58a:	d1d6      	bne.n	f53a <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f58c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f590:	f002 fe34 	bl	121fc <ctrl_irk_whitelisted>
    f594:	2800      	cmp	r0, #0
    f596:	d1d0      	bne.n	f53a <isr+0x2aa>
    f598:	e7ab      	b.n	f4f2 <isr+0x262>
    f59a:	bf00      	nop
    f59c:	200008f0 	.word	0x200008f0
    f5a0:	000155c5 	.word	0x000155c5
    f5a4:	0001838e 	.word	0x0001838e
    f5a8:	0001699e 	.word	0x0001699e
    f5ac:	000169ed 	.word	0x000169ed
    f5b0:	00018a54 	.word	0x00018a54
    f5b4:	00016912 	.word	0x00016912
    f5b8:	000183a1 	.word	0x000183a1
		       isr_adv_ci_adva_check(adv, ci) &&
    f5bc:	4631      	mov	r1, r6
    f5be:	4628      	mov	r0, r5
    f5c0:	f7fb ff6e 	bl	b4a0 <isr_adv_ci_adva_check>
					    rl_idx) &&
    f5c4:	2800      	cmp	r0, #0
    f5c6:	d0ac      	beq.n	f522 <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    f5c8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    f5cc:	2bff      	cmp	r3, #255	; 0xff
    f5ce:	f000 80db 	beq.w	f788 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    f5d2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    f5d6:	1ac1      	subs	r1, r0, r3
    f5d8:	4248      	negs	r0, r1
    f5da:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f5dc:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    f5e0:	2800      	cmp	r0, #0
    f5e2:	f43f af51 	beq.w	f488 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    f5e6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f5ea:	b133      	cbz	r3, f5fa <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    f5ec:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    f5f0:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f5f4:	429a      	cmp	r2, r3
    f5f6:	f47f af47 	bne.w	f488 <isr+0x1f8>
    f5fa:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    f5fe:	2b00      	cmp	r3, #0
    f600:	f43f af42 	beq.w	f488 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    f604:	2004      	movs	r0, #4
    f606:	f7fb f905 	bl	a814 <packet_rx_reserve_get>
		if (!node_rx) {
    f60a:	4607      	mov	r7, r0
    f60c:	2800      	cmp	r0, #0
    f60e:	f43f af3b 	beq.w	f488 <isr+0x1f8>
		_radio.state = STATE_STOP;
    f612:	f04f 0904 	mov.w	r9, #4
    f616:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    f61a:	f003 fcdf 	bl	12fdc <radio_disable>
		conn = _radio.advertiser.conn;
    f61e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f622:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    f626:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f628:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f62c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    f62e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f632:	f7f8 fb12 	bl	7c5a <mem_index_get>
		memcpy(&conn->access_addr[0],
    f636:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f63a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    f63c:	2203      	movs	r2, #3
    f63e:	f106 0112 	add.w	r1, r6, #18
    f642:	f105 0014 	add.w	r0, r5, #20
    f646:	f7f2 fad9 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    f64a:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    f64e:	464a      	mov	r2, r9
    f650:	f106 010e 	add.w	r1, r6, #14
    f654:	4650      	mov	r0, sl
    f656:	f7f2 fad1 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    f65a:	2205      	movs	r2, #5
    f65c:	f106 011e 	add.w	r1, r6, #30
    f660:	4640      	mov	r0, r8
    f662:	f7f2 facb 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    f666:	2105      	movs	r1, #5
    f668:	4640      	mov	r0, r8
    f66a:	f7f8 fc69 	bl	7f40 <util_ones_count_get>
		conn->data_chan_count =
    f66e:	7f6b      	ldrb	r3, [r5, #29]
    f670:	f360 0305 	bfi	r3, r0, #0, #6
    f674:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    f676:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    f67a:	f3c3 0304 	ubfx	r3, r3, #0, #5
    f67e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    f680:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    f682:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    f684:	f240 48e2 	movw	r8, #1250	; 0x4e2
    f688:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    f68c:	7ef2      	ldrb	r2, [r6, #27]
    f68e:	7eb3      	ldrb	r3, [r6, #26]
    f690:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    f694:	4651      	mov	r1, sl
    f696:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    f698:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    f69a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    f69e:	f7f2 faad 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    f6a2:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f6a4:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    f6a6:	f242 7210 	movw	r2, #10000	; 0x2710
    f6aa:	fb02 8303 	mla	r3, r2, r3, r8
    f6ae:	3b01      	subs	r3, #1
    f6b0:	fbb3 f3f8 	udiv	r3, r3, r8
    f6b4:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    f6b6:	4b54      	ldr	r3, [pc, #336]	; (f808 <isr+0x578>)
    f6b8:	4443      	add	r3, r8
    f6ba:	fbb3 f3f8 	udiv	r3, r3, r8
    f6be:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f6c2:	4b52      	ldr	r3, [pc, #328]	; (f80c <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f6c4:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f6c6:	4443      	add	r3, r8
    f6c8:	fbb3 f3f8 	udiv	r3, r3, r8
    f6cc:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f6ce:	4282      	cmp	r2, r0
    f6d0:	4613      	mov	r3, r2
    f6d2:	bfc4      	itt	gt
    f6d4:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    f6d8:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f6da:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f6de:	bfc4      	itt	gt
    f6e0:	18d2      	addgt	r2, r2, r3
    f6e2:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    f6e4:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f6e6:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f6ea:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    f6ec:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    f6ee:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    f6f0:	2300      	movs	r3, #0
    f6f2:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    f6f4:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f6f6:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    f6fa:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f6fc:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f700:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    f704:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f706:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f70a:	464a      	mov	r2, r9
    f70c:	f107 001b 	add.w	r0, r7, #27
    f710:	f7f2 fa74 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    f714:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f718:	f107 030e 	add.w	r3, r7, #14
    f71c:	28ff      	cmp	r0, #255	; 0xff
    f71e:	930b      	str	r3, [sp, #44]	; 0x2c
    f720:	f106 0a02 	add.w	sl, r6, #2
    f724:	f107 0b14 	add.w	fp, r7, #20
    f728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f72a:	d05f      	beq.n	f7ec <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
    f72c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f72e:	f107 010d 	add.w	r1, r7, #13
    f732:	f002 fed5 	bl	124e0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    f736:	7b7b      	ldrb	r3, [r7, #13]
    f738:	3302      	adds	r3, #2
    f73a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f73c:	464a      	mov	r2, r9
    f73e:	4651      	mov	r1, sl
    f740:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f742:	f7f2 fa5b 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    f746:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    f748:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    f74c:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    f74e:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    f752:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    f754:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    f758:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    f75c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    f760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    f764:	8c28      	ldrh	r0, [r5, #32]
    f766:	f7fb ffaf 	bl	b6c8 <rx_fc_lock>
		packet_rx_enqueue();
    f76a:	f7fb febd 	bl	b4e8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    f76e:	2003      	movs	r0, #3
    f770:	f7fb f850 	bl	a814 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f774:	2800      	cmp	r0, #0
    f776:	d155      	bne.n	f824 <isr+0x594>
    f778:	4b25      	ldr	r3, [pc, #148]	; (f810 <isr+0x580>)
    f77a:	9301      	str	r3, [sp, #4]
    f77c:	9300      	str	r3, [sp, #0]
    f77e:	4b25      	ldr	r3, [pc, #148]	; (f814 <isr+0x584>)
			LL_ASSERT(node_rx);
    f780:	4a25      	ldr	r2, [pc, #148]	; (f818 <isr+0x588>)
    f782:	4926      	ldr	r1, [pc, #152]	; (f81c <isr+0x58c>)
    f784:	4826      	ldr	r0, [pc, #152]	; (f820 <isr+0x590>)
    f786:	e131      	b.n	f9ec <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
    f788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f78a:	5ce2      	ldrb	r2, [r4, r3]
    f78c:	7833      	ldrb	r3, [r6, #0]
    f78e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f792:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f796:	f47f aec4 	bne.w	f522 <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    f79a:	2206      	movs	r2, #6
    f79c:	4639      	mov	r1, r7
    f79e:	f105 0008 	add.w	r0, r5, #8
    f7a2:	f7f2 fa16 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    f7a6:	fab0 f080 	clz	r0, r0
    f7aa:	0940      	lsrs	r0, r0, #5
    f7ac:	e716      	b.n	f5dc <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    f7ae:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f7b2:	09db      	lsrs	r3, r3, #7
    f7b4:	d00d      	beq.n	f7d2 <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    f7b6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    f7ba:	09db      	lsrs	r3, r3, #7
    f7bc:	f43f aeb1 	beq.w	f522 <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    f7c0:	f1b9 0f00 	cmp.w	r9, #0
    f7c4:	d10d      	bne.n	f7e2 <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f7c6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f7ca:	f002 fd17 	bl	121fc <ctrl_irk_whitelisted>
    f7ce:	b940      	cbnz	r0, f7e2 <isr+0x552>
    f7d0:	e6a7      	b.n	f522 <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    f7d2:	aa10      	add	r2, sp, #64	; 0x40
    f7d4:	1cb1      	adds	r1, r6, #2
    f7d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f7da:	f002 febf 	bl	1255c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    f7de:	2800      	cmp	r0, #0
    f7e0:	d0e9      	beq.n	f7b6 <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
    f7e2:	4631      	mov	r1, r6
    f7e4:	4628      	mov	r0, r5
    f7e6:	f7fb fe5b 	bl	b4a0 <isr_adv_ci_adva_check>
    f7ea:	e6f7      	b.n	f5dc <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    f7ec:	4619      	mov	r1, r3
    f7ee:	464a      	mov	r2, r9
    f7f0:	4658      	mov	r0, fp
    f7f2:	f7f2 fa2f 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f7f6:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f7f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f7fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f7fe:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f800:	464a      	mov	r2, r9
    f802:	4651      	mov	r1, sl
    f804:	e79d      	b.n	f742 <isr+0x4b2>
    f806:	bf00      	nop
    f808:	026259ff 	.word	0x026259ff
    f80c:	01c9c37f 	.word	0x01c9c37f
    f810:	000155c5 	.word	0x000155c5
    f814:	000183a1 	.word	0x000183a1
    f818:	0001699e 	.word	0x0001699e
    f81c:	000169ed 	.word	0x000169ed
    f820:	00018e8b 	.word	0x00018e8b
			node_rx->hdr.handle = conn->handle;
    f824:	8c2b      	ldrh	r3, [r5, #32]
    f826:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f828:	230b      	movs	r3, #11
    f82a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    f82c:	7833      	ldrb	r3, [r6, #0]
    f82e:	f013 0320 	ands.w	r3, r3, #32
    f832:	d00e      	beq.n	f852 <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
    f834:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    f836:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f838:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    f83a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f83e:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    f840:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f844:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f846:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f848:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f84c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    f84e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f850:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f852:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f854:	f7fb fe48 	bl	b4e8 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f858:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    f85c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f860:	497d      	ldr	r1, [pc, #500]	; (fa58 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f862:	0952      	lsrs	r2, r2, #5
    f864:	f362 0384 	bfi	r3, r2, #2, #3
    f868:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f86c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    f870:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    f874:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f878:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    f87a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    f87e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    f882:	4a76      	ldr	r2, [pc, #472]	; (fa5c <isr+0x7cc>)
    f884:	f203 233f 	addw	r3, r3, #575	; 0x23f
    f888:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    f88c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    f88e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    f892:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    f894:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    f896:	7d73      	ldrb	r3, [r6, #21]
    f898:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    f89c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    f89e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    f8a2:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f8a4:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    f8a6:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f8a8:	4638      	mov	r0, r7
    f8aa:	f003 fb84 	bl	12fb6 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f8ae:	496c      	ldr	r1, [pc, #432]	; (fa60 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f8b0:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f8b2:	f200 4052 	addw	r0, r0, #1106	; 0x452
    f8b6:	a366      	add	r3, pc, #408	; (adr r3, fa50 <isr+0x7c0>)
    f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f8bc:	fba0 0101 	umull	r0, r1, r0, r1
    f8c0:	f7f0 fca8 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f8c4:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    f8c8:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    f8ca:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f8cc:	4293      	cmp	r3, r2
    f8ce:	bf38      	it	cc
    f8d0:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f8d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f8d6:	469a      	mov	sl, r3
		conn_interval_us -=
    f8d8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    f8da:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    f8dc:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    f8de:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    f8e0:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    f8e4:	f003 fd5e 	bl	133a4 <radio_tmr_end_get>
    f8e8:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    f8ea:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f8ec:	4639      	mov	r1, r7
		conn_offset_us +=
    f8ee:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f8f2:	4638      	mov	r0, r7
    f8f4:	f003 fb5d 	bl	12fb2 <radio_tx_chain_delay_get>
    f8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8fa:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    f8fe:	4499      	add	r9, r3
    f900:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    f904:	eba9 030b 	sub.w	r3, r9, fp
    f908:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f90a:	f240 4383 	movw	r3, #1155	; 0x483
    f90e:	9300      	str	r3, [sp, #0]
    f910:	2205      	movs	r2, #5
    f912:	4b54      	ldr	r3, [pc, #336]	; (fa64 <isr+0x7d4>)
    f914:	f8df b148 	ldr.w	fp, [pc, #328]	; fa60 <isr+0x7d0>
    f918:	4639      	mov	r1, r7
    f91a:	4638      	mov	r0, r7
    f91c:	f7f9 f88c 	bl	8a38 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    f920:	f240 4184 	movw	r1, #1156	; 0x484
    f924:	f7fb ff08 	bl	b738 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f92a:	5ce3      	ldrb	r3, [r4, r3]
    f92c:	f003 030f 	and.w	r3, r3, #15
    f930:	2b01      	cmp	r3, #1
    f932:	d106      	bne.n	f942 <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f934:	9700      	str	r7, [sp, #0]
    f936:	463b      	mov	r3, r7
    f938:	2203      	movs	r2, #3
    f93a:	4639      	mov	r1, r7
    f93c:	4638      	mov	r0, r7
    f93e:	f7f9 f87b 	bl	8a38 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f942:	fba8 890b 	umull	r8, r9, r8, fp
    f946:	a342      	add	r3, pc, #264	; (adr r3, fa50 <isr+0x7c0>)
    f948:	e9d3 2300 	ldrd	r2, r3, [r3]
    f94c:	4640      	mov	r0, r8
    f94e:	4649      	mov	r1, r9
    f950:	f7f0 fc60 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f954:	f895 3020 	ldrb.w	r3, [r5, #32]
    f958:	68a4      	ldr	r4, [r4, #8]
    f95a:	9506      	str	r5, [sp, #24]
    f95c:	3307      	adds	r3, #7
    f95e:	b2db      	uxtb	r3, r3
    f960:	930a      	str	r3, [sp, #40]	; 0x28
    f962:	f240 439b 	movw	r3, #1179	; 0x49b
    f966:	9308      	str	r3, [sp, #32]
    f968:	4b3f      	ldr	r3, [pc, #252]	; (fa68 <isr+0x7d8>)
    f96a:	9307      	str	r3, [sp, #28]
    f96c:	4b3f      	ldr	r3, [pc, #252]	; (fa6c <isr+0x7dc>)
    f96e:	9305      	str	r3, [sp, #20]
    f970:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f972:	4a3f      	ldr	r2, [pc, #252]	; (fa70 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f974:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f976:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f978:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f97a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f97e:	2307      	movs	r3, #7
    f980:	2100      	movs	r1, #0
    f982:	4343      	muls	r3, r0
    f984:	fb02 3301 	mla	r3, r2, r1, r3
    f988:	fba0 1202 	umull	r1, r2, r0, r2
    f98c:	441a      	add	r2, r3
    f98e:	4608      	mov	r0, r1
    f990:	ebb8 0000 	subs.w	r0, r8, r0
    f994:	4611      	mov	r1, r2
    f996:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f99a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f99c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f9a0:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f9a2:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f9a4:	f7f0 fc36 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f9a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f9aa:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f9ac:	a328      	add	r3, pc, #160	; (adr r3, fa50 <isr+0x7c0>)
    f9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f9b2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f9b6:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f9ba:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f9bc:	f7f0 fc2a 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f9c0:	eba4 040a 	sub.w	r4, r4, sl
    f9c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f9c8:	9000      	str	r0, [sp, #0]
    f9ca:	4623      	mov	r3, r4
    f9cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f9ce:	4629      	mov	r1, r5
    f9d0:	4628      	mov	r0, r5
    f9d2:	f7f8 ff93 	bl	88fc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f9d6:	f030 0302 	bics.w	r3, r0, #2
    f9da:	f43f ad03 	beq.w	f3e4 <isr+0x154>
    f9de:	4b25      	ldr	r3, [pc, #148]	; (fa74 <isr+0x7e4>)
    f9e0:	9301      	str	r3, [sp, #4]
    f9e2:	9300      	str	r3, [sp, #0]
    f9e4:	4b24      	ldr	r3, [pc, #144]	; (fa78 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f9e6:	4a25      	ldr	r2, [pc, #148]	; (fa7c <isr+0x7ec>)
    f9e8:	4925      	ldr	r1, [pc, #148]	; (fa80 <isr+0x7f0>)
    f9ea:	4826      	ldr	r0, [pc, #152]	; (fa84 <isr+0x7f4>)
		LL_ASSERT(0);
    f9ec:	f7f1 face 	bl	f8c <printk>
    f9f0:	4040      	eors	r0, r0
    f9f2:	f380 8811 	msr	BASEPRI, r0
    f9f6:	f04f 0004 	mov.w	r0, #4
    f9fa:	df02      	svc	2
		rl_idx = devmatch_ok ?
    f9fc:	f1b9 0f00 	cmp.w	r9, #0
    fa00:	d01c      	beq.n	fa3c <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    fa02:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    fa06:	4641      	mov	r1, r8
    fa08:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fa0c:	f002 fb5c 	bl	120c8 <ctrl_rl_idx>
    fa10:	4680      	mov	r8, r0
		if (crc_ok &&
    fa12:	b147      	cbz	r7, fa26 <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    fa14:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fa18:	06da      	lsls	r2, r3, #27
    fa1a:	d535      	bpl.n	fa88 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    fa1c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fa20:	06db      	lsls	r3, r3, #27
    fa22:	f100 811d 	bmi.w	fc60 <isr+0x9d0>
			_radio.state = STATE_CLOSE;
    fa26:	2303      	movs	r3, #3
    fa28:	7523      	strb	r3, [r4, #20]
			radio_disable();
    fa2a:	f003 fad7 	bl	12fdc <radio_disable>
			_radio.scanner.state = 0;
    fa2e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    fa32:	f36f 0341 	bfc	r3, #1, #1
    fa36:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    fa3a:	e4d3      	b.n	f3e4 <isr+0x154>
		rl_idx = devmatch_ok ?
    fa3c:	f1ba 0f00 	cmp.w	sl, #0
    fa40:	d003      	beq.n	fa4a <isr+0x7ba>
    fa42:	4658      	mov	r0, fp
    fa44:	f002 fb94 	bl	12170 <ctrl_rl_irk_idx>
    fa48:	e7e2      	b.n	fa10 <isr+0x780>
    fa4a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    fa4e:	e7e0      	b.n	fa12 <isr+0x782>
    fa50:	1afd498d 	.word	0x1afd498d
    fa54:	00000007 	.word	0x00000007
    fa58:	00018a44 	.word	0x00018a44
    fa5c:	000f4240 	.word	0x000f4240
    fa60:	3b9aca00 	.word	0x3b9aca00
    fa64:	0000b739 	.word	0x0000b739
    fa68:	0000b6fd 	.word	0x0000b6fd
    fa6c:	0000dba5 	.word	0x0000dba5
    fa70:	1afd498d 	.word	0x1afd498d
    fa74:	000155c5 	.word	0x000155c5
    fa78:	000183a1 	.word	0x000183a1
    fa7c:	0001699e 	.word	0x0001699e
    fa80:	000169ed 	.word	0x000169ed
    fa84:	00018825 	.word	0x00018825
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    fa88:	f1b9 0f00 	cmp.w	r9, #0
    fa8c:	d005      	beq.n	fa9a <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fa8e:	4641      	mov	r1, r8
    fa90:	4650      	mov	r0, sl
    fa92:	f002 fcf1 	bl	12478 <ctrl_rl_idx_allowed>
    fa96:	2800      	cmp	r0, #0
    fa98:	d0c0      	beq.n	fa1c <isr+0x78c>
	bool dir_report = false;
    fa9a:	2300      	movs	r3, #0
    fa9c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    faa0:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    faa4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    faa8:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    faac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    fab0:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    fab4:	2b00      	cmp	r3, #0
    fab6:	f000 80ec 	beq.w	fc92 <isr+0xa02>
    faba:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    fabe:	b133      	cbz	r3, face <isr+0x83e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    fac0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    fac4:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    fac8:	429a      	cmp	r2, r3
    faca:	f040 80e2 	bne.w	fc92 <isr+0xa02>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    face:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    fad2:	f3c3 1000 	ubfx	r0, r3, #4, #1
    fad6:	2800      	cmp	r0, #0
    fad8:	f000 80cd 	beq.w	fc76 <isr+0x9e6>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    fadc:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    fae0:	f010 000f 	ands.w	r0, r0, #15
    fae4:	f040 814c 	bne.w	fd80 <isr+0xaf0>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    fae8:	f003 fc5c 	bl	133a4 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    faec:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    faf0:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    faf4:	48b8      	ldr	r0, [pc, #736]	; (fdd8 <isr+0xb48>)
    faf6:	2207      	movs	r2, #7
    faf8:	fba3 0100 	umull	r0, r1, r3, r0
    fafc:	fb02 1103 	mla	r1, r2, r3, r1
    fb00:	a3b3      	add	r3, pc, #716	; (adr r3, fdd0 <isr+0xb40>)
    fb02:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb06:	f7f0 fb85 	bl	214 <__aeabi_uldivmod>
    fb0a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    fb0e:	4287      	cmp	r7, r0
    fb10:	f080 80bf 	bcs.w	fc92 <isr+0xa02>
			node_rx = packet_rx_reserve_get(4);
    fb14:	2004      	movs	r0, #4
    fb16:	f7fa fe7d 	bl	a814 <packet_rx_reserve_get>
		if (node_rx == 0) {
    fb1a:	4607      	mov	r7, r0
    fb1c:	2800      	cmp	r0, #0
    fb1e:	d082      	beq.n	fa26 <isr+0x796>
		_radio.state = STATE_STOP;
    fb20:	2304      	movs	r3, #4
    fb22:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    fb24:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    fb26:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    fb2a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    fb2e:	f003 faab 	bl	13088 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    fb32:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    fb34:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    fb38:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    fb3c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fb3e:	f899 3008 	ldrb.w	r3, [r9, #8]
    fb42:	7802      	ldrb	r2, [r0, #0]
    fb44:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fb48:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    fb4c:	2322      	movs	r3, #34	; 0x22
    fb4e:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    fb50:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fb52:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    fb54:	4640      	mov	r0, r8
    fb56:	f002 fa99 	bl	1208c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    fb5a:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    fb5e:	4601      	mov	r1, r0
    fb60:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    fb62:	f013 0f01 	tst.w	r3, #1
    fb66:	f810 3b02 	ldrb.w	r3, [r0], #2
    fb6a:	f000 8114 	beq.w	fd96 <isr+0xb06>
    fb6e:	2900      	cmp	r1, #0
    fb70:	f000 8111 	beq.w	fd96 <isr+0xb06>
			pdu_adv_tx->tx_addr = 1;
    fb74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fb78:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fb7a:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fb7c:	f7f2 f83e 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    fb80:	f105 0308 	add.w	r3, r5, #8
    fb84:	4618      	mov	r0, r3
    fb86:	2206      	movs	r2, #6
    fb88:	f109 010a 	add.w	r1, r9, #10
    fb8c:	930a      	str	r3, [sp, #40]	; 0x28
    fb8e:	f7f2 f835 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    fb92:	2204      	movs	r2, #4
    fb94:	f106 0110 	add.w	r1, r6, #16
    fb98:	f105 000e 	add.w	r0, r5, #14
    fb9c:	f7f2 f82e 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    fba0:	2203      	movs	r2, #3
    fba2:	f106 0114 	add.w	r1, r6, #20
    fba6:	f105 0012 	add.w	r0, r5, #18
    fbaa:	f7f2 f827 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    fbae:	2301      	movs	r3, #1
    fbb0:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    fbb2:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    fbb6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    fbba:	4353      	muls	r3, r2
    fbbc:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    fbbe:	f003 fbf1 	bl	133a4 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    fbc2:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    fbc4:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    fbc8:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    fbca:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    fbce:	bfd8      	it	le
    fbd0:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    fbd4:	f1bb 0f00 	cmp.w	fp, #0
    fbd8:	f040 80e8 	bne.w	fdac <isr+0xb1c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    fbdc:	f885 b016 	strb.w	fp, [r5, #22]
    fbe0:	f885 b017 	strb.w	fp, [r5, #23]
    fbe4:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    fbe6:	2100      	movs	r1, #0
    fbe8:	4608      	mov	r0, r1
    fbea:	f003 f9dd 	bl	12fa8 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    fbee:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    fbf0:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    fbf4:	4608      	mov	r0, r1
    fbf6:	f003 f9dc 	bl	12fb2 <radio_tx_chain_delay_get>
    fbfa:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    fbfe:	f100 031e 	add.w	r3, r0, #30
    fc02:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    fc04:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    fc08:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    fc0a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    fc0e:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    fc10:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    fc14:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    fc16:	f106 0117 	add.w	r1, r6, #23
    fc1a:	2205      	movs	r2, #5
    fc1c:	f105 001e 	add.w	r0, r5, #30
    fc20:	f7f1 ffec 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    fc24:	7fb2      	ldrb	r2, [r6, #30]
    fc26:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    fc2a:	f362 0304 	bfi	r3, r2, #0, #5
    fc2e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    fc32:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    fc36:	f362 1347 	bfi	r3, r2, #5, #3
    fc3a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    fc3e:	f003 fa3d 	bl	130bc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    fc42:	4628      	mov	r0, r5
    fc44:	f003 f9aa 	bl	12f9c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    fc48:	f003 f9e6 	bl	13018 <radio_is_ready>
    fc4c:	4683      	mov	fp, r0
    fc4e:	2800      	cmp	r0, #0
    fc50:	f000 80cc 	beq.w	fdec <isr+0xb5c>
		LL_ASSERT(!radio_is_ready());
    fc54:	4b61      	ldr	r3, [pc, #388]	; (fddc <isr+0xb4c>)
    fc56:	9301      	str	r3, [sp, #4]
    fc58:	9300      	str	r3, [sp, #0]
    fc5a:	4b61      	ldr	r3, [pc, #388]	; (fde0 <isr+0xb50>)
    fc5c:	f7ff bb76 	b.w	f34c <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    fc60:	f1b9 0f00 	cmp.w	r9, #0
    fc64:	f47f af19 	bne.w	fa9a <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    fc68:	4640      	mov	r0, r8
    fc6a:	f002 fac7 	bl	121fc <ctrl_irk_whitelisted>
		if (crc_ok &&
    fc6e:	2800      	cmp	r0, #0
    fc70:	f43f aed9 	beq.w	fa26 <isr+0x796>
    fc74:	e711      	b.n	fa9a <isr+0x80a>
	if (rl_idx != FILTER_IDX_NONE) {
    fc76:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    fc7a:	d06f      	beq.n	fd5c <isr+0xacc>
		return (rl_idx == _radio.scanner.rl_idx);
    fc7c:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    fc80:	eba0 0e08 	sub.w	lr, r0, r8
    fc84:	f1de 0000 	rsbs	r0, lr, #0
    fc88:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    fc8c:	2800      	cmp	r0, #0
    fc8e:	f47f af25 	bne.w	fadc <isr+0x84c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    fc92:	f899 0008 	ldrb.w	r0, [r9, #8]
    fc96:	f010 000f 	ands.w	r0, r0, #15
    fc9a:	d002      	beq.n	fca2 <isr+0xa12>
    fc9c:	2806      	cmp	r0, #6
    fc9e:	f040 81ac 	bne.w	fffa <isr+0xd6a>
		 (_radio.scanner.type != 0) &&
    fca2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    fca6:	071f      	lsls	r7, r3, #28
    fca8:	f140 8191 	bpl.w	ffce <isr+0xd3e>
		 (_radio.scanner.type != 0) &&
    fcac:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    fcb0:	2a00      	cmp	r2, #0
    fcb2:	f040 818c 	bne.w	ffce <isr+0xd3e>
		err = isr_rx_scan_report(rssi_ready,
    fcb6:	f1ba 0f00 	cmp.w	sl, #0
    fcba:	bf14      	ite	ne
    fcbc:	4641      	movne	r1, r8
    fcbe:	21ff      	moveq	r1, #255	; 0xff
    fcc0:	4628      	mov	r0, r5
    fcc2:	f7fb fca9 	bl	b618 <isr_rx_scan_report>
		if (err) {
    fcc6:	2800      	cmp	r0, #0
    fcc8:	f47f aead 	bne.w	fa26 <isr+0x796>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    fccc:	f003 f9dc 	bl	13088 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    fcd0:	7803      	ldrb	r3, [r0, #0]
    fcd2:	2203      	movs	r2, #3
    fcd4:	f362 0303 	bfi	r3, r2, #0, #4
    fcd8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fcda:	f899 3008 	ldrb.w	r3, [r9, #8]
    fcde:	7802      	ldrb	r2, [r0, #0]
    fce0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fce4:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    fce8:	230c      	movs	r3, #12
    fcea:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    fcec:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fcee:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    fcf0:	4640      	mov	r0, r8
    fcf2:	f002 f9cb 	bl	1208c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    fcf6:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    fcfa:	4601      	mov	r1, r0
    fcfc:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    fcfe:	f013 0f01 	tst.w	r3, #1
    fd02:	f810 3b02 	ldrb.w	r3, [r0], #2
    fd06:	f000 8159 	beq.w	ffbc <isr+0xd2c>
    fd0a:	2900      	cmp	r1, #0
    fd0c:	f000 8156 	beq.w	ffbc <isr+0xd2c>
			pdu_adv_tx->tx_addr = 1;
    fd10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd14:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    fd16:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    fd18:	f7f1 ff70 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    fd1c:	2206      	movs	r2, #6
    fd1e:	f109 010a 	add.w	r1, r9, #10
    fd22:	f105 0008 	add.w	r0, r5, #8
    fd26:	f7f1 ff69 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
    fd2a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    fd2e:	f043 0302 	orr.w	r3, r3, #2
    fd32:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    fd36:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    fd38:	2302      	movs	r3, #2
    fd3a:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    fd3c:	f003 fa44 	bl	131c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    fd40:	2000      	movs	r0, #0
    fd42:	f003 f9a5 	bl	13090 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    fd46:	4628      	mov	r0, r5
    fd48:	f003 f928 	bl	12f9c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    fd4c:	f003 fb18 	bl	13380 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    fd50:	f003 f962 	bl	13018 <radio_is_ready>
    fd54:	2800      	cmp	r0, #0
    fd56:	f43f ab45 	beq.w	f3e4 <isr+0x154>
    fd5a:	e77b      	b.n	fc54 <isr+0x9c4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    fd5c:	f899 2008 	ldrb.w	r2, [r9, #8]
    fd60:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fd64:	f3c2 1280 	ubfx	r2, r2, #6, #1
    fd68:	4293      	cmp	r3, r2
    fd6a:	d18f      	bne.n	fc8c <isr+0x9fc>
		(memcmp(&_radio.scanner.adv_addr[0],
    fd6c:	2206      	movs	r2, #6
    fd6e:	f109 010a 	add.w	r1, r9, #10
    fd72:	481c      	ldr	r0, [pc, #112]	; (fde4 <isr+0xb54>)
    fd74:	f7f1 ff2d 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    fd78:	fab0 f080 	clz	r0, r0
    fd7c:	0940      	lsrs	r0, r0, #5
    fd7e:	e785      	b.n	fc8c <isr+0x9fc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    fd80:	2801      	cmp	r0, #1
    fd82:	d18b      	bne.n	fc9c <isr+0xa0c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    fd84:	2300      	movs	r3, #0
    fd86:	4642      	mov	r2, r8
    fd88:	4631      	mov	r1, r6
    fd8a:	f7fb fbf9 	bl	b580 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    fd8e:	2800      	cmp	r0, #0
    fd90:	f43f af7f 	beq.w	fc92 <isr+0xa02>
    fd94:	e6a8      	b.n	fae8 <isr+0x858>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fd96:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fd9a:	4913      	ldr	r1, [pc, #76]	; (fde8 <isr+0xb58>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    fd9c:	09d2      	lsrs	r2, r2, #7
    fd9e:	f362 1386 	bfi	r3, r2, #6, #1
    fda2:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fda4:	2206      	movs	r2, #6
    fda6:	e6e9      	b.n	fb7c <isr+0x8ec>
				conn_space_us += conn_interval_us;
    fda8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fdaa:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    fdac:	f1bb 0f00 	cmp.w	fp, #0
    fdb0:	dbfa      	blt.n	fda8 <isr+0xb18>
    fdb2:	459b      	cmp	fp, r3
    fdb4:	d3f8      	bcc.n	fda8 <isr+0xb18>
				(conn_space_us - conn_offset_us) / 1250;
    fdb6:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    fdba:	f240 42e2 	movw	r2, #1250	; 0x4e2
    fdbe:	fbb3 f3f2 	udiv	r3, r3, r2
    fdc2:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    fdc4:	7d6b      	ldrb	r3, [r5, #21]
    fdc6:	3301      	adds	r3, #1
    fdc8:	756b      	strb	r3, [r5, #21]
    fdca:	e70c      	b.n	fbe6 <isr+0x956>
    fdcc:	f3af 8000 	nop.w
    fdd0:	3b9aca00 	.word	0x3b9aca00
    fdd4:	00000000 	.word	0x00000000
    fdd8:	1afd498d 	.word	0x1afd498d
    fddc:	000155c5 	.word	0x000155c5
    fde0:	000183bf 	.word	0x000183bf
    fde4:	200009da 	.word	0x200009da
    fde8:	200009d4 	.word	0x200009d4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fdec:	f44f 72aa 	mov.w	r2, #340	; 0x154
    fdf0:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    fdf4:	4630      	mov	r0, r6
    fdf6:	f7f7 ff30 	bl	7c5a <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    fdfa:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fdfc:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fdfe:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    fe02:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    fe06:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fe0a:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    fe0c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    fe10:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    fe12:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fe16:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    fe18:	2206      	movs	r2, #6
    fe1a:	f107 001b 	add.w	r0, r7, #27
    fe1e:	f7f1 feed 	bl	1bfc <memcpy>
    fe22:	f107 0b0e 	add.w	fp, r7, #14
    fe26:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    fe2a:	f1ba 0f00 	cmp.w	sl, #0
    fe2e:	d032      	beq.n	fe96 <isr+0xc06>
    fe30:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    fe34:	d02f      	beq.n	fe96 <isr+0xc06>
			ll_rl_id_addr_get(rl_idx,
    fe36:	465a      	mov	r2, fp
    fe38:	f107 010d 	add.w	r1, r7, #13
    fe3c:	4640      	mov	r0, r8
    fe3e:	930d      	str	r3, [sp, #52]	; 0x34
    fe40:	f002 fb4e 	bl	124e0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    fe44:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    fe46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fe48:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    fe4a:	3202      	adds	r2, #2
    fe4c:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    fe4e:	4618      	mov	r0, r3
    fe50:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fe52:	f7f1 fed3 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    fe56:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    fe5a:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    fe5e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    fe62:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    fe66:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    fe6a:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    fe6e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    fe72:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    fe76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    fe7a:	8c30      	ldrh	r0, [r6, #32]
    fe7c:	f7fb fc24 	bl	b6c8 <rx_fc_lock>
		packet_rx_enqueue();
    fe80:	f7fb fb32 	bl	b4e8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    fe84:	2003      	movs	r0, #3
    fe86:	f7fa fcc5 	bl	a814 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fe8a:	b988      	cbnz	r0, feb0 <isr+0xc20>
    fe8c:	4bba      	ldr	r3, [pc, #744]	; (10178 <__kernel_ram_size+0x178>)
    fe8e:	9301      	str	r3, [sp, #4]
    fe90:	9300      	str	r3, [sp, #0]
    fe92:	4bba      	ldr	r3, [pc, #744]	; (1017c <__kernel_ram_size+0x17c>)
    fe94:	e474      	b.n	f780 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    fe96:	2206      	movs	r2, #6
    fe98:	2100      	movs	r1, #0
    fe9a:	4618      	mov	r0, r3
    fe9c:	f7f1 feda 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
    fea0:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fea2:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    fea4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    fea8:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    feaa:	2206      	movs	r2, #6
    feac:	4658      	mov	r0, fp
    feae:	e7d0      	b.n	fe52 <isr+0xbc2>
			node_rx->hdr.handle = conn->handle;
    feb0:	8c33      	ldrh	r3, [r6, #32]
    feb2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    feb4:	230b      	movs	r3, #11
    feb6:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    feb8:	f899 3008 	ldrb.w	r3, [r9, #8]
    febc:	f013 0320 	ands.w	r3, r3, #32
    fec0:	d00e      	beq.n	fee0 <isr+0xc50>
					((u16_t)conn->access_addr[1] << 8) |
    fec2:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    fec4:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    fec6:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    fec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    fecc:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    fece:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    fed2:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    fed4:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    fed6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    feda:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    fedc:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    fede:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    fee0:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    fee2:	f7fb fb01 	bl	b4e8 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    fee6:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fee8:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    feec:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    feee:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    fef2:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    fef4:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fef6:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fefa:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fefc:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fefe:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ff02:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff04:	4629      	mov	r1, r5
    ff06:	9300      	str	r3, [sp, #0]
    ff08:	4628      	mov	r0, r5
    ff0a:	4b9d      	ldr	r3, [pc, #628]	; (10180 <__kernel_ram_size+0x180>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ff0c:	f8df a284 	ldr.w	sl, [pc, #644]	; 10194 <__kernel_ram_size+0x194>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ff10:	bf38      	it	cc
    ff12:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff14:	f7f8 fd90 	bl	8a38 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    ff18:	f240 6139 	movw	r1, #1593	; 0x639
    ff1c:	f7fb fc40 	bl	b7a0 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff20:	462b      	mov	r3, r5
    ff22:	2204      	movs	r2, #4
    ff24:	4629      	mov	r1, r5
    ff26:	9500      	str	r5, [sp, #0]
    ff28:	4628      	mov	r0, r5
    ff2a:	f7f8 fd85 	bl	8a38 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ff2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ff30:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff34:	68a3      	ldr	r3, [r4, #8]
    ff36:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    ff3a:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff3c:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    ff40:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    ff44:	9308      	str	r3, [sp, #32]
    ff46:	4b8f      	ldr	r3, [pc, #572]	; (10184 <__kernel_ram_size+0x184>)
    ff48:	9307      	str	r3, [sp, #28]
    ff4a:	4b8f      	ldr	r3, [pc, #572]	; (10188 <__kernel_ram_size+0x188>)
    ff4c:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff4e:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    ff50:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff52:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ff54:	4640      	mov	r0, r8
    ff56:	a386      	add	r3, pc, #536	; (adr r3, 10170 <__kernel_ram_size+0x170>)
    ff58:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff5c:	4649      	mov	r1, r9
		ticker_status =
    ff5e:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ff60:	f7f0 f958 	bl	214 <__aeabi_uldivmod>
    ff64:	4610      	mov	r0, r2
    ff66:	4619      	mov	r1, r3
    ff68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff6c:	2300      	movs	r3, #0
    ff6e:	f7f0 f951 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ff72:	a37f      	add	r3, pc, #508	; (adr r3, 10170 <__kernel_ram_size+0x170>)
    ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff78:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ff7a:	4649      	mov	r1, r9
    ff7c:	4640      	mov	r0, r8
    ff7e:	f7f0 f949 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    ff82:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ff84:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    ff86:	a37a      	add	r3, pc, #488	; (adr r3, 10170 <__kernel_ram_size+0x170>)
    ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff8c:	fba1 010a 	umull	r0, r1, r1, sl
    ff90:	f7f0 f940 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ff94:	3407      	adds	r4, #7
    ff96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    ff9a:	b2e4      	uxtb	r4, r4
    ff9c:	9000      	str	r0, [sp, #0]
    ff9e:	465b      	mov	r3, fp
    ffa0:	4622      	mov	r2, r4
    ffa2:	4629      	mov	r1, r5
    ffa4:	4628      	mov	r0, r5
    ffa6:	f7f8 fca9 	bl	88fc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ffaa:	f030 0302 	bics.w	r3, r0, #2
    ffae:	f43f aa19 	beq.w	f3e4 <isr+0x154>
    ffb2:	4b71      	ldr	r3, [pc, #452]	; (10178 <__kernel_ram_size+0x178>)
    ffb4:	9301      	str	r3, [sp, #4]
    ffb6:	9300      	str	r3, [sp, #0]
    ffb8:	4b70      	ldr	r3, [pc, #448]	; (1017c <__kernel_ram_size+0x17c>)
    ffba:	e514      	b.n	f9e6 <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ffbc:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ffc0:	4972      	ldr	r1, [pc, #456]	; (1018c <__kernel_ram_size+0x18c>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ffc2:	09d2      	lsrs	r2, r2, #7
    ffc4:	f362 1386 	bfi	r3, r2, #6, #1
    ffc8:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ffca:	2206      	movs	r2, #6
    ffcc:	e6a4      	b.n	fd18 <isr+0xa88>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ffce:	b9a0      	cbnz	r0, fffa <isr+0xd6a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    ffd0:	f899 3009 	ldrb.w	r3, [r9, #9]
    ffd4:	2b00      	cmp	r3, #0
    ffd6:	f43f ad26 	beq.w	fa26 <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    ffda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ffde:	2b00      	cmp	r3, #0
    ffe0:	f47f ad21 	bne.w	fa26 <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
    ffe4:	f1ba 0f00 	cmp.w	sl, #0
    ffe8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    ffec:	bf14      	ite	ne
    ffee:	4641      	movne	r1, r8
    fff0:	21ff      	moveq	r1, #255	; 0xff
    fff2:	4628      	mov	r0, r5
    fff4:	f7fb fb10 	bl	b618 <isr_rx_scan_report>
    fff8:	e515      	b.n	fa26 <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    fffa:	2801      	cmp	r0, #1
    fffc:	d00e      	beq.n	1001c <__kernel_ram_size+0x1c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    fffe:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
   10002:	f003 020b 	and.w	r2, r3, #11
   10006:	2a02      	cmp	r2, #2
   10008:	d0e2      	beq.n	ffd0 <isr+0xd40>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1000a:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   1000e:	2b07      	cmp	r3, #7
   10010:	d10d      	bne.n	1002e <__kernel_ram_size+0x2e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   10012:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10016:	0758      	lsls	r0, r3, #29
   10018:	d1da      	bne.n	ffd0 <isr+0xd40>
   1001a:	e504      	b.n	fa26 <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   1001c:	ab10      	add	r3, sp, #64	; 0x40
   1001e:	4642      	mov	r2, r8
   10020:	4631      	mov	r1, r6
   10022:	2000      	movs	r0, #0
   10024:	f7fb faac 	bl	b580 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   10028:	2800      	cmp	r0, #0
   1002a:	d1d1      	bne.n	ffd0 <isr+0xd40>
   1002c:	e7e7      	b.n	fffe <isr+0xd6e>
		   (_radio.scanner.phy)) ||
   1002e:	2b04      	cmp	r3, #4
   10030:	f47f acf9 	bne.w	fa26 <isr+0x796>
		   (_radio.scanner.state != 0) &&
   10034:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   10038:	0799      	lsls	r1, r3, #30
   1003a:	f57f acf4 	bpl.w	fa26 <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1003e:	f003 f823 	bl	13088 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   10042:	f899 3008 	ldrb.w	r3, [r9, #8]
   10046:	7802      	ldrb	r2, [r0, #0]
   10048:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1004c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   10050:	f47f ace9 	bne.w	fa26 <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
   10054:	2206      	movs	r2, #6
   10056:	f109 010a 	add.w	r1, r9, #10
   1005a:	3008      	adds	r0, #8
   1005c:	f7f1 fdb9 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
   10060:	2800      	cmp	r0, #0
   10062:	d0b5      	beq.n	ffd0 <isr+0xd40>
   10064:	e4df      	b.n	fa26 <isr+0x796>
	_radio.packet_counter++;
   10066:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1006a:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
   1006e:	3301      	adds	r3, #1
   10070:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
   10074:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   10076:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
   1007a:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1007e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10082:	2301      	movs	r3, #1
   10084:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   10088:	2f00      	cmp	r7, #0
   1008a:	f000 82d2 	beq.w	10632 <__kernel_ram_size+0x632>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   1008e:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   10092:	f898 1008 	ldrb.w	r1, [r8, #8]
   10096:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1009a:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1009e:	f003 0201 	and.w	r2, r3, #1
   100a2:	4291      	cmp	r1, r2
   100a4:	f000 819e 	beq.w	103e4 <__kernel_ram_size+0x3e4>
		_radio.conn_curr->sn++;
   100a8:	f082 0201 	eor.w	r2, r2, #1
   100ac:	f362 0300 	bfi	r3, r2, #0, #1
   100b0:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   100b4:	7ce3      	ldrb	r3, [r4, #19]
   100b6:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   100b8:	bf02      	ittt	eq
   100ba:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   100be:	f043 0301 	orreq.w	r3, r3, #1
   100c2:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   100c6:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   100ca:	061a      	lsls	r2, r3, #24
   100cc:	f100 8185 	bmi.w	103da <__kernel_ram_size+0x3da>
			node_tx = _radio.conn_curr->pkt_tx_head;
   100d0:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   100d4:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   100d8:	1d30      	adds	r0, r6, #4
   100da:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   100de:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   100e2:	f1b9 0f00 	cmp.w	r9, #0
   100e6:	f000 80ab 	beq.w	10240 <__kernel_ram_size+0x240>
				if (_radio.conn_curr->enc_tx) {
   100ea:	069b      	lsls	r3, r3, #26
   100ec:	d50b      	bpl.n	10106 <__kernel_ram_size+0x106>
					_radio.conn_curr->ccm_tx.counter++;
   100ee:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   100f2:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   100f6:	f11b 0201 	adds.w	r2, fp, #1
   100fa:	f14c 0300 	adc.w	r3, ip, #0
   100fe:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   10102:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   10106:	5c43      	ldrb	r3, [r0, r1]
   10108:	f003 0303 	and.w	r3, r3, #3
   1010c:	2b03      	cmp	r3, #3
   1010e:	f040 8097 	bne.w	10240 <__kernel_ram_size+0x240>
	switch (pdu_data_tx->llctrl.opcode) {
   10112:	f89a 3003 	ldrb.w	r3, [sl, #3]
   10116:	3b02      	subs	r3, #2
   10118:	2b16      	cmp	r3, #22
   1011a:	f200 8091 	bhi.w	10240 <__kernel_ram_size+0x240>
   1011e:	e8df f013 	tbh	[pc, r3, lsl #1]
   10122:	0017      	.short	0x0017
   10124:	00c50073 	.word	0x00c50073
   10128:	008f008f 	.word	0x008f008f
   1012c:	008f008f 	.word	0x008f008f
   10130:	0091008f 	.word	0x0091008f
   10134:	008f009c 	.word	0x008f009c
   10138:	008f00cc 	.word	0x008f00cc
   1013c:	008f008f 	.word	0x008f008f
   10140:	008f008f 	.word	0x008f008f
   10144:	00d6008f 	.word	0x00d6008f
   10148:	00ee008f 	.word	0x00ee008f
   1014c:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
   10150:	2303      	movs	r3, #3
   10152:	7523      	strb	r3, [r4, #20]
		radio_disable();
   10154:	f002 ff42 	bl	12fdc <radio_disable>
		LL_ASSERT(!radio_is_ready());
   10158:	f002 ff5e 	bl	13018 <radio_is_ready>
   1015c:	b1e0      	cbz	r0, 10198 <__kernel_ram_size+0x198>
   1015e:	4b06      	ldr	r3, [pc, #24]	; (10178 <__kernel_ram_size+0x178>)
   10160:	9301      	str	r3, [sp, #4]
   10162:	9300      	str	r3, [sp, #0]
   10164:	4b0a      	ldr	r3, [pc, #40]	; (10190 <__kernel_ram_size+0x190>)
   10166:	f7ff b8f1 	b.w	f34c <isr+0xbc>
   1016a:	bf00      	nop
   1016c:	f3af 8000 	nop.w
   10170:	1afd498d 	.word	0x1afd498d
   10174:	00000007 	.word	0x00000007
   10178:	000155c5 	.word	0x000155c5
   1017c:	000183bf 	.word	0x000183bf
   10180:	0000b7a1 	.word	0x0000b7a1
   10184:	0000b6fd 	.word	0x0000b6fd
   10188:	0000dba1 	.word	0x0000dba1
   1018c:	200009d4 	.word	0x200009d4
   10190:	000183cb 	.word	0x000183cb
   10194:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   10198:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   1019c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   101a0:	2913      	cmp	r1, #19
   101a2:	bf08      	it	eq
   101a4:	2116      	moveq	r1, #22
   101a6:	f7fb fee3 	bl	bf70 <terminate_ind_rx_enqueue>
		terminate = 1;
   101aa:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   101ac:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   101b0:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   101b4:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   101b6:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   101ba:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   101be:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   101c0:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   101c4:	d11e      	bne.n	10204 <__kernel_ram_size+0x204>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   101c6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   101ca:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   101ce:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   101d0:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   101d2:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   101d6:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   101da:	f040 80c9 	bne.w	10370 <__kernel_ram_size+0x370>
		if (node_tx) {
   101de:	b18e      	cbz	r6, 10204 <__kernel_ram_size+0x204>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   101e0:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   101e4:	f8d3 e000 	ldr.w	lr, [r3]
   101e8:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   101ec:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   101ee:	bf06      	itte	eq
   101f0:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   101f4:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   101f8:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   101fc:	49cd      	ldr	r1, [pc, #820]	; (10534 <__kernel_ram_size+0x534>)
   101fe:	4630      	mov	r0, r6
   10200:	f7f7 fd0d 	bl	7c1e <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   10204:	2600      	movs	r6, #0
   10206:	e0bc      	b.n	10382 <__kernel_ram_size+0x382>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   10208:	2208      	movs	r2, #8
   1020a:	f10a 010e 	add.w	r1, sl, #14
   1020e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10212:	f7f1 fcf3 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   10216:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1021a:	2204      	movs	r2, #4
   1021c:	f10a 0116 	add.w	r1, sl, #22
   10220:	f500 7089 	add.w	r0, r0, #274	; 0x112
   10224:	f7f1 fcea 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
   10228:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1022c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10230:	f042 0208 	orr.w	r2, r2, #8
   10234:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   10238:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   1023c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   10240:	2500      	movs	r5, #0
   10242:	e7b3      	b.n	101ac <__kernel_ram_size+0x1ac>
		_radio.conn_curr->pause_tx = 1;
   10244:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   10248:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   1024c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   10250:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   10254:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   10258:	e7f2      	b.n	10240 <__kernel_ram_size+0x240>
		if (_radio.role == ROLE_MASTER) {
   1025a:	f894 a013 	ldrb.w	sl, [r4, #19]
   1025e:	fa5f fa8a 	uxtb.w	sl, sl
   10262:	f1ba 0f04 	cmp.w	sl, #4
   10266:	d121      	bne.n	102ac <__kernel_ram_size+0x2ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10268:	7933      	ldrb	r3, [r6, #4]
   1026a:	f043 0303 	orr.w	r3, r3, #3
   1026e:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   10270:	2317      	movs	r3, #23
   10272:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   10274:	2303      	movs	r3, #3
   10276:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   10278:	2208      	movs	r2, #8
   1027a:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   1027e:	3004      	adds	r0, #4
   10280:	f7f1 fcbc 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   10284:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   10288:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   1028a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   1028e:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   10290:	f106 0112 	add.w	r1, r6, #18
   10294:	2208      	movs	r2, #8
   10296:	6860      	ldr	r0, [r4, #4]
   10298:	f003 feda 	bl	14050 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   1029c:	f106 011a 	add.w	r1, r6, #26
   102a0:	4652      	mov	r2, sl
   102a2:	6860      	ldr	r0, [r4, #4]
   102a4:	f003 fed4 	bl	14050 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
   102a8:	2600      	movs	r6, #0
   102aa:	e7c9      	b.n	10240 <__kernel_ram_size+0x240>
			_radio.conn_curr->pause_tx = 1;
   102ac:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   102b0:	f043 0308 	orr.w	r3, r3, #8
   102b4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   102b8:	e7c2      	b.n	10240 <__kernel_ram_size+0x240>
		_radio.conn_curr->pause_rx = 0;
   102ba:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   102be:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   102c2:	f36f 03c3 	bfc	r3, #3, #1
   102c6:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   102ca:	2300      	movs	r3, #0
   102cc:	e7c2      	b.n	10254 <__kernel_ram_size+0x254>
		if ((_radio.conn_curr->llcp_length.req !=
   102ce:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   102d2:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   102d6:	429a      	cmp	r2, r3
   102d8:	d0b2      	beq.n	10240 <__kernel_ram_size+0x240>
		    (_radio.conn_curr->llcp_length.state ==
   102da:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   102de:	f003 0203 	and.w	r2, r3, #3
   102e2:	2a01      	cmp	r2, #1
   102e4:	d1ac      	bne.n	10240 <__kernel_ram_size+0x240>
			_radio.conn_curr->pause_tx = 1;
   102e6:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   102ea:	f042 0208 	orr.w	r2, r2, #8
   102ee:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   102f2:	2202      	movs	r2, #2
   102f4:	f362 0301 	bfi	r3, r2, #0, #2
   102f8:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   102fc:	e7a0      	b.n	10240 <__kernel_ram_size+0x240>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   102fe:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   10302:	2202      	movs	r2, #2
   10304:	f362 0301 	bfi	r3, r2, #0, #2
   10308:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   1030c:	7ce3      	ldrb	r3, [r4, #19]
   1030e:	2b03      	cmp	r3, #3
   10310:	d196      	bne.n	10240 <__kernel_ram_size+0x240>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   10312:	2301      	movs	r3, #1
   10314:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   10318:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   1031c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10320:	2202      	movs	r2, #2
   10322:	2304      	movs	r3, #4
   10324:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   10328:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1032c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   10330:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   10334:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   10338:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1033c:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   10340:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10344:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   10348:	f003 0307 	and.w	r3, r3, #7
   1034c:	aa12      	add	r2, sp, #72	; 0x48
   1034e:	4413      	add	r3, r2
   10350:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   10354:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   10358:	f363 0202 	bfi	r2, r3, #0, #3
   1035c:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   10360:	e76e      	b.n	10240 <__kernel_ram_size+0x240>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   10362:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   10366:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1036a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1036e:	e7f3      	b.n	10358 <__kernel_ram_size+0x358>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   10370:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   10374:	4293      	cmp	r3, r2
   10376:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   10378:	bf08      	it	eq
   1037a:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1037e:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   10382:	b37d      	cbz	r5, 103e4 <__kernel_ram_size+0x3e4>
		connection_release(_radio.conn_curr);
   10384:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10388:	f7fb fc40 	bl	bc0c <connection_release>
		_radio.conn_curr = NULL;
   1038c:	2300      	movs	r3, #0
   1038e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
   10392:	f002 ffe9 	bl	13368 <radio_tmr_aa_restore>
   10396:	b918      	cbnz	r0, 103a0 <__kernel_ram_size+0x3a0>
		radio_tmr_aa_save(radio_tmr_aa_get());
   10398:	f002 ffda 	bl	13350 <radio_tmr_aa_get>
   1039c:	f002 ffde 	bl	1335c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   103a0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   103a4:	2b00      	cmp	r3, #0
   103a6:	f43f a81d 	beq.w	f3e4 <isr+0x154>
	if (tx_release) {
   103aa:	b11e      	cbz	r6, 103b4 <__kernel_ram_size+0x3b4>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   103ac:	4631      	mov	r1, r6
   103ae:	8c18      	ldrh	r0, [r3, #32]
   103b0:	f7fb fba2 	bl	baf8 <pdu_node_tx_release>
	if (rx_enqueue) {
   103b4:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   103b8:	2b00      	cmp	r3, #0
   103ba:	f43f a813 	beq.w	f3e4 <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
   103be:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   103c2:	8c18      	ldrh	r0, [r3, #32]
   103c4:	f7fb f980 	bl	b6c8 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   103c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   103cc:	8c1b      	ldrh	r3, [r3, #32]
   103ce:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   103d2:	f7fb f889 	bl	b4e8 <packet_rx_enqueue>
   103d6:	f7ff b805 	b.w	f3e4 <isr+0x154>
			_radio.conn_curr->empty = 0;
   103da:	f36f 13c7 	bfc	r3, #7, #1
   103de:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   103e2:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   103e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   103e8:	f898 2008 	ldrb.w	r2, [r8, #8]
   103ec:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   103f0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   103f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   103f8:	429a      	cmp	r2, r3
   103fa:	f040 80e9 	bne.w	105d0 <__kernel_ram_size+0x5d0>
	    (packet_rx_reserve_get(3) != 0) &&
   103fe:	2003      	movs	r0, #3
   10400:	f7fa fa08 	bl	a814 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   10404:	2800      	cmp	r0, #0
   10406:	f000 80e3 	beq.w	105d0 <__kernel_ram_size+0x5d0>
	    (packet_rx_reserve_get(3) != 0) &&
   1040a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   1040e:	b393      	cbz	r3, 10476 <__kernel_ram_size+0x476>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10410:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   10414:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
   10418:	4293      	cmp	r3, r2
   1041a:	d105      	bne.n	10428 <__kernel_ram_size+0x428>
	      (_radio.fc_req == _radio.fc_ack)) ||
   1041c:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10420:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
   10424:	4291      	cmp	r1, r2
   10426:	d026      	beq.n	10476 <__kernel_ram_size+0x476>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10428:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
   1042c:	4293      	cmp	r3, r2
   1042e:	f000 80cf 	beq.w	105d0 <__kernel_ram_size+0x5d0>
	      (_radio.fc_req != _radio.fc_ack) &&
   10432:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10436:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   1043a:	429a      	cmp	r2, r3
   1043c:	f000 80c8 	beq.w	105d0 <__kernel_ram_size+0x5d0>
		(((_radio.fc_req == 0) &&
   10440:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
   10444:	b933      	cbnz	r3, 10454 <__kernel_ram_size+0x454>
		   _radio.conn_curr->handle)) ||
   10446:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
   1044a:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   1044e:	8c1b      	ldrh	r3, [r3, #32]
   10450:	429a      	cmp	r2, r3
   10452:	d010      	beq.n	10476 <__kernel_ram_size+0x476>
		 ((_radio.fc_req != 0) &&
   10454:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
   10458:	2b00      	cmp	r3, #0
   1045a:	f000 80b9 	beq.w	105d0 <__kernel_ram_size+0x5d0>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1045e:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
   10462:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   10466:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   1046a:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
   1046e:	8c0b      	ldrh	r3, [r1, #32]
   10470:	429a      	cmp	r2, r3
   10472:	f040 80ad 	bne.w	105d0 <__kernel_ram_size+0x5d0>
		if (pdu_data_rx->len != 0) {
   10476:	f898 5009 	ldrb.w	r5, [r8, #9]
   1047a:	2d00      	cmp	r5, #0
   1047c:	f000 80b1 	beq.w	105e2 <__kernel_ram_size+0x5e2>
			if (_radio.conn_curr->enc_rx) {
   10480:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10484:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   10488:	f015 0510 	ands.w	r5, r5, #16
   1048c:	d00c      	beq.n	104a8 <__kernel_ram_size+0x4a8>
				done = radio_ccm_is_done();
   1048e:	f002 fff7 	bl	13480 <radio_ccm_is_done>
				LL_ASSERT(done);
   10492:	b940      	cbnz	r0, 104a6 <__kernel_ram_size+0x4a6>
   10494:	4b28      	ldr	r3, [pc, #160]	; (10538 <__kernel_ram_size+0x538>)
   10496:	9301      	str	r3, [sp, #4]
   10498:	9300      	str	r3, [sp, #0]
   1049a:	4a28      	ldr	r2, [pc, #160]	; (1053c <__kernel_ram_size+0x53c>)
   1049c:	4b28      	ldr	r3, [pc, #160]	; (10540 <__kernel_ram_size+0x540>)
   1049e:	4929      	ldr	r1, [pc, #164]	; (10544 <__kernel_ram_size+0x544>)
   104a0:	4829      	ldr	r0, [pc, #164]	; (10548 <__kernel_ram_size+0x548>)
   104a2:	f7ff baa3 	b.w	f9ec <isr+0x75c>
				ccm_rx_increment = 1;
   104a6:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   104a8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   104ac:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   104b0:	06d9      	lsls	r1, r3, #27
   104b2:	d42c      	bmi.n	1050e <__kernel_ram_size+0x50e>
			    (_radio.conn_curr->pause_rx &&
   104b4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   104b8:	f898 3008 	ldrb.w	r3, [r8, #8]
   104bc:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   104c0:	f012 0f04 	tst.w	r2, #4
   104c4:	d142      	bne.n	1054c <__kernel_ram_size+0x54c>
			_radio.conn_curr->appto_expire = 0;
   104c6:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   104c8:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   104cc:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   104d0:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   104d4:	d004      	beq.n	104e0 <__kernel_ram_size+0x4e0>
   104d6:	2b02      	cmp	r3, #2
   104d8:	d873      	bhi.n	105c2 <__kernel_ram_size+0x5c2>
				*rx_enqueue = 1;
   104da:	2301      	movs	r3, #1
   104dc:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   104e0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   104e4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   104e8:	f082 0202 	eor.w	r2, r2, #2
   104ec:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   104f0:	2d00      	cmp	r5, #0
   104f2:	d06d      	beq.n	105d0 <__kernel_ram_size+0x5d0>
				_radio.conn_curr->ccm_rx.counter++;
   104f4:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   104f8:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   104fc:	f119 0001 	adds.w	r0, r9, #1
   10500:	f14a 0100 	adc.w	r1, sl, #0
   10504:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   10508:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   1050c:	e060      	b.n	105d0 <__kernel_ram_size+0x5d0>
			     !radio_ccm_mic_is_valid()) ||
   1050e:	f002 ffd5 	bl	134bc <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   10512:	2800      	cmp	r0, #0
   10514:	d1ce      	bne.n	104b4 <__kernel_ram_size+0x4b4>
				_radio.state = STATE_CLOSE;
   10516:	2303      	movs	r3, #3
   10518:	7523      	strb	r3, [r4, #20]
				radio_disable();
   1051a:	f002 fd5f 	bl	12fdc <radio_disable>
				LL_ASSERT(!radio_is_ready());
   1051e:	f002 fd7b 	bl	13018 <radio_is_ready>
   10522:	4605      	mov	r5, r0
   10524:	2800      	cmp	r0, #0
   10526:	d040      	beq.n	105aa <__kernel_ram_size+0x5aa>
   10528:	4b03      	ldr	r3, [pc, #12]	; (10538 <__kernel_ram_size+0x538>)
   1052a:	9301      	str	r3, [sp, #4]
   1052c:	9300      	str	r3, [sp, #0]
   1052e:	4b04      	ldr	r3, [pc, #16]	; (10540 <__kernel_ram_size+0x540>)
   10530:	f7fe bf0c 	b.w	f34c <isr+0xbc>
   10534:	20000a4c 	.word	0x20000a4c
   10538:	000155c5 	.word	0x000155c5
   1053c:	0001699e 	.word	0x0001699e
   10540:	0001842f 	.word	0x0001842f
   10544:	000169ed 	.word	0x000169ed
   10548:	00018a87 	.word	0x00018a87
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1054c:	f003 0103 	and.w	r1, r3, #3
   10550:	2903      	cmp	r1, #3
   10552:	d1e0      	bne.n	10516 <__kernel_ram_size+0x516>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   10554:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   10558:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   1055c:	f1be 0f00 	cmp.w	lr, #0
   10560:	f002 0240 	and.w	r2, r2, #64	; 0x40
   10564:	db15      	blt.n	10592 <__kernel_ram_size+0x592>
	       (!conn->role &&
   10566:	b922      	cbnz	r2, 10572 <__kernel_ram_size+0x572>
		((!conn->refresh &&
   10568:	2902      	cmp	r1, #2
   1056a:	d0ac      	beq.n	104c6 <__kernel_ram_size+0x4c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1056c:	2911      	cmp	r1, #17
   1056e:	d8d2      	bhi.n	10516 <__kernel_ram_size+0x516>
   10570:	e009      	b.n	10586 <__kernel_ram_size+0x586>
		 (conn->refresh &&
   10572:	1e8a      	subs	r2, r1, #2
   10574:	b2d2      	uxtb	r2, r2
   10576:	2a09      	cmp	r2, #9
   10578:	d8f8      	bhi.n	1056c <__kernel_ram_size+0x56c>
   1057a:	f240 2e05 	movw	lr, #517	; 0x205
   1057e:	fa2e f202 	lsr.w	r2, lr, r2
   10582:	07d2      	lsls	r2, r2, #31
   10584:	d49f      	bmi.n	104c6 <__kernel_ram_size+0x4c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10586:	4aac      	ldr	r2, [pc, #688]	; (10838 <__kernel_ram_size+0x838>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10588:	fa22 f101 	lsr.w	r1, r2, r1
   1058c:	07ca      	lsls	r2, r1, #31
   1058e:	d5c2      	bpl.n	10516 <__kernel_ram_size+0x516>
   10590:	e799      	b.n	104c6 <__kernel_ram_size+0x4c6>
	       (conn->role &&
   10592:	b92a      	cbnz	r2, 105a0 <__kernel_ram_size+0x5a0>
		((!conn->refresh &&
   10594:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10596:	d096      	beq.n	104c6 <__kernel_ram_size+0x4c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10598:	2911      	cmp	r1, #17
   1059a:	d8bc      	bhi.n	10516 <__kernel_ram_size+0x516>
   1059c:	4aa7      	ldr	r2, [pc, #668]	; (1083c <__kernel_ram_size+0x83c>)
   1059e:	e7f3      	b.n	10588 <__kernel_ram_size+0x588>
		 (conn->refresh &&
   105a0:	1e8a      	subs	r2, r1, #2
   105a2:	2a01      	cmp	r2, #1
   105a4:	d98f      	bls.n	104c6 <__kernel_ram_size+0x4c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   105a6:	290b      	cmp	r1, #11
   105a8:	e7f5      	b.n	10596 <__kernel_ram_size+0x596>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   105aa:	213d      	movs	r1, #61	; 0x3d
   105ac:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   105b0:	f7fb fcde 	bl	bf70 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   105b4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   105b8:	f7fb fb28 	bl	bc0c <connection_release>
				_radio.conn_curr = NULL;
   105bc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   105c0:	e6e7      	b.n	10392 <__kernel_ram_size+0x392>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   105c2:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   105c6:	4640      	mov	r0, r8
   105c8:	f7fd fd42 	bl	e050 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   105cc:	2800      	cmp	r0, #0
   105ce:	d087      	beq.n	104e0 <__kernel_ram_size+0x4e0>
		_radio.conn_curr->supervision_expire = 0;
   105d0:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
   105d4:	2300      	movs	r3, #0
   105d6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
   105da:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   105dc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   105e0:	e03e      	b.n	10660 <__kernel_ram_size+0x660>
		} else if ((_radio.conn_curr->enc_rx) ||
   105e2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   105e6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   105ea:	f013 0f14 	tst.w	r3, #20
   105ee:	f43f af77 	beq.w	104e0 <__kernel_ram_size+0x4e0>
					    (conn->latency + 6)) ?
   105f2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   105f4:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   105f8:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   105fa:	4299      	cmp	r1, r3
   105fc:	bfc4      	itt	gt
   105fe:	1f8b      	subgt	r3, r1, #6
   10600:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   10602:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   10606:	bfcc      	ite	gt
   10608:	b29b      	uxthgt	r3, r3
   1060a:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   1060c:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
   1060e:	bf1e      	ittt	ne
   10610:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   10614:	2300      	movne	r3, #0
   10616:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   1061a:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   1061e:	2b00      	cmp	r3, #0
   10620:	f47f af5e 	bne.w	104e0 <__kernel_ram_size+0x4e0>
				conn->appto_expire = conn->appto_reload;
   10624:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   10628:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   1062c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
   10630:	e756      	b.n	104e0 <__kernel_ram_size+0x4e0>
		if (_radio.crc_expire == 0) {
   10632:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10636:	b913      	cbnz	r3, 1063e <__kernel_ram_size+0x63e>
			_radio.crc_expire = 2;
   10638:	2302      	movs	r3, #2
   1063a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
   1063e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   10642:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
   10646:	3b01      	subs	r3, #1
   10648:	b2db      	uxtb	r3, r3
   1064a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   1064e:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   10652:	fab3 f583 	clz	r5, r3
   10656:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   10658:	bb86      	cbnz	r6, 106bc <__kernel_ram_size+0x6bc>
			_radio.conn_curr->supervision_expire =
   1065a:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   1065c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10660:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10664:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10666:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   1066a:	f7fd fbb3 	bl	ddd4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1066e:	7d23      	ldrb	r3, [r4, #20]
   10670:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10672:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10676:	d010      	beq.n	1069a <__kernel_ram_size+0x69a>
   10678:	bb15      	cbnz	r5, 106c0 <__kernel_ram_size+0x6c0>
   1067a:	b137      	cbz	r7, 1068a <__kernel_ram_size+0x68a>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   1067c:	f898 3008 	ldrb.w	r3, [r8, #8]
   10680:	06d8      	lsls	r0, r3, #27
   10682:	d402      	bmi.n	1068a <__kernel_ram_size+0x68a>
			 (pdu_data_tx->len == 0)) ||
   10684:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   10686:	785b      	ldrb	r3, [r3, #1]
   10688:	b1d3      	cbz	r3, 106c0 <__kernel_ram_size+0x6c0>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   1068a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
   1068e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10692:	2b00      	cmp	r3, #0
   10694:	bf0c      	ite	eq
   10696:	2302      	moveq	r3, #2
   10698:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   1069a:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1069c:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   1069e:	d12d      	bne.n	106fc <__kernel_ram_size+0x6fc>
		if (_radio.role == ROLE_MASTER) {
   106a0:	7ce3      	ldrb	r3, [r4, #19]
   106a2:	2b04      	cmp	r3, #4
   106a4:	d10e      	bne.n	106c4 <__kernel_ram_size+0x6c4>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   106a6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   106aa:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   106ae:	f369 12c7 	bfi	r2, r9, #7, #1
   106b2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   106b6:	f002 fc91 	bl	12fdc <radio_disable>
   106ba:	e66a      	b.n	10392 <__kernel_ram_size+0x392>
	struct radio_pdu_node_tx *tx_release = NULL;
   106bc:	2600      	movs	r6, #0
   106be:	e7cf      	b.n	10660 <__kernel_ram_size+0x660>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   106c0:	2303      	movs	r3, #3
   106c2:	e7ea      	b.n	1069a <__kernel_ram_size+0x69a>
			radio_switch_complete_and_disable();
   106c4:	f002 fcfa 	bl	130bc <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   106c8:	9910      	ldr	r1, [sp, #64]	; 0x40
   106ca:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   106ce:	780b      	ldrb	r3, [r1, #0]
   106d0:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   106d4:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   106d8:	f3c2 0240 	ubfx	r2, r2, #1, #1
   106dc:	f362 0382 	bfi	r3, r2, #2, #1
   106e0:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   106e2:	f7fa fc21 	bl	af28 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   106e6:	f002 fc97 	bl	13018 <radio_is_ready>
   106ea:	2800      	cmp	r0, #0
   106ec:	f43f ae51 	beq.w	10392 <__kernel_ram_size+0x392>
   106f0:	4b53      	ldr	r3, [pc, #332]	; (10840 <__kernel_ram_size+0x840>)
   106f2:	9301      	str	r3, [sp, #4]
   106f4:	9300      	str	r3, [sp, #0]
   106f6:	4b53      	ldr	r3, [pc, #332]	; (10844 <__kernel_ram_size+0x844>)
   106f8:	f7fe be28 	b.w	f34c <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
   106fc:	2096      	movs	r0, #150	; 0x96
   106fe:	f002 fd63 	bl	131c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   10702:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10706:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   1070a:	f000 0007 	and.w	r0, r0, #7
   1070e:	f002 fcbf 	bl	13090 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   10712:	f002 fe35 	bl	13380 <radio_tmr_end_capture>
   10716:	e7d7      	b.n	106c8 <__kernel_ram_size+0x6c8>
		LL_ASSERT(0);
   10718:	4b49      	ldr	r3, [pc, #292]	; (10840 <__kernel_ram_size+0x840>)
   1071a:	9301      	str	r3, [sp, #4]
   1071c:	9300      	str	r3, [sp, #0]
   1071e:	4b4a      	ldr	r3, [pc, #296]	; (10848 <__kernel_ram_size+0x848>)
   10720:	f7fe bead 	b.w	f47e <isr+0x1ee>
	switch (_radio.role) {
   10724:	7ce2      	ldrb	r2, [r4, #19]
   10726:	2a04      	cmp	r2, #4
   10728:	f200 823a 	bhi.w	10ba0 <__kernel_ram_size+0xba0>
   1072c:	e8df f012 	tbh	[pc, r2, lsl #1]
   10730:	00050228 	.word	0x00050228
   10734:	00bf0058 	.word	0x00bf0058
   10738:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
   1073a:	2b03      	cmp	r3, #3
   1073c:	d109      	bne.n	10752 <__kernel_ram_size+0x752>
	    (_radio.advertiser.chan_map_current != 0)) {
   1073e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   10742:	0759      	lsls	r1, r3, #29
   10744:	d005      	beq.n	10752 <__kernel_ram_size+0x752>
		adv_setup();
   10746:	f7fb fb35 	bl	bdb4 <adv_setup>
		radio_tx_enable();
   1074a:	f002 fc41 	bl	12fd0 <radio_tx_enable>
   1074e:	f7fe be19 	b.w	f384 <isr+0xf4>
		radio_filter_disable();
   10752:	f002 fcfd 	bl	13150 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   10756:	7d23      	ldrb	r3, [r4, #20]
   10758:	2b03      	cmp	r3, #3
   1075a:	f040 808f 	bne.w	1087c <__kernel_ram_size+0x87c>
		    (!_radio.advertiser.is_hdcd)) {
   1075e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   10762:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   10766:	f040 8089 	bne.w	1087c <__kernel_ram_size+0x87c>
			entropy_nrf_get_entropy_isr(_radio.entropy,
   1076a:	2201      	movs	r2, #1
   1076c:	a910      	add	r1, sp, #64	; 0x40
   1076e:	6860      	ldr	r0, [r4, #4]
   10770:	f003 fc6e 	bl	14050 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
   10774:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   10778:	4834      	ldr	r0, [pc, #208]	; (1084c <__kernel_ram_size+0x84c>)
			random_delay %= 10;
   1077a:	230a      	movs	r3, #10
   1077c:	fbb1 f2f3 	udiv	r2, r1, r3
   10780:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
   10784:	3201      	adds	r2, #1
   10786:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
   10788:	b2d6      	uxtb	r6, r2
   1078a:	fba6 0100 	umull	r0, r1, r6, r0
   1078e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
   10790:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   10794:	fb03 1106 	mla	r1, r3, r6, r1
   10798:	a325      	add	r3, pc, #148	; (adr r3, 10830 <__kernel_ram_size+0x830>)
   1079a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1079e:	f7ef fd39 	bl	214 <__aeabi_uldivmod>
			ticker_status =
   107a2:	f640 734b 	movw	r3, #3915	; 0xf4b
   107a6:	9306      	str	r3, [sp, #24]
   107a8:	4b29      	ldr	r3, [pc, #164]	; (10850 <__kernel_ram_size+0x850>)
   107aa:	9305      	str	r3, [sp, #20]
   107ac:	9504      	str	r5, [sp, #16]
   107ae:	b283      	uxth	r3, r0
   107b0:	9503      	str	r5, [sp, #12]
   107b2:	9502      	str	r5, [sp, #8]
   107b4:	9501      	str	r5, [sp, #4]
   107b6:	9500      	str	r5, [sp, #0]
   107b8:	2205      	movs	r2, #5
   107ba:	4629      	mov	r1, r5
   107bc:	4628      	mov	r0, r5
   107be:	f7f8 f8ed 	bl	899c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   107c2:	f030 0302 	bics.w	r3, r0, #2
   107c6:	d059      	beq.n	1087c <__kernel_ram_size+0x87c>
   107c8:	7ca3      	ldrb	r3, [r4, #18]
   107ca:	2b05      	cmp	r3, #5
   107cc:	d056      	beq.n	1087c <__kernel_ram_size+0x87c>
   107ce:	4b1c      	ldr	r3, [pc, #112]	; (10840 <__kernel_ram_size+0x840>)
   107d0:	9301      	str	r3, [sp, #4]
   107d2:	9300      	str	r3, [sp, #0]
   107d4:	4a1f      	ldr	r2, [pc, #124]	; (10854 <__kernel_ram_size+0x854>)
   107d6:	4b20      	ldr	r3, [pc, #128]	; (10858 <__kernel_ram_size+0x858>)
   107d8:	4920      	ldr	r1, [pc, #128]	; (1085c <__kernel_ram_size+0x85c>)
   107da:	4821      	ldr	r0, [pc, #132]	; (10860 <__kernel_ram_size+0x860>)
   107dc:	f7ff b906 	b.w	f9ec <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
   107e0:	2b03      	cmp	r3, #3
   107e2:	d13f      	bne.n	10864 <__kernel_ram_size+0x864>
		radio_tmr_tifs_set(RADIO_TIFS);
   107e4:	2096      	movs	r0, #150	; 0x96
   107e6:	f002 fcef 	bl	131c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   107ea:	2300      	movs	r3, #0
   107ec:	4619      	mov	r1, r3
   107ee:	461a      	mov	r2, r3
   107f0:	4618      	mov	r0, r3
   107f2:	f002 fc59 	bl	130a8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   107f6:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   107fa:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   107fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   10802:	3008      	adds	r0, #8
   10804:	f002 fbc4 	bl	12f90 <radio_pkt_rx_set>
		radio_rssi_measure();
   10808:	f002 fc66 	bl	130d8 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   1080c:	f001 ff02 	bl	12614 <ctrl_rl_enabled>
   10810:	b138      	cbz	r0, 10822 <__kernel_ram_size+0x822>
			u8_t count, *irks = ctrl_irks_get(&count);
   10812:	a810      	add	r0, sp, #64	; 0x40
   10814:	f001 fc4e 	bl	120b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10818:	4601      	mov	r1, r0
   1081a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1081e:	f002 fe57 	bl	134d0 <radio_ar_configure>
		_radio.state = STATE_RX;
   10822:	2301      	movs	r3, #1
   10824:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   10826:	f002 fbcd 	bl	12fc4 <radio_rx_enable>
   1082a:	f7fe bdab 	b.w	f384 <isr+0xf4>
   1082e:	bf00      	nop
   10830:	1afd498d 	.word	0x1afd498d
   10834:	00000007 	.word	0x00000007
   10838:	00022060 	.word	0x00022060
   1083c:	00022040 	.word	0x00022040
   10840:	000155c5 	.word	0x000155c5
   10844:	0001843f 	.word	0x0001843f
   10848:	0001844b 	.word	0x0001844b
   1084c:	d4a51000 	.word	0xd4a51000
   10850:	0000b809 	.word	0x0000b809
   10854:	0001699e 	.word	0x0001699e
   10858:	0001845e 	.word	0x0001845e
   1085c:	000169ed 	.word	0x000169ed
   10860:	00018aad 	.word	0x00018aad
		radio_filter_disable();
   10864:	f002 fc74 	bl	13150 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   10868:	7d23      	ldrb	r3, [r4, #20]
   1086a:	2b05      	cmp	r3, #5
   1086c:	d106      	bne.n	1087c <__kernel_ram_size+0x87c>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1086e:	2300      	movs	r3, #0
   10870:	9300      	str	r3, [sp, #0]
   10872:	2204      	movs	r2, #4
   10874:	4619      	mov	r1, r3
   10876:	4618      	mov	r0, r3
   10878:	f7f8 f8de 	bl	8a38 <ticker_stop>
	_radio.role = ROLE_NONE;
   1087c:	2500      	movs	r5, #0
   1087e:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   10880:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   10882:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   10884:	f002 fd1e 	bl	132c4 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10888:	462a      	mov	r2, r5
   1088a:	4629      	mov	r1, r5
   1088c:	4628      	mov	r0, r5
   1088e:	4bb2      	ldr	r3, [pc, #712]	; (10b58 <__kernel_ram_size+0xb58>)
   10890:	f7f7 fa76 	bl	7d80 <mayfly_enqueue>
	LL_ASSERT(!retval);
   10894:	4605      	mov	r5, r0
   10896:	2800      	cmp	r0, #0
   10898:	f000 8188 	beq.w	10bac <__kernel_ram_size+0xbac>
   1089c:	4baf      	ldr	r3, [pc, #700]	; (10b5c <__kernel_ram_size+0xb5c>)
   1089e:	9301      	str	r3, [sp, #4]
   108a0:	9300      	str	r3, [sp, #0]
   108a2:	4aaf      	ldr	r2, [pc, #700]	; (10b60 <__kernel_ram_size+0xb60>)
   108a4:	4baf      	ldr	r3, [pc, #700]	; (10b64 <__kernel_ram_size+0xb64>)
   108a6:	49b0      	ldr	r1, [pc, #704]	; (10b68 <__kernel_ram_size+0xb68>)
   108a8:	48b0      	ldr	r0, [pc, #704]	; (10b6c <__kernel_ram_size+0xb6c>)
   108aa:	f7ff b89f 	b.w	f9ec <isr+0x75c>
	if (_radio.conn_curr == 0) {
   108ae:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   108b2:	2800      	cmp	r0, #0
   108b4:	d0e2      	beq.n	1087c <__kernel_ram_size+0x87c>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   108b6:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   108ba:	b181      	cbz	r1, 108de <__kernel_ram_size+0x8de>
   108bc:	7ce3      	ldrb	r3, [r4, #19]
   108be:	2b03      	cmp	r3, #3
   108c0:	d003      	beq.n	108ca <__kernel_ram_size+0x8ca>
   108c2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   108c6:	07da      	lsls	r2, r3, #31
   108c8:	d509      	bpl.n	108de <__kernel_ram_size+0x8de>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   108ca:	f7fb fb51 	bl	bf70 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   108ce:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   108d2:	f7fb f99b 	bl	bc0c <connection_release>
			_radio.conn_curr = NULL;
   108d6:	2300      	movs	r3, #0
   108d8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   108dc:	e7ce      	b.n	1087c <__kernel_ram_size+0x87c>
	latency_event = _radio.conn_curr->latency_event;
   108de:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   108e2:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   108e6:	f10b 0601 	add.w	r6, fp, #1
   108ea:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   108ec:	2f00      	cmp	r7, #0
   108ee:	f000 8084 	beq.w	109fa <__kernel_ram_size+0x9fa>
		if (_radio.role == ROLE_SLAVE) {
   108f2:	7ce3      	ldrb	r3, [r4, #19]
   108f4:	2b03      	cmp	r3, #3
   108f6:	d173      	bne.n	109e0 <__kernel_ram_size+0x9e0>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   108f8:	f002 fd36 	bl	13368 <radio_tmr_aa_restore>
   108fc:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   108fe:	f002 fd39 	bl	13374 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   10902:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   10906:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   1090a:	f003 0307 	and.w	r3, r3, #7
   1090e:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10910:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   10914:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   10916:	d052      	beq.n	109be <__kernel_ram_size+0x9be>
		return 40;
   10918:	2b04      	cmp	r3, #4
   1091a:	bf0c      	ite	eq
   1091c:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   10920:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10924:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10928:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   1092a:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1092c:	930a      	str	r3, [sp, #40]	; 0x28
   1092e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 10b7c <__kernel_ram_size+0xb7c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10932:	a387      	add	r3, pc, #540	; (adr r3, 10b50 <__kernel_ram_size+0xb50>)
   10934:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   10938:	d844      	bhi.n	109c4 <__kernel_ram_size+0x9c4>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1093a:	fba0 010a 	umull	r0, r1, r0, sl
   1093e:	f7ef fc69 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10944:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10946:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1094a:	a381      	add	r3, pc, #516	; (adr r3, 10b50 <__kernel_ram_size+0xb50>)
   1094c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10950:	fba0 010a 	umull	r0, r1, r0, sl
   10954:	f7ef fc5e 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   10958:	2300      	movs	r3, #0
   1095a:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   1095c:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   1095e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10962:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   10966:	b3ab      	cbz	r3, 109d4 <__kernel_ram_size+0x9d4>
				if (pdu_data_tx->len ||
   10968:	795b      	ldrb	r3, [r3, #5]
   1096a:	b913      	cbnz	r3, 10972 <__kernel_ram_size+0x972>
   1096c:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   10970:	b10b      	cbz	r3, 10976 <__kernel_ram_size+0x976>
					_radio.conn_curr->latency_event = 0;
   10972:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   10974:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   10976:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1097a:	2200      	movs	r2, #0
   1097c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   1097e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10982:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10986:	b1c3      	cbz	r3, 109ba <__kernel_ram_size+0x9ba>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10988:	429e      	cmp	r6, r3
   1098a:	f080 80b0 	bcs.w	10aee <__kernel_ram_size+0xaee>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1098e:	1b9b      	subs	r3, r3, r6
   10990:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   10992:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   10994:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10996:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   1099a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   1099c:	f240 80a9 	bls.w	10af2 <__kernel_ram_size+0xaf2>
			else if (_radio.role == ROLE_SLAVE) {
   109a0:	7ce3      	ldrb	r3, [r4, #19]
   109a2:	2b03      	cmp	r3, #3
   109a4:	d109      	bne.n	109ba <__kernel_ram_size+0x9ba>
				if (latency_event != 0) {
   109a6:	f1bb 0f00 	cmp.w	fp, #0
   109aa:	f040 80a2 	bne.w	10af2 <__kernel_ram_size+0xaf2>
					force = _radio.conn_curr->slave.force & 0x01;
   109ae:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   109b0:	087b      	lsrs	r3, r7, #1
					if (force) {
   109b2:	f017 0701 	ands.w	r7, r7, #1
   109b6:	d13d      	bne.n	10a34 <__kernel_ram_size+0xa34>
					_radio.conn_curr->slave.force >>= 1;
   109b8:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   109ba:	2700      	movs	r7, #0
   109bc:	e03d      	b.n	10a3a <__kernel_ram_size+0xa3a>
		return 24;
   109be:	f04f 0818 	mov.w	r8, #24
   109c2:	e7af      	b.n	10924 <__kernel_ram_size+0x924>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   109c4:	fba9 010a 	umull	r0, r1, r9, sl
   109c8:	f7ef fc24 	bl	214 <__aeabi_uldivmod>
   109cc:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   109ce:	f108 0030 	add.w	r0, r8, #48	; 0x30
   109d2:	e7ba      	b.n	1094a <__kernel_ram_size+0x94a>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   109d4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   109d8:	07db      	lsls	r3, r3, #31
   109da:	d5cc      	bpl.n	10976 <__kernel_ram_size+0x976>
				_radio.conn_curr->latency_event =
   109dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   109de:	e7c9      	b.n	10974 <__kernel_ram_size+0x974>
		} else if (reason_peer) {
   109e0:	b149      	cbz	r1, 109f6 <__kernel_ram_size+0x9f6>
			_radio.conn_curr->master.terminate_ack = 1;
   109e2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   109e6:	f043 0301 	orr.w	r3, r3, #1
   109ea:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   109ee:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   109f2:	4645      	mov	r5, r8
   109f4:	e7bf      	b.n	10976 <__kernel_ram_size+0x976>
	ticks_drift_minus = 0;
   109f6:	4688      	mov	r8, r1
   109f8:	e7fb      	b.n	109f2 <__kernel_ram_size+0x9f2>
	else if (_radio.conn_curr->connect_expire) {
   109fa:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   109fc:	b185      	cbz	r5, 10a20 <__kernel_ram_size+0xa20>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   109fe:	42ae      	cmp	r6, r5
   10a00:	d204      	bcs.n	10a0c <__kernel_ram_size+0xa0c>
			_radio.conn_curr->connect_expire -= elapsed_event;
   10a02:	1bad      	subs	r5, r5, r6
   10a04:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10a06:	463d      	mov	r5, r7
   10a08:	46a8      	mov	r8, r5
   10a0a:	e7b8      	b.n	1097e <__kernel_ram_size+0x97e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10a0c:	213e      	movs	r1, #62	; 0x3e
   10a0e:	f7fb faaf 	bl	bf70 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10a12:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10a16:	f7fb f8f9 	bl	bc0c <connection_release>
			_radio.conn_curr = NULL;
   10a1a:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   10a1e:	e72d      	b.n	1087c <__kernel_ram_size+0x87c>
		if (!_radio.conn_curr->supervision_expire) {
   10a20:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   10a24:	f1b8 0f00 	cmp.w	r8, #0
   10a28:	d1ee      	bne.n	10a08 <__kernel_ram_size+0xa08>
			_radio.conn_curr->supervision_expire =
   10a2a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   10a2c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10a30:	4645      	mov	r5, r8
   10a32:	e7a4      	b.n	1097e <__kernel_ram_size+0x97e>
						_radio.conn_curr->slave.force |=
   10a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10a38:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   10a3a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10a3e:	b123      	cbz	r3, 10a4a <__kernel_ram_size+0xa4a>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   10a40:	429e      	cmp	r6, r3
   10a42:	d258      	bcs.n	10af6 <__kernel_ram_size+0xaf6>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   10a44:	1b9b      	subs	r3, r3, r6
   10a46:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   10a4a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   10a4e:	b123      	cbz	r3, 10a5a <__kernel_ram_size+0xa5a>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   10a50:	429e      	cmp	r6, r3
   10a52:	d252      	bcs.n	10afa <__kernel_ram_size+0xafa>
			_radio.conn_curr->apto_expire -= elapsed_event;
   10a54:	1b9b      	subs	r3, r3, r6
   10a56:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   10a5a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   10a5e:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   10a62:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   10a66:	b123      	cbz	r3, 10a72 <__kernel_ram_size+0xa72>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10a68:	429e      	cmp	r6, r3
   10a6a:	d25c      	bcs.n	10b26 <__kernel_ram_size+0xb26>
			_radio.conn_curr->appto_expire -= elapsed_event;
   10a6c:	1b9e      	subs	r6, r3, r6
   10a6e:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10a72:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10a76:	428b      	cmp	r3, r1
   10a78:	d006      	beq.n	10a88 <__kernel_ram_size+0xa88>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   10a7a:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10a7e:	3b01      	subs	r3, #1
   10a80:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   10a82:	bf9c      	itt	ls
   10a84:	2300      	movls	r3, #0
   10a86:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10a88:	b917      	cbnz	r7, 10a90 <__kernel_ram_size+0xa90>
   10a8a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10a8c:	455b      	cmp	r3, fp
   10a8e:	d05c      	beq.n	10b4a <__kernel_ram_size+0xb4a>
		lazy = _radio.conn_curr->latency_event + 1;
   10a90:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10a92:	3301      	adds	r3, #1
   10a94:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10a96:	b935      	cbnz	r5, 10aa6 <__kernel_ram_size+0xaa6>
   10a98:	f1b8 0f00 	cmp.w	r8, #0
   10a9c:	d103      	bne.n	10aa6 <__kernel_ram_size+0xaa6>
   10a9e:	b913      	cbnz	r3, 10aa6 <__kernel_ram_size+0xaa6>
	    (lazy != 0) || (force != 0)) {
   10aa0:	2f00      	cmp	r7, #0
   10aa2:	f43f aeeb 	beq.w	1087c <__kernel_ram_size+0x87c>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10aa6:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   10aaa:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10aac:	3207      	adds	r2, #7
		ticker_status =
   10aae:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10ab0:	b2d6      	uxtb	r6, r2
		ticker_status =
   10ab2:	4a2f      	ldr	r2, [pc, #188]	; (10b70 <__kernel_ram_size+0xb70>)
   10ab4:	9205      	str	r2, [sp, #20]
   10ab6:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   10ab8:	9606      	str	r6, [sp, #24]
		ticker_status =
   10aba:	9704      	str	r7, [sp, #16]
   10abc:	9102      	str	r1, [sp, #8]
   10abe:	9101      	str	r1, [sp, #4]
   10ac0:	f8cd 8000 	str.w	r8, [sp]
   10ac4:	4632      	mov	r2, r6
   10ac6:	4608      	mov	r0, r1
   10ac8:	f7f7 ff68 	bl	899c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10acc:	f030 0302 	bics.w	r3, r0, #2
   10ad0:	f43f aed4 	beq.w	1087c <__kernel_ram_size+0x87c>
   10ad4:	7ca3      	ldrb	r3, [r4, #18]
   10ad6:	429e      	cmp	r6, r3
   10ad8:	f43f aed0 	beq.w	1087c <__kernel_ram_size+0x87c>
   10adc:	4b1f      	ldr	r3, [pc, #124]	; (10b5c <__kernel_ram_size+0xb5c>)
   10ade:	9301      	str	r3, [sp, #4]
   10ae0:	9300      	str	r3, [sp, #0]
   10ae2:	4a1f      	ldr	r2, [pc, #124]	; (10b60 <__kernel_ram_size+0xb60>)
   10ae4:	4b23      	ldr	r3, [pc, #140]	; (10b74 <__kernel_ram_size+0xb74>)
   10ae6:	4920      	ldr	r1, [pc, #128]	; (10b68 <__kernel_ram_size+0xb68>)
   10ae8:	4823      	ldr	r0, [pc, #140]	; (10b78 <__kernel_ram_size+0xb78>)
   10aea:	f7fe bf7f 	b.w	f9ec <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10aee:	2108      	movs	r1, #8
   10af0:	e6eb      	b.n	108ca <__kernel_ram_size+0x8ca>
				force = 1;
   10af2:	2701      	movs	r7, #1
   10af4:	e7a1      	b.n	10a3a <__kernel_ram_size+0xa3a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10af6:	2122      	movs	r1, #34	; 0x22
   10af8:	e6e7      	b.n	108ca <__kernel_ram_size+0x8ca>
			_radio.conn_curr->apto_expire = 0;
   10afa:	2300      	movs	r3, #0
   10afc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   10b00:	2002      	movs	r0, #2
   10b02:	f7f9 fe87 	bl	a814 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   10b06:	b928      	cbnz	r0, 10b14 <__kernel_ram_size+0xb14>
   10b08:	4b14      	ldr	r3, [pc, #80]	; (10b5c <__kernel_ram_size+0xb5c>)
   10b0a:	9301      	str	r3, [sp, #4]
   10b0c:	9300      	str	r3, [sp, #0]
   10b0e:	4b19      	ldr	r3, [pc, #100]	; (10b74 <__kernel_ram_size+0xb74>)
   10b10:	f7fe be36 	b.w	f780 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   10b14:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10b18:	8c1b      	ldrh	r3, [r3, #32]
   10b1a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10b1c:	230a      	movs	r3, #10
   10b1e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   10b20:	f7fa fce2 	bl	b4e8 <packet_rx_enqueue>
   10b24:	e799      	b.n	10a5a <__kernel_ram_size+0xa5a>
			_radio.conn_curr->appto_expire = 0;
   10b26:	2300      	movs	r3, #0
   10b28:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10b2c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   10b30:	2b00      	cmp	r3, #0
   10b32:	d19e      	bne.n	10a72 <__kernel_ram_size+0xa72>
   10b34:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10b38:	428b      	cmp	r3, r1
   10b3a:	d19e      	bne.n	10a7a <__kernel_ram_size+0xa7a>
				_radio.conn_curr->llcp_type = LLCP_PING;
   10b3c:	2307      	movs	r3, #7
   10b3e:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10b42:	1e4b      	subs	r3, r1, #1
   10b44:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   10b48:	e793      	b.n	10a72 <__kernel_ram_size+0xa72>
	lazy = 0;
   10b4a:	463b      	mov	r3, r7
   10b4c:	e7a3      	b.n	10a96 <__kernel_ram_size+0xa96>
   10b4e:	bf00      	nop
   10b50:	1afd498d 	.word	0x1afd498d
   10b54:	00000007 	.word	0x00000007
   10b58:	20003d78 	.word	0x20003d78
   10b5c:	000155c5 	.word	0x000155c5
   10b60:	0001699e 	.word	0x0001699e
   10b64:	0001852f 	.word	0x0001852f
   10b68:	000169ed 	.word	0x000169ed
   10b6c:	00018f5f 	.word	0x00018f5f
   10b70:	0000b851 	.word	0x0000b851
   10b74:	0001846c 	.word	0x0001846c
   10b78:	00018b1b 	.word	0x00018b1b
   10b7c:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10b80:	3b04      	subs	r3, #4
   10b82:	2b01      	cmp	r3, #1
   10b84:	d908      	bls.n	10b98 <__kernel_ram_size+0xb98>
   10b86:	4b12      	ldr	r3, [pc, #72]	; (10bd0 <__kernel_ram_size+0xbd0>)
   10b88:	9301      	str	r3, [sp, #4]
   10b8a:	9300      	str	r3, [sp, #0]
   10b8c:	4a11      	ldr	r2, [pc, #68]	; (10bd4 <__kernel_ram_size+0xbd4>)
   10b8e:	4b12      	ldr	r3, [pc, #72]	; (10bd8 <__kernel_ram_size+0xbd8>)
   10b90:	4912      	ldr	r1, [pc, #72]	; (10bdc <__kernel_ram_size+0xbdc>)
   10b92:	4813      	ldr	r0, [pc, #76]	; (10be0 <__kernel_ram_size+0xbe0>)
   10b94:	f7fe bf2a 	b.w	f9ec <isr+0x75c>
		_radio.state = STATE_NONE;
   10b98:	2300      	movs	r3, #0
   10b9a:	7523      	strb	r3, [r4, #20]
   10b9c:	f7fe bc22 	b.w	f3e4 <isr+0x154>
		LL_ASSERT(0);
   10ba0:	4b0b      	ldr	r3, [pc, #44]	; (10bd0 <__kernel_ram_size+0xbd0>)
   10ba2:	9301      	str	r3, [sp, #4]
   10ba4:	9300      	str	r3, [sp, #0]
   10ba6:	4b0c      	ldr	r3, [pc, #48]	; (10bd8 <__kernel_ram_size+0xbd8>)
   10ba8:	f7fe bc69 	b.w	f47e <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
   10bac:	6820      	ldr	r0, [r4, #0]
   10bae:	6843      	ldr	r3, [r0, #4]
   10bb0:	4629      	mov	r1, r5
   10bb2:	685b      	ldr	r3, [r3, #4]
   10bb4:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10bb6:	2201      	movs	r2, #1
   10bb8:	4611      	mov	r1, r2
   10bba:	4628      	mov	r0, r5
   10bbc:	f7f7 f8b8 	bl	7d30 <mayfly_enable>
   10bc0:	f7fe bc10 	b.w	f3e4 <isr+0x154>
		LL_ASSERT(0);
   10bc4:	4b02      	ldr	r3, [pc, #8]	; (10bd0 <__kernel_ram_size+0xbd0>)
   10bc6:	9301      	str	r3, [sp, #4]
   10bc8:	9300      	str	r3, [sp, #0]
   10bca:	4b06      	ldr	r3, [pc, #24]	; (10be4 <__kernel_ram_size+0xbe4>)
   10bcc:	f7fe bc57 	b.w	f47e <isr+0x1ee>
   10bd0:	000155c5 	.word	0x000155c5
   10bd4:	0001699e 	.word	0x0001699e
   10bd8:	0001847b 	.word	0x0001847b
   10bdc:	000169ed 	.word	0x000169ed
   10be0:	00018b91 	.word	0x00018b91
   10be4:	00018491 	.word	0x00018491

00010be8 <radio_init>:
{
   10be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   10bec:	4e3d      	ldr	r6, [pc, #244]	; (10ce4 <radio_init+0xfc>)
{
   10bee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10bf0:	f89d c01c 	ldrb.w	ip, [sp, #28]
   10bf4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   10bf8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   10bfc:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   10c00:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   10c02:	f44f 70aa 	mov.w	r0, #340	; 0x154
   10c06:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   10c0a:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   10c0e:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   10c12:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   10c14:	f10c 0401 	add.w	r4, ip, #1
   10c18:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   10c1a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   10c1c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   10c20:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   10c24:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   10c26:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10c28:	bf98      	it	ls
   10c2a:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   10c2e:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   10c32:	bf88      	it	hi
   10c34:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   10c38:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   10c3c:	bf8c      	ite	hi
   10c3e:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10c42:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   10c46:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   10c4a:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   10c4e:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   10c52:	bf8c      	ite	hi
   10c54:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10c58:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   10c5a:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   10c5e:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   10c62:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   10c66:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10c6a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   10c6e:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10c72:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   10c76:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10c7a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10c7c:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   10c7e:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10c82:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10c84:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   10c88:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10c8c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   10c90:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   10c92:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   10c96:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   10c9a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10c9e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   10ca2:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10ca6:	340a      	adds	r4, #10
   10ca8:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   10cac:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10cae:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   10cb0:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   10cb4:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   10cb8:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   10cba:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   10cbe:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10cc2:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   10cc6:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   10cca:	d003      	beq.n	10cd4 <radio_init+0xec>
		return (retcode + mem_size);
   10ccc:	442c      	add	r4, r5
}
   10cce:	4620      	mov	r0, r4
   10cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   10cd4:	2301      	movs	r3, #1
   10cd6:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   10cda:	f7f9 fe5f 	bl	a99c <common_init>
	radio_setup();
   10cde:	f002 f8a7 	bl	12e30 <radio_setup>
	return retcode;
   10ce2:	e7f4      	b.n	10cce <radio_init+0xe6>
   10ce4:	200008f0 	.word	0x200008f0

00010ce8 <ll_reset>:
{
   10ce8:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   10cea:	2103      	movs	r1, #3
   10cec:	2005      	movs	r0, #5
   10cee:	f7f9 ff3f 	bl	ab70 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   10cf2:	2104      	movs	r1, #4
   10cf4:	2006      	movs	r0, #6
   10cf6:	f7f9 ff3b 	bl	ab70 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   10cfa:	4c22      	ldr	r4, [pc, #136]	; (10d84 <ll_reset+0x9c>)
   10cfc:	2500      	movs	r5, #0
   10cfe:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   10d02:	b2ab      	uxth	r3, r5
   10d04:	429a      	cmp	r2, r3
   10d06:	f105 0501 	add.w	r5, r5, #1
   10d0a:	d834      	bhi.n	10d76 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   10d0c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10d10:	f36f 13c7 	bfc	r3, #7, #1
   10d14:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   10d18:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   10d1c:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   10d1e:	f360 0300 	bfi	r3, r0, #0, #1
   10d22:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10d26:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10d28:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   10d2c:	fbb3 f3f2 	udiv	r3, r3, r2
   10d30:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10d34:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   10d38:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10d3c:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   10d3e:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   10d42:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10d46:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   10d4a:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   10d4e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   10d52:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10d56:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   10d5a:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   10d5e:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   10d62:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   10d66:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   10d6a:	f001 fee1 	bl	12b30 <ll_filter_reset>
}
   10d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   10d72:	f7f9 be13 	b.w	a99c <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   10d76:	1da8      	adds	r0, r5, #6
   10d78:	21ff      	movs	r1, #255	; 0xff
   10d7a:	b2c0      	uxtb	r0, r0
   10d7c:	f7f9 fef8 	bl	ab70 <role_disable>
   10d80:	e7bd      	b.n	10cfe <ll_reset+0x16>
   10d82:	bf00      	nop
   10d84:	200008f0 	.word	0x200008f0

00010d88 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   10d88:	4b02      	ldr	r3, [pc, #8]	; (10d94 <ll_adv_is_enabled+0xc>)
   10d8a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   10d8e:	09c0      	lsrs	r0, r0, #7
   10d90:	4770      	bx	lr
   10d92:	bf00      	nop
   10d94:	200008f0 	.word	0x200008f0

00010d98 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   10d98:	4b04      	ldr	r3, [pc, #16]	; (10dac <radio_adv_filter_pol_get+0x14>)
   10d9a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   10d9e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   10da0:	bfba      	itte	lt
   10da2:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   10da6:	0980      	lsrlt	r0, r0, #6
   10da8:	2000      	movge	r0, #0
}
   10daa:	4770      	bx	lr
   10dac:	200008f0 	.word	0x200008f0

00010db0 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10db0:	4a09      	ldr	r2, [pc, #36]	; (10dd8 <ll_scan_is_enabled+0x28>)
   10db2:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   10db6:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10dba:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10dbe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10dc2:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10dc4:	f003 0301 	and.w	r3, r3, #1
   10dc8:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   10dcc:	bf14      	ite	ne
   10dce:	2004      	movne	r0, #4
   10dd0:	2000      	moveq	r0, #0
}
   10dd2:	4318      	orrs	r0, r3
   10dd4:	4770      	bx	lr
   10dd6:	bf00      	nop
   10dd8:	200008f0 	.word	0x200008f0

00010ddc <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   10ddc:	4b05      	ldr	r3, [pc, #20]	; (10df4 <radio_scan_filter_pol_get+0x18>)
   10dde:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   10de2:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   10de6:	bf1c      	itt	ne
   10de8:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   10dec:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   10df0:	4770      	bx	lr
   10df2:	bf00      	nop
   10df4:	200008f0 	.word	0x200008f0

00010df8 <radio_connect_enable>:
{
   10df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   10dfc:	f8df 8384 	ldr.w	r8, [pc, #900]	; 11184 <radio_connect_enable+0x38c>
{
   10e00:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   10e02:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   10e06:	9303      	str	r3, [sp, #12]
   10e08:	4683      	mov	fp, r0
   10e0a:	468a      	mov	sl, r1
   10e0c:	4691      	mov	r9, r2
   10e0e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   10e10:	2e00      	cmp	r6, #0
   10e12:	f040 819c 	bne.w	1114e <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   10e16:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   10e1a:	f7f6 fee6 	bl	7bea <mem_acquire>
	if (!link) {
   10e1e:	4607      	mov	r7, r0
   10e20:	b150      	cbz	r0, 10e38 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   10e22:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   10e26:	f7f6 fee0 	bl	7bea <mem_acquire>
	if (!conn) {
   10e2a:	4604      	mov	r4, r0
   10e2c:	b930      	cbnz	r0, 10e3c <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   10e2e:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   10e32:	4638      	mov	r0, r7
   10e34:	f7f6 fef3 	bl	7c1e <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10e38:	2007      	movs	r0, #7
   10e3a:	e15c      	b.n	110f6 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   10e3c:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   10e40:	f36b 1386 	bfi	r3, fp, #6, #1
   10e44:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   10e48:	2206      	movs	r2, #6
   10e4a:	4651      	mov	r1, sl
   10e4c:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   10e50:	f7f0 fed4 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
   10e54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10e58:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10e5c:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   10e5e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   10e62:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10e66:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   10e68:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10e6c:	f002 f89c 	bl	12fa8 <radio_tx_ready_delay_get>
   10e70:	49bb      	ldr	r1, [pc, #748]	; (11160 <radio_connect_enable+0x368>)
   10e72:	f200 4052 	addw	r0, r0, #1106	; 0x452
   10e76:	a3b8      	add	r3, pc, #736	; (adr r3, 11158 <radio_connect_enable+0x360>)
   10e78:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e7c:	fba0 0101 	umull	r0, r1, r0, r1
   10e80:	f7ef f9c8 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   10e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10e88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10e8c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   10e90:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10e92:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 11188 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   10e96:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   10e9a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   10e9e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   10ea0:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   10ea4:	2104      	movs	r1, #4
   10ea6:	a805      	add	r0, sp, #20
   10ea8:	f7f7 fed6 	bl	8c58 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   10eac:	f8dd c014 	ldr.w	ip, [sp, #20]
   10eb0:	2000      	movs	r0, #0
   10eb2:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   10eb6:	231f      	movs	r3, #31
	transitions = 0;
   10eb8:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   10eba:	2101      	movs	r1, #1
	while (bit_idx--) {
   10ebc:	3b01      	subs	r3, #1
   10ebe:	b2db      	uxtb	r3, r3
   10ec0:	2bff      	cmp	r3, #255	; 0xff
   10ec2:	d103      	bne.n	10ecc <radio_connect_enable+0xd4>
   10ec4:	b3d0      	cbz	r0, 10f3c <radio_connect_enable+0x144>
   10ec6:	f8cd c014 	str.w	ip, [sp, #20]
   10eca:	e037      	b.n	10f3c <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   10ecc:	fa2c fe03 	lsr.w	lr, ip, r3
   10ed0:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   10ed4:	45d6      	cmp	lr, sl
   10ed6:	d11a      	bne.n	10f0e <radio_connect_enable+0x116>
			consecutive_cnt++;
   10ed8:	3101      	adds	r1, #1
   10eda:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   10edc:	2906      	cmp	r1, #6
   10ede:	d807      	bhi.n	10ef0 <radio_connect_enable+0xf8>
   10ee0:	2b1b      	cmp	r3, #27
   10ee2:	d81a      	bhi.n	10f1a <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   10ee4:	b122      	cbz	r2, 10ef0 <radio_connect_enable+0xf8>
   10ee6:	2b1b      	cmp	r3, #27
   10ee8:	d017      	beq.n	10f1a <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   10eea:	2a01      	cmp	r2, #1
   10eec:	d815      	bhi.n	10f1a <radio_connect_enable+0x122>
   10eee:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   10ef0:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   10ef4:	f1be 0f00 	cmp.w	lr, #0
   10ef8:	f000 8100 	beq.w	110fc <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   10efc:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   10f00:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   10f04:	3201      	adds	r2, #1
   10f06:	2001      	movs	r0, #1
   10f08:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   10f0a:	4601      	mov	r1, r0
   10f0c:	e005      	b.n	10f1a <radio_connect_enable+0x122>
			transitions++;
   10f0e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   10f10:	2b1b      	cmp	r3, #27
			transitions++;
   10f12:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   10f14:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   10f18:	d9e5      	bls.n	10ee6 <radio_connect_enable+0xee>
		if (transitions > 24) {
   10f1a:	2a18      	cmp	r2, #24
   10f1c:	f240 80f6 	bls.w	1110c <radio_connect_enable+0x314>
   10f20:	b108      	cbz	r0, 10f26 <radio_connect_enable+0x12e>
   10f22:	f8cd c014 	str.w	ip, [sp, #20]
   10f26:	3301      	adds	r3, #1
   10f28:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   10f2a:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   10f2e:	f1be 0f00 	cmp.w	lr, #0
   10f32:	f000 80e8 	beq.w	11106 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   10f36:	425b      	negs	r3, r3
   10f38:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   10f3a:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10f3c:	9b05      	ldr	r3, [sp, #20]
   10f3e:	a806      	add	r0, sp, #24
   10f40:	ea83 0308 	eor.w	r3, r3, r8
   10f44:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   10f48:	2104      	movs	r1, #4
   10f4a:	f7f6 fff9 	bl	7f40 <util_ones_count_get>
   10f4e:	2801      	cmp	r0, #1
   10f50:	f240 80e3 	bls.w	1111a <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10f54:	9b05      	ldr	r3, [sp, #20]
   10f56:	b29a      	uxth	r2, r3
   10f58:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   10f5c:	f000 80d8 	beq.w	11110 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10f60:	2204      	movs	r2, #4
   10f62:	a905      	add	r1, sp, #20
   10f64:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   10f68:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10f6a:	f7f0 fe47 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   10f6e:	2103      	movs	r1, #3
   10f70:	f104 0014 	add.w	r0, r4, #20
   10f74:	f7f7 fe70 	bl	8c58 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   10f78:	2205      	movs	r2, #5
   10f7a:	497a      	ldr	r1, [pc, #488]	; (11164 <radio_connect_enable+0x36c>)
   10f7c:	f104 0017 	add.w	r0, r4, #23
   10f80:	f7f0 fe3c 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   10f84:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10f88:	7f63      	ldrb	r3, [r4, #29]
   10f8a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   10f8e:	f36f 1386 	bfc	r3, #6, #1
   10f92:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   10f94:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   10f96:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10f98:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   10f9a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   10f9c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10fa0:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   10fa4:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10fa8:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10faa:	211b      	movs	r1, #27
   10fac:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10fae:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10fb0:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   10fb4:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10fb6:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   10fba:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10fbe:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10fc0:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   10fc2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   10fc6:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10fc8:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   10fcc:	2601      	movs	r6, #1
   10fce:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   10fd2:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   10fd6:	f363 11c7 	bfi	r1, r3, #7, #1
   10fda:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   10fde:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   10fe2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   10fe6:	f366 0102 	bfi	r1, r6, #0, #3
   10fea:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   10fee:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   10ff2:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   10ff4:	b2c9      	uxtb	r1, r1
   10ff6:	f36c 01c5 	bfi	r1, ip, #3, #3
   10ffa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   10ffe:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   11002:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   11004:	f366 0102 	bfi	r1, r6, #0, #3
   11008:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   1100c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   1100e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   11010:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   11014:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   11016:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   11018:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   1101c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   11020:	f363 0100 	bfi	r1, r3, #0, #1
   11024:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   11028:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1102c:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   11030:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   11034:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   11038:	1e56      	subs	r6, r2, #1
   1103a:	f242 7e10 	movw	lr, #10000	; 0x2710
   1103e:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   11042:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   11046:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1104a:	4b47      	ldr	r3, [pc, #284]	; (11168 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   1104c:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1104e:	4947      	ldr	r1, [pc, #284]	; (1116c <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11050:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11052:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11054:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11058:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1105c:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1105e:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11062:	1d81      	adds	r1, r0, #6
   11064:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11066:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1106a:	dc6a      	bgt.n	11142 <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   1106c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11070:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   11074:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   11076:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1107a:	f360 0341 	bfi	r3, r0, #1, #1
   1107e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   11082:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   11086:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   1108a:	f360 1304 	bfi	r3, r0, #4, #1
   1108e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   11092:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   11096:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   1109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1109e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   110a2:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   110a6:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   110aa:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   110ae:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   110b2:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   110b6:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   110ba:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   110be:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   110c2:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   110c6:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   110ca:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   110ce:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   110d2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   110d6:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   110da:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   110de:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   110e2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   110e6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   110ea:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   110ee:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   110f2:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   110f6:	b007      	add	sp, #28
   110f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   110fc:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   11100:	f04f 0e01 	mov.w	lr, #1
   11104:	e6fe      	b.n	10f04 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   11106:	3b01      	subs	r3, #1
   11108:	4313      	orrs	r3, r2
   1110a:	e716      	b.n	10f3a <radio_connect_enable+0x142>
		if (transitions > 24) {
   1110c:	46f2      	mov	sl, lr
   1110e:	e6d5      	b.n	10ebc <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   11110:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   11112:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   11116:	f47f af23 	bne.w	10f60 <radio_connect_enable+0x168>
   1111a:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   1111c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   11120:	f47f aec0 	bne.w	10ea4 <radio_connect_enable+0xac>
   11124:	4b12      	ldr	r3, [pc, #72]	; (11170 <radio_connect_enable+0x378>)
   11126:	9301      	str	r3, [sp, #4]
   11128:	9300      	str	r3, [sp, #0]
   1112a:	4a12      	ldr	r2, [pc, #72]	; (11174 <radio_connect_enable+0x37c>)
   1112c:	4b12      	ldr	r3, [pc, #72]	; (11178 <radio_connect_enable+0x380>)
   1112e:	4913      	ldr	r1, [pc, #76]	; (1117c <radio_connect_enable+0x384>)
   11130:	4813      	ldr	r0, [pc, #76]	; (11180 <radio_connect_enable+0x388>)
   11132:	f7ef ff2b 	bl	f8c <printk>
   11136:	4040      	eors	r0, r0
   11138:	f380 8811 	msr	BASEPRI, r0
   1113c:	f04f 0004 	mov.w	r0, #4
   11140:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11142:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   11146:	33fa      	adds	r3, #250	; 0xfa
   11148:	441a      	add	r2, r3
   1114a:	b292      	uxth	r2, r2
   1114c:	e78e      	b.n	1106c <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1114e:	200c      	movs	r0, #12
   11150:	e7d1      	b.n	110f6 <radio_connect_enable+0x2fe>
   11152:	bf00      	nop
   11154:	f3af 8000 	nop.w
   11158:	1afd498d 	.word	0x1afd498d
   1115c:	00000007 	.word	0x00000007
   11160:	3b9aca00 	.word	0x3b9aca00
   11164:	20000a0a 	.word	0x20000a0a
   11168:	01c9c37f 	.word	0x01c9c37f
   1116c:	026259ff 	.word	0x026259ff
   11170:	000155c5 	.word	0x000155c5
   11174:	0001699e 	.word	0x0001699e
   11178:	0001861b 	.word	0x0001861b
   1117c:	000169ed 	.word	0x000169ed
   11180:	00019074 	.word	0x00019074
   11184:	200008f0 	.word	0x200008f0
   11188:	8e89bed6 	.word	0x8e89bed6

0001118c <ll_conn_update>:
{
   1118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11190:	460c      	mov	r4, r1
   11192:	4690      	mov	r8, r2
   11194:	461d      	mov	r5, r3
   11196:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1119a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   1119e:	f7f9 fcd1 	bl	ab44 <connection_get>
	if (!conn) {
   111a2:	b330      	cbz	r0, 111f2 <ll_conn_update+0x66>
	if (!cmd) {
   111a4:	2c00      	cmp	r4, #0
   111a6:	d14a      	bne.n	1123e <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   111a8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   111ac:	06d9      	lsls	r1, r3, #27
   111ae:	d407      	bmi.n	111c0 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   111b0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   111b4:	069a      	lsls	r2, r3, #26
   111b6:	d541      	bpl.n	1123c <ll_conn_update+0xb0>
		     (conn->llcp_features &
   111b8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   111bc:	079b      	lsls	r3, r3, #30
   111be:	d43d      	bmi.n	1123c <ll_conn_update+0xb0>
		} else if (conn->role) {
   111c0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   111c4:	2b00      	cmp	r3, #0
   111c6:	da17      	bge.n	111f8 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   111c8:	201a      	movs	r0, #26
   111ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   111ce:	428b      	cmp	r3, r1
   111d0:	d00f      	beq.n	111f2 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   111d2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   111d6:	f003 0207 	and.w	r2, r3, #7
   111da:	2a03      	cmp	r2, #3
   111dc:	d109      	bne.n	111f2 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   111de:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   111e2:	b2db      	uxtb	r3, r3
   111e4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   111e8:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   111ec:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   111f0:	e021      	b.n	11236 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   111f2:	200c      	movs	r0, #12
   111f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   111f8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   111fc:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   11200:	429a      	cmp	r2, r3
   11202:	d1f6      	bne.n	111f2 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11204:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   11208:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   1120c:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   1120e:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11210:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   11214:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   11218:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   1121a:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1121e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   11222:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   11226:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   1122a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1122e:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   11232:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   11236:	2000      	movs	r0, #0
   11238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   1123c:	2401      	movs	r4, #1
		cmd--;
   1123e:	3c01      	subs	r4, #1
		if (cmd) {
   11240:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   11244:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   11248:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   1124c:	d1bf      	bne.n	111ce <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   1124e:	4299      	cmp	r1, r3
   11250:	d1cf      	bne.n	111f2 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   11252:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   11256:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   1125a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1125e:	b2db      	uxtb	r3, r3
   11260:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   11264:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   11266:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   1126a:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   1126e:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   11272:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   11276:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   1127a:	e7dc      	b.n	11236 <ll_conn_update+0xaa>

0001127c <ll_chm_update>:
{
   1127c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   11280:	4c1e      	ldr	r4, [pc, #120]	; (112fc <ll_chm_update+0x80>)
   11282:	4601      	mov	r1, r0
   11284:	2205      	movs	r2, #5
{
   11286:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   11288:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1128c:	f7f0 fcb6 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   11290:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11294:	2105      	movs	r1, #5
   11296:	f7f6 fe53 	bl	7f40 <util_ones_count_get>
	_radio.data_chan_count =
   1129a:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   1129e:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   112a2:	3c01      	subs	r4, #1
   112a4:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   112a6:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   112a8:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   112ac:	2cff      	cmp	r4, #255	; 0xff
   112ae:	d102      	bne.n	112b6 <ll_chm_update+0x3a>
	return 0;
   112b0:	2000      	movs	r0, #0
   112b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   112b6:	4620      	mov	r0, r4
   112b8:	f7f9 fc44 	bl	ab44 <connection_get>
		if (!conn || conn->role) {
   112bc:	4606      	mov	r6, r0
   112be:	b1b8      	cbz	r0, 112f0 <ll_chm_update+0x74>
   112c0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   112c4:	2b00      	cmp	r3, #0
   112c6:	db13      	blt.n	112f0 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   112c8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   112cc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   112d0:	429a      	cmp	r2, r3
   112d2:	d110      	bne.n	112f6 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   112d4:	2205      	movs	r2, #5
   112d6:	4629      	mov	r1, r5
   112d8:	3079      	adds	r0, #121	; 0x79
   112da:	f7f0 fc8f 	bl	1bfc <memcpy>
		conn->llcp_req++;
   112de:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   112e2:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   112e6:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   112e8:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   112ec:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   112f0:	3c01      	subs	r4, #1
   112f2:	b2e4      	uxtb	r4, r4
   112f4:	e7da      	b.n	112ac <ll_chm_update+0x30>
			return 1;
   112f6:	2001      	movs	r0, #1
}
   112f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112fc:	200008f0 	.word	0x200008f0

00011300 <ll_chm_get>:
{
   11300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11302:	460d      	mov	r5, r1
	conn = connection_get(handle);
   11304:	f7f9 fc1e 	bl	ab44 <connection_get>
	if (!conn) {
   11308:	4604      	mov	r4, r0
   1130a:	b160      	cbz	r0, 11326 <ll_chm_get+0x26>
		conn->chm_update = 0;
   1130c:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1130e:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   11312:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   11314:	2205      	movs	r2, #5
   11316:	4631      	mov	r1, r6
   11318:	4628      	mov	r0, r5
   1131a:	f7f0 fc6f 	bl	1bfc <memcpy>
	} while (conn->chm_update);
   1131e:	7f20      	ldrb	r0, [r4, #28]
   11320:	2800      	cmp	r0, #0
   11322:	d1f6      	bne.n	11312 <ll_chm_get+0x12>
   11324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   11326:	2001      	movs	r0, #1
}
   11328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001132a <ll_feature_req_send>:
{
   1132a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1132c:	f7f9 fc0a 	bl	ab44 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11330:	b168      	cbz	r0, 1134e <ll_feature_req_send+0x24>
   11332:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11336:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1133a:	4293      	cmp	r3, r2
   1133c:	d107      	bne.n	1134e <ll_feature_req_send+0x24>
	conn->llcp_req++;
   1133e:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   11340:	2204      	movs	r2, #4
	conn->llcp_req++;
   11342:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   11346:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   1134a:	2000      	movs	r0, #0
   1134c:	bd08      	pop	{r3, pc}
		return 1;
   1134e:	2001      	movs	r0, #1
}
   11350:	bd08      	pop	{r3, pc}

00011352 <ll_version_ind_send>:
{
   11352:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   11354:	f7f9 fbf6 	bl	ab44 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11358:	b168      	cbz	r0, 11376 <ll_version_ind_send+0x24>
   1135a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1135e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11362:	4293      	cmp	r3, r2
   11364:	d107      	bne.n	11376 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   11366:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   11368:	2205      	movs	r2, #5
	conn->llcp_req++;
   1136a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1136e:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   11372:	2000      	movs	r0, #0
   11374:	bd08      	pop	{r3, pc}
		return 1;
   11376:	2001      	movs	r0, #1
}
   11378:	bd08      	pop	{r3, pc}

0001137a <ll_terminate_ind_send>:
{
   1137a:	b510      	push	{r4, lr}
   1137c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1137e:	f7f9 fbe1 	bl	ab44 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   11382:	b160      	cbz	r0, 1139e <ll_terminate_ind_send+0x24>
   11384:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   11388:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   1138c:	4293      	cmp	r3, r2
   1138e:	d106      	bne.n	1139e <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   11390:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   11392:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   11396:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1139a:	2000      	movs	r0, #0
   1139c:	bd10      	pop	{r4, pc}
		return 1;
   1139e:	2001      	movs	r0, #1
}
   113a0:	bd10      	pop	{r4, pc}

000113a2 <ll_tx_pwr_lvl_get>:
{
   113a2:	b510      	push	{r4, lr}
   113a4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   113a6:	f7f9 fbcd 	bl	ab44 <connection_get>
	if (!conn) {
   113aa:	b110      	cbz	r0, 113b2 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   113ac:	2000      	movs	r0, #0
   113ae:	7020      	strb	r0, [r4, #0]
	return 0;
   113b0:	bd10      	pop	{r4, pc}
		return 1;
   113b2:	2001      	movs	r0, #1
}
   113b4:	bd10      	pop	{r4, pc}

000113b6 <ll_apto_get>:
{
   113b6:	b510      	push	{r4, lr}
   113b8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   113ba:	f7f9 fbc3 	bl	ab44 <connection_get>
	if (!conn) {
   113be:	b160      	cbz	r0, 113da <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   113c0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   113c2:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   113c6:	435a      	muls	r2, r3
   113c8:	237d      	movs	r3, #125	; 0x7d
   113ca:	4353      	muls	r3, r2
	return 0;
   113cc:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   113ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   113d2:	fb93 f3f2 	sdiv	r3, r3, r2
   113d6:	8023      	strh	r3, [r4, #0]
	return 0;
   113d8:	bd10      	pop	{r4, pc}
		return 1;
   113da:	2001      	movs	r0, #1
}
   113dc:	bd10      	pop	{r4, pc}

000113de <ll_apto_set>:
{
   113de:	b510      	push	{r4, lr}
   113e0:	460c      	mov	r4, r1
	conn = connection_get(handle);
   113e2:	f7f9 fbaf 	bl	ab44 <connection_get>
	if (!conn) {
   113e6:	b170      	cbz	r0, 11406 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   113e8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   113ea:	f240 43e2 	movw	r3, #1250	; 0x4e2
   113ee:	4353      	muls	r3, r2
   113f0:	f242 7110 	movw	r1, #10000	; 0x2710
   113f4:	fb01 3404 	mla	r4, r1, r4, r3
   113f8:	3c01      	subs	r4, #1
   113fa:	fb94 f4f3 	sdiv	r4, r4, r3
   113fe:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   11402:	2000      	movs	r0, #0
   11404:	bd10      	pop	{r4, pc}
		return 1;
   11406:	2001      	movs	r0, #1
}
   11408:	bd10      	pop	{r4, pc}

0001140a <ll_length_req_send>:
{
   1140a:	b570      	push	{r4, r5, r6, lr}
   1140c:	460e      	mov	r6, r1
   1140e:	4615      	mov	r5, r2
	conn = connection_get(handle);
   11410:	f7f9 fb98 	bl	ab44 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11414:	b1d0      	cbz	r0, 1144c <ll_length_req_send+0x42>
   11416:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1141a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1141e:	429a      	cmp	r2, r3
   11420:	d114      	bne.n	1144c <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   11422:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11426:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1142a:	4293      	cmp	r3, r2
   1142c:	d10e      	bne.n	1144c <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1142e:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   11432:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   11436:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11438:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   1143c:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11440:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   11444:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   11448:	2000      	movs	r0, #0
   1144a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1144c:	2001      	movs	r0, #1
}
   1144e:	bd70      	pop	{r4, r5, r6, pc}

00011450 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   11450:	4b03      	ldr	r3, [pc, #12]	; (11460 <ll_length_default_get+0x10>)
   11452:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   11456:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   11458:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   1145c:	800b      	strh	r3, [r1, #0]
   1145e:	4770      	bx	lr
   11460:	200008f0 	.word	0x200008f0

00011464 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   11464:	4b03      	ldr	r3, [pc, #12]	; (11474 <ll_length_default_set+0x10>)
   11466:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   1146a:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   1146e:	2000      	movs	r0, #0
   11470:	4770      	bx	lr
   11472:	bf00      	nop
   11474:	200008f0 	.word	0x200008f0

00011478 <ll_length_max_get>:
{
   11478:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1147a:	241b      	movs	r4, #27
   1147c:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1147e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11482:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   11484:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   11486:	8018      	strh	r0, [r3, #0]
   11488:	bd10      	pop	{r4, pc}

0001148a <ll_phy_get>:
{
   1148a:	b538      	push	{r3, r4, r5, lr}
   1148c:	460d      	mov	r5, r1
   1148e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   11490:	f7f9 fb58 	bl	ab44 <connection_get>
	if (!conn) {
   11494:	b158      	cbz	r0, 114ae <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   11496:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1149a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1149e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   114a0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   114a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   114a8:	7023      	strb	r3, [r4, #0]
	return 0;
   114aa:	2000      	movs	r0, #0
   114ac:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   114ae:	2001      	movs	r0, #1
}
   114b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000114b4 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   114b4:	4b03      	ldr	r3, [pc, #12]	; (114c4 <ll_phy_default_set+0x10>)
   114b6:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   114ba:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   114be:	2000      	movs	r0, #0
   114c0:	4770      	bx	lr
   114c2:	bf00      	nop
   114c4:	200008f0 	.word	0x200008f0

000114c8 <ll_phy_req_send>:
{
   114c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   114cc:	4689      	mov	r9, r1
   114ce:	4690      	mov	r8, r2
   114d0:	461f      	mov	r7, r3
	conn = connection_get(handle);
   114d2:	f7f9 fb37 	bl	ab44 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   114d6:	b320      	cbz	r0, 11522 <ll_phy_req_send+0x5a>
   114d8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   114dc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   114e0:	429a      	cmp	r2, r3
   114e2:	d11e      	bne.n	11522 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   114e4:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   114e8:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   114ec:	429d      	cmp	r5, r3
   114ee:	d118      	bne.n	11522 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   114f0:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   114f4:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   114f8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   114fc:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   11500:	f046 0102 	orr.w	r1, r6, #2
   11504:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   11508:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   1150a:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   1150c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   11510:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   11514:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   11518:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   1151c:	2000      	movs	r0, #0
   1151e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   11522:	2001      	movs	r0, #1
}
   11524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011528 <ll_rx_get>:
{
   11528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1152c:	4605      	mov	r5, r0
   1152e:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   11530:	4918      	ldr	r1, [pc, #96]	; (11594 <ll_rx_get+0x6c>)
   11532:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   11536:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   1153a:	4293      	cmp	r3, r2
   1153c:	460f      	mov	r7, r1
   1153e:	d01f      	beq.n	11580 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   11540:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   11544:	f201 1177 	addw	r1, r1, #375	; 0x177
   11548:	f898 2000 	ldrb.w	r2, [r8]
   1154c:	f7f9 fab0 	bl	aab0 <tx_cmplt_get>
		if (!cmplt) {
   11550:	4604      	mov	r4, r0
   11552:	b9e0      	cbnz	r0, 1158e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   11554:	ae02      	add	r6, sp, #8
   11556:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   1155a:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   1155e:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   11562:	4631      	mov	r1, r6
   11564:	f10d 0006 	add.w	r0, sp, #6
   11568:	f7f9 faa2 	bl	aab0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   1156c:	b934      	cbnz	r4, 1157c <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   1156e:	b928      	cbnz	r0, 1157c <ll_rx_get+0x54>
			*node_rx = _node_rx;
   11570:	f8c5 8000 	str.w	r8, [r5]
}
   11574:	4620      	mov	r0, r4
   11576:	b002      	add	sp, #8
   11578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1157c:	4604      	mov	r4, r0
   1157e:	e7ee      	b.n	1155e <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   11580:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   11584:	f201 1177 	addw	r1, r1, #375	; 0x177
   11588:	f7f9 fa92 	bl	aab0 <tx_cmplt_get>
   1158c:	4604      	mov	r4, r0
		*node_rx = NULL;
   1158e:	2300      	movs	r3, #0
   11590:	602b      	str	r3, [r5, #0]
   11592:	e7ef      	b.n	11574 <ll_rx_get+0x4c>
   11594:	200008f0 	.word	0x200008f0

00011598 <ll_rx_mem_release>:
{
   11598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   1159c:	4c1c      	ldr	r4, [pc, #112]	; (11610 <ll_rx_mem_release+0x78>)
{
   1159e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   115a0:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   115a2:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   115a6:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   115aa:	b930      	cbnz	r0, 115ba <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   115ac:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   115ae:	20ff      	movs	r0, #255	; 0xff
}
   115b0:	b002      	add	sp, #8
   115b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   115b6:	f7f9 b9a5 	b.w	a904 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   115ba:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   115bc:	f8d0 8000 	ldr.w	r8, [r0]
   115c0:	2a0c      	cmp	r2, #12
   115c2:	d807      	bhi.n	115d4 <ll_rx_mem_release+0x3c>
   115c4:	2301      	movs	r3, #1
   115c6:	4093      	lsls	r3, r2
   115c8:	f641 727e 	movw	r2, #8062	; 0x1f7e
   115cc:	4213      	tst	r3, r2
   115ce:	d110      	bne.n	115f2 <ll_rx_mem_release+0x5a>
   115d0:	061b      	lsls	r3, r3, #24
   115d2:	d413      	bmi.n	115fc <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   115d4:	4b0f      	ldr	r3, [pc, #60]	; (11614 <ll_rx_mem_release+0x7c>)
   115d6:	9301      	str	r3, [sp, #4]
   115d8:	9300      	str	r3, [sp, #0]
   115da:	4a0f      	ldr	r2, [pc, #60]	; (11618 <ll_rx_mem_release+0x80>)
   115dc:	4b0f      	ldr	r3, [pc, #60]	; (1161c <ll_rx_mem_release+0x84>)
   115de:	4910      	ldr	r1, [pc, #64]	; (11620 <ll_rx_mem_release+0x88>)
   115e0:	4810      	ldr	r0, [pc, #64]	; (11624 <ll_rx_mem_release+0x8c>)
   115e2:	f7ef fcd3 	bl	f8c <printk>
   115e6:	4040      	eors	r0, r0
   115e8:	f380 8811 	msr	BASEPRI, r0
   115ec:	f04f 0004 	mov.w	r0, #4
   115f0:	df02      	svc	2
			mem_release(_node_rx_free,
   115f2:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   115f4:	f7f6 fb13 	bl	7c1e <mem_release>
{
   115f8:	4640      	mov	r0, r8
   115fa:	e7d6      	b.n	115aa <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   115fc:	88c2      	ldrh	r2, [r0, #6]
   115fe:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   11602:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11606:	f7f6 fb25 	bl	7c54 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1160a:	4639      	mov	r1, r7
   1160c:	e7f2      	b.n	115f4 <ll_rx_mem_release+0x5c>
   1160e:	bf00      	nop
   11610:	20000a20 	.word	0x20000a20
   11614:	000155c5 	.word	0x000155c5
   11618:	0001699e 	.word	0x0001699e
   1161c:	000187bf 	.word	0x000187bf
   11620:	000169ed 	.word	0x000169ed
   11624:	00016912 	.word	0x00016912

00011628 <do_radio_rx_fc_set>:
	if (req == ack) {
   11628:	4291      	cmp	r1, r2
{
   1162a:	b510      	push	{r4, lr}
   1162c:	4b14      	ldr	r3, [pc, #80]	; (11680 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   1162e:	d119      	bne.n	11664 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   11630:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   11634:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   11638:	4294      	cmp	r4, r2
   1163a:	d111      	bne.n	11660 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   1163c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   1163e:	bf14      	ite	ne
   11640:	460a      	movne	r2, r1
   11642:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   11644:	3a01      	subs	r2, #1
   11646:	b2d2      	uxtb	r2, r2
   11648:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   1164c:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   11650:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   11654:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   11658:	4291      	cmp	r1, r2
   1165a:	d00f      	beq.n	1167c <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   1165c:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   11660:	2001      	movs	r0, #1
   11662:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   11664:	b929      	cbnz	r1, 11672 <do_radio_rx_fc_set+0x4a>
   11666:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   1166a:	1a18      	subs	r0, r3, r0
   1166c:	bf18      	it	ne
   1166e:	2001      	movne	r0, #1
   11670:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   11672:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   11676:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   1167a:	e7f6      	b.n	1166a <do_radio_rx_fc_set+0x42>
	return 0;
   1167c:	2000      	movs	r0, #0
}
   1167e:	bd10      	pop	{r4, pc}
   11680:	200008f0 	.word	0x200008f0

00011684 <radio_rx_fc_set>:
{
   11684:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   11686:	4b14      	ldr	r3, [pc, #80]	; (116d8 <radio_rx_fc_set+0x54>)
   11688:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   1168c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   1168e:	b302      	cbz	r2, 116d2 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   11690:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   11694:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   11696:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   1169a:	b135      	cbz	r5, 116aa <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   1169c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   116a0:	4298      	cmp	r0, r3
   116a2:	d016      	beq.n	116d2 <radio_rx_fc_set+0x4e>
}
   116a4:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   116a6:	f7ff bfbf 	b.w	11628 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   116aa:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   116ae:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   116b2:	42a0      	cmp	r0, r4
   116b4:	d10d      	bne.n	116d2 <radio_rx_fc_set+0x4e>
   116b6:	4291      	cmp	r1, r2
   116b8:	d00b      	beq.n	116d2 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   116ba:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   116be:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   116c2:	42a0      	cmp	r0, r4
   116c4:	d005      	beq.n	116d2 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   116c6:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   116ca:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   116cc:	bf08      	it	eq
   116ce:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   116d2:	2000      	movs	r0, #0
   116d4:	bc30      	pop	{r4, r5}
   116d6:	4770      	bx	lr
   116d8:	200008f0 	.word	0x200008f0

000116dc <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   116dc:	4801      	ldr	r0, [pc, #4]	; (116e4 <ll_tx_mem_acquire+0x8>)
   116de:	f7f6 ba84 	b.w	7bea <mem_acquire>
   116e2:	bf00      	nop
   116e4:	20000a54 	.word	0x20000a54

000116e8 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   116e8:	4901      	ldr	r1, [pc, #4]	; (116f0 <ll_tx_mem_release+0x8>)
   116ea:	f7f6 ba98 	b.w	7c1e <mem_release>
   116ee:	bf00      	nop
   116f0:	20000a54 	.word	0x20000a54

000116f4 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   116f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   116f6:	4d33      	ldr	r5, [pc, #204]	; (117c4 <ll_tx_mem_enqueue+0xd0>)
   116f8:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   116fc:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   11700:	3401      	adds	r4, #1
{
   11702:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   11704:	b2e4      	uxtb	r4, r4
{
   11706:	4607      	mov	r7, r0
   11708:	460e      	mov	r6, r1
		last = 0;
   1170a:	42a3      	cmp	r3, r4
   1170c:	bf08      	it	eq
   1170e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   11710:	f7f9 fa18 	bl	ab44 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   11714:	2800      	cmp	r0, #0
   11716:	d052      	beq.n	117be <ll_tx_mem_enqueue+0xca>
   11718:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   1171c:	429c      	cmp	r4, r3
   1171e:	d04e      	beq.n	117be <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   11720:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   11724:	7972      	ldrb	r2, [r6, #5]
   11726:	3b07      	subs	r3, #7
   11728:	429a      	cmp	r2, r3
   1172a:	d90e      	bls.n	1174a <ll_tx_mem_enqueue+0x56>
   1172c:	4b26      	ldr	r3, [pc, #152]	; (117c8 <ll_tx_mem_enqueue+0xd4>)
   1172e:	9301      	str	r3, [sp, #4]
   11730:	9300      	str	r3, [sp, #0]
   11732:	4a26      	ldr	r2, [pc, #152]	; (117cc <ll_tx_mem_enqueue+0xd8>)
   11734:	4b26      	ldr	r3, [pc, #152]	; (117d0 <ll_tx_mem_enqueue+0xdc>)
   11736:	4927      	ldr	r1, [pc, #156]	; (117d4 <ll_tx_mem_enqueue+0xe0>)
   11738:	4827      	ldr	r0, [pc, #156]	; (117d8 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1173a:	f7ef fc27 	bl	f8c <printk>
   1173e:	4040      	eors	r0, r0
   11740:	f380 8811 	msr	BASEPRI, r0
   11744:	f04f 0004 	mov.w	r0, #4
   11748:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1174a:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   1174e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   11752:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   11756:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   1175a:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   1175c:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   11760:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11764:	2b00      	cmp	r3, #0
   11766:	db02      	blt.n	1176e <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   11768:	2000      	movs	r0, #0
}
   1176a:	b009      	add	sp, #36	; 0x24
   1176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1176e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   11770:	2b00      	cmp	r3, #0
   11772:	d0f9      	beq.n	11768 <ll_tx_mem_enqueue+0x74>
   11774:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   11778:	f012 0302 	ands.w	r3, r2, #2
   1177c:	d1f4      	bne.n	11768 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   1177e:	f042 0202 	orr.w	r2, r2, #2
   11782:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   11786:	f890 2020 	ldrb.w	r2, [r0, #32]
   1178a:	4914      	ldr	r1, [pc, #80]	; (117dc <ll_tx_mem_enqueue+0xe8>)
   1178c:	9105      	str	r1, [sp, #20]
   1178e:	3207      	adds	r2, #7
   11790:	2101      	movs	r1, #1
   11792:	9006      	str	r0, [sp, #24]
   11794:	9304      	str	r3, [sp, #16]
   11796:	9103      	str	r1, [sp, #12]
   11798:	9302      	str	r3, [sp, #8]
   1179a:	9301      	str	r3, [sp, #4]
   1179c:	9300      	str	r3, [sp, #0]
   1179e:	4618      	mov	r0, r3
   117a0:	b2d2      	uxtb	r2, r2
   117a2:	2103      	movs	r1, #3
   117a4:	f7f7 f8fa 	bl	899c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   117a8:	f030 0302 	bics.w	r3, r0, #2
   117ac:	d0dc      	beq.n	11768 <ll_tx_mem_enqueue+0x74>
   117ae:	4b06      	ldr	r3, [pc, #24]	; (117c8 <ll_tx_mem_enqueue+0xd4>)
   117b0:	9301      	str	r3, [sp, #4]
   117b2:	9300      	str	r3, [sp, #0]
   117b4:	4a05      	ldr	r2, [pc, #20]	; (117cc <ll_tx_mem_enqueue+0xd8>)
   117b6:	4b06      	ldr	r3, [pc, #24]	; (117d0 <ll_tx_mem_enqueue+0xdc>)
   117b8:	4906      	ldr	r1, [pc, #24]	; (117d4 <ll_tx_mem_enqueue+0xe0>)
   117ba:	4809      	ldr	r0, [pc, #36]	; (117e0 <ll_tx_mem_enqueue+0xec>)
   117bc:	e7bd      	b.n	1173a <ll_tx_mem_enqueue+0x46>
		return 1;
   117be:	2001      	movs	r0, #1
   117c0:	e7d3      	b.n	1176a <ll_tx_mem_enqueue+0x76>
   117c2:	bf00      	nop
   117c4:	200008f0 	.word	0x200008f0
   117c8:	000155c5 	.word	0x000155c5
   117cc:	0001699e 	.word	0x0001699e
   117d0:	000187ed 	.word	0x000187ed
   117d4:	000169ed 	.word	0x000169ed
   117d8:	00018dd3 	.word	0x00018dd3
   117dc:	0000b89d 	.word	0x0000b89d
   117e0:	00018825 	.word	0x00018825

000117e4 <ll_enc_req_send>:
{
   117e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   117e8:	4607      	mov	r7, r0
   117ea:	4688      	mov	r8, r1
   117ec:	4616      	mov	r6, r2
   117ee:	4699      	mov	r9, r3
	conn = connection_get(handle);
   117f0:	f7f9 f9a8 	bl	ab44 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   117f4:	4605      	mov	r5, r0
   117f6:	b910      	cbnz	r0, 117fe <ll_enc_req_send+0x1a>
			return 1;
   117f8:	2001      	movs	r0, #1
   117fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   117fe:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11802:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11806:	429a      	cmp	r2, r3
   11808:	d1f6      	bne.n	117f8 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1180a:	f7ff ff67 	bl	116dc <ll_tx_mem_acquire>
	if (node_tx) {
   1180e:	4604      	mov	r4, r0
   11810:	2800      	cmp	r0, #0
   11812:	d0f1      	beq.n	117f8 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   11814:	2210      	movs	r2, #16
   11816:	4649      	mov	r1, r9
   11818:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1181c:	f7f0 f9ee 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   11820:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11824:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   11828:	d124      	bne.n	11874 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1182a:	7923      	ldrb	r3, [r4, #4]
   1182c:	f043 0303 	orr.w	r3, r3, #3
   11830:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   11832:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   11834:	2208      	movs	r2, #8
			pdu_data_tx->len =
   11836:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11838:	2303      	movs	r3, #3
   1183a:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1183c:	4641      	mov	r1, r8
   1183e:	18a0      	adds	r0, r4, r2
   11840:	f7f0 f9dc 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
   11844:	7833      	ldrb	r3, [r6, #0]
   11846:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   11848:	7873      	ldrb	r3, [r6, #1]
   1184a:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   1184c:	2108      	movs	r1, #8
   1184e:	f104 0012 	add.w	r0, r4, #18
   11852:	f7f7 fa01 	bl	8c58 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   11856:	2104      	movs	r1, #4
   11858:	f104 001a 	add.w	r0, r4, #26
   1185c:	f7f7 f9fc 	bl	8c58 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   11860:	4621      	mov	r1, r4
   11862:	4638      	mov	r0, r7
   11864:	f7ff ff46 	bl	116f4 <ll_tx_mem_enqueue>
   11868:	2601      	movs	r6, #1
   1186a:	b1d0      	cbz	r0, 118a2 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   1186c:	4620      	mov	r0, r4
   1186e:	f7ff ff3b 	bl	116e8 <ll_tx_mem_release>
   11872:	e7c1      	b.n	117f8 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   11874:	2b30      	cmp	r3, #48	; 0x30
   11876:	d1f9      	bne.n	1186c <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   11878:	2208      	movs	r2, #8
   1187a:	4641      	mov	r1, r8
   1187c:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   11880:	f7f0 f9bc 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   11884:	7833      	ldrb	r3, [r6, #0]
   11886:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   1188a:	7873      	ldrb	r3, [r6, #1]
   1188c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   11890:	7923      	ldrb	r3, [r4, #4]
   11892:	f043 0303 	orr.w	r3, r3, #3
   11896:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   11898:	2301      	movs	r3, #1
   1189a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1189c:	230a      	movs	r3, #10
   1189e:	71e3      	strb	r3, [r4, #7]
   118a0:	e7de      	b.n	11860 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   118a2:	2303      	movs	r3, #3
   118a4:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   118a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   118ac:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   118b0:	3301      	adds	r3, #1
   118b2:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   118b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   118ba:	0000      	movs	r0, r0
   118bc:	0000      	movs	r0, r0
	...

000118c0 <radio_scan_enable>:
{
   118c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   118c4:	4c68      	ldr	r4, [pc, #416]	; (11a68 <radio_scan_enable+0x1a8>)
   118c6:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   118ca:	b08e      	sub	sp, #56	; 0x38
   118cc:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   118ce:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   118d2:	f04f 0302 	mov.w	r3, #2
{
   118d6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   118d8:	930b      	str	r3, [sp, #44]	; 0x2c
{
   118da:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   118dc:	d003      	beq.n	118e6 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   118de:	200c      	movs	r0, #12
}
   118e0:	b00e      	add	sp, #56	; 0x38
   118e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   118e6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   118ea:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   118ee:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   118f2:	0840      	lsrs	r0, r0, #1
   118f4:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   118f8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   118fc:	f360 0200 	bfi	r2, r0, #0, #1
   11900:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   11904:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   11908:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   1190c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11910:	2206      	movs	r2, #6
   11912:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   11916:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1191a:	4e54      	ldr	r6, [pc, #336]	; (11a6c <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1191c:	f7f0 f96e 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11920:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   11924:	f04f 0991 	mov.w	r9, #145	; 0x91
   11928:	fba2 0106 	umull	r0, r1, r2, r6
   1192c:	fb09 1102 	mla	r1, r9, r2, r1
   11930:	a34b      	add	r3, pc, #300	; (adr r3, 11a60 <radio_scan_enable+0x1a0>)
   11932:	e9d3 2300 	ldrd	r2, r3, [r3]
   11936:	f7ee fc6d 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   1193a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1193e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   11942:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11946:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   1194a:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1194e:	b2ba      	uxth	r2, r7
   11950:	fba2 6706 	umull	r6, r7, r2, r6
   11954:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   11958:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   1195c:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   1195e:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   11962:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   11966:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   1196a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1196e:	a33c      	add	r3, pc, #240	; (adr r3, 11a60 <radio_scan_enable+0x1a0>)
   11970:	e9d3 2300 	ldrd	r2, r3, [r3]
   11974:	4630      	mov	r0, r6
   11976:	4639      	mov	r1, r7
   11978:	f7ee fc4c 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   1197c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   11980:	459a      	cmp	sl, r3
   11982:	bf94      	ite	ls
   11984:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   11988:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   1198c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11990:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   11992:	bf38      	it	cc
   11994:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   11998:	f7f7 f91e 	bl	8bd8 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   1199c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   119a0:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   119a2:	2b00      	cmp	r3, #0
   119a4:	d045      	beq.n	11a32 <radio_scan_enable+0x172>
		us_offset = 0;
   119a6:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   119a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   119aa:	4931      	ldr	r1, [pc, #196]	; (11a70 <radio_scan_enable+0x1b0>)
   119ac:	a32c      	add	r3, pc, #176	; (adr r3, 11a60 <radio_scan_enable+0x1a0>)
   119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   119b2:	fba0 0101 	umull	r0, r1, r0, r1
   119b6:	f7ee fc2d 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   119ba:	ab0b      	add	r3, sp, #44	; 0x2c
   119bc:	9308      	str	r3, [sp, #32]
   119be:	4b2d      	ldr	r3, [pc, #180]	; (11a74 <radio_scan_enable+0x1b4>)
   119c0:	9307      	str	r3, [sp, #28]
   119c2:	4b2d      	ldr	r3, [pc, #180]	; (11a78 <radio_scan_enable+0x1b8>)
   119c4:	9305      	str	r3, [sp, #20]
   119c6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   119ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   119ce:	4443      	add	r3, r8
   119d0:	2500      	movs	r5, #0
   119d2:	4482      	add	sl, r0
   119d4:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   119d6:	4630      	mov	r0, r6
   119d8:	a321      	add	r3, pc, #132	; (adr r3, 11a60 <radio_scan_enable+0x1a0>)
   119da:	e9d3 2300 	ldrd	r2, r3, [r3]
   119de:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   119e0:	9506      	str	r5, [sp, #24]
   119e2:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   119e4:	f7ee fc16 	bl	214 <__aeabi_uldivmod>
   119e8:	4610      	mov	r0, r2
   119ea:	4619      	mov	r1, r3
   119ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   119f0:	2300      	movs	r3, #0
   119f2:	f7ee fc0f 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   119f6:	e88d 0220 	stmia.w	sp, {r5, r9}
   119fa:	9002      	str	r0, [sp, #8]
   119fc:	4653      	mov	r3, sl
   119fe:	2206      	movs	r2, #6
   11a00:	2103      	movs	r1, #3
   11a02:	4628      	mov	r0, r5
   11a04:	f7f6 ff7a 	bl	88fc <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   11a08:	2802      	cmp	r0, #2
   11a0a:	d023      	beq.n	11a54 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11a0c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11a0e:	2d00      	cmp	r5, #0
   11a10:	f47f af65 	bne.w	118de <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   11a14:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11a18:	f043 0301 	orr.w	r3, r3, #1
   11a1c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   11a20:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11a24:	2b00      	cmp	r3, #0
   11a26:	db02      	blt.n	11a2e <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   11a28:	2002      	movs	r0, #2
   11a2a:	f000 fea3 	bl	12774 <ll_adv_scan_state_cb>
	return 0;
   11a2e:	4628      	mov	r0, r5
   11a30:	e756      	b.n	118e0 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11a32:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   11a36:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11a38:	aa0d      	add	r2, sp, #52	; 0x34
   11a3a:	ab0c      	add	r3, sp, #48	; 0x30
   11a3c:	4441      	add	r1, r8
   11a3e:	2003      	movs	r0, #3
   11a40:	f7f9 fc86 	bl	b350 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   11a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11a46:	2b00      	cmp	r3, #0
   11a48:	d0ae      	beq.n	119a8 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   11a4a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   11a4e:	e7ab      	b.n	119a8 <radio_scan_enable+0xe8>
			cpu_sleep();
   11a50:	f7f8 fe7e 	bl	a750 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   11a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a56:	2b02      	cmp	r3, #2
   11a58:	d0fa      	beq.n	11a50 <radio_scan_enable+0x190>
   11a5a:	e7d7      	b.n	11a0c <radio_scan_enable+0x14c>
   11a5c:	f3af 8000 	nop.w
   11a60:	1afd498d 	.word	0x1afd498d
   11a64:	00000007 	.word	0x00000007
   11a68:	200008f0 	.word	0x200008f0
   11a6c:	84e72a00 	.word	0x84e72a00
   11a70:	3b9aca00 	.word	0x3b9aca00
   11a74:	0000a795 	.word	0x0000a795
   11a78:	0000c6bd 	.word	0x0000c6bd

00011a7c <radio_scan_disable>:
{
   11a7c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   11a7e:	2104      	movs	r1, #4
   11a80:	2006      	movs	r0, #6
   11a82:	f7f9 f875 	bl	ab70 <role_disable>
	if (!status) {
   11a86:	4605      	mov	r5, r0
   11a88:	b9e8      	cbnz	r0, 11ac6 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   11a8a:	4c10      	ldr	r4, [pc, #64]	; (11acc <radio_scan_disable+0x50>)
   11a8c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   11a90:	f360 0200 	bfi	r2, r0, #0, #1
   11a94:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   11a98:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   11a9c:	2a00      	cmp	r2, #0
   11a9e:	db01      	blt.n	11aa4 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   11aa0:	f000 fe68 	bl	12774 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   11aa4:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   11aa8:	b15e      	cbz	r6, 11ac2 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   11aaa:	2300      	movs	r3, #0
   11aac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   11ab0:	4907      	ldr	r1, [pc, #28]	; (11ad0 <radio_scan_disable+0x54>)
   11ab2:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   11ab6:	f7f6 f8b2 	bl	7c1e <mem_release>
			mem_release(conn, &_radio.conn_free);
   11aba:	4906      	ldr	r1, [pc, #24]	; (11ad4 <radio_scan_disable+0x58>)
   11abc:	4630      	mov	r0, r6
   11abe:	f7f6 f8ae 	bl	7c1e <mem_release>
}
   11ac2:	4628      	mov	r0, r5
   11ac4:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   11ac6:	250c      	movs	r5, #12
   11ac8:	e7fb      	b.n	11ac2 <radio_scan_disable+0x46>
   11aca:	bf00      	nop
   11acc:	200008f0 	.word	0x200008f0
   11ad0:	20000a38 	.word	0x20000a38
   11ad4:	200009fc 	.word	0x200009fc

00011ad8 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   11ad8:	4b03      	ldr	r3, [pc, #12]	; (11ae8 <ll_connect_disable+0x10>)
   11ada:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11ade:	b10b      	cbz	r3, 11ae4 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   11ae0:	f7ff bfcc 	b.w	11a7c <radio_scan_disable>
}
   11ae4:	200c      	movs	r0, #12
   11ae6:	4770      	bx	lr
   11ae8:	200008f0 	.word	0x200008f0

00011aec <ll_rx_dequeue>:
{
   11aec:	b530      	push	{r4, r5, lr}
   11aee:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11af0:	4d47      	ldr	r5, [pc, #284]	; (11c10 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   11af2:	aa04      	add	r2, sp, #16
   11af4:	2300      	movs	r3, #0
   11af6:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11afa:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   11afe:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   11b02:	f7f6 f8db 	bl	7cbc <memq_dequeue>
   11b06:	462c      	mov	r4, r5
	LL_ASSERT(link);
   11b08:	b970      	cbnz	r0, 11b28 <ll_rx_dequeue+0x3c>
   11b0a:	4b42      	ldr	r3, [pc, #264]	; (11c14 <ll_rx_dequeue+0x128>)
   11b0c:	9301      	str	r3, [sp, #4]
   11b0e:	9300      	str	r3, [sp, #0]
   11b10:	4a41      	ldr	r2, [pc, #260]	; (11c18 <ll_rx_dequeue+0x12c>)
   11b12:	4b42      	ldr	r3, [pc, #264]	; (11c1c <ll_rx_dequeue+0x130>)
   11b14:	4942      	ldr	r1, [pc, #264]	; (11c20 <ll_rx_dequeue+0x134>)
   11b16:	4843      	ldr	r0, [pc, #268]	; (11c24 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   11b18:	f7ef fa38 	bl	f8c <printk>
   11b1c:	4040      	eors	r0, r0
   11b1e:	f380 8811 	msr	BASEPRI, r0
   11b22:	f04f 0004 	mov.w	r0, #4
   11b26:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   11b28:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   11b2c:	f7f6 f877 	bl	7c1e <mem_release>
	switch (node_rx->hdr.type) {
   11b30:	9a03      	ldr	r2, [sp, #12]
   11b32:	7911      	ldrb	r1, [r2, #4]
   11b34:	290c      	cmp	r1, #12
   11b36:	d807      	bhi.n	11b48 <ll_rx_dequeue+0x5c>
   11b38:	2301      	movs	r3, #1
   11b3a:	408b      	lsls	r3, r1
   11b3c:	f641 707e 	movw	r0, #8062	; 0x1f7e
   11b40:	4203      	tst	r3, r0
   11b42:	d109      	bne.n	11b58 <ll_rx_dequeue+0x6c>
   11b44:	0618      	lsls	r0, r3, #24
   11b46:	d419      	bmi.n	11b7c <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   11b48:	4b32      	ldr	r3, [pc, #200]	; (11c14 <ll_rx_dequeue+0x128>)
   11b4a:	9301      	str	r3, [sp, #4]
   11b4c:	9300      	str	r3, [sp, #0]
   11b4e:	4a32      	ldr	r2, [pc, #200]	; (11c18 <ll_rx_dequeue+0x12c>)
   11b50:	4b32      	ldr	r3, [pc, #200]	; (11c1c <ll_rx_dequeue+0x130>)
   11b52:	4933      	ldr	r1, [pc, #204]	; (11c20 <ll_rx_dequeue+0x134>)
   11b54:	4834      	ldr	r0, [pc, #208]	; (11c28 <ll_rx_dequeue+0x13c>)
   11b56:	e7df      	b.n	11b18 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   11b58:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   11b5c:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   11b60:	3801      	subs	r0, #1
   11b62:	4283      	cmp	r3, r0
   11b64:	db07      	blt.n	11b76 <ll_rx_dequeue+0x8a>
   11b66:	4b2b      	ldr	r3, [pc, #172]	; (11c14 <ll_rx_dequeue+0x128>)
   11b68:	9301      	str	r3, [sp, #4]
   11b6a:	9300      	str	r3, [sp, #0]
   11b6c:	4a2a      	ldr	r2, [pc, #168]	; (11c18 <ll_rx_dequeue+0x12c>)
   11b6e:	4b2b      	ldr	r3, [pc, #172]	; (11c1c <ll_rx_dequeue+0x130>)
   11b70:	492b      	ldr	r1, [pc, #172]	; (11c20 <ll_rx_dequeue+0x134>)
   11b72:	482e      	ldr	r0, [pc, #184]	; (11c2c <ll_rx_dequeue+0x140>)
   11b74:	e7d0      	b.n	11b18 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   11b76:	3301      	adds	r3, #1
   11b78:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   11b7c:	2906      	cmp	r1, #6
   11b7e:	d136      	bne.n	11bee <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   11b80:	7ad3      	ldrb	r3, [r2, #11]
   11b82:	2b3c      	cmp	r3, #60	; 0x3c
   11b84:	d00d      	beq.n	11ba2 <ll_rx_dequeue+0xb6>
   11b86:	7b12      	ldrb	r2, [r2, #12]
   11b88:	b9e2      	cbnz	r2, 11bc4 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   11b8a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11b8e:	07d9      	lsls	r1, r3, #31
   11b90:	d42f      	bmi.n	11bf2 <ll_rx_dequeue+0x106>
   11b92:	4b20      	ldr	r3, [pc, #128]	; (11c14 <ll_rx_dequeue+0x128>)
   11b94:	9301      	str	r3, [sp, #4]
   11b96:	9300      	str	r3, [sp, #0]
   11b98:	4a1f      	ldr	r2, [pc, #124]	; (11c18 <ll_rx_dequeue+0x12c>)
   11b9a:	4b20      	ldr	r3, [pc, #128]	; (11c1c <ll_rx_dequeue+0x130>)
   11b9c:	4920      	ldr	r1, [pc, #128]	; (11c20 <ll_rx_dequeue+0x134>)
   11b9e:	4824      	ldr	r0, [pc, #144]	; (11c30 <ll_rx_dequeue+0x144>)
   11ba0:	e7ba      	b.n	11b18 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   11ba2:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   11ba4:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   11ba8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   11bac:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	db09      	blt.n	11bc8 <ll_rx_dequeue+0xdc>
   11bb4:	4b17      	ldr	r3, [pc, #92]	; (11c14 <ll_rx_dequeue+0x128>)
   11bb6:	9301      	str	r3, [sp, #4]
   11bb8:	9300      	str	r3, [sp, #0]
   11bba:	4a17      	ldr	r2, [pc, #92]	; (11c18 <ll_rx_dequeue+0x12c>)
   11bbc:	4b17      	ldr	r3, [pc, #92]	; (11c1c <ll_rx_dequeue+0x130>)
   11bbe:	4918      	ldr	r1, [pc, #96]	; (11c20 <ll_rx_dequeue+0x134>)
   11bc0:	481c      	ldr	r0, [pc, #112]	; (11c34 <ll_rx_dequeue+0x148>)
   11bc2:	e7a9      	b.n	11b18 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   11bc4:	2500      	movs	r5, #0
   11bc6:	e7f1      	b.n	11bac <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   11bc8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11bcc:	f36f 13c7 	bfc	r3, #7, #1
   11bd0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   11bd4:	b995      	cbnz	r5, 11bfc <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11bd6:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   11bda:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11bde:	f000 0001 	and.w	r0, r0, #1
   11be2:	0040      	lsls	r0, r0, #1
		if (!bm) {
   11be4:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   11be8:	d101      	bne.n	11bee <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   11bea:	f000 fdc3 	bl	12774 <ll_adv_scan_state_cb>
}
   11bee:	b005      	add	sp, #20
   11bf0:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   11bf2:	f362 0300 	bfi	r3, r2, #0, #1
   11bf6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   11bfa:	e7ec      	b.n	11bd6 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   11bfc:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   11c00:	490d      	ldr	r1, [pc, #52]	; (11c38 <ll_rx_dequeue+0x14c>)
   11c02:	f7f6 f80c 	bl	7c1e <mem_release>
			mem_release(conn, &_radio.conn_free);
   11c06:	490d      	ldr	r1, [pc, #52]	; (11c3c <ll_rx_dequeue+0x150>)
   11c08:	4628      	mov	r0, r5
   11c0a:	f7f6 f808 	bl	7c1e <mem_release>
   11c0e:	e7e2      	b.n	11bd6 <ll_rx_dequeue+0xea>
   11c10:	200008f0 	.word	0x200008f0
   11c14:	000155c5 	.word	0x000155c5
   11c18:	0001699e 	.word	0x0001699e
   11c1c:	000187b1 	.word	0x000187b1
   11c20:	000169ed 	.word	0x000169ed
   11c24:	000187ff 	.word	0x000187ff
   11c28:	00016912 	.word	0x00016912
   11c2c:	000188aa 	.word	0x000188aa
   11c30:	00018d98 	.word	0x00018d98
   11c34:	00018d5a 	.word	0x00018d5a
   11c38:	20000a38 	.word	0x20000a38
   11c3c:	200009fc 	.word	0x200009fc

00011c40 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   11c40:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   11c42:	4c0b      	ldr	r4, [pc, #44]	; (11c70 <rtc0_nrf5_isr+0x30>)
   11c44:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   11c48:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   11c4c:	b122      	cbz	r2, 11c58 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   11c4e:	2000      	movs	r0, #0
   11c50:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   11c54:	f7f6 fe40 	bl	88d8 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   11c58:	b12d      	cbz	r5, 11c66 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   11c5a:	2300      	movs	r3, #0
   11c5c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   11c60:	2001      	movs	r0, #1
   11c62:	f7f6 fe39 	bl	88d8 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   11c66:	2000      	movs	r0, #0
}
   11c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   11c6c:	f7f6 b8d6 	b.w	7e1c <mayfly_run>
   11c70:	4000b000 	.word	0x4000b000

00011c74 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   11c74:	2001      	movs	r0, #1
   11c76:	f7f6 b8d1 	b.w	7e1c <mayfly_run>

00011c7a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11c7a:	4668      	mov	r0, sp
   11c7c:	f020 0107 	bic.w	r1, r0, #7
   11c80:	468d      	mov	sp, r1
   11c82:	b501      	push	{r0, lr}
	isr_radio();
   11c84:	f001 f8b8 	bl	12df8 <isr_radio>
	ISR_DIRECT_PM();
   11c88:	f7ef fe32 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   11c8c:	f7ef fc1c 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11c90:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11c94:	4685      	mov	sp, r0
   11c96:	4770      	bx	lr

00011c98 <radio_active_callback>:
{
   11c98:	4770      	bx	lr
	...

00011c9c <radio_event_callback>:
	k_sem_give(sem_recv);
   11c9c:	4b01      	ldr	r3, [pc, #4]	; (11ca4 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   11c9e:	6818      	ldr	r0, [r3, #0]
   11ca0:	f002 bed9 	b.w	14a56 <_impl_k_sem_give>
   11ca4:	20001220 	.word	0x20001220

00011ca8 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   11ca8:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   11caa:	4b41      	ldr	r3, [pc, #260]	; (11db0 <ll_init+0x108>)
{
   11cac:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   11cae:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   11cb0:	4840      	ldr	r0, [pc, #256]	; (11db4 <ll_init+0x10c>)
   11cb2:	f002 f9e9 	bl	14088 <device_get_binding>
	if (!clk_k32) {
   11cb6:	b918      	cbnz	r0, 11cc0 <ll_init+0x18>
		return -ENODEV;
   11cb8:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   11cbc:	b006      	add	sp, #24
   11cbe:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   11cc0:	6843      	ldr	r3, [r0, #4]
   11cc2:	2101      	movs	r1, #1
   11cc4:	681b      	ldr	r3, [r3, #0]
   11cc6:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   11cc8:	483b      	ldr	r0, [pc, #236]	; (11db8 <ll_init+0x110>)
   11cca:	f002 f9dd 	bl	14088 <device_get_binding>
	if (!entropy) {
   11cce:	4604      	mov	r4, r0
   11cd0:	2800      	cmp	r0, #0
   11cd2:	d0f1      	beq.n	11cb8 <ll_init+0x10>
	cntr_init();
   11cd4:	f000 ff74 	bl	12bc0 <cntr_init>
	mayfly_init();
   11cd8:	f7f6 f800 	bl	7cdc <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11cdc:	4b37      	ldr	r3, [pc, #220]	; (11dbc <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   11cde:	2203      	movs	r2, #3
   11ce0:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11ce2:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11ce4:	4a36      	ldr	r2, [pc, #216]	; (11dc0 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11ce6:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11ce8:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11cea:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11cec:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11cee:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11cf0:	9205      	str	r2, [sp, #20]
   11cf2:	4a34      	ldr	r2, [pc, #208]	; (11dc4 <ll_init+0x11c>)
   11cf4:	9204      	str	r2, [sp, #16]
   11cf6:	4a34      	ldr	r2, [pc, #208]	; (11dc8 <ll_init+0x120>)
   11cf8:	9203      	str	r2, [sp, #12]
   11cfa:	4a34      	ldr	r2, [pc, #208]	; (11dcc <ll_init+0x124>)
   11cfc:	9202      	str	r2, [sp, #8]
   11cfe:	220d      	movs	r2, #13
   11d00:	9201      	str	r2, [sp, #4]
   11d02:	9300      	str	r3, [sp, #0]
   11d04:	4a32      	ldr	r2, [pc, #200]	; (11dd0 <ll_init+0x128>)
   11d06:	2304      	movs	r3, #4
   11d08:	f7f6 fdae 	bl	8868 <ticker_init>
	LL_ASSERT(!err);
   11d0c:	b170      	cbz	r0, 11d2c <ll_init+0x84>
   11d0e:	4b31      	ldr	r3, [pc, #196]	; (11dd4 <ll_init+0x12c>)
   11d10:	9301      	str	r3, [sp, #4]
   11d12:	9300      	str	r3, [sp, #0]
   11d14:	4a30      	ldr	r2, [pc, #192]	; (11dd8 <ll_init+0x130>)
   11d16:	4b31      	ldr	r3, [pc, #196]	; (11ddc <ll_init+0x134>)
   11d18:	4931      	ldr	r1, [pc, #196]	; (11de0 <ll_init+0x138>)
   11d1a:	4832      	ldr	r0, [pc, #200]	; (11de4 <ll_init+0x13c>)
   11d1c:	f7ef f936 	bl	f8c <printk>
   11d20:	4040      	eors	r0, r0
   11d22:	f380 8811 	msr	BASEPRI, r0
   11d26:	f04f 0004 	mov.w	r0, #4
   11d2a:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   11d2c:	482e      	ldr	r0, [pc, #184]	; (11de8 <ll_init+0x140>)
   11d2e:	f002 f9ab 	bl	14088 <device_get_binding>
	if (!clk_m16) {
   11d32:	2800      	cmp	r0, #0
   11d34:	d0c0      	beq.n	11cb8 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   11d36:	4b2d      	ldr	r3, [pc, #180]	; (11dec <ll_init+0x144>)
   11d38:	9304      	str	r3, [sp, #16]
   11d3a:	9501      	str	r5, [sp, #4]
   11d3c:	231b      	movs	r3, #27
   11d3e:	2501      	movs	r5, #1
   11d40:	f44f 7657 	mov.w	r6, #860	; 0x35c
   11d44:	9303      	str	r3, [sp, #12]
   11d46:	9302      	str	r3, [sp, #8]
   11d48:	4622      	mov	r2, r4
   11d4a:	9605      	str	r6, [sp, #20]
   11d4c:	9500      	str	r5, [sp, #0]
   11d4e:	462b      	mov	r3, r5
   11d50:	2107      	movs	r1, #7
   11d52:	f7fe ff49 	bl	10be8 <radio_init>
	if (err) {
   11d56:	4604      	mov	r4, r0
   11d58:	b160      	cbz	r0, 11d74 <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   11d5a:	4b1e      	ldr	r3, [pc, #120]	; (11dd4 <ll_init+0x12c>)
   11d5c:	9303      	str	r3, [sp, #12]
   11d5e:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   11d62:	4a1d      	ldr	r2, [pc, #116]	; (11dd8 <ll_init+0x130>)
   11d64:	4b1d      	ldr	r3, [pc, #116]	; (11ddc <ll_init+0x134>)
   11d66:	491e      	ldr	r1, [pc, #120]	; (11de0 <ll_init+0x138>)
   11d68:	4821      	ldr	r0, [pc, #132]	; (11df0 <ll_init+0x148>)
   11d6a:	f7ef f90f 	bl	f8c <printk>
		return -ENOMEM;
   11d6e:	f06f 000b 	mvn.w	r0, #11
   11d72:	e7a3      	b.n	11cbc <ll_init+0x14>
	ll_filter_reset(true);
   11d74:	4628      	mov	r0, r5
   11d76:	f000 fedb 	bl	12b30 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11d7a:	4622      	mov	r2, r4
   11d7c:	4621      	mov	r1, r4
   11d7e:	4628      	mov	r0, r5
   11d80:	f7ef fd9c 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11d84:	4622      	mov	r2, r4
   11d86:	4621      	mov	r1, r4
   11d88:	200b      	movs	r0, #11
   11d8a:	f7ef fd97 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   11d8e:	4622      	mov	r2, r4
   11d90:	4621      	mov	r1, r4
   11d92:	2018      	movs	r0, #24
   11d94:	f7ef fd92 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   11d98:	4628      	mov	r0, r5
   11d9a:	f7ef fd5d 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   11d9e:	200b      	movs	r0, #11
   11da0:	f7ef fd5a 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   11da4:	2018      	movs	r0, #24
   11da6:	f7ef fd57 	bl	1858 <_arch_irq_enable>
	return 0;
   11daa:	4620      	mov	r0, r4
   11dac:	e786      	b.n	11cbc <ll_init+0x14>
   11dae:	bf00      	nop
   11db0:	20001220 	.word	0x20001220
   11db4:	00015698 	.word	0x00015698
   11db8:	0001566c 	.word	0x0001566c
   11dbc:	20001200 	.word	0x20001200
   11dc0:	00013795 	.word	0x00013795
   11dc4:	000136f1 	.word	0x000136f1
   11dc8:	00013695 	.word	0x00013695
   11dcc:	20000f90 	.word	0x20000f90
   11dd0:	20000e50 	.word	0x20000e50
   11dd4:	000155c5 	.word	0x000155c5
   11dd8:	0001699e 	.word	0x0001699e
   11ddc:	000194cf 	.word	0x000194cf
   11de0:	000169ed 	.word	0x000169ed
   11de4:	000194d7 	.word	0x000194d7
   11de8:	000156a3 	.word	0x000156a3
   11dec:	20000af4 	.word	0x20000af4
   11df0:	000194fd 	.word	0x000194fd

00011df4 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   11df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11df8:	4681      	mov	r9, r0
   11dfa:	4688      	mov	r8, r1
   11dfc:	4617      	mov	r7, r2
   11dfe:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   11e00:	f7fe ffd6 	bl	10db0 <ll_scan_is_enabled>
   11e04:	b988      	cbnz	r0, 11e2a <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   11e06:	4d0a      	ldr	r5, [pc, #40]	; (11e30 <ll_scan_params_set+0x3c>)
   11e08:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   11e0a:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   11e0e:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   11e12:	4622      	mov	r2, r4
   11e14:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   11e18:	4613      	mov	r3, r2
   11e1a:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   11e1e:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   11e20:	f362 1387 	bfi	r3, r2, #6, #2
   11e24:	712b      	strb	r3, [r5, #4]

	return 0;
   11e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11e2a:	200c      	movs	r0, #12
}
   11e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11e30:	20001224 	.word	0x20001224

00011e34 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   11e34:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e36:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   11e38:	b920      	cbnz	r0, 11e44 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   11e3a:	b005      	add	sp, #20
   11e3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   11e40:	f7ff be1c 	b.w	11a7c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   11e44:	f7fe ffb4 	bl	10db0 <ll_scan_is_enabled>
   11e48:	4606      	mov	r6, r0
   11e4a:	bb40      	cbnz	r0, 11e9e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   11e4c:	4c15      	ldr	r4, [pc, #84]	; (11ea4 <ll_scan_enable+0x70>)
   11e4e:	7920      	ldrb	r0, [r4, #4]
   11e50:	0980      	lsrs	r0, r0, #6
   11e52:	f000 fa63 	bl	1231c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   11e56:	7923      	ldrb	r3, [r4, #4]
   11e58:	f013 0501 	ands.w	r5, r3, #1
   11e5c:	d006      	beq.n	11e6c <ll_scan_enable+0x38>
   11e5e:	f013 0520 	ands.w	r5, r3, #32
   11e62:	d003      	beq.n	11e6c <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   11e64:	4630      	mov	r0, r6
   11e66:	f000 fbdd 	bl	12624 <ll_rl_rpa_update>
		rpa_gen = 1;
   11e6a:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11e6c:	7926      	ldrb	r6, [r4, #4]
   11e6e:	f006 070f 	and.w	r7, r6, #15
   11e72:	f3c6 1600 	ubfx	r6, r6, #4, #1
   11e76:	2100      	movs	r1, #0
   11e78:	4630      	mov	r0, r6
   11e7a:	f7f6 feb3 	bl	8be4 <ll_addr_get>
   11e7e:	22ff      	movs	r2, #255	; 0xff
   11e80:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   11e82:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11e84:	8823      	ldrh	r3, [r4, #0]
   11e86:	9502      	str	r5, [sp, #8]
   11e88:	0992      	lsrs	r2, r2, #6
   11e8a:	9201      	str	r2, [sp, #4]
   11e8c:	8862      	ldrh	r2, [r4, #2]
   11e8e:	9200      	str	r2, [sp, #0]
   11e90:	4631      	mov	r1, r6
   11e92:	4602      	mov	r2, r0
   11e94:	4638      	mov	r0, r7
   11e96:	f7ff fd13 	bl	118c0 <radio_scan_enable>
}
   11e9a:	b005      	add	sp, #20
   11e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   11e9e:	2000      	movs	r0, #0
   11ea0:	e7fb      	b.n	11e9a <ll_scan_enable+0x66>
   11ea2:	bf00      	nop
   11ea4:	20001224 	.word	0x20001224

00011ea8 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   11ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eac:	b085      	sub	sp, #20
   11eae:	461e      	mov	r6, r3
   11eb0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   11eb4:	9303      	str	r3, [sp, #12]
   11eb6:	4680      	mov	r8, r0
   11eb8:	4689      	mov	r9, r1
   11eba:	4615      	mov	r5, r2
   11ebc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11ebe:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   11ec2:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   11ec6:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   11eca:	f7fe ff71 	bl	10db0 <ll_scan_is_enabled>
   11ece:	9b03      	ldr	r3, [sp, #12]
   11ed0:	bba0      	cbnz	r0, 11f3c <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   11ed2:	9300      	str	r3, [sp, #0]
   11ed4:	4652      	mov	r2, sl
   11ed6:	465b      	mov	r3, fp
   11ed8:	4639      	mov	r1, r7
   11eda:	4630      	mov	r0, r6
   11edc:	f7fe ff8c 	bl	10df8 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   11ee0:	bb68      	cbnz	r0, 11f3e <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   11ee2:	4628      	mov	r0, r5
   11ee4:	f000 fa1a 	bl	1231c <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   11ee8:	b1dd      	cbz	r5, 11f22 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   11eea:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11eec:	1ea3      	subs	r3, r4, #2
   11eee:	2b01      	cmp	r3, #1
   11ef0:	d822      	bhi.n	11f38 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   11ef2:	2000      	movs	r0, #0
   11ef4:	f000 fb96 	bl	12624 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   11ef8:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   11efc:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   11efe:	2100      	movs	r1, #0
   11f00:	4620      	mov	r0, r4
   11f02:	f7f6 fe6f 	bl	8be4 <ll_addr_get>
   11f06:	4643      	mov	r3, r8
   11f08:	4602      	mov	r2, r0
   11f0a:	4621      	mov	r1, r4
   11f0c:	2000      	movs	r0, #0
   11f0e:	9711      	str	r7, [sp, #68]	; 0x44
   11f10:	9610      	str	r6, [sp, #64]	; 0x40
   11f12:	950f      	str	r5, [sp, #60]	; 0x3c
   11f14:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   11f18:	b005      	add	sp, #20
   11f1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   11f1e:	f7ff bccf 	b.w	118c0 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   11f22:	f000 fb77 	bl	12614 <ctrl_rl_enabled>
   11f26:	2800      	cmp	r0, #0
   11f28:	d0df      	beq.n	11eea <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   11f2a:	4639      	mov	r1, r7
   11f2c:	462a      	mov	r2, r5
   11f2e:	4630      	mov	r0, r6
   11f30:	f000 fa16 	bl	12360 <ll_rl_find>
   11f34:	4607      	mov	r7, r0
   11f36:	e7d9      	b.n	11eec <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   11f38:	2600      	movs	r6, #0
   11f3a:	e7e0      	b.n	11efe <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11f3c:	200c      	movs	r0, #12
}
   11f3e:	b005      	add	sp, #20
   11f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011f44 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   11f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f48:	4688      	mov	r8, r1
	int i;

	if (free) {
   11f4a:	4615      	mov	r5, r2
   11f4c:	b10a      	cbz	r2, 11f52 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   11f4e:	23ff      	movs	r3, #255	; 0xff
   11f50:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11f52:	4e14      	ldr	r6, [pc, #80]	; (11fa4 <wl_find+0x60>)
{
   11f54:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11f56:	f000 0701 	and.w	r7, r0, #1
   11f5a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11f5e:	07da      	lsls	r2, r3, #31
   11f60:	d51d      	bpl.n	11f9e <wl_find+0x5a>
   11f62:	f3c3 0340 	ubfx	r3, r3, #1, #1
   11f66:	42bb      	cmp	r3, r7
   11f68:	d113      	bne.n	11f92 <wl_find+0x4e>
   11f6a:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   11f6e:	2206      	movs	r2, #6
   11f70:	4641      	mov	r1, r8
   11f72:	3002      	adds	r0, #2
   11f74:	f7ef fe2d 	bl	1bd2 <memcmp>
   11f78:	b910      	cbnz	r0, 11f80 <wl_find+0x3c>
			return i;
   11f7a:	b2e0      	uxtb	r0, r4
   11f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11f80:	b13d      	cbz	r5, 11f92 <wl_find+0x4e>
   11f82:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11f86:	07db      	lsls	r3, r3, #31
   11f88:	d403      	bmi.n	11f92 <wl_find+0x4e>
   11f8a:	782b      	ldrb	r3, [r5, #0]
   11f8c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11f8e:	bf08      	it	eq
   11f90:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   11f92:	3401      	adds	r4, #1
   11f94:	2c08      	cmp	r4, #8
   11f96:	d1e0      	bne.n	11f5a <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11f98:	20ff      	movs	r0, #255	; 0xff
   11f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11f9e:	2d00      	cmp	r5, #0
   11fa0:	d1f3      	bne.n	11f8a <wl_find+0x46>
   11fa2:	e7f6      	b.n	11f92 <wl_find+0x4e>
   11fa4:	20001457 	.word	0x20001457

00011fa8 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   11fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fac:	4d1a      	ldr	r5, [pc, #104]	; (12018 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11fae:	f8df 8074 	ldr.w	r8, [pc, #116]	; 12024 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   11fb2:	1eae      	subs	r6, r5, #2
{
   11fb4:	2400      	movs	r4, #0
   11fb6:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11fb8:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11fbc:	07d9      	lsls	r1, r3, #31
   11fbe:	d524      	bpl.n	1200a <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11fc0:	f898 3000 	ldrb.w	r3, [r8]
   11fc4:	b15b      	cbz	r3, 11fde <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   11fc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11fca:	2a07      	cmp	r2, #7
   11fcc:	d807      	bhi.n	11fde <filter_wl_update+0x36>
   11fce:	2328      	movs	r3, #40	; 0x28
   11fd0:	4353      	muls	r3, r2
   11fd2:	4a12      	ldr	r2, [pc, #72]	; (1201c <filter_wl_update+0x74>)
   11fd4:	5cd3      	ldrb	r3, [r2, r3]
   11fd6:	075a      	lsls	r2, r3, #29
   11fd8:	d501      	bpl.n	11fde <filter_wl_update+0x36>
   11fda:	06db      	lsls	r3, r3, #27
   11fdc:	d515      	bpl.n	1200a <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   11fde:	4810      	ldr	r0, [pc, #64]	; (12020 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11fe0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   11fe4:	2201      	movs	r2, #1
   11fe6:	fa02 f104 	lsl.w	r1, r2, r4
   11fea:	7802      	ldrb	r2, [r0, #0]
   11fec:	430a      	orrs	r2, r1
   11fee:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11ff0:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11ff4:	7842      	ldrb	r2, [r0, #1]
   11ff6:	40a3      	lsls	r3, r4
   11ff8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11ffa:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11ffc:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11ffe:	fb02 0004 	mla	r0, r2, r4, r0
   12002:	4629      	mov	r1, r5
   12004:	3002      	adds	r0, #2
   12006:	f7ef fdf9 	bl	1bfc <memcpy>
   1200a:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   1200c:	2c08      	cmp	r4, #8
   1200e:	f105 0508 	add.w	r5, r5, #8
   12012:	d1d1      	bne.n	11fb8 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   12014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12018:	20001459 	.word	0x20001459
   1201c:	200012e4 	.word	0x200012e4
   12020:	20001497 	.word	0x20001497
   12024:	20001424 	.word	0x20001424

00012028 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   12028:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1202a:	f7fe fead 	bl	10d88 <ll_adv_is_enabled>
   1202e:	b928      	cbnz	r0, 1203c <rl_access_check.constprop.1+0x14>
   12030:	f7fe febe 	bl	10db0 <ll_scan_is_enabled>
   12034:	fab0 f080 	clz	r0, r0
   12038:	0940      	lsrs	r0, r0, #5
   1203a:	bd08      	pop	{r3, pc}
   1203c:	2000      	movs	r0, #0
}
   1203e:	bd08      	pop	{r3, pc}

00012040 <filter_rl_update>:
{
   12040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   12042:	4e10      	ldr	r6, [pc, #64]	; (12084 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   12044:	4d10      	ldr	r5, [pc, #64]	; (12088 <filter_rl_update+0x48>)
{
   12046:	2400      	movs	r4, #0
		if (rl[i].taken) {
   12048:	2728      	movs	r7, #40	; 0x28
   1204a:	fb07 f104 	mul.w	r1, r7, r4
   1204e:	5c73      	ldrb	r3, [r6, r1]
   12050:	07da      	lsls	r2, r3, #31
   12052:	d513      	bpl.n	1207c <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   12054:	2201      	movs	r2, #1
   12056:	fa02 f004 	lsl.w	r0, r2, r4
   1205a:	782a      	ldrb	r2, [r5, #0]
   1205c:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1205e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   12062:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12064:	786a      	ldrb	r2, [r5, #1]
   12066:	40a3      	lsls	r3, r4
   12068:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1206a:	2206      	movs	r2, #6
   1206c:	3101      	adds	r1, #1
   1206e:	fb02 5004 	mla	r0, r2, r4, r5
   12072:	4431      	add	r1, r6
   12074:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12076:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12078:	f7ef fdc0 	bl	1bfc <memcpy>
   1207c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1207e:	2c08      	cmp	r4, #8
   12080:	d1e3      	bne.n	1204a <filter_rl_update+0xa>
}
   12082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12084:	200012e4 	.word	0x200012e4
   12088:	20001425 	.word	0x20001425

0001208c <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1208c:	2807      	cmp	r0, #7
   1208e:	d80c      	bhi.n	120aa <ctrl_lrpa_get+0x1e>
   12090:	2328      	movs	r3, #40	; 0x28
   12092:	4358      	muls	r0, r3
   12094:	4a06      	ldr	r2, [pc, #24]	; (120b0 <ctrl_lrpa_get+0x24>)
   12096:	5c13      	ldrb	r3, [r2, r0]
   12098:	1811      	adds	r1, r2, r0
   1209a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1209e:	b128      	cbz	r0, 120ac <ctrl_lrpa_get+0x20>
   120a0:	f3c3 0040 	ubfx	r0, r3, #1, #1
   120a4:	b110      	cbz	r0, 120ac <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   120a6:	6a48      	ldr	r0, [r1, #36]	; 0x24
   120a8:	4770      	bx	lr
		return NULL;
   120aa:	2000      	movs	r0, #0
}
   120ac:	4770      	bx	lr
   120ae:	bf00      	nop
   120b0:	200012e4 	.word	0x200012e4

000120b4 <ctrl_irks_get>:
	*count = peer_irk_count;
   120b4:	4b02      	ldr	r3, [pc, #8]	; (120c0 <ctrl_irks_get+0xc>)
   120b6:	781b      	ldrb	r3, [r3, #0]
   120b8:	7003      	strb	r3, [r0, #0]
}
   120ba:	4802      	ldr	r0, [pc, #8]	; (120c4 <ctrl_irks_get+0x10>)
   120bc:	4770      	bx	lr
   120be:	bf00      	nop
   120c0:	2000125a 	.word	0x2000125a
   120c4:	20001263 	.word	0x20001263

000120c8 <ctrl_rl_idx>:
{
   120c8:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   120ca:	b320      	cbz	r0, 12116 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   120cc:	2907      	cmp	r1, #7
   120ce:	d90e      	bls.n	120ee <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   120d0:	4b1d      	ldr	r3, [pc, #116]	; (12148 <ctrl_rl_idx+0x80>)
   120d2:	9301      	str	r3, [sp, #4]
   120d4:	9300      	str	r3, [sp, #0]
   120d6:	4a1d      	ldr	r2, [pc, #116]	; (1214c <ctrl_rl_idx+0x84>)
   120d8:	4b1d      	ldr	r3, [pc, #116]	; (12150 <ctrl_rl_idx+0x88>)
   120da:	491e      	ldr	r1, [pc, #120]	; (12154 <ctrl_rl_idx+0x8c>)
   120dc:	481e      	ldr	r0, [pc, #120]	; (12158 <ctrl_rl_idx+0x90>)
   120de:	f7ee ff55 	bl	f8c <printk>
   120e2:	4040      	eors	r0, r0
   120e4:	f380 8811 	msr	BASEPRI, r0
   120e8:	f04f 0004 	mov.w	r0, #4
   120ec:	df02      	svc	2
   120ee:	4b1b      	ldr	r3, [pc, #108]	; (1215c <ctrl_rl_idx+0x94>)
   120f0:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   120f4:	07d2      	lsls	r2, r2, #31
   120f6:	d407      	bmi.n	12108 <ctrl_rl_idx+0x40>
   120f8:	4b13      	ldr	r3, [pc, #76]	; (12148 <ctrl_rl_idx+0x80>)
   120fa:	9301      	str	r3, [sp, #4]
   120fc:	9300      	str	r3, [sp, #0]
   120fe:	4a13      	ldr	r2, [pc, #76]	; (1214c <ctrl_rl_idx+0x84>)
   12100:	4b13      	ldr	r3, [pc, #76]	; (12150 <ctrl_rl_idx+0x88>)
   12102:	4914      	ldr	r1, [pc, #80]	; (12154 <ctrl_rl_idx+0x8c>)
   12104:	4816      	ldr	r0, [pc, #88]	; (12160 <ctrl_rl_idx+0x98>)
   12106:	e7ea      	b.n	120de <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   12108:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1210c:	7849      	ldrb	r1, [r1, #1]
}
   1210e:	4608      	mov	r0, r1
   12110:	b003      	add	sp, #12
   12112:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   12116:	2907      	cmp	r1, #7
   12118:	d907      	bls.n	1212a <ctrl_rl_idx+0x62>
   1211a:	4b0b      	ldr	r3, [pc, #44]	; (12148 <ctrl_rl_idx+0x80>)
   1211c:	9301      	str	r3, [sp, #4]
   1211e:	9300      	str	r3, [sp, #0]
   12120:	4a0a      	ldr	r2, [pc, #40]	; (1214c <ctrl_rl_idx+0x84>)
   12122:	4b0b      	ldr	r3, [pc, #44]	; (12150 <ctrl_rl_idx+0x88>)
   12124:	490b      	ldr	r1, [pc, #44]	; (12154 <ctrl_rl_idx+0x8c>)
   12126:	480f      	ldr	r0, [pc, #60]	; (12164 <ctrl_rl_idx+0x9c>)
   12128:	e7d9      	b.n	120de <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   1212a:	2328      	movs	r3, #40	; 0x28
   1212c:	434b      	muls	r3, r1
   1212e:	4a0e      	ldr	r2, [pc, #56]	; (12168 <ctrl_rl_idx+0xa0>)
   12130:	5cd3      	ldrb	r3, [r2, r3]
   12132:	07db      	lsls	r3, r3, #31
   12134:	d4eb      	bmi.n	1210e <ctrl_rl_idx+0x46>
   12136:	4b04      	ldr	r3, [pc, #16]	; (12148 <ctrl_rl_idx+0x80>)
   12138:	9301      	str	r3, [sp, #4]
   1213a:	9300      	str	r3, [sp, #0]
   1213c:	4a03      	ldr	r2, [pc, #12]	; (1214c <ctrl_rl_idx+0x84>)
   1213e:	4b04      	ldr	r3, [pc, #16]	; (12150 <ctrl_rl_idx+0x88>)
   12140:	4904      	ldr	r1, [pc, #16]	; (12154 <ctrl_rl_idx+0x8c>)
   12142:	480a      	ldr	r0, [pc, #40]	; (1216c <ctrl_rl_idx+0xa4>)
   12144:	e7cb      	b.n	120de <ctrl_rl_idx+0x16>
   12146:	bf00      	nop
   12148:	000155c5 	.word	0x000155c5
   1214c:	0001699e 	.word	0x0001699e
   12150:	00019532 	.word	0x00019532
   12154:	000169ed 	.word	0x000169ed
   12158:	000195cc 	.word	0x000195cc
   1215c:	20001457 	.word	0x20001457
   12160:	00019699 	.word	0x00019699
   12164:	000196d0 	.word	0x000196d0
   12168:	200012e4 	.word	0x200012e4
   1216c:	0001979d 	.word	0x0001979d

00012170 <ctrl_rl_irk_idx>:
{
   12170:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   12172:	4b18      	ldr	r3, [pc, #96]	; (121d4 <ctrl_rl_irk_idx+0x64>)
   12174:	781b      	ldrb	r3, [r3, #0]
   12176:	4283      	cmp	r3, r0
   12178:	d80e      	bhi.n	12198 <ctrl_rl_irk_idx+0x28>
   1217a:	4b17      	ldr	r3, [pc, #92]	; (121d8 <ctrl_rl_irk_idx+0x68>)
   1217c:	9301      	str	r3, [sp, #4]
   1217e:	9300      	str	r3, [sp, #0]
   12180:	4a16      	ldr	r2, [pc, #88]	; (121dc <ctrl_rl_irk_idx+0x6c>)
   12182:	4b17      	ldr	r3, [pc, #92]	; (121e0 <ctrl_rl_irk_idx+0x70>)
   12184:	4917      	ldr	r1, [pc, #92]	; (121e4 <ctrl_rl_irk_idx+0x74>)
   12186:	4818      	ldr	r0, [pc, #96]	; (121e8 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   12188:	f7ee ff00 	bl	f8c <printk>
   1218c:	4040      	eors	r0, r0
   1218e:	f380 8811 	msr	BASEPRI, r0
   12192:	f04f 0004 	mov.w	r0, #4
   12196:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   12198:	4b14      	ldr	r3, [pc, #80]	; (121ec <ctrl_rl_irk_idx+0x7c>)
   1219a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1219c:	2807      	cmp	r0, #7
   1219e:	d907      	bls.n	121b0 <ctrl_rl_irk_idx+0x40>
   121a0:	4b0d      	ldr	r3, [pc, #52]	; (121d8 <ctrl_rl_irk_idx+0x68>)
   121a2:	9301      	str	r3, [sp, #4]
   121a4:	9300      	str	r3, [sp, #0]
   121a6:	4a0d      	ldr	r2, [pc, #52]	; (121dc <ctrl_rl_irk_idx+0x6c>)
   121a8:	4b0d      	ldr	r3, [pc, #52]	; (121e0 <ctrl_rl_irk_idx+0x70>)
   121aa:	490e      	ldr	r1, [pc, #56]	; (121e4 <ctrl_rl_irk_idx+0x74>)
   121ac:	4810      	ldr	r0, [pc, #64]	; (121f0 <ctrl_rl_irk_idx+0x80>)
   121ae:	e7eb      	b.n	12188 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   121b0:	2328      	movs	r3, #40	; 0x28
   121b2:	4343      	muls	r3, r0
   121b4:	4a0f      	ldr	r2, [pc, #60]	; (121f4 <ctrl_rl_irk_idx+0x84>)
   121b6:	5cd3      	ldrb	r3, [r2, r3]
   121b8:	07db      	lsls	r3, r3, #31
   121ba:	d407      	bmi.n	121cc <ctrl_rl_irk_idx+0x5c>
   121bc:	4b06      	ldr	r3, [pc, #24]	; (121d8 <ctrl_rl_irk_idx+0x68>)
   121be:	9301      	str	r3, [sp, #4]
   121c0:	9300      	str	r3, [sp, #0]
   121c2:	4a06      	ldr	r2, [pc, #24]	; (121dc <ctrl_rl_irk_idx+0x6c>)
   121c4:	4b06      	ldr	r3, [pc, #24]	; (121e0 <ctrl_rl_irk_idx+0x70>)
   121c6:	4907      	ldr	r1, [pc, #28]	; (121e4 <ctrl_rl_irk_idx+0x74>)
   121c8:	480b      	ldr	r0, [pc, #44]	; (121f8 <ctrl_rl_irk_idx+0x88>)
   121ca:	e7dd      	b.n	12188 <ctrl_rl_irk_idx+0x18>
}
   121cc:	b003      	add	sp, #12
   121ce:	f85d fb04 	ldr.w	pc, [sp], #4
   121d2:	bf00      	nop
   121d4:	2000125a 	.word	0x2000125a
   121d8:	000155c5 	.word	0x000155c5
   121dc:	0001699e 	.word	0x0001699e
   121e0:	0001953e 	.word	0x0001953e
   121e4:	000169ed 	.word	0x000169ed
   121e8:	000197ca 	.word	0x000197ca
   121ec:	2000125b 	.word	0x2000125b
   121f0:	00019808 	.word	0x00019808
   121f4:	200012e4 	.word	0x200012e4
   121f8:	0001979d 	.word	0x0001979d

000121fc <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   121fc:	2807      	cmp	r0, #7
{
   121fe:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   12200:	d819      	bhi.n	12236 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   12202:	2328      	movs	r3, #40	; 0x28
   12204:	4358      	muls	r0, r3
   12206:	4b0d      	ldr	r3, [pc, #52]	; (1223c <ctrl_irk_whitelisted+0x40>)
   12208:	5c18      	ldrb	r0, [r3, r0]
   1220a:	07c3      	lsls	r3, r0, #31
   1220c:	d40e      	bmi.n	1222c <ctrl_irk_whitelisted+0x30>
   1220e:	4b0c      	ldr	r3, [pc, #48]	; (12240 <ctrl_irk_whitelisted+0x44>)
   12210:	9301      	str	r3, [sp, #4]
   12212:	9300      	str	r3, [sp, #0]
   12214:	4a0b      	ldr	r2, [pc, #44]	; (12244 <ctrl_irk_whitelisted+0x48>)
   12216:	4b0c      	ldr	r3, [pc, #48]	; (12248 <ctrl_irk_whitelisted+0x4c>)
   12218:	490c      	ldr	r1, [pc, #48]	; (1224c <ctrl_irk_whitelisted+0x50>)
   1221a:	480d      	ldr	r0, [pc, #52]	; (12250 <ctrl_irk_whitelisted+0x54>)
   1221c:	f7ee feb6 	bl	f8c <printk>
   12220:	4040      	eors	r0, r0
   12222:	f380 8811 	msr	BASEPRI, r0
   12226:	f04f 0004 	mov.w	r0, #4
   1222a:	df02      	svc	2
	return rl[rl_idx].wl;
   1222c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   12230:	b003      	add	sp, #12
   12232:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   12236:	2000      	movs	r0, #0
   12238:	e7fa      	b.n	12230 <ctrl_irk_whitelisted+0x34>
   1223a:	bf00      	nop
   1223c:	200012e4 	.word	0x200012e4
   12240:	000155c5 	.word	0x000155c5
   12244:	0001699e 	.word	0x0001699e
   12248:	0001954e 	.word	0x0001954e
   1224c:	000169ed 	.word	0x000169ed
   12250:	0001959a 	.word	0x0001959a

00012254 <ctrl_filter_get>:
}
   12254:	4b03      	ldr	r3, [pc, #12]	; (12264 <ctrl_filter_get+0x10>)
   12256:	4a04      	ldr	r2, [pc, #16]	; (12268 <ctrl_filter_get+0x14>)
   12258:	2800      	cmp	r0, #0
   1225a:	bf14      	ite	ne
   1225c:	4610      	movne	r0, r2
   1225e:	4618      	moveq	r0, r3
   12260:	4770      	bx	lr
   12262:	bf00      	nop
   12264:	20001425 	.word	0x20001425
   12268:	20001497 	.word	0x20001497

0001226c <ll_wl_size_get>:
   1226c:	2008      	movs	r0, #8
   1226e:	4770      	bx	lr

00012270 <ll_wl_clear>:
{
   12270:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12272:	f7fe fd91 	bl	10d98 <radio_adv_filter_pol_get>
   12276:	4604      	mov	r4, r0
   12278:	b110      	cbz	r0, 12280 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1227a:	240c      	movs	r4, #12
}
   1227c:	4620      	mov	r0, r4
   1227e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12280:	f7fe fdac 	bl	10ddc <radio_scan_filter_pol_get>
   12284:	07c3      	lsls	r3, r0, #31
   12286:	d4f8      	bmi.n	1227a <ll_wl_clear+0xa>
		wl[i].taken = 0;
   12288:	4a07      	ldr	r2, [pc, #28]	; (122a8 <ll_wl_clear+0x38>)
   1228a:	4623      	mov	r3, r4
   1228c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12290:	f36f 0100 	bfc	r1, #0, #1
   12294:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12298:	3301      	adds	r3, #1
   1229a:	2b08      	cmp	r3, #8
   1229c:	d1f6      	bne.n	1228c <ll_wl_clear+0x1c>
	wl_anon = 0;
   1229e:	4b03      	ldr	r3, [pc, #12]	; (122ac <ll_wl_clear+0x3c>)
   122a0:	2200      	movs	r2, #0
   122a2:	701a      	strb	r2, [r3, #0]
	return 0;
   122a4:	e7ea      	b.n	1227c <ll_wl_clear+0xc>
   122a6:	bf00      	nop
   122a8:	20001457 	.word	0x20001457
   122ac:	20001948 	.word	0x20001948

000122b0 <ll_wl_remove>:
{
   122b0:	b538      	push	{r3, r4, r5, lr}
   122b2:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   122b4:	f7fe fd70 	bl	10d98 <radio_adv_filter_pol_get>
   122b8:	4604      	mov	r4, r0
   122ba:	b110      	cbz	r0, 122c2 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   122bc:	240c      	movs	r4, #12
}
   122be:	4620      	mov	r0, r4
   122c0:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   122c2:	f7fe fd8b 	bl	10ddc <radio_scan_filter_pol_get>
   122c6:	07c3      	lsls	r3, r0, #31
   122c8:	d4f8      	bmi.n	122bc <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   122ca:	7828      	ldrb	r0, [r5, #0]
   122cc:	28ff      	cmp	r0, #255	; 0xff
   122ce:	d102      	bne.n	122d6 <ll_wl_remove+0x26>
		wl_anon = 0;
   122d0:	4b0f      	ldr	r3, [pc, #60]	; (12310 <ll_wl_remove+0x60>)
   122d2:	701c      	strb	r4, [r3, #0]
		return 0;
   122d4:	e7f3      	b.n	122be <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   122d6:	4622      	mov	r2, r4
   122d8:	1c69      	adds	r1, r5, #1
   122da:	f7ff fe33 	bl	11f44 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   122de:	2807      	cmp	r0, #7
   122e0:	d813      	bhi.n	1230a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   122e2:	4b0c      	ldr	r3, [pc, #48]	; (12314 <ll_wl_remove+0x64>)
   122e4:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   122e8:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   122ea:	2d07      	cmp	r5, #7
   122ec:	d806      	bhi.n	122fc <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   122ee:	2228      	movs	r2, #40	; 0x28
   122f0:	4909      	ldr	r1, [pc, #36]	; (12318 <ll_wl_remove+0x68>)
   122f2:	436a      	muls	r2, r5
   122f4:	5c8d      	ldrb	r5, [r1, r2]
   122f6:	f364 1545 	bfi	r5, r4, #5, #1
   122fa:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   122fc:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   12300:	f36f 0200 	bfc	r2, #0, #1
   12304:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   12308:	e7d9      	b.n	122be <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1230a:	2402      	movs	r4, #2
   1230c:	e7d7      	b.n	122be <ll_wl_remove+0xe>
   1230e:	bf00      	nop
   12310:	20001948 	.word	0x20001948
   12314:	20001457 	.word	0x20001457
   12318:	200012e4 	.word	0x200012e4

0001231c <ll_filters_scan_update>:
{
   1231c:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1231e:	4b0d      	ldr	r3, [pc, #52]	; (12354 <ll_filters_scan_update+0x38>)
   12320:	2200      	movs	r2, #0
   12322:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   12324:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   12326:	07c3      	lsls	r3, r0, #31
   12328:	d504      	bpl.n	12334 <ll_filters_scan_update+0x18>
   1232a:	f7fe fd35 	bl	10d98 <radio_adv_filter_pol_get>
   1232e:	b908      	cbnz	r0, 12334 <ll_filters_scan_update+0x18>
		filter_wl_update();
   12330:	f7ff fe3a 	bl	11fa8 <filter_wl_update>
	filter->enable_bitmask = 0;
   12334:	4b08      	ldr	r3, [pc, #32]	; (12358 <ll_filters_scan_update+0x3c>)
   12336:	2200      	movs	r2, #0
   12338:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1233a:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   1233c:	4b07      	ldr	r3, [pc, #28]	; (1235c <ll_filters_scan_update+0x40>)
   1233e:	781b      	ldrb	r3, [r3, #0]
   12340:	b133      	cbz	r3, 12350 <ll_filters_scan_update+0x34>
   12342:	f7fe fd21 	bl	10d88 <ll_adv_is_enabled>
   12346:	b918      	cbnz	r0, 12350 <ll_filters_scan_update+0x34>
}
   12348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1234c:	f7ff be78 	b.w	12040 <filter_rl_update>
   12350:	bd08      	pop	{r3, pc}
   12352:	bf00      	nop
   12354:	20001497 	.word	0x20001497
   12358:	20001425 	.word	0x20001425
   1235c:	20001424 	.word	0x20001424

00012360 <ll_rl_find>:
{
   12360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12364:	468a      	mov	sl, r1
	if (free) {
   12366:	4614      	mov	r4, r2
   12368:	b10a      	cbz	r2, 1236e <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1236a:	23ff      	movs	r3, #255	; 0xff
   1236c:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1236e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 123c4 <ll_rl_find+0x64>
{
   12372:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12374:	f000 0901 	and.w	r9, r0, #1
   12378:	2628      	movs	r6, #40	; 0x28
   1237a:	436e      	muls	r6, r5
   1237c:	b2ef      	uxtb	r7, r5
   1237e:	f818 3006 	ldrb.w	r3, [r8, r6]
   12382:	07da      	lsls	r2, r3, #31
   12384:	d51a      	bpl.n	123bc <ll_rl_find+0x5c>
   12386:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1238a:	454b      	cmp	r3, r9
   1238c:	d10f      	bne.n	123ae <ll_rl_find+0x4e>
   1238e:	1c70      	adds	r0, r6, #1
   12390:	2206      	movs	r2, #6
   12392:	4651      	mov	r1, sl
   12394:	4440      	add	r0, r8
   12396:	f7ef fc1c 	bl	1bd2 <memcmp>
   1239a:	b160      	cbz	r0, 123b6 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1239c:	b13c      	cbz	r4, 123ae <ll_rl_find+0x4e>
   1239e:	f818 3006 	ldrb.w	r3, [r8, r6]
   123a2:	07db      	lsls	r3, r3, #31
   123a4:	d403      	bmi.n	123ae <ll_rl_find+0x4e>
   123a6:	7823      	ldrb	r3, [r4, #0]
   123a8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   123aa:	bf08      	it	eq
   123ac:	7027      	strbeq	r7, [r4, #0]
   123ae:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   123b0:	2d08      	cmp	r5, #8
   123b2:	d1e1      	bne.n	12378 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   123b4:	27ff      	movs	r7, #255	; 0xff
}
   123b6:	4638      	mov	r0, r7
   123b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   123bc:	2c00      	cmp	r4, #0
   123be:	d1f2      	bne.n	123a6 <ll_rl_find+0x46>
   123c0:	e7f5      	b.n	123ae <ll_rl_find+0x4e>
   123c2:	bf00      	nop
   123c4:	200012e4 	.word	0x200012e4

000123c8 <ll_wl_add>:
{
   123c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   123cc:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   123ce:	f7fe fce3 	bl	10d98 <radio_adv_filter_pol_get>
   123d2:	4605      	mov	r5, r0
   123d4:	b120      	cbz	r0, 123e0 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   123d6:	250c      	movs	r5, #12
}
   123d8:	4628      	mov	r0, r5
   123da:	b002      	add	sp, #8
   123dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   123e0:	f7fe fcfc 	bl	10ddc <radio_scan_filter_pol_get>
   123e4:	07c3      	lsls	r3, r0, #31
   123e6:	d4f6      	bmi.n	123d6 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   123e8:	7838      	ldrb	r0, [r7, #0]
   123ea:	28ff      	cmp	r0, #255	; 0xff
   123ec:	d103      	bne.n	123f6 <ll_wl_add+0x2e>
		wl_anon = 1;
   123ee:	4b1f      	ldr	r3, [pc, #124]	; (1246c <ll_wl_add+0xa4>)
   123f0:	2201      	movs	r2, #1
   123f2:	701a      	strb	r2, [r3, #0]
		return 0;
   123f4:	e7f0      	b.n	123d8 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   123f6:	f107 0801 	add.w	r8, r7, #1
   123fa:	f10d 0207 	add.w	r2, sp, #7
   123fe:	4641      	mov	r1, r8
   12400:	f7ff fda0 	bl	11f44 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   12404:	2807      	cmp	r0, #7
   12406:	d92d      	bls.n	12464 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   12408:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1240c:	2e07      	cmp	r6, #7
   1240e:	d82b      	bhi.n	12468 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   12410:	4c17      	ldr	r4, [pc, #92]	; (12470 <ll_wl_add+0xa8>)
   12412:	783a      	ldrb	r2, [r7, #0]
   12414:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   12418:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1241c:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   12420:	4641      	mov	r1, r8
   12422:	2206      	movs	r2, #6
   12424:	3002      	adds	r0, #2
   12426:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1242a:	f7ef fbe7 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1242e:	462a      	mov	r2, r5
   12430:	4641      	mov	r1, r8
   12432:	7838      	ldrb	r0, [r7, #0]
   12434:	f7ff ff94 	bl	12360 <ll_rl_find>
   12438:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   1243a:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   1243c:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   1243e:	d80e      	bhi.n	1245e <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   12440:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   12442:	2328      	movs	r3, #40	; 0x28
   12444:	4a0b      	ldr	r2, [pc, #44]	; (12474 <ll_wl_add+0xac>)
   12446:	4358      	muls	r0, r3
   12448:	5c13      	ldrb	r3, [r2, r0]
   1244a:	f043 0320 	orr.w	r3, r3, #32
   1244e:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   12450:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   12454:	f043 0301 	orr.w	r3, r3, #1
   12458:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1245c:	e7bc      	b.n	123d8 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1245e:	22ff      	movs	r2, #255	; 0xff
   12460:	705a      	strb	r2, [r3, #1]
   12462:	e7f5      	b.n	12450 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   12464:	2512      	movs	r5, #18
   12466:	e7b7      	b.n	123d8 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12468:	2507      	movs	r5, #7
	return wl_add(addr);
   1246a:	e7b5      	b.n	123d8 <ll_wl_add+0x10>
   1246c:	20001948 	.word	0x20001948
   12470:	20001457 	.word	0x20001457
   12474:	200012e4 	.word	0x200012e4

00012478 <ctrl_rl_idx_allowed>:
{
   12478:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1247a:	4b12      	ldr	r3, [pc, #72]	; (124c4 <ctrl_rl_idx_allowed+0x4c>)
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	b1f3      	cbz	r3, 124be <ctrl_rl_idx_allowed+0x46>
   12480:	2907      	cmp	r1, #7
   12482:	d81c      	bhi.n	124be <ctrl_rl_idx_allowed+0x46>
   12484:	b9d8      	cbnz	r0, 124be <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   12486:	2328      	movs	r3, #40	; 0x28
   12488:	4359      	muls	r1, r3
   1248a:	4b0f      	ldr	r3, [pc, #60]	; (124c8 <ctrl_rl_idx_allowed+0x50>)
   1248c:	5c58      	ldrb	r0, [r3, r1]
   1248e:	07c2      	lsls	r2, r0, #31
   12490:	d40e      	bmi.n	124b0 <ctrl_rl_idx_allowed+0x38>
   12492:	4b0e      	ldr	r3, [pc, #56]	; (124cc <ctrl_rl_idx_allowed+0x54>)
   12494:	9301      	str	r3, [sp, #4]
   12496:	9300      	str	r3, [sp, #0]
   12498:	4a0d      	ldr	r2, [pc, #52]	; (124d0 <ctrl_rl_idx_allowed+0x58>)
   1249a:	4b0e      	ldr	r3, [pc, #56]	; (124d4 <ctrl_rl_idx_allowed+0x5c>)
   1249c:	490e      	ldr	r1, [pc, #56]	; (124d8 <ctrl_rl_idx_allowed+0x60>)
   1249e:	480f      	ldr	r0, [pc, #60]	; (124dc <ctrl_rl_idx_allowed+0x64>)
   124a0:	f7ee fd74 	bl	f8c <printk>
   124a4:	4040      	eors	r0, r0
   124a6:	f380 8811 	msr	BASEPRI, r0
   124aa:	f04f 0004 	mov.w	r0, #4
   124ae:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   124b0:	0743      	lsls	r3, r0, #29
   124b2:	d504      	bpl.n	124be <ctrl_rl_idx_allowed+0x46>
   124b4:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   124b8:	b003      	add	sp, #12
   124ba:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   124be:	2001      	movs	r0, #1
   124c0:	e7fa      	b.n	124b8 <ctrl_rl_idx_allowed+0x40>
   124c2:	bf00      	nop
   124c4:	20001424 	.word	0x20001424
   124c8:	200012e4 	.word	0x200012e4
   124cc:	000155c5 	.word	0x000155c5
   124d0:	0001699e 	.word	0x0001699e
   124d4:	00019563 	.word	0x00019563
   124d8:	000169ed 	.word	0x000169ed
   124dc:	0001959a 	.word	0x0001959a

000124e0 <ll_rl_id_addr_get>:
{
   124e0:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   124e2:	2b07      	cmp	r3, #7
{
   124e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   124e6:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   124e8:	d90e      	bls.n	12508 <ll_rl_id_addr_get+0x28>
   124ea:	4b15      	ldr	r3, [pc, #84]	; (12540 <ll_rl_id_addr_get+0x60>)
   124ec:	9301      	str	r3, [sp, #4]
   124ee:	9300      	str	r3, [sp, #0]
   124f0:	4a14      	ldr	r2, [pc, #80]	; (12544 <ll_rl_id_addr_get+0x64>)
   124f2:	4b15      	ldr	r3, [pc, #84]	; (12548 <ll_rl_id_addr_get+0x68>)
   124f4:	4915      	ldr	r1, [pc, #84]	; (1254c <ll_rl_id_addr_get+0x6c>)
   124f6:	4816      	ldr	r0, [pc, #88]	; (12550 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   124f8:	f7ee fd48 	bl	f8c <printk>
   124fc:	4040      	eors	r0, r0
   124fe:	f380 8811 	msr	BASEPRI, r0
   12502:	f04f 0004 	mov.w	r0, #4
   12506:	df02      	svc	2
   12508:	2528      	movs	r5, #40	; 0x28
   1250a:	4c12      	ldr	r4, [pc, #72]	; (12554 <ll_rl_id_addr_get+0x74>)
   1250c:	fb05 f203 	mul.w	r2, r5, r3
   12510:	5ca2      	ldrb	r2, [r4, r2]
   12512:	f012 0f01 	tst.w	r2, #1
   12516:	d107      	bne.n	12528 <ll_rl_id_addr_get+0x48>
   12518:	4b09      	ldr	r3, [pc, #36]	; (12540 <ll_rl_id_addr_get+0x60>)
   1251a:	9301      	str	r3, [sp, #4]
   1251c:	9300      	str	r3, [sp, #0]
   1251e:	4a09      	ldr	r2, [pc, #36]	; (12544 <ll_rl_id_addr_get+0x64>)
   12520:	4b09      	ldr	r3, [pc, #36]	; (12548 <ll_rl_id_addr_get+0x68>)
   12522:	490a      	ldr	r1, [pc, #40]	; (1254c <ll_rl_id_addr_get+0x6c>)
   12524:	480c      	ldr	r0, [pc, #48]	; (12558 <ll_rl_id_addr_get+0x78>)
   12526:	e7e7      	b.n	124f8 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   12528:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1252c:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1252e:	fb05 4103 	mla	r1, r5, r3, r4
   12532:	2206      	movs	r2, #6
   12534:	3101      	adds	r1, #1
}
   12536:	b003      	add	sp, #12
   12538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1253c:	f7ef bb5e 	b.w	1bfc <memcpy>
   12540:	000155c5 	.word	0x000155c5
   12544:	0001699e 	.word	0x0001699e
   12548:	00019577 	.word	0x00019577
   1254c:	000169ed 	.word	0x000169ed
   12550:	0001982f 	.word	0x0001982f
   12554:	200012e4 	.word	0x200012e4
   12558:	0001959a 	.word	0x0001959a

0001255c <ctrl_rl_addr_allowed>:
{
   1255c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   12560:	4b1a      	ldr	r3, [pc, #104]	; (125cc <ctrl_rl_addr_allowed+0x70>)
   12562:	781b      	ldrb	r3, [r3, #0]
   12564:	b37b      	cbz	r3, 125c6 <ctrl_rl_addr_allowed+0x6a>
   12566:	7813      	ldrb	r3, [r2, #0]
   12568:	2bff      	cmp	r3, #255	; 0xff
   1256a:	d12c      	bne.n	125c6 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1256c:	4e18      	ldr	r6, [pc, #96]	; (125d0 <ctrl_rl_addr_allowed+0x74>)
   1256e:	2400      	movs	r4, #0
   12570:	f04f 0828 	mov.w	r8, #40	; 0x28
   12574:	46b6      	mov	lr, r6
   12576:	fb08 f304 	mul.w	r3, r8, r4
   1257a:	fa5f fc84 	uxtb.w	ip, r4
   1257e:	5cf7      	ldrb	r7, [r6, r3]
   12580:	f017 0f01 	tst.w	r7, #1
   12584:	eb06 0503 	add.w	r5, r6, r3
   12588:	d01a      	beq.n	125c0 <ctrl_rl_addr_allowed+0x64>
   1258a:	f3c7 1780 	ubfx	r7, r7, #6, #1
   1258e:	4287      	cmp	r7, r0
   12590:	d116      	bne.n	125c0 <ctrl_rl_addr_allowed+0x64>
   12592:	3306      	adds	r3, #6
   12594:	1e4f      	subs	r7, r1, #1
   12596:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   12598:	f815 af01 	ldrb.w	sl, [r5, #1]!
   1259c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   125a0:	45ca      	cmp	sl, r9
   125a2:	d10d      	bne.n	125c0 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   125a4:	429d      	cmp	r5, r3
   125a6:	d1f7      	bne.n	12598 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   125a8:	2328      	movs	r3, #40	; 0x28
   125aa:	435c      	muls	r4, r3
				*rl_idx = i;
   125ac:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   125b0:	f81e 0004 	ldrb.w	r0, [lr, r4]
   125b4:	0743      	lsls	r3, r0, #29
   125b6:	d506      	bpl.n	125c6 <ctrl_rl_addr_allowed+0x6a>
   125b8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   125bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   125c0:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   125c2:	2c08      	cmp	r4, #8
   125c4:	d1d7      	bne.n	12576 <ctrl_rl_addr_allowed+0x1a>
   125c6:	2001      	movs	r0, #1
}
   125c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   125cc:	20001424 	.word	0x20001424
   125d0:	200012e4 	.word	0x200012e4

000125d4 <ctrl_rl_addr_resolve>:
{
   125d4:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   125d6:	4c0d      	ldr	r4, [pc, #52]	; (1260c <ctrl_rl_addr_resolve+0x38>)
   125d8:	7824      	ldrb	r4, [r4, #0]
   125da:	b1a4      	cbz	r4, 12606 <ctrl_rl_addr_resolve+0x32>
   125dc:	2a07      	cmp	r2, #7
   125de:	d812      	bhi.n	12606 <ctrl_rl_addr_resolve+0x32>
   125e0:	2528      	movs	r5, #40	; 0x28
   125e2:	4c0b      	ldr	r4, [pc, #44]	; (12610 <ctrl_rl_addr_resolve+0x3c>)
   125e4:	fb05 f602 	mul.w	r6, r5, r2
   125e8:	5da6      	ldrb	r6, [r4, r6]
   125ea:	0736      	lsls	r6, r6, #28
   125ec:	d50b      	bpl.n	12606 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   125ee:	b150      	cbz	r0, 12606 <ctrl_rl_addr_resolve+0x32>
   125f0:	794b      	ldrb	r3, [r1, #5]
   125f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   125f6:	2b40      	cmp	r3, #64	; 0x40
   125f8:	d105      	bne.n	12606 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   125fa:	fb05 4202 	mla	r2, r5, r2, r4
   125fe:	1dd0      	adds	r0, r2, #7
}
   12600:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12602:	f7ef bc10 	b.w	1e26 <bt_rpa_irk_matches>
}
   12606:	2000      	movs	r0, #0
   12608:	bc70      	pop	{r4, r5, r6}
   1260a:	4770      	bx	lr
   1260c:	20001424 	.word	0x20001424
   12610:	200012e4 	.word	0x200012e4

00012614 <ctrl_rl_enabled>:
	return rl_enable;
   12614:	4b02      	ldr	r3, [pc, #8]	; (12620 <ctrl_rl_enabled+0xc>)
   12616:	7818      	ldrb	r0, [r3, #0]
}
   12618:	3000      	adds	r0, #0
   1261a:	bf18      	it	ne
   1261c:	2001      	movne	r0, #1
   1261e:	4770      	bx	lr
   12620:	20001424 	.word	0x20001424

00012624 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   12624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12628:	b089      	sub	sp, #36	; 0x24
   1262a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   1262c:	f002 fa70 	bl	14b10 <_impl_k_uptime_get>
   12630:	4680      	mov	r8, r0
   12632:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   12634:	2c00      	cmp	r4, #0
   12636:	d148      	bne.n	126ca <ll_rl_rpa_update+0xa6>
   12638:	4b3b      	ldr	r3, [pc, #236]	; (12728 <ll_rl_rpa_update+0x104>)
   1263a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1263e:	1c5c      	adds	r4, r3, #1
   12640:	bf08      	it	eq
   12642:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   12646:	d040      	beq.n	126ca <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   12648:	1a82      	subs	r2, r0, r2
   1264a:	eb61 0303 	sbc.w	r3, r1, r3
   1264e:	4937      	ldr	r1, [pc, #220]	; (1272c <ll_rl_rpa_update+0x108>)
   12650:	6808      	ldr	r0, [r1, #0]
   12652:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   12654:	4282      	cmp	r2, r0
   12656:	418b      	sbcs	r3, r1
   12658:	bfac      	ite	ge
   1265a:	2601      	movge	r6, #1
   1265c:	2600      	movlt	r6, #0
   1265e:	4d34      	ldr	r5, [pc, #208]	; (12730 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12660:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   12664:	2400      	movs	r4, #0
   12666:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12668:	2328      	movs	r3, #40	; 0x28
   1266a:	4363      	muls	r3, r4
   1266c:	f81b 3003 	ldrb.w	r3, [fp, r3]
   12670:	07d8      	lsls	r0, r3, #31
   12672:	d54d      	bpl.n	12710 <ll_rl_rpa_update+0xec>
   12674:	b90e      	cbnz	r6, 1267a <ll_rl_rpa_update+0x56>
   12676:	0799      	lsls	r1, r3, #30
   12678:	d44a      	bmi.n	12710 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   1267a:	2328      	movs	r3, #40	; 0x28
   1267c:	4363      	muls	r3, r4
   1267e:	5cfb      	ldrb	r3, [r7, r3]
   12680:	075a      	lsls	r2, r3, #29
   12682:	d524      	bpl.n	126ce <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   12684:	7c2a      	ldrb	r2, [r5, #16]
   12686:	4b2b      	ldr	r3, [pc, #172]	; (12734 <ll_rl_rpa_update+0x110>)
   12688:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1268c:	f103 0210 	add.w	r2, r3, #16
   12690:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   12694:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   12698:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   1269c:	429a      	cmp	r2, r3
   1269e:	d1f9      	bne.n	12694 <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   126a0:	f105 0117 	add.w	r1, r5, #23
   126a4:	a804      	add	r0, sp, #16
   126a6:	f7ef fbd1 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   126aa:	b180      	cbz	r0, 126ce <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   126ac:	4b22      	ldr	r3, [pc, #136]	; (12738 <ll_rl_rpa_update+0x114>)
   126ae:	9301      	str	r3, [sp, #4]
   126b0:	9300      	str	r3, [sp, #0]
   126b2:	4a22      	ldr	r2, [pc, #136]	; (1273c <ll_rl_rpa_update+0x118>)
   126b4:	4b22      	ldr	r3, [pc, #136]	; (12740 <ll_rl_rpa_update+0x11c>)
   126b6:	4923      	ldr	r1, [pc, #140]	; (12744 <ll_rl_rpa_update+0x120>)
   126b8:	4823      	ldr	r0, [pc, #140]	; (12748 <ll_rl_rpa_update+0x124>)
   126ba:	f7ee fc67 	bl	f8c <printk>
   126be:	4040      	eors	r0, r0
   126c0:	f380 8811 	msr	BASEPRI, r0
   126c4:	f04f 0004 	mov.w	r0, #4
   126c8:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   126ca:	2601      	movs	r6, #1
   126cc:	e7c7      	b.n	1265e <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   126ce:	2328      	movs	r3, #40	; 0x28
   126d0:	4363      	muls	r3, r4
   126d2:	5cfb      	ldrb	r3, [r7, r3]
   126d4:	071b      	lsls	r3, r3, #28
   126d6:	d515      	bpl.n	12704 <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   126d8:	f10d 0a10 	add.w	sl, sp, #16
   126dc:	4651      	mov	r1, sl
   126de:	4628      	mov	r0, r5
   126e0:	f7ef fbb4 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   126e4:	2800      	cmp	r0, #0
   126e6:	d1e1      	bne.n	126ac <ll_rl_rpa_update+0x88>
   126e8:	4b18      	ldr	r3, [pc, #96]	; (1274c <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   126ea:	f8c5 a01d 	str.w	sl, [r5, #29]
   126ee:	2206      	movs	r2, #6
   126f0:	fb02 3304 	mla	r3, r2, r4, r3
   126f4:	4618      	mov	r0, r3
   126f6:	4651      	mov	r1, sl
   126f8:	9303      	str	r3, [sp, #12]
   126fa:	f7ef fa7f 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   126fe:	9b03      	ldr	r3, [sp, #12]
   12700:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   12704:	2328      	movs	r3, #40	; 0x28
   12706:	4363      	muls	r3, r4
   12708:	5cfa      	ldrb	r2, [r7, r3]
   1270a:	f042 0202 	orr.w	r2, r2, #2
   1270e:	54fa      	strb	r2, [r7, r3]
   12710:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12712:	2c08      	cmp	r4, #8
   12714:	f105 0528 	add.w	r5, r5, #40	; 0x28
   12718:	d1a6      	bne.n	12668 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   1271a:	b116      	cbz	r6, 12722 <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   1271c:	4b02      	ldr	r3, [pc, #8]	; (12728 <ll_rl_rpa_update+0x104>)
   1271e:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   12722:	b009      	add	sp, #36	; 0x24
   12724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12728:	20001940 	.word	0x20001940
   1272c:	20001974 	.word	0x20001974
   12730:	200012eb 	.word	0x200012eb
   12734:	20001263 	.word	0x20001263
   12738:	000155c5 	.word	0x000155c5
   1273c:	0001699e 	.word	0x0001699e
   12740:	00019589 	.word	0x00019589
   12744:	000169ed 	.word	0x000169ed
   12748:	000194d7 	.word	0x000194d7
   1274c:	2000122a 	.word	0x2000122a

00012750 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   12750:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   12752:	2001      	movs	r0, #1
   12754:	f7ff ff66 	bl	12624 <ll_rl_rpa_update>
   12758:	4b03      	ldr	r3, [pc, #12]	; (12768 <rpa_timeout+0x18>)
   1275a:	4904      	ldr	r1, [pc, #16]	; (1276c <rpa_timeout+0x1c>)
   1275c:	681a      	ldr	r2, [r3, #0]
   1275e:	4804      	ldr	r0, [pc, #16]	; (12770 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   12760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12764:	f002 bcd2 	b.w	1510c <k_delayed_work_submit_to_queue>
   12768:	20001974 	.word	0x20001974
   1276c:	2000194c 	.word	0x2000194c
   12770:	200019b8 	.word	0x200019b8

00012774 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   12774:	4b07      	ldr	r3, [pc, #28]	; (12794 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   12776:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   12778:	b130      	cbz	r0, 12788 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   1277a:	b14b      	cbz	r3, 12790 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   1277c:	4b06      	ldr	r3, [pc, #24]	; (12798 <ll_adv_scan_state_cb+0x24>)
   1277e:	4907      	ldr	r1, [pc, #28]	; (1279c <ll_adv_scan_state_cb+0x28>)
   12780:	681a      	ldr	r2, [r3, #0]
   12782:	4807      	ldr	r0, [pc, #28]	; (127a0 <ll_adv_scan_state_cb+0x2c>)
   12784:	f002 bcc2 	b.w	1510c <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   12788:	b113      	cbz	r3, 12790 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   1278a:	4804      	ldr	r0, [pc, #16]	; (1279c <ll_adv_scan_state_cb+0x28>)
   1278c:	f002 bc5a 	b.w	15044 <k_delayed_work_cancel>
   12790:	4770      	bx	lr
   12792:	bf00      	nop
   12794:	20001424 	.word	0x20001424
   12798:	20001974 	.word	0x20001974
   1279c:	2000194c 	.word	0x2000194c
   127a0:	200019b8 	.word	0x200019b8

000127a4 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   127a4:	2008      	movs	r0, #8
   127a6:	4770      	bx	lr

000127a8 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   127a8:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   127aa:	f7ff fc3d 	bl	12028 <rl_access_check.constprop.1>
   127ae:	b178      	cbz	r0, 127d0 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   127b0:	4908      	ldr	r1, [pc, #32]	; (127d4 <ll_rl_clear+0x2c>)
   127b2:	2300      	movs	r3, #0
   127b4:	2428      	movs	r4, #40	; 0x28
   127b6:	fb04 f203 	mul.w	r2, r4, r3
   127ba:	3301      	adds	r3, #1
   127bc:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   127be:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   127c0:	f36f 0000 	bfc	r0, #0, #1
   127c4:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   127c6:	d1f6      	bne.n	127b6 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   127c8:	4b03      	ldr	r3, [pc, #12]	; (127d8 <ll_rl_clear+0x30>)
   127ca:	2000      	movs	r0, #0
   127cc:	7018      	strb	r0, [r3, #0]
   127ce:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   127d0:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   127d2:	bd10      	pop	{r4, pc}
   127d4:	200012e4 	.word	0x200012e4
   127d8:	2000125a 	.word	0x2000125a

000127dc <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   127dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e0:	b085      	sub	sp, #20
   127e2:	4607      	mov	r7, r0
   127e4:	4689      	mov	r9, r1
   127e6:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   127e8:	f7ff fc1e 	bl	12028 <rl_access_check.constprop.1>
   127ec:	2800      	cmp	r0, #0
   127ee:	f000 8086 	beq.w	128fe <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   127f2:	f107 0801 	add.w	r8, r7, #1
   127f6:	f10d 020f 	add.w	r2, sp, #15
   127fa:	4641      	mov	r1, r8
   127fc:	7838      	ldrb	r0, [r7, #0]
   127fe:	f7ff fdaf 	bl	12360 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   12802:	2807      	cmp	r0, #7
   12804:	d97d      	bls.n	12902 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   12806:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1280a:	2d07      	cmp	r5, #7
   1280c:	d87b      	bhi.n	12906 <ll_rl_add+0x12a>
   1280e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12812:	4c3e      	ldr	r4, [pc, #248]	; (1290c <ll_rl_add+0x130>)
   12814:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   12818:	2628      	movs	r6, #40	; 0x28
   1281a:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1281c:	f10b 0001 	add.w	r0, fp, #1
   12820:	2206      	movs	r2, #6
   12822:	4641      	mov	r1, r8
   12824:	4420      	add	r0, r4
   12826:	f7ef f9e9 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1282a:	7839      	ldrb	r1, [r7, #0]
   1282c:	5da3      	ldrb	r3, [r4, r6]
   1282e:	19a2      	adds	r2, r4, r6
   12830:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12834:	4648      	mov	r0, r9
   12836:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   12838:	9201      	str	r2, [sp, #4]
   1283a:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1283c:	f7f5 fa21 	bl	7c82 <mem_nz>
   12840:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12842:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12844:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12848:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1284a:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1284c:	f7f5 fa19 	bl	7c82 <mem_nz>
   12850:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   12852:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12854:	f000 0001 	and.w	r0, r0, #1
   12858:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   1285c:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12860:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   12862:	d138      	bne.n	128d6 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   12864:	b158      	cbz	r0, 1287e <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   12866:	f10b 0007 	add.w	r0, fp, #7
   1286a:	2210      	movs	r2, #16
   1286c:	4651      	mov	r1, sl
   1286e:	4420      	add	r0, r4
   12870:	f7ef f9c4 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
   12874:	2328      	movs	r3, #40	; 0x28
   12876:	fb03 4305 	mla	r3, r3, r5, r4
   1287a:	2200      	movs	r2, #0
   1287c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   1287e:	2628      	movs	r6, #40	; 0x28
   12880:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   12882:	f10b 0018 	add.w	r0, fp, #24
   12886:	2206      	movs	r2, #6
   12888:	2100      	movs	r1, #0
   1288a:	4420      	add	r0, r4
   1288c:	f7ef f9e2 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
   12890:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12892:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12896:	f36f 1304 	bfc	r3, #4, #1
   1289a:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1289c:	2200      	movs	r2, #0
   1289e:	4641      	mov	r1, r8
   128a0:	7838      	ldrb	r0, [r7, #0]
   128a2:	f7ff fb4f 	bl	11f44 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   128a6:	2807      	cmp	r0, #7
   128a8:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   128aa:	bf9d      	ittte	ls
   128ac:	4a18      	ldrls	r2, [pc, #96]	; (12910 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   128ae:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   128b2:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   128b6:	f36f 1345 	bfchi	r3, #5, #1
   128ba:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   128bc:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   128c0:	bf98      	it	ls
   128c2:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   128c4:	435d      	muls	r5, r3

	return 0;
   128c6:	2000      	movs	r0, #0
	rl[i].taken = 1;
   128c8:	5d63      	ldrb	r3, [r4, r5]
   128ca:	f043 0301 	orr.w	r3, r3, #1
   128ce:	5563      	strb	r3, [r4, r5]
}
   128d0:	b005      	add	sp, #20
   128d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   128d6:	4b0f      	ldr	r3, [pc, #60]	; (12914 <ll_rl_add+0x138>)
   128d8:	7819      	ldrb	r1, [r3, #0]
   128da:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   128dc:	4a0e      	ldr	r2, [pc, #56]	; (12918 <ll_rl_add+0x13c>)
   128de:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   128e0:	1c4a      	adds	r2, r1, #1
   128e2:	701a      	strb	r2, [r3, #0]
   128e4:	4b0d      	ldr	r3, [pc, #52]	; (1291c <ll_rl_add+0x140>)
   128e6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   128ea:	f109 0210 	add.w	r2, r9, #16
   128ee:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   128f0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   128f4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   128f8:	454a      	cmp	r2, r9
   128fa:	d1f9      	bne.n	128f0 <ll_rl_add+0x114>
   128fc:	e7b2      	b.n	12864 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   128fe:	200c      	movs	r0, #12
   12900:	e7e6      	b.n	128d0 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   12902:	2012      	movs	r0, #18
   12904:	e7e4      	b.n	128d0 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12906:	2007      	movs	r0, #7
   12908:	e7e2      	b.n	128d0 <ll_rl_add+0xf4>
   1290a:	bf00      	nop
   1290c:	200012e4 	.word	0x200012e4
   12910:	20001457 	.word	0x20001457
   12914:	2000125a 	.word	0x2000125a
   12918:	2000125b 	.word	0x2000125b
   1291c:	20001263 	.word	0x20001263

00012920 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   12920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12924:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   12926:	f7ff fb7f 	bl	12028 <rl_access_check.constprop.1>
   1292a:	2800      	cmp	r0, #0
   1292c:	d053      	beq.n	129d6 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1292e:	f109 0a01 	add.w	sl, r9, #1
   12932:	2200      	movs	r2, #0
   12934:	4651      	mov	r1, sl
   12936:	f899 0000 	ldrb.w	r0, [r9]
   1293a:	f7ff fd11 	bl	12360 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1293e:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12940:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   12942:	d84b      	bhi.n	129dc <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   12944:	f04f 0b28 	mov.w	fp, #40	; 0x28
   12948:	4c26      	ldr	r4, [pc, #152]	; (129e4 <ll_rl_remove+0xc4>)
   1294a:	fb0b f300 	mul.w	r3, fp, r0
   1294e:	18e2      	adds	r2, r4, r3
   12950:	5ce3      	ldrb	r3, [r4, r3]
   12952:	075b      	lsls	r3, r3, #29
   12954:	d524      	bpl.n	129a0 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12956:	4e24      	ldr	r6, [pc, #144]	; (129e8 <ll_rl_remove+0xc8>)
   12958:	7835      	ldrb	r5, [r6, #0]
   1295a:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   1295c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12960:	d01b      	beq.n	1299a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12962:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   12964:	42af      	cmp	r7, r5
   12966:	d018      	beq.n	1299a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   12968:	4820      	ldr	r0, [pc, #128]	; (129ec <ll_rl_remove+0xcc>)
   1296a:	2210      	movs	r2, #16
   1296c:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   12970:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   12974:	f7ef f942 	bl	1bfc <memcpy>
   12978:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1297a:	fb0b f103 	mul.w	r1, fp, r3
   1297e:	1862      	adds	r2, r4, r1
   12980:	5c61      	ldrb	r1, [r4, r1]
   12982:	f011 0f01 	tst.w	r1, #1
   12986:	b2d8      	uxtb	r0, r3
   12988:	d021      	beq.n	129ce <ll_rl_remove+0xae>
   1298a:	0749      	lsls	r1, r1, #29
   1298c:	d51f      	bpl.n	129ce <ll_rl_remove+0xae>
   1298e:	7dd1      	ldrb	r1, [r2, #23]
   12990:	42a9      	cmp	r1, r5
   12992:	d11c      	bne.n	129ce <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   12994:	4b16      	ldr	r3, [pc, #88]	; (129f0 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   12996:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   12998:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   1299a:	7833      	ldrb	r3, [r6, #0]
   1299c:	3b01      	subs	r3, #1
   1299e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   129a0:	2200      	movs	r2, #0
   129a2:	4651      	mov	r1, sl
   129a4:	f899 0000 	ldrb.w	r0, [r9]
   129a8:	f7ff facc 	bl	11f44 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   129ac:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   129ae:	bf9f      	itttt	ls
   129b0:	4b10      	ldrls	r3, [pc, #64]	; (129f4 <ll_rl_remove+0xd4>)
   129b2:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   129b6:	23ff      	movls	r3, #255	; 0xff
   129b8:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   129ba:	2028      	movs	r0, #40	; 0x28
   129bc:	fb00 f008 	mul.w	r0, r0, r8
   129c0:	5c23      	ldrb	r3, [r4, r0]
   129c2:	f36f 0300 	bfc	r3, #0, #1
   129c6:	5423      	strb	r3, [r4, r0]
		return 0;
   129c8:	2000      	movs	r0, #0
   129ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ce:	3301      	adds	r3, #1
				for (k = 0;
   129d0:	2b08      	cmp	r3, #8
   129d2:	d1d2      	bne.n	1297a <ll_rl_remove+0x5a>
   129d4:	e7e1      	b.n	1299a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   129d6:	200c      	movs	r0, #12
   129d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   129dc:	2002      	movs	r0, #2
}
   129de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e2:	bf00      	nop
   129e4:	200012e4 	.word	0x200012e4
   129e8:	2000125a 	.word	0x2000125a
   129ec:	20001263 	.word	0x20001263
   129f0:	2000125b 	.word	0x2000125b
   129f4:	20001457 	.word	0x20001457

000129f8 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   129f8:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   129fa:	795c      	ldrb	r4, [r3, #5]
   129fc:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   12a00:	2c40      	cmp	r4, #64	; 0x40
{
   12a02:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   12a04:	d117      	bne.n	12a36 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   12a06:	b119      	cbz	r1, 12a10 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   12a08:	2200      	movs	r2, #0
   12a0a:	f7ff fca9 	bl	12360 <ll_rl_find>
   12a0e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   12a10:	2a07      	cmp	r2, #7
   12a12:	d810      	bhi.n	12a36 <ll_rl_crpa_set+0x3e>
   12a14:	2128      	movs	r1, #40	; 0x28
   12a16:	4c08      	ldr	r4, [pc, #32]	; (12a38 <ll_rl_crpa_set+0x40>)
   12a18:	fb01 f302 	mul.w	r3, r1, r2
   12a1c:	5ce3      	ldrb	r3, [r4, r3]
   12a1e:	07db      	lsls	r3, r3, #31
   12a20:	d509      	bpl.n	12a36 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12a22:	2018      	movs	r0, #24
   12a24:	fb11 0002 	smlabb	r0, r1, r2, r0
   12a28:	4420      	add	r0, r4
   12a2a:	4629      	mov	r1, r5
   12a2c:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   12a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12a32:	f7ef b8e3 	b.w	1bfc <memcpy>
   12a36:	bd70      	pop	{r4, r5, r6, pc}
   12a38:	200012e4 	.word	0x200012e4

00012a3c <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   12a3c:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12a3e:	2200      	movs	r2, #0
{
   12a40:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12a42:	1c41      	adds	r1, r0, #1
   12a44:	7800      	ldrb	r0, [r0, #0]
   12a46:	f7ff fc8b 	bl	12360 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   12a4a:	2807      	cmp	r0, #7
   12a4c:	d901      	bls.n	12a52 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12a4e:	2002      	movs	r0, #2
   12a50:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   12a52:	2428      	movs	r4, #40	; 0x28
   12a54:	2318      	movs	r3, #24
   12a56:	fb14 3000 	smlabb	r0, r4, r0, r3
   12a5a:	4c07      	ldr	r4, [pc, #28]	; (12a78 <ll_rl_crpa_get+0x3c>)
   12a5c:	4404      	add	r4, r0
   12a5e:	2106      	movs	r1, #6
   12a60:	4620      	mov	r0, r4
   12a62:	f7f5 f90e 	bl	7c82 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   12a66:	2800      	cmp	r0, #0
   12a68:	d0f1      	beq.n	12a4e <ll_rl_crpa_get+0x12>
   12a6a:	2206      	movs	r2, #6
   12a6c:	4621      	mov	r1, r4
   12a6e:	4628      	mov	r0, r5
   12a70:	f7ef f8c4 	bl	1bfc <memcpy>
			return 0;
   12a74:	2000      	movs	r0, #0
}
   12a76:	bd38      	pop	{r3, r4, r5, pc}
   12a78:	200012e4 	.word	0x200012e4

00012a7c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   12a7c:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12a7e:	2200      	movs	r2, #0
{
   12a80:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12a82:	1c41      	adds	r1, r0, #1
   12a84:	7800      	ldrb	r0, [r0, #0]
   12a86:	f7ff fc6b 	bl	12360 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12a8a:	2807      	cmp	r0, #7
   12a8c:	d80a      	bhi.n	12aa4 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   12a8e:	4b06      	ldr	r3, [pc, #24]	; (12aa8 <ll_rl_lrpa_get+0x2c>)
   12a90:	2228      	movs	r2, #40	; 0x28
   12a92:	fb02 3000 	mla	r0, r2, r0, r3
   12a96:	2206      	movs	r2, #6
   12a98:	6a41      	ldr	r1, [r0, #36]	; 0x24
   12a9a:	4620      	mov	r0, r4
   12a9c:	f7ef f8ae 	bl	1bfc <memcpy>
		return 0;
   12aa0:	2000      	movs	r0, #0
   12aa2:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12aa4:	2002      	movs	r0, #2
}
   12aa6:	bd10      	pop	{r4, pc}
   12aa8:	200012e4 	.word	0x200012e4

00012aac <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   12aac:	b510      	push	{r4, lr}
   12aae:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   12ab0:	f7ff faba 	bl	12028 <rl_access_check.constprop.1>
   12ab4:	b140      	cbz	r0, 12ac8 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   12ab6:	b11c      	cbz	r4, 12ac0 <ll_rl_enable+0x14>
   12ab8:	2c01      	cmp	r4, #1
   12aba:	d001      	beq.n	12ac0 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   12abc:	2012      	movs	r0, #18
	}

	return 0;
}
   12abe:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   12ac0:	4b02      	ldr	r3, [pc, #8]	; (12acc <ll_rl_enable+0x20>)
   12ac2:	701c      	strb	r4, [r3, #0]
	return 0;
   12ac4:	2000      	movs	r0, #0
		break;
   12ac6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12ac8:	200c      	movs	r0, #12
   12aca:	bd10      	pop	{r4, pc}
   12acc:	20001424 	.word	0x20001424

00012ad0 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12ad4:	4358      	muls	r0, r3
   12ad6:	4b01      	ldr	r3, [pc, #4]	; (12adc <ll_rl_timeout_set+0xc>)
   12ad8:	6018      	str	r0, [r3, #0]
   12ada:	4770      	bx	lr
   12adc:	20001974 	.word	0x20001974

00012ae0 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   12ae0:	b538      	push	{r3, r4, r5, lr}
   12ae2:	4605      	mov	r5, r0
   12ae4:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   12ae6:	f7ff fa9f 	bl	12028 <rl_access_check.constprop.1>
   12aea:	b1d8      	cbz	r0, 12b24 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12aec:	2200      	movs	r2, #0
   12aee:	1c69      	adds	r1, r5, #1
   12af0:	7828      	ldrb	r0, [r5, #0]
   12af2:	f7ff fc35 	bl	12360 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12af6:	2807      	cmp	r0, #7
   12af8:	d816      	bhi.n	12b28 <ll_priv_mode_set+0x48>
		switch (mode) {
   12afa:	b11c      	cbz	r4, 12b04 <ll_priv_mode_set+0x24>
   12afc:	2c01      	cmp	r4, #1
   12afe:	d00a      	beq.n	12b16 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   12b00:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   12b02:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   12b04:	2328      	movs	r3, #40	; 0x28
   12b06:	4a09      	ldr	r2, [pc, #36]	; (12b2c <ll_priv_mode_set+0x4c>)
   12b08:	4358      	muls	r0, r3
   12b0a:	5c13      	ldrb	r3, [r2, r0]
   12b0c:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   12b10:	5413      	strb	r3, [r2, r0]
	return 0;
   12b12:	2000      	movs	r0, #0
			break;
   12b14:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   12b16:	2328      	movs	r3, #40	; 0x28
   12b18:	4a04      	ldr	r2, [pc, #16]	; (12b2c <ll_priv_mode_set+0x4c>)
   12b1a:	4358      	muls	r0, r3
   12b1c:	5c13      	ldrb	r3, [r2, r0]
   12b1e:	f043 0310 	orr.w	r3, r3, #16
   12b22:	e7f5      	b.n	12b10 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12b24:	200c      	movs	r0, #12
   12b26:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12b28:	2002      	movs	r0, #2
   12b2a:	bd38      	pop	{r3, r4, r5, pc}
   12b2c:	200012e4 	.word	0x200012e4

00012b30 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12b30:	4a19      	ldr	r2, [pc, #100]	; (12b98 <ll_filter_reset+0x68>)
   12b32:	2300      	movs	r3, #0
{
   12b34:	b430      	push	{r4, r5}
	wl_anon = 0;
   12b36:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   12b38:	4a18      	ldr	r2, [pc, #96]	; (12b9c <ll_filter_reset+0x6c>)
   12b3a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12b3e:	f36f 0100 	bfc	r1, #0, #1
   12b42:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12b46:	3301      	adds	r3, #1
   12b48:	2b08      	cmp	r3, #8
   12b4a:	d1f6      	bne.n	12b3a <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   12b4c:	4a14      	ldr	r2, [pc, #80]	; (12ba0 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12b4e:	4915      	ldr	r1, [pc, #84]	; (12ba4 <ll_filter_reset+0x74>)
	rl_enable = 0;
   12b50:	2300      	movs	r3, #0
   12b52:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12b54:	4a14      	ldr	r2, [pc, #80]	; (12ba8 <ll_filter_reset+0x78>)
   12b56:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   12b58:	4a14      	ldr	r2, [pc, #80]	; (12bac <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   12b5a:	4915      	ldr	r1, [pc, #84]	; (12bb0 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   12b5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12b60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12b64:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   12b68:	2528      	movs	r5, #40	; 0x28
   12b6a:	fb05 f203 	mul.w	r2, r5, r3
   12b6e:	3301      	adds	r3, #1
   12b70:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12b72:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12b74:	f36f 0400 	bfc	r4, #0, #1
   12b78:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12b7a:	d1f6      	bne.n	12b6a <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   12b7c:	4b0d      	ldr	r3, [pc, #52]	; (12bb4 <ll_filter_reset+0x84>)
   12b7e:	2200      	movs	r2, #0
   12b80:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   12b82:	b120      	cbz	r0, 12b8e <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12b84:	490c      	ldr	r1, [pc, #48]	; (12bb8 <ll_filter_reset+0x88>)
   12b86:	480d      	ldr	r0, [pc, #52]	; (12bbc <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   12b88:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12b8a:	f002 ba4b 	b.w	15024 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   12b8e:	480b      	ldr	r0, [pc, #44]	; (12bbc <ll_filter_reset+0x8c>)
}
   12b90:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   12b92:	f002 ba57 	b.w	15044 <k_delayed_work_cancel>
   12b96:	bf00      	nop
   12b98:	20001948 	.word	0x20001948
   12b9c:	20001457 	.word	0x20001457
   12ba0:	20001424 	.word	0x20001424
   12ba4:	000dbba0 	.word	0x000dbba0
   12ba8:	20001974 	.word	0x20001974
   12bac:	20001940 	.word	0x20001940
   12bb0:	200012e4 	.word	0x200012e4
   12bb4:	2000125a 	.word	0x2000125a
   12bb8:	00012751 	.word	0x00012751
   12bbc:	2000194c 	.word	0x2000194c

00012bc0 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   12bc0:	4b05      	ldr	r3, [pc, #20]	; (12bd8 <cntr_init+0x18>)
   12bc2:	2200      	movs	r2, #0
   12bc4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   12bc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   12bcc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   12bd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   12bd4:	4770      	bx	lr
   12bd6:	bf00      	nop
   12bd8:	4000b000 	.word	0x4000b000

00012bdc <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   12bdc:	4a04      	ldr	r2, [pc, #16]	; (12bf0 <cntr_start+0x14>)
   12bde:	7813      	ldrb	r3, [r2, #0]
   12be0:	1c59      	adds	r1, r3, #1
   12be2:	7011      	strb	r1, [r2, #0]
   12be4:	2001      	movs	r0, #1
   12be6:	b913      	cbnz	r3, 12bee <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   12be8:	4a02      	ldr	r2, [pc, #8]	; (12bf4 <cntr_start+0x18>)
   12bea:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   12bec:	4618      	mov	r0, r3
}
   12bee:	4770      	bx	lr
   12bf0:	200014c9 	.word	0x200014c9
   12bf4:	4000b000 	.word	0x4000b000

00012bf8 <cntr_stop>:

u32_t cntr_stop(void)
{
   12bf8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   12bfa:	4b0f      	ldr	r3, [pc, #60]	; (12c38 <cntr_stop+0x40>)
   12bfc:	7818      	ldrb	r0, [r3, #0]
   12bfe:	b970      	cbnz	r0, 12c1e <cntr_stop+0x26>
   12c00:	4b0e      	ldr	r3, [pc, #56]	; (12c3c <cntr_stop+0x44>)
   12c02:	9301      	str	r3, [sp, #4]
   12c04:	9300      	str	r3, [sp, #0]
   12c06:	4a0e      	ldr	r2, [pc, #56]	; (12c40 <cntr_stop+0x48>)
   12c08:	4b0e      	ldr	r3, [pc, #56]	; (12c44 <cntr_stop+0x4c>)
   12c0a:	490f      	ldr	r1, [pc, #60]	; (12c48 <cntr_stop+0x50>)
   12c0c:	480f      	ldr	r0, [pc, #60]	; (12c4c <cntr_stop+0x54>)
   12c0e:	f7ee f9bd 	bl	f8c <printk>
   12c12:	4040      	eors	r0, r0
   12c14:	f380 8811 	msr	BASEPRI, r0
   12c18:	f04f 0004 	mov.w	r0, #4
   12c1c:	df02      	svc	2

	if (--_refcount) {
   12c1e:	3801      	subs	r0, #1
   12c20:	b2c0      	uxtb	r0, r0
   12c22:	7018      	strb	r0, [r3, #0]
   12c24:	2301      	movs	r3, #1
   12c26:	b920      	cbnz	r0, 12c32 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   12c28:	4a09      	ldr	r2, [pc, #36]	; (12c50 <cntr_stop+0x58>)
   12c2a:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   12c2c:	b003      	add	sp, #12
   12c2e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   12c32:	4618      	mov	r0, r3
   12c34:	e7fa      	b.n	12c2c <cntr_stop+0x34>
   12c36:	bf00      	nop
   12c38:	200014c9 	.word	0x200014c9
   12c3c:	000155c5 	.word	0x000155c5
   12c40:	0001699e 	.word	0x0001699e
   12c44:	0001985b 	.word	0x0001985b
   12c48:	000169ed 	.word	0x000169ed
   12c4c:	00019865 	.word	0x00019865
   12c50:	4000b000 	.word	0x4000b000

00012c54 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   12c54:	4b01      	ldr	r3, [pc, #4]	; (12c5c <cntr_cnt_get+0x8>)
   12c56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   12c5a:	4770      	bx	lr
   12c5c:	4000b000 	.word	0x4000b000

00012c60 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   12c60:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12c64:	4b01      	ldr	r3, [pc, #4]	; (12c6c <cntr_cmp_set+0xc>)
   12c66:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   12c6a:	4770      	bx	lr
   12c6c:	4000b000 	.word	0x4000b000

00012c70 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   12c70:	4b11      	ldr	r3, [pc, #68]	; (12cb8 <do_ecb+0x48>)
{
   12c72:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   12c74:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   12c76:	2500      	movs	r5, #0
   12c78:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   12c7a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   12c7c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12c80:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   12c84:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   12c88:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12c8a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   12c8e:	b934      	cbnz	r4, 12c9e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12c90:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12c94:	b91c      	cbnz	r4, 12c9e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   12c96:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12c9a:	2c00      	cmp	r4, #0
   12c9c:	d1f5      	bne.n	12c8a <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   12c9e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12ca0:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   12ca4:	2c00      	cmp	r4, #0
   12ca6:	d1e8      	bne.n	12c7a <do_ecb+0xa>
   12ca8:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   12cac:	2e00      	cmp	r6, #0
   12cae:	d0e4      	beq.n	12c7a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   12cb0:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   12cb4:	bd70      	pop	{r4, r5, r6, pc}
   12cb6:	bf00      	nop
   12cb8:	4000e000 	.word	0x4000e000

00012cbc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   12cbc:	b570      	push	{r4, r5, r6, lr}
   12cbe:	b08c      	sub	sp, #48	; 0x30
   12cc0:	460e      	mov	r6, r1
   12cc2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12cc4:	4601      	mov	r1, r0
   12cc6:	2210      	movs	r2, #16
   12cc8:	4668      	mov	r0, sp
{
   12cca:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12ccc:	f7f4 ffca 	bl	7c64 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12cd0:	2210      	movs	r2, #16
   12cd2:	eb0d 0002 	add.w	r0, sp, r2
   12cd6:	4631      	mov	r1, r6
   12cd8:	f7f4 ffc4 	bl	7c64 <mem_rcopy>

	do_ecb(&ecb);
   12cdc:	4668      	mov	r0, sp
   12cde:	f7ff ffc7 	bl	12c70 <do_ecb>

	if (cipher_text_le) {
   12ce2:	b125      	cbz	r5, 12cee <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   12ce4:	2210      	movs	r2, #16
   12ce6:	a908      	add	r1, sp, #32
   12ce8:	4628      	mov	r0, r5
   12cea:	f7f4 ffbb 	bl	7c64 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12cee:	b124      	cbz	r4, 12cfa <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12cf0:	2210      	movs	r2, #16
   12cf2:	a908      	add	r1, sp, #32
   12cf4:	4620      	mov	r0, r4
   12cf6:	f7ee ff81 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12cfa:	b00c      	add	sp, #48	; 0x30
   12cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

00012d00 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   12d00:	4b07      	ldr	r3, [pc, #28]	; (12d20 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   12d02:	4a08      	ldr	r2, [pc, #32]	; (12d24 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   12d04:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   12d08:	4907      	ldr	r1, [pc, #28]	; (12d28 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   12d0a:	4a08      	ldr	r2, [pc, #32]	; (12d2c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   12d0c:	2800      	cmp	r0, #0
   12d0e:	bf14      	ite	ne
   12d10:	4610      	movne	r0, r2
   12d12:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12d14:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   12d16:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12d1a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12d1e:	4770      	bx	lr
   12d20:	4001f000 	.word	0x4001f000
   12d24:	40008140 	.word	0x40008140
   12d28:	40001004 	.word	0x40001004
   12d2c:	40001000 	.word	0x40001000

00012d30 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   12d30:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12d32:	4e2c      	ldr	r6, [pc, #176]	; (12de4 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12d34:	4f2c      	ldr	r7, [pc, #176]	; (12de8 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12d36:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12d38:	4b2c      	ldr	r3, [pc, #176]	; (12dec <sw_switch.isra.9+0xbc>)
   12d3a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   12d3e:	b22b      	sxth	r3, r5
   12d40:	00dc      	lsls	r4, r3, #3
   12d42:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12d46:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   12d4a:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12d4e:	f105 040b 	add.w	r4, r5, #11
   12d52:	b2e4      	uxtb	r4, r4
   12d54:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   12d56:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   12d5a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12d5e:	3fc0      	subs	r7, #192	; 0xc0
   12d60:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   12d64:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   12d68:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   12d6c:	2800      	cmp	r0, #0
   12d6e:	d034      	beq.n	12dda <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   12d70:	f24a 075a 	movw	r7, #41050	; 0xa05a
   12d74:	f649 4040 	movw	r0, #40000	; 0x9c40
   12d78:	2a02      	cmp	r2, #2
   12d7a:	bf0c      	ite	eq
   12d7c:	4602      	moveq	r2, r0
   12d7e:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   12d80:	f242 47b8 	movw	r7, #9400	; 0x24b8
   12d84:	f241 504a 	movw	r0, #5450	; 0x154a
   12d88:	2902      	cmp	r1, #2
   12d8a:	bf18      	it	ne
   12d8c:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   12d8e:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   12d92:	4401      	add	r1, r0
   12d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12d98:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12d9c:	4a14      	ldr	r2, [pc, #80]	; (12df0 <sw_switch.isra.9+0xc0>)
   12d9e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   12da2:	009b      	lsls	r3, r3, #2
   12da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12da8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   12dac:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   12db0:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12db2:	bf8b      	itete	hi
   12db4:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   12db8:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12dba:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   12dbc:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12dc0:	bf88      	it	hi
   12dc2:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   12dc6:	4b08      	ldr	r3, [pc, #32]	; (12de8 <sw_switch.isra.9+0xb8>)
   12dc8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12dcc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   12dd0:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   12dd2:	f003 0301 	and.w	r3, r3, #1
   12dd6:	7033      	strb	r3, [r6, #0]
   12dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12dda:	4a06      	ldr	r2, [pc, #24]	; (12df4 <sw_switch.isra.9+0xc4>)
   12ddc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   12de0:	212d      	movs	r1, #45	; 0x2d
   12de2:	e7de      	b.n	12da2 <sw_switch.isra.9+0x72>
   12de4:	200016ec 	.word	0x200016ec
   12de8:	4001f000 	.word	0x4001f000
   12dec:	4000110c 	.word	0x4000110c
   12df0:	40001000 	.word	0x40001000
   12df4:	40001004 	.word	0x40001004

00012df8 <isr_radio>:
	if (sfp_radio_isr) {
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <isr_radio+0xc>)
   12dfa:	681b      	ldr	r3, [r3, #0]
   12dfc:	b103      	cbz	r3, 12e00 <isr_radio+0x8>
		sfp_radio_isr();
   12dfe:	4718      	bx	r3
   12e00:	4770      	bx	lr
   12e02:	bf00      	nop
   12e04:	200016e8 	.word	0x200016e8

00012e08 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   12e08:	4b06      	ldr	r3, [pc, #24]	; (12e24 <radio_isr_set+0x1c>)
   12e0a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   12e0c:	4b06      	ldr	r3, [pc, #24]	; (12e28 <radio_isr_set+0x20>)
   12e0e:	2210      	movs	r2, #16
   12e10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12e14:	4b05      	ldr	r3, [pc, #20]	; (12e2c <radio_isr_set+0x24>)
   12e16:	2202      	movs	r2, #2
   12e18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   12e1c:	2001      	movs	r0, #1
   12e1e:	f7ee bd1b 	b.w	1858 <_arch_irq_enable>
   12e22:	bf00      	nop
   12e24:	200016e8 	.word	0x200016e8
   12e28:	40001000 	.word	0x40001000
   12e2c:	e000e100 	.word	0xe000e100

00012e30 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12e38:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12e3a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   12e3e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12e42:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   12e46:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   12e4a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   12e4e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   12e52:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   12e56:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   12e5a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   12e5e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   12e62:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   12e66:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   12e6a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   12e6e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   12e72:	4770      	bx	lr

00012e74 <radio_reset>:
{
   12e74:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   12e76:	2001      	movs	r0, #1
   12e78:	f7ee fcfe 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   12e7c:	4b08      	ldr	r3, [pc, #32]	; (12ea0 <radio_reset+0x2c>)
   12e7e:	2200      	movs	r2, #0
   12e80:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   12e84:	2201      	movs	r2, #1
   12e86:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   12e8a:	4a06      	ldr	r2, [pc, #24]	; (12ea4 <radio_reset+0x30>)
   12e8c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   12e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12e92:	f023 0301 	bic.w	r3, r3, #1
   12e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   12e9a:	6013      	str	r3, [r2, #0]
   12e9c:	bd08      	pop	{r3, pc}
   12e9e:	bf00      	nop
   12ea0:	40001000 	.word	0x40001000
   12ea4:	40001774 	.word	0x40001774

00012ea8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   12ea8:	4b06      	ldr	r3, [pc, #24]	; (12ec4 <radio_phy_set+0x1c>)
	switch (phy) {
   12eaa:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   12eac:	bf0c      	ite	eq
   12eae:	2204      	moveq	r2, #4
   12eb0:	2203      	movne	r2, #3
   12eb2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   12eb6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   12eba:	f042 0201 	orr.w	r2, r2, #1
   12ebe:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   12ec2:	4770      	bx	lr
   12ec4:	40001000 	.word	0x40001000

00012ec8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   12ec8:	4b01      	ldr	r3, [pc, #4]	; (12ed0 <radio_tx_power_set+0x8>)
   12eca:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   12ece:	4770      	bx	lr
   12ed0:	40001000 	.word	0x40001000

00012ed4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12ed4:	4b01      	ldr	r3, [pc, #4]	; (12edc <radio_freq_chan_set+0x8>)
   12ed6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   12eda:	4770      	bx	lr
   12edc:	40001000 	.word	0x40001000

00012ee0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12ee0:	4b07      	ldr	r3, [pc, #28]	; (12f00 <radio_whiten_iv_set+0x20>)
   12ee2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   12ee6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12eea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   12eee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   12ef2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12ef6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   12efa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   12efe:	4770      	bx	lr
   12f00:	40001000 	.word	0x40001000

00012f04 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12f04:	4a0a      	ldr	r2, [pc, #40]	; (12f30 <radio_aa_set+0x2c>)
   12f06:	2300      	movs	r3, #0
   12f08:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   12f0c:	2301      	movs	r3, #1
   12f0e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   12f12:	78c3      	ldrb	r3, [r0, #3]
   12f14:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12f18:	7843      	ldrb	r3, [r0, #1]
   12f1a:	7881      	ldrb	r1, [r0, #2]
   12f1c:	041b      	lsls	r3, r3, #16
   12f1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   12f22:	7801      	ldrb	r1, [r0, #0]
   12f24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   12f28:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   12f2c:	4770      	bx	lr
   12f2e:	bf00      	nop
   12f30:	40001000 	.word	0x40001000

00012f34 <radio_pkt_configure>:
	switch (phy) {
   12f34:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12f38:	2b02      	cmp	r3, #2
{
   12f3a:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12f3c:	bf0c      	ite	eq
   12f3e:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   12f42:	2400      	movne	r4, #0
	if (dc) {
   12f44:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12f46:	f1c0 0308 	rsb	r3, r0, #8
   12f4a:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   12f4e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   12f52:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12f56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12f5a:	4a0b      	ldr	r2, [pc, #44]	; (12f88 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   12f5c:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   12f60:	bf48      	it	mi
   12f62:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   12f66:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12f68:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   12f6c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   12f70:	4b06      	ldr	r3, [pc, #24]	; (12f8c <radio_pkt_configure+0x58>)
   12f72:	4003      	ands	r3, r0
   12f74:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   12f78:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   12f7c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   12f80:	4319      	orrs	r1, r3
   12f82:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   12f86:	bd10      	pop	{r4, pc}
   12f88:	40001000 	.word	0x40001000
   12f8c:	fef80000 	.word	0xfef80000

00012f90 <radio_pkt_rx_set>:
   12f90:	4b01      	ldr	r3, [pc, #4]	; (12f98 <radio_pkt_rx_set+0x8>)
   12f92:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12f96:	4770      	bx	lr
   12f98:	40001000 	.word	0x40001000

00012f9c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   12f9c:	4b01      	ldr	r3, [pc, #4]	; (12fa4 <radio_pkt_tx_set+0x8>)
   12f9e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12fa2:	4770      	bx	lr
   12fa4:	40001000 	.word	0x40001000

00012fa8 <radio_tx_ready_delay_get>:
	switch (phy) {
   12fa8:	2802      	cmp	r0, #2
}
   12faa:	bf0c      	ite	eq
   12fac:	2028      	moveq	r0, #40	; 0x28
   12fae:	2029      	movne	r0, #41	; 0x29
   12fb0:	4770      	bx	lr

00012fb2 <radio_tx_chain_delay_get>:
}
   12fb2:	2001      	movs	r0, #1
   12fb4:	4770      	bx	lr

00012fb6 <radio_rx_ready_delay_get>:
}
   12fb6:	2029      	movs	r0, #41	; 0x29
   12fb8:	4770      	bx	lr

00012fba <radio_rx_chain_delay_get>:
	switch (phy) {
   12fba:	2802      	cmp	r0, #2
}
   12fbc:	bf0c      	ite	eq
   12fbe:	2006      	moveq	r0, #6
   12fc0:	200a      	movne	r0, #10
   12fc2:	4770      	bx	lr

00012fc4 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   12fc4:	4b01      	ldr	r3, [pc, #4]	; (12fcc <radio_rx_enable+0x8>)
   12fc6:	2201      	movs	r2, #1
   12fc8:	605a      	str	r2, [r3, #4]
   12fca:	4770      	bx	lr
   12fcc:	40001000 	.word	0x40001000

00012fd0 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12fd0:	4b01      	ldr	r3, [pc, #4]	; (12fd8 <radio_tx_enable+0x8>)
   12fd2:	2201      	movs	r2, #1
   12fd4:	601a      	str	r2, [r3, #0]
   12fd6:	4770      	bx	lr
   12fd8:	40001000 	.word	0x40001000

00012fdc <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12fdc:	4a07      	ldr	r2, [pc, #28]	; (12ffc <radio_disable+0x20>)
   12fde:	f44f 6390 	mov.w	r3, #1152	; 0x480
   12fe2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   12fe6:	2301      	movs	r3, #1
   12fe8:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   12fea:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12fec:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12ff0:	2100      	movs	r1, #0
   12ff2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   12ff6:	6113      	str	r3, [r2, #16]
   12ff8:	4770      	bx	lr
   12ffa:	bf00      	nop
   12ffc:	4001f000 	.word	0x4001f000

00013000 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   13000:	4b04      	ldr	r3, [pc, #16]	; (13014 <radio_status_reset+0x14>)
   13002:	2200      	movs	r2, #0
   13004:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   13008:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1300c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   13010:	4770      	bx	lr
   13012:	bf00      	nop
   13014:	40001000 	.word	0x40001000

00013018 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   13018:	4b03      	ldr	r3, [pc, #12]	; (13028 <radio_is_ready+0x10>)
   1301a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1301e:	3000      	adds	r0, #0
   13020:	bf18      	it	ne
   13022:	2001      	movne	r0, #1
   13024:	4770      	bx	lr
   13026:	bf00      	nop
   13028:	40001000 	.word	0x40001000

0001302c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1302c:	4b03      	ldr	r3, [pc, #12]	; (1303c <radio_is_done+0x10>)
   1302e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   13032:	3000      	adds	r0, #0
   13034:	bf18      	it	ne
   13036:	2001      	movne	r0, #1
   13038:	4770      	bx	lr
   1303a:	bf00      	nop
   1303c:	40001000 	.word	0x40001000

00013040 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   13040:	4b03      	ldr	r3, [pc, #12]	; (13050 <radio_is_idle+0x10>)
   13042:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   13046:	fab0 f080 	clz	r0, r0
   1304a:	0940      	lsrs	r0, r0, #5
   1304c:	4770      	bx	lr
   1304e:	bf00      	nop
   13050:	40001000 	.word	0x40001000

00013054 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   13054:	4b04      	ldr	r3, [pc, #16]	; (13068 <radio_crc_configure+0x14>)
   13056:	f240 1203 	movw	r2, #259	; 0x103
   1305a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1305e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   13062:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   13066:	4770      	bx	lr
   13068:	40001000 	.word	0x40001000

0001306c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1306c:	4b03      	ldr	r3, [pc, #12]	; (1307c <radio_crc_is_valid+0x10>)
   1306e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13072:	3000      	adds	r0, #0
   13074:	bf18      	it	ne
   13076:	2001      	movne	r0, #1
   13078:	4770      	bx	lr
   1307a:	bf00      	nop
   1307c:	40001000 	.word	0x40001000

00013080 <radio_pkt_empty_get>:
}
   13080:	4800      	ldr	r0, [pc, #0]	; (13084 <radio_pkt_empty_get+0x4>)
   13082:	4770      	bx	lr
   13084:	200015dc 	.word	0x200015dc

00013088 <radio_pkt_scratch_get>:
}
   13088:	4800      	ldr	r0, [pc, #0]	; (1308c <radio_pkt_scratch_get+0x4>)
   1308a:	4770      	bx	lr
   1308c:	200015e0 	.word	0x200015e0

00013090 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13090:	4b04      	ldr	r3, [pc, #16]	; (130a4 <radio_switch_complete_and_rx+0x14>)
   13092:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   13094:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1309a:	4602      	mov	r2, r0
   1309c:	4608      	mov	r0, r1
   1309e:	f7ff be47 	b.w	12d30 <sw_switch.isra.9>
   130a2:	bf00      	nop
   130a4:	40001000 	.word	0x40001000

000130a8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   130a8:	4b03      	ldr	r3, [pc, #12]	; (130b8 <radio_switch_complete_and_tx+0x10>)
   130aa:	2103      	movs	r1, #3
   130ac:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   130b0:	4601      	mov	r1, r0
   130b2:	2001      	movs	r0, #1
   130b4:	f7ff be3c 	b.w	12d30 <sw_switch.isra.9>
   130b8:	40001000 	.word	0x40001000

000130bc <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   130bc:	4b05      	ldr	r3, [pc, #20]	; (130d4 <radio_switch_complete_and_disable+0x18>)
   130be:	2203      	movs	r2, #3
   130c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   130c4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   130c8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   130cc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   130d0:	4770      	bx	lr
   130d2:	bf00      	nop
   130d4:	40001000 	.word	0x40001000

000130d8 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   130d8:	4a03      	ldr	r2, [pc, #12]	; (130e8 <radio_rssi_measure+0x10>)
   130da:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   130de:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   130e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   130e6:	4770      	bx	lr
   130e8:	40001000 	.word	0x40001000

000130ec <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   130ec:	4b01      	ldr	r3, [pc, #4]	; (130f4 <radio_rssi_get+0x8>)
   130ee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   130f2:	4770      	bx	lr
   130f4:	40001000 	.word	0x40001000

000130f8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   130f8:	4b02      	ldr	r3, [pc, #8]	; (13104 <radio_rssi_status_reset+0xc>)
   130fa:	2200      	movs	r2, #0
   130fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   13100:	4770      	bx	lr
   13102:	bf00      	nop
   13104:	40001000 	.word	0x40001000

00013108 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   13108:	4b03      	ldr	r3, [pc, #12]	; (13118 <radio_rssi_is_ready+0x10>)
   1310a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1310e:	3000      	adds	r0, #0
   13110:	bf18      	it	ne
   13112:	2001      	movne	r0, #1
   13114:	4770      	bx	lr
   13116:	bf00      	nop
   13118:	40001000 	.word	0x40001000

0001311c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1311c:	b530      	push	{r4, r5, lr}
   1311e:	2400      	movs	r4, #0
   13120:	00a3      	lsls	r3, r4, #2
   13122:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1312a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1312c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   13130:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   13132:	8895      	ldrh	r5, [r2, #4]
   13134:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   13138:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1313a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   1313e:	d1ef      	bne.n	13120 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   13140:	4b02      	ldr	r3, [pc, #8]	; (1314c <radio_filter_configure+0x30>)
   13142:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   13146:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   1314a:	bd30      	pop	{r4, r5, pc}
   1314c:	40001000 	.word	0x40001000

00013150 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   13150:	4a03      	ldr	r2, [pc, #12]	; (13160 <radio_filter_disable+0x10>)
   13152:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   13156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1315a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   1315e:	4770      	bx	lr
   13160:	40001000 	.word	0x40001000

00013164 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   13164:	4b02      	ldr	r3, [pc, #8]	; (13170 <radio_filter_status_reset+0xc>)
   13166:	2200      	movs	r2, #0
   13168:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   1316c:	4770      	bx	lr
   1316e:	bf00      	nop
   13170:	40001000 	.word	0x40001000

00013174 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   13174:	4b03      	ldr	r3, [pc, #12]	; (13184 <radio_filter_has_match+0x10>)
   13176:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1317a:	3000      	adds	r0, #0
   1317c:	bf18      	it	ne
   1317e:	2001      	movne	r0, #1
   13180:	4770      	bx	lr
   13182:	bf00      	nop
   13184:	40001000 	.word	0x40001000

00013188 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   13188:	4b01      	ldr	r3, [pc, #4]	; (13190 <radio_filter_match_get+0x8>)
   1318a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1318e:	4770      	bx	lr
   13190:	40001000 	.word	0x40001000

00013194 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   13194:	4b04      	ldr	r3, [pc, #16]	; (131a8 <radio_bc_configure+0x14>)
   13196:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1319a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1319e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   131a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   131a6:	4770      	bx	lr
   131a8:	40001000 	.word	0x40001000

000131ac <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   131ac:	4b05      	ldr	r3, [pc, #20]	; (131c4 <radio_tmr_status_reset+0x18>)
   131ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   131b2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   131b6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   131ba:	227f      	movs	r2, #127	; 0x7f
   131bc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   131c0:	4770      	bx	lr
   131c2:	bf00      	nop
   131c4:	4000b000 	.word	0x4000b000

000131c8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   131c8:	4b03      	ldr	r3, [pc, #12]	; (131d8 <radio_tmr_tifs_set+0x10>)
   131ca:	4a04      	ldr	r2, [pc, #16]	; (131dc <radio_tmr_tifs_set+0x14>)
   131cc:	781b      	ldrb	r3, [r3, #0]
   131ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   131d2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   131d6:	4770      	bx	lr
   131d8:	200016ec 	.word	0x200016ec
   131dc:	40009000 	.word	0x40009000

000131e0 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   131e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   131e4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   131e8:	4c30      	ldr	r4, [pc, #192]	; (132ac <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   131ea:	4d31      	ldr	r5, [pc, #196]	; (132b0 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   131ec:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   131f0:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   131f2:	bf88      	it	hi
   131f4:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   131f8:	4b2e      	ldr	r3, [pc, #184]	; (132b4 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   131fa:	4c2f      	ldr	r4, [pc, #188]	; (132b8 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   131fc:	bf82      	ittt	hi
   131fe:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   13202:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   13206:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   1320a:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   1320c:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   13210:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   13212:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   13214:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   13218:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   1321a:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1321e:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   13222:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   13226:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   1322a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   1322e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   13232:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   13236:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   1323a:	4920      	ldr	r1, [pc, #128]	; (132bc <radio_tmr_start+0xdc>)
   1323c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   13240:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   13244:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   13248:	f7ff fd5a 	bl	12d00 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   1324c:	4b1c      	ldr	r3, [pc, #112]	; (132c0 <radio_tmr_start+0xe0>)
   1324e:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   13250:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   13254:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   13258:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   1325c:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   1325e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   13262:	3b74      	subs	r3, #116	; 0x74
   13264:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   13268:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   1326c:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   13270:	f503 739a 	add.w	r3, r3, #308	; 0x134
   13274:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   13278:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1327c:	33c4      	adds	r3, #196	; 0xc4
   1327e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13282:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   13286:	3bc0      	subs	r3, #192	; 0xc0
   13288:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1328c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13290:	33c8      	adds	r3, #200	; 0xc8
   13292:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   13296:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1329a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1329e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   132a2:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   132a6:	4628      	mov	r0, r5
   132a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132ac:	7ff0bdbf 	.word	0x7ff0bdbf
   132b0:	000f4240 	.word	0x000f4240
   132b4:	40008000 	.word	0x40008000
   132b8:	4000b000 	.word	0x4000b000
   132bc:	4000b148 	.word	0x4000b148
   132c0:	40009000 	.word	0x40009000

000132c4 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   132c4:	4a04      	ldr	r2, [pc, #16]	; (132d8 <radio_tmr_stop+0x14>)
   132c6:	2301      	movs	r3, #1
   132c8:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   132ca:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   132cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   132d0:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   132d2:	6113      	str	r3, [r2, #16]
   132d4:	4770      	bx	lr
   132d6:	bf00      	nop
   132d8:	40008000 	.word	0x40008000

000132dc <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   132dc:	4b0c      	ldr	r3, [pc, #48]	; (13310 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   132de:	4a0d      	ldr	r2, [pc, #52]	; (13314 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   132e0:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   132e4:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   132e8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   132ec:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   132f0:	3240      	adds	r2, #64	; 0x40
   132f2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   132f6:	f502 7280 	add.w	r2, r2, #256	; 0x100
   132fa:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   132fe:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   13302:	3a34      	subs	r2, #52	; 0x34
   13304:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   13308:	2218      	movs	r2, #24
   1330a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1330e:	4770      	bx	lr
   13310:	40008000 	.word	0x40008000
   13314:	40001104 	.word	0x40001104

00013318 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   13318:	4b0b      	ldr	r3, [pc, #44]	; (13348 <radio_tmr_aa_capture+0x30>)
   1331a:	4a0c      	ldr	r2, [pc, #48]	; (1334c <radio_tmr_aa_capture+0x34>)
   1331c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   13320:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13324:	3240      	adds	r2, #64	; 0x40
   13326:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1332a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1332e:	3a3c      	subs	r2, #60	; 0x3c
   13330:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13334:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13338:	3240      	adds	r2, #64	; 0x40
   1333a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   1333e:	220c      	movs	r2, #12
   13340:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13344:	4770      	bx	lr
   13346:	bf00      	nop
   13348:	4001f000 	.word	0x4001f000
   1334c:	40001100 	.word	0x40001100

00013350 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   13350:	4b01      	ldr	r3, [pc, #4]	; (13358 <radio_tmr_aa_get+0x8>)
   13352:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   13356:	4770      	bx	lr
   13358:	40008000 	.word	0x40008000

0001335c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1335c:	4b01      	ldr	r3, [pc, #4]	; (13364 <radio_tmr_aa_save+0x8>)
   1335e:	6018      	str	r0, [r3, #0]
   13360:	4770      	bx	lr
   13362:	bf00      	nop
   13364:	200016e4 	.word	0x200016e4

00013368 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   13368:	4b01      	ldr	r3, [pc, #4]	; (13370 <radio_tmr_aa_restore+0x8>)
   1336a:	6818      	ldr	r0, [r3, #0]
   1336c:	4770      	bx	lr
   1336e:	bf00      	nop
   13370:	200016e4 	.word	0x200016e4

00013374 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   13374:	4b01      	ldr	r3, [pc, #4]	; (1337c <radio_tmr_ready_get+0x8>)
   13376:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1337a:	4770      	bx	lr
   1337c:	40008000 	.word	0x40008000

00013380 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   13380:	4b06      	ldr	r3, [pc, #24]	; (1339c <radio_tmr_end_capture+0x1c>)
   13382:	4a07      	ldr	r2, [pc, #28]	; (133a0 <radio_tmr_end_capture+0x20>)
   13384:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   13388:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1338c:	323c      	adds	r2, #60	; 0x3c
   1338e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   13392:	2220      	movs	r2, #32
   13394:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13398:	4770      	bx	lr
   1339a:	bf00      	nop
   1339c:	4001f000 	.word	0x4001f000
   133a0:	4000110c 	.word	0x4000110c

000133a4 <radio_tmr_end_get>:
   133a4:	4b01      	ldr	r3, [pc, #4]	; (133ac <radio_tmr_end_get+0x8>)
   133a6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   133aa:	4770      	bx	lr
   133ac:	40008000 	.word	0x40008000

000133b0 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   133b0:	4b01      	ldr	r3, [pc, #4]	; (133b8 <radio_tmr_tifs_base_get+0x8>)
   133b2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   133b6:	4770      	bx	lr
   133b8:	40008000 	.word	0x40008000

000133bc <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   133bc:	4b16      	ldr	r3, [pc, #88]	; (13418 <radio_ccm_rx_pkt_set+0x5c>)
{
   133be:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   133c0:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   133c2:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   133c4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   133c8:	4e14      	ldr	r6, [pc, #80]	; (1341c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   133ca:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   133ce:	4d14      	ldr	r5, [pc, #80]	; (13420 <radio_ccm_rx_pkt_set+0x64>)
   133d0:	2902      	cmp	r1, #2
   133d2:	bf0c      	ite	eq
   133d4:	4629      	moveq	r1, r5
   133d6:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   133d8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   133dc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   133e0:	4810      	ldr	r0, [pc, #64]	; (13424 <radio_ccm_rx_pkt_set+0x68>)
   133e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   133e6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   133ea:	4a0f      	ldr	r2, [pc, #60]	; (13428 <radio_ccm_rx_pkt_set+0x6c>)
   133ec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   133f0:	490e      	ldr	r1, [pc, #56]	; (1342c <radio_ccm_rx_pkt_set+0x70>)
   133f2:	4a0f      	ldr	r2, [pc, #60]	; (13430 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   133f4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   133f8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   133fc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   13400:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   13404:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   13408:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   1340c:	2140      	movs	r1, #64	; 0x40
   1340e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   13412:	2201      	movs	r2, #1
   13414:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   13416:	bd70      	pop	{r4, r5, r6, pc}
   13418:	4000f000 	.word	0x4000f000
   1341c:	01000001 	.word	0x01000001
   13420:	01010001 	.word	0x01010001
   13424:	200015e0 	.word	0x200015e0
   13428:	200014d0 	.word	0x200014d0
   1342c:	40001104 	.word	0x40001104
   13430:	4001f000 	.word	0x4001f000

00013434 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   13434:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13436:	4b0e      	ldr	r3, [pc, #56]	; (13470 <radio_ccm_tx_pkt_set+0x3c>)
   13438:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1343a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1343c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13440:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   13444:	4c0b      	ldr	r4, [pc, #44]	; (13474 <radio_ccm_tx_pkt_set+0x40>)
   13446:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1344a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1344e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   13452:	4809      	ldr	r0, [pc, #36]	; (13478 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13454:	4909      	ldr	r1, [pc, #36]	; (1347c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   13456:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1345a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1345e:	2101      	movs	r1, #1
   13460:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13464:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13468:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   1346c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1346e:	bd10      	pop	{r4, pc}
   13470:	4000f000 	.word	0x4000f000
   13474:	01010000 	.word	0x01010000
   13478:	200015e0 	.word	0x200015e0
   1347c:	200014d0 	.word	0x200014d0

00013480 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   13480:	4b0c      	ldr	r3, [pc, #48]	; (134b4 <radio_ccm_is_done+0x34>)
   13482:	2202      	movs	r2, #2
   13484:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   13488:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1348c:	b16a      	cbz	r2, 134aa <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1348e:	2202      	movs	r2, #2
   13490:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   13494:	4a08      	ldr	r2, [pc, #32]	; (134b8 <radio_ccm_is_done+0x38>)
   13496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1349a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1349e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   134a2:	fab0 f080 	clz	r0, r0
   134a6:	0940      	lsrs	r0, r0, #5
   134a8:	4770      	bx	lr
		__WFE();
   134aa:	bf20      	wfe
		__SEV();
   134ac:	bf40      	sev
		__WFE();
   134ae:	bf20      	wfe
   134b0:	e7ea      	b.n	13488 <radio_ccm_is_done+0x8>
   134b2:	bf00      	nop
   134b4:	4000f000 	.word	0x4000f000
   134b8:	e000e100 	.word	0xe000e100

000134bc <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   134bc:	4b03      	ldr	r3, [pc, #12]	; (134cc <radio_ccm_mic_is_valid+0x10>)
   134be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   134c2:	3000      	adds	r0, #0
   134c4:	bf18      	it	ne
   134c6:	2001      	movne	r0, #1
   134c8:	4770      	bx	lr
   134ca:	bf00      	nop
   134cc:	4000f000 	.word	0x4000f000

000134d0 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   134d0:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   134d2:	4c13      	ldr	r4, [pc, #76]	; (13520 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   134d4:	4d13      	ldr	r5, [pc, #76]	; (13524 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   134d6:	2303      	movs	r3, #3
   134d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   134dc:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   134e0:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   134e4:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   134e8:	3b01      	subs	r3, #1
   134ea:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   134ee:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   134f0:	4b0d      	ldr	r3, [pc, #52]	; (13528 <radio_ar_configure+0x58>)
   134f2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   134f6:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   134f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   134fc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   13500:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   13504:	f7ff fe46 	bl	13194 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   13508:	4b08      	ldr	r3, [pc, #32]	; (1352c <radio_ar_configure+0x5c>)
   1350a:	4a09      	ldr	r2, [pc, #36]	; (13530 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1350c:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   13510:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   13514:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   13516:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   1351a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1351e:	bd38      	pop	{r3, r4, r5, pc}
   13520:	4000f000 	.word	0x4000f000
   13524:	40001000 	.word	0x40001000
   13528:	200014cc 	.word	0x200014cc
   1352c:	4001f000 	.word	0x4001f000
   13530:	40001128 	.word	0x40001128

00013534 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   13534:	4b01      	ldr	r3, [pc, #4]	; (1353c <radio_ar_match_get+0x8>)
   13536:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1353a:	4770      	bx	lr
   1353c:	4000f000 	.word	0x4000f000

00013540 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   13540:	4a04      	ldr	r2, [pc, #16]	; (13554 <radio_ar_status_reset+0x14>)
   13542:	2300      	movs	r3, #0
   13544:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   13548:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1354c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   13550:	4770      	bx	lr
   13552:	bf00      	nop
   13554:	40001000 	.word	0x40001000

00013558 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   13558:	4b08      	ldr	r3, [pc, #32]	; (1357c <radio_ar_has_match+0x24>)
   1355a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1355e:	b160      	cbz	r0, 1357a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   13560:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   13564:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   13568:	b138      	cbz	r0, 1357a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1356a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1356e:	b120      	cbz	r0, 1357a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   13570:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   13574:	fab0 f080 	clz	r0, r0
   13578:	0940      	lsrs	r0, r0, #5
}
   1357a:	4770      	bx	lr
   1357c:	40001000 	.word	0x40001000

00013580 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13580:	2901      	cmp	r1, #1
{
   13582:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13584:	d00e      	beq.n	135a4 <mayfly_enable_cb+0x24>
   13586:	4b0d      	ldr	r3, [pc, #52]	; (135bc <mayfly_enable_cb+0x3c>)
   13588:	9301      	str	r3, [sp, #4]
   1358a:	9300      	str	r3, [sp, #0]
   1358c:	4a0c      	ldr	r2, [pc, #48]	; (135c0 <mayfly_enable_cb+0x40>)
   1358e:	4b0d      	ldr	r3, [pc, #52]	; (135c4 <mayfly_enable_cb+0x44>)
   13590:	490d      	ldr	r1, [pc, #52]	; (135c8 <mayfly_enable_cb+0x48>)
   13592:	480e      	ldr	r0, [pc, #56]	; (135cc <mayfly_enable_cb+0x4c>)
   13594:	f7ed fcfa 	bl	f8c <printk>
   13598:	4040      	eors	r0, r0
   1359a:	f380 8811 	msr	BASEPRI, r0
   1359e:	f04f 0004 	mov.w	r0, #4
   135a2:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   135a4:	2018      	movs	r0, #24
	if (enable) {
   135a6:	b122      	cbz	r2, 135b2 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   135a8:	b003      	add	sp, #12
   135aa:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   135ae:	f7ee b953 	b.w	1858 <_arch_irq_enable>
}
   135b2:	b003      	add	sp, #12
   135b4:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   135b8:	f7ee b95e 	b.w	1878 <_arch_irq_disable>
   135bc:	000155c5 	.word	0x000155c5
   135c0:	0001699e 	.word	0x0001699e
   135c4:	00019890 	.word	0x00019890
   135c8:	000169ed 	.word	0x000169ed
   135cc:	000198bf 	.word	0x000198bf

000135d0 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   135d0:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   135d2:	b181      	cbz	r1, 135f6 <mayfly_is_enabled+0x26>
   135d4:	2901      	cmp	r1, #1
   135d6:	d014      	beq.n	13602 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   135d8:	4b0b      	ldr	r3, [pc, #44]	; (13608 <mayfly_is_enabled+0x38>)
   135da:	9301      	str	r3, [sp, #4]
   135dc:	9300      	str	r3, [sp, #0]
   135de:	4a0b      	ldr	r2, [pc, #44]	; (1360c <mayfly_is_enabled+0x3c>)
   135e0:	4b0b      	ldr	r3, [pc, #44]	; (13610 <mayfly_is_enabled+0x40>)
   135e2:	490c      	ldr	r1, [pc, #48]	; (13614 <mayfly_is_enabled+0x44>)
   135e4:	480c      	ldr	r0, [pc, #48]	; (13618 <mayfly_is_enabled+0x48>)
   135e6:	f7ed fcd1 	bl	f8c <printk>
   135ea:	4040      	eors	r0, r0
   135ec:	f380 8811 	msr	BASEPRI, r0
   135f0:	f04f 0004 	mov.w	r0, #4
   135f4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   135f6:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   135f8:	b003      	add	sp, #12
   135fa:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   135fe:	f7ee b94f 	b.w	18a0 <_arch_irq_is_enabled>
   13602:	2018      	movs	r0, #24
   13604:	e7f8      	b.n	135f8 <mayfly_is_enabled+0x28>
   13606:	bf00      	nop
   13608:	000155c5 	.word	0x000155c5
   1360c:	0001699e 	.word	0x0001699e
   13610:	000198a1 	.word	0x000198a1
   13614:	000169ed 	.word	0x000169ed
   13618:	00016912 	.word	0x00016912

0001361c <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1361c:	4288      	cmp	r0, r1
   1361e:	d00a      	beq.n	13636 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   13620:	b918      	cbnz	r0, 1362a <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   13622:	1e4b      	subs	r3, r1, #1
   13624:	4258      	negs	r0, r3
   13626:	4158      	adcs	r0, r3
   13628:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1362a:	2801      	cmp	r0, #1
   1362c:	d105      	bne.n	1363a <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1362e:	fab1 f081 	clz	r0, r1
   13632:	0940      	lsrs	r0, r0, #5
   13634:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13636:	2001      	movs	r0, #1
   13638:	4770      	bx	lr
   1363a:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   1363c:	4770      	bx	lr
	...

00013640 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   13640:	b507      	push	{r0, r1, r2, lr}
   13642:	4b0e      	ldr	r3, [pc, #56]	; (1367c <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   13644:	b181      	cbz	r1, 13668 <mayfly_pend+0x28>
   13646:	2901      	cmp	r1, #1
   13648:	d015      	beq.n	13676 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1364a:	4b0d      	ldr	r3, [pc, #52]	; (13680 <mayfly_pend+0x40>)
   1364c:	9301      	str	r3, [sp, #4]
   1364e:	9300      	str	r3, [sp, #0]
   13650:	4a0c      	ldr	r2, [pc, #48]	; (13684 <mayfly_pend+0x44>)
   13652:	4b0d      	ldr	r3, [pc, #52]	; (13688 <mayfly_pend+0x48>)
   13654:	490d      	ldr	r1, [pc, #52]	; (1368c <mayfly_pend+0x4c>)
   13656:	480e      	ldr	r0, [pc, #56]	; (13690 <mayfly_pend+0x50>)
   13658:	f7ed fc98 	bl	f8c <printk>
   1365c:	4040      	eors	r0, r0
   1365e:	f380 8811 	msr	BASEPRI, r0
   13662:	f04f 0004 	mov.w	r0, #4
   13666:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13668:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1366c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   13670:	b003      	add	sp, #12
   13672:	f85d fb04 	ldr.w	pc, [sp], #4
   13676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1367a:	e7f7      	b.n	1366c <mayfly_pend+0x2c>
   1367c:	e000e100 	.word	0xe000e100
   13680:	000155c5 	.word	0x000155c5
   13684:	0001699e 	.word	0x0001699e
   13688:	000198b3 	.word	0x000198b3
   1368c:	000169ed 	.word	0x000169ed
   13690:	00016912 	.word	0x00016912

00013694 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13694:	2803      	cmp	r0, #3
{
   13696:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13698:	d90e      	bls.n	136b8 <hal_ticker_instance0_caller_id_get+0x24>
   1369a:	4b0e      	ldr	r3, [pc, #56]	; (136d4 <hal_ticker_instance0_caller_id_get+0x40>)
   1369c:	9301      	str	r3, [sp, #4]
   1369e:	9300      	str	r3, [sp, #0]
   136a0:	4a0d      	ldr	r2, [pc, #52]	; (136d8 <hal_ticker_instance0_caller_id_get+0x44>)
   136a2:	4b0e      	ldr	r3, [pc, #56]	; (136dc <hal_ticker_instance0_caller_id_get+0x48>)
   136a4:	490e      	ldr	r1, [pc, #56]	; (136e0 <hal_ticker_instance0_caller_id_get+0x4c>)
   136a6:	480f      	ldr	r0, [pc, #60]	; (136e4 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   136a8:	f7ed fc70 	bl	f8c <printk>
   136ac:	4040      	eors	r0, r0
   136ae:	f380 8811 	msr	BASEPRI, r0
   136b2:	f04f 0004 	mov.w	r0, #4
   136b6:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   136b8:	4b0b      	ldr	r3, [pc, #44]	; (136e8 <hal_ticker_instance0_caller_id_get+0x54>)
   136ba:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   136bc:	b938      	cbnz	r0, 136ce <hal_ticker_instance0_caller_id_get+0x3a>
   136be:	4b05      	ldr	r3, [pc, #20]	; (136d4 <hal_ticker_instance0_caller_id_get+0x40>)
   136c0:	9301      	str	r3, [sp, #4]
   136c2:	9300      	str	r3, [sp, #0]
   136c4:	4a04      	ldr	r2, [pc, #16]	; (136d8 <hal_ticker_instance0_caller_id_get+0x44>)
   136c6:	4b05      	ldr	r3, [pc, #20]	; (136dc <hal_ticker_instance0_caller_id_get+0x48>)
   136c8:	4905      	ldr	r1, [pc, #20]	; (136e0 <hal_ticker_instance0_caller_id_get+0x4c>)
   136ca:	4808      	ldr	r0, [pc, #32]	; (136ec <hal_ticker_instance0_caller_id_get+0x58>)
   136cc:	e7ec      	b.n	136a8 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   136ce:	b003      	add	sp, #12
   136d0:	f85d fb04 	ldr.w	pc, [sp], #4
   136d4:	000155c5 	.word	0x000155c5
   136d8:	0001699e 	.word	0x0001699e
   136dc:	000198ef 	.word	0x000198ef
   136e0:	000169ed 	.word	0x000169ed
   136e4:	00019931 	.word	0x00019931
   136e8:	0001992d 	.word	0x0001992d
   136ec:	00019972 	.word	0x00019972

000136f0 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   136f0:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   136f2:	3802      	subs	r0, #2
{
   136f4:	461c      	mov	r4, r3
	switch (caller_id) {
   136f6:	2803      	cmp	r0, #3
   136f8:	d818      	bhi.n	1372c <hal_ticker_instance0_sched+0x3c>
   136fa:	e8df f000 	tbb	[pc, r0]
   136fe:	0d02      	.short	0x0d02
   13700:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   13702:	2903      	cmp	r1, #3
   13704:	d112      	bne.n	1372c <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   13706:	4b19      	ldr	r3, [pc, #100]	; (1376c <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13708:	2100      	movs	r1, #0
			m.param = instance;
   1370a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1370c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1370e:	b002      	add	sp, #8
   13710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13714:	f7f4 bb34 	b.w	7d80 <mayfly_enqueue>
		switch (callee_id) {
   13718:	2904      	cmp	r1, #4
   1371a:	d107      	bne.n	1372c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   1371c:	4b14      	ldr	r3, [pc, #80]	; (13770 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1371e:	2101      	movs	r1, #1
			m.param = instance;
   13720:	609c      	str	r4, [r3, #8]
   13722:	e7f3      	b.n	1370c <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   13724:	2903      	cmp	r1, #3
   13726:	d010      	beq.n	1374a <hal_ticker_instance0_sched+0x5a>
   13728:	2904      	cmp	r1, #4
   1372a:	d013      	beq.n	13754 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   1372c:	4b11      	ldr	r3, [pc, #68]	; (13774 <hal_ticker_instance0_sched+0x84>)
   1372e:	9301      	str	r3, [sp, #4]
   13730:	9300      	str	r3, [sp, #0]
   13732:	4a11      	ldr	r2, [pc, #68]	; (13778 <hal_ticker_instance0_sched+0x88>)
   13734:	4b11      	ldr	r3, [pc, #68]	; (1377c <hal_ticker_instance0_sched+0x8c>)
   13736:	4912      	ldr	r1, [pc, #72]	; (13780 <hal_ticker_instance0_sched+0x90>)
   13738:	4812      	ldr	r0, [pc, #72]	; (13784 <hal_ticker_instance0_sched+0x94>)
   1373a:	f7ed fc27 	bl	f8c <printk>
   1373e:	4040      	eors	r0, r0
   13740:	f380 8811 	msr	BASEPRI, r0
   13744:	f04f 0004 	mov.w	r0, #4
   13748:	df02      	svc	2
			m.param = instance;
   1374a:	4b0f      	ldr	r3, [pc, #60]	; (13788 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1374c:	2100      	movs	r1, #0
			m.param = instance;
   1374e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13750:	2001      	movs	r0, #1
   13752:	e7dc      	b.n	1370e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   13754:	4b0d      	ldr	r3, [pc, #52]	; (1378c <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13756:	2101      	movs	r1, #1
			m.param = instance;
   13758:	609c      	str	r4, [r3, #8]
   1375a:	e7f9      	b.n	13750 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   1375c:	2904      	cmp	r1, #4
   1375e:	d1e5      	bne.n	1372c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13760:	4b0b      	ldr	r3, [pc, #44]	; (13790 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13762:	2101      	movs	r1, #1
			m.param = instance;
   13764:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13766:	2003      	movs	r0, #3
   13768:	e7d1      	b.n	1370e <hal_ticker_instance0_sched+0x1e>
   1376a:	bf00      	nop
   1376c:	20003e48 	.word	0x20003e48
   13770:	20003e58 	.word	0x20003e58
   13774:	000155c5 	.word	0x000155c5
   13778:	0001699e 	.word	0x0001699e
   1377c:	00019912 	.word	0x00019912
   13780:	000169ed 	.word	0x000169ed
   13784:	00016912 	.word	0x00016912
   13788:	20003e68 	.word	0x20003e68
   1378c:	20003e78 	.word	0x20003e78
   13790:	20003e88 	.word	0x20003e88

00013794 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   13794:	4601      	mov	r1, r0
   13796:	2000      	movs	r0, #0
   13798:	f7ff ba62 	b.w	12c60 <cntr_cmp_set>

0001379c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   1379c:	4770      	bx	lr
	...

000137a0 <net_buf_pool_get>:
}
   137a0:	4b01      	ldr	r3, [pc, #4]	; (137a8 <net_buf_pool_get+0x8>)
   137a2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   137a6:	4770      	bx	lr
   137a8:	20003f5c 	.word	0x20003f5c

000137ac <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   137ac:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   137ae:	4b04      	ldr	r3, [pc, #16]	; (137c0 <net_buf_id+0x14>)
   137b0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   137b4:	69db      	ldr	r3, [r3, #28]
   137b6:	1ac0      	subs	r0, r0, r3
}
   137b8:	4b02      	ldr	r3, [pc, #8]	; (137c4 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   137ba:	10c0      	asrs	r0, r0, #3
}
   137bc:	4358      	muls	r0, r3
   137be:	4770      	bx	lr
   137c0:	20003f5c 	.word	0x20003f5c
   137c4:	aaaaaaab 	.word	0xaaaaaaab

000137c8 <fixed_data_alloc>:
{
   137c8:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   137ca:	4b09      	ldr	r3, [pc, #36]	; (137f0 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   137cc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   137ce:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   137d2:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   137d4:	699b      	ldr	r3, [r3, #24]
   137d6:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   137d8:	6823      	ldr	r3, [r4, #0]
   137da:	429a      	cmp	r2, r3
   137dc:	bf94      	ite	ls
   137de:	600a      	strls	r2, [r1, #0]
   137e0:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   137e2:	f7ff ffe3 	bl	137ac <net_buf_id>
   137e6:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   137ea:	fb02 3000 	mla	r0, r2, r0, r3
   137ee:	bd10      	pop	{r4, pc}
   137f0:	20003f5c 	.word	0x20003f5c

000137f4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   137f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   137f8:	4605      	mov	r5, r0
   137fa:	9101      	str	r1, [sp, #4]
   137fc:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   137fe:	f001 f96f 	bl	14ae0 <_impl_k_uptime_get_32>
   13802:	4607      	mov	r7, r0
	__asm__ volatile(
   13804:	f04f 0320 	mov.w	r3, #32
   13808:	f3ef 8811 	mrs	r8, BASEPRI
   1380c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   13810:	8a6b      	ldrh	r3, [r5, #18]
   13812:	2b00      	cmp	r3, #0
   13814:	d03d      	beq.n	13892 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   13816:	8a2a      	ldrh	r2, [r5, #16]
   13818:	429a      	cmp	r2, r3
   1381a:	d92a      	bls.n	13872 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1381c:	2100      	movs	r1, #0
   1381e:	4628      	mov	r0, r5
   13820:	f000 fe78 	bl	14514 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   13824:	b328      	cbz	r0, 13872 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13826:	f388 8811 	msr	BASEPRI, r8
   1382a:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1382c:	9b01      	ldr	r3, [sp, #4]
   1382e:	2b00      	cmp	r3, #0
   13830:	d03c      	beq.n	138ac <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   13832:	1c73      	adds	r3, r6, #1
   13834:	2b01      	cmp	r3, #1
   13836:	d906      	bls.n	13846 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13838:	f001 f952 	bl	14ae0 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   1383c:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   1383e:	42b0      	cmp	r0, r6
   13840:	bf94      	ite	ls
   13842:	1a36      	subls	r6, r6, r0
   13844:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13846:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13848:	4f1e      	ldr	r7, [pc, #120]	; (138c4 <net_buf_alloc_len+0xd0>)
   1384a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   1384e:	4632      	mov	r2, r6
   13850:	699b      	ldr	r3, [r3, #24]
   13852:	681b      	ldr	r3, [r3, #0]
   13854:	a901      	add	r1, sp, #4
   13856:	681b      	ldr	r3, [r3, #0]
   13858:	4620      	mov	r0, r4
   1385a:	4798      	blx	r3
   1385c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1385e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   13860:	bb28      	cbnz	r0, 138ae <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   13862:	79a0      	ldrb	r0, [r4, #6]
   13864:	4621      	mov	r1, r4
   13866:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1386a:	f000 fe34 	bl	144d6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1386e:	462c      	mov	r4, r5
   13870:	e018      	b.n	138a4 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   13872:	8a68      	ldrh	r0, [r5, #18]
   13874:	1e43      	subs	r3, r0, #1
   13876:	826b      	strh	r3, [r5, #18]
   13878:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1387c:	8a2c      	ldrh	r4, [r5, #16]
   1387e:	1a24      	subs	r4, r4, r0
   13880:	69e8      	ldr	r0, [r5, #28]
   13882:	2318      	movs	r3, #24
   13884:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   13888:	4b0e      	ldr	r3, [pc, #56]	; (138c4 <net_buf_alloc_len+0xd0>)
   1388a:	1aed      	subs	r5, r5, r3
   1388c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1388e:	71a5      	strb	r5, [r4, #6]
		goto success;
   13890:	e7cc      	b.n	1382c <net_buf_alloc_len+0x38>
   13892:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13896:	4631      	mov	r1, r6
   13898:	4628      	mov	r0, r5
   1389a:	f000 fe3b 	bl	14514 <_impl_k_queue_get>
		return NULL;
   1389e:	4604      	mov	r4, r0
	if (!buf) {
   138a0:	2800      	cmp	r0, #0
   138a2:	d1c3      	bne.n	1382c <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   138a4:	4620      	mov	r0, r4
   138a6:	b002      	add	sp, #8
   138a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   138ac:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   138ae:	2301      	movs	r3, #1
   138b0:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   138b2:	2300      	movs	r3, #0
	buf->frags = NULL;
   138b4:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   138b6:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   138b8:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   138ba:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   138bc:	6923      	ldr	r3, [r4, #16]
   138be:	81e2      	strh	r2, [r4, #14]
   138c0:	60a3      	str	r3, [r4, #8]
	return buf;
   138c2:	e7ef      	b.n	138a4 <net_buf_alloc_len+0xb0>
   138c4:	20003f5c 	.word	0x20003f5c

000138c8 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   138c8:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   138ca:	685b      	ldr	r3, [r3, #4]
   138cc:	460a      	mov	r2, r1
   138ce:	6819      	ldr	r1, [r3, #0]
   138d0:	f7ff bf90 	b.w	137f4 <net_buf_alloc_len>

000138d4 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   138d4:	b570      	push	{r4, r5, r6, lr}
   138d6:	4606      	mov	r6, r0
   138d8:	f000 fe1c 	bl	14514 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   138dc:	4605      	mov	r5, r0
   138de:	b128      	cbz	r0, 138ec <net_buf_get+0x18>
   138e0:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   138e2:	7963      	ldrb	r3, [r4, #5]
   138e4:	f013 0301 	ands.w	r3, r3, #1
   138e8:	d102      	bne.n	138f0 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   138ea:	6023      	str	r3, [r4, #0]

	return buf;
}
   138ec:	4628      	mov	r0, r5
   138ee:	bd70      	pop	{r4, r5, r6, pc}
   138f0:	2100      	movs	r1, #0
   138f2:	4630      	mov	r0, r6
   138f4:	f000 fe0e 	bl	14514 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   138f8:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   138fa:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   138fc:	f023 0301 	bic.w	r3, r3, #1
   13900:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13902:	4604      	mov	r4, r0
   13904:	e7ed      	b.n	138e2 <net_buf_get+0xe>

00013906 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   13906:	6883      	ldr	r3, [r0, #8]
   13908:	4419      	add	r1, r3
   1390a:	6001      	str	r1, [r0, #0]
   1390c:	4770      	bx	lr

0001390e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1390e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   13910:	460a      	mov	r2, r1
   13912:	6814      	ldr	r4, [r2, #0]
   13914:	b914      	cbnz	r4, 1391c <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   13916:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   13918:	f000 bde2 	b.w	144e0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1391c:	7953      	ldrb	r3, [r2, #5]
   1391e:	f043 0301 	orr.w	r3, r3, #1
   13922:	7153      	strb	r3, [r2, #5]
   13924:	4622      	mov	r2, r4
   13926:	e7f4      	b.n	13912 <net_buf_put+0x4>

00013928 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1392a:	4d15      	ldr	r5, [pc, #84]	; (13980 <net_buf_unref+0x58>)
   1392c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1392e:	2600      	movs	r6, #0
	while (buf) {
   13930:	b904      	cbnz	r4, 13934 <net_buf_unref+0xc>
   13932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   13934:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   13936:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   13938:	3b01      	subs	r3, #1
   1393a:	b2db      	uxtb	r3, r3
   1393c:	7123      	strb	r3, [r4, #4]
   1393e:	2b00      	cmp	r3, #0
   13940:	d1f7      	bne.n	13932 <net_buf_unref+0xa>
		if (buf->__buf) {
   13942:	6921      	ldr	r1, [r4, #16]
   13944:	b159      	cbz	r1, 1395e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13946:	7963      	ldrb	r3, [r4, #5]
   13948:	079b      	lsls	r3, r3, #30
   1394a:	d407      	bmi.n	1395c <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1394c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1394e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   13952:	4620      	mov	r0, r4
   13954:	699b      	ldr	r3, [r3, #24]
   13956:	681b      	ldr	r3, [r3, #0]
   13958:	689b      	ldr	r3, [r3, #8]
   1395a:	4798      	blx	r3
			buf->__buf = NULL;
   1395c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1395e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13960:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   13962:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   13966:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   13968:	695b      	ldr	r3, [r3, #20]
   1396a:	b11b      	cbz	r3, 13974 <net_buf_unref+0x4c>
			pool->destroy(buf);
   1396c:	4620      	mov	r0, r4
   1396e:	4798      	blx	r3
{
   13970:	463c      	mov	r4, r7
   13972:	e7dd      	b.n	13930 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   13974:	4621      	mov	r1, r4
   13976:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1397a:	f000 fdac 	bl	144d6 <k_queue_prepend>
   1397e:	e7f7      	b.n	13970 <net_buf_unref+0x48>
   13980:	20003f5c 	.word	0x20003f5c

00013984 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   13984:	7903      	ldrb	r3, [r0, #4]
   13986:	3301      	adds	r3, #1
   13988:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1398a:	4770      	bx	lr

0001398c <net_buf_simple_add>:
	return buf->data + buf->len;
   1398c:	8883      	ldrh	r3, [r0, #4]
   1398e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   13990:	4419      	add	r1, r3
   13992:	8081      	strh	r1, [r0, #4]
	return tail;
}
   13994:	18d0      	adds	r0, r2, r3
   13996:	4770      	bx	lr

00013998 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   13998:	b430      	push	{r4, r5}
   1399a:	8883      	ldrh	r3, [r0, #4]
   1399c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1399e:	189d      	adds	r5, r3, r2
   139a0:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   139a2:	18e0      	adds	r0, r4, r3
}
   139a4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   139a6:	f7ee b929 	b.w	1bfc <memcpy>

000139aa <net_buf_simple_add_u8>:
   139aa:	8883      	ldrh	r3, [r0, #4]
   139ac:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   139ae:	b510      	push	{r4, lr}
	buf->len += len;
   139b0:	1c5c      	adds	r4, r3, #1
   139b2:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   139b4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   139b6:	18d0      	adds	r0, r2, r3
   139b8:	bd10      	pop	{r4, pc}

000139ba <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   139ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   139bc:	ab02      	add	r3, sp, #8
   139be:	8884      	ldrh	r4, [r0, #4]
   139c0:	f823 1d02 	strh.w	r1, [r3, #-2]!
   139c4:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   139c6:	1ca2      	adds	r2, r4, #2
   139c8:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   139ca:	4619      	mov	r1, r3
   139cc:	2202      	movs	r2, #2
   139ce:	1928      	adds	r0, r5, r4
   139d0:	f7ee f914 	bl	1bfc <memcpy>
}
   139d4:	b003      	add	sp, #12
   139d6:	bd30      	pop	{r4, r5, pc}

000139d8 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   139d8:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   139da:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   139dc:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   139de:	4411      	add	r1, r2
	buf->data -= len;
   139e0:	6003      	str	r3, [r0, #0]
	buf->len += len;
   139e2:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   139e4:	4618      	mov	r0, r3
   139e6:	4770      	bx	lr

000139e8 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   139e8:	8883      	ldrh	r3, [r0, #4]
   139ea:	1a5b      	subs	r3, r3, r1
   139ec:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   139ee:	6803      	ldr	r3, [r0, #0]
   139f0:	4419      	add	r1, r3
   139f2:	6001      	str	r1, [r0, #0]
}
   139f4:	4608      	mov	r0, r1
   139f6:	4770      	bx	lr

000139f8 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   139f8:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   139fa:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   139fc:	2101      	movs	r1, #1
	val = buf->data[0];
   139fe:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   13a00:	f7ff fff2 	bl	139e8 <net_buf_simple_pull>

	return val;
}
   13a04:	4610      	mov	r0, r2
   13a06:	bd08      	pop	{r3, pc}

00013a08 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   13a08:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   13a0a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13a0c:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   13a0e:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13a10:	f7ff ffea 	bl	139e8 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   13a14:	4610      	mov	r0, r2
   13a16:	bd08      	pop	{r3, pc}

00013a18 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   13a18:	6802      	ldr	r2, [r0, #0]
   13a1a:	6880      	ldr	r0, [r0, #8]
}
   13a1c:	1a10      	subs	r0, r2, r0
   13a1e:	4770      	bx	lr

00013a20 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   13a20:	6802      	ldr	r2, [r0, #0]
   13a22:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13a24:	88c3      	ldrh	r3, [r0, #6]
   13a26:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   13a28:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13a2a:	1a9b      	subs	r3, r3, r2
}
   13a2c:	1a18      	subs	r0, r3, r0
   13a2e:	4770      	bx	lr

00013a30 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13a30:	6800      	ldr	r0, [r0, #0]
   13a32:	6880      	ldr	r0, [r0, #8]
   13a34:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   13a36:	b941      	cbnz	r1, 13a4a <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   13a38:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   13a3c:	fa21 f202 	lsr.w	r2, r1, r2
   13a40:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   13a44:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   13a46:	2000      	movs	r0, #0
   13a48:	4770      	bx	lr
		*value = gpio->IN;
   13a4a:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   13a4e:	e7f9      	b.n	13a44 <gpio_nrf5_read+0x14>

00013a50 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13a50:	6800      	ldr	r0, [r0, #0]
   13a52:	6880      	ldr	r0, [r0, #8]
   13a54:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   13a56:	b949      	cbnz	r1, 13a6c <gpio_nrf5_write+0x1c>
   13a58:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   13a5a:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   13a5c:	b11b      	cbz	r3, 13a66 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   13a5e:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   13a62:	2000      	movs	r0, #0
   13a64:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   13a66:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   13a6a:	e7fa      	b.n	13a62 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   13a6c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   13a70:	e7f7      	b.n	13a62 <gpio_nrf5_write+0x12>

00013a72 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13a72:	6883      	ldr	r3, [r0, #8]
   13a74:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   13a76:	b172      	cbz	r2, 13a96 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   13a78:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   13a7a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13a7c:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   13a7e:	b902      	cbnz	r2, 13a82 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   13a80:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   13a82:	2000      	movs	r0, #0
   13a84:	4770      	bx	lr
	parent->next = child;
   13a86:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   13a88:	6858      	ldr	r0, [r3, #4]
   13a8a:	4281      	cmp	r1, r0
	list->tail = node;
   13a8c:	bf08      	it	eq
   13a8e:	605a      	streq	r2, [r3, #4]
   13a90:	e00d      	b.n	13aae <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   13a92:	4602      	mov	r2, r0
   13a94:	6800      	ldr	r0, [r0, #0]
   13a96:	2800      	cmp	r0, #0
   13a98:	d0f3      	beq.n	13a82 <gpio_nrf5_manage_callback+0x10>
   13a9a:	4281      	cmp	r1, r0
   13a9c:	d1f9      	bne.n	13a92 <gpio_nrf5_manage_callback+0x20>
   13a9e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   13aa0:	2a00      	cmp	r2, #0
   13aa2:	d1f0      	bne.n	13a86 <gpio_nrf5_manage_callback+0x14>
   13aa4:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13aa6:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   13aa8:	4291      	cmp	r1, r2
   13aaa:	d100      	bne.n	13aae <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   13aac:	6058      	str	r0, [r3, #4]
	parent->next = child;
   13aae:	2300      	movs	r3, #0
   13ab0:	600b      	str	r3, [r1, #0]
   13ab2:	e7e6      	b.n	13a82 <gpio_nrf5_manage_callback+0x10>

00013ab4 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   13ab4:	4b0c      	ldr	r3, [pc, #48]	; (13ae8 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   13ab6:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13ab8:	4d0c      	ldr	r5, [pc, #48]	; (13aec <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   13aba:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13abc:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   13abe:	fa24 f203 	lsr.w	r2, r4, r3
   13ac2:	07d2      	lsls	r2, r2, #31
   13ac4:	d508      	bpl.n	13ad8 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13ac6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   13aca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   13ace:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   13ad2:	4282      	cmp	r2, r0
   13ad4:	d100      	bne.n	13ad8 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13ad6:	b121      	cbz	r1, 13ae2 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13ad8:	3301      	adds	r3, #1
   13ada:	2b08      	cmp	r3, #8
   13adc:	d1ef      	bne.n	13abe <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   13ade:	f06f 0312 	mvn.w	r3, #18
}
   13ae2:	4618      	mov	r0, r3
   13ae4:	bd30      	pop	{r4, r5, pc}
   13ae6:	bf00      	nop
   13ae8:	20001724 	.word	0x20001724
   13aec:	40006000 	.word	0x40006000

00013af0 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   13af0:	b570      	push	{r4, r5, r6, lr}
   13af2:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13af4:	460d      	mov	r5, r1
   13af6:	b9c9      	cbnz	r1, 13b2c <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   13af8:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13afa:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   13afc:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   13afe:	4610      	mov	r0, r2
   13b00:	7919      	ldrb	r1, [r3, #4]
   13b02:	f7ff ffd7 	bl	13ab4 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13b06:	2800      	cmp	r0, #0
   13b08:	db12      	blt.n	13b30 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   13b0a:	68b2      	ldr	r2, [r6, #8]
   13b0c:	2301      	movs	r3, #1
   13b0e:	fa03 f404 	lsl.w	r4, r3, r4
   13b12:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   13b14:	f100 0140 	add.w	r1, r0, #64	; 0x40
   13b18:	4a06      	ldr	r2, [pc, #24]	; (13b34 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   13b1a:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   13b1c:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   13b20:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   13b24:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   13b28:	4628      	mov	r0, r5
   13b2a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   13b2c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   13b30:	bd70      	pop	{r4, r5, r6, pc}
   13b32:	bf00      	nop
   13b34:	40006000 	.word	0x40006000

00013b38 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   13b38:	b570      	push	{r4, r5, r6, lr}
   13b3a:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13b3c:	460d      	mov	r5, r1
   13b3e:	b9b1      	cbnz	r1, 13b6e <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   13b40:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13b42:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   13b44:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   13b46:	4610      	mov	r0, r2
   13b48:	7919      	ldrb	r1, [r3, #4]
   13b4a:	f7ff ffb3 	bl	13ab4 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13b4e:	2800      	cmp	r0, #0
   13b50:	db0f      	blt.n	13b72 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   13b52:	68b2      	ldr	r2, [r6, #8]
   13b54:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   13b56:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   13b5a:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   13b5e:	4b05      	ldr	r3, [pc, #20]	; (13b74 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   13b60:	ea22 0404 	bic.w	r4, r2, r4
   13b64:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   13b66:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   13b6a:	4628      	mov	r0, r5
   13b6c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   13b6e:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   13b72:	bd70      	pop	{r4, r5, r6, pc}
   13b74:	40006000 	.word	0x40006000

00013b78 <gpio_nrf5_config>:
{
   13b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13b7c:	6806      	ldr	r6, [r0, #0]
{
   13b7e:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13b80:	68b2      	ldr	r2, [r6, #8]
   13b82:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13b84:	b119      	cbz	r1, 13b8e <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   13b86:	f06f 0022 	mvn.w	r0, #34	; 0x22
   13b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13b8e:	f403 7240 	and.w	r2, r3, #768	; 0x300
   13b92:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   13b96:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   13b9a:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   13b9e:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13ba2:	d058      	beq.n	13c56 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   13ba4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   13ba8:	bf0c      	ite	eq
   13baa:	2204      	moveq	r2, #4
   13bac:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   13bae:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   13bb2:	bf08      	it	eq
   13bb4:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   13bb6:	f013 0f01 	tst.w	r3, #1
   13bba:	ea4f 0180 	mov.w	r1, r0, lsl #2
   13bbe:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 13c8c <gpio_nrf5_config+0x114>
   13bc2:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   13bc6:	d04f      	beq.n	13c68 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   13bc8:	2a0c      	cmp	r2, #12
   13bca:	d146      	bne.n	13c5a <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   13bcc:	2701      	movs	r7, #1
   13bce:	40a7      	lsls	r7, r4
   13bd0:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   13bd4:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   13bd6:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   13bda:	f041 0103 	orr.w	r1, r1, #3
   13bde:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   13be0:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   13be4:	f013 0002 	ands.w	r0, r3, #2
   13be8:	d049      	beq.n	13c7e <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   13bea:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   13bec:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   13bee:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   13bf2:	d5c8      	bpl.n	13b86 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   13bf4:	065a      	lsls	r2, r3, #25
   13bf6:	d43d      	bmi.n	13c74 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   13bf8:	f013 0f04 	tst.w	r3, #4
   13bfc:	bf14      	ite	ne
   13bfe:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   13c02:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   13c06:	4e1f      	ldr	r6, [pc, #124]	; (13c84 <gpio_nrf5_config+0x10c>)
   13c08:	6837      	ldr	r7, [r6, #0]
   13c0a:	4638      	mov	r0, r7
   13c0c:	f7ec fb1a 	bl	244 <__popcountsi2>
   13c10:	2808      	cmp	r0, #8
   13c12:	d032      	beq.n	13c7a <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   13c14:	4641      	mov	r1, r8
   13c16:	4620      	mov	r0, r4
   13c18:	f7ff ff4c 	bl	13ab4 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13c1c:	2800      	cmp	r0, #0
   13c1e:	da08      	bge.n	13c32 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   13c20:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   13c22:	fa93 f0a3 	rbit	r0, r3
   13c26:	2b00      	cmp	r3, #0
   13c28:	fab0 f080 	clz	r0, r0
   13c2c:	bf08      	it	eq
   13c2e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   13c32:	2301      	movs	r3, #1
   13c34:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   13c36:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   13c38:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   13c3a:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   13c3e:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   13c40:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   13c44:	4b10      	ldr	r3, [pc, #64]	; (13c88 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   13c46:	f044 0401 	orr.w	r4, r4, #1
   13c4a:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   13c4c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   13c50:	2000      	movs	r0, #0
   13c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   13c56:	220c      	movs	r2, #12
   13c58:	e7a9      	b.n	13bae <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   13c5a:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   13c5c:	bf02      	ittt	eq
   13c5e:	2701      	moveq	r7, #1
   13c60:	40a7      	lsleq	r7, r4
   13c62:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   13c66:	e7b5      	b.n	13bd4 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   13c68:	4461      	add	r1, ip
   13c6a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   13c6e:	430a      	orrs	r2, r1
   13c70:	433a      	orrs	r2, r7
   13c72:	e7b5      	b.n	13be0 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   13c74:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   13c78:	e7c5      	b.n	13c06 <gpio_nrf5_config+0x8e>
			return -EIO;
   13c7a:	f06f 0004 	mvn.w	r0, #4
}
   13c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c82:	bf00      	nop
   13c84:	20001724 	.word	0x20001724
   13c88:	40006000 	.word	0x40006000
   13c8c:	000199b0 	.word	0x000199b0

00013c90 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   13c90:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   13c92:	2200      	movs	r2, #0
   13c94:	2105      	movs	r1, #5
   13c96:	2006      	movs	r0, #6
   13c98:	f7ed fe10 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   13c9c:	2006      	movs	r0, #6
   13c9e:	f7ed fddb 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   13ca2:	2000      	movs	r0, #0
   13ca4:	bd08      	pop	{r3, pc}
	...

00013ca8 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13ca8:	2100      	movs	r1, #0
{
   13caa:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   13cac:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   13cae:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   13cb0:	2501      	movs	r5, #1
   13cb2:	008b      	lsls	r3, r1, #2
   13cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13cb8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   13cbc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13cc0:	b140      	cbz	r0, 13cd4 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13cc2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   13cc6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13cca:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   13cce:	fa05 f303 	lsl.w	r3, r5, r3
   13cd2:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13cd4:	3101      	adds	r1, #1
   13cd6:	2908      	cmp	r1, #8
   13cd8:	d1eb      	bne.n	13cb2 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   13cda:	4e08      	ldr	r6, [pc, #32]	; (13cfc <gpio_nrf5_port_isr+0x54>)
   13cdc:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   13cde:	689d      	ldr	r5, [r3, #8]
   13ce0:	681c      	ldr	r4, [r3, #0]
   13ce2:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   13ce4:	b14c      	cbz	r4, 13cfa <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   13ce6:	68a3      	ldr	r3, [r4, #8]
   13ce8:	421d      	tst	r5, r3
   13cea:	d004      	beq.n	13cf6 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   13cec:	6863      	ldr	r3, [r4, #4]
   13cee:	462a      	mov	r2, r5
   13cf0:	4621      	mov	r1, r4
   13cf2:	4630      	mov	r0, r6
   13cf4:	4798      	blx	r3
	return node->next;
   13cf6:	6824      	ldr	r4, [r4, #0]
   13cf8:	e7f4      	b.n	13ce4 <gpio_nrf5_port_isr+0x3c>
   13cfa:	bd70      	pop	{r4, r5, r6, pc}
   13cfc:	20003f04 	.word	0x20003f04

00013d00 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d00:	4b03      	ldr	r3, [pc, #12]	; (13d10 <uart_nrfx_err_check+0x10>)
   13d02:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   13d04:	b118      	cbz	r0, 13d0e <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13d06:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   13d0a:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   13d0e:	4770      	bx	lr
   13d10:	40002124 	.word	0x40002124

00013d14 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d14:	4b07      	ldr	r3, [pc, #28]	; (13d34 <uart_nrfx_poll_out+0x20>)
   13d16:	2200      	movs	r2, #0
   13d18:	601a      	str	r2, [r3, #0]
{
   13d1a:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13d1c:	681a      	ldr	r2, [r3, #0]
   13d1e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   13d20:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   13d22:	4a05      	ldr	r2, [pc, #20]	; (13d38 <uart_nrfx_poll_out+0x24>)
   13d24:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d28:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   13d2a:	2a00      	cmp	r2, #0
   13d2c:	d0fc      	beq.n	13d28 <uart_nrfx_poll_out+0x14>
}
   13d2e:	4608      	mov	r0, r1
   13d30:	b002      	add	sp, #8
   13d32:	4770      	bx	lr
   13d34:	4000211c 	.word	0x4000211c
   13d38:	40002000 	.word	0x40002000

00013d3c <uart_nrfx_poll_in>:
   13d3c:	4b08      	ldr	r3, [pc, #32]	; (13d60 <uart_nrfx_poll_in+0x24>)
   13d3e:	681a      	ldr	r2, [r3, #0]
{
   13d40:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   13d42:	b152      	cbz	r2, 13d5a <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d44:	2000      	movs	r0, #0
   13d46:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13d48:	681b      	ldr	r3, [r3, #0]
   13d4a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   13d4c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   13d4e:	4b05      	ldr	r3, [pc, #20]	; (13d64 <uart_nrfx_poll_in+0x28>)
   13d50:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   13d54:	700b      	strb	r3, [r1, #0]
}
   13d56:	b002      	add	sp, #8
   13d58:	4770      	bx	lr
		return -1;
   13d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d5e:	e7fa      	b.n	13d56 <uart_nrfx_poll_in+0x1a>
   13d60:	40002108 	.word	0x40002108
   13d64:	40002000 	.word	0x40002000

00013d68 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   13d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   13d6a:	4819      	ldr	r0, [pc, #100]	; (13dd0 <uart_nrfx_init+0x68>)
   13d6c:	f000 f98c 	bl	14088 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   13d70:	6843      	ldr	r3, [r0, #4]
   13d72:	4604      	mov	r4, r0
   13d74:	681d      	ldr	r5, [r3, #0]
   13d76:	2206      	movs	r2, #6
   13d78:	f240 1301 	movw	r3, #257	; 0x101
   13d7c:	2100      	movs	r1, #0
   13d7e:	47a8      	blx	r5
   13d80:	6863      	ldr	r3, [r4, #4]
   13d82:	681d      	ldr	r5, [r3, #0]
   13d84:	2300      	movs	r3, #0
   13d86:	4619      	mov	r1, r3
   13d88:	2208      	movs	r2, #8
   13d8a:	4620      	mov	r0, r4
   13d8c:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   13d8e:	4b11      	ldr	r3, [pc, #68]	; (13dd4 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13d90:	4911      	ldr	r1, [pc, #68]	; (13dd8 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   13d92:	2208      	movs	r2, #8
   13d94:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   13d98:	2206      	movs	r2, #6
   13d9a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13d9e:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13da0:	4a0e      	ldr	r2, [pc, #56]	; (13ddc <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13da2:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   13da6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   13daa:	2204      	movs	r2, #4
   13dac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13db0:	4a0b      	ldr	r2, [pc, #44]	; (13de0 <uart_nrfx_init+0x78>)
   13db2:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13db4:	6812      	ldr	r2, [r2, #0]
   13db6:	9201      	str	r2, [sp, #4]
    (void)dummy;
   13db8:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13dba:	4a0a      	ldr	r2, [pc, #40]	; (13de4 <uart_nrfx_init+0x7c>)
   13dbc:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13dbe:	6812      	ldr	r2, [r2, #0]
   13dc0:	9200      	str	r2, [sp, #0]
    (void)dummy;
   13dc2:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13dc4:	2201      	movs	r2, #1
   13dc6:	600a      	str	r2, [r1, #0]
   13dc8:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   13dca:	b003      	add	sp, #12
   13dcc:	bd30      	pop	{r4, r5, pc}
   13dce:	bf00      	nop
   13dd0:	00019a14 	.word	0x00019a14
   13dd4:	40002000 	.word	0x40002000
   13dd8:	40002008 	.word	0x40002008
   13ddc:	01d7e000 	.word	0x01d7e000
   13de0:	4000211c 	.word	0x4000211c
   13de4:	40002108 	.word	0x40002108

00013de8 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   13de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   13dec:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   13dee:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   13df0:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   13df2:	42a3      	cmp	r3, r4
	d = &rand[octets];
   13df4:	440a      	add	r2, r1
	s = &rng->rand[first];
   13df6:	4406      	add	r6, r0
	if (first <= last) {
   13df8:	d81f      	bhi.n	13e3a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   13dfa:	1ae4      	subs	r4, r4, r3
   13dfc:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   13dfe:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   13e00:	bf3e      	ittt	cc
   13e02:	1a64      	subcc	r4, r4, r1
   13e04:	b2e7      	uxtbcc	r7, r4
   13e06:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   13e08:	4423      	add	r3, r4
		octets -= avail;
   13e0a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   13e0e:	bf28      	it	cs
   13e10:	2700      	movcs	r7, #0
		first += avail;
   13e12:	b2db      	uxtb	r3, r3
		octets -= avail;
   13e14:	b2c9      	uxtb	r1, r1
   13e16:	4434      	add	r4, r6

		while (avail--) {
   13e18:	42a6      	cmp	r6, r4
   13e1a:	d109      	bne.n	13e30 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   13e1c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   13e1e:	7843      	ldrb	r3, [r0, #1]
   13e20:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   13e22:	bf82      	ittt	hi
   13e24:	4b20      	ldrhi	r3, [pc, #128]	; (13ea8 <get+0xc0>)
   13e26:	2201      	movhi	r2, #1
   13e28:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   13e2a:	4608      	mov	r0, r1
   13e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   13e30:	f816 5b01 	ldrb.w	r5, [r6], #1
   13e34:	f802 5d01 	strb.w	r5, [r2, #-1]!
   13e38:	e7ee      	b.n	13e18 <get+0x30>
		avail = rng->count - first;
   13e3a:	7805      	ldrb	r5, [r0, #0]
   13e3c:	1aed      	subs	r5, r5, r3
   13e3e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   13e40:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   13e42:	bf3f      	itttt	cc
   13e44:	1a67      	subcc	r7, r4, r1
   13e46:	19ed      	addcc	r5, r5, r7
   13e48:	b2ef      	uxtbcc	r7, r5
   13e4a:	460d      	movcc	r5, r1
			first += avail;
   13e4c:	bf38      	it	cc
   13e4e:	185b      	addcc	r3, r3, r1
		octets -= avail;
   13e50:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   13e54:	bf32      	itee	cc
   13e56:	b2db      	uxtbcc	r3, r3
   13e58:	4627      	movcs	r7, r4
			first = 0;
   13e5a:	2300      	movcs	r3, #0
		octets -= avail;
   13e5c:	b2c9      	uxtb	r1, r1
   13e5e:	4696      	mov	lr, r2
   13e60:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   13e64:	4566      	cmp	r6, ip
   13e66:	d119      	bne.n	13e9c <get+0xb4>
   13e68:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   13e6a:	2900      	cmp	r1, #0
   13e6c:	d0d6      	beq.n	13e1c <get+0x34>
   13e6e:	2c00      	cmp	r4, #0
   13e70:	d0d4      	beq.n	13e1c <get+0x34>
			if (octets < last) {
   13e72:	428c      	cmp	r4, r1
   13e74:	bf8a      	itet	hi
   13e76:	460b      	movhi	r3, r1
   13e78:	4623      	movls	r3, r4
				remaining = last - octets;
   13e7a:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   13e7c:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   13e80:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   13e84:	bf8c      	ite	hi
   13e86:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   13e88:	2700      	movls	r7, #0
			octets -= last;
   13e8a:	b2c9      	uxtb	r1, r1
   13e8c:	18f4      	adds	r4, r6, r3
			while (last--) {
   13e8e:	42a6      	cmp	r6, r4
   13e90:	d0c4      	beq.n	13e1c <get+0x34>
				*(--d) = *s++;
   13e92:	f816 5b01 	ldrb.w	r5, [r6], #1
   13e96:	f802 5d01 	strb.w	r5, [r2, #-1]!
   13e9a:	e7f8      	b.n	13e8e <get+0xa6>
			*(--d) = *s++;
   13e9c:	f816 8b01 	ldrb.w	r8, [r6], #1
   13ea0:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   13ea4:	e7de      	b.n	13e64 <get+0x7c>
   13ea6:	bf00      	nop
   13ea8:	4000d000 	.word	0x4000d000

00013eac <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   13eac:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   13eae:	b1d0      	cbz	r0, 13ee6 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   13eb0:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   13eb2:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   13eb4:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   13eb6:	1c53      	adds	r3, r2, #1
   13eb8:	b2db      	uxtb	r3, r3
		last = 0;
   13eba:	42ab      	cmp	r3, r5
   13ebc:	bf08      	it	eq
   13ebe:	2300      	moveq	r3, #0
	if (last == rng->first) {
   13ec0:	42a3      	cmp	r3, r4
   13ec2:	d010      	beq.n	13ee6 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   13ec4:	b161      	cbz	r1, 13ee0 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   13ec6:	490a      	ldr	r1, [pc, #40]	; (13ef0 <isr+0x44>)
   13ec8:	4402      	add	r2, r0
   13eca:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   13ece:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   13ed0:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   13ed2:	3301      	adds	r3, #1
   13ed4:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   13ed6:	429d      	cmp	r5, r3
   13ed8:	bf08      	it	eq
   13eda:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   13edc:	42a3      	cmp	r3, r4
   13ede:	d005      	beq.n	13eec <isr+0x40>
		return 0;
	}

	return -EBUSY;
   13ee0:	f06f 000f 	mvn.w	r0, #15
   13ee4:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   13ee6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13eea:	bd30      	pop	{r4, r5, pc}
		return 0;
   13eec:	2000      	movs	r0, #0
}
   13eee:	bd30      	pop	{r4, r5, pc}
   13ef0:	4000d000 	.word	0x4000d000

00013ef4 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   13ef4:	07db      	lsls	r3, r3, #31
{
   13ef6:	b570      	push	{r4, r5, r6, lr}
   13ef8:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   13efa:	d507      	bpl.n	13f0c <entropy_nrf5_get_entropy_isr+0x18>
   13efc:	4613      	mov	r3, r2
   13efe:	4a0d      	ldr	r2, [pc, #52]	; (13f34 <entropy_nrf5_get_entropy_isr+0x40>)
   13f00:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   13f02:	2500      	movs	r5, #0
	while (len) {
   13f04:	b94b      	cbnz	r3, 13f1a <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   13f06:	6050      	str	r0, [r2, #4]

	return cnt;
   13f08:	4620      	mov	r0, r4
}
   13f0a:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   13f0c:	6880      	ldr	r0, [r0, #8]
   13f0e:	460a      	mov	r2, r1
   13f10:	303c      	adds	r0, #60	; 0x3c
   13f12:	b2e1      	uxtb	r1, r4
   13f14:	f7ff ff68 	bl	13de8 <get>
   13f18:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   13f1a:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   13f1e:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   13f20:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   13f24:	2e00      	cmp	r6, #0
   13f26:	d0fb      	beq.n	13f20 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   13f28:	3b01      	subs	r3, #1
   13f2a:	b29b      	uxth	r3, r3
   13f2c:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   13f30:	54ce      	strb	r6, [r1, r3]
   13f32:	e7e7      	b.n	13f04 <entropy_nrf5_get_entropy_isr+0x10>
   13f34:	4000d000 	.word	0x4000d000

00013f38 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   13f38:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13f3a:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   13f3c:	2201      	movs	r2, #1
   13f3e:	4611      	mov	r1, r2
   13f40:	4620      	mov	r0, r4
   13f42:	f000 fd7f 	bl	14a44 <_impl_k_sem_init>
   13f46:	f104 0018 	add.w	r0, r4, #24
   13f4a:	2201      	movs	r2, #1
   13f4c:	2100      	movs	r1, #0
   13f4e:	f000 fd79 	bl	14a44 <_impl_k_sem_init>
	rng->threshold = threshold;
   13f52:	2304      	movs	r3, #4
   13f54:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13f58:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   13f5a:	2500      	movs	r5, #0
	rng->threshold = threshold;
   13f5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   13f60:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13f62:	4b11      	ldr	r3, [pc, #68]	; (13fa8 <entropy_nrf5_init+0x70>)
	rng->count = len;
   13f64:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   13f68:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   13f6a:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   13f6e:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   13f72:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   13f76:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   13f7a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13f7e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13f82:	f042 0201 	orr.w	r2, r2, #1
   13f86:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13f8a:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   13f8c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13f90:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13f92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   13f96:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13f98:	462a      	mov	r2, r5
   13f9a:	f7ed fc8f 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   13f9e:	4630      	mov	r0, r6
   13fa0:	f7ed fc5a 	bl	1858 <_arch_irq_enable>

	return 0;
}
   13fa4:	4628      	mov	r0, r5
   13fa6:	bd70      	pop	{r4, r5, r6, pc}
   13fa8:	4000d000 	.word	0x4000d000

00013fac <isr_rand>:
{
   13fac:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   13fae:	4b12      	ldr	r3, [pc, #72]	; (13ff8 <isr_rand+0x4c>)
   13fb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13fb4:	b1fb      	cbz	r3, 13ff6 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13fb6:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   13fb8:	2101      	movs	r1, #1
   13fba:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   13fbe:	f7ff ff75 	bl	13eac <isr>
		if (ret != -EBUSY) {
   13fc2:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   13fc6:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   13fc8:	d00d      	beq.n	13fe6 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   13fca:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   13fce:	bf14      	ite	ne
   13fd0:	2100      	movne	r1, #0
   13fd2:	2101      	moveq	r1, #1
   13fd4:	f105 0030 	add.w	r0, r5, #48	; 0x30
   13fd8:	f7ff ff68 	bl	13eac <isr>
   13fdc:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13fde:	f105 0018 	add.w	r0, r5, #24
   13fe2:	f000 fd38 	bl	14a56 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   13fe6:	4b04      	ldr	r3, [pc, #16]	; (13ff8 <isr_rand+0x4c>)
   13fe8:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   13fea:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   13fec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   13ff0:	bf1c      	itt	ne
   13ff2:	2201      	movne	r2, #1
   13ff4:	605a      	strne	r2, [r3, #4]
   13ff6:	bd38      	pop	{r3, r4, r5, pc}
   13ff8:	4000d000 	.word	0x4000d000

00013ffc <entropy_nrf5_get_entropy>:
{
   13ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   14000:	6885      	ldr	r5, [r0, #8]
{
   14002:	460f      	mov	r7, r1
   14004:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   14006:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   1400a:	b914      	cbnz	r4, 14012 <entropy_nrf5_get_entropy+0x16>
}
   1400c:	4620      	mov	r0, r4
   1400e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14012:	2cff      	cmp	r4, #255	; 0xff
   14014:	4623      	mov	r3, r4
   14016:	bf28      	it	cs
   14018:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   1401a:	1ae4      	subs	r4, r4, r3
   1401c:	b2de      	uxtb	r6, r3
   1401e:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   14020:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   14024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14028:	4628      	mov	r0, r5
   1402a:	f000 fd3c 	bl	14aa6 <_impl_k_sem_take>
   1402e:	4631      	mov	r1, r6
   14030:	463a      	mov	r2, r7
   14032:	4648      	mov	r0, r9
   14034:	f7ff fed8 	bl	13de8 <get>
   14038:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1403a:	4628      	mov	r0, r5
   1403c:	f000 fd0b 	bl	14a56 <_impl_k_sem_give>
			if (len8) {
   14040:	2e00      	cmp	r6, #0
   14042:	d0e2      	beq.n	1400a <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   14044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14048:	4640      	mov	r0, r8
   1404a:	f000 fd2c 	bl	14aa6 <_impl_k_sem_take>
   1404e:	e7e9      	b.n	14024 <entropy_nrf5_get_entropy+0x28>

00014050 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   14050:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   14052:	4802      	ldr	r0, [pc, #8]	; (1405c <entropy_nrf_get_entropy_isr+0xc>)
   14054:	460a      	mov	r2, r1
   14056:	4619      	mov	r1, r3
   14058:	f7ff bec6 	b.w	13de8 <get>
   1405c:	20001764 	.word	0x20001764

00014060 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   14060:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   14062:	4b08      	ldr	r3, [pc, #32]	; (14084 <_sys_device_do_config_level+0x24>)
   14064:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   14068:	3001      	adds	r0, #1
   1406a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1406e:	4620      	mov	r0, r4
   14070:	42a8      	cmp	r0, r5
   14072:	f104 040c 	add.w	r4, r4, #12
   14076:	d300      	bcc.n	1407a <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   14078:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   1407a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1407e:	685b      	ldr	r3, [r3, #4]
   14080:	4798      	blx	r3
   14082:	e7f4      	b.n	1406e <_sys_device_do_config_level+0xe>
   14084:	00019a30 	.word	0x00019a30

00014088 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   14088:	4b10      	ldr	r3, [pc, #64]	; (140cc <device_get_binding+0x44>)
{
   1408a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1408c:	4c10      	ldr	r4, [pc, #64]	; (140d0 <device_get_binding+0x48>)
{
   1408e:	4605      	mov	r5, r0
   14090:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   14092:	429c      	cmp	r4, r3
   14094:	d104      	bne.n	140a0 <device_get_binding+0x18>
   14096:	4c0e      	ldr	r4, [pc, #56]	; (140d0 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   14098:	42b4      	cmp	r4, r6
   1409a:	d109      	bne.n	140b0 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   1409c:	2400      	movs	r4, #0
   1409e:	e012      	b.n	140c6 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   140a0:	6862      	ldr	r2, [r4, #4]
   140a2:	b11a      	cbz	r2, 140ac <device_get_binding+0x24>
   140a4:	6822      	ldr	r2, [r4, #0]
   140a6:	6812      	ldr	r2, [r2, #0]
   140a8:	42aa      	cmp	r2, r5
   140aa:	d00c      	beq.n	140c6 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   140ac:	340c      	adds	r4, #12
   140ae:	e7f0      	b.n	14092 <device_get_binding+0xa>
		if (!info->driver_api) {
   140b0:	6863      	ldr	r3, [r4, #4]
   140b2:	b90b      	cbnz	r3, 140b8 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   140b4:	340c      	adds	r4, #12
   140b6:	e7ef      	b.n	14098 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   140b8:	6823      	ldr	r3, [r4, #0]
   140ba:	4628      	mov	r0, r5
   140bc:	6819      	ldr	r1, [r3, #0]
   140be:	f7ed fd7b 	bl	1bb8 <strcmp>
   140c2:	2800      	cmp	r0, #0
   140c4:	d1f6      	bne.n	140b4 <device_get_binding+0x2c>
}
   140c6:	4620      	mov	r0, r4
   140c8:	bd70      	pop	{r4, r5, r6, pc}
   140ca:	bf00      	nop
   140cc:	20003f34 	.word	0x20003f34
   140d0:	20003ea4 	.word	0x20003ea4

000140d4 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   140d4:	1c43      	adds	r3, r0, #1
   140d6:	d003      	beq.n	140e0 <_sys_power_save_idle_exit+0xc>
   140d8:	4b03      	ldr	r3, [pc, #12]	; (140e8 <_sys_power_save_idle_exit+0x14>)
   140da:	681b      	ldr	r3, [r3, #0]
   140dc:	4298      	cmp	r0, r3
   140de:	db01      	blt.n	140e4 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   140e0:	f7ed b982 	b.w	13e8 <_timer_idle_exit>
   140e4:	4770      	bx	lr
   140e6:	bf00      	nop
   140e8:	20003e98 	.word	0x20003e98

000140ec <idle>:
	return list->head == list;
   140ec:	4d0f      	ldr	r5, [pc, #60]	; (1412c <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   140ee:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   140f0:	4f0f      	ldr	r7, [pc, #60]	; (14130 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   140f2:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   140f6:	f04f 0220 	mov.w	r2, #32
   140fa:	f3ef 8311 	mrs	r3, BASEPRI
   140fe:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   14102:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14104:	42b3      	cmp	r3, r6
   14106:	d00a      	beq.n	1411e <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   14108:	b14b      	cbz	r3, 1411e <idle+0x32>
   1410a:	691c      	ldr	r4, [r3, #16]
   1410c:	1c63      	adds	r3, r4, #1
   1410e:	d008      	beq.n	14122 <idle+0x36>
   14110:	683b      	ldr	r3, [r7, #0]
   14112:	42a3      	cmp	r3, r4
   14114:	dd05      	ble.n	14122 <idle+0x36>
	_kernel.idle = ticks;
   14116:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   14118:	f7ed fc26 	bl	1968 <k_cpu_idle>
   1411c:	e7eb      	b.n	140f6 <idle+0xa>
   1411e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   14122:	4620      	mov	r0, r4
   14124:	f7ed f942 	bl	13ac <_timer_idle_enter>
   14128:	e7f5      	b.n	14116 <idle+0x2a>
   1412a:	bf00      	nop
   1412c:	20001978 	.word	0x20001978
   14130:	20003e98 	.word	0x20003e98

00014134 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   14134:	4802      	ldr	r0, [pc, #8]	; (14140 <_bss_zero+0xc>)
   14136:	4a03      	ldr	r2, [pc, #12]	; (14144 <_bss_zero+0x10>)
   14138:	2100      	movs	r1, #0
   1413a:	1a12      	subs	r2, r2, r0
   1413c:	f7ed bd8a 	b.w	1c54 <memset>
   14140:	20000000 	.word	0x20000000
   14144:	20001a38 	.word	0x20001a38

00014148 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   14148:	4802      	ldr	r0, [pc, #8]	; (14154 <_data_copy+0xc>)
   1414a:	4a03      	ldr	r2, [pc, #12]	; (14158 <_data_copy+0x10>)
   1414c:	4903      	ldr	r1, [pc, #12]	; (1415c <_data_copy+0x14>)
   1414e:	1a12      	subs	r2, r2, r0
   14150:	f7ed bd54 	b.w	1bfc <memcpy>
   14154:	20003a50 	.word	0x20003a50
   14158:	20003fdc 	.word	0x20003fdc
   1415c:	00019a80 	.word	0x00019a80

00014160 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   14160:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   14162:	2002      	movs	r0, #2
   14164:	f7ff ff7c 	bl	14060 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   14168:	4807      	ldr	r0, [pc, #28]	; (14188 <bg_thread_main+0x28>)
   1416a:	f7ec ff0f 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1416e:	2003      	movs	r0, #3
   14170:	f7ff ff76 	bl	14060 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   14174:	f000 feaa 	bl	14ecc <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   14178:	f7ec faa2 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   1417c:	4a03      	ldr	r2, [pc, #12]	; (1418c <bg_thread_main+0x2c>)
   1417e:	7a13      	ldrb	r3, [r2, #8]
   14180:	f023 0301 	bic.w	r3, r3, #1
   14184:	7213      	strb	r3, [r2, #8]
   14186:	bd08      	pop	{r3, pc}
   14188:	00019a4c 	.word	0x00019a4c
   1418c:	200017e8 	.word	0x200017e8

00014190 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   14190:	b580      	push	{r7, lr}
   14192:	b086      	sub	sp, #24
   14194:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   14196:	f7ed f9ab 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1419a:	4b30      	ldr	r3, [pc, #192]	; (1425c <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1419c:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   141a0:	4b2f      	ldr	r3, [pc, #188]	; (14260 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   141a2:	4d30      	ldr	r5, [pc, #192]	; (14264 <_Cstart+0xd4>)
   141a4:	4e30      	ldr	r6, [pc, #192]	; (14268 <_Cstart+0xd8>)
   141a6:	2400      	movs	r4, #0
   141a8:	22e0      	movs	r2, #224	; 0xe0
   141aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   141ae:	77dc      	strb	r4, [r3, #31]
   141b0:	761c      	strb	r4, [r3, #24]
   141b2:	765c      	strb	r4, [r3, #25]
   141b4:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   141b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   141b8:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   141bc:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   141be:	f7ed fb43 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   141c2:	f7ed fbcb 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   141c6:	4620      	mov	r0, r4
   141c8:	f7ff ff4a 	bl	14060 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   141cc:	2001      	movs	r0, #1
   141ce:	f7ff ff47 	bl	14060 <_sys_device_do_config_level>
	_sched_init();
   141d2:	f000 fbf9 	bl	149c8 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   141d6:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   141d8:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   141da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   141de:	9304      	str	r3, [sp, #16]
   141e0:	9403      	str	r4, [sp, #12]
   141e2:	9402      	str	r4, [sp, #8]
   141e4:	9401      	str	r4, [sp, #4]
   141e6:	9400      	str	r4, [sp, #0]
   141e8:	4b20      	ldr	r3, [pc, #128]	; (1426c <_Cstart+0xdc>)
   141ea:	4921      	ldr	r1, [pc, #132]	; (14270 <_Cstart+0xe0>)
   141ec:	4628      	mov	r0, r5
   141ee:	f000 fe15 	bl	14e1c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   141f2:	7a6b      	ldrb	r3, [r5, #9]
   141f4:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   141f8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   141fc:	726a      	strb	r2, [r5, #9]
   141fe:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   14200:	d102      	bne.n	14208 <_Cstart+0x78>
   14202:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14204:	3301      	adds	r3, #1
   14206:	d024      	beq.n	14252 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   14208:	2301      	movs	r3, #1
   1420a:	4e1a      	ldr	r6, [pc, #104]	; (14274 <_Cstart+0xe4>)
   1420c:	9304      	str	r3, [sp, #16]
   1420e:	230f      	movs	r3, #15
   14210:	9303      	str	r3, [sp, #12]
   14212:	2300      	movs	r3, #0
   14214:	9302      	str	r3, [sp, #8]
   14216:	9301      	str	r3, [sp, #4]
   14218:	9300      	str	r3, [sp, #0]
   1421a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1421e:	4b16      	ldr	r3, [pc, #88]	; (14278 <_Cstart+0xe8>)
   14220:	4916      	ldr	r1, [pc, #88]	; (1427c <_Cstart+0xec>)
   14222:	4630      	mov	r0, r6
   14224:	f000 fdfa 	bl	14e1c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14228:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   1422a:	60e6      	str	r6, [r4, #12]
   1422c:	f023 0304 	bic.w	r3, r3, #4
   14230:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   14232:	4b13      	ldr	r3, [pc, #76]	; (14280 <_Cstart+0xf0>)
   14234:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   14236:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   14238:	4b12      	ldr	r3, [pc, #72]	; (14284 <_Cstart+0xf4>)

	_current = main_thread;
   1423a:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   1423c:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   14240:	4c11      	ldr	r4, [pc, #68]	; (14288 <_Cstart+0xf8>)
   14242:	4a0a      	ldr	r2, [pc, #40]	; (1426c <_Cstart+0xdc>)
   14244:	f383 8809 	msr	PSP, r3
   14248:	2100      	movs	r1, #0
   1424a:	f381 8811 	msr	BASEPRI, r1
   1424e:	4610      	mov	r0, r2
   14250:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   14252:	4628      	mov	r0, r5
   14254:	f000 fab4 	bl	147c0 <_add_thread_to_ready_q>
   14258:	e7d6      	b.n	14208 <_Cstart+0x78>
   1425a:	bf00      	nop
   1425c:	20003650 	.word	0x20003650
   14260:	e000ed00 	.word	0xe000ed00
   14264:	200017e8 	.word	0x200017e8
   14268:	20001978 	.word	0x20001978
   1426c:	00014161 	.word	0x00014161
   14270:	20002910 	.word	0x20002910
   14274:	20001778 	.word	0x20001778
   14278:	000140ed 	.word	0x000140ed
   1427c:	20002d10 	.word	0x20002d10
   14280:	2000198c 	.word	0x2000198c
   14284:	20002d10 	.word	0x20002d10
   14288:	00000899 	.word	0x00000899

0001428c <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1428c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1428e:	4c07      	ldr	r4, [pc, #28]	; (142ac <init_static_pools+0x20>)
   14290:	4d07      	ldr	r5, [pc, #28]	; (142b0 <init_static_pools+0x24>)
   14292:	42ac      	cmp	r4, r5
   14294:	d301      	bcc.n	1429a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   14296:	2000      	movs	r0, #0
   14298:	bd38      	pop	{r3, r4, r5, pc}
   1429a:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   1429e:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   142a0:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   142a2:	4620      	mov	r0, r4
   142a4:	f7ec fb33 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   142a8:	341c      	adds	r4, #28
   142aa:	e7f2      	b.n	14292 <init_static_pools+0x6>
   142ac:	20003f34 	.word	0x20003f34
   142b0:	20003f34 	.word	0x20003f34

000142b4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   142b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   142b8:	1e1d      	subs	r5, r3, #0
{
   142ba:	b085      	sub	sp, #20
   142bc:	4607      	mov	r7, r0
   142be:	460c      	mov	r4, r1
   142c0:	4692      	mov	sl, r2
	if (timeout > 0) {
   142c2:	dd4c      	ble.n	1435e <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   142c4:	f000 fc16 	bl	14af4 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   142c8:	f105 0309 	add.w	r3, r5, #9
   142cc:	220a      	movs	r2, #10
   142ce:	fbb3 f3f2 	udiv	r3, r3, r2
   142d2:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   142d6:	4b23      	ldr	r3, [pc, #140]	; (14364 <k_mem_pool_alloc+0xb0>)
   142d8:	4e23      	ldr	r6, [pc, #140]	; (14368 <k_mem_pool_alloc+0xb4>)
   142da:	1afb      	subs	r3, r7, r3
   142dc:	109b      	asrs	r3, r3, #2
   142de:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   142e0:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   142e2:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   142e6:	9400      	str	r4, [sp, #0]
   142e8:	ab03      	add	r3, sp, #12
   142ea:	aa02      	add	r2, sp, #8
   142ec:	4651      	mov	r1, sl
   142ee:	4638      	mov	r0, r7
   142f0:	f7ec fb58 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   142f4:	f110 0f0b 	cmn.w	r0, #11
   142f8:	d10b      	bne.n	14312 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   142fa:	9400      	str	r4, [sp, #0]
   142fc:	ab03      	add	r3, sp, #12
   142fe:	aa02      	add	r2, sp, #8
   14300:	4651      	mov	r1, sl
   14302:	4638      	mov	r0, r7
   14304:	f7ec fb4e 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   14308:	f110 0f0b 	cmn.w	r0, #11
   1430c:	bf08      	it	eq
   1430e:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   14312:	7963      	ldrb	r3, [r4, #5]
   14314:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   14316:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   14318:	f362 0303 	bfi	r3, r2, #0, #4
   1431c:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   1431e:	6863      	ldr	r3, [r4, #4]
   14320:	9a03      	ldr	r2, [sp, #12]
   14322:	f362 331f 	bfi	r3, r2, #12, #20
   14326:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   14328:	b1b0      	cbz	r0, 14358 <k_mem_pool_alloc+0xa4>
   1432a:	b1ad      	cbz	r5, 14358 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   1432c:	f110 0f0c 	cmn.w	r0, #12
   14330:	d112      	bne.n	14358 <k_mem_pool_alloc+0xa4>
   14332:	f04f 0320 	mov.w	r3, #32
   14336:	f3ef 8011 	mrs	r0, BASEPRI
   1433a:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1433e:	462a      	mov	r2, r5
   14340:	4659      	mov	r1, fp
   14342:	f000 faeb 	bl	1491c <_pend_current_thread>

		if (timeout != K_FOREVER) {
   14346:	1c6b      	adds	r3, r5, #1
   14348:	d0cd      	beq.n	142e6 <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   1434a:	f000 fbd3 	bl	14af4 <_tick_get>

			if (timeout < 0) {
   1434e:	ebb8 0500 	subs.w	r5, r8, r0
   14352:	d5c8      	bpl.n	142e6 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   14354:	f06f 000a 	mvn.w	r0, #10
}
   14358:	b005      	add	sp, #20
   1435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1435e:	f04f 0800 	mov.w	r8, #0
   14362:	e7b8      	b.n	142d6 <k_mem_pool_alloc+0x22>
   14364:	20003f34 	.word	0x20003f34
   14368:	b6db6db7 	.word	0xb6db6db7

0001436c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1436c:	b570      	push	{r4, r5, r6, lr}
   1436e:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   14370:	6802      	ldr	r2, [r0, #0]
   14372:	7841      	ldrb	r1, [r0, #1]
   14374:	4e13      	ldr	r6, [pc, #76]	; (143c4 <k_mem_pool_free_id+0x58>)
   14376:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1437a:	00a4      	lsls	r4, r4, #2
   1437c:	0b12      	lsrs	r2, r2, #12
   1437e:	f001 010f 	and.w	r1, r1, #15
   14382:	1930      	adds	r0, r6, r4
   14384:	f7ec fbc0 	bl	b08 <_sys_mem_pool_block_free>
   14388:	f04f 0320 	mov.w	r3, #32
   1438c:	f3ef 8511 	mrs	r5, BASEPRI
   14390:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   14394:	f104 0014 	add.w	r0, r4, #20
   14398:	4430      	add	r0, r6
   1439a:	f000 fb05 	bl	149a8 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   1439e:	b140      	cbz	r0, 143b2 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   143a0:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   143a4:	2b0d      	cmp	r3, #13
   143a6:	d804      	bhi.n	143b2 <k_mem_pool_free_id+0x46>
   143a8:	b133      	cbz	r3, 143b8 <k_mem_pool_free_id+0x4c>
   143aa:	4b07      	ldr	r3, [pc, #28]	; (143c8 <k_mem_pool_free_id+0x5c>)
   143ac:	685b      	ldr	r3, [r3, #4]
   143ae:	051b      	lsls	r3, r3, #20
   143b0:	d402      	bmi.n	143b8 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   143b2:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   143b6:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   143b8:	4628      	mov	r0, r5
}
   143ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   143be:	f000 b9a7 	b.w	14710 <_reschedule>
   143c2:	bf00      	nop
   143c4:	20003f34 	.word	0x20003f34
   143c8:	e000ed00 	.word	0xe000ed00

000143cc <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   143cc:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   143ce:	1d0a      	adds	r2, r1, #4
   143d0:	d204      	bcs.n	143dc <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   143d2:	2300      	movs	r3, #0
   143d4:	4669      	mov	r1, sp
   143d6:	f7ff ff6d 	bl	142b4 <k_mem_pool_alloc>
   143da:	b118      	cbz	r0, 143e4 <k_mem_pool_malloc+0x18>
		return NULL;
   143dc:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   143de:	b003      	add	sp, #12
   143e0:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   143e4:	2204      	movs	r2, #4
   143e6:	eb0d 0102 	add.w	r1, sp, r2
   143ea:	9800      	ldr	r0, [sp, #0]
   143ec:	f7ed fc06 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   143f0:	9800      	ldr	r0, [sp, #0]
   143f2:	3004      	adds	r0, #4
   143f4:	e7f3      	b.n	143de <k_mem_pool_malloc+0x12>

000143f6 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   143f6:	b110      	cbz	r0, 143fe <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   143f8:	3804      	subs	r0, #4
   143fa:	f7ff bfb7 	b.w	1436c <k_mem_pool_free_id>
   143fe:	4770      	bx	lr

00014400 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   14400:	4b03      	ldr	r3, [pc, #12]	; (14410 <z_thread_malloc+0x10>)
   14402:	689b      	ldr	r3, [r3, #8]
{
   14404:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   14406:	6e58      	ldr	r0, [r3, #100]	; 0x64
   14408:	b108      	cbz	r0, 1440e <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1440a:	f7ff bfdf 	b.w	143cc <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1440e:	4770      	bx	lr
   14410:	20001978 	.word	0x20001978

00014414 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   14414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14416:	4605      	mov	r5, r0
   14418:	460f      	mov	r7, r1
   1441a:	4614      	mov	r4, r2
	__asm__ volatile(
   1441c:	f04f 0220 	mov.w	r2, #32
   14420:	f3ef 8611 	mrs	r6, BASEPRI
   14424:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   14428:	b1a3      	cbz	r3, 14454 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1442a:	2008      	movs	r0, #8
   1442c:	f7ff ffe8 	bl	14400 <z_thread_malloc>
		if (!anode) {
   14430:	2800      	cmp	r0, #0
   14432:	d034      	beq.n	1449e <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   14434:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   14436:	6044      	str	r4, [r0, #4]
   14438:	6003      	str	r3, [r0, #0]
   1443a:	4604      	mov	r4, r0
   1443c:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   1443e:	b95f      	cbnz	r7, 14458 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   14440:	682a      	ldr	r2, [r5, #0]
   14442:	f003 0303 	and.w	r3, r3, #3
   14446:	4313      	orrs	r3, r2
   14448:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1444a:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   1444c:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1444e:	b973      	cbnz	r3, 1446e <queue_insert+0x5a>
	list->tail = node;
   14450:	606c      	str	r4, [r5, #4]
   14452:	e00c      	b.n	1446e <queue_insert+0x5a>
	node->next_and_flags = flags;
   14454:	6023      	str	r3, [r4, #0]
   14456:	e7f1      	b.n	1443c <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14458:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   1445a:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1445e:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   14462:	d114      	bne.n	1448e <queue_insert+0x7a>
   14464:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14466:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   14468:	b95a      	cbnz	r2, 14482 <queue_insert+0x6e>
	list->tail = node;
   1446a:	606c      	str	r4, [r5, #4]
	list->head = node;
   1446c:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   1446e:	2104      	movs	r1, #4
   14470:	f105 0008 	add.w	r0, r5, #8
   14474:	f000 ffb4 	bl	153e0 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   14478:	4630      	mov	r0, r6
   1447a:	f000 f949 	bl	14710 <_reschedule>
	return 0;
   1447e:	2000      	movs	r0, #0
   14480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14482:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14484:	f003 0303 	and.w	r3, r3, #3
   14488:	4323      	orrs	r3, r4
   1448a:	6013      	str	r3, [r2, #0]
   1448c:	e7e0      	b.n	14450 <queue_insert+0x3c>
   1448e:	4313      	orrs	r3, r2
   14490:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14492:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14494:	f002 0203 	and.w	r2, r2, #3
   14498:	4314      	orrs	r4, r2
   1449a:	603c      	str	r4, [r7, #0]
   1449c:	e7e7      	b.n	1446e <queue_insert+0x5a>
			return -ENOMEM;
   1449e:	f06f 000b 	mvn.w	r0, #11
}
   144a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000144a4 <z_queue_node_peek>:
{
   144a4:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   144a6:	4604      	mov	r4, r0
   144a8:	b130      	cbz	r0, 144b8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   144aa:	6802      	ldr	r2, [r0, #0]
   144ac:	0793      	lsls	r3, r2, #30
   144ae:	d003      	beq.n	144b8 <z_queue_node_peek+0x14>
		ret = anode->data;
   144b0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   144b2:	b109      	cbz	r1, 144b8 <z_queue_node_peek+0x14>
			k_free(anode);
   144b4:	f7ff ff9f 	bl	143f6 <k_free>
}
   144b8:	4620      	mov	r0, r4
   144ba:	bd10      	pop	{r4, pc}

000144bc <_impl_k_queue_init>:
	list->head = NULL;
   144bc:	2300      	movs	r3, #0
   144be:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   144c0:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   144c2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   144c6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   144c8:	60c3      	str	r3, [r0, #12]
   144ca:	4770      	bx	lr

000144cc <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   144cc:	460a      	mov	r2, r1
   144ce:	2300      	movs	r3, #0
   144d0:	6841      	ldr	r1, [r0, #4]
   144d2:	f7ff bf9f 	b.w	14414 <queue_insert>

000144d6 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   144d6:	2300      	movs	r3, #0
   144d8:	460a      	mov	r2, r1
   144da:	4619      	mov	r1, r3
   144dc:	f7ff bf9a 	b.w	14414 <queue_insert>

000144e0 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   144e0:	b538      	push	{r3, r4, r5, lr}
   144e2:	f04f 0320 	mov.w	r3, #32
   144e6:	f3ef 8511 	mrs	r5, BASEPRI
   144ea:	f383 8811 	msr	BASEPRI, r3
   144ee:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   144f0:	b953      	cbnz	r3, 14508 <k_queue_append_list+0x28>
	list->head = node;
   144f2:	6001      	str	r1, [r0, #0]
	list->tail = node;
   144f4:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   144f6:	2104      	movs	r1, #4
   144f8:	3008      	adds	r0, #8
   144fa:	f000 ff71 	bl	153e0 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   144fe:	4628      	mov	r0, r5
}
   14500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   14504:	f000 b904 	b.w	14710 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14508:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1450a:	f004 0403 	and.w	r4, r4, #3
   1450e:	4321      	orrs	r1, r4
   14510:	6019      	str	r1, [r3, #0]
   14512:	e7ef      	b.n	144f4 <k_queue_append_list+0x14>

00014514 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   14514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14518:	4604      	mov	r4, r0
   1451a:	b086      	sub	sp, #24
   1451c:	460d      	mov	r5, r1
   1451e:	f04f 0320 	mov.w	r3, #32
   14522:	f3ef 8711 	mrs	r7, BASEPRI
   14526:	f383 8811 	msr	BASEPRI, r3
   1452a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1452c:	b182      	cbz	r2, 14550 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1452e:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14530:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14532:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14536:	428a      	cmp	r2, r1
	list->head = node;
   14538:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1453a:	bf08      	it	eq
   1453c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1453e:	2101      	movs	r1, #1
   14540:	4610      	mov	r0, r2
   14542:	f7ff ffaf 	bl	144a4 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14546:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1454a:	b006      	add	sp, #24
   1454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   14550:	b919      	cbnz	r1, 1455a <_impl_k_queue_get+0x46>
   14552:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   14556:	2000      	movs	r0, #0
   14558:	e7f7      	b.n	1454a <_impl_k_queue_get+0x36>
   1455a:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1455e:	2104      	movs	r1, #4
   14560:	4603      	mov	r3, r0
   14562:	eb0d 0001 	add.w	r0, sp, r1
   14566:	f000 fea4 	bl	152b2 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1456a:	1c6a      	adds	r2, r5, #1
   1456c:	d002      	beq.n	14574 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1456e:	f000 fab7 	bl	14ae0 <_impl_k_uptime_get_32>
   14572:	4606      	mov	r6, r0
{
   14574:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   14576:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   1457a:	1bea      	subs	r2, r5, r7
   1457c:	f36f 1307 	bfc	r3, #4, #4
   14580:	2101      	movs	r1, #1
   14582:	a801      	add	r0, sp, #4
   14584:	f88d 3011 	strb.w	r3, [sp, #17]
   14588:	f000 fea6 	bl	152d8 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   1458c:	b108      	cbz	r0, 14592 <_impl_k_queue_get+0x7e>
   1458e:	300b      	adds	r0, #11
   14590:	d1e1      	bne.n	14556 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   14592:	f04f 0320 	mov.w	r3, #32
   14596:	f3ef 8811 	mrs	r8, BASEPRI
   1459a:	f383 8811 	msr	BASEPRI, r3
   1459e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   145a0:	b138      	cbz	r0, 145b2 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   145a2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   145a4:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   145a6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   145aa:	4290      	cmp	r0, r2
	list->head = node;
   145ac:	6023      	str	r3, [r4, #0]
	list->tail = node;
   145ae:	bf08      	it	eq
   145b0:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   145b2:	2101      	movs	r1, #1
   145b4:	f7ff ff76 	bl	144a4 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   145b8:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   145bc:	2800      	cmp	r0, #0
   145be:	d1c4      	bne.n	1454a <_impl_k_queue_get+0x36>
   145c0:	1c6b      	adds	r3, r5, #1
   145c2:	d0d8      	beq.n	14576 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   145c4:	f000 fa8c 	bl	14ae0 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   145c8:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   145ca:	42bd      	cmp	r5, r7
   145cc:	dad3      	bge.n	14576 <_impl_k_queue_get+0x62>
   145ce:	e7c2      	b.n	14556 <_impl_k_queue_get+0x42>

000145d0 <sys_dlist_remove>:
	node->prev->next = node->next;
   145d0:	e890 000c 	ldmia.w	r0, {r2, r3}
   145d4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   145d6:	6802      	ldr	r2, [r0, #0]
   145d8:	6053      	str	r3, [r2, #4]
   145da:	4770      	bx	lr

000145dc <_abort_timeout>:
{
   145dc:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   145de:	6900      	ldr	r0, [r0, #16]
{
   145e0:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   145e2:	1c43      	adds	r3, r0, #1
   145e4:	d00e      	beq.n	14604 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   145e6:	4b08      	ldr	r3, [pc, #32]	; (14608 <_abort_timeout+0x2c>)
   145e8:	699b      	ldr	r3, [r3, #24]
   145ea:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   145ec:	bf1f      	itttt	ne
   145ee:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   145f0:	6913      	ldrne	r3, [r2, #16]
   145f2:	18c0      	addne	r0, r0, r3
   145f4:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   145f6:	4608      	mov	r0, r1
   145f8:	f7ff ffea 	bl	145d0 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   145fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14600:	610b      	str	r3, [r1, #16]
	return 0;
   14602:	2000      	movs	r0, #0
}
   14604:	bd08      	pop	{r3, pc}
   14606:	bf00      	nop
   14608:	20001978 	.word	0x20001978

0001460c <k_spin_lock.isra.11>:
	__asm__ volatile(
   1460c:	f04f 0320 	mov.w	r3, #32
   14610:	f3ef 8011 	mrs	r0, BASEPRI
   14614:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   14618:	4770      	bx	lr
	...

0001461c <update_cache>:
	return list->head == list;
   1461c:	4b0d      	ldr	r3, [pc, #52]	; (14654 <update_cache+0x38>)
   1461e:	4619      	mov	r1, r3
   14620:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14624:	428a      	cmp	r2, r1
   14626:	d000      	beq.n	1462a <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   14628:	b902      	cbnz	r2, 1462c <update_cache+0x10>
   1462a:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   1462c:	b970      	cbnz	r0, 1464c <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   1462e:	6899      	ldr	r1, [r3, #8]
   14630:	b161      	cbz	r1, 1464c <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   14632:	7a48      	ldrb	r0, [r1, #9]
   14634:	06c0      	lsls	r0, r0, #27
   14636:	d109      	bne.n	1464c <update_cache+0x30>
   14638:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1463a:	3001      	adds	r0, #1
   1463c:	d106      	bne.n	1464c <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   1463e:	8948      	ldrh	r0, [r1, #10]
   14640:	287f      	cmp	r0, #127	; 0x7f
   14642:	d903      	bls.n	1464c <update_cache+0x30>
	return thread == _idle_thread;
   14644:	4804      	ldr	r0, [pc, #16]	; (14658 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   14646:	6800      	ldr	r0, [r0, #0]
   14648:	4281      	cmp	r1, r0
   1464a:	d101      	bne.n	14650 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   1464c:	621a      	str	r2, [r3, #32]
   1464e:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   14650:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   14652:	4770      	bx	lr
   14654:	20001978 	.word	0x20001978
   14658:	00019a48 	.word	0x00019a48

0001465c <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1465c:	f990 000a 	ldrsb.w	r0, [r0, #10]
   14660:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   14664:	4298      	cmp	r0, r3
   14666:	bfac      	ite	ge
   14668:	2000      	movge	r0, #0
   1466a:	2001      	movlt	r0, #1
   1466c:	4770      	bx	lr
	...

00014670 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   14670:	b510      	push	{r4, lr}
   14672:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14674:	f7ff ffca 	bl	1460c <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   14678:	7a4b      	ldrb	r3, [r1, #9]
   1467a:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   1467c:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   1467e:	d50d      	bpl.n	1469c <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   14680:	4608      	mov	r0, r1
   14682:	f7ff ffa5 	bl	145d0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   14686:	7a4b      	ldrb	r3, [r1, #9]
   14688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1468c:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   1468e:	4b05      	ldr	r3, [pc, #20]	; (146a4 <_remove_thread_from_ready_q+0x34>)
   14690:	6898      	ldr	r0, [r3, #8]
   14692:	1a43      	subs	r3, r0, r1
   14694:	4258      	negs	r0, r3
   14696:	4158      	adcs	r0, r3
   14698:	f7ff ffc0 	bl	1461c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1469c:	f384 8811 	msr	BASEPRI, r4
   146a0:	bd10      	pop	{r4, pc}
   146a2:	bf00      	nop
   146a4:	20001978 	.word	0x20001978

000146a8 <_find_first_thread_to_unpend>:
{
   146a8:	b508      	push	{r3, lr}
   146aa:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   146ac:	f7ff ffae 	bl	1460c <k_spin_lock.isra.11>
	return list->head == list;
   146b0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   146b2:	429a      	cmp	r2, r3
   146b4:	bf08      	it	eq
   146b6:	2300      	moveq	r3, #0
   146b8:	f380 8811 	msr	BASEPRI, r0
}
   146bc:	4618      	mov	r0, r3
   146be:	bd08      	pop	{r3, pc}

000146c0 <_unpend_thread_no_timeout>:
{
   146c0:	b510      	push	{r4, lr}
   146c2:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   146c4:	f7ff ffa2 	bl	1460c <k_spin_lock.isra.11>
   146c8:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   146ca:	4608      	mov	r0, r1
   146cc:	f7ff ff80 	bl	145d0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   146d0:	7a4b      	ldrb	r3, [r1, #9]
   146d2:	f023 0302 	bic.w	r3, r3, #2
   146d6:	724b      	strb	r3, [r1, #9]
   146d8:	f384 8811 	msr	BASEPRI, r4
   146dc:	bd10      	pop	{r4, pc}

000146de <_unpend_first_thread>:
{
   146de:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   146e0:	2100      	movs	r1, #0
   146e2:	f7ff ffe1 	bl	146a8 <_find_first_thread_to_unpend>

	if (thread) {
   146e6:	4604      	mov	r4, r0
   146e8:	b128      	cbz	r0, 146f6 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   146ea:	f7ff ffe9 	bl	146c0 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   146ee:	f104 0014 	add.w	r0, r4, #20
   146f2:	f7ff ff73 	bl	145dc <_abort_timeout>
}
   146f6:	4620      	mov	r0, r4
   146f8:	bd10      	pop	{r4, pc}

000146fa <_unpend_thread>:
{
   146fa:	b510      	push	{r4, lr}
   146fc:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   146fe:	f7ff ffdf 	bl	146c0 <_unpend_thread_no_timeout>
   14702:	f104 0014 	add.w	r0, r4, #20
}
   14706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1470a:	f7ff bf67 	b.w	145dc <_abort_timeout>
	...

00014710 <_reschedule>:
   14710:	f3ef 8305 	mrs	r3, IPSR
   14714:	2b0d      	cmp	r3, #13
   14716:	d809      	bhi.n	1472c <_reschedule+0x1c>
   14718:	b11b      	cbz	r3, 14722 <_reschedule+0x12>
   1471a:	4b09      	ldr	r3, [pc, #36]	; (14740 <_reschedule+0x30>)
   1471c:	685b      	ldr	r3, [r3, #4]
   1471e:	051b      	lsls	r3, r3, #20
   14720:	d504      	bpl.n	1472c <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   14722:	4b08      	ldr	r3, [pc, #32]	; (14744 <_reschedule+0x34>)
   14724:	689a      	ldr	r2, [r3, #8]
   14726:	6a1b      	ldr	r3, [r3, #32]
   14728:	429a      	cmp	r2, r3
   1472a:	d103      	bne.n	14734 <_reschedule+0x24>
   1472c:	f380 8811 	msr	BASEPRI, r0
}
   14730:	2000      	movs	r0, #0
   14732:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14734:	4b04      	ldr	r3, [pc, #16]	; (14748 <_reschedule+0x38>)
   14736:	2200      	movs	r2, #0
   14738:	601a      	str	r2, [r3, #0]
   1473a:	f7ec bee5 	b.w	1508 <__swap>
   1473e:	bf00      	nop
   14740:	e000ed00 	.word	0xe000ed00
   14744:	20001978 	.word	0x20001978
   14748:	200019ac 	.word	0x200019ac

0001474c <k_sched_unlock>:
{
   1474c:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   1474e:	f7ff ff5d 	bl	1460c <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   14752:	4b0a      	ldr	r3, [pc, #40]	; (1477c <k_sched_unlock+0x30>)
   14754:	689a      	ldr	r2, [r3, #8]
   14756:	7ad3      	ldrb	r3, [r2, #11]
   14758:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   1475a:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   1475c:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   1475e:	2001      	movs	r0, #1
   14760:	f7ff ff5c 	bl	1461c <update_cache>
   14764:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   14768:	f04f 0320 	mov.w	r3, #32
   1476c:	f3ef 8011 	mrs	r0, BASEPRI
   14770:	f383 8811 	msr	BASEPRI, r3
}
   14774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   14778:	f7ff bfca 	b.w	14710 <_reschedule>
   1477c:	20001978 	.word	0x20001978

00014780 <_priq_dumb_add>:
{
   14780:	b510      	push	{r4, lr}
	return list->head == list;
   14782:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14784:	4298      	cmp	r0, r3
   14786:	bf08      	it	eq
   14788:	2300      	moveq	r3, #0
   1478a:	b193      	cbz	r3, 147b2 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   1478c:	f991 400a 	ldrsb.w	r4, [r1, #10]
   14790:	f993 200a 	ldrsb.w	r2, [r3, #10]
   14794:	4294      	cmp	r4, r2
   14796:	da06      	bge.n	147a6 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   14798:	685a      	ldr	r2, [r3, #4]
   1479a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1479c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1479e:	685a      	ldr	r2, [r3, #4]
   147a0:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   147a2:	6059      	str	r1, [r3, #4]
   147a4:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   147a6:	6842      	ldr	r2, [r0, #4]
   147a8:	4293      	cmp	r3, r2
   147aa:	d002      	beq.n	147b2 <_priq_dumb_add+0x32>
   147ac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   147ae:	2b00      	cmp	r3, #0
   147b0:	d1eb      	bne.n	1478a <_priq_dumb_add+0xa>
	node->next = list;
   147b2:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   147b4:	6843      	ldr	r3, [r0, #4]
   147b6:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   147b8:	6843      	ldr	r3, [r0, #4]
   147ba:	6019      	str	r1, [r3, #0]
	list->tail = node;
   147bc:	6041      	str	r1, [r0, #4]
   147be:	bd10      	pop	{r4, pc}

000147c0 <_add_thread_to_ready_q>:
{
   147c0:	b538      	push	{r3, r4, r5, lr}
   147c2:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   147c4:	f7ff ff22 	bl	1460c <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   147c8:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   147ca:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   147cc:	4806      	ldr	r0, [pc, #24]	; (147e8 <_add_thread_to_ready_q+0x28>)
   147ce:	f7ff ffd7 	bl	14780 <_priq_dumb_add>
	thread->base.thread_state |= states;
   147d2:	7a63      	ldrb	r3, [r4, #9]
   147d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   147d8:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   147da:	2000      	movs	r0, #0
   147dc:	f7ff ff1e 	bl	1461c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   147e0:	f385 8811 	msr	BASEPRI, r5
   147e4:	bd38      	pop	{r3, r4, r5, pc}
   147e6:	bf00      	nop
   147e8:	2000199c 	.word	0x2000199c

000147ec <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   147ec:	7a42      	ldrb	r2, [r0, #9]
   147ee:	06d2      	lsls	r2, r2, #27
   147f0:	d104      	bne.n	147fc <_ready_thread+0x10>
   147f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   147f4:	3301      	adds	r3, #1
   147f6:	d101      	bne.n	147fc <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   147f8:	f7ff bfe2 	b.w	147c0 <_add_thread_to_ready_q>
   147fc:	4770      	bx	lr
	...

00014800 <_add_timeout>:
{
   14800:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14802:	610b      	str	r3, [r1, #16]
{
   14804:	4604      	mov	r4, r0
   14806:	461d      	mov	r5, r3
	timeout->thread = thread;
   14808:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1480a:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   1480c:	bb03      	cbnz	r3, 14850 <_add_timeout+0x50>
	__asm__ volatile(
   1480e:	f04f 0320 	mov.w	r3, #32
   14812:	f3ef 8611 	mrs	r6, BASEPRI
   14816:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1481a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1481e:	610b      	str	r3, [r1, #16]
	if (thread) {
   14820:	b170      	cbz	r0, 14840 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   14822:	68cb      	ldr	r3, [r1, #12]
   14824:	b113      	cbz	r3, 1482c <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   14826:	f7ff ff4b 	bl	146c0 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1482a:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1482c:	7a63      	ldrb	r3, [r4, #9]
   1482e:	f023 0304 	bic.w	r3, r3, #4
   14832:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   14834:	4620      	mov	r0, r4
   14836:	f7ff ffd9 	bl	147ec <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1483a:	f386 8811 	msr	BASEPRI, r6
   1483e:	bd70      	pop	{r4, r5, r6, pc}
   14840:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   14844:	694b      	ldr	r3, [r1, #20]
   14846:	b32b      	cbz	r3, 14894 <_add_timeout+0x94>
			timeout->func(timeout);
   14848:	4608      	mov	r0, r1
}
   1484a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   1484e:	4718      	bx	r3
	return list->head == list;
   14850:	4a11      	ldr	r2, [pc, #68]	; (14898 <_add_timeout+0x98>)
   14852:	4610      	mov	r0, r2
   14854:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14858:	4283      	cmp	r3, r0
   1485a:	d10c      	bne.n	14876 <_add_timeout+0x76>
	node->next = list;
   1485c:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   1485e:	6993      	ldr	r3, [r2, #24]
   14860:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14862:	6993      	ldr	r3, [r2, #24]
   14864:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14866:	6191      	str	r1, [r2, #24]
   14868:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   1486a:	1b64      	subs	r4, r4, r5
   1486c:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   1486e:	6994      	ldr	r4, [r2, #24]
   14870:	42a3      	cmp	r3, r4
   14872:	d0f3      	beq.n	1485c <_add_timeout+0x5c>
   14874:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14876:	2b00      	cmp	r3, #0
   14878:	d0f0      	beq.n	1485c <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   1487a:	690c      	ldr	r4, [r1, #16]
   1487c:	691d      	ldr	r5, [r3, #16]
   1487e:	42ac      	cmp	r4, r5
   14880:	dcf3      	bgt.n	1486a <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   14882:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14884:	1b2c      	subs	r4, r5, r4
   14886:	611c      	str	r4, [r3, #16]
   14888:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1488a:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1488c:	685a      	ldr	r2, [r3, #4]
   1488e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14890:	6059      	str	r1, [r3, #4]
   14892:	bd70      	pop	{r4, r5, r6, pc}
   14894:	bd70      	pop	{r4, r5, r6, pc}
   14896:	bf00      	nop
   14898:	20001978 	.word	0x20001978

0001489c <_move_thread_to_end_of_prio_q>:
{
   1489c:	b538      	push	{r3, r4, r5, lr}
   1489e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   148a0:	f7ff feb4 	bl	1460c <k_spin_lock.isra.11>
   148a4:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   148a6:	4620      	mov	r0, r4
   148a8:	f7ff fe92 	bl	145d0 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   148ac:	4621      	mov	r1, r4
   148ae:	4806      	ldr	r0, [pc, #24]	; (148c8 <_move_thread_to_end_of_prio_q+0x2c>)
   148b0:	f7ff ff66 	bl	14780 <_priq_dumb_add>
	thread->base.thread_state |= states;
   148b4:	7a63      	ldrb	r3, [r4, #9]
   148b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   148ba:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   148bc:	2000      	movs	r0, #0
   148be:	f7ff fead 	bl	1461c <update_cache>
   148c2:	f385 8811 	msr	BASEPRI, r5
   148c6:	bd38      	pop	{r3, r4, r5, pc}
   148c8:	2000199c 	.word	0x2000199c

000148cc <pend>:
{
   148cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   148ce:	4605      	mov	r5, r0
   148d0:	4614      	mov	r4, r2
   148d2:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   148d4:	f7ff fecc 	bl	14670 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   148d8:	7a6b      	ldrb	r3, [r5, #9]
   148da:	f043 0302 	orr.w	r3, r3, #2
   148de:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   148e0:	1c63      	adds	r3, r4, #1
   148e2:	d012      	beq.n	1490a <pend+0x3e>
	__asm__ volatile(
   148e4:	f04f 0320 	mov.w	r3, #32
   148e8:	f3ef 8711 	mrs	r7, BASEPRI
   148ec:	f383 8811 	msr	BASEPRI, r3
   148f0:	230a      	movs	r3, #10
   148f2:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   148f4:	4632      	mov	r2, r6
   148f6:	fbb4 f3f3 	udiv	r3, r4, r3
   148fa:	f105 0114 	add.w	r1, r5, #20
   148fe:	3301      	adds	r3, #1
   14900:	4628      	mov	r0, r5
   14902:	f7ff ff7d 	bl	14800 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14906:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   1490a:	b12e      	cbz	r6, 14918 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   1490c:	4629      	mov	r1, r5
   1490e:	4630      	mov	r0, r6
}
   14910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   14914:	f7ff bf34 	b.w	14780 <_priq_dumb_add>
   14918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001491c <_pend_current_thread>:
{
   1491c:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   1491e:	4b06      	ldr	r3, [pc, #24]	; (14938 <_pend_current_thread+0x1c>)
{
   14920:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   14922:	6898      	ldr	r0, [r3, #8]
   14924:	f7ff ffd2 	bl	148cc <pend>
	_time_slice_elapsed = 0;
   14928:	4b04      	ldr	r3, [pc, #16]	; (1493c <_pend_current_thread+0x20>)
   1492a:	2200      	movs	r2, #0
   1492c:	4620      	mov	r0, r4
}
   1492e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   14932:	601a      	str	r2, [r3, #0]
   14934:	f7ec bde8 	b.w	1508 <__swap>
   14938:	20001978 	.word	0x20001978
   1493c:	200019ac 	.word	0x200019ac

00014940 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14940:	4b13      	ldr	r3, [pc, #76]	; (14990 <_is_thread_time_slicing+0x50>)
   14942:	681b      	ldr	r3, [r3, #0]
   14944:	2b00      	cmp	r3, #0
{
   14946:	b510      	push	{r4, lr}
   14948:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   1494a:	dd1f      	ble.n	1498c <_is_thread_time_slicing+0x4c>
   1494c:	8943      	ldrh	r3, [r0, #10]
   1494e:	2b7f      	cmp	r3, #127	; 0x7f
   14950:	d81c      	bhi.n	1498c <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   14952:	4b10      	ldr	r3, [pc, #64]	; (14994 <_is_thread_time_slicing+0x54>)
   14954:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14958:	681b      	ldr	r3, [r3, #0]
   1495a:	4299      	cmp	r1, r3
   1495c:	db16      	blt.n	1498c <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   1495e:	f7ff fe55 	bl	1460c <k_spin_lock.isra.11>
	return list->head == list;
   14962:	490d      	ldr	r1, [pc, #52]	; (14998 <_is_thread_time_slicing+0x58>)
   14964:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14968:	428b      	cmp	r3, r1
   1496a:	4604      	mov	r4, r0
   1496c:	d00a      	beq.n	14984 <_is_thread_time_slicing+0x44>
		if (next) {
   1496e:	b15b      	cbz	r3, 14988 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   14970:	f992 000a 	ldrsb.w	r0, [r2, #10]
   14974:	f993 300a 	ldrsb.w	r3, [r3, #10]
   14978:	1ac3      	subs	r3, r0, r3
   1497a:	4258      	negs	r0, r3
   1497c:	4158      	adcs	r0, r3
   1497e:	f384 8811 	msr	BASEPRI, r4
	return ret;
   14982:	bd10      	pop	{r4, pc}
   14984:	2000      	movs	r0, #0
   14986:	e7fa      	b.n	1497e <_is_thread_time_slicing+0x3e>
   14988:	4618      	mov	r0, r3
   1498a:	e7f8      	b.n	1497e <_is_thread_time_slicing+0x3e>
		return 0;
   1498c:	2000      	movs	r0, #0
}
   1498e:	bd10      	pop	{r4, pc}
   14990:	20001858 	.word	0x20001858
   14994:	2000185c 	.word	0x2000185c
   14998:	20001978 	.word	0x20001978

0001499c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   1499c:	4b01      	ldr	r3, [pc, #4]	; (149a4 <_update_time_slice_before_swap+0x8>)
   1499e:	2200      	movs	r2, #0
   149a0:	601a      	str	r2, [r3, #0]
   149a2:	4770      	bx	lr
   149a4:	200019ac 	.word	0x200019ac

000149a8 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   149a8:	b538      	push	{r3, r4, r5, lr}
   149aa:	4605      	mov	r5, r0
	int need_sched = 0;
   149ac:	2000      	movs	r0, #0
	return list->head == list;
   149ae:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   149b0:	42a5      	cmp	r5, r4
   149b2:	d000      	beq.n	149b6 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   149b4:	b904      	cbnz	r4, 149b8 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   149b6:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   149b8:	4620      	mov	r0, r4
   149ba:	f7ff fe9e 	bl	146fa <_unpend_thread>
		_ready_thread(th);
   149be:	4620      	mov	r0, r4
   149c0:	f7ff ff14 	bl	147ec <_ready_thread>
		need_sched = 1;
   149c4:	2001      	movs	r0, #1
   149c6:	e7f2      	b.n	149ae <_unpend_all+0x6>

000149c8 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   149c8:	4b02      	ldr	r3, [pc, #8]	; (149d4 <_sched_init+0xc>)
   149ca:	f103 0224 	add.w	r2, r3, #36	; 0x24
   149ce:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   149d0:	629a      	str	r2, [r3, #40]	; 0x28
   149d2:	4770      	bx	lr
   149d4:	20001978 	.word	0x20001978

000149d8 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   149d8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   149da:	4c14      	ldr	r4, [pc, #80]	; (14a2c <_impl_k_yield+0x54>)
   149dc:	4b14      	ldr	r3, [pc, #80]	; (14a30 <_impl_k_yield+0x58>)
   149de:	68a2      	ldr	r2, [r4, #8]
   149e0:	681b      	ldr	r3, [r3, #0]
   149e2:	429a      	cmp	r2, r3
   149e4:	d00f      	beq.n	14a06 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   149e6:	f7ff fe11 	bl	1460c <k_spin_lock.isra.11>
   149ea:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   149ec:	68a0      	ldr	r0, [r4, #8]
   149ee:	f7ff fdef 	bl	145d0 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   149f2:	68a1      	ldr	r1, [r4, #8]
   149f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   149f8:	f7ff fec2 	bl	14780 <_priq_dumb_add>
			update_cache(1);
   149fc:	2001      	movs	r0, #1
   149fe:	f7ff fe0d 	bl	1461c <update_cache>
   14a02:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   14a06:	6a22      	ldr	r2, [r4, #32]
   14a08:	68a3      	ldr	r3, [r4, #8]
   14a0a:	429a      	cmp	r2, r3
   14a0c:	d00c      	beq.n	14a28 <_impl_k_yield+0x50>
	__asm__ volatile(
   14a0e:	f04f 0320 	mov.w	r3, #32
   14a12:	f3ef 8011 	mrs	r0, BASEPRI
   14a16:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   14a1a:	4b06      	ldr	r3, [pc, #24]	; (14a34 <_impl_k_yield+0x5c>)
   14a1c:	2200      	movs	r2, #0
   14a1e:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   14a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14a24:	f7ec bd70 	b.w	1508 <__swap>
   14a28:	bd38      	pop	{r3, r4, r5, pc}
   14a2a:	bf00      	nop
   14a2c:	20001978 	.word	0x20001978
   14a30:	00019a48 	.word	0x00019a48
   14a34:	200019ac 	.word	0x200019ac

00014a38 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   14a38:	4b01      	ldr	r3, [pc, #4]	; (14a40 <_impl_k_current_get+0x8>)
   14a3a:	6898      	ldr	r0, [r3, #8]
   14a3c:	4770      	bx	lr
   14a3e:	bf00      	nop
   14a40:	20001978 	.word	0x20001978

00014a44 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   14a44:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   14a48:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   14a4a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   14a4c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   14a4e:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   14a50:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   14a52:	6143      	str	r3, [r0, #20]
   14a54:	4770      	bx	lr

00014a56 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   14a56:	b570      	push	{r4, r5, r6, lr}
   14a58:	4604      	mov	r4, r0
   14a5a:	f04f 0320 	mov.w	r3, #32
   14a5e:	f3ef 8611 	mrs	r6, BASEPRI
   14a62:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   14a66:	f7ff fe3a 	bl	146de <_unpend_first_thread>
	if (thread) {
   14a6a:	4605      	mov	r5, r0
   14a6c:	b160      	cbz	r0, 14a88 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   14a6e:	7a43      	ldrb	r3, [r0, #9]
   14a70:	06db      	lsls	r3, r3, #27
   14a72:	d102      	bne.n	14a7a <_impl_k_sem_give+0x24>
   14a74:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14a76:	3301      	adds	r3, #1
   14a78:	d012      	beq.n	14aa0 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14a7a:	2300      	movs	r3, #0
   14a7c:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   14a7e:	4630      	mov	r0, r6
}
   14a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   14a84:	f7ff be44 	b.w	14710 <_reschedule>
	sem->count += (sem->count != sem->limit);
   14a88:	68a3      	ldr	r3, [r4, #8]
   14a8a:	68e2      	ldr	r2, [r4, #12]
   14a8c:	429a      	cmp	r2, r3
   14a8e:	bf18      	it	ne
   14a90:	3301      	addne	r3, #1
   14a92:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14a94:	2102      	movs	r1, #2
   14a96:	f104 0010 	add.w	r0, r4, #16
   14a9a:	f000 fca1 	bl	153e0 <_handle_obj_poll_events>
   14a9e:	e7ee      	b.n	14a7e <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   14aa0:	f7ff fe8e 	bl	147c0 <_add_thread_to_ready_q>
   14aa4:	e7e9      	b.n	14a7a <_impl_k_sem_give+0x24>

00014aa6 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   14aa6:	b410      	push	{r4}
   14aa8:	460a      	mov	r2, r1
   14aaa:	4604      	mov	r4, r0
   14aac:	f04f 0320 	mov.w	r3, #32
   14ab0:	f3ef 8011 	mrs	r0, BASEPRI
   14ab4:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   14ab8:	68a3      	ldr	r3, [r4, #8]
   14aba:	b133      	cbz	r3, 14aca <_impl_k_sem_take+0x24>
		sem->count--;
   14abc:	3b01      	subs	r3, #1
   14abe:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14ac0:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   14ac4:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   14ac6:	bc10      	pop	{r4}
   14ac8:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   14aca:	b921      	cbnz	r1, 14ad6 <_impl_k_sem_take+0x30>
   14acc:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   14ad0:	f06f 000f 	mvn.w	r0, #15
   14ad4:	e7f7      	b.n	14ac6 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   14ad6:	4621      	mov	r1, r4
}
   14ad8:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   14ada:	f7ff bf1f 	b.w	1491c <_pend_current_thread>
	...

00014ae0 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   14ae0:	4b03      	ldr	r3, [pc, #12]	; (14af0 <_impl_k_uptime_get_32+0x10>)
   14ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   14ae6:	230a      	movs	r3, #10
   14ae8:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   14aec:	4770      	bx	lr
   14aee:	bf00      	nop
   14af0:	200019b0 	.word	0x200019b0

00014af4 <_tick_get>:
	__asm__ volatile(
   14af4:	f04f 0220 	mov.w	r2, #32
   14af8:	f3ef 8311 	mrs	r3, BASEPRI
   14afc:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   14b00:	4a02      	ldr	r2, [pc, #8]	; (14b0c <_tick_get+0x18>)
   14b02:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14b06:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   14b0a:	4770      	bx	lr
   14b0c:	200019b0 	.word	0x200019b0

00014b10 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   14b10:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   14b12:	f7ff ffef 	bl	14af4 <_tick_get>
   14b16:	240a      	movs	r4, #10
   14b18:	fba0 2304 	umull	r2, r3, r0, r4
   14b1c:	fb04 3301 	mla	r3, r4, r1, r3
}
   14b20:	4610      	mov	r0, r2
   14b22:	4619      	mov	r1, r3
   14b24:	bd10      	pop	{r4, pc}
	...

00014b28 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   14b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b2c:	4607      	mov	r7, r0
   14b2e:	b085      	sub	sp, #20
	__asm__ volatile(
   14b30:	f04f 0320 	mov.w	r3, #32
   14b34:	f3ef 8011 	mrs	r0, BASEPRI
   14b38:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   14b3c:	4961      	ldr	r1, [pc, #388]	; (14cc4 <_nano_sys_clock_tick_announce+0x19c>)
   14b3e:	e9d1 4500 	ldrd	r4, r5, [r1]
   14b42:	19e2      	adds	r2, r4, r7
   14b44:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   14b48:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14b4c:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   14b50:	ae02      	add	r6, sp, #8
   14b52:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   14b54:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   14b56:	f04f 0320 	mov.w	r3, #32
   14b5a:	f3ef 8011 	mrs	r0, BASEPRI
   14b5e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14b62:	4c59      	ldr	r4, [pc, #356]	; (14cc8 <_nano_sys_clock_tick_announce+0x1a0>)
   14b64:	4621      	mov	r1, r4
   14b66:	4602      	mov	r2, r0
   14b68:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14b6c:	428b      	cmp	r3, r1
   14b6e:	d000      	beq.n	14b72 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   14b70:	b9fb      	cbnz	r3, 14bb2 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14b72:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   14b76:	68a0      	ldr	r0, [r4, #8]
   14b78:	f7ff fee2 	bl	14940 <_is_thread_time_slicing>
   14b7c:	b1b0      	cbz	r0, 14bac <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   14b7e:	4a53      	ldr	r2, [pc, #332]	; (14ccc <_nano_sys_clock_tick_announce+0x1a4>)
   14b80:	6811      	ldr	r1, [r2, #0]
   14b82:	230a      	movs	r3, #10
   14b84:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   14b88:	4b51      	ldr	r3, [pc, #324]	; (14cd0 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   14b8a:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   14b8c:	681b      	ldr	r3, [r3, #0]
   14b8e:	429f      	cmp	r7, r3
   14b90:	db0c      	blt.n	14bac <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   14b92:	2300      	movs	r3, #0
   14b94:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   14b96:	f04f 0320 	mov.w	r3, #32
   14b9a:	f3ef 8511 	mrs	r5, BASEPRI
   14b9e:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   14ba2:	68a0      	ldr	r0, [r4, #8]
   14ba4:	f7ff fe7a 	bl	1489c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14ba8:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   14bac:	b005      	add	sp, #20
   14bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   14bb2:	4d48      	ldr	r5, [pc, #288]	; (14cd4 <_nano_sys_clock_tick_announce+0x1ac>)
   14bb4:	9501      	str	r5, [sp, #4]
   14bb6:	2101      	movs	r1, #1
   14bb8:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   14bba:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   14bbe:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   14bc0:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   14bc4:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   14bc6:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   14bc8:	bfaa      	itet	ge
   14bca:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   14bce:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   14bd2:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   14bd6:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   14bd8:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   14bda:	691d      	ldr	r5, [r3, #16]
   14bdc:	4298      	cmp	r0, r3
   14bde:	bf14      	ite	ne
   14be0:	6818      	ldrne	r0, [r3, #0]
   14be2:	2000      	moveq	r0, #0
   14be4:	b9d5      	cbnz	r5, 14c1c <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   14be6:	e893 0220 	ldmia.w	r3, {r5, r9}
   14bea:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   14bee:	681d      	ldr	r5, [r3, #0]
   14bf0:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   14bf4:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   14bf6:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   14bfa:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   14bfc:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   14bfe:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   14c00:	f8c3 c010 	str.w	ip, [r3, #16]
   14c04:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14c08:	f04f 0320 	mov.w	r3, #32
   14c0c:	f3ef 8211 	mrs	r2, BASEPRI
   14c10:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   14c14:	4603      	mov	r3, r0
   14c16:	2800      	cmp	r0, #0
   14c18:	d1d4      	bne.n	14bc4 <_nano_sys_clock_tick_announce+0x9c>
   14c1a:	e001      	b.n	14c20 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   14c1c:	2900      	cmp	r1, #0
   14c1e:	dcf1      	bgt.n	14c04 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14c20:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   14c24:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14c26:	42b0      	cmp	r0, r6
   14c28:	d103      	bne.n	14c32 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   14c2a:	9a01      	ldr	r2, [sp, #4]
   14c2c:	2300      	movs	r3, #0
   14c2e:	6013      	str	r3, [r2, #0]
   14c30:	e7a1      	b.n	14b76 <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14c32:	2800      	cmp	r0, #0
   14c34:	d0f9      	beq.n	14c2a <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   14c36:	9b03      	ldr	r3, [sp, #12]
   14c38:	4298      	cmp	r0, r3
   14c3a:	d102      	bne.n	14c42 <_nano_sys_clock_tick_announce+0x11a>
   14c3c:	f04f 0b00 	mov.w	fp, #0
   14c40:	e001      	b.n	14c46 <_nano_sys_clock_tick_announce+0x11e>
   14c42:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14c46:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   14c4a:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   14c4e:	e890 000c 	ldmia.w	r0, {r2, r3}
   14c52:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14c54:	6802      	ldr	r2, [r0, #0]
   14c56:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   14c58:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   14c5a:	f04f 0320 	mov.w	r3, #32
   14c5e:	f3ef 8811 	mrs	r8, BASEPRI
   14c62:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   14c66:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   14c6a:	b1d6      	cbz	r6, 14ca2 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   14c6c:	68c3      	ldr	r3, [r0, #12]
   14c6e:	b123      	cbz	r3, 14c7a <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   14c70:	4630      	mov	r0, r6
   14c72:	f7ff fd25 	bl	146c0 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   14c76:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14c7a:	7a73      	ldrb	r3, [r6, #9]
   14c7c:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   14c80:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14c84:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14c86:	d102      	bne.n	14c8e <_nano_sys_clock_tick_announce+0x166>
   14c88:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14c8a:	3301      	adds	r3, #1
   14c8c:	d015      	beq.n	14cba <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14c8e:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14c92:	f1bb 0f00 	cmp.w	fp, #0
   14c96:	d0c8      	beq.n	14c2a <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   14c98:	9b03      	ldr	r3, [sp, #12]
   14c9a:	455b      	cmp	r3, fp
   14c9c:	d108      	bne.n	14cb0 <_nano_sys_clock_tick_announce+0x188>
   14c9e:	2300      	movs	r3, #0
   14ca0:	e008      	b.n	14cb4 <_nano_sys_clock_tick_announce+0x18c>
   14ca2:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   14ca6:	6943      	ldr	r3, [r0, #20]
   14ca8:	2b00      	cmp	r3, #0
   14caa:	d0f2      	beq.n	14c92 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   14cac:	4798      	blx	r3
   14cae:	e7f0      	b.n	14c92 <_nano_sys_clock_tick_announce+0x16a>
   14cb0:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14cb4:	4658      	mov	r0, fp
   14cb6:	469b      	mov	fp, r3
   14cb8:	e7c9      	b.n	14c4e <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   14cba:	4630      	mov	r0, r6
   14cbc:	f7ff fd80 	bl	147c0 <_add_thread_to_ready_q>
   14cc0:	e7e5      	b.n	14c8e <_nano_sys_clock_tick_announce+0x166>
   14cc2:	bf00      	nop
   14cc4:	200019b0 	.word	0x200019b0
   14cc8:	20001978 	.word	0x20001978
   14ccc:	200019ac 	.word	0x200019ac
   14cd0:	20001858 	.word	0x20001858
   14cd4:	200019a8 	.word	0x200019a8

00014cd8 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   14cd8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   14cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ce2:	4903      	ldr	r1, [pc, #12]	; (14cf0 <k_sys_work_q_init+0x18>)
   14ce4:	4803      	ldr	r0, [pc, #12]	; (14cf4 <k_sys_work_q_init+0x1c>)
   14ce6:	f000 f983 	bl	14ff0 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   14cea:	2000      	movs	r0, #0
   14cec:	bd08      	pop	{r3, pc}
   14cee:	bf00      	nop
   14cf0:	20003650 	.word	0x20003650
   14cf4:	200019b8 	.word	0x200019b8

00014cf8 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14cf8:	6903      	ldr	r3, [r0, #16]
   14cfa:	1c5a      	adds	r2, r3, #1
   14cfc:	d011      	beq.n	14d22 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14cfe:	4a0a      	ldr	r2, [pc, #40]	; (14d28 <_abort_timeout+0x30>)
   14d00:	6992      	ldr	r2, [r2, #24]
   14d02:	4290      	cmp	r0, r2
   14d04:	bf1f      	itttt	ne
   14d06:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14d08:	690a      	ldrne	r2, [r1, #16]
   14d0a:	189b      	addne	r3, r3, r2
   14d0c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   14d0e:	e890 000c 	ldmia.w	r0, {r2, r3}
   14d12:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14d14:	6802      	ldr	r2, [r0, #0]
   14d16:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d1c:	6103      	str	r3, [r0, #16]
	return 0;
   14d1e:	2000      	movs	r0, #0
   14d20:	4770      	bx	lr
		return _INACTIVE;
   14d22:	4618      	mov	r0, r3
}
   14d24:	4770      	bx	lr
   14d26:	bf00      	nop
   14d28:	20001978 	.word	0x20001978

00014d2c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   14d2c:	7a42      	ldrb	r2, [r0, #9]
   14d2e:	06d2      	lsls	r2, r2, #27
   14d30:	d104      	bne.n	14d3c <_ready_thread+0x10>
   14d32:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14d34:	3301      	adds	r3, #1
   14d36:	d101      	bne.n	14d3c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   14d38:	f7ff bd42 	b.w	147c0 <_add_thread_to_ready_q>
   14d3c:	4770      	bx	lr
	...

00014d40 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   14d40:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14d42:	f04f 0320 	mov.w	r3, #32
   14d46:	f3ef 8611 	mrs	r6, BASEPRI
   14d4a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14d4e:	4a19      	ldr	r2, [pc, #100]	; (14db4 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   14d50:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14d52:	230a      	movs	r3, #10
   14d54:	3109      	adds	r1, #9
   14d56:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   14d5a:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14d5c:	6241      	str	r1, [r0, #36]	; 0x24
   14d5e:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14d60:	2300      	movs	r3, #0
   14d62:	6203      	str	r3, [r0, #32]
   14d64:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14d68:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14d6a:	f100 0514 	add.w	r5, r0, #20
   14d6e:	d108      	bne.n	14d82 <schedule_new_thread.part.11+0x42>
	node->next = list;
   14d70:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   14d72:	6993      	ldr	r3, [r2, #24]
   14d74:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   14d76:	6993      	ldr	r3, [r2, #24]
   14d78:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14d7a:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14d7c:	f386 8811 	msr	BASEPRI, r6
   14d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14d82:	2b00      	cmp	r3, #0
   14d84:	d0f4      	beq.n	14d70 <schedule_new_thread.part.11+0x30>
   14d86:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14d8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14d8c:	691f      	ldr	r7, [r3, #16]
   14d8e:	42bc      	cmp	r4, r7
   14d90:	dc08      	bgt.n	14da4 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   14d92:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14d94:	1b3c      	subs	r4, r7, r4
   14d96:	611c      	str	r4, [r3, #16]
   14d98:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   14d9a:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   14d9c:	685a      	ldr	r2, [r3, #4]
   14d9e:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   14da0:	605d      	str	r5, [r3, #4]
   14da2:	e7eb      	b.n	14d7c <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   14da4:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   14da6:	4573      	cmp	r3, lr
   14da8:	6244      	str	r4, [r0, #36]	; 0x24
   14daa:	d0e1      	beq.n	14d70 <schedule_new_thread.part.11+0x30>
   14dac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14dae:	2b00      	cmp	r3, #0
   14db0:	d1eb      	bne.n	14d8a <schedule_new_thread.part.11+0x4a>
   14db2:	e7dd      	b.n	14d70 <schedule_new_thread.part.11+0x30>
   14db4:	20001978 	.word	0x20001978

00014db8 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   14db8:	4770      	bx	lr
	...

00014dbc <k_is_in_isr>:
   14dbc:	f3ef 8005 	mrs	r0, IPSR
   14dc0:	280d      	cmp	r0, #13
   14dc2:	d807      	bhi.n	14dd4 <k_is_in_isr+0x18>
   14dc4:	b138      	cbz	r0, 14dd6 <k_is_in_isr+0x1a>
   14dc6:	4b04      	ldr	r3, [pc, #16]	; (14dd8 <k_is_in_isr+0x1c>)
   14dc8:	6858      	ldr	r0, [r3, #4]
   14dca:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   14dce:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   14dd2:	4770      	bx	lr
   14dd4:	2001      	movs	r0, #1
}
   14dd6:	4770      	bx	lr
   14dd8:	e000ed00 	.word	0xe000ed00

00014ddc <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   14ddc:	4b02      	ldr	r3, [pc, #8]	; (14de8 <_is_thread_essential+0xc>)
   14dde:	689b      	ldr	r3, [r3, #8]
   14de0:	7a18      	ldrb	r0, [r3, #8]
}
   14de2:	f000 0001 	and.w	r0, r0, #1
   14de6:	4770      	bx	lr
   14de8:	20001978 	.word	0x20001978

00014dec <_impl_k_thread_start>:
{
   14dec:	b510      	push	{r4, lr}
	__asm__ volatile(
   14dee:	f04f 0320 	mov.w	r3, #32
   14df2:	f3ef 8411 	mrs	r4, BASEPRI
   14df6:	f383 8811 	msr	BASEPRI, r3
   14dfa:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   14dfc:	0759      	lsls	r1, r3, #29
   14dfe:	d402      	bmi.n	14e06 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14e00:	f384 8811 	msr	BASEPRI, r4
   14e04:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14e06:	f023 0304 	bic.w	r3, r3, #4
   14e0a:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   14e0c:	f7ff ff8e 	bl	14d2c <_ready_thread>
	_reschedule(key);
   14e10:	4620      	mov	r0, r4
}
   14e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   14e16:	f7ff bc7b 	b.w	14710 <_reschedule>
	...

00014e1c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   14e1c:	b530      	push	{r4, r5, lr}
   14e1e:	b087      	sub	sp, #28
   14e20:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14e22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14e24:	9504      	str	r5, [sp, #16]
   14e26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14e28:	9503      	str	r5, [sp, #12]
   14e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14e2c:	9502      	str	r5, [sp, #8]
   14e2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   14e30:	9501      	str	r5, [sp, #4]
   14e32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14e34:	9500      	str	r5, [sp, #0]
   14e36:	f7ec fd69 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   14e3a:	4b04      	ldr	r3, [pc, #16]	; (14e4c <_setup_new_thread+0x30>)
   14e3c:	689b      	ldr	r3, [r3, #8]
   14e3e:	b913      	cbnz	r3, 14e46 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   14e40:	6663      	str	r3, [r4, #100]	; 0x64
}
   14e42:	b007      	add	sp, #28
   14e44:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   14e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   14e48:	e7fa      	b.n	14e40 <_setup_new_thread+0x24>
   14e4a:	bf00      	nop
   14e4c:	20001978 	.word	0x20001978

00014e50 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   14e50:	b570      	push	{r4, r5, r6, lr}
   14e52:	b086      	sub	sp, #24
   14e54:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14e56:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14e58:	9604      	str	r6, [sp, #16]
   14e5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14e5c:	9603      	str	r6, [sp, #12]
   14e5e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14e60:	9602      	str	r6, [sp, #8]
   14e62:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   14e64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14e66:	9601      	str	r6, [sp, #4]
   14e68:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14e6a:	9600      	str	r6, [sp, #0]
   14e6c:	f7ff ffd6 	bl	14e1c <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   14e70:	1c6b      	adds	r3, r5, #1
   14e72:	d003      	beq.n	14e7c <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   14e74:	b92d      	cbnz	r5, 14e82 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   14e76:	4620      	mov	r0, r4
   14e78:	f7ff ffb8 	bl	14dec <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   14e7c:	4620      	mov	r0, r4
   14e7e:	b006      	add	sp, #24
   14e80:	bd70      	pop	{r4, r5, r6, pc}
   14e82:	4629      	mov	r1, r5
   14e84:	4620      	mov	r0, r4
   14e86:	f7ff ff5b 	bl	14d40 <schedule_new_thread.part.11>
   14e8a:	e7f7      	b.n	14e7c <_impl_k_thread_create+0x2c>

00014e8c <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   14e8c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   14e8e:	b510      	push	{r4, lr}
   14e90:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   14e92:	b103      	cbz	r3, 14e96 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   14e94:	4798      	blx	r3
   14e96:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14e98:	06da      	lsls	r2, r3, #27
   14e9a:	d106      	bne.n	14eaa <_k_thread_single_abort+0x1e>
   14e9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14e9e:	3201      	adds	r2, #1
   14ea0:	d103      	bne.n	14eaa <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   14ea2:	4620      	mov	r0, r4
   14ea4:	f7ff fbe4 	bl	14670 <_remove_thread_from_ready_q>
   14ea8:	e00b      	b.n	14ec2 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   14eaa:	079b      	lsls	r3, r3, #30
   14eac:	d502      	bpl.n	14eb4 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   14eae:	4620      	mov	r0, r4
   14eb0:	f7ff fc06 	bl	146c0 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   14eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14eb6:	3301      	adds	r3, #1
   14eb8:	d003      	beq.n	14ec2 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   14eba:	f104 0014 	add.w	r0, r4, #20
   14ebe:	f7ff ff1b 	bl	14cf8 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   14ec2:	7a63      	ldrb	r3, [r4, #9]
   14ec4:	f043 0308 	orr.w	r3, r3, #8
   14ec8:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   14eca:	bd10      	pop	{r4, pc}

00014ecc <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   14ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14ece:	4f21      	ldr	r7, [pc, #132]	; (14f54 <_init_static_threads+0x88>)
   14ed0:	4d21      	ldr	r5, [pc, #132]	; (14f58 <_init_static_threads+0x8c>)
{
   14ed2:	b087      	sub	sp, #28
   14ed4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   14ed6:	42bd      	cmp	r5, r7
   14ed8:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   14edc:	d314      	bcc.n	14f08 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   14ede:	4b1f      	ldr	r3, [pc, #124]	; (14f5c <_init_static_threads+0x90>)
   14ee0:	689a      	ldr	r2, [r3, #8]
   14ee2:	7ad3      	ldrb	r3, [r2, #11]
   14ee4:	3b01      	subs	r3, #1
   14ee6:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   14ee8:	f04f 0320 	mov.w	r3, #32
   14eec:	f3ef 8511 	mrs	r5, BASEPRI
   14ef0:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   14ef4:	4c18      	ldr	r4, [pc, #96]	; (14f58 <_init_static_threads+0x8c>)
   14ef6:	42b4      	cmp	r4, r6
   14ef8:	d31f      	bcc.n	14f3a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14efa:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   14efe:	b007      	add	sp, #28
   14f00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   14f04:	f7ff bc22 	b.w	1474c <k_sched_unlock>
		_setup_new_thread(
   14f08:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14f0c:	9304      	str	r3, [sp, #16]
   14f0e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   14f12:	9303      	str	r3, [sp, #12]
   14f14:	f854 3c14 	ldr.w	r3, [r4, #-20]
   14f18:	9302      	str	r3, [sp, #8]
   14f1a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   14f1e:	9301      	str	r3, [sp, #4]
   14f20:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14f24:	9300      	str	r3, [sp, #0]
   14f26:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   14f2a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   14f2c:	f7ff ff76 	bl	14e1c <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   14f30:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14f34:	651d      	str	r5, [r3, #80]	; 0x50
   14f36:	4625      	mov	r5, r4
   14f38:	e7cd      	b.n	14ed6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   14f3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14f3c:	1c4b      	adds	r3, r1, #1
   14f3e:	d003      	beq.n	14f48 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   14f40:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   14f42:	b919      	cbnz	r1, 14f4c <_init_static_threads+0x80>
   14f44:	f7ff ff52 	bl	14dec <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   14f48:	342c      	adds	r4, #44	; 0x2c
   14f4a:	e7d4      	b.n	14ef6 <_init_static_threads+0x2a>
   14f4c:	f7ff fef8 	bl	14d40 <schedule_new_thread.part.11>
   14f50:	e7fa      	b.n	14f48 <_init_static_threads+0x7c>
   14f52:	bf00      	nop
   14f54:	20003f34 	.word	0x20003f34
   14f58:	20003f34 	.word	0x20003f34
   14f5c:	20001978 	.word	0x20001978

00014f60 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   14f60:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   14f62:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   14f64:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   14f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   14f6a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   14f6c:	72c3      	strb	r3, [r0, #11]
   14f6e:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   14f70:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   14f72:	61c3      	str	r3, [r0, #28]
	t->func = func;
   14f74:	6283      	str	r3, [r0, #40]	; 0x28
   14f76:	4770      	bx	lr

00014f78 <k_work_submit_to_queue>:
{
   14f78:	b500      	push	{lr}
   14f7a:	f101 0308 	add.w	r3, r1, #8
   14f7e:	f3bf 8f5b 	dmb	ish
   14f82:	e853 2f00 	ldrex	r2, [r3]
   14f86:	f042 0e01 	orr.w	lr, r2, #1
   14f8a:	e843 ec00 	strex	ip, lr, [r3]
   14f8e:	f1bc 0f00 	cmp.w	ip, #0
   14f92:	d1f6      	bne.n	14f82 <k_work_submit_to_queue+0xa>
   14f94:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14f98:	07d3      	lsls	r3, r2, #31
   14f9a:	d403      	bmi.n	14fa4 <k_work_submit_to_queue+0x2c>
}
   14f9c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14fa0:	f7ff ba94 	b.w	144cc <k_queue_append>
   14fa4:	f85d fb04 	ldr.w	pc, [sp], #4

00014fa8 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14fa8:	f1a0 010c 	sub.w	r1, r0, #12
   14fac:	6980      	ldr	r0, [r0, #24]
   14fae:	f7ff bfe3 	b.w	14f78 <k_work_submit_to_queue>

00014fb2 <work_q_main>:
{
   14fb2:	b510      	push	{r4, lr}
   14fb4:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   14fb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14fba:	4620      	mov	r0, r4
   14fbc:	f7ff faaa 	bl	14514 <_impl_k_queue_get>
		if (!work) {
   14fc0:	4603      	mov	r3, r0
   14fc2:	2800      	cmp	r0, #0
   14fc4:	d0f7      	beq.n	14fb6 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14fc6:	3308      	adds	r3, #8
		handler = work->handler;
   14fc8:	6842      	ldr	r2, [r0, #4]
   14fca:	f3bf 8f5b 	dmb	ish
   14fce:	e853 1f00 	ldrex	r1, [r3]
   14fd2:	f021 0e01 	bic.w	lr, r1, #1
   14fd6:	e843 ec00 	strex	ip, lr, [r3]
   14fda:	f1bc 0f00 	cmp.w	ip, #0
   14fde:	d1f6      	bne.n	14fce <work_q_main+0x1c>
   14fe0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   14fe4:	07cb      	lsls	r3, r1, #31
   14fe6:	d500      	bpl.n	14fea <work_q_main+0x38>
			handler(work);
   14fe8:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14fea:	f7ff fcf5 	bl	149d8 <_impl_k_yield>
   14fee:	e7e2      	b.n	14fb6 <work_q_main+0x4>

00014ff0 <k_work_q_start>:
{
   14ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ff2:	b087      	sub	sp, #28
   14ff4:	4604      	mov	r4, r0
   14ff6:	461f      	mov	r7, r3
   14ff8:	460d      	mov	r5, r1
   14ffa:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   14ffc:	f7ff fa5e 	bl	144bc <_impl_k_queue_init>

   15000:	2000      	movs	r0, #0
   15002:	9005      	str	r0, [sp, #20]
   15004:	9004      	str	r0, [sp, #16]
   15006:	9002      	str	r0, [sp, #8]
   15008:	9001      	str	r0, [sp, #4]
   1500a:	9703      	str	r7, [sp, #12]
   1500c:	9400      	str	r4, [sp, #0]
   1500e:	4b04      	ldr	r3, [pc, #16]	; (15020 <k_work_q_start+0x30>)
   15010:	4632      	mov	r2, r6
   15012:	4629      	mov	r1, r5
   15014:	f104 0010 	add.w	r0, r4, #16
   15018:	f7ff ff1a 	bl	14e50 <_impl_k_thread_create>
}
   1501c:	b007      	add	sp, #28
   1501e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15020:	00014fb3 	.word	0x00014fb3

00015024 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   15024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   15028:	2300      	movs	r3, #0
   1502a:	61c2      	str	r2, [r0, #28]
	t->func = func;
   1502c:	4a04      	ldr	r2, [pc, #16]	; (15040 <k_delayed_work_init+0x1c>)
   1502e:	6003      	str	r3, [r0, #0]
   15030:	6041      	str	r1, [r0, #4]
   15032:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   15034:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   15036:	6143      	str	r3, [r0, #20]
	t->func = func;
   15038:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   1503a:	6243      	str	r3, [r0, #36]	; 0x24
   1503c:	4770      	bx	lr
   1503e:	bf00      	nop
   15040:	00014fa9 	.word	0x00014fa9

00015044 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   15044:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   15046:	f04f 0320 	mov.w	r3, #32
   1504a:	f3ef 8411 	mrs	r4, BASEPRI
   1504e:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   15052:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15054:	b923      	cbnz	r3, 15060 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15056:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   1505a:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   1505e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15060:	f3bf 8f5b 	dmb	ish
   15064:	6883      	ldr	r3, [r0, #8]
   15066:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1506a:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1506c:	f100 0508 	add.w	r5, r0, #8
   15070:	d533      	bpl.n	150da <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   15072:	6a42      	ldr	r2, [r0, #36]	; 0x24
   15074:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   15076:	2100      	movs	r1, #0
   15078:	2b00      	cmp	r3, #0
   1507a:	d0ec      	beq.n	15056 <k_delayed_work_cancel+0x12>
   1507c:	4298      	cmp	r0, r3
   1507e:	d127      	bne.n	150d0 <k_delayed_work_cancel+0x8c>
   15080:	6803      	ldr	r3, [r0, #0]
   15082:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15084:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   15088:	b9c9      	cbnz	r1, 150be <k_delayed_work_cancel+0x7a>
   1508a:	42b8      	cmp	r0, r7
	list->head = node;
   1508c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   1508e:	d100      	bne.n	15092 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   15090:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15092:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   15094:	f003 0303 	and.w	r3, r3, #3
   15098:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   1509a:	2300      	movs	r3, #0
   1509c:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1509e:	f3bf 8f5b 	dmb	ish
   150a2:	e855 2f00 	ldrex	r2, [r5]
   150a6:	f022 0201 	bic.w	r2, r2, #1
   150aa:	e845 2100 	strex	r1, r2, [r5]
   150ae:	2900      	cmp	r1, #0
   150b0:	d1f7      	bne.n	150a2 <k_delayed_work_cancel+0x5e>
   150b2:	f3bf 8f5b 	dmb	ish
   150b6:	f384 8811 	msr	BASEPRI, r4
	return 0;
   150ba:	4618      	mov	r0, r3
   150bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   150be:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   150c0:	f006 0603 	and.w	r6, r6, #3
   150c4:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   150c6:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   150c8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   150ca:	bf08      	it	eq
   150cc:	6051      	streq	r1, [r2, #4]
   150ce:	e7e0      	b.n	15092 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   150d0:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   150d2:	4619      	mov	r1, r3
   150d4:	f026 0303 	bic.w	r3, r6, #3
   150d8:	e7ce      	b.n	15078 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   150da:	69c1      	ldr	r1, [r0, #28]
   150dc:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   150de:	f100 020c 	add.w	r2, r0, #12
   150e2:	d0da      	beq.n	1509a <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   150e4:	4b08      	ldr	r3, [pc, #32]	; (15108 <k_delayed_work_cancel+0xc4>)
   150e6:	699b      	ldr	r3, [r3, #24]
   150e8:	429a      	cmp	r2, r3
   150ea:	bf1f      	itttt	ne
   150ec:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   150ee:	6913      	ldrne	r3, [r2, #16]
   150f0:	185b      	addne	r3, r3, r1
   150f2:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   150f4:	6903      	ldr	r3, [r0, #16]
   150f6:	68c2      	ldr	r2, [r0, #12]
   150f8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   150fa:	68c2      	ldr	r2, [r0, #12]
   150fc:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   150fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15102:	61c3      	str	r3, [r0, #28]
   15104:	e7c9      	b.n	1509a <k_delayed_work_cancel+0x56>
   15106:	bf00      	nop
   15108:	20001978 	.word	0x20001978

0001510c <k_delayed_work_submit_to_queue>:
{
   1510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1510e:	4607      	mov	r7, r0
   15110:	460c      	mov	r4, r1
   15112:	4615      	mov	r5, r2
	__asm__ volatile(
   15114:	f04f 0320 	mov.w	r3, #32
   15118:	f3ef 8611 	mrs	r6, BASEPRI
   1511c:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   15120:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   15122:	b123      	cbz	r3, 1512e <k_delayed_work_submit_to_queue+0x22>
   15124:	4283      	cmp	r3, r0
   15126:	d00b      	beq.n	15140 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   15128:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   1512c:	e00d      	b.n	1514a <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   1512e:	b138      	cbz	r0, 15140 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   15130:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   15132:	b96d      	cbnz	r5, 15150 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   15134:	4621      	mov	r1, r4
   15136:	4638      	mov	r0, r7
   15138:	f7ff ff1e 	bl	14f78 <k_work_submit_to_queue>
	err = 0;
   1513c:	2000      	movs	r0, #0
   1513e:	e004      	b.n	1514a <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   15140:	4620      	mov	r0, r4
   15142:	f7ff ff7f 	bl	15044 <k_delayed_work_cancel>
		if (err < 0) {
   15146:	2800      	cmp	r0, #0
   15148:	daf2      	bge.n	15130 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1514a:	f386 8811 	msr	BASEPRI, r6
}
   1514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   15150:	220a      	movs	r2, #10
   15152:	3509      	adds	r5, #9
   15154:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   15158:	4a16      	ldr	r2, [pc, #88]	; (151b4 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   1515a:	2300      	movs	r3, #0
   1515c:	4611      	mov	r1, r2
   1515e:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   15160:	61a3      	str	r3, [r4, #24]
   15162:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   15166:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15168:	428b      	cmp	r3, r1
   1516a:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1516e:	61e5      	str	r5, [r4, #28]
   15170:	d106      	bne.n	15180 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   15172:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   15174:	6993      	ldr	r3, [r2, #24]
   15176:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   15178:	6993      	ldr	r3, [r2, #24]
   1517a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1517c:	6197      	str	r7, [r2, #24]
   1517e:	e7dd      	b.n	1513c <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15180:	2b00      	cmp	r3, #0
   15182:	d0f6      	beq.n	15172 <k_delayed_work_submit_to_queue+0x66>
   15184:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   15188:	69e0      	ldr	r0, [r4, #28]
   1518a:	691d      	ldr	r5, [r3, #16]
   1518c:	42a8      	cmp	r0, r5
   1518e:	dc08      	bgt.n	151a2 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   15190:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   15192:	1a28      	subs	r0, r5, r0
   15194:	6118      	str	r0, [r3, #16]
   15196:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   15198:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   1519a:	685a      	ldr	r2, [r3, #4]
   1519c:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   1519e:	605f      	str	r7, [r3, #4]
   151a0:	e7cc      	b.n	1513c <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   151a2:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   151a4:	4573      	cmp	r3, lr
   151a6:	61e0      	str	r0, [r4, #28]
   151a8:	d0e3      	beq.n	15172 <k_delayed_work_submit_to_queue+0x66>
   151aa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   151ac:	2b00      	cmp	r3, #0
   151ae:	d1eb      	bne.n	15188 <k_delayed_work_submit_to_queue+0x7c>
   151b0:	e7df      	b.n	15172 <k_delayed_work_submit_to_queue+0x66>
   151b2:	bf00      	nop
   151b4:	20001978 	.word	0x20001978

000151b8 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   151b8:	2314      	movs	r3, #20
   151ba:	b530      	push	{r4, r5, lr}
   151bc:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   151c0:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   151c2:	2900      	cmp	r1, #0
   151c4:	da00      	bge.n	151c8 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   151c6:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   151c8:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   151ca:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   151cc:	f003 030f 	and.w	r3, r3, #15
   151d0:	2b02      	cmp	r3, #2
   151d2:	d003      	beq.n	151dc <clear_event_registrations+0x24>
   151d4:	2b04      	cmp	r3, #4
   151d6:	d001      	beq.n	151dc <clear_event_registrations+0x24>
   151d8:	2b01      	cmp	r3, #1
   151da:	d104      	bne.n	151e6 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   151dc:	6843      	ldr	r3, [r0, #4]
   151de:	6805      	ldr	r5, [r0, #0]
   151e0:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   151e2:	6805      	ldr	r5, [r0, #0]
   151e4:	606b      	str	r3, [r5, #4]
   151e6:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   151ea:	f04f 0320 	mov.w	r3, #32
   151ee:	f3ef 8211 	mrs	r2, BASEPRI
   151f2:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   151f6:	3901      	subs	r1, #1
   151f8:	3814      	subs	r0, #20
   151fa:	e7e2      	b.n	151c2 <clear_event_registrations+0xa>

000151fc <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   151fc:	6883      	ldr	r3, [r0, #8]
{
   151fe:	b570      	push	{r4, r5, r6, lr}
   15200:	4605      	mov	r5, r0
   15202:	460e      	mov	r6, r1
	if (!event->poller) {
   15204:	b1d3      	cbz	r3, 1523c <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   15206:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   15208:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   1520a:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   1520c:	7a63      	ldrb	r3, [r4, #9]
   1520e:	079a      	lsls	r2, r3, #30
   15210:	d514      	bpl.n	1523c <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   15212:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15214:	3302      	adds	r3, #2
   15216:	d01a      	beq.n	1524e <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   15218:	4620      	mov	r0, r4
   1521a:	f7ff fa6e 	bl	146fa <_unpend_thread>
	_set_thread_return_value(thread,
   1521e:	2e00      	cmp	r6, #0
   15220:	bf0c      	ite	eq
   15222:	f06f 0303 	mvneq.w	r3, #3
   15226:	2300      	movne	r3, #0
   15228:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   1522a:	7a63      	ldrb	r3, [r4, #9]
   1522c:	06db      	lsls	r3, r3, #27
   1522e:	d105      	bne.n	1523c <signal_poll_event+0x40>
   15230:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15232:	3301      	adds	r3, #1
   15234:	d102      	bne.n	1523c <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   15236:	4620      	mov	r0, r4
   15238:	f7ff fac2 	bl	147c0 <_add_thread_to_ready_q>
	event->state |= state;
   1523c:	7b6b      	ldrb	r3, [r5, #13]
   1523e:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   15242:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   15246:	2000      	movs	r0, #0
	event->state |= state;
   15248:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   1524a:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   1524c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1524e:	f06f 000a 	mvn.w	r0, #10
}
   15252:	bd70      	pop	{r4, r5, r6, pc}

00015254 <add_event>:
{
   15254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15256:	6803      	ldr	r3, [r0, #0]
   15258:	4298      	cmp	r0, r3
   1525a:	4604      	mov	r4, r0
   1525c:	460e      	mov	r6, r1
   1525e:	4617      	mov	r7, r2
   15260:	d106      	bne.n	15270 <add_event+0x1c>
	node->next = list;
   15262:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   15264:	6863      	ldr	r3, [r4, #4]
   15266:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   15268:	6863      	ldr	r3, [r4, #4]
   1526a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1526c:	6066      	str	r6, [r4, #4]
   1526e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15270:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   15272:	2b00      	cmp	r3, #0
   15274:	d0f5      	beq.n	15262 <add_event+0xe>
   15276:	689b      	ldr	r3, [r3, #8]
   15278:	6811      	ldr	r1, [r2, #0]
   1527a:	6818      	ldr	r0, [r3, #0]
   1527c:	f7ff f9ee 	bl	1465c <_is_t1_higher_prio_than_t2>
   15280:	2800      	cmp	r0, #0
   15282:	d1ee      	bne.n	15262 <add_event+0xe>
	return list->head == list;
   15284:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15286:	42ac      	cmp	r4, r5
   15288:	d0eb      	beq.n	15262 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1528a:	2d00      	cmp	r5, #0
   1528c:	d0e9      	beq.n	15262 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   1528e:	68ab      	ldr	r3, [r5, #8]
   15290:	6838      	ldr	r0, [r7, #0]
   15292:	6819      	ldr	r1, [r3, #0]
   15294:	f7ff f9e2 	bl	1465c <_is_t1_higher_prio_than_t2>
   15298:	b130      	cbz	r0, 152a8 <add_event+0x54>
		node->prev = insert_point->prev;
   1529a:	686b      	ldr	r3, [r5, #4]
   1529c:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   1529e:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   152a0:	686b      	ldr	r3, [r5, #4]
   152a2:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   152a4:	606e      	str	r6, [r5, #4]
   152a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   152a8:	6863      	ldr	r3, [r4, #4]
   152aa:	429d      	cmp	r5, r3
   152ac:	d0d9      	beq.n	15262 <add_event+0xe>
   152ae:	682d      	ldr	r5, [r5, #0]
   152b0:	e7eb      	b.n	1528a <add_event+0x36>

000152b2 <k_poll_event_init>:
{
   152b2:	b530      	push	{r4, r5, lr}
	event->type = type;
   152b4:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   152b6:	6103      	str	r3, [r0, #16]
	event->type = type;
   152b8:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   152bc:	7b81      	ldrb	r1, [r0, #14]
   152be:	f362 0100 	bfi	r1, r2, #0, #1
   152c2:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   152c4:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   152c6:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   152c8:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   152cc:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   152d0:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   152d2:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   152d4:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   152d6:	bd30      	pop	{r4, r5, pc}

000152d8 <_impl_k_poll>:
{
   152d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   152dc:	4b3f      	ldr	r3, [pc, #252]	; (153dc <_impl_k_poll+0x104>)
{
   152de:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   152e0:	689b      	ldr	r3, [r3, #8]
   152e2:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   152e4:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   152e6:	2301      	movs	r3, #1
{
   152e8:	4607      	mov	r7, r0
   152ea:	468a      	mov	sl, r1
   152ec:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   152ee:	9301      	str	r3, [sp, #4]
   152f0:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   152f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   152f6:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   152f8:	4556      	cmp	r6, sl
   152fa:	db10      	blt.n	1531e <_impl_k_poll+0x46>
   152fc:	f04f 0320 	mov.w	r3, #32
   15300:	f3ef 8611 	mrs	r6, BASEPRI
   15304:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   15308:	9c01      	ldr	r4, [sp, #4]
   1530a:	2c00      	cmp	r4, #0
   1530c:	d13f      	bne.n	1538e <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   1530e:	4632      	mov	r2, r6
   15310:	4629      	mov	r1, r5
   15312:	4638      	mov	r0, r7
   15314:	f7ff ff50 	bl	151b8 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15318:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   1531c:	e040      	b.n	153a0 <_impl_k_poll+0xc8>
	__asm__ volatile(
   1531e:	f04f 0320 	mov.w	r3, #32
   15322:	f3ef 8b11 	mrs	fp, BASEPRI
   15326:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1532a:	7b62      	ldrb	r2, [r4, #13]
   1532c:	f002 030f 	and.w	r3, r2, #15
   15330:	2b02      	cmp	r3, #2
   15332:	d003      	beq.n	1533c <_impl_k_poll+0x64>
   15334:	2b04      	cmp	r3, #4
   15336:	d004      	beq.n	15342 <_impl_k_poll+0x6a>
   15338:	2b01      	cmp	r3, #1
   1533a:	d106      	bne.n	1534a <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   1533c:	6921      	ldr	r1, [r4, #16]
   1533e:	6889      	ldr	r1, [r1, #8]
   15340:	e001      	b.n	15346 <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   15342:	6921      	ldr	r1, [r4, #16]
   15344:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   15346:	2900      	cmp	r1, #0
   15348:	d13d      	bne.n	153c6 <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1534a:	f1b8 0f00 	cmp.w	r8, #0
   1534e:	d014      	beq.n	1537a <_impl_k_poll+0xa2>
   15350:	9a01      	ldr	r2, [sp, #4]
   15352:	b192      	cbz	r2, 1537a <_impl_k_poll+0xa2>
	switch (event->type) {
   15354:	2b02      	cmp	r3, #2
   15356:	d007      	beq.n	15368 <_impl_k_poll+0x90>
   15358:	2b04      	cmp	r3, #4
   1535a:	d013      	beq.n	15384 <_impl_k_poll+0xac>
   1535c:	2b01      	cmp	r3, #1
   1535e:	d109      	bne.n	15374 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   15360:	466a      	mov	r2, sp
   15362:	4621      	mov	r1, r4
   15364:	6920      	ldr	r0, [r4, #16]
   15366:	e003      	b.n	15370 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   15368:	6920      	ldr	r0, [r4, #16]
   1536a:	466a      	mov	r2, sp
   1536c:	4621      	mov	r1, r4
   1536e:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   15370:	f7ff ff70 	bl	15254 <add_event>
	event->poller = poller;
   15374:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   15378:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1537a:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   1537e:	3601      	adds	r6, #1
   15380:	3414      	adds	r4, #20
   15382:	e7b9      	b.n	152f8 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   15384:	6920      	ldr	r0, [r4, #16]
   15386:	466a      	mov	r2, sp
   15388:	4621      	mov	r1, r4
   1538a:	3008      	adds	r0, #8
   1538c:	e7f0      	b.n	15370 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   1538e:	2300      	movs	r3, #0
   15390:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   15392:	f1b8 0f00 	cmp.w	r8, #0
   15396:	d107      	bne.n	153a8 <_impl_k_poll+0xd0>
   15398:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   1539c:	f06f 040a 	mvn.w	r4, #10
}
   153a0:	4620      	mov	r0, r4
   153a2:	b005      	add	sp, #20
   153a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   153a8:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   153aa:	4642      	mov	r2, r8
   153ac:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   153ae:	9102      	str	r1, [sp, #8]
   153b0:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   153b2:	f7ff fab3 	bl	1491c <_pend_current_thread>
   153b6:	4604      	mov	r4, r0
	__asm__ volatile(
   153b8:	f04f 0320 	mov.w	r3, #32
   153bc:	f3ef 8611 	mrs	r6, BASEPRI
   153c0:	f383 8811 	msr	BASEPRI, r3
   153c4:	e7a3      	b.n	1530e <_impl_k_poll+0x36>
	event->state |= state;
   153c6:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   153ca:	f363 1207 	bfi	r2, r3, #4, #4
   153ce:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   153d0:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   153d4:	f8cd 9004 	str.w	r9, [sp, #4]
   153d8:	e7cf      	b.n	1537a <_impl_k_poll+0xa2>
   153da:	bf00      	nop
   153dc:	20001978 	.word	0x20001978

000153e0 <_handle_obj_poll_events>:
	return list->head == list;
   153e0:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   153e2:	4298      	cmp	r0, r3
   153e4:	d007      	beq.n	153f6 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   153e6:	e893 0005 	ldmia.w	r3, {r0, r2}
   153ea:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   153ec:	6818      	ldr	r0, [r3, #0]
   153ee:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   153f0:	4618      	mov	r0, r3
   153f2:	f7ff bf03 	b.w	151fc <signal_poll_event>
   153f6:	4770      	bx	lr

000153f8 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   153f8:	b538      	push	{r3, r4, r5, lr}
   153fa:	f04f 0320 	mov.w	r3, #32
   153fe:	f3ef 8511 	mrs	r5, BASEPRI
   15402:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15406:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   15408:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1540a:	4298      	cmp	r0, r3
	signal->signaled = 1;
   1540c:	f04f 0101 	mov.w	r1, #1
   15410:	6081      	str	r1, [r0, #8]
   15412:	d00d      	beq.n	15430 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   15414:	e893 0005 	ldmia.w	r3, {r0, r2}
   15418:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1541a:	6818      	ldr	r0, [r3, #0]
   1541c:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1541e:	4618      	mov	r0, r3
   15420:	f7ff feec 	bl	151fc <signal_poll_event>
   15424:	4604      	mov	r4, r0

	_reschedule(key);
   15426:	4628      	mov	r0, r5
   15428:	f7ff f972 	bl	14710 <_reschedule>
	return rc;
}
   1542c:	4620      	mov	r0, r4
   1542e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15430:	f385 8811 	msr	BASEPRI, r5
		return 0;
   15434:	2400      	movs	r4, #0
   15436:	e7f9      	b.n	1542c <_impl_k_poll_signal+0x34>

00015438 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   15438:	4770      	bx	lr
