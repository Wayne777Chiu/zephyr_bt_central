
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002d80 	.word	0x20002d80

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 0001213b 00001aa1 00001aa1     ....;!..........
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 000141d5 00000000 000018ed     .....A..........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 00012101     .............!..
     13c:	00000000 000018ed 20003f88 000144d9     .........?. .D..
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 00012135 00000000 000018ed     ....5!..........
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00015a5d 	.word	0x00015a5d
     5b0:	00015a86 	.word	0x00015a86
     5b4:	00015a64 	.word	0x00015a64
     5b8:	00015a6b 	.word	0x00015a6b
     5bc:	00015a75 	.word	0x00015a75
     5c0:	00015a7f 	.word	0x00015a7f

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 fc9e 	bl	4f0c <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fd37 	bl	506c <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00015aa9 	.word	0x00015aa9
     604:	20000000 	.word	0x20000000
     608:	00015ac7 	.word	0x00015ac7

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 fc77 	bl	4f0c <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f004 fab4 	bl	4b9c <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fe8e 	bl	4368 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00015af2 	.word	0x00015af2
     664:	00015a00 	.word	0x00015a00
     668:	00000671 	.word	0x00000671
     66c:	00015b10 	.word	0x00015b10

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 feb9 	bl	440c <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 fc31 	bl	4f10 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	00015ad6 	.word	0x00015ad6
     6bc:	00015a06 	.word	0x00015a06

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 fde0 	bl	4288 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 ff56 	bl	4590 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 fe38 	bl	4368 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00015b33 	.word	0x00015b33
     70c:	00015b53 	.word	0x00015b53
     710:	20003ac0 	.word	0x20003ac0
     714:	00015a0e 	.word	0x00015a0e
     718:	00000671 	.word	0x00000671
     71c:	00015b10 	.word	0x00015b10
     720:	00015b6a 	.word	0x00015b6a

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003af4 	.word	0x20003af4
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f014 fb5e 	bl	14f64 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003af8 	.word	0x20003af8

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003af8 	.word	0x20003af8

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f013 fadd 	bl	145b4 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	00015b98 	.word	0x00015b98

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f013 faa2 	bl	145b4 <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	00015ba2 	.word	0x00015ba2
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f013 fe6d 	bl	15054 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003f48 	.word	0x20003f48
    1394:	20000010 	.word	0x20000010
    1398:	20003f44 	.word	0x20003f44

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003f48 	.word	0x20003f48
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f013 f8cc 	bl	145b4 <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	00015bc4 	.word	0x00015bc4
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003f48 	.word	0x20003f48
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	200019b0 	.word	0x200019b0
    14c4:	20003f48 	.word	0x20003f48

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f013 fcf8 	bl	14ec8 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	20001978 	.word	0x20001978
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	20001978 	.word	0x20001978
    1530:	0001a29c 	.word	0x0001a29c
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	20001978 	.word	0x20001978
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f013 fcde 	bl	14f64 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	00015d1d 	.word	0x00015d1d

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	00015d67 	.word	0x00015d67
    1630:	e000ed00 	.word	0xe000ed00
    1634:	00015d7e 	.word	0x00015d7e
    1638:	00015d90 	.word	0x00015d90
    163c:	00015da4 	.word	0x00015da4
    1640:	00015dbd 	.word	0x00015dbd
    1644:	00015dce 	.word	0x00015dce
    1648:	00015dee 	.word	0x00015dee

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	00015e1e 	.word	0x00015e1e
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	00015e37 	.word	0x00015e37
    16c8:	00015e4b 	.word	0x00015e4b
    16cc:	00015e66 	.word	0x00015e66
    16d0:	00015e85 	.word	0x00015e85
    16d4:	00015eab 	.word	0x00015eab
    16d8:	00015ec6 	.word	0x00015ec6

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	00015be4 	.word	0x00015be4
    175c:	e000ed00 	.word	0xe000ed00
    1760:	00015d7e 	.word	0x00015d7e
    1764:	00015d90 	.word	0x00015d90
    1768:	00015bfb 	.word	0x00015bfb
    176c:	00015dbd 	.word	0x00015dbd
    1770:	00015c15 	.word	0x00015c15
    1774:	00015c31 	.word	0x00015c31
    1778:	00015dee 	.word	0x00015dee

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	00015c78 	.word	0x00015c78
    1824:	00015c90 	.word	0x00015c90
    1828:	00015cb2 	.word	0x00015cb2
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	00015cd2 	.word	0x00015cd2
    183c:	00015c4a 	.word	0x00015c4a
    1840:	00015c5f 	.word	0x00015c5f
    1844:	00015d09 	.word	0x00015d09

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f012 fe7f 	bl	14600 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	20001978 	.word	0x20001978

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f013 fdb6 	bl	1548c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f013 fad6 	bl	14f64 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	00015ef2 	.word	0x00015ef2
    19e4:	00015f70 	.word	0x00015f70
    19e8:	00015f18 	.word	0x00015f18
    19ec:	00015f32 	.word	0x00015f32
    19f0:	00015f4d 	.word	0x00015f4d

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f013 fc71 	bl	152e8 <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f013 fc6e 	bl	152e8 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f013 fc71 	bl	15308 <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	00015fb0 	.word	0x00015fb0
    1a44:	00015fac 	.word	0x00015fac
    1a48:	00015fc1 	.word	0x00015fc1
    1a4c:	20001978 	.word	0x20001978
    1a50:	00015fe1 	.word	0x00015fe1

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f013 fca8 	bl	153b8 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f013 fa25 	bl	14ec8 <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f013 b8d3 	b.w	14c3c <_reschedule>
    1a96:	bf00      	nop
    1a98:	20001978 	.word	0x20001978
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f012 fda6 	blne	14600 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	20001978 	.word	0x20001978
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002ec0 	.word	0x20002ec0

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f012 fda0 	bl	14660 <_bss_zero>
	_data_copy();
    1b20:	f012 fda8 	bl	14674 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f012 fdca 	bl	146bc <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003ad4 	.word	0x20003ad4
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>
	...

00001c9c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	f04f 0320 	mov.w	r3, #32
    1ca2:	f3ef 8511 	mrs	r5, BASEPRI
    1ca6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <bt_hex+0x60>)
    1cac:	4e14      	ldr	r6, [pc, #80]	; (1d00 <bt_hex+0x64>)
    1cae:	7823      	ldrb	r3, [r4, #0]
    1cb0:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cb4:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cb6:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cba:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cbc:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cbe:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cc2:	2940      	cmp	r1, #64	; 0x40
    1cc4:	bf28      	it	cs
    1cc6:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cc8:	4d0e      	ldr	r5, [pc, #56]	; (1d04 <bt_hex+0x68>)
    1cca:	3801      	subs	r0, #1
    1ccc:	4613      	mov	r3, r2
    1cce:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cd2:	42b3      	cmp	r3, r6
    1cd4:	d104      	bne.n	1ce0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cdc:	4610      	mov	r0, r2
    1cde:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	7844      	ldrb	r4, [r0, #1]
    1ce2:	0924      	lsrs	r4, r4, #4
    1ce4:	3302      	adds	r3, #2
    1ce6:	5d2c      	ldrb	r4, [r5, r4]
    1ce8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1cec:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1cf0:	f004 040f 	and.w	r4, r4, #15
    1cf4:	5d2c      	ldrb	r4, [r5, r4]
    1cf6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1cfa:	e7ea      	b.n	1cd2 <bt_hex+0x36>
    1cfc:	20000074 	.word	0x20000074
    1d00:	20000075 	.word	0x20000075
    1d04:	00016024 	.word	0x00016024

00001d08 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d08:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <bt_addr_str+0x40>)
    1d0c:	4c0f      	ldr	r4, [pc, #60]	; (1d4c <bt_addr_str+0x44>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d14:	3301      	adds	r3, #1
{
    1d16:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	7943      	ldrb	r3, [r0, #5]
    1d22:	9204      	str	r2, [sp, #16]
    1d24:	7842      	ldrb	r2, [r0, #1]
    1d26:	9203      	str	r2, [sp, #12]
    1d28:	7882      	ldrb	r2, [r0, #2]
    1d2a:	9202      	str	r2, [sp, #8]
    1d2c:	78c2      	ldrb	r2, [r0, #3]
    1d2e:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d34:	7902      	ldrb	r2, [r0, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	2112      	movs	r1, #18
    1d3a:	4a05      	ldr	r2, [pc, #20]	; (1d50 <bt_addr_str+0x48>)
    1d3c:	4620      	mov	r0, r4
    1d3e:	f7ff f933 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d42:	4620      	mov	r0, r4
    1d44:	b006      	add	sp, #24
    1d46:	bd10      	pop	{r4, pc}
    1d48:	20000072 	.word	0x20000072
    1d4c:	20000018 	.word	0x20000018
    1d50:	00016006 	.word	0x00016006

00001d54 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a1d      	ldr	r2, [pc, #116]	; (1dcc <bt_addr_le_str+0x78>)
    1d58:	491d      	ldr	r1, [pc, #116]	; (1dd0 <bt_addr_le_str+0x7c>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d60:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d62:	f003 0301 	and.w	r3, r3, #1
    1d66:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d68:	7803      	ldrb	r3, [r0, #0]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d6c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d70:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d72:	440e      	add	r6, r1
    1d74:	ad07      	add	r5, sp, #28
    1d76:	2b03      	cmp	r3, #3
    1d78:	d821      	bhi.n	1dbe <bt_addr_le_str+0x6a>
    1d7a:	e8df f003 	tbb	[pc, r3]
    1d7e:	1a02      	.short	0x1a02
    1d80:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff ff05 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d8a:	7862      	ldrb	r2, [r4, #1]
    1d8c:	9204      	str	r2, [sp, #16]
    1d8e:	78a2      	ldrb	r2, [r4, #2]
    1d90:	9203      	str	r2, [sp, #12]
    1d92:	78e2      	ldrb	r2, [r4, #3]
    1d94:	9202      	str	r2, [sp, #8]
    1d96:	7922      	ldrb	r2, [r4, #4]
    1d98:	9201      	str	r2, [sp, #4]
    1d9a:	7962      	ldrb	r2, [r4, #5]
    1d9c:	9200      	str	r2, [sp, #0]
    1d9e:	79a3      	ldrb	r3, [r4, #6]
    1da0:	9505      	str	r5, [sp, #20]
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <bt_addr_le_str+0x84>)
    1da4:	211b      	movs	r1, #27
    1da6:	4630      	mov	r0, r6
    1da8:	f7ff f8fe 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dac:	4630      	mov	r0, r6
    1dae:	b00a      	add	sp, #40	; 0x28
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1db2:	490a      	ldr	r1, [pc, #40]	; (1ddc <bt_addr_le_str+0x88>)
    1db4:	e7e6      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1db6:	490a      	ldr	r1, [pc, #40]	; (1de0 <bt_addr_le_str+0x8c>)
    1db8:	e7e4      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dba:	490a      	ldr	r1, [pc, #40]	; (1de4 <bt_addr_le_str+0x90>)
    1dbc:	e7e2      	b.n	1d84 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dbe:	4a0a      	ldr	r2, [pc, #40]	; (1de8 <bt_addr_le_str+0x94>)
    1dc0:	210a      	movs	r1, #10
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff f8f0 	bl	fa8 <snprintk>
    1dc8:	e7df      	b.n	1d8a <bt_addr_le_str+0x36>
    1dca:	bf00      	nop
    1dcc:	20000073 	.word	0x20000073
    1dd0:	2000003c 	.word	0x2000003c
    1dd4:	00015a5d 	.word	0x00015a5d
    1dd8:	00015a86 	.word	0x00015a86
    1ddc:	00015a64 	.word	0x00015a64
    1de0:	00015a6b 	.word	0x00015a6b
    1de4:	00015a75 	.word	0x00015a75
    1de8:	00015a7f 	.word	0x00015a7f

00001dec <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1df0:	b08a      	sub	sp, #40	; 0x28
    1df2:	4604      	mov	r4, r0
    1df4:	460d      	mov	r5, r1
    1df6:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    1df8:	f013 f8b4 	bl	14f64 <_impl_k_current_get>
	u8_t res[16];
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));
    1dfc:	2110      	movs	r1, #16
    1dfe:	4607      	mov	r7, r0
    1e00:	4620      	mov	r0, r4
    1e02:	f7ff ff4b 	bl	1c9c <bt_hex>
    1e06:	2103      	movs	r1, #3
    1e08:	4680      	mov	r8, r0
    1e0a:	4628      	mov	r0, r5
    1e0c:	f7ff ff46 	bl	1c9c <bt_hex>
    1e10:	4b12      	ldr	r3, [pc, #72]	; (1e5c <ah+0x70>)
    1e12:	9304      	str	r3, [sp, #16]
    1e14:	9003      	str	r0, [sp, #12]
    1e16:	e88d 0188 	stmia.w	sp, {r3, r7, r8}
    1e1a:	4a11      	ldr	r2, [pc, #68]	; (1e60 <ah+0x74>)
    1e1c:	4b11      	ldr	r3, [pc, #68]	; (1e64 <ah+0x78>)
    1e1e:	4912      	ldr	r1, [pc, #72]	; (1e68 <ah+0x7c>)
    1e20:	4812      	ldr	r0, [pc, #72]	; (1e6c <ah+0x80>)
    1e22:	f7ff f8b3 	bl	f8c <printk>

	/* r' = padding || r */
	memcpy(res, r, 3);
    1e26:	2203      	movs	r2, #3
    1e28:	4629      	mov	r1, r5
    1e2a:	a806      	add	r0, sp, #24
    1e2c:	f7ff fee6 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1e30:	220d      	movs	r2, #13
    1e32:	2100      	movs	r1, #0
    1e34:	f10d 001b 	add.w	r0, sp, #27
    1e38:	f7ff ff0c 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e3c:	aa06      	add	r2, sp, #24
    1e3e:	4620      	mov	r0, r4
    1e40:	4611      	mov	r1, r2
    1e42:	f006 fe03 	bl	8a4c <bt_encrypt_le>
	if (err) {
    1e46:	4604      	mov	r4, r0
    1e48:	b920      	cbnz	r0, 1e54 <ah+0x68>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e4a:	2203      	movs	r2, #3
    1e4c:	a906      	add	r1, sp, #24
    1e4e:	4630      	mov	r0, r6
    1e50:	f7ff fed4 	bl	1bfc <memcpy>

	return 0;
}
    1e54:	4620      	mov	r0, r4
    1e56:	b00a      	add	sp, #40	; 0x28
    1e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e5c:	00015af1 	.word	0x00015af1
    1e60:	00016059 	.word	0x00016059
    1e64:	00016035 	.word	0x00016035
    1e68:	00016060 	.word	0x00016060
    1e6c:	00016063 	.word	0x00016063

00001e70 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e72:	b089      	sub	sp, #36	; 0x24
    1e74:	460c      	mov	r4, r1
    1e76:	4605      	mov	r5, r0
    1e78:	f013 f874 	bl	14f64 <_impl_k_current_get>
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));
    1e7c:	2110      	movs	r1, #16
    1e7e:	4606      	mov	r6, r0
    1e80:	4628      	mov	r0, r5
    1e82:	f7ff ff0b 	bl	1c9c <bt_hex>
    1e86:	4607      	mov	r7, r0
    1e88:	4620      	mov	r0, r4
    1e8a:	f7ff ff3d 	bl	1d08 <bt_addr_str>
    1e8e:	4b0e      	ldr	r3, [pc, #56]	; (1ec8 <bt_rpa_irk_matches+0x58>)
    1e90:	9304      	str	r3, [sp, #16]
    1e92:	9003      	str	r0, [sp, #12]
    1e94:	e88d 00c8 	stmia.w	sp, {r3, r6, r7}
    1e98:	4a0c      	ldr	r2, [pc, #48]	; (1ecc <bt_rpa_irk_matches+0x5c>)
    1e9a:	490d      	ldr	r1, [pc, #52]	; (1ed0 <bt_rpa_irk_matches+0x60>)
    1e9c:	4b0d      	ldr	r3, [pc, #52]	; (1ed4 <bt_rpa_irk_matches+0x64>)
    1e9e:	480e      	ldr	r0, [pc, #56]	; (1ed8 <bt_rpa_irk_matches+0x68>)
    1ea0:	f7ff f874 	bl	f8c <printk>

	err = ah(irk, addr->val + 3, hash);
    1ea4:	aa07      	add	r2, sp, #28
    1ea6:	1ce1      	adds	r1, r4, #3
    1ea8:	4628      	mov	r0, r5
    1eaa:	f7ff ff9f 	bl	1dec <ah>
	if (err) {
    1eae:	b948      	cbnz	r0, 1ec4 <bt_rpa_irk_matches+0x54>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1eb0:	2203      	movs	r2, #3
    1eb2:	a907      	add	r1, sp, #28
    1eb4:	4620      	mov	r0, r4
    1eb6:	f7ff fe8c 	bl	1bd2 <memcmp>
    1eba:	fab0 f080 	clz	r0, r0
    1ebe:	0940      	lsrs	r0, r0, #5
}
    1ec0:	b009      	add	sp, #36	; 0x24
    1ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
    1ec4:	2000      	movs	r0, #0
    1ec6:	e7fb      	b.n	1ec0 <bt_rpa_irk_matches+0x50>
    1ec8:	00015af1 	.word	0x00015af1
    1ecc:	00016059 	.word	0x00016059
    1ed0:	00016060 	.word	0x00016060
    1ed4:	00016038 	.word	0x00016038
    1ed8:	000160a9 	.word	0x000160a9

00001edc <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1edc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1ede:	1cce      	adds	r6, r1, #3
{
    1ee0:	b085      	sub	sp, #20
    1ee2:	4607      	mov	r7, r0
    1ee4:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1ee6:	4630      	mov	r0, r6
    1ee8:	2103      	movs	r1, #3
    1eea:	f006 fd93 	bl	8a14 <bt_rand>
	if (err) {
    1eee:	4605      	mov	r5, r0
    1ef0:	b9e8      	cbnz	r0, 1f2e <bt_rpa_create+0x52>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1ef2:	7963      	ldrb	r3, [r4, #5]
    1ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1efc:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1efe:	4622      	mov	r2, r4
    1f00:	4631      	mov	r1, r6
    1f02:	4638      	mov	r0, r7
    1f04:	f7ff ff72 	bl	1dec <ah>
	if (err) {
    1f08:	4605      	mov	r5, r0
    1f0a:	b980      	cbnz	r0, 1f2e <bt_rpa_create+0x52>
    1f0c:	f013 f82a 	bl	14f64 <_impl_k_current_get>
    1f10:	4606      	mov	r6, r0
		return err;
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));
    1f12:	4620      	mov	r0, r4
    1f14:	f7ff fef8 	bl	1d08 <bt_addr_str>
    1f18:	4b06      	ldr	r3, [pc, #24]	; (1f34 <bt_rpa_create+0x58>)
    1f1a:	9303      	str	r3, [sp, #12]
    1f1c:	9002      	str	r0, [sp, #8]
    1f1e:	e88d 0048 	stmia.w	sp, {r3, r6}
    1f22:	4a05      	ldr	r2, [pc, #20]	; (1f38 <bt_rpa_create+0x5c>)
    1f24:	4b05      	ldr	r3, [pc, #20]	; (1f3c <bt_rpa_create+0x60>)
    1f26:	4906      	ldr	r1, [pc, #24]	; (1f40 <bt_rpa_create+0x64>)
    1f28:	4806      	ldr	r0, [pc, #24]	; (1f44 <bt_rpa_create+0x68>)
    1f2a:	f7ff f82f 	bl	f8c <printk>

	return 0;
}
    1f2e:	4628      	mov	r0, r5
    1f30:	b005      	add	sp, #20
    1f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f34:	00015af1 	.word	0x00015af1
    1f38:	00016059 	.word	0x00016059
    1f3c:	0001604b 	.word	0x0001604b
    1f40:	00016060 	.word	0x00016060
    1f44:	00016085 	.word	0x00016085

00001f48 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1f48:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1f4a:	7802      	ldrb	r2, [r0, #0]
    1f4c:	2a01      	cmp	r2, #1
{
    1f4e:	4604      	mov	r4, r0
    1f50:	460b      	mov	r3, r1
	switch (src->type) {
    1f52:	d017      	beq.n	1f84 <uuid_to_uuid128+0x3c>
    1f54:	d303      	bcc.n	1f5e <uuid_to_uuid128+0x16>
    1f56:	2a02      	cmp	r2, #2
    1f58:	d02c      	beq.n	1fb4 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1f5a:	bcf0      	pop	{r4, r5, r6, r7}
    1f5c:	4770      	bx	lr
		*dst = uuid128_base;
    1f5e:	4a18      	ldr	r2, [pc, #96]	; (1fc0 <uuid_to_uuid128+0x78>)
    1f60:	460d      	mov	r5, r1
    1f62:	f102 0710 	add.w	r7, r2, #16
    1f66:	6810      	ldr	r0, [r2, #0]
    1f68:	6851      	ldr	r1, [r2, #4]
    1f6a:	462e      	mov	r6, r5
    1f6c:	c603      	stmia	r6!, {r0, r1}
    1f6e:	3208      	adds	r2, #8
    1f70:	42ba      	cmp	r2, r7
    1f72:	4635      	mov	r5, r6
    1f74:	d1f7      	bne.n	1f66 <uuid_to_uuid128+0x1e>
    1f76:	7812      	ldrb	r2, [r2, #0]
    1f78:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1f7a:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1f7c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1f7e:	0a12      	lsrs	r2, r2, #8
    1f80:	739a      	strb	r2, [r3, #14]
    1f82:	e7ea      	b.n	1f5a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1f84:	4a0e      	ldr	r2, [pc, #56]	; (1fc0 <uuid_to_uuid128+0x78>)
    1f86:	460d      	mov	r5, r1
    1f88:	f102 0710 	add.w	r7, r2, #16
    1f8c:	6810      	ldr	r0, [r2, #0]
    1f8e:	6851      	ldr	r1, [r2, #4]
    1f90:	462e      	mov	r6, r5
    1f92:	c603      	stmia	r6!, {r0, r1}
    1f94:	3208      	adds	r2, #8
    1f96:	42ba      	cmp	r2, r7
    1f98:	4635      	mov	r5, r6
    1f9a:	d1f7      	bne.n	1f8c <uuid_to_uuid128+0x44>
    1f9c:	7812      	ldrb	r2, [r2, #0]
    1f9e:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1fa0:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1fa2:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1fa4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1fa8:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1faa:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1fac:	0a12      	lsrs	r2, r2, #8
    1fae:	7399      	strb	r1, [r3, #14]
    1fb0:	741a      	strb	r2, [r3, #16]
    1fb2:	e7d2      	b.n	1f5a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1fb4:	4601      	mov	r1, r0
    1fb6:	2211      	movs	r2, #17
    1fb8:	4618      	mov	r0, r3
}
    1fba:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1fbc:	f7ff be1e 	b.w	1bfc <memcpy>
    1fc0:	000160cf 	.word	0x000160cf

00001fc4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1fc4:	b510      	push	{r4, lr}
    1fc6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1fc8:	7801      	ldrb	r1, [r0, #0]
    1fca:	7822      	ldrb	r2, [r4, #0]
    1fcc:	428a      	cmp	r2, r1
{
    1fce:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1fd0:	d00e      	beq.n	1ff0 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1fd2:	4669      	mov	r1, sp
    1fd4:	f7ff ffb8 	bl	1f48 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1fd8:	a905      	add	r1, sp, #20
    1fda:	4620      	mov	r0, r4
    1fdc:	f7ff ffb4 	bl	1f48 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1fe0:	2210      	movs	r2, #16
    1fe2:	f10d 0115 	add.w	r1, sp, #21
    1fe6:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1fea:	f7ff fdf2 	bl	1bd2 <memcmp>
    1fee:	e00a      	b.n	2006 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1ff0:	2a01      	cmp	r2, #1
    1ff2:	d00a      	beq.n	200a <bt_uuid_cmp+0x46>
    1ff4:	d304      	bcc.n	2000 <bt_uuid_cmp+0x3c>
    1ff6:	2a02      	cmp	r2, #2
    1ff8:	d00a      	beq.n	2010 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1ffa:	f06f 0015 	mvn.w	r0, #21
    1ffe:	e002      	b.n	2006 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    2000:	8840      	ldrh	r0, [r0, #2]
    2002:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    2004:	1ac0      	subs	r0, r0, r3
}
    2006:	b00a      	add	sp, #40	; 0x28
    2008:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    200a:	6840      	ldr	r0, [r0, #4]
    200c:	6863      	ldr	r3, [r4, #4]
    200e:	e7f9      	b.n	2004 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    2010:	2210      	movs	r2, #16
    2012:	1c61      	adds	r1, r4, #1
    2014:	3001      	adds	r0, #1
    2016:	e7e8      	b.n	1fea <bt_uuid_cmp+0x26>

00002018 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    2018:	4770      	bx	lr
	...

0000201c <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    201c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    201e:	4d0b      	ldr	r5, [pc, #44]	; (204c <ver_str+0x30>)
{
    2020:	4606      	mov	r6, r0
	const char * const str[] = {
    2022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2024:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    2026:	466c      	mov	r4, sp
    2028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    202a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    202c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    202e:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    2032:	2e09      	cmp	r6, #9
	const char * const str[] = {
    2034:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    2038:	bf9b      	ittet	ls
    203a:	ab0a      	addls	r3, sp, #40	; 0x28
    203c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    2040:	4803      	ldrhi	r0, [pc, #12]	; (2050 <ver_str+0x34>)
		return str[ver];
    2042:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    2046:	b00a      	add	sp, #40	; 0x28
    2048:	bd70      	pop	{r4, r5, r6, pc}
    204a:	bf00      	nop
    204c:	00015a14 	.word	0x00015a14
    2050:	0001751c 	.word	0x0001751c

00002054 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2054:	2207      	movs	r2, #7
    2056:	f7ff bdd1 	b.w	1bfc <memcpy>

0000205a <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    205a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    205c:	f3bf 8f5b 	dmb	ish
    2060:	e850 3f00 	ldrex	r3, [r0]
    2064:	ea43 0201 	orr.w	r2, r3, r1
    2068:	e840 2e00 	strex	lr, r2, [r0]
    206c:	f1be 0f00 	cmp.w	lr, #0
    2070:	d1f6      	bne.n	2060 <atomic_or+0x6>
    2072:	f3bf 8f5b 	dmb	ish
    2076:	4618      	mov	r0, r3
    2078:	f85d fb04 	ldr.w	pc, [sp], #4

0000207c <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    207c:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    207e:	f3bf 8f5b 	dmb	ish
    2082:	e850 3f00 	ldrex	r3, [r0]
    2086:	ea03 0201 	and.w	r2, r3, r1
    208a:	e840 2e00 	strex	lr, r2, [r0]
    208e:	f1be 0f00 	cmp.w	lr, #0
    2092:	d1f6      	bne.n	2082 <atomic_and+0x6>
    2094:	f3bf 8f5b 	dmb	ish
    2098:	4618      	mov	r0, r3
    209a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000020a0 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    20a0:	78c3      	ldrb	r3, [r0, #3]
    20a2:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    20a4:	f241 3288 	movw	r2, #5000	; 0x1388
    20a8:	f100 0170 	add.w	r1, r0, #112	; 0x70
    20ac:	bf08      	it	eq
    20ae:	2200      	moveq	r2, #0
    20b0:	4801      	ldr	r0, [pc, #4]	; (20b8 <update_conn_param+0x18>)
    20b2:	f013 bac1 	b.w	15638 <k_delayed_work_submit_to_queue>
    20b6:	bf00      	nop
    20b8:	200019b8 	.word	0x200019b8

000020bc <hci_cmd_done>:
{
    20bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20c0:	b087      	sub	sp, #28
    20c2:	4615      	mov	r5, r2
    20c4:	4688      	mov	r8, r1
    20c6:	4607      	mov	r7, r0
    20c8:	f012 ff4c 	bl	14f64 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    20cc:	4e2c      	ldr	r6, [pc, #176]	; (2180 <hci_cmd_done+0xc4>)
    20ce:	9001      	str	r0, [sp, #4]
    20d0:	4b2c      	ldr	r3, [pc, #176]	; (2184 <hci_cmd_done+0xc8>)
    20d2:	4a2d      	ldr	r2, [pc, #180]	; (2188 <hci_cmd_done+0xcc>)
    20d4:	492d      	ldr	r1, [pc, #180]	; (218c <hci_cmd_done+0xd0>)
    20d6:	9605      	str	r6, [sp, #20]
    20d8:	9504      	str	r5, [sp, #16]
    20da:	f8cd 800c 	str.w	r8, [sp, #12]
    20de:	9702      	str	r7, [sp, #8]
    20e0:	9600      	str	r6, [sp, #0]
    20e2:	482b      	ldr	r0, [pc, #172]	; (2190 <hci_cmd_done+0xd4>)
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20e4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 21a4 <hci_cmd_done+0xe8>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    20e8:	f7fe ff50 	bl	f8c <printk>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20ec:	79a8      	ldrb	r0, [r5, #6]
    20ee:	f011 fded 	bl	13ccc <net_buf_pool_get>
    20f2:	4581      	cmp	r9, r0
    20f4:	d013      	beq.n	211e <hci_cmd_done+0x62>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    20f6:	79ac      	ldrb	r4, [r5, #6]
    20f8:	4620      	mov	r0, r4
    20fa:	f011 fde7 	bl	13ccc <net_buf_pool_get>
    20fe:	9605      	str	r6, [sp, #20]
    2100:	9003      	str	r0, [sp, #12]
    2102:	f8cd 9010 	str.w	r9, [sp, #16]
    2106:	9402      	str	r4, [sp, #8]
    2108:	e88d 00c0 	stmia.w	sp, {r6, r7}
    210c:	4b1d      	ldr	r3, [pc, #116]	; (2184 <hci_cmd_done+0xc8>)
    210e:	4a21      	ldr	r2, [pc, #132]	; (2194 <hci_cmd_done+0xd8>)
    2110:	491e      	ldr	r1, [pc, #120]	; (218c <hci_cmd_done+0xd0>)
    2112:	4821      	ldr	r0, [pc, #132]	; (2198 <hci_cmd_done+0xdc>)
    2114:	f7fe ff3a 	bl	f8c <printk>
}
    2118:	b007      	add	sp, #28
    211a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    211e:	4628      	mov	r0, r5
    2120:	f011 fdda 	bl	13cd8 <net_buf_id>
    2124:	4c1d      	ldr	r4, [pc, #116]	; (219c <hci_cmd_done+0xe0>)
    2126:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    212a:	8843      	ldrh	r3, [r0, #2]
    212c:	42bb      	cmp	r3, r7
    212e:	d00f      	beq.n	2150 <hci_cmd_done+0x94>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2130:	4628      	mov	r0, r5
    2132:	f011 fdd1 	bl	13cd8 <net_buf_id>
    2136:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    213a:	9603      	str	r6, [sp, #12]
    213c:	8843      	ldrh	r3, [r0, #2]
    213e:	9302      	str	r3, [sp, #8]
    2140:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2144:	4b0f      	ldr	r3, [pc, #60]	; (2184 <hci_cmd_done+0xc8>)
    2146:	4a13      	ldr	r2, [pc, #76]	; (2194 <hci_cmd_done+0xd8>)
    2148:	4910      	ldr	r1, [pc, #64]	; (218c <hci_cmd_done+0xd0>)
    214a:	4815      	ldr	r0, [pc, #84]	; (21a0 <hci_cmd_done+0xe4>)
    214c:	f7fe ff1e 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    2150:	4628      	mov	r0, r5
    2152:	f011 fdc1 	bl	13cd8 <net_buf_id>
    2156:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    215a:	6843      	ldr	r3, [r0, #4]
    215c:	2b00      	cmp	r3, #0
    215e:	d0db      	beq.n	2118 <hci_cmd_done+0x5c>
		cmd(buf)->status = status;
    2160:	4628      	mov	r0, r5
    2162:	f011 fdb9 	bl	13cd8 <net_buf_id>
    2166:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    216a:	4628      	mov	r0, r5
    216c:	f011 fdb4 	bl	13cd8 <net_buf_id>
    2170:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2174:	6840      	ldr	r0, [r0, #4]
}
    2176:	b007      	add	sp, #28
    2178:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    217c:	f012 bf01 	b.w	14f82 <_impl_k_sem_give>
    2180:	00015af1 	.word	0x00015af1
    2184:	00016259 	.word	0x00016259
    2188:	00016059 	.word	0x00016059
    218c:	00016060 	.word	0x00016060
    2190:	00016ff6 	.word	0x00016ff6
    2194:	0001702e 	.word	0x0001702e
    2198:	00017035 	.word	0x00017035
    219c:	2000027c 	.word	0x2000027c
    21a0:	0001707a 	.word	0x0001707a
    21a4:	20004064 	.word	0x20004064

000021a8 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    21a8:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    21aa:	f3bf 8f5b 	dmb	ish
    21ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    21b2:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    21b6:	f001 011f 	and.w	r1, r1, #31
    21ba:	4108      	asrs	r0, r1
}
    21bc:	f000 0001 	and.w	r0, r0, #1
    21c0:	4770      	bx	lr
	...

000021c4 <bt_hci_cmd_create>:
{
    21c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    21c8:	b086      	sub	sp, #24
    21ca:	4606      	mov	r6, r0
    21cc:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    21ce:	f012 fec9 	bl	14f64 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    21d2:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2274 <bt_hci_cmd_create+0xb0>
    21d6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2278 <bt_hci_cmd_create+0xb4>
    21da:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 227c <bt_hci_cmd_create+0xb8>
    21de:	4d20      	ldr	r5, [pc, #128]	; (2260 <bt_hci_cmd_create+0x9c>)
    21e0:	9504      	str	r5, [sp, #16]
    21e2:	4653      	mov	r3, sl
    21e4:	464a      	mov	r2, r9
    21e6:	9001      	str	r0, [sp, #4]
    21e8:	9500      	str	r5, [sp, #0]
    21ea:	4641      	mov	r1, r8
    21ec:	9703      	str	r7, [sp, #12]
    21ee:	9602      	str	r6, [sp, #8]
    21f0:	481c      	ldr	r0, [pc, #112]	; (2264 <bt_hci_cmd_create+0xa0>)
    21f2:	f7fe fecb 	bl	f8c <printk>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    21f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    21fa:	481b      	ldr	r0, [pc, #108]	; (2268 <bt_hci_cmd_create+0xa4>)
    21fc:	f011 fdfa 	bl	13df4 <net_buf_alloc_fixed>
    2200:	4604      	mov	r4, r0
    2202:	f012 feaf 	bl	14f64 <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    2206:	464a      	mov	r2, r9
    2208:	4653      	mov	r3, sl
    220a:	9503      	str	r5, [sp, #12]
    220c:	9001      	str	r0, [sp, #4]
    220e:	9500      	str	r5, [sp, #0]
    2210:	4641      	mov	r1, r8
    2212:	9402      	str	r4, [sp, #8]
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2214:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    2218:	4814      	ldr	r0, [pc, #80]	; (226c <bt_hci_cmd_create+0xa8>)
	cmd(buf)->opcode = opcode;
    221a:	4d15      	ldr	r5, [pc, #84]	; (2270 <bt_hci_cmd_create+0xac>)
	BT_DBG("buf %p", buf);
    221c:	f7fe feb6 	bl	f8c <printk>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2220:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2224:	2100      	movs	r1, #0
    2226:	4640      	mov	r0, r8
    2228:	f011 fe03 	bl	13e32 <net_buf_simple_reserve>
    222c:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    2230:	4620      	mov	r0, r4
    2232:	f011 fd51 	bl	13cd8 <net_buf_id>
    2236:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    223a:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    223c:	4620      	mov	r0, r4
    223e:	f011 fd4b 	bl	13cd8 <net_buf_id>
    2242:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2246:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2248:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    224c:	4640      	mov	r0, r8
    224e:	f011 fe33 	bl	13eb8 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    2252:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    2254:	7087      	strb	r7, [r0, #2]
}
    2256:	4620      	mov	r0, r4
    2258:	b006      	add	sp, #24
    225a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    225e:	bf00      	nop
    2260:	00015af1 	.word	0x00015af1
    2264:	00016573 	.word	0x00016573
    2268:	20004064 	.word	0x20004064
    226c:	000165a3 	.word	0x000165a3
    2270:	2000027c 	.word	0x2000027c
    2274:	000160f8 	.word	0x000160f8
    2278:	00016059 	.word	0x00016059
    227c:	00016060 	.word	0x00016060

00002280 <bt_hci_cmd_send_sync>:
{
    2280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2284:	4681      	mov	r9, r0
    2286:	b08d      	sub	sp, #52	; 0x34
    2288:	4615      	mov	r5, r2
	if (!buf) {
    228a:	460c      	mov	r4, r1
    228c:	b921      	cbnz	r1, 2298 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    228e:	f7ff ff99 	bl	21c4 <bt_hci_cmd_create>
		if (!buf) {
    2292:	4604      	mov	r4, r0
    2294:	2800      	cmp	r0, #0
    2296:	d053      	beq.n	2340 <bt_hci_cmd_send_sync+0xc0>
    2298:	f012 fe64 	bl	14f64 <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    229c:	4e2a      	ldr	r6, [pc, #168]	; (2348 <bt_hci_cmd_send_sync+0xc8>)
    229e:	9605      	str	r6, [sp, #20]
    22a0:	89a3      	ldrh	r3, [r4, #12]
    22a2:	9304      	str	r3, [sp, #16]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    22a4:	f10d 0818 	add.w	r8, sp, #24
    22a8:	4b28      	ldr	r3, [pc, #160]	; (234c <bt_hci_cmd_send_sync+0xcc>)
    22aa:	9001      	str	r0, [sp, #4]
    22ac:	4a28      	ldr	r2, [pc, #160]	; (2350 <bt_hci_cmd_send_sync+0xd0>)
    22ae:	4929      	ldr	r1, [pc, #164]	; (2354 <bt_hci_cmd_send_sync+0xd4>)
    22b0:	f8cd 900c 	str.w	r9, [sp, #12]
    22b4:	9402      	str	r4, [sp, #8]
    22b6:	9600      	str	r6, [sp, #0]
    22b8:	4827      	ldr	r0, [pc, #156]	; (2358 <bt_hci_cmd_send_sync+0xd8>)
	cmd(buf)->sync = &sync_sem;
    22ba:	4f28      	ldr	r7, [pc, #160]	; (235c <bt_hci_cmd_send_sync+0xdc>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    22bc:	f7fe fe66 	bl	f8c <printk>
    22c0:	2201      	movs	r2, #1
    22c2:	2100      	movs	r1, #0
    22c4:	4640      	mov	r0, r8
    22c6:	f012 fe53 	bl	14f70 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    22ca:	4620      	mov	r0, r4
    22cc:	f011 fd04 	bl	13cd8 <net_buf_id>
    22d0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    22d4:	f8c0 8004 	str.w	r8, [r0, #4]
	net_buf_ref(buf);
    22d8:	4620      	mov	r0, r4
    22da:	f011 fde9 	bl	13eb0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    22de:	4621      	mov	r1, r4
    22e0:	481f      	ldr	r0, [pc, #124]	; (2360 <bt_hci_cmd_send_sync+0xe0>)
    22e2:	f011 fdaa 	bl	13e3a <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    22e6:	f242 7110 	movw	r1, #10000	; 0x2710
    22ea:	4640      	mov	r0, r8
    22ec:	f012 fe71 	bl	14fd2 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    22f0:	f012 fe38 	bl	14f64 <_impl_k_current_get>
    22f4:	4680      	mov	r8, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    22f6:	4620      	mov	r0, r4
    22f8:	f011 fcee 	bl	13cd8 <net_buf_id>
    22fc:	9604      	str	r6, [sp, #16]
    22fe:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    2302:	9303      	str	r3, [sp, #12]
    2304:	4a12      	ldr	r2, [pc, #72]	; (2350 <bt_hci_cmd_send_sync+0xd0>)
    2306:	4b11      	ldr	r3, [pc, #68]	; (234c <bt_hci_cmd_send_sync+0xcc>)
    2308:	4912      	ldr	r1, [pc, #72]	; (2354 <bt_hci_cmd_send_sync+0xd4>)
    230a:	4816      	ldr	r0, [pc, #88]	; (2364 <bt_hci_cmd_send_sync+0xe4>)
    230c:	e88d 0340 	stmia.w	sp, {r6, r8, r9}
    2310:	f7fe fe3c 	bl	f8c <printk>
	if (cmd(buf)->status) {
    2314:	4620      	mov	r0, r4
    2316:	f011 fcdf 	bl	13cd8 <net_buf_id>
    231a:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    231e:	b138      	cbz	r0, 2330 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    2320:	4620      	mov	r0, r4
    2322:	f011 fd97 	bl	13e54 <net_buf_unref>
		err = -EIO;
    2326:	f06f 0004 	mvn.w	r0, #4
}
    232a:	b00d      	add	sp, #52	; 0x34
    232c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (rsp) {
    2330:	b10d      	cbz	r5, 2336 <bt_hci_cmd_send_sync+0xb6>
			*rsp = buf;
    2332:	602c      	str	r4, [r5, #0]
    2334:	e7f9      	b.n	232a <bt_hci_cmd_send_sync+0xaa>
			net_buf_unref(buf);
    2336:	4620      	mov	r0, r4
    2338:	f011 fd8c 	bl	13e54 <net_buf_unref>
		err = 0;
    233c:	4628      	mov	r0, r5
    233e:	e7f4      	b.n	232a <bt_hci_cmd_send_sync+0xaa>
			return -ENOBUFS;
    2340:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2344:	e7f1      	b.n	232a <bt_hci_cmd_send_sync+0xaa>
    2346:	bf00      	nop
    2348:	00015af1 	.word	0x00015af1
    234c:	0001611a 	.word	0x0001611a
    2350:	00016059 	.word	0x00016059
    2354:	00016060 	.word	0x00016060
    2358:	0001661b 	.word	0x0001661b
    235c:	2000027c 	.word	0x2000027c
    2360:	20003bc4 	.word	0x20003bc4
    2364:	0001664c 	.word	0x0001664c

00002368 <set_le_scan_enable>:
{
    2368:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    236a:	2102      	movs	r1, #2
{
    236c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    236e:	f242 000c 	movw	r0, #8204	; 0x200c
    2372:	f7ff ff27 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2376:	4604      	mov	r4, r0
    2378:	b330      	cbz	r0, 23c8 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    237a:	2102      	movs	r1, #2
    237c:	3008      	adds	r0, #8
    237e:	f011 fd9b 	bl	13eb8 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2382:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2384:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2386:	d116      	bne.n	23b6 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    2388:	210b      	movs	r1, #11
    238a:	4811      	ldr	r0, [pc, #68]	; (23d0 <set_le_scan_enable+0x68>)
    238c:	f7ff ff0c 	bl	21a8 <atomic_test_bit>
    2390:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    2392:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2394:	4621      	mov	r1, r4
    2396:	2200      	movs	r2, #0
    2398:	f242 000c 	movw	r0, #8204	; 0x200c
    239c:	f7ff ff70 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    23a0:	4604      	mov	r4, r0
    23a2:	b930      	cbnz	r0, 23b2 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    23a4:	2d01      	cmp	r5, #1
    23a6:	d109      	bne.n	23bc <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    23a8:	f44f 7180 	mov.w	r1, #256	; 0x100
    23ac:	4808      	ldr	r0, [pc, #32]	; (23d0 <set_le_scan_enable+0x68>)
    23ae:	f7ff fe54 	bl	205a <atomic_or>
}
    23b2:	4620      	mov	r0, r4
    23b4:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    23b6:	2300      	movs	r3, #0
    23b8:	7043      	strb	r3, [r0, #1]
    23ba:	e7ea      	b.n	2392 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    23bc:	f46f 7180 	mvn.w	r1, #256	; 0x100
    23c0:	4803      	ldr	r0, [pc, #12]	; (23d0 <set_le_scan_enable+0x68>)
    23c2:	f7ff fe5b 	bl	207c <atomic_and>
    23c6:	e7f4      	b.n	23b2 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    23c8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    23cc:	e7f1      	b.n	23b2 <set_le_scan_enable+0x4a>
    23ce:	bf00      	nop
    23d0:	20003b70 	.word	0x20003b70

000023d4 <set_random_address>:
{
    23d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    23d6:	4605      	mov	r5, r0
    23d8:	f012 fdc4 	bl	14f64 <_impl_k_current_get>
    23dc:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    23de:	4628      	mov	r0, r5
    23e0:	f7ff fc92 	bl	1d08 <bt_addr_str>
    23e4:	4b1a      	ldr	r3, [pc, #104]	; (2450 <set_random_address+0x7c>)
	return memcmp(a, b, sizeof(*a));
    23e6:	4e1b      	ldr	r6, [pc, #108]	; (2454 <set_random_address+0x80>)
    23e8:	9303      	str	r3, [sp, #12]
    23ea:	e88d 0018 	stmia.w	sp, {r3, r4}
    23ee:	9002      	str	r0, [sp, #8]
    23f0:	4b19      	ldr	r3, [pc, #100]	; (2458 <set_random_address+0x84>)
    23f2:	4a1a      	ldr	r2, [pc, #104]	; (245c <set_random_address+0x88>)
    23f4:	491a      	ldr	r1, [pc, #104]	; (2460 <set_random_address+0x8c>)
    23f6:	481b      	ldr	r0, [pc, #108]	; (2464 <set_random_address+0x90>)
    23f8:	f7fe fdc8 	bl	f8c <printk>
    23fc:	2206      	movs	r2, #6
    23fe:	f106 0108 	add.w	r1, r6, #8
    2402:	4628      	mov	r0, r5
    2404:	f7ff fbe5 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2408:	4604      	mov	r4, r0
    240a:	b1d8      	cbz	r0, 2444 <set_random_address+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    240c:	2106      	movs	r1, #6
    240e:	f242 0005 	movw	r0, #8197	; 0x2005
    2412:	f7ff fed7 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2416:	4604      	mov	r4, r0
    2418:	b1b8      	cbz	r0, 244a <set_random_address+0x76>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    241a:	2206      	movs	r2, #6
    241c:	4629      	mov	r1, r5
    241e:	3008      	adds	r0, #8
    2420:	f011 fd50 	bl	13ec4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2424:	4621      	mov	r1, r4
    2426:	2200      	movs	r2, #0
    2428:	f242 0005 	movw	r0, #8197	; 0x2005
    242c:	f7ff ff28 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2430:	4604      	mov	r4, r0
    2432:	b938      	cbnz	r0, 2444 <set_random_address+0x70>
	memcpy(dst, src, sizeof(*dst));
    2434:	2206      	movs	r2, #6
    2436:	4629      	mov	r1, r5
    2438:	f106 0008 	add.w	r0, r6, #8
    243c:	f7ff fbde 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2440:	2301      	movs	r3, #1
    2442:	71f3      	strb	r3, [r6, #7]
}
    2444:	4620      	mov	r0, r4
    2446:	b004      	add	sp, #16
    2448:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    244a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    244e:	e7f9      	b.n	2444 <set_random_address+0x70>
    2450:	00015af1 	.word	0x00015af1
    2454:	20003b00 	.word	0x20003b00
    2458:	0001612f 	.word	0x0001612f
    245c:	00016059 	.word	0x00016059
    2460:	00016060 	.word	0x00016060
    2464:	00017423 	.word	0x00017423

00002468 <set_advertise_enable>:
{
    2468:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    246a:	2101      	movs	r1, #1
{
    246c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    246e:	f242 000a 	movw	r0, #8202	; 0x200a
    2472:	f7ff fea7 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2476:	4604      	mov	r4, r0
    2478:	b1d8      	cbz	r0, 24b2 <set_advertise_enable+0x4a>
    247a:	3008      	adds	r0, #8
	if (enable) {
    247c:	b18d      	cbz	r5, 24a2 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    247e:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2480:	f011 fd29 	bl	13ed6 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2484:	4621      	mov	r1, r4
    2486:	2200      	movs	r2, #0
    2488:	f242 000a 	movw	r0, #8202	; 0x200a
    248c:	f7ff fef8 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2490:	4604      	mov	r4, r0
    2492:	b920      	cbnz	r0, 249e <set_advertise_enable+0x36>
	if (enable) {
    2494:	b13d      	cbz	r5, 24a6 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2496:	2140      	movs	r1, #64	; 0x40
    2498:	4807      	ldr	r0, [pc, #28]	; (24b8 <set_advertise_enable+0x50>)
    249a:	f7ff fdde 	bl	205a <atomic_or>
}
    249e:	4620      	mov	r0, r4
    24a0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    24a2:	4629      	mov	r1, r5
    24a4:	e7ec      	b.n	2480 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    24a6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    24aa:	4803      	ldr	r0, [pc, #12]	; (24b8 <set_advertise_enable+0x50>)
    24ac:	f7ff fde6 	bl	207c <atomic_and>
    24b0:	e7f5      	b.n	249e <set_advertise_enable+0x36>
		return -ENOBUFS;
    24b2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24b6:	e7f2      	b.n	249e <set_advertise_enable+0x36>
    24b8:	20003b70 	.word	0x20003b70

000024bc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    24bc:	8802      	ldrh	r2, [r0, #0]
    24be:	8843      	ldrh	r3, [r0, #2]
    24c0:	429a      	cmp	r2, r3
{
    24c2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    24c4:	d818      	bhi.n	24f8 <bt_le_conn_params_valid+0x3c>
    24c6:	2a05      	cmp	r2, #5
    24c8:	d916      	bls.n	24f8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    24ca:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    24ce:	d813      	bhi.n	24f8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    24d0:	8884      	ldrh	r4, [r0, #4]
    24d2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    24d6:	d20f      	bcs.n	24f8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    24d8:	88c1      	ldrh	r1, [r0, #6]
    24da:	f1a1 020a 	sub.w	r2, r1, #10
    24de:	b292      	uxth	r2, r2
    24e0:	f640 4076 	movw	r0, #3190	; 0xc76
    24e4:	4282      	cmp	r2, r0
    24e6:	d807      	bhi.n	24f8 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    24e8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    24ec:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    24f0:	bfb4      	ite	lt
    24f2:	2001      	movlt	r0, #1
    24f4:	2000      	movge	r0, #0
    24f6:	bd10      	pop	{r4, pc}
		return false;
    24f8:	2000      	movs	r0, #0
}
    24fa:	bd10      	pop	{r4, pc}

000024fc <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    24fc:	2301      	movs	r3, #1
{
    24fe:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2500:	2106      	movs	r1, #6
{
    2502:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2504:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2508:	f006 fa84 	bl	8a14 <bt_rand>
	if (err) {
    250c:	b918      	cbnz	r0, 2516 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    250e:	79a3      	ldrb	r3, [r4, #6]
    2510:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2514:	71a3      	strb	r3, [r4, #6]
}
    2516:	bd10      	pop	{r4, pc}

00002518 <bt_set_static_addr>:
{
    2518:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    251a:	4c11      	ldr	r4, [pc, #68]	; (2560 <bt_set_static_addr+0x48>)
    251c:	7823      	ldrb	r3, [r4, #0]
    251e:	2b01      	cmp	r3, #1
    2520:	d104      	bne.n	252c <bt_set_static_addr+0x14>
    2522:	79a3      	ldrb	r3, [r4, #6]
    2524:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2528:	2bc0      	cmp	r3, #192	; 0xc0
    252a:	d00d      	beq.n	2548 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    252c:	4b0d      	ldr	r3, [pc, #52]	; (2564 <bt_set_static_addr+0x4c>)
    252e:	9301      	str	r3, [sp, #4]
    2530:	9300      	str	r3, [sp, #0]
    2532:	4a0d      	ldr	r2, [pc, #52]	; (2568 <bt_set_static_addr+0x50>)
    2534:	4b0d      	ldr	r3, [pc, #52]	; (256c <bt_set_static_addr+0x54>)
    2536:	490e      	ldr	r1, [pc, #56]	; (2570 <bt_set_static_addr+0x58>)
    2538:	480e      	ldr	r0, [pc, #56]	; (2574 <bt_set_static_addr+0x5c>)
    253a:	f7fe fd27 	bl	f8c <printk>
    253e:	f06f 0515 	mvn.w	r5, #21
}
    2542:	4628      	mov	r0, r5
    2544:	b003      	add	sp, #12
    2546:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    2548:	1c60      	adds	r0, r4, #1
    254a:	f7ff ff43 	bl	23d4 <set_random_address>
	if (err) {
    254e:	4605      	mov	r5, r0
    2550:	2800      	cmp	r0, #0
    2552:	d1f6      	bne.n	2542 <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2554:	2104      	movs	r1, #4
    2556:	f104 0070 	add.w	r0, r4, #112	; 0x70
    255a:	f7ff fd7e 	bl	205a <atomic_or>
	return 0;
    255e:	e7f0      	b.n	2542 <bt_set_static_addr+0x2a>
    2560:	20003b00 	.word	0x20003b00
    2564:	00015af1 	.word	0x00015af1
    2568:	00016fae 	.word	0x00016fae
    256c:	000163b7 	.word	0x000163b7
    2570:	00016060 	.word	0x00016060
    2574:	00016fb5 	.word	0x00016fb5

00002578 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    2578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    257c:	4d1d      	ldr	r5, [pc, #116]	; (25f4 <bt_dev_show_info+0x7c>)
    257e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2610 <bt_dev_show_info+0x98>
    2582:	4f1d      	ldr	r7, [pc, #116]	; (25f8 <bt_dev_show_info+0x80>)
    2584:	4e1d      	ldr	r6, [pc, #116]	; (25fc <bt_dev_show_info+0x84>)
    2586:	4c1e      	ldr	r4, [pc, #120]	; (2600 <bt_dev_show_info+0x88>)
{
    2588:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    258a:	4628      	mov	r0, r5
    258c:	f7ff fbe2 	bl	1d54 <bt_addr_le_str>
    2590:	4643      	mov	r3, r8
    2592:	463a      	mov	r2, r7
    2594:	4631      	mov	r1, r6
    2596:	9001      	str	r0, [sp, #4]
    2598:	9402      	str	r4, [sp, #8]
    259a:	9400      	str	r4, [sp, #0]
    259c:	4819      	ldr	r0, [pc, #100]	; (2604 <bt_dev_show_info+0x8c>)
    259e:	f7fe fcf5 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    25a2:	f895 900e 	ldrb.w	r9, [r5, #14]
    25a6:	4648      	mov	r0, r9
    25a8:	f7ff fd38 	bl	201c <ver_str>
    25ac:	8aab      	ldrh	r3, [r5, #20]
    25ae:	9304      	str	r3, [sp, #16]
    25b0:	8a2b      	ldrh	r3, [r5, #16]
    25b2:	9303      	str	r3, [sp, #12]
    25b4:	463a      	mov	r2, r7
    25b6:	4643      	mov	r3, r8
    25b8:	4631      	mov	r1, r6
    25ba:	f8cd 9008 	str.w	r9, [sp, #8]
    25be:	9001      	str	r0, [sp, #4]
    25c0:	9405      	str	r4, [sp, #20]
    25c2:	9400      	str	r4, [sp, #0]
    25c4:	4810      	ldr	r0, [pc, #64]	; (2608 <bt_dev_show_info+0x90>)
    25c6:	f7fe fce1 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    25ca:	f895 900f 	ldrb.w	r9, [r5, #15]
    25ce:	4648      	mov	r0, r9
    25d0:	f7ff fd24 	bl	201c <ver_str>
    25d4:	8a6b      	ldrh	r3, [r5, #18]
    25d6:	9303      	str	r3, [sp, #12]
    25d8:	9001      	str	r0, [sp, #4]
    25da:	9404      	str	r4, [sp, #16]
    25dc:	f8cd 9008 	str.w	r9, [sp, #8]
    25e0:	9400      	str	r4, [sp, #0]
    25e2:	4643      	mov	r3, r8
    25e4:	463a      	mov	r2, r7
    25e6:	4631      	mov	r1, r6
    25e8:	4808      	ldr	r0, [pc, #32]	; (260c <bt_dev_show_info+0x94>)
    25ea:	f7fe fccf 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    25ee:	b007      	add	sp, #28
    25f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25f4:	20003b00 	.word	0x20003b00
    25f8:	00016475 	.word	0x00016475
    25fc:	00016060 	.word	0x00016060
    2600:	00015af1 	.word	0x00015af1
    2604:	0001647c 	.word	0x0001647c
    2608:	00016499 	.word	0x00016499
    260c:	000164e7 	.word	0x000164e7
    2610:	000163d8 	.word	0x000163d8

00002614 <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2614:	b510      	push	{r4, lr}
    2616:	4604      	mov	r4, r0
    2618:	b086      	sub	sp, #24
    261a:	f012 fca3 	bl	14f64 <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    261e:	7d22      	ldrb	r2, [r4, #20]
    2620:	4b0b      	ldr	r3, [pc, #44]	; (2650 <bt_send+0x3c>)
    2622:	9204      	str	r2, [sp, #16]
    2624:	89a2      	ldrh	r2, [r4, #12]
    2626:	9305      	str	r3, [sp, #20]
    2628:	9203      	str	r2, [sp, #12]
    262a:	9001      	str	r0, [sp, #4]
    262c:	9300      	str	r3, [sp, #0]
    262e:	9402      	str	r4, [sp, #8]
    2630:	4b08      	ldr	r3, [pc, #32]	; (2654 <bt_send+0x40>)
    2632:	4a09      	ldr	r2, [pc, #36]	; (2658 <bt_send+0x44>)
    2634:	4909      	ldr	r1, [pc, #36]	; (265c <bt_send+0x48>)
    2636:	480a      	ldr	r0, [pc, #40]	; (2660 <bt_send+0x4c>)
    2638:	f7fe fca8 	bl	f8c <printk>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    263c:	4b09      	ldr	r3, [pc, #36]	; (2664 <bt_send+0x50>)
    263e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2642:	691b      	ldr	r3, [r3, #16]
    2644:	4620      	mov	r0, r4
}
    2646:	b006      	add	sp, #24
    2648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    264c:	4718      	bx	r3
    264e:	bf00      	nop
    2650:	00015af1 	.word	0x00015af1
    2654:	000163fe 	.word	0x000163fe
    2658:	00016059 	.word	0x00016059
    265c:	00016060 	.word	0x00016060
    2660:	00016f83 	.word	0x00016f83
    2664:	20003b00 	.word	0x20003b00

00002668 <bt_hci_cmd_send>:
{
    2668:	b570      	push	{r4, r5, r6, lr}
    266a:	4605      	mov	r5, r0
    266c:	b086      	sub	sp, #24
	if (!buf) {
    266e:	460c      	mov	r4, r1
    2670:	b921      	cbnz	r1, 267c <bt_hci_cmd_send+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    2672:	f7ff fda7 	bl	21c4 <bt_hci_cmd_create>
		if (!buf) {
    2676:	4604      	mov	r4, r0
    2678:	2800      	cmp	r0, #0
    267a:	d02c      	beq.n	26d6 <bt_hci_cmd_send+0x6e>
    267c:	f012 fc72 	bl	14f64 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);
    2680:	4e16      	ldr	r6, [pc, #88]	; (26dc <bt_hci_cmd_send+0x74>)
    2682:	9604      	str	r6, [sp, #16]
    2684:	89a3      	ldrh	r3, [r4, #12]
    2686:	9303      	str	r3, [sp, #12]
    2688:	9001      	str	r0, [sp, #4]
    268a:	4b15      	ldr	r3, [pc, #84]	; (26e0 <bt_hci_cmd_send+0x78>)
    268c:	9502      	str	r5, [sp, #8]
    268e:	9600      	str	r6, [sp, #0]
    2690:	4a14      	ldr	r2, [pc, #80]	; (26e4 <bt_hci_cmd_send+0x7c>)
    2692:	4915      	ldr	r1, [pc, #84]	; (26e8 <bt_hci_cmd_send+0x80>)
    2694:	4815      	ldr	r0, [pc, #84]	; (26ec <bt_hci_cmd_send+0x84>)
    2696:	f7fe fc79 	bl	f8c <printk>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    269a:	f640 4335 	movw	r3, #3125	; 0xc35
    269e:	429d      	cmp	r5, r3
    26a0:	d113      	bne.n	26ca <bt_hci_cmd_send+0x62>
		err = bt_send(buf);
    26a2:	4620      	mov	r0, r4
    26a4:	f7ff ffb6 	bl	2614 <bt_send>
		if (err) {
    26a8:	4605      	mov	r5, r0
    26aa:	b158      	cbz	r0, 26c4 <bt_hci_cmd_send+0x5c>
			BT_ERR("Unable to send to driver (err %d)", err);
    26ac:	9001      	str	r0, [sp, #4]
    26ae:	9602      	str	r6, [sp, #8]
    26b0:	9600      	str	r6, [sp, #0]
    26b2:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <bt_hci_cmd_send+0x78>)
    26b4:	4a0e      	ldr	r2, [pc, #56]	; (26f0 <bt_hci_cmd_send+0x88>)
    26b6:	490c      	ldr	r1, [pc, #48]	; (26e8 <bt_hci_cmd_send+0x80>)
    26b8:	480e      	ldr	r0, [pc, #56]	; (26f4 <bt_hci_cmd_send+0x8c>)
    26ba:	f7fe fc67 	bl	f8c <printk>
			net_buf_unref(buf);
    26be:	4620      	mov	r0, r4
    26c0:	f011 fbc8 	bl	13e54 <net_buf_unref>
}
    26c4:	4628      	mov	r0, r5
    26c6:	b006      	add	sp, #24
    26c8:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    26ca:	4621      	mov	r1, r4
    26cc:	480a      	ldr	r0, [pc, #40]	; (26f8 <bt_hci_cmd_send+0x90>)
    26ce:	f011 fbb4 	bl	13e3a <net_buf_put>
	return 0;
    26d2:	2500      	movs	r5, #0
    26d4:	e7f6      	b.n	26c4 <bt_hci_cmd_send+0x5c>
			return -ENOBUFS;
    26d6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    26da:	e7f3      	b.n	26c4 <bt_hci_cmd_send+0x5c>
    26dc:	00015af1 	.word	0x00015af1
    26e0:	0001610a 	.word	0x0001610a
    26e4:	00016059 	.word	0x00016059
    26e8:	00016060 	.word	0x00016060
    26ec:	000165bf 	.word	0x000165bf
    26f0:	00016fae 	.word	0x00016fae
    26f4:	000165e9 	.word	0x000165e9
    26f8:	20003bc4 	.word	0x20003bc4

000026fc <report_completed_packet>:
{
    26fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26fe:	4605      	mov	r5, r0
    2700:	b085      	sub	sp, #20
	u16_t handle = acl(buf)->handle;
    2702:	8ac6      	ldrh	r6, [r0, #22]
 *
 *  @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    2704:	7980      	ldrb	r0, [r0, #6]
    2706:	f011 fae1 	bl	13ccc <net_buf_pool_get>

	k_lifo_put(&pool->free, buf);
    270a:	4629      	mov	r1, r5
    270c:	f012 f979 	bl	14a02 <k_queue_prepend>
	if (!(bt_dev.supported_commands[10] & 0x20)) {
    2710:	4b2f      	ldr	r3, [pc, #188]	; (27d0 <report_completed_packet+0xd4>)
    2712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    2716:	069b      	lsls	r3, r3, #26
    2718:	d50f      	bpl.n	273a <report_completed_packet+0x3e>
	conn = bt_conn_lookup_id(acl(buf)->id);
    271a:	7d68      	ldrb	r0, [r5, #21]
    271c:	4c2d      	ldr	r4, [pc, #180]	; (27d4 <report_completed_packet+0xd8>)
    271e:	f002 fe8d 	bl	543c <bt_conn_lookup_id>
	if (!conn) {
    2722:	4607      	mov	r7, r0
    2724:	b958      	cbnz	r0, 273e <report_completed_packet+0x42>
		BT_WARN("Unable to look up conn with id 0x%02x", acl(buf)->id);
    2726:	9402      	str	r4, [sp, #8]
    2728:	7d6b      	ldrb	r3, [r5, #21]
    272a:	9301      	str	r3, [sp, #4]
    272c:	9400      	str	r4, [sp, #0]
    272e:	4b2a      	ldr	r3, [pc, #168]	; (27d8 <report_completed_packet+0xdc>)
    2730:	4a2a      	ldr	r2, [pc, #168]	; (27dc <report_completed_packet+0xe0>)
    2732:	492b      	ldr	r1, [pc, #172]	; (27e0 <report_completed_packet+0xe4>)
    2734:	482b      	ldr	r0, [pc, #172]	; (27e4 <report_completed_packet+0xe8>)
    2736:	f7fe fc29 	bl	f8c <printk>
}
    273a:	b005      	add	sp, #20
    273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
    273e:	7a43      	ldrb	r3, [r0, #9]
    2740:	3b03      	subs	r3, #3
    2742:	2b01      	cmp	r3, #1
    2744:	d90d      	bls.n	2762 <report_completed_packet+0x66>
		BT_WARN("Not reporting packet for non-connected conn");
    2746:	9401      	str	r4, [sp, #4]
    2748:	9400      	str	r4, [sp, #0]
    274a:	4b23      	ldr	r3, [pc, #140]	; (27d8 <report_completed_packet+0xdc>)
    274c:	4a23      	ldr	r2, [pc, #140]	; (27dc <report_completed_packet+0xe0>)
    274e:	4924      	ldr	r1, [pc, #144]	; (27e0 <report_completed_packet+0xe4>)
    2750:	4825      	ldr	r0, [pc, #148]	; (27e8 <report_completed_packet+0xec>)
    2752:	f7fe fc1b 	bl	f8c <printk>
		bt_conn_unref(conn);
    2756:	4638      	mov	r0, r7
}
    2758:	b005      	add	sp, #20
    275a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    275e:	f002 ba1d 	b.w	4b9c <bt_conn_unref>
	bt_conn_unref(conn);
    2762:	f002 fa1b 	bl	4b9c <bt_conn_unref>
    2766:	f012 fbfd 	bl	14f64 <_impl_k_current_get>
	BT_DBG("Reporting completed packet for handle %u", handle);
    276a:	4b1b      	ldr	r3, [pc, #108]	; (27d8 <report_completed_packet+0xdc>)
    276c:	9001      	str	r0, [sp, #4]
    276e:	4a1f      	ldr	r2, [pc, #124]	; (27ec <report_completed_packet+0xf0>)
    2770:	491b      	ldr	r1, [pc, #108]	; (27e0 <report_completed_packet+0xe4>)
    2772:	9403      	str	r4, [sp, #12]
    2774:	9602      	str	r6, [sp, #8]
    2776:	9400      	str	r4, [sp, #0]
    2778:	481d      	ldr	r0, [pc, #116]	; (27f0 <report_completed_packet+0xf4>)
    277a:	f7fe fc07 	bl	f8c <printk>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    277e:	2105      	movs	r1, #5
    2780:	f640 4035 	movw	r0, #3125	; 0xc35
    2784:	f7ff fd1e 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2788:	4605      	mov	r5, r0
    278a:	b940      	cbnz	r0, 279e <report_completed_packet+0xa2>
		BT_ERR("Unable to allocate new HCI command");
    278c:	9401      	str	r4, [sp, #4]
    278e:	9400      	str	r4, [sp, #0]
    2790:	4b11      	ldr	r3, [pc, #68]	; (27d8 <report_completed_packet+0xdc>)
    2792:	4a18      	ldr	r2, [pc, #96]	; (27f4 <report_completed_packet+0xf8>)
    2794:	4912      	ldr	r1, [pc, #72]	; (27e0 <report_completed_packet+0xe4>)
    2796:	4818      	ldr	r0, [pc, #96]	; (27f8 <report_completed_packet+0xfc>)
    2798:	f7fe fbf8 	bl	f8c <printk>
		return;
    279c:	e7cd      	b.n	273a <report_completed_packet+0x3e>
	cp = net_buf_add(buf, sizeof(*cp));
    279e:	f100 0708 	add.w	r7, r0, #8
    27a2:	2101      	movs	r1, #1
    27a4:	4638      	mov	r0, r7
    27a6:	f011 fb87 	bl	13eb8 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    27aa:	2401      	movs	r4, #1
    27ac:	7004      	strb	r4, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
    27ae:	2104      	movs	r1, #4
    27b0:	4638      	mov	r0, r7
    27b2:	f011 fb81 	bl	13eb8 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    27b6:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    27b8:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    27ba:	7084      	strb	r4, [r0, #2]
    27bc:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    27be:	4629      	mov	r1, r5
    27c0:	f640 4035 	movw	r0, #3125	; 0xc35
}
    27c4:	b005      	add	sp, #20
    27c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    27ca:	f7ff bf4d 	b.w	2668 <bt_hci_cmd_send>
    27ce:	bf00      	nop
    27d0:	20003b00 	.word	0x20003b00
    27d4:	00015af1 	.word	0x00015af1
    27d8:	000160e0 	.word	0x000160e0
    27dc:	0001702e 	.word	0x0001702e
    27e0:	00016060 	.word	0x00016060
    27e4:	00017340 	.word	0x00017340
    27e8:	00017376 	.word	0x00017376
    27ec:	00016059 	.word	0x00016059
    27f0:	000173b2 	.word	0x000173b2
    27f4:	00016fae 	.word	0x00016fae
    27f8:	000173f0 	.word	0x000173f0

000027fc <start_le_scan>:
{
    27fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    27fe:	460d      	mov	r5, r1
    2800:	4614      	mov	r4, r2
    2802:	4606      	mov	r6, r0
	memset(&set_param, 0, sizeof(set_param));
    2804:	2207      	movs	r2, #7
    2806:	2100      	movs	r1, #0
    2808:	4668      	mov	r0, sp
    280a:	f7ff fa23 	bl	1c54 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    280e:	f8ad 5001 	strh.w	r5, [sp, #1]
		set_param.addr_type =  bt_dev.id_addr.type;
    2812:	4d1b      	ldr	r5, [pc, #108]	; (2880 <start_le_scan+0x84>)
	set_param.window = sys_cpu_to_le16(window);
    2814:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.filter_policy = 0x00;
    2818:	2300      	movs	r3, #0
    281a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    281e:	2107      	movs	r1, #7
		set_param.addr_type =  bt_dev.id_addr.type;
    2820:	782b      	ldrb	r3, [r5, #0]
	set_param.scan_type = scan_type;
    2822:	f88d 6000 	strb.w	r6, [sp]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2826:	f242 000b 	movw	r0, #8203	; 0x200b
		set_param.addr_type =  bt_dev.id_addr.type;
    282a:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    282e:	f7ff fcc9 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2832:	4604      	mov	r4, r0
    2834:	b300      	cbz	r0, 2878 <start_le_scan+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2836:	2207      	movs	r2, #7
    2838:	4669      	mov	r1, sp
    283a:	3008      	adds	r0, #8
    283c:	f011 fb42 	bl	13ec4 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2840:	4621      	mov	r1, r4
    2842:	f242 000b 	movw	r0, #8203	; 0x200b
    2846:	f7ff ff0f 	bl	2668 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    284a:	2001      	movs	r0, #1
    284c:	f7ff fd8c 	bl	2368 <set_le_scan_enable>
	if (err) {
    2850:	4604      	mov	r4, r0
    2852:	b938      	cbnz	r0, 2864 <start_le_scan+0x68>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2854:	2e01      	cmp	r6, #1
    2856:	d108      	bne.n	286a <start_le_scan+0x6e>
    2858:	f44f 6180 	mov.w	r1, #1024	; 0x400
    285c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2860:	f7ff fbfb 	bl	205a <atomic_or>
}
    2864:	4620      	mov	r0, r4
    2866:	b002      	add	sp, #8
    2868:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    286a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    286e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2872:	f7ff fc03 	bl	207c <atomic_and>
    2876:	e7f5      	b.n	2864 <start_le_scan+0x68>
		return -ENOBUFS;
    2878:	f06f 0436 	mvn.w	r4, #54	; 0x36
    287c:	e7f2      	b.n	2864 <start_le_scan+0x68>
    287e:	bf00      	nop
    2880:	20003b00 	.word	0x20003b00

00002884 <bt_le_scan_update>:
{
    2884:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2886:	2109      	movs	r1, #9
{
    2888:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    288a:	4816      	ldr	r0, [pc, #88]	; (28e4 <bt_le_scan_update+0x60>)
    288c:	f7ff fc8c 	bl	21a8 <atomic_test_bit>
    2890:	4602      	mov	r2, r0
    2892:	b108      	cbz	r0, 2898 <bt_le_scan_update+0x14>
		return 0;
    2894:	2000      	movs	r0, #0
    2896:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2898:	2108      	movs	r1, #8
    289a:	4812      	ldr	r0, [pc, #72]	; (28e4 <bt_le_scan_update+0x60>)
    289c:	f7ff fc84 	bl	21a8 <atomic_test_bit>
    28a0:	b9d0      	cbnz	r0, 28d8 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    28a2:	2101      	movs	r1, #1
    28a4:	2000      	movs	r0, #0
    28a6:	f002 f95b 	bl	4b60 <bt_conn_lookup_state_le>
		if (!conn) {
    28aa:	4604      	mov	r4, r0
    28ac:	2800      	cmp	r0, #0
    28ae:	d0f1      	beq.n	2894 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    28b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    28b4:	480b      	ldr	r0, [pc, #44]	; (28e4 <bt_le_scan_update+0x60>)
    28b6:	f7ff fbd0 	bl	205a <atomic_or>
		bt_conn_unref(conn);
    28ba:	4620      	mov	r0, r4
    28bc:	f002 f96e 	bl	4b9c <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    28c0:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    28c2:	bf15      	itete	ne
    28c4:	2230      	movne	r2, #48	; 0x30
    28c6:	2212      	moveq	r2, #18
    28c8:	2160      	movne	r1, #96	; 0x60
    28ca:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    28ce:	2000      	movs	r0, #0
}
    28d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    28d4:	f7ff bf92 	b.w	27fc <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    28d8:	4610      	mov	r0, r2
    28da:	f7ff fd45 	bl	2368 <set_le_scan_enable>
		if (err) {
    28de:	2800      	cmp	r0, #0
    28e0:	d0df      	beq.n	28a2 <bt_le_scan_update+0x1e>
    28e2:	bd38      	pop	{r3, r4, r5, pc}
    28e4:	20003b70 	.word	0x20003b70

000028e8 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    28e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    28ec:	4e94      	ldr	r6, [pc, #592]	; (2b40 <bt_init+0x258>)
    28ee:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    28f2:	6899      	ldr	r1, [r3, #8]
    28f4:	f011 0101 	ands.w	r1, r1, #1
{
    28f8:	b08f      	sub	sp, #60	; 0x3c
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    28fa:	d131      	bne.n	2960 <bt_init+0x78>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    28fc:	aa0c      	add	r2, sp, #48	; 0x30
    28fe:	f640 4003 	movw	r0, #3075	; 0xc03
    2902:	f7ff fcbd 	bl	2280 <bt_hci_cmd_send_sync>
		if (err) {
    2906:	4604      	mov	r4, r0
    2908:	2800      	cmp	r0, #0
    290a:	f040 8114 	bne.w	2b36 <bt_init+0x24e>
	u8_t status = buf->data[0];
    290e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2910:	689b      	ldr	r3, [r3, #8]
    2912:	781c      	ldrb	r4, [r3, #0]
    2914:	f012 fb26 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u", status);
    2918:	4b8a      	ldr	r3, [pc, #552]	; (2b44 <bt_init+0x25c>)
    291a:	9303      	str	r3, [sp, #12]
    291c:	9001      	str	r0, [sp, #4]
    291e:	9300      	str	r3, [sp, #0]
    2920:	9402      	str	r4, [sp, #8]
    2922:	4b89      	ldr	r3, [pc, #548]	; (2b48 <bt_init+0x260>)
    2924:	4a89      	ldr	r2, [pc, #548]	; (2b4c <bt_init+0x264>)
    2926:	498a      	ldr	r1, [pc, #552]	; (2b50 <bt_init+0x268>)
    2928:	488a      	ldr	r0, [pc, #552]	; (2b54 <bt_init+0x26c>)
    292a:	f7fe fb2f 	bl	f8c <printk>
	if (status) {
    292e:	b9a4      	cbnz	r4, 295a <bt_init+0x72>
	scan_dev_found_cb = NULL;
    2930:	4b89      	ldr	r3, [pc, #548]	; (2b58 <bt_init+0x270>)
    2932:	601c      	str	r4, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2934:	4633      	mov	r3, r6
    2936:	f3bf 8f5b 	dmb	ish
    293a:	f853 2f70 	ldr.w	r2, [r3, #112]!
    293e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2942:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2946:	f3bf 8f5b 	dmb	ish
    294a:	e853 1f00 	ldrex	r1, [r3]
    294e:	e843 2000 	strex	r0, r2, [r3]
    2952:	2800      	cmp	r0, #0
    2954:	d1f9      	bne.n	294a <bt_init+0x62>
    2956:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    295a:	980c      	ldr	r0, [sp, #48]	; 0x30
    295c:	f011 fa7a 	bl	13e54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2960:	aa0c      	add	r2, sp, #48	; 0x30
    2962:	2100      	movs	r1, #0
    2964:	f241 0003 	movw	r0, #4099	; 0x1003
    2968:	f7ff fc8a 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    296c:	4604      	mov	r4, r0
    296e:	2800      	cmp	r0, #0
    2970:	f040 80e1 	bne.w	2b36 <bt_init+0x24e>
    2974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2976:	4d73      	ldr	r5, [pc, #460]	; (2b44 <bt_init+0x25c>)
    2978:	689f      	ldr	r7, [r3, #8]
    297a:	f012 faf3 	bl	14f64 <_impl_k_current_get>
    297e:	9503      	str	r5, [sp, #12]
    2980:	f817 3b01 	ldrb.w	r3, [r7], #1
    2984:	9302      	str	r3, [sp, #8]
    2986:	9001      	str	r0, [sp, #4]
    2988:	4b74      	ldr	r3, [pc, #464]	; (2b5c <bt_init+0x274>)
    298a:	4a70      	ldr	r2, [pc, #448]	; (2b4c <bt_init+0x264>)
    298c:	4970      	ldr	r1, [pc, #448]	; (2b50 <bt_init+0x268>)
    298e:	9500      	str	r5, [sp, #0]
    2990:	4870      	ldr	r0, [pc, #448]	; (2b54 <bt_init+0x26c>)
    2992:	f7fe fafb 	bl	f8c <printk>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2996:	2208      	movs	r2, #8
    2998:	4639      	mov	r1, r7
    299a:	4871      	ldr	r0, [pc, #452]	; (2b60 <bt_init+0x278>)
    299c:	f7ff f92e 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    29a0:	980c      	ldr	r0, [sp, #48]	; 0x30
    29a2:	f011 fa57 	bl	13e54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    29a6:	4621      	mov	r1, r4
    29a8:	aa0c      	add	r2, sp, #48	; 0x30
    29aa:	f241 0001 	movw	r0, #4097	; 0x1001
    29ae:	f7ff fc67 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    29b2:	4604      	mov	r4, r0
    29b4:	2800      	cmp	r0, #0
    29b6:	f040 80be 	bne.w	2b36 <bt_init+0x24e>
    29ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    29bc:	689c      	ldr	r4, [r3, #8]
    29be:	f012 fad1 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    29c2:	9503      	str	r5, [sp, #12]
    29c4:	7823      	ldrb	r3, [r4, #0]
    29c6:	4962      	ldr	r1, [pc, #392]	; (2b50 <bt_init+0x268>)
    29c8:	9302      	str	r3, [sp, #8]
    29ca:	9001      	str	r0, [sp, #4]
    29cc:	4b65      	ldr	r3, [pc, #404]	; (2b64 <bt_init+0x27c>)
    29ce:	4a5f      	ldr	r2, [pc, #380]	; (2b4c <bt_init+0x264>)
    29d0:	9500      	str	r5, [sp, #0]
    29d2:	4860      	ldr	r0, [pc, #384]	; (2b54 <bt_init+0x26c>)
    29d4:	f7fe fada 	bl	f8c <printk>
	bt_dev.hci_version = rp->hci_version;
    29d8:	7863      	ldrb	r3, [r4, #1]
    29da:	73b3      	strb	r3, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    29dc:	78e2      	ldrb	r2, [r4, #3]
    29de:	78a3      	ldrb	r3, [r4, #2]
	net_buf_unref(rsp);
    29e0:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    29e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    29e6:	8233      	strh	r3, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    29e8:	7923      	ldrb	r3, [r4, #4]
    29ea:	73f3      	strb	r3, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    29ec:	7a22      	ldrb	r2, [r4, #8]
    29ee:	79e3      	ldrb	r3, [r4, #7]
    29f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    29f4:	8273      	strh	r3, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    29f6:	79a2      	ldrb	r2, [r4, #6]
    29f8:	7963      	ldrb	r3, [r4, #5]
    29fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    29fe:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    2a00:	f011 fa28 	bl	13e54 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2a04:	2103      	movs	r1, #3
    2a06:	4858      	ldr	r0, [pc, #352]	; (2b68 <bt_init+0x280>)
    2a08:	f7ff fbce 	bl	21a8 <atomic_test_bit>
    2a0c:	4601      	mov	r1, r0
    2a0e:	bb08      	cbnz	r0, 2a54 <bt_init+0x16c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2a10:	aa0c      	add	r2, sp, #48	; 0x30
    2a12:	f241 0009 	movw	r0, #4105	; 0x1009
    2a16:	f7ff fc33 	bl	2280 <bt_hci_cmd_send_sync>
		if (err) {
    2a1a:	4604      	mov	r4, r0
    2a1c:	2800      	cmp	r0, #0
    2a1e:	f040 808a 	bne.w	2b36 <bt_init+0x24e>
    2a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a24:	689f      	ldr	r7, [r3, #8]
    2a26:	f012 fa9d 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a2a:	9503      	str	r5, [sp, #12]
    2a2c:	f817 3b01 	ldrb.w	r3, [r7], #1
    2a30:	9302      	str	r3, [sp, #8]
    2a32:	9001      	str	r0, [sp, #4]
    2a34:	4b4d      	ldr	r3, [pc, #308]	; (2b6c <bt_init+0x284>)
    2a36:	4a45      	ldr	r2, [pc, #276]	; (2b4c <bt_init+0x264>)
    2a38:	4945      	ldr	r1, [pc, #276]	; (2b50 <bt_init+0x268>)
    2a3a:	9500      	str	r5, [sp, #0]
    2a3c:	4845      	ldr	r0, [pc, #276]	; (2b54 <bt_init+0x26c>)
    2a3e:	f7fe faa5 	bl	f8c <printk>
    2a42:	2206      	movs	r2, #6
    2a44:	4639      	mov	r1, r7
    2a46:	484a      	ldr	r0, [pc, #296]	; (2b70 <bt_init+0x288>)
    2a48:	f7ff f8d8 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    2a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2a4e:	7034      	strb	r4, [r6, #0]
		net_buf_unref(rsp);
    2a50:	f011 fa00 	bl	13e54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2a54:	aa0c      	add	r2, sp, #48	; 0x30
    2a56:	2100      	movs	r1, #0
    2a58:	f241 0002 	movw	r0, #4098	; 0x1002
    2a5c:	f7ff fc10 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2a60:	4604      	mov	r4, r0
    2a62:	2800      	cmp	r0, #0
    2a64:	d167      	bne.n	2b36 <bt_init+0x24e>
    2a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a68:	689f      	ldr	r7, [r3, #8]
    2a6a:	f012 fa7b 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a6e:	9503      	str	r5, [sp, #12]
    2a70:	f817 3b01 	ldrb.w	r3, [r7], #1
    2a74:	9302      	str	r3, [sp, #8]
    2a76:	9001      	str	r0, [sp, #4]
    2a78:	4b3e      	ldr	r3, [pc, #248]	; (2b74 <bt_init+0x28c>)
    2a7a:	4a34      	ldr	r2, [pc, #208]	; (2b4c <bt_init+0x264>)
    2a7c:	4934      	ldr	r1, [pc, #208]	; (2b50 <bt_init+0x268>)
    2a7e:	9500      	str	r5, [sp, #0]
    2a80:	4834      	ldr	r0, [pc, #208]	; (2b54 <bt_init+0x26c>)
    2a82:	f7fe fa83 	bl	f8c <printk>
	memcpy(bt_dev.supported_commands, rp->commands,
    2a86:	2240      	movs	r2, #64	; 0x40
    2a88:	4639      	mov	r1, r7
    2a8a:	483b      	ldr	r0, [pc, #236]	; (2b78 <bt_init+0x290>)
    2a8c:	f7ff f8b6 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a90:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a92:	f011 f9df 	bl	13e54 <net_buf_unref>
	if (!(bt_dev.supported_commands[10] & 0x20)) {
    2a96:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    2a9a:	0698      	lsls	r0, r3, #26
    2a9c:	d415      	bmi.n	2aca <bt_init+0x1e2>
		BT_WARN("Controller to host flow control not supported");
    2a9e:	9501      	str	r5, [sp, #4]
    2aa0:	9500      	str	r5, [sp, #0]
    2aa2:	4b36      	ldr	r3, [pc, #216]	; (2b7c <bt_init+0x294>)
    2aa4:	4a36      	ldr	r2, [pc, #216]	; (2b80 <bt_init+0x298>)
    2aa6:	492a      	ldr	r1, [pc, #168]	; (2b50 <bt_init+0x268>)
    2aa8:	4836      	ldr	r0, [pc, #216]	; (2b84 <bt_init+0x29c>)
    2aaa:	f7fe fa6f 	bl	f8c <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2aae:	7eb3      	ldrb	r3, [r6, #26]
    2ab0:	065b      	lsls	r3, r3, #25
    2ab2:	d46f      	bmi.n	2b94 <bt_init+0x2ac>
		BT_ERR("Non-LE capable controller detected!");
    2ab4:	9501      	str	r5, [sp, #4]
    2ab6:	9500      	str	r5, [sp, #0]
    2ab8:	4b33      	ldr	r3, [pc, #204]	; (2b88 <bt_init+0x2a0>)
    2aba:	4a34      	ldr	r2, [pc, #208]	; (2b8c <bt_init+0x2a4>)
    2abc:	4924      	ldr	r1, [pc, #144]	; (2b50 <bt_init+0x268>)
    2abe:	4834      	ldr	r0, [pc, #208]	; (2b90 <bt_init+0x2a8>)
    2ac0:	f7fe fa64 	bl	f8c <printk>
		return -ENODEV;
    2ac4:	f06f 0412 	mvn.w	r4, #18
    2ac8:	e035      	b.n	2b36 <bt_init+0x24e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    2aca:	2107      	movs	r1, #7
    2acc:	f640 4033 	movw	r0, #3123	; 0xc33
    2ad0:	f7ff fb78 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2ad4:	4680      	mov	r8, r0
    2ad6:	b910      	cbnz	r0, 2ade <bt_init+0x1f6>
		return -ENOBUFS;
    2ad8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2adc:	e02b      	b.n	2b36 <bt_init+0x24e>
	hbs = net_buf_add(buf, sizeof(*hbs));
    2ade:	2107      	movs	r1, #7
    2ae0:	3008      	adds	r0, #8
    2ae2:	f011 f9e9 	bl	13eb8 <net_buf_simple_add>
	memset(hbs, 0, sizeof(*hbs));
    2ae6:	4621      	mov	r1, r4
	hbs = net_buf_add(buf, sizeof(*hbs));
    2ae8:	4607      	mov	r7, r0
	memset(hbs, 0, sizeof(*hbs));
    2aea:	2207      	movs	r2, #7
    2aec:	f7ff f8b2 	bl	1c54 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    2af0:	231b      	movs	r3, #27
    2af2:	703b      	strb	r3, [r7, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    2af4:	2302      	movs	r3, #2
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    2af6:	707c      	strb	r4, [r7, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    2af8:	713c      	strb	r4, [r7, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    2afa:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    2afc:	70fb      	strb	r3, [r7, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    2afe:	4641      	mov	r1, r8
    2b00:	f640 4033 	movw	r0, #3123	; 0xc33
    2b04:	f7ff fbbc 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2b08:	4604      	mov	r4, r0
    2b0a:	b9a0      	cbnz	r0, 2b36 <bt_init+0x24e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    2b0c:	2101      	movs	r1, #1
    2b0e:	f640 4031 	movw	r0, #3121	; 0xc31
    2b12:	f7ff fb57 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2b16:	4607      	mov	r7, r0
    2b18:	2800      	cmp	r0, #0
    2b1a:	d0dd      	beq.n	2ad8 <bt_init+0x1f0>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
    2b1c:	2101      	movs	r1, #1
    2b1e:	3008      	adds	r0, #8
    2b20:	f011 f9d9 	bl	13ed6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    2b24:	4622      	mov	r2, r4
    2b26:	4639      	mov	r1, r7
    2b28:	f640 4031 	movw	r0, #3121	; 0xc31
    2b2c:	f7ff fba8 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2b30:	4604      	mov	r4, r0
    2b32:	2800      	cmp	r0, #0
    2b34:	d0bb      	beq.n	2aae <bt_init+0x1c6>
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    2b36:	4620      	mov	r0, r4
    2b38:	b00f      	add	sp, #60	; 0x3c
    2b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2b3e:	bf00      	nop
    2b40:	20003b00 	.word	0x20003b00
    2b44:	00015af1 	.word	0x00015af1
    2b48:	00016246 	.word	0x00016246
    2b4c:	00016059 	.word	0x00016059
    2b50:	00016060 	.word	0x00016060
    2b54:	000166a0 	.word	0x000166a0
    2b58:	200002d8 	.word	0x200002d8
    2b5c:	00016375 	.word	0x00016375
    2b60:	20003b16 	.word	0x20003b16
    2b64:	000162d6 	.word	0x000162d6
    2b68:	20003b70 	.word	0x20003b70
    2b6c:	000162ee 	.word	0x000162ee
    2b70:	20003b01 	.word	0x20003b01
    2b74:	00016354 	.word	0x00016354
    2b78:	20003b1e 	.word	0x20003b1e
    2b7c:	00016212 	.word	0x00016212
    2b80:	0001702e 	.word	0x0001702e
    2b84:	000166bf 	.word	0x000166bf
    2b88:	000163af 	.word	0x000163af
    2b8c:	00016fae 	.word	0x00016fae
    2b90:	000166fd 	.word	0x000166fd
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2b94:	aa0c      	add	r2, sp, #48	; 0x30
    2b96:	2100      	movs	r1, #0
    2b98:	f242 0003 	movw	r0, #8195	; 0x2003
    2b9c:	f7ff fb70 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2ba0:	4604      	mov	r4, r0
    2ba2:	2800      	cmp	r0, #0
    2ba4:	d1c7      	bne.n	2b36 <bt_init+0x24e>
    2ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ba8:	689f      	ldr	r7, [r3, #8]
    2baa:	f012 f9db 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2bae:	9503      	str	r5, [sp, #12]
    2bb0:	f817 3b01 	ldrb.w	r3, [r7], #1
    2bb4:	9302      	str	r3, [sp, #8]
    2bb6:	9001      	str	r0, [sp, #4]
    2bb8:	4bb3      	ldr	r3, [pc, #716]	; (2e88 <bt_init+0x5a0>)
    2bba:	4ab4      	ldr	r2, [pc, #720]	; (2e8c <bt_init+0x5a4>)
    2bbc:	49b4      	ldr	r1, [pc, #720]	; (2e90 <bt_init+0x5a8>)
    2bbe:	9500      	str	r5, [sp, #0]
    2bc0:	48b4      	ldr	r0, [pc, #720]	; (2e94 <bt_init+0x5ac>)
    2bc2:	f7fe f9e3 	bl	f8c <printk>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2bc6:	2208      	movs	r2, #8
    2bc8:	4639      	mov	r1, r7
    2bca:	48b3      	ldr	r0, [pc, #716]	; (2e98 <bt_init+0x5b0>)
    2bcc:	f7ff f816 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2bd0:	980c      	ldr	r0, [sp, #48]	; 0x30
    2bd2:	f011 f93f 	bl	13e54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2bd6:	4621      	mov	r1, r4
    2bd8:	aa0c      	add	r2, sp, #48	; 0x30
    2bda:	f242 0002 	movw	r0, #8194	; 0x2002
    2bde:	f7ff fb4f 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2be2:	4604      	mov	r4, r0
    2be4:	2800      	cmp	r0, #0
    2be6:	d1a6      	bne.n	2b36 <bt_init+0x24e>
    2be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2bea:	689c      	ldr	r4, [r3, #8]
    2bec:	f012 f9ba 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2bf0:	9503      	str	r5, [sp, #12]
    2bf2:	7823      	ldrb	r3, [r4, #0]
    2bf4:	9302      	str	r3, [sp, #8]
    2bf6:	9001      	str	r0, [sp, #4]
    2bf8:	4ba8      	ldr	r3, [pc, #672]	; (2e9c <bt_init+0x5b4>)
    2bfa:	9500      	str	r5, [sp, #0]
    2bfc:	4aa3      	ldr	r2, [pc, #652]	; (2e8c <bt_init+0x5a4>)
    2bfe:	49a4      	ldr	r1, [pc, #656]	; (2e90 <bt_init+0x5a8>)
    2c00:	48a4      	ldr	r0, [pc, #656]	; (2e94 <bt_init+0x5ac>)
    2c02:	f7fe f9c3 	bl	f8c <printk>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2c06:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2c0a:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2c0e:	b1bb      	cbz	r3, 2c40 <bt_init+0x358>
    2c10:	f012 f9a8 	bl	14f64 <_impl_k_current_get>
	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);
    2c14:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2c18:	9504      	str	r5, [sp, #16]
    2c1a:	9303      	str	r3, [sp, #12]
    2c1c:	78e3      	ldrb	r3, [r4, #3]
    2c1e:	9302      	str	r3, [sp, #8]
    2c20:	9001      	str	r0, [sp, #4]
    2c22:	4a9a      	ldr	r2, [pc, #616]	; (2e8c <bt_init+0x5a4>)
    2c24:	499a      	ldr	r1, [pc, #616]	; (2e90 <bt_init+0x5a8>)
    2c26:	9500      	str	r5, [sp, #0]
    2c28:	4b9c      	ldr	r3, [pc, #624]	; (2e9c <bt_init+0x5b4>)
    2c2a:	489d      	ldr	r0, [pc, #628]	; (2ea0 <bt_init+0x5b8>)
    2c2c:	f7fe f9ae 	bl	f8c <printk>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2c30:	78e2      	ldrb	r2, [r4, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2c32:	489c      	ldr	r0, [pc, #624]	; (2ea4 <bt_init+0x5bc>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2c34:	2a02      	cmp	r2, #2
    2c36:	bf28      	it	cs
    2c38:	2202      	movcs	r2, #2
    2c3a:	4611      	mov	r1, r2
    2c3c:	f012 f998 	bl	14f70 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2c40:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c42:	f011 f907 	bl	13e54 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2c46:	7eb4      	ldrb	r4, [r6, #26]
    2c48:	f014 0420 	ands.w	r4, r4, #32
    2c4c:	f000 8101 	beq.w	2e52 <bt_init+0x56a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2c50:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    2c54:	0719      	lsls	r1, r3, #28
    2c56:	d523      	bpl.n	2ca0 <bt_init+0x3b8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2c58:	aa0c      	add	r2, sp, #48	; 0x30
    2c5a:	2100      	movs	r1, #0
    2c5c:	f242 001c 	movw	r0, #8220	; 0x201c
    2c60:	f7ff fb0e 	bl	2280 <bt_hci_cmd_send_sync>
		if (err) {
    2c64:	4604      	mov	r4, r0
    2c66:	2800      	cmp	r0, #0
    2c68:	f47f af65 	bne.w	2b36 <bt_init+0x24e>
    2c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c6e:	689c      	ldr	r4, [r3, #8]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2c70:	f012 f978 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2c74:	9503      	str	r5, [sp, #12]
    2c76:	7823      	ldrb	r3, [r4, #0]
    2c78:	9302      	str	r3, [sp, #8]
    2c7a:	9001      	str	r0, [sp, #4]
    2c7c:	4b8a      	ldr	r3, [pc, #552]	; (2ea8 <bt_init+0x5c0>)
    2c7e:	4a83      	ldr	r2, [pc, #524]	; (2e8c <bt_init+0x5a4>)
    2c80:	9500      	str	r5, [sp, #0]
    2c82:	4983      	ldr	r1, [pc, #524]	; (2e90 <bt_init+0x5a8>)
    2c84:	4883      	ldr	r0, [pc, #524]	; (2e94 <bt_init+0x5ac>)
    2c86:	f7fe f981 	bl	f8c <printk>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2c8a:	4623      	mov	r3, r4
		net_buf_unref(rsp);
    2c8c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c8e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2c92:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2c94:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    2c98:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    2c9c:	f011 f8da 	bl	13e54 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2ca0:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    2ca4:	069a      	lsls	r2, r3, #26
    2ca6:	f100 8115 	bmi.w	2ed4 <bt_init+0x5ec>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2caa:	2108      	movs	r1, #8
    2cac:	f242 0001 	movw	r0, #8193	; 0x2001
    2cb0:	f7ff fa88 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2cb4:	4604      	mov	r4, r0
    2cb6:	2800      	cmp	r0, #0
    2cb8:	f43f af0e 	beq.w	2ad8 <bt_init+0x1f0>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2cbc:	2108      	movs	r1, #8
    2cbe:	4408      	add	r0, r1
    2cc0:	f011 f8fa 	bl	13eb8 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2cc4:	f896 1078 	ldrb.w	r1, [r6, #120]	; 0x78
    2cc8:	078b      	lsls	r3, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2cca:	bf4c      	ite	mi
    2ccc:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2cce:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2cd0:	068f      	lsls	r7, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2cd2:	f896 1079 	ldrb.w	r1, [r6, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2cd6:	bf48      	it	mi
    2cd8:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2cdc:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2ce0:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    2ce4:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2ce8:	bf18      	it	ne
    2cea:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2cee:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2cf0:	bf08      	it	eq
    2cf2:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2cf6:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2cf8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2cfc:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2cfe:	2200      	movs	r2, #0
    2d00:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2d02:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2d04:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2d06:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2d08:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2d0a:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2d0c:	4621      	mov	r1, r4
    2d0e:	f242 0001 	movw	r0, #8193	; 0x2001
    2d12:	f7ff fab5 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2d16:	4604      	mov	r4, r0
    2d18:	2800      	cmp	r0, #0
    2d1a:	f47f af0c 	bne.w	2b36 <bt_init+0x24e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2d1e:	7eb3      	ldrb	r3, [r6, #26]
    2d20:	0699      	lsls	r1, r3, #26
    2d22:	d43f      	bmi.n	2da4 <bt_init+0x4bc>
	if (bt_dev.le.mtu) {
    2d24:	f8b6 1088 	ldrh.w	r1, [r6, #136]	; 0x88
    2d28:	2900      	cmp	r1, #0
    2d2a:	d13b      	bne.n	2da4 <bt_init+0x4bc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2d2c:	aa0c      	add	r2, sp, #48	; 0x30
    2d2e:	f241 0005 	movw	r0, #4101	; 0x1005
    2d32:	f7ff faa5 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2d36:	4604      	mov	r4, r0
    2d38:	2800      	cmp	r0, #0
    2d3a:	f47f aefc 	bne.w	2b36 <bt_init+0x24e>
    2d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2d40:	689c      	ldr	r4, [r3, #8]
    2d42:	f012 f90f 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2d46:	9503      	str	r5, [sp, #12]
    2d48:	7823      	ldrb	r3, [r4, #0]
    2d4a:	9302      	str	r3, [sp, #8]
    2d4c:	9001      	str	r0, [sp, #4]
    2d4e:	4b57      	ldr	r3, [pc, #348]	; (2eac <bt_init+0x5c4>)
    2d50:	9500      	str	r5, [sp, #0]
    2d52:	4a4e      	ldr	r2, [pc, #312]	; (2e8c <bt_init+0x5a4>)
    2d54:	494e      	ldr	r1, [pc, #312]	; (2e90 <bt_init+0x5a8>)
    2d56:	484f      	ldr	r0, [pc, #316]	; (2e94 <bt_init+0x5ac>)
    2d58:	f7fe f918 	bl	f8c <printk>
	if (bt_dev.le.mtu) {
    2d5c:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2d60:	b9eb      	cbnz	r3, 2d9e <bt_init+0x4b6>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2d62:	78a2      	ldrb	r2, [r4, #2]
    2d64:	7863      	ldrb	r3, [r4, #1]
    2d66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d6a:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2d6e:	88a4      	ldrh	r4, [r4, #4]
    2d70:	f012 f8f8 	bl	14f64 <_impl_k_current_get>
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2d74:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2d78:	9303      	str	r3, [sp, #12]
    2d7a:	9001      	str	r0, [sp, #4]
    2d7c:	4a43      	ldr	r2, [pc, #268]	; (2e8c <bt_init+0x5a4>)
    2d7e:	4944      	ldr	r1, [pc, #272]	; (2e90 <bt_init+0x5a8>)
    2d80:	9504      	str	r5, [sp, #16]
    2d82:	9402      	str	r4, [sp, #8]
    2d84:	9500      	str	r5, [sp, #0]
    2d86:	4b49      	ldr	r3, [pc, #292]	; (2eac <bt_init+0x5c4>)
    2d88:	4849      	ldr	r0, [pc, #292]	; (2eb0 <bt_init+0x5c8>)
    2d8a:	f7fe f8ff 	bl	f8c <printk>
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2d8e:	2c02      	cmp	r4, #2
    2d90:	4622      	mov	r2, r4
    2d92:	bf28      	it	cs
    2d94:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2d96:	4611      	mov	r1, r2
    2d98:	4842      	ldr	r0, [pc, #264]	; (2ea4 <bt_init+0x5bc>)
    2d9a:	f012 f8e9 	bl	14f70 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2d9e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2da0:	f011 f858 	bl	13e54 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2da4:	2108      	movs	r1, #8
    2da6:	f640 4001 	movw	r0, #3073	; 0xc01
    2daa:	f7ff fa0b 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    2dae:	4604      	mov	r4, r0
    2db0:	2800      	cmp	r0, #0
    2db2:	f43f ae91 	beq.w	2ad8 <bt_init+0x1f0>
	ev = net_buf_add(buf, sizeof(*ev));
    2db6:	2108      	movs	r1, #8
    2db8:	4408      	add	r0, r1
    2dba:	f011 f87d 	bl	13eb8 <net_buf_simple_add>
	dst[0] = val;
    2dbe:	2310      	movs	r3, #16
    2dc0:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2dc2:	2388      	movs	r3, #136	; 0x88
    2dc4:	7043      	strb	r3, [r0, #1]
    2dc6:	2302      	movs	r3, #2
	dst[0] = val;
    2dc8:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2dca:	70c3      	strb	r3, [r0, #3]
    2dcc:	2320      	movs	r3, #32
	dst[0] = val;
    2dce:	7082      	strb	r2, [r0, #2]
    2dd0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2dd2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2dd4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2dd6:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2dd8:	4621      	mov	r1, r4
    2dda:	f640 4001 	movw	r0, #3073	; 0xc01
    2dde:	f7ff fa4f 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2de2:	4604      	mov	r4, r0
    2de4:	2800      	cmp	r0, #0
    2de6:	f47f aea6 	bne.w	2b36 <bt_init+0x24e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2dea:	4601      	mov	r1, r0
    2dec:	aa0c      	add	r2, sp, #48	; 0x30
    2dee:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2df2:	f7ff fa45 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2df6:	2800      	cmp	r0, #0
    2df8:	f000 809a 	beq.w	2f30 <bt_init+0x648>
		BT_WARN("Vendor HCI extensions not available");
    2dfc:	4b2d      	ldr	r3, [pc, #180]	; (2eb4 <bt_init+0x5cc>)
    2dfe:	4a2e      	ldr	r2, [pc, #184]	; (2eb8 <bt_init+0x5d0>)
    2e00:	4923      	ldr	r1, [pc, #140]	; (2e90 <bt_init+0x5a8>)
    2e02:	482e      	ldr	r0, [pc, #184]	; (2ebc <bt_init+0x5d4>)
    2e04:	9501      	str	r5, [sp, #4]
    2e06:	9500      	str	r5, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    2e08:	f7fe f8c0 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2e0c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2e0e:	2207      	movs	r2, #7
    2e10:	a90c      	add	r1, sp, #48	; 0x30
    2e12:	482b      	ldr	r0, [pc, #172]	; (2ec0 <bt_init+0x5d8>)
    2e14:	930c      	str	r3, [sp, #48]	; 0x30
    2e16:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2e1a:	f7fe feda 	bl	1bd2 <memcmp>
    2e1e:	2800      	cmp	r0, #0
    2e20:	f040 8100 	bne.w	3024 <bt_init+0x73c>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2e24:	f012 f89e 	bl	14f64 <_impl_k_current_get>
		BT_DBG("No public address. Trying to set static random.");
    2e28:	4b26      	ldr	r3, [pc, #152]	; (2ec4 <bt_init+0x5dc>)
    2e2a:	9001      	str	r0, [sp, #4]
    2e2c:	4a17      	ldr	r2, [pc, #92]	; (2e8c <bt_init+0x5a4>)
    2e2e:	9502      	str	r5, [sp, #8]
    2e30:	9500      	str	r5, [sp, #0]
    2e32:	4917      	ldr	r1, [pc, #92]	; (2e90 <bt_init+0x5a8>)
    2e34:	4824      	ldr	r0, [pc, #144]	; (2ec8 <bt_init+0x5e0>)
    2e36:	f7fe f8a9 	bl	f8c <printk>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2e3a:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    2e3e:	07da      	lsls	r2, r3, #31
    2e40:	f100 8111 	bmi.w	3066 <bt_init+0x77e>
		BT_WARN("Read Static Addresses command not available");
    2e44:	9501      	str	r5, [sp, #4]
    2e46:	9500      	str	r5, [sp, #0]
    2e48:	4b20      	ldr	r3, [pc, #128]	; (2ecc <bt_init+0x5e4>)
    2e4a:	4a1b      	ldr	r2, [pc, #108]	; (2eb8 <bt_init+0x5d0>)
    2e4c:	4910      	ldr	r1, [pc, #64]	; (2e90 <bt_init+0x5a8>)
    2e4e:	4820      	ldr	r0, [pc, #128]	; (2ed0 <bt_init+0x5e8>)
    2e50:	e116      	b.n	3080 <bt_init+0x798>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2e52:	2102      	movs	r1, #2
    2e54:	f640 406d 	movw	r0, #3181	; 0xc6d
    2e58:	f7ff f9b4 	bl	21c4 <bt_hci_cmd_create>
		if (!buf) {
    2e5c:	4607      	mov	r7, r0
    2e5e:	2800      	cmp	r0, #0
    2e60:	f43f ae3a 	beq.w	2ad8 <bt_init+0x1f0>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2e64:	2102      	movs	r1, #2
    2e66:	3008      	adds	r0, #8
    2e68:	f011 f826 	bl	13eb8 <net_buf_simple_add>
		cp_le->le = 0x01;
    2e6c:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2e6e:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2e70:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2e72:	4622      	mov	r2, r4
    2e74:	4639      	mov	r1, r7
    2e76:	f640 406d 	movw	r0, #3181	; 0xc6d
    2e7a:	f7ff fa01 	bl	2280 <bt_hci_cmd_send_sync>
		if (err) {
    2e7e:	4604      	mov	r4, r0
    2e80:	2800      	cmp	r0, #0
    2e82:	f43f aee5 	beq.w	2c50 <bt_init+0x368>
    2e86:	e656      	b.n	2b36 <bt_init+0x24e>
    2e88:	00016303 	.word	0x00016303
    2e8c:	00016059 	.word	0x00016059
    2e90:	00016060 	.word	0x00016060
    2e94:	000166a0 	.word	0x000166a0
    2e98:	20003b78 	.word	0x20003b78
    2e9c:	00016337 	.word	0x00016337
    2ea0:	00016731 	.word	0x00016731
    2ea4:	20003b8c 	.word	0x20003b8c
    2ea8:	00016392 	.word	0x00016392
    2eac:	0001631d 	.word	0x0001631d
    2eb0:	00016765 	.word	0x00016765
    2eb4:	000163e9 	.word	0x000163e9
    2eb8:	0001702e 	.word	0x0001702e
    2ebc:	0001679d 	.word	0x0001679d
    2ec0:	20003b00 	.word	0x20003b00
    2ec4:	000163f5 	.word	0x000163f5
    2ec8:	000168d1 	.word	0x000168d1
    2ecc:	000163ca 	.word	0x000163ca
    2ed0:	0001697f 	.word	0x0001697f
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2ed4:	aa0c      	add	r2, sp, #48	; 0x30
    2ed6:	2100      	movs	r1, #0
    2ed8:	f242 002f 	movw	r0, #8239	; 0x202f
    2edc:	f7ff f9d0 	bl	2280 <bt_hci_cmd_send_sync>
		if (err) {
    2ee0:	4604      	mov	r4, r0
    2ee2:	2800      	cmp	r0, #0
    2ee4:	f47f ae27 	bne.w	2b36 <bt_init+0x24e>
		rp = (void *)rsp->data;
    2ee8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2eea:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2eec:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2ef0:	f8b3 9003 	ldrh.w	r9, [r3, #3]
		net_buf_unref(rsp);
    2ef4:	f010 ffae 	bl	13e54 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2ef8:	2104      	movs	r1, #4
    2efa:	f242 0024 	movw	r0, #8228	; 0x2024
    2efe:	f7ff f961 	bl	21c4 <bt_hci_cmd_create>
		if (!buf) {
    2f02:	4607      	mov	r7, r0
    2f04:	2800      	cmp	r0, #0
    2f06:	f43f ade7 	beq.w	2ad8 <bt_init+0x1f0>
		cp = net_buf_add(buf, sizeof(*cp));
    2f0a:	2104      	movs	r1, #4
    2f0c:	3008      	adds	r0, #8
    2f0e:	f010 ffd3 	bl	13eb8 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2f12:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2f14:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2f18:	f8a0 9002 	strh.w	r9, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2f1c:	4639      	mov	r1, r7
    2f1e:	f242 0024 	movw	r0, #8228	; 0x2024
    2f22:	f7ff f9ad 	bl	2280 <bt_hci_cmd_send_sync>
		if (err) {
    2f26:	4604      	mov	r4, r0
    2f28:	2800      	cmp	r0, #0
    2f2a:	f43f aebe 	beq.w	2caa <bt_init+0x3c2>
    2f2e:	e602      	b.n	2b36 <bt_init+0x24e>
	rp.info = (void *)rsp->data;
    2f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2f32:	4972      	ldr	r1, [pc, #456]	; (30fc <bt_init+0x814>)
	rp.info = (void *)rsp->data;
    2f34:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2f36:	4872      	ldr	r0, [pc, #456]	; (3100 <bt_init+0x818>)
    2f38:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2f3c:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2f3e:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2f40:	bf96      	itet	ls
    2f42:	4a70      	ldrls	r2, [pc, #448]	; (3104 <bt_init+0x81c>)
	return "unknown";
    2f44:	4a70      	ldrhi	r2, [pc, #448]	; (3108 <bt_init+0x820>)
		return plat_str[platform];
    2f46:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2f4a:	9201      	str	r2, [sp, #4]
    2f4c:	4b6f      	ldr	r3, [pc, #444]	; (310c <bt_init+0x824>)
    2f4e:	4a70      	ldr	r2, [pc, #448]	; (3110 <bt_init+0x828>)
    2f50:	9503      	str	r5, [sp, #12]
    2f52:	9500      	str	r5, [sp, #0]
    2f54:	f7fe f81a 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2f58:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2f5c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2f60:	2b02      	cmp	r3, #2
    2f62:	d13a      	bne.n	2fda <bt_init+0x6f2>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2f64:	2a02      	cmp	r2, #2
    2f66:	d838      	bhi.n	2fda <bt_init+0x6f2>
		return nordic_str[variant];
    2f68:	4b6a      	ldr	r3, [pc, #424]	; (3114 <bt_init+0x82c>)
    2f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2f6e:	9202      	str	r2, [sp, #8]
    2f70:	9301      	str	r3, [sp, #4]
    2f72:	4a67      	ldr	r2, [pc, #412]	; (3110 <bt_init+0x828>)
    2f74:	4b65      	ldr	r3, [pc, #404]	; (310c <bt_init+0x824>)
    2f76:	4961      	ldr	r1, [pc, #388]	; (30fc <bt_init+0x814>)
    2f78:	9503      	str	r5, [sp, #12]
    2f7a:	9500      	str	r5, [sp, #0]
    2f7c:	4866      	ldr	r0, [pc, #408]	; (3118 <bt_init+0x830>)
    2f7e:	f7fe f805 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2f82:	7963      	ldrb	r3, [r4, #5]
    2f84:	9506      	str	r5, [sp, #24]
    2f86:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2f8a:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2f8c:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2f8e:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2f92:	bf98      	it	ls
    2f94:	4a61      	ldrls	r2, [pc, #388]	; (311c <bt_init+0x834>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2f96:	9104      	str	r1, [sp, #16]
    2f98:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2f9a:	bf94      	ite	ls
    2f9c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2fa0:	4a59      	ldrhi	r2, [pc, #356]	; (3108 <bt_init+0x820>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2fa2:	9103      	str	r1, [sp, #12]
    2fa4:	9302      	str	r3, [sp, #8]
    2fa6:	4955      	ldr	r1, [pc, #340]	; (30fc <bt_init+0x814>)
    2fa8:	4b58      	ldr	r3, [pc, #352]	; (310c <bt_init+0x824>)
    2faa:	9201      	str	r2, [sp, #4]
    2fac:	9500      	str	r5, [sp, #0]
    2fae:	4a58      	ldr	r2, [pc, #352]	; (3110 <bt_init+0x828>)
    2fb0:	485b      	ldr	r0, [pc, #364]	; (3120 <bt_init+0x838>)
    2fb2:	f7fd ffeb 	bl	f8c <printk>
	net_buf_unref(rsp);
    2fb6:	980c      	ldr	r0, [sp, #48]	; 0x30
    2fb8:	f010 ff4c 	bl	13e54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2fbc:	aa0c      	add	r2, sp, #48	; 0x30
    2fbe:	2100      	movs	r1, #0
    2fc0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2fc4:	f7ff f95c 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2fc8:	4604      	mov	r4, r0
    2fca:	b140      	cbz	r0, 2fde <bt_init+0x6f6>
		BT_WARN("Failed to read supported vendor features");
    2fcc:	9501      	str	r5, [sp, #4]
    2fce:	9500      	str	r5, [sp, #0]
    2fd0:	4b4e      	ldr	r3, [pc, #312]	; (310c <bt_init+0x824>)
    2fd2:	4a54      	ldr	r2, [pc, #336]	; (3124 <bt_init+0x83c>)
    2fd4:	4949      	ldr	r1, [pc, #292]	; (30fc <bt_init+0x814>)
    2fd6:	4854      	ldr	r0, [pc, #336]	; (3128 <bt_init+0x840>)
    2fd8:	e716      	b.n	2e08 <bt_init+0x520>
		return "unknown";
    2fda:	4b4b      	ldr	r3, [pc, #300]	; (3108 <bt_init+0x820>)
    2fdc:	e7c7      	b.n	2f6e <bt_init+0x686>
	rp.cmds = (void *)rsp->data;
    2fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2fe0:	4852      	ldr	r0, [pc, #328]	; (312c <bt_init+0x844>)
    2fe2:	6899      	ldr	r1, [r3, #8]
    2fe4:	2202      	movs	r2, #2
    2fe6:	3101      	adds	r1, #1
    2fe8:	f7fe fe08 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2fec:	980c      	ldr	r0, [sp, #48]	; 0x30
    2fee:	f010 ff31 	bl	13e54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2ff2:	aa0c      	add	r2, sp, #48	; 0x30
    2ff4:	4621      	mov	r1, r4
    2ff6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2ffa:	f7ff f941 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    2ffe:	b130      	cbz	r0, 300e <bt_init+0x726>
		BT_WARN("Failed to read supported vendor commands");
    3000:	9501      	str	r5, [sp, #4]
    3002:	9500      	str	r5, [sp, #0]
    3004:	4b41      	ldr	r3, [pc, #260]	; (310c <bt_init+0x824>)
    3006:	4a47      	ldr	r2, [pc, #284]	; (3124 <bt_init+0x83c>)
    3008:	493c      	ldr	r1, [pc, #240]	; (30fc <bt_init+0x814>)
    300a:	4849      	ldr	r0, [pc, #292]	; (3130 <bt_init+0x848>)
    300c:	e6fc      	b.n	2e08 <bt_init+0x520>
	rp.feat = (void *)rsp->data;
    300e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    3010:	4848      	ldr	r0, [pc, #288]	; (3134 <bt_init+0x84c>)
    3012:	6899      	ldr	r1, [r3, #8]
    3014:	2201      	movs	r2, #1
    3016:	4411      	add	r1, r2
    3018:	f7fe fdf0 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    301c:	980c      	ldr	r0, [sp, #48]	; 0x30
    301e:	f010 ff19 	bl	13e54 <net_buf_unref>
    3022:	e6f3      	b.n	2e0c <bt_init+0x524>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    3024:	4b44      	ldr	r3, [pc, #272]	; (3138 <bt_init+0x850>)
    3026:	6818      	ldr	r0, [r3, #0]
    3028:	889a      	ldrh	r2, [r3, #4]
    302a:	900a      	str	r0, [sp, #40]	; 0x28
    302c:	799b      	ldrb	r3, [r3, #6]
    302e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    3032:	a90a      	add	r1, sp, #40	; 0x28
    3034:	2207      	movs	r2, #7
    3036:	4841      	ldr	r0, [pc, #260]	; (313c <bt_init+0x854>)
    3038:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    303c:	f7fe fdc9 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    3040:	2800      	cmp	r0, #0
    3042:	f43f aeef 	beq.w	2e24 <bt_init+0x53c>
		bt_dev_show_info();
    3046:	f7ff fa97 	bl	2578 <bt_dev_show_info>
		err = bt_conn_init();
    304a:	f002 fa09 	bl	5460 <bt_conn_init>
		if (err) {
    304e:	4604      	mov	r4, r0
    3050:	2800      	cmp	r0, #0
    3052:	f47f ad70 	bne.w	2b36 <bt_init+0x24e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3056:	2102      	movs	r1, #2
    3058:	4839      	ldr	r0, [pc, #228]	; (3140 <bt_init+0x858>)
    305a:	f7fe fffe 	bl	205a <atomic_or>
	bt_le_scan_update(false);
    305e:	4620      	mov	r0, r4
    3060:	f7ff fc10 	bl	2884 <bt_le_scan_update>
    3064:	e567      	b.n	2b36 <bt_init+0x24e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    3066:	aa09      	add	r2, sp, #36	; 0x24
    3068:	2100      	movs	r1, #0
    306a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    306e:	f7ff f907 	bl	2280 <bt_hci_cmd_send_sync>
		if (err) {
    3072:	b140      	cbz	r0, 3086 <bt_init+0x79e>
			BT_WARN("Failed to read static addresses");
    3074:	4b33      	ldr	r3, [pc, #204]	; (3144 <bt_init+0x85c>)
    3076:	4a2b      	ldr	r2, [pc, #172]	; (3124 <bt_init+0x83c>)
    3078:	4920      	ldr	r1, [pc, #128]	; (30fc <bt_init+0x814>)
    307a:	4833      	ldr	r0, [pc, #204]	; (3148 <bt_init+0x860>)
    307c:	9501      	str	r5, [sp, #4]
    307e:	9500      	str	r5, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    3080:	f7fd ff84 	bl	f8c <printk>
    3084:	e026      	b.n	30d4 <bt_init+0x7ec>
		rp = (void *)rsp->data;
    3086:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3088:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    308a:	784b      	ldrb	r3, [r1, #1]
    308c:	b1bb      	cbz	r3, 30be <bt_init+0x7d6>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    308e:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    3090:	2206      	movs	r2, #6
    3092:	3102      	adds	r1, #2
    3094:	482d      	ldr	r0, [pc, #180]	; (314c <bt_init+0x864>)
    3096:	7033      	strb	r3, [r6, #0]
    3098:	f7fe fdb0 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    309c:	9809      	ldr	r0, [sp, #36]	; 0x24
    309e:	f010 fed9 	bl	13e54 <net_buf_unref>
		return bt_set_static_addr();
    30a2:	f7ff fa39 	bl	2518 <bt_set_static_addr>
    30a6:	4604      	mov	r4, r0
		if (err) {
    30a8:	2800      	cmp	r0, #0
    30aa:	d0cc      	beq.n	3046 <bt_init+0x75e>
			BT_ERR("Unable to set identity address");
    30ac:	9501      	str	r5, [sp, #4]
    30ae:	9500      	str	r5, [sp, #0]
    30b0:	4b27      	ldr	r3, [pc, #156]	; (3150 <bt_init+0x868>)
    30b2:	4a28      	ldr	r2, [pc, #160]	; (3154 <bt_init+0x86c>)
    30b4:	4911      	ldr	r1, [pc, #68]	; (30fc <bt_init+0x814>)
    30b6:	4828      	ldr	r0, [pc, #160]	; (3158 <bt_init+0x870>)
    30b8:	f7fd ff68 	bl	f8c <printk>
    30bc:	e53b      	b.n	2b36 <bt_init+0x24e>
		BT_WARN("No static addresses stored in controller");
    30be:	9501      	str	r5, [sp, #4]
    30c0:	9500      	str	r5, [sp, #0]
    30c2:	4b20      	ldr	r3, [pc, #128]	; (3144 <bt_init+0x85c>)
    30c4:	4a17      	ldr	r2, [pc, #92]	; (3124 <bt_init+0x83c>)
    30c6:	490d      	ldr	r1, [pc, #52]	; (30fc <bt_init+0x814>)
    30c8:	4824      	ldr	r0, [pc, #144]	; (315c <bt_init+0x874>)
    30ca:	f7fd ff5f 	bl	f8c <printk>
		net_buf_unref(rsp);
    30ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    30d0:	f010 fec0 	bl	13e54 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    30d4:	4819      	ldr	r0, [pc, #100]	; (313c <bt_init+0x854>)
    30d6:	f7ff fa11 	bl	24fc <bt_addr_le_create_static>
		if (err) {
    30da:	4604      	mov	r4, r0
    30dc:	2800      	cmp	r0, #0
    30de:	d1e5      	bne.n	30ac <bt_init+0x7c4>
		BT_WARN("Using temporary static random address %s",
    30e0:	481a      	ldr	r0, [pc, #104]	; (314c <bt_init+0x864>)
    30e2:	f7fe fe11 	bl	1d08 <bt_addr_str>
    30e6:	9502      	str	r5, [sp, #8]
    30e8:	9001      	str	r0, [sp, #4]
    30ea:	9500      	str	r5, [sp, #0]
    30ec:	4b15      	ldr	r3, [pc, #84]	; (3144 <bt_init+0x85c>)
    30ee:	4a0d      	ldr	r2, [pc, #52]	; (3124 <bt_init+0x83c>)
    30f0:	4902      	ldr	r1, [pc, #8]	; (30fc <bt_init+0x814>)
    30f2:	481b      	ldr	r0, [pc, #108]	; (3160 <bt_init+0x878>)
    30f4:	f7fd ff4a 	bl	f8c <printk>
    30f8:	e7d3      	b.n	30a2 <bt_init+0x7ba>
    30fa:	bf00      	nop
    30fc:	00016060 	.word	0x00016060
    3100:	000167d1 	.word	0x000167d1
    3104:	00017330 	.word	0x00017330
    3108:	0001751c 	.word	0x0001751c
    310c:	000163e9 	.word	0x000163e9
    3110:	00016475 	.word	0x00016475
    3114:	00017324 	.word	0x00017324
    3118:	000167fa 	.word	0x000167fa
    311c:	0001750c 	.word	0x0001750c
    3120:	00016822 	.word	0x00016822
    3124:	0001702e 	.word	0x0001702e
    3128:	0001685f 	.word	0x0001685f
    312c:	20003b5f 	.word	0x20003b5f
    3130:	00016898 	.word	0x00016898
    3134:	20003b5e 	.word	0x20003b5e
    3138:	00015a3c 	.word	0x00015a3c
    313c:	20003b00 	.word	0x20003b00
    3140:	20003b70 	.word	0x20003b70
    3144:	000163ca 	.word	0x000163ca
    3148:	00016916 	.word	0x00016916
    314c:	20003b01 	.word	0x20003b01
    3150:	000163f5 	.word	0x000163f5
    3154:	00016fae 	.word	0x00016fae
    3158:	000169f4 	.word	0x000169f4
    315c:	00016946 	.word	0x00016946
    3160:	000169bb 	.word	0x000169bb

00003164 <init_work>:

static void init_work(struct k_work *work)
{
    3164:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    3166:	f7ff fbbf 	bl	28e8 <bt_init>
	if (ready_cb) {
    316a:	4b03      	ldr	r3, [pc, #12]	; (3178 <init_work+0x14>)
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	b113      	cbz	r3, 3176 <init_work+0x12>
		ready_cb(err);
	}
}
    3170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    3174:	4718      	bx	r3
    3176:	bd10      	pop	{r4, pc}
    3178:	200002d4 	.word	0x200002d4

0000317c <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    317c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    317e:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    3180:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3182:	f242 0032 	movw	r0, #8242	; 0x2032
    3186:	f7ff f81d 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    318a:	4605      	mov	r5, r0
    318c:	b198      	cbz	r0, 31b6 <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    318e:	2107      	movs	r1, #7
    3190:	3008      	adds	r0, #8
    3192:	f010 fe91 	bl	13eb8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3196:	8823      	ldrh	r3, [r4, #0]
    3198:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    319a:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    319c:	2302      	movs	r3, #2
	cp->all_phys = 0;
    319e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    31a0:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    31a2:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    31a4:	7144      	strb	r4, [r0, #5]
    31a6:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    31a8:	4629      	mov	r1, r5
    31aa:	f242 0032 	movw	r0, #8242	; 0x2032
    31ae:	f7ff fa5b 	bl	2668 <bt_hci_cmd_send>
	return 0;
    31b2:	4620      	mov	r0, r4
    31b4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    31b6:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    31ba:	bd38      	pop	{r3, r4, r5, pc}

000031bc <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    31bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31be:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    31c0:	aa01      	add	r2, sp, #4
    31c2:	2100      	movs	r1, #0
    31c4:	f242 002f 	movw	r0, #8239	; 0x202f
    31c8:	f7ff f85a 	bl	2280 <bt_hci_cmd_send_sync>
	if (err) {
    31cc:	b9d8      	cbnz	r0, 3206 <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    31ce:	9801      	ldr	r0, [sp, #4]
    31d0:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    31d2:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    31d6:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    31da:	f010 fe3b 	bl	13e54 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    31de:	2106      	movs	r1, #6
    31e0:	f242 0022 	movw	r0, #8226	; 0x2022
    31e4:	f7fe ffee 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    31e8:	4604      	mov	r4, r0
    31ea:	b170      	cbz	r0, 320a <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    31ec:	2106      	movs	r1, #6
    31ee:	3008      	adds	r0, #8
    31f0:	f010 fe62 	bl	13eb8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    31f4:	883b      	ldrh	r3, [r7, #0]
    31f6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    31f8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    31fa:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    31fc:	4621      	mov	r1, r4
    31fe:	f242 0022 	movw	r0, #8226	; 0x2022
    3202:	f7ff fa31 	bl	2668 <bt_hci_cmd_send>
}
    3206:	b003      	add	sp, #12
    3208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    320a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    320e:	e7fa      	b.n	3206 <hci_le_set_data_len.isra.29+0x4a>

00003210 <le_enh_conn_complete>:
{
    3210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3214:	b08d      	sub	sp, #52	; 0x34
    3216:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3218:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    321c:	4e70      	ldr	r6, [pc, #448]	; (33e0 <le_enh_conn_complete+0x1d0>)
    321e:	f011 fea1 	bl	14f64 <_impl_k_current_get>
    3222:	1d2c      	adds	r4, r5, #4
    3224:	4681      	mov	r9, r0
    3226:	4620      	mov	r0, r4
    3228:	f895 a000 	ldrb.w	sl, [r5]
    322c:	f895 b003 	ldrb.w	fp, [r5, #3]
    3230:	f7fe fd90 	bl	1d54 <bt_addr_le_str>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3234:	fa1f f887 	uxth.w	r8, r7
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3238:	9005      	str	r0, [sp, #20]
    323a:	4b6a      	ldr	r3, [pc, #424]	; (33e4 <le_enh_conn_complete+0x1d4>)
    323c:	9606      	str	r6, [sp, #24]
    323e:	f8cd b010 	str.w	fp, [sp, #16]
    3242:	f8cd 800c 	str.w	r8, [sp, #12]
    3246:	e88d 0640 	stmia.w	sp, {r6, r9, sl}
    324a:	4a67      	ldr	r2, [pc, #412]	; (33e8 <le_enh_conn_complete+0x1d8>)
    324c:	4967      	ldr	r1, [pc, #412]	; (33ec <le_enh_conn_complete+0x1dc>)
    324e:	4868      	ldr	r0, [pc, #416]	; (33f0 <le_enh_conn_complete+0x1e0>)
    3250:	f7fd fe9c 	bl	f8c <printk>
	if (evt->status) {
    3254:	782b      	ldrb	r3, [r5, #0]
    3256:	b183      	cbz	r3, 327a <le_enh_conn_complete+0x6a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3258:	2102      	movs	r1, #2
    325a:	2000      	movs	r0, #0
    325c:	f001 fc80 	bl	4b60 <bt_conn_lookup_state_le>
		if (!conn) {
    3260:	4604      	mov	r4, r0
    3262:	b138      	cbz	r0, 3274 <le_enh_conn_complete+0x64>
		conn->err = evt->status;
    3264:	782b      	ldrb	r3, [r5, #0]
    3266:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3268:	2100      	movs	r1, #0
    326a:	f001 fd4d 	bl	4d08 <bt_conn_set_state>
		bt_conn_unref(conn);
    326e:	4620      	mov	r0, r4
    3270:	f001 fc94 	bl	4b9c <bt_conn_unref>
}
    3274:	b00d      	add	sp, #52	; 0x34
    3276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    327a:	4621      	mov	r1, r4
    327c:	a80a      	add	r0, sp, #40	; 0x28
    327e:	f7fe fee9 	bl	2054 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3282:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3286:	3b02      	subs	r3, #2
    3288:	b2db      	uxtb	r3, r3
    328a:	2b01      	cmp	r3, #1
    328c:	d828      	bhi.n	32e0 <le_enh_conn_complete+0xd0>
    328e:	2206      	movs	r2, #6
    3290:	f105 0111 	add.w	r1, r5, #17
    3294:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3298:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    329c:	f7fe fcae 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    32a0:	2301      	movs	r3, #1
    32a2:	f88d 3020 	strb.w	r3, [sp, #32]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    32a6:	2102      	movs	r1, #2
    32a8:	a80a      	add	r0, sp, #40	; 0x28
    32aa:	f001 fc59 	bl	4b60 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    32ae:	78eb      	ldrb	r3, [r5, #3]
    32b0:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    32b2:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    32b4:	d109      	bne.n	32ca <le_enh_conn_complete+0xba>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32b6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    32ba:	484e      	ldr	r0, [pc, #312]	; (33f4 <le_enh_conn_complete+0x1e4>)
    32bc:	f7fe fede 	bl	207c <atomic_and>
		if (!conn) {
    32c0:	b99c      	cbnz	r4, 32ea <le_enh_conn_complete+0xda>
			conn = bt_conn_add_le(&id_addr);
    32c2:	a80a      	add	r0, sp, #40	; 0x28
    32c4:	f001 fba0 	bl	4a08 <bt_conn_add_le>
    32c8:	4604      	mov	r4, r0
	if (!conn) {
    32ca:	b974      	cbnz	r4, 32ea <le_enh_conn_complete+0xda>
		BT_ERR("Unable to add new conn for handle %u", handle);
    32cc:	9602      	str	r6, [sp, #8]
    32ce:	e88d 0140 	stmia.w	sp, {r6, r8}
    32d2:	4b44      	ldr	r3, [pc, #272]	; (33e4 <le_enh_conn_complete+0x1d4>)
    32d4:	4a48      	ldr	r2, [pc, #288]	; (33f8 <le_enh_conn_complete+0x1e8>)
    32d6:	4945      	ldr	r1, [pc, #276]	; (33ec <le_enh_conn_complete+0x1dc>)
    32d8:	4848      	ldr	r0, [pc, #288]	; (33fc <le_enh_conn_complete+0x1ec>)
    32da:	f7fd fe57 	bl	f8c <printk>
		return;
    32de:	e7c9      	b.n	3274 <le_enh_conn_complete+0x64>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    32e0:	4621      	mov	r1, r4
    32e2:	a808      	add	r0, sp, #32
    32e4:	f7fe feb6 	bl	2054 <bt_addr_le_copy>
    32e8:	e7dd      	b.n	32a6 <le_enh_conn_complete+0x96>
	conn->handle   = handle;
    32ea:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    32ec:	a90a      	add	r1, sp, #40	; 0x28
	conn->handle   = handle;
    32ee:	f820 7b44 	strh.w	r7, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    32f2:	f7fe feaf 	bl	2054 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    32f6:	7e2a      	ldrb	r2, [r5, #24]
    32f8:	7deb      	ldrb	r3, [r5, #23]
    32fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    32fe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3302:	7eaa      	ldrb	r2, [r5, #26]
    3304:	7e6b      	ldrb	r3, [r5, #25]
    3306:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    330a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    330e:	7eeb      	ldrb	r3, [r5, #27]
    3310:	7f2a      	ldrb	r2, [r5, #28]
    3312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3316:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    331a:	78ee      	ldrb	r6, [r5, #3]
    331c:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    331e:	2e01      	cmp	r6, #1
    3320:	d11a      	bne.n	3358 <le_enh_conn_complete+0x148>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3322:	4f37      	ldr	r7, [pc, #220]	; (3400 <le_enh_conn_complete+0x1f0>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    3324:	a908      	add	r1, sp, #32
    3326:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    332a:	f7fe fe93 	bl	2054 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    332e:	4639      	mov	r1, r7
    3330:	f104 0052 	add.w	r0, r4, #82	; 0x52
    3334:	f7fe fe8e 	bl	2054 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3338:	2107      	movs	r1, #7
    333a:	f107 0070 	add.w	r0, r7, #112	; 0x70
    333e:	f7fe ff33 	bl	21a8 <atomic_test_bit>
    3342:	b148      	cbz	r0, 3358 <le_enh_conn_complete+0x148>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    3344:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    3348:	2200      	movs	r2, #0
    334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    334e:	4313      	orrs	r3, r2
    3350:	d002      	beq.n	3358 <le_enh_conn_complete+0x148>
			set_advertise_enable(true);
    3352:	4630      	mov	r0, r6
    3354:	f7ff f888 	bl	2468 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3358:	2103      	movs	r1, #3
    335a:	4620      	mov	r0, r4
    335c:	f001 fcd4 	bl	4d08 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    3360:	7a63      	ldrb	r3, [r4, #9]
    3362:	2b03      	cmp	r3, #3
    3364:	d118      	bne.n	3398 <le_enh_conn_complete+0x188>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3366:	78eb      	ldrb	r3, [r5, #3]
    3368:	b123      	cbz	r3, 3374 <le_enh_conn_complete+0x164>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    336a:	4b25      	ldr	r3, [pc, #148]	; (3400 <le_enh_conn_complete+0x1f0>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    336c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3370:	0719      	lsls	r1, r3, #28
    3372:	d518      	bpl.n	33a6 <le_enh_conn_complete+0x196>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    3374:	2102      	movs	r1, #2
    3376:	f242 0016 	movw	r0, #8214	; 0x2016
    337a:	f7fe ff23 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    337e:	4605      	mov	r5, r0
    3380:	b188      	cbz	r0, 33a6 <le_enh_conn_complete+0x196>
	cp = net_buf_add(buf, sizeof(*cp));
    3382:	2102      	movs	r1, #2
    3384:	3008      	adds	r0, #8
    3386:	f010 fd97 	bl	13eb8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    338a:	8823      	ldrh	r3, [r4, #0]
    338c:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    338e:	4629      	mov	r1, r5
    3390:	f242 0016 	movw	r0, #8214	; 0x2016
    3394:	f7ff f968 	bl	2668 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    3398:	4620      	mov	r0, r4
    339a:	f001 fbff 	bl	4b9c <bt_conn_unref>
	bt_le_scan_update(false);
    339e:	2000      	movs	r0, #0
    33a0:	f7ff fa70 	bl	2884 <bt_le_scan_update>
    33a4:	e766      	b.n	3274 <le_enh_conn_complete+0x64>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    33a6:	4d16      	ldr	r5, [pc, #88]	; (3400 <le_enh_conn_complete+0x1f0>)
    33a8:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    33ac:	07d2      	lsls	r2, r2, #31
    33ae:	d508      	bpl.n	33c2 <le_enh_conn_complete+0x1b2>
		err = hci_le_set_phy(conn);
    33b0:	4620      	mov	r0, r4
    33b2:	f7ff fee3 	bl	317c <hci_le_set_phy.isra.28>
		if (!err) {
    33b6:	b920      	cbnz	r0, 33c2 <le_enh_conn_complete+0x1b2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    33b8:	2180      	movs	r1, #128	; 0x80
    33ba:	1d20      	adds	r0, r4, #4
    33bc:	f7fe fe4d 	bl	205a <atomic_or>
    33c0:	e7ea      	b.n	3398 <le_enh_conn_complete+0x188>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    33c2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    33c6:	069b      	lsls	r3, r3, #26
    33c8:	d506      	bpl.n	33d8 <le_enh_conn_complete+0x1c8>
		err = hci_le_set_data_len(conn);
    33ca:	4620      	mov	r0, r4
    33cc:	f7ff fef6 	bl	31bc <hci_le_set_data_len.isra.29>
		if (!err) {
    33d0:	b910      	cbnz	r0, 33d8 <le_enh_conn_complete+0x1c8>
    33d2:	f44f 7180 	mov.w	r1, #256	; 0x100
    33d6:	e7f0      	b.n	33ba <le_enh_conn_complete+0x1aa>
	update_conn_param(conn);
    33d8:	4620      	mov	r0, r4
    33da:	f7fe fe61 	bl	20a0 <update_conn_param>
    33de:	e7db      	b.n	3398 <le_enh_conn_complete+0x188>
    33e0:	00015af1 	.word	0x00015af1
    33e4:	00016179 	.word	0x00016179
    33e8:	00016059 	.word	0x00016059
    33ec:	00016060 	.word	0x00016060
    33f0:	0001728b 	.word	0x0001728b
    33f4:	20003b70 	.word	0x20003b70
    33f8:	00016fae 	.word	0x00016fae
    33fc:	000172bf 	.word	0x000172bf
    3400:	20003b00 	.word	0x20003b00

00003404 <le_conn_param_neg_reply>:
{
    3404:	b570      	push	{r4, r5, r6, lr}
    3406:	4606      	mov	r6, r0
    3408:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    340a:	f242 0021 	movw	r0, #8225	; 0x2021
    340e:	2103      	movs	r1, #3
    3410:	f7fe fed8 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    3414:	4604      	mov	r4, r0
    3416:	b160      	cbz	r0, 3432 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    3418:	2103      	movs	r1, #3
    341a:	3008      	adds	r0, #8
    341c:	f010 fd4c 	bl	13eb8 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    3420:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    3422:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3424:	4621      	mov	r1, r4
    3426:	f242 0021 	movw	r0, #8225	; 0x2021
}
    342a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    342e:	f7ff b91b 	b.w	2668 <bt_hci_cmd_send>
}
    3432:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3436:	bd70      	pop	{r4, r5, r6, pc}

00003438 <hci_tx_thread>:
{
    3438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    343c:	b089      	sub	sp, #36	; 0x24
    343e:	f011 fd91 	bl	14f64 <_impl_k_current_get>
	BT_DBG("Started");
    3442:	4c81      	ldr	r4, [pc, #516]	; (3648 <hci_tx_thread+0x210>)
    3444:	9001      	str	r0, [sp, #4]
    3446:	9402      	str	r4, [sp, #8]
    3448:	9400      	str	r4, [sp, #0]
    344a:	4b80      	ldr	r3, [pc, #512]	; (364c <hci_tx_thread+0x214>)
    344c:	4a80      	ldr	r2, [pc, #512]	; (3650 <hci_tx_thread+0x218>)
    344e:	4981      	ldr	r1, [pc, #516]	; (3654 <hci_tx_thread+0x21c>)
    3450:	4881      	ldr	r0, [pc, #516]	; (3658 <hci_tx_thread+0x220>)
		events[0].state = K_POLL_STATE_NOT_READY;
    3452:	f8df a210 	ldr.w	sl, [pc, #528]	; 3664 <hci_tx_thread+0x22c>
	BT_DBG("Started");
    3456:	f7fd fd99 	bl	f8c <printk>
		events[0].state = K_POLL_STATE_NOT_READY;
    345a:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    345e:	487f      	ldr	r0, [pc, #508]	; (365c <hci_tx_thread+0x224>)
		events[0].state = K_POLL_STATE_NOT_READY;
    3460:	f36f 1307 	bfc	r3, #4, #4
    3464:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3468:	f001 fbe0 	bl	4c2c <bt_conn_prepare_events>
    346c:	f100 0801 	add.w	r8, r0, #1
    3470:	f011 fd78 	bl	14f64 <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    3474:	4a76      	ldr	r2, [pc, #472]	; (3650 <hci_tx_thread+0x218>)
    3476:	9001      	str	r0, [sp, #4]
    3478:	4976      	ldr	r1, [pc, #472]	; (3654 <hci_tx_thread+0x21c>)
    347a:	9403      	str	r4, [sp, #12]
    347c:	f8cd 8008 	str.w	r8, [sp, #8]
    3480:	9400      	str	r4, [sp, #0]
    3482:	4b72      	ldr	r3, [pc, #456]	; (364c <hci_tx_thread+0x214>)
    3484:	4876      	ldr	r0, [pc, #472]	; (3660 <hci_tx_thread+0x228>)
    3486:	f7fd fd81 	bl	f8c <printk>

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    348a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    348e:	4641      	mov	r1, r8
    3490:	4874      	ldr	r0, [pc, #464]	; (3664 <hci_tx_thread+0x22c>)
    3492:	f012 f9b7 	bl	15804 <_impl_k_poll>
		BT_ASSERT(err == 0);
    3496:	b168      	cbz	r0, 34b4 <hci_tx_thread+0x7c>
    3498:	4b6c      	ldr	r3, [pc, #432]	; (364c <hci_tx_thread+0x214>)
    349a:	4a73      	ldr	r2, [pc, #460]	; (3668 <hci_tx_thread+0x230>)
    349c:	496d      	ldr	r1, [pc, #436]	; (3654 <hci_tx_thread+0x21c>)
    349e:	4873      	ldr	r0, [pc, #460]	; (366c <hci_tx_thread+0x234>)
    34a0:	9401      	str	r4, [sp, #4]
    34a2:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf);
    34a4:	f7fd fd72 	bl	f8c <printk>
    34a8:	4040      	eors	r0, r0
    34aa:	f380 8811 	msr	BASEPRI, r0
    34ae:	f04f 0004 	mov.w	r0, #4
    34b2:	df02      	svc	2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    34b4:	f011 fd56 	bl	14f64 <_impl_k_current_get>
	BT_DBG("count %d", count);
    34b8:	9403      	str	r4, [sp, #12]
    34ba:	9001      	str	r0, [sp, #4]
    34bc:	f8cd 8008 	str.w	r8, [sp, #8]
    34c0:	9400      	str	r4, [sp, #0]
    34c2:	4b6b      	ldr	r3, [pc, #428]	; (3670 <hci_tx_thread+0x238>)
    34c4:	4a62      	ldr	r2, [pc, #392]	; (3650 <hci_tx_thread+0x218>)
    34c6:	4963      	ldr	r1, [pc, #396]	; (3654 <hci_tx_thread+0x21c>)
    34c8:	486a      	ldr	r0, [pc, #424]	; (3674 <hci_tx_thread+0x23c>)
    34ca:	4d66      	ldr	r5, [pc, #408]	; (3664 <hci_tx_thread+0x22c>)
		BT_DBG("ev->state %u", ev->state);
    34cc:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 3670 <hci_tx_thread+0x238>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    34d0:	4e69      	ldr	r6, [pc, #420]	; (3678 <hci_tx_thread+0x240>)
	BT_DBG("count %d", count);
    34d2:	f7fd fd5b 	bl	f8c <printk>
	for (; count; ev++, count--) {
    34d6:	f1b8 0f00 	cmp.w	r8, #0
    34da:	d102      	bne.n	34e2 <hci_tx_thread+0xaa>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    34dc:	f011 fd12 	bl	14f04 <_impl_k_yield>
    34e0:	e7bb      	b.n	345a <hci_tx_thread+0x22>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    34e2:	f011 fd3f 	bl	14f64 <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    34e6:	7b6b      	ldrb	r3, [r5, #13]
    34e8:	9001      	str	r0, [sp, #4]
    34ea:	091b      	lsrs	r3, r3, #4
    34ec:	9302      	str	r3, [sp, #8]
    34ee:	9403      	str	r4, [sp, #12]
    34f0:	465b      	mov	r3, fp
    34f2:	9400      	str	r4, [sp, #0]
    34f4:	4a56      	ldr	r2, [pc, #344]	; (3650 <hci_tx_thread+0x218>)
    34f6:	4957      	ldr	r1, [pc, #348]	; (3654 <hci_tx_thread+0x21c>)
    34f8:	4860      	ldr	r0, [pc, #384]	; (367c <hci_tx_thread+0x244>)
    34fa:	f7fd fd47 	bl	f8c <printk>
		switch (ev->state) {
    34fe:	7b6b      	ldrb	r3, [r5, #13]
    3500:	091b      	lsrs	r3, r3, #4
    3502:	2b01      	cmp	r3, #1
    3504:	f240 8081 	bls.w	360a <hci_tx_thread+0x1d2>
    3508:	2b04      	cmp	r3, #4
    350a:	f040 8092 	bne.w	3632 <hci_tx_thread+0x1fa>
			if (ev->tag == BT_EVENT_CMD_TX) {
    350e:	f895 900c 	ldrb.w	r9, [r5, #12]
    3512:	f1b9 0f00 	cmp.w	r9, #0
    3516:	d17c      	bne.n	3612 <hci_tx_thread+0x1da>
    3518:	f011 fd24 	bl	14f64 <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    351c:	4b58      	ldr	r3, [pc, #352]	; (3680 <hci_tx_thread+0x248>)
    351e:	9001      	str	r0, [sp, #4]
    3520:	4a4b      	ldr	r2, [pc, #300]	; (3650 <hci_tx_thread+0x218>)
    3522:	494c      	ldr	r1, [pc, #304]	; (3654 <hci_tx_thread+0x21c>)
    3524:	9402      	str	r4, [sp, #8]
    3526:	9400      	str	r4, [sp, #0]
    3528:	4856      	ldr	r0, [pc, #344]	; (3684 <hci_tx_thread+0x24c>)
    352a:	f7fd fd2f 	bl	f8c <printk>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    352e:	4649      	mov	r1, r9
    3530:	4855      	ldr	r0, [pc, #340]	; (3688 <hci_tx_thread+0x250>)
    3532:	f010 fc65 	bl	13e00 <net_buf_get>
	BT_ASSERT(buf);
    3536:	4607      	mov	r7, r0
    3538:	b930      	cbnz	r0, 3548 <hci_tx_thread+0x110>
    353a:	9401      	str	r4, [sp, #4]
    353c:	9400      	str	r4, [sp, #0]
    353e:	4b50      	ldr	r3, [pc, #320]	; (3680 <hci_tx_thread+0x248>)
    3540:	4a49      	ldr	r2, [pc, #292]	; (3668 <hci_tx_thread+0x230>)
    3542:	4944      	ldr	r1, [pc, #272]	; (3654 <hci_tx_thread+0x21c>)
    3544:	4851      	ldr	r0, [pc, #324]	; (368c <hci_tx_thread+0x254>)
    3546:	e7ad      	b.n	34a4 <hci_tx_thread+0x6c>
    3548:	f011 fd0c 	bl	14f64 <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    354c:	4b4c      	ldr	r3, [pc, #304]	; (3680 <hci_tx_thread+0x248>)
    354e:	9001      	str	r0, [sp, #4]
    3550:	4a3f      	ldr	r2, [pc, #252]	; (3650 <hci_tx_thread+0x218>)
    3552:	4940      	ldr	r1, [pc, #256]	; (3654 <hci_tx_thread+0x21c>)
    3554:	9402      	str	r4, [sp, #8]
    3556:	9400      	str	r4, [sp, #0]
    3558:	484d      	ldr	r0, [pc, #308]	; (3690 <hci_tx_thread+0x258>)
    355a:	f7fd fd17 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    355e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3562:	484c      	ldr	r0, [pc, #304]	; (3694 <hci_tx_thread+0x25c>)
    3564:	f011 fd35 	bl	14fd2 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3568:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
    356c:	b16b      	cbz	r3, 358a <hci_tx_thread+0x152>
		BT_ERR("Uncleared pending sent_cmd");
    356e:	4b44      	ldr	r3, [pc, #272]	; (3680 <hci_tx_thread+0x248>)
    3570:	4a3d      	ldr	r2, [pc, #244]	; (3668 <hci_tx_thread+0x230>)
    3572:	4938      	ldr	r1, [pc, #224]	; (3654 <hci_tx_thread+0x21c>)
    3574:	9401      	str	r4, [sp, #4]
    3576:	9400      	str	r4, [sp, #0]
    3578:	4847      	ldr	r0, [pc, #284]	; (3698 <hci_tx_thread+0x260>)
    357a:	f7fd fd07 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    357e:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    3582:	f010 fc67 	bl	13e54 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3586:	f8c6 90c0 	str.w	r9, [r6, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    358a:	4638      	mov	r0, r7
    358c:	f010 fc90 	bl	13eb0 <net_buf_ref>
    3590:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3594:	f011 fce6 	bl	14f64 <_impl_k_current_get>
    3598:	9007      	str	r0, [sp, #28]
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    359a:	4638      	mov	r0, r7
    359c:	f010 fb9c 	bl	13cd8 <net_buf_id>
    35a0:	f8df 9108 	ldr.w	r9, [pc, #264]	; 36ac <hci_tx_thread+0x274>
    35a4:	9404      	str	r4, [sp, #16]
    35a6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    35aa:	9703      	str	r7, [sp, #12]
    35ac:	8842      	ldrh	r2, [r0, #2]
    35ae:	9b07      	ldr	r3, [sp, #28]
    35b0:	9202      	str	r2, [sp, #8]
    35b2:	9301      	str	r3, [sp, #4]
    35b4:	9400      	str	r4, [sp, #0]
    35b6:	4b32      	ldr	r3, [pc, #200]	; (3680 <hci_tx_thread+0x248>)
    35b8:	4a25      	ldr	r2, [pc, #148]	; (3650 <hci_tx_thread+0x218>)
    35ba:	4926      	ldr	r1, [pc, #152]	; (3654 <hci_tx_thread+0x21c>)
    35bc:	4837      	ldr	r0, [pc, #220]	; (369c <hci_tx_thread+0x264>)
    35be:	f7fd fce5 	bl	f8c <printk>
	err = bt_send(buf);
    35c2:	4638      	mov	r0, r7
    35c4:	f7ff f826 	bl	2614 <bt_send>
	if (err) {
    35c8:	b1f8      	cbz	r0, 360a <hci_tx_thread+0x1d2>
		BT_ERR("Unable to send to driver (err %d)", err);
    35ca:	4b2d      	ldr	r3, [pc, #180]	; (3680 <hci_tx_thread+0x248>)
    35cc:	4a26      	ldr	r2, [pc, #152]	; (3668 <hci_tx_thread+0x230>)
    35ce:	4921      	ldr	r1, [pc, #132]	; (3654 <hci_tx_thread+0x21c>)
    35d0:	9001      	str	r0, [sp, #4]
    35d2:	9402      	str	r4, [sp, #8]
    35d4:	9400      	str	r4, [sp, #0]
    35d6:	4832      	ldr	r0, [pc, #200]	; (36a0 <hci_tx_thread+0x268>)
    35d8:	f7fd fcd8 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    35dc:	482d      	ldr	r0, [pc, #180]	; (3694 <hci_tx_thread+0x25c>)
    35de:	f011 fcd0 	bl	14f82 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    35e2:	4638      	mov	r0, r7
    35e4:	f010 fb78 	bl	13cd8 <net_buf_id>
    35e8:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    35ec:	2200      	movs	r2, #0
    35ee:	211f      	movs	r1, #31
    35f0:	8840      	ldrh	r0, [r0, #2]
    35f2:	f7fe fd63 	bl	20bc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    35f6:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    35fa:	f010 fc2b 	bl	13e54 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    35fe:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3600:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    3602:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
		net_buf_unref(buf);
    3606:	f010 fc25 	bl	13e54 <net_buf_unref>
	for (; count; ev++, count--) {
    360a:	3514      	adds	r5, #20
    360c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3610:	e761      	b.n	34d6 <hci_tx_thread+0x9e>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3612:	f1b9 0f01 	cmp.w	r9, #1
    3616:	d104      	bne.n	3622 <hci_tx_thread+0x1ea>
					conn = CONTAINER_OF(ev->fifo,
    3618:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    361a:	3818      	subs	r0, #24
    361c:	f001 f8f0 	bl	4800 <bt_conn_notify_tx>
    3620:	e7f3      	b.n	360a <hci_tx_thread+0x1d2>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3622:	f1b9 0f02 	cmp.w	r9, #2
    3626:	d1f0      	bne.n	360a <hci_tx_thread+0x1d2>
					conn = CONTAINER_OF(ev->fifo,
    3628:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    362a:	3828      	subs	r0, #40	; 0x28
    362c:	f001 fe54 	bl	52d8 <bt_conn_process_tx>
    3630:	e7eb      	b.n	360a <hci_tx_thread+0x1d2>
		switch (ev->state) {
    3632:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3634:	9402      	str	r4, [sp, #8]
    3636:	9400      	str	r4, [sp, #0]
    3638:	465b      	mov	r3, fp
    363a:	4a1a      	ldr	r2, [pc, #104]	; (36a4 <hci_tx_thread+0x26c>)
    363c:	4905      	ldr	r1, [pc, #20]	; (3654 <hci_tx_thread+0x21c>)
    363e:	481a      	ldr	r0, [pc, #104]	; (36a8 <hci_tx_thread+0x270>)
    3640:	f7fd fca4 	bl	f8c <printk>
    3644:	e7e1      	b.n	360a <hci_tx_thread+0x1d2>
    3646:	bf00      	nop
    3648:	00015af1 	.word	0x00015af1
    364c:	000162c8 	.word	0x000162c8
    3650:	00016059 	.word	0x00016059
    3654:	00016060 	.word	0x00016060
    3658:	000170bd 	.word	0x000170bd
    365c:	20003bec 	.word	0x20003bec
    3660:	000170da 	.word	0x000170da
    3664:	20003bd8 	.word	0x20003bd8
    3668:	00016fae 	.word	0x00016fae
    366c:	0001710d 	.word	0x0001710d
    3670:	000162b9 	.word	0x000162b9
    3674:	00017137 	.word	0x00017137
    3678:	20003b00 	.word	0x20003b00
    367c:	00017155 	.word	0x00017155
    3680:	000162b0 	.word	0x000162b0
    3684:	00017177 	.word	0x00017177
    3688:	20003bc4 	.word	0x20003bc4
    368c:	000171a0 	.word	0x000171a0
    3690:	000171c5 	.word	0x000171c5
    3694:	20003ba8 	.word	0x20003ba8
    3698:	000171f0 	.word	0x000171f0
    369c:	0001721b 	.word	0x0001721b
    36a0:	000165e9 	.word	0x000165e9
    36a4:	0001702e 	.word	0x0001702e
    36a8:	0001725a 	.word	0x0001725a
    36ac:	2000027c 	.word	0x2000027c

000036b0 <bt_recv>:
{
    36b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36b4:	b097      	sub	sp, #92	; 0x5c
    36b6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    36b8:	f011 fc54 	bl	14f64 <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    36bc:	4ead      	ldr	r6, [pc, #692]	; (3974 <bt_recv+0x2c4>)
    36be:	89a3      	ldrh	r3, [r4, #12]
    36c0:	9303      	str	r3, [sp, #12]
    36c2:	9001      	str	r0, [sp, #4]
    36c4:	9604      	str	r6, [sp, #16]
    36c6:	9402      	str	r4, [sp, #8]
    36c8:	9600      	str	r6, [sp, #0]
    36ca:	4bab      	ldr	r3, [pc, #684]	; (3978 <bt_recv+0x2c8>)
    36cc:	4aab      	ldr	r2, [pc, #684]	; (397c <bt_recv+0x2cc>)
    36ce:	49ac      	ldr	r1, [pc, #688]	; (3980 <bt_recv+0x2d0>)
    36d0:	48ac      	ldr	r0, [pc, #688]	; (3984 <bt_recv+0x2d4>)
    36d2:	f7fd fc5b 	bl	f8c <printk>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    36d6:	7d27      	ldrb	r7, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    36d8:	2f01      	cmp	r7, #1
    36da:	4635      	mov	r5, r6
    36dc:	d05b      	beq.n	3796 <bt_recv+0xe6>
    36de:	2f03      	cmp	r7, #3
    36e0:	f040 8420 	bne.w	3f24 <bt_recv+0x874>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    36e4:	68a7      	ldr	r7, [r4, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    36e6:	887d      	ldrh	r5, [r7, #2]
    36e8:	f011 fc3c 	bl	14f64 <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    36ec:	4aa3      	ldr	r2, [pc, #652]	; (397c <bt_recv+0x2cc>)
    36ee:	9001      	str	r0, [sp, #4]
    36f0:	4ba5      	ldr	r3, [pc, #660]	; (3988 <bt_recv+0x2d8>)
    36f2:	49a3      	ldr	r1, [pc, #652]	; (3980 <bt_recv+0x2d0>)
    36f4:	9603      	str	r6, [sp, #12]
    36f6:	9402      	str	r4, [sp, #8]
    36f8:	9600      	str	r6, [sp, #0]
    36fa:	48a4      	ldr	r0, [pc, #656]	; (398c <bt_recv+0x2dc>)
    36fc:	f7fd fc46 	bl	f8c <printk>
	handle = sys_le16_to_cpu(hdr->handle);
    3700:	883b      	ldrh	r3, [r7, #0]
	flags = bt_acl_flags(handle);
    3702:	0b1f      	lsrs	r7, r3, #12
	acl(buf)->handle = bt_acl_handle(handle);
    3704:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3708:	82e3      	strh	r3, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    370a:	23ff      	movs	r3, #255	; 0xff
    370c:	7563      	strb	r3, [r4, #21]
	net_buf_pull(buf, sizeof(*hdr));
    370e:	2104      	movs	r1, #4
    3710:	f104 0008 	add.w	r0, r4, #8
    3714:	f010 fbfe 	bl	13f14 <net_buf_simple_pull>
    3718:	f011 fc24 	bl	14f64 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);
    371c:	8ae3      	ldrh	r3, [r4, #22]
    371e:	9302      	str	r3, [sp, #8]
    3720:	9001      	str	r0, [sp, #4]
    3722:	4b99      	ldr	r3, [pc, #612]	; (3988 <bt_recv+0x2d8>)
    3724:	9605      	str	r6, [sp, #20]
    3726:	9704      	str	r7, [sp, #16]
    3728:	9503      	str	r5, [sp, #12]
    372a:	9600      	str	r6, [sp, #0]
    372c:	4a93      	ldr	r2, [pc, #588]	; (397c <bt_recv+0x2cc>)
    372e:	4994      	ldr	r1, [pc, #592]	; (3980 <bt_recv+0x2d0>)
    3730:	4897      	ldr	r0, [pc, #604]	; (3990 <bt_recv+0x2e0>)
    3732:	f7fd fc2b 	bl	f8c <printk>
	if (buf->len != len) {
    3736:	89a3      	ldrh	r3, [r4, #12]
    3738:	429d      	cmp	r5, r3
    373a:	d00d      	beq.n	3758 <bt_recv+0xa8>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    373c:	9301      	str	r3, [sp, #4]
    373e:	9603      	str	r6, [sp, #12]
    3740:	9502      	str	r5, [sp, #8]
    3742:	9600      	str	r6, [sp, #0]
    3744:	4b90      	ldr	r3, [pc, #576]	; (3988 <bt_recv+0x2d8>)
    3746:	4a93      	ldr	r2, [pc, #588]	; (3994 <bt_recv+0x2e4>)
    3748:	498d      	ldr	r1, [pc, #564]	; (3980 <bt_recv+0x2d0>)
    374a:	4893      	ldr	r0, [pc, #588]	; (3998 <bt_recv+0x2e8>)
    374c:	f7fd fc1e 	bl	f8c <printk>
	net_buf_unref(buf);
    3750:	4620      	mov	r0, r4
    3752:	f010 fb7f 	bl	13e54 <net_buf_unref>
    3756:	e01a      	b.n	378e <bt_recv+0xde>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3758:	8ae0      	ldrh	r0, [r4, #22]
    375a:	f001 f9d1 	bl	4b00 <bt_conn_lookup_handle>
	if (!conn) {
    375e:	4605      	mov	r5, r0
    3760:	b950      	cbnz	r0, 3778 <bt_recv+0xc8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3762:	8ae3      	ldrh	r3, [r4, #22]
    3764:	9301      	str	r3, [sp, #4]
    3766:	4a8b      	ldr	r2, [pc, #556]	; (3994 <bt_recv+0x2e4>)
    3768:	4b87      	ldr	r3, [pc, #540]	; (3988 <bt_recv+0x2d8>)
    376a:	4985      	ldr	r1, [pc, #532]	; (3980 <bt_recv+0x2d0>)
    376c:	488b      	ldr	r0, [pc, #556]	; (399c <bt_recv+0x2ec>)
    376e:	9602      	str	r6, [sp, #8]
    3770:	9600      	str	r6, [sp, #0]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3772:	f7fd fc0b 	bl	f8c <printk>
    3776:	e7eb      	b.n	3750 <bt_recv+0xa0>
	acl(buf)->id = bt_conn_get_id(conn);
    3778:	f001 fe54 	bl	5424 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    377c:	463a      	mov	r2, r7
	acl(buf)->id = bt_conn_get_id(conn);
    377e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    3780:	4621      	mov	r1, r4
    3782:	4628      	mov	r0, r5
    3784:	f000 ff0c 	bl	45a0 <bt_conn_recv>
	bt_conn_unref(conn);
    3788:	4628      	mov	r0, r5
    378a:	f001 fa07 	bl	4b9c <bt_conn_unref>
		return 0;
    378e:	2000      	movs	r0, #0
}
    3790:	b017      	add	sp, #92	; 0x5c
    3792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3796:	f8d4 8008 	ldr.w	r8, [r4, #8]
    379a:	f011 fbe3 	bl	14f64 <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    379e:	9603      	str	r6, [sp, #12]
    37a0:	f898 3000 	ldrb.w	r3, [r8]
    37a4:	9302      	str	r3, [sp, #8]
    37a6:	9001      	str	r0, [sp, #4]
    37a8:	4b7d      	ldr	r3, [pc, #500]	; (39a0 <bt_recv+0x2f0>)
    37aa:	9600      	str	r6, [sp, #0]
    37ac:	4a73      	ldr	r2, [pc, #460]	; (397c <bt_recv+0x2cc>)
    37ae:	4974      	ldr	r1, [pc, #464]	; (3980 <bt_recv+0x2d0>)
    37b0:	487c      	ldr	r0, [pc, #496]	; (39a4 <bt_recv+0x2f4>)
    37b2:	f7fd fbeb 	bl	f8c <printk>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    37b6:	f898 3000 	ldrb.w	r3, [r8]
    37ba:	2b13      	cmp	r3, #19
    37bc:	f200 83c1 	bhi.w	3f42 <bt_recv+0x892>
    37c0:	409f      	lsls	r7, r3
    37c2:	f417 2f0c 	tst.w	r7, #573440	; 0x8c000
    37c6:	f000 83bc 	beq.w	3f42 <bt_recv+0x892>
    37ca:	9601      	str	r6, [sp, #4]
    37cc:	9600      	str	r6, [sp, #0]
    37ce:	4b74      	ldr	r3, [pc, #464]	; (39a0 <bt_recv+0x2f0>)
    37d0:	4a70      	ldr	r2, [pc, #448]	; (3994 <bt_recv+0x2e4>)
    37d2:	496b      	ldr	r1, [pc, #428]	; (3980 <bt_recv+0x2d0>)
    37d4:	4874      	ldr	r0, [pc, #464]	; (39a8 <bt_recv+0x2f8>)
    37d6:	f7fd fbd9 	bl	f8c <printk>
    37da:	4040      	eors	r0, r0
    37dc:	f380 8811 	msr	BASEPRI, r0
    37e0:	f04f 0004 	mov.w	r0, #4
    37e4:	df02      	svc	2
    37e6:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    37e8:	f8b7 9001 	ldrh.w	r9, [r7, #1]
    37ec:	f011 fbba 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    37f0:	9505      	str	r5, [sp, #20]
    37f2:	78fb      	ldrb	r3, [r7, #3]
    37f4:	9304      	str	r3, [sp, #16]
    37f6:	f8cd 900c 	str.w	r9, [sp, #12]
    37fa:	783b      	ldrb	r3, [r7, #0]
    37fc:	9302      	str	r3, [sp, #8]
    37fe:	9001      	str	r0, [sp, #4]
    3800:	9500      	str	r5, [sp, #0]
    3802:	4b6a      	ldr	r3, [pc, #424]	; (39ac <bt_recv+0x2fc>)
    3804:	4a5d      	ldr	r2, [pc, #372]	; (397c <bt_recv+0x2cc>)
    3806:	495e      	ldr	r1, [pc, #376]	; (3980 <bt_recv+0x2d0>)
    3808:	4869      	ldr	r0, [pc, #420]	; (39b0 <bt_recv+0x300>)
    380a:	f7fd fbbf 	bl	f8c <printk>
	if (evt->status) {
    380e:	f897 8000 	ldrb.w	r8, [r7]
    3812:	f1b8 0f00 	cmp.w	r8, #0
    3816:	d19b      	bne.n	3750 <bt_recv+0xa0>
	conn = bt_conn_lookup_handle(handle);
    3818:	4648      	mov	r0, r9
    381a:	f001 f971 	bl	4b00 <bt_conn_lookup_handle>
	if (!conn) {
    381e:	4606      	mov	r6, r0
    3820:	b9c0      	cbnz	r0, 3854 <bt_recv+0x1a4>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3822:	9502      	str	r5, [sp, #8]
    3824:	e88d 0220 	stmia.w	sp, {r5, r9}
    3828:	4b60      	ldr	r3, [pc, #384]	; (39ac <bt_recv+0x2fc>)
    382a:	4a5a      	ldr	r2, [pc, #360]	; (3994 <bt_recv+0x2e4>)
    382c:	4954      	ldr	r1, [pc, #336]	; (3980 <bt_recv+0x2d0>)
    382e:	4861      	ldr	r0, [pc, #388]	; (39b4 <bt_recv+0x304>)
    3830:	f7fd fbac 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3834:	2107      	movs	r1, #7
    3836:	4860      	ldr	r0, [pc, #384]	; (39b8 <bt_recv+0x308>)
    3838:	f7fe fcb6 	bl	21a8 <atomic_test_bit>
    383c:	2800      	cmp	r0, #0
    383e:	d087      	beq.n	3750 <bt_recv+0xa0>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3840:	2106      	movs	r1, #6
    3842:	485d      	ldr	r0, [pc, #372]	; (39b8 <bt_recv+0x308>)
    3844:	f7fe fcb0 	bl	21a8 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3848:	2800      	cmp	r0, #0
    384a:	d181      	bne.n	3750 <bt_recv+0xa0>
		set_advertise_enable(true);
    384c:	2001      	movs	r0, #1
    384e:	f7fe fe0b 	bl	2468 <set_advertise_enable>
    3852:	e77d      	b.n	3750 <bt_recv+0xa0>
	conn->err = evt->reason;
    3854:	78fb      	ldrb	r3, [r7, #3]
    3856:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3858:	4958      	ldr	r1, [pc, #352]	; (39bc <bt_recv+0x30c>)
    385a:	4859      	ldr	r0, [pc, #356]	; (39c0 <bt_recv+0x310>)
    385c:	f011 fd42 	bl	152e4 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3860:	4641      	mov	r1, r8
    3862:	4630      	mov	r0, r6
    3864:	f001 fa50 	bl	4d08 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    3868:	78b5      	ldrb	r5, [r6, #2]
	conn->handle = 0;
    386a:	f8a6 8000 	strh.w	r8, [r6]
	if (conn->type != BT_CONN_TYPE_LE) {
    386e:	b10d      	cbz	r5, 3874 <bt_recv+0x1c4>
	bt_conn_unref(conn);
    3870:	4630      	mov	r0, r6
    3872:	e0e7      	b.n	3a44 <bt_recv+0x394>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    3874:	4629      	mov	r1, r5
    3876:	1d30      	adds	r0, r6, #4
    3878:	f7fe fc96 	bl	21a8 <atomic_test_bit>
    387c:	b130      	cbz	r0, 388c <bt_recv+0x1dc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    387e:	4630      	mov	r0, r6
    3880:	2101      	movs	r1, #1
    3882:	f001 fa41 	bl	4d08 <bt_conn_set_state>
		bt_le_scan_update(false);
    3886:	4628      	mov	r0, r5
    3888:	f7fe fffc 	bl	2884 <bt_le_scan_update>
	bt_conn_unref(conn);
    388c:	4630      	mov	r0, r6
    388e:	f001 f985 	bl	4b9c <bt_conn_unref>
    3892:	e7cf      	b.n	3834 <bt_recv+0x184>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3894:	68a6      	ldr	r6, [r4, #8]
    3896:	f011 fb65 	bl	14f64 <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    389a:	9503      	str	r5, [sp, #12]
    389c:	7833      	ldrb	r3, [r6, #0]
    389e:	9302      	str	r3, [sp, #8]
    38a0:	9001      	str	r0, [sp, #4]
    38a2:	4b48      	ldr	r3, [pc, #288]	; (39c4 <bt_recv+0x314>)
    38a4:	4a35      	ldr	r2, [pc, #212]	; (397c <bt_recv+0x2cc>)
    38a6:	4936      	ldr	r1, [pc, #216]	; (3980 <bt_recv+0x2d0>)
    38a8:	9500      	str	r5, [sp, #0]
    38aa:	4847      	ldr	r0, [pc, #284]	; (39c8 <bt_recv+0x318>)
    38ac:	f7fd fb6e 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    38b0:	2101      	movs	r1, #1
    38b2:	4638      	mov	r0, r7
    38b4:	f010 fb2e 	bl	13f14 <net_buf_simple_pull>
	switch (evt->subevent) {
    38b8:	7836      	ldrb	r6, [r6, #0]
    38ba:	1e73      	subs	r3, r6, #1
    38bc:	2b0b      	cmp	r3, #11
    38be:	f200 8321 	bhi.w	3f04 <bt_recv+0x854>
    38c2:	e8df f013 	tbh	[pc, r3, lsl #1]
    38c6:	000c      	.short	0x000c
    38c8:	0089022f 	.word	0x0089022f
    38cc:	031f00c2 	.word	0x031f00c2
    38d0:	015700fb 	.word	0x015700fb
    38d4:	021301c2 	.word	0x021301c2
    38d8:	031f0087 	.word	0x031f0087
    38dc:	0189      	.short	0x0189
    38de:	68a6      	ldr	r6, [r4, #8]
    38e0:	f011 fb40 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u role %u %s", evt->status, evt->role,
    38e4:	1d37      	adds	r7, r6, #4
    38e6:	4680      	mov	r8, r0
    38e8:	4638      	mov	r0, r7
    38ea:	f896 9000 	ldrb.w	r9, [r6]
    38ee:	f896 a003 	ldrb.w	sl, [r6, #3]
    38f2:	f7fe fa2f 	bl	1d54 <bt_addr_le_str>
    38f6:	4a21      	ldr	r2, [pc, #132]	; (397c <bt_recv+0x2cc>)
    38f8:	9505      	str	r5, [sp, #20]
    38fa:	9004      	str	r0, [sp, #16]
    38fc:	e88d 0720 	stmia.w	sp, {r5, r8, r9, sl}
    3900:	4b32      	ldr	r3, [pc, #200]	; (39cc <bt_recv+0x31c>)
    3902:	491f      	ldr	r1, [pc, #124]	; (3980 <bt_recv+0x2d0>)
    3904:	4832      	ldr	r0, [pc, #200]	; (39d0 <bt_recv+0x320>)
    3906:	f7fd fb41 	bl	f8c <printk>
	enh.status         = evt->status;
    390a:	7833      	ldrb	r3, [r6, #0]
    390c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	enh.handle         = evt->handle;
    3910:	f8b6 3001 	ldrh.w	r3, [r6, #1]
    3914:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.role           = evt->role;
    3918:	78f3      	ldrb	r3, [r6, #3]
    391a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	enh.interval       = evt->interval;
    391e:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    3922:	f8ad 304f 	strh.w	r3, [sp, #79]	; 0x4f
	enh.latency        = evt->latency;
    3926:	f8b6 300d 	ldrh.w	r3, [r6, #13]
    392a:	f8ad 3051 	strh.w	r3, [sp, #81]	; 0x51
	enh.supv_timeout   = evt->supv_timeout;
    392e:	f8b6 300f 	ldrh.w	r3, [r6, #15]
    3932:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	enh.clock_accuracy = evt->clock_accuracy;
    3936:	7c73      	ldrb	r3, [r6, #17]
    3938:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    393c:	4639      	mov	r1, r7
    393e:	a80f      	add	r0, sp, #60	; 0x3c
    3940:	f7fe fb88 	bl	2054 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    3944:	2500      	movs	r5, #0
    3946:	2206      	movs	r2, #6
    3948:	a90a      	add	r1, sp, #40	; 0x28
    394a:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    394e:	950a      	str	r5, [sp, #40]	; 0x28
    3950:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    3954:	f7fe f952 	bl	1bfc <memcpy>
    3958:	2206      	movs	r2, #6
    395a:	a90c      	add	r1, sp, #48	; 0x30
    395c:	f10d 0049 	add.w	r0, sp, #73	; 0x49
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    3960:	950c      	str	r5, [sp, #48]	; 0x30
    3962:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    3966:	f7fe f949 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    396a:	a80e      	add	r0, sp, #56	; 0x38
		le_enh_conn_complete((void *)buf->data);
    396c:	f7ff fc50 	bl	3210 <le_enh_conn_complete>
    3970:	e6ee      	b.n	3750 <bt_recv+0xa0>
    3972:	bf00      	nop
    3974:	00015af1 	.word	0x00015af1
    3978:	00016406 	.word	0x00016406
    397c:	00016059 	.word	0x00016059
    3980:	00016060 	.word	0x00016060
    3984:	00016a23 	.word	0x00016a23
    3988:	00016142 	.word	0x00016142
    398c:	000165a3 	.word	0x000165a3
    3990:	00016a46 	.word	0x00016a46
    3994:	00016fae 	.word	0x00016fae
    3998:	00016a75 	.word	0x00016a75
    399c:	00016aa9 	.word	0x00016aa9
    39a0:	000162a6 	.word	0x000162a6
    39a4:	00016adb 	.word	0x00016adb
    39a8:	00016da3 	.word	0x00016da3
    39ac:	00016164 	.word	0x00016164
    39b0:	00016afd 	.word	0x00016afd
    39b4:	00016b30 	.word	0x00016b30
    39b8:	20003b70 	.word	0x20003b70
    39bc:	00016b66 	.word	0x00016b66
    39c0:	00002019 	.word	0x00002019
    39c4:	00016294 	.word	0x00016294
    39c8:	00016b6a 	.word	0x00016b6a
    39cc:	0001618e 	.word	0x0001618e
    39d0:	00016b8f 	.word	0x00016b8f
    39d4:	68a0      	ldr	r0, [r4, #8]
    39d6:	e7c9      	b.n	396c <bt_recv+0x2bc>
    39d8:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    39da:	f8b6 8001 	ldrh.w	r8, [r6, #1]
    39de:	f011 fac1 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status %u, handle %u", evt->status, handle);
    39e2:	9504      	str	r5, [sp, #16]
    39e4:	f8cd 800c 	str.w	r8, [sp, #12]
    39e8:	7833      	ldrb	r3, [r6, #0]
    39ea:	9302      	str	r3, [sp, #8]
    39ec:	9001      	str	r0, [sp, #4]
    39ee:	4bad      	ldr	r3, [pc, #692]	; (3ca4 <bt_recv+0x5f4>)
    39f0:	4aad      	ldr	r2, [pc, #692]	; (3ca8 <bt_recv+0x5f8>)
    39f2:	49ae      	ldr	r1, [pc, #696]	; (3cac <bt_recv+0x5fc>)
    39f4:	9500      	str	r5, [sp, #0]
    39f6:	48ae      	ldr	r0, [pc, #696]	; (3cb0 <bt_recv+0x600>)
    39f8:	f7fd fac8 	bl	f8c <printk>
	conn = bt_conn_lookup_handle(handle);
    39fc:	4640      	mov	r0, r8
    39fe:	f001 f87f 	bl	4b00 <bt_conn_lookup_handle>
	if (!conn) {
    3a02:	4607      	mov	r7, r0
    3a04:	b938      	cbnz	r0, 3a16 <bt_recv+0x366>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a06:	e88d 0120 	stmia.w	sp, {r5, r8}
    3a0a:	4ba6      	ldr	r3, [pc, #664]	; (3ca4 <bt_recv+0x5f4>)
    3a0c:	9502      	str	r5, [sp, #8]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a0e:	4aa9      	ldr	r2, [pc, #676]	; (3cb4 <bt_recv+0x604>)
    3a10:	49a6      	ldr	r1, [pc, #664]	; (3cac <bt_recv+0x5fc>)
    3a12:	48a9      	ldr	r0, [pc, #676]	; (3cb8 <bt_recv+0x608>)
    3a14:	e6ad      	b.n	3772 <bt_recv+0xc2>
	if (!evt->status) {
    3a16:	7833      	ldrb	r3, [r6, #0]
    3a18:	b99b      	cbnz	r3, 3a42 <bt_recv+0x392>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3a1a:	7932      	ldrb	r2, [r6, #4]
    3a1c:	78f3      	ldrb	r3, [r6, #3]
    3a1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a22:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3a26:	79b2      	ldrb	r2, [r6, #6]
    3a28:	7973      	ldrb	r3, [r6, #5]
    3a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a2e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3a32:	79f3      	ldrb	r3, [r6, #7]
    3a34:	7a32      	ldrb	r2, [r6, #8]
    3a36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a3a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    3a3e:	f000 fd73 	bl	4528 <notify_le_param_updated>
	bt_conn_unref(conn);
    3a42:	4638      	mov	r0, r7
	bt_conn_unref(conn);
    3a44:	f001 f8aa 	bl	4b9c <bt_conn_unref>
    3a48:	e682      	b.n	3750 <bt_recv+0xa0>
    3a4a:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3a4c:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3a50:	4640      	mov	r0, r8
    3a52:	f001 f855 	bl	4b00 <bt_conn_lookup_handle>
	if (!conn) {
    3a56:	4606      	mov	r6, r0
    3a58:	b920      	cbnz	r0, 3a64 <bt_recv+0x3b4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a5a:	9502      	str	r5, [sp, #8]
    3a5c:	e88d 0120 	stmia.w	sp, {r5, r8}
    3a60:	4b96      	ldr	r3, [pc, #600]	; (3cbc <bt_recv+0x60c>)
    3a62:	e7d4      	b.n	3a0e <bt_recv+0x35e>
	if (!evt->status) {
    3a64:	783b      	ldrb	r3, [r7, #0]
    3a66:	b923      	cbnz	r3, 3a72 <bt_recv+0x3c2>
		memcpy(conn->le.features, evt->features,
    3a68:	2208      	movs	r2, #8
    3a6a:	1cf9      	adds	r1, r7, #3
    3a6c:	3064      	adds	r0, #100	; 0x64
    3a6e:	f7fe f8c5 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    3a72:	4d93      	ldr	r5, [pc, #588]	; (3cc0 <bt_recv+0x610>)
    3a74:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3a78:	07d2      	lsls	r2, r2, #31
    3a7a:	d50c      	bpl.n	3a96 <bt_recv+0x3e6>
    3a7c:	f896 3065 	ldrb.w	r3, [r6, #101]	; 0x65
    3a80:	07db      	lsls	r3, r3, #31
    3a82:	d508      	bpl.n	3a96 <bt_recv+0x3e6>
		err = hci_le_set_phy(conn);
    3a84:	4630      	mov	r0, r6
    3a86:	f7ff fb79 	bl	317c <hci_le_set_phy.isra.28>
		if (!err) {
    3a8a:	b920      	cbnz	r0, 3a96 <bt_recv+0x3e6>
    3a8c:	2180      	movs	r1, #128	; 0x80
    3a8e:	1d30      	adds	r0, r6, #4
    3a90:	f7fe fae3 	bl	205a <atomic_or>
    3a94:	e6ec      	b.n	3870 <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3a96:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3a9a:	069f      	lsls	r7, r3, #26
    3a9c:	f140 8098 	bpl.w	3bd0 <bt_recv+0x520>
    3aa0:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    3aa4:	069d      	lsls	r5, r3, #26
    3aa6:	f140 8093 	bpl.w	3bd0 <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    3aaa:	4630      	mov	r0, r6
    3aac:	f7ff fb86 	bl	31bc <hci_le_set_data_len.isra.29>
		if (!err) {
    3ab0:	2800      	cmp	r0, #0
    3ab2:	f040 808d 	bne.w	3bd0 <bt_recv+0x520>
    3ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
    3aba:	e7e8      	b.n	3a8e <bt_recv+0x3de>
    3abc:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3abe:	78d9      	ldrb	r1, [r3, #3]
    3ac0:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    3ac2:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3ac4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3ac8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3acc:	7959      	ldrb	r1, [r3, #5]
    3ace:	791a      	ldrb	r2, [r3, #4]
    3ad0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3ad4:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
	param.latency = sys_le16_to_cpu(evt->latency);
    3ad8:	799a      	ldrb	r2, [r3, #6]
    3ada:	79d9      	ldrb	r1, [r3, #7]
    3adc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3ae0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3ae4:	7a1a      	ldrb	r2, [r3, #8]
    3ae6:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3ae8:	b2be      	uxth	r6, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3aea:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    3aee:	4630      	mov	r0, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3af0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	conn = bt_conn_lookup_handle(handle);
    3af4:	f001 f804 	bl	4b00 <bt_conn_lookup_handle>
	if (!conn) {
    3af8:	4680      	mov	r8, r0
    3afa:	b968      	cbnz	r0, 3b18 <bt_recv+0x468>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3afc:	9502      	str	r5, [sp, #8]
    3afe:	e88d 0060 	stmia.w	sp, {r5, r6}
    3b02:	4b70      	ldr	r3, [pc, #448]	; (3cc4 <bt_recv+0x614>)
    3b04:	4a6b      	ldr	r2, [pc, #428]	; (3cb4 <bt_recv+0x604>)
    3b06:	4969      	ldr	r1, [pc, #420]	; (3cac <bt_recv+0x5fc>)
    3b08:	486b      	ldr	r0, [pc, #428]	; (3cb8 <bt_recv+0x608>)
    3b0a:	f7fd fa3f 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    3b0e:	2102      	movs	r1, #2
    3b10:	4630      	mov	r0, r6
    3b12:	f7ff fc77 	bl	3404 <le_conn_param_neg_reply>
    3b16:	e61b      	b.n	3750 <bt_recv+0xa0>
	if (!le_param_req(conn, &param)) {
    3b18:	a90e      	add	r1, sp, #56	; 0x38
    3b1a:	f000 fd19 	bl	4550 <le_param_req>
    3b1e:	b928      	cbnz	r0, 3b2c <bt_recv+0x47c>
		err = le_conn_param_neg_reply(handle,
    3b20:	211e      	movs	r1, #30
    3b22:	4630      	mov	r0, r6
    3b24:	f7ff fc6e 	bl	3404 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3b28:	4640      	mov	r0, r8
    3b2a:	e78b      	b.n	3a44 <bt_recv+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3b2c:	210e      	movs	r1, #14
    3b2e:	f242 0020 	movw	r0, #8224	; 0x2020
    3b32:	f7fe fb47 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    3b36:	4606      	mov	r6, r0
    3b38:	2800      	cmp	r0, #0
    3b3a:	d0f5      	beq.n	3b28 <bt_recv+0x478>
	cp = net_buf_add(buf, sizeof(*cp));
    3b3c:	210e      	movs	r1, #14
    3b3e:	3008      	adds	r0, #8
    3b40:	f010 f9ba 	bl	13eb8 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3b44:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    3b46:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    3b48:	2100      	movs	r1, #0
    3b4a:	f7fe f883 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3b4e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    3b52:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    3b54:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    3b58:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3b5a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    3b5e:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3b60:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
	cp->handle = sys_cpu_to_le16(handle);
    3b64:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3b66:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    3b68:	4631      	mov	r1, r6
    3b6a:	f242 0020 	movw	r0, #8224	; 0x2020
    3b6e:	f7fe fd7b 	bl	2668 <bt_hci_cmd_send>
    3b72:	e7d9      	b.n	3b28 <bt_recv+0x478>
    3b74:	68a3      	ldr	r3, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3b76:	f8b3 b000 	ldrh.w	fp, [r3]
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    3b7a:	885f      	ldrh	r7, [r3, #2]
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    3b7c:	f8b3 9006 	ldrh.w	r9, [r3, #6]
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    3b80:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    3b84:	f8b3 a008 	ldrh.w	sl, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
    3b88:	4658      	mov	r0, fp
    3b8a:	f000 ffb9 	bl	4b00 <bt_conn_lookup_handle>
	if (!conn) {
    3b8e:	4606      	mov	r6, r0
    3b90:	b920      	cbnz	r0, 3b9c <bt_recv+0x4ec>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3b92:	9502      	str	r5, [sp, #8]
    3b94:	e88d 0820 	stmia.w	sp, {r5, fp}
    3b98:	4b4b      	ldr	r3, [pc, #300]	; (3cc8 <bt_recv+0x618>)
    3b9a:	e738      	b.n	3a0e <bt_recv+0x35e>
    3b9c:	f011 f9e2 	bl	14f64 <_impl_k_current_get>
	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
    3ba0:	4b49      	ldr	r3, [pc, #292]	; (3cc8 <bt_recv+0x618>)
    3ba2:	9001      	str	r0, [sp, #4]
    3ba4:	4a40      	ldr	r2, [pc, #256]	; (3ca8 <bt_recv+0x5f8>)
    3ba6:	4941      	ldr	r1, [pc, #260]	; (3cac <bt_recv+0x5fc>)
    3ba8:	9506      	str	r5, [sp, #24]
    3baa:	f8cd a014 	str.w	sl, [sp, #20]
    3bae:	f8cd 9010 	str.w	r9, [sp, #16]
    3bb2:	f8cd 800c 	str.w	r8, [sp, #12]
    3bb6:	9702      	str	r7, [sp, #8]
    3bb8:	9500      	str	r5, [sp, #0]
    3bba:	4844      	ldr	r0, [pc, #272]	; (3ccc <bt_recv+0x61c>)
    3bbc:	f7fd f9e6 	bl	f8c <printk>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3bc0:	f46f 7180 	mvn.w	r1, #256	; 0x100
    3bc4:	1d30      	adds	r0, r6, #4
    3bc6:	f7fe fa59 	bl	207c <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3bca:	05c0      	lsls	r0, r0, #23
    3bcc:	f57f ae50 	bpl.w	3870 <bt_recv+0x1c0>
	update_conn_param(conn);
    3bd0:	4630      	mov	r0, r6
    3bd2:	f7fe fa65 	bl	20a0 <update_conn_param>
    3bd6:	e64b      	b.n	3870 <bt_recv+0x1c0>
    3bd8:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3bda:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3bde:	4640      	mov	r0, r8
    3be0:	f000 ff8e 	bl	4b00 <bt_conn_lookup_handle>
	if (!conn) {
    3be4:	4606      	mov	r6, r0
    3be6:	b920      	cbnz	r0, 3bf2 <bt_recv+0x542>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3be8:	9502      	str	r5, [sp, #8]
    3bea:	e88d 0120 	stmia.w	sp, {r5, r8}
    3bee:	4b38      	ldr	r3, [pc, #224]	; (3cd0 <bt_recv+0x620>)
    3bf0:	e70d      	b.n	3a0e <bt_recv+0x35e>
    3bf2:	f011 f9b7 	bl	14f64 <_impl_k_current_get>
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3bf6:	9505      	str	r5, [sp, #20]
    3bf8:	793b      	ldrb	r3, [r7, #4]
    3bfa:	9304      	str	r3, [sp, #16]
    3bfc:	78fb      	ldrb	r3, [r7, #3]
    3bfe:	9303      	str	r3, [sp, #12]
    3c00:	783b      	ldrb	r3, [r7, #0]
    3c02:	9302      	str	r3, [sp, #8]
    3c04:	9001      	str	r0, [sp, #4]
    3c06:	9500      	str	r5, [sp, #0]
    3c08:	4b31      	ldr	r3, [pc, #196]	; (3cd0 <bt_recv+0x620>)
    3c0a:	4a27      	ldr	r2, [pc, #156]	; (3ca8 <bt_recv+0x5f8>)
    3c0c:	4927      	ldr	r1, [pc, #156]	; (3cac <bt_recv+0x5fc>)
    3c0e:	4831      	ldr	r0, [pc, #196]	; (3cd4 <bt_recv+0x624>)
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3c10:	1d35      	adds	r5, r6, #4
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3c12:	f7fd f9bb 	bl	f8c <printk>
    3c16:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3c1a:	4628      	mov	r0, r5
    3c1c:	f7fe fa2e 	bl	207c <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3c20:	0601      	lsls	r1, r0, #24
    3c22:	f57f ae25 	bpl.w	3870 <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3c26:	4b26      	ldr	r3, [pc, #152]	; (3cc0 <bt_recv+0x610>)
    3c28:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3c2c:	069a      	lsls	r2, r3, #26
    3c2e:	d5cf      	bpl.n	3bd0 <bt_recv+0x520>
    3c30:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    3c34:	069b      	lsls	r3, r3, #26
    3c36:	d5cb      	bpl.n	3bd0 <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    3c38:	4630      	mov	r0, r6
    3c3a:	f7ff fabf 	bl	31bc <hci_le_set_data_len.isra.29>
		if (!err) {
    3c3e:	2800      	cmp	r0, #0
    3c40:	d1c6      	bne.n	3bd0 <bt_recv+0x520>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3c42:	f44f 7180 	mov.w	r1, #256	; 0x100
    3c46:	4628      	mov	r0, r5
    3c48:	e722      	b.n	3a90 <bt_recv+0x3e0>
    3c4a:	68a6      	ldr	r6, [r4, #8]
    3c4c:	f011 f98a 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3c50:	9503      	str	r5, [sp, #12]
    3c52:	7833      	ldrb	r3, [r6, #0]
    3c54:	9302      	str	r3, [sp, #8]
    3c56:	9001      	str	r0, [sp, #4]
    3c58:	4b1f      	ldr	r3, [pc, #124]	; (3cd8 <bt_recv+0x628>)
    3c5a:	4a13      	ldr	r2, [pc, #76]	; (3ca8 <bt_recv+0x5f8>)
    3c5c:	4913      	ldr	r1, [pc, #76]	; (3cac <bt_recv+0x5fc>)
    3c5e:	9500      	str	r5, [sp, #0]
    3c60:	481e      	ldr	r0, [pc, #120]	; (3cdc <bt_recv+0x62c>)
    3c62:	f7fd f993 	bl	f8c <printk>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3c66:	f06f 0120 	mvn.w	r1, #32
    3c6a:	481d      	ldr	r0, [pc, #116]	; (3ce0 <bt_recv+0x630>)
    3c6c:	f7fe fa06 	bl	207c <atomic_and>
	if (!evt->status) {
    3c70:	7833      	ldrb	r3, [r6, #0]
    3c72:	b943      	cbnz	r3, 3c86 <bt_recv+0x5d6>
		memcpy(pub_key, evt->key, 64);
    3c74:	1c71      	adds	r1, r6, #1
    3c76:	2240      	movs	r2, #64	; 0x40
    3c78:	481a      	ldr	r0, [pc, #104]	; (3ce4 <bt_recv+0x634>)
    3c7a:	f7fd ffbf 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3c7e:	2110      	movs	r1, #16
    3c80:	4817      	ldr	r0, [pc, #92]	; (3ce0 <bt_recv+0x630>)
    3c82:	f7fe f9ea 	bl	205a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3c86:	4b18      	ldr	r3, [pc, #96]	; (3ce8 <bt_recv+0x638>)
    3c88:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3c8a:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3c8c:	2d00      	cmp	r5, #0
    3c8e:	f43f ad5f 	beq.w	3750 <bt_recv+0xa0>
		cb->func(evt->status ? NULL : evt->key);
    3c92:	7832      	ldrb	r2, [r6, #0]
    3c94:	682b      	ldr	r3, [r5, #0]
    3c96:	2a00      	cmp	r2, #0
    3c98:	bf0c      	ite	eq
    3c9a:	4638      	moveq	r0, r7
    3c9c:	2000      	movne	r0, #0
    3c9e:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3ca0:	686d      	ldr	r5, [r5, #4]
    3ca2:	e7f3      	b.n	3c8c <bt_recv+0x5dc>
    3ca4:	000161fa 	.word	0x000161fa
    3ca8:	00016059 	.word	0x00016059
    3cac:	00016060 	.word	0x00016060
    3cb0:	00016bb9 	.word	0x00016bb9
    3cb4:	00016fae 	.word	0x00016fae
    3cb8:	00016be3 	.word	0x00016be3
    3cbc:	000161a6 	.word	0x000161a6
    3cc0:	20003b00 	.word	0x20003b00
    3cc4:	000161e8 	.word	0x000161e8
    3cc8:	000161be 	.word	0x000161be
    3ccc:	00016c17 	.word	0x00016c17
    3cd0:	000161d1 	.word	0x000161d1
    3cd4:	00016c53 	.word	0x00016c53
    3cd8:	00016223 	.word	0x00016223
    3cdc:	00016c92 	.word	0x00016c92
    3ce0:	20003b70 	.word	0x20003b70
    3ce4:	20000290 	.word	0x20000290
    3ce8:	200002d0 	.word	0x200002d0
    3cec:	68a6      	ldr	r6, [r4, #8]
    3cee:	f011 f939 	bl	14f64 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3cf2:	9503      	str	r5, [sp, #12]
    3cf4:	7833      	ldrb	r3, [r6, #0]
    3cf6:	9500      	str	r5, [sp, #0]
	if (dh_key_cb) {
    3cf8:	4da0      	ldr	r5, [pc, #640]	; (3f7c <bt_recv+0x8cc>)
	BT_DBG("status: 0x%x", evt->status);
    3cfa:	9302      	str	r3, [sp, #8]
    3cfc:	9001      	str	r0, [sp, #4]
    3cfe:	4aa0      	ldr	r2, [pc, #640]	; (3f80 <bt_recv+0x8d0>)
    3d00:	4ba0      	ldr	r3, [pc, #640]	; (3f84 <bt_recv+0x8d4>)
    3d02:	49a1      	ldr	r1, [pc, #644]	; (3f88 <bt_recv+0x8d8>)
    3d04:	48a1      	ldr	r0, [pc, #644]	; (3f8c <bt_recv+0x8dc>)
    3d06:	f7fd f941 	bl	f8c <printk>
	if (dh_key_cb) {
    3d0a:	682a      	ldr	r2, [r5, #0]
    3d0c:	2a00      	cmp	r2, #0
    3d0e:	f43f ad1f 	beq.w	3750 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3d12:	7833      	ldrb	r3, [r6, #0]
    3d14:	b923      	cbnz	r3, 3d20 <bt_recv+0x670>
    3d16:	1c70      	adds	r0, r6, #1
    3d18:	4790      	blx	r2
		dh_key_cb = NULL;
    3d1a:	2300      	movs	r3, #0
    3d1c:	602b      	str	r3, [r5, #0]
    3d1e:	e517      	b.n	3750 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3d20:	2000      	movs	r0, #0
    3d22:	e7f9      	b.n	3d18 <bt_recv+0x668>
	u8_t num_reports = net_buf_pull_u8(buf);
    3d24:	4638      	mov	r0, r7
    3d26:	f010 f8fd 	bl	13f24 <net_buf_simple_pull_u8>
    3d2a:	4680      	mov	r8, r0
    3d2c:	f011 f91a 	bl	14f64 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3d30:	9503      	str	r5, [sp, #12]
    3d32:	9001      	str	r0, [sp, #4]
    3d34:	f8cd 8008 	str.w	r8, [sp, #8]
    3d38:	9500      	str	r5, [sp, #0]
    3d3a:	4b95      	ldr	r3, [pc, #596]	; (3f90 <bt_recv+0x8e0>)
    3d3c:	4a90      	ldr	r2, [pc, #576]	; (3f80 <bt_recv+0x8d0>)
    3d3e:	4992      	ldr	r1, [pc, #584]	; (3f88 <bt_recv+0x8d8>)
    3d40:	4894      	ldr	r0, [pc, #592]	; (3f94 <bt_recv+0x8e4>)
    3d42:	f7fd f923 	bl	f8c <printk>
	while (num_reports--) {
    3d46:	f1b8 0f00 	cmp.w	r8, #0
    3d4a:	f43f ad01 	beq.w	3750 <bt_recv+0xa0>
		info = (void *)buf->data;
    3d4e:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3d50:	2109      	movs	r1, #9
    3d52:	4638      	mov	r0, r7
    3d54:	f010 f8de 	bl	13f14 <net_buf_simple_pull>
		rssi = info->data[info->length];
    3d58:	7a33      	ldrb	r3, [r6, #8]
    3d5a:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3d5c:	f106 0901 	add.w	r9, r6, #1
		rssi = info->data[info->length];
    3d60:	f993 a009 	ldrsb.w	sl, [r3, #9]
    3d64:	f011 f8fe 	bl	14f64 <_impl_k_current_get>
    3d68:	4683      	mov	fp, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3d6a:	4648      	mov	r0, r9
    3d6c:	f7fd fff2 	bl	1d54 <bt_addr_le_str>
    3d70:	9506      	str	r5, [sp, #24]
    3d72:	f8cd a014 	str.w	sl, [sp, #20]
    3d76:	7a33      	ldrb	r3, [r6, #8]
    3d78:	9304      	str	r3, [sp, #16]
    3d7a:	7833      	ldrb	r3, [r6, #0]
    3d7c:	9303      	str	r3, [sp, #12]
    3d7e:	9002      	str	r0, [sp, #8]
    3d80:	4b83      	ldr	r3, [pc, #524]	; (3f90 <bt_recv+0x8e0>)
    3d82:	4981      	ldr	r1, [pc, #516]	; (3f88 <bt_recv+0x8d8>)
    3d84:	4a7e      	ldr	r2, [pc, #504]	; (3f80 <bt_recv+0x8d0>)
    3d86:	4884      	ldr	r0, [pc, #528]	; (3f98 <bt_recv+0x8e8>)
    3d88:	e88d 0820 	stmia.w	sp, {r5, fp}
    3d8c:	f7fd f8fe 	bl	f8c <printk>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3d90:	7873      	ldrb	r3, [r6, #1]
    3d92:	3b02      	subs	r3, #2
    3d94:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3d96:	4649      	mov	r1, r9
    3d98:	a80e      	add	r0, sp, #56	; 0x38
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3d9a:	f200 809d 	bhi.w	3ed8 <bt_recv+0x828>
			bt_addr_le_copy(&id_addr, &info->addr);
    3d9e:	f7fe f959 	bl	2054 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3da2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3da6:	3b02      	subs	r3, #2
    3da8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		if (scan_dev_found_cb) {
    3dac:	f8df b218 	ldr.w	fp, [pc, #536]	; 3fc8 <bt_recv+0x918>
    3db0:	f8db 3000 	ldr.w	r3, [fp]
    3db4:	b1bb      	cbz	r3, 3de6 <bt_recv+0x736>
	state->offset = net_buf_simple_headroom(buf);
    3db6:	4638      	mov	r0, r7
    3db8:	f010 f8c4 	bl	13f44 <net_buf_simple_headroom>
	state->len = buf->len;
    3dbc:	89a3      	ldrh	r3, [r4, #12]
    3dbe:	9309      	str	r3, [sp, #36]	; 0x24
			buf->len = info->length;
    3dc0:	7a33      	ldrb	r3, [r6, #8]
    3dc2:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3dc4:	9008      	str	r0, [sp, #32]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3dc6:	463b      	mov	r3, r7
    3dc8:	7832      	ldrb	r2, [r6, #0]
    3dca:	f8db b000 	ldr.w	fp, [fp]
    3dce:	4651      	mov	r1, sl
    3dd0:	a80e      	add	r0, sp, #56	; 0x38
    3dd2:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    3dd4:	6923      	ldr	r3, [r4, #16]
    3dd6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    3dda:	fa13 f382 	uxtah	r3, r3, r2
    3dde:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3de0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3de4:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3de6:	2109      	movs	r1, #9
    3de8:	486c      	ldr	r0, [pc, #432]	; (3f9c <bt_recv+0x8ec>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3dea:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3dec:	f7fe f9dc 	bl	21a8 <atomic_test_bit>
    3df0:	4683      	mov	fp, r0
    3df2:	2800      	cmp	r0, #0
    3df4:	d166      	bne.n	3ec4 <bt_recv+0x814>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3df6:	2a01      	cmp	r2, #1
    3df8:	d864      	bhi.n	3ec4 <bt_recv+0x814>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3dfa:	2101      	movs	r1, #1
    3dfc:	a80e      	add	r0, sp, #56	; 0x38
    3dfe:	f000 feaf 	bl	4b60 <bt_conn_lookup_state_le>
	if (!conn) {
    3e02:	4682      	mov	sl, r0
    3e04:	2800      	cmp	r0, #0
    3e06:	d05d      	beq.n	3ec4 <bt_recv+0x814>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3e08:	2108      	movs	r1, #8
    3e0a:	4864      	ldr	r0, [pc, #400]	; (3f9c <bt_recv+0x8ec>)
    3e0c:	f7fe f9cc 	bl	21a8 <atomic_test_bit>
    3e10:	2800      	cmp	r0, #0
    3e12:	d164      	bne.n	3ede <bt_recv+0x82e>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3e14:	2102      	movs	r1, #2
    3e16:	4861      	ldr	r0, [pc, #388]	; (3f9c <bt_recv+0x8ec>)
    3e18:	f7fe f9c6 	bl	21a8 <atomic_test_bit>
    3e1c:	b110      	cbz	r0, 3e24 <bt_recv+0x774>
			set_random_address(&bt_dev.id_addr.a);
    3e1e:	4860      	ldr	r0, [pc, #384]	; (3fa0 <bt_recv+0x8f0>)
    3e20:	f7fe fad8 	bl	23d4 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3e24:	495f      	ldr	r1, [pc, #380]	; (3fa4 <bt_recv+0x8f4>)
    3e26:	f10a 004b 	add.w	r0, sl, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3e2a:	f10a 0b52 	add.w	fp, sl, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3e2e:	f7fe f911 	bl	2054 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3e32:	4649      	mov	r1, r9
    3e34:	4658      	mov	r0, fp
    3e36:	f7fe f90d 	bl	2054 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3e3a:	2119      	movs	r1, #25
    3e3c:	f242 000d 	movw	r0, #8205	; 0x200d
    3e40:	f7fe f9c0 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    3e44:	4603      	mov	r3, r0
    3e46:	2800      	cmp	r0, #0
    3e48:	d04e      	beq.n	3ee8 <bt_recv+0x838>
	cp = net_buf_add(buf, sizeof(*cp));
    3e4a:	2119      	movs	r1, #25
    3e4c:	3008      	adds	r0, #8
    3e4e:	9309      	str	r3, [sp, #36]	; 0x24
    3e50:	f010 f832 	bl	13eb8 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3e54:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3e56:	4681      	mov	r9, r0
	memset(cp, 0, sizeof(*cp));
    3e58:	2100      	movs	r1, #0
    3e5a:	f7fd fefb 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3e5e:	2200      	movs	r2, #0
    3e60:	2160      	movs	r1, #96	; 0x60
    3e62:	f889 1000 	strb.w	r1, [r9]
    3e66:	f889 2001 	strb.w	r2, [r9, #1]
	cp->scan_window = cp->scan_interval;
    3e6a:	f889 1002 	strb.w	r1, [r9, #2]
    3e6e:	f889 2003 	strb.w	r2, [r9, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3e72:	4659      	mov	r1, fp
    3e74:	f109 0005 	add.w	r0, r9, #5
	cp->scan_window = cp->scan_interval;
    3e78:	9208      	str	r2, [sp, #32]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3e7a:	f7fe f8eb 	bl	2054 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3e7e:	f89a 104b 	ldrb.w	r1, [sl, #75]	; 0x4b
    3e82:	f889 100c 	strb.w	r1, [r9, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3e86:	f8ba 105c 	ldrh.w	r1, [sl, #92]	; 0x5c
    3e8a:	f8a9 100d 	strh.w	r1, [r9, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3e8e:	f8ba 105e 	ldrh.w	r1, [sl, #94]	; 0x5e
    3e92:	f8a9 100f 	strh.w	r1, [r9, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3e96:	f8ba 1060 	ldrh.w	r1, [sl, #96]	; 0x60
    3e9a:	f8a9 1011 	strh.w	r1, [r9, #17]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3ea0:	f8ba 1062 	ldrh.w	r1, [sl, #98]	; 0x62
    3ea4:	f8a9 1013 	strh.w	r1, [r9, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3ea8:	9a08      	ldr	r2, [sp, #32]
    3eaa:	4619      	mov	r1, r3
    3eac:	f242 000d 	movw	r0, #8205	; 0x200d
    3eb0:	f7fe f9e6 	bl	2280 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3eb4:	b9c0      	cbnz	r0, 3ee8 <bt_recv+0x838>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3eb6:	4650      	mov	r0, sl
    3eb8:	2102      	movs	r1, #2
    3eba:	f000 ff25 	bl	4d08 <bt_conn_set_state>
	bt_conn_unref(conn);
    3ebe:	4650      	mov	r0, sl
    3ec0:	f000 fe6c 	bl	4b9c <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3ec4:	7a31      	ldrb	r1, [r6, #8]
    3ec6:	4638      	mov	r0, r7
    3ec8:	3101      	adds	r1, #1
    3eca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3ece:	f010 f821 	bl	13f14 <net_buf_simple_pull>
    3ed2:	fa5f f888 	uxtb.w	r8, r8
    3ed6:	e736      	b.n	3d46 <bt_recv+0x696>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3ed8:	f7fe f8bc 	bl	2054 <bt_addr_le_copy>
    3edc:	e766      	b.n	3dac <bt_recv+0x6fc>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3ede:	4658      	mov	r0, fp
    3ee0:	f7fe fa42 	bl	2368 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3ee4:	2800      	cmp	r0, #0
    3ee6:	d095      	beq.n	3e14 <bt_recv+0x764>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3ee8:	231f      	movs	r3, #31
    3eea:	f88a 3008 	strb.w	r3, [sl, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3eee:	2100      	movs	r1, #0
    3ef0:	4650      	mov	r0, sl
    3ef2:	f000 ff09 	bl	4d08 <bt_conn_set_state>
	bt_conn_unref(conn);
    3ef6:	4650      	mov	r0, sl
    3ef8:	f000 fe50 	bl	4b9c <bt_conn_unref>
	bt_le_scan_update(false);
    3efc:	2000      	movs	r0, #0
    3efe:	f7fe fcc1 	bl	2884 <bt_le_scan_update>
    3f02:	e7df      	b.n	3ec4 <bt_recv+0x814>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3f04:	89a7      	ldrh	r7, [r4, #12]
    3f06:	68a0      	ldr	r0, [r4, #8]
    3f08:	4639      	mov	r1, r7
    3f0a:	f7fd fec7 	bl	1c9c <bt_hex>
    3f0e:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3f12:	9003      	str	r0, [sp, #12]
    3f14:	4b24      	ldr	r3, [pc, #144]	; (3fa8 <bt_recv+0x8f8>)
    3f16:	4a25      	ldr	r2, [pc, #148]	; (3fac <bt_recv+0x8fc>)
    3f18:	491b      	ldr	r1, [pc, #108]	; (3f88 <bt_recv+0x8d8>)
    3f1a:	4825      	ldr	r0, [pc, #148]	; (3fb0 <bt_recv+0x900>)
    3f1c:	9504      	str	r5, [sp, #16]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3f1e:	f7fd f835 	bl	f8c <printk>
    3f22:	e415      	b.n	3750 <bt_recv+0xa0>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3f24:	4b23      	ldr	r3, [pc, #140]	; (3fb4 <bt_recv+0x904>)
    3f26:	4a24      	ldr	r2, [pc, #144]	; (3fb8 <bt_recv+0x908>)
    3f28:	4917      	ldr	r1, [pc, #92]	; (3f88 <bt_recv+0x8d8>)
    3f2a:	9602      	str	r6, [sp, #8]
    3f2c:	e88d 00c0 	stmia.w	sp, {r6, r7}
    3f30:	4822      	ldr	r0, [pc, #136]	; (3fbc <bt_recv+0x90c>)
    3f32:	f7fd f82b 	bl	f8c <printk>
		net_buf_unref(buf);
    3f36:	4620      	mov	r0, r4
    3f38:	f00f ff8c 	bl	13e54 <net_buf_unref>
		return -EINVAL;
    3f3c:	f06f 0015 	mvn.w	r0, #21
    3f40:	e426      	b.n	3790 <bt_recv+0xe0>
	net_buf_pull(buf, sizeof(*hdr));
    3f42:	f104 0708 	add.w	r7, r4, #8
    3f46:	2102      	movs	r1, #2
    3f48:	4638      	mov	r0, r7
    3f4a:	f00f ffe3 	bl	13f14 <net_buf_simple_pull>
	switch (hdr->evt) {
    3f4e:	f898 6000 	ldrb.w	r6, [r8]
    3f52:	2e05      	cmp	r6, #5
    3f54:	f43f ac47 	beq.w	37e6 <bt_recv+0x136>
    3f58:	2e3e      	cmp	r6, #62	; 0x3e
    3f5a:	f43f ac9b 	beq.w	3894 <bt_recv+0x1e4>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3f5e:	89a7      	ldrh	r7, [r4, #12]
    3f60:	68a0      	ldr	r0, [r4, #8]
    3f62:	4639      	mov	r1, r7
    3f64:	f7fd fe9a 	bl	1c9c <bt_hex>
    3f68:	9504      	str	r5, [sp, #16]
    3f6a:	9003      	str	r0, [sp, #12]
    3f6c:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3f70:	4b13      	ldr	r3, [pc, #76]	; (3fc0 <bt_recv+0x910>)
    3f72:	4a0e      	ldr	r2, [pc, #56]	; (3fac <bt_recv+0x8fc>)
    3f74:	4904      	ldr	r1, [pc, #16]	; (3f88 <bt_recv+0x8d8>)
    3f76:	4813      	ldr	r0, [pc, #76]	; (3fc4 <bt_recv+0x914>)
    3f78:	e7d1      	b.n	3f1e <bt_recv+0x86e>
    3f7a:	bf00      	nop
    3f7c:	2000028c 	.word	0x2000028c
    3f80:	00016059 	.word	0x00016059
    3f84:	00016234 	.word	0x00016234
    3f88:	00016060 	.word	0x00016060
    3f8c:	00016c92 	.word	0x00016c92
    3f90:	00016286 	.word	0x00016286
    3f94:	00016cb4 	.word	0x00016cb4
    3f98:	00016ce2 	.word	0x00016ce2
    3f9c:	20003b70 	.word	0x20003b70
    3fa0:	20003b01 	.word	0x20003b01
    3fa4:	20003b00 	.word	0x20003b00
    3fa8:	00016294 	.word	0x00016294
    3fac:	0001702e 	.word	0x0001702e
    3fb0:	00016d18 	.word	0x00016d18
    3fb4:	00016406 	.word	0x00016406
    3fb8:	00016fae 	.word	0x00016fae
    3fbc:	00016d7f 	.word	0x00016d7f
    3fc0:	000162a6 	.word	0x000162a6
    3fc4:	00016d4d 	.word	0x00016d4d
    3fc8:	200002d8 	.word	0x200002d8

00003fcc <bt_recv_prio>:
{
    3fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3fd0:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3fd2:	6887      	ldr	r7, [r0, #8]
    3fd4:	4c80      	ldr	r4, [pc, #512]	; (41d8 <bt_recv_prio+0x20c>)
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3fd6:	2b01      	cmp	r3, #1
{
    3fd8:	b089      	sub	sp, #36	; 0x24
    3fda:	4605      	mov	r5, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3fdc:	d00d      	beq.n	3ffa <bt_recv_prio+0x2e>
    3fde:	4b7f      	ldr	r3, [pc, #508]	; (41dc <bt_recv_prio+0x210>)
    3fe0:	4a7f      	ldr	r2, [pc, #508]	; (41e0 <bt_recv_prio+0x214>)
    3fe2:	4980      	ldr	r1, [pc, #512]	; (41e4 <bt_recv_prio+0x218>)
    3fe4:	4880      	ldr	r0, [pc, #512]	; (41e8 <bt_recv_prio+0x21c>)
    3fe6:	9401      	str	r4, [sp, #4]
    3fe8:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3fea:	f7fc ffcf 	bl	f8c <printk>
    3fee:	4040      	eors	r0, r0
    3ff0:	f380 8811 	msr	BASEPRI, r0
    3ff4:	f04f 0004 	mov.w	r0, #4
    3ff8:	df02      	svc	2
    3ffa:	8982      	ldrh	r2, [r0, #12]
    3ffc:	2a01      	cmp	r2, #1
    3ffe:	d806      	bhi.n	400e <bt_recv_prio+0x42>
    4000:	9401      	str	r4, [sp, #4]
    4002:	9400      	str	r4, [sp, #0]
    4004:	4b75      	ldr	r3, [pc, #468]	; (41dc <bt_recv_prio+0x210>)
    4006:	4a76      	ldr	r2, [pc, #472]	; (41e0 <bt_recv_prio+0x214>)
    4008:	4976      	ldr	r1, [pc, #472]	; (41e4 <bt_recv_prio+0x218>)
    400a:	4878      	ldr	r0, [pc, #480]	; (41ec <bt_recv_prio+0x220>)
    400c:	e7ed      	b.n	3fea <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    400e:	783a      	ldrb	r2, [r7, #0]
    4010:	2a13      	cmp	r2, #19
    4012:	f200 80d9 	bhi.w	41c8 <bt_recv_prio+0x1fc>
    4016:	4093      	lsls	r3, r2
    4018:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    401c:	f000 80d4 	beq.w	41c8 <bt_recv_prio+0x1fc>
	net_buf_pull(buf, sizeof(*hdr));
    4020:	f100 0608 	add.w	r6, r0, #8
    4024:	2102      	movs	r1, #2
    4026:	4630      	mov	r0, r6
    4028:	f00f ff74 	bl	13f14 <net_buf_simple_pull>
	switch (hdr->evt) {
    402c:	783b      	ldrb	r3, [r7, #0]
    402e:	2b0f      	cmp	r3, #15
    4030:	d02c      	beq.n	408c <bt_recv_prio+0xc0>
    4032:	2b13      	cmp	r3, #19
    4034:	d049      	beq.n	40ca <bt_recv_prio+0xfe>
    4036:	2b0e      	cmp	r3, #14
    4038:	f040 80bc 	bne.w	41b4 <bt_recv_prio+0x1e8>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    403c:	68ab      	ldr	r3, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    403e:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4042:	f893 8000 	ldrb.w	r8, [r3]
    4046:	f010 ff8d 	bl	14f64 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    404a:	4b69      	ldr	r3, [pc, #420]	; (41f0 <bt_recv_prio+0x224>)
    404c:	4a69      	ldr	r2, [pc, #420]	; (41f4 <bt_recv_prio+0x228>)
    404e:	9001      	str	r0, [sp, #4]
    4050:	4964      	ldr	r1, [pc, #400]	; (41e4 <bt_recv_prio+0x218>)
    4052:	9403      	str	r4, [sp, #12]
    4054:	9702      	str	r7, [sp, #8]
    4056:	9400      	str	r4, [sp, #0]
    4058:	4867      	ldr	r0, [pc, #412]	; (41f8 <bt_recv_prio+0x22c>)
    405a:	f7fc ff97 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    405e:	2103      	movs	r1, #3
    4060:	4630      	mov	r0, r6
    4062:	f00f ff57 	bl	13f14 <net_buf_simple_pull>
	status = buf->data[0];
    4066:	68ab      	ldr	r3, [r5, #8]
	hci_cmd_done(opcode, status, buf);
    4068:	462a      	mov	r2, r5
    406a:	7819      	ldrb	r1, [r3, #0]
    406c:	4638      	mov	r0, r7
    406e:	f7fe f825 	bl	20bc <hci_cmd_done>
	if (ncmd) {
    4072:	f1b8 0f00 	cmp.w	r8, #0
    4076:	d002      	beq.n	407e <bt_recv_prio+0xb2>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4078:	4860      	ldr	r0, [pc, #384]	; (41fc <bt_recv_prio+0x230>)
    407a:	f010 ff82 	bl	14f82 <_impl_k_sem_give>
	net_buf_unref(buf);
    407e:	4628      	mov	r0, r5
    4080:	f00f fee8 	bl	13e54 <net_buf_unref>
}
    4084:	2000      	movs	r0, #0
    4086:	b009      	add	sp, #36	; 0x24
    4088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    408c:	68af      	ldr	r7, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    408e:	f8b7 8002 	ldrh.w	r8, [r7, #2]
	u8_t ncmd = evt->ncmd;
    4092:	f897 9001 	ldrb.w	r9, [r7, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4096:	f010 ff65 	bl	14f64 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    409a:	4a56      	ldr	r2, [pc, #344]	; (41f4 <bt_recv_prio+0x228>)
    409c:	9001      	str	r0, [sp, #4]
    409e:	4b58      	ldr	r3, [pc, #352]	; (4200 <bt_recv_prio+0x234>)
    40a0:	4950      	ldr	r1, [pc, #320]	; (41e4 <bt_recv_prio+0x218>)
    40a2:	9403      	str	r4, [sp, #12]
    40a4:	f8cd 8008 	str.w	r8, [sp, #8]
    40a8:	9400      	str	r4, [sp, #0]
    40aa:	4853      	ldr	r0, [pc, #332]	; (41f8 <bt_recv_prio+0x22c>)
    40ac:	f7fc ff6e 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    40b0:	2104      	movs	r1, #4
    40b2:	4630      	mov	r0, r6
    40b4:	f00f ff2e 	bl	13f14 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    40b8:	462a      	mov	r2, r5
    40ba:	7839      	ldrb	r1, [r7, #0]
    40bc:	4640      	mov	r0, r8
    40be:	f7fd fffd 	bl	20bc <hci_cmd_done>
	if (ncmd) {
    40c2:	f1b9 0f00 	cmp.w	r9, #0
    40c6:	d0da      	beq.n	407e <bt_recv_prio+0xb2>
    40c8:	e7d6      	b.n	4078 <bt_recv_prio+0xac>
    40ca:	f8d5 b008 	ldr.w	fp, [r5, #8]
		BT_DBG("handle %u count %u", handle, count);
    40ce:	f8df 9114 	ldr.w	r9, [pc, #276]	; 41e4 <bt_recv_prio+0x218>
    40d2:	f010 ff47 	bl	14f64 <_impl_k_current_get>
	BT_DBG("num_handles %u", evt->num_handles);
    40d6:	9403      	str	r4, [sp, #12]
    40d8:	f89b 3000 	ldrb.w	r3, [fp]
    40dc:	9302      	str	r3, [sp, #8]
    40de:	9001      	str	r0, [sp, #4]
    40e0:	9400      	str	r4, [sp, #0]
    40e2:	4b48      	ldr	r3, [pc, #288]	; (4204 <bt_recv_prio+0x238>)
    40e4:	4a43      	ldr	r2, [pc, #268]	; (41f4 <bt_recv_prio+0x228>)
    40e6:	493f      	ldr	r1, [pc, #252]	; (41e4 <bt_recv_prio+0x218>)
    40e8:	4847      	ldr	r0, [pc, #284]	; (4208 <bt_recv_prio+0x23c>)
    40ea:	f7fc ff4f 	bl	f8c <printk>
	for (i = 0; i < evt->num_handles; i++) {
    40ee:	f04f 0800 	mov.w	r8, #0
    40f2:	f89b 3000 	ldrb.w	r3, [fp]
    40f6:	4598      	cmp	r8, r3
    40f8:	dac1      	bge.n	407e <bt_recv_prio+0xb2>
    40fa:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    40fe:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4102:	f8b3 7003 	ldrh.w	r7, [r3, #3]
    4106:	f010 ff2d 	bl	14f64 <_impl_k_current_get>
		BT_DBG("handle %u count %u", handle, count);
    410a:	9404      	str	r4, [sp, #16]
    410c:	9001      	str	r0, [sp, #4]
    410e:	9703      	str	r7, [sp, #12]
    4110:	f8cd a008 	str.w	sl, [sp, #8]
    4114:	9400      	str	r4, [sp, #0]
    4116:	4b3b      	ldr	r3, [pc, #236]	; (4204 <bt_recv_prio+0x238>)
    4118:	4a36      	ldr	r2, [pc, #216]	; (41f4 <bt_recv_prio+0x228>)
    411a:	483c      	ldr	r0, [pc, #240]	; (420c <bt_recv_prio+0x240>)
    411c:	4649      	mov	r1, r9
    411e:	f7fc ff35 	bl	f8c <printk>
	__asm__ volatile(
    4122:	f04f 0320 	mov.w	r3, #32
    4126:	f3ef 8211 	mrs	r2, BASEPRI
    412a:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    412e:	4650      	mov	r0, sl
    4130:	9207      	str	r2, [sp, #28]
    4132:	f000 fce5 	bl	4b00 <bt_conn_lookup_handle>
		if (!conn) {
    4136:	4606      	mov	r6, r0
    4138:	b970      	cbnz	r0, 4158 <bt_recv_prio+0x18c>
			BT_ERR("No connection for handle %u", handle);
    413a:	9402      	str	r4, [sp, #8]
    413c:	e88d 0410 	stmia.w	sp, {r4, sl}
    4140:	4b30      	ldr	r3, [pc, #192]	; (4204 <bt_recv_prio+0x238>)
    4142:	4a27      	ldr	r2, [pc, #156]	; (41e0 <bt_recv_prio+0x214>)
    4144:	4832      	ldr	r0, [pc, #200]	; (4210 <bt_recv_prio+0x244>)
    4146:	4649      	mov	r1, r9
    4148:	f7fc ff20 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    414c:	9b07      	ldr	r3, [sp, #28]
    414e:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < evt->num_handles; i++) {
    4152:	f108 0801 	add.w	r8, r8, #1
    4156:	e7cc      	b.n	40f2 <bt_recv_prio+0x126>
    4158:	9b07      	ldr	r3, [sp, #28]
    415a:	f383 8811 	msr	BASEPRI, r3
			k_fifo_put(&conn->tx_notify, node);
    415e:	f100 0a18 	add.w	sl, r0, #24
		while (count--) {
    4162:	b1d7      	cbz	r7, 419a <bt_recv_prio+0x1ce>
	__asm__ volatile(
    4164:	f04f 0320 	mov.w	r3, #32
    4168:	f3ef 8011 	mrs	r0, BASEPRI
    416c:	f383 8811 	msr	BASEPRI, r3
    4170:	6931      	ldr	r1, [r6, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    4172:	b129      	cbz	r1, 4180 <bt_recv_prio+0x1b4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4174:	6972      	ldr	r2, [r6, #20]
	return node->next;
    4176:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    4178:	6133      	str	r3, [r6, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    417a:	4291      	cmp	r1, r2
	list->tail = node;
    417c:	bf08      	it	eq
    417e:	6173      	streq	r3, [r6, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4180:	f380 8811 	msr	BASEPRI, r0
    4184:	3f01      	subs	r7, #1
    4186:	b2bf      	uxth	r7, r7
			if (!node) {
    4188:	b959      	cbnz	r1, 41a2 <bt_recv_prio+0x1d6>
				BT_ERR("packets count mismatch");
    418a:	9401      	str	r4, [sp, #4]
    418c:	9400      	str	r4, [sp, #0]
    418e:	4b1d      	ldr	r3, [pc, #116]	; (4204 <bt_recv_prio+0x238>)
    4190:	4a13      	ldr	r2, [pc, #76]	; (41e0 <bt_recv_prio+0x214>)
    4192:	4820      	ldr	r0, [pc, #128]	; (4214 <bt_recv_prio+0x248>)
    4194:	4649      	mov	r1, r9
    4196:	f7fc fef9 	bl	f8c <printk>
		bt_conn_unref(conn);
    419a:	4630      	mov	r0, r6
    419c:	f000 fcfe 	bl	4b9c <bt_conn_unref>
    41a0:	e7d7      	b.n	4152 <bt_recv_prio+0x186>
			k_fifo_put(&conn->tx_notify, node);
    41a2:	4650      	mov	r0, sl
    41a4:	f010 fc28 	bl	149f8 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    41a8:	4630      	mov	r0, r6
    41aa:	f000 f9b9 	bl	4520 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    41ae:	f010 fee8 	bl	14f82 <_impl_k_sem_give>
    41b2:	e7d6      	b.n	4162 <bt_recv_prio+0x196>
		net_buf_unref(buf);
    41b4:	4628      	mov	r0, r5
    41b6:	f00f fe4d 	bl	13e54 <net_buf_unref>
		BT_ASSERT(0);
    41ba:	9401      	str	r4, [sp, #4]
    41bc:	9400      	str	r4, [sp, #0]
    41be:	4b07      	ldr	r3, [pc, #28]	; (41dc <bt_recv_prio+0x210>)
    41c0:	4a07      	ldr	r2, [pc, #28]	; (41e0 <bt_recv_prio+0x214>)
    41c2:	4908      	ldr	r1, [pc, #32]	; (41e4 <bt_recv_prio+0x218>)
    41c4:	4814      	ldr	r0, [pc, #80]	; (4218 <bt_recv_prio+0x24c>)
    41c6:	e710      	b.n	3fea <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    41c8:	9401      	str	r4, [sp, #4]
    41ca:	9400      	str	r4, [sp, #0]
    41cc:	4b03      	ldr	r3, [pc, #12]	; (41dc <bt_recv_prio+0x210>)
    41ce:	4a04      	ldr	r2, [pc, #16]	; (41e0 <bt_recv_prio+0x214>)
    41d0:	4904      	ldr	r1, [pc, #16]	; (41e4 <bt_recv_prio+0x218>)
    41d2:	4812      	ldr	r0, [pc, #72]	; (421c <bt_recv_prio+0x250>)
    41d4:	e709      	b.n	3fea <bt_recv_prio+0x1e>
    41d6:	bf00      	nop
    41d8:	00015af1 	.word	0x00015af1
    41dc:	0001640e 	.word	0x0001640e
    41e0:	00016fae 	.word	0x00016fae
    41e4:	00016060 	.word	0x00016060
    41e8:	00016de2 	.word	0x00016de2
    41ec:	00016e26 	.word	0x00016e26
    41f0:	00016266 	.word	0x00016266
    41f4:	00016059 	.word	0x00016059
    41f8:	00016e60 	.word	0x00016e60
    41fc:	20003ba8 	.word	0x20003ba8
    4200:	00016277 	.word	0x00016277
    4204:	0001614a 	.word	0x0001614a
    4208:	00016e83 	.word	0x00016e83
    420c:	00016ea7 	.word	0x00016ea7
    4210:	00016ecf 	.word	0x00016ecf
    4214:	00016efb 	.word	0x00016efb
    4218:	00016f22 	.word	0x00016f22
    421c:	00016f45 	.word	0x00016f45

00004220 <bt_hci_driver_register>:
{
    4220:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    4222:	4b13      	ldr	r3, [pc, #76]	; (4270 <bt_hci_driver_register+0x50>)
    4224:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
    4228:	b085      	sub	sp, #20
    422a:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    422c:	b9cc      	cbnz	r4, 4262 <bt_hci_driver_register+0x42>
	if (!drv->open || !drv->send) {
    422e:	68c2      	ldr	r2, [r0, #12]
    4230:	b1d2      	cbz	r2, 4268 <bt_hci_driver_register+0x48>
    4232:	6902      	ldr	r2, [r0, #16]
    4234:	b1c2      	cbz	r2, 4268 <bt_hci_driver_register+0x48>
	bt_dev.drv = drv;
    4236:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    423a:	f010 fe93 	bl	14f64 <_impl_k_current_get>
    423e:	4a0d      	ldr	r2, [pc, #52]	; (4274 <bt_hci_driver_register+0x54>)
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    4240:	682b      	ldr	r3, [r5, #0]
    4242:	9203      	str	r2, [sp, #12]
    4244:	2b00      	cmp	r3, #0
    4246:	bf08      	it	eq
    4248:	4613      	moveq	r3, r2
    424a:	9302      	str	r3, [sp, #8]
    424c:	9001      	str	r0, [sp, #4]
    424e:	9200      	str	r2, [sp, #0]
    4250:	4b09      	ldr	r3, [pc, #36]	; (4278 <bt_hci_driver_register+0x58>)
    4252:	4a0a      	ldr	r2, [pc, #40]	; (427c <bt_hci_driver_register+0x5c>)
    4254:	490a      	ldr	r1, [pc, #40]	; (4280 <bt_hci_driver_register+0x60>)
    4256:	480b      	ldr	r0, [pc, #44]	; (4284 <bt_hci_driver_register+0x64>)
    4258:	f7fc fe98 	bl	f8c <printk>
	return 0;
    425c:	4620      	mov	r0, r4
}
    425e:	b005      	add	sp, #20
    4260:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    4262:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4266:	e7fa      	b.n	425e <bt_hci_driver_register+0x3e>
		return -EINVAL;
    4268:	f06f 0015 	mvn.w	r0, #21
    426c:	e7f7      	b.n	425e <bt_hci_driver_register+0x3e>
    426e:	bf00      	nop
    4270:	20003b00 	.word	0x20003b00
    4274:	00015af1 	.word	0x00015af1
    4278:	0001641b 	.word	0x0001641b
    427c:	00016059 	.word	0x00016059
    4280:	00016060 	.word	0x00016060
    4284:	0001667d 	.word	0x0001667d

00004288 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    4288:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    428a:	4d2a      	ldr	r5, [pc, #168]	; (4334 <bt_enable+0xac>)
    428c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    4290:	b086      	sub	sp, #24
    4292:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    4294:	b96b      	cbnz	r3, 42b2 <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    4296:	4b28      	ldr	r3, [pc, #160]	; (4338 <bt_enable+0xb0>)
    4298:	9301      	str	r3, [sp, #4]
    429a:	9300      	str	r3, [sp, #0]
    429c:	4a27      	ldr	r2, [pc, #156]	; (433c <bt_enable+0xb4>)
    429e:	4b28      	ldr	r3, [pc, #160]	; (4340 <bt_enable+0xb8>)
    42a0:	4928      	ldr	r1, [pc, #160]	; (4344 <bt_enable+0xbc>)
    42a2:	4829      	ldr	r0, [pc, #164]	; (4348 <bt_enable+0xc0>)
    42a4:	f7fc fe72 	bl	f8c <printk>
		return -ENODEV;
    42a8:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    42ac:	4620      	mov	r0, r4
    42ae:	b006      	add	sp, #24
    42b0:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    42b2:	2101      	movs	r1, #1
    42b4:	f105 0070 	add.w	r0, r5, #112	; 0x70
    42b8:	f7fd fecf 	bl	205a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    42bc:	f010 0001 	ands.w	r0, r0, #1
    42c0:	d134      	bne.n	432c <bt_enable+0xa4>
	ready_cb = cb;
    42c2:	4b22      	ldr	r3, [pc, #136]	; (434c <bt_enable+0xc4>)

    42c4:	4922      	ldr	r1, [pc, #136]	; (4350 <bt_enable+0xc8>)
    42c6:	601e      	str	r6, [r3, #0]
    42c8:	f06f 0308 	mvn.w	r3, #8
    42cc:	9005      	str	r0, [sp, #20]
    42ce:	9004      	str	r0, [sp, #16]
    42d0:	9303      	str	r3, [sp, #12]
    42d2:	9002      	str	r0, [sp, #8]
    42d4:	9001      	str	r0, [sp, #4]
    42d6:	9000      	str	r0, [sp, #0]
    42d8:	4b1e      	ldr	r3, [pc, #120]	; (4354 <bt_enable+0xcc>)
    42da:	481f      	ldr	r0, [pc, #124]	; (4358 <bt_enable+0xd0>)
    42dc:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    42e0:	f011 f84c 	bl	1537c <_impl_k_thread_create>
	err = bt_dev.drv->open();
    42e4:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    42e8:	68db      	ldr	r3, [r3, #12]
    42ea:	4798      	blx	r3
	if (err) {
    42ec:	4604      	mov	r4, r0
    42ee:	b150      	cbz	r0, 4306 <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    42f0:	4b11      	ldr	r3, [pc, #68]	; (4338 <bt_enable+0xb0>)
    42f2:	9302      	str	r3, [sp, #8]
    42f4:	e88d 0018 	stmia.w	sp, {r3, r4}
    42f8:	4a10      	ldr	r2, [pc, #64]	; (433c <bt_enable+0xb4>)
    42fa:	4b11      	ldr	r3, [pc, #68]	; (4340 <bt_enable+0xb8>)
    42fc:	4911      	ldr	r1, [pc, #68]	; (4344 <bt_enable+0xbc>)
    42fe:	4817      	ldr	r0, [pc, #92]	; (435c <bt_enable+0xd4>)
    4300:	f7fc fe44 	bl	f8c <printk>
		return err;
    4304:	e7d2      	b.n	42ac <bt_enable+0x24>
	if (!cb) {
    4306:	b926      	cbnz	r6, 4312 <bt_enable+0x8a>
}
    4308:	b006      	add	sp, #24
    430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    430e:	f7fe baeb 	b.w	28e8 <bt_init>
    4312:	2101      	movs	r1, #1
    4314:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    4318:	f7fd fe9f 	bl	205a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    431c:	07c3      	lsls	r3, r0, #31
    431e:	d4c5      	bmi.n	42ac <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    4320:	f105 0164 	add.w	r1, r5, #100	; 0x64
    4324:	480e      	ldr	r0, [pc, #56]	; (4360 <bt_enable+0xd8>)
    4326:	f010 fb67 	bl	149f8 <k_queue_append>
    432a:	e7bf      	b.n	42ac <bt_enable+0x24>
		return -EALREADY;
    432c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4330:	e7bc      	b.n	42ac <bt_enable+0x24>
    4332:	bf00      	nop
    4334:	20003b00 	.word	0x20003b00
    4338:	00015af1 	.word	0x00015af1
    433c:	00016fae 	.word	0x00016fae
    4340:	00016432 	.word	0x00016432
    4344:	00016060 	.word	0x00016060
    4348:	0001651e 	.word	0x0001651e
    434c:	200002d4 	.word	0x200002d4
    4350:	20001a38 	.word	0x20001a38
    4354:	00003439 	.word	0x00003439
    4358:	200002dc 	.word	0x200002dc
    435c:	00016547 	.word	0x00016547
    4360:	200019b8 	.word	0x200019b8

00004364 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    4364:	2000      	movs	r0, #0
    4366:	4770      	bx	lr

00004368 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    4368:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    436a:	7803      	ldrb	r3, [r0, #0]
    436c:	2b01      	cmp	r3, #1
{
    436e:	4605      	mov	r5, r0
    4370:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4372:	d810      	bhi.n	4396 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    4374:	7843      	ldrb	r3, [r0, #1]
    4376:	2b01      	cmp	r3, #1
    4378:	d80d      	bhi.n	4396 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    437a:	8841      	ldrh	r1, [r0, #2]
    437c:	1f0b      	subs	r3, r1, #4
    437e:	b29b      	uxth	r3, r3
    4380:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    4384:	4283      	cmp	r3, r0
    4386:	d806      	bhi.n	4396 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    4388:	88aa      	ldrh	r2, [r5, #4]
    438a:	1f13      	subs	r3, r2, #4
    438c:	b29b      	uxth	r3, r3
    438e:	4283      	cmp	r3, r0
    4390:	d801      	bhi.n	4396 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    4392:	4291      	cmp	r1, r2
    4394:	d22b      	bcs.n	43ee <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    4396:	f06f 0415 	mvn.w	r4, #21
    439a:	e00e      	b.n	43ba <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    439c:	2108      	movs	r1, #8
    439e:	4819      	ldr	r0, [pc, #100]	; (4404 <bt_le_scan_start+0x9c>)
    43a0:	f7fd ff02 	bl	21a8 <atomic_test_bit>
    43a4:	b158      	cbz	r0, 43be <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    43a6:	4610      	mov	r0, r2
    43a8:	f7fd ffde 	bl	2368 <set_le_scan_enable>
		if (err) {
    43ac:	4604      	mov	r4, r0
    43ae:	b130      	cbz	r0, 43be <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    43b0:	f46f 7100 	mvn.w	r1, #512	; 0x200
    43b4:	4813      	ldr	r0, [pc, #76]	; (4404 <bt_le_scan_start+0x9c>)
    43b6:	f7fd fe61 	bl	207c <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    43ba:	4620      	mov	r0, r4
    43bc:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    43be:	786b      	ldrb	r3, [r5, #1]
    43c0:	b17b      	cbz	r3, 43e2 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    43c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    43c6:	480f      	ldr	r0, [pc, #60]	; (4404 <bt_le_scan_start+0x9c>)
    43c8:	f7fd fe47 	bl	205a <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    43cc:	88aa      	ldrh	r2, [r5, #4]
    43ce:	8869      	ldrh	r1, [r5, #2]
    43d0:	7828      	ldrb	r0, [r5, #0]
    43d2:	f7fe fa13 	bl	27fc <start_le_scan>
	if (err) {
    43d6:	4604      	mov	r4, r0
    43d8:	2800      	cmp	r0, #0
    43da:	d1e9      	bne.n	43b0 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    43dc:	4b0a      	ldr	r3, [pc, #40]	; (4408 <bt_le_scan_start+0xa0>)
    43de:	601e      	str	r6, [r3, #0]
	return 0;
    43e0:	e7eb      	b.n	43ba <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    43e2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    43e6:	4807      	ldr	r0, [pc, #28]	; (4404 <bt_le_scan_start+0x9c>)
    43e8:	f7fd fe48 	bl	207c <atomic_and>
    43ec:	e7ee      	b.n	43cc <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    43ee:	f44f 7100 	mov.w	r1, #512	; 0x200
    43f2:	4804      	ldr	r0, [pc, #16]	; (4404 <bt_le_scan_start+0x9c>)
    43f4:	f7fd fe31 	bl	205a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    43f8:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    43fc:	d0ce      	beq.n	439c <bt_le_scan_start+0x34>
		return -EALREADY;
    43fe:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4402:	e7da      	b.n	43ba <bt_le_scan_start+0x52>
    4404:	20003b70 	.word	0x20003b70
    4408:	200002d8 	.word	0x200002d8

0000440c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    440c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    440e:	f46f 7100 	mvn.w	r1, #512	; 0x200
    4412:	4807      	ldr	r0, [pc, #28]	; (4430 <bt_le_scan_stop+0x24>)
    4414:	f7fd fe32 	bl	207c <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4418:	0583      	lsls	r3, r0, #22
    441a:	d506      	bpl.n	442a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    441c:	4b05      	ldr	r3, [pc, #20]	; (4434 <bt_le_scan_stop+0x28>)
    441e:	2000      	movs	r0, #0
    4420:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    4422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    4426:	f7fe ba2d 	b.w	2884 <bt_le_scan_update>
}
    442a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    442e:	bd08      	pop	{r3, pc}
    4430:	20003b70 	.word	0x20003b70
    4434:	200002d8 	.word	0x200002d8

00004438 <bt_buf_get_rx>:

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
		 "Invalid buffer type requested");

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    4438:	2801      	cmp	r0, #1
{
    443a:	b538      	push	{r3, r4, r5, lr}
    443c:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
    443e:	bf0c      	ite	eq
    4440:	4806      	ldreq	r0, [pc, #24]	; (445c <bt_buf_get_rx+0x24>)
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
    4442:	4807      	ldrne	r0, [pc, #28]	; (4460 <bt_buf_get_rx+0x28>)
    4444:	f00f fcd6 	bl	13df4 <net_buf_alloc_fixed>
    4448:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    444a:	b120      	cbz	r0, 4456 <bt_buf_get_rx+0x1e>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    444c:	2100      	movs	r1, #0
    444e:	3008      	adds	r0, #8
    4450:	f00f fcef 	bl	13e32 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    4454:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4456:	4620      	mov	r0, r4
    4458:	bd38      	pop	{r3, r4, r5, pc}
    445a:	bf00      	nop
    445c:	20004084 	.word	0x20004084
    4460:	20004004 	.word	0x20004004

00004464 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    4464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4466:	4606      	mov	r6, r0
	__asm__ volatile(
    4468:	f04f 0320 	mov.w	r3, #32
    446c:	f3ef 8211 	mrs	r2, BASEPRI
    4470:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    4474:	4b13      	ldr	r3, [pc, #76]	; (44c4 <bt_buf_get_cmd_complete+0x60>)
	bt_dev.sent_cmd = NULL;
    4476:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    4478:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    447c:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4480:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4484:	f010 fd6e 	bl	14f64 <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    4488:	4b0f      	ldr	r3, [pc, #60]	; (44c8 <bt_buf_get_cmd_complete+0x64>)
    448a:	9303      	str	r3, [sp, #12]
    448c:	9001      	str	r0, [sp, #4]
    448e:	9300      	str	r3, [sp, #0]
    4490:	9402      	str	r4, [sp, #8]
    4492:	4b0e      	ldr	r3, [pc, #56]	; (44cc <bt_buf_get_cmd_complete+0x68>)
    4494:	4a0e      	ldr	r2, [pc, #56]	; (44d0 <bt_buf_get_cmd_complete+0x6c>)
    4496:	490f      	ldr	r1, [pc, #60]	; (44d4 <bt_buf_get_cmd_complete+0x70>)
    4498:	480f      	ldr	r0, [pc, #60]	; (44d8 <bt_buf_get_cmd_complete+0x74>)
    449a:	f7fc fd77 	bl	f8c <printk>

	if (buf) {
    449e:	b934      	cbnz	r4, 44ae <bt_buf_get_cmd_complete+0x4a>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    44a0:	4631      	mov	r1, r6
    44a2:	2001      	movs	r0, #1
}
    44a4:	b004      	add	sp, #16
    44a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    44aa:	f7ff bfc5 	b.w	4438 <bt_buf_get_rx>
    44ae:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    44b0:	f104 0008 	add.w	r0, r4, #8
    44b4:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    44b6:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    44b8:	4629      	mov	r1, r5
    44ba:	f00f fcba 	bl	13e32 <net_buf_simple_reserve>
}
    44be:	4620      	mov	r0, r4
    44c0:	b004      	add	sp, #16
    44c2:	bd70      	pop	{r4, r5, r6, pc}
    44c4:	20003b00 	.word	0x20003b00
    44c8:	00015af1 	.word	0x00015af1
    44cc:	0001643c 	.word	0x0001643c
    44d0:	00016059 	.word	0x00016059
    44d4:	00016060 	.word	0x00016060
    44d8:	00016454 	.word	0x00016454

000044dc <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    44dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    44de:	4b06      	ldr	r3, [pc, #24]	; (44f8 <notify_connected+0x1c>)
    44e0:	681c      	ldr	r4, [r3, #0]
{
    44e2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    44e4:	b904      	cbnz	r4, 44e8 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    44e6:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    44e8:	6823      	ldr	r3, [r4, #0]
    44ea:	b113      	cbz	r3, 44f2 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    44ec:	7a29      	ldrb	r1, [r5, #8]
    44ee:	4628      	mov	r0, r5
    44f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    44f2:	6924      	ldr	r4, [r4, #16]
    44f4:	e7f6      	b.n	44e4 <notify_connected+0x8>
    44f6:	bf00      	nop
    44f8:	2000034c 	.word	0x2000034c

000044fc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    44fc:	f3bf 8f5b 	dmb	ish
    4500:	6800      	ldr	r0, [r0, #0]
    4502:	f3bf 8f5b 	dmb	ish
}
    4506:	4770      	bx	lr

00004508 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    4508:	8943      	ldrh	r3, [r0, #10]
{
    450a:	b510      	push	{r4, lr}
    450c:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    450e:	b12b      	cbz	r3, 451c <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    4510:	68c0      	ldr	r0, [r0, #12]
    4512:	f00f fc9f 	bl	13e54 <net_buf_unref>
	conn->rx = NULL;
    4516:	2300      	movs	r3, #0
    4518:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    451a:	8163      	strh	r3, [r4, #10]
    451c:	bd10      	pop	{r4, pc}
	...

00004520 <bt_conn_get_pkts>:
}
    4520:	4800      	ldr	r0, [pc, #0]	; (4524 <bt_conn_get_pkts+0x4>)
    4522:	4770      	bx	lr
    4524:	20003b8c 	.word	0x20003b8c

00004528 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    4528:	4b08      	ldr	r3, [pc, #32]	; (454c <notify_le_param_updated+0x24>)
{
    452a:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    452c:	681c      	ldr	r4, [r3, #0]
{
    452e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4530:	b904      	cbnz	r4, 4534 <notify_le_param_updated+0xc>
}
    4532:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    4534:	68e6      	ldr	r6, [r4, #12]
    4536:	b13e      	cbz	r6, 4548 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    4538:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    453c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    4540:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    4544:	4628      	mov	r0, r5
    4546:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    4548:	6924      	ldr	r4, [r4, #16]
    454a:	e7f1      	b.n	4530 <notify_le_param_updated+0x8>
    454c:	2000034c 	.word	0x2000034c

00004550 <le_param_req>:
{
    4550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4552:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    4554:	4608      	mov	r0, r1
{
    4556:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    4558:	f7fd ffb0 	bl	24bc <bt_le_conn_params_valid>
    455c:	4605      	mov	r5, r0
    455e:	b910      	cbnz	r0, 4566 <le_param_req+0x16>
		return false;
    4560:	2500      	movs	r5, #0
}
    4562:	4628      	mov	r0, r5
    4564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    4566:	4b09      	ldr	r3, [pc, #36]	; (458c <le_param_req+0x3c>)
    4568:	681c      	ldr	r4, [r3, #0]
    456a:	2c00      	cmp	r4, #0
    456c:	d0f9      	beq.n	4562 <le_param_req+0x12>
		if (!cb->le_param_req) {
    456e:	68a3      	ldr	r3, [r4, #8]
    4570:	b90b      	cbnz	r3, 4576 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    4572:	6924      	ldr	r4, [r4, #16]
    4574:	e7f9      	b.n	456a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    4576:	4631      	mov	r1, r6
    4578:	4638      	mov	r0, r7
    457a:	4798      	blx	r3
    457c:	2800      	cmp	r0, #0
    457e:	d0ef      	beq.n	4560 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    4580:	4630      	mov	r0, r6
    4582:	f7fd ff9b 	bl	24bc <bt_le_conn_params_valid>
    4586:	2800      	cmp	r0, #0
    4588:	d1f3      	bne.n	4572 <le_param_req+0x22>
    458a:	e7e9      	b.n	4560 <le_param_req+0x10>
    458c:	2000034c 	.word	0x2000034c

00004590 <bt_conn_cb_register>:
	cb->_next = callback_list;
    4590:	4b02      	ldr	r3, [pc, #8]	; (459c <bt_conn_cb_register+0xc>)
    4592:	681a      	ldr	r2, [r3, #0]
    4594:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    4596:	6018      	str	r0, [r3, #0]
    4598:	4770      	bx	lr
    459a:	bf00      	nop
    459c:	2000034c 	.word	0x2000034c

000045a0 <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    45a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45a4:	b086      	sub	sp, #24
    45a6:	4690      	mov	r8, r2
    45a8:	460d      	mov	r5, r1
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    45aa:	4e66      	ldr	r6, [pc, #408]	; (4744 <bt_conn_recv+0x1a4>)
{
    45ac:	4604      	mov	r4, r0
    45ae:	f010 fcd9 	bl	14f64 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    45b2:	9605      	str	r6, [sp, #20]
    45b4:	f8cd 8010 	str.w	r8, [sp, #16]
    45b8:	89ab      	ldrh	r3, [r5, #12]
    45ba:	9303      	str	r3, [sp, #12]
    45bc:	8823      	ldrh	r3, [r4, #0]
    45be:	9302      	str	r3, [sp, #8]
    45c0:	9001      	str	r0, [sp, #4]
    45c2:	9600      	str	r6, [sp, #0]
    45c4:	4b60      	ldr	r3, [pc, #384]	; (4748 <bt_conn_recv+0x1a8>)
    45c6:	4a61      	ldr	r2, [pc, #388]	; (474c <bt_conn_recv+0x1ac>)
    45c8:	4961      	ldr	r1, [pc, #388]	; (4750 <bt_conn_recv+0x1b0>)
    45ca:	4862      	ldr	r0, [pc, #392]	; (4754 <bt_conn_recv+0x1b4>)
    45cc:	f7fc fcde 	bl	f8c <printk>

	/* Check packet boundary flags */
	switch (flags) {
    45d0:	f1b8 0f01 	cmp.w	r8, #1
    45d4:	4637      	mov	r7, r6
    45d6:	d038      	beq.n	464a <bt_conn_recv+0xaa>
    45d8:	f1b8 0f02 	cmp.w	r8, #2
    45dc:	f040 8094 	bne.w	4708 <bt_conn_recv+0x168>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    45e0:	68ab      	ldr	r3, [r5, #8]
    45e2:	881e      	ldrh	r6, [r3, #0]
    45e4:	f010 fcbe 	bl	14f64 <_impl_k_current_get>

		BT_DBG("First, len %u final %u", buf->len, len);
    45e8:	9704      	str	r7, [sp, #16]
    45ea:	9603      	str	r6, [sp, #12]
    45ec:	89ab      	ldrh	r3, [r5, #12]
    45ee:	9302      	str	r3, [sp, #8]
    45f0:	9001      	str	r0, [sp, #4]
    45f2:	4b55      	ldr	r3, [pc, #340]	; (4748 <bt_conn_recv+0x1a8>)
    45f4:	9700      	str	r7, [sp, #0]
    45f6:	4a55      	ldr	r2, [pc, #340]	; (474c <bt_conn_recv+0x1ac>)
    45f8:	4955      	ldr	r1, [pc, #340]	; (4750 <bt_conn_recv+0x1b0>)
    45fa:	4857      	ldr	r0, [pc, #348]	; (4758 <bt_conn_recv+0x1b8>)
    45fc:	f7fc fcc6 	bl	f8c <printk>

		if (conn->rx_len) {
    4600:	8963      	ldrh	r3, [r4, #10]
    4602:	b153      	cbz	r3, 461a <bt_conn_recv+0x7a>
			BT_ERR("Unexpected first L2CAP frame");
    4604:	9701      	str	r7, [sp, #4]
    4606:	9700      	str	r7, [sp, #0]
    4608:	4b4f      	ldr	r3, [pc, #316]	; (4748 <bt_conn_recv+0x1a8>)
    460a:	4a54      	ldr	r2, [pc, #336]	; (475c <bt_conn_recv+0x1bc>)
    460c:	4950      	ldr	r1, [pc, #320]	; (4750 <bt_conn_recv+0x1b0>)
    460e:	4854      	ldr	r0, [pc, #336]	; (4760 <bt_conn_recv+0x1c0>)
    4610:	f7fc fcbc 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    4614:	4620      	mov	r0, r4
    4616:	f7ff ff77 	bl	4508 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    461a:	89ab      	ldrh	r3, [r5, #12]
    461c:	1af6      	subs	r6, r6, r3
    461e:	3604      	adds	r6, #4
    4620:	8166      	strh	r6, [r4, #10]
    4622:	f010 fc9f 	bl	14f64 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    4626:	8963      	ldrh	r3, [r4, #10]
    4628:	9302      	str	r3, [sp, #8]
    462a:	9001      	str	r0, [sp, #4]
    462c:	4b46      	ldr	r3, [pc, #280]	; (4748 <bt_conn_recv+0x1a8>)
    462e:	9703      	str	r7, [sp, #12]
    4630:	9700      	str	r7, [sp, #0]
    4632:	4a46      	ldr	r2, [pc, #280]	; (474c <bt_conn_recv+0x1ac>)
    4634:	4946      	ldr	r1, [pc, #280]	; (4750 <bt_conn_recv+0x1b0>)
    4636:	484b      	ldr	r0, [pc, #300]	; (4764 <bt_conn_recv+0x1c4>)
    4638:	f7fc fca8 	bl	f8c <printk>
		if (conn->rx_len) {
    463c:	8963      	ldrh	r3, [r4, #10]
    463e:	2b00      	cmp	r3, #0
    4640:	d051      	beq.n	46e6 <bt_conn_recv+0x146>
			conn->rx = buf;
    4642:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    4644:	b006      	add	sp, #24
    4646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->rx_len) {
    464a:	8963      	ldrh	r3, [r4, #10]
    464c:	b983      	cbnz	r3, 4670 <bt_conn_recv+0xd0>
			BT_ERR("Unexpected L2CAP continuation");
    464e:	4b3e      	ldr	r3, [pc, #248]	; (4748 <bt_conn_recv+0x1a8>)
    4650:	4a42      	ldr	r2, [pc, #264]	; (475c <bt_conn_recv+0x1bc>)
    4652:	493f      	ldr	r1, [pc, #252]	; (4750 <bt_conn_recv+0x1b0>)
    4654:	4844      	ldr	r0, [pc, #272]	; (4768 <bt_conn_recv+0x1c8>)
    4656:	9601      	str	r6, [sp, #4]
    4658:	9600      	str	r6, [sp, #0]
			BT_ERR("L2CAP data overflow");
    465a:	f7fc fc97 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    465e:	4620      	mov	r0, r4
    4660:	f7ff ff52 	bl	4508 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    4664:	4628      	mov	r0, r5
}
    4666:	b006      	add	sp, #24
    4668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			net_buf_unref(buf);
    466c:	f00f bbf2 	b.w	13e54 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    4670:	89aa      	ldrh	r2, [r5, #12]
    4672:	429a      	cmp	r2, r3
    4674:	d906      	bls.n	4684 <bt_conn_recv+0xe4>
			BT_ERR("L2CAP data overflow");
    4676:	9601      	str	r6, [sp, #4]
    4678:	9600      	str	r6, [sp, #0]
    467a:	4b33      	ldr	r3, [pc, #204]	; (4748 <bt_conn_recv+0x1a8>)
    467c:	4a37      	ldr	r2, [pc, #220]	; (475c <bt_conn_recv+0x1bc>)
    467e:	4934      	ldr	r1, [pc, #208]	; (4750 <bt_conn_recv+0x1b0>)
    4680:	483a      	ldr	r0, [pc, #232]	; (476c <bt_conn_recv+0x1cc>)
    4682:	e7ea      	b.n	465a <bt_conn_recv+0xba>
    4684:	f010 fc6e 	bl	14f64 <_impl_k_current_get>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    4688:	8963      	ldrh	r3, [r4, #10]
    468a:	9604      	str	r6, [sp, #16]
    468c:	9303      	str	r3, [sp, #12]
    468e:	89ab      	ldrh	r3, [r5, #12]
    4690:	9302      	str	r3, [sp, #8]
    4692:	9001      	str	r0, [sp, #4]
    4694:	4b2c      	ldr	r3, [pc, #176]	; (4748 <bt_conn_recv+0x1a8>)
    4696:	4a2d      	ldr	r2, [pc, #180]	; (474c <bt_conn_recv+0x1ac>)
    4698:	492d      	ldr	r1, [pc, #180]	; (4750 <bt_conn_recv+0x1b0>)
    469a:	9600      	str	r6, [sp, #0]
    469c:	4834      	ldr	r0, [pc, #208]	; (4770 <bt_conn_recv+0x1d0>)
    469e:	f7fc fc75 	bl	f8c <printk>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    46a2:	68e0      	ldr	r0, [r4, #12]
    46a4:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    46a8:	3008      	adds	r0, #8
    46aa:	f00f fc4f 	bl	13f4c <net_buf_simple_tailroom>
    46ae:	4580      	cmp	r8, r0
    46b0:	d906      	bls.n	46c0 <bt_conn_recv+0x120>
			BT_ERR("Not enough buffer space for L2CAP data");
    46b2:	9601      	str	r6, [sp, #4]
    46b4:	9600      	str	r6, [sp, #0]
    46b6:	4b24      	ldr	r3, [pc, #144]	; (4748 <bt_conn_recv+0x1a8>)
    46b8:	4a28      	ldr	r2, [pc, #160]	; (475c <bt_conn_recv+0x1bc>)
    46ba:	4925      	ldr	r1, [pc, #148]	; (4750 <bt_conn_recv+0x1b0>)
    46bc:	482d      	ldr	r0, [pc, #180]	; (4774 <bt_conn_recv+0x1d4>)
    46be:	e7cc      	b.n	465a <bt_conn_recv+0xba>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    46c0:	68e0      	ldr	r0, [r4, #12]
    46c2:	89aa      	ldrh	r2, [r5, #12]
    46c4:	68a9      	ldr	r1, [r5, #8]
    46c6:	3008      	adds	r0, #8
    46c8:	f00f fbfc 	bl	13ec4 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    46cc:	8963      	ldrh	r3, [r4, #10]
    46ce:	89aa      	ldrh	r2, [r5, #12]
    46d0:	1a9b      	subs	r3, r3, r2
    46d2:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    46d4:	4628      	mov	r0, r5
    46d6:	f00f fbbd 	bl	13e54 <net_buf_unref>
		if (conn->rx_len) {
    46da:	8963      	ldrh	r3, [r4, #10]
    46dc:	2b00      	cmp	r3, #0
    46de:	d1b1      	bne.n	4644 <bt_conn_recv+0xa4>
		buf = conn->rx;
    46e0:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    46e2:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    46e4:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    46e6:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    46e8:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    46ea:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    46ec:	1d19      	adds	r1, r3, #4
    46ee:	4291      	cmp	r1, r2
    46f0:	d014      	beq.n	471c <bt_conn_recv+0x17c>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    46f2:	9202      	str	r2, [sp, #8]
    46f4:	9301      	str	r3, [sp, #4]
    46f6:	9703      	str	r7, [sp, #12]
    46f8:	9700      	str	r7, [sp, #0]
    46fa:	4b13      	ldr	r3, [pc, #76]	; (4748 <bt_conn_recv+0x1a8>)
    46fc:	4a17      	ldr	r2, [pc, #92]	; (475c <bt_conn_recv+0x1bc>)
    46fe:	4914      	ldr	r1, [pc, #80]	; (4750 <bt_conn_recv+0x1b0>)
    4700:	481d      	ldr	r0, [pc, #116]	; (4778 <bt_conn_recv+0x1d8>)
    4702:	f7fc fc43 	bl	f8c <printk>
    4706:	e7ad      	b.n	4664 <bt_conn_recv+0xc4>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    4708:	9602      	str	r6, [sp, #8]
    470a:	e88d 0140 	stmia.w	sp, {r6, r8}
    470e:	4b0e      	ldr	r3, [pc, #56]	; (4748 <bt_conn_recv+0x1a8>)
    4710:	4a12      	ldr	r2, [pc, #72]	; (475c <bt_conn_recv+0x1bc>)
    4712:	490f      	ldr	r1, [pc, #60]	; (4750 <bt_conn_recv+0x1b0>)
    4714:	4819      	ldr	r0, [pc, #100]	; (477c <bt_conn_recv+0x1dc>)
    4716:	f7fc fc39 	bl	f8c <printk>
    471a:	e7a0      	b.n	465e <bt_conn_recv+0xbe>
    471c:	f010 fc22 	bl	14f64 <_impl_k_current_get>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    4720:	9703      	str	r7, [sp, #12]
    4722:	89ab      	ldrh	r3, [r5, #12]
    4724:	9302      	str	r3, [sp, #8]
    4726:	9001      	str	r0, [sp, #4]
    4728:	9700      	str	r7, [sp, #0]
    472a:	4b07      	ldr	r3, [pc, #28]	; (4748 <bt_conn_recv+0x1a8>)
    472c:	4a07      	ldr	r2, [pc, #28]	; (474c <bt_conn_recv+0x1ac>)
    472e:	4908      	ldr	r1, [pc, #32]	; (4750 <bt_conn_recv+0x1b0>)
    4730:	4813      	ldr	r0, [pc, #76]	; (4780 <bt_conn_recv+0x1e0>)
    4732:	f7fc fc2b 	bl	f8c <printk>
	bt_l2cap_recv(conn, buf);
    4736:	4629      	mov	r1, r5
    4738:	4620      	mov	r0, r4
}
    473a:	b006      	add	sp, #24
    473c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_recv(conn, buf);
    4740:	f001 b8c6 	b.w	58d0 <bt_l2cap_recv>
    4744:	00015af1 	.word	0x00015af1
    4748:	00017538 	.word	0x00017538
    474c:	00016059 	.word	0x00016059
    4750:	00016060 	.word	0x00016060
    4754:	00017702 	.word	0x00017702
    4758:	00017733 	.word	0x00017733
    475c:	00016fae 	.word	0x00016fae
    4760:	0001775f 	.word	0x0001775f
    4764:	0001778c 	.word	0x0001778c
    4768:	000177ab 	.word	0x000177ab
    476c:	000177d9 	.word	0x000177d9
    4770:	000177fd 	.word	0x000177fd
    4774:	00017829 	.word	0x00017829
    4778:	0001788e 	.word	0x0001788e
    477c:	00017860 	.word	0x00017860
    4780:	000178ba 	.word	0x000178ba

00004784 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4784:	b5f0      	push	{r4, r5, r6, r7, lr}
    4786:	460c      	mov	r4, r1
    4788:	b087      	sub	sp, #28
    478a:	4606      	mov	r6, r0
    478c:	4617      	mov	r7, r2
    478e:	f010 fbe9 	bl	14f64 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    4792:	89a3      	ldrh	r3, [r4, #12]
    4794:	4d13      	ldr	r5, [pc, #76]	; (47e4 <bt_conn_send_cb+0x60>)
    4796:	9303      	str	r3, [sp, #12]
    4798:	8833      	ldrh	r3, [r6, #0]
    479a:	9302      	str	r3, [sp, #8]
    479c:	9001      	str	r0, [sp, #4]
    479e:	4b12      	ldr	r3, [pc, #72]	; (47e8 <bt_conn_send_cb+0x64>)
    47a0:	9505      	str	r5, [sp, #20]
    47a2:	9704      	str	r7, [sp, #16]
    47a4:	9500      	str	r5, [sp, #0]
    47a6:	4a11      	ldr	r2, [pc, #68]	; (47ec <bt_conn_send_cb+0x68>)
    47a8:	4911      	ldr	r1, [pc, #68]	; (47f0 <bt_conn_send_cb+0x6c>)
    47aa:	4812      	ldr	r0, [pc, #72]	; (47f4 <bt_conn_send_cb+0x70>)
    47ac:	f7fc fbee 	bl	f8c <printk>

	if (conn->state != BT_CONN_CONNECTED) {
    47b0:	7a73      	ldrb	r3, [r6, #9]
    47b2:	2b03      	cmp	r3, #3
    47b4:	d00e      	beq.n	47d4 <bt_conn_send_cb+0x50>
		BT_ERR("not connected!");
    47b6:	4b0c      	ldr	r3, [pc, #48]	; (47e8 <bt_conn_send_cb+0x64>)
    47b8:	4a0f      	ldr	r2, [pc, #60]	; (47f8 <bt_conn_send_cb+0x74>)
    47ba:	490d      	ldr	r1, [pc, #52]	; (47f0 <bt_conn_send_cb+0x6c>)
    47bc:	9501      	str	r5, [sp, #4]
    47be:	9500      	str	r5, [sp, #0]
    47c0:	480e      	ldr	r0, [pc, #56]	; (47fc <bt_conn_send_cb+0x78>)
    47c2:	f7fc fbe3 	bl	f8c <printk>
		net_buf_unref(buf);
    47c6:	4620      	mov	r0, r4
    47c8:	f00f fb44 	bl	13e54 <net_buf_unref>
		return -ENOTCONN;
    47cc:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    47d0:	b007      	add	sp, #28
    47d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_put(&conn->tx_queue, buf);
    47d4:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    47d8:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    47da:	4621      	mov	r1, r4
    47dc:	f00f fb2d 	bl	13e3a <net_buf_put>
	return 0;
    47e0:	2000      	movs	r0, #0
    47e2:	e7f5      	b.n	47d0 <bt_conn_send_cb+0x4c>
    47e4:	00015af1 	.word	0x00015af1
    47e8:	00017545 	.word	0x00017545
    47ec:	00016059 	.word	0x00016059
    47f0:	00016060 	.word	0x00016060
    47f4:	0001791e 	.word	0x0001791e
    47f8:	00016fae 	.word	0x00016fae
    47fc:	00017953 	.word	0x00017953

00004800 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    4800:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4804:	4606      	mov	r6, r0
    4806:	f010 fbad 	bl	14f64 <_impl_k_current_get>
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    480a:	4b13      	ldr	r3, [pc, #76]	; (4858 <bt_conn_notify_tx+0x58>)
    480c:	9303      	str	r3, [sp, #12]
    480e:	9001      	str	r0, [sp, #4]
    4810:	9300      	str	r3, [sp, #0]
    4812:	9602      	str	r6, [sp, #8]
    4814:	4b11      	ldr	r3, [pc, #68]	; (485c <bt_conn_notify_tx+0x5c>)
    4816:	4a12      	ldr	r2, [pc, #72]	; (4860 <bt_conn_notify_tx+0x60>)
    4818:	4912      	ldr	r1, [pc, #72]	; (4864 <bt_conn_notify_tx+0x64>)
    481a:	4813      	ldr	r0, [pc, #76]	; (4868 <bt_conn_notify_tx+0x68>)
    481c:	4d13      	ldr	r5, [pc, #76]	; (486c <bt_conn_notify_tx+0x6c>)
    481e:	f7fc fbb5 	bl	f8c <printk>

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    4822:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    4826:	f04f 0800 	mov.w	r8, #0
    482a:	2100      	movs	r1, #0
    482c:	4638      	mov	r0, r7
    482e:	f010 f907 	bl	14a40 <_impl_k_queue_get>
    4832:	4604      	mov	r4, r0
    4834:	b910      	cbnz	r0, 483c <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    4836:	b004      	add	sp, #16
    4838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    483c:	6863      	ldr	r3, [r4, #4]
    483e:	b10b      	cbz	r3, 4844 <bt_conn_notify_tx+0x44>
			tx->cb(conn);
    4840:	4630      	mov	r0, r6
    4842:	4798      	blx	r3
    4844:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    4846:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4848:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    484a:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    484e:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    4850:	2b00      	cmp	r3, #0
    4852:	d1ea      	bne.n	482a <bt_conn_notify_tx+0x2a>
	list->tail = node;
    4854:	606c      	str	r4, [r5, #4]
    4856:	e7e6      	b.n	4826 <bt_conn_notify_tx+0x26>
    4858:	00015af1 	.word	0x00015af1
    485c:	00017555 	.word	0x00017555
    4860:	00016059 	.word	0x00016059
    4864:	00016060 	.word	0x00016060
    4868:	00017639 	.word	0x00017639
    486c:	200003f8 	.word	0x200003f8

00004870 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4874:	b088      	sub	sp, #32
    4876:	460f      	mov	r7, r1
    4878:	4614      	mov	r4, r2
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    487a:	4e57      	ldr	r6, [pc, #348]	; (49d8 <send_frag+0x168>)
{
    487c:	4605      	mov	r5, r0
    487e:	4699      	mov	r9, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4880:	f010 fb70 	bl	14f64 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4884:	9606      	str	r6, [sp, #24]
    4886:	9405      	str	r4, [sp, #20]
    4888:	89bb      	ldrh	r3, [r7, #12]
    488a:	4a54      	ldr	r2, [pc, #336]	; (49dc <send_frag+0x16c>)
    488c:	9304      	str	r3, [sp, #16]
    488e:	9001      	str	r0, [sp, #4]
    4890:	4b53      	ldr	r3, [pc, #332]	; (49e0 <send_frag+0x170>)
    4892:	4954      	ldr	r1, [pc, #336]	; (49e4 <send_frag+0x174>)
    4894:	9703      	str	r7, [sp, #12]
    4896:	9502      	str	r5, [sp, #8]
    4898:	9600      	str	r6, [sp, #0]
    489a:	4853      	ldr	r0, [pc, #332]	; (49e8 <send_frag+0x178>)
    489c:	f7fc fb76 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    48a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    48a4:	4851      	ldr	r0, [pc, #324]	; (49ec <send_frag+0x17c>)
    48a6:	f010 fb94 	bl	14fd2 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    48aa:	4b51      	ldr	r3, [pc, #324]	; (49f0 <send_frag+0x180>)
    48ac:	f103 0040 	add.w	r0, r3, #64	; 0x40
    48b0:	f7ff fe24 	bl	44fc <atomic_get>
    48b4:	46b0      	mov	r8, r6
    48b6:	b130      	cbz	r0, 48c6 <send_frag+0x56>
		if (conns[i].state == BT_CONN_CONNECTED ||
    48b8:	7a5a      	ldrb	r2, [r3, #9]
    48ba:	3a03      	subs	r2, #3
    48bc:	2a01      	cmp	r2, #1
    48be:	d802      	bhi.n	48c6 <send_frag+0x56>
			bt_conn_notify_tx(&conns[i]);
    48c0:	4618      	mov	r0, r3
    48c2:	f7ff ff9d 	bl	4800 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    48c6:	7a6b      	ldrb	r3, [r5, #9]
    48c8:	2b03      	cmp	r3, #3
    48ca:	d166      	bne.n	499a <send_frag+0x12a>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    48cc:	2104      	movs	r1, #4
    48ce:	f107 0008 	add.w	r0, r7, #8
    48d2:	f00f fb17 	bl	13f04 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    48d6:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    48d8:	f8d7 a014 	ldr.w	sl, [r7, #20]
    48dc:	4e45      	ldr	r6, [pc, #276]	; (49f4 <send_frag+0x184>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    48de:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    48e2:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    48e4:	89bb      	ldrh	r3, [r7, #12]
    48e6:	3b04      	subs	r3, #4
    48e8:	8043      	strh	r3, [r0, #2]
    48ea:	2302      	movs	r3, #2
    48ec:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    48ee:	f010 fb39 	bl	14f64 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    48f2:	f8cd 8010 	str.w	r8, [sp, #16]
    48f6:	9001      	str	r0, [sp, #4]
    48f8:	f8cd a00c 	str.w	sl, [sp, #12]
    48fc:	9502      	str	r5, [sp, #8]
    48fe:	f8cd 8000 	str.w	r8, [sp]
    4902:	4b3d      	ldr	r3, [pc, #244]	; (49f8 <send_frag+0x188>)
    4904:	4a35      	ldr	r2, [pc, #212]	; (49dc <send_frag+0x16c>)
    4906:	4937      	ldr	r1, [pc, #220]	; (49e4 <send_frag+0x174>)
    4908:	483c      	ldr	r0, [pc, #240]	; (49fc <send_frag+0x18c>)
    490a:	f7fc fb3f 	bl	f8c <printk>
    490e:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4910:	6872      	ldr	r2, [r6, #4]
	return node->next;
    4912:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4914:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4916:	4294      	cmp	r4, r2
	list->tail = node;
    4918:	bf08      	it	eq
    491a:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    491c:	f8c4 a004 	str.w	sl, [r4, #4]
	__asm__ volatile(
    4920:	f04f 0320 	mov.w	r3, #32
    4924:	f3ef 8211 	mrs	r2, BASEPRI
    4928:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    492c:	2300      	movs	r3, #0
    492e:	6023      	str	r3, [r4, #0]
    4930:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    4932:	2b00      	cmp	r3, #0
    4934:	d140      	bne.n	49b8 <send_frag+0x148>
	list->tail = node;
    4936:	616c      	str	r4, [r5, #20]
	list->head = node;
    4938:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    493a:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    493e:	4638      	mov	r0, r7
    4940:	f7fd fe68 	bl	2614 <bt_send>
	if (err) {
    4944:	2800      	cmp	r0, #0
    4946:	d043      	beq.n	49d0 <send_frag+0x160>
		BT_ERR("Unable to send to driver (err %d)", err);
    4948:	9001      	str	r0, [sp, #4]
    494a:	f8cd 8008 	str.w	r8, [sp, #8]
    494e:	f8cd 8000 	str.w	r8, [sp]
    4952:	4b23      	ldr	r3, [pc, #140]	; (49e0 <send_frag+0x170>)
    4954:	4a2a      	ldr	r2, [pc, #168]	; (4a00 <send_frag+0x190>)
    4956:	4923      	ldr	r1, [pc, #140]	; (49e4 <send_frag+0x174>)
    4958:	482a      	ldr	r0, [pc, #168]	; (4a04 <send_frag+0x194>)
    495a:	f7fc fb17 	bl	f8c <printk>
	__asm__ volatile(
    495e:	f04f 0320 	mov.w	r3, #32
    4962:	f3ef 8111 	mrs	r1, BASEPRI
    4966:	f383 8811 	msr	BASEPRI, r3
    496a:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    496c:	2200      	movs	r2, #0
    496e:	b153      	cbz	r3, 4986 <send_frag+0x116>
    4970:	429c      	cmp	r4, r3
    4972:	d12a      	bne.n	49ca <send_frag+0x15a>
    4974:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    4976:	bb12      	cbnz	r2, 49be <send_frag+0x14e>
    4978:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    497a:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    497c:	4294      	cmp	r4, r2
    497e:	d100      	bne.n	4982 <send_frag+0x112>
	list->tail = node;
    4980:	616b      	str	r3, [r5, #20]
	parent->next = child;
    4982:	2300      	movs	r3, #0
    4984:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4986:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    498a:	2300      	movs	r3, #0
    498c:	6063      	str	r3, [r4, #4]
    498e:	6833      	ldr	r3, [r6, #0]
    4990:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4992:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    4994:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4996:	b903      	cbnz	r3, 499a <send_frag+0x12a>
	list->tail = node;
    4998:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    499a:	4814      	ldr	r0, [pc, #80]	; (49ec <send_frag+0x17c>)
    499c:	f010 faf1 	bl	14f82 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    49a0:	f1b9 0f00 	cmp.w	r9, #0
    49a4:	d004      	beq.n	49b0 <send_frag+0x140>
		net_buf_unref(buf);
    49a6:	4638      	mov	r0, r7
    49a8:	f00f fa54 	bl	13e54 <net_buf_unref>
	}
	return false;
    49ac:	f04f 0900 	mov.w	r9, #0
}
    49b0:	4648      	mov	r0, r9
    49b2:	b008      	add	sp, #32
    49b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	parent->next = child;
    49b8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    49ba:	616c      	str	r4, [r5, #20]
    49bc:	e7bd      	b.n	493a <send_frag+0xca>
	parent->next = child;
    49be:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    49c0:	696b      	ldr	r3, [r5, #20]
    49c2:	429c      	cmp	r4, r3
	list->tail = node;
    49c4:	bf08      	it	eq
    49c6:	616a      	streq	r2, [r5, #20]
    49c8:	e7db      	b.n	4982 <send_frag+0x112>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    49ca:	461a      	mov	r2, r3
    49cc:	681b      	ldr	r3, [r3, #0]
    49ce:	e7ce      	b.n	496e <send_frag+0xfe>
	return true;
    49d0:	f04f 0901 	mov.w	r9, #1
    49d4:	e7ec      	b.n	49b0 <send_frag+0x140>
    49d6:	bf00      	nop
    49d8:	00015af1 	.word	0x00015af1
    49dc:	00016059 	.word	0x00016059
    49e0:	00017576 	.word	0x00017576
    49e4:	00016060 	.word	0x00016060
    49e8:	00017a04 	.word	0x00017a04
    49ec:	20003b8c 	.word	0x20003b8c
    49f0:	20000360 	.word	0x20000360
    49f4:	200003f8 	.word	0x200003f8
    49f8:	00017567 	.word	0x00017567
    49fc:	00017a3c 	.word	0x00017a3c
    4a00:	00016fae 	.word	0x00016fae
    4a04:	000165e9 	.word	0x000165e9

00004a08 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4a0a:	4c17      	ldr	r4, [pc, #92]	; (4a68 <bt_conn_add_le+0x60>)
    4a0c:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    4a10:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    4a12:	4630      	mov	r0, r6
    4a14:	f7ff fd72 	bl	44fc <atomic_get>
    4a18:	4605      	mov	r5, r0
    4a1a:	b108      	cbz	r0, 4a20 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    4a1c:	2000      	movs	r0, #0
    4a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    4a20:	4601      	mov	r1, r0
    4a22:	2298      	movs	r2, #152	; 0x98
    4a24:	4620      	mov	r0, r4
    4a26:	f7fd f915 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4a2a:	f3bf 8f5b 	dmb	ish
    4a2e:	2301      	movs	r3, #1
    4a30:	e856 2f00 	ldrex	r2, [r6]
    4a34:	e846 3100 	strex	r1, r3, [r6]
    4a38:	2900      	cmp	r1, #0
    4a3a:	d1f9      	bne.n	4a30 <bt_conn_add_le+0x28>
    4a3c:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    4a40:	2207      	movs	r2, #7
    4a42:	4639      	mov	r1, r7
    4a44:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4a48:	f7fd f8d8 	bl	1bfc <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4a4c:	2318      	movs	r3, #24
    4a4e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4a52:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4a54:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    4a58:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4a5a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4a5e:	4903      	ldr	r1, [pc, #12]	; (4a6c <bt_conn_add_le+0x64>)
    4a60:	f010 fd76 	bl	15550 <k_delayed_work_init>
			conn = &conns[i];
    4a64:	4620      	mov	r0, r4

	return conn;
}
    4a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a68:	20000360 	.word	0x20000360
    4a6c:	00005201 	.word	0x00005201

00004a70 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4a70:	b538      	push	{r3, r4, r5, lr}
    4a72:	460d      	mov	r5, r1
    4a74:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    4a76:	f100 0144 	add.w	r1, r0, #68	; 0x44
    4a7a:	2207      	movs	r2, #7
    4a7c:	4628      	mov	r0, r5
    4a7e:	f7fd f8a8 	bl	1bd2 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4a82:	b160      	cbz	r0, 4a9e <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4a84:	78e3      	ldrb	r3, [r4, #3]
    4a86:	2207      	movs	r2, #7
    4a88:	b933      	cbnz	r3, 4a98 <bt_conn_addr_le_cmp+0x28>
    4a8a:	f104 0152 	add.w	r1, r4, #82	; 0x52
    4a8e:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    4a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4a94:	f7fd b89d 	b.w	1bd2 <memcmp>
    4a98:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    4a9c:	e7f7      	b.n	4a8e <bt_conn_addr_le_cmp+0x1e>
    4a9e:	bd38      	pop	{r3, r4, r5, pc}

00004aa0 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    4aa0:	b530      	push	{r4, r5, lr}
    4aa2:	4604      	mov	r4, r0
    4aa4:	b087      	sub	sp, #28
	atomic_inc(&conn->ref);
    4aa6:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4aaa:	f3bf 8f5b 	dmb	ish
    4aae:	e855 3f00 	ldrex	r3, [r5]
    4ab2:	3301      	adds	r3, #1
    4ab4:	e845 3200 	strex	r2, r3, [r5]
    4ab8:	2a00      	cmp	r2, #0
    4aba:	d1f8      	bne.n	4aae <bt_conn_ref+0xe>
    4abc:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4ac0:	f010 fa50 	bl	14f64 <_impl_k_current_get>
    4ac4:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4ac6:	4628      	mov	r0, r5
    4ac8:	8821      	ldrh	r1, [r4, #0]
    4aca:	f7ff fd17 	bl	44fc <atomic_get>
    4ace:	4b07      	ldr	r3, [pc, #28]	; (4aec <bt_conn_ref+0x4c>)
    4ad0:	9304      	str	r3, [sp, #16]
    4ad2:	9003      	str	r0, [sp, #12]
    4ad4:	9102      	str	r1, [sp, #8]
    4ad6:	9201      	str	r2, [sp, #4]
    4ad8:	9300      	str	r3, [sp, #0]
    4ada:	4a05      	ldr	r2, [pc, #20]	; (4af0 <bt_conn_ref+0x50>)
    4adc:	4b05      	ldr	r3, [pc, #20]	; (4af4 <bt_conn_ref+0x54>)
    4ade:	4906      	ldr	r1, [pc, #24]	; (4af8 <bt_conn_ref+0x58>)
    4ae0:	4806      	ldr	r0, [pc, #24]	; (4afc <bt_conn_ref+0x5c>)
    4ae2:	f7fc fa53 	bl	f8c <printk>

	return conn;
}
    4ae6:	4620      	mov	r0, r4
    4ae8:	b007      	add	sp, #28
    4aea:	bd30      	pop	{r4, r5, pc}
    4aec:	00015af1 	.word	0x00015af1
    4af0:	00016059 	.word	0x00016059
    4af4:	000175c5 	.word	0x000175c5
    4af8:	00016060 	.word	0x00016060
    4afc:	000178f8 	.word	0x000178f8

00004b00 <bt_conn_lookup_handle>:
{
    4b00:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    4b02:	4b0a      	ldr	r3, [pc, #40]	; (4b2c <bt_conn_lookup_handle+0x2c>)
{
    4b04:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4b06:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4b0a:	f7ff fcf7 	bl	44fc <atomic_get>
    4b0e:	b158      	cbz	r0, 4b28 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4b10:	7a5a      	ldrb	r2, [r3, #9]
    4b12:	3a03      	subs	r2, #3
    4b14:	2a01      	cmp	r2, #1
    4b16:	d807      	bhi.n	4b28 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    4b18:	881a      	ldrh	r2, [r3, #0]
    4b1a:	428a      	cmp	r2, r1
    4b1c:	d104      	bne.n	4b28 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    4b1e:	4618      	mov	r0, r3
}
    4b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    4b24:	f7ff bfbc 	b.w	4aa0 <bt_conn_ref>
}
    4b28:	2000      	movs	r0, #0
    4b2a:	bd08      	pop	{r3, pc}
    4b2c:	20000360 	.word	0x20000360

00004b30 <bt_conn_lookup_addr_le>:
{
    4b30:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4b32:	4c0a      	ldr	r4, [pc, #40]	; (4b5c <bt_conn_lookup_addr_le+0x2c>)
{
    4b34:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4b36:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4b3a:	f7ff fcdf 	bl	44fc <atomic_get>
    4b3e:	b150      	cbz	r0, 4b56 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4b40:	78a3      	ldrb	r3, [r4, #2]
    4b42:	b943      	cbnz	r3, 4b56 <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4b44:	4620      	mov	r0, r4
    4b46:	f7ff ff93 	bl	4a70 <bt_conn_addr_le_cmp>
    4b4a:	b920      	cbnz	r0, 4b56 <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    4b4c:	4620      	mov	r0, r4
}
    4b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    4b52:	f7ff bfa5 	b.w	4aa0 <bt_conn_ref>
}
    4b56:	2000      	movs	r0, #0
    4b58:	bd10      	pop	{r4, pc}
    4b5a:	bf00      	nop
    4b5c:	20000360 	.word	0x20000360

00004b60 <bt_conn_lookup_state_le>:
{
    4b60:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    4b62:	4c0d      	ldr	r4, [pc, #52]	; (4b98 <bt_conn_lookup_state_le+0x38>)
{
    4b64:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    4b66:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    4b6a:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    4b6c:	f7ff fcc6 	bl	44fc <atomic_get>
    4b70:	b180      	cbz	r0, 4b94 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4b72:	78a2      	ldrb	r2, [r4, #2]
    4b74:	b972      	cbnz	r2, 4b94 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4b76:	b93b      	cbnz	r3, 4b88 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4b78:	7a63      	ldrb	r3, [r4, #9]
    4b7a:	42ab      	cmp	r3, r5
    4b7c:	d10a      	bne.n	4b94 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    4b7e:	4806      	ldr	r0, [pc, #24]	; (4b98 <bt_conn_lookup_state_le+0x38>)
}
    4b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    4b84:	f7ff bf8c 	b.w	4aa0 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4b88:	4619      	mov	r1, r3
    4b8a:	4620      	mov	r0, r4
    4b8c:	f7ff ff70 	bl	4a70 <bt_conn_addr_le_cmp>
    4b90:	2800      	cmp	r0, #0
    4b92:	d0f1      	beq.n	4b78 <bt_conn_lookup_state_le+0x18>
}
    4b94:	2000      	movs	r0, #0
    4b96:	bd38      	pop	{r3, r4, r5, pc}
    4b98:	20000360 	.word	0x20000360

00004b9c <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    4b9c:	b530      	push	{r4, r5, lr}
    4b9e:	4605      	mov	r5, r0
    4ba0:	b087      	sub	sp, #28
	atomic_dec(&conn->ref);
    4ba2:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4ba6:	f3bf 8f5b 	dmb	ish
    4baa:	e854 3f00 	ldrex	r3, [r4]
    4bae:	3b01      	subs	r3, #1
    4bb0:	e844 3200 	strex	r2, r3, [r4]
    4bb4:	2a00      	cmp	r2, #0
    4bb6:	d1f8      	bne.n	4baa <bt_conn_unref+0xe>
    4bb8:	f3bf 8f5b 	dmb	ish
    4bbc:	f010 f9d2 	bl	14f64 <_impl_k_current_get>
    4bc0:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4bc2:	4620      	mov	r0, r4
    4bc4:	8829      	ldrh	r1, [r5, #0]
    4bc6:	f7ff fc99 	bl	44fc <atomic_get>
    4bca:	4b07      	ldr	r3, [pc, #28]	; (4be8 <bt_conn_unref+0x4c>)
    4bcc:	9304      	str	r3, [sp, #16]
    4bce:	9003      	str	r0, [sp, #12]
    4bd0:	9102      	str	r1, [sp, #8]
    4bd2:	9201      	str	r2, [sp, #4]
    4bd4:	9300      	str	r3, [sp, #0]
    4bd6:	4a05      	ldr	r2, [pc, #20]	; (4bec <bt_conn_unref+0x50>)
    4bd8:	4b05      	ldr	r3, [pc, #20]	; (4bf0 <bt_conn_unref+0x54>)
    4bda:	4906      	ldr	r1, [pc, #24]	; (4bf4 <bt_conn_unref+0x58>)
    4bdc:	4806      	ldr	r0, [pc, #24]	; (4bf8 <bt_conn_unref+0x5c>)
    4bde:	f7fc f9d5 	bl	f8c <printk>
}
    4be2:	b007      	add	sp, #28
    4be4:	bd30      	pop	{r4, r5, pc}
    4be6:	bf00      	nop
    4be8:	00015af1 	.word	0x00015af1
    4bec:	00016059 	.word	0x00016059
    4bf0:	000175d1 	.word	0x000175d1
    4bf4:	00016060 	.word	0x00016060
    4bf8:	000178f8 	.word	0x000178f8

00004bfc <conn_cleanup>:
{
    4bfc:	b538      	push	{r3, r4, r5, lr}
    4bfe:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4c00:	f100 0528 	add.w	r5, r0, #40	; 0x28
    4c04:	2100      	movs	r1, #0
    4c06:	4628      	mov	r0, r5
    4c08:	f00f f8fa 	bl	13e00 <net_buf_get>
    4c0c:	b950      	cbnz	r0, 4c24 <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    4c0e:	4620      	mov	r0, r4
    4c10:	f7ff fdf6 	bl	4800 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    4c14:	4620      	mov	r0, r4
    4c16:	f7ff fc77 	bl	4508 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    4c1a:	4620      	mov	r0, r4
}
    4c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4c20:	f7ff bfbc 	b.w	4b9c <bt_conn_unref>
		net_buf_unref(buf);
    4c24:	f00f f916 	bl	13e54 <net_buf_unref>
    4c28:	e7ec      	b.n	4c04 <conn_cleanup+0x8>
	...

00004c2c <bt_conn_prepare_events>:
{
    4c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c2e:	b085      	sub	sp, #20
    4c30:	4606      	mov	r6, r0
    4c32:	f010 f997 	bl	14f64 <_impl_k_current_get>
	BT_DBG("");
    4c36:	4d2a      	ldr	r5, [pc, #168]	; (4ce0 <bt_conn_prepare_events+0xb4>)
    4c38:	9001      	str	r0, [sp, #4]
    4c3a:	4b2a      	ldr	r3, [pc, #168]	; (4ce4 <bt_conn_prepare_events+0xb8>)
    4c3c:	4a2a      	ldr	r2, [pc, #168]	; (4ce8 <bt_conn_prepare_events+0xbc>)
    4c3e:	492b      	ldr	r1, [pc, #172]	; (4cec <bt_conn_prepare_events+0xc0>)
    4c40:	9502      	str	r5, [sp, #8]
    4c42:	9500      	str	r5, [sp, #0]
    4c44:	482a      	ldr	r0, [pc, #168]	; (4cf0 <bt_conn_prepare_events+0xc4>)
    4c46:	f7fc f9a1 	bl	f8c <printk>
	conn_change.signaled = 0;
    4c4a:	4b2a      	ldr	r3, [pc, #168]	; (4cf4 <bt_conn_prepare_events+0xc8>)
    4c4c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4c4e:	2101      	movs	r1, #1
    4c50:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    4c52:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4c54:	f010 fdc3 	bl	157de <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    4c58:	4b27      	ldr	r3, [pc, #156]	; (4cf8 <bt_conn_prepare_events+0xcc>)
    4c5a:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4c5e:	f7ff fc4d 	bl	44fc <atomic_get>
    4c62:	461f      	mov	r7, r3
    4c64:	b910      	cbnz	r0, 4c6c <bt_conn_prepare_events+0x40>
			continue;
    4c66:	2001      	movs	r0, #1
}
    4c68:	b005      	add	sp, #20
    4c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4c6c:	7a5a      	ldrb	r2, [r3, #9]
    4c6e:	b992      	cbnz	r2, 4c96 <bt_conn_prepare_events+0x6a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4c70:	f3bf 8f5b 	dmb	ish
    4c74:	1d1a      	adds	r2, r3, #4
    4c76:	e852 1f00 	ldrex	r1, [r2]
    4c7a:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    4c7e:	e842 0400 	strex	r4, r0, [r2]
    4c82:	2c00      	cmp	r4, #0
    4c84:	d1f7      	bne.n	4c76 <bt_conn_prepare_events+0x4a>
    4c86:	f3bf 8f5b 	dmb	ish
    4c8a:	064a      	lsls	r2, r1, #25
    4c8c:	d503      	bpl.n	4c96 <bt_conn_prepare_events+0x6a>
			conn_cleanup(conn);
    4c8e:	4618      	mov	r0, r3
    4c90:	f7ff ffb4 	bl	4bfc <conn_cleanup>
    4c94:	e7e7      	b.n	4c66 <bt_conn_prepare_events+0x3a>
		if (conn->state != BT_CONN_CONNECTED) {
    4c96:	7a7c      	ldrb	r4, [r7, #9]
    4c98:	2c03      	cmp	r4, #3
    4c9a:	d1e4      	bne.n	4c66 <bt_conn_prepare_events+0x3a>
    4c9c:	f010 f962 	bl	14f64 <_impl_k_current_get>
		BT_DBG("Adding conn %p to poll list", conn);
    4ca0:	4b10      	ldr	r3, [pc, #64]	; (4ce4 <bt_conn_prepare_events+0xb8>)
    4ca2:	9001      	str	r0, [sp, #4]
    4ca4:	4a10      	ldr	r2, [pc, #64]	; (4ce8 <bt_conn_prepare_events+0xbc>)
    4ca6:	4911      	ldr	r1, [pc, #68]	; (4cec <bt_conn_prepare_events+0xc0>)
    4ca8:	9503      	str	r5, [sp, #12]
    4caa:	9702      	str	r7, [sp, #8]
    4cac:	9500      	str	r5, [sp, #0]
    4cae:	4813      	ldr	r0, [pc, #76]	; (4cfc <bt_conn_prepare_events+0xd0>)
    4cb0:	f7fc f96c 	bl	f8c <printk>
		k_poll_event_init(&events[ev_count],
    4cb4:	4b12      	ldr	r3, [pc, #72]	; (4d00 <bt_conn_prepare_events+0xd4>)
    4cb6:	2200      	movs	r2, #0
    4cb8:	2104      	movs	r1, #4
    4cba:	f106 0014 	add.w	r0, r6, #20
    4cbe:	f010 fd8e 	bl	157de <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4cc2:	2301      	movs	r3, #1
    4cc4:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4cc8:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4ccc:	4b0d      	ldr	r3, [pc, #52]	; (4d04 <bt_conn_prepare_events+0xd8>)
    4cce:	2200      	movs	r2, #0
    4cd0:	2104      	movs	r1, #4
    4cd2:	f010 fd84 	bl	157de <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4cd6:	2302      	movs	r3, #2
    4cd8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4cdc:	4620      	mov	r0, r4
	return ev_count;
    4cde:	e7c3      	b.n	4c68 <bt_conn_prepare_events+0x3c>
    4ce0:	00015af1 	.word	0x00015af1
    4ce4:	00017589 	.word	0x00017589
    4ce8:	00016059 	.word	0x00016059
    4cec:	00016060 	.word	0x00016060
    4cf0:	00017656 	.word	0x00017656
    4cf4:	20003c28 	.word	0x20003c28
    4cf8:	20000360 	.word	0x20000360
    4cfc:	0001766c 	.word	0x0001766c
    4d00:	20000378 	.word	0x20000378
    4d04:	20000388 	.word	0x20000388

00004d08 <bt_conn_set_state>:
{
    4d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d0c:	4604      	mov	r4, r0
    4d0e:	b086      	sub	sp, #24
    4d10:	460e      	mov	r6, r1
    4d12:	f010 f927 	bl	14f64 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4d16:	7a63      	ldrb	r3, [r4, #9]
    4d18:	4f6d      	ldr	r7, [pc, #436]	; (4ed0 <bt_conn_set_state+0x1c8>)
    4d1a:	9001      	str	r0, [sp, #4]
    4d1c:	2b04      	cmp	r3, #4
    4d1e:	bf96      	itet	ls
    4d20:	4a6c      	ldrls	r2, [pc, #432]	; (4ed4 <bt_conn_set_state+0x1cc>)
    4d22:	4b6d      	ldrhi	r3, [pc, #436]	; (4ed8 <bt_conn_set_state+0x1d0>)
    4d24:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    4d28:	9302      	str	r3, [sp, #8]
    4d2a:	2e04      	cmp	r6, #4
    4d2c:	bf96      	itet	ls
    4d2e:	4a69      	ldrls	r2, [pc, #420]	; (4ed4 <bt_conn_set_state+0x1cc>)
    4d30:	4a69      	ldrhi	r2, [pc, #420]	; (4ed8 <bt_conn_set_state+0x1d0>)
    4d32:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    4d36:	9203      	str	r2, [sp, #12]
    4d38:	9704      	str	r7, [sp, #16]
    4d3a:	9700      	str	r7, [sp, #0]
    4d3c:	4b67      	ldr	r3, [pc, #412]	; (4edc <bt_conn_set_state+0x1d4>)
    4d3e:	4a68      	ldr	r2, [pc, #416]	; (4ee0 <bt_conn_set_state+0x1d8>)
    4d40:	4968      	ldr	r1, [pc, #416]	; (4ee4 <bt_conn_set_state+0x1dc>)
    4d42:	4869      	ldr	r0, [pc, #420]	; (4ee8 <bt_conn_set_state+0x1e0>)
    4d44:	f7fc f922 	bl	f8c <printk>
	if (conn->state == state) {
    4d48:	7a65      	ldrb	r5, [r4, #9]
    4d4a:	42ae      	cmp	r6, r5
    4d4c:	46b8      	mov	r8, r7
    4d4e:	d10a      	bne.n	4d66 <bt_conn_set_state+0x5e>
		BT_WARN("no transition");
    4d50:	9701      	str	r7, [sp, #4]
    4d52:	9700      	str	r7, [sp, #0]
    4d54:	4b61      	ldr	r3, [pc, #388]	; (4edc <bt_conn_set_state+0x1d4>)
    4d56:	4a65      	ldr	r2, [pc, #404]	; (4eec <bt_conn_set_state+0x1e4>)
    4d58:	4962      	ldr	r1, [pc, #392]	; (4ee4 <bt_conn_set_state+0x1dc>)
    4d5a:	4865      	ldr	r0, [pc, #404]	; (4ef0 <bt_conn_set_state+0x1e8>)
    4d5c:	f7fc f916 	bl	f8c <printk>
}
    4d60:	b006      	add	sp, #24
    4d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->state = state;
    4d66:	7266      	strb	r6, [r4, #9]
	switch (old_state) {
    4d68:	b195      	cbz	r5, 4d90 <bt_conn_set_state+0x88>
    4d6a:	2d02      	cmp	r5, #2
    4d6c:	d014      	beq.n	4d98 <bt_conn_set_state+0x90>
	switch (conn->state) {
    4d6e:	7a63      	ldrb	r3, [r4, #9]
    4d70:	2b04      	cmp	r3, #4
    4d72:	f200 80a0 	bhi.w	4eb6 <bt_conn_set_state+0x1ae>
    4d76:	a201      	add	r2, pc, #4	; (adr r2, 4d7c <bt_conn_set_state+0x74>)
    4d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4d7c:	00004ddf 	.word	0x00004ddf
    4d80:	00004d61 	.word	0x00004d61
    4d84:	00004e9b 	.word	0x00004e9b
    4d88:	00004da9 	.word	0x00004da9
    4d8c:	00004d61 	.word	0x00004d61
		bt_conn_ref(conn);
    4d90:	4620      	mov	r0, r4
    4d92:	f7ff fe85 	bl	4aa0 <bt_conn_ref>
		break;
    4d96:	e7ea      	b.n	4d6e <bt_conn_set_state+0x66>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4d98:	78a3      	ldrb	r3, [r4, #2]
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	d1e7      	bne.n	4d6e <bt_conn_set_state+0x66>
			k_delayed_work_cancel(&conn->le.update_work);
    4d9e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4da2:	f010 fbe5 	bl	15570 <k_delayed_work_cancel>
    4da6:	e7e2      	b.n	4d6e <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4da8:	78a3      	ldrb	r3, [r4, #2]
    4daa:	2b02      	cmp	r3, #2
    4dac:	d0d8      	beq.n	4d60 <bt_conn_set_state+0x58>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4dae:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4db2:	f00f fe19 	bl	149e8 <_impl_k_queue_init>
    4db6:	f104 0018 	add.w	r0, r4, #24
    4dba:	f00f fe15 	bl	149e8 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4dbe:	2100      	movs	r1, #0
    4dc0:	484c      	ldr	r0, [pc, #304]	; (4ef4 <bt_conn_set_state+0x1ec>)
    4dc2:	f010 fdaf 	bl	15924 <_impl_k_poll_signal>
	list->head = NULL;
    4dc6:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    4dc8:	4620      	mov	r0, r4
    4dca:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4dcc:	63e3      	str	r3, [r4, #60]	; 0x3c
    4dce:	f000 fc1d 	bl	560c <bt_l2cap_connected>
		notify_connected(conn);
    4dd2:	4620      	mov	r0, r4
}
    4dd4:	b006      	add	sp, #24
    4dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    4dda:	f7ff bb7f 	b.w	44dc <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4dde:	78a3      	ldrb	r3, [r4, #2]
    4de0:	2b02      	cmp	r3, #2
    4de2:	d105      	bne.n	4df0 <bt_conn_set_state+0xe8>
			bt_conn_unref(conn);
    4de4:	4620      	mov	r0, r4
}
    4de6:	b006      	add	sp, #24
    4de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    4dec:	f7ff bed6 	b.w	4b9c <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4df0:	1eeb      	subs	r3, r5, #3
    4df2:	2b01      	cmp	r3, #1
    4df4:	d844      	bhi.n	4e80 <bt_conn_set_state+0x178>
			bt_l2cap_disconnected(conn);
    4df6:	4620      	mov	r0, r4
    4df8:	f000 fc42 	bl	5680 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4dfc:	4b3e      	ldr	r3, [pc, #248]	; (4ef8 <bt_conn_set_state+0x1f0>)
    4dfe:	681d      	ldr	r5, [r3, #0]
    4e00:	b9ed      	cbnz	r5, 4e3e <bt_conn_set_state+0x136>
    4e02:	4e3e      	ldr	r6, [pc, #248]	; (4efc <bt_conn_set_state+0x1f4>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4e04:	4f3e      	ldr	r7, [pc, #248]	; (4f00 <bt_conn_set_state+0x1f8>)
	__asm__ volatile(
    4e06:	f04f 0320 	mov.w	r3, #32
    4e0a:	f3ef 8111 	mrs	r1, BASEPRI
    4e0e:	f383 8811 	msr	BASEPRI, r3
    4e12:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4e14:	b12b      	cbz	r3, 4e22 <bt_conn_set_state+0x11a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4e16:	6960      	ldr	r0, [r4, #20]
	return node->next;
    4e18:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4e1a:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4e1c:	4283      	cmp	r3, r0
	list->tail = node;
    4e1e:	bf08      	it	eq
    4e20:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4e22:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    4e26:	b18b      	cbz	r3, 4e4c <bt_conn_set_state+0x144>
    4e28:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    4e2a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4e2c:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    4e2e:	605d      	str	r5, [r3, #4]
	list->head = node;
    4e30:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4e32:	b902      	cbnz	r2, 4e36 <bt_conn_set_state+0x12e>
	list->tail = node;
    4e34:	6073      	str	r3, [r6, #4]
    4e36:	4638      	mov	r0, r7
    4e38:	f010 f8a3 	bl	14f82 <_impl_k_sem_give>
    4e3c:	e7e3      	b.n	4e06 <bt_conn_set_state+0xfe>
		if (cb->disconnected) {
    4e3e:	686b      	ldr	r3, [r5, #4]
    4e40:	b113      	cbz	r3, 4e48 <bt_conn_set_state+0x140>
			cb->disconnected(conn, conn->err);
    4e42:	7a21      	ldrb	r1, [r4, #8]
    4e44:	4620      	mov	r0, r4
    4e46:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4e48:	692d      	ldr	r5, [r5, #16]
    4e4a:	e7d9      	b.n	4e00 <bt_conn_set_state+0xf8>
			if (conn->type == BT_CONN_TYPE_LE) {
    4e4c:	78a3      	ldrb	r3, [r4, #2]
    4e4e:	b91b      	cbnz	r3, 4e58 <bt_conn_set_state+0x150>
				k_delayed_work_cancel(&conn->le.update_work);
    4e50:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4e54:	f010 fb8c 	bl	15570 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e58:	f3bf 8f5b 	dmb	ish
    4e5c:	3404      	adds	r4, #4
    4e5e:	e854 3f00 	ldrex	r3, [r4]
    4e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4e66:	e844 3200 	strex	r2, r3, [r4]
    4e6a:	2a00      	cmp	r2, #0
    4e6c:	d1f7      	bne.n	4e5e <bt_conn_set_state+0x156>
    4e6e:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4e72:	4820      	ldr	r0, [pc, #128]	; (4ef4 <bt_conn_set_state+0x1ec>)
    4e74:	2100      	movs	r1, #0
}
    4e76:	b006      	add	sp, #24
    4e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e7c:	f010 bd52 	b.w	15924 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4e80:	2d02      	cmp	r5, #2
    4e82:	d103      	bne.n	4e8c <bt_conn_set_state+0x184>
			notify_connected(conn);
    4e84:	4620      	mov	r0, r4
    4e86:	f7ff fb29 	bl	44dc <notify_connected>
    4e8a:	e7ab      	b.n	4de4 <bt_conn_set_state+0xdc>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4e8c:	2d01      	cmp	r5, #1
    4e8e:	f47f af67 	bne.w	4d60 <bt_conn_set_state+0x58>
			if (conn->err) {
    4e92:	7a23      	ldrb	r3, [r4, #8]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d0a5      	beq.n	4de4 <bt_conn_set_state+0xdc>
    4e98:	e7f4      	b.n	4e84 <bt_conn_set_state+0x17c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4e9a:	78a3      	ldrb	r3, [r4, #2]
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	f47f af5f 	bne.w	4d60 <bt_conn_set_state+0x58>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4ea2:	4818      	ldr	r0, [pc, #96]	; (4f04 <bt_conn_set_state+0x1fc>)
    4ea4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4ea8:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4eac:	b006      	add	sp, #24
    4eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4eb2:	f010 bbc1 	b.w	15638 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    4eb6:	f8cd 8008 	str.w	r8, [sp, #8]
    4eba:	9601      	str	r6, [sp, #4]
    4ebc:	f8cd 8000 	str.w	r8, [sp]
    4ec0:	4b06      	ldr	r3, [pc, #24]	; (4edc <bt_conn_set_state+0x1d4>)
    4ec2:	4a0a      	ldr	r2, [pc, #40]	; (4eec <bt_conn_set_state+0x1e4>)
    4ec4:	4907      	ldr	r1, [pc, #28]	; (4ee4 <bt_conn_set_state+0x1dc>)
    4ec6:	4810      	ldr	r0, [pc, #64]	; (4f08 <bt_conn_set_state+0x200>)
    4ec8:	f7fc f860 	bl	f8c <printk>
		break;
    4ecc:	e748      	b.n	4d60 <bt_conn_set_state+0x58>
    4ece:	bf00      	nop
    4ed0:	00015af1 	.word	0x00015af1
    4ed4:	00017524 	.word	0x00017524
    4ed8:	00017972 	.word	0x00017972
    4edc:	000175b3 	.word	0x000175b3
    4ee0:	00016059 	.word	0x00016059
    4ee4:	00016060 	.word	0x00016060
    4ee8:	0001797c 	.word	0x0001797c
    4eec:	0001702e 	.word	0x0001702e
    4ef0:	0001799a 	.word	0x0001799a
    4ef4:	20003c28 	.word	0x20003c28
    4ef8:	2000034c 	.word	0x2000034c
    4efc:	200003f8 	.word	0x200003f8
    4f00:	20003b8c 	.word	0x20003b8c
    4f04:	200019b8 	.word	0x200019b8
    4f08:	000179b8 	.word	0x000179b8

00004f0c <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4f0c:	3044      	adds	r0, #68	; 0x44
    4f0e:	4770      	bx	lr

00004f10 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4f10:	b570      	push	{r4, r5, r6, lr}
    4f12:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4f14:	4608      	mov	r0, r1
{
    4f16:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4f18:	f7fd fad0 	bl	24bc <bt_le_conn_params_valid>
    4f1c:	b908      	cbnz	r0, 4f22 <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    4f1e:	2400      	movs	r4, #0
    4f20:	e01c      	b.n	4f5c <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4f22:	481d      	ldr	r0, [pc, #116]	; (4f98 <bt_conn_create_le+0x88>)
    4f24:	f7ff faea 	bl	44fc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4f28:	0583      	lsls	r3, r0, #22
    4f2a:	d4f8      	bmi.n	4f1e <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4f2c:	4630      	mov	r0, r6
    4f2e:	f7ff fdff 	bl	4b30 <bt_conn_lookup_addr_le>
	if (conn) {
    4f32:	4604      	mov	r4, r0
    4f34:	b1a0      	cbz	r0, 4f60 <bt_conn_create_le+0x50>
		switch (conn->state) {
    4f36:	7a43      	ldrb	r3, [r0, #9]
    4f38:	2b01      	cmp	r3, #1
    4f3a:	d006      	beq.n	4f4a <bt_conn_create_le+0x3a>
    4f3c:	d301      	bcc.n	4f42 <bt_conn_create_le+0x32>
    4f3e:	2b03      	cmp	r3, #3
    4f40:	d90c      	bls.n	4f5c <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    4f42:	4620      	mov	r0, r4
    4f44:	f7ff fe2a 	bl	4b9c <bt_conn_unref>
    4f48:	e7e9      	b.n	4f1e <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4f4a:	886b      	ldrh	r3, [r5, #2]
    4f4c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4f50:	88ab      	ldrh	r3, [r5, #4]
    4f52:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4f56:	88eb      	ldrh	r3, [r5, #6]
    4f58:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4f5c:	4620      	mov	r0, r4
    4f5e:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4f60:	4630      	mov	r0, r6
    4f62:	f7ff fd51 	bl	4a08 <bt_conn_add_le>
	if (!conn) {
    4f66:	4604      	mov	r4, r0
    4f68:	2800      	cmp	r0, #0
    4f6a:	d0f7      	beq.n	4f5c <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4f6c:	2207      	movs	r2, #7
    4f6e:	4631      	mov	r1, r6
    4f70:	3052      	adds	r0, #82	; 0x52
    4f72:	f7fc fe43 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    4f76:	886b      	ldrh	r3, [r5, #2]
    4f78:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4f7c:	88ab      	ldrh	r3, [r5, #4]
    4f7e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4f82:	88eb      	ldrh	r3, [r5, #6]
    4f84:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4f88:	4620      	mov	r0, r4
    4f8a:	2101      	movs	r1, #1
    4f8c:	f7ff febc 	bl	4d08 <bt_conn_set_state>
	bt_le_scan_update(true);
    4f90:	2001      	movs	r0, #1
    4f92:	f7fd fc77 	bl	2884 <bt_le_scan_update>
	return conn;
    4f96:	e7e1      	b.n	4f5c <bt_conn_create_le+0x4c>
    4f98:	20003b70 	.word	0x20003b70

00004f9c <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4f9c:	b570      	push	{r4, r5, r6, lr}
    4f9e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4fa0:	460d      	mov	r5, r1
    4fa2:	2900      	cmp	r1, #0
    4fa4:	d13b      	bne.n	501e <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    4fa6:	4630      	mov	r0, r6
    4fa8:	f7ff fdc2 	bl	4b30 <bt_conn_lookup_addr_le>
	if (!conn) {
    4fac:	4604      	mov	r4, r0
    4fae:	b928      	cbnz	r0, 4fbc <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4fb0:	4630      	mov	r0, r6
    4fb2:	f7ff fd29 	bl	4a08 <bt_conn_add_le>
		if (!conn) {
    4fb6:	4604      	mov	r4, r0
    4fb8:	2800      	cmp	r0, #0
    4fba:	d051      	beq.n	5060 <bt_le_set_auto_conn+0xc4>
    4fbc:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4fbe:	2d00      	cmp	r5, #0
    4fc0:	d035      	beq.n	502e <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    4fc2:	886a      	ldrh	r2, [r5, #2]
    4fc4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4fc8:	88aa      	ldrh	r2, [r5, #4]
    4fca:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4fce:	88ea      	ldrh	r2, [r5, #6]
    4fd0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4fd4:	f3bf 8f5b 	dmb	ish
    4fd8:	e853 2f00 	ldrex	r2, [r3]
    4fdc:	f042 0101 	orr.w	r1, r2, #1
    4fe0:	e843 1000 	strex	r0, r1, [r3]
    4fe4:	2800      	cmp	r0, #0
    4fe6:	d1f7      	bne.n	4fd8 <bt_le_set_auto_conn+0x3c>
    4fe8:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4fec:	07d1      	lsls	r1, r2, #31
    4fee:	d402      	bmi.n	4ff6 <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4ff0:	4620      	mov	r0, r4
    4ff2:	f7ff fd55 	bl	4aa0 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4ff6:	7a63      	ldrb	r3, [r4, #9]
    4ff8:	b963      	cbnz	r3, 5014 <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4ffa:	481b      	ldr	r0, [pc, #108]	; (5068 <bt_le_set_auto_conn+0xcc>)
    4ffc:	f7ff fa7e 	bl	44fc <atomic_get>
    5000:	0783      	lsls	r3, r0, #30
    5002:	d507      	bpl.n	5014 <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    5004:	b11d      	cbz	r5, 500e <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5006:	2101      	movs	r1, #1
    5008:	4620      	mov	r0, r4
    500a:	f7ff fe7d 	bl	4d08 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    500e:	2000      	movs	r0, #0
    5010:	f7fd fc38 	bl	2884 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    5014:	4620      	mov	r0, r4
    5016:	f7ff fdc1 	bl	4b9c <bt_conn_unref>

	return 0;
    501a:	2000      	movs	r0, #0
    501c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    501e:	4608      	mov	r0, r1
    5020:	f7fd fa4c 	bl	24bc <bt_le_conn_params_valid>
    5024:	2800      	cmp	r0, #0
    5026:	d1be      	bne.n	4fa6 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    5028:	f06f 0015 	mvn.w	r0, #21
    502c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    502e:	f3bf 8f5b 	dmb	ish
    5032:	e853 2f00 	ldrex	r2, [r3]
    5036:	f022 0101 	bic.w	r1, r2, #1
    503a:	e843 1000 	strex	r0, r1, [r3]
    503e:	2800      	cmp	r0, #0
    5040:	d1f7      	bne.n	5032 <bt_le_set_auto_conn+0x96>
    5042:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    5046:	07d2      	lsls	r2, r2, #31
    5048:	d5d5      	bpl.n	4ff6 <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    504a:	4620      	mov	r0, r4
    504c:	f7ff fda6 	bl	4b9c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    5050:	7a63      	ldrb	r3, [r4, #9]
    5052:	2b01      	cmp	r3, #1
    5054:	d1cf      	bne.n	4ff6 <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5056:	4629      	mov	r1, r5
    5058:	4620      	mov	r0, r4
    505a:	f7ff fe55 	bl	4d08 <bt_conn_set_state>
    505e:	e7ca      	b.n	4ff6 <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    5060:	f06f 000b 	mvn.w	r0, #11
}
    5064:	bd70      	pop	{r4, r5, r6, pc}
    5066:	bf00      	nop
    5068:	20003b70 	.word	0x20003b70

0000506c <bt_conn_disconnect>:
{
    506c:	b570      	push	{r4, r5, r6, lr}
    506e:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5070:	7881      	ldrb	r1, [r0, #2]
{
    5072:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5074:	b911      	cbnz	r1, 507c <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    5076:	3044      	adds	r0, #68	; 0x44
    5078:	f7ff ff90 	bl	4f9c <bt_le_set_auto_conn>
	switch (conn->state) {
    507c:	7a63      	ldrb	r3, [r4, #9]
    507e:	3b01      	subs	r3, #1
    5080:	2b03      	cmp	r3, #3
    5082:	d803      	bhi.n	508c <bt_conn_disconnect+0x20>
    5084:	e8df f003 	tbb	[pc, r3]
    5088:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    508c:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    5090:	4628      	mov	r0, r5
    5092:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5094:	4620      	mov	r0, r4
		conn->err = reason;
    5096:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5098:	2100      	movs	r1, #0
    509a:	f7ff fe35 	bl	4d08 <bt_conn_set_state>
		bt_le_scan_update(false);
    509e:	2000      	movs	r0, #0
    50a0:	f7fd fbf0 	bl	2884 <bt_le_scan_update>
		return 0;
    50a4:	2500      	movs	r5, #0
    50a6:	e7f3      	b.n	5090 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    50a8:	f104 0070 	add.w	r0, r4, #112	; 0x70
    50ac:	f010 fa60 	bl	15570 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    50b0:	2100      	movs	r1, #0
    50b2:	f242 000e 	movw	r0, #8206	; 0x200e
}
    50b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    50ba:	f7fd bad5 	b.w	2668 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    50be:	2103      	movs	r1, #3
    50c0:	f240 4006 	movw	r0, #1030	; 0x406
    50c4:	f7fd f87e 	bl	21c4 <bt_hci_cmd_create>
	if (!buf) {
    50c8:	4605      	mov	r5, r0
    50ca:	b198      	cbz	r0, 50f4 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    50cc:	2103      	movs	r1, #3
    50ce:	3008      	adds	r0, #8
    50d0:	f00e fef2 	bl	13eb8 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    50d4:	8823      	ldrh	r3, [r4, #0]
    50d6:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    50d8:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    50da:	4629      	mov	r1, r5
    50dc:	f240 4006 	movw	r0, #1030	; 0x406
    50e0:	f7fd fac2 	bl	2668 <bt_hci_cmd_send>
	if (err) {
    50e4:	4605      	mov	r5, r0
    50e6:	2800      	cmp	r0, #0
    50e8:	d1d2      	bne.n	5090 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    50ea:	2104      	movs	r1, #4
    50ec:	4620      	mov	r0, r4
    50ee:	f7ff fe0b 	bl	4d08 <bt_conn_set_state>
    50f2:	e7cd      	b.n	5090 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    50f4:	f06f 0536 	mvn.w	r5, #54	; 0x36
    50f8:	e7ca      	b.n	5090 <bt_conn_disconnect+0x24>

000050fa <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    50fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fc:	4607      	mov	r7, r0
    50fe:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    5100:	f242 0013 	movw	r0, #8211	; 0x2013
    5104:	210e      	movs	r1, #14
    5106:	f7fd f85d 	bl	21c4 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    510a:	4606      	mov	r6, r0
    510c:	b1c8      	cbz	r0, 5142 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    510e:	210e      	movs	r1, #14
    5110:	3008      	adds	r0, #8
    5112:	f00e fed1 	bl	13eb8 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    5116:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    5118:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    511a:	220e      	movs	r2, #14
    511c:	f7fc fd9a 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    5120:	883b      	ldrh	r3, [r7, #0]
    5122:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    5124:	882b      	ldrh	r3, [r5, #0]
    5126:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    5128:	886b      	ldrh	r3, [r5, #2]
    512a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    512c:	88ab      	ldrh	r3, [r5, #4]
    512e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    5130:	88eb      	ldrh	r3, [r5, #6]
    5132:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    5134:	4631      	mov	r1, r6
    5136:	f242 0013 	movw	r0, #8211	; 0x2013
}
    513a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    513e:	f7fd ba93 	b.w	2668 <bt_hci_cmd_send>
}
    5142:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005148 <bt_conn_le_param_update>:
{
    5148:	b530      	push	{r4, r5, lr}
    514a:	460d      	mov	r5, r1
    514c:	b08b      	sub	sp, #44	; 0x2c
    514e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    5150:	f00f ff08 	bl	14f64 <_impl_k_current_get>
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    5154:	88ea      	ldrh	r2, [r5, #6]
    5156:	9207      	str	r2, [sp, #28]
    5158:	88aa      	ldrh	r2, [r5, #4]
    515a:	9206      	str	r2, [sp, #24]
    515c:	886a      	ldrh	r2, [r5, #2]
    515e:	9205      	str	r2, [sp, #20]
    5160:	882a      	ldrh	r2, [r5, #0]
    5162:	4b21      	ldr	r3, [pc, #132]	; (51e8 <bt_conn_le_param_update+0xa0>)
    5164:	9204      	str	r2, [sp, #16]
    5166:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    516a:	9308      	str	r3, [sp, #32]
    516c:	9203      	str	r2, [sp, #12]
    516e:	9001      	str	r0, [sp, #4]
    5170:	9300      	str	r3, [sp, #0]
    5172:	4a1e      	ldr	r2, [pc, #120]	; (51ec <bt_conn_le_param_update+0xa4>)
    5174:	4b1e      	ldr	r3, [pc, #120]	; (51f0 <bt_conn_le_param_update+0xa8>)
    5176:	9402      	str	r4, [sp, #8]
    5178:	491e      	ldr	r1, [pc, #120]	; (51f4 <bt_conn_le_param_update+0xac>)
    517a:	481f      	ldr	r0, [pc, #124]	; (51f8 <bt_conn_le_param_update+0xb0>)
    517c:	f7fb ff06 	bl	f8c <printk>
	if (conn->le.interval >= param->interval_min &&
    5180:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    5184:	882a      	ldrh	r2, [r5, #0]
    5186:	429a      	cmp	r2, r3
    5188:	d80c      	bhi.n	51a4 <bt_conn_le_param_update+0x5c>
    518a:	886a      	ldrh	r2, [r5, #2]
    518c:	429a      	cmp	r2, r3
    518e:	d309      	bcc.n	51a4 <bt_conn_le_param_update+0x5c>
	    conn->le.interval <= param->interval_max &&
    5190:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    5194:	88ab      	ldrh	r3, [r5, #4]
    5196:	429a      	cmp	r2, r3
    5198:	d104      	bne.n	51a4 <bt_conn_le_param_update+0x5c>
	    conn->le.latency == param->latency &&
    519a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    519e:	88eb      	ldrh	r3, [r5, #6]
    51a0:	429a      	cmp	r2, r3
    51a2:	d01c      	beq.n	51de <bt_conn_le_param_update+0x96>
	k_delayed_work_cancel(&conn->le.update_work);
    51a4:	f104 0070 	add.w	r0, r4, #112	; 0x70
    51a8:	f010 f9e2 	bl	15570 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    51ac:	4b13      	ldr	r3, [pc, #76]	; (51fc <bt_conn_le_param_update+0xb4>)
    51ae:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    51b2:	079a      	lsls	r2, r3, #30
    51b4:	d503      	bpl.n	51be <bt_conn_le_param_update+0x76>
    51b6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    51ba:	079b      	lsls	r3, r3, #30
    51bc:	d401      	bmi.n	51c2 <bt_conn_le_param_update+0x7a>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    51be:	78e3      	ldrb	r3, [r4, #3]
    51c0:	b933      	cbnz	r3, 51d0 <bt_conn_le_param_update+0x88>
		return bt_conn_le_conn_update(conn, param);
    51c2:	4629      	mov	r1, r5
    51c4:	4620      	mov	r0, r4
}
    51c6:	b00b      	add	sp, #44	; 0x2c
    51c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    51cc:	f7ff bf95 	b.w	50fa <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    51d0:	4629      	mov	r1, r5
    51d2:	4620      	mov	r0, r4
}
    51d4:	b00b      	add	sp, #44	; 0x2c
    51d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    51da:	f000 bbb9 	b.w	5950 <bt_l2cap_update_conn_param>
}
    51de:	f06f 0044 	mvn.w	r0, #68	; 0x44
    51e2:	b00b      	add	sp, #44	; 0x2c
    51e4:	bd30      	pop	{r4, r5, pc}
    51e6:	bf00      	nop
    51e8:	00015af1 	.word	0x00015af1
    51ec:	00016059 	.word	0x00016059
    51f0:	000175df 	.word	0x000175df
    51f4:	00016060 	.word	0x00016060
    51f8:	000175f7 	.word	0x000175f7
    51fc:	20003b00 	.word	0x20003b00

00005200 <le_conn_update>:
{
    5200:	4603      	mov	r3, r0
    5202:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5204:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    5208:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    520a:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    520e:	d105      	bne.n	521c <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    5210:	2113      	movs	r1, #19
    5212:	f7ff ff2b 	bl	506c <bt_conn_disconnect>
}
    5216:	b003      	add	sp, #12
    5218:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    521c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    5220:	f8ad 2000 	strh.w	r2, [sp]
    5224:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    5228:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    522c:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    522e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    5232:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    5236:	f8ad 2004 	strh.w	r2, [sp, #4]
    523a:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    523e:	f7ff ff83 	bl	5148 <bt_conn_le_param_update>
    5242:	e7e8      	b.n	5216 <le_conn_update+0x16>

00005244 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    5244:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    5246:	4b08      	ldr	r3, [pc, #32]	; (5268 <bt_conn_create_pdu+0x24>)
{
    5248:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    524a:	2800      	cmp	r0, #0
    524c:	bf08      	it	eq
    524e:	4618      	moveq	r0, r3
    5250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5254:	f00e fdce 	bl	13df4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    5258:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    525a:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    525c:	3008      	adds	r0, #8
    525e:	f00e fde8 	bl	13e32 <net_buf_simple_reserve>

	return buf;
}
    5262:	4620      	mov	r0, r4
    5264:	bd38      	pop	{r3, r4, r5, pc}
    5266:	bf00      	nop
    5268:	20004024 	.word	0x20004024

0000526c <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5270:	4606      	mov	r6, r0
    5272:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    5274:	4816      	ldr	r0, [pc, #88]	; (52d0 <create_frag.isra.8+0x64>)
    5276:	2100      	movs	r1, #0
    5278:	f7ff ffe4 	bl	5244 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    527c:	7833      	ldrb	r3, [r6, #0]
    527e:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    5280:	4605      	mov	r5, r0
    5282:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    5286:	d005      	beq.n	5294 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    5288:	f00e fde4 	bl	13e54 <net_buf_unref>
		return NULL;
    528c:	4635      	mov	r5, r6
}
    528e:	4628      	mov	r0, r5
    5290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    5294:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5296:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    529a:	4e0e      	ldr	r6, [pc, #56]	; (52d4 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    529c:	4638      	mov	r0, r7
    529e:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    52a2:	f00e fe53 	bl	13f4c <net_buf_simple_tailroom>
    52a6:	4580      	cmp	r8, r0
    52a8:	d20c      	bcs.n	52c4 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    52aa:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    52ae:	f854 1f08 	ldr.w	r1, [r4, #8]!
    52b2:	4632      	mov	r2, r6
    52b4:	4638      	mov	r0, r7
    52b6:	f00e fe05 	bl	13ec4 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    52ba:	4631      	mov	r1, r6
    52bc:	4620      	mov	r0, r4
    52be:	f00e fe29 	bl	13f14 <net_buf_simple_pull>
    52c2:	e7e4      	b.n	528e <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    52c4:	4638      	mov	r0, r7
    52c6:	f00e fe41 	bl	13f4c <net_buf_simple_tailroom>
    52ca:	b286      	uxth	r6, r0
    52cc:	e7ef      	b.n	52ae <create_frag.isra.8+0x42>
    52ce:	bf00      	nop
    52d0:	20004044 	.word	0x20004044
    52d4:	20003b00 	.word	0x20003b00

000052d8 <bt_conn_process_tx>:
{
    52d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52da:	b087      	sub	sp, #28
    52dc:	4604      	mov	r4, r0
    52de:	f00f fe41 	bl	14f64 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    52e2:	4d45      	ldr	r5, [pc, #276]	; (53f8 <bt_conn_process_tx+0x120>)
    52e4:	9001      	str	r0, [sp, #4]
    52e6:	4b45      	ldr	r3, [pc, #276]	; (53fc <bt_conn_process_tx+0x124>)
    52e8:	9503      	str	r5, [sp, #12]
    52ea:	9402      	str	r4, [sp, #8]
    52ec:	9500      	str	r5, [sp, #0]
    52ee:	4a44      	ldr	r2, [pc, #272]	; (5400 <bt_conn_process_tx+0x128>)
    52f0:	4944      	ldr	r1, [pc, #272]	; (5404 <bt_conn_process_tx+0x12c>)
    52f2:	4845      	ldr	r0, [pc, #276]	; (5408 <bt_conn_process_tx+0x130>)
    52f4:	f7fb fe4a 	bl	f8c <printk>
	if (conn->state == BT_CONN_DISCONNECTED &&
    52f8:	7a63      	ldrb	r3, [r4, #9]
    52fa:	462e      	mov	r6, r5
    52fc:	bb0b      	cbnz	r3, 5342 <bt_conn_process_tx+0x6a>
    52fe:	f3bf 8f5b 	dmb	ish
    5302:	1d23      	adds	r3, r4, #4
    5304:	e853 2f00 	ldrex	r2, [r3]
    5308:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    530c:	e843 1000 	strex	r0, r1, [r3]
    5310:	2800      	cmp	r0, #0
    5312:	d1f7      	bne.n	5304 <bt_conn_process_tx+0x2c>
    5314:	f3bf 8f5b 	dmb	ish
    5318:	0653      	lsls	r3, r2, #25
    531a:	d512      	bpl.n	5342 <bt_conn_process_tx+0x6a>
    531c:	f00f fe22 	bl	14f64 <_impl_k_current_get>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    5320:	8823      	ldrh	r3, [r4, #0]
    5322:	9302      	str	r3, [sp, #8]
    5324:	9001      	str	r0, [sp, #4]
    5326:	9503      	str	r5, [sp, #12]
    5328:	9500      	str	r5, [sp, #0]
    532a:	4b34      	ldr	r3, [pc, #208]	; (53fc <bt_conn_process_tx+0x124>)
    532c:	4a34      	ldr	r2, [pc, #208]	; (5400 <bt_conn_process_tx+0x128>)
    532e:	4935      	ldr	r1, [pc, #212]	; (5404 <bt_conn_process_tx+0x12c>)
    5330:	4836      	ldr	r0, [pc, #216]	; (540c <bt_conn_process_tx+0x134>)
    5332:	f7fb fe2b 	bl	f8c <printk>
		conn_cleanup(conn);
    5336:	4620      	mov	r0, r4
}
    5338:	b007      	add	sp, #28
    533a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    533e:	f7ff bc5d 	b.w	4bfc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    5342:	2100      	movs	r1, #0
    5344:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5348:	f00e fd5a 	bl	13e00 <net_buf_get>
	BT_ASSERT(buf);
    534c:	4605      	mov	r5, r0
    534e:	b968      	cbnz	r0, 536c <bt_conn_process_tx+0x94>
    5350:	9601      	str	r6, [sp, #4]
    5352:	9600      	str	r6, [sp, #0]
    5354:	4b29      	ldr	r3, [pc, #164]	; (53fc <bt_conn_process_tx+0x124>)
    5356:	4a2e      	ldr	r2, [pc, #184]	; (5410 <bt_conn_process_tx+0x138>)
    5358:	492a      	ldr	r1, [pc, #168]	; (5404 <bt_conn_process_tx+0x12c>)
    535a:	482e      	ldr	r0, [pc, #184]	; (5414 <bt_conn_process_tx+0x13c>)
    535c:	f7fb fe16 	bl	f8c <printk>
    5360:	4040      	eors	r0, r0
    5362:	f380 8811 	msr	BASEPRI, r0
    5366:	f04f 0004 	mov.w	r0, #4
    536a:	df02      	svc	2
    536c:	f00f fdfa 	bl	14f64 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    5370:	9605      	str	r6, [sp, #20]
    5372:	89ab      	ldrh	r3, [r5, #12]
    5374:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    5376:	4e28      	ldr	r6, [pc, #160]	; (5418 <bt_conn_process_tx+0x140>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    5378:	9304      	str	r3, [sp, #16]
    537a:	9001      	str	r0, [sp, #4]
    537c:	4a20      	ldr	r2, [pc, #128]	; (5400 <bt_conn_process_tx+0x128>)
    537e:	4921      	ldr	r1, [pc, #132]	; (5404 <bt_conn_process_tx+0x12c>)
    5380:	9503      	str	r5, [sp, #12]
    5382:	9402      	str	r4, [sp, #8]
    5384:	4b25      	ldr	r3, [pc, #148]	; (541c <bt_conn_process_tx+0x144>)
    5386:	4826      	ldr	r0, [pc, #152]	; (5420 <bt_conn_process_tx+0x148>)
    5388:	f7fb fe00 	bl	f8c <printk>
	if (buf->len <= conn_mtu(conn)) {
    538c:	89a9      	ldrh	r1, [r5, #12]
    538e:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    5392:	4291      	cmp	r1, r2
    5394:	d808      	bhi.n	53a8 <bt_conn_process_tx+0xd0>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    5396:	2300      	movs	r3, #0
    5398:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    539a:	4629      	mov	r1, r5
    539c:	4620      	mov	r0, r4
    539e:	f7ff fa67 	bl	4870 <send_frag>
	if (!send_buf(conn, buf)) {
    53a2:	b148      	cbz	r0, 53b8 <bt_conn_process_tx+0xe0>
}
    53a4:	b007      	add	sp, #28
    53a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53a8:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    53ac:	4629      	mov	r1, r5
    53ae:	4638      	mov	r0, r7
    53b0:	f7ff ff5c 	bl	526c <create_frag.isra.8>
	if (!frag) {
    53b4:	4601      	mov	r1, r0
    53b6:	b928      	cbnz	r0, 53c4 <bt_conn_process_tx+0xec>
		net_buf_unref(buf);
    53b8:	4628      	mov	r0, r5
}
    53ba:	b007      	add	sp, #28
    53bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    53c0:	f00e bd48 	b.w	13e54 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    53c4:	2301      	movs	r3, #1
    53c6:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    53c8:	4620      	mov	r0, r4
    53ca:	f7ff fa51 	bl	4870 <send_frag>
    53ce:	2800      	cmp	r0, #0
    53d0:	d0f2      	beq.n	53b8 <bt_conn_process_tx+0xe0>
	while (buf->len > conn_mtu(conn)) {
    53d2:	89aa      	ldrh	r2, [r5, #12]
    53d4:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    53d8:	429a      	cmp	r2, r3
    53da:	d802      	bhi.n	53e2 <bt_conn_process_tx+0x10a>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    53dc:	2300      	movs	r3, #0
    53de:	2201      	movs	r2, #1
    53e0:	e7db      	b.n	539a <bt_conn_process_tx+0xc2>
		frag = create_frag(conn, buf);
    53e2:	4629      	mov	r1, r5
    53e4:	4638      	mov	r0, r7
    53e6:	f7ff ff41 	bl	526c <create_frag.isra.8>
		if (!frag) {
    53ea:	4601      	mov	r1, r0
    53ec:	2800      	cmp	r0, #0
    53ee:	d0e3      	beq.n	53b8 <bt_conn_process_tx+0xe0>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    53f0:	2301      	movs	r3, #1
    53f2:	461a      	mov	r2, r3
    53f4:	e7e8      	b.n	53c8 <bt_conn_process_tx+0xf0>
    53f6:	bf00      	nop
    53f8:	00015af1 	.word	0x00015af1
    53fc:	000175a0 	.word	0x000175a0
    5400:	00016059 	.word	0x00016059
    5404:	00016060 	.word	0x00016060
    5408:	00017639 	.word	0x00017639
    540c:	0001769d 	.word	0x0001769d
    5410:	00016fae 	.word	0x00016fae
    5414:	000171a0 	.word	0x000171a0
    5418:	20003b00 	.word	0x20003b00
    541c:	00017580 	.word	0x00017580
    5420:	000176d7 	.word	0x000176d7

00005424 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    5424:	4b03      	ldr	r3, [pc, #12]	; (5434 <bt_conn_get_id+0x10>)
    5426:	1ac0      	subs	r0, r0, r3
    5428:	4b03      	ldr	r3, [pc, #12]	; (5438 <bt_conn_get_id+0x14>)
    542a:	10c0      	asrs	r0, r0, #3
    542c:	4358      	muls	r0, r3
}
    542e:	b2c0      	uxtb	r0, r0
    5430:	4770      	bx	lr
    5432:	bf00      	nop
    5434:	20000360 	.word	0x20000360
    5438:	286bca1b 	.word	0x286bca1b

0000543c <bt_conn_lookup_id>:

struct bt_conn *bt_conn_lookup_id(u8_t id)
{
    543c:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	if (id >= ARRAY_SIZE(conns)) {
    543e:	b940      	cbnz	r0, 5452 <bt_conn_lookup_id+0x16>
		return NULL;
	}

	conn = &conns[id];

	if (!atomic_get(&conn->ref)) {
    5440:	4805      	ldr	r0, [pc, #20]	; (5458 <bt_conn_lookup_id+0x1c>)
    5442:	f7ff f85b 	bl	44fc <atomic_get>
    5446:	b120      	cbz	r0, 5452 <bt_conn_lookup_id+0x16>
		return NULL;
	}

	return bt_conn_ref(conn);
    5448:	4804      	ldr	r0, [pc, #16]	; (545c <bt_conn_lookup_id+0x20>)
}
    544a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_conn_ref(conn);
    544e:	f7ff bb27 	b.w	4aa0 <bt_conn_ref>
}
    5452:	2000      	movs	r0, #0
    5454:	bd08      	pop	{r3, pc}
    5456:	bf00      	nop
    5458:	200003a0 	.word	0x200003a0
    545c:	20000360 	.word	0x20000360

00005460 <bt_conn_init>:
	parent->next = child;
    5460:	4b12      	ldr	r3, [pc, #72]	; (54ac <bt_conn_init+0x4c>)
    5462:	4a13      	ldr	r2, [pc, #76]	; (54b0 <bt_conn_init+0x50>)
    5464:	6819      	ldr	r1, [r3, #0]

int bt_conn_init(void)
{
    5466:	b510      	push	{r4, lr}
    5468:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    546a:	6859      	ldr	r1, [r3, #4]
    546c:	b901      	cbnz	r1, 5470 <bt_conn_init+0x10>
	list->tail = node;
    546e:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    5470:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    5472:	6092      	str	r2, [r2, #8]
	list->head = node;
    5474:	4a0f      	ldr	r2, [pc, #60]	; (54b4 <bt_conn_init+0x54>)
    5476:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    5478:	b901      	cbnz	r1, 547c <bt_conn_init+0x1c>
	list->tail = node;
    547a:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    547c:	f001 fb66 	bl	6b4c <bt_att_init>

	err = bt_smp_init();
    5480:	f002 fa62 	bl	7948 <bt_smp_init>
	if (err) {
    5484:	4604      	mov	r4, r0
    5486:	b970      	cbnz	r0, 54a6 <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    5488:	f000 fa8a 	bl	59a0 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    548c:	480a      	ldr	r0, [pc, #40]	; (54b8 <bt_conn_init+0x58>)
    548e:	f7ff f835 	bl	44fc <atomic_get>
    5492:	b140      	cbz	r0, 54a6 <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5494:	4809      	ldr	r0, [pc, #36]	; (54bc <bt_conn_init+0x5c>)
    5496:	f7ff f831 	bl	44fc <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    549a:	07c3      	lsls	r3, r0, #31
    549c:	d503      	bpl.n	54a6 <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    549e:	2101      	movs	r1, #1
    54a0:	4807      	ldr	r0, [pc, #28]	; (54c0 <bt_conn_init+0x60>)
    54a2:	f7ff fc31 	bl	4d08 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    54a6:	4620      	mov	r0, r4
    54a8:	bd10      	pop	{r4, pc}
    54aa:	bf00      	nop
    54ac:	200003f8 	.word	0x200003f8
    54b0:	20000350 	.word	0x20000350
    54b4:	20000358 	.word	0x20000358
    54b8:	200003a0 	.word	0x200003a0
    54bc:	20000364 	.word	0x20000364
    54c0:	20000360 	.word	0x20000360

000054c4 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    54c4:	4770      	bx	lr
	...

000054c8 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    54c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    54ca:	4a0b      	ldr	r2, [pc, #44]	; (54f8 <l2cap_accept+0x30>)
    54cc:	6813      	ldr	r3, [r2, #0]
    54ce:	b933      	cbnz	r3, 54de <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    54d0:	480a      	ldr	r0, [pc, #40]	; (54fc <l2cap_accept+0x34>)
    54d2:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    54d4:	600a      	str	r2, [r1, #0]

		return 0;
    54d6:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    54d8:	b005      	add	sp, #20
    54da:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    54de:	4b08      	ldr	r3, [pc, #32]	; (5500 <l2cap_accept+0x38>)
    54e0:	9302      	str	r3, [sp, #8]
    54e2:	9001      	str	r0, [sp, #4]
    54e4:	9300      	str	r3, [sp, #0]
    54e6:	4a07      	ldr	r2, [pc, #28]	; (5504 <l2cap_accept+0x3c>)
    54e8:	4b07      	ldr	r3, [pc, #28]	; (5508 <l2cap_accept+0x40>)
    54ea:	4908      	ldr	r1, [pc, #32]	; (550c <l2cap_accept+0x44>)
    54ec:	4808      	ldr	r0, [pc, #32]	; (5510 <l2cap_accept+0x48>)
    54ee:	f7fb fd4d 	bl	f8c <printk>
	return -ENOMEM;
    54f2:	f06f 000b 	mvn.w	r0, #11
    54f6:	e7ef      	b.n	54d8 <l2cap_accept+0x10>
    54f8:	20000400 	.word	0x20000400
    54fc:	20003c44 	.word	0x20003c44
    5500:	00015af1 	.word	0x00015af1
    5504:	00016fae 	.word	0x00016fae
    5508:	00017ada 	.word	0x00017ada
    550c:	00016060 	.word	0x00016060
    5510:	00017b49 	.word	0x00017b49

00005514 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5516:	4607      	mov	r7, r0
    5518:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    551a:	2000      	movs	r0, #0
    551c:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    551e:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5520:	f7ff fe90 	bl	5244 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5524:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5526:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5528:	3008      	adds	r0, #8
    552a:	f00e fcc5 	bl	13eb8 <net_buf_simple_add>
	hdr->code = code;
    552e:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    5530:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5532:	8045      	strh	r5, [r0, #2]
}
    5534:	4620      	mov	r0, r4
    5536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005538 <l2cap_connected>:
    5538:	4770      	bx	lr
	...

0000553c <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    553c:	2300      	movs	r3, #0
    553e:	6083      	str	r3, [r0, #8]
    5540:	4b05      	ldr	r3, [pc, #20]	; (5558 <bt_l2cap_le_fixed_chan_register+0x1c>)
    5542:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    5544:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    5548:	b911      	cbnz	r1, 5550 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    554a:	605a      	str	r2, [r3, #4]
	list->head = node;
    554c:	601a      	str	r2, [r3, #0]
    554e:	4770      	bx	lr
	parent->next = child;
    5550:	600a      	str	r2, [r1, #0]
	list->tail = node;
    5552:	605a      	str	r2, [r3, #4]
    5554:	4770      	bx	lr
    5556:	bf00      	nop
    5558:	20000498 	.word	0x20000498

0000555c <bt_l2cap_chan_remove>:
{
    555c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    555e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5560:	b113      	cbz	r3, 5568 <bt_l2cap_chan_remove+0xc>
    5562:	3b08      	subs	r3, #8
    5564:	2200      	movs	r2, #0
    5566:	b903      	cbnz	r3, 556a <bt_l2cap_chan_remove+0xe>
    5568:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    556a:	428b      	cmp	r3, r1
    556c:	f103 0408 	add.w	r4, r3, #8
    5570:	d10f      	bne.n	5592 <bt_l2cap_chan_remove+0x36>
    5572:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    5574:	b93a      	cbnz	r2, 5586 <bt_l2cap_chan_remove+0x2a>
    5576:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    5578:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    557a:	4294      	cmp	r4, r2
    557c:	d100      	bne.n	5580 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    557e:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    5580:	2200      	movs	r2, #0
    5582:	609a      	str	r2, [r3, #8]
    5584:	bd10      	pop	{r4, pc}
    5586:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    5588:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    558a:	428c      	cmp	r4, r1
	list->tail = node;
    558c:	bf08      	it	eq
    558e:	63c2      	streq	r2, [r0, #60]	; 0x3c
    5590:	e7f6      	b.n	5580 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    5592:	4622      	mov	r2, r4
    5594:	2c00      	cmp	r4, #0
    5596:	d0e7      	beq.n	5568 <bt_l2cap_chan_remove+0xc>
	return node->next;
    5598:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    559a:	2b00      	cmp	r3, #0
    559c:	d0e4      	beq.n	5568 <bt_l2cap_chan_remove+0xc>
    559e:	3b08      	subs	r3, #8
    55a0:	e7e1      	b.n	5566 <bt_l2cap_chan_remove+0xa>

000055a2 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    55a2:	6803      	ldr	r3, [r0, #0]
{
    55a4:	b510      	push	{r4, lr}
    55a6:	4604      	mov	r4, r0
	if (!chan->conn) {
    55a8:	b12b      	cbz	r3, 55b6 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    55aa:	6843      	ldr	r3, [r0, #4]
    55ac:	685b      	ldr	r3, [r3, #4]
    55ae:	b103      	cbz	r3, 55b2 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    55b0:	4798      	blx	r3
	chan->conn = NULL;
    55b2:	2300      	movs	r3, #0
    55b4:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    55b6:	68e3      	ldr	r3, [r4, #12]
    55b8:	b11b      	cbz	r3, 55c2 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    55ba:	4620      	mov	r0, r4
}
    55bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    55c0:	4718      	bx	r3
    55c2:	bd10      	pop	{r4, pc}

000055c4 <l2cap_rtx_timeout>:
{
    55c4:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    55c6:	4b0c      	ldr	r3, [pc, #48]	; (55f8 <l2cap_rtx_timeout+0x34>)
    55c8:	4a0c      	ldr	r2, [pc, #48]	; (55fc <l2cap_rtx_timeout+0x38>)
    55ca:	490d      	ldr	r1, [pc, #52]	; (5600 <l2cap_rtx_timeout+0x3c>)
{
    55cc:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    55ce:	f1a0 0410 	sub.w	r4, r0, #16
{
    55d2:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    55d4:	9302      	str	r3, [sp, #8]
    55d6:	e88d 0018 	stmia.w	sp, {r3, r4}
    55da:	480a      	ldr	r0, [pc, #40]	; (5604 <l2cap_rtx_timeout+0x40>)
    55dc:	4b0a      	ldr	r3, [pc, #40]	; (5608 <l2cap_rtx_timeout+0x44>)
    55de:	f7fb fcd5 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    55e2:	f855 0c10 	ldr.w	r0, [r5, #-16]
    55e6:	4621      	mov	r1, r4
    55e8:	f7ff ffb8 	bl	555c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    55ec:	4620      	mov	r0, r4
}
    55ee:	b005      	add	sp, #20
    55f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    55f4:	f7ff bfd5 	b.w	55a2 <bt_l2cap_chan_del>
    55f8:	00015af1 	.word	0x00015af1
    55fc:	00016fae 	.word	0x00016fae
    5600:	00016060 	.word	0x00016060
    5604:	00017c9d 	.word	0x00017c9d
    5608:	00017a84 	.word	0x00017a84

0000560c <bt_l2cap_connected>:
{
    560c:	4b1a      	ldr	r3, [pc, #104]	; (5678 <bt_l2cap_connected+0x6c>)
    560e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5612:	681c      	ldr	r4, [r3, #0]
    5614:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5616:	b12c      	cbz	r4, 5624 <bt_l2cap_connected+0x18>
	parent->next = child;
    5618:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    561a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 567c <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    561e:	3c08      	subs	r4, #8
    5620:	46b9      	mov	r9, r7
    5622:	b914      	cbnz	r4, 562a <bt_l2cap_connected+0x1e>
}
    5624:	b003      	add	sp, #12
    5626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    562a:	6863      	ldr	r3, [r4, #4]
    562c:	a901      	add	r1, sp, #4
    562e:	4630      	mov	r0, r6
    5630:	4798      	blx	r3
    5632:	2800      	cmp	r0, #0
    5634:	db18      	blt.n	5668 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    5636:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    5638:	8823      	ldrh	r3, [r4, #0]
    563a:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    563c:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5640:	4641      	mov	r1, r8
    5642:	f105 0010 	add.w	r0, r5, #16
    5646:	f00f ff83 	bl	15550 <k_delayed_work_init>
    564a:	60af      	str	r7, [r5, #8]
    564c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    564e:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    5652:	b972      	cbnz	r2, 5672 <bt_l2cap_connected+0x66>
	list->tail = node;
    5654:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    5656:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    5658:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    565a:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    565c:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    565e:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	b103      	cbz	r3, 5668 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    5666:	4798      	blx	r3
	return node->next;
    5668:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    566a:	2c00      	cmp	r4, #0
    566c:	d0da      	beq.n	5624 <bt_l2cap_connected+0x18>
    566e:	3c08      	subs	r4, #8
    5670:	e7d7      	b.n	5622 <bt_l2cap_connected+0x16>
	parent->next = child;
    5672:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5674:	63f3      	str	r3, [r6, #60]	; 0x3c
    5676:	e7ef      	b.n	5658 <bt_l2cap_connected+0x4c>
    5678:	20000498 	.word	0x20000498
    567c:	000055c5 	.word	0x000055c5

00005680 <bt_l2cap_disconnected>:
{
    5680:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5682:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5684:	b1a3      	cbz	r3, 56b0 <bt_l2cap_disconnected+0x30>
    5686:	f1b3 0008 	subs.w	r0, r3, #8
    568a:	d10a      	bne.n	56a2 <bt_l2cap_disconnected+0x22>
    568c:	bd10      	pop	{r4, pc}
    568e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    5690:	f7ff ff87 	bl	55a2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5694:	b164      	cbz	r4, 56b0 <bt_l2cap_disconnected+0x30>
	return node->next;
    5696:	68a3      	ldr	r3, [r4, #8]
    5698:	b103      	cbz	r3, 569c <bt_l2cap_disconnected+0x1c>
    569a:	3b08      	subs	r3, #8
{
    569c:	4620      	mov	r0, r4
    569e:	461c      	mov	r4, r3
    56a0:	e7f6      	b.n	5690 <bt_l2cap_disconnected+0x10>
    56a2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    56a4:	2c00      	cmp	r4, #0
    56a6:	d1f2      	bne.n	568e <bt_l2cap_disconnected+0xe>
}
    56a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    56ac:	f7ff bf79 	b.w	55a2 <bt_l2cap_chan_del>
    56b0:	bd10      	pop	{r4, pc}

000056b2 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    56b2:	3104      	adds	r1, #4
    56b4:	f7ff bdc6 	b.w	5244 <bt_conn_create_pdu>

000056b8 <bt_l2cap_send_cb>:
{
    56b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ba:	4614      	mov	r4, r2
    56bc:	4605      	mov	r5, r0
    56be:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    56c0:	f102 0008 	add.w	r0, r2, #8
    56c4:	2104      	movs	r1, #4
{
    56c6:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    56c8:	f00e fc1c 	bl	13f04 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    56cc:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    56ce:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    56d0:	3904      	subs	r1, #4
    56d2:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    56d4:	4632      	mov	r2, r6
    56d6:	4621      	mov	r1, r4
    56d8:	4628      	mov	r0, r5
}
    56da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    56de:	f7ff b851 	b.w	4784 <bt_conn_send_cb>
	...

000056e4 <l2cap_recv>:
{
    56e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    56e6:	898b      	ldrh	r3, [r1, #12]
    56e8:	2b03      	cmp	r3, #3
{
    56ea:	b087      	sub	sp, #28
    56ec:	4607      	mov	r7, r0
    56ee:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    56f0:	d809      	bhi.n	5706 <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    56f2:	4b5a      	ldr	r3, [pc, #360]	; (585c <l2cap_recv+0x178>)
    56f4:	9301      	str	r3, [sp, #4]
    56f6:	9300      	str	r3, [sp, #0]
    56f8:	4a59      	ldr	r2, [pc, #356]	; (5860 <l2cap_recv+0x17c>)
    56fa:	4b5a      	ldr	r3, [pc, #360]	; (5864 <l2cap_recv+0x180>)
    56fc:	495a      	ldr	r1, [pc, #360]	; (5868 <l2cap_recv+0x184>)
    56fe:	485b      	ldr	r0, [pc, #364]	; (586c <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    5700:	f7fb fc44 	bl	f8c <printk>
		return;
    5704:	e014      	b.n	5730 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5706:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5708:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    570a:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    570e:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5710:	f00e fc00 	bl	13f14 <net_buf_simple_pull>
	if (buf->len != len) {
    5714:	89aa      	ldrh	r2, [r5, #12]
    5716:	4296      	cmp	r6, r2
    5718:	d00c      	beq.n	5734 <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    571a:	4b50      	ldr	r3, [pc, #320]	; (585c <l2cap_recv+0x178>)
    571c:	9303      	str	r3, [sp, #12]
    571e:	9201      	str	r2, [sp, #4]
    5720:	9300      	str	r3, [sp, #0]
    5722:	9602      	str	r6, [sp, #8]
    5724:	4b4f      	ldr	r3, [pc, #316]	; (5864 <l2cap_recv+0x180>)
    5726:	4a4e      	ldr	r2, [pc, #312]	; (5860 <l2cap_recv+0x17c>)
    5728:	494f      	ldr	r1, [pc, #316]	; (5868 <l2cap_recv+0x184>)
    572a:	4851      	ldr	r0, [pc, #324]	; (5870 <l2cap_recv+0x18c>)
    572c:	f7fb fc2e 	bl	f8c <printk>
}
    5730:	b007      	add	sp, #28
    5732:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    5734:	7861      	ldrb	r1, [r4, #1]
    5736:	b939      	cbnz	r1, 5748 <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    5738:	4b48      	ldr	r3, [pc, #288]	; (585c <l2cap_recv+0x178>)
    573a:	9301      	str	r3, [sp, #4]
    573c:	9300      	str	r3, [sp, #0]
    573e:	4a48      	ldr	r2, [pc, #288]	; (5860 <l2cap_recv+0x17c>)
    5740:	4b48      	ldr	r3, [pc, #288]	; (5864 <l2cap_recv+0x180>)
    5742:	4949      	ldr	r1, [pc, #292]	; (5868 <l2cap_recv+0x184>)
    5744:	484b      	ldr	r0, [pc, #300]	; (5874 <l2cap_recv+0x190>)
    5746:	e7db      	b.n	5700 <l2cap_recv+0x1c>
	switch (hdr->code) {
    5748:	7823      	ldrb	r3, [r4, #0]
    574a:	2b12      	cmp	r3, #18
    574c:	d029      	beq.n	57a2 <l2cap_recv+0xbe>
    574e:	2b13      	cmp	r3, #19
    5750:	d01d      	beq.n	578e <l2cap_recv+0xaa>
    5752:	2b01      	cmp	r3, #1
    5754:	d0ec      	beq.n	5730 <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    5756:	4a41      	ldr	r2, [pc, #260]	; (585c <l2cap_recv+0x178>)
    5758:	9202      	str	r2, [sp, #8]
    575a:	e88d 000c 	stmia.w	sp, {r2, r3}
    575e:	4942      	ldr	r1, [pc, #264]	; (5868 <l2cap_recv+0x184>)
    5760:	4b40      	ldr	r3, [pc, #256]	; (5864 <l2cap_recv+0x180>)
    5762:	4a45      	ldr	r2, [pc, #276]	; (5878 <l2cap_recv+0x194>)
    5764:	4845      	ldr	r0, [pc, #276]	; (587c <l2cap_recv+0x198>)
    5766:	f7fb fc11 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    576a:	2202      	movs	r2, #2
    576c:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    576e:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5770:	2001      	movs	r0, #1
    5772:	f7ff fecf 	bl	5514 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    5776:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5778:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    577a:	3008      	adds	r0, #8
    577c:	f00e fb9c 	bl	13eb8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    5780:	2300      	movs	r3, #0
    5782:	7003      	strb	r3, [r0, #0]
    5784:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    5786:	4622      	mov	r2, r4
    5788:	2105      	movs	r1, #5
    578a:	4628      	mov	r0, r5
    578c:	e025      	b.n	57da <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    578e:	2e01      	cmp	r6, #1
    5790:	d8ce      	bhi.n	5730 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    5792:	4b32      	ldr	r3, [pc, #200]	; (585c <l2cap_recv+0x178>)
    5794:	9301      	str	r3, [sp, #4]
    5796:	9300      	str	r3, [sp, #0]
    5798:	4a31      	ldr	r2, [pc, #196]	; (5860 <l2cap_recv+0x17c>)
    579a:	4b39      	ldr	r3, [pc, #228]	; (5880 <l2cap_recv+0x19c>)
    579c:	4932      	ldr	r1, [pc, #200]	; (5868 <l2cap_recv+0x184>)
    579e:	4839      	ldr	r0, [pc, #228]	; (5884 <l2cap_recv+0x1a0>)
    57a0:	e7ae      	b.n	5700 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    57a2:	2e07      	cmp	r6, #7
    57a4:	d807      	bhi.n	57b6 <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    57a6:	4b2d      	ldr	r3, [pc, #180]	; (585c <l2cap_recv+0x178>)
    57a8:	9301      	str	r3, [sp, #4]
    57aa:	9300      	str	r3, [sp, #0]
    57ac:	4a2c      	ldr	r2, [pc, #176]	; (5860 <l2cap_recv+0x17c>)
    57ae:	4b36      	ldr	r3, [pc, #216]	; (5888 <l2cap_recv+0x1a4>)
    57b0:	492d      	ldr	r1, [pc, #180]	; (5868 <l2cap_recv+0x184>)
    57b2:	4836      	ldr	r0, [pc, #216]	; (588c <l2cap_recv+0x1a8>)
    57b4:	e7a4      	b.n	5700 <l2cap_recv+0x1c>
    57b6:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    57b8:	78e6      	ldrb	r6, [r4, #3]
    57ba:	b18e      	cbz	r6, 57e0 <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    57bc:	2202      	movs	r2, #2
    57be:	2001      	movs	r0, #1
    57c0:	f7ff fea8 	bl	5514 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    57c4:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    57c6:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    57c8:	3008      	adds	r0, #8
    57ca:	f00e fb75 	bl	13eb8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    57ce:	2300      	movs	r3, #0
    57d0:	7003      	strb	r3, [r0, #0]
    57d2:	7043      	strb	r3, [r0, #1]
    57d4:	462a      	mov	r2, r5
    57d6:	2105      	movs	r1, #5
    57d8:	4620      	mov	r0, r4
    57da:	f7ff ff6d 	bl	56b8 <bt_l2cap_send_cb>
    57de:	e7a7      	b.n	5730 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    57e0:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    57e2:	7858      	ldrb	r0, [r3, #1]
    57e4:	781a      	ldrb	r2, [r3, #0]
    57e6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    57ea:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    57ee:	78d8      	ldrb	r0, [r3, #3]
    57f0:	789a      	ldrb	r2, [r3, #2]
    57f2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    57f6:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    57fa:	7958      	ldrb	r0, [r3, #5]
    57fc:	791a      	ldrb	r2, [r3, #4]
    57fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    5802:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    5806:	799a      	ldrb	r2, [r3, #6]
    5808:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    580a:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    580c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5810:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    5812:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5816:	f7ff fe7d 	bl	5514 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    581a:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    581c:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    581e:	4620      	mov	r0, r4
    5820:	f7fe fe96 	bl	4550 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5824:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    5826:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    5828:	f107 0008 	add.w	r0, r7, #8
    582c:	f00e fb44 	bl	13eb8 <net_buf_simple_add>
	if (accepted) {
    5830:	b17d      	cbz	r5, 5852 <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    5832:	7006      	strb	r6, [r0, #0]
    5834:	7046      	strb	r6, [r0, #1]
    5836:	2300      	movs	r3, #0
    5838:	463a      	mov	r2, r7
    583a:	2105      	movs	r1, #5
    583c:	4620      	mov	r0, r4
    583e:	f7ff ff3b 	bl	56b8 <bt_l2cap_send_cb>
	if (accepted) {
    5842:	2d00      	cmp	r5, #0
    5844:	f43f af74 	beq.w	5730 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    5848:	a904      	add	r1, sp, #16
    584a:	4620      	mov	r0, r4
    584c:	f7ff fc55 	bl	50fa <bt_conn_le_conn_update>
    5850:	e76e      	b.n	5730 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    5852:	2301      	movs	r3, #1
    5854:	7003      	strb	r3, [r0, #0]
    5856:	7045      	strb	r5, [r0, #1]
    5858:	e7ed      	b.n	5836 <l2cap_recv+0x152>
    585a:	bf00      	nop
    585c:	00015af1 	.word	0x00015af1
    5860:	00016fae 	.word	0x00016fae
    5864:	00017ac1 	.word	0x00017ac1
    5868:	00016060 	.word	0x00016060
    586c:	00017b80 	.word	0x00017b80
    5870:	00017bae 	.word	0x00017bae
    5874:	00017bdf 	.word	0x00017bdf
    5878:	0001702e 	.word	0x0001702e
    587c:	00017c6f 	.word	0x00017c6f
    5880:	00017a96 	.word	0x00017a96
    5884:	00017c10 	.word	0x00017c10
    5888:	00017aa8 	.word	0x00017aa8
    588c:	00017c3c 	.word	0x00017c3c

00005890 <bt_l2cap_le_lookup_tx_cid>:
{
    5890:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5892:	b100      	cbz	r0, 5896 <bt_l2cap_le_lookup_tx_cid+0x6>
    5894:	3808      	subs	r0, #8
    5896:	b900      	cbnz	r0, 589a <bt_l2cap_le_lookup_tx_cid+0xa>
}
    5898:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    589a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    589e:	428b      	cmp	r3, r1
    58a0:	d0fa      	beq.n	5898 <bt_l2cap_le_lookup_tx_cid+0x8>
    58a2:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    58a4:	2000      	movs	r0, #0
    58a6:	2b00      	cmp	r3, #0
    58a8:	d0f6      	beq.n	5898 <bt_l2cap_le_lookup_tx_cid+0x8>
    58aa:	f1a3 0008 	sub.w	r0, r3, #8
    58ae:	e7f2      	b.n	5896 <bt_l2cap_le_lookup_tx_cid+0x6>

000058b0 <bt_l2cap_le_lookup_rx_cid>:
{
    58b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    58b2:	b100      	cbz	r0, 58b6 <bt_l2cap_le_lookup_rx_cid+0x6>
    58b4:	3808      	subs	r0, #8
    58b6:	b900      	cbnz	r0, 58ba <bt_l2cap_le_lookup_rx_cid+0xa>
}
    58b8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    58ba:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    58bc:	428b      	cmp	r3, r1
    58be:	d0fb      	beq.n	58b8 <bt_l2cap_le_lookup_rx_cid+0x8>
    58c0:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    58c2:	2000      	movs	r0, #0
    58c4:	2b00      	cmp	r3, #0
    58c6:	d0f7      	beq.n	58b8 <bt_l2cap_le_lookup_rx_cid+0x8>
    58c8:	f1a3 0008 	sub.w	r0, r3, #8
    58cc:	e7f3      	b.n	58b6 <bt_l2cap_le_lookup_rx_cid+0x6>
	...

000058d0 <bt_l2cap_recv>:
{
    58d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    58d2:	898b      	ldrh	r3, [r1, #12]
    58d4:	2b03      	cmp	r3, #3
{
    58d6:	4606      	mov	r6, r0
    58d8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    58da:	d80e      	bhi.n	58fa <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    58dc:	4b15      	ldr	r3, [pc, #84]	; (5934 <bt_l2cap_recv+0x64>)
    58de:	9301      	str	r3, [sp, #4]
    58e0:	9300      	str	r3, [sp, #0]
    58e2:	4a15      	ldr	r2, [pc, #84]	; (5938 <bt_l2cap_recv+0x68>)
    58e4:	4b15      	ldr	r3, [pc, #84]	; (593c <bt_l2cap_recv+0x6c>)
    58e6:	4916      	ldr	r1, [pc, #88]	; (5940 <bt_l2cap_recv+0x70>)
    58e8:	4816      	ldr	r0, [pc, #88]	; (5944 <bt_l2cap_recv+0x74>)
    58ea:	f7fb fb4f 	bl	f8c <printk>
	net_buf_unref(buf);
    58ee:	4620      	mov	r0, r4
}
    58f0:	b004      	add	sp, #16
    58f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    58f6:	f00e baad 	b.w	13e54 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    58fa:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    58fc:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    58fe:	f850 3f08 	ldr.w	r3, [r0, #8]!
    5902:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5904:	f00e fb06 	bl	13f14 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    5908:	4629      	mov	r1, r5
    590a:	4630      	mov	r0, r6
    590c:	f7ff ffd0 	bl	58b0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5910:	b950      	cbnz	r0, 5928 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    5912:	4b08      	ldr	r3, [pc, #32]	; (5934 <bt_l2cap_recv+0x64>)
    5914:	9302      	str	r3, [sp, #8]
    5916:	e88d 0028 	stmia.w	sp, {r3, r5}
    591a:	4a0b      	ldr	r2, [pc, #44]	; (5948 <bt_l2cap_recv+0x78>)
    591c:	4b07      	ldr	r3, [pc, #28]	; (593c <bt_l2cap_recv+0x6c>)
    591e:	4908      	ldr	r1, [pc, #32]	; (5940 <bt_l2cap_recv+0x70>)
    5920:	480a      	ldr	r0, [pc, #40]	; (594c <bt_l2cap_recv+0x7c>)
    5922:	f7fb fb33 	bl	f8c <printk>
    5926:	e7e2      	b.n	58ee <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    5928:	6843      	ldr	r3, [r0, #4]
    592a:	4621      	mov	r1, r4
    592c:	691b      	ldr	r3, [r3, #16]
    592e:	4798      	blx	r3
    5930:	e7dd      	b.n	58ee <bt_l2cap_recv+0x1e>
    5932:	bf00      	nop
    5934:	00015af1 	.word	0x00015af1
    5938:	00016fae 	.word	0x00016fae
    593c:	00017acc 	.word	0x00017acc
    5940:	00016060 	.word	0x00016060
    5944:	00017ae7 	.word	0x00017ae7
    5948:	0001702e 	.word	0x0001702e
    594c:	00017b14 	.word	0x00017b14

00005950 <bt_l2cap_update_conn_param>:
{
    5950:	b570      	push	{r4, r5, r6, lr}
	ident++;
    5952:	4b12      	ldr	r3, [pc, #72]	; (599c <bt_l2cap_update_conn_param+0x4c>)
    5954:	781a      	ldrb	r2, [r3, #0]
    5956:	3201      	adds	r2, #1
	if (!ident) {
    5958:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    595c:	bf08      	it	eq
    595e:	2201      	moveq	r2, #1
    5960:	701a      	strb	r2, [r3, #0]
{
    5962:	460c      	mov	r4, r1
    5964:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5966:	7819      	ldrb	r1, [r3, #0]
    5968:	2208      	movs	r2, #8
    596a:	2012      	movs	r0, #18
    596c:	f7ff fdd2 	bl	5514 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5970:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5972:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5974:	4408      	add	r0, r1
    5976:	f00e fa9f 	bl	13eb8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    597a:	8823      	ldrh	r3, [r4, #0]
    597c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    597e:	8863      	ldrh	r3, [r4, #2]
    5980:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    5982:	88a3      	ldrh	r3, [r4, #4]
    5984:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5986:	88e3      	ldrh	r3, [r4, #6]
    5988:	80c3      	strh	r3, [r0, #6]
    598a:	4632      	mov	r2, r6
    598c:	4628      	mov	r0, r5
    598e:	2300      	movs	r3, #0
    5990:	2105      	movs	r1, #5
    5992:	f7ff fe91 	bl	56b8 <bt_l2cap_send_cb>
}
    5996:	2000      	movs	r0, #0
    5998:	bd70      	pop	{r4, r5, r6, pc}
    599a:	bf00      	nop
    599c:	20000494 	.word	0x20000494

000059a0 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    59a0:	4801      	ldr	r0, [pc, #4]	; (59a8 <bt_l2cap_init+0x8>)
    59a2:	f7ff bdcb 	b.w	553c <bt_l2cap_le_fixed_chan_register>
    59a6:	bf00      	nop
    59a8:	20003c38 	.word	0x20003c38

000059ac <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    59ac:	2006      	movs	r0, #6
    59ae:	4770      	bx	lr

000059b0 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    59b0:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    59b2:	4a0a      	ldr	r2, [pc, #40]	; (59dc <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    59b4:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    59b6:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    59ba:	4284      	cmp	r4, r0
    59bc:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    59c0:	d102      	bne.n	59c8 <att_op_get_type+0x18>
			return handlers[i].type;
    59c2:	440a      	add	r2, r1
    59c4:	7890      	ldrb	r0, [r2, #2]
    59c6:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    59c8:	3301      	adds	r3, #1
    59ca:	2b1b      	cmp	r3, #27
    59cc:	d1f3      	bne.n	59b6 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    59ce:	f010 0f40 	tst.w	r0, #64	; 0x40
    59d2:	bf14      	ite	ne
    59d4:	2000      	movne	r0, #0
    59d6:	2006      	moveq	r0, #6
}
    59d8:	bd10      	pop	{r4, pc}
    59da:	bf00      	nop
    59dc:	00017fc4 	.word	0x00017fc4

000059e0 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    59e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    59e2:	4d11      	ldr	r5, [pc, #68]	; (5a28 <bt_att_accept+0x48>)
    59e4:	682c      	ldr	r4, [r5, #0]
{
    59e6:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    59e8:	b984      	cbnz	r4, 5a0c <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    59ea:	22e4      	movs	r2, #228	; 0xe4
    59ec:	4621      	mov	r1, r4
    59ee:	4628      	mov	r0, r5
    59f0:	f7fc f930 	bl	1c54 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    59f4:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    59f6:	4b0d      	ldr	r3, [pc, #52]	; (5a2c <bt_att_accept+0x4c>)
    59f8:	606b      	str	r3, [r5, #4]
    59fa:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    59fe:	4611      	mov	r1, r2
    5a00:	f00f fab6 	bl	14f70 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    5a04:	6035      	str	r5, [r6, #0]

		return 0;
    5a06:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    5a08:	b004      	add	sp, #16
    5a0a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    5a0c:	4b08      	ldr	r3, [pc, #32]	; (5a30 <bt_att_accept+0x50>)
    5a0e:	9302      	str	r3, [sp, #8]
    5a10:	9001      	str	r0, [sp, #4]
    5a12:	9300      	str	r3, [sp, #0]
    5a14:	4a07      	ldr	r2, [pc, #28]	; (5a34 <bt_att_accept+0x54>)
    5a16:	4b08      	ldr	r3, [pc, #32]	; (5a38 <bt_att_accept+0x58>)
    5a18:	4908      	ldr	r1, [pc, #32]	; (5a3c <bt_att_accept+0x5c>)
    5a1a:	4809      	ldr	r0, [pc, #36]	; (5a40 <bt_att_accept+0x60>)
    5a1c:	f7fb fab6 	bl	f8c <printk>
	return -ENOMEM;
    5a20:	f06f 000b 	mvn.w	r0, #11
    5a24:	e7f0      	b.n	5a08 <bt_att_accept+0x28>
    5a26:	bf00      	nop
    5a28:	200004a0 	.word	0x200004a0
    5a2c:	20003c64 	.word	0x20003c64
    5a30:	00015af1 	.word	0x00015af1
    5a34:	00016fae 	.word	0x00016fae
    5a38:	00017d3c 	.word	0x00017d3c
    5a3c:	00016060 	.word	0x00016060
    5a40:	00017e58 	.word	0x00017e58

00005a44 <att_req_destroy>:
{
    5a44:	b510      	push	{r4, lr}
    5a46:	4604      	mov	r4, r0
	if (req->buf) {
    5a48:	6900      	ldr	r0, [r0, #16]
    5a4a:	b108      	cbz	r0, 5a50 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    5a4c:	f00e fa02 	bl	13e54 <net_buf_unref>
	if (req->destroy) {
    5a50:	68a3      	ldr	r3, [r4, #8]
    5a52:	b10b      	cbz	r3, 5a58 <att_req_destroy+0x14>
		req->destroy(req);
    5a54:	4620      	mov	r0, r4
    5a56:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5a58:	4620      	mov	r0, r4
    5a5a:	2214      	movs	r2, #20
    5a5c:	2100      	movs	r1, #0
}
    5a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5a62:	f7fc b8f7 	b.w	1c54 <memset>

00005a66 <att_notify>:
{
    5a66:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5a68:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5a6a:	f101 0008 	add.w	r0, r1, #8
{
    5a6e:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5a70:	f00e fa60 	bl	13f34 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    5a74:	89a3      	ldrh	r3, [r4, #12]
    5a76:	68a2      	ldr	r2, [r4, #8]
    5a78:	4601      	mov	r1, r0
    5a7a:	4628      	mov	r0, r5
    5a7c:	f001 fe66 	bl	774c <bt_gatt_notification>
}
    5a80:	2000      	movs	r0, #0
    5a82:	bd38      	pop	{r3, r4, r5, pc}

00005a84 <read_group_cb>:
{
    5a84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5a88:	680d      	ldr	r5, [r1, #0]
{
    5a8a:	4606      	mov	r6, r0
    5a8c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5a8e:	f04f 0800 	mov.w	r8, #0
    5a92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5a96:	a902      	add	r1, sp, #8
    5a98:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5a9a:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5a9c:	f88d 8008 	strb.w	r8, [sp, #8]
    5aa0:	f8ad 300a 	strh.w	r3, [sp, #10]
    5aa4:	f7fc fa8e 	bl	1fc4 <bt_uuid_cmp>
    5aa8:	b198      	cbz	r0, 5ad2 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5aaa:	f642 0301 	movw	r3, #10241	; 0x2801
    5aae:	a903      	add	r1, sp, #12
    5ab0:	6830      	ldr	r0, [r6, #0]
    5ab2:	f88d 800c 	strb.w	r8, [sp, #12]
    5ab6:	f8ad 300e 	strh.w	r3, [sp, #14]
    5aba:	f7fc fa83 	bl	1fc4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5abe:	b140      	cbz	r0, 5ad2 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5ac0:	6923      	ldr	r3, [r4, #16]
    5ac2:	b123      	cbz	r3, 5ace <read_group_cb+0x4a>
    5ac4:	8a32      	ldrh	r2, [r6, #16]
    5ac6:	8859      	ldrh	r1, [r3, #2]
    5ac8:	4291      	cmp	r1, r2
    5aca:	d200      	bcs.n	5ace <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5acc:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5ace:	2001      	movs	r0, #1
    5ad0:	e012      	b.n	5af8 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5ad2:	6861      	ldr	r1, [r4, #4]
    5ad4:	6830      	ldr	r0, [r6, #0]
    5ad6:	f7fc fa75 	bl	1fc4 <bt_uuid_cmp>
    5ada:	b110      	cbz	r0, 5ae2 <read_group_cb+0x5e>
		data->group = NULL;
    5adc:	2300      	movs	r3, #0
    5ade:	6123      	str	r3, [r4, #16]
    5ae0:	e7f5      	b.n	5ace <read_group_cb+0x4a>
	if (data->rsp->len &&
    5ae2:	68e3      	ldr	r3, [r4, #12]
    5ae4:	68a0      	ldr	r0, [r4, #8]
    5ae6:	781a      	ldrb	r2, [r3, #0]
    5ae8:	b14a      	cbz	r2, 5afe <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5aea:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5aee:	8981      	ldrh	r1, [r0, #12]
    5af0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5af2:	4293      	cmp	r3, r2
    5af4:	da03      	bge.n	5afe <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    5af6:	2000      	movs	r0, #0
}
    5af8:	b004      	add	sp, #16
    5afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5afe:	2104      	movs	r1, #4
    5b00:	3008      	adds	r0, #8
    5b02:	f00e f9d9 	bl	13eb8 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5b06:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5b08:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5b0a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5b0c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5b0e:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5b10:	898a      	ldrh	r2, [r1, #12]
    5b12:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5b16:	6889      	ldr	r1, [r1, #8]
    5b18:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5b1c:	1a9b      	subs	r3, r3, r2
    5b1e:	2500      	movs	r5, #0
    5b20:	440a      	add	r2, r1
    5b22:	9500      	str	r5, [sp, #0]
    5b24:	4631      	mov	r1, r6
    5b26:	b29b      	uxth	r3, r3
    5b28:	4638      	mov	r0, r7
    5b2a:	47c0      	blx	r8
	if (read < 0) {
    5b2c:	1e01      	subs	r1, r0, #0
    5b2e:	dbe2      	blt.n	5af6 <read_group_cb+0x72>
	if (!data->rsp->len) {
    5b30:	68e0      	ldr	r0, [r4, #12]
    5b32:	7802      	ldrb	r2, [r0, #0]
    5b34:	1d0b      	adds	r3, r1, #4
    5b36:	b92a      	cbnz	r2, 5b44 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5b38:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5b3a:	68a0      	ldr	r0, [r4, #8]
    5b3c:	3008      	adds	r0, #8
    5b3e:	f00e f9bb 	bl	13eb8 <net_buf_simple_add>
    5b42:	e7c4      	b.n	5ace <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5b44:	429a      	cmp	r2, r3
    5b46:	d0f8      	beq.n	5b3a <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5b48:	68a2      	ldr	r2, [r4, #8]
    5b4a:	8993      	ldrh	r3, [r2, #12]
    5b4c:	3b04      	subs	r3, #4
    5b4e:	8193      	strh	r3, [r2, #12]
    5b50:	e7d1      	b.n	5af6 <read_group_cb+0x72>

00005b52 <find_info_cb>:
	if (!data->rsp) {
    5b52:	688b      	ldr	r3, [r1, #8]
{
    5b54:	b570      	push	{r4, r5, r6, lr}
    5b56:	4605      	mov	r5, r0
    5b58:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    5b5a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    5b5c:	b963      	cbnz	r3, 5b78 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5b5e:	6848      	ldr	r0, [r1, #4]
    5b60:	2101      	movs	r1, #1
    5b62:	3008      	adds	r0, #8
    5b64:	f00e f9a8 	bl	13eb8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5b68:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5b6a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5b6c:	781b      	ldrb	r3, [r3, #0]
    5b6e:	2b00      	cmp	r3, #0
    5b70:	bf0c      	ite	eq
    5b72:	2301      	moveq	r3, #1
    5b74:	2302      	movne	r3, #2
    5b76:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5b78:	68a3      	ldr	r3, [r4, #8]
    5b7a:	781b      	ldrb	r3, [r3, #0]
    5b7c:	2b01      	cmp	r3, #1
    5b7e:	d003      	beq.n	5b88 <find_info_cb+0x36>
    5b80:	2b02      	cmp	r3, #2
    5b82:	d01a      	beq.n	5bba <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5b84:	2000      	movs	r0, #0
}
    5b86:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5b88:	682b      	ldr	r3, [r5, #0]
    5b8a:	781b      	ldrb	r3, [r3, #0]
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d1f9      	bne.n	5b84 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5b90:	6860      	ldr	r0, [r4, #4]
    5b92:	2104      	movs	r1, #4
    5b94:	3008      	adds	r0, #8
    5b96:	f00e f98f 	bl	13eb8 <net_buf_simple_add>
    5b9a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5b9c:	8a2b      	ldrh	r3, [r5, #16]
    5b9e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5ba0:	682b      	ldr	r3, [r5, #0]
    5ba2:	885b      	ldrh	r3, [r3, #2]
    5ba4:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5ba6:	6863      	ldr	r3, [r4, #4]
    5ba8:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5bac:	899b      	ldrh	r3, [r3, #12]
    5bae:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5bb0:	2804      	cmp	r0, #4
    5bb2:	bf94      	ite	ls
    5bb4:	2000      	movls	r0, #0
    5bb6:	2001      	movhi	r0, #1
    5bb8:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5bba:	682b      	ldr	r3, [r5, #0]
    5bbc:	781b      	ldrb	r3, [r3, #0]
    5bbe:	2b02      	cmp	r3, #2
    5bc0:	d1e0      	bne.n	5b84 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5bc2:	6860      	ldr	r0, [r4, #4]
    5bc4:	2112      	movs	r1, #18
    5bc6:	3008      	adds	r0, #8
    5bc8:	f00e f976 	bl	13eb8 <net_buf_simple_add>
    5bcc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5bce:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5bd0:	8a2b      	ldrh	r3, [r5, #16]
    5bd2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5bd6:	2210      	movs	r2, #16
    5bd8:	3101      	adds	r1, #1
    5bda:	f7fc f80f 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5bde:	6863      	ldr	r3, [r4, #4]
    5be0:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5be4:	899b      	ldrh	r3, [r3, #12]
    5be6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5be8:	2812      	cmp	r0, #18
    5bea:	e7e2      	b.n	5bb2 <find_info_cb+0x60>

00005bec <find_type_cb>:
{
    5bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5bf0:	680e      	ldr	r6, [r1, #0]
{
    5bf2:	b088      	sub	sp, #32
    5bf4:	4605      	mov	r5, r0
    5bf6:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5bf8:	2700      	movs	r7, #0
    5bfa:	f642 0301 	movw	r3, #10241	; 0x2801
    5bfe:	a902      	add	r1, sp, #8
    5c00:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5c02:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5c06:	f88d 7008 	strb.w	r7, [sp, #8]
    5c0a:	f8ad 300a 	strh.w	r3, [sp, #10]
    5c0e:	f7fc f9d9 	bl	1fc4 <bt_uuid_cmp>
    5c12:	b928      	cbnz	r0, 5c20 <find_type_cb+0x34>
		data->group = NULL;
    5c14:	2300      	movs	r3, #0
    5c16:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    5c18:	2001      	movs	r0, #1
}
    5c1a:	b008      	add	sp, #32
    5c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5c20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5c24:	a903      	add	r1, sp, #12
    5c26:	6828      	ldr	r0, [r5, #0]
    5c28:	f88d 700c 	strb.w	r7, [sp, #12]
    5c2c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c30:	f7fc f9c8 	bl	1fc4 <bt_uuid_cmp>
    5c34:	b140      	cbz	r0, 5c48 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    5c36:	68a3      	ldr	r3, [r4, #8]
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d0ed      	beq.n	5c18 <find_type_cb+0x2c>
    5c3c:	8a2a      	ldrh	r2, [r5, #16]
    5c3e:	8859      	ldrh	r1, [r3, #2]
    5c40:	4291      	cmp	r1, r2
    5c42:	d2e9      	bcs.n	5c18 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5c44:	805a      	strh	r2, [r3, #2]
    5c46:	e7e7      	b.n	5c18 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5c48:	6862      	ldr	r2, [r4, #4]
    5c4a:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    5c4e:	8992      	ldrh	r2, [r2, #12]
    5c50:	1a9b      	subs	r3, r3, r2
    5c52:	2b03      	cmp	r3, #3
    5c54:	d9e1      	bls.n	5c1a <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5c56:	2310      	movs	r3, #16
    5c58:	9000      	str	r0, [sp, #0]
    5c5a:	eb0d 0203 	add.w	r2, sp, r3
    5c5e:	686e      	ldr	r6, [r5, #4]
    5c60:	4629      	mov	r1, r5
    5c62:	4640      	mov	r0, r8
    5c64:	47b0      	blx	r6
	if (read < 0) {
    5c66:	1e02      	subs	r2, r0, #0
    5c68:	dbd4      	blt.n	5c14 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    5c6a:	7c23      	ldrb	r3, [r4, #16]
    5c6c:	429a      	cmp	r2, r3
    5c6e:	d1d1      	bne.n	5c14 <find_type_cb+0x28>
    5c70:	a904      	add	r1, sp, #16
    5c72:	68e0      	ldr	r0, [r4, #12]
    5c74:	f7fb ffad 	bl	1bd2 <memcmp>
    5c78:	2800      	cmp	r0, #0
    5c7a:	d1cb      	bne.n	5c14 <find_type_cb+0x28>
	data->err = 0x00;
    5c7c:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5c7e:	6860      	ldr	r0, [r4, #4]
    5c80:	2104      	movs	r1, #4
    5c82:	3008      	adds	r0, #8
    5c84:	f00e f918 	bl	13eb8 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5c88:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5c8a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5c8c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5c8e:	8043      	strh	r3, [r0, #2]
    5c90:	e7c2      	b.n	5c18 <find_type_cb+0x2c>
	...

00005c94 <bt_att_connected>:
{
    5c94:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5c96:	2317      	movs	r3, #23
{
    5c98:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5c9a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5c9e:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5ca0:	4906      	ldr	r1, [pc, #24]	; (5cbc <bt_att_connected+0x28>)
    5ca2:	30a4      	adds	r0, #164	; 0xa4
    5ca4:	f00f fc54 	bl	15550 <k_delayed_work_init>
	list->head = NULL;
    5ca8:	2300      	movs	r3, #0
    5caa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    5cae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    5cb2:	6820      	ldr	r0, [r4, #0]
}
    5cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5cb8:	f001 bd7c 	b.w	77b4 <bt_gatt_connected>
    5cbc:	000061e1 	.word	0x000061e1

00005cc0 <check_perm.isra.4>:
	if ((mask & BT_GATT_PERM_READ) &&
    5cc0:	f011 0f01 	tst.w	r1, #1
    5cc4:	7c83      	ldrb	r3, [r0, #18]
    5cc6:	d004      	beq.n	5cd2 <check_perm.isra.4+0x12>
    5cc8:	f013 0f15 	tst.w	r3, #21
    5ccc:	d012      	beq.n	5cf4 <check_perm.isra.4+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5cce:	6842      	ldr	r2, [r0, #4]
    5cd0:	b182      	cbz	r2, 5cf4 <check_perm.isra.4+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    5cd2:	078a      	lsls	r2, r1, #30
    5cd4:	d504      	bpl.n	5ce0 <check_perm.isra.4+0x20>
    5cd6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    5cda:	d00d      	beq.n	5cf8 <check_perm.isra.4+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5cdc:	6882      	ldr	r2, [r0, #8]
    5cde:	b15a      	cbz	r2, 5cf8 <check_perm.isra.4+0x38>
	mask &= attr->perm;
    5ce0:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5ce2:	f011 0f30 	tst.w	r1, #48	; 0x30
    5ce6:	d109      	bne.n	5cfc <check_perm.isra.4+0x3c>
	return 0;
    5ce8:	f011 0f0c 	tst.w	r1, #12
    5cec:	bf14      	ite	ne
    5cee:	200f      	movne	r0, #15
    5cf0:	2000      	moveq	r0, #0
    5cf2:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5cf4:	2002      	movs	r0, #2
    5cf6:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    5cf8:	2003      	movs	r0, #3
    5cfa:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5cfc:	2005      	movs	r0, #5
}
    5cfe:	4770      	bx	lr

00005d00 <read_type_cb>:
{
    5d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5d04:	680f      	ldr	r7, [r1, #0]
{
    5d06:	4606      	mov	r6, r0
    5d08:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5d0a:	6800      	ldr	r0, [r0, #0]
    5d0c:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    5d0e:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5d12:	f7fc f957 	bl	1fc4 <bt_uuid_cmp>
    5d16:	4680      	mov	r8, r0
    5d18:	2800      	cmp	r0, #0
    5d1a:	d14d      	bne.n	5db8 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5d1c:	2115      	movs	r1, #21
    5d1e:	4630      	mov	r0, r6
    5d20:	f7ff ffce 	bl	5cc0 <check_perm.isra.4>
    5d24:	4605      	mov	r5, r0
    5d26:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5d28:	b148      	cbz	r0, 5d3e <read_type_cb+0x3e>
		if (data->rsp->len) {
    5d2a:	68e3      	ldr	r3, [r4, #12]
    5d2c:	781d      	ldrb	r5, [r3, #0]
    5d2e:	b115      	cbz	r5, 5d36 <read_type_cb+0x36>
			data->err = 0x00;
    5d30:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5d34:	4645      	mov	r5, r8
}
    5d36:	4628      	mov	r0, r5
    5d38:	b003      	add	sp, #12
    5d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5d3e:	68a0      	ldr	r0, [r4, #8]
    5d40:	2102      	movs	r1, #2
    5d42:	3008      	adds	r0, #8
    5d44:	f00e f8b8 	bl	13eb8 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5d48:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5d4a:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5d4c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5d4e:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5d50:	898a      	ldrh	r2, [r1, #12]
    5d52:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    5d56:	6889      	ldr	r1, [r1, #8]
    5d58:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5d5c:	9500      	str	r5, [sp, #0]
    5d5e:	1a9b      	subs	r3, r3, r2
    5d60:	b29b      	uxth	r3, r3
    5d62:	440a      	add	r2, r1
    5d64:	4648      	mov	r0, r9
    5d66:	4631      	mov	r1, r6
    5d68:	47c0      	blx	r8
	if (read < 0) {
    5d6a:	1e01      	subs	r1, r0, #0
    5d6c:	da08      	bge.n	5d80 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    5d6e:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5d72:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5d74:	bf9a      	itte	ls
    5d76:	4249      	negls	r1, r1
    5d78:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5d7a:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5d7c:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    5d7e:	e7da      	b.n	5d36 <read_type_cb+0x36>
	if (!data->rsp->len) {
    5d80:	68e0      	ldr	r0, [r4, #12]
    5d82:	7802      	ldrb	r2, [r0, #0]
    5d84:	1c8b      	adds	r3, r1, #2
    5d86:	b982      	cbnz	r2, 5daa <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5d88:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5d8a:	68a0      	ldr	r0, [r4, #8]
    5d8c:	3008      	adds	r0, #8
    5d8e:	f00e f893 	bl	13eb8 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5d92:	68a3      	ldr	r3, [r4, #8]
    5d94:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    5d98:	899b      	ldrh	r3, [r3, #12]
    5d9a:	1aed      	subs	r5, r5, r3
    5d9c:	68e3      	ldr	r3, [r4, #12]
    5d9e:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5da0:	429d      	cmp	r5, r3
    5da2:	bfd4      	ite	le
    5da4:	2500      	movle	r5, #0
    5da6:	2501      	movgt	r5, #1
    5da8:	e7c5      	b.n	5d36 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    5daa:	429a      	cmp	r2, r3
    5dac:	d0ed      	beq.n	5d8a <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    5dae:	68a2      	ldr	r2, [r4, #8]
    5db0:	8993      	ldrh	r3, [r2, #12]
    5db2:	3b02      	subs	r3, #2
    5db4:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5db6:	e7be      	b.n	5d36 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5db8:	2501      	movs	r5, #1
    5dba:	e7bc      	b.n	5d36 <read_type_cb+0x36>

00005dbc <uuid_create>:
{
    5dbc:	b510      	push	{r4, lr}
	switch (buf->len) {
    5dbe:	898a      	ldrh	r2, [r1, #12]
    5dc0:	2a02      	cmp	r2, #2
{
    5dc2:	4604      	mov	r4, r0
	switch (buf->len) {
    5dc4:	d003      	beq.n	5dce <uuid_create+0x12>
    5dc6:	2a10      	cmp	r2, #16
    5dc8:	d00a      	beq.n	5de0 <uuid_create+0x24>
	return false;
    5dca:	2000      	movs	r0, #0
}
    5dcc:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    5dce:	2300      	movs	r3, #0
    5dd0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5dd2:	f101 0008 	add.w	r0, r1, #8
    5dd6:	f00e f8ad 	bl	13f34 <net_buf_simple_pull_le16>
    5dda:	8060      	strh	r0, [r4, #2]
		return true;
    5ddc:	2001      	movs	r0, #1
    5dde:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    5de0:	2302      	movs	r3, #2
    5de2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5de6:	6889      	ldr	r1, [r1, #8]
    5de8:	f7fb ff08 	bl	1bfc <memcpy>
    5dec:	e7f6      	b.n	5ddc <uuid_create+0x20>
	...

00005df0 <att_req_sent>:
{
    5df0:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5df2:	2104      	movs	r1, #4
    5df4:	f7ff fd4c 	bl	5890 <bt_l2cap_le_lookup_tx_cid>
    5df8:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5dfa:	30cc      	adds	r0, #204	; 0xcc
    5dfc:	f00f f8c1 	bl	14f82 <_impl_k_sem_give>
	if (att->req) {
    5e00:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5e04:	b143      	cbz	r3, 5e18 <att_req_sent+0x28>
    5e06:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    5e0a:	f247 5230 	movw	r2, #30000	; 0x7530
    5e0e:	4803      	ldr	r0, [pc, #12]	; (5e1c <att_req_sent+0x2c>)
}
    5e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e14:	f00f bc10 	b.w	15638 <k_delayed_work_submit_to_queue>
    5e18:	bd10      	pop	{r4, pc}
    5e1a:	bf00      	nop
    5e1c:	200019b8 	.word	0x200019b8

00005e20 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5e20:	6803      	ldr	r3, [r0, #0]
    5e22:	7a5b      	ldrb	r3, [r3, #9]
    5e24:	2b03      	cmp	r3, #3
    5e26:	d10a      	bne.n	5e3e <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5e28:	f3bf 8f5b 	dmb	ish
    5e2c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    5e30:	f3bf 8f5b 	dmb	ish
    5e34:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5e38:	f000 0001 	and.w	r0, r0, #1
    5e3c:	4770      	bx	lr
    5e3e:	2001      	movs	r0, #1
}
    5e40:	4770      	bx	lr

00005e42 <att_prepare_write_req>:
    5e42:	2006      	movs	r0, #6
    5e44:	4770      	bx	lr

00005e46 <att_pdu_sent>:
{
    5e46:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5e48:	2104      	movs	r1, #4
    5e4a:	f7ff fd21 	bl	5890 <bt_l2cap_le_lookup_tx_cid>
}
    5e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e52:	30cc      	adds	r0, #204	; 0xcc
    5e54:	f00f b895 	b.w	14f82 <_impl_k_sem_give>

00005e58 <att_rsp_sent>:
{
    5e58:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5e5a:	2104      	movs	r1, #4
    5e5c:	f7ff fd18 	bl	5890 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e60:	f3bf 8f5b 	dmb	ish
    5e64:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5e68:	e853 2f00 	ldrex	r2, [r3]
    5e6c:	f022 0201 	bic.w	r2, r2, #1
    5e70:	e843 2100 	strex	r1, r2, [r3]
    5e74:	2900      	cmp	r1, #0
    5e76:	d1f7      	bne.n	5e68 <att_rsp_sent+0x10>
    5e78:	f3bf 8f5b 	dmb	ish
    5e7c:	30cc      	adds	r0, #204	; 0xcc
}
    5e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e82:	f00f b87e 	b.w	14f82 <_impl_k_sem_give>

00005e86 <att_cfm_sent>:
{
    5e86:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5e88:	2104      	movs	r1, #4
    5e8a:	f7ff fd01 	bl	5890 <bt_l2cap_le_lookup_tx_cid>
    5e8e:	f3bf 8f5b 	dmb	ish
    5e92:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5e96:	e853 2f00 	ldrex	r2, [r3]
    5e9a:	f022 0202 	bic.w	r2, r2, #2
    5e9e:	e843 2100 	strex	r1, r2, [r3]
    5ea2:	2900      	cmp	r1, #0
    5ea4:	d1f7      	bne.n	5e96 <att_cfm_sent+0x10>
    5ea6:	f3bf 8f5b 	dmb	ish
    5eaa:	30cc      	adds	r0, #204	; 0xcc
}
    5eac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5eb0:	f00f b867 	b.w	14f82 <_impl_k_sem_give>

00005eb4 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5eb4:	7a43      	ldrb	r3, [r0, #9]
    5eb6:	2b03      	cmp	r3, #3
{
    5eb8:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5eba:	d00b      	beq.n	5ed4 <att_chan_get+0x20>
		BT_WARN("Not connected");
    5ebc:	4b15      	ldr	r3, [pc, #84]	; (5f14 <att_chan_get+0x60>)
    5ebe:	9301      	str	r3, [sp, #4]
    5ec0:	9300      	str	r3, [sp, #0]
    5ec2:	4a15      	ldr	r2, [pc, #84]	; (5f18 <att_chan_get+0x64>)
    5ec4:	4b15      	ldr	r3, [pc, #84]	; (5f1c <att_chan_get+0x68>)
    5ec6:	4916      	ldr	r1, [pc, #88]	; (5f20 <att_chan_get+0x6c>)
    5ec8:	4816      	ldr	r0, [pc, #88]	; (5f24 <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    5eca:	f7fb f85f 	bl	f8c <printk>
		return NULL;
    5ece:	2000      	movs	r0, #0
}
    5ed0:	b002      	add	sp, #8
    5ed2:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5ed4:	2104      	movs	r1, #4
    5ed6:	f7ff fceb 	bl	58b0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5eda:	4604      	mov	r4, r0
    5edc:	b950      	cbnz	r0, 5ef4 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    5ede:	4b0d      	ldr	r3, [pc, #52]	; (5f14 <att_chan_get+0x60>)
    5ee0:	9301      	str	r3, [sp, #4]
    5ee2:	9300      	str	r3, [sp, #0]
    5ee4:	4a10      	ldr	r2, [pc, #64]	; (5f28 <att_chan_get+0x74>)
    5ee6:	4b0d      	ldr	r3, [pc, #52]	; (5f1c <att_chan_get+0x68>)
    5ee8:	490d      	ldr	r1, [pc, #52]	; (5f20 <att_chan_get+0x6c>)
    5eea:	4810      	ldr	r0, [pc, #64]	; (5f2c <att_chan_get+0x78>)
    5eec:	f7fb f84e 	bl	f8c <printk>
    5ef0:	4620      	mov	r0, r4
    5ef2:	e7ed      	b.n	5ed0 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ef4:	f3bf 8f5b 	dmb	ish
    5ef8:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5efc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5f00:	075b      	lsls	r3, r3, #29
    5f02:	d5f5      	bpl.n	5ef0 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    5f04:	4b03      	ldr	r3, [pc, #12]	; (5f14 <att_chan_get+0x60>)
    5f06:	9301      	str	r3, [sp, #4]
    5f08:	9300      	str	r3, [sp, #0]
    5f0a:	4a03      	ldr	r2, [pc, #12]	; (5f18 <att_chan_get+0x64>)
    5f0c:	4b03      	ldr	r3, [pc, #12]	; (5f1c <att_chan_get+0x68>)
    5f0e:	4904      	ldr	r1, [pc, #16]	; (5f20 <att_chan_get+0x6c>)
    5f10:	4807      	ldr	r0, [pc, #28]	; (5f30 <att_chan_get+0x7c>)
    5f12:	e7da      	b.n	5eca <att_chan_get+0x16>
    5f14:	00015af1 	.word	0x00015af1
    5f18:	0001702e 	.word	0x0001702e
    5f1c:	00017d11 	.word	0x00017d11
    5f20:	00016060 	.word	0x00016060
    5f24:	00017d56 	.word	0x00017d56
    5f28:	00016fae 	.word	0x00016fae
    5f2c:	00017d74 	.word	0x00017d74
    5f30:	00017d9f 	.word	0x00017d9f

00005f34 <write_cb>:
{
    5f34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5f38:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5f3a:	f8d1 8000 	ldr.w	r8, [r1]
    5f3e:	212a      	movs	r1, #42	; 0x2a
{
    5f40:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5f42:	f7ff febd 	bl	5cc0 <check_perm.isra.4>
    5f46:	4605      	mov	r5, r0
    5f48:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5f4a:	b9e0      	cbnz	r0, 5f86 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5f4c:	8a62      	ldrh	r2, [r4, #18]
    5f4e:	9001      	str	r0, [sp, #4]
    5f50:	9200      	str	r2, [sp, #0]
    5f52:	7c23      	ldrb	r3, [r4, #16]
    5f54:	68b7      	ldr	r7, [r6, #8]
    5f56:	68e2      	ldr	r2, [r4, #12]
    5f58:	4631      	mov	r1, r6
    5f5a:	4640      	mov	r0, r8
    5f5c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    5f5e:	2800      	cmp	r0, #0
    5f60:	db02      	blt.n	5f68 <write_cb+0x34>
    5f62:	7c23      	ldrb	r3, [r4, #16]
    5f64:	4298      	cmp	r0, r3
    5f66:	d00b      	beq.n	5f80 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5f68:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5f6c:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5f6e:	bf9a      	itte	ls
    5f70:	4240      	negls	r0, r0
    5f72:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5f74:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5f76:	7520      	strb	r0, [r4, #20]
}
    5f78:	4628      	mov	r0, r5
    5f7a:	b002      	add	sp, #8
    5f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5f80:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5f82:	2501      	movs	r5, #1
    5f84:	e7f8      	b.n	5f78 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5f86:	2500      	movs	r5, #0
    5f88:	e7f6      	b.n	5f78 <write_cb+0x44>
	...

00005f8c <att_send_req>:
{
    5f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f8e:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    5f90:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    5f94:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    5f98:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5f9a:	4630      	mov	r0, r6
    5f9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5fa0:	f00f f817 	bl	14fd2 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5fa4:	4628      	mov	r0, r5
    5fa6:	f7ff ff3b 	bl	5e20 <att_is_connected>
    5faa:	b978      	cbnz	r0, 5fcc <att_send_req+0x40>
		BT_WARN("Disconnected");
    5fac:	4b18      	ldr	r3, [pc, #96]	; (6010 <att_send_req+0x84>)
    5fae:	9301      	str	r3, [sp, #4]
    5fb0:	9300      	str	r3, [sp, #0]
    5fb2:	4a18      	ldr	r2, [pc, #96]	; (6014 <att_send_req+0x88>)
    5fb4:	4b18      	ldr	r3, [pc, #96]	; (6018 <att_send_req+0x8c>)
    5fb6:	4919      	ldr	r1, [pc, #100]	; (601c <att_send_req+0x90>)
    5fb8:	4819      	ldr	r0, [pc, #100]	; (6020 <att_send_req+0x94>)
    5fba:	f7fa ffe7 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5fbe:	4630      	mov	r0, r6
    5fc0:	f00e ffdf 	bl	14f82 <_impl_k_sem_give>
		return -ENOTCONN;
    5fc4:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5fc8:	b002      	add	sp, #8
    5fca:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    5fcc:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    5fce:	f106 0008 	add.w	r0, r6, #8
    5fd2:	f00d ffb7 	bl	13f44 <net_buf_simple_headroom>
	state->len = buf->len;
    5fd6:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    5fd8:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    5fda:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5fdc:	6920      	ldr	r0, [r4, #16]
    5fde:	682d      	ldr	r5, [r5, #0]
    5fe0:	f00d ff66 	bl	13eb0 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    5fe4:	6923      	ldr	r3, [r4, #16]
    5fe6:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5fe8:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    5fea:	7818      	ldrb	r0, [r3, #0]
    5fec:	f7ff fce0 	bl	59b0 <att_op_get_type>
    5ff0:	3801      	subs	r0, #1
    5ff2:	b2c0      	uxtb	r0, r0
    5ff4:	2804      	cmp	r0, #4
    5ff6:	bf96      	itet	ls
    5ff8:	4b0a      	ldrls	r3, [pc, #40]	; (6024 <att_send_req+0x98>)
    5ffa:	4b0b      	ldrhi	r3, [pc, #44]	; (6028 <att_send_req+0x9c>)
    5ffc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    6000:	4632      	mov	r2, r6
    6002:	4628      	mov	r0, r5
    6004:	2104      	movs	r1, #4
    6006:	f7ff fb57 	bl	56b8 <bt_l2cap_send_cb>
	return 0;
    600a:	2000      	movs	r0, #0
    600c:	e7dc      	b.n	5fc8 <att_send_req+0x3c>
    600e:	bf00      	nop
    6010:	00015af1 	.word	0x00015af1
    6014:	0001702e 	.word	0x0001702e
    6018:	00017cd4 	.word	0x00017cd4
    601c:	00016060 	.word	0x00016060
    6020:	00017dfa 	.word	0x00017dfa
    6024:	00017cc0 	.word	0x00017cc0
    6028:	00005e47 	.word	0x00005e47

0000602c <att_handle_rsp>:
{
    602c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6030:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    6032:	30a4      	adds	r0, #164	; 0xa4
{
    6034:	461e      	mov	r6, r3
    6036:	460f      	mov	r7, r1
    6038:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    603a:	f00f fa99 	bl	15570 <k_delayed_work_cancel>
	if (!att->req) {
    603e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6042:	b9db      	cbnz	r3, 607c <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    6044:	4b1c      	ldr	r3, [pc, #112]	; (60b8 <att_handle_rsp+0x8c>)
    6046:	9301      	str	r3, [sp, #4]
    6048:	9300      	str	r3, [sp, #0]
    604a:	4a1c      	ldr	r2, [pc, #112]	; (60bc <att_handle_rsp+0x90>)
    604c:	4b1c      	ldr	r3, [pc, #112]	; (60c0 <att_handle_rsp+0x94>)
    604e:	491d      	ldr	r1, [pc, #116]	; (60c4 <att_handle_rsp+0x98>)
    6050:	481d      	ldr	r0, [pc, #116]	; (60c8 <att_handle_rsp+0x9c>)
    6052:	f7fa ff9b 	bl	f8c <printk>
    6056:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    605a:	b159      	cbz	r1, 6074 <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    605c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    6060:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6062:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    6066:	4291      	cmp	r1, r2
	list->tail = node;
    6068:	bf08      	it	eq
    606a:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    606e:	4620      	mov	r0, r4
    6070:	f7ff ff8c 	bl	5f8c <att_send_req>
}
    6074:	2000      	movs	r0, #0
    6076:	b003      	add	sp, #12
    6078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    607c:	6918      	ldr	r0, [r3, #16]
    607e:	b128      	cbz	r0, 608c <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    6080:	f00d fee8 	bl	13e54 <net_buf_unref>
		att->req->buf = NULL;
    6084:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6088:	2200      	movs	r2, #0
    608a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    608c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    6090:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    6092:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    6096:	2500      	movs	r5, #0
    6098:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    609a:	463a      	mov	r2, r7
    609c:	9300      	str	r3, [sp, #0]
    609e:	4631      	mov	r1, r6
    60a0:	4643      	mov	r3, r8
    60a2:	47c8      	blx	r9
	if (!att->req->func) {
    60a4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    60a8:	6843      	ldr	r3, [r0, #4]
    60aa:	b90b      	cbnz	r3, 60b0 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    60ac:	f7ff fcca 	bl	5a44 <att_req_destroy>
	att->req = NULL;
    60b0:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    60b4:	e7cf      	b.n	6056 <att_handle_rsp+0x2a>
    60b6:	bf00      	nop
    60b8:	00015af1 	.word	0x00015af1
    60bc:	0001702e 	.word	0x0001702e
    60c0:	00017ce1 	.word	0x00017ce1
    60c4:	00016060 	.word	0x00016060
    60c8:	00017dd3 	.word	0x00017dd3

000060cc <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    60cc:	898a      	ldrh	r2, [r1, #12]
    60ce:	6889      	ldr	r1, [r1, #8]
    60d0:	2300      	movs	r3, #0
    60d2:	f7ff bfab 	b.w	602c <att_handle_rsp>

000060d6 <att_handle_exec_write_rsp>:
    60d6:	f7ff bff9 	b.w	60cc <att_confirm>

000060da <att_handle_prepare_write_rsp>:
    60da:	f7ff bff7 	b.w	60cc <att_confirm>

000060de <att_handle_write_rsp>:
    60de:	f7ff bff5 	b.w	60cc <att_confirm>

000060e2 <att_handle_read_mult_rsp>:
    60e2:	f7ff bff3 	b.w	60cc <att_confirm>

000060e6 <att_handle_read_blob_rsp>:
    60e6:	f7ff bff1 	b.w	60cc <att_confirm>

000060ea <att_handle_read_rsp>:
    60ea:	f7ff bfef 	b.w	60cc <att_confirm>

000060ee <att_handle_read_type_rsp>:
    60ee:	f7ff bfed 	b.w	60cc <att_confirm>

000060f2 <att_handle_find_type_rsp>:
    60f2:	f7ff bfeb 	b.w	60cc <att_confirm>

000060f6 <att_handle_find_info_rsp>:
    60f6:	f7ff bfe9 	b.w	60cc <att_confirm>

000060fa <att_mtu_rsp>:
{
    60fa:	b410      	push	{r4}
    60fc:	460a      	mov	r2, r1
	if (!att) {
    60fe:	4603      	mov	r3, r0
    6100:	b180      	cbz	r0, 6124 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    6102:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    6104:	880c      	ldrh	r4, [r1, #0]
    6106:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    6108:	bf83      	ittte	hi
    610a:	2417      	movhi	r4, #23
    610c:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    610e:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    6112:	2200      	movls	r2, #0
    6114:	bf99      	ittee	ls
    6116:	2304      	movls	r3, #4
    6118:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    611a:	2300      	movhi	r3, #0
    611c:	8992      	ldrhhi	r2, [r2, #12]
}
    611e:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    6120:	f7ff bf84 	b.w	602c <att_handle_rsp>
}
    6124:	bc10      	pop	{r4}
    6126:	4770      	bx	lr

00006128 <att_error_rsp>:
{
    6128:	b430      	push	{r4, r5}
	if (!att->req) {
    612a:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    612e:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    6130:	b16a      	cbz	r2, 614e <att_error_rsp+0x26>
	if (att->req->buf) {
    6132:	6913      	ldr	r3, [r2, #16]
    6134:	b12b      	cbz	r3, 6142 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    6136:	8995      	ldrh	r5, [r2, #12]
    6138:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    613a:	89d2      	ldrh	r2, [r2, #14]
    613c:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    613e:	4429      	add	r1, r5
    6140:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    6142:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    6144:	2200      	movs	r2, #0
    6146:	4611      	mov	r1, r2
}
    6148:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    614a:	f7ff bf6f 	b.w	602c <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    614e:	230e      	movs	r3, #14
    6150:	e7f8      	b.n	6144 <att_error_rsp+0x1c>

00006152 <att_reset>:
{
    6152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6154:	f100 0394 	add.w	r3, r0, #148	; 0x94
    6158:	4605      	mov	r5, r0
    615a:	f3bf 8f5b 	dmb	ish
    615e:	e853 2f00 	ldrex	r2, [r3]
    6162:	f042 0204 	orr.w	r2, r2, #4
    6166:	e843 2100 	strex	r1, r2, [r3]
    616a:	2900      	cmp	r1, #0
    616c:	d1f7      	bne.n	615e <att_reset+0xc>
    616e:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    6172:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    6176:	4620      	mov	r0, r4
    6178:	f00e ff03 	bl	14f82 <_impl_k_sem_give>
    617c:	4620      	mov	r0, r4
    617e:	f00e ff00 	bl	14f82 <_impl_k_sem_give>
    6182:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    6186:	b98c      	cbnz	r4, 61ac <att_reset+0x5a>
	if (!att->req) {
    6188:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    618c:	2200      	movs	r2, #0
    618e:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    6192:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    6196:	b90b      	cbnz	r3, 619c <att_reset+0x4a>
}
    6198:	b003      	add	sp, #12
    619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    619c:	230e      	movs	r3, #14
    619e:	4611      	mov	r1, r2
    61a0:	4628      	mov	r0, r5
}
    61a2:	b003      	add	sp, #12
    61a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    61a8:	f7ff bf40 	b.w	602c <att_handle_rsp>
	return node->next;
    61ac:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    61ae:	6867      	ldr	r7, [r4, #4]
    61b0:	b12f      	cbz	r7, 61be <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    61b2:	2300      	movs	r3, #0
    61b4:	9400      	str	r4, [sp, #0]
    61b6:	461a      	mov	r2, r3
    61b8:	210e      	movs	r1, #14
    61ba:	4618      	mov	r0, r3
    61bc:	47b8      	blx	r7
		att_req_destroy(req);
    61be:	4620      	mov	r0, r4
    61c0:	f7ff fc40 	bl	5a44 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    61c4:	2e00      	cmp	r6, #0
    61c6:	d0df      	beq.n	6188 <att_reset+0x36>
    61c8:	4634      	mov	r4, r6
    61ca:	6836      	ldr	r6, [r6, #0]
    61cc:	e7ef      	b.n	61ae <att_reset+0x5c>

000061ce <bt_att_disconnected>:
{
    61ce:	b510      	push	{r4, lr}
    61d0:	4604      	mov	r4, r0
	att_reset(att);
    61d2:	f7ff ffbe 	bl	6152 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    61d6:	6820      	ldr	r0, [r4, #0]
}
    61d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    61dc:	f001 bb0c 	b.w	77f8 <bt_gatt_disconnected>

000061e0 <att_timeout>:
{
    61e0:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    61e2:	4b0b      	ldr	r3, [pc, #44]	; (6210 <att_timeout+0x30>)
    61e4:	4a0b      	ldr	r2, [pc, #44]	; (6214 <att_timeout+0x34>)
    61e6:	490c      	ldr	r1, [pc, #48]	; (6218 <att_timeout+0x38>)
    61e8:	9301      	str	r3, [sp, #4]
{
    61ea:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    61ec:	9300      	str	r3, [sp, #0]
    61ee:	480b      	ldr	r0, [pc, #44]	; (621c <att_timeout+0x3c>)
    61f0:	4b0b      	ldr	r3, [pc, #44]	; (6220 <att_timeout+0x40>)
    61f2:	f7fa fecb 	bl	f8c <printk>
	att_reset(att);
    61f6:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    61fa:	f7ff ffaa 	bl	6152 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    61fe:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    6202:	f001 faf9 	bl	77f8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    6206:	2300      	movs	r3, #0
    6208:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    620c:	b002      	add	sp, #8
    620e:	bd10      	pop	{r4, pc}
    6210:	00015af1 	.word	0x00015af1
    6214:	00016fae 	.word	0x00016fae
    6218:	00016060 	.word	0x00016060
    621c:	00017e3c 	.word	0x00017e3c
    6220:	00017d30 	.word	0x00017d30

00006224 <read_cb>:
{
    6224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6228:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    622a:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    622c:	f8d1 9000 	ldr.w	r9, [r1]
{
    6230:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6232:	3008      	adds	r0, #8
    6234:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    6236:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    623a:	f00d fe3d 	bl	13eb8 <net_buf_simple_add>
	data->err = 0x00;
    623e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6240:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    6242:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6244:	2115      	movs	r1, #21
    6246:	4630      	mov	r0, r6
    6248:	f7ff fd3a 	bl	5cc0 <check_perm.isra.4>
    624c:	4605      	mov	r5, r0
    624e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    6250:	bb08      	cbnz	r0, 6296 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6252:	68a1      	ldr	r1, [r4, #8]
    6254:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    6258:	898a      	ldrh	r2, [r1, #12]
    625a:	6889      	ldr	r1, [r1, #8]
    625c:	88a0      	ldrh	r0, [r4, #4]
    625e:	9000      	str	r0, [sp, #0]
    6260:	1a9b      	subs	r3, r3, r2
    6262:	6877      	ldr	r7, [r6, #4]
    6264:	440a      	add	r2, r1
    6266:	b29b      	uxth	r3, r3
    6268:	4631      	mov	r1, r6
    626a:	4640      	mov	r0, r8
    626c:	47b8      	blx	r7
	if (read < 0) {
    626e:	1e01      	subs	r1, r0, #0
    6270:	da0b      	bge.n	628a <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    6272:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    6276:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    6278:	bf9a      	itte	ls
    627a:	4249      	negls	r1, r1
    627c:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    627e:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    6280:	7421      	strb	r1, [r4, #16]
}
    6282:	4628      	mov	r0, r5
    6284:	b003      	add	sp, #12
    6286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    628a:	68a0      	ldr	r0, [r4, #8]
    628c:	3008      	adds	r0, #8
    628e:	f00d fe13 	bl	13eb8 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    6292:	2501      	movs	r5, #1
    6294:	e7f5      	b.n	6282 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    6296:	463d      	mov	r5, r7
    6298:	e7f3      	b.n	6282 <read_cb+0x5e>
	...

0000629c <bt_att_create_pdu>:
{
    629c:	b530      	push	{r4, r5, lr}
    629e:	b085      	sub	sp, #20
    62a0:	460d      	mov	r5, r1
    62a2:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    62a4:	f7ff fe06 	bl	5eb4 <att_chan_get>
	if (!att) {
    62a8:	b1f0      	cbz	r0, 62e8 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    62aa:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    62ae:	3401      	adds	r4, #1
    62b0:	428c      	cmp	r4, r1
    62b2:	d90e      	bls.n	62d2 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    62b4:	4b0d      	ldr	r3, [pc, #52]	; (62ec <bt_att_create_pdu+0x50>)
    62b6:	9303      	str	r3, [sp, #12]
    62b8:	9402      	str	r4, [sp, #8]
    62ba:	9101      	str	r1, [sp, #4]
    62bc:	9300      	str	r3, [sp, #0]
    62be:	4a0c      	ldr	r2, [pc, #48]	; (62f0 <bt_att_create_pdu+0x54>)
    62c0:	4b0c      	ldr	r3, [pc, #48]	; (62f4 <bt_att_create_pdu+0x58>)
    62c2:	490d      	ldr	r1, [pc, #52]	; (62f8 <bt_att_create_pdu+0x5c>)
    62c4:	480d      	ldr	r0, [pc, #52]	; (62fc <bt_att_create_pdu+0x60>)
    62c6:	f7fa fe61 	bl	f8c <printk>
		return NULL;
    62ca:	2400      	movs	r4, #0
}
    62cc:	4620      	mov	r0, r4
    62ce:	b005      	add	sp, #20
    62d0:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    62d2:	2100      	movs	r1, #0
    62d4:	4608      	mov	r0, r1
    62d6:	f7ff f9ec 	bl	56b2 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    62da:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    62dc:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    62de:	3008      	adds	r0, #8
    62e0:	f00d fdea 	bl	13eb8 <net_buf_simple_add>
	hdr->code = op;
    62e4:	7005      	strb	r5, [r0, #0]
	return buf;
    62e6:	e7f1      	b.n	62cc <bt_att_create_pdu+0x30>
		return NULL;
    62e8:	4604      	mov	r4, r0
    62ea:	e7ef      	b.n	62cc <bt_att_create_pdu+0x30>
    62ec:	00015af1 	.word	0x00015af1
    62f0:	0001702e 	.word	0x0001702e
    62f4:	00017d1e 	.word	0x00017d1e
    62f8:	00016060 	.word	0x00016060
    62fc:	00017e8d 	.word	0x00017e8d

00006300 <att_indicate>:
{
    6300:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6302:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6304:	f101 0008 	add.w	r0, r1, #8
{
    6308:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    630a:	f00d fe13 	bl	13f34 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    630e:	89ab      	ldrh	r3, [r5, #12]
    6310:	68aa      	ldr	r2, [r5, #8]
    6312:	4601      	mov	r1, r0
    6314:	4620      	mov	r0, r4
    6316:	f001 fa19 	bl	774c <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    631a:	2200      	movs	r2, #0
    631c:	211e      	movs	r1, #30
    631e:	4620      	mov	r0, r4
    6320:	f7ff ffbc 	bl	629c <bt_att_create_pdu>
	if (!buf) {
    6324:	4602      	mov	r2, r0
    6326:	b120      	cbz	r0, 6332 <att_indicate+0x32>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    6328:	4b03      	ldr	r3, [pc, #12]	; (6338 <att_indicate+0x38>)
    632a:	2104      	movs	r1, #4
    632c:	4620      	mov	r0, r4
    632e:	f7ff f9c3 	bl	56b8 <bt_l2cap_send_cb>
}
    6332:	2000      	movs	r0, #0
    6334:	bd38      	pop	{r3, r4, r5, pc}
    6336:	bf00      	nop
    6338:	00005e87 	.word	0x00005e87

0000633c <att_mtu_req>:
{
    633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    6340:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6342:	881b      	ldrh	r3, [r3, #0]
    6344:	2b16      	cmp	r3, #22
{
    6346:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6348:	d91c      	bls.n	6384 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    634a:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    634e:	2202      	movs	r2, #2
    6350:	2103      	movs	r1, #3
    6352:	4640      	mov	r0, r8
    6354:	f7ff ffa2 	bl	629c <bt_att_create_pdu>
	if (!pdu) {
    6358:	4607      	mov	r7, r0
    635a:	b1b0      	cbz	r0, 638a <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    635c:	2102      	movs	r1, #2
    635e:	3008      	adds	r0, #8
    6360:	f00d fdaa 	bl	13eb8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    6364:	2617      	movs	r6, #23
    6366:	2400      	movs	r4, #0
    6368:	7006      	strb	r6, [r0, #0]
    636a:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    636c:	4b08      	ldr	r3, [pc, #32]	; (6390 <att_mtu_req+0x54>)
    636e:	4640      	mov	r0, r8
    6370:	463a      	mov	r2, r7
    6372:	2104      	movs	r1, #4
    6374:	f7ff f9a0 	bl	56b8 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    6378:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    637a:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    637e:	4620      	mov	r0, r4
    6380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6384:	2004      	movs	r0, #4
    6386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    638a:	200e      	movs	r0, #14
}
    638c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6390:	00005e59 	.word	0x00005e59

00006394 <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    6394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6398:	4688      	mov	r8, r1
    639a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    639c:	2101      	movs	r1, #1
    639e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    63a0:	4605      	mov	r5, r0
    63a2:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    63a4:	f7ff ff7a 	bl	629c <bt_att_create_pdu>
	if (!buf) {
    63a8:	4604      	mov	r4, r0
    63aa:	b180      	cbz	r0, 63ce <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    63ac:	2104      	movs	r1, #4
    63ae:	3008      	adds	r0, #8
    63b0:	f00d fd82 	bl	13eb8 <net_buf_simple_add>
	rsp->request = req;
    63b4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    63b8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    63ba:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    63be:	4622      	mov	r2, r4
    63c0:	4628      	mov	r0, r5
    63c2:	4b04      	ldr	r3, [pc, #16]	; (63d4 <send_err_rsp.part.10+0x40>)
    63c4:	2104      	movs	r1, #4
}
    63c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    63ca:	f7ff b975 	b.w	56b8 <bt_l2cap_send_cb>
    63ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63d2:	bf00      	nop
    63d4:	00005e59 	.word	0x00005e59

000063d8 <bt_att_recv>:
{
    63d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    63da:	898b      	ldrh	r3, [r1, #12]
{
    63dc:	b085      	sub	sp, #20
    63de:	4604      	mov	r4, r0
    63e0:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    63e2:	b953      	cbnz	r3, 63fa <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    63e4:	4b4b      	ldr	r3, [pc, #300]	; (6514 <bt_att_recv+0x13c>)
    63e6:	9301      	str	r3, [sp, #4]
    63e8:	9300      	str	r3, [sp, #0]
    63ea:	4a4b      	ldr	r2, [pc, #300]	; (6518 <bt_att_recv+0x140>)
    63ec:	4b4b      	ldr	r3, [pc, #300]	; (651c <bt_att_recv+0x144>)
    63ee:	494c      	ldr	r1, [pc, #304]	; (6520 <bt_att_recv+0x148>)
    63f0:	484c      	ldr	r0, [pc, #304]	; (6524 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    63f2:	f7fa fdcb 	bl	f8c <printk>
}
    63f6:	b005      	add	sp, #20
    63f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    63fa:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    63fc:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    63fe:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    6402:	f00d fd87 	bl	13f14 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    6406:	4a48      	ldr	r2, [pc, #288]	; (6528 <bt_att_recv+0x150>)
    6408:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    640a:	2300      	movs	r3, #0
    640c:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    640e:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    6412:	4286      	cmp	r6, r0
    6414:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    6418:	d11c      	bne.n	6454 <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    641a:	4472      	add	r2, lr
    641c:	7896      	ldrb	r6, [r2, #2]
    641e:	2e01      	cmp	r6, #1
    6420:	d136      	bne.n	6490 <bt_att_recv+0xb8>
    6422:	f3bf 8f5b 	dmb	ish
    6426:	f104 0294 	add.w	r2, r4, #148	; 0x94
    642a:	e852 3f00 	ldrex	r3, [r2]
    642e:	f043 0001 	orr.w	r0, r3, #1
    6432:	e842 0c00 	strex	ip, r0, [r2]
    6436:	f1bc 0f00 	cmp.w	ip, #0
    643a:	d1f6      	bne.n	642a <bt_att_recv+0x52>
    643c:	f3bf 8f5b 	dmb	ish
    6440:	07da      	lsls	r2, r3, #31
    6442:	d540      	bpl.n	64c6 <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    6444:	4b33      	ldr	r3, [pc, #204]	; (6514 <bt_att_recv+0x13c>)
    6446:	9301      	str	r3, [sp, #4]
    6448:	9300      	str	r3, [sp, #0]
    644a:	4a38      	ldr	r2, [pc, #224]	; (652c <bt_att_recv+0x154>)
    644c:	4b33      	ldr	r3, [pc, #204]	; (651c <bt_att_recv+0x144>)
    644e:	4934      	ldr	r1, [pc, #208]	; (6520 <bt_att_recv+0x148>)
    6450:	4837      	ldr	r0, [pc, #220]	; (6530 <bt_att_recv+0x158>)
    6452:	e7ce      	b.n	63f2 <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6454:	3301      	adds	r3, #1
    6456:	2b1b      	cmp	r3, #27
    6458:	d1d9      	bne.n	640e <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    645a:	4b2e      	ldr	r3, [pc, #184]	; (6514 <bt_att_recv+0x13c>)
    645c:	9302      	str	r3, [sp, #8]
    645e:	9001      	str	r0, [sp, #4]
    6460:	9300      	str	r3, [sp, #0]
    6462:	4a32      	ldr	r2, [pc, #200]	; (652c <bt_att_recv+0x154>)
    6464:	4b2d      	ldr	r3, [pc, #180]	; (651c <bt_att_recv+0x144>)
    6466:	492e      	ldr	r1, [pc, #184]	; (6520 <bt_att_recv+0x148>)
    6468:	4832      	ldr	r0, [pc, #200]	; (6534 <bt_att_recv+0x15c>)
    646a:	f7fa fd8f 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    646e:	782d      	ldrb	r5, [r5, #0]
    6470:	4628      	mov	r0, r5
    6472:	f7ff fa9d 	bl	59b0 <att_op_get_type>
    6476:	2800      	cmp	r0, #0
    6478:	d0bd      	beq.n	63f6 <bt_att_recv+0x1e>
	if (!req) {
    647a:	2d00      	cmp	r5, #0
    647c:	d0bb      	beq.n	63f6 <bt_att_recv+0x1e>
    647e:	2306      	movs	r3, #6
    6480:	2200      	movs	r2, #0
    6482:	4629      	mov	r1, r5
    6484:	6820      	ldr	r0, [r4, #0]
}
    6486:	b005      	add	sp, #20
    6488:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    648c:	f7ff bf82 	b.w	6394 <send_err_rsp.part.10>
		} else if (handler->type == ATT_INDICATION &&
    6490:	2e05      	cmp	r6, #5
    6492:	d118      	bne.n	64c6 <bt_att_recv+0xee>
    6494:	f3bf 8f5b 	dmb	ish
    6498:	f104 0294 	add.w	r2, r4, #148	; 0x94
    649c:	e852 3f00 	ldrex	r3, [r2]
    64a0:	f043 0002 	orr.w	r0, r3, #2
    64a4:	e842 0c00 	strex	ip, r0, [r2]
    64a8:	f1bc 0f00 	cmp.w	ip, #0
    64ac:	d1f6      	bne.n	649c <bt_att_recv+0xc4>
    64ae:	f3bf 8f5b 	dmb	ish
    64b2:	079b      	lsls	r3, r3, #30
    64b4:	d507      	bpl.n	64c6 <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    64b6:	4b17      	ldr	r3, [pc, #92]	; (6514 <bt_att_recv+0x13c>)
    64b8:	9301      	str	r3, [sp, #4]
    64ba:	9300      	str	r3, [sp, #0]
    64bc:	4a1b      	ldr	r2, [pc, #108]	; (652c <bt_att_recv+0x154>)
    64be:	4b17      	ldr	r3, [pc, #92]	; (651c <bt_att_recv+0x144>)
    64c0:	4917      	ldr	r1, [pc, #92]	; (6520 <bt_att_recv+0x148>)
    64c2:	481d      	ldr	r0, [pc, #116]	; (6538 <bt_att_recv+0x160>)
    64c4:	e795      	b.n	63f2 <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    64c6:	eb01 030e 	add.w	r3, r1, lr
    64ca:	89ba      	ldrh	r2, [r7, #12]
    64cc:	7859      	ldrb	r1, [r3, #1]
    64ce:	4291      	cmp	r1, r2
    64d0:	d90f      	bls.n	64f2 <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    64d2:	4b10      	ldr	r3, [pc, #64]	; (6514 <bt_att_recv+0x13c>)
    64d4:	9303      	str	r3, [sp, #12]
    64d6:	7829      	ldrb	r1, [r5, #0]
    64d8:	9102      	str	r1, [sp, #8]
    64da:	9201      	str	r2, [sp, #4]
    64dc:	9300      	str	r3, [sp, #0]
    64de:	4a0e      	ldr	r2, [pc, #56]	; (6518 <bt_att_recv+0x140>)
    64e0:	4b0e      	ldr	r3, [pc, #56]	; (651c <bt_att_recv+0x144>)
    64e2:	490f      	ldr	r1, [pc, #60]	; (6520 <bt_att_recv+0x148>)
    64e4:	4815      	ldr	r0, [pc, #84]	; (653c <bt_att_recv+0x164>)
    64e6:	f7fa fd51 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    64ea:	2e01      	cmp	r6, #1
    64ec:	d183      	bne.n	63f6 <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    64ee:	2304      	movs	r3, #4
    64f0:	e00a      	b.n	6508 <bt_att_recv+0x130>
		err = handler->func(att, buf);
    64f2:	685b      	ldr	r3, [r3, #4]
    64f4:	4639      	mov	r1, r7
    64f6:	4620      	mov	r0, r4
    64f8:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    64fa:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    64fc:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    64fe:	f47f af7a 	bne.w	63f6 <bt_att_recv+0x1e>
    6502:	2800      	cmp	r0, #0
    6504:	f43f af77 	beq.w	63f6 <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6508:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    650a:	2900      	cmp	r1, #0
    650c:	f43f af73 	beq.w	63f6 <bt_att_recv+0x1e>
    6510:	2200      	movs	r2, #0
    6512:	e7b7      	b.n	6484 <bt_att_recv+0xac>
    6514:	00015af1 	.word	0x00015af1
    6518:	00016fae 	.word	0x00016fae
    651c:	00017d05 	.word	0x00017d05
    6520:	00016060 	.word	0x00016060
    6524:	00017ec2 	.word	0x00017ec2
    6528:	00017fc4 	.word	0x00017fc4
    652c:	0001702e 	.word	0x0001702e
    6530:	00017eed 	.word	0x00017eed
    6534:	00017f77 	.word	0x00017f77
    6538:	00017f19 	.word	0x00017f19
    653c:	00017f48 	.word	0x00017f48

00006540 <att_read_group_req>:
{
    6540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6544:	898b      	ldrh	r3, [r1, #12]
    6546:	2b06      	cmp	r3, #6
{
    6548:	b08d      	sub	sp, #52	; 0x34
    654a:	4680      	mov	r8, r0
    654c:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    654e:	d001      	beq.n	6554 <att_read_group_req+0x14>
    6550:	2b14      	cmp	r3, #20
    6552:	d168      	bne.n	6626 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    6554:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    6556:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6558:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    655c:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6560:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6562:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6564:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    6566:	f00d fcd5 	bl	13f14 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    656a:	4621      	mov	r1, r4
    656c:	4638      	mov	r0, r7
    656e:	f7ff fc25 	bl	5dbc <uuid_create>
    6572:	2800      	cmp	r0, #0
    6574:	d059      	beq.n	662a <att_read_group_req+0xea>
	if (!start || !end) {
    6576:	2d00      	cmp	r5, #0
    6578:	d05a      	beq.n	6630 <att_read_group_req+0xf0>
    657a:	2400      	movs	r4, #0
    657c:	2e00      	cmp	r6, #0
    657e:	d056      	beq.n	662e <att_read_group_req+0xee>
	if (start > end) {
    6580:	42b5      	cmp	r5, r6
    6582:	d855      	bhi.n	6630 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6584:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6588:	4669      	mov	r1, sp
    658a:	4638      	mov	r0, r7
    658c:	f88d 4000 	strb.w	r4, [sp]
    6590:	f8ad 3002 	strh.w	r3, [sp, #2]
    6594:	f7fb fd16 	bl	1fc4 <bt_uuid_cmp>
    6598:	bb38      	cbnz	r0, 65ea <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    659a:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    659e:	2214      	movs	r2, #20
    65a0:	2100      	movs	r1, #0
    65a2:	a807      	add	r0, sp, #28
    65a4:	f7fb fb56 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    65a8:	2201      	movs	r2, #1
    65aa:	2111      	movs	r1, #17
    65ac:	4648      	mov	r0, r9
    65ae:	f7ff fe75 	bl	629c <bt_att_create_pdu>
    65b2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    65b4:	2800      	cmp	r0, #0
    65b6:	d038      	beq.n	662a <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    65b8:	2101      	movs	r1, #1
    65ba:	3008      	adds	r0, #8
	data.uuid = uuid;
    65bc:	9708      	str	r7, [sp, #32]
	data.att = att;
    65be:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    65c2:	f00d fc79 	bl	13eb8 <net_buf_simple_add>
	data.rsp->len = 0;
    65c6:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    65c8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    65ca:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    65cc:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    65ce:	4a1c      	ldr	r2, [pc, #112]	; (6640 <att_read_group_req+0x100>)
	data.group = NULL;
    65d0:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    65d2:	4631      	mov	r1, r6
    65d4:	4628      	mov	r0, r5
    65d6:	f000 ff71 	bl	74bc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    65da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    65dc:	781c      	ldrb	r4, [r3, #0]
    65de:	b9d4      	cbnz	r4, 6616 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    65e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    65e2:	f00d fc37 	bl	13e54 <net_buf_unref>
    65e6:	230a      	movs	r3, #10
    65e8:	e00c      	b.n	6604 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    65ea:	f642 0301 	movw	r3, #10241	; 0x2801
    65ee:	a901      	add	r1, sp, #4
    65f0:	4638      	mov	r0, r7
    65f2:	f88d 4004 	strb.w	r4, [sp, #4]
    65f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    65fa:	f7fb fce3 	bl	1fc4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    65fe:	2800      	cmp	r0, #0
    6600:	d0cb      	beq.n	659a <att_read_group_req+0x5a>
    6602:	2310      	movs	r3, #16
    6604:	462a      	mov	r2, r5
    6606:	2110      	movs	r1, #16
    6608:	4648      	mov	r0, r9
    660a:	f7ff fec3 	bl	6394 <send_err_rsp.part.10>
}
    660e:	4620      	mov	r0, r4
    6610:	b00d      	add	sp, #52	; 0x34
    6612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6616:	4b0b      	ldr	r3, [pc, #44]	; (6644 <att_read_group_req+0x104>)
    6618:	9a09      	ldr	r2, [sp, #36]	; 0x24
    661a:	2104      	movs	r1, #4
    661c:	4648      	mov	r0, r9
    661e:	f7ff f84b 	bl	56b8 <bt_l2cap_send_cb>
		return 0;
    6622:	2400      	movs	r4, #0
    6624:	e7f3      	b.n	660e <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    6626:	2404      	movs	r4, #4
    6628:	e7f1      	b.n	660e <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    662a:	240e      	movs	r4, #14
    662c:	e7ef      	b.n	660e <att_read_group_req+0xce>
			*err = 0;
    662e:	4635      	mov	r5, r6
    6630:	2301      	movs	r3, #1
    6632:	462a      	mov	r2, r5
    6634:	2110      	movs	r1, #16
    6636:	4648      	mov	r0, r9
    6638:	f7ff feac 	bl	6394 <send_err_rsp.part.10>
    663c:	e7f1      	b.n	6622 <att_read_group_req+0xe2>
    663e:	bf00      	nop
    6640:	00005a85 	.word	0x00005a85
    6644:	00005e59 	.word	0x00005e59

00006648 <att_read_mult_req>:
{
    6648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    664c:	6804      	ldr	r4, [r0, #0]
{
    664e:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    6650:	2214      	movs	r2, #20
{
    6652:	4606      	mov	r6, r0
    6654:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    6656:	a801      	add	r0, sp, #4
    6658:	2100      	movs	r1, #0
    665a:	f7fb fafb 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    665e:	2200      	movs	r2, #0
    6660:	210f      	movs	r1, #15
    6662:	4620      	mov	r0, r4
    6664:	f7ff fe1a 	bl	629c <bt_att_create_pdu>
    6668:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    666a:	b368      	cbz	r0, 66c8 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    666c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 66d0 <att_read_mult_req+0x88>
	data.att = att;
    6670:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    6672:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6676:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    667a:	89ab      	ldrh	r3, [r5, #12]
    667c:	2b01      	cmp	r3, #1
    667e:	d806      	bhi.n	668e <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6680:	4b12      	ldr	r3, [pc, #72]	; (66cc <att_read_mult_req+0x84>)
    6682:	9a03      	ldr	r2, [sp, #12]
    6684:	2104      	movs	r1, #4
    6686:	4620      	mov	r0, r4
    6688:	f7ff f816 	bl	56b8 <bt_l2cap_send_cb>
    668c:	e018      	b.n	66c0 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    668e:	4638      	mov	r0, r7
    6690:	f00d fc50 	bl	13f34 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6694:	ab01      	add	r3, sp, #4
    6696:	464a      	mov	r2, r9
    6698:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    669a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    669c:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    66a0:	f000 ff0c 	bl	74bc <bt_gatt_foreach_attr>
		if (data.err) {
    66a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    66a8:	2b00      	cmp	r3, #0
    66aa:	d0e6      	beq.n	667a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    66ac:	9803      	ldr	r0, [sp, #12]
    66ae:	f00d fbd1 	bl	13e54 <net_buf_unref>
    66b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    66b6:	4632      	mov	r2, r6
    66b8:	210e      	movs	r1, #14
    66ba:	4620      	mov	r0, r4
    66bc:	f7ff fe6a 	bl	6394 <send_err_rsp.part.10>
	return 0;
    66c0:	2000      	movs	r0, #0
}
    66c2:	b007      	add	sp, #28
    66c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    66c8:	200e      	movs	r0, #14
    66ca:	e7fa      	b.n	66c2 <att_read_mult_req+0x7a>
    66cc:	00005e59 	.word	0x00005e59
    66d0:	00006225 	.word	0x00006225

000066d4 <att_read_rsp>:
{
    66d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66d8:	4607      	mov	r7, r0
    66da:	b086      	sub	sp, #24
    66dc:	460c      	mov	r4, r1
    66de:	4690      	mov	r8, r2
	if (!handle) {
    66e0:	461d      	mov	r5, r3
    66e2:	b3a3      	cbz	r3, 674e <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    66e4:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    66e6:	2214      	movs	r2, #20
    66e8:	2100      	movs	r1, #0
    66ea:	a801      	add	r0, sp, #4
    66ec:	f7fb fab2 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    66f0:	2200      	movs	r2, #0
    66f2:	4641      	mov	r1, r8
    66f4:	4630      	mov	r0, r6
    66f6:	f7ff fdd1 	bl	629c <bt_att_create_pdu>
    66fa:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    66fc:	b348      	cbz	r0, 6752 <att_read_rsp+0x7e>
	data.offset = offset;
    66fe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    6702:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6706:	2301      	movs	r3, #1
    6708:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    670c:	4a12      	ldr	r2, [pc, #72]	; (6758 <att_read_rsp+0x84>)
	data.att = att;
    670e:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6710:	ab01      	add	r3, sp, #4
    6712:	4629      	mov	r1, r5
    6714:	4628      	mov	r0, r5
    6716:	f000 fed1 	bl	74bc <bt_gatt_foreach_attr>
	if (data.err) {
    671a:	f89d 7014 	ldrb.w	r7, [sp, #20]
    671e:	b17f      	cbz	r7, 6740 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    6720:	9803      	ldr	r0, [sp, #12]
    6722:	f00d fb97 	bl	13e54 <net_buf_unref>
	if (!req) {
    6726:	b13c      	cbz	r4, 6738 <att_read_rsp+0x64>
    6728:	f89d 3014 	ldrb.w	r3, [sp, #20]
    672c:	462a      	mov	r2, r5
    672e:	4621      	mov	r1, r4
    6730:	4630      	mov	r0, r6
    6732:	f7ff fe2f 	bl	6394 <send_err_rsp.part.10>
		return 0;
    6736:	2400      	movs	r4, #0
}
    6738:	4620      	mov	r0, r4
    673a:	b006      	add	sp, #24
    673c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6740:	4b06      	ldr	r3, [pc, #24]	; (675c <att_read_rsp+0x88>)
    6742:	9a03      	ldr	r2, [sp, #12]
    6744:	2104      	movs	r1, #4
    6746:	4630      	mov	r0, r6
    6748:	f7fe ffb6 	bl	56b8 <bt_l2cap_send_cb>
    674c:	e7f3      	b.n	6736 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    674e:	2401      	movs	r4, #1
    6750:	e7f2      	b.n	6738 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    6752:	240e      	movs	r4, #14
    6754:	e7f0      	b.n	6738 <att_read_rsp+0x64>
    6756:	bf00      	nop
    6758:	00006225 	.word	0x00006225
    675c:	00005e59 	.word	0x00005e59

00006760 <att_read_blob_req>:
{
    6760:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    6762:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    6764:	8813      	ldrh	r3, [r2, #0]
    6766:	8852      	ldrh	r2, [r2, #2]
    6768:	9200      	str	r2, [sp, #0]
    676a:	210c      	movs	r1, #12
    676c:	220d      	movs	r2, #13
    676e:	f7ff ffb1 	bl	66d4 <att_read_rsp>
}
    6772:	b003      	add	sp, #12
    6774:	f85d fb04 	ldr.w	pc, [sp], #4

00006778 <att_read_req>:
{
    6778:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    677a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    677c:	2200      	movs	r2, #0
    677e:	881b      	ldrh	r3, [r3, #0]
    6780:	9200      	str	r2, [sp, #0]
    6782:	210a      	movs	r1, #10
    6784:	220b      	movs	r2, #11
    6786:	f7ff ffa5 	bl	66d4 <att_read_rsp>
}
    678a:	b003      	add	sp, #12
    678c:	f85d fb04 	ldr.w	pc, [sp], #4

00006790 <att_read_type_req>:
{
    6790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6794:	898b      	ldrh	r3, [r1, #12]
    6796:	2b06      	cmp	r3, #6
{
    6798:	b08d      	sub	sp, #52	; 0x34
    679a:	4607      	mov	r7, r0
    679c:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    679e:	d001      	beq.n	67a4 <att_read_type_req+0x14>
    67a0:	2b14      	cmp	r3, #20
    67a2:	d152      	bne.n	684a <att_read_type_req+0xba>
	req = (void *)buf->data;
    67a4:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    67a6:	2104      	movs	r1, #4
	req = (void *)buf->data;
    67a8:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    67ac:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    67b0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    67b2:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    67b4:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    67b8:	f00d fbac 	bl	13f14 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    67bc:	4631      	mov	r1, r6
    67be:	4640      	mov	r0, r8
    67c0:	f7ff fafc 	bl	5dbc <uuid_create>
    67c4:	b198      	cbz	r0, 67ee <att_read_type_req+0x5e>
	if (!start || !end) {
    67c6:	2d00      	cmp	r5, #0
    67c8:	d042      	beq.n	6850 <att_read_type_req+0xc0>
    67ca:	2c00      	cmp	r4, #0
    67cc:	d03f      	beq.n	684e <att_read_type_req+0xbe>
	if (start > end) {
    67ce:	42a5      	cmp	r5, r4
    67d0:	d83e      	bhi.n	6850 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    67d2:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    67d4:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    67d6:	2100      	movs	r1, #0
    67d8:	eb0d 0002 	add.w	r0, sp, r2
    67dc:	f7fb fa3a 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    67e0:	2201      	movs	r2, #1
    67e2:	2109      	movs	r1, #9
    67e4:	4630      	mov	r0, r6
    67e6:	f7ff fd59 	bl	629c <bt_att_create_pdu>
    67ea:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    67ec:	b908      	cbnz	r0, 67f2 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    67ee:	240e      	movs	r4, #14
    67f0:	e027      	b.n	6842 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    67f2:	2101      	movs	r1, #1
    67f4:	3008      	adds	r0, #8
	data.att = att;
    67f6:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    67f8:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    67fc:	f00d fb5c 	bl	13eb8 <net_buf_simple_add>
	data.rsp->len = 0;
    6800:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6802:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6804:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6806:	4621      	mov	r1, r4
	data.rsp->len = 0;
    6808:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    680a:	4a14      	ldr	r2, [pc, #80]	; (685c <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    680c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6810:	4628      	mov	r0, r5
    6812:	ab06      	add	r3, sp, #24
    6814:	f000 fe52 	bl	74bc <bt_gatt_foreach_attr>
	if (data.err) {
    6818:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    681c:	b15c      	cbz	r4, 6836 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    681e:	9808      	ldr	r0, [sp, #32]
    6820:	f00d fb18 	bl	13e54 <net_buf_unref>
    6824:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6828:	462a      	mov	r2, r5
    682a:	2108      	movs	r1, #8
    682c:	4630      	mov	r0, r6
    682e:	f7ff fdb1 	bl	6394 <send_err_rsp.part.10>
		return 0;
    6832:	2400      	movs	r4, #0
    6834:	e005      	b.n	6842 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6836:	4b0a      	ldr	r3, [pc, #40]	; (6860 <att_read_type_req+0xd0>)
    6838:	9a08      	ldr	r2, [sp, #32]
    683a:	2104      	movs	r1, #4
    683c:	4630      	mov	r0, r6
    683e:	f7fe ff3b 	bl	56b8 <bt_l2cap_send_cb>
}
    6842:	4620      	mov	r0, r4
    6844:	b00d      	add	sp, #52	; 0x34
    6846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    684a:	2404      	movs	r4, #4
    684c:	e7f9      	b.n	6842 <att_read_type_req+0xb2>
			*err = 0;
    684e:	4625      	mov	r5, r4
    6850:	2301      	movs	r3, #1
    6852:	462a      	mov	r2, r5
    6854:	2108      	movs	r1, #8
    6856:	4648      	mov	r0, r9
    6858:	e7e9      	b.n	682e <att_read_type_req+0x9e>
    685a:	bf00      	nop
    685c:	00005d01 	.word	0x00005d01
    6860:	00005e59 	.word	0x00005e59

00006864 <att_find_type_req>:
{
    6864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6868:	f8d0 9000 	ldr.w	r9, [r0]
{
    686c:	4680      	mov	r8, r0
	req = (void *)buf->data;
    686e:	4608      	mov	r0, r1
{
    6870:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    6872:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    6876:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    6878:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    687a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    687c:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    687e:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    6880:	f00d fb48 	bl	13f14 <net_buf_simple_pull>
    6884:	4682      	mov	sl, r0
	if (!start || !end) {
    6886:	2d00      	cmp	r5, #0
    6888:	d057      	beq.n	693a <att_find_type_req+0xd6>
    688a:	2400      	movs	r4, #0
    688c:	2f00      	cmp	r7, #0
    688e:	d053      	beq.n	6938 <att_find_type_req+0xd4>
	if (start > end) {
    6890:	42bd      	cmp	r5, r7
    6892:	d852      	bhi.n	693a <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    6894:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6898:	a902      	add	r1, sp, #8
    689a:	a801      	add	r0, sp, #4
    689c:	f8ad 6006 	strh.w	r6, [sp, #6]
    68a0:	f88d 4004 	strb.w	r4, [sp, #4]
    68a4:	f88d 4008 	strb.w	r4, [sp, #8]
    68a8:	f8ad 300a 	strh.w	r3, [sp, #10]
    68ac:	f7fb fb8a 	bl	1fc4 <bt_uuid_cmp>
    68b0:	4606      	mov	r6, r0
    68b2:	b148      	cbz	r0, 68c8 <att_find_type_req+0x64>
    68b4:	230a      	movs	r3, #10
    68b6:	462a      	mov	r2, r5
    68b8:	2106      	movs	r1, #6
    68ba:	4648      	mov	r0, r9
    68bc:	f7ff fd6a 	bl	6394 <send_err_rsp.part.10>
}
    68c0:	4620      	mov	r0, r4
    68c2:	b009      	add	sp, #36	; 0x24
    68c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    68c8:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    68cc:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    68d0:	2214      	movs	r2, #20
    68d2:	4631      	mov	r1, r6
    68d4:	a803      	add	r0, sp, #12
    68d6:	f7fb f9bd 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    68da:	4632      	mov	r2, r6
    68dc:	2107      	movs	r1, #7
    68de:	4648      	mov	r0, r9
    68e0:	f7ff fcdc 	bl	629c <bt_att_create_pdu>
    68e4:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    68e6:	b328      	cbz	r0, 6934 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    68e8:	230a      	movs	r3, #10
    68ea:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    68ee:	4a14      	ldr	r2, [pc, #80]	; (6940 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    68f0:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    68f4:	ab03      	add	r3, sp, #12
    68f6:	4639      	mov	r1, r7
    68f8:	4628      	mov	r0, r5
	data.att = att;
    68fa:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    68fe:	9605      	str	r6, [sp, #20]
	data.value = value;
    6900:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6904:	f000 fdda 	bl	74bc <bt_gatt_foreach_attr>
	if (data.err) {
    6908:	f89d 401d 	ldrb.w	r4, [sp, #29]
    690c:	b15c      	cbz	r4, 6926 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    690e:	9804      	ldr	r0, [sp, #16]
    6910:	f00d faa0 	bl	13e54 <net_buf_unref>
    6914:	f89d 301d 	ldrb.w	r3, [sp, #29]
    6918:	462a      	mov	r2, r5
    691a:	2106      	movs	r1, #6
    691c:	4648      	mov	r0, r9
    691e:	f7ff fd39 	bl	6394 <send_err_rsp.part.10>
		return 0;
    6922:	2400      	movs	r4, #0
    6924:	e7cc      	b.n	68c0 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6926:	4b07      	ldr	r3, [pc, #28]	; (6944 <att_find_type_req+0xe0>)
    6928:	9a04      	ldr	r2, [sp, #16]
    692a:	2104      	movs	r1, #4
    692c:	4648      	mov	r0, r9
    692e:	f7fe fec3 	bl	56b8 <bt_l2cap_send_cb>
    6932:	e7c5      	b.n	68c0 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    6934:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6936:	e7c3      	b.n	68c0 <att_find_type_req+0x5c>
			*err = 0;
    6938:	463d      	mov	r5, r7
    693a:	2301      	movs	r3, #1
    693c:	e7ec      	b.n	6918 <att_find_type_req+0xb4>
    693e:	bf00      	nop
    6940:	00005bed 	.word	0x00005bed
    6944:	00005e59 	.word	0x00005e59

00006948 <att_find_info_req>:
{
    6948:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    694a:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    694c:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    694e:	881d      	ldrh	r5, [r3, #0]
{
    6950:	b085      	sub	sp, #20
    6952:	4607      	mov	r7, r0
	if (!start || !end) {
    6954:	b375      	cbz	r5, 69b4 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6956:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6958:	b35c      	cbz	r4, 69b2 <att_find_info_req+0x6a>
	if (start > end) {
    695a:	42a5      	cmp	r5, r4
    695c:	d82a      	bhi.n	69b4 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    695e:	2210      	movs	r2, #16
    6960:	2100      	movs	r1, #0
    6962:	4668      	mov	r0, sp
    6964:	f7fb f976 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6968:	2200      	movs	r2, #0
    696a:	2105      	movs	r1, #5
    696c:	4630      	mov	r0, r6
    696e:	f7ff fc95 	bl	629c <bt_att_create_pdu>
    6972:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6974:	b910      	cbnz	r0, 697c <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    6976:	200e      	movs	r0, #14
}
    6978:	b005      	add	sp, #20
    697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    697c:	4621      	mov	r1, r4
    697e:	466b      	mov	r3, sp
    6980:	4a0d      	ldr	r2, [pc, #52]	; (69b8 <att_find_info_req+0x70>)
	data.att = att;
    6982:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6984:	4628      	mov	r0, r5
    6986:	f000 fd99 	bl	74bc <bt_gatt_foreach_attr>
	if (!data.rsp) {
    698a:	9c02      	ldr	r4, [sp, #8]
    698c:	b94c      	cbnz	r4, 69a2 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    698e:	9801      	ldr	r0, [sp, #4]
    6990:	f00d fa60 	bl	13e54 <net_buf_unref>
    6994:	230a      	movs	r3, #10
    6996:	462a      	mov	r2, r5
    6998:	2104      	movs	r1, #4
    699a:	4630      	mov	r0, r6
    699c:	f7ff fcfa 	bl	6394 <send_err_rsp.part.10>
    69a0:	e005      	b.n	69ae <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    69a2:	4b06      	ldr	r3, [pc, #24]	; (69bc <att_find_info_req+0x74>)
    69a4:	9a01      	ldr	r2, [sp, #4]
    69a6:	2104      	movs	r1, #4
    69a8:	4630      	mov	r0, r6
    69aa:	f7fe fe85 	bl	56b8 <bt_l2cap_send_cb>
		return 0;
    69ae:	2000      	movs	r0, #0
    69b0:	e7e2      	b.n	6978 <att_find_info_req+0x30>
			*err = 0;
    69b2:	4625      	mov	r5, r4
    69b4:	2301      	movs	r3, #1
    69b6:	e7ee      	b.n	6996 <att_find_info_req+0x4e>
    69b8:	00005b53 	.word	0x00005b53
    69bc:	00005e59 	.word	0x00005e59

000069c0 <att_write_rsp.part.11.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    69c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69c4:	b086      	sub	sp, #24
    69c6:	4690      	mov	r8, r2
    69c8:	4605      	mov	r5, r0
    69ca:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    69cc:	2218      	movs	r2, #24
    69ce:	2100      	movs	r1, #0
    69d0:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    69d2:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    69d4:	f7fb f93e 	bl	1c54 <memset>
	if (rsp) {
    69d8:	f1b8 0f00 	cmp.w	r8, #0
    69dc:	d11f      	bne.n	6a1e <att_write_rsp.part.11.constprop.17+0x5e>
	data.offset = offset;
    69de:	2300      	movs	r3, #0
    69e0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    69e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    69e6:	9303      	str	r3, [sp, #12]
	data.len = len;
    69e8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    69ec:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    69f0:	2301      	movs	r3, #1
    69f2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    69f6:	4a1b      	ldr	r2, [pc, #108]	; (6a64 <att_write_rsp.part.11.constprop.17+0xa4>)
	data.conn = conn;
    69f8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    69fa:	466b      	mov	r3, sp
    69fc:	4639      	mov	r1, r7
    69fe:	4638      	mov	r0, r7
	data.op = op;
    6a00:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6a04:	f000 fd5a 	bl	74bc <bt_gatt_foreach_attr>
	if (data.err) {
    6a08:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6a0c:	b98c      	cbnz	r4, 6a32 <att_write_rsp.part.11.constprop.17+0x72>
	if (data.buf) {
    6a0e:	9a01      	ldr	r2, [sp, #4]
    6a10:	b1b2      	cbz	r2, 6a40 <att_write_rsp.part.11.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6a12:	4b15      	ldr	r3, [pc, #84]	; (6a68 <att_write_rsp.part.11.constprop.17+0xa8>)
    6a14:	2104      	movs	r1, #4
    6a16:	4628      	mov	r0, r5
    6a18:	f7fe fe4e 	bl	56b8 <bt_l2cap_send_cb>
    6a1c:	e011      	b.n	6a42 <att_write_rsp.part.11.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6a1e:	2200      	movs	r2, #0
    6a20:	4641      	mov	r1, r8
    6a22:	4628      	mov	r0, r5
    6a24:	f7ff fc3a 	bl	629c <bt_att_create_pdu>
    6a28:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6a2a:	2800      	cmp	r0, #0
    6a2c:	d1d7      	bne.n	69de <att_write_rsp.part.11.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6a2e:	240e      	movs	r4, #14
    6a30:	e007      	b.n	6a42 <att_write_rsp.part.11.constprop.17+0x82>
		if (rsp) {
    6a32:	f1b8 0f00 	cmp.w	r8, #0
    6a36:	d00f      	beq.n	6a58 <att_write_rsp.part.11.constprop.17+0x98>
			net_buf_unref(data.buf);
    6a38:	9801      	ldr	r0, [sp, #4]
    6a3a:	f00d fa0b 	bl	13e54 <net_buf_unref>
	if (!req) {
    6a3e:	b926      	cbnz	r6, 6a4a <att_write_rsp.part.11.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6a40:	2400      	movs	r4, #0
}
    6a42:	4620      	mov	r0, r4
    6a44:	b006      	add	sp, #24
    6a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6a4e:	463a      	mov	r2, r7
    6a50:	4631      	mov	r1, r6
    6a52:	4628      	mov	r0, r5
    6a54:	f7ff fc9e 	bl	6394 <send_err_rsp.part.10>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6a58:	2e18      	cmp	r6, #24
    6a5a:	d1f1      	bne.n	6a40 <att_write_rsp.part.11.constprop.17+0x80>
    6a5c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6a60:	e7ef      	b.n	6a42 <att_write_rsp.part.11.constprop.17+0x82>
    6a62:	bf00      	nop
    6a64:	00005f35 	.word	0x00005f35
    6a68:	00005e59 	.word	0x00005e59

00006a6c <att_signed_write_cmd>:
{
    6a6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6a70:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    6a72:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    6a74:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6a78:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6a7a:	4620      	mov	r0, r4
    6a7c:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    6a7e:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6a82:	f00d fa3f 	bl	13f04 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    6a86:	4629      	mov	r1, r5
    6a88:	4630      	mov	r0, r6
    6a8a:	f000 ff56 	bl	793a <bt_smp_sign_verify>
	if (err) {
    6a8e:	4607      	mov	r7, r0
    6a90:	b160      	cbz	r0, 6aac <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    6a92:	4b13      	ldr	r3, [pc, #76]	; (6ae0 <att_signed_write_cmd+0x74>)
    6a94:	9301      	str	r3, [sp, #4]
    6a96:	9300      	str	r3, [sp, #0]
    6a98:	4a12      	ldr	r2, [pc, #72]	; (6ae4 <att_signed_write_cmd+0x78>)
    6a9a:	4b13      	ldr	r3, [pc, #76]	; (6ae8 <att_signed_write_cmd+0x7c>)
    6a9c:	4913      	ldr	r1, [pc, #76]	; (6aec <att_signed_write_cmd+0x80>)
    6a9e:	4814      	ldr	r0, [pc, #80]	; (6af0 <att_signed_write_cmd+0x84>)
    6aa0:	f7fa fa74 	bl	f8c <printk>
    6aa4:	2000      	movs	r0, #0
}
    6aa6:	b002      	add	sp, #8
    6aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    6aac:	2101      	movs	r1, #1
    6aae:	4620      	mov	r0, r4
    6ab0:	f00d fa30 	bl	13f14 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6ab4:	2102      	movs	r1, #2
    6ab6:	4620      	mov	r0, r4
    6ab8:	f00d fa2c 	bl	13f14 <net_buf_simple_pull>
	if (!handle) {
    6abc:	f1b8 0f00 	cmp.w	r8, #0
    6ac0:	d00c      	beq.n	6adc <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6ac2:	7b2b      	ldrb	r3, [r5, #12]
    6ac4:	3b0c      	subs	r3, #12
    6ac6:	b2db      	uxtb	r3, r3
    6ac8:	9301      	str	r3, [sp, #4]
    6aca:	68ab      	ldr	r3, [r5, #8]
    6acc:	9300      	str	r3, [sp, #0]
    6ace:	463a      	mov	r2, r7
    6ad0:	4643      	mov	r3, r8
    6ad2:	4639      	mov	r1, r7
    6ad4:	4630      	mov	r0, r6
    6ad6:	f7ff ff73 	bl	69c0 <att_write_rsp.part.11.constprop.17>
    6ada:	e7e4      	b.n	6aa6 <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    6adc:	2001      	movs	r0, #1
    6ade:	e7e2      	b.n	6aa6 <att_signed_write_cmd+0x3a>
    6ae0:	00015af1 	.word	0x00015af1
    6ae4:	00016fae 	.word	0x00016fae
    6ae8:	00017cf0 	.word	0x00017cf0
    6aec:	00016060 	.word	0x00016060
    6af0:	00017e17 	.word	0x00017e17

00006af4 <att_write_cmd>:
{
    6af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6af6:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6af8:	f101 0008 	add.w	r0, r1, #8
{
    6afc:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6afe:	f00d fa19 	bl	13f34 <net_buf_simple_pull_le16>
	if (!handle) {
    6b02:	4603      	mov	r3, r0
    6b04:	b150      	cbz	r0, 6b1c <att_write_cmd+0x28>
    6b06:	7b22      	ldrb	r2, [r4, #12]
    6b08:	9201      	str	r2, [sp, #4]
    6b0a:	68a2      	ldr	r2, [r4, #8]
    6b0c:	9200      	str	r2, [sp, #0]
    6b0e:	2200      	movs	r2, #0
    6b10:	4611      	mov	r1, r2
    6b12:	4628      	mov	r0, r5
    6b14:	f7ff ff54 	bl	69c0 <att_write_rsp.part.11.constprop.17>
}
    6b18:	b003      	add	sp, #12
    6b1a:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6b1c:	2001      	movs	r0, #1
    6b1e:	e7fb      	b.n	6b18 <att_write_cmd+0x24>

00006b20 <att_write_req>:
{
    6b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6b22:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6b24:	f101 0008 	add.w	r0, r1, #8
{
    6b28:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6b2a:	f00d fa03 	bl	13f34 <net_buf_simple_pull_le16>
	if (!handle) {
    6b2e:	4603      	mov	r3, r0
    6b30:	b150      	cbz	r0, 6b48 <att_write_req+0x28>
    6b32:	7b22      	ldrb	r2, [r4, #12]
    6b34:	9201      	str	r2, [sp, #4]
    6b36:	68a2      	ldr	r2, [r4, #8]
    6b38:	9200      	str	r2, [sp, #0]
    6b3a:	2112      	movs	r1, #18
    6b3c:	2213      	movs	r2, #19
    6b3e:	4628      	mov	r0, r5
    6b40:	f7ff ff3e 	bl	69c0 <att_write_rsp.part.11.constprop.17>
}
    6b44:	b003      	add	sp, #12
    6b46:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6b48:	2001      	movs	r0, #1
    6b4a:	e7fb      	b.n	6b44 <att_write_req+0x24>

00006b4c <bt_att_init>:

void bt_att_init(void)
{
    6b4c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6b4e:	4803      	ldr	r0, [pc, #12]	; (6b5c <bt_att_init+0x10>)
    6b50:	f7fe fcf4 	bl	553c <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6b58:	f000 bc9a 	b.w	7490 <bt_gatt_init>
    6b5c:	20003c58 	.word	0x20003c58

00006b60 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    6b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b62:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    6b64:	4607      	mov	r7, r0
    6b66:	2800      	cmp	r0, #0
    6b68:	d04b      	beq.n	6c02 <bt_att_send+0xa2>
    6b6a:	2900      	cmp	r1, #0
    6b6c:	d049      	beq.n	6c02 <bt_att_send+0xa2>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6b6e:	f7ff f9a1 	bl	5eb4 <att_chan_get>
	if (!att) {
    6b72:	4604      	mov	r4, r0
    6b74:	b1b0      	cbz	r0, 6ba4 <bt_att_send+0x44>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    6b76:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6b7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6b7e:	4630      	mov	r0, r6
    6b80:	f00e fa27 	bl	14fd2 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    6b84:	4620      	mov	r0, r4
    6b86:	f7ff f94b 	bl	5e20 <att_is_connected>
    6b8a:	b970      	cbnz	r0, 6baa <bt_att_send+0x4a>
		BT_WARN("Disconnected");
    6b8c:	4b1e      	ldr	r3, [pc, #120]	; (6c08 <bt_att_send+0xa8>)
    6b8e:	9301      	str	r3, [sp, #4]
    6b90:	9300      	str	r3, [sp, #0]
    6b92:	4a1e      	ldr	r2, [pc, #120]	; (6c0c <bt_att_send+0xac>)
    6b94:	4b1e      	ldr	r3, [pc, #120]	; (6c10 <bt_att_send+0xb0>)
    6b96:	491f      	ldr	r1, [pc, #124]	; (6c14 <bt_att_send+0xb4>)
    6b98:	481f      	ldr	r0, [pc, #124]	; (6c18 <bt_att_send+0xb8>)
    6b9a:	f7fa f9f7 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6b9e:	4630      	mov	r0, r6
    6ba0:	f00e f9ef 	bl	14f82 <_impl_k_sem_give>
		return -ENOTCONN;
    6ba4:	f06f 0438 	mvn.w	r4, #56	; 0x38
    6ba8:	e015      	b.n	6bd6 <bt_att_send+0x76>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6baa:	68ab      	ldr	r3, [r5, #8]
    6bac:	781b      	ldrb	r3, [r3, #0]
    6bae:	2bd2      	cmp	r3, #210	; 0xd2
    6bb0:	d114      	bne.n	6bdc <bt_att_send+0x7c>
		int err;

		err = bt_smp_sign(conn, buf);
    6bb2:	4629      	mov	r1, r5
    6bb4:	4638      	mov	r0, r7
    6bb6:	f000 fec3 	bl	7940 <bt_smp_sign>
		if (err) {
    6bba:	4604      	mov	r4, r0
    6bbc:	b170      	cbz	r0, 6bdc <bt_att_send+0x7c>
			BT_ERR("Error signing data");
    6bbe:	4b12      	ldr	r3, [pc, #72]	; (6c08 <bt_att_send+0xa8>)
    6bc0:	9301      	str	r3, [sp, #4]
    6bc2:	9300      	str	r3, [sp, #0]
    6bc4:	4a15      	ldr	r2, [pc, #84]	; (6c1c <bt_att_send+0xbc>)
    6bc6:	4b12      	ldr	r3, [pc, #72]	; (6c10 <bt_att_send+0xb0>)
    6bc8:	4912      	ldr	r1, [pc, #72]	; (6c14 <bt_att_send+0xb4>)
    6bca:	4815      	ldr	r0, [pc, #84]	; (6c20 <bt_att_send+0xc0>)
    6bcc:	f7fa f9de 	bl	f8c <printk>
    6bd0:	4630      	mov	r0, r6
    6bd2:	f00e f9d6 	bl	14f82 <_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));

	return 0;
}
    6bd6:	4620      	mov	r0, r4
    6bd8:	b003      	add	sp, #12
    6bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(buf->data[0])) {
    6bdc:	68ab      	ldr	r3, [r5, #8]
    6bde:	7818      	ldrb	r0, [r3, #0]
    6be0:	f7fe fee6 	bl	59b0 <att_op_get_type>
    6be4:	3801      	subs	r0, #1
    6be6:	b2c0      	uxtb	r0, r0
    6be8:	2804      	cmp	r0, #4
    6bea:	bf96      	itet	ls
    6bec:	4b0d      	ldrls	r3, [pc, #52]	; (6c24 <bt_att_send+0xc4>)
    6bee:	4b0e      	ldrhi	r3, [pc, #56]	; (6c28 <bt_att_send+0xc8>)
    6bf0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    6bf4:	462a      	mov	r2, r5
    6bf6:	2104      	movs	r1, #4
    6bf8:	4638      	mov	r0, r7
    6bfa:	f7fe fd5d 	bl	56b8 <bt_l2cap_send_cb>
	return 0;
    6bfe:	2400      	movs	r4, #0
    6c00:	e7e9      	b.n	6bd6 <bt_att_send+0x76>
		return -EINVAL;
    6c02:	f06f 0415 	mvn.w	r4, #21
    6c06:	e7e6      	b.n	6bd6 <bt_att_send+0x76>
    6c08:	00015af1 	.word	0x00015af1
    6c0c:	0001702e 	.word	0x0001702e
    6c10:	00017d4a 	.word	0x00017d4a
    6c14:	00016060 	.word	0x00016060
    6c18:	00017dfa 	.word	0x00017dfa
    6c1c:	00016fae 	.word	0x00016fae
    6c20:	00017f9f 	.word	0x00017f9f
    6c24:	00017cc0 	.word	0x00017cc0
    6c28:	00005e47 	.word	0x00005e47

00006c2c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6c2c:	b510      	push	{r4, lr}
    6c2e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6c30:	b1d8      	cbz	r0, 6c6a <bt_att_req_send+0x3e>
    6c32:	b1d1      	cbz	r1, 6c6a <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6c34:	f7ff f93e 	bl	5eb4 <att_chan_get>
	if (!att) {
    6c38:	4603      	mov	r3, r0
    6c3a:	b1c8      	cbz	r0, 6c70 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6c3c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    6c40:	b172      	cbz	r2, 6c60 <bt_att_req_send+0x34>
	parent->next = child;
    6c42:	2000      	movs	r0, #0
    6c44:	6020      	str	r0, [r4, #0]
    6c46:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    6c4a:	b92a      	cbnz	r2, 6c58 <bt_att_req_send+0x2c>
	list->tail = node;
    6c4c:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    6c50:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6c54:	4610      	mov	r0, r2
    6c56:	bd10      	pop	{r4, pc}
	parent->next = child;
    6c58:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6c5a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    6c5e:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6c60:	4621      	mov	r1, r4
}
    6c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    6c66:	f7ff b991 	b.w	5f8c <att_send_req>
		return -EINVAL;
    6c6a:	f06f 0015 	mvn.w	r0, #21
    6c6e:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6c70:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6c74:	bd10      	pop	{r4, pc}

00006c76 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode);
    6c76:	6813      	ldr	r3, [r2, #0]
    6c78:	b939      	cbnz	r1, 6c8a <sys_slist_remove+0x14>
    6c7a:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    6c7c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode);
    6c7e:	428a      	cmp	r2, r1
    6c80:	d100      	bne.n	6c84 <sys_slist_remove+0xe>
	list->tail = node;
    6c82:	6043      	str	r3, [r0, #4]
	parent->next = child;
    6c84:	2300      	movs	r3, #0
    6c86:	6013      	str	r3, [r2, #0]
    6c88:	4770      	bx	lr
    6c8a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    6c8c:	6843      	ldr	r3, [r0, #4]
    6c8e:	429a      	cmp	r2, r3
	list->tail = node;
    6c90:	bf08      	it	eq
    6c92:	6041      	streq	r1, [r0, #4]
    6c94:	e7f6      	b.n	6c84 <sys_slist_remove+0xe>

00006c96 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    6c96:	4770      	bx	lr

00006c98 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6c98:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6c9a:	2000      	movs	r0, #0
    6c9c:	4770      	bx	lr

00006c9e <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6c9e:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6ca0:	2300      	movs	r3, #0
    6ca2:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    6ca4:	461a      	mov	r2, r3
    6ca6:	42aa      	cmp	r2, r5
    6ca8:	d107      	bne.n	6cba <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6caa:	890a      	ldrh	r2, [r1, #8]
    6cac:	429a      	cmp	r2, r3
    6cae:	d00d      	beq.n	6ccc <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6cb0:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6cb2:	68ca      	ldr	r2, [r1, #12]
	}
}
    6cb4:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    6cb6:	4619      	mov	r1, r3
    6cb8:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    6cba:	680c      	ldr	r4, [r1, #0]
    6cbc:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6cc0:	3201      	adds	r2, #1
    6cc2:	8924      	ldrh	r4, [r4, #8]
    6cc4:	42a3      	cmp	r3, r4
    6cc6:	bf38      	it	cc
    6cc8:	4623      	movcc	r3, r4
    6cca:	e7ec      	b.n	6ca6 <gatt_ccc_changed+0x8>
}
    6ccc:	bc30      	pop	{r4, r5}
    6cce:	4770      	bx	lr

00006cd0 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6cd0:	b410      	push	{r4}
    6cd2:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6cd4:	699c      	ldr	r4, [r3, #24]
    6cd6:	460a      	mov	r2, r1
    6cd8:	6959      	ldr	r1, [r3, #20]
    6cda:	4623      	mov	r3, r4
}
    6cdc:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6cde:	4718      	bx	r3

00006ce0 <gatt_subscription_remove>:
	bt_addr_le_copy(&params->_peer, &conn->le.dst);
}

static void gatt_subscription_remove(struct bt_conn *conn, sys_snode_t *prev,
				     struct bt_gatt_subscribe_params *params)
{
    6ce0:	b570      	push	{r4, r5, r6, lr}
    6ce2:	4614      	mov	r4, r2
    6ce4:	4606      	mov	r6, r0
	/* Remove subscription from the list*/
	sys_slist_remove(&subscriptions, prev, &params->node);
    6ce6:	3228      	adds	r2, #40	; 0x28
    6ce8:	4805      	ldr	r0, [pc, #20]	; (6d00 <gatt_subscription_remove+0x20>)
    6cea:	f7ff ffc4 	bl	6c76 <sys_slist_remove>

	params->notify(conn, params, NULL, 0);
    6cee:	69e5      	ldr	r5, [r4, #28]
    6cf0:	2300      	movs	r3, #0
    6cf2:	4621      	mov	r1, r4
    6cf4:	4630      	mov	r0, r6
    6cf6:	46ac      	mov	ip, r5
    6cf8:	461a      	mov	r2, r3
}
    6cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->notify(conn, params, NULL, 0);
    6cfe:	4760      	bx	ip
    6d00:	200005f0 	.word	0x200005f0

00006d04 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, u8_t err,
			       const void *pdu, u16_t length,
			       void *user_data)
{
    6d04:	b430      	push	{r4, r5}
    6d06:	9c02      	ldr	r4, [sp, #8]
    6d08:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    6d0a:	b181      	cbz	r1, 6d2e <gatt_write_ccc_rsp+0x2a>
    6d0c:	4b0d      	ldr	r3, [pc, #52]	; (6d44 <gatt_write_ccc_rsp+0x40>)
    6d0e:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode);
    6d10:	b1ab      	cbz	r3, 6d3e <gatt_write_ccc_rsp+0x3a>
	return node->next;
    6d12:	6819      	ldr	r1, [r3, #0]
		sys_snode_t *node, *tmp, *prev = NULL;

		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
			if (node == &params->node) {
    6d14:	f104 0228 	add.w	r2, r4, #40	; 0x28
    6d18:	4293      	cmp	r3, r2
    6d1a:	d104      	bne.n	6d26 <gatt_write_ccc_rsp+0x22>
				gatt_subscription_remove(conn, tmp, params);
    6d1c:	4622      	mov	r2, r4
    6d1e:	4628      	mov	r0, r5
		}
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}
    6d20:	bc30      	pop	{r4, r5}
				gatt_subscription_remove(conn, tmp, params);
    6d22:	f7ff bfdd 	b.w	6ce0 <gatt_subscription_remove>
Z_GENLIST_PEEK_NEXT(slist, snode);
    6d26:	b151      	cbz	r1, 6d3e <gatt_write_ccc_rsp+0x3a>
    6d28:	460b      	mov	r3, r1
    6d2a:	6809      	ldr	r1, [r1, #0]
    6d2c:	e7f4      	b.n	6d18 <gatt_write_ccc_rsp+0x14>
	} else if (!params->value) {
    6d2e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    6d30:	b92b      	cbnz	r3, 6d3e <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
    6d32:	69e5      	ldr	r5, [r4, #28]
    6d34:	4621      	mov	r1, r4
    6d36:	46ac      	mov	ip, r5
    6d38:	461a      	mov	r2, r3
}
    6d3a:	bc30      	pop	{r4, r5}
		params->notify(conn, params, NULL, 0);
    6d3c:	4760      	bx	ip
}
    6d3e:	bc30      	pop	{r4, r5}
    6d40:	4770      	bx	lr
    6d42:	bf00      	nop
    6d44:	200005f0 	.word	0x200005f0

00006d48 <gatt_register>:
{
    6d48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    6d4a:	4a1e      	ldr	r2, [pc, #120]	; (6dc4 <gatt_register+0x7c>)
    6d4c:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    6d4e:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    6d52:	b14b      	cbz	r3, 6d68 <gatt_register+0x20>
    6d54:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6d56:	2b00      	cmp	r3, #0
    6d58:	d032      	beq.n	6dc0 <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    6d5a:	e913 0018 	ldmdb	r3, {r3, r4}
    6d5e:	2614      	movs	r6, #20
    6d60:	fb06 3304 	mla	r3, r6, r4, r3
    6d64:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6d68:	b2ad      	uxth	r5, r5
    6d6a:	2414      	movs	r4, #20
    6d6c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    6d70:	b109      	cbz	r1, 6d76 <gatt_register+0x2e>
    6d72:	42a9      	cmp	r1, r5
    6d74:	d108      	bne.n	6d88 <gatt_register+0x40>
	parent->next = child;
    6d76:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    6d78:	f100 0108 	add.w	r1, r0, #8
    6d7c:	6083      	str	r3, [r0, #8]
    6d7e:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    6d80:	b9d0      	cbnz	r0, 6db8 <gatt_register+0x70>
	list->tail = node;
    6d82:	6051      	str	r1, [r2, #4]
	list->head = node;
    6d84:	6011      	str	r1, [r2, #0]
    6d86:	e015      	b.n	6db4 <gatt_register+0x6c>
		if (!attrs->handle) {
    6d88:	8a0c      	ldrh	r4, [r1, #16]
    6d8a:	b92c      	cbnz	r4, 6d98 <gatt_register+0x50>
			attrs->handle = ++handle;
    6d8c:	3301      	adds	r3, #1
    6d8e:	b29c      	uxth	r4, r3
    6d90:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    6d92:	3114      	adds	r1, #20
    6d94:	4623      	mov	r3, r4
    6d96:	e7eb      	b.n	6d70 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6d98:	42a3      	cmp	r3, r4
    6d9a:	d3fa      	bcc.n	6d92 <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6d9c:	4b0a      	ldr	r3, [pc, #40]	; (6dc8 <gatt_register+0x80>)
    6d9e:	9302      	str	r3, [sp, #8]
    6da0:	e88d 0018 	stmia.w	sp, {r3, r4}
    6da4:	4a09      	ldr	r2, [pc, #36]	; (6dcc <gatt_register+0x84>)
    6da6:	4b0a      	ldr	r3, [pc, #40]	; (6dd0 <gatt_register+0x88>)
    6da8:	490a      	ldr	r1, [pc, #40]	; (6dd4 <gatt_register+0x8c>)
    6daa:	480b      	ldr	r0, [pc, #44]	; (6dd8 <gatt_register+0x90>)
    6dac:	f7fa f8ee 	bl	f8c <printk>
			return -EINVAL;
    6db0:	f06f 0015 	mvn.w	r0, #21
}
    6db4:	b004      	add	sp, #16
    6db6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    6db8:	6001      	str	r1, [r0, #0]
	list->tail = node;
    6dba:	6051      	str	r1, [r2, #4]
	return 0;
    6dbc:	4618      	mov	r0, r3
    6dbe:	e7f9      	b.n	6db4 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    6dc0:	681b      	ldr	r3, [r3, #0]
    6dc2:	deff      	udf	#255	; 0xff
    6dc4:	20000584 	.word	0x20000584
    6dc8:	00015af1 	.word	0x00015af1
    6dcc:	00016fae 	.word	0x00016fae
    6dd0:	0001809c 	.word	0x0001809c
    6dd4:	00016060 	.word	0x00016060
    6dd8:	000181cc 	.word	0x000181cc

00006ddc <gatt_notify>:
{
    6ddc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6de0:	468a      	mov	sl, r1
    6de2:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6de4:	211b      	movs	r1, #27
    6de6:	1c9a      	adds	r2, r3, #2
{
    6de8:	4680      	mov	r8, r0
    6dea:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6dec:	f7ff fa56 	bl	629c <bt_att_create_pdu>
	if (!buf) {
    6df0:	4604      	mov	r4, r0
    6df2:	b968      	cbnz	r0, 6e10 <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    6df4:	4b13      	ldr	r3, [pc, #76]	; (6e44 <gatt_notify+0x68>)
    6df6:	9301      	str	r3, [sp, #4]
    6df8:	9300      	str	r3, [sp, #0]
    6dfa:	4a13      	ldr	r2, [pc, #76]	; (6e48 <gatt_notify+0x6c>)
    6dfc:	4b13      	ldr	r3, [pc, #76]	; (6e4c <gatt_notify+0x70>)
    6dfe:	4914      	ldr	r1, [pc, #80]	; (6e50 <gatt_notify+0x74>)
    6e00:	4814      	ldr	r0, [pc, #80]	; (6e54 <gatt_notify+0x78>)
    6e02:	f7fa f8c3 	bl	f8c <printk>
    6e06:	f06f 000b 	mvn.w	r0, #11
}
    6e0a:	b002      	add	sp, #8
    6e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    6e10:	f100 0708 	add.w	r7, r0, #8
    6e14:	2102      	movs	r1, #2
    6e16:	4638      	mov	r0, r7
    6e18:	f00d f84e 	bl	13eb8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6e1c:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    6e1e:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6e20:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6e24:	4638      	mov	r0, r7
    6e26:	f00d f847 	bl	13eb8 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6e2a:	4632      	mov	r2, r6
    6e2c:	4649      	mov	r1, r9
    6e2e:	4628      	mov	r0, r5
    6e30:	f7fa fee4 	bl	1bfc <memcpy>
    6e34:	4640      	mov	r0, r8
    6e36:	2300      	movs	r3, #0
    6e38:	4622      	mov	r2, r4
    6e3a:	2104      	movs	r1, #4
    6e3c:	f7fe fc3c 	bl	56b8 <bt_l2cap_send_cb>
	return 0;
    6e40:	2000      	movs	r0, #0
    6e42:	e7e2      	b.n	6e0a <gatt_notify+0x2e>
    6e44:	00015af1 	.word	0x00015af1
    6e48:	0001702e 	.word	0x0001702e
    6e4c:	000180d8 	.word	0x000180d8
    6e50:	00016060 	.word	0x00016060
    6e54:	00018193 	.word	0x00018193

00006e58 <gatt_send.constprop.29>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    6e58:	b530      	push	{r4, r5, lr}
    6e5a:	460d      	mov	r5, r1
    6e5c:	b085      	sub	sp, #20
	if (params) {
    6e5e:	b1c3      	cbz	r3, 6e92 <gatt_send.constprop.29+0x3a>
		req->func = func;
    6e60:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    6e62:	2200      	movs	r2, #0
		req->buf = buf;
    6e64:	6119      	str	r1, [r3, #16]
		req->destroy = destroy;
    6e66:	609a      	str	r2, [r3, #8]
		err = bt_att_req_send(conn, req);
    6e68:	4619      	mov	r1, r3
    6e6a:	f7ff fedf 	bl	6c2c <bt_att_req_send>
		err = bt_att_send(conn, buf);
    6e6e:	4604      	mov	r4, r0
	if (err) {
    6e70:	b160      	cbz	r0, 6e8c <gatt_send.constprop.29+0x34>
		BT_ERR("Error sending ATT PDU: %d", err);
    6e72:	4b09      	ldr	r3, [pc, #36]	; (6e98 <gatt_send.constprop.29+0x40>)
    6e74:	9302      	str	r3, [sp, #8]
    6e76:	e88d 0018 	stmia.w	sp, {r3, r4}
    6e7a:	4a08      	ldr	r2, [pc, #32]	; (6e9c <gatt_send.constprop.29+0x44>)
    6e7c:	4b08      	ldr	r3, [pc, #32]	; (6ea0 <gatt_send.constprop.29+0x48>)
    6e7e:	4909      	ldr	r1, [pc, #36]	; (6ea4 <gatt_send.constprop.29+0x4c>)
    6e80:	4809      	ldr	r0, [pc, #36]	; (6ea8 <gatt_send.constprop.29+0x50>)
    6e82:	f7fa f883 	bl	f8c <printk>
		net_buf_unref(buf);
    6e86:	4628      	mov	r0, r5
    6e88:	f00c ffe4 	bl	13e54 <net_buf_unref>
}
    6e8c:	4620      	mov	r0, r4
    6e8e:	b005      	add	sp, #20
    6e90:	bd30      	pop	{r4, r5, pc}
		err = bt_att_send(conn, buf);
    6e92:	f7ff fe65 	bl	6b60 <bt_att_send>
    6e96:	e7ea      	b.n	6e6e <gatt_send.constprop.29+0x16>
    6e98:	00015af1 	.word	0x00015af1
    6e9c:	00016fae 	.word	0x00016fae
    6ea0:	000180e4 	.word	0x000180e4
    6ea4:	00016060 	.word	0x00016060
    6ea8:	000181fd 	.word	0x000181fd

00006eac <gatt_write_ccc.constprop.19>:

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    6eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6eb0:	4689      	mov	r9, r1
    6eb2:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    6eb4:	2112      	movs	r1, #18
    6eb6:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    6eb8:	4606      	mov	r6, r0
    6eba:	461f      	mov	r7, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    6ebc:	f7ff f9ee 	bl	629c <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    6ec0:	4604      	mov	r4, r0
    6ec2:	b198      	cbz	r0, 6eec <gatt_write_ccc.constprop.19+0x40>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    6ec4:	f100 0508 	add.w	r5, r0, #8
    6ec8:	2102      	movs	r1, #2
    6eca:	4628      	mov	r0, r5
    6ecc:	f00c fff4 	bl	13eb8 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    6ed0:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    6ed2:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    6ed6:	4628      	mov	r0, r5
    6ed8:	f00d f805 	bl	13ee6 <net_buf_simple_add_le16>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	return gatt_send(conn, buf, func, params, NULL);
    6edc:	463b      	mov	r3, r7
    6ede:	4621      	mov	r1, r4
    6ee0:	4630      	mov	r0, r6
    6ee2:	4a04      	ldr	r2, [pc, #16]	; (6ef4 <gatt_write_ccc.constprop.19+0x48>)
}
    6ee4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    6ee8:	f7ff bfb6 	b.w	6e58 <gatt_send.constprop.29>
}
    6eec:	f06f 000b 	mvn.w	r0, #11
    6ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ef4:	00006d05 	.word	0x00006d05

00006ef8 <gatt_indicate>:
{
    6ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    6efc:	694b      	ldr	r3, [r1, #20]
{
    6efe:	b085      	sub	sp, #20
    6f00:	4680      	mov	r8, r0
	u16_t value_handle = params->attr->handle;
    6f02:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6f04:	6818      	ldr	r0, [r3, #0]
    6f06:	2300      	movs	r3, #0
{
    6f08:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6f0a:	f88d 300c 	strb.w	r3, [sp, #12]
    6f0e:	a903      	add	r1, sp, #12
    6f10:	f642 0303 	movw	r3, #10243	; 0x2803
    6f14:	f8ad 300e 	strh.w	r3, [sp, #14]
    6f18:	f7fb f854 	bl	1fc4 <bt_uuid_cmp>
    6f1c:	b930      	cbnz	r0, 6f2c <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    6f1e:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6f20:	68db      	ldr	r3, [r3, #12]
    6f22:	791b      	ldrb	r3, [r3, #4]
    6f24:	069b      	lsls	r3, r3, #26
    6f26:	d530      	bpl.n	6f8a <gatt_indicate+0x92>
		value_handle += 1;
    6f28:	3501      	adds	r5, #1
    6f2a:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    6f2c:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6f2e:	211d      	movs	r1, #29
    6f30:	3202      	adds	r2, #2
    6f32:	4640      	mov	r0, r8
    6f34:	f7ff f9b2 	bl	629c <bt_att_create_pdu>
	if (!buf) {
    6f38:	4606      	mov	r6, r0
    6f3a:	b968      	cbnz	r0, 6f58 <gatt_indicate+0x60>
		BT_WARN("No buffer available to send indication");
    6f3c:	4b14      	ldr	r3, [pc, #80]	; (6f90 <gatt_indicate+0x98>)
    6f3e:	9301      	str	r3, [sp, #4]
    6f40:	9300      	str	r3, [sp, #0]
    6f42:	4a14      	ldr	r2, [pc, #80]	; (6f94 <gatt_indicate+0x9c>)
    6f44:	4b14      	ldr	r3, [pc, #80]	; (6f98 <gatt_indicate+0xa0>)
    6f46:	4915      	ldr	r1, [pc, #84]	; (6f9c <gatt_indicate+0xa4>)
    6f48:	4815      	ldr	r0, [pc, #84]	; (6fa0 <gatt_indicate+0xa8>)
    6f4a:	f7fa f81f 	bl	f8c <printk>
		return -ENOMEM;
    6f4e:	f06f 000b 	mvn.w	r0, #11
}
    6f52:	b005      	add	sp, #20
    6f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    6f58:	f100 0908 	add.w	r9, r0, #8
    6f5c:	2102      	movs	r1, #2
    6f5e:	4648      	mov	r0, r9
    6f60:	f00c ffaa 	bl	13eb8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6f64:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    6f66:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    6f68:	f827 5b02 	strh.w	r5, [r7], #2
	net_buf_add(buf, params->len);
    6f6c:	4648      	mov	r0, r9
    6f6e:	f00c ffa3 	bl	13eb8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6f72:	8c22      	ldrh	r2, [r4, #32]
    6f74:	69e1      	ldr	r1, [r4, #28]
    6f76:	4638      	mov	r0, r7
    6f78:	f7fa fe40 	bl	1bfc <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    6f7c:	4623      	mov	r3, r4
    6f7e:	4a09      	ldr	r2, [pc, #36]	; (6fa4 <gatt_indicate+0xac>)
    6f80:	4631      	mov	r1, r6
    6f82:	4640      	mov	r0, r8
    6f84:	f7ff ff68 	bl	6e58 <gatt_send.constprop.29>
    6f88:	e7e3      	b.n	6f52 <gatt_indicate+0x5a>
			return -EINVAL;
    6f8a:	f06f 0015 	mvn.w	r0, #21
    6f8e:	e7e0      	b.n	6f52 <gatt_indicate+0x5a>
    6f90:	00015af1 	.word	0x00015af1
    6f94:	0001702e 	.word	0x0001702e
    6f98:	000180ee 	.word	0x000180ee
    6f9c:	00016060 	.word	0x00016060
    6fa0:	0001815c 	.word	0x0001815c
    6fa4:	00006cd1 	.word	0x00006cd1

00006fa8 <sc_indicate.constprop.24>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    6fa8:	b510      	push	{r4, lr}
    6faa:	4b17      	ldr	r3, [pc, #92]	; (7008 <sc_indicate.constprop.24+0x60>)
    6fac:	f3bf 8f5b 	dmb	ish
    6fb0:	f103 0250 	add.w	r2, r3, #80	; 0x50
    6fb4:	e852 4f00 	ldrex	r4, [r2]
    6fb8:	f044 0e01 	orr.w	lr, r4, #1
    6fbc:	e842 ec00 	strex	ip, lr, [r2]
    6fc0:	f1bc 0f00 	cmp.w	ip, #0
    6fc4:	d1f6      	bne.n	6fb4 <sc_indicate.constprop.24+0xc>
    6fc6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    6fca:	07e2      	lsls	r2, r4, #31
    6fcc:	d402      	bmi.n	6fd4 <sc_indicate.constprop.24+0x2c>
		sc->start = start;
    6fce:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    6fd0:	84d9      	strh	r1, [r3, #38]	; 0x26
    6fd2:	e00a      	b.n	6fea <sc_indicate.constprop.24+0x42>
	if (new_start >= *start && new_end <= *end) {
    6fd4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    6fd6:	4282      	cmp	r2, r0
    6fd8:	d803      	bhi.n	6fe2 <sc_indicate.constprop.24+0x3a>
    6fda:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6fdc:	428a      	cmp	r2, r1
    6fde:	d301      	bcc.n	6fe4 <sc_indicate.constprop.24+0x3c>
    6fe0:	bd10      	pop	{r4, pc}
		*start = new_start;
    6fe2:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    6fe4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6fe6:	428a      	cmp	r2, r1
    6fe8:	d3f2      	bcc.n	6fd0 <sc_indicate.constprop.24+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6fea:	f3bf 8f5b 	dmb	ish
    6fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6ff0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    6ff4:	079b      	lsls	r3, r3, #30
    6ff6:	d406      	bmi.n	7006 <sc_indicate.constprop.24+0x5e>
    6ff8:	220a      	movs	r2, #10
    6ffa:	4904      	ldr	r1, [pc, #16]	; (700c <sc_indicate.constprop.24+0x64>)
    6ffc:	4804      	ldr	r0, [pc, #16]	; (7010 <sc_indicate.constprop.24+0x68>)
}
    6ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7002:	f00e bb19 	b.w	15638 <k_delayed_work_submit_to_queue>
    7006:	bd10      	pop	{r4, pc}
    7008:	2000058c 	.word	0x2000058c
    700c:	200005b4 	.word	0x200005b4
    7010:	200019b8 	.word	0x200019b8

00007014 <connected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    7014:	6882      	ldr	r2, [r0, #8]
    7016:	4b19      	ldr	r3, [pc, #100]	; (707c <connected_cb+0x68>)
    7018:	429a      	cmp	r2, r3
{
    701a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    701e:	4607      	mov	r7, r0
    7020:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7022:	d125      	bne.n	7070 <connected_cb+0x5c>
	ccc = attr->user_data;
    7024:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    7026:	2600      	movs	r6, #0
    7028:	686b      	ldr	r3, [r5, #4]
    702a:	429e      	cmp	r6, r3
    702c:	d220      	bcs.n	7070 <connected_cb+0x5c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    702e:	6829      	ldr	r1, [r5, #0]
    7030:	ea4f 1806 	mov.w	r8, r6, lsl #4
    7034:	4441      	add	r1, r8
    7036:	4620      	mov	r0, r4
    7038:	f7fd fd1a 	bl	4a70 <bt_conn_addr_le_cmp>
    703c:	b9d8      	cbnz	r0, 7076 <connected_cb+0x62>
		if (ccc->cfg[i].value) {
    703e:	682b      	ldr	r3, [r5, #0]
    7040:	4443      	add	r3, r8
    7042:	891b      	ldrh	r3, [r3, #8]
    7044:	b1bb      	cbz	r3, 7076 <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    7046:	4629      	mov	r1, r5
    7048:	4638      	mov	r0, r7
    704a:	f7ff fe28 	bl	6c9e <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    704e:	682c      	ldr	r4, [r5, #0]
    7050:	4b0b      	ldr	r3, [pc, #44]	; (7080 <connected_cb+0x6c>)
    7052:	429c      	cmp	r4, r3
    7054:	d10c      	bne.n	7070 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    7056:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    7058:	89a0      	ldrh	r0, [r4, #12]
    705a:	89e1      	ldrh	r1, [r4, #14]
    705c:	b900      	cbnz	r0, 7060 <connected_cb+0x4c>
    705e:	b139      	cbz	r1, 7070 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    7060:	f7ff ffa2 	bl	6fa8 <sc_indicate.constprop.24>
	memset(cfg->data, 0, sizeof(cfg->data));
    7064:	2204      	movs	r2, #4
    7066:	2100      	movs	r1, #0
    7068:	f104 000c 	add.w	r0, r4, #12
    706c:	f7fa fdf2 	bl	1c54 <memset>
}
    7070:	2001      	movs	r0, #1
    7072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    7076:	3601      	adds	r6, #1
    7078:	e7d6      	b.n	7028 <connected_cb+0x14>
    707a:	bf00      	nop
    707c:	000072a1 	.word	0x000072a1
    7080:	200005e0 	.word	0x200005e0

00007084 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7084:	490d      	ldr	r1, [pc, #52]	; (70bc <sc_indicate_rsp+0x38>)
    7086:	f3bf 8f5b 	dmb	ish
    708a:	f101 0350 	add.w	r3, r1, #80	; 0x50
    708e:	e853 2f00 	ldrex	r2, [r3]
    7092:	f022 0202 	bic.w	r2, r2, #2
    7096:	e843 2000 	strex	r0, r2, [r3]
    709a:	2800      	cmp	r0, #0
    709c:	d1f7      	bne.n	708e <sc_indicate_rsp+0xa>
    709e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    70a2:	f3bf 8f5b 	dmb	ish
    70a6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    70a8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    70ac:	07db      	lsls	r3, r3, #31
    70ae:	d504      	bpl.n	70ba <sc_indicate_rsp+0x36>
    70b0:	2200      	movs	r2, #0
    70b2:	3128      	adds	r1, #40	; 0x28
    70b4:	4802      	ldr	r0, [pc, #8]	; (70c0 <sc_indicate_rsp+0x3c>)
    70b6:	f00e babf 	b.w	15638 <k_delayed_work_submit_to_queue>
    70ba:	4770      	bx	lr
    70bc:	2000058c 	.word	0x2000058c
    70c0:	200019b8 	.word	0x200019b8

000070c4 <read_appearance>:
{
    70c4:	b513      	push	{r0, r1, r4, lr}
    70c6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    70ca:	4610      	mov	r0, r2
	if (offset > value_len) {
    70cc:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    70ce:	f04f 0200 	mov.w	r2, #0
    70d2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    70d6:	d80d      	bhi.n	70f4 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    70d8:	f1c1 0402 	rsb	r4, r1, #2
    70dc:	429c      	cmp	r4, r3
    70de:	bfa8      	it	ge
    70e0:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    70e2:	f10d 0306 	add.w	r3, sp, #6
    70e6:	4622      	mov	r2, r4
    70e8:	4419      	add	r1, r3
    70ea:	f7fa fd87 	bl	1bfc <memcpy>
}
    70ee:	4620      	mov	r0, r4
    70f0:	b002      	add	sp, #8
    70f2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    70f4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    70f8:	e7f9      	b.n	70ee <read_appearance+0x2a>
	...

000070fc <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    70fc:	6882      	ldr	r2, [r0, #8]
    70fe:	4b27      	ldr	r3, [pc, #156]	; (719c <disconnected_cb+0xa0>)
    7100:	429a      	cmp	r2, r3
{
    7102:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    7106:	4680      	mov	r8, r0
    7108:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    710a:	d127      	bne.n	715c <disconnected_cb+0x60>
	ccc = attr->user_data;
    710c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    710e:	8923      	ldrh	r3, [r4, #8]
    7110:	b323      	cbz	r3, 715c <disconnected_cb+0x60>
    7112:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7114:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    7118:	6863      	ldr	r3, [r4, #4]
    711a:	429e      	cmp	r6, r3
    711c:	d30b      	bcc.n	7136 <disconnected_cb+0x3a>
	memset(&ccc->value, 0, sizeof(ccc->value));
    711e:	2202      	movs	r2, #2
    7120:	2100      	movs	r1, #0
    7122:	f104 0008 	add.w	r0, r4, #8
    7126:	f7fa fd95 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    712a:	68e3      	ldr	r3, [r4, #12]
    712c:	b1b3      	cbz	r3, 715c <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    712e:	8921      	ldrh	r1, [r4, #8]
    7130:	4640      	mov	r0, r8
    7132:	4798      	blx	r3
    7134:	e012      	b.n	715c <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    7136:	6821      	ldr	r1, [r4, #0]
    7138:	0135      	lsls	r5, r6, #4
    713a:	4429      	add	r1, r5
    713c:	890b      	ldrh	r3, [r1, #8]
    713e:	b19b      	cbz	r3, 7168 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7140:	4648      	mov	r0, r9
    7142:	f7fd fc95 	bl	4a70 <bt_conn_addr_le_cmp>
    7146:	b188      	cbz	r0, 716c <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    7148:	6820      	ldr	r0, [r4, #0]
    714a:	4428      	add	r0, r5
    714c:	f7fd fcf0 	bl	4b30 <bt_conn_lookup_addr_le>
			if (tmp) {
    7150:	b150      	cbz	r0, 7168 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    7152:	7a43      	ldrb	r3, [r0, #9]
    7154:	2b03      	cmp	r3, #3
    7156:	d105      	bne.n	7164 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    7158:	f7fd fd20 	bl	4b9c <bt_conn_unref>
}
    715c:	2001      	movs	r0, #1
    715e:	b002      	add	sp, #8
    7160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    7164:	f7fd fd1a 	bl	4b9c <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    7168:	3601      	adds	r6, #1
    716a:	e7d5      	b.n	7118 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    716c:	4650      	mov	r0, sl
    716e:	f7fd f8f9 	bl	4364 <bt_addr_le_is_bonded>
    7172:	4607      	mov	r7, r0
    7174:	6820      	ldr	r0, [r4, #0]
    7176:	b95f      	cbnz	r7, 7190 <disconnected_cb+0x94>
    7178:	4428      	add	r0, r5
    717a:	2207      	movs	r2, #7
    717c:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    717e:	9700      	str	r7, [sp, #0]
    7180:	f8cd 7003 	str.w	r7, [sp, #3]
    7184:	f7fa fd3a 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    7188:	6823      	ldr	r3, [r4, #0]
    718a:	441d      	add	r5, r3
    718c:	812f      	strh	r7, [r5, #8]
    718e:	e7eb      	b.n	7168 <disconnected_cb+0x6c>
    7190:	2207      	movs	r2, #7
    7192:	4651      	mov	r1, sl
    7194:	4428      	add	r0, r5
    7196:	f7fa fd31 	bl	1bfc <memcpy>
    719a:	e7e5      	b.n	7168 <disconnected_cb+0x6c>
    719c:	000072a1 	.word	0x000072a1

000071a0 <read_name>:
{
    71a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    71a4:	4e0d      	ldr	r6, [pc, #52]	; (71dc <read_name+0x3c>)
{
    71a6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    71aa:	4630      	mov	r0, r6
{
    71ac:	4698      	mov	r8, r3
    71ae:	4617      	mov	r7, r2
				 strlen(gap_name));
    71b0:	f7fa fcfa 	bl	1ba8 <strlen>
	if (offset > value_len) {
    71b4:	b283      	uxth	r3, r0
    71b6:	42ab      	cmp	r3, r5
    71b8:	d30d      	bcc.n	71d6 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    71ba:	1b5c      	subs	r4, r3, r5
    71bc:	4544      	cmp	r4, r8
    71be:	4623      	mov	r3, r4
    71c0:	bfa8      	it	ge
    71c2:	4643      	movge	r3, r8
    71c4:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    71c6:	4622      	mov	r2, r4
    71c8:	1971      	adds	r1, r6, r5
    71ca:	4638      	mov	r0, r7
    71cc:	f7fa fd16 	bl	1bfc <memcpy>
}
    71d0:	4620      	mov	r0, r4
    71d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    71d6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    71da:	e7f9      	b.n	71d0 <read_name+0x30>
    71dc:	00018227 	.word	0x00018227

000071e0 <bt_gatt_attr_read_ccc>:
{
    71e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    71e4:	68ce      	ldr	r6, [r1, #12]
{
    71e6:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    71ea:	4604      	mov	r4, r0
    71ec:	4690      	mov	r8, r2
    71ee:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    71f0:	2500      	movs	r5, #0
    71f2:	6873      	ldr	r3, [r6, #4]
    71f4:	429d      	cmp	r5, r3
    71f6:	d20e      	bcs.n	7216 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    71f8:	6831      	ldr	r1, [r6, #0]
    71fa:	ea4f 1905 	mov.w	r9, r5, lsl #4
    71fe:	4449      	add	r1, r9
    7200:	4620      	mov	r0, r4
    7202:	f7fd fc35 	bl	4a70 <bt_conn_addr_le_cmp>
    7206:	b108      	cbz	r0, 720c <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    7208:	3501      	adds	r5, #1
    720a:	e7f2      	b.n	71f2 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    720c:	6832      	ldr	r2, [r6, #0]
    720e:	444a      	add	r2, r9
    7210:	8913      	ldrh	r3, [r2, #8]
    7212:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    7216:	6873      	ldr	r3, [r6, #4]
    7218:	429d      	cmp	r5, r3
		value = 0x0000;
    721a:	bf04      	itt	eq
    721c:	2300      	moveq	r3, #0
    721e:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    7222:	2f02      	cmp	r7, #2
    7224:	d80f      	bhi.n	7246 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    7226:	f1c7 0402 	rsb	r4, r7, #2
    722a:	4554      	cmp	r4, sl
    722c:	bfa8      	it	ge
    722e:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    7230:	f10d 0306 	add.w	r3, sp, #6
    7234:	4622      	mov	r2, r4
    7236:	19d9      	adds	r1, r3, r7
    7238:	4640      	mov	r0, r8
    723a:	f7fa fcdf 	bl	1bfc <memcpy>
}
    723e:	4620      	mov	r0, r4
    7240:	b002      	add	sp, #8
    7242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7246:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    724a:	e7f8      	b.n	723e <bt_gatt_attr_read_ccc+0x5e>

0000724c <bt_gatt_attr_read_service>:
{
    724c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    724e:	68c9      	ldr	r1, [r1, #12]
{
    7250:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    7254:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    7256:	780a      	ldrb	r2, [r1, #0]
    7258:	b992      	cbnz	r2, 7280 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    725a:	884a      	ldrh	r2, [r1, #2]
    725c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    7260:	2d02      	cmp	r5, #2
    7262:	d819      	bhi.n	7298 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    7264:	f1c5 0402 	rsb	r4, r5, #2
    7268:	429c      	cmp	r4, r3
    726a:	bfa8      	it	ge
    726c:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    726e:	f10d 0306 	add.w	r3, sp, #6
    7272:	4622      	mov	r2, r4
    7274:	1959      	adds	r1, r3, r5
    7276:	f7fa fcc1 	bl	1bfc <memcpy>
}
    727a:	4620      	mov	r0, r4
    727c:	b003      	add	sp, #12
    727e:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    7280:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    7282:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    7286:	d807      	bhi.n	7298 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    7288:	f1c5 0410 	rsb	r4, r5, #16
    728c:	429c      	cmp	r4, r3
    728e:	bfa8      	it	ge
    7290:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    7292:	4622      	mov	r2, r4
    7294:	4429      	add	r1, r5
    7296:	e7ee      	b.n	7276 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7298:	f06f 0406 	mvn.w	r4, #6
    729c:	e7ed      	b.n	727a <bt_gatt_attr_read_service+0x2e>
	...

000072a0 <bt_gatt_attr_write_ccc>:
{
    72a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72a4:	b087      	sub	sp, #28
    72a6:	4688      	mov	r8, r1
    72a8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    72ac:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    72b0:	2902      	cmp	r1, #2
{
    72b2:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    72b4:	d85f      	bhi.n	7376 <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    72b6:	4419      	add	r1, r3
    72b8:	2902      	cmp	r1, #2
    72ba:	461f      	mov	r7, r3
    72bc:	dc5e      	bgt.n	737c <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    72be:	7853      	ldrb	r3, [r2, #1]
    72c0:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    72c2:	2400      	movs	r4, #0
    72c4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    72c8:	686b      	ldr	r3, [r5, #4]
    72ca:	429c      	cmp	r4, r3
    72cc:	d206      	bcs.n	72dc <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    72ce:	6829      	ldr	r1, [r5, #0]
    72d0:	4648      	mov	r0, r9
    72d2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    72d6:	f7fd fbcb 	bl	4a70 <bt_conn_addr_le_cmp>
    72da:	b9b8      	cbnz	r0, 730c <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    72dc:	686b      	ldr	r3, [r5, #4]
    72de:	429c      	cmp	r4, r3
    72e0:	d12f      	bne.n	7342 <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    72e2:	b356      	cbz	r6, 733a <bt_gatt_attr_write_ccc+0x9a>
    72e4:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    72e6:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    72e8:	686b      	ldr	r3, [r5, #4]
    72ea:	429c      	cmp	r4, r3
    72ec:	d217      	bcs.n	731e <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    72ee:	6828      	ldr	r0, [r5, #0]
    72f0:	f8cd a008 	str.w	sl, [sp, #8]
    72f4:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    72f8:	2207      	movs	r2, #7
    72fa:	a902      	add	r1, sp, #8
    72fc:	4458      	add	r0, fp
    72fe:	f8cd a00b 	str.w	sl, [sp, #11]
    7302:	f7fa fc66 	bl	1bd2 <memcmp>
    7306:	b118      	cbz	r0, 7310 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    7308:	3401      	adds	r4, #1
    730a:	e7ed      	b.n	72e8 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    730c:	3401      	adds	r4, #1
    730e:	e7db      	b.n	72c8 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    7310:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    7312:	2207      	movs	r2, #7
    7314:	f109 0144 	add.w	r1, r9, #68	; 0x44
    7318:	4458      	add	r0, fp
    731a:	f7fa fc6f 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    731e:	686b      	ldr	r3, [r5, #4]
    7320:	429c      	cmp	r4, r3
    7322:	d10e      	bne.n	7342 <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    7324:	4b17      	ldr	r3, [pc, #92]	; (7384 <bt_gatt_attr_write_ccc+0xe4>)
    7326:	9301      	str	r3, [sp, #4]
    7328:	9300      	str	r3, [sp, #0]
    732a:	4a17      	ldr	r2, [pc, #92]	; (7388 <bt_gatt_attr_write_ccc+0xe8>)
    732c:	4b17      	ldr	r3, [pc, #92]	; (738c <bt_gatt_attr_write_ccc+0xec>)
    732e:	4918      	ldr	r1, [pc, #96]	; (7390 <bt_gatt_attr_write_ccc+0xf0>)
    7330:	4818      	ldr	r0, [pc, #96]	; (7394 <bt_gatt_attr_write_ccc+0xf4>)
    7332:	f7f9 fe2b 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    7336:	f06f 0710 	mvn.w	r7, #16
}
    733a:	4638      	mov	r0, r7
    733c:	b007      	add	sp, #28
    733e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    7342:	682b      	ldr	r3, [r5, #0]
    7344:	0124      	lsls	r4, r4, #4
    7346:	4423      	add	r3, r4
    7348:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    734a:	892b      	ldrh	r3, [r5, #8]
    734c:	42b3      	cmp	r3, r6
    734e:	d003      	beq.n	7358 <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    7350:	4629      	mov	r1, r5
    7352:	4640      	mov	r0, r8
    7354:	f7ff fca3 	bl	6c9e <gatt_ccc_changed>
	if (!value) {
    7358:	2e00      	cmp	r6, #0
    735a:	d1ee      	bne.n	733a <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    735c:	6828      	ldr	r0, [r5, #0]
    735e:	9604      	str	r6, [sp, #16]
    7360:	4420      	add	r0, r4
    7362:	2207      	movs	r2, #7
    7364:	a904      	add	r1, sp, #16
    7366:	f8cd 6013 	str.w	r6, [sp, #19]
    736a:	f7fa fc47 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    736e:	682b      	ldr	r3, [r5, #0]
    7370:	441c      	add	r4, r3
    7372:	8126      	strh	r6, [r4, #8]
    7374:	e7e1      	b.n	733a <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7376:	f06f 0706 	mvn.w	r7, #6
    737a:	e7de      	b.n	733a <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    737c:	f06f 070c 	mvn.w	r7, #12
    7380:	e7db      	b.n	733a <bt_gatt_attr_write_ccc+0x9a>
    7382:	bf00      	nop
    7384:	00015af1 	.word	0x00015af1
    7388:	0001702e 	.word	0x0001702e
    738c:	000180c1 	.word	0x000180c1
    7390:	00016060 	.word	0x00016060
    7394:	00018132 	.word	0x00018132

00007398 <notify_cb>:
{
    7398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    739c:	f642 1302 	movw	r3, #10498	; 0x2902
{
    73a0:	4605      	mov	r5, r0
    73a2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    73a4:	2400      	movs	r4, #0
    73a6:	4669      	mov	r1, sp
    73a8:	6800      	ldr	r0, [r0, #0]
    73aa:	f88d 4000 	strb.w	r4, [sp]
    73ae:	f8ad 3002 	strh.w	r3, [sp, #2]
    73b2:	f7fa fe07 	bl	1fc4 <bt_uuid_cmp>
    73b6:	b178      	cbz	r0, 73d8 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    73b8:	f642 0303 	movw	r3, #10243	; 0x2803
    73bc:	6828      	ldr	r0, [r5, #0]
    73be:	f88d 4004 	strb.w	r4, [sp, #4]
    73c2:	a901      	add	r1, sp, #4
    73c4:	f8ad 3006 	strh.w	r3, [sp, #6]
    73c8:	f7fa fdfc 	bl	1fc4 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    73cc:	1b00      	subs	r0, r0, r4
    73ce:	bf18      	it	ne
    73d0:	2001      	movne	r0, #1
}
    73d2:	b003      	add	sp, #12
    73d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    73d8:	68aa      	ldr	r2, [r5, #8]
    73da:	4b2b      	ldr	r3, [pc, #172]	; (7488 <notify_cb+0xf0>)
    73dc:	429a      	cmp	r2, r3
    73de:	d001      	beq.n	73e4 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    73e0:	2001      	movs	r0, #1
    73e2:	e7f6      	b.n	73d2 <notify_cb+0x3a>
	ccc = attr->user_data;
    73e4:	68ef      	ldr	r7, [r5, #12]
    73e6:	4d29      	ldr	r5, [pc, #164]	; (748c <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    73e8:	4604      	mov	r4, r0
    73ea:	46a8      	mov	r8, r5
    73ec:	4681      	mov	r9, r0
    73ee:	687b      	ldr	r3, [r7, #4]
    73f0:	429c      	cmp	r4, r3
    73f2:	d2f5      	bcs.n	73e0 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    73f4:	6838      	ldr	r0, [r7, #0]
    73f6:	88b3      	ldrh	r3, [r6, #4]
    73f8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    73fc:	8902      	ldrh	r2, [r0, #8]
    73fe:	429a      	cmp	r2, r3
    7400:	d114      	bne.n	742c <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    7402:	f7fd fb95 	bl	4b30 <bt_conn_lookup_addr_le>
		if (!conn) {
    7406:	4683      	mov	fp, r0
    7408:	b9f8      	cbnz	r0, 744a <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    740a:	683b      	ldr	r3, [r7, #0]
    740c:	4543      	cmp	r3, r8
    740e:	d10d      	bne.n	742c <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    7410:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    7412:	a801      	add	r0, sp, #4
    7414:	8c1a      	ldrh	r2, [r3, #32]
    7416:	69d9      	ldr	r1, [r3, #28]
    7418:	f7fa fbf0 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    741c:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    741e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7422:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    7424:	b928      	cbnz	r0, 7432 <notify_cb+0x9a>
    7426:	b942      	cbnz	r2, 743a <notify_cb+0xa2>
		*stored = data;
    7428:	9801      	ldr	r0, [sp, #4]
    742a:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    742c:	3401      	adds	r4, #1
    742e:	3510      	adds	r5, #16
    7430:	e7dd      	b.n	73ee <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    7432:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    7436:	4281      	cmp	r1, r0
    7438:	d305      	bcc.n	7446 <notify_cb+0xae>
    743a:	429a      	cmp	r2, r3
    743c:	d2f6      	bcs.n	742c <notify_cb+0x94>
	if (*end < new_end) {
    743e:	429a      	cmp	r2, r3
    7440:	d2f4      	bcs.n	742c <notify_cb+0x94>
		*end = new_end;
    7442:	81eb      	strh	r3, [r5, #14]
    7444:	e7f2      	b.n	742c <notify_cb+0x94>
		*start = new_start;
    7446:	81a9      	strh	r1, [r5, #12]
    7448:	e7f9      	b.n	743e <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    744a:	7a43      	ldrb	r3, [r0, #9]
    744c:	2b03      	cmp	r3, #3
    744e:	d002      	beq.n	7456 <notify_cb+0xbe>
			bt_conn_unref(conn);
    7450:	f7fd fba4 	bl	4b9c <bt_conn_unref>
    7454:	e7ea      	b.n	742c <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    7456:	88b3      	ldrh	r3, [r6, #4]
    7458:	2b02      	cmp	r3, #2
    745a:	d10c      	bne.n	7476 <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    745c:	6971      	ldr	r1, [r6, #20]
    745e:	f7ff fd4b 	bl	6ef8 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    7462:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    7464:	4658      	mov	r0, fp
    7466:	f7fd fb99 	bl	4b9c <bt_conn_unref>
		if (err < 0) {
    746a:	f1ba 0f00 	cmp.w	sl, #0
    746e:	db09      	blt.n	7484 <notify_cb+0xec>
		data->err = 0;
    7470:	f8c6 9000 	str.w	r9, [r6]
    7474:	e7da      	b.n	742c <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    7476:	68b1      	ldr	r1, [r6, #8]
    7478:	8a33      	ldrh	r3, [r6, #16]
    747a:	68f2      	ldr	r2, [r6, #12]
    747c:	8a09      	ldrh	r1, [r1, #16]
    747e:	f7ff fcad 	bl	6ddc <gatt_notify>
    7482:	e7ee      	b.n	7462 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    7484:	2000      	movs	r0, #0
    7486:	e7a4      	b.n	73d2 <notify_cb+0x3a>
    7488:	000072a1 	.word	0x000072a1
    748c:	200005e0 	.word	0x200005e0

00007490 <bt_gatt_init>:
{
    7490:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    7492:	4806      	ldr	r0, [pc, #24]	; (74ac <bt_gatt_init+0x1c>)
    7494:	f7ff fc58 	bl	6d48 <gatt_register>
	gatt_register(&gatt_svc);
    7498:	4805      	ldr	r0, [pc, #20]	; (74b0 <bt_gatt_init+0x20>)
    749a:	f7ff fc55 	bl	6d48 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    749e:	4905      	ldr	r1, [pc, #20]	; (74b4 <bt_gatt_init+0x24>)
    74a0:	4805      	ldr	r0, [pc, #20]	; (74b8 <bt_gatt_init+0x28>)
}
    74a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    74a6:	f00e b853 	b.w	15550 <k_delayed_work_init>
    74aa:	bf00      	nop
    74ac:	20003d3c 	.word	0x20003d3c
    74b0:	20003d98 	.word	0x20003d98
    74b4:	0000753d 	.word	0x0000753d
    74b8:	200005b4 	.word	0x200005b4

000074bc <bt_gatt_foreach_attr>:
{
    74bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    74c0:	4699      	mov	r9, r3
    74c2:	4b12      	ldr	r3, [pc, #72]	; (750c <bt_gatt_foreach_attr+0x50>)
    74c4:	681c      	ldr	r4, [r3, #0]
    74c6:	4606      	mov	r6, r0
    74c8:	460f      	mov	r7, r1
    74ca:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    74cc:	b1dc      	cbz	r4, 7506 <bt_gatt_foreach_attr+0x4a>
    74ce:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    74d0:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    74d4:	b1bc      	cbz	r4, 7506 <bt_gatt_foreach_attr+0x4a>
    74d6:	2500      	movs	r5, #0
    74d8:	e006      	b.n	74e8 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    74da:	6820      	ldr	r0, [r4, #0]
    74dc:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    74e0:	8a03      	ldrh	r3, [r0, #16]
    74e2:	42b3      	cmp	r3, r6
    74e4:	d207      	bcs.n	74f6 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    74e6:	3501      	adds	r5, #1
    74e8:	6863      	ldr	r3, [r4, #4]
    74ea:	42ab      	cmp	r3, r5
    74ec:	d8f5      	bhi.n	74da <bt_gatt_foreach_attr+0x1e>
	return node->next;
    74ee:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    74f0:	b14c      	cbz	r4, 7506 <bt_gatt_foreach_attr+0x4a>
    74f2:	3c08      	subs	r4, #8
    74f4:	e7ee      	b.n	74d4 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    74f6:	42bb      	cmp	r3, r7
    74f8:	d8f5      	bhi.n	74e6 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    74fa:	4649      	mov	r1, r9
    74fc:	47c0      	blx	r8
    74fe:	2800      	cmp	r0, #0
    7500:	d1f1      	bne.n	74e6 <bt_gatt_foreach_attr+0x2a>
    7502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    750a:	bf00      	nop
    750c:	20000584 	.word	0x20000584

00007510 <bt_gatt_indicate.part.12>:
int bt_gatt_indicate(struct bt_conn *conn,
    7510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    7512:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    7516:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    7518:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    751a:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    751c:	2302      	movs	r3, #2
    751e:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    7522:	4a05      	ldr	r2, [pc, #20]	; (7538 <bt_gatt_indicate.part.12+0x28>)
    7524:	8a00      	ldrh	r0, [r0, #16]
    7526:	466b      	mov	r3, sp
    7528:	f64f 71ff 	movw	r1, #65535	; 0xffff
    752c:	f7ff ffc6 	bl	74bc <bt_gatt_foreach_attr>
}
    7530:	9800      	ldr	r0, [sp, #0]
    7532:	b007      	add	sp, #28
    7534:	f85d fb04 	ldr.w	pc, [sp], #4
    7538:	00007399 	.word	0x00007399

0000753c <sc_process>:
{
    753c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    753e:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    7542:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    7546:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    7548:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    754c:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    7550:	3828      	subs	r0, #40	; 0x28
    7552:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7556:	f3bf 8f5b 	dmb	ish
    755a:	e854 2f00 	ldrex	r2, [r4]
    755e:	f022 0201 	bic.w	r2, r2, #1
    7562:	e844 2100 	strex	r1, r2, [r4]
    7566:	2900      	cmp	r1, #0
    7568:	d1f7      	bne.n	755a <sc_process+0x1e>
    756a:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    756e:	2200      	movs	r2, #0
    7570:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    7574:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    7578:	4a0e      	ldr	r2, [pc, #56]	; (75b4 <sc_process+0x78>)
    757a:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    757e:	4a0e      	ldr	r2, [pc, #56]	; (75b8 <sc_process+0x7c>)
    7580:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    7584:	aa01      	add	r2, sp, #4
    7586:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    758a:	2204      	movs	r2, #4
    758c:	f823 2c08 	strh.w	r2, [r3, #-8]
    7590:	f7ff ffbe 	bl	7510 <bt_gatt_indicate.part.12>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    7594:	b958      	cbnz	r0, 75ae <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7596:	f3bf 8f5b 	dmb	ish
    759a:	e854 3f00 	ldrex	r3, [r4]
    759e:	f043 0302 	orr.w	r3, r3, #2
    75a2:	e844 3200 	strex	r2, r3, [r4]
    75a6:	2a00      	cmp	r2, #0
    75a8:	d1f7      	bne.n	759a <sc_process+0x5e>
    75aa:	f3bf 8f5b 	dmb	ish
}
    75ae:	b002      	add	sp, #8
    75b0:	bd10      	pop	{r4, pc}
    75b2:	bf00      	nop
    75b4:	20003d70 	.word	0x20003d70
    75b8:	00007085 	.word	0x00007085

000075bc <bt_gatt_attr_next>:
{
    75bc:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    75be:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    75c0:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    75c2:	3101      	adds	r1, #1
    75c4:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    75c6:	2200      	movs	r2, #0
    75c8:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    75cc:	4608      	mov	r0, r1
    75ce:	4a03      	ldr	r2, [pc, #12]	; (75dc <bt_gatt_attr_next+0x20>)
    75d0:	f7ff ff74 	bl	74bc <bt_gatt_foreach_attr>
}
    75d4:	9801      	ldr	r0, [sp, #4]
    75d6:	b003      	add	sp, #12
    75d8:	f85d fb04 	ldr.w	pc, [sp], #4
    75dc:	00006c99 	.word	0x00006c99

000075e0 <bt_gatt_attr_read_chrc>:
{
    75e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    75e4:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    75e8:	b08b      	sub	sp, #44	; 0x2c
    75ea:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    75ec:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    75ee:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    75f2:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    75f6:	f88d 3014 	strb.w	r3, [sp, #20]
{
    75fa:	4688      	mov	r8, r1
    75fc:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    75fe:	f7ff ffdd 	bl	75bc <bt_gatt_attr_next>
	if (!next) {
    7602:	4605      	mov	r5, r0
    7604:	bb40      	cbnz	r0, 7658 <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    7606:	4b1c      	ldr	r3, [pc, #112]	; (7678 <bt_gatt_attr_read_chrc+0x98>)
    7608:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    760c:	9302      	str	r3, [sp, #8]
    760e:	9201      	str	r2, [sp, #4]
    7610:	9300      	str	r3, [sp, #0]
    7612:	4a1a      	ldr	r2, [pc, #104]	; (767c <bt_gatt_attr_read_chrc+0x9c>)
    7614:	4b1a      	ldr	r3, [pc, #104]	; (7680 <bt_gatt_attr_read_chrc+0xa0>)
    7616:	491b      	ldr	r1, [pc, #108]	; (7684 <bt_gatt_attr_read_chrc+0xa4>)
    7618:	481b      	ldr	r0, [pc, #108]	; (7688 <bt_gatt_attr_read_chrc+0xa8>)
    761a:	f7f9 fcb7 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    761e:	f88d 5015 	strb.w	r5, [sp, #21]
    7622:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    7626:	f8d9 1000 	ldr.w	r1, [r9]
    762a:	780b      	ldrb	r3, [r1, #0]
    762c:	b9c3      	cbnz	r3, 7660 <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    762e:	884b      	ldrh	r3, [r1, #2]
    7630:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    7634:	2305      	movs	r3, #5
	if (offset > value_len) {
    7636:	42b3      	cmp	r3, r6
    7638:	d31a      	bcc.n	7670 <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    763a:	1b9b      	subs	r3, r3, r6
    763c:	42a3      	cmp	r3, r4
    763e:	bfa8      	it	ge
    7640:	4623      	movge	r3, r4
    7642:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    7644:	ab05      	add	r3, sp, #20
    7646:	4622      	mov	r2, r4
    7648:	1999      	adds	r1, r3, r6
    764a:	4638      	mov	r0, r7
    764c:	f7fa fad6 	bl	1bfc <memcpy>
}
    7650:	4620      	mov	r0, r4
    7652:	b00b      	add	sp, #44	; 0x2c
    7654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    7658:	8a03      	ldrh	r3, [r0, #16]
    765a:	f8ad 3015 	strh.w	r3, [sp, #21]
    765e:	e7e2      	b.n	7626 <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    7660:	2210      	movs	r2, #16
    7662:	3101      	adds	r1, #1
    7664:	f10d 0017 	add.w	r0, sp, #23
    7668:	f7fa fac8 	bl	1bfc <memcpy>
		value_len += 16;
    766c:	2313      	movs	r3, #19
    766e:	e7e2      	b.n	7636 <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7670:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    7674:	e7ec      	b.n	7650 <bt_gatt_attr_read_chrc+0x70>
    7676:	bf00      	nop
    7678:	00015af1 	.word	0x00015af1
    767c:	0001702e 	.word	0x0001702e
    7680:	000180aa 	.word	0x000180aa
    7684:	00016060 	.word	0x00016060
    7688:	000180fc 	.word	0x000180fc

0000768c <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    768c:	7a43      	ldrb	r3, [r0, #9]
    768e:	2b03      	cmp	r3, #3
{
    7690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7694:	4680      	mov	r8, r0
    7696:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    7698:	d144      	bne.n	7724 <bt_gatt_unsubscribe+0x98>
    769a:	4b2b      	ldr	r3, [pc, #172]	; (7748 <bt_gatt_unsubscribe+0xbc>)
    769c:	681c      	ldr	r4, [r3, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    769e:	b1cc      	cbz	r4, 76d4 <bt_gatt_unsubscribe+0x48>
    76a0:	f1b4 0528 	subs.w	r5, r4, #40	; 0x28
    76a4:	d144      	bne.n	7730 <bt_gatt_unsubscribe+0xa4>
    76a6:	462c      	mov	r4, r5
    76a8:	f04f 0b00 	mov.w	fp, #0
		/* Remove subscription */
		if (params == tmp) {
			found = true;
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    76ac:	f8df a098 	ldr.w	sl, [pc, #152]	; 7748 <bt_gatt_unsubscribe+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    76b0:	465a      	mov	r2, fp
    76b2:	465f      	mov	r7, fp
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    76b4:	f106 0928 	add.w	r9, r6, #40	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    76b8:	b975      	cbnz	r5, 76d8 <bt_gatt_unsubscribe+0x4c>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    76ba:	2a00      	cmp	r2, #0
    76bc:	d035      	beq.n	772a <bt_gatt_unsubscribe+0x9e>
		return -EINVAL;
	}

	if (has_subscription) {
    76be:	b33f      	cbz	r7, 7710 <bt_gatt_unsubscribe+0x84>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    76c0:	69f4      	ldr	r4, [r6, #28]
    76c2:	462b      	mov	r3, r5
    76c4:	462a      	mov	r2, r5
    76c6:	4631      	mov	r1, r6
    76c8:	4640      	mov	r0, r8
    76ca:	47a0      	blx	r4
		return 0;
    76cc:	4628      	mov	r0, r5

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    76ce:	b003      	add	sp, #12
    76d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76d4:	4625      	mov	r5, r4
    76d6:	e7e7      	b.n	76a8 <bt_gatt_unsubscribe+0x1c>
		if (params == tmp) {
    76d8:	42b5      	cmp	r5, r6
    76da:	d108      	bne.n	76ee <bt_gatt_unsubscribe+0x62>
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    76dc:	464a      	mov	r2, r9
    76de:	4659      	mov	r1, fp
    76e0:	4650      	mov	r0, sl
    76e2:	f7ff fac8 	bl	6c76 <sys_slist_remove>
			found = true;
    76e6:	2201      	movs	r2, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    76e8:	bb3c      	cbnz	r4, 773a <bt_gatt_unsubscribe+0xae>
    76ea:	4623      	mov	r3, r4
    76ec:	e028      	b.n	7740 <bt_gatt_unsubscribe+0xb4>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    76ee:	f105 0114 	add.w	r1, r5, #20
    76f2:	4640      	mov	r0, r8
    76f4:	9201      	str	r2, [sp, #4]
    76f6:	f7fd f9bb 	bl	4a70 <bt_conn_addr_le_cmp>
			prev = &tmp->node;
    76fa:	f105 0b28 	add.w	fp, r5, #40	; 0x28
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    76fe:	9a01      	ldr	r2, [sp, #4]
    7700:	2800      	cmp	r0, #0
    7702:	d1f1      	bne.n	76e8 <bt_gatt_unsubscribe+0x5c>
    7704:	8c29      	ldrh	r1, [r5, #32]
    7706:	8c33      	ldrh	r3, [r6, #32]
			has_subscription = true;
    7708:	4299      	cmp	r1, r3
    770a:	bf08      	it	eq
    770c:	2701      	moveq	r7, #1
    770e:	e7eb      	b.n	76e8 <bt_gatt_unsubscribe+0x5c>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    7710:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	params->value = 0x0000;
    7712:	84b7      	strh	r7, [r6, #36]	; 0x24
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    7714:	4633      	mov	r3, r6
    7716:	463a      	mov	r2, r7
    7718:	4640      	mov	r0, r8
}
    771a:	b003      	add	sp, #12
    771c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    7720:	f7ff bbc4 	b.w	6eac <gatt_write_ccc.constprop.19>
		return -ENOTCONN;
    7724:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7728:	e7d1      	b.n	76ce <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    772a:	f06f 0015 	mvn.w	r0, #21
    772e:	e7ce      	b.n	76ce <bt_gatt_unsubscribe+0x42>
    7730:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7732:	2c00      	cmp	r4, #0
    7734:	d0b8      	beq.n	76a8 <bt_gatt_unsubscribe+0x1c>
    7736:	3c28      	subs	r4, #40	; 0x28
    7738:	e7b6      	b.n	76a8 <bt_gatt_unsubscribe+0x1c>
    773a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    773c:	b103      	cbz	r3, 7740 <bt_gatt_unsubscribe+0xb4>
    773e:	3b28      	subs	r3, #40	; 0x28
    7740:	4625      	mov	r5, r4
    7742:	461c      	mov	r4, r3
    7744:	e7b8      	b.n	76b8 <bt_gatt_unsubscribe+0x2c>
    7746:	bf00      	nop
    7748:	200005f0 	.word	0x200005f0

0000774c <bt_gatt_notification>:
{
    774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7750:	4699      	mov	r9, r3
    7752:	4b17      	ldr	r3, [pc, #92]	; (77b0 <bt_gatt_notification+0x64>)
    7754:	681b      	ldr	r3, [r3, #0]
    7756:	4605      	mov	r5, r0
    7758:	460e      	mov	r6, r1
    775a:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    775c:	b333      	cbz	r3, 77ac <bt_gatt_notification+0x60>
    775e:	f1b3 0a28 	subs.w	sl, r3, #40	; 0x28
    7762:	d101      	bne.n	7768 <bt_gatt_notification+0x1c>
    7764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7768:	681c      	ldr	r4, [r3, #0]
    776a:	b104      	cbz	r4, 776e <bt_gatt_notification+0x22>
    776c:	3c28      	subs	r4, #40	; 0x28
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    776e:	f10a 0114 	add.w	r1, sl, #20
    7772:	4628      	mov	r0, r5
    7774:	f7fd f97c 	bl	4a70 <bt_conn_addr_le_cmp>
    7778:	b978      	cbnz	r0, 779a <bt_gatt_notification+0x4e>
    777a:	f8ba 3020 	ldrh.w	r3, [sl, #32]
    777e:	42b3      	cmp	r3, r6
    7780:	d10b      	bne.n	779a <bt_gatt_notification+0x4e>
		if (params->notify(conn, params, data, length) ==
    7782:	f8da 701c 	ldr.w	r7, [sl, #28]
    7786:	464b      	mov	r3, r9
    7788:	4642      	mov	r2, r8
    778a:	4651      	mov	r1, sl
    778c:	4628      	mov	r0, r5
    778e:	47b8      	blx	r7
    7790:	b918      	cbnz	r0, 779a <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
    7792:	4651      	mov	r1, sl
    7794:	4628      	mov	r0, r5
    7796:	f7ff ff79 	bl	768c <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    779a:	b90c      	cbnz	r4, 77a0 <bt_gatt_notification+0x54>
    779c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    77a2:	b103      	cbz	r3, 77a6 <bt_gatt_notification+0x5a>
    77a4:	3b28      	subs	r3, #40	; 0x28
    77a6:	46a2      	mov	sl, r4
    77a8:	461c      	mov	r4, r3
    77aa:	e7e0      	b.n	776e <bt_gatt_notification+0x22>
    77ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77b0:	200005f0 	.word	0x200005f0

000077b4 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    77b4:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    77b6:	4a0e      	ldr	r2, [pc, #56]	; (77f0 <bt_gatt_connected+0x3c>)
    77b8:	4603      	mov	r3, r0
{
    77ba:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    77bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    77c0:	2001      	movs	r0, #1
    77c2:	f7ff fe7b 	bl	74bc <bt_gatt_foreach_attr>
    77c6:	4b0b      	ldr	r3, [pc, #44]	; (77f4 <bt_gatt_connected+0x40>)
    77c8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    77ca:	b10c      	cbz	r4, 77d0 <bt_gatt_connected+0x1c>
    77cc:	3c28      	subs	r4, #40	; 0x28
    77ce:	b904      	cbnz	r4, 77d2 <bt_gatt_connected+0x1e>
    77d0:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    77d2:	f104 0114 	add.w	r1, r4, #20
    77d6:	4628      	mov	r0, r5
    77d8:	f7fd f94a 	bl	4a70 <bt_conn_addr_le_cmp>
    77dc:	b928      	cbnz	r0, 77ea <bt_gatt_connected+0x36>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    77de:	4623      	mov	r3, r4
    77e0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    77e2:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    77e4:	4628      	mov	r0, r5
    77e6:	f7ff fb61 	bl	6eac <gatt_write_ccc.constprop.19>
    77ea:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    77ec:	e7ed      	b.n	77ca <bt_gatt_connected+0x16>
    77ee:	bf00      	nop
    77f0:	00007015 	.word	0x00007015
    77f4:	200005f0 	.word	0x200005f0

000077f8 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    77f8:	4603      	mov	r3, r0
{
    77fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    77fe:	4a21      	ldr	r2, [pc, #132]	; (7884 <bt_gatt_disconnected+0x8c>)
{
    7800:	4607      	mov	r7, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7802:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7806:	2001      	movs	r0, #1
    7808:	f7ff fe58 	bl	74bc <bt_gatt_foreach_attr>
    780c:	4b1e      	ldr	r3, [pc, #120]	; (7888 <bt_gatt_disconnected+0x90>)
    780e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7810:	b3b3      	cbz	r3, 7880 <bt_gatt_disconnected+0x88>
    7812:	f1b3 0628 	subs.w	r6, r3, #40	; 0x28
    7816:	d11b      	bne.n	7850 <bt_gatt_disconnected+0x58>
    7818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    781c:	4640      	mov	r0, r8
    781e:	f7fc fda1 	bl	4364 <bt_addr_le_is_bonded>
    7822:	b118      	cbz	r0, 782c <bt_gatt_disconnected+0x34>
    7824:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    7828:	07db      	lsls	r3, r3, #31
    782a:	d509      	bpl.n	7840 <bt_gatt_disconnected+0x48>
			params->value = 0;
    782c:	f8a6 9024 	strh.w	r9, [r6, #36]	; 0x24
			gatt_subscription_remove(conn, prev, params);
    7830:	4632      	mov	r2, r6
    7832:	4629      	mov	r1, r5
    7834:	4638      	mov	r0, r7
    7836:	f7ff fa53 	bl	6ce0 <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    783a:	b9dc      	cbnz	r4, 7874 <bt_gatt_disconnected+0x7c>
    783c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    7840:	7d33      	ldrb	r3, [r6, #20]
    7842:	b1a3      	cbz	r3, 786e <bt_gatt_disconnected+0x76>
    7844:	2207      	movs	r2, #7
    7846:	4641      	mov	r1, r8
    7848:	4650      	mov	r0, sl
    784a:	f7fa f9d7 	bl	1bfc <memcpy>
    784e:	e00e      	b.n	786e <bt_gatt_disconnected+0x76>
    7850:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7852:	b104      	cbz	r4, 7856 <bt_gatt_disconnected+0x5e>
    7854:	3c28      	subs	r4, #40	; 0x28
    7856:	2500      	movs	r5, #0
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    7858:	f107 0844 	add.w	r8, r7, #68	; 0x44
			params->value = 0;
    785c:	46a9      	mov	r9, r5
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    785e:	f106 0a14 	add.w	sl, r6, #20
    7862:	4651      	mov	r1, sl
    7864:	4638      	mov	r0, r7
    7866:	f7fd f903 	bl	4a70 <bt_conn_addr_le_cmp>
    786a:	2800      	cmp	r0, #0
    786c:	d0d6      	beq.n	781c <bt_gatt_disconnected+0x24>
			prev = &params->node;
    786e:	f106 0528 	add.w	r5, r6, #40	; 0x28
    7872:	e7e2      	b.n	783a <bt_gatt_disconnected+0x42>
    7874:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7876:	b103      	cbz	r3, 787a <bt_gatt_disconnected+0x82>
    7878:	3b28      	subs	r3, #40	; 0x28
    787a:	4626      	mov	r6, r4
    787c:	461c      	mov	r4, r3
    787e:	e7ee      	b.n	785e <bt_gatt_disconnected+0x66>
    7880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7884:	000070fd 	.word	0x000070fd
    7888:	200005f0 	.word	0x200005f0

0000788c <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    788c:	b570      	push	{r4, r5, r6, lr}
    788e:	b086      	sub	sp, #24
    7890:	4605      	mov	r5, r0
    7892:	460e      	mov	r6, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    7894:	f00d fb66 	bl	14f64 <_impl_k_current_get>
	int i;
	static struct bt_l2cap_chan_ops ops = {
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    7898:	4c10      	ldr	r4, [pc, #64]	; (78dc <bt_smp_accept+0x50>)
    789a:	882b      	ldrh	r3, [r5, #0]
    789c:	9303      	str	r3, [sp, #12]
    789e:	9001      	str	r0, [sp, #4]
    78a0:	4b0f      	ldr	r3, [pc, #60]	; (78e0 <bt_smp_accept+0x54>)
    78a2:	9404      	str	r4, [sp, #16]
    78a4:	9502      	str	r5, [sp, #8]
    78a6:	9400      	str	r4, [sp, #0]
    78a8:	4a0e      	ldr	r2, [pc, #56]	; (78e4 <bt_smp_accept+0x58>)
    78aa:	490f      	ldr	r1, [pc, #60]	; (78e8 <bt_smp_accept+0x5c>)
    78ac:	480f      	ldr	r0, [pc, #60]	; (78ec <bt_smp_accept+0x60>)
    78ae:	f7f9 fb6d 	bl	f8c <printk>

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    78b2:	4b0f      	ldr	r3, [pc, #60]	; (78f0 <bt_smp_accept+0x64>)
    78b4:	6818      	ldr	r0, [r3, #0]
    78b6:	b920      	cbnz	r0, 78c2 <bt_smp_accept+0x36>
			continue;
		}

		smp->chan.ops = &ops;
    78b8:	4a0e      	ldr	r2, [pc, #56]	; (78f4 <bt_smp_accept+0x68>)
    78ba:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    78bc:	6033      	str	r3, [r6, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    78be:	b006      	add	sp, #24
    78c0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    78c2:	9402      	str	r4, [sp, #8]
    78c4:	e88d 0030 	stmia.w	sp, {r4, r5}
    78c8:	4b05      	ldr	r3, [pc, #20]	; (78e0 <bt_smp_accept+0x54>)
    78ca:	4a0b      	ldr	r2, [pc, #44]	; (78f8 <bt_smp_accept+0x6c>)
    78cc:	4906      	ldr	r1, [pc, #24]	; (78e8 <bt_smp_accept+0x5c>)
    78ce:	480b      	ldr	r0, [pc, #44]	; (78fc <bt_smp_accept+0x70>)
    78d0:	f7f9 fb5c 	bl	f8c <printk>
	return -ENOMEM;
    78d4:	f06f 000b 	mvn.w	r0, #11
    78d8:	e7f1      	b.n	78be <bt_smp_accept+0x32>
    78da:	bf00      	nop
    78dc:	00015af1 	.word	0x00015af1
    78e0:	0001822e 	.word	0x0001822e
    78e4:	00016059 	.word	0x00016059
    78e8:	00016060 	.word	0x00016060
    78ec:	0001823c 	.word	0x0001823c
    78f0:	200005f8 	.word	0x200005f8
    78f4:	20003db0 	.word	0x20003db0
    78f8:	00016fae 	.word	0x00016fae
    78fc:	00018263 	.word	0x00018263

00007900 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    7900:	2100      	movs	r1, #0
{
    7902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    7906:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    7908:	4608      	mov	r0, r1
    790a:	f7fd fed2 	bl	56b2 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    790e:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    7912:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7914:	2101      	movs	r1, #1
    7916:	4630      	mov	r0, r6
    7918:	f00c face 	bl	13eb8 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    791c:	2505      	movs	r5, #5
    791e:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7920:	2101      	movs	r1, #1
    7922:	4630      	mov	r0, r6
    7924:	f00c fac8 	bl	13eb8 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    7928:	7005      	strb	r5, [r0, #0]
    792a:	4622      	mov	r2, r4
    792c:	4638      	mov	r0, r7
    792e:	2300      	movs	r3, #0
    7930:	2106      	movs	r1, #6
}
    7932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7936:	f7fd bebf 	b.w	56b8 <bt_l2cap_send_cb>

0000793a <bt_smp_sign_verify>:
    793a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    793e:	4770      	bx	lr

00007940 <bt_smp_sign>:
}
    7940:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7944:	4770      	bx	lr
	...

00007948 <bt_smp_init>:

int bt_smp_init(void)
{
    7948:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    794a:	4802      	ldr	r0, [pc, #8]	; (7954 <bt_smp_init+0xc>)
    794c:	f7fd fdf6 	bl	553c <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    7950:	2000      	movs	r0, #0
    7952:	bd08      	pop	{r3, pc}
    7954:	20003da4 	.word	0x20003da4

00007958 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    7958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    795a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    795c:	1dc3      	adds	r3, r0, #7
{
    795e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7960:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7964:	1e50      	subs	r0, r2, #1
{
    7966:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7968:	b280      	uxth	r0, r0
{
    796a:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    796c:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    796e:	2100      	movs	r1, #0
    7970:	2204      	movs	r2, #4
    7972:	fb06 5000 	mla	r0, r6, r0, r5
    7976:	f7fa f96d 	bl	1c54 <memset>
    797a:	3c02      	subs	r4, #2
    797c:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    797e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    7982:	42bc      	cmp	r4, r7
    7984:	d101      	bne.n	798a <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    7986:	b003      	add	sp, #12
    7988:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    798a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    798e:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7990:	2204      	movs	r2, #4
    7992:	1b80      	subs	r0, r0, r6
    7994:	eb0d 0102 	add.w	r1, sp, r2
    7998:	4428      	add	r0, r5
    799a:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    799c:	9301      	str	r3, [sp, #4]
    799e:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    79a0:	f7fa f92c 	bl	1bfc <memcpy>
    79a4:	e7ed      	b.n	7982 <mem_init+0x2a>

000079a6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    79a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    79a8:	6805      	ldr	r5, [r0, #0]
{
    79aa:	4606      	mov	r6, r0
	if (*mem_head) {
    79ac:	b195      	cbz	r5, 79d4 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    79ae:	1deb      	adds	r3, r5, #7
    79b0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    79b4:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    79b6:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    79b8:	4629      	mov	r1, r5
    79ba:	eb0d 0002 	add.w	r0, sp, r2
    79be:	f7fa f91d 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    79c2:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    79c4:	3c01      	subs	r4, #1
    79c6:	b2a4      	uxth	r4, r4
		if (head) {
    79c8:	b11b      	cbz	r3, 79d2 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    79ca:	1dda      	adds	r2, r3, #7
    79cc:	f022 0203 	bic.w	r2, r2, #3
    79d0:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    79d2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    79d4:	4628      	mov	r0, r5
    79d6:	b002      	add	sp, #8
    79d8:	bd70      	pop	{r4, r5, r6, pc}

000079da <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    79da:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    79dc:	680c      	ldr	r4, [r1, #0]
{
    79de:	4606      	mov	r6, r0
    79e0:	460d      	mov	r5, r1
	if (*mem_head) {
    79e2:	b11c      	cbz	r4, 79ec <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    79e4:	1de3      	adds	r3, r4, #7
    79e6:	f023 0303 	bic.w	r3, r3, #3
    79ea:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    79ec:	2204      	movs	r2, #4
    79ee:	4629      	mov	r1, r5
    79f0:	4630      	mov	r0, r6
    79f2:	f7fa f903 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    79f6:	1df2      	adds	r2, r6, #7
    79f8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    79fc:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    79fe:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    7a00:	602e      	str	r6, [r5, #0]
    7a02:	bd70      	pop	{r4, r5, r6, pc}

00007a04 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    7a04:	b118      	cbz	r0, 7a0e <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    7a06:	3007      	adds	r0, #7
    7a08:	f020 0003 	bic.w	r0, r0, #3
    7a0c:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    7a0e:	4770      	bx	lr

00007a10 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    7a10:	fb02 0001 	mla	r0, r2, r1, r0
    7a14:	4770      	bx	lr

00007a16 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    7a16:	1a40      	subs	r0, r0, r1
    7a18:	b280      	uxth	r0, r0
}
    7a1a:	fbb0 f0f2 	udiv	r0, r0, r2
    7a1e:	4770      	bx	lr

00007a20 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    7a20:	b510      	push	{r4, lr}
	src += len;
    7a22:	4411      	add	r1, r2
    7a24:	3801      	subs	r0, #1
	while (len--) {
    7a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7a2a:	3a01      	subs	r2, #1
    7a2c:	b292      	uxth	r2, r2
    7a2e:	429a      	cmp	r2, r3
    7a30:	d100      	bne.n	7a34 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    7a32:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    7a34:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    7a38:	f800 4f01 	strb.w	r4, [r0, #1]!
    7a3c:	e7f5      	b.n	7a2a <mem_rcopy+0xa>

00007a3e <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    7a3e:	4401      	add	r1, r0
	while (len--) {
    7a40:	4288      	cmp	r0, r1
    7a42:	d101      	bne.n	7a48 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7a44:	2000      	movs	r0, #0
    7a46:	4770      	bx	lr
		if (*src++) {
    7a48:	f810 3b01 	ldrb.w	r3, [r0], #1
    7a4c:	2b00      	cmp	r3, #0
    7a4e:	d0f7      	beq.n	7a40 <mem_nz+0x2>
			return 1;
    7a50:	2001      	movs	r0, #1
}
    7a52:	4770      	bx	lr

00007a54 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7a54:	6010      	str	r0, [r2, #0]
    7a56:	6008      	str	r0, [r1, #0]

	return link;
}
    7a58:	4770      	bx	lr

00007a5a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    7a5a:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    7a5c:	6814      	ldr	r4, [r2, #0]
    7a5e:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    7a60:	6814      	ldr	r4, [r2, #0]
    7a62:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7a64:	6010      	str	r0, [r2, #0]

	return link;
}
    7a66:	bd10      	pop	{r4, pc}

00007a68 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    7a68:	4288      	cmp	r0, r1
    7a6a:	d003      	beq.n	7a74 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    7a6c:	b11a      	cbz	r2, 7a76 <memq_peek+0xe>
		*mem = head->mem;
    7a6e:	6843      	ldr	r3, [r0, #4]
    7a70:	6013      	str	r3, [r2, #0]
    7a72:	4770      	bx	lr
		return NULL;
    7a74:	2000      	movs	r0, #0
	}

	return head;
}
    7a76:	4770      	bx	lr

00007a78 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    7a78:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    7a7a:	4283      	cmp	r3, r0
    7a7c:	d009      	beq.n	7a92 <memq_dequeue+0x1a>
	if (mem) {
    7a7e:	b122      	cbz	r2, 7a8a <memq_dequeue+0x12>
		*mem = head->mem;
    7a80:	6858      	ldr	r0, [r3, #4]
    7a82:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7a84:	681a      	ldr	r2, [r3, #0]
    7a86:	600a      	str	r2, [r1, #0]

	return link;
    7a88:	e001      	b.n	7a8e <memq_dequeue+0x16>
	if (!link) {
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	d1fa      	bne.n	7a84 <memq_dequeue+0xc>
}
    7a8e:	4618      	mov	r0, r3
    7a90:	4770      	bx	lr
		return NULL;
    7a92:	2300      	movs	r3, #0
    7a94:	e7fb      	b.n	7a8e <memq_dequeue+0x16>
	...

00007a98 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    7a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    7a9c:	4f11      	ldr	r7, [pc, #68]	; (7ae4 <mayfly_init+0x4c>)
    7a9e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 7ae8 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    7aa2:	2604      	movs	r6, #4
	while (callee_id--) {
    7aa4:	3e01      	subs	r6, #1
    7aa6:	b2f6      	uxtb	r6, r6
    7aa8:	2eff      	cmp	r6, #255	; 0xff
    7aaa:	d019      	beq.n	7ae0 <mayfly_init+0x48>
    7aac:	b233      	sxth	r3, r6
    7aae:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7ab2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7ab6:	011d      	lsls	r5, r3, #4
    7ab8:	2404      	movs	r4, #4
    7aba:	f04f 0a0c 	mov.w	sl, #12
    7abe:	e00a      	b.n	7ad6 <mayfly_init+0x3e>
    7ac0:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    7ac4:	1d0a      	adds	r2, r1, #4
    7ac6:	eb04 0008 	add.w	r0, r4, r8
    7aca:	443a      	add	r2, r7
    7acc:	4439      	add	r1, r7
    7ace:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    7ad2:	f7ff ffbf 	bl	7a54 <memq_init>
		while (caller_id--) {
    7ad6:	3c01      	subs	r4, #1
    7ad8:	b2e4      	uxtb	r4, r4
    7ada:	2cff      	cmp	r4, #255	; 0xff
    7adc:	d1f0      	bne.n	7ac0 <mayfly_init+0x28>
    7ade:	e7e1      	b.n	7aa4 <mayfly_init+0xc>
    7ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ae4:	2000070c 	.word	0x2000070c
    7ae8:	2000068c 	.word	0x2000068c

00007aec <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    7aec:	b4f0      	push	{r4, r5, r6, r7}
    7aee:	4b12      	ldr	r3, [pc, #72]	; (7b38 <mayfly_enable+0x4c>)
    7af0:	4605      	mov	r5, r0
    7af2:	460f      	mov	r7, r1
    7af4:	260c      	movs	r6, #12
    7af6:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    7af8:	b172      	cbz	r2, 7b18 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    7afa:	4361      	muls	r1, r4
    7afc:	fb06 1400 	mla	r4, r6, r0, r1
    7b00:	4423      	add	r3, r4
    7b02:	7a59      	ldrb	r1, [r3, #9]
    7b04:	7a18      	ldrb	r0, [r3, #8]
    7b06:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    7b08:	bf04      	itt	eq
    7b0a:	3101      	addeq	r1, #1
    7b0c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    7b0e:	4628      	mov	r0, r5
    7b10:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    7b12:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    7b14:	f00b bfca 	b.w	13aac <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    7b18:	434c      	muls	r4, r1
    7b1a:	fb06 4400 	mla	r4, r6, r0, r4
    7b1e:	4423      	add	r3, r4
    7b20:	7a9c      	ldrb	r4, [r3, #10]
    7b22:	7ada      	ldrb	r2, [r3, #11]
    7b24:	42a2      	cmp	r2, r4
    7b26:	d104      	bne.n	7b32 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    7b28:	3201      	adds	r2, #1
    7b2a:	729a      	strb	r2, [r3, #10]
}
    7b2c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    7b2e:	f00c b81d 	b.w	13b6c <mayfly_pend>
}
    7b32:	bcf0      	pop	{r4, r5, r6, r7}
    7b34:	4770      	bx	lr
    7b36:	bf00      	nop
    7b38:	2000070c 	.word	0x2000070c

00007b3c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    7b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b3e:	4605      	mov	r5, r0
    7b40:	460e      	mov	r6, r1
    7b42:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7b44:	b18a      	cbz	r2, 7b6a <mayfly_enqueue+0x2e>
    7b46:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    7b48:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    7b4a:	7820      	ldrb	r0, [r4, #0]
    7b4c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    7b4e:	f010 0703 	ands.w	r7, r0, #3
    7b52:	d029      	beq.n	7ba8 <mayfly_enqueue+0x6c>
		if (chain) {
    7b54:	b303      	cbz	r3, 7b98 <mayfly_enqueue+0x5c>
			if (state != 1) {
    7b56:	2f01      	cmp	r7, #1
    7b58:	d039      	beq.n	7bce <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    7b5a:	3201      	adds	r2, #1
    7b5c:	b2d2      	uxtb	r2, r2
    7b5e:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    7b60:	4631      	mov	r1, r6
    7b62:	4628      	mov	r0, r5
    7b64:	f00c f802 	bl	13b6c <mayfly_pend>
    7b68:	e01c      	b.n	7ba4 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7b6a:	f00b ffed 	bl	13b48 <mayfly_prio_is_equal>
    7b6e:	2800      	cmp	r0, #0
    7b70:	d0e9      	beq.n	7b46 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    7b72:	4631      	mov	r1, r6
    7b74:	4628      	mov	r0, r5
    7b76:	f00b ffc1 	bl	13afc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7b7a:	2800      	cmp	r0, #0
    7b7c:	d0e3      	beq.n	7b46 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    7b7e:	2330      	movs	r3, #48	; 0x30
    7b80:	220c      	movs	r2, #12
    7b82:	4373      	muls	r3, r6
    7b84:	fb02 3305 	mla	r3, r2, r5, r3
    7b88:	4a12      	ldr	r2, [pc, #72]	; (7bd4 <mayfly_enqueue+0x98>)
    7b8a:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    7b8c:	7a93      	ldrb	r3, [r2, #10]
    7b8e:	7ad2      	ldrb	r2, [r2, #11]
    7b90:	1a9b      	subs	r3, r3, r2
    7b92:	bf18      	it	ne
    7b94:	2301      	movne	r3, #1
    7b96:	e7d7      	b.n	7b48 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    7b98:	3202      	adds	r2, #2
    7b9a:	b2d2      	uxtb	r2, r2
    7b9c:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    7b9e:	68e3      	ldr	r3, [r4, #12]
    7ba0:	68a0      	ldr	r0, [r4, #8]
    7ba2:	4798      	blx	r3
		return 0;
    7ba4:	2000      	movs	r0, #0
    7ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    7ba8:	2b00      	cmp	r3, #0
    7baa:	d0f8      	beq.n	7b9e <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    7bac:	3201      	adds	r2, #1
    7bae:	b2d2      	uxtb	r2, r2
    7bb0:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7bb2:	2304      	movs	r3, #4
    7bb4:	2230      	movs	r2, #48	; 0x30
    7bb6:	fb12 3206 	smlabb	r2, r2, r6, r3
    7bba:	230c      	movs	r3, #12
    7bbc:	fb13 2305 	smlabb	r3, r3, r5, r2
    7bc0:	4a04      	ldr	r2, [pc, #16]	; (7bd4 <mayfly_enqueue+0x98>)
    7bc2:	6860      	ldr	r0, [r4, #4]
    7bc4:	441a      	add	r2, r3
    7bc6:	4621      	mov	r1, r4
    7bc8:	f7ff ff47 	bl	7a5a <memq_enqueue>
    7bcc:	e7c8      	b.n	7b60 <mayfly_enqueue+0x24>
			return 1;
    7bce:	4638      	mov	r0, r7

	return 0;
}
    7bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bd2:	bf00      	nop
    7bd4:	2000070c 	.word	0x2000070c

00007bd8 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    7bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bdc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7be0:	b089      	sub	sp, #36	; 0x24
    7be2:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    7be4:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    7be8:	4e43      	ldr	r6, [pc, #268]	; (7cf8 <mayfly_run+0x120>)
    7bea:	9304      	str	r3, [sp, #16]
{
    7bec:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    7bee:	2404      	movs	r4, #4
	u8_t disable = 0;
    7bf0:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    7bf4:	3c01      	subs	r4, #1
    7bf6:	b2e4      	uxtb	r4, r4
    7bf8:	2cff      	cmp	r4, #255	; 0xff
    7bfa:	d10b      	bne.n	7c14 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    7bfc:	9b01      	ldr	r3, [sp, #4]
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d076      	beq.n	7cf0 <mayfly_run+0x118>
    7c02:	f1b8 0f00 	cmp.w	r8, #0
    7c06:	d173      	bne.n	7cf0 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    7c08:	4642      	mov	r2, r8
    7c0a:	4629      	mov	r1, r5
    7c0c:	4628      	mov	r0, r5
    7c0e:	f00b ff4d 	bl	13aac <mayfly_enable_cb>
    7c12:	e06d      	b.n	7cf0 <mayfly_run+0x118>
		struct mayfly *m = 0;
    7c14:	f10d 0b20 	add.w	fp, sp, #32
    7c18:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    7c1a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    7c1c:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    7c20:	f04f 0930 	mov.w	r9, #48	; 0x30
    7c24:	fb07 f304 	mul.w	r3, r7, r4
    7c28:	fb09 3005 	mla	r0, r9, r5, r3
    7c2c:	1831      	adds	r1, r6, r0
    7c2e:	465a      	mov	r2, fp
    7c30:	6849      	ldr	r1, [r1, #4]
    7c32:	5830      	ldr	r0, [r6, r0]
    7c34:	9302      	str	r3, [sp, #8]
    7c36:	f7ff ff17 	bl	7a68 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7c3a:	9b04      	ldr	r3, [sp, #16]
    7c3c:	fb17 3704 	smlabb	r7, r7, r4, r3
    7c40:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    7c42:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7c44:	9303      	str	r3, [sp, #12]
		while (link) {
    7c46:	f1ba 0f00 	cmp.w	sl, #0
    7c4a:	d119      	bne.n	7c80 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7c4c:	2230      	movs	r2, #48	; 0x30
    7c4e:	230c      	movs	r3, #12
    7c50:	436a      	muls	r2, r5
    7c52:	fb03 2204 	mla	r2, r3, r4, r2
    7c56:	4432      	add	r2, r6
    7c58:	7a91      	ldrb	r1, [r2, #10]
    7c5a:	7ad0      	ldrb	r0, [r2, #11]
    7c5c:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    7c5e:	bf1e      	ittt	ne
    7c60:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    7c62:	2201      	movne	r2, #1
    7c64:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    7c66:	2230      	movs	r2, #48	; 0x30
    7c68:	436a      	muls	r2, r5
    7c6a:	fb03 2304 	mla	r3, r3, r4, r2
    7c6e:	4433      	add	r3, r6
    7c70:	7a1a      	ldrb	r2, [r3, #8]
    7c72:	7a59      	ldrb	r1, [r3, #9]
    7c74:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    7c76:	bf1c      	itt	ne
    7c78:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    7c7a:	f04f 0801 	movne.w	r8, #1
    7c7e:	e7b9      	b.n	7bf4 <mayfly_run+0x1c>
			req = m->_req;
    7c80:	9b07      	ldr	r3, [sp, #28]
    7c82:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7c84:	785a      	ldrb	r2, [r3, #1]
    7c86:	1abf      	subs	r7, r7, r2
    7c88:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7c8c:	2f01      	cmp	r7, #1
    7c8e:	d104      	bne.n	7c9a <mayfly_run+0xc2>
				m->_ack--;
    7c90:	3a01      	subs	r2, #1
    7c92:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    7c94:	6898      	ldr	r0, [r3, #8]
    7c96:	68da      	ldr	r2, [r3, #12]
    7c98:	4790      	blx	r2
			req = m->_req;
    7c9a:	9a07      	ldr	r2, [sp, #28]
    7c9c:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    7c9e:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    7ca0:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    7ca2:	1a9a      	subs	r2, r3, r2
    7ca4:	f002 0203 	and.w	r2, r2, #3
    7ca8:	2a01      	cmp	r2, #1
    7caa:	9305      	str	r3, [sp, #20]
    7cac:	d00d      	beq.n	7cca <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7cae:	9b02      	ldr	r3, [sp, #8]
    7cb0:	9903      	ldr	r1, [sp, #12]
    7cb2:	fb09 3005 	mla	r0, r9, r5, r3
    7cb6:	4430      	add	r0, r6
    7cb8:	2200      	movs	r2, #0
    7cba:	6840      	ldr	r0, [r0, #4]
    7cbc:	f7ff fedc 	bl	7a78 <memq_dequeue>
				m->_link = link;
    7cc0:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    7cc2:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    7cc4:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    7cc8:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    7cca:	9b02      	ldr	r3, [sp, #8]
    7ccc:	fb09 3305 	mla	r3, r9, r5, r3
    7cd0:	18f1      	adds	r1, r6, r3
    7cd2:	465a      	mov	r2, fp
    7cd4:	6849      	ldr	r1, [r1, #4]
    7cd6:	58f0      	ldr	r0, [r6, r3]
    7cd8:	f7ff fec6 	bl	7a68 <memq_peek>
			if (state == 1) {
    7cdc:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    7cde:	4682      	mov	sl, r0
			if (state == 1) {
    7ce0:	d1b1      	bne.n	7c46 <mayfly_run+0x6e>
				if (caller_id || link) {
    7ce2:	b90c      	cbnz	r4, 7ce8 <mayfly_run+0x110>
    7ce4:	2800      	cmp	r0, #0
    7ce6:	d0b1      	beq.n	7c4c <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    7ce8:	4629      	mov	r1, r5
    7cea:	4628      	mov	r0, r5
    7cec:	f00b ff3e 	bl	13b6c <mayfly_pend>
	}
}
    7cf0:	b009      	add	sp, #36	; 0x24
    7cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cf6:	bf00      	nop
    7cf8:	2000070c 	.word	0x2000070c

00007cfc <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7cfc:	b510      	push	{r4, lr}
    7cfe:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    7d00:	2000      	movs	r0, #0

	while (octets_len--) {
    7d02:	3901      	subs	r1, #1
    7d04:	b2c9      	uxtb	r1, r1
    7d06:	29ff      	cmp	r1, #255	; 0xff
    7d08:	d100      	bne.n	7d0c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    7d0a:	bd10      	pop	{r4, pc}
		bite = *octets;
    7d0c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7d10:	2b00      	cmp	r3, #0
    7d12:	d0f6      	beq.n	7d02 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7d14:	1e5c      	subs	r4, r3, #1
			one_count++;
    7d16:	3001      	adds	r0, #1
			bite &= (bite - 1);
    7d18:	4023      	ands	r3, r4
			one_count++;
    7d1a:	b2c0      	uxtb	r0, r0
    7d1c:	e7f8      	b.n	7d10 <util_ones_count_get+0x14>

00007d1e <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7d20:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7d22:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7d24:	461a      	mov	r2, r3
	total = 0;
    7d26:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7d28:	2aff      	cmp	r2, #255	; 0xff
    7d2a:	d101      	bne.n	7d30 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7d2c:	2000      	movs	r0, #0
    7d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7d30:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7d34:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    7d36:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    7d3a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7d3e:	d004      	beq.n	7d4a <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7d40:	68b3      	ldr	r3, [r6, #8]
    7d42:	441c      	add	r4, r3
		current = ticker_current->next;
    7d44:	4613      	mov	r3, r2
    7d46:	463a      	mov	r2, r7
    7d48:	e7ee      	b.n	7d28 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    7d4a:	4293      	cmp	r3, r2
    7d4c:	d100      	bne.n	7d50 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7d4e:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7d50:	b21b      	sxth	r3, r3
    7d52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7d56:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    7d58:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    7d5a:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7d5e:	7833      	ldrb	r3, [r6, #0]
    7d60:	2bff      	cmp	r3, #255	; 0xff
    7d62:	d006      	beq.n	7d72 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7d64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7d68:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7d6c:	689a      	ldr	r2, [r3, #8]
    7d6e:	4402      	add	r2, r0
    7d70:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7d72:	4420      	add	r0, r4
    7d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007d76 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7d76:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7d78:	1a55      	subs	r5, r2, r1
    7d7a:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7d7e:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7d80:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7d82:	d109      	bne.n	7d98 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7d84:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7d88:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7d8a:	42a2      	cmp	r2, r4
    7d8c:	d90e      	bls.n	7dac <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7d8e:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7d90:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7d92:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7d94:	6144      	str	r4, [r0, #20]
    7d96:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7d98:	1a8a      	subs	r2, r1, r2
    7d9a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7d9e:	4293      	cmp	r3, r2
    7da0:	d901      	bls.n	7da6 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7da2:	1a9a      	subs	r2, r3, r2
    7da4:	e7f1      	b.n	7d8a <ticks_to_expire_prep+0x14>
    7da6:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7da8:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    7daa:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7dac:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    7dae:	2200      	movs	r2, #0
    7db0:	e7ef      	b.n	7d92 <ticks_to_expire_prep+0x1c>

00007db2 <ticker_job_op_cb>:
{
    7db2:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7db4:	2200      	movs	r2, #0
    7db6:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    7db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    7dba:	6259      	str	r1, [r3, #36]	; 0x24
{
    7dbc:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    7dbe:	b10a      	cbz	r2, 7dc4 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7dc2:	4710      	bx	r2
    7dc4:	4770      	bx	lr

00007dc6 <ticker_worker>:
{
    7dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    7dca:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    7dcc:	2301      	movs	r3, #1
{
    7dce:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    7dd0:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    7dd2:	2d00      	cmp	r5, #0
    7dd4:	d14c      	bne.n	7e70 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    7dd6:	7f43      	ldrb	r3, [r0, #29]
    7dd8:	2bff      	cmp	r3, #255	; 0xff
    7dda:	d102      	bne.n	7de2 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    7ddc:	77c5      	strb	r5, [r0, #31]
		return;
    7dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    7de2:	f00b f9cd 	bl	13180 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7de6:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    7de8:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    7dea:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7dee:	1bc7      	subs	r7, r0, r7
    7df0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    7df4:	2eff      	cmp	r6, #255	; 0xff
    7df6:	d006      	beq.n	7e06 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    7df8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7dfc:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7e00:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7e02:	429f      	cmp	r7, r3
    7e04:	d218      	bcs.n	7e38 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7e06:	7aa2      	ldrb	r2, [r4, #10]
    7e08:	7ae3      	ldrb	r3, [r4, #11]
    7e0a:	4293      	cmp	r3, r2
    7e0c:	d105      	bne.n	7e1a <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    7e0e:	3301      	adds	r3, #1
    7e10:	b2db      	uxtb	r3, r3
			last = 0;
    7e12:	2b02      	cmp	r3, #2
    7e14:	bf08      	it	eq
    7e16:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    7e18:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7e1a:	7ae3      	ldrb	r3, [r4, #11]
    7e1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7e20:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7e22:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7e24:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7e26:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    7e28:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7e2a:	46ac      	mov	ip, r5
    7e2c:	4623      	mov	r3, r4
    7e2e:	2104      	movs	r1, #4
    7e30:	2003      	movs	r0, #3
}
    7e32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7e36:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    7e38:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    7e3a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7e3c:	788a      	ldrb	r2, [r1, #2]
    7e3e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7e40:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7e44:	1a9b      	subs	r3, r3, r2
    7e46:	b2db      	uxtb	r3, r3
    7e48:	2b01      	cmp	r3, #1
    7e4a:	d1d3      	bne.n	7df4 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7e4c:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7e50:	3a01      	subs	r2, #1
    7e52:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7e54:	f1b9 0f00 	cmp.w	r9, #0
    7e58:	d0cc      	beq.n	7df4 <ticker_worker+0x2e>
					   ticks_expired -
    7e5a:	6948      	ldr	r0, [r1, #20]
    7e5c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7e5e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7e60:	1a28      	subs	r0, r5, r0
    7e62:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7e64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7e68:	690b      	ldr	r3, [r1, #16]
    7e6a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7e6c:	47c8      	blx	r9
    7e6e:	e7c1      	b.n	7df4 <ticker_worker+0x2e>
    7e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007e74 <ticker_job>:
{
    7e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    7e78:	7fc2      	ldrb	r2, [r0, #31]
{
    7e7a:	b095      	sub	sp, #84	; 0x54
    7e7c:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7e7e:	2a00      	cmp	r2, #0
    7e80:	f040 83be 	bne.w	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
	ticks_previous = instance->ticks_current;
    7e84:	6943      	ldr	r3, [r0, #20]
    7e86:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    7e88:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7e8a:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7e8c:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7e8e:	7ac0      	ldrb	r0, [r0, #11]
    7e90:	4298      	cmp	r0, r3
    7e92:	f000 808f 	beq.w	7fb4 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    7e96:	440b      	add	r3, r1
    7e98:	b2db      	uxtb	r3, r3
			first = 0;
    7e9a:	2b02      	cmp	r3, #2
    7e9c:	bf08      	it	eq
    7e9e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7ea0:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7ea4:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    7ea8:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    7eaa:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    7eae:	9b07      	ldr	r3, [sp, #28]
    7eb0:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    7eb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7eb6:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    7eba:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7ebe:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    7ec0:	f8db 3000 	ldr.w	r3, [fp]
    7ec4:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    7ec6:	f8db 3004 	ldr.w	r3, [fp, #4]
    7eca:	930d      	str	r3, [sp, #52]	; 0x34
    7ecc:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7ed0:	3b01      	subs	r3, #1
    7ed2:	b2db      	uxtb	r3, r3
    7ed4:	9304      	str	r3, [sp, #16]
	pending = 0;
    7ed6:	2300      	movs	r3, #0
    7ed8:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    7eda:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    7ede:	9b04      	ldr	r3, [sp, #16]
    7ee0:	2bff      	cmp	r3, #255	; 0xff
    7ee2:	d16a      	bne.n	7fba <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7ee4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    7ee8:	9a05      	ldr	r2, [sp, #20]
    7eea:	1a9b      	subs	r3, r3, r2
    7eec:	bf18      	it	ne
    7eee:	2301      	movne	r3, #1
    7ef0:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    7ef2:	9b03      	ldr	r3, [sp, #12]
    7ef4:	b1e3      	cbz	r3, 7f30 <ticker_job+0xbc>
	node = &instance->node[0];
    7ef6:	f8db 3000 	ldr.w	r3, [fp]
    7efa:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    7efc:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    7f00:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7f04:	2eff      	cmp	r6, #255	; 0xff
    7f06:	d00c      	beq.n	7f22 <ticker_job+0xae>
		ticker = &node[id_expired];
    7f08:	b237      	sxth	r7, r6
    7f0a:	9b06      	ldr	r3, [sp, #24]
    7f0c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7f10:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7f14:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7f16:	4545      	cmp	r5, r8
    7f18:	f240 8136 	bls.w	8188 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188>
			ticker->ticks_to_expire -= ticks_elapsed;
    7f1c:	eba5 0508 	sub.w	r5, r5, r8
    7f20:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7f22:	9b04      	ldr	r3, [sp, #16]
    7f24:	9a03      	ldr	r2, [sp, #12]
    7f26:	9905      	ldr	r1, [sp, #20]
    7f28:	42b1      	cmp	r1, r6
    7f2a:	bf18      	it	ne
    7f2c:	4613      	movne	r3, r2
    7f2e:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    7f30:	f8db 3000 	ldr.w	r3, [fp]
    7f34:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    7f36:	f8db 3004 	ldr.w	r3, [fp, #4]
    7f3a:	9312      	str	r3, [sp, #72]	; 0x48
    7f3c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7f40:	3b01      	subs	r3, #1
    7f42:	b2db      	uxtb	r3, r3
    7f44:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    7f46:	9b03      	ldr	r3, [sp, #12]
    7f48:	2bff      	cmp	r3, #255	; 0xff
    7f4a:	f040 8170 	bne.w	822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7f4e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7f52:	9a05      	ldr	r2, [sp, #20]
    7f54:	4293      	cmp	r3, r2
	if (!pending) {
    7f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    7f58:	f040 8349 	bne.w	85ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ee>
	if (!pending) {
    7f5c:	b95b      	cbnz	r3, 7f76 <ticker_job+0x102>
    7f5e:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7f62:	f8db 3004 	ldr.w	r3, [fp, #4]
    7f66:	9303      	str	r3, [sp, #12]
    7f68:	3c01      	subs	r4, #1
    7f6a:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7f6c:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7f70:	2cff      	cmp	r4, #255	; 0xff
    7f72:	f040 82a0 	bne.w	84b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b6>
	instance->job_guard = 0;
    7f76:	2300      	movs	r3, #0
    7f78:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7f7c:	9b04      	ldr	r3, [sp, #16]
    7f7e:	b14b      	cbz	r3, 7f94 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7f80:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7f84:	2bff      	cmp	r3, #255	; 0xff
    7f86:	f040 82e9 	bne.w	855c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55c>
		if (cntr_stop() == 0) {
    7f8a:	f00b f8cb 	bl	13124 <cntr_stop>
    7f8e:	b908      	cbnz	r0, 7f94 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7f90:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7f94:	f89b 301f 	ldrb.w	r3, [fp, #31]
    7f98:	2b00      	cmp	r3, #0
    7f9a:	f000 8331 	beq.w	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7f9e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7fa2:	465b      	mov	r3, fp
    7fa4:	2201      	movs	r2, #1
    7fa6:	2103      	movs	r1, #3
    7fa8:	2004      	movs	r0, #4
    7faa:	46a4      	mov	ip, r4
}
    7fac:	b015      	add	sp, #84	; 0x54
    7fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7fb2:	4760      	bx	ip
		flag_elapsed = 0;
    7fb4:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    7fb6:	4690      	mov	r8, r2
    7fb8:	e77f      	b.n	7eba <ticker_job+0x46>
		user = &users[count_user];
    7fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fbc:	9a04      	ldr	r2, [sp, #16]
    7fbe:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    7fc2:	687b      	ldr	r3, [r7, #4]
    7fc4:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    7fc6:	78f9      	ldrb	r1, [r7, #3]
    7fc8:	78be      	ldrb	r6, [r7, #2]
    7fca:	428e      	cmp	r6, r1
    7fcc:	f000 80d7 	beq.w	817e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17e>
			user_op = &user_ops[user->middle];
    7fd0:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    7fd2:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    7fd4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    7fd8:	0112      	lsls	r2, r2, #4
    7fda:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    7fdc:	1c73      	adds	r3, r6, #1
    7fde:	b2db      	uxtb	r3, r3
				middle = 0;
    7fe0:	4298      	cmp	r0, r3
    7fe2:	bf08      	it	eq
    7fe4:	2300      	moveq	r3, #0
			user->middle = middle;
    7fe6:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7fe8:	9b08      	ldr	r3, [sp, #32]
    7fea:	5c9a      	ldrb	r2, [r3, r2]
    7fec:	2a03      	cmp	r2, #3
    7fee:	d9eb      	bls.n	7fc8 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7ff0:	2a05      	cmp	r2, #5
    7ff2:	d817      	bhi.n	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
			ticker = &node[user_op->id];
    7ff4:	7869      	ldrb	r1, [r5, #1]
    7ff6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    7ffa:	930c      	str	r3, [sp, #48]	; 0x30
    7ffc:	980c      	ldr	r0, [sp, #48]	; 0x30
    7ffe:	9b06      	ldr	r3, [sp, #24]
    8000:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    8004:	7863      	ldrb	r3, [r4, #1]
    8006:	78a0      	ldrb	r0, [r4, #2]
    8008:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    800a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    800e:	d009      	beq.n	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
			    (state == 0) ||
    8010:	2a04      	cmp	r2, #4
    8012:	d10c      	bne.n	802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    8014:	686a      	ldr	r2, [r5, #4]
    8016:	b952      	cbnz	r2, 802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    8018:	68aa      	ldr	r2, [r5, #8]
    801a:	b942      	cbnz	r2, 802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
			     (user_op->params.update.lazy == 0) &&
    801c:	68ea      	ldr	r2, [r5, #12]
    801e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8022:	d104      	bne.n	802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
				ticker_job_op_cb(user_op,
    8024:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    8026:	4628      	mov	r0, r5
    8028:	f7ff fec3 	bl	7db2 <ticker_job_op_cb>
    802c:	e7cb      	b.n	7fc6 <ticker_job+0x152>
			if (state == 1) {
    802e:	2b01      	cmp	r3, #1
    8030:	f040 809b 	bne.w	816a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8034:	4658      	mov	r0, fp
    8036:	f7ff fe72 	bl	7d1e <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    803a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    803c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    803e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8040:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8042:	f040 8084 	bne.w	814e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    8046:	f8db 3014 	ldr.w	r3, [fp, #20]
    804a:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    804c:	f00b f898 	bl	13180 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    8052:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8054:	1ac3      	subs	r3, r0, r3
    8056:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    805a:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    805c:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    805e:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    8060:	bf9e      	ittt	ls
    8062:	6962      	ldrls	r2, [r4, #20]
    8064:	1b92      	subls	r2, r2, r6
    8066:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    8068:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    806a:	bf96      	itet	ls
    806c:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    806e:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    8070:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    8072:	b18a      	cbz	r2, 8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
	    (user_op->params.update.lazy != 0)) {
    8074:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    8076:	b179      	cbz	r1, 8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
		user_op->params.update.lazy--;
    8078:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    807c:	fa1f fe8e 	uxth.w	lr, lr
    8080:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8084:	429a      	cmp	r2, r3
    8086:	d32b      	bcc.n	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
		ticker->remainder_current -= 30517578UL;
    8088:	f8df 9324 	ldr.w	r9, [pc, #804]	; 83b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b0>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    808c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    8090:	45e6      	cmp	lr, ip
    8092:	d847      	bhi.n	8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>
		ticker->lazy_periodic = user_op->params.update.lazy;
    8094:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    8098:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    809a:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    809c:	4413      	add	r3, r2
    809e:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    80a0:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    80a2:	6963      	ldr	r3, [r4, #20]
    80a4:	4413      	add	r3, r2
    80a6:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    80a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    80aa:	4620      	mov	r0, r4
    80ac:	f7ff fe63 	bl	7d76 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    80b0:	69a2      	ldr	r2, [r4, #24]
    80b2:	892b      	ldrh	r3, [r5, #8]
    80b4:	4413      	add	r3, r2
    80b6:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    80b8:	896a      	ldrh	r2, [r5, #10]
    80ba:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    80bc:	bf8c      	ite	hi
    80be:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    80c0:	2300      	movls	r3, #0
    80c2:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    80c4:	7bab      	ldrb	r3, [r5, #14]
    80c6:	b103      	cbz	r3, 80ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca>
		ticker->force = user_op->params.update.force;
    80c8:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    80ca:	9b06      	ldr	r3, [sp, #24]
    80cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80ce:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    80d2:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    80d4:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    80d8:	3301      	adds	r3, #1
    80da:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    80dc:	2100      	movs	r1, #0
    80de:	e7a2      	b.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    80e0:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    80e4:	45e6      	cmp	lr, ip
    80e6:	d2cf      	bcs.n	8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>
	if ((ticker->remainder_current >= BIT(31)) ||
    80e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    80ea:	4eaf      	ldr	r6, [pc, #700]	; (83a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a8>)
    80ec:	48af      	ldr	r0, [pc, #700]	; (83ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ac>)
    80ee:	198e      	adds	r6, r1, r6
    80f0:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    80f2:	bf81      	itttt	hi
    80f4:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    80f8:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    80fc:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    8100:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    8102:	6a66      	ldr	r6, [r4, #36]	; 0x24
    8104:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    8106:	bf8c      	ite	hi
    8108:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    810c:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    8110:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    8112:	4491      	add	r9, r2
			ticker->lazy_current--;
    8114:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    8118:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    811a:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    811e:	f8a4 c01e 	strh.w	ip, [r4, #30]
    8122:	e7af      	b.n	8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>
	ticker->remainder_current += ticker->remainder_periodic;
    8124:	6a66      	ldr	r6, [r4, #36]	; 0x24
    8126:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    8128:	48a0      	ldr	r0, [pc, #640]	; (83ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ac>)
	ticker->remainder_current += ticker->remainder_periodic;
    812a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    812c:	499e      	ldr	r1, [pc, #632]	; (83a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a8>)
    812e:	1871      	adds	r1, r6, r1
    8130:	4281      	cmp	r1, r0
	return 0;
    8132:	bf8e      	itee	hi
    8134:	2100      	movhi	r1, #0
		return 1;
    8136:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    8138:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    813a:	4411      	add	r1, r2
			ticker->lazy_current++;
    813c:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    8140:	bf8c      	ite	hi
    8142:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    8144:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    8146:	440b      	add	r3, r1
			ticker->lazy_current++;
    8148:	f8a4 c01e 	strh.w	ip, [r4, #30]
    814c:	e79e      	b.n	808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>
		ticker->req = ticker->ack;
    814e:	78a3      	ldrb	r3, [r4, #2]
    8150:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    8152:	786b      	ldrb	r3, [r5, #1]
    8154:	f89b 201c 	ldrb.w	r2, [fp, #28]
    8158:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    815a:	bf01      	itttt	eq
    815c:	23ff      	moveq	r3, #255	; 0xff
    815e:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    8162:	2300      	moveq	r3, #0
    8164:	f8cb 3018 	streq.w	r3, [fp, #24]
    8168:	e7b8      	b.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    816a:	2104      	movs	r1, #4
    816c:	465b      	mov	r3, fp
    816e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    8172:	2201      	movs	r2, #1
    8174:	4608      	mov	r0, r1
    8176:	47a0      	blx	r4
				pending = 1;
    8178:	2301      	movs	r3, #1
				user->middle = prev;
    817a:	70be      	strb	r6, [r7, #2]
				pending = 1;
    817c:	9309      	str	r3, [sp, #36]	; 0x24
    817e:	9b04      	ldr	r3, [sp, #16]
    8180:	3b01      	subs	r3, #1
    8182:	b2db      	uxtb	r3, r3
    8184:	9304      	str	r3, [sp, #16]
    8186:	e6aa      	b.n	7ede <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    8188:	f8db 3018 	ldr.w	r3, [fp, #24]
    818c:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    818e:	bf29      	itett	cs
    8190:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    8192:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    8194:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    8198:	2300      	movcs	r3, #0
    819a:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    819e:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    81a0:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    81a2:	b11b      	cbz	r3, 81ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ac>
			instance->ticker_id_slot_previous = id_expired;
    81a4:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    81a8:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    81ac:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    81ae:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    81b0:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    81b2:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    81b6:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    81ba:	f8d4 e004 	ldr.w	lr, [r4, #4]
    81be:	f1be 0f00 	cmp.w	lr, #0
    81c2:	d030      	beq.n	8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
    81c4:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    81c6:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 83ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ac>
	ticker->remainder_current += ticker->remainder_periodic;
    81ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    81cc:	6a21      	ldr	r1, [r4, #32]
    81ce:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    81d0:	4975      	ldr	r1, [pc, #468]	; (83a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a8>)
    81d2:	1859      	adds	r1, r3, r1
    81d4:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    81d6:	bf9f      	itttt	ls
    81d8:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    81dc:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    81e0:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    81e4:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    81e6:	bf92      	itee	ls
    81e8:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    81ea:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    81ec:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    81ee:	4473      	add	r3, lr
			while (count--) {
    81f0:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    81f4:	441a      	add	r2, r3
			while (count--) {
    81f6:	d2e8      	bcs.n	81ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ca>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    81f8:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    81fa:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    81fc:	f8db 1014 	ldr.w	r1, [fp, #20]
    8200:	eb03 0209 	add.w	r2, r3, r9
    8204:	4620      	mov	r0, r4
    8206:	f7ff fdb6 	bl	7d76 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    820a:	8ba3      	ldrh	r3, [r4, #28]
    820c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    820e:	2300      	movs	r3, #0
    8210:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    8212:	9b06      	ldr	r3, [sp, #24]
    8214:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    8218:	7863      	ldrb	r3, [r4, #1]
    821a:	3301      	adds	r3, #1
    821c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    821e:	eba8 0805 	sub.w	r8, r8, r5
    8222:	46b2      	mov	sl, r6
    8224:	e66c      	b.n	7f00 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    8226:	78a3      	ldrb	r3, [r4, #2]
    8228:	7063      	strb	r3, [r4, #1]
    822a:	4656      	mov	r6, sl
    822c:	e7f7      	b.n	821e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21e>
		user = &users[count_user];
    822e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8230:	9a03      	ldr	r2, [sp, #12]
    8232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8236:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    8238:	685b      	ldr	r3, [r3, #4]
    823a:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    823c:	9b06      	ldr	r3, [sp, #24]
    823e:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    8242:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    8246:	f000 808e 	beq.w	8366 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x366>
				ticker = &node[id_insert];
    824a:	fa0f f38a 	sxth.w	r3, sl
    824e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    8254:	46d0      	mov	r8, sl
    8256:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    825a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    825e:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    8260:	f8db 3000 	ldr.w	r3, [fp]
    8264:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    8266:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    8268:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    826a:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    826c:	8be3      	ldrh	r3, [r4, #30]
    826e:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    8270:	bf86      	itte	hi
    8272:	1a9b      	subhi	r3, r3, r2
    8274:	b29b      	uxthhi	r3, r3
		skip = 0;
    8276:	2300      	movls	r3, #0
    8278:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    827a:	fa0f f388 	sxth.w	r3, r8
    827e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8282:	00db      	lsls	r3, r3, #3
    8284:	9313      	str	r3, [sp, #76]	; 0x4c
    8286:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    8288:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    828c:	f8db 0018 	ldr.w	r0, [fp, #24]
    8290:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    8292:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    8296:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    8298:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    829c:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    82a0:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    82a2:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    82a4:	2bff      	cmp	r3, #255	; 0xff
    82a6:	d007      	beq.n	82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    82a8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    82ac:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    82b0:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    82b2:	4281      	cmp	r1, r0
    82b4:	f200 80a9 	bhi.w	840a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40a>
				     ticks_to_expire + ticker_new->ticks_slot);
    82b8:	f8de 0018 	ldr.w	r0, [lr, #24]
    82bc:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    82be:	eb01 0c00 	add.w	ip, r1, r0
    82c2:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    82c4:	2eff      	cmp	r6, #255	; 0xff
    82c6:	f040 80ae 	bne.w	8426 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x426>
	if ((ticker_new->ticks_slot == 0) ||
    82ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    82cc:	b130      	cbz	r0, 82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
    82ce:	9807      	ldr	r0, [sp, #28]
    82d0:	4281      	cmp	r1, r0
    82d2:	f0c0 80bf 	bcc.w	8454 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x454>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    82d6:	2eff      	cmp	r6, #255	; 0xff
    82d8:	f040 818e 	bne.w	85f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f8>
		if (previous == current) {
    82dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    82de:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    82e2:	4283      	cmp	r3, r0
			node[previous].next = id;
    82e4:	bf18      	it	ne
    82e6:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    82ea:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    82ee:	bf16      	itet	ne
    82f0:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    82f4:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    82f8:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    82fc:	2bff      	cmp	r3, #255	; 0xff
    82fe:	d006      	beq.n	830e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30e>
			node[current].ticks_to_expire -= ticks_to_expire;
    8300:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8304:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8308:	689a      	ldr	r2, [r3, #8]
    830a:	1a51      	subs	r1, r2, r1
    830c:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    830e:	78a3      	ldrb	r3, [r4, #2]
    8310:	3301      	adds	r3, #1
    8312:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    8314:	2100      	movs	r1, #0
			if (user_op) {
    8316:	2d00      	cmp	r5, #0
    8318:	d093      	beq.n	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
				ticker_job_op_cb(user_op, status);
    831a:	4628      	mov	r0, r5
    831c:	f7ff fd49 	bl	7db2 <ticker_job_op_cb>
    8320:	e78f      	b.n	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
				user_op = &user_ops[user_ops_first];
    8322:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    8326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8328:	011b      	lsls	r3, r3, #4
    832a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    832c:	f109 0201 	add.w	r2, r9, #1
    8330:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    8334:	9a06      	ldr	r2, [sp, #24]
    8336:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    8338:	454a      	cmp	r2, r9
    833a:	bf08      	it	eq
    833c:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    8340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8342:	5cd3      	ldrb	r3, [r2, r3]
    8344:	2b03      	cmp	r3, #3
    8346:	d10e      	bne.n	8366 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x366>
				id_insert = user_op->id;
    8348:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    834c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    834e:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    8352:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    8356:	7862      	ldrb	r2, [r4, #1]
    8358:	78a3      	ldrb	r3, [r4, #2]
    835a:	429a      	cmp	r2, r3
    835c:	d009      	beq.n	8372 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x372>
					ticker_job_op_cb(user_op,
    835e:	2101      	movs	r1, #1
    8360:	4628      	mov	r0, r5
    8362:	f7ff fd26 	bl	7db2 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    8366:	9b06      	ldr	r3, [sp, #24]
    8368:	789b      	ldrb	r3, [r3, #2]
    836a:	454b      	cmp	r3, r9
    836c:	d1d9      	bne.n	8322 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x322>
    836e:	9b03      	ldr	r3, [sp, #12]
    8370:	e5e6      	b.n	7f40 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    8372:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    8374:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    8378:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    837a:	692b      	ldr	r3, [r5, #16]
    837c:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    837e:	8aab      	ldrh	r3, [r5, #20]
    8380:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    8382:	69ab      	ldr	r3, [r5, #24]
    8384:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    8386:	69eb      	ldr	r3, [r5, #28]
    8388:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    838a:	6a2b      	ldr	r3, [r5, #32]
    838c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    838e:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    8390:	68ab      	ldr	r3, [r5, #8]
    8392:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    8394:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    8396:	686a      	ldr	r2, [r5, #4]
    8398:	4620      	mov	r0, r4
    839a:	f7ff fcec 	bl	7d76 <ticks_to_expire_prep>
	ticker->force = 1;
    839e:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    83a0:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    83a2:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    83a4:	70e3      	strb	r3, [r4, #3]
    83a6:	e75b      	b.n	8260 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x260>
    83a8:	ff172b5a 	.word	0xff172b5a
    83ac:	7f172b59 	.word	0x7f172b59
    83b0:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    83b4:	6860      	ldr	r0, [r4, #4]
    83b6:	2800      	cmp	r0, #0
    83b8:	d07b      	beq.n	84b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b2>
	ticker->remainder_current += ticker->remainder_periodic;
    83ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
    83bc:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    83be:	4b92      	ldr	r3, [pc, #584]	; (8608 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x608>)
	ticker->remainder_current += ticker->remainder_periodic;
    83c0:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    83c2:	4992      	ldr	r1, [pc, #584]	; (860c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60c>)
    83c4:	18d3      	adds	r3, r2, r3
    83c6:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    83c8:	bf9c      	itt	ls
    83ca:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    83ce:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    83d2:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    83d4:	bf8b      	itete	hi
    83d6:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    83d8:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    83dc:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    83de:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    83e0:	4403      	add	r3, r0
		return 1;
    83e2:	bf98      	it	ls
    83e4:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    83e6:	4413      	add	r3, r2
			ticker->lazy_current++;
    83e8:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    83ea:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    83ec:	3201      	adds	r2, #1
    83ee:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    83f0:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    83f2:	4293      	cmp	r3, r2
    83f4:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    83f8:	bf89      	itett	hi
    83fa:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    83fc:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    83fe:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    8400:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    8402:	bf9c      	itt	ls
    8404:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    8406:	60a1      	strls	r1, [r4, #8]
    8408:	e73d      	b.n	8286 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x286>
		if (ticker_current->ticks_slot != 0) {
    840a:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    840c:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    840e:	b946      	cbnz	r6, 8422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x422>
			if (ticks_slot_previous > ticks_to_expire_current) {
    8410:	9f07      	ldr	r7, [sp, #28]
    8412:	42b8      	cmp	r0, r7
    8414:	d200      	bcs.n	8418 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x418>
				ticks_slot_previous -= ticks_to_expire_current;
    8416:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    8418:	930b      	str	r3, [sp, #44]	; 0x2c
    841a:	9607      	str	r6, [sp, #28]
    841c:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    8420:	e740      	b.n	82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>
		if (ticker_current->ticks_slot != 0) {
    8422:	9308      	str	r3, [sp, #32]
    8424:	e7f8      	b.n	8418 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x418>
		ticker = &node[ticker_id_head];
    8426:	b230      	sxth	r0, r6
    8428:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    842c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    8430:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    8432:	68bf      	ldr	r7, [r7, #8]
    8434:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    8436:	4567      	cmp	r7, ip
    8438:	d20a      	bcs.n	8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>
		if (ticker->ticks_slot) {
    843a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    843c:	69bf      	ldr	r7, [r7, #24]
    843e:	2f00      	cmp	r7, #0
    8440:	f47f af43 	bne.w	82ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ca>
		ticks_slot -= ticks_to_expire;
    8444:	9e11      	ldr	r6, [sp, #68]	; 0x44
    8446:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    844a:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    844e:	e739      	b.n	82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>
			return TICKER_NULL;
    8450:	26ff      	movs	r6, #255	; 0xff
    8452:	e73a      	b.n	82ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ca>
	while (id_insert !=
    8454:	9b08      	ldr	r3, [sp, #32]
    8456:	4598      	cmp	r8, r3
    8458:	f43f af59 	beq.w	830e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30e>
		if (id_collide != TICKER_NULL) {
    845c:	9b08      	ldr	r3, [sp, #32]
    845e:	2bff      	cmp	r3, #255	; 0xff
    8460:	d0a8      	beq.n	83b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b4>
    8462:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    8464:	b233      	sxth	r3, r6
    8466:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    846a:	9307      	str	r3, [sp, #28]
    846c:	9a07      	ldr	r2, [sp, #28]
    846e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8470:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    8474:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    8476:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    8478:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    847a:	bf88      	it	hi
    847c:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    847e:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    8480:	bf8c      	ite	hi
    8482:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    8484:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    8486:	2a00      	cmp	r2, #0
    8488:	d094      	beq.n	83b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b4>
    848a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    848c:	4293      	cmp	r3, r2
    848e:	d891      	bhi.n	83b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b4>
			    skip_collide <= skip &&
    8490:	78fa      	ldrb	r2, [r7, #3]
    8492:	78e3      	ldrb	r3, [r4, #3]
    8494:	429a      	cmp	r2, r3
    8496:	d28d      	bcs.n	83b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b4>
					ticker_dequeue(instance, id_collide);
    8498:	4631      	mov	r1, r6
    849a:	4658      	mov	r0, fp
    849c:	f7ff fc3f 	bl	7d1e <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    84a0:	78bb      	ldrb	r3, [r7, #2]
    84a2:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    84a4:	9a07      	ldr	r2, [sp, #28]
    84a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    84a8:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    84aa:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    84ae:	46b2      	mov	sl, r6
    84b0:	e6e9      	b.n	8286 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x286>
			return TICKER_STATUS_FAILURE;
    84b2:	2101      	movs	r1, #1
    84b4:	e72f      	b.n	8316 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x316>
		user = &users[count_user];
    84b6:	9b03      	ldr	r3, [sp, #12]
    84b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    84bc:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    84be:	786b      	ldrb	r3, [r5, #1]
    84c0:	78ea      	ldrb	r2, [r5, #3]
    84c2:	429a      	cmp	r2, r3
    84c4:	d102      	bne.n	84cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4cc>
    84c6:	3c01      	subs	r4, #1
    84c8:	b2e4      	uxtb	r4, r4
    84ca:	e551      	b.n	7f70 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    84cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    84d0:	011b      	lsls	r3, r3, #4
    84d2:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    84d4:	5cf3      	ldrb	r3, [r6, r3]
    84d6:	2b01      	cmp	r3, #1
    84d8:	d025      	beq.n	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
    84da:	2b02      	cmp	r3, #2
    84dc:	d12a      	bne.n	8534 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x534>
		ticker_by_next_slot_get(instance,
    84de:	f8d2 c004 	ldr.w	ip, [r2, #4]
    84e2:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    84e4:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    84e8:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    84ec:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    84f0:	28ff      	cmp	r0, #255	; 0xff
    84f2:	d004      	beq.n	84fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4fe>
    84f4:	6819      	ldr	r1, [r3, #0]
    84f6:	f8db 7014 	ldr.w	r7, [fp, #20]
    84fa:	42b9      	cmp	r1, r7
    84fc:	d023      	beq.n	8546 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x546>
		*ticks_current = instance->ticks_current;
    84fe:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    8502:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    8506:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    8508:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    850a:	29ff      	cmp	r1, #255	; 0xff
    850c:	d007      	beq.n	851e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x51e>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    850e:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    8512:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    8516:	6987      	ldr	r7, [r0, #24]
    8518:	6880      	ldr	r0, [r0, #8]
    851a:	b1df      	cbz	r7, 8554 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x554>
		_ticks_to_expire += ticker->ticks_to_expire;
    851c:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    851e:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    8522:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    8526:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    8528:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    852c:	b113      	cbz	r3, 8534 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x534>
		fp_op_func(uop->status, uop->op_context);
    852e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8530:	2000      	movs	r0, #0
    8532:	4798      	blx	r3
			first = user->first + 1;
    8534:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    8536:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    8538:	3301      	adds	r3, #1
    853a:	b2db      	uxtb	r3, r3
				first = 0;
    853c:	429a      	cmp	r2, r3
    853e:	bf08      	it	eq
    8540:	2300      	moveq	r3, #0
			user->first = first;
    8542:	706b      	strb	r3, [r5, #1]
    8544:	e7bb      	b.n	84be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4be>
		ticker = &node[_ticker_id_head];
    8546:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    854a:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    854e:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    8552:	e7da      	b.n	850a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50a>
		_ticks_to_expire += ticker->ticks_to_expire;
    8554:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    8556:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    855a:	e7d6      	b.n	850a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50a>
	if (ticker_id_old_head == TICKER_NULL) {
    855c:	9b05      	ldr	r3, [sp, #20]
    855e:	2bff      	cmp	r3, #255	; 0xff
    8560:	d107      	bne.n	8572 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x572>
		ticks_current = cntr_cnt_get();
    8562:	f00a fe0d 	bl	13180 <cntr_cnt_get>
    8566:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    8568:	f00a fdce 	bl	13108 <cntr_start>
    856c:	b908      	cbnz	r0, 8572 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x572>
			instance->ticks_current = ticks_current;
    856e:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    8572:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    8576:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    857a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    857e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8582:	260a      	movs	r6, #10
    8584:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    8586:	f00a fdfb 	bl	13180 <cntr_cnt_get>
		cc = instance->ticks_current;
    858a:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    858e:	1b03      	subs	r3, r0, r4
    8590:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    8594:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    8596:	42ab      	cmp	r3, r5
    8598:	bf2c      	ite	cs
    859a:	18e4      	addcs	r4, r4, r3
    859c:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    859e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    85a2:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    85a4:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    85a8:	4620      	mov	r0, r4
    85aa:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    85ac:	f00a fde8 	bl	13180 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    85b0:	1bc0      	subs	r0, r0, r7
    85b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    85b6:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    85b8:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    85ba:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    85be:	42a0      	cmp	r0, r4
    85c0:	f67f ace8 	bls.w	7f94 <ticker_job+0x120>
		LL_ASSERT(i);
    85c4:	3e01      	subs	r6, #1
    85c6:	d1de      	bne.n	8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
    85c8:	4b11      	ldr	r3, [pc, #68]	; (8610 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x610>)
    85ca:	9301      	str	r3, [sp, #4]
    85cc:	9300      	str	r3, [sp, #0]
    85ce:	4a11      	ldr	r2, [pc, #68]	; (8614 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x614>)
    85d0:	4b11      	ldr	r3, [pc, #68]	; (8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    85d2:	4912      	ldr	r1, [pc, #72]	; (861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>)
    85d4:	4812      	ldr	r0, [pc, #72]	; (8620 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x620>)
    85d6:	f7f8 fcd9 	bl	f8c <printk>
    85da:	4040      	eors	r0, r0
    85dc:	f380 8811 	msr	BASEPRI, r0
    85e0:	f04f 0004 	mov.w	r0, #4
    85e4:	df02      	svc	2
	instance->job_guard = 0;
    85e6:	2300      	movs	r3, #0
    85e8:	f88b 301e 	strb.w	r3, [fp, #30]
    85ec:	e4c8      	b.n	7f80 <ticker_job+0x10c>
	if (!pending) {
    85ee:	2b00      	cmp	r3, #0
    85f0:	d1f9      	bne.n	85e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e6>
		flag_compare_update = 1;
    85f2:	2301      	movs	r3, #1
    85f4:	9304      	str	r3, [sp, #16]
    85f6:	e4b2      	b.n	7f5e <ticker_job+0xea>
	while (id_insert !=
    85f8:	45b0      	cmp	r8, r6
    85fa:	f47f af33 	bne.w	8464 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x464>
    85fe:	e686      	b.n	830e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30e>
}
    8600:	b015      	add	sp, #84	; 0x54
    8602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8606:	bf00      	nop
    8608:	ff172b5a 	.word	0xff172b5a
    860c:	7f172b59 	.word	0x7f172b59
    8610:	00015af1 	.word	0x00015af1
    8614:	00016fae 	.word	0x00016fae
    8618:	00018298 	.word	0x00018298
    861c:	00016060 	.word	0x00016060
    8620:	000182b2 	.word	0x000182b2

00008624 <ticker_init>:
{
    8624:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    8626:	4d1a      	ldr	r5, [pc, #104]	; (8690 <ticker_init+0x6c>)
{
    8628:	9f05      	ldr	r7, [sp, #20]
    862a:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    862e:	262c      	movs	r6, #44	; 0x2c
    8630:	4346      	muls	r6, r0
    8632:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    8636:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    8638:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    863c:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    863e:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    8642:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    8646:	3b01      	subs	r3, #1
    8648:	b2db      	uxtb	r3, r3
    864a:	2bff      	cmp	r3, #255	; 0xff
    864c:	d111      	bne.n	8672 <ticker_init+0x4e>
	if (count_op) {
    864e:	b9ec      	cbnz	r4, 868c <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    8650:	222c      	movs	r2, #44	; 0x2c
    8652:	fb02 5200 	mla	r2, r2, r0, r5
    8656:	9908      	ldr	r1, [sp, #32]
    8658:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    865a:	9909      	ldr	r1, [sp, #36]	; 0x24
    865c:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    865e:	990a      	ldr	r1, [sp, #40]	; 0x28
    8660:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    8662:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    8664:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    8666:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    8668:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    866a:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    866c:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    866e:	4620      	mov	r0, r4
    8670:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    8672:	b21a      	sxth	r2, r3
    8674:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    8678:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    867a:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    867e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    8682:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    8684:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    8688:	b2e4      	uxtb	r4, r4
    868a:	e7dc      	b.n	8646 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    868c:	2001      	movs	r0, #1
}
    868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8690:	200007cc 	.word	0x200007cc

00008694 <ticker_trigger>:
	instance = &_instance[instance_index];
    8694:	4a07      	ldr	r2, [pc, #28]	; (86b4 <ticker_trigger+0x20>)
    8696:	212c      	movs	r1, #44	; 0x2c
    8698:	fb00 2301 	mla	r3, r0, r1, r2
{
    869c:	b410      	push	{r4}
	if (instance->sched_cb) {
    869e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    86a0:	b12c      	cbz	r4, 86ae <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    86a2:	46a4      	mov	ip, r4
    86a4:	2201      	movs	r2, #1
    86a6:	2103      	movs	r1, #3
    86a8:	2002      	movs	r0, #2
}
    86aa:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    86ac:	4760      	bx	ip
}
    86ae:	bc10      	pop	{r4}
    86b0:	4770      	bx	lr
    86b2:	bf00      	nop
    86b4:	200007cc 	.word	0x200007cc

000086b8 <ticker_start>:
{
    86b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    86bc:	4f25      	ldr	r7, [pc, #148]	; (8754 <ticker_start+0x9c>)
    86be:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    86c2:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    86c4:	fb08 7000 	mla	r0, r8, r0, r7
    86c8:	fa0f fc81 	sxth.w	ip, r1
    86cc:	f8d0 e004 	ldr.w	lr, [r0, #4]
    86d0:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    86d4:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    86d8:	78f4      	ldrb	r4, [r6, #3]
    86da:	1c65      	adds	r5, r4, #1
    86dc:	b2ed      	uxtb	r5, r5
		last = 0;
    86de:	45ae      	cmp	lr, r5
    86e0:	bf98      	it	ls
    86e2:	2500      	movls	r5, #0
	if (last == user->first) {
    86e4:	f896 e001 	ldrb.w	lr, [r6, #1]
    86e8:	45ae      	cmp	lr, r5
    86ea:	d02f      	beq.n	874c <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    86ec:	f8d6 c004 	ldr.w	ip, [r6, #4]
    86f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    86f4:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    86f8:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    86fc:	f04f 0a03 	mov.w	sl, #3
    8700:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    8704:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    8706:	9b08      	ldr	r3, [sp, #32]
    8708:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    870a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    870c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    870e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8710:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    8712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8714:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    8716:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    871a:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    871c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    871e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    8720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8722:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    8724:	2302      	movs	r3, #2
    8726:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    8728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    872a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    872c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    872e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    8730:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8732:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8734:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8736:	6a03      	ldr	r3, [r0, #32]
    8738:	4608      	mov	r0, r1
    873a:	4798      	blx	r3
    873c:	fb09 7308 	mla	r3, r9, r8, r7
    8740:	2200      	movs	r2, #0
    8742:	2104      	movs	r1, #4
    8744:	47a8      	blx	r5
	return user_op->status;
    8746:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    874c:	2001      	movs	r0, #1
}
    874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8752:	bf00      	nop
    8754:	200007cc 	.word	0x200007cc

00008758 <ticker_update>:
{
    8758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    875c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 87f0 <ticker_update+0x98>
    8760:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8764:	fb0a 8e00 	mla	lr, sl, r0, r8
    8768:	b20f      	sxth	r7, r1
    876a:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    876e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8770:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    8774:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    8778:	78c4      	ldrb	r4, [r0, #3]
    877a:	1c66      	adds	r6, r4, #1
    877c:	b2f6      	uxtb	r6, r6
		last = 0;
    877e:	42b5      	cmp	r5, r6
    8780:	bf98      	it	ls
    8782:	2600      	movls	r6, #0
	if (last == user->first) {
    8784:	7845      	ldrb	r5, [r0, #1]
    8786:	42b5      	cmp	r5, r6
    8788:	d02f      	beq.n	87ea <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    878a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    878e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8792:	0125      	lsls	r5, r4, #4
    8794:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8798:	2704      	movs	r7, #4
    879a:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    879e:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    87a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    87a4:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    87a6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    87aa:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    87ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    87b0:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    87b2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    87b6:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    87b8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    87bc:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    87be:	2302      	movs	r3, #2
    87c0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    87c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87c4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    87c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    87c8:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    87ca:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    87cc:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    87ce:	f8de 3020 	ldr.w	r3, [lr, #32]
    87d2:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    87d6:	4608      	mov	r0, r1
    87d8:	4798      	blx	r3
    87da:	fb09 830a 	mla	r3, r9, sl, r8
    87de:	2200      	movs	r2, #0
    87e0:	4639      	mov	r1, r7
    87e2:	47a8      	blx	r5
	return user_op->status;
    87e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    87e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    87ea:	2001      	movs	r0, #1
}
    87ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87f0:	200007cc 	.word	0x200007cc

000087f4 <ticker_stop>:
{
    87f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    87f8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8868 <ticker_stop+0x74>
    87fc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8800:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    8804:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    8806:	f8de 0004 	ldr.w	r0, [lr, #4]
    880a:	b20e      	sxth	r6, r1
    880c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    8810:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    8814:	78fc      	ldrb	r4, [r7, #3]
    8816:	1c65      	adds	r5, r4, #1
    8818:	b2ed      	uxtb	r5, r5
		last = 0;
    881a:	42a8      	cmp	r0, r5
    881c:	bf98      	it	ls
    881e:	2500      	movls	r5, #0
	if (last == user->first) {
    8820:	7878      	ldrb	r0, [r7, #1]
    8822:	42a8      	cmp	r0, r5
    8824:	d01d      	beq.n	8862 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    8826:	6878      	ldr	r0, [r7, #4]
    8828:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    882c:	0124      	lsls	r4, r4, #4
    882e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    8830:	f04f 0c05 	mov.w	ip, #5
    8834:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    8838:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    883a:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    883c:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    883e:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    8840:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    8842:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8844:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8846:	f8de 3020 	ldr.w	r3, [lr, #32]
    884a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    884e:	4608      	mov	r0, r1
    8850:	4798      	blx	r3
    8852:	fb08 930a 	mla	r3, r8, sl, r9
    8856:	2200      	movs	r2, #0
    8858:	2104      	movs	r1, #4
    885a:	47a0      	blx	r4
	return user_op->status;
    885c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    885e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8862:	2001      	movs	r0, #1
}
    8864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8868:	200007cc 	.word	0x200007cc

0000886c <ticker_next_slot_get>:
{
    886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8870:	f8df 8078 	ldr.w	r8, [pc, #120]	; 88ec <ticker_next_slot_get+0x80>
    8874:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    8878:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    887a:	fb0a 8000 	mla	r0, sl, r0, r8
    887e:	fa0f fe81 	sxth.w	lr, r1
    8882:	6845      	ldr	r5, [r0, #4]
    8884:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    8888:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    888c:	78fc      	ldrb	r4, [r7, #3]
    888e:	1c66      	adds	r6, r4, #1
    8890:	b2f6      	uxtb	r6, r6
		last = 0;
    8892:	42b5      	cmp	r5, r6
    8894:	bf98      	it	ls
    8896:	2600      	movls	r6, #0
	if (last == user->first) {
    8898:	787d      	ldrb	r5, [r7, #1]
    889a:	42b5      	cmp	r5, r6
    889c:	d023      	beq.n	88e6 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    889e:	f8d7 c004 	ldr.w	ip, [r7, #4]
    88a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    88a6:	0125      	lsls	r5, r4, #4
    88a8:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    88ac:	f04f 0e02 	mov.w	lr, #2
    88b0:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    88b4:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    88b6:	9b08      	ldr	r3, [sp, #32]
    88b8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    88ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    88bc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    88be:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    88c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    88c2:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    88c4:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    88c6:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    88ca:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    88cc:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    88ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
    88d0:	6a03      	ldr	r3, [r0, #32]
    88d2:	4608      	mov	r0, r1
    88d4:	4798      	blx	r3
    88d6:	fb09 830a 	mla	r3, r9, sl, r8
    88da:	2200      	movs	r2, #0
    88dc:	2104      	movs	r1, #4
    88de:	47a8      	blx	r5
	return user_op->status;
    88e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    88e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    88e6:	2001      	movs	r0, #1
}
    88e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    88ec:	200007cc 	.word	0x200007cc

000088f0 <ticker_job_idle_get>:
{
    88f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    88f4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8964 <ticker_job_idle_get+0x74>
    88f8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    88fc:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    8900:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    8902:	f8de 0004 	ldr.w	r0, [lr, #4]
    8906:	b20e      	sxth	r6, r1
    8908:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    890c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    8910:	78fc      	ldrb	r4, [r7, #3]
    8912:	1c65      	adds	r5, r4, #1
    8914:	b2ed      	uxtb	r5, r5
		last = 0;
    8916:	42a8      	cmp	r0, r5
    8918:	bf98      	it	ls
    891a:	2500      	movls	r5, #0
	if (last == user->first) {
    891c:	7878      	ldrb	r0, [r7, #1]
    891e:	42a8      	cmp	r0, r5
    8920:	d01d      	beq.n	895e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    8922:	6878      	ldr	r0, [r7, #4]
    8924:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8928:	0124      	lsls	r4, r4, #4
    892a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    892c:	f04f 0c01 	mov.w	ip, #1
    8930:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    8934:	20ff      	movs	r0, #255	; 0xff
    8936:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    8938:	2002      	movs	r0, #2
    893a:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    893c:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    893e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8940:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8942:	f8de 3020 	ldr.w	r3, [lr, #32]
    8946:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    894a:	4608      	mov	r0, r1
    894c:	4798      	blx	r3
    894e:	fb08 930a 	mla	r3, r8, sl, r9
    8952:	2200      	movs	r2, #0
    8954:	2104      	movs	r1, #4
    8956:	47a0      	blx	r4
	return user_op->status;
    8958:	6a70      	ldr	r0, [r6, #36]	; 0x24
    895a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    895e:	2001      	movs	r0, #1
}
    8960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8964:	200007cc 	.word	0x200007cc

00008968 <ticker_job_sched>:
{
    8968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    896c:	4c08      	ldr	r4, [pc, #32]	; (8990 <ticker_job_sched+0x28>)
    896e:	252c      	movs	r5, #44	; 0x2c
    8970:	fb05 4300 	mla	r3, r5, r0, r4
{
    8974:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8976:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    8978:	6a1b      	ldr	r3, [r3, #32]
    897a:	4608      	mov	r0, r1
    897c:	4798      	blx	r3
    897e:	fb06 4305 	mla	r3, r6, r5, r4
    8982:	46bc      	mov	ip, r7
    8984:	2200      	movs	r2, #0
    8986:	2104      	movs	r1, #4
}
    8988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    898c:	4760      	bx	ip
    898e:	bf00      	nop
    8990:	200007cc 	.word	0x200007cc

00008994 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    8994:	f00a bbf4 	b.w	13180 <cntr_cnt_get>

00008998 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8998:	1a40      	subs	r0, r0, r1
}
    899a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    899e:	4770      	bx	lr

000089a0 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    89a0:	b508      	push	{r3, lr}
    89a2:	4603      	mov	r3, r0
	if (addr_type > 1) {
    89a4:	2b01      	cmp	r3, #1
{
    89a6:	4608      	mov	r0, r1
	if (addr_type > 1) {
    89a8:	d80e      	bhi.n	89c8 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    89aa:	b133      	cbz	r3, 89ba <ll_addr_get+0x1a>
		if (bdaddr) {
    89ac:	b119      	cbz	r1, 89b6 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    89ae:	2206      	movs	r2, #6
    89b0:	4906      	ldr	r1, [pc, #24]	; (89cc <ll_addr_get+0x2c>)
    89b2:	f7f9 f923 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    89b6:	4805      	ldr	r0, [pc, #20]	; (89cc <ll_addr_get+0x2c>)
    89b8:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    89ba:	b119      	cbz	r1, 89c4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    89bc:	2206      	movs	r2, #6
    89be:	4904      	ldr	r1, [pc, #16]	; (89d0 <ll_addr_get+0x30>)
    89c0:	f7f9 f91c 	bl	1bfc <memcpy>
	}

	return pub_addr;
    89c4:	4802      	ldr	r0, [pc, #8]	; (89d0 <ll_addr_get+0x30>)
}
    89c6:	bd08      	pop	{r3, pc}
		return NULL;
    89c8:	2000      	movs	r0, #0
    89ca:	bd08      	pop	{r3, pc}
    89cc:	2000082a 	.word	0x2000082a
    89d0:	20000824 	.word	0x20000824

000089d4 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    89d4:	b570      	push	{r4, r5, r6, lr}
    89d6:	4606      	mov	r6, r0
    89d8:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    89da:	f008 fc35 	bl	11248 <ll_adv_is_enabled>
    89de:	4604      	mov	r4, r0
    89e0:	b110      	cbz	r0, 89e8 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    89e2:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    89e4:	4620      	mov	r0, r4
    89e6:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    89e8:	f008 fc42 	bl	11270 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    89ec:	f010 0f06 	tst.w	r0, #6
    89f0:	d1f7      	bne.n	89e2 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    89f2:	2206      	movs	r2, #6
    89f4:	4629      	mov	r1, r5
	if (addr_type) {
    89f6:	b11e      	cbz	r6, 8a00 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    89f8:	4802      	ldr	r0, [pc, #8]	; (8a04 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    89fa:	f7f9 f8ff 	bl	1bfc <memcpy>
    89fe:	e7f1      	b.n	89e4 <ll_addr_set+0x10>
    8a00:	4801      	ldr	r0, [pc, #4]	; (8a08 <ll_addr_set+0x34>)
    8a02:	e7fa      	b.n	89fa <ll_addr_set+0x26>
    8a04:	2000082a 	.word	0x2000082a
    8a08:	20000824 	.word	0x20000824

00008a0c <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    8a0c:	2300      	movs	r3, #0
    8a0e:	7003      	strb	r3, [r0, #0]
	*max = 0;
    8a10:	700b      	strb	r3, [r1, #0]
    8a12:	4770      	bx	lr

00008a14 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    8a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8a16:	4607      	mov	r7, r0
    8a18:	460e      	mov	r6, r1
	while (len) {
    8a1a:	460c      	mov	r4, r1
    8a1c:	1b35      	subs	r5, r6, r4
    8a1e:	443d      	add	r5, r7
    8a20:	b18c      	cbz	r4, 8a46 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    8a22:	f7f8 fadf 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    8a26:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    8a28:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    8a2a:	d907      	bls.n	8a3c <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    8a2c:	2204      	movs	r2, #4
    8a2e:	eb0d 0102 	add.w	r1, sp, r2
    8a32:	4628      	mov	r0, r5
    8a34:	f7f9 f8e2 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    8a38:	3c04      	subs	r4, #4
    8a3a:	e7ef      	b.n	8a1c <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    8a3c:	4622      	mov	r2, r4
    8a3e:	a901      	add	r1, sp, #4
    8a40:	4628      	mov	r0, r5
    8a42:	f7f9 f8db 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    8a46:	2000      	movs	r0, #0
    8a48:	b003      	add	sp, #12
    8a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008a4c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    8a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a50:	b089      	sub	sp, #36	; 0x24
    8a52:	4690      	mov	r8, r2
    8a54:	468a      	mov	sl, r1
    8a56:	4681      	mov	r9, r0
    8a58:	f00c fa84 	bl	14f64 <_impl_k_current_get>
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));
    8a5c:	2110      	movs	r1, #16
    8a5e:	4683      	mov	fp, r0
    8a60:	4648      	mov	r0, r9
    8a62:	f7f9 f91b 	bl	1c9c <bt_hex>
    8a66:	2110      	movs	r1, #16
    8a68:	9007      	str	r0, [sp, #28]
    8a6a:	4650      	mov	r0, sl
    8a6c:	f7f9 f916 	bl	1c9c <bt_hex>
    8a70:	4c15      	ldr	r4, [pc, #84]	; (8ac8 <bt_encrypt_le+0x7c>)
    8a72:	4f16      	ldr	r7, [pc, #88]	; (8acc <bt_encrypt_le+0x80>)
    8a74:	4e16      	ldr	r6, [pc, #88]	; (8ad0 <bt_encrypt_le+0x84>)
    8a76:	4d17      	ldr	r5, [pc, #92]	; (8ad4 <bt_encrypt_le+0x88>)
    8a78:	9b07      	ldr	r3, [sp, #28]
    8a7a:	9003      	str	r0, [sp, #12]
    8a7c:	9302      	str	r3, [sp, #8]
    8a7e:	4632      	mov	r2, r6
    8a80:	463b      	mov	r3, r7
    8a82:	4629      	mov	r1, r5
    8a84:	9404      	str	r4, [sp, #16]
    8a86:	e88d 0810 	stmia.w	sp, {r4, fp}
    8a8a:	4813      	ldr	r0, [pc, #76]	; (8ad8 <bt_encrypt_le+0x8c>)
    8a8c:	f7f8 fa7e 	bl	f8c <printk>

	ecb_encrypt(key, plaintext, enc_data, NULL);
    8a90:	4642      	mov	r2, r8
    8a92:	2300      	movs	r3, #0
    8a94:	4651      	mov	r1, sl
    8a96:	4648      	mov	r0, r9
    8a98:	f00a fba6 	bl	131e8 <ecb_encrypt>
    8a9c:	f00c fa62 	bl	14f64 <_impl_k_current_get>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));
    8aa0:	2110      	movs	r1, #16
    8aa2:	4681      	mov	r9, r0
    8aa4:	4640      	mov	r0, r8
    8aa6:	f7f9 f8f9 	bl	1c9c <bt_hex>
    8aaa:	9403      	str	r4, [sp, #12]
    8aac:	9002      	str	r0, [sp, #8]
    8aae:	e88d 0210 	stmia.w	sp, {r4, r9}
    8ab2:	463b      	mov	r3, r7
    8ab4:	4632      	mov	r2, r6
    8ab6:	4629      	mov	r1, r5
    8ab8:	4808      	ldr	r0, [pc, #32]	; (8adc <bt_encrypt_le+0x90>)
    8aba:	f7f8 fa67 	bl	f8c <printk>

	return 0;
}
    8abe:	2000      	movs	r0, #0
    8ac0:	b009      	add	sp, #36	; 0x24
    8ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ac6:	bf00      	nop
    8ac8:	00015af1 	.word	0x00015af1
    8acc:	000182d5 	.word	0x000182d5
    8ad0:	00016059 	.word	0x00016059
    8ad4:	00016060 	.word	0x00016060
    8ad8:	000182e3 	.word	0x000182e3
    8adc:	0001830c 	.word	0x0001830c

00008ae0 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8ae0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    8ae2:	4802      	ldr	r0, [pc, #8]	; (8aec <_hci_driver_init+0xc>)
    8ae4:	f7fb fb9c 	bl	4220 <bt_hci_driver_register>

	return 0;
}
    8ae8:	2000      	movs	r0, #0
    8aea:	bd08      	pop	{r3, pc}
    8aec:	000183a8 	.word	0x000183a8

00008af0 <hci_driver_send>:
{
    8af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8af2:	b087      	sub	sp, #28
    8af4:	4606      	mov	r6, r0
    8af6:	f00c fa35 	bl	14f64 <_impl_k_current_get>
	BT_DBG("enter");
    8afa:	4c3b      	ldr	r4, [pc, #236]	; (8be8 <hci_driver_send+0xf8>)
    8afc:	9001      	str	r0, [sp, #4]
    8afe:	4b3b      	ldr	r3, [pc, #236]	; (8bec <hci_driver_send+0xfc>)
    8b00:	9402      	str	r4, [sp, #8]
    8b02:	9400      	str	r4, [sp, #0]
    8b04:	4a3a      	ldr	r2, [pc, #232]	; (8bf0 <hci_driver_send+0x100>)
    8b06:	493b      	ldr	r1, [pc, #236]	; (8bf4 <hci_driver_send+0x104>)
    8b08:	483b      	ldr	r0, [pc, #236]	; (8bf8 <hci_driver_send+0x108>)
    8b0a:	f7f8 fa3f 	bl	f8c <printk>
	if (!buf->len) {
    8b0e:	89b3      	ldrh	r3, [r6, #12]
    8b10:	4625      	mov	r5, r4
    8b12:	b963      	cbnz	r3, 8b2e <hci_driver_send+0x3e>
		BT_ERR("Empty HCI packet");
    8b14:	9401      	str	r4, [sp, #4]
    8b16:	9400      	str	r4, [sp, #0]
    8b18:	4b34      	ldr	r3, [pc, #208]	; (8bec <hci_driver_send+0xfc>)
    8b1a:	4a38      	ldr	r2, [pc, #224]	; (8bfc <hci_driver_send+0x10c>)
    8b1c:	4935      	ldr	r1, [pc, #212]	; (8bf4 <hci_driver_send+0x104>)
    8b1e:	4838      	ldr	r0, [pc, #224]	; (8c00 <hci_driver_send+0x110>)
    8b20:	f7f8 fa34 	bl	f8c <printk>
		return -EINVAL;
    8b24:	f06f 0415 	mvn.w	r4, #21
}
    8b28:	4620      	mov	r0, r4
    8b2a:	b007      	add	sp, #28
    8b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8b2e:	7d33      	ldrb	r3, [r6, #20]
	switch (type) {
    8b30:	2b00      	cmp	r3, #0
    8b32:	d02b      	beq.n	8b8c <hci_driver_send+0x9c>
    8b34:	2b02      	cmp	r3, #2
    8b36:	d149      	bne.n	8bcc <hci_driver_send+0xdc>
	err = hci_acl_handle(buf, &evt);
    8b38:	a905      	add	r1, sp, #20
    8b3a:	4630      	mov	r0, r6
    8b3c:	f001 fb74 	bl	a228 <hci_acl_handle>
	if (evt) {
    8b40:	9b05      	ldr	r3, [sp, #20]
	err = hci_acl_handle(buf, &evt);
    8b42:	4604      	mov	r4, r0
	if (evt) {
    8b44:	b183      	cbz	r3, 8b68 <hci_driver_send+0x78>
    8b46:	f00c fa0d 	bl	14f64 <_impl_k_current_get>
		BT_DBG("Replying with event of %u bytes", evt->len);
    8b4a:	9b05      	ldr	r3, [sp, #20]
    8b4c:	9503      	str	r5, [sp, #12]
    8b4e:	899b      	ldrh	r3, [r3, #12]
    8b50:	9302      	str	r3, [sp, #8]
    8b52:	9001      	str	r0, [sp, #4]
    8b54:	9500      	str	r5, [sp, #0]
    8b56:	4b2b      	ldr	r3, [pc, #172]	; (8c04 <hci_driver_send+0x114>)
    8b58:	4a25      	ldr	r2, [pc, #148]	; (8bf0 <hci_driver_send+0x100>)
    8b5a:	4926      	ldr	r1, [pc, #152]	; (8bf4 <hci_driver_send+0x104>)
    8b5c:	482a      	ldr	r0, [pc, #168]	; (8c08 <hci_driver_send+0x118>)
    8b5e:	f7f8 fa15 	bl	f8c <printk>
		bt_recv_prio(evt);
    8b62:	9805      	ldr	r0, [sp, #20]
    8b64:	f7fb fa32 	bl	3fcc <bt_recv_prio>
	if (!err) {
    8b68:	b91c      	cbnz	r4, 8b72 <hci_driver_send+0x82>
		net_buf_unref(buf);
    8b6a:	4630      	mov	r0, r6
    8b6c:	f00b f972 	bl	13e54 <net_buf_unref>
    8b70:	2400      	movs	r4, #0
    8b72:	f00c f9f7 	bl	14f64 <_impl_k_current_get>
	BT_DBG("exit: %d", err);
    8b76:	9503      	str	r5, [sp, #12]
    8b78:	9001      	str	r0, [sp, #4]
    8b7a:	9402      	str	r4, [sp, #8]
    8b7c:	9500      	str	r5, [sp, #0]
    8b7e:	4b1b      	ldr	r3, [pc, #108]	; (8bec <hci_driver_send+0xfc>)
    8b80:	4a1b      	ldr	r2, [pc, #108]	; (8bf0 <hci_driver_send+0x100>)
    8b82:	491c      	ldr	r1, [pc, #112]	; (8bf4 <hci_driver_send+0x104>)
    8b84:	4821      	ldr	r0, [pc, #132]	; (8c0c <hci_driver_send+0x11c>)
    8b86:	f7f8 fa01 	bl	f8c <printk>
	return err;
    8b8a:	e7cd      	b.n	8b28 <hci_driver_send+0x38>
	evt = hci_cmd_handle(buf);
    8b8c:	4630      	mov	r0, r6
    8b8e:	f000 fd3f 	bl	9610 <hci_cmd_handle>
	if (evt) {
    8b92:	4604      	mov	r4, r0
    8b94:	2800      	cmp	r0, #0
    8b96:	d0e8      	beq.n	8b6a <hci_driver_send+0x7a>
		hdr = (void *)evt->data;
    8b98:	6887      	ldr	r7, [r0, #8]
    8b9a:	f00c f9e3 	bl	14f64 <_impl_k_current_get>
		BT_DBG("Replying with event of %u bytes", evt->len);
    8b9e:	9503      	str	r5, [sp, #12]
    8ba0:	89a3      	ldrh	r3, [r4, #12]
    8ba2:	9302      	str	r3, [sp, #8]
    8ba4:	9001      	str	r0, [sp, #4]
    8ba6:	4a12      	ldr	r2, [pc, #72]	; (8bf0 <hci_driver_send+0x100>)
    8ba8:	9500      	str	r5, [sp, #0]
    8baa:	4b19      	ldr	r3, [pc, #100]	; (8c10 <hci_driver_send+0x120>)
    8bac:	4911      	ldr	r1, [pc, #68]	; (8bf4 <hci_driver_send+0x104>)
    8bae:	4816      	ldr	r0, [pc, #88]	; (8c08 <hci_driver_send+0x118>)
    8bb0:	f7f8 f9ec 	bl	f8c <printk>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    8bb4:	783a      	ldrb	r2, [r7, #0]
    8bb6:	2a13      	cmp	r2, #19
    8bb8:	d812      	bhi.n	8be0 <hci_driver_send+0xf0>
    8bba:	2301      	movs	r3, #1
    8bbc:	4093      	lsls	r3, r2
    8bbe:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    8bc2:	d00d      	beq.n	8be0 <hci_driver_send+0xf0>
			bt_recv_prio(evt);
    8bc4:	4620      	mov	r0, r4
    8bc6:	f7fb fa01 	bl	3fcc <bt_recv_prio>
    8bca:	e7ce      	b.n	8b6a <hci_driver_send+0x7a>
	switch (type) {
    8bcc:	9301      	str	r3, [sp, #4]
		BT_ERR("Unknown HCI type %u", type);
    8bce:	9402      	str	r4, [sp, #8]
    8bd0:	9400      	str	r4, [sp, #0]
    8bd2:	4b06      	ldr	r3, [pc, #24]	; (8bec <hci_driver_send+0xfc>)
    8bd4:	4a09      	ldr	r2, [pc, #36]	; (8bfc <hci_driver_send+0x10c>)
    8bd6:	4907      	ldr	r1, [pc, #28]	; (8bf4 <hci_driver_send+0x104>)
    8bd8:	480e      	ldr	r0, [pc, #56]	; (8c14 <hci_driver_send+0x124>)
    8bda:	f7f8 f9d7 	bl	f8c <printk>
    8bde:	e7a1      	b.n	8b24 <hci_driver_send+0x34>
			bt_recv(evt);
    8be0:	4620      	mov	r0, r4
    8be2:	f7fa fd65 	bl	36b0 <bt_recv>
    8be6:	e7c0      	b.n	8b6a <hci_driver_send+0x7a>
    8be8:	00015af1 	.word	0x00015af1
    8bec:	00018386 	.word	0x00018386
    8bf0:	00016059 	.word	0x00016059
    8bf4:	00016060 	.word	0x00016060
    8bf8:	00018407 	.word	0x00018407
    8bfc:	00016fae 	.word	0x00016fae
    8c00:	00018422 	.word	0x00018422
    8c04:	0001837b 	.word	0x0001837b
    8c08:	00018443 	.word	0x00018443
    8c0c:	0001849c 	.word	0x0001849c
    8c10:	00018370 	.word	0x00018370
    8c14:	00018478 	.word	0x00018478

00008c18 <encode_node>:
{
    8c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8c1a:	9003      	str	r0, [sp, #12]
	switch (class) {
    8c1c:	1e08      	subs	r0, r1, #0
    8c1e:	db03      	blt.n	8c28 <encode_node+0x10>
    8c20:	2802      	cmp	r0, #2
    8c22:	dd10      	ble.n	8c46 <encode_node+0x2e>
    8c24:	2803      	cmp	r0, #3
    8c26:	d02b      	beq.n	8c80 <encode_node+0x68>
		LL_ASSERT(0);
    8c28:	4b1a      	ldr	r3, [pc, #104]	; (8c94 <encode_node+0x7c>)
    8c2a:	9301      	str	r3, [sp, #4]
    8c2c:	9300      	str	r3, [sp, #0]
    8c2e:	4a1a      	ldr	r2, [pc, #104]	; (8c98 <encode_node+0x80>)
    8c30:	4b1a      	ldr	r3, [pc, #104]	; (8c9c <encode_node+0x84>)
    8c32:	491b      	ldr	r1, [pc, #108]	; (8ca0 <encode_node+0x88>)
    8c34:	481b      	ldr	r0, [pc, #108]	; (8ca4 <encode_node+0x8c>)
    8c36:	f7f8 f9a9 	bl	f8c <printk>
    8c3a:	4040      	eors	r0, r0
    8c3c:	f380 8811 	msr	BASEPRI, r0
    8c40:	f04f 0004 	mov.w	r0, #4
    8c44:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    8c46:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    8c48:	bf0e      	itee	eq
    8c4a:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8c4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8c50:	2001      	movne	r0, #1
    8c52:	f7fb fbf1 	bl	4438 <bt_buf_get_rx>
    8c56:	4604      	mov	r4, r0
		if (buf) {
    8c58:	b118      	cbz	r0, 8c62 <encode_node+0x4a>
			hci_evt_encode(node_rx, buf);
    8c5a:	4601      	mov	r1, r0
    8c5c:	9803      	ldr	r0, [sp, #12]
    8c5e:	f001 fbdf 	bl	a420 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    8c62:	9b03      	ldr	r3, [sp, #12]
    8c64:	2100      	movs	r1, #0
    8c66:	88d8      	ldrh	r0, [r3, #6]
    8c68:	f008 ff6c 	bl	11b44 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    8c6c:	a804      	add	r0, sp, #16
    8c6e:	2200      	movs	r2, #0
    8c70:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    8c74:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    8c76:	f008 feef 	bl	11a58 <ll_rx_mem_release>
}
    8c7a:	4620      	mov	r0, r4
    8c7c:	b004      	add	sp, #16
    8c7e:	bd10      	pop	{r4, pc}
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    8c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8c84:	f7fb fbd8 	bl	4438 <bt_buf_get_rx>
    8c88:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    8c8a:	4601      	mov	r1, r0
    8c8c:	9803      	ldr	r0, [sp, #12]
    8c8e:	f001 fb5b 	bl	a348 <hci_acl_encode>
		break;
    8c92:	e7e6      	b.n	8c62 <encode_node+0x4a>
    8c94:	00015af1 	.word	0x00015af1
    8c98:	00016fae 	.word	0x00016fae
    8c9c:	0001833e 	.word	0x0001833e
    8ca0:	00016060 	.word	0x00016060
    8ca4:	00016f22 	.word	0x00016f22

00008ca8 <prio_recv_thread>:
{
    8ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cac:	4c2d      	ldr	r4, [pc, #180]	; (8d64 <prio_recv_thread+0xbc>)
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
    8cae:	4e2e      	ldr	r6, [pc, #184]	; (8d68 <prio_recv_thread+0xc0>)
    8cb0:	4d2e      	ldr	r5, [pc, #184]	; (8d6c <prio_recv_thread+0xc4>)
{
    8cb2:	b088      	sub	sp, #32
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8cb4:	f10d 011a 	add.w	r1, sp, #26
    8cb8:	a807      	add	r0, sp, #28
    8cba:	f008 fe95 	bl	119e8 <ll_rx_get>
    8cbe:	4607      	mov	r7, r0
    8cc0:	b998      	cbnz	r0, 8cea <prio_recv_thread+0x42>
		if (node_rx) {
    8cc2:	9b07      	ldr	r3, [sp, #28]
    8cc4:	b38b      	cbz	r3, 8d2a <prio_recv_thread+0x82>
			ll_rx_dequeue();
    8cc6:	f009 f971 	bl	11fac <ll_rx_dequeue>
    8cca:	f00c f94b 	bl	14f64 <_impl_k_current_get>
			BT_DBG("RX node enqueue");
    8cce:	9402      	str	r4, [sp, #8]
    8cd0:	9001      	str	r0, [sp, #4]
    8cd2:	9400      	str	r4, [sp, #0]
    8cd4:	4633      	mov	r3, r6
    8cd6:	462a      	mov	r2, r5
    8cd8:	4925      	ldr	r1, [pc, #148]	; (8d70 <prio_recv_thread+0xc8>)
    8cda:	4826      	ldr	r0, [pc, #152]	; (8d74 <prio_recv_thread+0xcc>)
    8cdc:	f7f8 f956 	bl	f8c <printk>
			k_fifo_put(&recv_fifo, node_rx);
    8ce0:	9907      	ldr	r1, [sp, #28]
    8ce2:	4825      	ldr	r0, [pc, #148]	; (8d78 <prio_recv_thread+0xd0>)
    8ce4:	f00b fe88 	bl	149f8 <k_queue_append>
    8ce8:	e7e4      	b.n	8cb4 <prio_recv_thread+0xc>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8cea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8cee:	2001      	movs	r0, #1
    8cf0:	f7fb fba2 	bl	4438 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8cf4:	463a      	mov	r2, r7
    8cf6:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8cfa:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8cfc:	f001 ff52 	bl	aba4 <hci_num_cmplt_encode>
    8d00:	f00c f930 	bl	14f64 <_impl_k_current_get>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
    8d04:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8d08:	9302      	str	r3, [sp, #8]
    8d0a:	9001      	str	r0, [sp, #4]
    8d0c:	4633      	mov	r3, r6
    8d0e:	462a      	mov	r2, r5
    8d10:	4917      	ldr	r1, [pc, #92]	; (8d70 <prio_recv_thread+0xc8>)
    8d12:	9404      	str	r4, [sp, #16]
    8d14:	9703      	str	r7, [sp, #12]
    8d16:	9400      	str	r4, [sp, #0]
    8d18:	4818      	ldr	r0, [pc, #96]	; (8d7c <prio_recv_thread+0xd4>)
    8d1a:	f7f8 f937 	bl	f8c <printk>
			bt_recv_prio(buf);
    8d1e:	4640      	mov	r0, r8
    8d20:	f7fb f954 	bl	3fcc <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    8d24:	f00c f8ee 	bl	14f04 <_impl_k_yield>
    8d28:	e7c4      	b.n	8cb4 <prio_recv_thread+0xc>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8d2a:	f00c f91b 	bl	14f64 <_impl_k_current_get>
		BT_DBG("sem take...");
    8d2e:	4633      	mov	r3, r6
    8d30:	462a      	mov	r2, r5
    8d32:	9001      	str	r0, [sp, #4]
    8d34:	9402      	str	r4, [sp, #8]
    8d36:	9400      	str	r4, [sp, #0]
    8d38:	490d      	ldr	r1, [pc, #52]	; (8d70 <prio_recv_thread+0xc8>)
    8d3a:	4811      	ldr	r0, [pc, #68]	; (8d80 <prio_recv_thread+0xd8>)
    8d3c:	f7f8 f926 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8d44:	480f      	ldr	r0, [pc, #60]	; (8d84 <prio_recv_thread+0xdc>)
    8d46:	f00c f944 	bl	14fd2 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8d4a:	f00c f90b 	bl	14f64 <_impl_k_current_get>
		BT_DBG("sem taken");
    8d4e:	9402      	str	r4, [sp, #8]
    8d50:	9001      	str	r0, [sp, #4]
    8d52:	9400      	str	r4, [sp, #0]
    8d54:	4633      	mov	r3, r6
    8d56:	462a      	mov	r2, r5
    8d58:	4905      	ldr	r1, [pc, #20]	; (8d70 <prio_recv_thread+0xc8>)
    8d5a:	480b      	ldr	r0, [pc, #44]	; (8d88 <prio_recv_thread+0xe0>)
    8d5c:	f7f8 f916 	bl	f8c <printk>
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8d60:	e7a8      	b.n	8cb4 <prio_recv_thread+0xc>
    8d62:	bf00      	nop
    8d64:	00015af1 	.word	0x00015af1
    8d68:	0001832d 	.word	0x0001832d
    8d6c:	00016059 	.word	0x00016059
    8d70:	00016060 	.word	0x00016060
    8d74:	000184e7 	.word	0x000184e7
    8d78:	20003ff4 	.word	0x20003ff4
    8d7c:	000184ba 	.word	0x000184ba
    8d80:	0001850c 	.word	0x0001850c
    8d84:	20003fdc 	.word	0x20003fdc
    8d88:	0001852d 	.word	0x0001852d

00008d8c <sys_slist_get.constprop.9>:
Z_GENLIST_GET(slist, snode);
    8d8c:	4b04      	ldr	r3, [pc, #16]	; (8da0 <sys_slist_get.constprop.9+0x14>)
    8d8e:	6818      	ldr	r0, [r3, #0]
    8d90:	b128      	cbz	r0, 8d9e <sys_slist_get.constprop.9+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    8d92:	6859      	ldr	r1, [r3, #4]
	return node->next;
    8d94:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    8d96:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    8d98:	4288      	cmp	r0, r1
	list->tail = node;
    8d9a:	bf08      	it	eq
    8d9c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode);
    8d9e:	4770      	bx	lr
    8da0:	20000834 	.word	0x20000834

00008da4 <hci_driver_open>:
{
    8da4:	b530      	push	{r4, r5, lr}
	err = ll_init(&sem_prio_recv);
    8da6:	481f      	ldr	r0, [pc, #124]	; (8e24 <hci_driver_open+0x80>)
    8da8:	4d1f      	ldr	r5, [pc, #124]	; (8e28 <hci_driver_open+0x84>)
{
    8daa:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    8dac:	f009 f9dc 	bl	12168 <ll_init>
	if (err) {
    8db0:	4604      	mov	r4, r0
    8db2:	b158      	cbz	r0, 8dcc <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    8db4:	9001      	str	r0, [sp, #4]
    8db6:	4b1d      	ldr	r3, [pc, #116]	; (8e2c <hci_driver_open+0x88>)
    8db8:	4a1d      	ldr	r2, [pc, #116]	; (8e30 <hci_driver_open+0x8c>)
    8dba:	491e      	ldr	r1, [pc, #120]	; (8e34 <hci_driver_open+0x90>)
    8dbc:	481e      	ldr	r0, [pc, #120]	; (8e38 <hci_driver_open+0x94>)
    8dbe:	9502      	str	r5, [sp, #8]
    8dc0:	9500      	str	r5, [sp, #0]
	BT_DBG("Success.");
    8dc2:	f7f8 f8e3 	bl	f8c <printk>
}
    8dc6:	4620      	mov	r0, r4
    8dc8:	b007      	add	sp, #28
    8dca:	bd30      	pop	{r4, r5, pc}
	hci_init(&hbuf_signal);
    8dcc:	481b      	ldr	r0, [pc, #108]	; (8e3c <hci_driver_open+0x98>)
    8dce:	f001 ff15 	bl	abfc <hci_init>

    8dd2:	f06f 0309 	mvn.w	r3, #9
    8dd6:	9303      	str	r3, [sp, #12]
    8dd8:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    8ddc:	4b18      	ldr	r3, [pc, #96]	; (8e40 <hci_driver_open+0x9c>)
    8dde:	4919      	ldr	r1, [pc, #100]	; (8e44 <hci_driver_open+0xa0>)
    8de0:	9405      	str	r4, [sp, #20]
    8de2:	9404      	str	r4, [sp, #16]
    8de4:	9402      	str	r4, [sp, #8]
    8de6:	9401      	str	r4, [sp, #4]
    8de8:	9400      	str	r4, [sp, #0]
    8dea:	4817      	ldr	r0, [pc, #92]	; (8e48 <hci_driver_open+0xa4>)
    8dec:	f00c fac6 	bl	1537c <_impl_k_thread_create>
    8df0:	f06f 0307 	mvn.w	r3, #7
    8df4:	f240 522c 	movw	r2, #1324	; 0x52c
    8df8:	4914      	ldr	r1, [pc, #80]	; (8e4c <hci_driver_open+0xa8>)
    8dfa:	9303      	str	r3, [sp, #12]
    8dfc:	9405      	str	r4, [sp, #20]
    8dfe:	4b14      	ldr	r3, [pc, #80]	; (8e50 <hci_driver_open+0xac>)
    8e00:	9404      	str	r4, [sp, #16]
    8e02:	9402      	str	r4, [sp, #8]
    8e04:	9401      	str	r4, [sp, #4]
    8e06:	9400      	str	r4, [sp, #0]
    8e08:	4812      	ldr	r0, [pc, #72]	; (8e54 <hci_driver_open+0xb0>)
    8e0a:	f00c fab7 	bl	1537c <_impl_k_thread_create>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8e0e:	f00c f8a9 	bl	14f64 <_impl_k_current_get>
	BT_DBG("Success.");
    8e12:	9502      	str	r5, [sp, #8]
    8e14:	9001      	str	r0, [sp, #4]
    8e16:	9500      	str	r5, [sp, #0]
    8e18:	4b04      	ldr	r3, [pc, #16]	; (8e2c <hci_driver_open+0x88>)
    8e1a:	4a0f      	ldr	r2, [pc, #60]	; (8e58 <hci_driver_open+0xb4>)
    8e1c:	4905      	ldr	r1, [pc, #20]	; (8e34 <hci_driver_open+0x90>)
    8e1e:	480f      	ldr	r0, [pc, #60]	; (8e5c <hci_driver_open+0xb8>)
    8e20:	e7cf      	b.n	8dc2 <hci_driver_open+0x1e>
    8e22:	bf00      	nop
    8e24:	20003fdc 	.word	0x20003fdc
    8e28:	00015af1 	.word	0x00015af1
    8e2c:	00018396 	.word	0x00018396
    8e30:	00016fae 	.word	0x00016fae
    8e34:	00016060 	.word	0x00016060
    8e38:	000183bc 	.word	0x000183bc
    8e3c:	20003dec 	.word	0x20003dec
    8e40:	00008ca9 	.word	0x00008ca9
    8e44:	20002160 	.word	0x20002160
    8e48:	200018bc 	.word	0x200018bc
    8e4c:	20002450 	.word	0x20002450
    8e50:	00008e61 	.word	0x00008e61
    8e54:	2000184c 	.word	0x2000184c
    8e58:	00016059 	.word	0x00016059
    8e5c:	000183e9 	.word	0x000183e9

00008e60 <recv_thread>:
{
    8e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_DBG("blocking");
    8e64:	4ca2      	ldr	r4, [pc, #648]	; (90f0 <recv_thread+0x290>)
	list->head = NULL;
    8e66:	4ea3      	ldr	r6, [pc, #652]	; (90f4 <recv_thread+0x294>)
{
    8e68:	b089      	sub	sp, #36	; 0x24
    8e6a:	f00c f87b 	bl	14f64 <_impl_k_current_get>
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    8e6e:	4fa2      	ldr	r7, [pc, #648]	; (90f8 <recv_thread+0x298>)
		BT_DBG("blocking");
    8e70:	9001      	str	r0, [sp, #4]
    8e72:	4ba2      	ldr	r3, [pc, #648]	; (90fc <recv_thread+0x29c>)
    8e74:	4aa2      	ldr	r2, [pc, #648]	; (9100 <recv_thread+0x2a0>)
    8e76:	49a3      	ldr	r1, [pc, #652]	; (9104 <recv_thread+0x2a4>)
    8e78:	9402      	str	r4, [sp, #8]
    8e7a:	9400      	str	r4, [sp, #0]
    8e7c:	48a2      	ldr	r0, [pc, #648]	; (9108 <recv_thread+0x2a8>)
    8e7e:	f7f8 f885 	bl	f8c <printk>
    8e82:	2102      	movs	r1, #2
    8e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8e88:	4638      	mov	r0, r7
    8e8a:	f00c fcbb 	bl	15804 <_impl_k_poll>
		LL_ASSERT(err == 0);
    8e8e:	4601      	mov	r1, r0
    8e90:	b168      	cbz	r0, 8eae <recv_thread+0x4e>
    8e92:	4b9a      	ldr	r3, [pc, #616]	; (90fc <recv_thread+0x29c>)
    8e94:	4a9d      	ldr	r2, [pc, #628]	; (910c <recv_thread+0x2ac>)
    8e96:	499b      	ldr	r1, [pc, #620]	; (9104 <recv_thread+0x2a4>)
    8e98:	489d      	ldr	r0, [pc, #628]	; (9110 <recv_thread+0x2b0>)
    8e9a:	9401      	str	r4, [sp, #4]
    8e9c:	9400      	str	r4, [sp, #0]
		LL_ASSERT(0);
    8e9e:	f7f8 f875 	bl	f8c <printk>
    8ea2:	4040      	eors	r0, r0
    8ea4:	f380 8811 	msr	BASEPRI, r0
    8ea8:	f04f 0004 	mov.w	r0, #4
    8eac:	df02      	svc	2
		if (events[0].state == K_POLL_STATE_SIGNALED) {
    8eae:	7b7b      	ldrb	r3, [r7, #13]
    8eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8eb4:	2b10      	cmp	r3, #16
    8eb6:	d103      	bne.n	8ec0 <recv_thread+0x60>
			events[0].signal->signaled = 0;
    8eb8:	693b      	ldr	r3, [r7, #16]
    8eba:	6098      	str	r0, [r3, #8]
		struct radio_pdu_node_rx *node_rx = NULL;
    8ebc:	460d      	mov	r5, r1
    8ebe:	e009      	b.n	8ed4 <recv_thread+0x74>
		} else if (events[1].state ==
    8ec0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    8ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8ec8:	2b40      	cmp	r3, #64	; 0x40
    8eca:	d1f7      	bne.n	8ebc <recv_thread+0x5c>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    8ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8ece:	f00b fdb7 	bl	14a40 <_impl_k_queue_get>
    8ed2:	4605      	mov	r5, r0
		events[0].state = K_POLL_STATE_NOT_READY;
    8ed4:	7b7b      	ldrb	r3, [r7, #13]
    8ed6:	f36f 1307 	bfc	r3, #4, #4
    8eda:	737b      	strb	r3, [r7, #13]
		events[1].state = K_POLL_STATE_NOT_READY;
    8edc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    8ee0:	f36f 1307 	bfc	r3, #4, #4
    8ee4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	s32_t hbuf_total = hci_hbuf_total;
    8ee8:	4b8a      	ldr	r3, [pc, #552]	; (9114 <recv_thread+0x2b4>)
    8eea:	f8d3 8000 	ldr.w	r8, [r3]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8eee:	4b8a      	ldr	r3, [pc, #552]	; (9118 <recv_thread+0x2b8>)
    8ef0:	f3bf 8f5b 	dmb	ish
    8ef4:	e853 2f00 	ldrex	r2, [r3]
    8ef8:	f022 0101 	bic.w	r1, r2, #1
    8efc:	e843 1000 	strex	r0, r1, [r3]
    8f00:	2800      	cmp	r0, #0
    8f02:	d1f7      	bne.n	8ef4 <recv_thread+0x94>
    8f04:	f3bf 8f5b 	dmb	ish
	if (reset) {
    8f08:	07d1      	lsls	r1, r2, #31
    8f0a:	bf42      	ittt	mi
    8f0c:	2300      	movmi	r3, #0
    8f0e:	6033      	strmi	r3, [r6, #0]
	list->tail = NULL;
    8f10:	6073      	strmi	r3, [r6, #4]
	if (hbuf_total <= 0) {
    8f12:	f1b8 0f00 	cmp.w	r8, #0
    8f16:	4f81      	ldr	r7, [pc, #516]	; (911c <recv_thread+0x2bc>)
    8f18:	dc26      	bgt.n	8f68 <recv_thread+0x108>
		hbuf_count = -1;
    8f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f1e:	603b      	str	r3, [r7, #0]
		return NULL;
    8f20:	f04f 0900 	mov.w	r9, #0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8f24:	f00c f81e 	bl	14f64 <_impl_k_current_get>
		BT_DBG("unblocked");
    8f28:	9402      	str	r4, [sp, #8]
    8f2a:	9001      	str	r0, [sp, #4]
    8f2c:	9400      	str	r4, [sp, #0]
    8f2e:	4b73      	ldr	r3, [pc, #460]	; (90fc <recv_thread+0x29c>)
    8f30:	4a73      	ldr	r2, [pc, #460]	; (9100 <recv_thread+0x2a0>)
    8f32:	4974      	ldr	r1, [pc, #464]	; (9104 <recv_thread+0x2a4>)
    8f34:	487a      	ldr	r0, [pc, #488]	; (9120 <recv_thread+0x2c0>)
    8f36:	f7f8 f829 	bl	f8c <printk>
		if (node_rx && !buf) {
    8f3a:	2d00      	cmp	r5, #0
    8f3c:	f000 80b2 	beq.w	90a4 <recv_thread+0x244>
    8f40:	f1b9 0f00 	cmp.w	r9, #0
    8f44:	f040 80b1 	bne.w	90aa <recv_thread+0x24a>
	s8_t class = hci_get_class(node_rx);
    8f48:	4628      	mov	r0, r5
    8f4a:	f001 fe3f 	bl	abcc <hci_get_class>
	if (hbuf_count != -1) {
    8f4e:	683b      	ldr	r3, [r7, #0]
    8f50:	1c5a      	adds	r2, r3, #1
	s8_t class = hci_get_class(node_rx);
    8f52:	4680      	mov	r8, r0
	if (hbuf_count != -1) {
    8f54:	f000 80a1 	beq.w	909a <recv_thread+0x23a>
    8f58:	6832      	ldr	r2, [r6, #0]
		switch (class) {
    8f5a:	2803      	cmp	r0, #3
    8f5c:	f200 80c0 	bhi.w	90e0 <recv_thread+0x280>
    8f60:	e8df f000 	tbb	[pc, r0]
    8f64:	977d9b9b 	.word	0x977d9b9b
	hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    8f68:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 9148 <recv_thread+0x2e8>
    8f6c:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 914c <recv_thread+0x2ec>
    8f70:	f8db 3000 	ldr.w	r3, [fp]
    8f74:	f8da 2000 	ldr.w	r2, [sl]
    8f78:	eba8 0303 	sub.w	r3, r8, r3
    8f7c:	4413      	add	r3, r2
    8f7e:	603b      	str	r3, [r7, #0]
    8f80:	6833      	ldr	r3, [r6, #0]
    8f82:	9307      	str	r3, [sp, #28]
	if (!node) {
    8f84:	2b00      	cmp	r3, #0
    8f86:	d0cb      	beq.n	8f20 <recv_thread+0xc0>
	class = hci_get_class(node_rx);
    8f88:	9807      	ldr	r0, [sp, #28]
    8f8a:	f001 fe1f 	bl	abcc <hci_get_class>
    8f8e:	4681      	mov	r9, r0
	if (n) {
    8f90:	b1b5      	cbz	r5, 8fc0 <recv_thread+0x160>
		if (class == HCI_CLASS_EVT_CONNECTION ||
    8f92:	2802      	cmp	r0, #2
    8f94:	d004      	beq.n	8fa0 <recv_thread+0x140>
    8f96:	2803      	cmp	r0, #3
    8f98:	d1c2      	bne.n	8f20 <recv_thread+0xc0>
		    (class == HCI_CLASS_ACL_DATA && hbuf_count)) {
    8f9a:	683b      	ldr	r3, [r7, #0]
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d0bf      	beq.n	8f20 <recv_thread+0xc0>
    8fa0:	f00b ffe0 	bl	14f64 <_impl_k_current_get>
			BT_DBG("FC: signalling");
    8fa4:	9402      	str	r4, [sp, #8]
    8fa6:	9001      	str	r0, [sp, #4]
    8fa8:	9400      	str	r4, [sp, #0]
    8faa:	4b5e      	ldr	r3, [pc, #376]	; (9124 <recv_thread+0x2c4>)
    8fac:	4a54      	ldr	r2, [pc, #336]	; (9100 <recv_thread+0x2a0>)
    8fae:	4955      	ldr	r1, [pc, #340]	; (9104 <recv_thread+0x2a4>)
    8fb0:	485d      	ldr	r0, [pc, #372]	; (9128 <recv_thread+0x2c8>)
    8fb2:	f7f7 ffeb 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    8fb6:	2100      	movs	r1, #0
    8fb8:	485c      	ldr	r0, [pc, #368]	; (912c <recv_thread+0x2cc>)
    8fba:	f00c fcb3 	bl	15924 <_impl_k_poll_signal>
    8fbe:	e7af      	b.n	8f20 <recv_thread+0xc0>
	switch (class) {
    8fc0:	2802      	cmp	r0, #2
    8fc2:	d008      	beq.n	8fd6 <recv_thread+0x176>
    8fc4:	2803      	cmp	r0, #3
    8fc6:	d03c      	beq.n	9042 <recv_thread+0x1e2>
		LL_ASSERT(0);
    8fc8:	4b56      	ldr	r3, [pc, #344]	; (9124 <recv_thread+0x2c4>)
    8fca:	9401      	str	r4, [sp, #4]
    8fcc:	9400      	str	r4, [sp, #0]
    8fce:	4a4f      	ldr	r2, [pc, #316]	; (910c <recv_thread+0x2ac>)
    8fd0:	494c      	ldr	r1, [pc, #304]	; (9104 <recv_thread+0x2a4>)
    8fd2:	4857      	ldr	r0, [pc, #348]	; (9130 <recv_thread+0x2d0>)
    8fd4:	e763      	b.n	8e9e <recv_thread+0x3e>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8fd6:	f00b ffc5 	bl	14f64 <_impl_k_current_get>
		BT_DBG("FC: dequeueing event");
    8fda:	4b52      	ldr	r3, [pc, #328]	; (9124 <recv_thread+0x2c4>)
    8fdc:	9001      	str	r0, [sp, #4]
    8fde:	4a48      	ldr	r2, [pc, #288]	; (9100 <recv_thread+0x2a0>)
    8fe0:	4948      	ldr	r1, [pc, #288]	; (9104 <recv_thread+0x2a4>)
    8fe2:	4854      	ldr	r0, [pc, #336]	; (9134 <recv_thread+0x2d4>)
    8fe4:	9402      	str	r4, [sp, #8]
    8fe6:	9400      	str	r4, [sp, #0]
			BT_DBG("FC: dequeueing ACL data");
    8fe8:	f7f7 ffd0 	bl	f8c <printk>
			(void) sys_slist_get(&hbuf_pend);
    8fec:	f7ff fece 	bl	8d8c <sys_slist_get.constprop.9>
		buf = encode_node(node_rx, class);
    8ff0:	4649      	mov	r1, r9
    8ff2:	9807      	ldr	r0, [sp, #28]
    8ff4:	f7ff fe10 	bl	8c18 <encode_node>
		hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    8ff8:	f8db 3000 	ldr.w	r3, [fp]
    8ffc:	eba8 0803 	sub.w	r8, r8, r3
    9000:	f8da 3000 	ldr.w	r3, [sl]
		buf = encode_node(node_rx, class);
    9004:	4681      	mov	r9, r0
    9006:	6830      	ldr	r0, [r6, #0]
		hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    9008:	4443      	add	r3, r8
    900a:	603b      	str	r3, [r7, #0]
		if (node) {
    900c:	2800      	cmp	r0, #0
    900e:	d089      	beq.n	8f24 <recv_thread+0xc4>
			class = hci_get_class(node_rx);
    9010:	f001 fddc 	bl	abcc <hci_get_class>
			if (class == HCI_CLASS_EVT_CONNECTION ||
    9014:	2802      	cmp	r0, #2
    9016:	d004      	beq.n	9022 <recv_thread+0x1c2>
    9018:	2803      	cmp	r0, #3
    901a:	d183      	bne.n	8f24 <recv_thread+0xc4>
			    (class == HCI_CLASS_ACL_DATA && hbuf_count)) {
    901c:	683b      	ldr	r3, [r7, #0]
    901e:	2b00      	cmp	r3, #0
    9020:	d080      	beq.n	8f24 <recv_thread+0xc4>
    9022:	f00b ff9f 	bl	14f64 <_impl_k_current_get>
				BT_DBG("FC: signalling");
    9026:	9402      	str	r4, [sp, #8]
    9028:	9001      	str	r0, [sp, #4]
    902a:	9400      	str	r4, [sp, #0]
    902c:	4b3d      	ldr	r3, [pc, #244]	; (9124 <recv_thread+0x2c4>)
    902e:	4a34      	ldr	r2, [pc, #208]	; (9100 <recv_thread+0x2a0>)
    9030:	4934      	ldr	r1, [pc, #208]	; (9104 <recv_thread+0x2a4>)
    9032:	483d      	ldr	r0, [pc, #244]	; (9128 <recv_thread+0x2c8>)
    9034:	f7f7 ffaa 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    9038:	2100      	movs	r1, #0
    903a:	483c      	ldr	r0, [pc, #240]	; (912c <recv_thread+0x2cc>)
    903c:	f00c fc72 	bl	15924 <_impl_k_poll_signal>
    9040:	e770      	b.n	8f24 <recv_thread+0xc4>
		if (hbuf_count) {
    9042:	683b      	ldr	r3, [r7, #0]
    9044:	2b00      	cmp	r3, #0
    9046:	f43f af6b 	beq.w	8f20 <recv_thread+0xc0>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    904a:	f00b ff8b 	bl	14f64 <_impl_k_current_get>
			BT_DBG("FC: dequeueing ACL data");
    904e:	9402      	str	r4, [sp, #8]
    9050:	9001      	str	r0, [sp, #4]
    9052:	9400      	str	r4, [sp, #0]
    9054:	4b33      	ldr	r3, [pc, #204]	; (9124 <recv_thread+0x2c4>)
    9056:	4a2a      	ldr	r2, [pc, #168]	; (9100 <recv_thread+0x2a0>)
    9058:	492a      	ldr	r1, [pc, #168]	; (9104 <recv_thread+0x2a4>)
    905a:	4837      	ldr	r0, [pc, #220]	; (9138 <recv_thread+0x2d8>)
    905c:	e7c4      	b.n	8fe8 <recv_thread+0x188>
			hbuf_count = 1;
    905e:	2301      	movs	r3, #1
    9060:	603b      	str	r3, [r7, #0]
			if (pend || !hbuf_count) {
    9062:	b1d2      	cbz	r2, 909a <recv_thread+0x23a>
	parent->next = child;
    9064:	2300      	movs	r3, #0
    9066:	602b      	str	r3, [r5, #0]
    9068:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_APPEND(slist, snode);
    906a:	2b00      	cmp	r3, #0
    906c:	d135      	bne.n	90da <recv_thread+0x27a>
	list->tail = node;
    906e:	6075      	str	r5, [r6, #4]
	list->head = node;
    9070:	6035      	str	r5, [r6, #0]
    9072:	f00b ff77 	bl	14f64 <_impl_k_current_get>
				BT_DBG("FC: Queuing item: %d", class);
    9076:	9403      	str	r4, [sp, #12]
    9078:	9001      	str	r0, [sp, #4]
		switch (class) {
    907a:	f8cd 8008 	str.w	r8, [sp, #8]
				BT_DBG("FC: Queuing item: %d", class);
    907e:	9400      	str	r4, [sp, #0]
    9080:	4b2e      	ldr	r3, [pc, #184]	; (913c <recv_thread+0x2dc>)
    9082:	4a1f      	ldr	r2, [pc, #124]	; (9100 <recv_thread+0x2a0>)
    9084:	491f      	ldr	r1, [pc, #124]	; (9104 <recv_thread+0x2a4>)
    9086:	482e      	ldr	r0, [pc, #184]	; (9140 <recv_thread+0x2e0>)
    9088:	f7f7 ff80 	bl	f8c <printk>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    908c:	f00b ff3a 	bl	14f04 <_impl_k_yield>
    9090:	e6eb      	b.n	8e6a <recv_thread+0xa>
			if (pend || !hbuf_count) {
    9092:	2a00      	cmp	r2, #0
    9094:	d1e6      	bne.n	9064 <recv_thread+0x204>
    9096:	2b00      	cmp	r3, #0
    9098:	d0e4      	beq.n	9064 <recv_thread+0x204>
	buf = encode_node(node_rx, class);
    909a:	4641      	mov	r1, r8
    909c:	4628      	mov	r0, r5
    909e:	f7ff fdbb 	bl	8c18 <encode_node>
    90a2:	4681      	mov	r9, r0
		if (buf) {
    90a4:	f1b9 0f00 	cmp.w	r9, #0
    90a8:	d0f0      	beq.n	908c <recv_thread+0x22c>
			if (buf->len) {
    90aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    90ae:	b1db      	cbz	r3, 90e8 <recv_thread+0x288>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    90b0:	f00b ff58 	bl	14f64 <_impl_k_current_get>
				BT_DBG("Packet in: type:%u len:%u",
    90b4:	9404      	str	r4, [sp, #16]
    90b6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    90ba:	9303      	str	r3, [sp, #12]
    90bc:	f899 3014 	ldrb.w	r3, [r9, #20]
    90c0:	9302      	str	r3, [sp, #8]
    90c2:	9001      	str	r0, [sp, #4]
    90c4:	9400      	str	r4, [sp, #0]
    90c6:	4b0d      	ldr	r3, [pc, #52]	; (90fc <recv_thread+0x29c>)
    90c8:	4a0d      	ldr	r2, [pc, #52]	; (9100 <recv_thread+0x2a0>)
    90ca:	490e      	ldr	r1, [pc, #56]	; (9104 <recv_thread+0x2a4>)
    90cc:	481d      	ldr	r0, [pc, #116]	; (9144 <recv_thread+0x2e4>)
    90ce:	f7f7 ff5d 	bl	f8c <printk>
				bt_recv(buf);
    90d2:	4648      	mov	r0, r9
    90d4:	f7fa faec 	bl	36b0 <bt_recv>
    90d8:	e7d8      	b.n	908c <recv_thread+0x22c>
	parent->next = child;
    90da:	601d      	str	r5, [r3, #0]
	list->tail = node;
    90dc:	6075      	str	r5, [r6, #4]
    90de:	e7c8      	b.n	9072 <recv_thread+0x212>
			LL_ASSERT(0);
    90e0:	9401      	str	r4, [sp, #4]
    90e2:	9400      	str	r4, [sp, #0]
    90e4:	4b15      	ldr	r3, [pc, #84]	; (913c <recv_thread+0x2dc>)
    90e6:	e772      	b.n	8fce <recv_thread+0x16e>
				net_buf_unref(buf);
    90e8:	4648      	mov	r0, r9
    90ea:	f00a feb3 	bl	13e54 <net_buf_unref>
    90ee:	e7cd      	b.n	908c <recv_thread+0x22c>
    90f0:	00015af1 	.word	0x00015af1
    90f4:	20000834 	.word	0x20000834
    90f8:	20003dc4 	.word	0x20003dc4
    90fc:	00018364 	.word	0x00018364
    9100:	00016059 	.word	0x00016059
    9104:	00016060 	.word	0x00016060
    9108:	0001854c 	.word	0x0001854c
    910c:	00016fae 	.word	0x00016fae
    9110:	0001710d 	.word	0x0001710d
    9114:	20001930 	.word	0x20001930
    9118:	20001938 	.word	0x20001938
    911c:	20000830 	.word	0x20000830
    9120:	000185e5 	.word	0x000185e5
    9124:	00018357 	.word	0x00018357
    9128:	0001856a 	.word	0x0001856a
    912c:	20003dec 	.word	0x20003dec
    9130:	00016f22 	.word	0x00016f22
    9134:	0001858e 	.word	0x0001858e
    9138:	000185b8 	.word	0x000185b8
    913c:	0001834a 	.word	0x0001834a
    9140:	00018604 	.word	0x00018604
    9144:	0001862e 	.word	0x0001862e
    9148:	20001934 	.word	0x20001934
    914c:	2000193c 	.word	0x2000193c

00009150 <sys_put_le32>:
	dst[1] = val >> 8;
    9150:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    9154:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    9156:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    9158:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    915a:	0a00      	lsrs	r0, r0, #8
    915c:	704b      	strb	r3, [r1, #1]
    915e:	70c8      	strb	r0, [r1, #3]
    9160:	4770      	bx	lr

00009162 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    9162:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    9164:	3008      	adds	r0, #8
{
    9166:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    9168:	2102      	movs	r1, #2
{
    916a:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    916c:	f00a fea4 	bl	13eb8 <net_buf_simple_add>
	hdr->evt = evt;
    9170:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    9172:	7044      	strb	r4, [r0, #1]
    9174:	bd38      	pop	{r3, r4, r5, pc}
	...

00009178 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    9178:	b538      	push	{r3, r4, r5, lr}
    917a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    917c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9180:	f7fb f970 	bl	4464 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    9184:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    9186:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    9188:	210f      	movs	r1, #15
    918a:	f7ff ffea 	bl	9162 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    918e:	2104      	movs	r1, #4
    9190:	f104 0008 	add.w	r0, r4, #8
    9194:	f00a fe90 	bl	13eb8 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    9198:	2301      	movs	r3, #1
    919a:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    919c:	4b02      	ldr	r3, [pc, #8]	; (91a8 <cmd_status+0x30>)
	cs->status = status;
    919e:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    91a0:	881b      	ldrh	r3, [r3, #0]
    91a2:	8043      	strh	r3, [r0, #2]

	return buf;
}
    91a4:	4620      	mov	r0, r4
    91a6:	bd38      	pop	{r3, r4, r5, pc}
    91a8:	2000083c 	.word	0x2000083c

000091ac <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    91ac:	b570      	push	{r4, r5, r6, lr}
    91ae:	4604      	mov	r4, r0
    91b0:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    91b2:	3201      	adds	r2, #1
{
    91b4:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    91b6:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    91b8:	b2d2      	uxtb	r2, r2
    91ba:	213e      	movs	r1, #62	; 0x3e
    91bc:	f7ff ffd1 	bl	9162 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    91c0:	2101      	movs	r1, #1
    91c2:	4620      	mov	r0, r4
    91c4:	f00a fe78 	bl	13eb8 <net_buf_simple_add>
	me->subevent = subevt;
    91c8:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    91ca:	4629      	mov	r1, r5
    91cc:	4620      	mov	r0, r4
}
    91ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    91d2:	f00a be71 	b.w	13eb8 <net_buf_simple_add>
	...

000091d8 <cmd_complete>:
{
    91d8:	b538      	push	{r3, r4, r5, lr}
    91da:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    91dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    91e0:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    91e2:	f7fb f93f 	bl	4464 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    91e6:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    91e8:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    91ea:	b2d2      	uxtb	r2, r2
    91ec:	210e      	movs	r1, #14
    91ee:	f7ff ffb8 	bl	9162 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    91f2:	6820      	ldr	r0, [r4, #0]
    91f4:	2103      	movs	r1, #3
    91f6:	3008      	adds	r0, #8
    91f8:	f00a fe5e 	bl	13eb8 <net_buf_simple_add>
	cc->ncmd = 1;
    91fc:	2301      	movs	r3, #1
    91fe:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    9200:	4b05      	ldr	r3, [pc, #20]	; (9218 <cmd_complete+0x40>)
    9202:	881b      	ldrh	r3, [r3, #0]
    9204:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    9208:	6820      	ldr	r0, [r4, #0]
    920a:	4629      	mov	r1, r5
    920c:	3008      	adds	r0, #8
}
    920e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    9212:	f00a be51 	b.w	13eb8 <net_buf_simple_add>
    9216:	bf00      	nop
    9218:	2000083c 	.word	0x2000083c

0000921c <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    921c:	4b0e      	ldr	r3, [pc, #56]	; (9258 <encrypt_change+0x3c>)
{
    921e:	b570      	push	{r4, r5, r6, lr}
    9220:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    9222:	e9d3 2300 	ldrd	r2, r3, [r3]
    9226:	2300      	movs	r3, #0
    9228:	f002 0280 	and.w	r2, r2, #128	; 0x80
    922c:	4313      	orrs	r3, r2
{
    922e:	4604      	mov	r4, r0
    9230:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    9232:	d010      	beq.n	9256 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    9234:	2204      	movs	r2, #4
    9236:	2108      	movs	r1, #8
    9238:	4628      	mov	r0, r5
    923a:	f7ff ff92 	bl	9162 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    923e:	2104      	movs	r1, #4
    9240:	f105 0008 	add.w	r0, r5, #8
    9244:	f00a fe38 	bl	13eb8 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    9248:	fab4 f384 	clz	r3, r4
    924c:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    924e:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9250:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    9254:	70c3      	strb	r3, [r0, #3]
    9256:	bd70      	pop	{r4, r5, r6, pc}
    9258:	20003e00 	.word	0x20003e00

0000925c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    925c:	b570      	push	{r4, r5, r6, lr}
    925e:	4604      	mov	r4, r0
    9260:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9262:	4b13      	ldr	r3, [pc, #76]	; (92b0 <le_remote_feat_complete+0x54>)
{
    9264:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9266:	e9d3 2300 	ldrd	r2, r3, [r3]
    926a:	2200      	movs	r2, #0
    926c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9270:	4313      	orrs	r3, r2
{
    9272:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9274:	d01b      	beq.n	92ae <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    9276:	4b0f      	ldr	r3, [pc, #60]	; (92b4 <le_remote_feat_complete+0x58>)
    9278:	e9d3 2300 	ldrd	r2, r3, [r3]
    927c:	2300      	movs	r3, #0
    927e:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9282:	4313      	orrs	r3, r2
    9284:	d013      	beq.n	92ae <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    9286:	220b      	movs	r2, #11
    9288:	2104      	movs	r1, #4
    928a:	f7ff ff8f 	bl	91ac <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    928e:	2208      	movs	r2, #8
	sep->status = status;
    9290:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9292:	f8a0 6001 	strh.w	r6, [r0, #1]
    9296:	3003      	adds	r0, #3
	if (!status) {
    9298:	b924      	cbnz	r4, 92a4 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    929a:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    929c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    92a0:	f7f8 bcac 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    92a4:	2100      	movs	r1, #0
}
    92a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    92aa:	f7f8 bcd3 	b.w	1c54 <memset>
    92ae:	bd70      	pop	{r4, r5, r6, pc}
    92b0:	20003e00 	.word	0x20003e00
    92b4:	20003e08 	.word	0x20003e08

000092b8 <le_conn_complete.part.42>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    92b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92bc:	4605      	mov	r5, r0
    92be:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    92c0:	4b46      	ldr	r3, [pc, #280]	; (93dc <le_conn_complete.part.42+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    92c2:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    92c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    92c8:	f240 2801 	movw	r8, #513	; 0x201
    92cc:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    92d0:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    92d4:	ea03 0309 	and.w	r3, r3, r9
    92d8:	ea02 0208 	and.w	r2, r2, r8
    92dc:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    92de:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    92e0:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    92e4:	d077      	beq.n	93d6 <le_conn_complete.part.42+0x11e>
	if (!status) {
    92e6:	2d00      	cmp	r5, #0
    92e8:	d150      	bne.n	938c <le_conn_complete.part.42+0xd4>
		conn_count++;
    92ea:	4a3d      	ldr	r2, [pc, #244]	; (93e0 <le_conn_complete.part.42+0x128>)
    92ec:	6813      	ldr	r3, [r2, #0]
    92ee:	3301      	adds	r3, #1
    92f0:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    92f2:	ea5a 030b 	orrs.w	r3, sl, fp
    92f6:	f101 0803 	add.w	r8, r1, #3
    92fa:	d151      	bne.n	93a0 <le_conn_complete.part.42+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    92fc:	2212      	movs	r2, #18
    92fe:	2101      	movs	r1, #1
    9300:	f7ff ff54 	bl	91ac <meta_evt>
	lecc->status = 0x00;
    9304:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    9306:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    930a:	7863      	ldrb	r3, [r4, #1]
    930c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    930e:	78a3      	ldrb	r3, [r4, #2]
    9310:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9312:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9314:	2206      	movs	r2, #6
    9316:	4641      	mov	r1, r8
    9318:	3005      	adds	r0, #5
    931a:	f7f8 fc6f 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    931e:	8ae3      	ldrh	r3, [r4, #22]
    9320:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    9324:	8b23      	ldrh	r3, [r4, #24]
    9326:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    932a:	8b63      	ldrh	r3, [r4, #26]
    932c:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    9330:	7f23      	ldrb	r3, [r4, #28]
    9332:	747b      	strb	r3, [r7, #17]
    9334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9338:	221e      	movs	r2, #30
    933a:	210a      	movs	r1, #10
    933c:	f7ff ff36 	bl	91ac <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    9340:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9342:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    9344:	2100      	movs	r1, #0
    9346:	f7f8 fc85 	bl	1c54 <memset>
		lecc->status = status;
    934a:	7025      	strb	r5, [r4, #0]
    934c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    9350:	7d63      	ldrb	r3, [r4, #21]
    9352:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9356:	2b40      	cmp	r3, #64	; 0x40
    9358:	d138      	bne.n	93cc <le_conn_complete.part.42+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    935a:	2206      	movs	r2, #6
    935c:	f104 0110 	add.w	r1, r4, #16
    9360:	f7f8 fc4c 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    9364:	2206      	movs	r2, #6
    9366:	f104 0109 	add.w	r1, r4, #9
    936a:	f107 0011 	add.w	r0, r7, #17
    936e:	f7f8 fc45 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    9372:	8ae3      	ldrh	r3, [r4, #22]
    9374:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    9378:	8b23      	ldrh	r3, [r4, #24]
    937a:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    937e:	8b63      	ldrh	r3, [r4, #26]
    9380:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    9384:	7f23      	ldrb	r3, [r4, #28]
    9386:	777b      	strb	r3, [r7, #29]
    9388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    938c:	ea5a 030b 	orrs.w	r3, sl, fp
    9390:	d1d2      	bne.n	9338 <le_conn_complete.part.42+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9392:	2212      	movs	r2, #18
    9394:	2101      	movs	r1, #1
    9396:	f7ff ff09 	bl	91ac <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    939a:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    939c:	4604      	mov	r4, r0
    939e:	e7d1      	b.n	9344 <le_conn_complete.part.42+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    93a0:	221e      	movs	r2, #30
    93a2:	210a      	movs	r1, #10
    93a4:	f7ff ff02 	bl	91ac <meta_evt>
		leecc->status = 0x00;
    93a8:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    93aa:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    93ae:	7863      	ldrb	r3, [r4, #1]
    93b0:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    93b2:	78a3      	ldrb	r3, [r4, #2]
    93b4:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    93b6:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    93b8:	2206      	movs	r2, #6
    93ba:	4641      	mov	r1, r8
    93bc:	3005      	adds	r0, #5
    93be:	f7f8 fc1d 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    93c2:	7be3      	ldrb	r3, [r4, #15]
    93c4:	f107 000b 	add.w	r0, r7, #11
    93c8:	2b00      	cmp	r3, #0
    93ca:	d1c1      	bne.n	9350 <le_conn_complete.part.42+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    93cc:	2206      	movs	r2, #6
    93ce:	2100      	movs	r1, #0
    93d0:	f7f8 fc40 	bl	1c54 <memset>
    93d4:	e7c6      	b.n	9364 <le_conn_complete.part.42+0xac>
    93d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93da:	bf00      	nop
    93dc:	20003e08 	.word	0x20003e08
    93e0:	20000840 	.word	0x20000840

000093e4 <bt_addr_le_to_str.constprop.75>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    93e4:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    93e6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    93e8:	b08a      	sub	sp, #40	; 0x28
    93ea:	4604      	mov	r4, r0
    93ec:	460e      	mov	r6, r1
    93ee:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    93f0:	2b03      	cmp	r3, #3
    93f2:	d820      	bhi.n	9436 <bt_addr_le_to_str.constprop.75+0x52>
    93f4:	e8df f003 	tbb	[pc, r3]
    93f8:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    93fc:	4911      	ldr	r1, [pc, #68]	; (9444 <bt_addr_le_to_str.constprop.75+0x60>)
		strcpy(type, "random");
    93fe:	4628      	mov	r0, r5
    9400:	f7f8 fbc8 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    9404:	7862      	ldrb	r2, [r4, #1]
    9406:	9204      	str	r2, [sp, #16]
    9408:	78a2      	ldrb	r2, [r4, #2]
    940a:	9203      	str	r2, [sp, #12]
    940c:	78e2      	ldrb	r2, [r4, #3]
    940e:	9202      	str	r2, [sp, #8]
    9410:	7922      	ldrb	r2, [r4, #4]
    9412:	9201      	str	r2, [sp, #4]
    9414:	7962      	ldrb	r2, [r4, #5]
    9416:	9200      	str	r2, [sp, #0]
    9418:	79a3      	ldrb	r3, [r4, #6]
    941a:	9505      	str	r5, [sp, #20]
    941c:	4a0a      	ldr	r2, [pc, #40]	; (9448 <bt_addr_le_to_str.constprop.75+0x64>)
    941e:	211b      	movs	r1, #27
    9420:	4630      	mov	r0, r6
    9422:	f7f7 fdc1 	bl	fa8 <snprintk>
}
    9426:	b00a      	add	sp, #40	; 0x28
    9428:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    942a:	4908      	ldr	r1, [pc, #32]	; (944c <bt_addr_le_to_str.constprop.75+0x68>)
    942c:	e7e7      	b.n	93fe <bt_addr_le_to_str.constprop.75+0x1a>
		strcpy(type, "public id");
    942e:	4908      	ldr	r1, [pc, #32]	; (9450 <bt_addr_le_to_str.constprop.75+0x6c>)
    9430:	e7e5      	b.n	93fe <bt_addr_le_to_str.constprop.75+0x1a>
		strcpy(type, "random id");
    9432:	4908      	ldr	r1, [pc, #32]	; (9454 <bt_addr_le_to_str.constprop.75+0x70>)
    9434:	e7e3      	b.n	93fe <bt_addr_le_to_str.constprop.75+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    9436:	4a08      	ldr	r2, [pc, #32]	; (9458 <bt_addr_le_to_str.constprop.75+0x74>)
    9438:	210a      	movs	r1, #10
    943a:	4628      	mov	r0, r5
    943c:	f7f7 fdb4 	bl	fa8 <snprintk>
    9440:	e7e0      	b.n	9404 <bt_addr_le_to_str.constprop.75+0x20>
    9442:	bf00      	nop
    9444:	00015a5d 	.word	0x00015a5d
    9448:	00015a86 	.word	0x00015a86
    944c:	00015a64 	.word	0x00015a64
    9450:	00015a6b 	.word	0x00015a6b
    9454:	00015a75 	.word	0x00015a75
    9458:	00015a7f 	.word	0x00015a7f

0000945c <le_adv_ext_report.isra.69>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9460:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    9462:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9464:	4d32      	ldr	r5, [pc, #200]	; (9530 <le_adv_ext_report.isra.69+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    9466:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9468:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    946a:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    946c:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    946e:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9470:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    9472:	b25b      	sxtb	r3, r3
    9474:	9306      	str	r3, [sp, #24]
    9476:	7823      	ldrb	r3, [r4, #0]
    9478:	9201      	str	r2, [sp, #4]
    947a:	09d9      	lsrs	r1, r3, #7
    947c:	9105      	str	r1, [sp, #20]
    947e:	f3c3 1180 	ubfx	r1, r3, #6, #1
    9482:	f003 030f 	and.w	r3, r3, #15
    9486:	9104      	str	r1, [sp, #16]
    9488:	9302      	str	r3, [sp, #8]
    948a:	9500      	str	r5, [sp, #0]
    948c:	4b29      	ldr	r3, [pc, #164]	; (9534 <le_adv_ext_report.isra.69+0xd8>)
    948e:	4a2a      	ldr	r2, [pc, #168]	; (9538 <le_adv_ext_report.isra.69+0xdc>)
    9490:	492a      	ldr	r1, [pc, #168]	; (953c <le_adv_ext_report.isra.69+0xe0>)
    9492:	482b      	ldr	r0, [pc, #172]	; (9540 <le_adv_ext_report.isra.69+0xe4>)
    9494:	f7f7 fd7a 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    9498:	7823      	ldrb	r3, [r4, #0]
    949a:	f003 030f 	and.w	r3, r3, #15
    949e:	2b07      	cmp	r3, #7
    94a0:	d143      	bne.n	952a <le_adv_ext_report.isra.69+0xce>
    94a2:	7863      	ldrb	r3, [r4, #1]
    94a4:	2b00      	cmp	r3, #0
    94a6:	d040      	beq.n	952a <le_adv_ext_report.isra.69+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    94a8:	78a3      	ldrb	r3, [r4, #2]
    94aa:	4924      	ldr	r1, [pc, #144]	; (953c <le_adv_ext_report.isra.69+0xe0>)
    94ac:	9503      	str	r5, [sp, #12]
    94ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    94b2:	099b      	lsrs	r3, r3, #6
    94b4:	9202      	str	r2, [sp, #8]
    94b6:	9301      	str	r3, [sp, #4]
    94b8:	9500      	str	r5, [sp, #0]
    94ba:	4b1e      	ldr	r3, [pc, #120]	; (9534 <le_adv_ext_report.isra.69+0xd8>)
    94bc:	4a1e      	ldr	r2, [pc, #120]	; (9538 <le_adv_ext_report.isra.69+0xdc>)
    94be:	4821      	ldr	r0, [pc, #132]	; (9544 <le_adv_ext_report.isra.69+0xe8>)
    94c0:	f7f7 fd64 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    94c4:	78a3      	ldrb	r3, [r4, #2]
    94c6:	0699      	lsls	r1, r3, #26
    94c8:	d02f      	beq.n	952a <le_adv_ext_report.isra.69+0xce>
		if (h->adv_addr) {
    94ca:	78e3      	ldrb	r3, [r4, #3]
    94cc:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    94ce:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    94d2:	d51c      	bpl.n	950e <le_adv_ext_report.isra.69+0xb2>
			addr.type = adv->tx_addr;
    94d4:	7823      	ldrb	r3, [r4, #0]
    94d6:	af12      	add	r7, sp, #72	; 0x48
    94d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    94dc:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    94e0:	2206      	movs	r2, #6
    94e2:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    94e4:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    94e8:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    94ec:	f7f8 fb86 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    94f0:	4641      	mov	r1, r8
    94f2:	4638      	mov	r0, r7
    94f4:	f7ff ff76 	bl	93e4 <bt_addr_le_to_str.constprop.75>
			BT_WARN("AdvA: %s", addr_str);
    94f8:	9502      	str	r5, [sp, #8]
    94fa:	e88d 0120 	stmia.w	sp, {r5, r8}
    94fe:	4b0d      	ldr	r3, [pc, #52]	; (9534 <le_adv_ext_report.isra.69+0xd8>)
    9500:	4a0d      	ldr	r2, [pc, #52]	; (9538 <le_adv_ext_report.isra.69+0xdc>)
    9502:	490e      	ldr	r1, [pc, #56]	; (953c <le_adv_ext_report.isra.69+0xe0>)
    9504:	4810      	ldr	r0, [pc, #64]	; (9548 <le_adv_ext_report.isra.69+0xec>)
			ptr += BDADDR_SIZE;
    9506:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    950a:	f7f7 fd3f 	bl	f8c <printk>
		if (h->tx_pwr) {
    950e:	78e3      	ldrb	r3, [r4, #3]
    9510:	065b      	lsls	r3, r3, #25
    9512:	d50a      	bpl.n	952a <le_adv_ext_report.isra.69+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    9514:	9502      	str	r5, [sp, #8]
    9516:	f996 3000 	ldrsb.w	r3, [r6]
    951a:	9301      	str	r3, [sp, #4]
    951c:	9500      	str	r5, [sp, #0]
    951e:	4b05      	ldr	r3, [pc, #20]	; (9534 <le_adv_ext_report.isra.69+0xd8>)
    9520:	4a05      	ldr	r2, [pc, #20]	; (9538 <le_adv_ext_report.isra.69+0xdc>)
    9522:	4906      	ldr	r1, [pc, #24]	; (953c <le_adv_ext_report.isra.69+0xe0>)
    9524:	4809      	ldr	r0, [pc, #36]	; (954c <le_adv_ext_report.isra.69+0xf0>)
    9526:	f7f7 fd31 	bl	f8c <printk>
}
    952a:	b012      	add	sp, #72	; 0x48
    952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9530:	00015af1 	.word	0x00015af1
    9534:	000186e7 	.word	0x000186e7
    9538:	0001702e 	.word	0x0001702e
    953c:	00016060 	.word	0x00016060
    9540:	00018b12 	.word	0x00018b12
    9544:	00018b5f 	.word	0x00018b5f
    9548:	00018b90 	.word	0x00018b90
    954c:	00018ba9 	.word	0x00018ba9

00009550 <reset>:
{
    9550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dup_count = -1;
    9552:	4b22      	ldr	r3, [pc, #136]	; (95dc <reset+0x8c>)
    9554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9558:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    955a:	4b21      	ldr	r3, [pc, #132]	; (95e0 <reset+0x90>)
    955c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9560:	f641 77ff 	movw	r7, #8191	; 0x1fff
    9564:	e9c3 6700 	strd	r6, r7, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9568:	4b1e      	ldr	r3, [pc, #120]	; (95e4 <reset+0x94>)
    956a:	2600      	movs	r6, #0
    956c:	2700      	movs	r7, #0
    956e:	e9c3 6700 	strd	r6, r7, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9572:	4b1d      	ldr	r3, [pc, #116]	; (95e8 <reset+0x98>)
    9574:	261f      	movs	r6, #31
    9576:	2700      	movs	r7, #0
{
    9578:	460c      	mov	r4, r1
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    957a:	e9c3 6700 	strd	r6, r7, [r3]
	if (buf) {
    957e:	4605      	mov	r5, r0
    9580:	b138      	cbz	r0, 9592 <reset+0x42>
		ll_reset();
    9582:	f007 fe11 	bl	111a8 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    9586:	2101      	movs	r1, #1
    9588:	4620      	mov	r0, r4
    958a:	f7ff fe25 	bl	91d8 <cmd_complete>
		ccst->status = 0x00;
    958e:	2300      	movs	r3, #0
    9590:	7003      	strb	r3, [r0, #0]
	hci_hbuf_total = 0;
    9592:	4b16      	ldr	r3, [pc, #88]	; (95ec <reset+0x9c>)
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    9594:	4816      	ldr	r0, [pc, #88]	; (95f0 <reset+0xa0>)
	hci_hbuf_total = 0;
    9596:	2400      	movs	r4, #0
    9598:	601c      	str	r4, [r3, #0]
	hci_hbuf_sent = 0;
    959a:	4b16      	ldr	r3, [pc, #88]	; (95f4 <reset+0xa4>)
    959c:	601c      	str	r4, [r3, #0]
	hci_hbuf_acked = 0;
    959e:	4b16      	ldr	r3, [pc, #88]	; (95f8 <reset+0xa8>)
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    95a0:	2202      	movs	r2, #2
    95a2:	4621      	mov	r1, r4
	hci_hbuf_acked = 0;
    95a4:	601c      	str	r4, [r3, #0]
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    95a6:	f7f8 fb55 	bl	1c54 <memset>
	conn_count = 0;
    95aa:	4b14      	ldr	r3, [pc, #80]	; (95fc <reset+0xac>)
    95ac:	601c      	str	r4, [r3, #0]
	if (buf) {
    95ae:	b19d      	cbz	r5, 95d8 <reset+0x88>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    95b0:	f3bf 8f5b 	dmb	ish
    95b4:	4b12      	ldr	r3, [pc, #72]	; (9600 <reset+0xb0>)
    95b6:	e853 2f00 	ldrex	r2, [r3]
    95ba:	f042 0201 	orr.w	r2, r2, #1
    95be:	e843 2100 	strex	r1, r2, [r3]
    95c2:	2900      	cmp	r1, #0
    95c4:	d1f7      	bne.n	95b6 <reset+0x66>
    95c6:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    95ca:	4b0e      	ldr	r3, [pc, #56]	; (9604 <reset+0xb4>)
    95cc:	4621      	mov	r1, r4
    95ce:	6818      	ldr	r0, [r3, #0]
}
    95d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    95d4:	f00c b9a6 	b.w	15924 <_impl_k_poll_signal>
    95d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    95da:	bf00      	nop
    95dc:	20000844 	.word	0x20000844
    95e0:	20003e00 	.word	0x20003e00
    95e4:	200008d0 	.word	0x200008d0
    95e8:	20003e08 	.word	0x20003e08
    95ec:	20001930 	.word	0x20001930
    95f0:	2000192c 	.word	0x2000192c
    95f4:	20001934 	.word	0x20001934
    95f8:	2000193c 	.word	0x2000193c
    95fc:	20000840 	.word	0x20000840
    9600:	20001938 	.word	0x20001938
    9604:	200008d8 	.word	0x200008d8

00009608 <sys_get_le64>:
{
    9608:	4603      	mov	r3, r0
}
    960a:	6800      	ldr	r0, [r0, #0]
    960c:	6859      	ldr	r1, [r3, #4]
    960e:	4770      	bx	lr

00009610 <hci_cmd_handle>:
{
    9610:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    9612:	8981      	ldrh	r1, [r0, #12]
{
    9614:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    9616:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    9618:	2902      	cmp	r1, #2
{
    961a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    961c:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    961e:	d80b      	bhi.n	9638 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    9620:	4ba5      	ldr	r3, [pc, #660]	; (98b8 <hci_cmd_handle+0x2a8>)
    9622:	9301      	str	r3, [sp, #4]
    9624:	9300      	str	r3, [sp, #0]
    9626:	4aa5      	ldr	r2, [pc, #660]	; (98bc <hci_cmd_handle+0x2ac>)
    9628:	4ba5      	ldr	r3, [pc, #660]	; (98c0 <hci_cmd_handle+0x2b0>)
    962a:	49a6      	ldr	r1, [pc, #664]	; (98c4 <hci_cmd_handle+0x2b4>)
    962c:	48a6      	ldr	r0, [pc, #664]	; (98c8 <hci_cmd_handle+0x2b8>)
		BT_ERR("Invalid HCI CMD packet length");
    962e:	f7f7 fcad 	bl	f8c <printk>
		return NULL;
    9632:	4628      	mov	r0, r5
}
    9634:	b013      	add	sp, #76	; 0x4c
    9636:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    9638:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    963a:	4ea4      	ldr	r6, [pc, #656]	; (98cc <hci_cmd_handle+0x2bc>)
    963c:	781a      	ldrb	r2, [r3, #0]
    963e:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    9640:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9642:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    9646:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9648:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    964a:	d907      	bls.n	965c <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    964c:	4b9a      	ldr	r3, [pc, #616]	; (98b8 <hci_cmd_handle+0x2a8>)
    964e:	9301      	str	r3, [sp, #4]
    9650:	9300      	str	r3, [sp, #0]
    9652:	4a9a      	ldr	r2, [pc, #616]	; (98bc <hci_cmd_handle+0x2ac>)
    9654:	4b9a      	ldr	r3, [pc, #616]	; (98c0 <hci_cmd_handle+0x2b0>)
    9656:	499b      	ldr	r1, [pc, #620]	; (98c4 <hci_cmd_handle+0x2b4>)
    9658:	489d      	ldr	r0, [pc, #628]	; (98d0 <hci_cmd_handle+0x2c0>)
    965a:	e7e8      	b.n	962e <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    965c:	2103      	movs	r1, #3
    965e:	f104 0008 	add.w	r0, r4, #8
    9662:	f00a fc57 	bl	13f14 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    9666:	8833      	ldrh	r3, [r6, #0]
    9668:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    966c:	0a9b      	lsrs	r3, r3, #10
    966e:	2b04      	cmp	r3, #4
    9670:	f000 8161 	beq.w	9936 <hci_cmd_handle+0x326>
    9674:	d809      	bhi.n	968a <hci_cmd_handle+0x7a>
    9676:	2b01      	cmp	r3, #1
    9678:	d026      	beq.n	96c8 <hci_cmd_handle+0xb8>
    967a:	2b03      	cmp	r3, #3
    967c:	d03b      	beq.n	96f6 <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    967e:	2101      	movs	r1, #1
    9680:	a807      	add	r0, sp, #28
    9682:	f7ff fda9 	bl	91d8 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    9686:	2301      	movs	r3, #1
    9688:	e05c      	b.n	9744 <hci_cmd_handle+0x134>
	switch (BT_OGF(_opcode)) {
    968a:	2b08      	cmp	r3, #8
    968c:	f000 81f5 	beq.w	9a7a <hci_cmd_handle+0x46a>
    9690:	2b3f      	cmp	r3, #63	; 0x3f
    9692:	d1f4      	bne.n	967e <hci_cmd_handle+0x6e>
	switch (ocf) {
    9694:	3a01      	subs	r2, #1
    9696:	2a09      	cmp	r2, #9
    9698:	d8f1      	bhi.n	967e <hci_cmd_handle+0x6e>
    969a:	a301      	add	r3, pc, #4	; (adr r3, 96a0 <hci_cmd_handle+0x90>)
    969c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    96a0:	0000a041 	.word	0x0000a041
    96a4:	0000a071 	.word	0x0000a071
    96a8:	0000a09b 	.word	0x0000a09b
    96ac:	0000967f 	.word	0x0000967f
    96b0:	0000967f 	.word	0x0000967f
    96b4:	0000a0e1 	.word	0x0000a0e1
    96b8:	0000967f 	.word	0x0000967f
    96bc:	0000a0b3 	.word	0x0000a0b3
    96c0:	0000a0ed 	.word	0x0000a0ed
    96c4:	0000a15b 	.word	0x0000a15b
	switch (ocf) {
    96c8:	2a06      	cmp	r2, #6
    96ca:	d006      	beq.n	96da <hci_cmd_handle+0xca>
    96cc:	2a1d      	cmp	r2, #29
    96ce:	d1d6      	bne.n	967e <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    96d0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    96d2:	8818      	ldrh	r0, [r3, #0]
    96d4:	f008 f89d 	bl	11812 <ll_version_ind_send>
    96d8:	e004      	b.n	96e4 <hci_cmd_handle+0xd4>
    96da:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    96dc:	7899      	ldrb	r1, [r3, #2]
    96de:	8818      	ldrh	r0, [r3, #0]
    96e0:	f008 f8ab 	bl	1183a <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    96e4:	2800      	cmp	r0, #0
    96e6:	bf14      	ite	ne
    96e8:	200c      	movne	r0, #12
    96ea:	2000      	moveq	r0, #0
    96ec:	f7ff fd44 	bl	9178 <cmd_status>
    96f0:	9007      	str	r0, [sp, #28]
	return evt;
    96f2:	9807      	ldr	r0, [sp, #28]
    96f4:	e79e      	b.n	9634 <hci_cmd_handle+0x24>
	switch (ocf) {
    96f6:	2a33      	cmp	r2, #51	; 0x33
    96f8:	f000 808a 	beq.w	9810 <hci_cmd_handle+0x200>
    96fc:	d824      	bhi.n	9748 <hci_cmd_handle+0x138>
    96fe:	2a03      	cmp	r2, #3
    9700:	d046      	beq.n	9790 <hci_cmd_handle+0x180>
    9702:	d80d      	bhi.n	9720 <hci_cmd_handle+0x110>
    9704:	2a01      	cmp	r2, #1
    9706:	d1ba      	bne.n	967e <hci_cmd_handle+0x6e>
	event_mask = sys_get_le64(cmd->events);
    9708:	68a0      	ldr	r0, [r4, #8]
    970a:	f7ff ff7d 	bl	9608 <sys_get_le64>
    970e:	4b71      	ldr	r3, [pc, #452]	; (98d4 <hci_cmd_handle+0x2c4>)
	le_event_mask = sys_get_le64(cmd->events);
    9710:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9714:	2101      	movs	r1, #1
    9716:	a807      	add	r0, sp, #28
    9718:	f7ff fd5e 	bl	91d8 <cmd_complete>
	ccst->status = 0x00;
    971c:	2300      	movs	r3, #0
    971e:	e011      	b.n	9744 <hci_cmd_handle+0x134>
	switch (ocf) {
    9720:	2a2d      	cmp	r2, #45	; 0x2d
    9722:	d046      	beq.n	97b2 <hci_cmd_handle+0x1a2>
    9724:	2a31      	cmp	r2, #49	; 0x31
    9726:	d1aa      	bne.n	967e <hci_cmd_handle+0x6e>
	u8_t flow_enable = cmd->flow_enable;
    9728:	68a3      	ldr	r3, [r4, #8]
	if (!hci_hbuf_total || conn_count) {
    972a:	4c6b      	ldr	r4, [pc, #428]	; (98d8 <hci_cmd_handle+0x2c8>)
	u8_t flow_enable = cmd->flow_enable;
    972c:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    972e:	2101      	movs	r1, #1
    9730:	a807      	add	r0, sp, #28
    9732:	f7ff fd51 	bl	91d8 <cmd_complete>
	if (!hci_hbuf_total || conn_count) {
    9736:	6823      	ldr	r3, [r4, #0]
    9738:	b11b      	cbz	r3, 9742 <hci_cmd_handle+0x132>
    973a:	4a68      	ldr	r2, [pc, #416]	; (98dc <hci_cmd_handle+0x2cc>)
    973c:	6812      	ldr	r2, [r2, #0]
    973e:	2a00      	cmp	r2, #0
    9740:	d04d      	beq.n	97de <hci_cmd_handle+0x1ce>
		ccst->status = BT_HCI_ERR_CMD_DISALLOWED;
    9742:	230c      	movs	r3, #12
    9744:	7003      	strb	r3, [r0, #0]
    9746:	e7d4      	b.n	96f2 <hci_cmd_handle+0xe2>
	switch (ocf) {
    9748:	2a63      	cmp	r2, #99	; 0x63
    974a:	d026      	beq.n	979a <hci_cmd_handle+0x18a>
    974c:	d80a      	bhi.n	9764 <hci_cmd_handle+0x154>
    974e:	2a35      	cmp	r2, #53	; 0x35
    9750:	d195      	bne.n	967e <hci_cmd_handle+0x6e>
	if (hci_hbuf_total <= 0) {
    9752:	4b61      	ldr	r3, [pc, #388]	; (98d8 <hci_cmd_handle+0x2c8>)
    9754:	681b      	ldr	r3, [r3, #0]
    9756:	2b00      	cmp	r3, #0
    9758:	dc78      	bgt.n	984c <hci_cmd_handle+0x23c>
		ccst = cmd_complete(evt, sizeof(*ccst));
    975a:	2101      	movs	r1, #1
    975c:	a807      	add	r0, sp, #28
    975e:	f7ff fd3b 	bl	91d8 <cmd_complete>
    9762:	e7ee      	b.n	9742 <hci_cmd_handle+0x132>
	switch (ocf) {
    9764:	2a7b      	cmp	r2, #123	; 0x7b
    9766:	f000 80cf 	beq.w	9908 <hci_cmd_handle+0x2f8>
    976a:	2a7c      	cmp	r2, #124	; 0x7c
    976c:	d187      	bne.n	967e <hci_cmd_handle+0x6e>
    976e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9770:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    9772:	8859      	ldrh	r1, [r3, #2]
    9774:	b2a0      	uxth	r0, r4
    9776:	f008 f892 	bl	1189e <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    977a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    977c:	2103      	movs	r1, #3
    977e:	a807      	add	r0, sp, #28
    9780:	f7ff fd2a 	bl	91d8 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9784:	2d00      	cmp	r5, #0
    9786:	bf14      	ite	ne
    9788:	230c      	movne	r3, #12
    978a:	2300      	moveq	r3, #0
    978c:	7003      	strb	r3, [r0, #0]
    978e:	e347      	b.n	9e20 <hci_cmd_handle+0x810>
		reset(cmd, evt);
    9790:	a907      	add	r1, sp, #28
    9792:	4620      	mov	r0, r4
    9794:	f7ff fedc 	bl	9550 <reset>
    9798:	e7ab      	b.n	96f2 <hci_cmd_handle+0xe2>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    979a:	68a0      	ldr	r0, [r4, #8]
    979c:	f7ff ff34 	bl	9608 <sys_get_le64>
    97a0:	4b4f      	ldr	r3, [pc, #316]	; (98e0 <hci_cmd_handle+0x2d0>)
    97a2:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    97a6:	2101      	movs	r1, #1
    97a8:	a807      	add	r0, sp, #28
    97aa:	f7ff fd15 	bl	91d8 <cmd_complete>
	ccst->status = 0x00;
    97ae:	7005      	strb	r5, [r0, #0]
    97b0:	e79f      	b.n	96f2 <hci_cmd_handle+0xe2>
    97b2:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    97b4:	2104      	movs	r1, #4
    97b6:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    97b8:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    97ba:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    97bc:	f7ff fd0c 	bl	91d8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    97c0:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    97c2:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    97c4:	1cc2      	adds	r2, r0, #3
    97c6:	4639      	mov	r1, r7
    97c8:	4630      	mov	r0, r6
    97ca:	f008 f84a 	bl	11862 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    97ce:	2800      	cmp	r0, #0
    97d0:	bf14      	ite	ne
    97d2:	2302      	movne	r3, #2
    97d4:	2300      	moveq	r3, #0
    97d6:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    97d8:	f8a4 5001 	strh.w	r5, [r4, #1]
    97dc:	e789      	b.n	96f2 <hci_cmd_handle+0xe2>
		ccst->status = 0x00;
    97de:	7002      	strb	r2, [r0, #0]
	switch (flow_enable) {
    97e0:	b11d      	cbz	r5, 97ea <hci_cmd_handle+0x1da>
    97e2:	2d01      	cmp	r5, #1
    97e4:	d010      	beq.n	9808 <hci_cmd_handle+0x1f8>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    97e6:	2312      	movs	r3, #18
    97e8:	e7ac      	b.n	9744 <hci_cmd_handle+0x134>
		if (hci_hbuf_total < 0) {
    97ea:	2b00      	cmp	r3, #0
    97ec:	db81      	blt.n	96f2 <hci_cmd_handle+0xe2>
	hci_hbuf_sent = 0;
    97ee:	4b3d      	ldr	r3, [pc, #244]	; (98e4 <hci_cmd_handle+0x2d4>)
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    97f0:	483d      	ldr	r0, [pc, #244]	; (98e8 <hci_cmd_handle+0x2d8>)
	hci_hbuf_sent = 0;
    97f2:	2100      	movs	r1, #0
    97f4:	6019      	str	r1, [r3, #0]
	hci_hbuf_acked = 0;
    97f6:	4b3d      	ldr	r3, [pc, #244]	; (98ec <hci_cmd_handle+0x2dc>)
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    97f8:	2202      	movs	r2, #2
	hci_hbuf_acked = 0;
    97fa:	6019      	str	r1, [r3, #0]
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    97fc:	f7f8 fa2a 	bl	1c54 <memset>
	hci_hbuf_total = -hci_hbuf_total;
    9800:	6823      	ldr	r3, [r4, #0]
    9802:	425b      	negs	r3, r3
    9804:	6023      	str	r3, [r4, #0]
    9806:	e774      	b.n	96f2 <hci_cmd_handle+0xe2>
		if (hci_hbuf_total > 0) {
    9808:	2b00      	cmp	r3, #0
    980a:	f73f af72 	bgt.w	96f2 <hci_cmd_handle+0xe2>
    980e:	e7ee      	b.n	97ee <hci_cmd_handle+0x1de>
    9810:	68a3      	ldr	r3, [r4, #8]
	if (hci_hbuf_total) {
    9812:	4d31      	ldr	r5, [pc, #196]	; (98d8 <hci_cmd_handle+0x2c8>)
	u16_t acl_pkts = sys_le16_to_cpu(cmd->acl_pkts);
    9814:	f8b3 4003 	ldrh.w	r4, [r3, #3]
	u16_t acl_mtu = sys_le16_to_cpu(cmd->acl_mtu);
    9818:	881e      	ldrh	r6, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    981a:	2101      	movs	r1, #1
    981c:	a807      	add	r0, sp, #28
    981e:	f7ff fcdb 	bl	91d8 <cmd_complete>
	if (hci_hbuf_total) {
    9822:	682b      	ldr	r3, [r5, #0]
    9824:	2b00      	cmp	r3, #0
    9826:	d18c      	bne.n	9742 <hci_cmd_handle+0x132>
	if (acl_mtu < RADIO_LL_LENGTH_OCTETS_RX_MAX) {
    9828:	2e1a      	cmp	r6, #26
    982a:	d9dc      	bls.n	97e6 <hci_cmd_handle+0x1d6>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    982c:	f00b fb9a 	bl	14f64 <_impl_k_current_get>
	BT_DBG("FC: host buf size: %d", acl_pkts);
    9830:	4b21      	ldr	r3, [pc, #132]	; (98b8 <hci_cmd_handle+0x2a8>)
    9832:	9303      	str	r3, [sp, #12]
    9834:	9402      	str	r4, [sp, #8]
    9836:	9001      	str	r0, [sp, #4]
    9838:	9300      	str	r3, [sp, #0]
    983a:	4a2d      	ldr	r2, [pc, #180]	; (98f0 <hci_cmd_handle+0x2e0>)
    983c:	4b2d      	ldr	r3, [pc, #180]	; (98f4 <hci_cmd_handle+0x2e4>)
    983e:	4921      	ldr	r1, [pc, #132]	; (98c4 <hci_cmd_handle+0x2b4>)
    9840:	482d      	ldr	r0, [pc, #180]	; (98f8 <hci_cmd_handle+0x2e8>)
	hci_hbuf_total = -acl_pkts;
    9842:	4264      	negs	r4, r4
	BT_DBG("FC: host buf size: %d", acl_pkts);
    9844:	f7f7 fba2 	bl	f8c <printk>
	hci_hbuf_total = -acl_pkts;
    9848:	602c      	str	r4, [r5, #0]
    984a:	e752      	b.n	96f2 <hci_cmd_handle+0xe2>
	} else if (!conn_count) {
    984c:	4b23      	ldr	r3, [pc, #140]	; (98dc <hci_cmd_handle+0x2cc>)
    984e:	681b      	ldr	r3, [r3, #0]
    9850:	b33b      	cbz	r3, 98a2 <hci_cmd_handle+0x292>
    9852:	68a0      	ldr	r0, [r4, #8]
		    (c > hci_hbuf_pend[h])) {
    9854:	4d24      	ldr	r5, [pc, #144]	; (98e8 <hci_cmd_handle+0x2d8>)
	for (i = 0; i < cmd->num_handles; i++) {
    9856:	7806      	ldrb	r6, [r0, #0]
    9858:	2300      	movs	r3, #0
    985a:	461c      	mov	r4, r3
    985c:	42b3      	cmp	r3, r6
    985e:	db16      	blt.n	988e <hci_cmd_handle+0x27e>
    9860:	f00b fb80 	bl	14f64 <_impl_k_current_get>
	BT_DBG("FC: acked: %d", count);
    9864:	4b14      	ldr	r3, [pc, #80]	; (98b8 <hci_cmd_handle+0x2a8>)
    9866:	9303      	str	r3, [sp, #12]
    9868:	9402      	str	r4, [sp, #8]
    986a:	9001      	str	r0, [sp, #4]
    986c:	9300      	str	r3, [sp, #0]
    986e:	4a20      	ldr	r2, [pc, #128]	; (98f0 <hci_cmd_handle+0x2e0>)
    9870:	4b22      	ldr	r3, [pc, #136]	; (98fc <hci_cmd_handle+0x2ec>)
    9872:	4914      	ldr	r1, [pc, #80]	; (98c4 <hci_cmd_handle+0x2b4>)
    9874:	4822      	ldr	r0, [pc, #136]	; (9900 <hci_cmd_handle+0x2f0>)
    9876:	f7f7 fb89 	bl	f8c <printk>
	hci_hbuf_acked += count;
    987a:	4a1c      	ldr	r2, [pc, #112]	; (98ec <hci_cmd_handle+0x2dc>)
    987c:	6813      	ldr	r3, [r2, #0]
    987e:	441c      	add	r4, r3
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    9880:	4b20      	ldr	r3, [pc, #128]	; (9904 <hci_cmd_handle+0x2f4>)
    9882:	6014      	str	r4, [r2, #0]
    9884:	2100      	movs	r1, #0
    9886:	6818      	ldr	r0, [r3, #0]
    9888:	f00c f84c 	bl	15924 <_impl_k_poll_signal>
    988c:	e731      	b.n	96f2 <hci_cmd_handle+0xe2>
    988e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
		u16_t c = sys_le16_to_cpu(cmd->h[i].count);
    9892:	f8b2 1003 	ldrh.w	r1, [r2, #3]
		if ((h >= ARRAY_SIZE(hci_hbuf_pend)) ||
    9896:	f8b2 2001 	ldrh.w	r2, [r2, #1]
    989a:	b912      	cbnz	r2, 98a2 <hci_cmd_handle+0x292>
		    (c > hci_hbuf_pend[h])) {
    989c:	882a      	ldrh	r2, [r5, #0]
		if ((h >= ARRAY_SIZE(hci_hbuf_pend)) ||
    989e:	4291      	cmp	r1, r2
    98a0:	d904      	bls.n	98ac <hci_cmd_handle+0x29c>
		ccst = cmd_complete(evt, sizeof(*ccst));
    98a2:	2101      	movs	r1, #1
    98a4:	a807      	add	r0, sp, #28
    98a6:	f7ff fc97 	bl	91d8 <cmd_complete>
    98aa:	e79c      	b.n	97e6 <hci_cmd_handle+0x1d6>
		hci_hbuf_pend[h] -= c;
    98ac:	1a52      	subs	r2, r2, r1
    98ae:	802a      	strh	r2, [r5, #0]
		count += c;
    98b0:	440c      	add	r4, r1
	for (i = 0; i < cmd->num_handles; i++) {
    98b2:	3301      	adds	r3, #1
    98b4:	e7d2      	b.n	985c <hci_cmd_handle+0x24c>
    98b6:	bf00      	nop
    98b8:	00015af1 	.word	0x00015af1
    98bc:	00016fae 	.word	0x00016fae
    98c0:	000186b3 	.word	0x000186b3
    98c4:	00016060 	.word	0x00016060
    98c8:	0001894e 	.word	0x0001894e
    98cc:	2000083c 	.word	0x2000083c
    98d0:	00018974 	.word	0x00018974
    98d4:	20003e00 	.word	0x20003e00
    98d8:	20001930 	.word	0x20001930
    98dc:	20000840 	.word	0x20000840
    98e0:	200008d0 	.word	0x200008d0
    98e4:	20001934 	.word	0x20001934
    98e8:	2000192c 	.word	0x2000192c
    98ec:	2000193c 	.word	0x2000193c
    98f0:	00016059 	.word	0x00016059
    98f4:	00018673 	.word	0x00018673
    98f8:	000189a2 	.word	0x000189a2
    98fc:	00018684 	.word	0x00018684
    9900:	000189cd 	.word	0x000189cd
    9904:	200008d8 	.word	0x200008d8
	handle = sys_le16_to_cpu(cmd->handle);
    9908:	68a3      	ldr	r3, [r4, #8]
    990a:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    990c:	a908      	add	r1, sp, #32
    990e:	b2a0      	uxth	r0, r4
    9910:	f007 ffb1 	bl	11876 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    9914:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    9916:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9918:	a807      	add	r0, sp, #28
    991a:	f7ff fc5d 	bl	91d8 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    991e:	2d00      	cmp	r5, #0
    9920:	bf14      	ite	ne
    9922:	230c      	movne	r3, #12
    9924:	2300      	moveq	r3, #0
    9926:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9928:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    992c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    9930:	f8a0 3003 	strh.w	r3, [r0, #3]
    9934:	e6dd      	b.n	96f2 <hci_cmd_handle+0xe2>
	switch (ocf) {
    9936:	3a01      	subs	r2, #1
    9938:	2a08      	cmp	r2, #8
    993a:	f63f aea0 	bhi.w	967e <hci_cmd_handle+0x6e>
    993e:	a301      	add	r3, pc, #4	; (adr r3, 9944 <hci_cmd_handle+0x334>)
    9940:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9944:	00009969 	.word	0x00009969
    9948:	00009993 	.word	0x00009993
    994c:	00009a47 	.word	0x00009a47
    9950:	0000967f 	.word	0x0000967f
    9954:	0000967f 	.word	0x0000967f
    9958:	0000967f 	.word	0x0000967f
    995c:	0000967f 	.word	0x0000967f
    9960:	0000967f 	.word	0x0000967f
    9964:	00009a63 	.word	0x00009a63
	rp = cmd_complete(evt, sizeof(*rp));
    9968:	2109      	movs	r1, #9
    996a:	a807      	add	r0, sp, #28
    996c:	f7ff fc34 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9970:	2300      	movs	r3, #0
    9972:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    9974:	7083      	strb	r3, [r0, #2]
    9976:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    9978:	f06f 030e 	mvn.w	r3, #14
    997c:	7143      	strb	r3, [r0, #5]
    997e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    9980:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    9982:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    9984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    9988:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    998a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    998c:	71c3      	strb	r3, [r0, #7]
    998e:	7203      	strb	r3, [r0, #8]
    9990:	e6af      	b.n	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9992:	2141      	movs	r1, #65	; 0x41
    9994:	a807      	add	r0, sp, #28
    9996:	f7ff fc1f 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    999a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    999c:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    999e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    99a0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    99a4:	f7f8 f956 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    99a8:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    99aa:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    99ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    99b0:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    99b2:	79a3      	ldrb	r3, [r4, #6]
    99b4:	f063 033f 	orn	r3, r3, #63	; 0x3f
    99b8:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
    99ba:	7ae3      	ldrb	r3, [r4, #11]
    99bc:	f063 031b 	orn	r3, r3, #27
    99c0:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    99c2:	7be3      	ldrb	r3, [r4, #15]
    99c4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    99c8:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    99ca:	7c23      	ldrb	r3, [r4, #16]
    99cc:	f043 0302 	orr.w	r3, r3, #2
    99d0:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    99d2:	7de3      	ldrb	r3, [r4, #23]
    99d4:	f043 0304 	orr.w	r3, r3, #4
    99d8:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    99da:	7ea3      	ldrb	r3, [r4, #26]
    99dc:	f043 0317 	orr.w	r3, r3, #23
    99e0:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    99e2:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    99e4:	f043 0309 	orr.w	r3, r3, #9
    99e8:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    99ea:	7863      	ldrb	r3, [r4, #1]
    99ec:	f043 0320 	orr.w	r3, r3, #32
    99f0:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    99f2:	23ff      	movs	r3, #255	; 0xff
    99f4:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    99f6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    99fa:	f063 030f 	orn	r3, r3, #15
    99fe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    9a02:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    9a06:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    9a0a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    9a0e:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    9a10:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    9a14:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    9a18:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    9a1c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    9a20:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    9a24:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    9a28:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9a2c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9a30:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9a34:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    9a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9a3c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9a40:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    9a44:	e655      	b.n	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9a46:	2109      	movs	r1, #9
    9a48:	a807      	add	r0, sp, #28
    9a4a:	f7ff fbc5 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9a4e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9a50:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9a52:	2208      	movs	r2, #8
	rp->status = 0x00;
    9a54:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9a58:	f7f8 f8fc 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    9a5c:	2360      	movs	r3, #96	; 0x60
    9a5e:	7163      	strb	r3, [r4, #5]
    9a60:	e647      	b.n	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9a62:	2107      	movs	r1, #7
    9a64:	a807      	add	r0, sp, #28
    9a66:	f7ff fbb7 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9a6a:	4601      	mov	r1, r0
    9a6c:	2300      	movs	r3, #0
    9a6e:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    9a72:	4618      	mov	r0, r3
    9a74:	f7fe ff94 	bl	89a0 <ll_addr_get>
    9a78:	e63b      	b.n	96f2 <hci_cmd_handle+0xe2>
	switch (ocf) {
    9a7a:	3a01      	subs	r2, #1
    9a7c:	2a4d      	cmp	r2, #77	; 0x4d
    9a7e:	f63f adfe 	bhi.w	967e <hci_cmd_handle+0x6e>
    9a82:	a301      	add	r3, pc, #4	; (adr r3, 9a88 <hci_cmd_handle+0x478>)
    9a84:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9a88:	00009bc1 	.word	0x00009bc1
    9a8c:	00009bcb 	.word	0x00009bcb
    9a90:	00009be3 	.word	0x00009be3
    9a94:	0000967f 	.word	0x0000967f
    9a98:	00009c07 	.word	0x00009c07
    9a9c:	0000967f 	.word	0x0000967f
    9aa0:	0000967f 	.word	0x0000967f
    9aa4:	0000967f 	.word	0x0000967f
    9aa8:	0000967f 	.word	0x0000967f
    9aac:	0000967f 	.word	0x0000967f
    9ab0:	00009ccd 	.word	0x00009ccd
    9ab4:	00009cf9 	.word	0x00009cf9
    9ab8:	00009d19 	.word	0x00009d19
    9abc:	00009d43 	.word	0x00009d43
    9ac0:	00009c13 	.word	0x00009c13
    9ac4:	00009c29 	.word	0x00009c29
    9ac8:	00009c3b 	.word	0x00009c3b
    9acc:	00009c43 	.word	0x00009c43
    9ad0:	00009de3 	.word	0x00009de3
    9ad4:	00009da3 	.word	0x00009da3
    9ad8:	00009dbf 	.word	0x00009dbf
    9adc:	00009dd9 	.word	0x00009dd9
    9ae0:	00009c4b 	.word	0x00009c4b
    9ae4:	00009c71 	.word	0x00009c71
    9ae8:	00009dab 	.word	0x00009dab
    9aec:	0000967f 	.word	0x0000967f
    9af0:	0000967f 	.word	0x0000967f
    9af4:	00009c87 	.word	0x00009c87
    9af8:	0000967f 	.word	0x0000967f
    9afc:	0000967f 	.word	0x0000967f
    9b00:	0000967f 	.word	0x0000967f
    9b04:	00009dfd 	.word	0x00009dfd
    9b08:	00009e27 	.word	0x00009e27
    9b0c:	00009e35 	.word	0x00009e35
    9b10:	00009e45 	.word	0x00009e45
    9b14:	00009e5d 	.word	0x00009e5d
    9b18:	0000967f 	.word	0x0000967f
    9b1c:	0000967f 	.word	0x0000967f
    9b20:	00009f87 	.word	0x00009f87
    9b24:	00009f95 	.word	0x00009f95
    9b28:	00009f9d 	.word	0x00009f9d
    9b2c:	00009fad 	.word	0x00009fad
    9b30:	00009fbf 	.word	0x00009fbf
    9b34:	00009fdd 	.word	0x00009fdd
    9b38:	00009ffb 	.word	0x00009ffb
    9b3c:	0000a011 	.word	0x0000a011
    9b40:	00009e79 	.word	0x00009e79
    9b44:	00009eb9 	.word	0x00009eb9
    9b48:	00009f11 	.word	0x00009f11
    9b4c:	00009f2f 	.word	0x00009f2f
    9b50:	0000967f 	.word	0x0000967f
    9b54:	0000967f 	.word	0x0000967f
    9b58:	0000967f 	.word	0x0000967f
    9b5c:	0000967f 	.word	0x0000967f
    9b60:	0000967f 	.word	0x0000967f
    9b64:	0000967f 	.word	0x0000967f
    9b68:	0000967f 	.word	0x0000967f
    9b6c:	0000967f 	.word	0x0000967f
    9b70:	0000967f 	.word	0x0000967f
    9b74:	0000967f 	.word	0x0000967f
    9b78:	0000967f 	.word	0x0000967f
    9b7c:	0000967f 	.word	0x0000967f
    9b80:	0000967f 	.word	0x0000967f
    9b84:	0000967f 	.word	0x0000967f
    9b88:	0000967f 	.word	0x0000967f
    9b8c:	0000967f 	.word	0x0000967f
    9b90:	0000967f 	.word	0x0000967f
    9b94:	0000967f 	.word	0x0000967f
    9b98:	0000967f 	.word	0x0000967f
    9b9c:	0000967f 	.word	0x0000967f
    9ba0:	0000967f 	.word	0x0000967f
    9ba4:	0000967f 	.word	0x0000967f
    9ba8:	0000967f 	.word	0x0000967f
    9bac:	0000967f 	.word	0x0000967f
    9bb0:	0000a027 	.word	0x0000a027
    9bb4:	0000967f 	.word	0x0000967f
    9bb8:	0000967f 	.word	0x0000967f
    9bbc:	0000a01d 	.word	0x0000a01d
	le_event_mask = sys_get_le64(cmd->events);
    9bc0:	68a0      	ldr	r0, [r4, #8]
    9bc2:	f7ff fd21 	bl	9608 <sys_get_le64>
    9bc6:	4bb2      	ldr	r3, [pc, #712]	; (9e90 <hci_cmd_handle+0x880>)
    9bc8:	e5a2      	b.n	9710 <hci_cmd_handle+0x100>
	rp = cmd_complete(evt, sizeof(*rp));
    9bca:	2104      	movs	r1, #4
    9bcc:	a807      	add	r0, sp, #28
    9bce:	f7ff fb03 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9bd2:	2300      	movs	r3, #0
    9bd4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    9bd6:	221b      	movs	r2, #27
    9bd8:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    9bda:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    9bdc:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    9bde:	70c3      	strb	r3, [r0, #3]
    9be0:	e587      	b.n	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9be2:	2109      	movs	r1, #9
    9be4:	a807      	add	r0, sp, #28
    9be6:	f7ff faf7 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9bea:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9bec:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9bee:	2208      	movs	r2, #8
	rp->status = 0x00;
    9bf0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9bf4:	f7f8 f82e 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    9bf8:	23ff      	movs	r3, #255	; 0xff
    9bfa:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    9bfc:	2341      	movs	r3, #65	; 0x41
    9bfe:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    9c00:	2301      	movs	r3, #1
    9c02:	70e3      	strb	r3, [r4, #3]
    9c04:	e575      	b.n	96f2 <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    9c06:	68a1      	ldr	r1, [r4, #8]
    9c08:	2001      	movs	r0, #1
    9c0a:	f7fe fee3 	bl	89d4 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9c0e:	4604      	mov	r4, r0
    9c10:	e0bf      	b.n	9d92 <hci_cmd_handle+0x782>
	rp = cmd_complete(evt, sizeof(*rp));
    9c12:	2102      	movs	r1, #2
    9c14:	a807      	add	r0, sp, #28
    9c16:	f7ff fadf 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9c1a:	2300      	movs	r3, #0
    9c1c:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9c1e:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    9c20:	f008 fd84 	bl	1272c <ll_wl_size_get>
    9c24:	7060      	strb	r0, [r4, #1]
    9c26:	e564      	b.n	96f2 <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9c28:	2101      	movs	r1, #1
    9c2a:	a807      	add	r0, sp, #28
    9c2c:	f7ff fad4 	bl	91d8 <cmd_complete>
    9c30:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    9c32:	f008 fd7d 	bl	12730 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    9c36:	7020      	strb	r0, [r4, #0]
    9c38:	e55b      	b.n	96f2 <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    9c3a:	68a0      	ldr	r0, [r4, #8]
    9c3c:	f008 fe24 	bl	12888 <ll_wl_add>
    9c40:	e7e5      	b.n	9c0e <hci_cmd_handle+0x5fe>
	status = ll_wl_remove(&cmd->addr);
    9c42:	68a0      	ldr	r0, [r4, #8]
    9c44:	f008 fd94 	bl	12770 <ll_wl_remove>
    9c48:	e7e1      	b.n	9c0e <hci_cmd_handle+0x5fe>
    9c4a:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    9c4c:	2300      	movs	r3, #0
    9c4e:	aa08      	add	r2, sp, #32
    9c50:	f100 0110 	add.w	r1, r0, #16
    9c54:	f009 fac8 	bl	131e8 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    9c58:	2111      	movs	r1, #17
    9c5a:	a807      	add	r0, sp, #28
    9c5c:	f7ff fabc 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9c60:	2300      	movs	r3, #0
    9c62:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    9c66:	2210      	movs	r2, #16
    9c68:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    9c6a:	f7f7 ffc7 	bl	1bfc <memcpy>
    9c6e:	e540      	b.n	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9c70:	2109      	movs	r1, #9
    9c72:	a807      	add	r0, sp, #28
    9c74:	f7ff fab0 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9c78:	2300      	movs	r3, #0
    9c7a:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    9c7e:	2108      	movs	r1, #8
    9c80:	f7fe fec8 	bl	8a14 <bt_rand>
    9c84:	e535      	b.n	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9c86:	2109      	movs	r1, #9
    9c88:	a807      	add	r0, sp, #28
    9c8a:	f7ff faa5 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    9c8e:	4604      	mov	r4, r0
    9c90:	2300      	movs	r3, #0
    9c92:	f804 3b01 	strb.w	r3, [r4], #1
	rp = cmd_complete(evt, sizeof(*rp));
    9c96:	4606      	mov	r6, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    9c98:	f00b f964 	bl	14f64 <_impl_k_current_get>
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    9c9c:	4f7d      	ldr	r7, [pc, #500]	; (9e94 <hci_cmd_handle+0x884>)
    9c9e:	4b7e      	ldr	r3, [pc, #504]	; (9e98 <hci_cmd_handle+0x888>)
    9ca0:	9304      	str	r3, [sp, #16]
    9ca2:	f240 253f 	movw	r5, #575	; 0x23f
    9ca6:	9001      	str	r0, [sp, #4]
    9ca8:	9300      	str	r3, [sp, #0]
    9caa:	4a7c      	ldr	r2, [pc, #496]	; (9e9c <hci_cmd_handle+0x88c>)
    9cac:	4b7c      	ldr	r3, [pc, #496]	; (9ea0 <hci_cmd_handle+0x890>)
    9cae:	497d      	ldr	r1, [pc, #500]	; (9ea4 <hci_cmd_handle+0x894>)
    9cb0:	9703      	str	r7, [sp, #12]
    9cb2:	9502      	str	r5, [sp, #8]
    9cb4:	487c      	ldr	r0, [pc, #496]	; (9ea8 <hci_cmd_handle+0x898>)
    9cb6:	f7f7 f969 	bl	f8c <printk>
	sys_put_le32(val, dst);
    9cba:	4621      	mov	r1, r4
    9cbc:	4638      	mov	r0, r7
    9cbe:	f7ff fa47 	bl	9150 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    9cc2:	1d71      	adds	r1, r6, #5
    9cc4:	4628      	mov	r0, r5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    9cc6:	f7ff fa43 	bl	9150 <sys_put_le32>
    9cca:	e512      	b.n	96f2 <hci_cmd_handle+0xe2>
    9ccc:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    9cce:	7963      	ldrb	r3, [r4, #5]
    9cd0:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    9cd4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9cd8:	7820      	ldrb	r0, [r4, #0]
    9cda:	79a4      	ldrb	r4, [r4, #6]
    9cdc:	9400      	str	r4, [sp, #0]
    9cde:	f008 fae9 	bl	122b4 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    9ce2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    9ce4:	2101      	movs	r1, #1
    9ce6:	a807      	add	r0, sp, #28
    9ce8:	f7ff fa76 	bl	91d8 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9cec:	2c00      	cmp	r4, #0
    9cee:	bf18      	it	ne
    9cf0:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9cf2:	bf08      	it	eq
    9cf4:	2300      	moveq	r3, #0
    9cf6:	e525      	b.n	9744 <hci_cmd_handle+0x134>
    9cf8:	68a2      	ldr	r2, [r4, #8]
    9cfa:	4b6c      	ldr	r3, [pc, #432]	; (9eac <hci_cmd_handle+0x89c>)
	if (cmd->enable && cmd->filter_dup) {
    9cfc:	7810      	ldrb	r0, [r2, #0]
    9cfe:	b140      	cbz	r0, 9d12 <hci_cmd_handle+0x702>
    9d00:	7852      	ldrb	r2, [r2, #1]
    9d02:	b132      	cbz	r2, 9d12 <hci_cmd_handle+0x702>
		dup_count = 0;
    9d04:	2200      	movs	r2, #0
    9d06:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    9d08:	4b69      	ldr	r3, [pc, #420]	; (9eb0 <hci_cmd_handle+0x8a0>)
		dup_count = -1;
    9d0a:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    9d0c:	f008 faf2 	bl	122f4 <ll_scan_enable>
    9d10:	e7e7      	b.n	9ce2 <hci_cmd_handle+0x6d2>
		dup_count = -1;
    9d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9d16:	e7f8      	b.n	9d0a <hci_cmd_handle+0x6fa>
    9d18:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    9d1a:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    9d1e:	7963      	ldrb	r3, [r4, #5]
    9d20:	7922      	ldrb	r2, [r4, #4]
    9d22:	8861      	ldrh	r1, [r4, #2]
    9d24:	8820      	ldrh	r0, [r4, #0]
    9d26:	9504      	str	r5, [sp, #16]
    9d28:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    9d2c:	9503      	str	r5, [sp, #12]
    9d2e:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    9d32:	9502      	str	r5, [sp, #8]
    9d34:	7b25      	ldrb	r5, [r4, #12]
    9d36:	9501      	str	r5, [sp, #4]
    9d38:	3406      	adds	r4, #6
    9d3a:	9400      	str	r4, [sp, #0]
    9d3c:	f008 fb14 	bl	12368 <ll_create_connection>
    9d40:	e4d0      	b.n	96e4 <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    9d42:	f008 f929 	bl	11f98 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    9d46:	4606      	mov	r6, r0
    9d48:	bb48      	cbnz	r0, 9d9e <hci_cmd_handle+0x78e>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9d4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9d4e:	2001      	movs	r0, #1
    9d50:	f7fa fb72 	bl	4438 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9d54:	4a57      	ldr	r2, [pc, #348]	; (9eb4 <hci_cmd_handle+0x8a4>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9d56:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9d58:	e9d2 4500 	ldrd	r4, r5, [r2]
    9d5c:	2400      	movs	r4, #0
    9d5e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    9d62:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9d66:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9d68:	d004      	beq.n	9d74 <hci_cmd_handle+0x764>
    9d6a:	4632      	mov	r2, r6
    9d6c:	4631      	mov	r1, r6
    9d6e:	2002      	movs	r0, #2
    9d70:	f7ff faa2 	bl	92b8 <le_conn_complete.part.42>
		if ((*evt)->len) {
    9d74:	9807      	ldr	r0, [sp, #28]
    9d76:	8984      	ldrh	r4, [r0, #12]
    9d78:	b14c      	cbz	r4, 9d8e <hci_cmd_handle+0x77e>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    9d7a:	2101      	movs	r1, #1
    9d7c:	a808      	add	r0, sp, #32
    9d7e:	f7ff fa2b 	bl	91d8 <cmd_complete>
			ccst->status = cmd_status;
    9d82:	2300      	movs	r3, #0
    9d84:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    9d86:	9808      	ldr	r0, [sp, #32]
    9d88:	f7fa f920 	bl	3fcc <bt_recv_prio>
    9d8c:	e4b1      	b.n	96f2 <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    9d8e:	f00a f861 	bl	13e54 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9d92:	2101      	movs	r1, #1
    9d94:	a807      	add	r0, sp, #28
    9d96:	f7ff fa1f 	bl	91d8 <cmd_complete>
	ccst->status = status;
    9d9a:	7004      	strb	r4, [r0, #0]
    9d9c:	e4a9      	b.n	96f2 <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    9d9e:	240c      	movs	r4, #12
    9da0:	e7f7      	b.n	9d92 <hci_cmd_handle+0x782>
	status = ll_chm_update(&cmd->ch_map[0]);
    9da2:	68a0      	ldr	r0, [r4, #8]
    9da4:	f007 fcca 	bl	1173c <ll_chm_update>
    9da8:	e79b      	b.n	9ce2 <hci_cmd_handle+0x6d2>
    9daa:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    9dac:	f100 030c 	add.w	r3, r0, #12
    9db0:	f100 020a 	add.w	r2, r0, #10
    9db4:	1c81      	adds	r1, r0, #2
    9db6:	8800      	ldrh	r0, [r0, #0]
    9db8:	f007 ff74 	bl	11ca4 <ll_enc_req_send>
    9dbc:	e492      	b.n	96e4 <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    9dbe:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9dc0:	2108      	movs	r1, #8
    9dc2:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9dc4:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9dc6:	f7ff fa07 	bl	91d8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9dca:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9dcc:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    9dce:	1cc1      	adds	r1, r0, #3
    9dd0:	4630      	mov	r0, r6
    9dd2:	f007 fcf5 	bl	117c0 <ll_chm_get>
    9dd6:	e4fa      	b.n	97ce <hci_cmd_handle+0x1be>
	handle = sys_le16_to_cpu(cmd->handle);
    9dd8:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    9dda:	8818      	ldrh	r0, [r3, #0]
    9ddc:	f007 fd05 	bl	117ea <ll_feature_req_send>
    9de0:	e480      	b.n	96e4 <hci_cmd_handle+0xd4>
    9de2:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    9de4:	8911      	ldrh	r1, [r2, #8]
    9de6:	8893      	ldrh	r3, [r2, #4]
    9de8:	8810      	ldrh	r0, [r2, #0]
    9dea:	9101      	str	r1, [sp, #4]
    9dec:	88d2      	ldrh	r2, [r2, #6]
    9dee:	9200      	str	r2, [sp, #0]
    9df0:	2200      	movs	r2, #0
    9df2:	4611      	mov	r1, r2
    9df4:	f007 fc2a 	bl	1164c <ll_conn_update>
	*evt = cmd_status(status);
    9df8:	b2c0      	uxtb	r0, r0
    9dfa:	e477      	b.n	96ec <hci_cmd_handle+0xdc>
    9dfc:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    9dfe:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9e00:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    9e02:	8893      	ldrh	r3, [r2, #4]
    9e04:	9101      	str	r1, [sp, #4]
    9e06:	88d2      	ldrh	r2, [r2, #6]
    9e08:	9200      	str	r2, [sp, #0]
    9e0a:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9e0c:	2102      	movs	r1, #2
    9e0e:	b2a0      	uxth	r0, r4
    9e10:	f007 fc1c 	bl	1164c <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    9e14:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9e16:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9e18:	a807      	add	r0, sp, #28
    9e1a:	f7ff f9dd 	bl	91d8 <cmd_complete>
	rp->status = status;
    9e1e:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9e20:	f8a0 4001 	strh.w	r4, [r0, #1]
    9e24:	e465      	b.n	96f2 <hci_cmd_handle+0xe2>
    9e26:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9e28:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9e2a:	789a      	ldrb	r2, [r3, #2]
    9e2c:	2300      	movs	r3, #0
    9e2e:	9301      	str	r3, [sp, #4]
    9e30:	9300      	str	r3, [sp, #0]
    9e32:	e7eb      	b.n	9e0c <hci_cmd_handle+0x7fc>
    9e34:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9e36:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    9e38:	889a      	ldrh	r2, [r3, #4]
    9e3a:	8859      	ldrh	r1, [r3, #2]
    9e3c:	b2a0      	uxth	r0, r4
    9e3e:	f007 fd44 	bl	118ca <ll_length_req_send>
    9e42:	e49a      	b.n	977a <hci_cmd_handle+0x16a>
	rp = cmd_complete(evt, sizeof(*rp));
    9e44:	2105      	movs	r1, #5
    9e46:	a807      	add	r0, sp, #28
    9e48:	f7ff f9c6 	bl	91d8 <cmd_complete>
    9e4c:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    9e4e:	1cc1      	adds	r1, r0, #3
    9e50:	3001      	adds	r0, #1
    9e52:	f007 fd5d 	bl	11910 <ll_length_default_get>
	rp->status = 0x00;
    9e56:	2300      	movs	r3, #0
    9e58:	7023      	strb	r3, [r4, #0]
    9e5a:	e44a      	b.n	96f2 <hci_cmd_handle+0xe2>
    9e5c:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    9e5e:	8859      	ldrh	r1, [r3, #2]
    9e60:	8818      	ldrh	r0, [r3, #0]
    9e62:	f007 fd5f 	bl	11924 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9e66:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    9e68:	2101      	movs	r1, #1
    9e6a:	a807      	add	r0, sp, #28
    9e6c:	f7ff f9b4 	bl	91d8 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9e70:	2c00      	cmp	r4, #0
    9e72:	bf18      	it	ne
    9e74:	231e      	movne	r3, #30
    9e76:	e73c      	b.n	9cf2 <hci_cmd_handle+0x6e2>
	rp = cmd_complete(evt, sizeof(*rp));
    9e78:	2109      	movs	r1, #9
    9e7a:	a807      	add	r0, sp, #28
    9e7c:	f7ff f9ac 	bl	91d8 <cmd_complete>
    9e80:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    9e82:	1dc3      	adds	r3, r0, #7
    9e84:	1d42      	adds	r2, r0, #5
    9e86:	1cc1      	adds	r1, r0, #3
    9e88:	3001      	adds	r0, #1
    9e8a:	f007 fd55 	bl	11938 <ll_length_max_get>
    9e8e:	e7e2      	b.n	9e56 <hci_cmd_handle+0x846>
    9e90:	20003e08 	.word	0x20003e08
    9e94:	130f3370 	.word	0x130f3370
    9e98:	00015af1 	.word	0x00015af1
    9e9c:	00016059 	.word	0x00016059
    9ea0:	0001869f 	.word	0x0001869f
    9ea4:	00016060 	.word	0x00016060
    9ea8:	000189f0 	.word	0x000189f0
    9eac:	20000844 	.word	0x20000844
    9eb0:	20000848 	.word	0x20000848
    9eb4:	20003e00 	.word	0x20003e00
	handle = sys_le16_to_cpu(cmd->handle);
    9eb8:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9eba:	2105      	movs	r1, #5
    9ebc:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9ebe:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9ec0:	f7ff f98a 	bl	91d8 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9ec4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9ec6:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9ec8:	1d02      	adds	r2, r0, #4
    9eca:	1cc1      	adds	r1, r0, #3
    9ecc:	4630      	mov	r0, r6
    9ece:	f007 fd3c 	bl	1194a <ll_phy_get>
	return __builtin_ffs(op);
    9ed2:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    9ed4:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9ed8:	2800      	cmp	r0, #0
    9eda:	bf14      	ite	ne
    9edc:	230c      	movne	r3, #12
    9ede:	2300      	moveq	r3, #0
    9ee0:	7023      	strb	r3, [r4, #0]
    9ee2:	2a00      	cmp	r2, #0
    9ee4:	fa92 f3a2 	rbit	r3, r2
    9ee8:	fab3 f383 	clz	r3, r3
    9eec:	7922      	ldrb	r2, [r4, #4]
    9eee:	bf08      	it	eq
    9ef0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9ef4:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    9ef6:	70e3      	strb	r3, [r4, #3]
    9ef8:	2a00      	cmp	r2, #0
    9efa:	fa92 f3a2 	rbit	r3, r2
    9efe:	fab3 f383 	clz	r3, r3
    9f02:	bf08      	it	eq
    9f04:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9f08:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    9f0a:	7123      	strb	r3, [r4, #4]
    9f0c:	f7ff bbf1 	b.w	96f2 <hci_cmd_handle+0xe2>
    9f10:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9f12:	781a      	ldrb	r2, [r3, #0]
    9f14:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    9f16:	bf44      	itt	mi
    9f18:	2107      	movmi	r1, #7
    9f1a:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9f1c:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    9f1e:	bf44      	itt	mi
    9f20:	2207      	movmi	r2, #7
    9f22:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9f24:	7899      	ldrb	r1, [r3, #2]
    9f26:	7858      	ldrb	r0, [r3, #1]
    9f28:	f007 fd24 	bl	11974 <ll_phy_default_set>
    9f2c:	e79b      	b.n	9e66 <hci_cmd_handle+0x856>
    9f2e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9f30:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    9f32:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    9f34:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9f38:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    9f3a:	bf44      	itt	mi
    9f3c:	2103      	movmi	r1, #3
    9f3e:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    9f40:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9f42:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    9f44:	bf44      	itt	mi
    9f46:	2203      	movmi	r2, #3
    9f48:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9f4a:	074d      	lsls	r5, r1, #29
    9f4c:	f43f aca9 	beq.w	98a2 <hci_cmd_handle+0x292>
	    !(cmd->rx_phys & 0x07)) {
    9f50:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9f52:	075a      	lsls	r2, r3, #29
    9f54:	f43f aca5 	beq.w	98a2 <hci_cmd_handle+0x292>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    9f58:	ea41 0203 	orr.w	r2, r1, r3
    9f5c:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    9f60:	d006      	beq.n	9f70 <hci_cmd_handle+0x960>
		ccst = cmd_complete(evt, sizeof(*ccst));
    9f62:	2101      	movs	r1, #1
    9f64:	a807      	add	r0, sp, #28
    9f66:	f7ff f937 	bl	91d8 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    9f6a:	2311      	movs	r3, #17
    9f6c:	f7ff bbea 	b.w	9744 <hci_cmd_handle+0x134>
	if (phy_opts & 0x03) {
    9f70:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    9f74:	bf1c      	itt	ne
    9f76:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    9f7a:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    9f7e:	f007 fd03 	bl	11988 <ll_phy_req_send>
    9f82:	f7ff bbaf 	b.w	96e4 <hci_cmd_handle+0xd4>
    9f86:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    9f88:	f100 0217 	add.w	r2, r0, #23
    9f8c:	1dc1      	adds	r1, r0, #7
    9f8e:	f008 febb 	bl	12d08 <ll_rl_add>
    9f92:	e63c      	b.n	9c0e <hci_cmd_handle+0x5fe>
	status = ll_rl_remove(&cmd->peer_id_addr);
    9f94:	68a0      	ldr	r0, [r4, #8]
    9f96:	f008 ff59 	bl	12e4c <ll_rl_remove>
    9f9a:	e638      	b.n	9c0e <hci_cmd_handle+0x5fe>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9f9c:	2101      	movs	r1, #1
    9f9e:	a807      	add	r0, sp, #28
    9fa0:	f7ff f91a 	bl	91d8 <cmd_complete>
    9fa4:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    9fa6:	f008 fe95 	bl	12cd4 <ll_rl_clear>
    9faa:	e644      	b.n	9c36 <hci_cmd_handle+0x626>
	rp = cmd_complete(evt, sizeof(*rp));
    9fac:	2102      	movs	r1, #2
    9fae:	a807      	add	r0, sp, #28
    9fb0:	f7ff f912 	bl	91d8 <cmd_complete>
    9fb4:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    9fb6:	f008 fe8b 	bl	12cd0 <ll_rl_size_get>
    9fba:	7060      	strb	r0, [r4, #1]
    9fbc:	e74b      	b.n	9e56 <hci_cmd_handle+0x846>
    9fbe:	2207      	movs	r2, #7
    9fc0:	68a1      	ldr	r1, [r4, #8]
    9fc2:	a808      	add	r0, sp, #32
    9fc4:	f7f7 fe1a 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9fc8:	2107      	movs	r1, #7
    9fca:	a807      	add	r0, sp, #28
    9fcc:	f7ff f904 	bl	91d8 <cmd_complete>
    9fd0:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    9fd2:	1c41      	adds	r1, r0, #1
    9fd4:	a808      	add	r0, sp, #32
    9fd6:	f008 ffc7 	bl	12f68 <ll_rl_crpa_get>
    9fda:	e62c      	b.n	9c36 <hci_cmd_handle+0x626>
    9fdc:	2207      	movs	r2, #7
    9fde:	68a1      	ldr	r1, [r4, #8]
    9fe0:	a808      	add	r0, sp, #32
    9fe2:	f7f7 fe0b 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9fe6:	2107      	movs	r1, #7
    9fe8:	a807      	add	r0, sp, #28
    9fea:	f7ff f8f5 	bl	91d8 <cmd_complete>
    9fee:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9ff0:	1c41      	adds	r1, r0, #1
    9ff2:	a808      	add	r0, sp, #32
    9ff4:	f008 ffd8 	bl	12fa8 <ll_rl_lrpa_get>
    9ff8:	e61d      	b.n	9c36 <hci_cmd_handle+0x626>
	u8_t enable = cmd->enable;
    9ffa:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9ffc:	2101      	movs	r1, #1
    9ffe:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    a000:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    a002:	f7ff f8e9 	bl	91d8 <cmd_complete>
    a006:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    a008:	4628      	mov	r0, r5
    a00a:	f008 ffe5 	bl	12fd8 <ll_rl_enable>
    a00e:	e612      	b.n	9c36 <hci_cmd_handle+0x626>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    a010:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    a012:	8818      	ldrh	r0, [r3, #0]
    a014:	f008 fff2 	bl	12ffc <ll_rl_timeout_set>
    a018:	f7ff bb7c 	b.w	9714 <hci_cmd_handle+0x104>
    a01c:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    a01e:	79c1      	ldrb	r1, [r0, #7]
    a020:	f008 fff4 	bl	1300c <ll_priv_mode_set>
    a024:	e5f3      	b.n	9c0e <hci_cmd_handle+0x5fe>
	rp = cmd_complete(evt, sizeof(*rp));
    a026:	2103      	movs	r1, #3
    a028:	a807      	add	r0, sp, #28
    a02a:	f7ff f8d5 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    a02e:	4601      	mov	r1, r0
    a030:	2300      	movs	r3, #0
    a032:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    a036:	3001      	adds	r0, #1
    a038:	f7fe fce8 	bl	8a0c <ll_tx_pwr_get>
    a03c:	f7ff bb59 	b.w	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a040:	210d      	movs	r1, #13
    a042:	a807      	add	r0, sp, #28
    a044:	f7ff f8c8 	bl	91d8 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    a048:	2202      	movs	r2, #2
    a04a:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    a04c:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    a04e:	2201      	movs	r2, #1
    a050:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    a052:	220c      	movs	r2, #12
	rp->status = 0x00;
    a054:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    a056:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    a058:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    a05a:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    a05c:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    a05e:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    a060:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    a062:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    a064:	7242      	strb	r2, [r0, #9]
    a066:	7283      	strb	r3, [r0, #10]
    a068:	72c3      	strb	r3, [r0, #11]
    a06a:	7303      	strb	r3, [r0, #12]
    a06c:	f7ff bb41 	b.w	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a070:	2141      	movs	r1, #65	; 0x41
    a072:	a807      	add	r0, sp, #28
    a074:	f7ff f8b0 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    a078:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    a07a:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    a07c:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    a07e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    a082:	f7f7 fde7 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    a086:	7863      	ldrb	r3, [r4, #1]
    a088:	f063 0358 	orn	r3, r3, #88	; 0x58
    a08c:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    a08e:	78a3      	ldrb	r3, [r4, #2]
    a090:	f043 0303 	orr.w	r3, r3, #3
    a094:	70a3      	strb	r3, [r4, #2]
    a096:	f7ff bb2c 	b.w	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a09a:	2109      	movs	r1, #9
    a09c:	a807      	add	r0, sp, #28
    a09e:	f7ff f89b 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    a0a2:	2100      	movs	r1, #0
    a0a4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    a0a8:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    a0aa:	f7f7 fdd3 	bl	1c54 <memset>
    a0ae:	f7ff bb20 	b.w	96f2 <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    a0b2:	4b5c      	ldr	r3, [pc, #368]	; (a224 <hci_cmd_handle+0xc14>)
    a0b4:	aa08      	add	r2, sp, #32
    a0b6:	f103 0628 	add.w	r6, r3, #40	; 0x28
    a0ba:	4615      	mov	r5, r2
    a0bc:	6818      	ldr	r0, [r3, #0]
    a0be:	6859      	ldr	r1, [r3, #4]
    a0c0:	4614      	mov	r4, r2
    a0c2:	c403      	stmia	r4!, {r0, r1}
    a0c4:	3308      	adds	r3, #8
    a0c6:	42b3      	cmp	r3, r6
    a0c8:	4622      	mov	r2, r4
    a0ca:	d1f7      	bne.n	a0bc <hci_cmd_handle+0xaac>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    a0cc:	2129      	movs	r1, #41	; 0x29
    a0ce:	a807      	add	r0, sp, #28
    a0d0:	f7ff f882 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    a0d4:	2300      	movs	r3, #0
    a0d6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    a0da:	2228      	movs	r2, #40	; 0x28
    a0dc:	4629      	mov	r1, r5
    a0de:	e5c4      	b.n	9c6a <hci_cmd_handle+0x65a>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    a0e0:	68a1      	ldr	r1, [r4, #8]
    a0e2:	2000      	movs	r0, #0
    a0e4:	f7fe fc76 	bl	89d4 <ll_addr_set>
    a0e8:	f7ff bb14 	b.w	9714 <hci_cmd_handle+0x104>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a0ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a0f0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    a0f4:	3201      	adds	r2, #1
    a0f6:	d106      	bne.n	a106 <hci_cmd_handle+0xaf6>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a0f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a0fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a100:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    a102:	4293      	cmp	r3, r2
    a104:	d020      	beq.n	a148 <hci_cmd_handle+0xb38>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    a106:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    a10a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    a10e:	07db      	lsls	r3, r3, #31
    a110:	d51a      	bpl.n	a148 <hci_cmd_handle+0xb38>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    a112:	2118      	movs	r1, #24
    a114:	a807      	add	r0, sp, #28
    a116:	f7ff f85f 	bl	91d8 <cmd_complete>
		rp->status = 0x00;
    a11a:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    a11c:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    a11e:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    a120:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    a122:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    a124:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    a128:	1ca1      	adds	r1, r4, #2
    a12a:	f7ff f811 	bl	9150 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    a12e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    a132:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    a134:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    a138:	f063 033f 	orn	r3, r3, #63	; 0x3f
    a13c:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    a13e:	2210      	movs	r2, #16
    a140:	4631      	mov	r1, r6
    a142:	f104 0008 	add.w	r0, r4, #8
    a146:	e7b0      	b.n	a0aa <hci_cmd_handle+0xa9a>
	rp = cmd_complete(evt, sizeof(*rp));
    a148:	2102      	movs	r1, #2
    a14a:	a807      	add	r0, sp, #28
    a14c:	f7ff f844 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    a150:	2300      	movs	r3, #0
    a152:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    a154:	7043      	strb	r3, [r0, #1]
    a156:	f7ff bacc 	b.w	96f2 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    a15a:	2121      	movs	r1, #33	; 0x21
    a15c:	a807      	add	r0, sp, #28
    a15e:	f7ff f83b 	bl	91d8 <cmd_complete>
	rp->status = 0x00;
    a162:	4603      	mov	r3, r0
    a164:	2200      	movs	r2, #0
    a166:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    a16e:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a170:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    a174:	3101      	adds	r1, #1
    a176:	d04b      	beq.n	a210 <hci_cmd_handle+0xc00>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    a178:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    a17c:	3101      	adds	r1, #1
    a17e:	d047      	beq.n	a210 <hci_cmd_handle+0xc00>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    a180:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    a184:	3101      	adds	r1, #1
    a186:	d043      	beq.n	a210 <hci_cmd_handle+0xc00>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    a188:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    a18c:	3101      	adds	r1, #1
    a18e:	d03f      	beq.n	a210 <hci_cmd_handle+0xc00>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    a190:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    a194:	4619      	mov	r1, r3
    a196:	f7fe ffdb 	bl	9150 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    a19a:	1d61      	adds	r1, r4, #5
    a19c:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    a1a0:	f7fe ffd6 	bl	9150 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    a1a4:	f104 0109 	add.w	r1, r4, #9
    a1a8:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    a1ac:	f7fe ffd0 	bl	9150 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    a1b0:	f104 010d 	add.w	r1, r4, #13
    a1b4:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    a1b8:	f7fe ffca 	bl	9150 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    a1bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a1c0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    a1c4:	3301      	adds	r3, #1
    a1c6:	f104 0311 	add.w	r3, r4, #17
    a1ca:	d027      	beq.n	a21c <hci_cmd_handle+0xc0c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    a1cc:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    a1d0:	3101      	adds	r1, #1
    a1d2:	d023      	beq.n	a21c <hci_cmd_handle+0xc0c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    a1d4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    a1d8:	3101      	adds	r1, #1
    a1da:	d01f      	beq.n	a21c <hci_cmd_handle+0xc0c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    a1dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    a1e0:	3101      	adds	r1, #1
    a1e2:	d01b      	beq.n	a21c <hci_cmd_handle+0xc0c>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    a1e4:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    a1e8:	4619      	mov	r1, r3
    a1ea:	f7fe ffb1 	bl	9150 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    a1ee:	f104 0115 	add.w	r1, r4, #21
    a1f2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    a1f6:	f7fe ffab 	bl	9150 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    a1fa:	f104 0119 	add.w	r1, r4, #25
    a1fe:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    a202:	f7fe ffa5 	bl	9150 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    a206:	f104 011d 	add.w	r1, r4, #29
    a20a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    a20e:	e55a      	b.n	9cc6 <hci_cmd_handle+0x6b6>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    a210:	2210      	movs	r2, #16
    a212:	2100      	movs	r1, #0
    a214:	4618      	mov	r0, r3
    a216:	f7f7 fd1d 	bl	1c54 <memset>
    a21a:	e7cf      	b.n	a1bc <hci_cmd_handle+0xbac>
		memset(rp->er, 0x00, sizeof(rp->er));
    a21c:	2210      	movs	r2, #16
    a21e:	2100      	movs	r1, #0
    a220:	4618      	mov	r0, r3
    a222:	e742      	b.n	a0aa <hci_cmd_handle+0xa9a>
    a224:	00018a18 	.word	0x00018a18

0000a228 <hci_acl_handle>:
{
    a228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    a22c:	2300      	movs	r3, #0
    a22e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    a230:	8983      	ldrh	r3, [r0, #12]
    a232:	2b03      	cmp	r3, #3
{
    a234:	4606      	mov	r6, r0
    a236:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    a238:	d80d      	bhi.n	a256 <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    a23a:	4b3a      	ldr	r3, [pc, #232]	; (a324 <hci_acl_handle+0xfc>)
    a23c:	9301      	str	r3, [sp, #4]
    a23e:	9300      	str	r3, [sp, #0]
    a240:	4a39      	ldr	r2, [pc, #228]	; (a328 <hci_acl_handle+0x100>)
    a242:	4b3a      	ldr	r3, [pc, #232]	; (a32c <hci_acl_handle+0x104>)
    a244:	493a      	ldr	r1, [pc, #232]	; (a330 <hci_acl_handle+0x108>)
    a246:	483b      	ldr	r0, [pc, #236]	; (a334 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    a248:	f7f6 fea0 	bl	f8c <printk>
		return -EINVAL;
    a24c:	f06f 0015 	mvn.w	r0, #21
}
    a250:	b003      	add	sp, #12
    a252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    a256:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    a25a:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    a25c:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    a25e:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    a260:	f009 fe58 	bl	13f14 <net_buf_simple_pull>
	if (buf->len < len) {
    a264:	89b3      	ldrh	r3, [r6, #12]
    a266:	42bb      	cmp	r3, r7
    a268:	d207      	bcs.n	a27a <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    a26a:	4b2e      	ldr	r3, [pc, #184]	; (a324 <hci_acl_handle+0xfc>)
    a26c:	9301      	str	r3, [sp, #4]
    a26e:	9300      	str	r3, [sp, #0]
    a270:	4a2d      	ldr	r2, [pc, #180]	; (a328 <hci_acl_handle+0x100>)
    a272:	4b2e      	ldr	r3, [pc, #184]	; (a32c <hci_acl_handle+0x104>)
    a274:	492e      	ldr	r1, [pc, #184]	; (a330 <hci_acl_handle+0x108>)
    a276:	4830      	ldr	r0, [pc, #192]	; (a338 <hci_acl_handle+0x110>)
    a278:	e7e6      	b.n	a248 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    a27a:	f007 fc8f 	bl	11b9c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    a27e:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    a282:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    a284:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    a288:	bb30      	cbnz	r0, a2d8 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    a28a:	4b26      	ldr	r3, [pc, #152]	; (a324 <hci_acl_handle+0xfc>)
    a28c:	9301      	str	r3, [sp, #4]
    a28e:	9300      	str	r3, [sp, #0]
    a290:	4a25      	ldr	r2, [pc, #148]	; (a328 <hci_acl_handle+0x100>)
    a292:	4b26      	ldr	r3, [pc, #152]	; (a32c <hci_acl_handle+0x104>)
    a294:	4926      	ldr	r1, [pc, #152]	; (a330 <hci_acl_handle+0x108>)
    a296:	4829      	ldr	r0, [pc, #164]	; (a33c <hci_acl_handle+0x114>)
    a298:	f7f6 fe78 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    a29c:	4b28      	ldr	r3, [pc, #160]	; (a340 <hci_acl_handle+0x118>)
    a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2a2:	2300      	movs	r3, #0
    a2a4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    a2a8:	4313      	orrs	r3, r2
    a2aa:	d012      	beq.n	a2d2 <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a2ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a2b0:	2001      	movs	r0, #1
    a2b2:	f7fa f8c1 	bl	4438 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    a2b6:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a2b8:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    a2bc:	211a      	movs	r1, #26
    a2be:	f7fe ff50 	bl	9162 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    a2c2:	f8d8 0000 	ldr.w	r0, [r8]
    a2c6:	2101      	movs	r1, #1
    a2c8:	3008      	adds	r0, #8
    a2ca:	f009 fdf5 	bl	13eb8 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    a2ce:	2301      	movs	r3, #1
    a2d0:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    a2d2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a2d6:	e7bb      	b.n	a250 <hci_acl_handle+0x28>
    a2d8:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    a2da:	f1b9 0f00 	cmp.w	r9, #0
    a2de:	d002      	beq.n	a2e6 <hci_acl_handle+0xbe>
    a2e0:	f1b9 0f02 	cmp.w	r9, #2
    a2e4:	d11c      	bne.n	a320 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    a2e6:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    a2e8:	f362 0301 	bfi	r3, r2, #0, #2
    a2ec:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    a2ee:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    a2f0:	68b1      	ldr	r1, [r6, #8]
    a2f2:	463a      	mov	r2, r7
    a2f4:	1de0      	adds	r0, r4, #7
    a2f6:	f7f7 fc81 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    a2fa:	4621      	mov	r1, r4
    a2fc:	4628      	mov	r0, r5
    a2fe:	f007 fc59 	bl	11bb4 <ll_tx_mem_enqueue>
    a302:	2800      	cmp	r0, #0
    a304:	d0a4      	beq.n	a250 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    a306:	4b07      	ldr	r3, [pc, #28]	; (a324 <hci_acl_handle+0xfc>)
    a308:	9301      	str	r3, [sp, #4]
    a30a:	9300      	str	r3, [sp, #0]
    a30c:	4a06      	ldr	r2, [pc, #24]	; (a328 <hci_acl_handle+0x100>)
    a30e:	4b07      	ldr	r3, [pc, #28]	; (a32c <hci_acl_handle+0x104>)
    a310:	4907      	ldr	r1, [pc, #28]	; (a330 <hci_acl_handle+0x108>)
    a312:	480c      	ldr	r0, [pc, #48]	; (a344 <hci_acl_handle+0x11c>)
    a314:	f7f6 fe3a 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    a318:	4620      	mov	r0, r4
    a31a:	f007 fc45 	bl	11ba8 <ll_tx_mem_release>
    a31e:	e795      	b.n	a24c <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    a320:	2201      	movs	r2, #1
    a322:	e7e1      	b.n	a2e8 <hci_acl_handle+0xc0>
    a324:	00015af1 	.word	0x00015af1
    a328:	00016fae 	.word	0x00016fae
    a32c:	000186c2 	.word	0x000186c2
    a330:	00016060 	.word	0x00016060
    a334:	000188b8 	.word	0x000188b8
    a338:	000188da 	.word	0x000188da
    a33c:	00018908 	.word	0x00018908
    a340:	20003e00 	.word	0x20003e00
    a344:	0001892b 	.word	0x0001892b

0000a348 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    a348:	7a03      	ldrb	r3, [r0, #8]
    a34a:	f003 0303 	and.w	r3, r3, #3
    a34e:	3b01      	subs	r3, #1
    a350:	2b01      	cmp	r3, #1
{
    a352:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a354:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    a356:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    a358:	d844      	bhi.n	a3e4 <hci_acl_encode+0x9c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    a35a:	f101 0508 	add.w	r5, r1, #8
    a35e:	4628      	mov	r0, r5
    a360:	2104      	movs	r1, #4
    a362:	f009 fda9 	bl	13eb8 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    a366:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    a368:	7a61      	ldrb	r1, [r4, #9]
    a36a:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    a36c:	f003 0303 	and.w	r3, r3, #3
    a370:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    a372:	bf0c      	ite	eq
    a374:	f446 5300 	orreq.w	r3, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    a378:	f446 5380 	orrne.w	r3, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    a37c:	8003      	strh	r3, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    a37e:	4628      	mov	r0, r5
    a380:	f009 fd9a 	bl	13eb8 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    a384:	7a62      	ldrb	r2, [r4, #9]
    a386:	f104 010b 	add.w	r1, r4, #11
    a38a:	f7f7 fc37 	bl	1bfc <memcpy>
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
		if (hci_hbuf_total > 0) {
    a38e:	4b19      	ldr	r3, [pc, #100]	; (a3f4 <hci_acl_encode+0xac>)
    a390:	6818      	ldr	r0, [r3, #0]
    a392:	2800      	cmp	r0, #0
    a394:	dd24      	ble.n	a3e0 <hci_acl_encode+0x98>
			LL_ASSERT((hci_hbuf_sent - hci_hbuf_acked) <
    a396:	4918      	ldr	r1, [pc, #96]	; (a3f8 <hci_acl_encode+0xb0>)
    a398:	4a18      	ldr	r2, [pc, #96]	; (a3fc <hci_acl_encode+0xb4>)
    a39a:	680b      	ldr	r3, [r1, #0]
    a39c:	6812      	ldr	r2, [r2, #0]
    a39e:	1a9a      	subs	r2, r3, r2
    a3a0:	4282      	cmp	r2, r0
    a3a2:	d30e      	bcc.n	a3c2 <hci_acl_encode+0x7a>
    a3a4:	4b16      	ldr	r3, [pc, #88]	; (a400 <hci_acl_encode+0xb8>)
    a3a6:	9301      	str	r3, [sp, #4]
    a3a8:	9300      	str	r3, [sp, #0]
    a3aa:	4a16      	ldr	r2, [pc, #88]	; (a404 <hci_acl_encode+0xbc>)
    a3ac:	4b16      	ldr	r3, [pc, #88]	; (a408 <hci_acl_encode+0xc0>)
    a3ae:	4917      	ldr	r1, [pc, #92]	; (a40c <hci_acl_encode+0xc4>)
    a3b0:	4817      	ldr	r0, [pc, #92]	; (a410 <hci_acl_encode+0xc8>)
				  hci_hbuf_total);
			hci_hbuf_sent++;
			/* Note: This requires linear handle values starting
			 * from 0
			 */
			LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    a3b2:	f7f6 fdeb 	bl	f8c <printk>
			hci_hbuf_pend[handle]++;
		}
#endif
		break;
    a3b6:	4040      	eors	r0, r0
    a3b8:	f380 8811 	msr	BASEPRI, r0
    a3bc:	f04f 0004 	mov.w	r0, #4
    a3c0:	df02      	svc	2
			hci_hbuf_sent++;
    a3c2:	3301      	adds	r3, #1
    a3c4:	600b      	str	r3, [r1, #0]
			LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    a3c6:	b13e      	cbz	r6, a3d8 <hci_acl_encode+0x90>
    a3c8:	4b0d      	ldr	r3, [pc, #52]	; (a400 <hci_acl_encode+0xb8>)
    a3ca:	9301      	str	r3, [sp, #4]
    a3cc:	9300      	str	r3, [sp, #0]
    a3ce:	4a0d      	ldr	r2, [pc, #52]	; (a404 <hci_acl_encode+0xbc>)
    a3d0:	4b0d      	ldr	r3, [pc, #52]	; (a408 <hci_acl_encode+0xc0>)
    a3d2:	490e      	ldr	r1, [pc, #56]	; (a40c <hci_acl_encode+0xc4>)
    a3d4:	480f      	ldr	r0, [pc, #60]	; (a414 <hci_acl_encode+0xcc>)
    a3d6:	e7ec      	b.n	a3b2 <hci_acl_encode+0x6a>
			hci_hbuf_pend[handle]++;
    a3d8:	4a0f      	ldr	r2, [pc, #60]	; (a418 <hci_acl_encode+0xd0>)
    a3da:	8813      	ldrh	r3, [r2, #0]
    a3dc:	3301      	adds	r3, #1
    a3de:	8013      	strh	r3, [r2, #0]
	default:
		LL_ASSERT(0);
		break;
	}

}
    a3e0:	b002      	add	sp, #8
    a3e2:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    a3e4:	4b06      	ldr	r3, [pc, #24]	; (a400 <hci_acl_encode+0xb8>)
    a3e6:	9301      	str	r3, [sp, #4]
    a3e8:	9300      	str	r3, [sp, #0]
    a3ea:	4a06      	ldr	r2, [pc, #24]	; (a404 <hci_acl_encode+0xbc>)
    a3ec:	4b06      	ldr	r3, [pc, #24]	; (a408 <hci_acl_encode+0xc0>)
    a3ee:	4907      	ldr	r1, [pc, #28]	; (a40c <hci_acl_encode+0xc4>)
    a3f0:	480a      	ldr	r0, [pc, #40]	; (a41c <hci_acl_encode+0xd4>)
    a3f2:	e7de      	b.n	a3b2 <hci_acl_encode+0x6a>
    a3f4:	20001930 	.word	0x20001930
    a3f8:	20001934 	.word	0x20001934
    a3fc:	2000193c 	.word	0x2000193c
    a400:	00015af1 	.word	0x00015af1
    a404:	00016fae 	.word	0x00016fae
    a408:	00018762 	.word	0x00018762
    a40c:	00016060 	.word	0x00016060
    a410:	00018771 	.word	0x00018771
    a414:	000187c4 	.word	0x000187c4
    a418:	2000192c 	.word	0x2000192c
    a41c:	00016f22 	.word	0x00016f22

0000a420 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a424:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    a426:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a428:	2b01      	cmp	r3, #1
{
    a42a:	b093      	sub	sp, #76	; 0x4c
    a42c:	4604      	mov	r4, r0
    a42e:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    a430:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a434:	f000 82b6 	beq.w	a9a4 <hci_evt_encode+0x584>
	switch (node_rx->hdr.type) {
    a438:	3b02      	subs	r3, #2
    a43a:	2b0a      	cmp	r3, #10
    a43c:	f200 82aa 	bhi.w	a994 <hci_evt_encode+0x574>
    a440:	e8df f013 	tbh	[pc, r3, lsl #1]
    a444:	0134000b 	.word	0x0134000b
    a448:	013c013a 	.word	0x013c013a
    a44c:	01ba0183 	.word	0x01ba0183
    a450:	020d01e8 	.word	0x020d01e8
    a454:	023a0225 	.word	0x023a0225
    a458:	0255      	.short	0x0255
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a45a:	2301      	movs	r3, #1
    a45c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    a460:	2303      	movs	r3, #3
    a462:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    a466:	23ff      	movs	r3, #255	; 0xff
    a468:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    a46c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    a470:	2302      	movs	r3, #2
    a472:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a476:	7a43      	ldrb	r3, [r0, #9]
    a478:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a47a:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a47c:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    a480:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a482:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    a486:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    a488:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a48a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    a48e:	d505      	bpl.n	a49c <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    a490:	f104 030a 	add.w	r3, r4, #10
    a494:	464a      	mov	r2, r9
    a496:	4608      	mov	r0, r1
    a498:	f008 fd44 	bl	12f24 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    a49c:	4bb8      	ldr	r3, [pc, #736]	; (a780 <hci_evt_encode+0x360>)
    a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4a2:	2200      	movs	r2, #0
    a4a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a4a8:	4313      	orrs	r3, r2
    a4aa:	f000 80b9 	beq.w	a620 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a4ae:	7a63      	ldrb	r3, [r4, #9]
    a4b0:	4423      	add	r3, r4
    a4b2:	f893 a00c 	ldrb.w	sl, [r3, #12]
    a4b6:	4bb3      	ldr	r3, [pc, #716]	; (a784 <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4bc:	f1ba 0f00 	cmp.w	sl, #0
    a4c0:	d13d      	bne.n	a53e <hci_evt_encode+0x11e>
    a4c2:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    a4c6:	2300      	movs	r3, #0
    a4c8:	4313      	orrs	r3, r2
    a4ca:	f000 80a9 	beq.w	a620 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    a4ce:	4bae      	ldr	r3, [pc, #696]	; (a788 <hci_evt_encode+0x368>)
    a4d0:	681a      	ldr	r2, [r3, #0]
    a4d2:	2a00      	cmp	r2, #0
    a4d4:	4698      	mov	r8, r3
    a4d6:	db54      	blt.n	a582 <hci_evt_encode+0x162>
    a4d8:	f8df b2d8 	ldr.w	fp, [pc, #728]	; a7b4 <hci_evt_encode+0x394>
    a4dc:	2600      	movs	r6, #0
    a4de:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    a4e2:	f8d8 2000 	ldr.w	r2, [r8]
    a4e6:	4296      	cmp	r6, r2
    a4e8:	db2c      	blt.n	a544 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    a4ea:	4ea8      	ldr	r6, [pc, #672]	; (a78c <hci_evt_encode+0x36c>)
    a4ec:	f8df b2a0 	ldr.w	fp, [pc, #672]	; a790 <hci_evt_encode+0x370>
    a4f0:	6830      	ldr	r0, [r6, #0]
    a4f2:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    a4f6:	4619      	mov	r1, r3
    a4f8:	2206      	movs	r2, #6
    a4fa:	3002      	adds	r0, #2
    a4fc:	f7f7 fb7e 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    a500:	6832      	ldr	r2, [r6, #0]
    a502:	7a23      	ldrb	r3, [r4, #8]
    a504:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    a508:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a50c:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    a50e:	7a23      	ldrb	r3, [r4, #8]
    a510:	f003 010f 	and.w	r1, r3, #15
    a514:	2301      	movs	r3, #1
    a516:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a518:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    a51c:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a520:	290f      	cmp	r1, #15
			dup_count++;
    a522:	bfd5      	itete	le
    a524:	3101      	addle	r1, #1
			dup_curr++;
    a526:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    a528:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    a52a:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a52c:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    a52e:	bfd8      	it	le
    a530:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a534:	2a10      	cmp	r2, #16
    a536:	d124      	bne.n	a582 <hci_evt_encode+0x162>
			dup_curr = 0;
    a538:	2200      	movs	r2, #0
    a53a:	6032      	str	r2, [r6, #0]
    a53c:	e021      	b.n	a582 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    a53e:	f002 020b 	and.w	r2, r2, #11
    a542:	e7c0      	b.n	a4c6 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    a544:	4618      	mov	r0, r3
    a546:	2206      	movs	r2, #6
    a548:	4659      	mov	r1, fp
    a54a:	9307      	str	r3, [sp, #28]
    a54c:	f7f7 fb41 	bl	1bd2 <memcmp>
    a550:	9b07      	ldr	r3, [sp, #28]
    a552:	bb00      	cbnz	r0, a596 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    a554:	7a21      	ldrb	r1, [r4, #8]
    a556:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    a55a:	460a      	mov	r2, r1
    a55c:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    a560:	4281      	cmp	r1, r0
    a562:	d118      	bne.n	a596 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    a564:	488a      	ldr	r0, [pc, #552]	; (a790 <hci_evt_encode+0x370>)
    a566:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    a56a:	f002 020f 	and.w	r2, r2, #15
    a56e:	fa23 f102 	lsr.w	r1, r3, r2
    a572:	07c9      	lsls	r1, r1, #31
    a574:	d454      	bmi.n	a620 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    a576:	2101      	movs	r1, #1
    a578:	fa01 f202 	lsl.w	r2, r1, r2
    a57c:	4313      	orrs	r3, r2
    a57e:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    a582:	f894 b008 	ldrb.w	fp, [r4, #8]
    a586:	7a63      	ldrb	r3, [r4, #9]
    a588:	f00b 0b0f 	and.w	fp, fp, #15
    a58c:	f1bb 0f01 	cmp.w	fp, #1
    a590:	d105      	bne.n	a59e <hci_evt_encode+0x17e>
		data_len = 0;
    a592:	2600      	movs	r6, #0
    a594:	e005      	b.n	a5a2 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    a596:	3601      	adds	r6, #1
    a598:	f10b 0b08 	add.w	fp, fp, #8
    a59c:	e7a1      	b.n	a4e2 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    a59e:	1f9e      	subs	r6, r3, #6
    a5a0:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a5a2:	4423      	add	r3, r4
    a5a4:	f893 800a 	ldrb.w	r8, [r3, #10]
    a5a8:	f1c8 0800 	rsb	r8, r8, #0
    a5ac:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    a5b0:	f1ba 0f00 	cmp.w	sl, #0
    a5b4:	d041      	beq.n	a63a <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    a5b6:	f1bb 0f01 	cmp.w	fp, #1
    a5ba:	d00e      	beq.n	a5da <hci_evt_encode+0x1ba>
    a5bc:	4b75      	ldr	r3, [pc, #468]	; (a794 <hci_evt_encode+0x374>)
    a5be:	9301      	str	r3, [sp, #4]
    a5c0:	9300      	str	r3, [sp, #0]
    a5c2:	4a75      	ldr	r2, [pc, #468]	; (a798 <hci_evt_encode+0x378>)
    a5c4:	4b75      	ldr	r3, [pc, #468]	; (a79c <hci_evt_encode+0x37c>)
    a5c6:	4976      	ldr	r1, [pc, #472]	; (a7a0 <hci_evt_encode+0x380>)
    a5c8:	4876      	ldr	r0, [pc, #472]	; (a7a4 <hci_evt_encode+0x384>)
	LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    a5ca:	f7f6 fcdf 	bl	f8c <printk>
	conn_count--;
    a5ce:	4040      	eors	r0, r0
    a5d0:	f380 8811 	msr	BASEPRI, r0
    a5d4:	f04f 0004 	mov.w	r0, #4
    a5d8:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    a5da:	2211      	movs	r2, #17
    a5dc:	210b      	movs	r1, #11
    a5de:	4628      	mov	r0, r5
    a5e0:	f7fe fde4 	bl	91ac <meta_evt>
		drp->num_reports = 1;
    a5e4:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    a5e8:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    a5ec:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    a5ee:	f008 fb6f 	bl	12cd0 <ll_rl_size_get>
    a5f2:	4581      	cmp	r9, r0
    a5f4:	f105 0003 	add.w	r0, r5, #3
    a5f8:	d215      	bcs.n	a626 <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    a5fa:	4602      	mov	r2, r0
    a5fc:	1ca9      	adds	r1, r5, #2
    a5fe:	4648      	mov	r0, r9
    a600:	f008 f9ce 	bl	129a0 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    a604:	78ab      	ldrb	r3, [r5, #2]
    a606:	3302      	adds	r3, #2
    a608:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    a60a:	2301      	movs	r3, #1
    a60c:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    a60e:	2206      	movs	r2, #6
    a610:	f107 0108 	add.w	r1, r7, #8
    a614:	f105 000a 	add.w	r0, r5, #10
    a618:	f7f7 faf0 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    a61c:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    a620:	b013      	add	sp, #76	; 0x4c
    a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    a626:	7a23      	ldrb	r3, [r4, #8]
    a628:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a62c:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    a62e:	2206      	movs	r2, #6
    a630:	f104 010a 	add.w	r1, r4, #10
    a634:	f7f7 fae2 	bl	1bfc <memcpy>
    a638:	e7e7      	b.n	a60a <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    a63a:	f106 020b 	add.w	r2, r6, #11
    a63e:	b2d2      	uxtb	r2, r2
    a640:	2102      	movs	r1, #2
    a642:	4628      	mov	r0, r5
    a644:	f7fe fdb2 	bl	91ac <meta_evt>
	sep->num_reports = 1;
    a648:	2301      	movs	r3, #1
    a64a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    a64c:	7a23      	ldrb	r3, [r4, #8]
    a64e:	aa12      	add	r2, sp, #72	; 0x48
    a650:	f003 030f 	and.w	r3, r3, #15
    a654:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    a656:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    a658:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    a65c:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a65e:	7a63      	ldrb	r3, [r4, #9]
    a660:	4423      	add	r3, r4
    a662:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    a666:	f008 fb33 	bl	12cd0 <ll_rl_size_get>
    a66a:	4581      	cmp	r9, r0
    a66c:	f105 0003 	add.w	r0, r5, #3
    a670:	d212      	bcs.n	a698 <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    a672:	4602      	mov	r2, r0
    a674:	1ca9      	adds	r1, r5, #2
    a676:	4648      	mov	r0, r9
    a678:	f008 f992 	bl	129a0 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    a67c:	78ab      	ldrb	r3, [r5, #2]
    a67e:	3302      	adds	r3, #2
    a680:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    a682:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    a684:	350a      	adds	r5, #10
    a686:	4632      	mov	r2, r6
    a688:	f107 0108 	add.w	r1, r7, #8
    a68c:	4628      	mov	r0, r5
    a68e:	f7f7 fab5 	bl	1bfc <memcpy>
	*prssi = rssi;
    a692:	f805 8006 	strb.w	r8, [r5, r6]
    a696:	e7c3      	b.n	a620 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    a698:	7a23      	ldrb	r3, [r4, #8]
    a69a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a69e:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    a6a0:	2206      	movs	r2, #6
    a6a2:	f104 010a 	add.w	r1, r4, #10
    a6a6:	f7f7 faa9 	bl	1bfc <memcpy>
    a6aa:	e7ea      	b.n	a682 <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    a6ac:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    a6ae:	4621      	mov	r1, r4
    a6b0:	4638      	mov	r0, r7
    a6b2:	f7fe fed3 	bl	945c <le_adv_ext_report.isra.69>
    a6b6:	e7b3      	b.n	a620 <hci_evt_encode+0x200>
    a6b8:	2204      	movs	r2, #4
    a6ba:	e7f8      	b.n	a6ae <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a6bc:	4b30      	ldr	r3, [pc, #192]	; (a780 <hci_evt_encode+0x360>)
    a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6c2:	2200      	movs	r2, #0
    a6c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a6c8:	4313      	orrs	r3, r2
    a6ca:	f100 060a 	add.w	r6, r0, #10
    a6ce:	d007      	beq.n	a6e0 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    a6d0:	4b2c      	ldr	r3, [pc, #176]	; (a784 <hci_evt_encode+0x364>)
    a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6d6:	2300      	movs	r3, #0
    a6d8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a6dc:	4313      	orrs	r3, r2
    a6de:	d123      	bne.n	a728 <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    a6e0:	7a23      	ldrb	r3, [r4, #8]
    a6e2:	ad12      	add	r5, sp, #72	; 0x48
    a6e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    a6e8:	2206      	movs	r2, #6
    a6ea:	4631      	mov	r1, r6
    a6ec:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    a6f0:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    a6f4:	f7f7 fa82 	bl	1bfc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    a6f8:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a6fa:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    a6fc:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a6fe:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    a700:	4631      	mov	r1, r6
    a702:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a704:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    a706:	f7fe fe6d 	bl	93e4 <bt_addr_le_to_str.constprop.75>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a70a:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    a70c:	4b21      	ldr	r3, [pc, #132]	; (a794 <hci_evt_encode+0x374>)
    a70e:	9304      	str	r3, [sp, #16]
    a710:	2200      	movs	r2, #0
    a712:	9201      	str	r2, [sp, #4]
    a714:	9300      	str	r3, [sp, #0]
    a716:	9403      	str	r4, [sp, #12]
    a718:	9602      	str	r6, [sp, #8]
    a71a:	4b23      	ldr	r3, [pc, #140]	; (a7a8 <hci_evt_encode+0x388>)
    a71c:	4a23      	ldr	r2, [pc, #140]	; (a7ac <hci_evt_encode+0x38c>)
    a71e:	4920      	ldr	r1, [pc, #128]	; (a7a0 <hci_evt_encode+0x380>)
    a720:	4823      	ldr	r0, [pc, #140]	; (a7b0 <hci_evt_encode+0x390>)
    a722:	f7f6 fc33 	bl	f8c <printk>
    a726:	e77b      	b.n	a620 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    a728:	2208      	movs	r2, #8
    a72a:	2113      	movs	r1, #19
    a72c:	4628      	mov	r0, r5
    a72e:	f7fe fd3d 	bl	91ac <meta_evt>
	sep->handle = 0;
    a732:	2300      	movs	r3, #0
    a734:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    a736:	7a23      	ldrb	r3, [r4, #8]
    a738:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a73c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    a73e:	2206      	movs	r2, #6
    a740:	4631      	mov	r1, r6
    a742:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    a744:	f7f7 fa5a 	bl	1bfc <memcpy>
    a748:	e76a      	b.n	a620 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    a74a:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    a74c:	b93f      	cbnz	r7, a75e <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    a74e:	f100 0314 	add.w	r3, r0, #20
    a752:	f100 010e 	add.w	r1, r0, #14
    a756:	22ff      	movs	r2, #255	; 0xff
    a758:	7b40      	ldrb	r0, [r0, #13]
    a75a:	f008 fbe3 	bl	12f24 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a75e:	4b08      	ldr	r3, [pc, #32]	; (a780 <hci_evt_encode+0x360>)
    a760:	e9d3 2300 	ldrd	r2, r3, [r3]
    a764:	2200      	movs	r2, #0
    a766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a76a:	4313      	orrs	r3, r2
    a76c:	f43f af58 	beq.w	a620 <hci_evt_encode+0x200>
    a770:	462b      	mov	r3, r5
    a772:	4632      	mov	r2, r6
    a774:	f104 010b 	add.w	r1, r4, #11
    a778:	4638      	mov	r0, r7
    a77a:	f7fe fd9d 	bl	92b8 <le_conn_complete.part.42>
    a77e:	e74f      	b.n	a620 <hci_evt_encode+0x200>
    a780:	20003e00 	.word	0x20003e00
    a784:	20003e08 	.word	0x20003e08
    a788:	20000844 	.word	0x20000844
    a78c:	20000848 	.word	0x20000848
    a790:	2000084c 	.word	0x2000084c
    a794:	00015af1 	.word	0x00015af1
    a798:	00016fae 	.word	0x00016fae
    a79c:	000186d1 	.word	0x000186d1
    a7a0:	00016060 	.word	0x00016060
    a7a4:	00018a40 	.word	0x00018a40
    a7a8:	000186f9 	.word	0x000186f9
    a7ac:	0001702e 	.word	0x0001702e
    a7b0:	00018a86 	.word	0x00018a86
    a7b4:	2000084e 	.word	0x2000084e
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    a7b8:	4bb2      	ldr	r3, [pc, #712]	; (aa84 <hci_evt_encode+0x664>)
    a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7be:	2300      	movs	r3, #0
    a7c0:	f002 0210 	and.w	r2, r2, #16
    a7c4:	4313      	orrs	r3, r2
    a7c6:	f43f af2b 	beq.w	a620 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    a7ca:	2204      	movs	r2, #4
    a7cc:	2105      	movs	r1, #5
    a7ce:	4628      	mov	r0, r5
    a7d0:	f7fe fcc7 	bl	9162 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a7d4:	2104      	movs	r1, #4
    a7d6:	f105 0008 	add.w	r0, r5, #8
    a7da:	f009 fb6d 	bl	13eb8 <net_buf_simple_add>
	ep->status = 0x00;
    a7de:	2300      	movs	r3, #0
    a7e0:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a7e2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    a7e6:	7a23      	ldrb	r3, [r4, #8]
    a7e8:	70c3      	strb	r3, [r0, #3]
	LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    a7ea:	b13e      	cbz	r6, a7fc <hci_evt_encode+0x3dc>
    a7ec:	4ba6      	ldr	r3, [pc, #664]	; (aa88 <hci_evt_encode+0x668>)
    a7ee:	9301      	str	r3, [sp, #4]
    a7f0:	9300      	str	r3, [sp, #0]
    a7f2:	4aa6      	ldr	r2, [pc, #664]	; (aa8c <hci_evt_encode+0x66c>)
    a7f4:	4ba6      	ldr	r3, [pc, #664]	; (aa90 <hci_evt_encode+0x670>)
    a7f6:	49a7      	ldr	r1, [pc, #668]	; (aa94 <hci_evt_encode+0x674>)
    a7f8:	48a7      	ldr	r0, [pc, #668]	; (aa98 <hci_evt_encode+0x678>)
    a7fa:	e6e6      	b.n	a5ca <hci_evt_encode+0x1aa>
	hci_hbuf_acked += hci_hbuf_pend[handle];
    a7fc:	4aa7      	ldr	r2, [pc, #668]	; (aa9c <hci_evt_encode+0x67c>)
    a7fe:	49a8      	ldr	r1, [pc, #672]	; (aaa0 <hci_evt_encode+0x680>)
    a800:	8813      	ldrh	r3, [r2, #0]
    a802:	6808      	ldr	r0, [r1, #0]
	hci_hbuf_pend[handle] = 0;
    a804:	8016      	strh	r6, [r2, #0]
	conn_count--;
    a806:	4aa7      	ldr	r2, [pc, #668]	; (aaa4 <hci_evt_encode+0x684>)
	hci_hbuf_acked += hci_hbuf_pend[handle];
    a808:	4403      	add	r3, r0
    a80a:	600b      	str	r3, [r1, #0]
	conn_count--;
    a80c:	6813      	ldr	r3, [r2, #0]
    a80e:	3b01      	subs	r3, #1
    a810:	6013      	str	r3, [r2, #0]
    a812:	e705      	b.n	a620 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a814:	4b9b      	ldr	r3, [pc, #620]	; (aa84 <hci_evt_encode+0x664>)
    a816:	e9d3 2300 	ldrd	r2, r3, [r3]
    a81a:	2200      	movs	r2, #0
    a81c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a820:	4313      	orrs	r3, r2
    a822:	f43f aefd 	beq.w	a620 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    a826:	4ba0      	ldr	r3, [pc, #640]	; (aaa8 <hci_evt_encode+0x688>)
    a828:	e9d3 2300 	ldrd	r2, r3, [r3]
    a82c:	2300      	movs	r3, #0
    a82e:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a832:	4313      	orrs	r3, r2
    a834:	f43f aef4 	beq.w	a620 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    a838:	2209      	movs	r2, #9
    a83a:	2103      	movs	r1, #3
    a83c:	4628      	mov	r0, r5
    a83e:	f7fe fcb5 	bl	91ac <meta_evt>
	sep->status = radio_cu->status;
    a842:	7ae3      	ldrb	r3, [r4, #11]
    a844:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    a846:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    a848:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    a84c:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    a850:	89e3      	ldrh	r3, [r4, #14]
    a852:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    a856:	8a23      	ldrh	r3, [r4, #16]
    a858:	f8a0 3007 	strh.w	r3, [r0, #7]
    a85c:	e6e0      	b.n	a620 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    a85e:	4b89      	ldr	r3, [pc, #548]	; (aa84 <hci_evt_encode+0x664>)
    a860:	e9d3 2300 	ldrd	r2, r3, [r3]
    a864:	2200      	movs	r2, #0
    a866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a86a:	4313      	orrs	r3, r2
    a86c:	f43f aed8 	beq.w	a620 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    a870:	2203      	movs	r2, #3
    a872:	2130      	movs	r1, #48	; 0x30
    a874:	4628      	mov	r0, r5
    a876:	f7fe fc74 	bl	9162 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a87a:	2103      	movs	r1, #3
    a87c:	f105 0008 	add.w	r0, r5, #8
    a880:	f009 fb1a 	bl	13eb8 <net_buf_simple_add>
	ep->status = 0x00;
    a884:	2300      	movs	r3, #0
    a886:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a888:	f8a0 6001 	strh.w	r6, [r0, #1]
    a88c:	e6c8      	b.n	a620 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    a88e:	4b87      	ldr	r3, [pc, #540]	; (aaac <hci_evt_encode+0x68c>)
    a890:	e9d3 2300 	ldrd	r2, r3, [r3]
    a894:	2300      	movs	r3, #0
    a896:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    a89a:	4313      	orrs	r3, r2
    a89c:	f43f aec0 	beq.w	a620 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    a8a0:	2202      	movs	r2, #2
    a8a2:	2157      	movs	r1, #87	; 0x57
    a8a4:	4628      	mov	r0, r5
    a8a6:	f7fe fc5c 	bl	9162 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a8aa:	2102      	movs	r1, #2
    a8ac:	f105 0008 	add.w	r0, r5, #8
    a8b0:	f009 fb02 	bl	13eb8 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    a8b4:	8006      	strh	r6, [r0, #0]
    a8b6:	e6b3      	b.n	a620 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a8b8:	4b72      	ldr	r3, [pc, #456]	; (aa84 <hci_evt_encode+0x664>)
    a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8be:	2200      	movs	r2, #0
    a8c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a8c4:	4313      	orrs	r3, r2
    a8c6:	f43f aeab 	beq.w	a620 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    a8ca:	4b77      	ldr	r3, [pc, #476]	; (aaa8 <hci_evt_encode+0x688>)
    a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8d0:	2300      	movs	r3, #0
    a8d2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a8d6:	4313      	orrs	r3, r2
    a8d8:	f43f aea2 	beq.w	a620 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    a8dc:	2203      	movs	r2, #3
    a8de:	2114      	movs	r1, #20
    a8e0:	4628      	mov	r0, r5
    a8e2:	f7fe fc63 	bl	91ac <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a8e6:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    a8e8:	7ae3      	ldrb	r3, [r4, #11]
    a8ea:	7083      	strb	r3, [r0, #2]
    a8ec:	e698      	b.n	a620 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a8ee:	4b65      	ldr	r3, [pc, #404]	; (aa84 <hci_evt_encode+0x664>)
    a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8f4:	2200      	movs	r2, #0
    a8f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a8fa:	4313      	orrs	r3, r2
    a8fc:	d007      	beq.n	a90e <hci_evt_encode+0x4ee>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    a8fe:	4b6a      	ldr	r3, [pc, #424]	; (aaa8 <hci_evt_encode+0x688>)
    a900:	e9d3 2300 	ldrd	r2, r3, [r3]
    a904:	2300      	movs	r3, #0
    a906:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a90a:	4313      	orrs	r3, r2
    a90c:	d122      	bne.n	a954 <hci_evt_encode+0x534>
    a90e:	7b22      	ldrb	r2, [r4, #12]
    a910:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    a912:	4867      	ldr	r0, [pc, #412]	; (aab0 <hci_evt_encode+0x690>)
    a914:	2a00      	cmp	r2, #0
    a916:	fa92 f3a2 	rbit	r3, r2
    a91a:	fab3 f383 	clz	r3, r3
    a91e:	fa91 f2a1 	rbit	r2, r1
    a922:	bf08      	it	eq
    a924:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a928:	2900      	cmp	r1, #0
    a92a:	fab2 f282 	clz	r2, r2
    a92e:	bf08      	it	eq
    a930:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    a934:	4954      	ldr	r1, [pc, #336]	; (aa88 <hci_evt_encode+0x668>)
    a936:	9105      	str	r1, [sp, #20]
    a938:	3301      	adds	r3, #1
    a93a:	3201      	adds	r2, #1
    a93c:	9204      	str	r2, [sp, #16]
    a93e:	9303      	str	r3, [sp, #12]
    a940:	7ae3      	ldrb	r3, [r4, #11]
    a942:	9302      	str	r3, [sp, #8]
    a944:	e88d 0042 	stmia.w	sp, {r1, r6}
    a948:	4b5a      	ldr	r3, [pc, #360]	; (aab4 <hci_evt_encode+0x694>)
    a94a:	4a5b      	ldr	r2, [pc, #364]	; (aab8 <hci_evt_encode+0x698>)
    a94c:	4951      	ldr	r1, [pc, #324]	; (aa94 <hci_evt_encode+0x674>)
    a94e:	f7f6 fb1d 	bl	f8c <printk>
    a952:	e665      	b.n	a620 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    a954:	2205      	movs	r2, #5
    a956:	210c      	movs	r1, #12
    a958:	4628      	mov	r0, r5
    a95a:	f7fe fc27 	bl	91ac <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    a95e:	7ae3      	ldrb	r3, [r4, #11]
    a960:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a962:	f8a0 6001 	strh.w	r6, [r0, #1]
    a966:	7b22      	ldrb	r2, [r4, #12]
    a968:	2a00      	cmp	r2, #0
    a96a:	fa92 f3a2 	rbit	r3, r2
    a96e:	fab3 f383 	clz	r3, r3
    a972:	bf08      	it	eq
    a974:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a978:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    a97a:	70c3      	strb	r3, [r0, #3]
    a97c:	7b62      	ldrb	r2, [r4, #13]
    a97e:	fa92 f3a2 	rbit	r3, r2
    a982:	2a00      	cmp	r2, #0
    a984:	fab3 f383 	clz	r3, r3
    a988:	bf08      	it	eq
    a98a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a98e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    a990:	7103      	strb	r3, [r0, #4]
    a992:	e645      	b.n	a620 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    a994:	4b3c      	ldr	r3, [pc, #240]	; (aa88 <hci_evt_encode+0x668>)
    a996:	9301      	str	r3, [sp, #4]
    a998:	9300      	str	r3, [sp, #0]
    a99a:	4b48      	ldr	r3, [pc, #288]	; (aabc <hci_evt_encode+0x69c>)
		LL_ASSERT(0);
    a99c:	4a3b      	ldr	r2, [pc, #236]	; (aa8c <hci_evt_encode+0x66c>)
    a99e:	493d      	ldr	r1, [pc, #244]	; (aa94 <hci_evt_encode+0x674>)
    a9a0:	4847      	ldr	r0, [pc, #284]	; (aac0 <hci_evt_encode+0x6a0>)
    a9a2:	e612      	b.n	a5ca <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    a9a4:	7ac3      	ldrb	r3, [r0, #11]
    a9a6:	3b03      	subs	r3, #3
    a9a8:	2b12      	cmp	r3, #18
    a9aa:	f200 80e6 	bhi.w	ab7a <hci_evt_encode+0x75a>
    a9ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    a9b2:	0013      	.short	0x0013
    a9b4:	00e400e4 	.word	0x00e400e4
    a9b8:	00d10038 	.word	0x00d10038
    a9bc:	003e00e4 	.word	0x003e00e4
    a9c0:	00e400e4 	.word	0x00e400e4
    a9c4:	00640045 	.word	0x00640045
    a9c8:	008900e4 	.word	0x008900e4
    a9cc:	00e400e4 	.word	0x00e400e4
    a9d0:	00e400e4 	.word	0x00e400e4
    a9d4:	00b100b1 	.word	0x00b100b1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a9d8:	4b2a      	ldr	r3, [pc, #168]	; (aa84 <hci_evt_encode+0x664>)
    a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9de:	2200      	movs	r2, #0
    a9e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a9e4:	4313      	orrs	r3, r2
    a9e6:	f43f ae1b 	beq.w	a620 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    a9ea:	4b2f      	ldr	r3, [pc, #188]	; (aaa8 <hci_evt_encode+0x688>)
    a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9f0:	2300      	movs	r3, #0
    a9f2:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a9f6:	4313      	orrs	r3, r2
    a9f8:	f43f ae12 	beq.w	a620 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a9fc:	220c      	movs	r2, #12
    a9fe:	2105      	movs	r1, #5
    aa00:	4628      	mov	r0, r5
    aa02:	f7fe fbd3 	bl	91ac <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    aa06:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    aa08:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    aa0a:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    aa0e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    aa12:	f7f7 f8f3 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    aa16:	2202      	movs	r2, #2
    aa18:	f104 0114 	add.w	r1, r4, #20
    aa1c:	f105 000a 	add.w	r0, r5, #10
    aa20:	e690      	b.n	a744 <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    aa22:	460a      	mov	r2, r1
    aa24:	2000      	movs	r0, #0
    aa26:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    aa28:	f7fe fbf8 	bl	921c <encrypt_change>
    aa2c:	e5f8      	b.n	a620 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    aa2e:	460b      	mov	r3, r1
    aa30:	4632      	mov	r2, r6
    aa32:	4639      	mov	r1, r7
    aa34:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    aa36:	f7fe fc11 	bl	925c <le_remote_feat_complete>
    aa3a:	e5f1      	b.n	a620 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    aa3c:	4b11      	ldr	r3, [pc, #68]	; (aa84 <hci_evt_encode+0x664>)
    aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa42:	2300      	movs	r3, #0
    aa44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    aa48:	4313      	orrs	r3, r2
    aa4a:	f43f ade9 	beq.w	a620 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    aa4e:	2208      	movs	r2, #8
    aa50:	210c      	movs	r1, #12
    aa52:	4628      	mov	r0, r5
    aa54:	f7fe fb85 	bl	9162 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    aa58:	2108      	movs	r1, #8
    aa5a:	1868      	adds	r0, r5, r1
    aa5c:	f009 fa2c 	bl	13eb8 <net_buf_simple_add>
	ep->status = 0x00;
    aa60:	2300      	movs	r3, #0
    aa62:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    aa64:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    aa68:	7b23      	ldrb	r3, [r4, #12]
    aa6a:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    aa6c:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    aa70:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    aa72:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    aa76:	80c3      	strh	r3, [r0, #6]
    aa78:	e5d2      	b.n	a620 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    aa7a:	460a      	mov	r2, r1
    aa7c:	7b00      	ldrb	r0, [r0, #12]
    aa7e:	4631      	mov	r1, r6
    aa80:	e7d2      	b.n	aa28 <hci_evt_encode+0x608>
    aa82:	bf00      	nop
    aa84:	20003e00 	.word	0x20003e00
    aa88:	00015af1 	.word	0x00015af1
    aa8c:	00016fae 	.word	0x00016fae
    aa90:	0001870e 	.word	0x0001870e
    aa94:	00016060 	.word	0x00016060
    aa98:	000187c4 	.word	0x000187c4
    aa9c:	2000192c 	.word	0x2000192c
    aaa0:	2000193c 	.word	0x2000193c
    aaa4:	20000840 	.word	0x20000840
    aaa8:	20003e08 	.word	0x20003e08
    aaac:	200008d0 	.word	0x200008d0
    aab0:	00018ab9 	.word	0x00018ab9
    aab4:	0001871f 	.word	0x0001871f
    aab8:	0001702e 	.word	0x0001702e
    aabc:	00018733 	.word	0x00018733
    aac0:	00016f22 	.word	0x00016f22
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aac4:	4b2f      	ldr	r3, [pc, #188]	; (ab84 <hci_evt_encode+0x764>)
    aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
    aaca:	2200      	movs	r2, #0
    aacc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    aad0:	4313      	orrs	r3, r2
    aad2:	d007      	beq.n	aae4 <hci_evt_encode+0x6c4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    aad4:	4b2c      	ldr	r3, [pc, #176]	; (ab88 <hci_evt_encode+0x768>)
    aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
    aada:	2300      	movs	r3, #0
    aadc:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aae0:	4313      	orrs	r3, r2
    aae2:	d108      	bne.n	aaf6 <hci_evt_encode+0x6d6>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    aae4:	2300      	movs	r3, #0
    aae6:	9301      	str	r3, [sp, #4]
    aae8:	9300      	str	r3, [sp, #0]
    aaea:	221a      	movs	r2, #26
    aaec:	2102      	movs	r1, #2
    aaee:	4630      	mov	r0, r6
    aaf0:	f006 fdac 	bl	1164c <ll_conn_update>
    aaf4:	e594      	b.n	a620 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    aaf6:	220a      	movs	r2, #10
    aaf8:	2106      	movs	r1, #6
    aafa:	4628      	mov	r0, r5
    aafc:	f7fe fb56 	bl	91ac <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    ab00:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    ab02:	89a3      	ldrh	r3, [r4, #12]
    ab04:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    ab06:	89e3      	ldrh	r3, [r4, #14]
    ab08:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    ab0a:	8a23      	ldrh	r3, [r4, #16]
    ab0c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    ab0e:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    ab10:	8103      	strh	r3, [r0, #8]
    ab12:	e585      	b.n	a620 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ab14:	4b1b      	ldr	r3, [pc, #108]	; (ab84 <hci_evt_encode+0x764>)
    ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab1a:	2200      	movs	r2, #0
    ab1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ab20:	4313      	orrs	r3, r2
    ab22:	f43f ad7d 	beq.w	a620 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    ab26:	4b18      	ldr	r3, [pc, #96]	; (ab88 <hci_evt_encode+0x768>)
    ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab2c:	2300      	movs	r3, #0
    ab2e:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ab32:	4313      	orrs	r3, r2
    ab34:	f43f ad74 	beq.w	a620 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    ab38:	220a      	movs	r2, #10
    ab3a:	2107      	movs	r1, #7
    ab3c:	4628      	mov	r0, r5
    ab3e:	f7fe fb35 	bl	91ac <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    ab42:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    ab44:	8a23      	ldrh	r3, [r4, #16]
    ab46:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    ab48:	8a63      	ldrh	r3, [r4, #18]
    ab4a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    ab4c:	89a3      	ldrh	r3, [r4, #12]
    ab4e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    ab50:	89e3      	ldrh	r3, [r4, #14]
    ab52:	e7dd      	b.n	ab10 <hci_evt_encode+0x6f0>
    ab54:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    ab56:	2a0e      	cmp	r2, #14
    ab58:	d104      	bne.n	ab64 <hci_evt_encode+0x744>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    ab5a:	460b      	mov	r3, r1
    ab5c:	4632      	mov	r2, r6
    ab5e:	2100      	movs	r1, #0
    ab60:	201a      	movs	r0, #26
    ab62:	e768      	b.n	aa36 <hci_evt_encode+0x616>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    ab64:	4b09      	ldr	r3, [pc, #36]	; (ab8c <hci_evt_encode+0x76c>)
    ab66:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    ab68:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    ab6a:	9300      	str	r3, [sp, #0]
    ab6c:	4a08      	ldr	r2, [pc, #32]	; (ab90 <hci_evt_encode+0x770>)
    ab6e:	4b09      	ldr	r3, [pc, #36]	; (ab94 <hci_evt_encode+0x774>)
    ab70:	4909      	ldr	r1, [pc, #36]	; (ab98 <hci_evt_encode+0x778>)
    ab72:	480a      	ldr	r0, [pc, #40]	; (ab9c <hci_evt_encode+0x77c>)
    ab74:	f7f6 fa0a 	bl	f8c <printk>
    ab78:	e552      	b.n	a620 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    ab7a:	4b04      	ldr	r3, [pc, #16]	; (ab8c <hci_evt_encode+0x76c>)
    ab7c:	9301      	str	r3, [sp, #4]
    ab7e:	9300      	str	r3, [sp, #0]
    ab80:	4b07      	ldr	r3, [pc, #28]	; (aba0 <hci_evt_encode+0x780>)
    ab82:	e70b      	b.n	a99c <hci_evt_encode+0x57c>
    ab84:	20003e00 	.word	0x20003e00
    ab88:	20003e08 	.word	0x20003e08
    ab8c:	00015af1 	.word	0x00015af1
    ab90:	0001702e 	.word	0x0001702e
    ab94:	00018742 	.word	0x00018742
    ab98:	00016060 	.word	0x00016060
    ab9c:	00018af5 	.word	0x00018af5
    aba0:	00018751 	.word	0x00018751

0000aba4 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    aba4:	b570      	push	{r4, r5, r6, lr}
    aba6:	4606      	mov	r6, r0
    aba8:	460d      	mov	r5, r1
    abaa:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    abac:	2113      	movs	r1, #19
    abae:	2205      	movs	r2, #5
    abb0:	f7fe fad7 	bl	9162 <evt_create>

	ep = net_buf_add(buf, len);
    abb4:	2105      	movs	r1, #5
    abb6:	f106 0008 	add.w	r0, r6, #8
    abba:	f009 f97d 	bl	13eb8 <net_buf_simple_add>
	ep->num_handles = num_handles;
    abbe:	2301      	movs	r3, #1
    abc0:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    abc2:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    abc6:	f8a0 4003 	strh.w	r4, [r0, #3]
    abca:	bd70      	pop	{r4, r5, r6, pc}

0000abcc <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    abcc:	7903      	ldrb	r3, [r0, #4]
    abce:	2b01      	cmp	r3, #1
    abd0:	d006      	beq.n	abe0 <hci_get_class+0x14>
    abd2:	3b02      	subs	r3, #2
    abd4:	b2db      	uxtb	r3, r3
    abd6:	2b0a      	cmp	r3, #10
    abd8:	d80a      	bhi.n	abf0 <hci_get_class+0x24>
    abda:	4a07      	ldr	r2, [pc, #28]	; (abf8 <hci_get_class+0x2c>)
    abdc:	56d0      	ldrsb	r0, [r2, r3]
    abde:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    abe0:	7a03      	ldrb	r3, [r0, #8]
    abe2:	f003 0303 	and.w	r3, r3, #3
    abe6:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    abe8:	bf0c      	ite	eq
    abea:	2002      	moveq	r0, #2
    abec:	2003      	movne	r0, #3
    abee:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    abf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    abf4:	4770      	bx	lr
    abf6:	bf00      	nop
    abf8:	00018668 	.word	0x00018668

0000abfc <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
    abfc:	4b02      	ldr	r3, [pc, #8]	; (ac08 <hci_init+0xc>)
#endif
	reset(NULL, NULL);
    abfe:	2100      	movs	r1, #0
	hbuf_signal = signal_host_buf;
    ac00:	6018      	str	r0, [r3, #0]
	reset(NULL, NULL);
    ac02:	4608      	mov	r0, r1
    ac04:	f7fe bca4 	b.w	9550 <reset>
    ac08:	200008d8 	.word	0x200008d8

0000ac0c <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    ac0c:	bf20      	wfe
	__SEV();
    ac0e:	bf40      	sev
	__WFE();
    ac10:	bf20      	wfe
    ac12:	4770      	bx	lr

0000ac14 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    ac14:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    ac16:	4b0d      	ldr	r3, [pc, #52]	; (ac4c <pdu_len_cmp+0x38>)
{
    ac18:	b089      	sub	sp, #36	; 0x24
    ac1a:	4605      	mov	r5, r0
    ac1c:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    ac1e:	aa01      	add	r2, sp, #4
    ac20:	f103 0718 	add.w	r7, r3, #24
    ac24:	6818      	ldr	r0, [r3, #0]
    ac26:	6859      	ldr	r1, [r3, #4]
    ac28:	4614      	mov	r4, r2
    ac2a:	c403      	stmia	r4!, {r0, r1}
    ac2c:	3308      	adds	r3, #8
    ac2e:	42bb      	cmp	r3, r7
    ac30:	4622      	mov	r2, r4
    ac32:	d1f7      	bne.n	ac24 <pdu_len_cmp+0x10>
    ac34:	881b      	ldrh	r3, [r3, #0]
    ac36:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    ac38:	ab08      	add	r3, sp, #32
    ac3a:	441d      	add	r5, r3
    ac3c:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    ac40:	1b83      	subs	r3, r0, r6
    ac42:	4258      	negs	r0, r3
    ac44:	4158      	adcs	r0, r3
    ac46:	b009      	add	sp, #36	; 0x24
    ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac4a:	bf00      	nop
    ac4c:	00015a43 	.word	0x00015a43

0000ac50 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    ac50:	6008      	str	r0, [r1, #0]
    ac52:	4770      	bx	lr

0000ac54 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    ac54:	b918      	cbnz	r0, ac5e <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    ac56:	680b      	ldr	r3, [r1, #0]
    ac58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ac5c:	600b      	str	r3, [r1, #0]
    ac5e:	4770      	bx	lr

0000ac60 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    ac60:	b918      	cbnz	r0, ac6a <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    ac62:	680b      	ldr	r3, [r1, #0]
    ac64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    ac68:	600b      	str	r3, [r1, #0]
    ac6a:	4770      	bx	lr

0000ac6c <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    ac6c:	b570      	push	{r4, r5, r6, lr}
    ac6e:	1d03      	adds	r3, r0, #4
    ac70:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    ac72:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    ac74:	429d      	cmp	r5, r3
    ac76:	d101      	bne.n	ac7c <chan_sel_remap+0x10>
    ac78:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    ac7a:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    ac7c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    ac80:	2200      	movs	r2, #0
    ac82:	18a0      	adds	r0, r4, r2
    ac84:	2a08      	cmp	r2, #8
    ac86:	b2c0      	uxtb	r0, r0
    ac88:	d101      	bne.n	ac8e <chan_sel_remap+0x22>
    ac8a:	4604      	mov	r4, r0
    ac8c:	e7f2      	b.n	ac74 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    ac8e:	f016 0f01 	tst.w	r6, #1
    ac92:	d003      	beq.n	ac9c <chan_sel_remap+0x30>
				if (chan_index == 0) {
    ac94:	2900      	cmp	r1, #0
    ac96:	d0f0      	beq.n	ac7a <chan_sel_remap+0xe>
				chan_index--;
    ac98:	3901      	subs	r1, #1
    ac9a:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    ac9c:	0876      	lsrs	r6, r6, #1
    ac9e:	3201      	adds	r2, #1
    aca0:	e7ef      	b.n	ac82 <chan_sel_remap+0x16>
	...

0000aca4 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    aca4:	4b09      	ldr	r3, [pc, #36]	; (accc <packet_rx_acquired_count_get+0x28>)
    aca6:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    acaa:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    acae:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    acb0:	bf3b      	ittet	cc
    acb2:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    acb6:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    acba:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    acbe:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    acc0:	bf2c      	ite	cs
    acc2:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    acc4:	1a80      	subcc	r0, r0, r2
    acc6:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    acc8:	4770      	bx	lr
    acca:	bf00      	nop
    accc:	200008dc 	.word	0x200008dc

0000acd0 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    acd0:	b508      	push	{r3, lr}
    acd2:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    acd4:	f7ff ffe6 	bl	aca4 <packet_rx_acquired_count_get>
    acd8:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    acda:	bf21      	itttt	cs
    acdc:	4b04      	ldrcs	r3, [pc, #16]	; (acf0 <packet_rx_reserve_get+0x20>)
    acde:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    ace2:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    ace6:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    acea:	bf38      	it	cc
    acec:	2000      	movcc	r0, #0
}
    acee:	bd08      	pop	{r3, pc}
    acf0:	200008dc 	.word	0x200008dc

0000acf4 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    acf4:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    acf6:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    acfa:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    acfe:	429c      	cmp	r4, r3
    ad00:	d15a      	bne.n	adb8 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    ad02:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    ad06:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    ad0a:	428b      	cmp	r3, r1
    ad0c:	d154      	bne.n	adb8 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    ad0e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    ad12:	2b00      	cmp	r3, #0
    ad14:	db25      	blt.n	ad62 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    ad16:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    ad18:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    ad1a:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    ad1e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    ad20:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    ad24:	4351      	muls	r1, r2
					      conn->supervision_reload *
    ad26:	227d      	movs	r2, #125	; 0x7d
    ad28:	434a      	muls	r2, r1
					      125 / 1000;
    ad2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ad2e:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    ad32:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    ad36:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    ad3a:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    ad3c:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    ad40:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    ad42:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    ad44:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    ad48:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    ad4a:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    ad4e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    ad52:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    ad56:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    ad5a:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    ad5e:	4618      	mov	r0, r3
    ad60:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    ad62:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    ad66:	06dc      	lsls	r4, r3, #27
    ad68:	d428      	bmi.n	adbc <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    ad6a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    ad6e:	069a      	lsls	r2, r3, #26
    ad70:	d503      	bpl.n	ad7a <conn_update_req+0x86>
		    (conn->llcp_features &
    ad72:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    ad76:	079b      	lsls	r3, r3, #30
    ad78:	d520      	bpl.n	adbc <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    ad7a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    ad7c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    ad7e:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    ad82:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    ad84:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    ad88:	4354      	muls	r4, r2
						conn->supervision_reload *
    ad8a:	227d      	movs	r2, #125	; 0x7d
    ad8c:	4362      	muls	r2, r4
						125 / 1000;
    ad8e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    ad92:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    ad96:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    ad9a:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    ad9e:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    ada0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    ada4:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    ada8:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    adaa:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    adae:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    adb2:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    adb6:	e7d2      	b.n	ad5e <conn_update_req+0x6a>
		return 1;
    adb8:	2001      	movs	r0, #1
    adba:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    adbc:	2002      	movs	r0, #2
}
    adbe:	bd30      	pop	{r4, r5, pc}

0000adc0 <packet_rx_allocate>:
{
    adc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    adc4:	4d22      	ldr	r5, [pc, #136]	; (ae50 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    adc6:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    adca:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    adce:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    add2:	3401      	adds	r4, #1
    add4:	4581      	cmp	r9, r0
    add6:	b2e4      	uxtb	r4, r4
    add8:	bf28      	it	cs
    adda:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    addc:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    ade0:	42a3      	cmp	r3, r4
    ade2:	bf08      	it	eq
    ade4:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    ade6:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    adea:	f1b9 0f00 	cmp.w	r9, #0
    adee:	d003      	beq.n	adf8 <packet_rx_allocate+0x38>
    adf0:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    adf4:	429c      	cmp	r4, r3
    adf6:	d101      	bne.n	adfc <packet_rx_allocate+0x3c>
    adf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    adfc:	4638      	mov	r0, r7
    adfe:	f7fc fdd2 	bl	79a6 <mem_acquire>
		if (!link) {
    ae02:	4606      	mov	r6, r0
    ae04:	2800      	cmp	r0, #0
    ae06:	d0f7      	beq.n	adf8 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    ae08:	4640      	mov	r0, r8
    ae0a:	f7fc fdcc 	bl	79a6 <mem_acquire>
		if (!node_rx) {
    ae0e:	b928      	cbnz	r0, ae1c <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    ae10:	4630      	mov	r0, r6
    ae12:	4910      	ldr	r1, [pc, #64]	; (ae54 <packet_rx_allocate+0x94>)
}
    ae14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    ae18:	f7fc bddf 	b.w	79da <mem_release>
		node_rx->hdr.onion.link = link;
    ae1c:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    ae1e:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    ae22:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    ae26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    ae2a:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    ae2e:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    ae32:	3401      	adds	r4, #1
    ae34:	b2e4      	uxtb	r4, r4
			acquire = 0;
    ae36:	42a3      	cmp	r3, r4
    ae38:	bf08      	it	eq
    ae3a:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    ae3c:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    ae40:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ae44:	3b01      	subs	r3, #1
    ae46:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    ae4a:	fa5f f989 	uxtb.w	r9, r9
    ae4e:	e7cc      	b.n	adea <packet_rx_allocate+0x2a>
    ae50:	200008dc 	.word	0x200008dc
    ae54:	20000a24 	.word	0x20000a24

0000ae58 <common_init>:
{
    ae58:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    ae5a:	4c39      	ldr	r4, [pc, #228]	; (af40 <common_init+0xe8>)
    ae5c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    ae60:	2a00      	cmp	r2, #0
    ae62:	d040      	beq.n	aee6 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    ae64:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    ae68:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ae6c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    ae70:	f7fc fd72 	bl	7958 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    ae74:	4b33      	ldr	r3, [pc, #204]	; (af44 <common_init+0xec>)
    ae76:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    ae7a:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    ae7e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    ae82:	f7fc fd69 	bl	7958 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    ae86:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    ae8a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    ae8e:	4b2e      	ldr	r3, [pc, #184]	; (af48 <common_init+0xf0>)
    ae90:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    ae94:	440a      	add	r2, r1
    ae96:	2108      	movs	r1, #8
    ae98:	f7fc fd5e 	bl	7958 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    ae9c:	4b2b      	ldr	r3, [pc, #172]	; (af4c <common_init+0xf4>)
    ae9e:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    aea2:	2202      	movs	r2, #2
    aea4:	2124      	movs	r1, #36	; 0x24
    aea6:	f7fc fd57 	bl	7958 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    aeaa:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    aeae:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    aeb2:	4b27      	ldr	r3, [pc, #156]	; (af50 <common_init+0xf8>)
    aeb4:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    aeb8:	3a01      	subs	r2, #1
    aeba:	b292      	uxth	r2, r2
    aebc:	f7fc fd4c 	bl	7958 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    aec0:	4821      	ldr	r0, [pc, #132]	; (af48 <common_init+0xf0>)
    aec2:	f7fc fd70 	bl	79a6 <mem_acquire>
	LL_ASSERT(link);
    aec6:	b988      	cbnz	r0, aeec <common_init+0x94>
    aec8:	4b22      	ldr	r3, [pc, #136]	; (af54 <common_init+0xfc>)
    aeca:	9301      	str	r3, [sp, #4]
    aecc:	9300      	str	r3, [sp, #0]
    aece:	4a22      	ldr	r2, [pc, #136]	; (af58 <common_init+0x100>)
    aed0:	4b22      	ldr	r3, [pc, #136]	; (af5c <common_init+0x104>)
    aed2:	4923      	ldr	r1, [pc, #140]	; (af60 <common_init+0x108>)
    aed4:	4823      	ldr	r0, [pc, #140]	; (af64 <common_init+0x10c>)
    aed6:	f7f6 f859 	bl	f8c <printk>
    aeda:	4040      	eors	r0, r0
    aedc:	f380 8811 	msr	BASEPRI, r0
    aee0:	f04f 0004 	mov.w	r0, #4
    aee4:	df02      	svc	2
		_radio.conn_free = NULL;
    aee6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    aeea:	e7c3      	b.n	ae74 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    aeec:	4a1e      	ldr	r2, [pc, #120]	; (af68 <common_init+0x110>)
    aeee:	1f11      	subs	r1, r2, #4
    aef0:	f7fc fdb0 	bl	7a54 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    aef4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    aef8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    aefc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    af00:	231f      	movs	r3, #31
    af02:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    af06:	2325      	movs	r3, #37	; 0x25
    af08:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    af0c:	231b      	movs	r3, #27
    af0e:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    af12:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    af16:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    af18:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    af1c:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    af1e:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    af22:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    af26:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    af2a:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    af2e:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    af32:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    af36:	b002      	add	sp, #8
    af38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    af3c:	f7ff bf40 	b.w	adc0 <packet_rx_allocate>
    af40:	200008dc 	.word	0x200008dc
    af44:	20000a0c 	.word	0x20000a0c
    af48:	20000a24 	.word	0x20000a24
    af4c:	20000a38 	.word	0x20000a38
    af50:	20000a40 	.word	0x20000a40
    af54:	00015af1 	.word	0x00015af1
    af58:	00016fae 	.word	0x00016fae
    af5c:	00018bc7 	.word	0x00018bc7
    af60:	00016060 	.word	0x00016060
    af64:	00019044 	.word	0x00019044
    af68:	20000a2c 	.word	0x20000a2c

0000af6c <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    af6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    af70:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    af72:	4294      	cmp	r4, r2
{
    af74:	4681      	mov	r9, r0
    af76:	460f      	mov	r7, r1
    af78:	4690      	mov	r8, r2
	if (_first == last) {
    af7a:	d03d      	beq.n	aff8 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    af7c:	4e1f      	ldr	r6, [pc, #124]	; (affc <tx_cmplt_get+0x90>)
    af7e:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    af82:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    af86:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    af88:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    af8a:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    af8e:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    af92:	b222      	sxth	r2, r4
    af94:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    af98:	f8b9 e000 	ldrh.w	lr, [r9]
    af9c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    afa0:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    afa4:	4596      	cmp	lr, r2
    afa6:	d120      	bne.n	afea <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    afa8:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    afaa:	2801      	cmp	r0, #1
    afac:	f020 0303 	bic.w	r3, r0, #3
    afb0:	d90a      	bls.n	afc8 <tx_cmplt_get+0x5c>
    afb2:	b1f3      	cbz	r3, aff2 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    afb4:	1d02      	adds	r2, r0, #4
    afb6:	d01c      	beq.n	aff2 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    afb8:	7942      	ldrb	r2, [r0, #5]
    afba:	b1d2      	cbz	r2, aff2 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    afbc:	7902      	ldrb	r2, [r0, #4]
    afbe:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    afc2:	3a01      	subs	r2, #1
    afc4:	2a01      	cmp	r2, #1
    afc6:	d814      	bhi.n	aff2 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    afc8:	2201      	movs	r2, #1
			cmplt++;
    afca:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    afcc:	604a      	str	r2, [r1, #4]
			cmplt++;
    afce:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    afd0:	b113      	cbz	r3, afd8 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    afd2:	4651      	mov	r1, sl
    afd4:	f7fc fd01 	bl	79da <mem_release>
		}

		_first = _first + 1;
    afd8:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    afda:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    afde:	b2e4      	uxtb	r4, r4
			_first = 0;
    afe0:	42a2      	cmp	r2, r4
    afe2:	bf08      	it	eq
    afe4:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    afe6:	4544      	cmp	r4, r8
    afe8:	d1d3      	bne.n	af92 <tx_cmplt_get+0x26>

	*first = _first;
    afea:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    afec:	4628      	mov	r0, r5
    afee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    aff2:	f8c1 b004 	str.w	fp, [r1, #4]
    aff6:	e7eb      	b.n	afd0 <tx_cmplt_get+0x64>
		return 0;
    aff8:	2500      	movs	r5, #0
    affa:	e7f7      	b.n	afec <tx_cmplt_get+0x80>
    affc:	200008dc 	.word	0x200008dc

0000b000 <connection_get>:
{
    b000:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    b002:	4b09      	ldr	r3, [pc, #36]	; (b028 <connection_get+0x28>)
    b004:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    b008:	4282      	cmp	r2, r0
{
    b00a:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    b00c:	d90a      	bls.n	b024 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    b00e:	4602      	mov	r2, r0
    b010:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b014:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    b018:	f7fc fcfa 	bl	7a10 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    b01c:	b110      	cbz	r0, b024 <connection_get+0x24>
    b01e:	8c03      	ldrh	r3, [r0, #32]
    b020:	42a3      	cmp	r3, r4
    b022:	d000      	beq.n	b026 <connection_get+0x26>
	return 0;
    b024:	2000      	movs	r0, #0
}
    b026:	bd10      	pop	{r4, pc}
    b028:	200008dc 	.word	0x200008dc

0000b02c <role_disable>:
{
    b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b030:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b032:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    b034:	2805      	cmp	r0, #5
{
    b036:	4605      	mov	r5, r0
    b038:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b03a:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    b03c:	d00c      	beq.n	b058 <role_disable+0x2c>
    b03e:	2806      	cmp	r0, #6
    b040:	d040      	beq.n	b0c4 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b042:	d945      	bls.n	b0d0 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    b044:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    b046:	b280      	uxth	r0, r0
    b048:	f7ff ffda 	bl	b000 <connection_get>
			if (!conn) {
    b04c:	2800      	cmp	r0, #0
    b04e:	f000 8123 	beq.w	b298 <role_disable+0x26c>
			ticks_active_to_start =
    b052:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    b056:	e00f      	b.n	b078 <role_disable+0x4c>
		ticks_xtal_to_start =
    b058:	4b90      	ldr	r3, [pc, #576]	; (b29c <role_disable+0x270>)
    b05a:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    b05c:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b060:	ab02      	add	r3, sp, #8
    b062:	9300      	str	r3, [sp, #0]
    b064:	460a      	mov	r2, r1
    b066:	4b8e      	ldr	r3, [pc, #568]	; (b2a0 <role_disable+0x274>)
    b068:	2103      	movs	r1, #3
    b06a:	2000      	movs	r0, #0
    b06c:	f7fd fbc2 	bl	87f4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    b070:	2802      	cmp	r0, #2
    b072:	d011      	beq.n	b098 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    b074:	9b02      	ldr	r3, [sp, #8]
    b076:	b99b      	cbnz	r3, b0a0 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    b078:	4c88      	ldr	r4, [pc, #544]	; (b29c <role_disable+0x270>)
    b07a:	7ca3      	ldrb	r3, [r4, #18]
    b07c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b080:	2b00      	cmp	r3, #0
    b082:	d02d      	beq.n	b0e0 <role_disable+0xb4>
    b084:	4b87      	ldr	r3, [pc, #540]	; (b2a4 <role_disable+0x278>)
    b086:	9301      	str	r3, [sp, #4]
    b088:	9300      	str	r3, [sp, #0]
    b08a:	4a87      	ldr	r2, [pc, #540]	; (b2a8 <role_disable+0x27c>)
    b08c:	4b87      	ldr	r3, [pc, #540]	; (b2ac <role_disable+0x280>)
    b08e:	4988      	ldr	r1, [pc, #544]	; (b2b0 <role_disable+0x284>)
    b090:	4888      	ldr	r0, [pc, #544]	; (b2b4 <role_disable+0x288>)
    b092:	e00f      	b.n	b0b4 <role_disable+0x88>
				cpu_sleep();
    b094:	f7ff fdba 	bl	ac0c <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b098:	9b02      	ldr	r3, [sp, #8]
    b09a:	2b02      	cmp	r3, #2
    b09c:	d0fa      	beq.n	b094 <role_disable+0x68>
    b09e:	e7e9      	b.n	b074 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    b0a0:	9b02      	ldr	r3, [sp, #8]
    b0a2:	2b01      	cmp	r3, #1
    b0a4:	d0e8      	beq.n	b078 <role_disable+0x4c>
    b0a6:	4b7f      	ldr	r3, [pc, #508]	; (b2a4 <role_disable+0x278>)
    b0a8:	9301      	str	r3, [sp, #4]
    b0aa:	9300      	str	r3, [sp, #0]
    b0ac:	4a7e      	ldr	r2, [pc, #504]	; (b2a8 <role_disable+0x27c>)
    b0ae:	4b7f      	ldr	r3, [pc, #508]	; (b2ac <role_disable+0x280>)
    b0b0:	497f      	ldr	r1, [pc, #508]	; (b2b0 <role_disable+0x284>)
    b0b2:	4881      	ldr	r0, [pc, #516]	; (b2b8 <role_disable+0x28c>)
			LL_ASSERT(0);
    b0b4:	f7f5 ff6a 	bl	f8c <printk>
    b0b8:	4040      	eors	r0, r0
    b0ba:	f380 8811 	msr	BASEPRI, r0
    b0be:	f04f 0004 	mov.w	r0, #4
    b0c2:	df02      	svc	2
		ticks_xtal_to_start =
    b0c4:	4b75      	ldr	r3, [pc, #468]	; (b29c <role_disable+0x270>)
    b0c6:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    b0ca:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    b0ce:	e7d3      	b.n	b078 <role_disable+0x4c>
			LL_ASSERT(0);
    b0d0:	4b74      	ldr	r3, [pc, #464]	; (b2a4 <role_disable+0x278>)
    b0d2:	9301      	str	r3, [sp, #4]
    b0d4:	9300      	str	r3, [sp, #0]
    b0d6:	4b75      	ldr	r3, [pc, #468]	; (b2ac <role_disable+0x280>)
    b0d8:	4a73      	ldr	r2, [pc, #460]	; (b2a8 <role_disable+0x27c>)
    b0da:	4975      	ldr	r1, [pc, #468]	; (b2b0 <role_disable+0x284>)
    b0dc:	4877      	ldr	r0, [pc, #476]	; (b2bc <role_disable+0x290>)
    b0de:	e7e9      	b.n	b0b4 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    b0e0:	ab06      	add	r3, sp, #24
    b0e2:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    b0e4:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    b0e6:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b0ea:	2103      	movs	r1, #3
    b0ec:	9300      	str	r3, [sp, #0]
    b0ee:	462a      	mov	r2, r5
    b0f0:	4b6b      	ldr	r3, [pc, #428]	; (b2a0 <role_disable+0x274>)
    b0f2:	f7fd fb7f 	bl	87f4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    b0f6:	2802      	cmp	r0, #2
    b0f8:	d025      	beq.n	b146 <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    b0fa:	9b02      	ldr	r3, [sp, #8]
    b0fc:	2b00      	cmp	r3, #0
    b0fe:	d169      	bne.n	b1d4 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    b100:	7c23      	ldrb	r3, [r4, #16]
    b102:	429d      	cmp	r5, r3
    b104:	d002      	beq.n	b10c <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    b106:	7c63      	ldrb	r3, [r4, #17]
    b108:	429d      	cmp	r5, r3
    b10a:	d15f      	bne.n	b1cc <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    b10c:	ab06      	add	r3, sp, #24
    b10e:	2202      	movs	r2, #2
    b110:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b114:	2200      	movs	r2, #0
    b116:	9300      	str	r3, [sp, #0]
    b118:	2103      	movs	r1, #3
    b11a:	4b61      	ldr	r3, [pc, #388]	; (b2a0 <role_disable+0x274>)
    b11c:	4610      	mov	r0, r2
    b11e:	f7fd fb69 	bl	87f4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    b122:	2802      	cmp	r0, #2
    b124:	d11d      	bne.n	b162 <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b126:	2201      	movs	r2, #1
    b128:	4611      	mov	r1, r2
    b12a:	2003      	movs	r0, #3
    b12c:	f7fc fcde 	bl	7aec <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    b130:	9b03      	ldr	r3, [sp, #12]
    b132:	2b02      	cmp	r3, #2
    b134:	d115      	bne.n	b162 <role_disable+0x136>
    b136:	4b5b      	ldr	r3, [pc, #364]	; (b2a4 <role_disable+0x278>)
    b138:	9301      	str	r3, [sp, #4]
    b13a:	9300      	str	r3, [sp, #0]
    b13c:	4a5a      	ldr	r2, [pc, #360]	; (b2a8 <role_disable+0x27c>)
    b13e:	4b60      	ldr	r3, [pc, #384]	; (b2c0 <role_disable+0x294>)
    b140:	495b      	ldr	r1, [pc, #364]	; (b2b0 <role_disable+0x284>)
    b142:	4860      	ldr	r0, [pc, #384]	; (b2c4 <role_disable+0x298>)
    b144:	e7b6      	b.n	b0b4 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    b146:	7c63      	ldrb	r3, [r4, #17]
    b148:	429d      	cmp	r5, r3
    b14a:	d104      	bne.n	b156 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b14c:	2201      	movs	r2, #1
    b14e:	4611      	mov	r1, r2
    b150:	2003      	movs	r0, #3
    b152:	f7fc fccb 	bl	7aec <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    b156:	9b02      	ldr	r3, [sp, #8]
    b158:	2b02      	cmp	r3, #2
    b15a:	d1ce      	bne.n	b0fa <role_disable+0xce>
			cpu_sleep();
    b15c:	f7ff fd56 	bl	ac0c <cpu_sleep>
    b160:	e7f9      	b.n	b156 <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    b162:	9803      	ldr	r0, [sp, #12]
    b164:	2800      	cmp	r0, #0
    b166:	d150      	bne.n	b20a <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    b168:	2302      	movs	r3, #2
    b16a:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    b16c:	7c23      	ldrb	r3, [r4, #16]
    b16e:	b93b      	cbnz	r3, b180 <role_disable+0x154>
    b170:	4b4c      	ldr	r3, [pc, #304]	; (b2a4 <role_disable+0x278>)
    b172:	9301      	str	r3, [sp, #4]
    b174:	9300      	str	r3, [sp, #0]
    b176:	4a4c      	ldr	r2, [pc, #304]	; (b2a8 <role_disable+0x27c>)
    b178:	4b51      	ldr	r3, [pc, #324]	; (b2c0 <role_disable+0x294>)
    b17a:	494d      	ldr	r1, [pc, #308]	; (b2b0 <role_disable+0x284>)
    b17c:	4852      	ldr	r0, [pc, #328]	; (b2c8 <role_disable+0x29c>)
    b17e:	e799      	b.n	b0b4 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b180:	ab04      	add	r3, sp, #16
    b182:	9300      	str	r3, [sp, #0]
    b184:	2201      	movs	r2, #1
    b186:	4b46      	ldr	r3, [pc, #280]	; (b2a0 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    b188:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b18a:	2103      	movs	r1, #3
    b18c:	f7fd fb32 	bl	87f4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    b190:	2802      	cmp	r0, #2
    b192:	d10f      	bne.n	b1b4 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b194:	2201      	movs	r2, #1
    b196:	4611      	mov	r1, r2
    b198:	2003      	movs	r0, #3
    b19a:	f7fc fca7 	bl	7aec <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    b19e:	9b04      	ldr	r3, [sp, #16]
    b1a0:	2b02      	cmp	r3, #2
    b1a2:	d107      	bne.n	b1b4 <role_disable+0x188>
    b1a4:	4b3f      	ldr	r3, [pc, #252]	; (b2a4 <role_disable+0x278>)
    b1a6:	9301      	str	r3, [sp, #4]
    b1a8:	9300      	str	r3, [sp, #0]
    b1aa:	4a3f      	ldr	r2, [pc, #252]	; (b2a8 <role_disable+0x27c>)
    b1ac:	4b44      	ldr	r3, [pc, #272]	; (b2c0 <role_disable+0x294>)
    b1ae:	4940      	ldr	r1, [pc, #256]	; (b2b0 <role_disable+0x284>)
    b1b0:	4846      	ldr	r0, [pc, #280]	; (b2cc <role_disable+0x2a0>)
    b1b2:	e77f      	b.n	b0b4 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    b1b4:	9a04      	ldr	r2, [sp, #16]
    b1b6:	b99a      	cbnz	r2, b1e0 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    b1b8:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    b1bc:	45b0      	cmp	r8, r6
    b1be:	d922      	bls.n	b206 <role_disable+0x1da>
				ret = mayfly_enqueue(
    b1c0:	4b43      	ldr	r3, [pc, #268]	; (b2d0 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b1c2:	4611      	mov	r1, r2
    b1c4:	2003      	movs	r0, #3
    b1c6:	f7fc fcb9 	bl	7b3c <mayfly_enqueue>
			LL_ASSERT(!ret);
    b1ca:	b9a0      	cbnz	r0, b1f6 <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    b1cc:	7ca3      	ldrb	r3, [r4, #18]
    b1ce:	b90b      	cbnz	r3, b1d4 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    b1d0:	2301      	movs	r3, #1
    b1d2:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    b1d4:	2300      	movs	r3, #0
    b1d6:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    b1d8:	9802      	ldr	r0, [sp, #8]
}
    b1da:	b006      	add	sp, #24
    b1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    b1e0:	9b04      	ldr	r3, [sp, #16]
    b1e2:	2b01      	cmp	r3, #1
    b1e4:	d153      	bne.n	b28e <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b1e6:	2200      	movs	r2, #0
    b1e8:	4611      	mov	r1, r2
    b1ea:	4b39      	ldr	r3, [pc, #228]	; (b2d0 <role_disable+0x2a4>)
    b1ec:	2003      	movs	r0, #3
    b1ee:	f7fc fca5 	bl	7b3c <mayfly_enqueue>
			LL_ASSERT(!ret);
    b1f2:	4602      	mov	r2, r0
    b1f4:	b138      	cbz	r0, b206 <role_disable+0x1da>
			LL_ASSERT(!ret);
    b1f6:	4b2b      	ldr	r3, [pc, #172]	; (b2a4 <role_disable+0x278>)
    b1f8:	9301      	str	r3, [sp, #4]
    b1fa:	9300      	str	r3, [sp, #0]
    b1fc:	4a2a      	ldr	r2, [pc, #168]	; (b2a8 <role_disable+0x27c>)
    b1fe:	4b30      	ldr	r3, [pc, #192]	; (b2c0 <role_disable+0x294>)
    b200:	492b      	ldr	r1, [pc, #172]	; (b2b0 <role_disable+0x284>)
    b202:	4834      	ldr	r0, [pc, #208]	; (b2d4 <role_disable+0x2a8>)
    b204:	e756      	b.n	b0b4 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b206:	4b34      	ldr	r3, [pc, #208]	; (b2d8 <role_disable+0x2ac>)
    b208:	e7db      	b.n	b1c2 <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    b20a:	9d03      	ldr	r5, [sp, #12]
    b20c:	2d01      	cmp	r5, #1
    b20e:	d13e      	bne.n	b28e <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    b210:	2fff      	cmp	r7, #255	; 0xff
    b212:	d029      	beq.n	b268 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    b214:	ab06      	add	r3, sp, #24
    b216:	2202      	movs	r2, #2
    b218:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b21c:	2103      	movs	r1, #3
    b21e:	9300      	str	r3, [sp, #0]
    b220:	463a      	mov	r2, r7
    b222:	4b1f      	ldr	r3, [pc, #124]	; (b2a0 <role_disable+0x274>)
    b224:	2000      	movs	r0, #0
    b226:	f7fd fae5 	bl	87f4 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    b22a:	2802      	cmp	r0, #2
    b22c:	d10f      	bne.n	b24e <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b22e:	462a      	mov	r2, r5
    b230:	4629      	mov	r1, r5
    b232:	2003      	movs	r0, #3
    b234:	f7fc fc5a 	bl	7aec <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    b238:	9b05      	ldr	r3, [sp, #20]
    b23a:	2b02      	cmp	r3, #2
    b23c:	d107      	bne.n	b24e <role_disable+0x222>
    b23e:	4b19      	ldr	r3, [pc, #100]	; (b2a4 <role_disable+0x278>)
    b240:	9301      	str	r3, [sp, #4]
    b242:	9300      	str	r3, [sp, #0]
    b244:	4a18      	ldr	r2, [pc, #96]	; (b2a8 <role_disable+0x27c>)
    b246:	4b1e      	ldr	r3, [pc, #120]	; (b2c0 <role_disable+0x294>)
    b248:	4919      	ldr	r1, [pc, #100]	; (b2b0 <role_disable+0x284>)
    b24a:	4824      	ldr	r0, [pc, #144]	; (b2dc <role_disable+0x2b0>)
    b24c:	e732      	b.n	b0b4 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    b24e:	9b05      	ldr	r3, [sp, #20]
    b250:	b153      	cbz	r3, b268 <role_disable+0x23c>
    b252:	9b05      	ldr	r3, [sp, #20]
    b254:	2b01      	cmp	r3, #1
    b256:	d007      	beq.n	b268 <role_disable+0x23c>
    b258:	4b12      	ldr	r3, [pc, #72]	; (b2a4 <role_disable+0x278>)
    b25a:	9301      	str	r3, [sp, #4]
    b25c:	9300      	str	r3, [sp, #0]
    b25e:	4a12      	ldr	r2, [pc, #72]	; (b2a8 <role_disable+0x27c>)
    b260:	4b17      	ldr	r3, [pc, #92]	; (b2c0 <role_disable+0x294>)
    b262:	4913      	ldr	r1, [pc, #76]	; (b2b0 <role_disable+0x284>)
    b264:	481e      	ldr	r0, [pc, #120]	; (b2e0 <role_disable+0x2b4>)
    b266:	e725      	b.n	b0b4 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    b268:	7ce3      	ldrb	r3, [r4, #19]
    b26a:	2b00      	cmp	r3, #0
    b26c:	d0ae      	beq.n	b1cc <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    b26e:	4b1d      	ldr	r3, [pc, #116]	; (b2e4 <role_disable+0x2b8>)
    b270:	2204      	movs	r2, #4
    b272:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b274:	2200      	movs	r2, #0
    b276:	4611      	mov	r1, r2
    b278:	2003      	movs	r0, #3
    b27a:	f7fc fc5f 	bl	7b3c <mayfly_enqueue>
			LL_ASSERT(!ret);
    b27e:	2800      	cmp	r0, #0
    b280:	d1b9      	bne.n	b1f6 <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    b282:	7ce3      	ldrb	r3, [r4, #19]
    b284:	2b00      	cmp	r3, #0
    b286:	d0a1      	beq.n	b1cc <role_disable+0x1a0>
				cpu_sleep();
    b288:	f7ff fcc0 	bl	ac0c <cpu_sleep>
    b28c:	e7f9      	b.n	b282 <role_disable+0x256>
		LL_ASSERT(0);
    b28e:	4b05      	ldr	r3, [pc, #20]	; (b2a4 <role_disable+0x278>)
    b290:	9301      	str	r3, [sp, #4]
    b292:	9300      	str	r3, [sp, #0]
    b294:	4b0a      	ldr	r3, [pc, #40]	; (b2c0 <role_disable+0x294>)
    b296:	e71f      	b.n	b0d8 <role_disable+0xac>
				return 1;
    b298:	2001      	movs	r0, #1
    b29a:	e79e      	b.n	b1da <role_disable+0x1ae>
    b29c:	200008dc 	.word	0x200008dc
    b2a0:	0000ac51 	.word	0x0000ac51
    b2a4:	00015af1 	.word	0x00015af1
    b2a8:	00016fae 	.word	0x00016fae
    b2ac:	00018fe9 	.word	0x00018fe9
    b2b0:	00016060 	.word	0x00016060
    b2b4:	0001995c 	.word	0x0001995c
    b2b8:	0001991c 	.word	0x0001991c
    b2bc:	00016f22 	.word	0x00016f22
    b2c0:	00018fd5 	.word	0x00018fd5
    b2c4:	00019994 	.word	0x00019994
    b2c8:	000199c5 	.word	0x000199c5
    b2cc:	000199ff 	.word	0x000199ff
    b2d0:	20003e30 	.word	0x20003e30
    b2d4:	00019a2f 	.word	0x00019a2f
    b2d8:	20003ed0 	.word	0x20003ed0
    b2dc:	00019a55 	.word	0x00019a55
    b2e0:	00019a87 	.word	0x00019a87
    b2e4:	20003e50 	.word	0x20003e50

0000b2e8 <mayfly_xtal_retain>:
{
    b2e8:	b513      	push	{r0, r1, r4, lr}
    b2ea:	4b1d      	ldr	r3, [pc, #116]	; (b360 <mayfly_xtal_retain+0x78>)
    b2ec:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    b2ee:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    b2f0:	b301      	cbz	r1, b334 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    b2f2:	2a00      	cmp	r2, #0
    b2f4:	d132      	bne.n	b35c <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    b2f6:	2801      	cmp	r0, #1
    b2f8:	d00e      	beq.n	b318 <mayfly_xtal_retain+0x30>
    b2fa:	4b1a      	ldr	r3, [pc, #104]	; (b364 <mayfly_xtal_retain+0x7c>)
    b2fc:	9301      	str	r3, [sp, #4]
    b2fe:	9300      	str	r3, [sp, #0]
    b300:	4a19      	ldr	r2, [pc, #100]	; (b368 <mayfly_xtal_retain+0x80>)
    b302:	4b1a      	ldr	r3, [pc, #104]	; (b36c <mayfly_xtal_retain+0x84>)
    b304:	491a      	ldr	r1, [pc, #104]	; (b370 <mayfly_xtal_retain+0x88>)
    b306:	481b      	ldr	r0, [pc, #108]	; (b374 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    b308:	f7f5 fe40 	bl	f8c <printk>
    b30c:	4040      	eors	r0, r0
    b30e:	f380 8811 	msr	BASEPRI, r0
    b312:	f04f 0004 	mov.w	r0, #4
    b316:	df02      	svc	2
			s_xtal_retained = 1;
    b318:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    b31a:	4b17      	ldr	r3, [pc, #92]	; (b378 <mayfly_xtal_retain+0x90>)
    b31c:	4611      	mov	r1, r2
    b31e:	f7fc fc0d 	bl	7b3c <mayfly_enqueue>
			LL_ASSERT(!retval);
    b322:	b1d8      	cbz	r0, b35c <mayfly_xtal_retain+0x74>
    b324:	4b0f      	ldr	r3, [pc, #60]	; (b364 <mayfly_xtal_retain+0x7c>)
    b326:	9301      	str	r3, [sp, #4]
    b328:	9300      	str	r3, [sp, #0]
    b32a:	4a0f      	ldr	r2, [pc, #60]	; (b368 <mayfly_xtal_retain+0x80>)
    b32c:	4b0f      	ldr	r3, [pc, #60]	; (b36c <mayfly_xtal_retain+0x84>)
    b32e:	4910      	ldr	r1, [pc, #64]	; (b370 <mayfly_xtal_retain+0x88>)
    b330:	4812      	ldr	r0, [pc, #72]	; (b37c <mayfly_xtal_retain+0x94>)
    b332:	e7e9      	b.n	b308 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    b334:	b192      	cbz	r2, b35c <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    b336:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    b338:	b170      	cbz	r0, b358 <mayfly_xtal_retain+0x70>
    b33a:	2801      	cmp	r0, #1
    b33c:	d104      	bne.n	b348 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    b33e:	4b10      	ldr	r3, [pc, #64]	; (b380 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    b340:	2200      	movs	r2, #0
    b342:	4611      	mov	r1, r2
    b344:	4620      	mov	r0, r4
    b346:	e7ea      	b.n	b31e <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    b348:	4b06      	ldr	r3, [pc, #24]	; (b364 <mayfly_xtal_retain+0x7c>)
    b34a:	9301      	str	r3, [sp, #4]
    b34c:	9300      	str	r3, [sp, #0]
    b34e:	4a06      	ldr	r2, [pc, #24]	; (b368 <mayfly_xtal_retain+0x80>)
    b350:	4b06      	ldr	r3, [pc, #24]	; (b36c <mayfly_xtal_retain+0x84>)
    b352:	4907      	ldr	r1, [pc, #28]	; (b370 <mayfly_xtal_retain+0x88>)
    b354:	480b      	ldr	r0, [pc, #44]	; (b384 <mayfly_xtal_retain+0x9c>)
    b356:	e7d7      	b.n	b308 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    b358:	4b0b      	ldr	r3, [pc, #44]	; (b388 <mayfly_xtal_retain+0xa0>)
    b35a:	e7f1      	b.n	b340 <mayfly_xtal_retain+0x58>
}
    b35c:	b002      	add	sp, #8
    b35e:	bd10      	pop	{r4, pc}
    b360:	20000adc 	.word	0x20000adc
    b364:	00015af1 	.word	0x00015af1
    b368:	00016fae 	.word	0x00016fae
    b36c:	00018d8e 	.word	0x00018d8e
    b370:	00016060 	.word	0x00016060
    b374:	00019775 	.word	0x00019775
    b378:	20003ea0 	.word	0x20003ea0
    b37c:	000197a5 	.word	0x000197a5
    b380:	20003ec0 	.word	0x20003ec0
    b384:	00016f22 	.word	0x00016f22
    b388:	20003eb0 	.word	0x20003eb0

0000b38c <rx_packet_set>:
{
    b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    b38e:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    b392:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    b394:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    b396:	f004 0407 	and.w	r4, r4, #7
{
    b39a:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    b39c:	4620      	mov	r0, r4
    b39e:	2100      	movs	r1, #0
    b3a0:	f008 f818 	bl	133d4 <radio_phy_set>
	if (conn->enc_rx) {
    b3a4:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    b3a8:	f013 0f10 	tst.w	r3, #16
    b3ac:	ea4f 0244 	mov.w	r2, r4, lsl #1
    b3b0:	d010      	beq.n	b3d4 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    b3b2:	1d29      	adds	r1, r5, #4
    b3b4:	f042 0201 	orr.w	r2, r2, #1
    b3b8:	b2c9      	uxtb	r1, r1
    b3ba:	2008      	movs	r0, #8
    b3bc:	f008 f850 	bl	13460 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    b3c0:	463a      	mov	r2, r7
    b3c2:	4621      	mov	r1, r4
    b3c4:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    b3c8:	f008 fa8e 	bl	138e8 <radio_ccm_rx_pkt_set>
}
    b3cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    b3d0:	f008 b874 	b.w	134bc <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    b3d4:	2008      	movs	r0, #8
    b3d6:	f042 0201 	orr.w	r2, r2, #1
    b3da:	b2e9      	uxtb	r1, r5
    b3dc:	f008 f840 	bl	13460 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    b3e0:	4638      	mov	r0, r7
    b3e2:	e7f3      	b.n	b3cc <rx_packet_set+0x40>

0000b3e4 <tx_packet_set>:
{
    b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3e6:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    b3e8:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    b3ec:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    b3ee:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    b3f2:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    b3f4:	09c9      	lsrs	r1, r1, #7
    b3f6:	4620      	mov	r0, r4
    b3f8:	f007 ffec 	bl	133d4 <radio_phy_set>
	if (conn->enc_tx) {
    b3fc:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    b400:	f013 0f20 	tst.w	r3, #32
    b404:	ea4f 0244 	mov.w	r2, r4, lsl #1
    b408:	d00f      	beq.n	b42a <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    b40a:	1d29      	adds	r1, r5, #4
    b40c:	b2c9      	uxtb	r1, r1
    b40e:	2008      	movs	r0, #8
    b410:	f042 0201 	orr.w	r2, r2, #1
    b414:	f008 f824 	bl	13460 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    b418:	4639      	mov	r1, r7
    b41a:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    b41e:	f008 fa9f 	bl	13960 <radio_ccm_tx_pkt_set>
}
    b422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    b426:	f008 b84f 	b.w	134c8 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    b42a:	2008      	movs	r0, #8
    b42c:	f042 0201 	orr.w	r2, r2, #1
    b430:	b2e9      	uxtb	r1, r5
    b432:	f008 f815 	bl	13460 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    b436:	4638      	mov	r0, r7
    b438:	e7f3      	b.n	b422 <tx_packet_set+0x3e>
    b43a:	0000      	movs	r0, r0
    b43c:	0000      	movs	r0, r0
	...

0000b440 <sched_free_win_offset_calc>:
{
    b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b444:	b08f      	sub	sp, #60	; 0x3c
    b446:	4692      	mov	sl, r2
    b448:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b44a:	6803      	ldr	r3, [r0, #0]
{
    b44c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b44e:	2b00      	cmp	r3, #0
{
    b450:	4680      	mov	r8, r0
    b452:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b454:	da3a      	bge.n	b4cc <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    b456:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    b458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    b45c:	4291      	cmp	r1, r2
    b45e:	bf2c      	ite	cs
    b460:	1a5a      	subcs	r2, r3, r1
    b462:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    b464:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    b466:	f8d8 200c 	ldr.w	r2, [r8, #12]
    b46a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b46c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b46e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    b470:	18d3      	adds	r3, r2, r3
    b472:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b474:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b478:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    b47c:	940c      	str	r4, [sp, #48]	; 0x30
    b47e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b480:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b482:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    b484:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    b486:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b488:	2302      	movs	r3, #2
    b48a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b48c:	ab0d      	add	r3, sp, #52	; 0x34
    b48e:	9302      	str	r3, [sp, #8]
    b490:	4b81      	ldr	r3, [pc, #516]	; (b698 <sched_free_win_offset_calc+0x258>)
    b492:	9301      	str	r3, [sp, #4]
    b494:	ab0b      	add	r3, sp, #44	; 0x2c
    b496:	9300      	str	r3, [sp, #0]
    b498:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    b49c:	ab0c      	add	r3, sp, #48	; 0x30
    b49e:	2101      	movs	r1, #1
    b4a0:	2000      	movs	r0, #0
    b4a2:	f7fd f9e3 	bl	886c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b4a6:	2802      	cmp	r0, #2
    b4a8:	d019      	beq.n	b4de <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b4ac:	b1db      	cbz	r3, b4e6 <sched_free_win_offset_calc+0xa6>
    b4ae:	4b7b      	ldr	r3, [pc, #492]	; (b69c <sched_free_win_offset_calc+0x25c>)
    b4b0:	9301      	str	r3, [sp, #4]
    b4b2:	9300      	str	r3, [sp, #0]
    b4b4:	4a7a      	ldr	r2, [pc, #488]	; (b6a0 <sched_free_win_offset_calc+0x260>)
    b4b6:	4b7b      	ldr	r3, [pc, #492]	; (b6a4 <sched_free_win_offset_calc+0x264>)
    b4b8:	497b      	ldr	r1, [pc, #492]	; (b6a8 <sched_free_win_offset_calc+0x268>)
    b4ba:	487c      	ldr	r0, [pc, #496]	; (b6ac <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    b4bc:	f7f5 fd66 	bl	f8c <printk>
    b4c0:	4040      	eors	r0, r0
    b4c2:	f380 8811 	msr	BASEPRI, r0
    b4c6:	f04f 0004 	mov.w	r0, #4
    b4ca:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    b4cc:	4293      	cmp	r3, r2
    b4ce:	bf38      	it	cc
    b4d0:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    b4d2:	2200      	movs	r2, #0
    b4d4:	e7c6      	b.n	b464 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b4d6:	2101      	movs	r1, #1
    b4d8:	2000      	movs	r0, #0
    b4da:	f7fd fa45 	bl	8968 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b4de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b4e0:	2b02      	cmp	r3, #2
    b4e2:	d0f8      	beq.n	b4d6 <sched_free_win_offset_calc+0x96>
    b4e4:	e7e1      	b.n	b4aa <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    b4e6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    b4ea:	2aff      	cmp	r2, #255	; 0xff
    b4ec:	d065      	beq.n	b5ba <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    b4ee:	2fff      	cmp	r7, #255	; 0xff
    b4f0:	d00a      	beq.n	b508 <sched_free_win_offset_calc+0xc8>
    b4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b4f4:	4599      	cmp	r9, r3
    b4f6:	d007      	beq.n	b508 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    b4f8:	4b68      	ldr	r3, [pc, #416]	; (b69c <sched_free_win_offset_calc+0x25c>)
    b4fa:	9301      	str	r3, [sp, #4]
    b4fc:	9300      	str	r3, [sp, #0]
    b4fe:	4a68      	ldr	r2, [pc, #416]	; (b6a0 <sched_free_win_offset_calc+0x260>)
    b500:	4b68      	ldr	r3, [pc, #416]	; (b6a4 <sched_free_win_offset_calc+0x264>)
    b502:	4969      	ldr	r1, [pc, #420]	; (b6a8 <sched_free_win_offset_calc+0x268>)
    b504:	486a      	ldr	r0, [pc, #424]	; (b6b0 <sched_free_win_offset_calc+0x270>)
    b506:	e7d9      	b.n	b4bc <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    b508:	2a05      	cmp	r2, #5
    b50a:	d951      	bls.n	b5b0 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    b50c:	4869      	ldr	r0, [pc, #420]	; (b6b4 <sched_free_win_offset_calc+0x274>)
    b50e:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b512:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    b514:	429a      	cmp	r2, r3
    b516:	da4b      	bge.n	b5b0 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    b518:	2a06      	cmp	r2, #6
    b51a:	f000 8092 	beq.w	b642 <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    b51e:	9b06      	ldr	r3, [sp, #24]
    b520:	2bff      	cmp	r3, #255	; 0xff
    b522:	d14a      	bne.n	b5ba <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b524:	3a07      	subs	r2, #7
    b526:	b292      	uxth	r2, r2
    b528:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b52c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b530:	f7fc fa6e 	bl	7a10 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    b534:	4580      	cmp	r8, r0
    b536:	d03b      	beq.n	b5b0 <sched_free_win_offset_calc+0x170>
    b538:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b53a:	b91b      	cbnz	r3, b544 <sched_free_win_offset_calc+0x104>
    b53c:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b540:	2b00      	cmp	r3, #0
    b542:	db35      	blt.n	b5b0 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    b544:	9b05      	ldr	r3, [sp, #20]
    b546:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b548:	6841      	ldr	r1, [r0, #4]
    b54a:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b54c:	6803      	ldr	r3, [r0, #0]
    b54e:	2b00      	cmp	r3, #0
    b550:	da4e      	bge.n	b5f0 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    b552:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    b554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b558:	428a      	cmp	r2, r1
    b55a:	bf2c      	ite	cs
    b55c:	18b6      	addcs	r6, r6, r2
    b55e:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    b560:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    b562:	68c2      	ldr	r2, [r0, #12]
    b564:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    b568:	444b      	add	r3, r9
    b56a:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    b56c:	f8da 3000 	ldr.w	r3, [sl]
    b570:	429e      	cmp	r6, r3
    b572:	d916      	bls.n	b5a2 <sched_free_win_offset_calc+0x162>
    b574:	429d      	cmp	r5, r3
    b576:	bf38      	it	cc
    b578:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    b57a:	9b07      	ldr	r3, [sp, #28]
    b57c:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    b580:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b582:	781b      	ldrb	r3, [r3, #0]
    b584:	42a3      	cmp	r3, r4
    b586:	d905      	bls.n	b594 <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    b588:	4629      	mov	r1, r5
    b58a:	4630      	mov	r0, r6
    b58c:	f7fd fa04 	bl	8998 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    b590:	42b8      	cmp	r0, r7
    b592:	d231      	bcs.n	b5f8 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    b594:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    b598:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    b59a:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    b59e:	4293      	cmp	r3, r2
    b5a0:	d20b      	bcs.n	b5ba <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    b5a2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    b5a6:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    b5aa:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    b5ae:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    b5b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b5b2:	781b      	ldrb	r3, [r3, #0]
    b5b4:	42a3      	cmp	r3, r4
    b5b6:	f63f af67 	bhi.w	b488 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    b5ba:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    b5be:	2bff      	cmp	r3, #255	; 0xff
    b5c0:	d111      	bne.n	b5e6 <sched_free_win_offset_calc+0x1a6>
    b5c2:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b5c6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b6b8 <sched_free_win_offset_calc+0x278>
    b5ca:	a731      	add	r7, pc, #196	; (adr r7, b690 <sched_free_win_offset_calc+0x250>)
    b5cc:	e9d7 6700 	ldrd	r6, r7, [r7]
    b5d0:	429d      	cmp	r5, r3
    b5d2:	bf38      	it	cc
    b5d4:	461d      	movcc	r5, r3
    b5d6:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    b5da:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b5dc:	781b      	ldrb	r3, [r3, #0]
    b5de:	42a3      	cmp	r3, r4
    b5e0:	d831      	bhi.n	b646 <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    b5e2:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    b5e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b5e8:	701c      	strb	r4, [r3, #0]
}
    b5ea:	b00f      	add	sp, #60	; 0x3c
    b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    b5f0:	428b      	cmp	r3, r1
    b5f2:	bf38      	it	cc
    b5f4:	460b      	movcc	r3, r1
    b5f6:	e7b4      	b.n	b562 <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b5f8:	4a2f      	ldr	r2, [pc, #188]	; (b6b8 <sched_free_win_offset_calc+0x278>)
    b5fa:	eb05 030b 	add.w	r3, r5, fp
    b5fe:	fba3 0102 	umull	r0, r1, r3, r2
    b602:	2207      	movs	r2, #7
    b604:	fb02 1103 	mla	r1, r2, r3, r1
    b608:	a321      	add	r3, pc, #132	; (adr r3, b690 <sched_free_win_offset_calc+0x250>)
    b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b60e:	f7f4 fe01 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    b612:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b616:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    b61a:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b61c:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    b61e:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b620:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    b624:	d20b      	bcs.n	b63e <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    b626:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b628:	2202      	movs	r2, #2
    b62a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    b62e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    b632:	3401      	adds	r4, #1
					memcpy(win_offset +
    b634:	f7f6 fae2 	bl	1bfc <memcpy>
					offset_index++;
    b638:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    b63a:	3528      	adds	r5, #40	; 0x28
    b63c:	e7a0      	b.n	b580 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    b63e:	2500      	movs	r5, #0
    b640:	e7a8      	b.n	b594 <sched_free_win_offset_calc+0x154>
    b642:	9206      	str	r2, [sp, #24]
    b644:	e7b4      	b.n	b5b0 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b646:	eb05 030b 	add.w	r3, r5, fp
    b64a:	fba3 0108 	umull	r0, r1, r3, r8
    b64e:	fb09 1103 	mla	r1, r9, r3, r1
    b652:	4632      	mov	r2, r6
    b654:	463b      	mov	r3, r7
    b656:	f7f4 fddd 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    b65a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b65e:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    b662:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b664:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    b666:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b668:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    b66c:	d90b      	bls.n	b686 <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    b66e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b670:	2202      	movs	r2, #2
    b672:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    b676:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    b67a:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    b67c:	f7f6 fabe 	bl	1bfc <memcpy>
			offset_index++;
    b680:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    b682:	3528      	adds	r5, #40	; 0x28
    b684:	e7a9      	b.n	b5da <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    b686:	2500      	movs	r5, #0
    b688:	e7ab      	b.n	b5e2 <sched_free_win_offset_calc+0x1a2>
    b68a:	bf00      	nop
    b68c:	f3af 8000 	nop.w
    b690:	3b9aca00 	.word	0x3b9aca00
    b694:	00000000 	.word	0x00000000
    b698:	0000ac51 	.word	0x0000ac51
    b69c:	00015af1 	.word	0x00015af1
    b6a0:	00016fae 	.word	0x00016fae
    b6a4:	00018e0a 	.word	0x00018e0a
    b6a8:	00016060 	.word	0x00016060
    b6ac:	00019b2a 	.word	0x00019b2a
    b6b0:	00016f22 	.word	0x00016f22
    b6b4:	200008dc 	.word	0x200008dc
    b6b8:	1afd498d 	.word	0x1afd498d

0000b6bc <mayfly_sched_free_win_offset_calc>:
{
    b6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    b6be:	2300      	movs	r3, #0
    b6c0:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    b6c2:	2306      	movs	r3, #6
    b6c4:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    b6c8:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b6cc:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    b6d0:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    b6d2:	bfbe      	ittt	lt
    b6d4:	4602      	movlt	r2, r0
    b6d6:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    b6d8:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b6dc:	9101      	str	r1, [sp, #4]
    b6de:	f10d 010b 	add.w	r1, sp, #11
    b6e2:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    b6e4:	bfa8      	it	ge
    b6e6:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b6e8:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    b6ec:	2100      	movs	r1, #0
    b6ee:	f7ff fea7 	bl	b440 <sched_free_win_offset_calc>
}
    b6f2:	b005      	add	sp, #20
    b6f4:	f85d fb04 	ldr.w	pc, [sp], #4

0000b6f8 <mayfly_sched_win_offset_select>:
{
    b6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b6fc:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    b700:	b089      	sub	sp, #36	; 0x24
    b702:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b704:	4840      	ldr	r0, [pc, #256]	; (b808 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    b706:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b708:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b70a:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    b70e:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b712:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b716:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b718:	fb03 1102 	mla	r1, r3, r2, r1
    b71c:	a338      	add	r3, pc, #224	; (adr r3, b800 <mayfly_sched_win_offset_select+0x108>)
    b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b722:	9505      	str	r5, [sp, #20]
    b724:	6075      	str	r5, [r6, #4]
    b726:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b728:	f7f4 fd74 	bl	214 <__aeabi_uldivmod>
    b72c:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    b72e:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b732:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    b736:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    b73a:	9100      	str	r1, [sp, #0]
    b73c:	9601      	str	r6, [sp, #4]
    b73e:	2101      	movs	r1, #1
    b740:	4620      	mov	r0, r4
    b742:	f7ff fe7d 	bl	b440 <sched_free_win_offset_calc>
    b746:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    b74a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    b74e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    b752:	2202      	movs	r2, #2
    b754:	4639      	mov	r1, r7
    b756:	f10d 000e 	add.w	r0, sp, #14
    b75a:	f7f6 fa4f 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    b75e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    b762:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    b766:	2300      	movs	r3, #0
    b768:	b2d9      	uxtb	r1, r3
    b76a:	4288      	cmp	r0, r1
    b76c:	d811      	bhi.n	b792 <mayfly_sched_win_offset_select+0x9a>
    b76e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    b770:	4547      	cmp	r7, r8
    b772:	d1ee      	bne.n	b752 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    b774:	b9b5      	cbnz	r5, b7a4 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    b776:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    b77a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b77e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    b780:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b784:	2202      	movs	r2, #2
    b786:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b788:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b78c:	f7f6 fa36 	bl	1bfc <memcpy>
    b790:	e027      	b.n	b7e2 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    b792:	454a      	cmp	r2, r9
    b794:	d004      	beq.n	b7a0 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    b796:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    b79a:	4291      	cmp	r1, r2
    b79c:	d024      	beq.n	b7e8 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    b79e:	2501      	movs	r5, #1
    b7a0:	3301      	adds	r3, #1
    b7a2:	e7e1      	b.n	b768 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    b7a4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    b7a8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b7ac:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b7b0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    b7b4:	4b15      	ldr	r3, [pc, #84]	; (b80c <mayfly_sched_win_offset_select+0x114>)
    b7b6:	2200      	movs	r2, #0
    b7b8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    b7bc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b7c0:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    b7c4:	f042 0203 	orr.w	r2, r2, #3
    b7c8:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    b7cc:	2203      	movs	r2, #3
    b7ce:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    b7d2:	2211      	movs	r2, #17
    b7d4:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    b7d8:	220f      	movs	r2, #15
    b7da:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    b7de:	2220      	movs	r2, #32
    b7e0:	701a      	strb	r2, [r3, #0]
}
    b7e2:	b009      	add	sp, #36	; 0x24
    b7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    b7e8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b7ec:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    b7ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b7f2:	2202      	movs	r2, #2
    b7f4:	f10d 010e 	add.w	r1, sp, #14
    b7f8:	e7c6      	b.n	b788 <mayfly_sched_win_offset_select+0x90>
    b7fa:	bf00      	nop
    b7fc:	f3af 8000 	nop.w
    b800:	1afd498d 	.word	0x1afd498d
    b804:	00000007 	.word	0x00000007
    b808:	09ce5400 	.word	0x09ce5400
    b80c:	200008dc 	.word	0x200008dc

0000b810 <sched_after_mstr_free_slot_get>:
{
    b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b814:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    b816:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    b818:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    b81a:	f8df 9140 	ldr.w	r9, [pc, #320]	; b95c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    b81e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    b822:	4680      	mov	r8, r0
    b824:	4693      	mov	fp, r2
    b826:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    b828:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    b82c:	601c      	str	r4, [r3, #0]
    b82e:	9408      	str	r4, [sp, #32]
    b830:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b832:	2302      	movs	r3, #2
    b834:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b836:	ab09      	add	r3, sp, #36	; 0x24
    b838:	9302      	str	r3, [sp, #8]
    b83a:	4b41      	ldr	r3, [pc, #260]	; (b940 <sched_after_mstr_free_slot_get+0x130>)
    b83c:	9301      	str	r3, [sp, #4]
    b83e:	ab08      	add	r3, sp, #32
    b840:	9300      	str	r3, [sp, #0]
    b842:	f10d 021f 	add.w	r2, sp, #31
    b846:	465b      	mov	r3, fp
    b848:	4641      	mov	r1, r8
    b84a:	2000      	movs	r0, #0
    b84c:	f7fd f80e 	bl	886c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b850:	2802      	cmp	r0, #2
    b852:	d014      	beq.n	b87e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b854:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b856:	b1b3      	cbz	r3, b886 <sched_after_mstr_free_slot_get+0x76>
    b858:	4b3a      	ldr	r3, [pc, #232]	; (b944 <sched_after_mstr_free_slot_get+0x134>)
    b85a:	9301      	str	r3, [sp, #4]
    b85c:	9300      	str	r3, [sp, #0]
    b85e:	4a3a      	ldr	r2, [pc, #232]	; (b948 <sched_after_mstr_free_slot_get+0x138>)
    b860:	4b3a      	ldr	r3, [pc, #232]	; (b94c <sched_after_mstr_free_slot_get+0x13c>)
    b862:	493b      	ldr	r1, [pc, #236]	; (b950 <sched_after_mstr_free_slot_get+0x140>)
    b864:	483b      	ldr	r0, [pc, #236]	; (b954 <sched_after_mstr_free_slot_get+0x144>)
    b866:	f7f5 fb91 	bl	f8c <printk>
    b86a:	4040      	eors	r0, r0
    b86c:	f380 8811 	msr	BASEPRI, r0
    b870:	f04f 0004 	mov.w	r0, #4
    b874:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b876:	4641      	mov	r1, r8
    b878:	2000      	movs	r0, #0
    b87a:	f7fd f875 	bl	8968 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b880:	2b02      	cmp	r3, #2
    b882:	d0f8      	beq.n	b876 <sched_after_mstr_free_slot_get+0x66>
    b884:	e7e6      	b.n	b854 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    b886:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b88a:	2aff      	cmp	r2, #255	; 0xff
    b88c:	d04e      	beq.n	b92c <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    b88e:	2a06      	cmp	r2, #6
    b890:	d9cf      	bls.n	b832 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    b892:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b896:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    b898:	429a      	cmp	r2, r3
    b89a:	daca      	bge.n	b832 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b89c:	3a07      	subs	r2, #7
    b89e:	b292      	uxth	r2, r2
    b8a0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b8a4:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    b8a8:	f7fc f8b2 	bl	7a10 <mem_get>
		if (conn && !conn->role) {
    b8ac:	2800      	cmp	r0, #0
    b8ae:	d0c0      	beq.n	b832 <sched_after_mstr_free_slot_get+0x22>
    b8b0:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b8b4:	2b00      	cmp	r3, #0
    b8b6:	dbbc      	blt.n	b832 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b8b8:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    b8ba:	9a08      	ldr	r2, [sp, #32]
    b8bc:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	da12      	bge.n	b8ea <sched_after_mstr_free_slot_get+0xda>
    b8c4:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    b8c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b8ca:	4571      	cmp	r1, lr
    b8cc:	bf2c      	ite	cs
    b8ce:	1852      	addcs	r2, r2, r1
    b8d0:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    b8d2:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    b8d4:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    b8d6:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    b8d8:	f101 0104 	add.w	r1, r1, #4
    b8dc:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    b8de:	d108      	bne.n	b8f2 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    b8e0:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    b8e4:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    b8e6:	4616      	mov	r6, r2
    b8e8:	e7a3      	b.n	b832 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    b8ea:	4573      	cmp	r3, lr
    b8ec:	bf38      	it	cc
    b8ee:	4673      	movcc	r3, lr
    b8f0:	e7f0      	b.n	b8d4 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    b8f2:	4631      	mov	r1, r6
    b8f4:	4610      	mov	r0, r2
    b8f6:	9305      	str	r3, [sp, #20]
    b8f8:	9204      	str	r2, [sp, #16]
    b8fa:	f7fd f84d 	bl	8998 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    b8fe:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    b902:	4288      	cmp	r0, r1
    b904:	9a04      	ldr	r2, [sp, #16]
    b906:	9b05      	ldr	r3, [sp, #20]
    b908:	d9ea      	bls.n	b8e0 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    b90a:	4813      	ldr	r0, [pc, #76]	; (b958 <sched_after_mstr_free_slot_get+0x148>)
    b90c:	4434      	add	r4, r6
    b90e:	fba4 0100 	umull	r0, r1, r4, r0
    b912:	2307      	movs	r3, #7
    b914:	fb03 1104 	mla	r1, r3, r4, r1
    b918:	a307      	add	r3, pc, #28	; (adr r3, b938 <sched_after_mstr_free_slot_get+0x128>)
    b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b91e:	f7f4 fc79 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    b922:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    b924:	6038      	str	r0, [r7, #0]
}
    b926:	b00b      	add	sp, #44	; 0x2c
    b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    b92c:	2dff      	cmp	r5, #255	; 0xff
    b92e:	d1ec      	bne.n	b90a <sched_after_mstr_free_slot_get+0xfa>
    b930:	e7f9      	b.n	b926 <sched_after_mstr_free_slot_get+0x116>
    b932:	bf00      	nop
    b934:	f3af 8000 	nop.w
    b938:	3b9aca00 	.word	0x3b9aca00
    b93c:	00000000 	.word	0x00000000
    b940:	0000ac51 	.word	0x0000ac51
    b944:	00015af1 	.word	0x00015af1
    b948:	00016fae 	.word	0x00016fae
    b94c:	00018dca 	.word	0x00018dca
    b950:	00016060 	.word	0x00016060
    b954:	00019b2a 	.word	0x00019b2a
    b958:	1afd498d 	.word	0x1afd498d
    b95c:	200008dc 	.word	0x200008dc

0000b960 <isr_adv_ci_adva_check>:
{
    b960:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    b962:	7804      	ldrb	r4, [r0, #0]
    b964:	780a      	ldrb	r2, [r1, #0]
    b966:	f3c4 1380 	ubfx	r3, r4, #6, #1
    b96a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    b96e:	d119      	bne.n	b9a4 <isr_adv_ci_adva_check+0x44>
    b970:	f004 040f 	and.w	r4, r4, #15
    b974:	2c01      	cmp	r4, #1
    b976:	f101 0608 	add.w	r6, r1, #8
    b97a:	f100 0502 	add.w	r5, r0, #2
    b97e:	d008      	beq.n	b992 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    b980:	2206      	movs	r2, #6
    b982:	4631      	mov	r1, r6
    b984:	4628      	mov	r0, r5
    b986:	f7f6 f924 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    b98a:	fab0 f080 	clz	r0, r0
    b98e:	0940      	lsrs	r0, r0, #5
    b990:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    b992:	2206      	movs	r2, #6
    b994:	4631      	mov	r1, r6
    b996:	4628      	mov	r0, r5
    b998:	f7f6 f91b 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    b99c:	2800      	cmp	r0, #0
    b99e:	d1ef      	bne.n	b980 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    b9a0:	4620      	mov	r0, r4
    b9a2:	bd70      	pop	{r4, r5, r6, pc}
    b9a4:	2000      	movs	r0, #0
}
    b9a6:	bd70      	pop	{r4, r5, r6, pc}

0000b9a8 <packet_rx_enqueue>:
{
    b9a8:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    b9aa:	4a1e      	ldr	r2, [pc, #120]	; (ba24 <packet_rx_enqueue+0x7c>)
    b9ac:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    b9b0:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    b9b4:	4299      	cmp	r1, r3
    b9b6:	d10e      	bne.n	b9d6 <packet_rx_enqueue+0x2e>
    b9b8:	4b1b      	ldr	r3, [pc, #108]	; (ba28 <packet_rx_enqueue+0x80>)
    b9ba:	9301      	str	r3, [sp, #4]
    b9bc:	9300      	str	r3, [sp, #0]
    b9be:	4a1b      	ldr	r2, [pc, #108]	; (ba2c <packet_rx_enqueue+0x84>)
    b9c0:	4b1b      	ldr	r3, [pc, #108]	; (ba30 <packet_rx_enqueue+0x88>)
    b9c2:	491c      	ldr	r1, [pc, #112]	; (ba34 <packet_rx_enqueue+0x8c>)
    b9c4:	481c      	ldr	r0, [pc, #112]	; (ba38 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    b9c6:	f7f5 fae1 	bl	f8c <printk>
    b9ca:	4040      	eors	r0, r0
    b9cc:	f380 8811 	msr	BASEPRI, r0
    b9d0:	f04f 0004 	mov.w	r0, #4
    b9d4:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b9d6:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    b9da:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    b9de:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b9e2:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    b9e6:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b9e8:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    b9ea:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    b9ee:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    b9f2:	3301      	adds	r3, #1
    b9f4:	b2db      	uxtb	r3, r3
		last = 0;
    b9f6:	429c      	cmp	r4, r3
    b9f8:	bf08      	it	eq
    b9fa:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    b9fc:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    ba00:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    ba04:	f7fc f829 	bl	7a5a <memq_enqueue>
	LL_ASSERT(link);
    ba08:	b938      	cbnz	r0, ba1a <packet_rx_enqueue+0x72>
    ba0a:	4b07      	ldr	r3, [pc, #28]	; (ba28 <packet_rx_enqueue+0x80>)
    ba0c:	9301      	str	r3, [sp, #4]
    ba0e:	9300      	str	r3, [sp, #0]
    ba10:	4a06      	ldr	r2, [pc, #24]	; (ba2c <packet_rx_enqueue+0x84>)
    ba12:	4b07      	ldr	r3, [pc, #28]	; (ba30 <packet_rx_enqueue+0x88>)
    ba14:	4907      	ldr	r1, [pc, #28]	; (ba34 <packet_rx_enqueue+0x8c>)
    ba16:	4809      	ldr	r0, [pc, #36]	; (ba3c <packet_rx_enqueue+0x94>)
    ba18:	e7d5      	b.n	b9c6 <packet_rx_enqueue+0x1e>
}
    ba1a:	b002      	add	sp, #8
    ba1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    ba20:	f006 bb9c 	b.w	1215c <radio_event_callback>
    ba24:	200008dc 	.word	0x200008dc
    ba28:	00015af1 	.word	0x00015af1
    ba2c:	00016fae 	.word	0x00016fae
    ba30:	00018f5b 	.word	0x00018f5b
    ba34:	00016060 	.word	0x00016060
    ba38:	00019822 	.word	0x00019822
    ba3c:	00019044 	.word	0x00019044

0000ba40 <isr_scan_tgta_check>:
{
    ba40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba44:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    ba46:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    ba48:	f101 0808 	add.w	r8, r1, #8
{
    ba4c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    ba4e:	09c0      	lsrs	r0, r0, #7
    ba50:	4641      	mov	r1, r8
{
    ba52:	4691      	mov	r9, r2
    ba54:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    ba56:	f007 f81d 	bl	12a94 <ctrl_rl_addr_resolve>
    ba5a:	4604      	mov	r4, r0
    ba5c:	b9d8      	cbnz	r0, ba96 <isr_scan_tgta_check+0x56>
    ba5e:	4f1c      	ldr	r7, [pc, #112]	; (bad0 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    ba60:	f1ba 0f00 	cmp.w	sl, #0
    ba64:	d10e      	bne.n	ba84 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    ba66:	782b      	ldrb	r3, [r5, #0]
    ba68:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    ba6c:	09db      	lsrs	r3, r3, #7
    ba6e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ba72:	d113      	bne.n	ba9c <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    ba74:	2206      	movs	r2, #6
    ba76:	4641      	mov	r1, r8
    ba78:	4816      	ldr	r0, [pc, #88]	; (bad4 <isr_scan_tgta_check+0x94>)
    ba7a:	f7f6 f8aa 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    ba7e:	b968      	cbnz	r0, ba9c <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    ba80:	2001      	movs	r0, #1
    ba82:	e012      	b.n	baaa <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    ba84:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    ba88:	07db      	lsls	r3, r3, #31
    ba8a:	d5ec      	bpl.n	ba66 <isr_scan_tgta_check+0x26>
    ba8c:	4648      	mov	r0, r9
    ba8e:	f006 fd5d 	bl	1254c <ctrl_lrpa_get>
    ba92:	2800      	cmp	r0, #0
    ba94:	d0e7      	beq.n	ba66 <isr_scan_tgta_check+0x26>
}
    ba96:	4620      	mov	r0, r4
    ba98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    ba9c:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    baa0:	f3c0 1001 	ubfx	r0, r0, #4, #2
    baa4:	f010 0002 	ands.w	r0, r0, #2
    baa8:	d101      	bne.n	baae <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    baaa:	4604      	mov	r4, r0
    baac:	e7f3      	b.n	ba96 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    baae:	f995 3000 	ldrsb.w	r3, [r5]
    bab2:	2b00      	cmp	r3, #0
    bab4:	da09      	bge.n	baca <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    bab6:	7b6b      	ldrb	r3, [r5, #13]
    bab8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    babc:	2b40      	cmp	r3, #64	; 0x40
    babe:	d104      	bne.n	baca <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    bac0:	2e00      	cmp	r6, #0
    bac2:	d0dd      	beq.n	ba80 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    bac4:	2001      	movs	r0, #1
    bac6:	7030      	strb	r0, [r6, #0]
    bac8:	e7ef      	b.n	baaa <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    baca:	2000      	movs	r0, #0
    bacc:	e7ed      	b.n	baaa <isr_scan_tgta_check+0x6a>
    bace:	bf00      	nop
    bad0:	200008dc 	.word	0x200008dc
    bad4:	200009c0 	.word	0x200009c0

0000bad8 <isr_rx_scan_report>:
{
    bad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    badc:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    bade:	2003      	movs	r0, #3
{
    bae0:	460f      	mov	r7, r1
    bae2:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    bae4:	f7ff f8f4 	bl	acd0 <packet_rx_reserve_get>
	if (node_rx == 0) {
    bae8:	4604      	mov	r4, r0
    baea:	2800      	cmp	r0, #0
    baec:	d03e      	beq.n	bb6c <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    baee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    baf2:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    baf4:	4b1e      	ldr	r3, [pc, #120]	; (bb70 <isr_rx_scan_report+0x98>)
    baf6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    bafa:	075a      	lsls	r2, r3, #29
    bafc:	d032      	beq.n	bb64 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    bafe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb02:	b2da      	uxtb	r2, r3
    bb04:	2a01      	cmp	r2, #1
    bb06:	d010      	beq.n	bb2a <isr_rx_scan_report+0x52>
    bb08:	2a04      	cmp	r2, #4
    bb0a:	d00f      	beq.n	bb2c <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    bb0c:	4b19      	ldr	r3, [pc, #100]	; (bb74 <isr_rx_scan_report+0x9c>)
    bb0e:	9301      	str	r3, [sp, #4]
    bb10:	9300      	str	r3, [sp, #0]
    bb12:	4a19      	ldr	r2, [pc, #100]	; (bb78 <isr_rx_scan_report+0xa0>)
    bb14:	4b19      	ldr	r3, [pc, #100]	; (bb7c <isr_rx_scan_report+0xa4>)
    bb16:	491a      	ldr	r1, [pc, #104]	; (bb80 <isr_rx_scan_report+0xa8>)
    bb18:	481a      	ldr	r0, [pc, #104]	; (bb84 <isr_rx_scan_report+0xac>)
    bb1a:	f7f5 fa37 	bl	f8c <printk>
    bb1e:	4040      	eors	r0, r0
    bb20:	f380 8811 	msr	BASEPRI, r0
    bb24:	f04f 0004 	mov.w	r0, #4
    bb28:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    bb2a:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    bb2c:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    bb30:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    bb32:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    bb36:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    bb3a:	f1b9 0f00 	cmp.w	r9, #0
    bb3e:	d013      	beq.n	bb68 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    bb40:	f007 fd6a 	bl	13618 <radio_rssi_get>
			     pdu_adv_rx->len] =
    bb44:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bb48:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    bb4c:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    bb4e:	442b      	add	r3, r5
    bb50:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    bb52:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    bb54:	441d      	add	r5, r3
    bb56:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    bb58:	f7ff ff26 	bl	b9a8 <packet_rx_enqueue>
	return 0;
    bb5c:	2000      	movs	r0, #0
}
    bb5e:	b003      	add	sp, #12
    bb60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    bb64:	2302      	movs	r3, #2
    bb66:	e7e1      	b.n	bb2c <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    bb68:	207f      	movs	r0, #127	; 0x7f
    bb6a:	e7ed      	b.n	bb48 <isr_rx_scan_report+0x70>
		return 1;
    bb6c:	2001      	movs	r0, #1
    bb6e:	e7f6      	b.n	bb5e <isr_rx_scan_report+0x86>
    bb70:	200008dc 	.word	0x200008dc
    bb74:	00015af1 	.word	0x00015af1
    bb78:	00016fae 	.word	0x00016fae
    bb7c:	00018bf1 	.word	0x00018bf1
    bb80:	00016060 	.word	0x00016060
    bb84:	00016f22 	.word	0x00016f22

0000bb88 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    bb88:	4a0b      	ldr	r2, [pc, #44]	; (bbb8 <rx_fc_lock+0x30>)
    bb8a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bb8e:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    bb92:	4299      	cmp	r1, r3
    bb94:	d10e      	bne.n	bbb4 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    bb96:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bb9a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    bb9e:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    bba2:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    bba6:	3301      	adds	r3, #1
    bba8:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    bbaa:	2b03      	cmp	r3, #3
    bbac:	bf08      	it	eq
    bbae:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    bbb0:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    bbb4:	4770      	bx	lr
    bbb6:	bf00      	nop
    bbb8:	200008dc 	.word	0x200008dc

0000bbbc <ticker_success_assert>:
{
    bbbc:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bbbe:	b170      	cbz	r0, bbde <ticker_success_assert+0x22>
    bbc0:	4b08      	ldr	r3, [pc, #32]	; (bbe4 <ticker_success_assert+0x28>)
    bbc2:	9301      	str	r3, [sp, #4]
    bbc4:	9300      	str	r3, [sp, #0]
    bbc6:	4a08      	ldr	r2, [pc, #32]	; (bbe8 <ticker_success_assert+0x2c>)
    bbc8:	4b08      	ldr	r3, [pc, #32]	; (bbec <ticker_success_assert+0x30>)
    bbca:	4909      	ldr	r1, [pc, #36]	; (bbf0 <ticker_success_assert+0x34>)
    bbcc:	4809      	ldr	r0, [pc, #36]	; (bbf4 <ticker_success_assert+0x38>)
    bbce:	f7f5 f9dd 	bl	f8c <printk>
    bbd2:	4040      	eors	r0, r0
    bbd4:	f380 8811 	msr	BASEPRI, r0
    bbd8:	f04f 0004 	mov.w	r0, #4
    bbdc:	df02      	svc	2
}
    bbde:	b003      	add	sp, #12
    bbe0:	f85d fb04 	ldr.w	pc, [sp], #4
    bbe4:	00015af1 	.word	0x00015af1
    bbe8:	00016fae 	.word	0x00016fae
    bbec:	00018cda 	.word	0x00018cda
    bbf0:	00016060 	.word	0x00016060
    bbf4:	00019c42 	.word	0x00019c42

0000bbf8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    bbf8:	2801      	cmp	r0, #1
{
    bbfa:	b507      	push	{r0, r1, r2, lr}
    bbfc:	4b11      	ldr	r3, [pc, #68]	; (bc44 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    bbfe:	d116      	bne.n	bc2e <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    bc00:	7c9a      	ldrb	r2, [r3, #18]
    bc02:	2a05      	cmp	r2, #5
    bc04:	d104      	bne.n	bc10 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    bc06:	2200      	movs	r2, #0
    bc08:	749a      	strb	r2, [r3, #18]
}
    bc0a:	b003      	add	sp, #12
    bc0c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    bc10:	4b0d      	ldr	r3, [pc, #52]	; (bc48 <ticker_stop_adv_assert+0x50>)
    bc12:	9301      	str	r3, [sp, #4]
    bc14:	9300      	str	r3, [sp, #0]
    bc16:	4a0d      	ldr	r2, [pc, #52]	; (bc4c <ticker_stop_adv_assert+0x54>)
    bc18:	4b0d      	ldr	r3, [pc, #52]	; (bc50 <ticker_stop_adv_assert+0x58>)
    bc1a:	490e      	ldr	r1, [pc, #56]	; (bc54 <ticker_stop_adv_assert+0x5c>)
    bc1c:	480e      	ldr	r0, [pc, #56]	; (bc58 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    bc1e:	f7f5 f9b5 	bl	f8c <printk>
    bc22:	4040      	eors	r0, r0
    bc24:	f380 8811 	msr	BASEPRI, r0
    bc28:	f04f 0004 	mov.w	r0, #4
    bc2c:	df02      	svc	2
    bc2e:	7c1b      	ldrb	r3, [r3, #16]
    bc30:	2b05      	cmp	r3, #5
    bc32:	d1ea      	bne.n	bc0a <ticker_stop_adv_assert+0x12>
    bc34:	4b04      	ldr	r3, [pc, #16]	; (bc48 <ticker_stop_adv_assert+0x50>)
    bc36:	9301      	str	r3, [sp, #4]
    bc38:	9300      	str	r3, [sp, #0]
    bc3a:	4a04      	ldr	r2, [pc, #16]	; (bc4c <ticker_stop_adv_assert+0x54>)
    bc3c:	4b04      	ldr	r3, [pc, #16]	; (bc50 <ticker_stop_adv_assert+0x58>)
    bc3e:	4905      	ldr	r1, [pc, #20]	; (bc54 <ticker_stop_adv_assert+0x5c>)
    bc40:	4806      	ldr	r0, [pc, #24]	; (bc5c <ticker_stop_adv_assert+0x64>)
    bc42:	e7ec      	b.n	bc1e <ticker_stop_adv_assert+0x26>
    bc44:	200008dc 	.word	0x200008dc
    bc48:	00015af1 	.word	0x00015af1
    bc4c:	00016fae 	.word	0x00016fae
    bc50:	00018cf0 	.word	0x00018cf0
    bc54:	00016060 	.word	0x00016060
    bc58:	00016f22 	.word	0x00016f22
    bc5c:	00019bc4 	.word	0x00019bc4

0000bc60 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    bc60:	2801      	cmp	r0, #1
{
    bc62:	b507      	push	{r0, r1, r2, lr}
    bc64:	4b11      	ldr	r3, [pc, #68]	; (bcac <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    bc66:	d116      	bne.n	bc96 <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    bc68:	7c9a      	ldrb	r2, [r3, #18]
    bc6a:	2a06      	cmp	r2, #6
    bc6c:	d104      	bne.n	bc78 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    bc6e:	2200      	movs	r2, #0
    bc70:	749a      	strb	r2, [r3, #18]
}
    bc72:	b003      	add	sp, #12
    bc74:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    bc78:	4b0d      	ldr	r3, [pc, #52]	; (bcb0 <ticker_stop_scan_assert+0x50>)
    bc7a:	9301      	str	r3, [sp, #4]
    bc7c:	9300      	str	r3, [sp, #0]
    bc7e:	4a0d      	ldr	r2, [pc, #52]	; (bcb4 <ticker_stop_scan_assert+0x54>)
    bc80:	4b0d      	ldr	r3, [pc, #52]	; (bcb8 <ticker_stop_scan_assert+0x58>)
    bc82:	490e      	ldr	r1, [pc, #56]	; (bcbc <ticker_stop_scan_assert+0x5c>)
    bc84:	480e      	ldr	r0, [pc, #56]	; (bcc0 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    bc86:	f7f5 f981 	bl	f8c <printk>
    bc8a:	4040      	eors	r0, r0
    bc8c:	f380 8811 	msr	BASEPRI, r0
    bc90:	f04f 0004 	mov.w	r0, #4
    bc94:	df02      	svc	2
    bc96:	7c1b      	ldrb	r3, [r3, #16]
    bc98:	2b06      	cmp	r3, #6
    bc9a:	d1ea      	bne.n	bc72 <ticker_stop_scan_assert+0x12>
    bc9c:	4b04      	ldr	r3, [pc, #16]	; (bcb0 <ticker_stop_scan_assert+0x50>)
    bc9e:	9301      	str	r3, [sp, #4]
    bca0:	9300      	str	r3, [sp, #0]
    bca2:	4a04      	ldr	r2, [pc, #16]	; (bcb4 <ticker_stop_scan_assert+0x54>)
    bca4:	4b04      	ldr	r3, [pc, #16]	; (bcb8 <ticker_stop_scan_assert+0x58>)
    bca6:	4905      	ldr	r1, [pc, #20]	; (bcbc <ticker_stop_scan_assert+0x5c>)
    bca8:	4806      	ldr	r0, [pc, #24]	; (bcc4 <ticker_stop_scan_assert+0x64>)
    bcaa:	e7ec      	b.n	bc86 <ticker_stop_scan_assert+0x26>
    bcac:	200008dc 	.word	0x200008dc
    bcb0:	00015af1 	.word	0x00015af1
    bcb4:	00016fae 	.word	0x00016fae
    bcb8:	00018d07 	.word	0x00018d07
    bcbc:	00016060 	.word	0x00016060
    bcc0:	00016f22 	.word	0x00016f22
    bcc4:	00019c03 	.word	0x00019c03

0000bcc8 <ticker_update_adv_assert>:
{
    bcc8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    bcca:	b190      	cbz	r0, bcf2 <ticker_update_adv_assert+0x2a>
    bccc:	4b0a      	ldr	r3, [pc, #40]	; (bcf8 <ticker_update_adv_assert+0x30>)
    bcce:	7c9b      	ldrb	r3, [r3, #18]
    bcd0:	2b05      	cmp	r3, #5
    bcd2:	d00e      	beq.n	bcf2 <ticker_update_adv_assert+0x2a>
    bcd4:	4b09      	ldr	r3, [pc, #36]	; (bcfc <ticker_update_adv_assert+0x34>)
    bcd6:	9301      	str	r3, [sp, #4]
    bcd8:	9300      	str	r3, [sp, #0]
    bcda:	4a09      	ldr	r2, [pc, #36]	; (bd00 <ticker_update_adv_assert+0x38>)
    bcdc:	4b09      	ldr	r3, [pc, #36]	; (bd04 <ticker_update_adv_assert+0x3c>)
    bcde:	490a      	ldr	r1, [pc, #40]	; (bd08 <ticker_update_adv_assert+0x40>)
    bce0:	480a      	ldr	r0, [pc, #40]	; (bd0c <ticker_update_adv_assert+0x44>)
    bce2:	f7f5 f953 	bl	f8c <printk>
    bce6:	4040      	eors	r0, r0
    bce8:	f380 8811 	msr	BASEPRI, r0
    bcec:	f04f 0004 	mov.w	r0, #4
    bcf0:	df02      	svc	2
}
    bcf2:	b003      	add	sp, #12
    bcf4:	f85d fb04 	ldr.w	pc, [sp], #4
    bcf8:	200008dc 	.word	0x200008dc
    bcfc:	00015af1 	.word	0x00015af1
    bd00:	00016fae 	.word	0x00016fae
    bd04:	00018d1f 	.word	0x00018d1f
    bd08:	00016060 	.word	0x00016060
    bd0c:	00019c6f 	.word	0x00019c6f

0000bd10 <ticker_update_slave_assert>:
{
    bd10:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    bd12:	b198      	cbz	r0, bd3c <ticker_update_slave_assert+0x2c>
    bd14:	4b0b      	ldr	r3, [pc, #44]	; (bd44 <ticker_update_slave_assert+0x34>)
    bd16:	7c9b      	ldrb	r3, [r3, #18]
    bd18:	b2c9      	uxtb	r1, r1
    bd1a:	4299      	cmp	r1, r3
    bd1c:	d00e      	beq.n	bd3c <ticker_update_slave_assert+0x2c>
    bd1e:	4b0a      	ldr	r3, [pc, #40]	; (bd48 <ticker_update_slave_assert+0x38>)
    bd20:	9301      	str	r3, [sp, #4]
    bd22:	9300      	str	r3, [sp, #0]
    bd24:	4a09      	ldr	r2, [pc, #36]	; (bd4c <ticker_update_slave_assert+0x3c>)
    bd26:	4b0a      	ldr	r3, [pc, #40]	; (bd50 <ticker_update_slave_assert+0x40>)
    bd28:	490a      	ldr	r1, [pc, #40]	; (bd54 <ticker_update_slave_assert+0x44>)
    bd2a:	480b      	ldr	r0, [pc, #44]	; (bd58 <ticker_update_slave_assert+0x48>)
    bd2c:	f7f5 f92e 	bl	f8c <printk>
    bd30:	4040      	eors	r0, r0
    bd32:	f380 8811 	msr	BASEPRI, r0
    bd36:	f04f 0004 	mov.w	r0, #4
    bd3a:	df02      	svc	2
}
    bd3c:	b003      	add	sp, #12
    bd3e:	f85d fb04 	ldr.w	pc, [sp], #4
    bd42:	bf00      	nop
    bd44:	200008dc 	.word	0x200008dc
    bd48:	00015af1 	.word	0x00015af1
    bd4c:	00016fae 	.word	0x00016fae
    bd50:	00018d38 	.word	0x00018d38
    bd54:	00016060 	.word	0x00016060
    bd58:	00019cbe 	.word	0x00019cbe

0000bd5c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    bd5c:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    bd5e:	b170      	cbz	r0, bd7e <ticker_op_latency_cancelled+0x22>
    bd60:	4b0b      	ldr	r3, [pc, #44]	; (bd90 <ticker_op_latency_cancelled+0x34>)
    bd62:	9301      	str	r3, [sp, #4]
    bd64:	9300      	str	r3, [sp, #0]
    bd66:	4a0b      	ldr	r2, [pc, #44]	; (bd94 <ticker_op_latency_cancelled+0x38>)
    bd68:	4b0b      	ldr	r3, [pc, #44]	; (bd98 <ticker_op_latency_cancelled+0x3c>)
    bd6a:	490c      	ldr	r1, [pc, #48]	; (bd9c <ticker_op_latency_cancelled+0x40>)
    bd6c:	480c      	ldr	r0, [pc, #48]	; (bda0 <ticker_op_latency_cancelled+0x44>)
    bd6e:	f7f5 f90d 	bl	f8c <printk>
    bd72:	4040      	eors	r0, r0
    bd74:	f380 8811 	msr	BASEPRI, r0
    bd78:	f04f 0004 	mov.w	r0, #4
    bd7c:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    bd7e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    bd82:	f360 0341 	bfi	r3, r0, #1, #1
    bd86:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    bd8a:	b003      	add	sp, #12
    bd8c:	f85d fb04 	ldr.w	pc, [sp], #4
    bd90:	00015af1 	.word	0x00015af1
    bd94:	00016fae 	.word	0x00016fae
    bd98:	00019016 	.word	0x00019016
    bd9c:	00016060 	.word	0x00016060
    bda0:	00019b90 	.word	0x00019b90

0000bda4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    bda4:	4b04      	ldr	r3, [pc, #16]	; (bdb8 <ticker_job_disable+0x14>)
    bda6:	7d1b      	ldrb	r3, [r3, #20]
    bda8:	b123      	cbz	r3, bdb4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    bdaa:	2101      	movs	r1, #1
    bdac:	2200      	movs	r2, #0
    bdae:	4608      	mov	r0, r1
    bdb0:	f7fb be9c 	b.w	7aec <mayfly_enable>
    bdb4:	4770      	bx	lr
    bdb6:	bf00      	nop
    bdb8:	200008dc 	.word	0x200008dc

0000bdbc <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    bdbc:	2806      	cmp	r0, #6
{
    bdbe:	b510      	push	{r4, lr}
    bdc0:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    bdc2:	d90a      	bls.n	bdda <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bdc4:	4b09      	ldr	r3, [pc, #36]	; (bdec <hdr_conn_get+0x30>)
    bdc6:	1fc2      	subs	r2, r0, #7
    bdc8:	b292      	uxth	r2, r2
    bdca:	f44f 71aa 	mov.w	r1, #340	; 0x154
    bdce:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    bdd2:	f7fb fe1d 	bl	7a10 <mem_get>
    bdd6:	6020      	str	r0, [r4, #0]
    bdd8:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    bdda:	2805      	cmp	r0, #5
    bddc:	d004      	beq.n	bde8 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    bdde:	2806      	cmp	r0, #6
	return NULL;
    bde0:	4803      	ldr	r0, [pc, #12]	; (bdf0 <hdr_conn_get+0x34>)
    bde2:	bf18      	it	ne
    bde4:	2000      	movne	r0, #0
    bde6:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    bde8:	4802      	ldr	r0, [pc, #8]	; (bdf4 <hdr_conn_get+0x38>)
}
    bdea:	bd10      	pop	{r4, pc}
    bdec:	200008dc 	.word	0x200008dc
    bdf0:	200009ac 	.word	0x200009ac
    bdf4:	200008f4 	.word	0x200008f4

0000bdf8 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    bdf8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    bdfa:	4b07      	ldr	r3, [pc, #28]	; (be18 <event_stop.part.10+0x20>)
    bdfc:	9301      	str	r3, [sp, #4]
    bdfe:	9300      	str	r3, [sp, #0]
    be00:	4a06      	ldr	r2, [pc, #24]	; (be1c <event_stop.part.10+0x24>)
    be02:	4b07      	ldr	r3, [pc, #28]	; (be20 <event_stop.part.10+0x28>)
    be04:	4907      	ldr	r1, [pc, #28]	; (be24 <event_stop.part.10+0x2c>)
    be06:	4808      	ldr	r0, [pc, #32]	; (be28 <event_stop.part.10+0x30>)
    be08:	f7f5 f8c0 	bl	f8c <printk>
    be0c:	4040      	eors	r0, r0
    be0e:	f380 8811 	msr	BASEPRI, r0
    be12:	f04f 0004 	mov.w	r0, #4
    be16:	df02      	svc	2
    be18:	00015af1 	.word	0x00015af1
    be1c:	00016fae 	.word	0x00016fae
    be20:	00018e37 	.word	0x00018e37
    be24:	00016060 	.word	0x00016060
    be28:	000197a5 	.word	0x000197a5

0000be2c <event_stop>:
	s_mfy_radio_stop.param = context;
    be2c:	4a06      	ldr	r2, [pc, #24]	; (be48 <event_stop+0x1c>)
{
    be2e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    be30:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    be32:	4613      	mov	r3, r2
    be34:	2200      	movs	r2, #0
    be36:	4611      	mov	r1, r2
    be38:	4610      	mov	r0, r2
    be3a:	f7fb fe7f 	bl	7b3c <mayfly_enqueue>
	LL_ASSERT(!retval);
    be3e:	b108      	cbz	r0, be44 <event_stop+0x18>
    be40:	f7ff ffda 	bl	bdf8 <event_stop.part.10>
    be44:	bd08      	pop	{r3, pc}
    be46:	bf00      	nop
    be48:	20003e40 	.word	0x20003e40

0000be4c <event_active>:
{
    be4c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    be4e:	2200      	movs	r2, #0
    be50:	4b0b      	ldr	r3, [pc, #44]	; (be80 <event_active+0x34>)
    be52:	4611      	mov	r1, r2
    be54:	4610      	mov	r0, r2
    be56:	f7fb fe71 	bl	7b3c <mayfly_enqueue>
	LL_ASSERT(!retval);
    be5a:	b170      	cbz	r0, be7a <event_active+0x2e>
    be5c:	4b09      	ldr	r3, [pc, #36]	; (be84 <event_active+0x38>)
    be5e:	9301      	str	r3, [sp, #4]
    be60:	9300      	str	r3, [sp, #0]
    be62:	4a09      	ldr	r2, [pc, #36]	; (be88 <event_active+0x3c>)
    be64:	4b09      	ldr	r3, [pc, #36]	; (be8c <event_active+0x40>)
    be66:	490a      	ldr	r1, [pc, #40]	; (be90 <event_active+0x44>)
    be68:	480a      	ldr	r0, [pc, #40]	; (be94 <event_active+0x48>)
    be6a:	f7f5 f88f 	bl	f8c <printk>
    be6e:	4040      	eors	r0, r0
    be70:	f380 8811 	msr	BASEPRI, r0
    be74:	f04f 0004 	mov.w	r0, #4
    be78:	df02      	svc	2
}
    be7a:	b003      	add	sp, #12
    be7c:	f85d fb04 	ldr.w	pc, [sp], #4
    be80:	20003e10 	.word	0x20003e10
    be84:	00015af1 	.word	0x00015af1
    be88:	00016fae 	.word	0x00016fae
    be8c:	00018d67 	.word	0x00018d67
    be90:	00016060 	.word	0x00016060
    be94:	000197a5 	.word	0x000197a5

0000be98 <event_xtal>:
{
    be98:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    be9a:	2200      	movs	r2, #0
    be9c:	4b0b      	ldr	r3, [pc, #44]	; (becc <event_xtal+0x34>)
    be9e:	4611      	mov	r1, r2
    bea0:	4610      	mov	r0, r2
    bea2:	f7fb fe4b 	bl	7b3c <mayfly_enqueue>
	LL_ASSERT(!retval);
    bea6:	b170      	cbz	r0, bec6 <event_xtal+0x2e>
    bea8:	4b09      	ldr	r3, [pc, #36]	; (bed0 <event_xtal+0x38>)
    beaa:	9301      	str	r3, [sp, #4]
    beac:	9300      	str	r3, [sp, #0]
    beae:	4a09      	ldr	r2, [pc, #36]	; (bed4 <event_xtal+0x3c>)
    beb0:	4b09      	ldr	r3, [pc, #36]	; (bed8 <event_xtal+0x40>)
    beb2:	490a      	ldr	r1, [pc, #40]	; (bedc <event_xtal+0x44>)
    beb4:	480a      	ldr	r0, [pc, #40]	; (bee0 <event_xtal+0x48>)
    beb6:	f7f5 f869 	bl	f8c <printk>
    beba:	4040      	eors	r0, r0
    bebc:	f380 8811 	msr	BASEPRI, r0
    bec0:	f04f 0004 	mov.w	r0, #4
    bec4:	df02      	svc	2
}
    bec6:	b003      	add	sp, #12
    bec8:	f85d fb04 	ldr.w	pc, [sp], #4
    becc:	20003e90 	.word	0x20003e90
    bed0:	00015af1 	.word	0x00015af1
    bed4:	00016fae 	.word	0x00016fae
    bed8:	00018d83 	.word	0x00018d83
    bedc:	00016060 	.word	0x00016060
    bee0:	000197a5 	.word	0x000197a5

0000bee4 <mayfly_radio_active>:
{
    bee4:	b507      	push	{r0, r1, r2, lr}
    bee6:	4a12      	ldr	r2, [pc, #72]	; (bf30 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    bee8:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    beea:	b140      	cbz	r0, befe <mayfly_radio_active+0x1a>
		if (s_active++) {
    beec:	1c59      	adds	r1, r3, #1
    beee:	7011      	strb	r1, [r2, #0]
    bef0:	b9d3      	cbnz	r3, bf28 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    bef2:	2001      	movs	r0, #1
}
    bef4:	b003      	add	sp, #12
    bef6:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    befa:	f006 b92d 	b.w	12158 <radio_active_callback>
		LL_ASSERT(s_active);
    befe:	b973      	cbnz	r3, bf1e <mayfly_radio_active+0x3a>
    bf00:	4b0c      	ldr	r3, [pc, #48]	; (bf34 <mayfly_radio_active+0x50>)
    bf02:	9301      	str	r3, [sp, #4]
    bf04:	9300      	str	r3, [sp, #0]
    bf06:	4a0c      	ldr	r2, [pc, #48]	; (bf38 <mayfly_radio_active+0x54>)
    bf08:	4b0c      	ldr	r3, [pc, #48]	; (bf3c <mayfly_radio_active+0x58>)
    bf0a:	490d      	ldr	r1, [pc, #52]	; (bf40 <mayfly_radio_active+0x5c>)
    bf0c:	480d      	ldr	r0, [pc, #52]	; (bf44 <mayfly_radio_active+0x60>)
    bf0e:	f7f5 f83d 	bl	f8c <printk>
    bf12:	4040      	eors	r0, r0
    bf14:	f380 8811 	msr	BASEPRI, r0
    bf18:	f04f 0004 	mov.w	r0, #4
    bf1c:	df02      	svc	2
		if (--s_active) {
    bf1e:	3b01      	subs	r3, #1
    bf20:	b2db      	uxtb	r3, r3
    bf22:	7013      	strb	r3, [r2, #0]
    bf24:	2b00      	cmp	r3, #0
    bf26:	d0e5      	beq.n	bef4 <mayfly_radio_active+0x10>
}
    bf28:	b003      	add	sp, #12
    bf2a:	f85d fb04 	ldr.w	pc, [sp], #4
    bf2e:	bf00      	nop
    bf30:	20000a80 	.word	0x20000a80
    bf34:	00015af1 	.word	0x00015af1
    bf38:	00016fae 	.word	0x00016fae
    bf3c:	00018d53 	.word	0x00018d53
    bf40:	00016060 	.word	0x00016060
    bf44:	000196fa 	.word	0x000196fa

0000bf48 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    bf48:	2000      	movs	r0, #0
    bf4a:	f7ff bfcb 	b.w	bee4 <mayfly_radio_active>
	...

0000bf50 <mayfly_radio_stop>:
{
    bf50:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    bf52:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    bf54:	1f03      	subs	r3, r0, #4
    bf56:	2b01      	cmp	r3, #1
    bf58:	d90e      	bls.n	bf78 <mayfly_radio_stop+0x28>
    bf5a:	4b11      	ldr	r3, [pc, #68]	; (bfa0 <mayfly_radio_stop+0x50>)
    bf5c:	9301      	str	r3, [sp, #4]
    bf5e:	9300      	str	r3, [sp, #0]
    bf60:	4a10      	ldr	r2, [pc, #64]	; (bfa4 <mayfly_radio_stop+0x54>)
    bf62:	4b11      	ldr	r3, [pc, #68]	; (bfa8 <mayfly_radio_stop+0x58>)
    bf64:	4911      	ldr	r1, [pc, #68]	; (bfac <mayfly_radio_stop+0x5c>)
    bf66:	4812      	ldr	r0, [pc, #72]	; (bfb0 <mayfly_radio_stop+0x60>)
    bf68:	f7f5 f810 	bl	f8c <printk>
    bf6c:	4040      	eors	r0, r0
    bf6e:	f380 8811 	msr	BASEPRI, r0
    bf72:	f04f 0004 	mov.w	r0, #4
    bf76:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    bf78:	4a0e      	ldr	r2, [pc, #56]	; (bfb4 <mayfly_radio_stop+0x64>)
    bf7a:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    bf7c:	b143      	cbz	r3, bf90 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    bf7e:	3b04      	subs	r3, #4
    bf80:	2b01      	cmp	r3, #1
    bf82:	d905      	bls.n	bf90 <mayfly_radio_stop+0x40>
			_radio.state = state;
    bf84:	7510      	strb	r0, [r2, #20]
}
    bf86:	b003      	add	sp, #12
    bf88:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    bf8c:	f007 babc 	b.w	13508 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    bf90:	f007 faec 	bl	1356c <radio_is_idle>
    bf94:	2800      	cmp	r0, #0
    bf96:	d0f6      	beq.n	bf86 <mayfly_radio_stop+0x36>
}
    bf98:	b003      	add	sp, #12
    bf9a:	f85d fb04 	ldr.w	pc, [sp], #4
    bf9e:	bf00      	nop
    bfa0:	00015af1 	.word	0x00015af1
    bfa4:	00016fae 	.word	0x00016fae
    bfa8:	00018e25 	.word	0x00018e25
    bfac:	00016060 	.word	0x00016060
    bfb0:	00019724 	.word	0x00019724
    bfb4:	200008dc 	.word	0x200008dc

0000bfb8 <pdu_node_tx_release>:
{
    bfb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    bfba:	4a17      	ldr	r2, [pc, #92]	; (c018 <pdu_node_tx_release+0x60>)
    bfbc:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    bfc0:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    bfc4:	3301      	adds	r3, #1
    bfc6:	b2db      	uxtb	r3, r3
		last = 0;
    bfc8:	429c      	cmp	r4, r3
    bfca:	bf08      	it	eq
    bfcc:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    bfce:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    bfd2:	429c      	cmp	r4, r3
    bfd4:	d10e      	bne.n	bff4 <pdu_node_tx_release+0x3c>
    bfd6:	4b11      	ldr	r3, [pc, #68]	; (c01c <pdu_node_tx_release+0x64>)
    bfd8:	9301      	str	r3, [sp, #4]
    bfda:	9300      	str	r3, [sp, #0]
    bfdc:	4a10      	ldr	r2, [pc, #64]	; (c020 <pdu_node_tx_release+0x68>)
    bfde:	4b11      	ldr	r3, [pc, #68]	; (c024 <pdu_node_tx_release+0x6c>)
    bfe0:	4911      	ldr	r1, [pc, #68]	; (c028 <pdu_node_tx_release+0x70>)
    bfe2:	4812      	ldr	r0, [pc, #72]	; (c02c <pdu_node_tx_release+0x74>)
    bfe4:	f7f4 ffd2 	bl	f8c <printk>
    bfe8:	4040      	eors	r0, r0
    bfea:	f380 8811 	msr	BASEPRI, r0
    bfee:	f04f 0004 	mov.w	r0, #4
    bff2:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    bff4:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    bff8:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    bffc:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    c000:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    c004:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    c008:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    c00a:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    c00e:	b003      	add	sp, #12
    c010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    c014:	f006 b8a2 	b.w	1215c <radio_event_callback>
    c018:	200008dc 	.word	0x200008dc
    c01c:	00015af1 	.word	0x00015af1
    c020:	00016fae 	.word	0x00016fae
    c024:	00018f6d 	.word	0x00018f6d
    c028:	00016060 	.word	0x00016060
    c02c:	00019875 	.word	0x00019875

0000c030 <packet_tx_enqueue>:
{
    c030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    c034:	4c24      	ldr	r4, [pc, #144]	; (c0c8 <packet_tx_enqueue+0x98>)
{
    c036:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    c038:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    c03a:	b12e      	cbz	r6, c048 <packet_tx_enqueue+0x18>
    c03c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    c040:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    c044:	429a      	cmp	r2, r3
    c046:	d101      	bne.n	c04c <packet_tx_enqueue+0x1c>
    c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    c04c:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    c050:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c054:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    c058:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    c05c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c060:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    c064:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    c066:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c068:	f7fb fcd2 	bl	7a10 <mem_get>
    c06c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    c06e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    c072:	8c1a      	ldrh	r2, [r3, #32]
    c074:	4282      	cmp	r2, r0
    c076:	d11f      	bne.n	c0b8 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    c078:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    c07c:	b942      	cbnz	r2, c090 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    c07e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    c082:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    c086:	b91a      	cbnz	r2, c090 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    c088:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    c08c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    c090:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    c094:	b102      	cbz	r2, c098 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    c096:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    c098:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    c09c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    c0a0:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    c0a4:	3301      	adds	r3, #1
    c0a6:	b2db      	uxtb	r3, r3
			first = 0;
    c0a8:	429a      	cmp	r2, r3
    c0aa:	bf08      	it	eq
    c0ac:	2300      	moveq	r3, #0
    c0ae:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    c0b0:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    c0b4:	b2f6      	uxtb	r6, r6
    c0b6:	e7c0      	b.n	c03a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c0b8:	792b      	ldrb	r3, [r5, #4]
    c0ba:	f367 0301 	bfi	r3, r7, #0, #2
    c0be:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    c0c0:	4629      	mov	r1, r5
    c0c2:	f7ff ff79 	bl	bfb8 <pdu_node_tx_release>
    c0c6:	e7e9      	b.n	c09c <packet_tx_enqueue+0x6c>
    c0c8:	200008dc 	.word	0x200008dc

0000c0cc <connection_release>:
{
    c0cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c0ce:	2201      	movs	r2, #1
{
    c0d0:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c0d2:	4611      	mov	r1, r2
    c0d4:	2000      	movs	r0, #0
    c0d6:	f7fb fd09 	bl	7aec <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c0da:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    c0de:	2100      	movs	r1, #0
    c0e0:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c0e4:	3207      	adds	r2, #7
	ticker_status =
    c0e6:	9300      	str	r3, [sp, #0]
    c0e8:	4608      	mov	r0, r1
    c0ea:	4b3e      	ldr	r3, [pc, #248]	; (c1e4 <connection_release+0x118>)
    c0ec:	b2d2      	uxtb	r2, r2
    c0ee:	f7fc fb81 	bl	87f4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c0f2:	f030 0102 	bics.w	r1, r0, #2
    c0f6:	d00e      	beq.n	c116 <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c0f8:	4b3b      	ldr	r3, [pc, #236]	; (c1e8 <connection_release+0x11c>)
    c0fa:	9301      	str	r3, [sp, #4]
    c0fc:	9300      	str	r3, [sp, #0]
    c0fe:	4a3b      	ldr	r2, [pc, #236]	; (c1ec <connection_release+0x120>)
    c100:	4b3b      	ldr	r3, [pc, #236]	; (c1f0 <connection_release+0x124>)
    c102:	493c      	ldr	r1, [pc, #240]	; (c1f4 <connection_release+0x128>)
    c104:	483c      	ldr	r0, [pc, #240]	; (c1f8 <connection_release+0x12c>)
    c106:	f7f4 ff41 	bl	f8c <printk>
    c10a:	4040      	eors	r0, r0
    c10c:	f380 8811 	msr	BASEPRI, r0
    c110:	f04f 0004 	mov.w	r0, #4
    c114:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    c116:	4b39      	ldr	r3, [pc, #228]	; (c1fc <connection_release+0x130>)
    c118:	7d1a      	ldrb	r2, [r3, #20]
    c11a:	2a05      	cmp	r2, #5
    c11c:	461d      	mov	r5, r3
    c11e:	d11b      	bne.n	c158 <connection_release+0x8c>
					  conn->handle))) {
    c120:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    c122:	7c18      	ldrb	r0, [r3, #16]
    c124:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    c126:	4290      	cmp	r0, r2
    c128:	d116      	bne.n	c158 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    c12a:	7419      	strb	r1, [r3, #16]
		ticker_status =
    c12c:	f242 23fb 	movw	r3, #8955	; 0x22fb
    c130:	9300      	str	r3, [sp, #0]
    c132:	2201      	movs	r2, #1
    c134:	4b2b      	ldr	r3, [pc, #172]	; (c1e4 <connection_release+0x118>)
    c136:	4608      	mov	r0, r1
    c138:	f7fc fb5c 	bl	87f4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c13c:	f030 0202 	bics.w	r2, r0, #2
    c140:	d1da      	bne.n	c0f8 <connection_release+0x2c>
		ticker_status =
    c142:	f242 3302 	movw	r3, #8962	; 0x2302
    c146:	9300      	str	r3, [sp, #0]
    c148:	4611      	mov	r1, r2
    c14a:	4b26      	ldr	r3, [pc, #152]	; (c1e4 <connection_release+0x118>)
    c14c:	4610      	mov	r0, r2
    c14e:	f7fc fb51 	bl	87f4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c152:	f030 0302 	bics.w	r3, r0, #2
    c156:	d1cf      	bne.n	c0f8 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    c158:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    c15c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    c160:	4299      	cmp	r1, r3
    c162:	d003      	beq.n	c16c <connection_release+0xa0>
    c164:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c168:	4299      	cmp	r1, r3
    c16a:	d101      	bne.n	c170 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c16c:	4e24      	ldr	r6, [pc, #144]	; (c200 <connection_release+0x134>)
    c16e:	e012      	b.n	c196 <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c170:	790b      	ldrb	r3, [r1, #4]
    c172:	f36f 0301 	bfc	r3, #0, #2
    c176:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c178:	680b      	ldr	r3, [r1, #0]
    c17a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    c17e:	8c20      	ldrh	r0, [r4, #32]
    c180:	f7ff ff1a 	bl	bfb8 <pdu_node_tx_release>
    c184:	e7e8      	b.n	c158 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c186:	6803      	ldr	r3, [r0, #0]
    c188:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    c18c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c190:	4631      	mov	r1, r6
    c192:	f7fb fc22 	bl	79da <mem_release>
	while ((conn->pkt_tx_head) &&
    c196:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    c19a:	b118      	cbz	r0, c1a4 <connection_release+0xd8>
    c19c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c1a0:	4298      	cmp	r0, r3
    c1a2:	d1f0      	bne.n	c186 <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    c1a4:	2300      	movs	r3, #0
    c1a6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    c1aa:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    c1ae:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    c1b2:	b951      	cbnz	r1, c1ca <connection_release+0xfe>
	conn->handle = 0xffff;
    c1b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c1b8:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    c1ba:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c1be:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    c1c0:	bf08      	it	eq
    c1c2:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    c1c6:	b002      	add	sp, #8
    c1c8:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c1ca:	790b      	ldrb	r3, [r1, #4]
    c1cc:	f36f 0301 	bfc	r3, #0, #2
    c1d0:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c1d2:	680b      	ldr	r3, [r1, #0]
    c1d4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    c1d8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    c1dc:	8c20      	ldrh	r0, [r4, #32]
    c1de:	f7ff feeb 	bl	bfb8 <pdu_node_tx_release>
    c1e2:	e7e4      	b.n	c1ae <connection_release+0xe2>
    c1e4:	0000bbbd 	.word	0x0000bbbd
    c1e8:	00015af1 	.word	0x00015af1
    c1ec:	00016fae 	.word	0x00016fae
    c1f0:	00018f81 	.word	0x00018f81
    c1f4:	00016060 	.word	0x00016060
    c1f8:	0001906a 	.word	0x0001906a
    c1fc:	200008dc 	.word	0x200008dc
    c200:	20000a38 	.word	0x20000a38

0000c204 <chan_set>:
	switch (chan) {
    c204:	2826      	cmp	r0, #38	; 0x26
{
    c206:	b513      	push	{r0, r1, r4, lr}
    c208:	4604      	mov	r4, r0
	switch (chan) {
    c20a:	d00c      	beq.n	c226 <chan_set+0x22>
    c20c:	2827      	cmp	r0, #39	; 0x27
    c20e:	d00c      	beq.n	c22a <chan_set+0x26>
    c210:	2825      	cmp	r0, #37	; 0x25
    c212:	d10c      	bne.n	c22e <chan_set+0x2a>
		radio_freq_chan_set(2);
    c214:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    c216:	f007 f8f3 	bl	13400 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    c21a:	4620      	mov	r0, r4
}
    c21c:	b002      	add	sp, #8
    c21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    c222:	f007 b8f3 	b.w	1340c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    c226:	201a      	movs	r0, #26
    c228:	e7f5      	b.n	c216 <chan_set+0x12>
		radio_freq_chan_set(80);
    c22a:	2050      	movs	r0, #80	; 0x50
    c22c:	e7f3      	b.n	c216 <chan_set+0x12>
		if (chan < 11) {
    c22e:	280a      	cmp	r0, #10
    c230:	d802      	bhi.n	c238 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    c232:	3002      	adds	r0, #2
    c234:	0040      	lsls	r0, r0, #1
    c236:	e7ee      	b.n	c216 <chan_set+0x12>
		} else if (chan < 40) {
    c238:	2827      	cmp	r0, #39	; 0x27
    c23a:	d801      	bhi.n	c240 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    c23c:	3003      	adds	r0, #3
    c23e:	e7f9      	b.n	c234 <chan_set+0x30>
			LL_ASSERT(0);
    c240:	4b07      	ldr	r3, [pc, #28]	; (c260 <chan_set+0x5c>)
    c242:	9301      	str	r3, [sp, #4]
    c244:	9300      	str	r3, [sp, #0]
    c246:	4a07      	ldr	r2, [pc, #28]	; (c264 <chan_set+0x60>)
    c248:	4b07      	ldr	r3, [pc, #28]	; (c268 <chan_set+0x64>)
    c24a:	4908      	ldr	r1, [pc, #32]	; (c26c <chan_set+0x68>)
    c24c:	4808      	ldr	r0, [pc, #32]	; (c270 <chan_set+0x6c>)
    c24e:	f7f4 fe9d 	bl	f8c <printk>
    c252:	4040      	eors	r0, r0
    c254:	f380 8811 	msr	BASEPRI, r0
    c258:	f04f 0004 	mov.w	r0, #4
    c25c:	df02      	svc	2
    c25e:	bf00      	nop
    c260:	00015af1 	.word	0x00015af1
    c264:	00016fae 	.word	0x00016fae
    c268:	00018e57 	.word	0x00018e57
    c26c:	00016060 	.word	0x00016060
    c270:	00016f22 	.word	0x00016f22

0000c274 <adv_setup>:
{
    c274:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    c276:	4c31      	ldr	r4, [pc, #196]	; (c33c <adv_setup+0xc8>)
    c278:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    c27c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    c280:	429a      	cmp	r2, r3
    c282:	d051      	beq.n	c328 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    c284:	3301      	adds	r3, #1
    c286:	b2db      	uxtb	r3, r3
			first = 0;
    c288:	2b02      	cmp	r3, #2
    c28a:	bf08      	it	eq
    c28c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    c28e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    c292:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    c294:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    c298:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    c29c:	4299      	cmp	r1, r3
    c29e:	d007      	beq.n	c2b0 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    c2a0:	3301      	adds	r3, #1
    c2a2:	b2db      	uxtb	r3, r3
			first = 0;
    c2a4:	2b02      	cmp	r3, #2
    c2a6:	bf08      	it	eq
    c2a8:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    c2aa:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    c2ae:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    c2b0:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    c2b4:	2327      	movs	r3, #39	; 0x27
    c2b6:	212b      	movs	r1, #43	; 0x2b
    c2b8:	fb13 1505 	smlabb	r5, r3, r5, r1
    c2bc:	1966      	adds	r6, r4, r5
	if (upd) {
    c2be:	b142      	cbz	r2, c2d2 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    c2c0:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    c2c4:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    c2c8:	2206      	movs	r2, #6
    c2ca:	1cb1      	adds	r1, r6, #2
    c2cc:	307d      	adds	r0, #125	; 0x7d
    c2ce:	f7f5 fc95 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    c2d2:	4630      	mov	r0, r6
    c2d4:	f007 f8f8 	bl	134c8 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    c2d8:	5d63      	ldrb	r3, [r4, r5]
    c2da:	f003 030f 	and.w	r3, r3, #15
    c2de:	2b02      	cmp	r3, #2
    c2e0:	d024      	beq.n	c32c <adv_setup+0xb8>
    c2e2:	2b07      	cmp	r3, #7
    c2e4:	d022      	beq.n	c32c <adv_setup+0xb8>
		_radio.state = STATE_TX;
    c2e6:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    c2e8:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    c2ea:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    c2ec:	f007 fa02 	bl	136f4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    c2f0:	2000      	movs	r0, #0
    c2f2:	f007 f963 	bl	135bc <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    c2f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c2fa:	f3c3 0202 	ubfx	r2, r3, #0, #3
    c2fe:	b2d3      	uxtb	r3, r2
    c300:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    c302:	2000      	movs	r0, #0
    c304:	07ce      	lsls	r6, r1, #31
    c306:	f100 0501 	add.w	r5, r0, #1
    c30a:	d514      	bpl.n	c336 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    c30c:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    c30e:	4013      	ands	r3, r2
    c310:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    c314:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    c316:	f363 0202 	bfi	r2, r3, #0, #3
    c31a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    c31e:	3025      	adds	r0, #37	; 0x25
}
    c320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    c324:	f7ff bf6e 	b.w	c204 <chan_set>
	u8_t upd = 0;
    c328:	2200      	movs	r2, #0
    c32a:	e7b3      	b.n	c294 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    c32c:	2303      	movs	r3, #3
    c32e:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    c330:	f007 f95a 	bl	135e8 <radio_switch_complete_and_disable>
    c334:	e7df      	b.n	c2f6 <adv_setup+0x82>
		bitmap >>= 1;
    c336:	0849      	lsrs	r1, r1, #1
    c338:	4628      	mov	r0, r5
    c33a:	e7e3      	b.n	c304 <adv_setup+0x90>
    c33c:	200008dc 	.word	0x200008dc

0000c340 <sched_after_mstr_free_offset_get>:
{
    c340:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c342:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    c344:	aa04      	add	r2, sp, #16
{
    c346:	461c      	mov	r4, r3
    c348:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    c34a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    c34e:	3127      	adds	r1, #39	; 0x27
    c350:	2001      	movs	r0, #1
    c352:	f7ff fa5d 	bl	b810 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    c356:	6823      	ldr	r3, [r4, #0]
    c358:	b363      	cbz	r3, c3b4 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    c35a:	9803      	ldr	r0, [sp, #12]
    c35c:	1b83      	subs	r3, r0, r6
    c35e:	021b      	lsls	r3, r3, #8
    c360:	d50e      	bpl.n	c380 <sched_after_mstr_free_offset_get+0x40>
    c362:	4b19      	ldr	r3, [pc, #100]	; (c3c8 <sched_after_mstr_free_offset_get+0x88>)
    c364:	9301      	str	r3, [sp, #4]
    c366:	9300      	str	r3, [sp, #0]
    c368:	4a18      	ldr	r2, [pc, #96]	; (c3cc <sched_after_mstr_free_offset_get+0x8c>)
    c36a:	4b19      	ldr	r3, [pc, #100]	; (c3d0 <sched_after_mstr_free_offset_get+0x90>)
    c36c:	4919      	ldr	r1, [pc, #100]	; (c3d4 <sched_after_mstr_free_offset_get+0x94>)
    c36e:	481a      	ldr	r0, [pc, #104]	; (c3d8 <sched_after_mstr_free_offset_get+0x98>)
    c370:	f7f4 fe0c 	bl	f8c <printk>
    c374:	4040      	eors	r0, r0
    c376:	f380 8811 	msr	BASEPRI, r0
    c37a:	f04f 0004 	mov.w	r0, #4
    c37e:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    c380:	4631      	mov	r1, r6
    c382:	f7fc fb09 	bl	8998 <ticker_ticks_diff_get>
    c386:	4602      	mov	r2, r0
    c388:	4814      	ldr	r0, [pc, #80]	; (c3dc <sched_after_mstr_free_offset_get+0x9c>)
    c38a:	2307      	movs	r3, #7
    c38c:	fba2 0100 	umull	r0, r1, r2, r0
    c390:	fb03 1102 	mla	r1, r3, r2, r1
    c394:	a30a      	add	r3, pc, #40	; (adr r3, c3c0 <sched_after_mstr_free_offset_get+0x80>)
    c396:	e9d3 2300 	ldrd	r2, r3, [r3]
    c39a:	f7f3 ff3b 	bl	214 <__aeabi_uldivmod>
    c39e:	6823      	ldr	r3, [r4, #0]
    c3a0:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    c3a2:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    c3a4:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    c3a6:	db05      	blt.n	c3b4 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    c3a8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c3ac:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    c3ae:	6823      	ldr	r3, [r4, #0]
    c3b0:	4298      	cmp	r0, r3
    c3b2:	d301      	bcc.n	c3b8 <sched_after_mstr_free_offset_get+0x78>
}
    c3b4:	b004      	add	sp, #16
    c3b6:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    c3b8:	1a1b      	subs	r3, r3, r0
    c3ba:	6023      	str	r3, [r4, #0]
    c3bc:	e7f7      	b.n	c3ae <sched_after_mstr_free_offset_get+0x6e>
    c3be:	bf00      	nop
    c3c0:	3b9aca00 	.word	0x3b9aca00
    c3c4:	00000000 	.word	0x00000000
    c3c8:	00015af1 	.word	0x00015af1
    c3cc:	00016fae 	.word	0x00016fae
    c3d0:	00018de9 	.word	0x00018de9
    c3d4:	00016060 	.word	0x00016060
    c3d8:	00019ad1 	.word	0x00019ad1
    c3dc:	1afd498d 	.word	0x1afd498d

0000c3e0 <mayfly_sched_win_offset_use>:
{
    c3e0:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    c3e2:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    c3e6:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    c3e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    c3ec:	68c1      	ldr	r1, [r0, #12]
    c3ee:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    c3f0:	f7ff ffa6 	bl	c340 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c3f4:	a902      	add	r1, sp, #8
    c3f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c3fa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c3fe:	f240 42e2 	movw	r2, #1250	; 0x4e2
    c402:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c406:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c408:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c40c:	f7f5 fbf6 	bl	1bfc <memcpy>
}
    c410:	b002      	add	sp, #8
    c412:	bd10      	pop	{r4, pc}

0000c414 <mayfly_sched_after_mstr_free_offset_get>:
{
    c414:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    c416:	4c05      	ldr	r4, [pc, #20]	; (c42c <mayfly_sched_after_mstr_free_offset_get+0x18>)
    c418:	4602      	mov	r2, r0
    c41a:	f504 7382 	add.w	r3, r4, #260	; 0x104
    c41e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    c422:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    c426:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    c428:	f7ff bf8a 	b.w	c340 <sched_after_mstr_free_offset_get>
    c42c:	200008dc 	.word	0x200008dc

0000c430 <terminate_ind_rx_enqueue>:
{
    c430:	b513      	push	{r0, r1, r4, lr}
    c432:	4603      	mov	r3, r0
    c434:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    c436:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    c43a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    c43e:	b970      	cbnz	r0, c45e <terminate_ind_rx_enqueue+0x2e>
    c440:	4b16      	ldr	r3, [pc, #88]	; (c49c <terminate_ind_rx_enqueue+0x6c>)
    c442:	9301      	str	r3, [sp, #4]
    c444:	9300      	str	r3, [sp, #0]
    c446:	4a16      	ldr	r2, [pc, #88]	; (c4a0 <terminate_ind_rx_enqueue+0x70>)
    c448:	4b16      	ldr	r3, [pc, #88]	; (c4a4 <terminate_ind_rx_enqueue+0x74>)
    c44a:	4917      	ldr	r1, [pc, #92]	; (c4a8 <terminate_ind_rx_enqueue+0x78>)
    c44c:	4817      	ldr	r0, [pc, #92]	; (c4ac <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    c44e:	f7f4 fd9d 	bl	f8c <printk>
    c452:	4040      	eors	r0, r0
    c454:	f380 8811 	msr	BASEPRI, r0
    c458:	f04f 0004 	mov.w	r0, #4
    c45c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    c45e:	8c1c      	ldrh	r4, [r3, #32]
    c460:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    c464:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c468:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    c46a:	4a11      	ldr	r2, [pc, #68]	; (c4b0 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c46c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    c470:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    c474:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    c478:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    c47c:	f7fb faed 	bl	7a5a <memq_enqueue>
	LL_ASSERT(link);
    c480:	b938      	cbnz	r0, c492 <terminate_ind_rx_enqueue+0x62>
    c482:	4b06      	ldr	r3, [pc, #24]	; (c49c <terminate_ind_rx_enqueue+0x6c>)
    c484:	9301      	str	r3, [sp, #4]
    c486:	9300      	str	r3, [sp, #0]
    c488:	4a05      	ldr	r2, [pc, #20]	; (c4a0 <terminate_ind_rx_enqueue+0x70>)
    c48a:	4b06      	ldr	r3, [pc, #24]	; (c4a4 <terminate_ind_rx_enqueue+0x74>)
    c48c:	4906      	ldr	r1, [pc, #24]	; (c4a8 <terminate_ind_rx_enqueue+0x78>)
    c48e:	4809      	ldr	r0, [pc, #36]	; (c4b4 <terminate_ind_rx_enqueue+0x84>)
    c490:	e7dd      	b.n	c44e <terminate_ind_rx_enqueue+0x1e>
}
    c492:	b002      	add	sp, #8
    c494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    c498:	f005 be60 	b.w	1215c <radio_event_callback>
    c49c:	00015af1 	.word	0x00015af1
    c4a0:	00016fae 	.word	0x00016fae
    c4a4:	00018f94 	.word	0x00018f94
    c4a8:	00016060 	.word	0x00016060
    c4ac:	00019b57 	.word	0x00019b57
    c4b0:	200008dc 	.word	0x200008dc
    c4b4:	00019044 	.word	0x00019044

0000c4b8 <prepare_normal_set>:
{
    c4b8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    c4ba:	6804      	ldr	r4, [r0, #0]
    c4bc:	2c00      	cmp	r4, #0
{
    c4be:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    c4c0:	da26      	bge.n	c510 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    c4c2:	6843      	ldr	r3, [r0, #4]
    c4c4:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    c4c6:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    c4c8:	429d      	cmp	r5, r3
    c4ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    c4ce:	bf34      	ite	cc
    c4d0:	1ae4      	subcc	r4, r4, r3
    c4d2:	1b64      	subcs	r4, r4, r5
		ticker_status =
    c4d4:	4b0f      	ldr	r3, [pc, #60]	; (c514 <prepare_normal_set+0x5c>)
    c4d6:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c4d8:	b2a4      	uxth	r4, r4
		ticker_status =
    c4da:	2300      	movs	r3, #0
    c4dc:	9304      	str	r3, [sp, #16]
    c4de:	9303      	str	r3, [sp, #12]
    c4e0:	9302      	str	r3, [sp, #8]
    c4e2:	4618      	mov	r0, r3
    c4e4:	9401      	str	r4, [sp, #4]
    c4e6:	9400      	str	r4, [sp, #0]
    c4e8:	f7fc f936 	bl	8758 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c4ec:	f030 0302 	bics.w	r3, r0, #2
    c4f0:	d00e      	beq.n	c510 <prepare_normal_set+0x58>
    c4f2:	4b09      	ldr	r3, [pc, #36]	; (c518 <prepare_normal_set+0x60>)
    c4f4:	9301      	str	r3, [sp, #4]
    c4f6:	9300      	str	r3, [sp, #0]
    c4f8:	4a08      	ldr	r2, [pc, #32]	; (c51c <prepare_normal_set+0x64>)
    c4fa:	4b09      	ldr	r3, [pc, #36]	; (c520 <prepare_normal_set+0x68>)
    c4fc:	4909      	ldr	r1, [pc, #36]	; (c524 <prepare_normal_set+0x6c>)
    c4fe:	480a      	ldr	r0, [pc, #40]	; (c528 <prepare_normal_set+0x70>)
    c500:	f7f4 fd44 	bl	f8c <printk>
    c504:	4040      	eors	r0, r0
    c506:	f380 8811 	msr	BASEPRI, r0
    c50a:	f04f 0004 	mov.w	r0, #4
    c50e:	df02      	svc	2
}
    c510:	b009      	add	sp, #36	; 0x24
    c512:	bd30      	pop	{r4, r5, pc}
    c514:	0000ac61 	.word	0x0000ac61
    c518:	00015af1 	.word	0x00015af1
    c51c:	00016fae 	.word	0x00016fae
    c520:	00018da1 	.word	0x00018da1
    c524:	00016060 	.word	0x00016060
    c528:	0001906a 	.word	0x0001906a
    c52c:	00000000 	.word	0x00000000

0000c530 <mayfly_xtal_stop_calc>:
{
    c530:	b570      	push	{r4, r5, r6, lr}
    c532:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c534:	2302      	movs	r3, #2
    c536:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    c538:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    c53a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c53c:	4e7e      	ldr	r6, [pc, #504]	; (c738 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    c53e:	4d7f      	ldr	r5, [pc, #508]	; (c73c <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    c540:	930a      	str	r3, [sp, #40]	; 0x28
{
    c542:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    c544:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    c546:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    c54a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c54c:	ab09      	add	r3, sp, #36	; 0x24
    c54e:	9302      	str	r3, [sp, #8]
    c550:	ab0c      	add	r3, sp, #48	; 0x30
    c552:	9300      	str	r3, [sp, #0]
    c554:	9601      	str	r6, [sp, #4]
    c556:	ab0d      	add	r3, sp, #52	; 0x34
    c558:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    c55c:	2101      	movs	r1, #1
    c55e:	2000      	movs	r0, #0
    c560:	f7fc f984 	bl	886c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    c564:	2802      	cmp	r0, #2
    c566:	d014      	beq.n	c592 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    c568:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c56a:	b1b3      	cbz	r3, c59a <mayfly_xtal_stop_calc+0x6a>
    c56c:	4b74      	ldr	r3, [pc, #464]	; (c740 <mayfly_xtal_stop_calc+0x210>)
    c56e:	9301      	str	r3, [sp, #4]
    c570:	9300      	str	r3, [sp, #0]
    c572:	4a74      	ldr	r2, [pc, #464]	; (c744 <mayfly_xtal_stop_calc+0x214>)
    c574:	4b74      	ldr	r3, [pc, #464]	; (c748 <mayfly_xtal_stop_calc+0x218>)
    c576:	4975      	ldr	r1, [pc, #468]	; (c74c <mayfly_xtal_stop_calc+0x21c>)
    c578:	4875      	ldr	r0, [pc, #468]	; (c750 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    c57a:	f7f4 fd07 	bl	f8c <printk>
    c57e:	4040      	eors	r0, r0
    c580:	f380 8811 	msr	BASEPRI, r0
    c584:	f04f 0004 	mov.w	r0, #4
    c588:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    c58a:	2101      	movs	r1, #1
    c58c:	2000      	movs	r0, #0
    c58e:	f7fc f9eb 	bl	8968 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    c592:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c594:	2b02      	cmp	r3, #2
    c596:	d0f8      	beq.n	c58a <mayfly_xtal_stop_calc+0x5a>
    c598:	e7e6      	b.n	c568 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    c59a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    c59e:	2bff      	cmp	r3, #255	; 0xff
    c5a0:	d004      	beq.n	c5ac <mayfly_xtal_stop_calc+0x7c>
    c5a2:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c5a6:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    c5a8:	4293      	cmp	r3, r2
    c5aa:	dacf      	bge.n	c54c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    c5ac:	1f5a      	subs	r2, r3, #5
    c5ae:	b2d2      	uxtb	r2, r2
    c5b0:	2af9      	cmp	r2, #249	; 0xf9
    c5b2:	d805      	bhi.n	c5c0 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    c5b4:	4a61      	ldr	r2, [pc, #388]	; (c73c <mayfly_xtal_stop_calc+0x20c>)
    c5b6:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c5ba:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    c5bc:	4293      	cmp	r3, r2
    c5be:	db05      	blt.n	c5cc <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    c5c0:	2100      	movs	r1, #0
    c5c2:	2001      	movs	r0, #1
    c5c4:	f7fe fe90 	bl	b2e8 <mayfly_xtal_retain>
}
    c5c8:	b00e      	add	sp, #56	; 0x38
    c5ca:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    c5cc:	a90a      	add	r1, sp, #40	; 0x28
    c5ce:	b2e0      	uxtb	r0, r4
    c5d0:	f7ff fbf4 	bl	bdbc <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    c5d4:	b938      	cbnz	r0, c5e6 <mayfly_xtal_stop_calc+0xb6>
    c5d6:	4b5a      	ldr	r3, [pc, #360]	; (c740 <mayfly_xtal_stop_calc+0x210>)
    c5d8:	9301      	str	r3, [sp, #4]
    c5da:	9300      	str	r3, [sp, #0]
    c5dc:	4a59      	ldr	r2, [pc, #356]	; (c744 <mayfly_xtal_stop_calc+0x214>)
    c5de:	4b5a      	ldr	r3, [pc, #360]	; (c748 <mayfly_xtal_stop_calc+0x218>)
    c5e0:	495a      	ldr	r1, [pc, #360]	; (c74c <mayfly_xtal_stop_calc+0x21c>)
    c5e2:	485c      	ldr	r0, [pc, #368]	; (c754 <mayfly_xtal_stop_calc+0x224>)
    c5e4:	e7c9      	b.n	c57a <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    c5e6:	6803      	ldr	r3, [r0, #0]
    c5e8:	6844      	ldr	r4, [r0, #4]
    c5ea:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    c5ec:	bfb8      	it	lt
    c5ee:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    c5f0:	429c      	cmp	r4, r3
    c5f2:	bf38      	it	cc
    c5f4:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    c5f6:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    c5f8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    c5fc:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    c5fe:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    c600:	f7ff fbdc 	bl	bdbc <hdr_conn_get>
	LL_ASSERT(hdr_next);
    c604:	4605      	mov	r5, r0
    c606:	b938      	cbnz	r0, c618 <mayfly_xtal_stop_calc+0xe8>
    c608:	4b4d      	ldr	r3, [pc, #308]	; (c740 <mayfly_xtal_stop_calc+0x210>)
    c60a:	9301      	str	r3, [sp, #4]
    c60c:	9300      	str	r3, [sp, #0]
    c60e:	4a4d      	ldr	r2, [pc, #308]	; (c744 <mayfly_xtal_stop_calc+0x214>)
    c610:	4b4d      	ldr	r3, [pc, #308]	; (c748 <mayfly_xtal_stop_calc+0x218>)
    c612:	494e      	ldr	r1, [pc, #312]	; (c74c <mayfly_xtal_stop_calc+0x21c>)
    c614:	4850      	ldr	r0, [pc, #320]	; (c758 <mayfly_xtal_stop_calc+0x228>)
    c616:	e7b0      	b.n	c57a <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    c618:	6886      	ldr	r6, [r0, #8]
    c61a:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    c61c:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    c61e:	429e      	cmp	r6, r3
    c620:	bf38      	it	cc
    c622:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    c624:	2a00      	cmp	r2, #0
    c626:	da05      	bge.n	c634 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    c628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    c62a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    c62e:	4433      	add	r3, r6
    c630:	1a9b      	subs	r3, r3, r2
    c632:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    c634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    c636:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    c63a:	4293      	cmp	r3, r2
    c63c:	d20a      	bcs.n	c654 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    c63e:	2100      	movs	r1, #0
    c640:	2001      	movs	r0, #1
    c642:	f7fe fe51 	bl	b2e8 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    c646:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c64a:	2101      	movs	r1, #1
    c64c:	4628      	mov	r0, r5
    c64e:	f7ff ff33 	bl	c4b8 <prepare_normal_set>
    c652:	e7b9      	b.n	c5c8 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    c654:	2101      	movs	r1, #1
    c656:	4608      	mov	r0, r1
    c658:	f7fe fe46 	bl	b2e8 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    c65c:	682b      	ldr	r3, [r5, #0]
    c65e:	2b00      	cmp	r3, #0
    c660:	db1c      	blt.n	c69c <mayfly_xtal_stop_calc+0x16c>
    c662:	429e      	cmp	r6, r3
    c664:	d21a      	bcs.n	c69c <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    c666:	1b9b      	subs	r3, r3, r6
			ticker_status =
    c668:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c66a:	b29b      	uxth	r3, r3
			ticker_status =
    c66c:	493b      	ldr	r1, [pc, #236]	; (c75c <mayfly_xtal_stop_calc+0x22c>)
    c66e:	9105      	str	r1, [sp, #20]
    c670:	9302      	str	r3, [sp, #8]
    c672:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c676:	9506      	str	r5, [sp, #24]
    c678:	9004      	str	r0, [sp, #16]
    c67a:	9003      	str	r0, [sp, #12]
    c67c:	9001      	str	r0, [sp, #4]
    c67e:	9000      	str	r0, [sp, #0]
    c680:	2101      	movs	r1, #1
    c682:	f7fc f869 	bl	8758 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c686:	f030 0302 	bics.w	r3, r0, #2
    c68a:	d007      	beq.n	c69c <mayfly_xtal_stop_calc+0x16c>
    c68c:	4b2c      	ldr	r3, [pc, #176]	; (c740 <mayfly_xtal_stop_calc+0x210>)
    c68e:	9301      	str	r3, [sp, #4]
    c690:	9300      	str	r3, [sp, #0]
    c692:	4a2c      	ldr	r2, [pc, #176]	; (c744 <mayfly_xtal_stop_calc+0x214>)
    c694:	4b2c      	ldr	r3, [pc, #176]	; (c748 <mayfly_xtal_stop_calc+0x218>)
    c696:	492d      	ldr	r1, [pc, #180]	; (c74c <mayfly_xtal_stop_calc+0x21c>)
    c698:	4831      	ldr	r0, [pc, #196]	; (c760 <mayfly_xtal_stop_calc+0x230>)
    c69a:	e76e      	b.n	c57a <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    c69c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c69e:	2e00      	cmp	r6, #0
    c6a0:	d092      	beq.n	c5c8 <mayfly_xtal_stop_calc+0x98>
    c6a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c6a4:	2d00      	cmp	r5, #0
    c6a6:	d08f      	beq.n	c5c8 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    c6a8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    c6aa:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    c6ac:	429a      	cmp	r2, r3
    c6ae:	d18b      	bne.n	c5c8 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    c6b0:	482c      	ldr	r0, [pc, #176]	; (c764 <mayfly_xtal_stop_calc+0x234>)
    c6b2:	b292      	uxth	r2, r2
    c6b4:	fba2 0100 	umull	r0, r1, r2, r0
    c6b8:	f240 1323 	movw	r3, #291	; 0x123
    c6bc:	fb03 1102 	mla	r1, r3, r2, r1
    c6c0:	a31b      	add	r3, pc, #108	; (adr r3, c730 <mayfly_xtal_stop_calc+0x200>)
    c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6c6:	f7f3 fda5 	bl	214 <__aeabi_uldivmod>
    c6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c6cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    c6d0:	2200      	movs	r2, #0
    c6d2:	4298      	cmp	r0, r3
    c6d4:	d318      	bcc.n	c708 <mayfly_xtal_stop_calc+0x1d8>
    c6d6:	b102      	cbz	r2, c6da <mayfly_xtal_stop_calc+0x1aa>
    c6d8:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    c6da:	f996 201d 	ldrsb.w	r2, [r6, #29]
    c6de:	2a00      	cmp	r2, #0
    c6e0:	f995 201d 	ldrsb.w	r2, [r5, #29]
    c6e4:	da13      	bge.n	c70e <mayfly_xtal_stop_calc+0x1de>
    c6e6:	2a00      	cmp	r2, #0
    c6e8:	f6ff af6e 	blt.w	c5c8 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    c6ec:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    c6ee:	429c      	cmp	r4, r3
    c6f0:	f67f af6a 	bls.w	c5c8 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    c6f4:	4630      	mov	r0, r6
    c6f6:	f7fe fafd 	bl	acf4 <conn_update_req>
				if (status == 2) {
    c6fa:	2802      	cmp	r0, #2
    c6fc:	f47f af64 	bne.w	c5c8 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    c700:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    c702:	f7fe faf7 	bl	acf4 <conn_update_req>
    c706:	e75f      	b.n	c5c8 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    c708:	1a1b      	subs	r3, r3, r0
    c70a:	2201      	movs	r2, #1
    c70c:	e7e1      	b.n	c6d2 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    c70e:	2a00      	cmp	r2, #0
    c710:	f6bf af5a 	bge.w	c5c8 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    c714:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    c716:	429c      	cmp	r4, r3
    c718:	f67f af56 	bls.w	c5c8 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    c71c:	4628      	mov	r0, r5
    c71e:	f7fe fae9 	bl	acf4 <conn_update_req>
				if (status == 2) {
    c722:	2802      	cmp	r0, #2
    c724:	f47f af50 	bne.w	c5c8 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    c728:	980a      	ldr	r0, [sp, #40]	; 0x28
    c72a:	e7ea      	b.n	c702 <mayfly_xtal_stop_calc+0x1d2>
    c72c:	f3af 8000 	nop.w
    c730:	1afd498d 	.word	0x1afd498d
    c734:	00000007 	.word	0x00000007
    c738:	0000ac51 	.word	0x0000ac51
    c73c:	200008dc 	.word	0x200008dc
    c740:	00015af1 	.word	0x00015af1
    c744:	00016fae 	.word	0x00016fae
    c748:	00018db4 	.word	0x00018db4
    c74c:	00016060 	.word	0x00016060
    c750:	00019b2a 	.word	0x00019b2a
    c754:	000197ce 	.word	0x000197ce
    c758:	000197f8 	.word	0x000197f8
    c75c:	0000ac55 	.word	0x0000ac55
    c760:	0001906a 	.word	0x0001906a
    c764:	09ce5400 	.word	0x09ce5400

0000c768 <preempt_calc>:
{
    c768:	b570      	push	{r4, r5, r6, lr}
    c76a:	4614      	mov	r4, r2
    c76c:	460e      	mov	r6, r1
    c76e:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    c770:	f7fc f910 	bl	8994 <ticker_ticks_now_get>
	u32_t diff =
    c774:	4621      	mov	r1, r4
    c776:	f7fc f90f 	bl	8998 <ticker_ticks_diff_get>
	diff += 3;
    c77a:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    c77c:	2c09      	cmp	r4, #9
    c77e:	d90f      	bls.n	c7a0 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    c780:	2100      	movs	r1, #0
    c782:	4608      	mov	r0, r1
    c784:	f7fe fdb0 	bl	b2e8 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    c788:	4632      	mov	r2, r6
    c78a:	2100      	movs	r1, #0
    c78c:	4628      	mov	r0, r5
    c78e:	f7ff fe93 	bl	c4b8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    c792:	68ab      	ldr	r3, [r5, #8]
    c794:	441c      	add	r4, r3
		if (diff <
    c796:	2c26      	cmp	r4, #38	; 0x26
    c798:	d800      	bhi.n	c79c <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    c79a:	60ac      	str	r4, [r5, #8]
		return 1;
    c79c:	2001      	movs	r0, #1
}
    c79e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    c7a0:	2000      	movs	r0, #0
    c7a2:	bd70      	pop	{r4, r5, r6, pc}

0000c7a4 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    c7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    c7a6:	ad02      	add	r5, sp, #8
    c7a8:	4b10      	ldr	r3, [pc, #64]	; (c7ec <adv_scan_configure.constprop.30+0x48>)
    c7aa:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    c7ae:	4604      	mov	r4, r0
	radio_reset();
    c7b0:	f006 fdf6 	bl	133a0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    c7b4:	2000      	movs	r0, #0
    c7b6:	f006 fe1d 	bl	133f4 <radio_tx_power_set>
	radio_isr_set(isr);
    c7ba:	480d      	ldr	r0, [pc, #52]	; (c7f0 <adv_scan_configure.constprop.30+0x4c>)
    c7bc:	f006 fdba 	bl	13334 <radio_isr_set>
	radio_phy_set(phy, flags);
    c7c0:	2101      	movs	r1, #1
    c7c2:	4620      	mov	r0, r4
    c7c4:	f006 fe06 	bl	133d4 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    c7c8:	4628      	mov	r0, r5
    c7ca:	f006 fe31 	bl	13430 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    c7ce:	0062      	lsls	r2, r4, #1
    c7d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    c7d4:	2125      	movs	r1, #37	; 0x25
    c7d6:	2008      	movs	r0, #8
    c7d8:	f006 fe42 	bl	13460 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c7dc:	4905      	ldr	r1, [pc, #20]	; (c7f4 <adv_scan_configure.constprop.30+0x50>)
    c7de:	f240 605b 	movw	r0, #1627	; 0x65b
    c7e2:	f006 fecd 	bl	13580 <radio_crc_configure>
}
    c7e6:	b003      	add	sp, #12
    c7e8:	bd30      	pop	{r4, r5, pc}
    c7ea:	bf00      	nop
    c7ec:	8e89bed6 	.word	0x8e89bed6
    c7f0:	0000f751 	.word	0x0000f751
    c7f4:	00555555 	.word	0x00555555

0000c7f8 <event_scan>:
{
    c7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    c7fa:	4b62      	ldr	r3, [pc, #392]	; (c984 <event_scan+0x18c>)
    c7fc:	7cda      	ldrb	r2, [r3, #19]
{
    c7fe:	b08d      	sub	sp, #52	; 0x34
    c800:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    c802:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    c806:	461c      	mov	r4, r3
    c808:	b172      	cbz	r2, c828 <event_scan+0x30>
    c80a:	4b5f      	ldr	r3, [pc, #380]	; (c988 <event_scan+0x190>)
    c80c:	9301      	str	r3, [sp, #4]
    c80e:	9300      	str	r3, [sp, #0]
    c810:	4a5e      	ldr	r2, [pc, #376]	; (c98c <event_scan+0x194>)
    c812:	4b5f      	ldr	r3, [pc, #380]	; (c990 <event_scan+0x198>)
    c814:	495f      	ldr	r1, [pc, #380]	; (c994 <event_scan+0x19c>)
    c816:	4860      	ldr	r0, [pc, #384]	; (c998 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    c818:	f7f4 fbb8 	bl	f8c <printk>
    c81c:	4040      	eors	r0, r0
    c81e:	f380 8811 	msr	BASEPRI, r0
    c822:	f04f 0004 	mov.w	r0, #4
    c826:	df02      	svc	2
    c828:	7c1b      	ldrb	r3, [r3, #16]
    c82a:	b2db      	uxtb	r3, r3
    c82c:	2b06      	cmp	r3, #6
    c82e:	d007      	beq.n	c840 <event_scan+0x48>
    c830:	4b55      	ldr	r3, [pc, #340]	; (c988 <event_scan+0x190>)
    c832:	9301      	str	r3, [sp, #4]
    c834:	9300      	str	r3, [sp, #0]
    c836:	4a55      	ldr	r2, [pc, #340]	; (c98c <event_scan+0x194>)
    c838:	4b55      	ldr	r3, [pc, #340]	; (c990 <event_scan+0x198>)
    c83a:	4956      	ldr	r1, [pc, #344]	; (c994 <event_scan+0x19c>)
    c83c:	4857      	ldr	r0, [pc, #348]	; (c99c <event_scan+0x1a4>)
    c83e:	e7eb      	b.n	c818 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    c840:	2202      	movs	r2, #2
    c842:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    c844:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    c846:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c848:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    c84c:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    c84e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    c852:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    c854:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c858:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    c85c:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    c85e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c862:	f7ff ff9f 	bl	c7a4 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    c866:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    c86a:	f3c3 0081 	ubfx	r0, r3, #2, #2
    c86e:	1c42      	adds	r2, r0, #1
    c870:	f362 0383 	bfi	r3, r2, #2, #2
    c874:	3025      	adds	r0, #37	; 0x25
    c876:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    c87a:	f7ff fcc3 	bl	c204 <chan_set>
	if (_radio.scanner.chan == 3) {
    c87e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    c882:	f003 020c 	and.w	r2, r3, #12
    c886:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    c888:	bf08      	it	eq
    c88a:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    c88e:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    c892:	bf08      	it	eq
    c894:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    c898:	f006 ff2c 	bl	136f4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    c89c:	2300      	movs	r3, #0
    c89e:	4619      	mov	r1, r3
    c8a0:	461a      	mov	r2, r3
    c8a2:	4618      	mov	r0, r3
    c8a4:	f006 fe96 	bl	135d4 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c8a8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c8ac:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c8b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c8b4:	3008      	adds	r0, #8
    c8b6:	f006 fe01 	bl	134bc <radio_pkt_rx_set>
	radio_rssi_measure();
    c8ba:	f006 fea3 	bl	13604 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    c8be:	f006 f909 	bl	12ad4 <ctrl_rl_enabled>
    c8c2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    c8c6:	b340      	cbz	r0, c91a <event_scan+0x122>
		struct ll_filter *filter =
    c8c8:	f3c3 1000 	ubfx	r0, r3, #4, #1
    c8cc:	f005 ff22 	bl	12714 <ctrl_filter_get>
    c8d0:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    c8d2:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    c8d6:	f005 fe4d 	bl	12574 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    c8da:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    c8dc:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    c8de:	1cb2      	adds	r2, r6, #2
    c8e0:	7830      	ldrb	r0, [r6, #0]
    c8e2:	f006 feb1 	bl	13648 <radio_filter_configure>
		radio_ar_configure(count, irks);
    c8e6:	4639      	mov	r1, r7
    c8e8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c8ec:	f007 f886 	bl	139fc <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c8f0:	68e2      	ldr	r2, [r4, #12]
    c8f2:	f105 0109 	add.w	r1, r5, #9
    c8f6:	2000      	movs	r0, #0
    c8f8:	f006 ff08 	bl	1370c <radio_tmr_start>
	radio_tmr_end_capture();
    c8fc:	f006 ffd6 	bl	138ac <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    c900:	2106      	movs	r1, #6
    c902:	462a      	mov	r2, r5
    c904:	4826      	ldr	r0, [pc, #152]	; (c9a0 <event_scan+0x1a8>)
    c906:	f7ff ff2f 	bl	c768 <preempt_calc>
    c90a:	4601      	mov	r1, r0
    c90c:	b188      	cbz	r0, c932 <event_scan+0x13a>
		_radio.state = STATE_STOP;
    c90e:	2304      	movs	r3, #4
    c910:	7523      	strb	r3, [r4, #20]
		radio_disable();
    c912:	f006 fdf9 	bl	13508 <radio_disable>
}
    c916:	b00d      	add	sp, #52	; 0x34
    c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    c91a:	f013 0f30 	tst.w	r3, #48	; 0x30
    c91e:	d0e7      	beq.n	c8f0 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    c920:	2001      	movs	r0, #1
    c922:	f005 fef7 	bl	12714 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    c926:	1c82      	adds	r2, r0, #2
    c928:	7841      	ldrb	r1, [r0, #1]
    c92a:	7800      	ldrb	r0, [r0, #0]
    c92c:	f006 fe8c 	bl	13648 <radio_filter_configure>
    c930:	e7de      	b.n	c8f0 <event_scan+0xf8>
		ret = ticker_start(
    c932:	f641 1336 	movw	r3, #6454	; 0x1936
    c936:	9308      	str	r3, [sp, #32]
    c938:	4b1a      	ldr	r3, [pc, #104]	; (c9a4 <event_scan+0x1ac>)
    c93a:	9307      	str	r3, [sp, #28]
    c93c:	2204      	movs	r2, #4
    c93e:	4b1a      	ldr	r3, [pc, #104]	; (c9a8 <event_scan+0x1b0>)
    c940:	9206      	str	r2, [sp, #24]
    c942:	9305      	str	r3, [sp, #20]
    c944:	9004      	str	r0, [sp, #16]
    c946:	9003      	str	r0, [sp, #12]
    c948:	9002      	str	r0, [sp, #8]
    c94a:	9001      	str	r0, [sp, #4]
    c94c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    c950:	3309      	adds	r3, #9
    c952:	9300      	str	r3, [sp, #0]
    c954:	462b      	mov	r3, r5
    c956:	f7fb feaf 	bl	86b8 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c95a:	f030 0302 	bics.w	r3, r0, #2
    c95e:	d007      	beq.n	c970 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c960:	4b09      	ldr	r3, [pc, #36]	; (c988 <event_scan+0x190>)
    c962:	9301      	str	r3, [sp, #4]
    c964:	9300      	str	r3, [sp, #0]
    c966:	4a09      	ldr	r2, [pc, #36]	; (c98c <event_scan+0x194>)
    c968:	4b09      	ldr	r3, [pc, #36]	; (c990 <event_scan+0x198>)
    c96a:	490a      	ldr	r1, [pc, #40]	; (c994 <event_scan+0x19c>)
    c96c:	480f      	ldr	r0, [pc, #60]	; (c9ac <event_scan+0x1b4>)
    c96e:	e753      	b.n	c818 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c970:	4619      	mov	r1, r3
    c972:	4618      	mov	r0, r3
    c974:	4a0e      	ldr	r2, [pc, #56]	; (c9b0 <event_scan+0x1b8>)
    c976:	f7fb ffbb 	bl	88f0 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c97a:	f030 0302 	bics.w	r3, r0, #2
    c97e:	d1ef      	bne.n	c960 <event_scan+0x168>
    c980:	e7c9      	b.n	c916 <event_scan+0x11e>
    c982:	bf00      	nop
    c984:	200008dc 	.word	0x200008dc
    c988:	00015af1 	.word	0x00015af1
    c98c:	00016fae 	.word	0x00016fae
    c990:	00018e83 	.word	0x00018e83
    c994:	00016060 	.word	0x00016060
    c998:	00019186 	.word	0x00019186
    c99c:	000191c0 	.word	0x000191c0
    c9a0:	200009ac 	.word	0x200009ac
    c9a4:	0000bbbd 	.word	0x0000bbbd
    c9a8:	0000be2d 	.word	0x0000be2d
    c9ac:	000191ff 	.word	0x000191ff
    c9b0:	0000bda5 	.word	0x0000bda5

0000c9b4 <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    c9b4:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    c9b6:	4b05      	ldr	r3, [pc, #20]	; (c9cc <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c9b8:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    c9ba:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c9bc:	4611      	mov	r1, r2
    c9be:	4610      	mov	r0, r2
    c9c0:	f7fb f8bc 	bl	7b3c <mayfly_enqueue>
	LL_ASSERT(!retval);
    c9c4:	b108      	cbz	r0, c9ca <event_stop.constprop.31+0x16>
    c9c6:	f7ff fa17 	bl	bdf8 <event_stop.part.10>
    c9ca:	bd08      	pop	{r3, pc}
    c9cc:	20003e40 	.word	0x20003e40

0000c9d0 <event_common_prepare>:
{
    c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    c9d4:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    c9d6:	681d      	ldr	r5, [r3, #0]
{
    c9d8:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c9da:	2c00      	cmp	r4, #0
{
    c9dc:	4681      	mov	r9, r0
    c9de:	910b      	str	r1, [sp, #44]	; 0x2c
    c9e0:	4690      	mov	r8, r2
    c9e2:	469b      	mov	fp, r3
    c9e4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c9e8:	da03      	bge.n	c9f2 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    c9ea:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c9ec:	42ac      	cmp	r4, r5
    c9ee:	bf38      	it	cc
    c9f0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    c9f2:	42ac      	cmp	r4, r5
    c9f4:	4f56      	ldr	r7, [pc, #344]	; (cb50 <event_common_prepare+0x180>)
    c9f6:	d924      	bls.n	ca42 <event_common_prepare+0x72>
		ticker_status =
    c9f8:	f241 5374 	movw	r3, #5492	; 0x1574
    c9fc:	9308      	str	r3, [sp, #32]
    c9fe:	4b55      	ldr	r3, [pc, #340]	; (cb54 <event_common_prepare+0x184>)
    ca00:	9305      	str	r3, [sp, #20]
    ca02:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    ca04:	1b63      	subs	r3, r4, r5
		ticker_status =
    ca06:	9300      	str	r3, [sp, #0]
    ca08:	9707      	str	r7, [sp, #28]
    ca0a:	464b      	mov	r3, r9
    ca0c:	9106      	str	r1, [sp, #24]
    ca0e:	9104      	str	r1, [sp, #16]
    ca10:	9103      	str	r1, [sp, #12]
    ca12:	9102      	str	r1, [sp, #8]
    ca14:	9101      	str	r1, [sp, #4]
    ca16:	2201      	movs	r2, #1
    ca18:	4608      	mov	r0, r1
    ca1a:	f7fb fe4d 	bl	86b8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca1e:	f030 0302 	bics.w	r3, r0, #2
    ca22:	d034      	beq.n	ca8e <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca24:	4b4c      	ldr	r3, [pc, #304]	; (cb58 <event_common_prepare+0x188>)
    ca26:	9301      	str	r3, [sp, #4]
    ca28:	9300      	str	r3, [sp, #0]
    ca2a:	4a4c      	ldr	r2, [pc, #304]	; (cb5c <event_common_prepare+0x18c>)
    ca2c:	4b4c      	ldr	r3, [pc, #304]	; (cb60 <event_common_prepare+0x190>)
    ca2e:	494d      	ldr	r1, [pc, #308]	; (cb64 <event_common_prepare+0x194>)
    ca30:	484d      	ldr	r0, [pc, #308]	; (cb68 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    ca32:	f7f4 faab 	bl	f8c <printk>
    ca36:	4040      	eors	r0, r0
    ca38:	f380 8811 	msr	BASEPRI, r0
    ca3c:	f04f 0004 	mov.w	r0, #4
    ca40:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    ca42:	d21d      	bcs.n	ca80 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    ca44:	2300      	movs	r3, #0
    ca46:	461a      	mov	r2, r3
    ca48:	4619      	mov	r1, r3
    ca4a:	4618      	mov	r0, r3
    ca4c:	f7ff f9fe 	bl	be4c <event_active>
		ticker_status =
    ca50:	f241 5389 	movw	r3, #5513	; 0x1589
    ca54:	2100      	movs	r1, #0
    ca56:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    ca58:	1b2c      	subs	r4, r5, r4
		ticker_status =
    ca5a:	4b44      	ldr	r3, [pc, #272]	; (cb6c <event_common_prepare+0x19c>)
    ca5c:	9305      	str	r3, [sp, #20]
    ca5e:	9707      	str	r7, [sp, #28]
    ca60:	464b      	mov	r3, r9
    ca62:	9106      	str	r1, [sp, #24]
    ca64:	9104      	str	r1, [sp, #16]
    ca66:	9103      	str	r1, [sp, #12]
    ca68:	9102      	str	r1, [sp, #8]
    ca6a:	9101      	str	r1, [sp, #4]
    ca6c:	9400      	str	r4, [sp, #0]
    ca6e:	2201      	movs	r2, #1
    ca70:	4608      	mov	r0, r1
    ca72:	f7fb fe21 	bl	86b8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca76:	f030 0302 	bics.w	r3, r0, #2
    ca7a:	d1d3      	bne.n	ca24 <event_common_prepare+0x54>
    ca7c:	462c      	mov	r4, r5
    ca7e:	e00b      	b.n	ca98 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    ca80:	2300      	movs	r3, #0
    ca82:	461a      	mov	r2, r3
    ca84:	4619      	mov	r1, r3
    ca86:	4618      	mov	r0, r3
    ca88:	f7ff f9e0 	bl	be4c <event_active>
		event_xtal(0, 0, 0, NULL);
    ca8c:	2300      	movs	r3, #0
    ca8e:	461a      	mov	r2, r3
    ca90:	4619      	mov	r1, r3
    ca92:	4618      	mov	r0, r3
    ca94:	f7ff fa00 	bl	be98 <event_xtal>
	_radio.remainder_anchor = remainder;
    ca98:	4e35      	ldr	r6, [pc, #212]	; (cb70 <event_common_prepare+0x1a0>)
    ca9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca9c:	60f3      	str	r3, [r6, #12]
	ticker_status =
    ca9e:	f241 53a1 	movw	r3, #5537	; 0x15a1
    caa2:	9308      	str	r3, [sp, #32]
    caa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    caa6:	9306      	str	r3, [sp, #24]
    caa8:	2200      	movs	r2, #0
    caaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    caac:	9305      	str	r3, [sp, #20]
    caae:	9707      	str	r7, [sp, #28]
    cab0:	464b      	mov	r3, r9
    cab2:	9204      	str	r2, [sp, #16]
    cab4:	9203      	str	r2, [sp, #12]
    cab6:	9202      	str	r2, [sp, #8]
    cab8:	9201      	str	r2, [sp, #4]
    caba:	9400      	str	r4, [sp, #0]
    cabc:	4611      	mov	r1, r2
    cabe:	4610      	mov	r0, r2
    cac0:	f7fb fdfa 	bl	86b8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cac4:	f030 0302 	bics.w	r3, r0, #2
    cac8:	d1ac      	bne.n	ca24 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    caca:	2005      	movs	r0, #5
    cacc:	f7ff ff72 	bl	c9b4 <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    cad0:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    cad4:	429d      	cmp	r5, r3
    cad6:	d023      	beq.n	cb20 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    cad8:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    cadc:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    cae0:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    cae2:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    cae4:	bfbc      	itt	lt
    cae6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    caea:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    caee:	f8d8 2000 	ldr.w	r2, [r8]
    caf2:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    caf6:	428a      	cmp	r2, r1
    caf8:	bf38      	it	cc
    cafa:	460a      	movcc	r2, r1
		ticker_status =
    cafc:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb00:	b2a3      	uxth	r3, r4
    cb02:	b292      	uxth	r2, r2
		ticker_status =
    cb04:	9106      	str	r1, [sp, #24]
    cb06:	2100      	movs	r1, #0
    cb08:	9302      	str	r3, [sp, #8]
    cb0a:	9201      	str	r2, [sp, #4]
    cb0c:	9200      	str	r2, [sp, #0]
    cb0e:	9104      	str	r1, [sp, #16]
    cb10:	9103      	str	r1, [sp, #12]
    cb12:	4652      	mov	r2, sl
    cb14:	4608      	mov	r0, r1
    cb16:	f7fb fe1f 	bl	8758 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cb1a:	f030 0302 	bics.w	r3, r0, #2
    cb1e:	d181      	bne.n	ca24 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    cb20:	20ff      	movs	r0, #255	; 0xff
    cb22:	f7ff fa85 	bl	c030 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    cb26:	4b13      	ldr	r3, [pc, #76]	; (cb74 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cb28:	2201      	movs	r2, #1
    cb2a:	4611      	mov	r1, r2
    cb2c:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    cb2e:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cb32:	f7fb f803 	bl	7b3c <mayfly_enqueue>
		LL_ASSERT(!retval);
    cb36:	b138      	cbz	r0, cb48 <event_common_prepare+0x178>
    cb38:	4b07      	ldr	r3, [pc, #28]	; (cb58 <event_common_prepare+0x188>)
    cb3a:	9301      	str	r3, [sp, #4]
    cb3c:	9300      	str	r3, [sp, #0]
    cb3e:	4a07      	ldr	r2, [pc, #28]	; (cb5c <event_common_prepare+0x18c>)
    cb40:	4b07      	ldr	r3, [pc, #28]	; (cb60 <event_common_prepare+0x190>)
    cb42:	4908      	ldr	r1, [pc, #32]	; (cb64 <event_common_prepare+0x194>)
    cb44:	480c      	ldr	r0, [pc, #48]	; (cb78 <event_common_prepare+0x1a8>)
    cb46:	e774      	b.n	ca32 <event_common_prepare+0x62>
}
    cb48:	b00d      	add	sp, #52	; 0x34
    cb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb4e:	bf00      	nop
    cb50:	0000bbbd 	.word	0x0000bbbd
    cb54:	0000be4d 	.word	0x0000be4d
    cb58:	00015af1 	.word	0x00015af1
    cb5c:	00016fae 	.word	0x00016fae
    cb60:	00018e42 	.word	0x00018e42
    cb64:	00016060 	.word	0x00016060
    cb68:	0001906a 	.word	0x0001906a
    cb6c:	0000be99 	.word	0x0000be99
    cb70:	200008dc 	.word	0x200008dc
    cb74:	20003ee0 	.word	0x20003ee0
    cb78:	000197a5 	.word	0x000197a5

0000cb7c <event_scan_prepare>:
{
    cb7c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    cb7e:	4c25      	ldr	r4, [pc, #148]	; (cc14 <event_scan_prepare+0x98>)
    cb80:	7c23      	ldrb	r3, [r4, #16]
{
    cb82:	b085      	sub	sp, #20
    cb84:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    cb86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    cb8a:	b173      	cbz	r3, cbaa <event_scan_prepare+0x2e>
    cb8c:	4b22      	ldr	r3, [pc, #136]	; (cc18 <event_scan_prepare+0x9c>)
    cb8e:	9301      	str	r3, [sp, #4]
    cb90:	9300      	str	r3, [sp, #0]
    cb92:	4a22      	ldr	r2, [pc, #136]	; (cc1c <event_scan_prepare+0xa0>)
    cb94:	4b22      	ldr	r3, [pc, #136]	; (cc20 <event_scan_prepare+0xa4>)
    cb96:	4923      	ldr	r1, [pc, #140]	; (cc24 <event_scan_prepare+0xa8>)
    cb98:	4823      	ldr	r0, [pc, #140]	; (cc28 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    cb9a:	f7f4 f9f7 	bl	f8c <printk>
    cb9e:	4040      	eors	r0, r0
    cba0:	f380 8811 	msr	BASEPRI, r0
    cba4:	f04f 0004 	mov.w	r0, #4
    cba8:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    cbaa:	2306      	movs	r3, #6
    cbac:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    cbae:	9203      	str	r2, [sp, #12]
    cbb0:	9301      	str	r3, [sp, #4]
    cbb2:	4a1e      	ldr	r2, [pc, #120]	; (cc2c <event_scan_prepare+0xb0>)
    cbb4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    cbb8:	9202      	str	r2, [sp, #8]
    cbba:	9300      	str	r3, [sp, #0]
    cbbc:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    cbc0:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    cbc4:	f7ff ff04 	bl	c9d0 <event_common_prepare>
	if (_radio.scanner.conn) {
    cbc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    cbcc:	b303      	cbz	r3, cc10 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    cbce:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	da0c      	bge.n	cbf0 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    cbd6:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    cbda:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    cbde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    cbe2:	4291      	cmp	r1, r2
    cbe4:	bf2c      	ite	cs
    cbe6:	ebc3 0301 	rsbcs	r3, r3, r1
    cbea:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    cbee:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    cbf0:	4b0f      	ldr	r3, [pc, #60]	; (cc30 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cbf2:	2201      	movs	r2, #1
    cbf4:	4611      	mov	r1, r2
    cbf6:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    cbf8:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cbfa:	f7fa ff9f 	bl	7b3c <mayfly_enqueue>
		LL_ASSERT(!retval);
    cbfe:	b138      	cbz	r0, cc10 <event_scan_prepare+0x94>
    cc00:	4b05      	ldr	r3, [pc, #20]	; (cc18 <event_scan_prepare+0x9c>)
    cc02:	9301      	str	r3, [sp, #4]
    cc04:	9300      	str	r3, [sp, #0]
    cc06:	4a05      	ldr	r2, [pc, #20]	; (cc1c <event_scan_prepare+0xa0>)
    cc08:	4b05      	ldr	r3, [pc, #20]	; (cc20 <event_scan_prepare+0xa4>)
    cc0a:	4906      	ldr	r1, [pc, #24]	; (cc24 <event_scan_prepare+0xa8>)
    cc0c:	4809      	ldr	r0, [pc, #36]	; (cc34 <event_scan_prepare+0xb8>)
    cc0e:	e7c4      	b.n	cb9a <event_scan_prepare+0x1e>
}
    cc10:	b005      	add	sp, #20
    cc12:	bd30      	pop	{r4, r5, pc}
    cc14:	200008dc 	.word	0x200008dc
    cc18:	00015af1 	.word	0x00015af1
    cc1c:	00016fae 	.word	0x00016fae
    cc20:	00018e70 	.word	0x00018e70
    cc24:	00016060 	.word	0x00016060
    cc28:	000198e1 	.word	0x000198e1
    cc2c:	0000c7f9 	.word	0x0000c7f9
    cc30:	20003e60 	.word	0x20003e60
    cc34:	000197a5 	.word	0x000197a5

0000cc38 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    cc38:	4b02      	ldr	r3, [pc, #8]	; (cc44 <mayfly_xtal_start+0xc>)
    cc3a:	6818      	ldr	r0, [r3, #0]
    cc3c:	6843      	ldr	r3, [r0, #4]
    cc3e:	2100      	movs	r1, #0
    cc40:	681b      	ldr	r3, [r3, #0]
    cc42:	4718      	bx	r3
    cc44:	200008dc 	.word	0x200008dc

0000cc48 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    cc48:	4b02      	ldr	r3, [pc, #8]	; (cc54 <mayfly_xtal_stop+0xc>)
    cc4a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    cc4c:	6843      	ldr	r3, [r0, #4]
    cc4e:	2100      	movs	r1, #0
    cc50:	685b      	ldr	r3, [r3, #4]
    cc52:	4718      	bx	r3
    cc54:	200008dc 	.word	0x200008dc

0000cc58 <chan_sel_2>:
{
    cc58:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    cc5a:	4048      	eors	r0, r1
    cc5c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    cc5e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    cc62:	2608      	movs	r6, #8
	o = 0;
    cc64:	2400      	movs	r4, #0
		o |= (i & 1);
    cc66:	f00e 0501 	and.w	r5, lr, #1
    cc6a:	3e01      	subs	r6, #1
    cc6c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    cc70:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    cc74:	b2ec      	uxtb	r4, r5
		i >>= 1;
    cc76:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    cc7a:	d1f4      	bne.n	cc66 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    cc7c:	0225      	lsls	r5, r4, #8
    cc7e:	b22d      	sxth	r5, r5
    cc80:	b2c0      	uxtb	r0, r0
    cc82:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    cc86:	4634      	mov	r4, r6
		o |= (i & 1);
    cc88:	f000 0601 	and.w	r6, r0, #1
    cc8c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    cc90:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    cc94:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    cc98:	b2e4      	uxtb	r4, r4
		i >>= 1;
    cc9a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    cc9e:	d1f3      	bne.n	cc88 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    cca0:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    cca2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    cca6:	3f01      	subs	r7, #1
    cca8:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    ccaa:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    ccae:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    ccb0:	d1d5      	bne.n	cc5e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    ccb2:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    ccb4:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    ccb6:	fbb1 f0f4 	udiv	r0, r1, r4
    ccba:	fb04 1010 	mls	r0, r4, r0, r1
    ccbe:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ccc0:	08c4      	lsrs	r4, r0, #3
    ccc2:	f000 0507 	and.w	r5, r0, #7
    ccc6:	5d14      	ldrb	r4, [r2, r4]
    ccc8:	412c      	asrs	r4, r5
    ccca:	07e4      	lsls	r4, r4, #31
    cccc:	d407      	bmi.n	ccde <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    ccce:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    ccd0:	f3c1 4107 	ubfx	r1, r1, #16, #8
    ccd4:	4610      	mov	r0, r2
}
    ccd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    ccda:	f7fd bfc7 	b.w	ac6c <chan_sel_remap>
}
    ccde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cce0 <ctrl_tx_enqueue>:
{
    cce0:	b510      	push	{r4, lr}
	    !conn->empty &&
    cce2:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    cce6:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    ccea:	f014 0f80 	tst.w	r4, #128	; 0x80
    ccee:	d118      	bne.n	cd22 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    ccf0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    ccf4:	b1ab      	cbz	r3, cd22 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    ccf6:	0724      	lsls	r4, r4, #28
    ccf8:	d413      	bmi.n	cd22 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    ccfa:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    ccfe:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    cd00:	bf04      	itt	eq
    cd02:	681c      	ldreq	r4, [r3, #0]
    cd04:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    cd08:	b992      	cbnz	r2, cd30 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    cd0a:	681a      	ldr	r2, [r3, #0]
    cd0c:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    cd0e:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    cd10:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    cd14:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    cd18:	680b      	ldr	r3, [r1, #0]
    cd1a:	b90b      	cbnz	r3, cd20 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    cd1c:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    cd20:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    cd22:	b92a      	cbnz	r2, cd30 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    cd24:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    cd28:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    cd2a:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    cd2e:	e7ef      	b.n	cd10 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    cd30:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    cd34:	681a      	ldr	r2, [r3, #0]
    cd36:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    cd38:	6019      	str	r1, [r3, #0]
    cd3a:	e7eb      	b.n	cd14 <ctrl_tx_enqueue+0x34>

0000cd3c <ctrl_tx_sec_enqueue>:
{
    cd3c:	b410      	push	{r4}
	if (conn->pause_tx) {
    cd3e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    cd42:	0724      	lsls	r4, r4, #28
{
    cd44:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    cd46:	d50f      	bpl.n	cd68 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    cd48:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    cd4c:	b931      	cbnz	r1, cd5c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    cd4e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    cd52:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    cd54:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    cd58:	bc10      	pop	{r4}
    cd5a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    cd5c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    cd60:	6819      	ldr	r1, [r3, #0]
    cd62:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    cd64:	601a      	str	r2, [r3, #0]
    cd66:	e7f7      	b.n	cd58 <ctrl_tx_sec_enqueue+0x1c>
}
    cd68:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    cd6a:	f7ff bfb9 	b.w	cce0 <ctrl_tx_enqueue>
	...

0000cd70 <feature_rsp_send>:
{
    cd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cd72:	4f21      	ldr	r7, [pc, #132]	; (cdf8 <feature_rsp_send+0x88>)
{
    cd74:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cd76:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    cd7a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cd7c:	f7fa fe13 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    cd80:	4604      	mov	r4, r0
    cd82:	b3b0      	cbz	r0, cdf2 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    cd84:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    cd86:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    cd88:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    cd8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    cd90:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    cd94:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    cd98:	f043 0310 	orr.w	r3, r3, #16
    cd9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    cda0:	79b1      	ldrb	r1, [r6, #6]
    cda2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    cda6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    cdaa:	f3c1 0110 	ubfx	r1, r1, #0, #17
    cdae:	400b      	ands	r3, r1
    cdb0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    cdb4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    cdb8:	f043 0320 	orr.w	r3, r3, #32
    cdbc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cdc0:	7903      	ldrb	r3, [r0, #4]
    cdc2:	f043 0303 	orr.w	r3, r3, #3
    cdc6:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    cdc8:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    cdca:	2309      	movs	r3, #9
    cdcc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    cdce:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    cdd0:	2100      	movs	r1, #0
    cdd2:	4410      	add	r0, r2
    cdd4:	f7f4 ff3e 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    cdd8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    cddc:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    cdde:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    cde0:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    cde2:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    cde4:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    cde6:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    cde8:	4621      	mov	r1, r4
    cdea:	f7ff ffa7 	bl	cd3c <ctrl_tx_sec_enqueue>
	return 0;
    cdee:	2000      	movs	r0, #0
    cdf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    cdf2:	2001      	movs	r0, #1
}
    cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdf6:	bf00      	nop
    cdf8:	200008dc 	.word	0x200008dc

0000cdfc <start_enc_rsp_send>:
{
    cdfc:	b510      	push	{r4, lr}
    cdfe:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    ce00:	b9c9      	cbnz	r1, ce36 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ce02:	480f      	ldr	r0, [pc, #60]	; (ce40 <start_enc_rsp_send+0x44>)
    ce04:	f7fa fdcf 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    ce08:	b1b8      	cbz	r0, ce3a <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    ce0a:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    ce0c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ce10:	f043 0320 	orr.w	r3, r3, #32
    ce14:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce18:	780b      	ldrb	r3, [r1, #0]
    ce1a:	f043 0303 	orr.w	r3, r3, #3
    ce1e:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ce20:	2301      	movs	r3, #1
    ce22:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    ce24:	2306      	movs	r3, #6
    ce26:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    ce28:	b140      	cbz	r0, ce3c <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    ce2a:	4601      	mov	r1, r0
    ce2c:	4620      	mov	r0, r4
    ce2e:	f7ff ff57 	bl	cce0 <ctrl_tx_enqueue>
	return 0;
    ce32:	2000      	movs	r0, #0
    ce34:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    ce36:	2000      	movs	r0, #0
    ce38:	e7e8      	b.n	ce0c <start_enc_rsp_send+0x10>
			return 1;
    ce3a:	2001      	movs	r0, #1
}
    ce3c:	bd10      	pop	{r4, pc}
    ce3e:	bf00      	nop
    ce40:	20000a38 	.word	0x20000a38

0000ce44 <reject_ext_ind_send>:
{
    ce44:	b570      	push	{r4, r5, r6, lr}
    ce46:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ce48:	480b      	ldr	r0, [pc, #44]	; (ce78 <reject_ext_ind_send+0x34>)
{
    ce4a:	460e      	mov	r6, r1
    ce4c:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ce4e:	f7fa fdaa 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    ce52:	b178      	cbz	r0, ce74 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce54:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    ce56:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce58:	f043 0303 	orr.w	r3, r3, #3
    ce5c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    ce5e:	2303      	movs	r3, #3
    ce60:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    ce62:	2311      	movs	r3, #17
    ce64:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    ce66:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    ce68:	4601      	mov	r1, r0
    ce6a:	4620      	mov	r0, r4
    ce6c:	f7ff ff38 	bl	cce0 <ctrl_tx_enqueue>
	return 0;
    ce70:	2000      	movs	r0, #0
    ce72:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    ce74:	2001      	movs	r0, #1
}
    ce76:	bd70      	pop	{r4, r5, r6, pc}
    ce78:	20000a38 	.word	0x20000a38
    ce7c:	00000000 	.word	0x00000000

0000ce80 <event_connection_prepare>:
{
    ce80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    ce84:	4db8      	ldr	r5, [pc, #736]	; (d168 <event_connection_prepare+0x2e8>)
{
    ce86:	b08f      	sub	sp, #60	; 0x3c
    ce88:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    ce8a:	7c2b      	ldrb	r3, [r5, #16]
{
    ce8c:	910c      	str	r1, [sp, #48]	; 0x30
    ce8e:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    ce90:	b173      	cbz	r3, ceb0 <event_connection_prepare+0x30>
    ce92:	4bb6      	ldr	r3, [pc, #728]	; (d16c <event_connection_prepare+0x2ec>)
    ce94:	9301      	str	r3, [sp, #4]
    ce96:	9300      	str	r3, [sp, #0]
    ce98:	4ab5      	ldr	r2, [pc, #724]	; (d170 <event_connection_prepare+0x2f0>)
    ce9a:	4bb6      	ldr	r3, [pc, #728]	; (d174 <event_connection_prepare+0x2f4>)
    ce9c:	49b6      	ldr	r1, [pc, #728]	; (d178 <event_connection_prepare+0x2f8>)
    ce9e:	48b7      	ldr	r0, [pc, #732]	; (d17c <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    cea0:	f7f4 f874 	bl	f8c <printk>
    cea4:	4040      	eors	r0, r0
    cea6:	f380 8811 	msr	BASEPRI, r0
    ceaa:	f04f 0004 	mov.w	r0, #4
    ceae:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    ceb0:	f894 3020 	ldrb.w	r3, [r4, #32]
    ceb4:	3307      	adds	r3, #7
    ceb6:	b2db      	uxtb	r3, r3
    ceb8:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    ceba:	f994 301d 	ldrsb.w	r3, [r4, #29]
    cebe:	2b00      	cmp	r3, #0
    cec0:	da09      	bge.n	ced6 <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    cec2:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    cec4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    cec6:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    ceca:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    cecc:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    cece:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    ced0:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    ced2:	bf88      	it	hi
    ced4:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    ced6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    ced8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    cedc:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    cede:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    cee0:	b292      	uxth	r2, r2
    cee2:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    cee4:	4432      	add	r2, r6
    cee6:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    cee8:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    ceec:	429a      	cmp	r2, r3
    ceee:	f040 81ba 	bne.w	d266 <event_connection_prepare+0x3e6>
    cef2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cef6:	075f      	lsls	r7, r3, #29
    cef8:	f100 84ab 	bmi.w	d852 <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    cefc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    cf00:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    cf04:	429a      	cmp	r2, r3
    cf06:	f000 8096 	beq.w	d036 <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    cf0a:	2005      	movs	r0, #5
    cf0c:	f7ff fd52 	bl	c9b4 <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    cf10:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    cf14:	b113      	cbz	r3, cf1c <event_connection_prepare+0x9c>
    cf16:	429c      	cmp	r4, r3
    cf18:	f040 808d 	bne.w	d036 <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    cf1c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    cf20:	f003 0307 	and.w	r3, r3, #7
    cf24:	2b05      	cmp	r3, #5
    cf26:	f200 815d 	bhi.w	d1e4 <event_connection_prepare+0x364>
    cf2a:	e8df f013 	tbh	[pc, r3, lsl #1]
    cf2e:	0006      	.short	0x0006
    cf30:	01310065 	.word	0x01310065
    cf34:	00840084 	.word	0x00840084
    cf38:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cf3a:	4891      	ldr	r0, [pc, #580]	; (d180 <event_connection_prepare+0x300>)
    cf3c:	f7fa fd33 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    cf40:	4607      	mov	r7, r0
    cf42:	2800      	cmp	r0, #0
    cf44:	d077      	beq.n	d036 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    cf46:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    cf4a:	2204      	movs	r2, #4
    cf4c:	f362 0302 	bfi	r3, r2, #0, #3
    cf50:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cf54:	7903      	ldrb	r3, [r0, #4]
    cf56:	f043 0303 	orr.w	r3, r3, #3
    cf5a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    cf5c:	2318      	movs	r3, #24
    cf5e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    cf60:	230f      	movs	r3, #15
    cf62:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    cf64:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    cf68:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    cf6a:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    cf6c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    cf70:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    cf72:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    cf76:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    cf78:	2300      	movs	r3, #0
    cf7a:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    cf7c:	74c3      	strb	r3, [r0, #19]
    cf7e:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    cf80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf84:	7543      	strb	r3, [r0, #21]
    cf86:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    cf88:	75c3      	strb	r3, [r0, #23]
    cf8a:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    cf8c:	7643      	strb	r3, [r0, #25]
    cf8e:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    cf90:	76c3      	strb	r3, [r0, #27]
    cf92:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    cf94:	7743      	strb	r3, [r0, #29]
    cf96:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    cf98:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    cf9c:	4601      	mov	r1, r0
    cf9e:	4620      	mov	r0, r4
    cfa0:	f7ff fe9e 	bl	cce0 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cfa4:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    cfa6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    cfaa:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cfae:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    cfb0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    cfb4:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cfb8:	da0b      	bge.n	cfd2 <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    cfba:	68a3      	ldr	r3, [r4, #8]
    cfbc:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    cfbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    cfc2:	428b      	cmp	r3, r1
    cfc4:	bf2c      	ite	cs
    cfc6:	4443      	addcs	r3, r8
    cfc8:	eb08 0301 	addcc.w	r3, r8, r1
    cfcc:	1a9b      	subs	r3, r3, r2
    cfce:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    cfd2:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    cfd4:	4b6b      	ldr	r3, [pc, #428]	; (d184 <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    cfd6:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cfda:	2201      	movs	r2, #1
    cfdc:	4611      	mov	r1, r2
    cfde:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    cfe0:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cfe2:	f7fa fdab 	bl	7b3c <mayfly_enqueue>
		LL_ASSERT(!retval);
    cfe6:	b330      	cbz	r0, d036 <event_connection_prepare+0x1b6>
    cfe8:	4b60      	ldr	r3, [pc, #384]	; (d16c <event_connection_prepare+0x2ec>)
    cfea:	9301      	str	r3, [sp, #4]
    cfec:	9300      	str	r3, [sp, #0]
    cfee:	4b66      	ldr	r3, [pc, #408]	; (d188 <event_connection_prepare+0x308>)
    cff0:	4a5f      	ldr	r2, [pc, #380]	; (d170 <event_connection_prepare+0x2f0>)
    cff2:	4961      	ldr	r1, [pc, #388]	; (d178 <event_connection_prepare+0x2f8>)
    cff4:	4865      	ldr	r0, [pc, #404]	; (d18c <event_connection_prepare+0x30c>)
    cff6:	e753      	b.n	cea0 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    cff8:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    cffc:	b397      	cbz	r7, d064 <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cffe:	4860      	ldr	r0, [pc, #384]	; (d180 <event_connection_prepare+0x300>)
    d000:	f7fa fcd1 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    d004:	4601      	mov	r1, r0
    d006:	b1b0      	cbz	r0, d036 <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    d008:	7903      	ldrb	r3, [r0, #4]
    d00a:	f043 0303 	orr.w	r3, r3, #3
    d00e:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d010:	2311      	movs	r3, #17
    d012:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    d014:	2303      	movs	r3, #3
    d016:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    d018:	230f      	movs	r3, #15
    d01a:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    d01c:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    d020:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    d022:	4620      	mov	r0, r4
    d024:	f7ff fe5c 	bl	cce0 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d028:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    d02c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    d030:	2300      	movs	r3, #0
    d032:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    d036:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    d03a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    d03e:	429a      	cmp	r2, r3
    d040:	f000 810a 	beq.w	d258 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    d044:	2005      	movs	r0, #5
    d046:	f7ff fcb5 	bl	c9b4 <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    d04a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    d04e:	f003 0203 	and.w	r2, r3, #3
    d052:	2a03      	cmp	r2, #3
    d054:	f200 8179 	bhi.w	d34a <event_connection_prepare+0x4ca>
    d058:	e8df f012 	tbh	[pc, r2, lsl #1]
    d05c:	00fe00cc 	.word	0x00fe00cc
    d060:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    d064:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d068:	2b00      	cmp	r3, #0
    d06a:	db3b      	blt.n	d0e4 <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    d06c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    d070:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    d074:	428b      	cmp	r3, r1
    d076:	d1de      	bne.n	d036 <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    d078:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    d07c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    d080:	2205      	movs	r2, #5
    d082:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    d086:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    d08a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    d08e:	2301      	movs	r3, #1
    d090:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    d094:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    d098:	b122      	cbz	r2, d0a4 <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    d09a:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    d09e:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    d0a0:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    d0a4:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    d0a8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    d0ac:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    d0b0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    d0b4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    d0b8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d0bc:	2202      	movs	r2, #2
    d0be:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    d0c2:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    d0c6:	f082 0208 	eor.w	r2, r2, #8
    d0ca:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d0ce:	f362 0382 	bfi	r3, r2, #2, #1
    d0d2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    d0d6:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    d0d8:	2301      	movs	r3, #1
    d0da:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    d0de:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    d0e2:	e7a8      	b.n	d036 <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d0e4:	4826      	ldr	r0, [pc, #152]	; (d180 <event_connection_prepare+0x300>)
    d0e6:	f7fa fc5e 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    d0ea:	4601      	mov	r1, r0
    d0ec:	2800      	cmp	r0, #0
    d0ee:	d0a2      	beq.n	d036 <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d0f0:	7903      	ldrb	r3, [r0, #4]
    d0f2:	f043 0303 	orr.w	r3, r3, #3
    d0f6:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    d0f8:	2318      	movs	r3, #24
    d0fa:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    d0fc:	2310      	movs	r3, #16
    d0fe:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    d100:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    d104:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    d106:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    d108:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    d10c:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    d10e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    d112:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    d114:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    d118:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    d11a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    d11e:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    d122:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    d126:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    d12a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    d12e:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    d132:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    d136:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    d13a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    d13e:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    d142:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    d146:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    d14a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    d14e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    d152:	4620      	mov	r0, r4
    d154:	f7ff fdc4 	bl	cce0 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d158:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    d15c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    d160:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    d164:	e767      	b.n	d036 <event_connection_prepare+0x1b6>
    d166:	bf00      	nop
    d168:	200008dc 	.word	0x200008dc
    d16c:	00015af1 	.word	0x00015af1
    d170:	00016fae 	.word	0x00016fae
    d174:	00018f29 	.word	0x00018f29
    d178:	00016060 	.word	0x00016060
    d17c:	000198e1 	.word	0x000198e1
    d180:	20000a38 	.word	0x20000a38
    d184:	20003e80 	.word	0x20003e80
    d188:	00018ec5 	.word	0x00018ec5
    d18c:	000197a5 	.word	0x000197a5
	if (conn->pause_tx) {
    d190:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d194:	0718      	lsls	r0, r3, #28
    d196:	f53f af4e 	bmi.w	d036 <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    d19a:	2002      	movs	r0, #2
    d19c:	f7fd fd98 	bl	acd0 <packet_rx_reserve_get>
	if (!node_rx) {
    d1a0:	2800      	cmp	r0, #0
    d1a2:	f43f af48 	beq.w	d036 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    d1a6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    d1aa:	2203      	movs	r2, #3
    d1ac:	f362 0302 	bfi	r3, r2, #0, #3
    d1b0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    d1b4:	8c23      	ldrh	r3, [r4, #32]
    d1b6:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d1b8:	2301      	movs	r3, #1
    d1ba:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d1bc:	7a03      	ldrb	r3, [r0, #8]
    d1be:	4313      	orrs	r3, r2
    d1c0:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    d1c2:	2318      	movs	r3, #24
    d1c4:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    d1c6:	230f      	movs	r3, #15
    d1c8:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    d1ca:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    d1ce:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    d1d0:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    d1d2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    d1d6:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    d1d8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    d1dc:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    d1de:	f7fe fbe3 	bl	b9a8 <packet_rx_enqueue>
    d1e2:	e728      	b.n	d036 <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    d1e4:	4bb9      	ldr	r3, [pc, #740]	; (d4cc <event_connection_prepare+0x64c>)
    d1e6:	9301      	str	r3, [sp, #4]
    d1e8:	9300      	str	r3, [sp, #0]
    d1ea:	4bb9      	ldr	r3, [pc, #740]	; (d4d0 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    d1ec:	4ab9      	ldr	r2, [pc, #740]	; (d4d4 <event_connection_prepare+0x654>)
    d1ee:	49ba      	ldr	r1, [pc, #744]	; (d4d8 <event_connection_prepare+0x658>)
    d1f0:	48ba      	ldr	r0, [pc, #744]	; (d4dc <event_connection_prepare+0x65c>)
    d1f2:	e655      	b.n	cea0 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d1f4:	48ba      	ldr	r0, [pc, #744]	; (d4e0 <event_connection_prepare+0x660>)
    d1f6:	f7fa fbd6 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    d1fa:	4601      	mov	r1, r0
    d1fc:	b360      	cbz	r0, d258 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    d1fe:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    d202:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    d206:	2201      	movs	r2, #1
    d208:	f362 0301 	bfi	r3, r2, #0, #2
    d20c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d210:	b2db      	uxtb	r3, r3
    d212:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    d216:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d21a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    d21e:	f363 07c5 	bfi	r7, r3, #3, #3
    d222:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    d226:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d22a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    d22e:	f367 1286 	bfi	r2, r7, #6, #1
    d232:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d236:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    d238:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d23a:	f042 0203 	orr.w	r2, r2, #3
    d23e:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    d240:	2203      	movs	r2, #3
    d242:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    d244:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    d246:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    d248:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    d24a:	4620      	mov	r0, r4
    d24c:	f7ff fd48 	bl	cce0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d250:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d254:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    d258:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    d25c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d260:	429a      	cmp	r2, r3
    d262:	f000 82f6 	beq.w	d852 <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d266:	2005      	movs	r0, #5
    d268:	f7ff fba4 	bl	c9b4 <event_stop.constprop.31>
		switch (conn->llcp_type) {
    d26c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    d270:	3b01      	subs	r3, #1
    d272:	2b07      	cmp	r3, #7
    d274:	f200 85a7 	bhi.w	ddc6 <event_connection_prepare+0xf46>
    d278:	e8df f013 	tbh	[pc, r3, lsl #1]
    d27c:	02c4006c 	.word	0x02c4006c
    d280:	045e0343 	.word	0x045e0343
    d284:	05a5048e 	.word	0x05a5048e
    d288:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    d28c:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    d290:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    d294:	f3c3 0282 	ubfx	r2, r3, #2, #3
    d298:	0791      	lsls	r1, r2, #30
    d29a:	d544      	bpl.n	d326 <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    d29c:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    d29e:	f362 0384 	bfi	r3, r2, #2, #3
    d2a2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    d2a6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    d2aa:	095a      	lsrs	r2, r3, #5
    d2ac:	0790      	lsls	r0, r2, #30
    d2ae:	d543      	bpl.n	d338 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    d2b0:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    d2b2:	f362 1347 	bfi	r3, r2, #5, #3
    d2b6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    d2ba:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    d2be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d2c2:	f3c2 0182 	ubfx	r1, r2, #2, #3
    d2c6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d2ca:	428b      	cmp	r3, r1
    d2cc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    d2d0:	bf14      	ite	ne
    d2d2:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    d2d6:	f36f 0384 	bfceq	r3, #2, #3
    d2da:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    d2de:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d2e2:	0952      	lsrs	r2, r2, #5
    d2e4:	f003 0307 	and.w	r3, r3, #7
    d2e8:	4293      	cmp	r3, r2
    d2ea:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    d2ee:	bf14      	ite	ne
    d2f0:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    d2f4:	f36f 1347 	bfceq	r3, #5, #3
    d2f8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    d2fc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    d300:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    d304:	f043 0301 	orr.w	r3, r3, #1
    d308:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d30c:	f362 0341 	bfi	r3, r2, #1, #1
    d310:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    d314:	2308      	movs	r3, #8
    d316:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    d31a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    d31e:	3b01      	subs	r3, #1
    d320:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    d324:	e798      	b.n	d258 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    d326:	07d7      	lsls	r7, r2, #31
    d328:	d501      	bpl.n	d32e <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    d32a:	2201      	movs	r2, #1
    d32c:	e7b7      	b.n	d29e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    d32e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    d332:	bf18      	it	ne
    d334:	2204      	movne	r2, #4
    d336:	e7b2      	b.n	d29e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    d338:	07d1      	lsls	r1, r2, #31
    d33a:	d501      	bpl.n	d340 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    d33c:	2201      	movs	r2, #1
    d33e:	e7b8      	b.n	d2b2 <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    d340:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    d344:	bf18      	it	ne
    d346:	2204      	movne	r2, #4
    d348:	e7b3      	b.n	d2b2 <event_connection_prepare+0x432>
		LL_ASSERT(0);
    d34a:	4b60      	ldr	r3, [pc, #384]	; (d4cc <event_connection_prepare+0x64c>)
    d34c:	9301      	str	r3, [sp, #4]
    d34e:	9300      	str	r3, [sp, #0]
    d350:	4b64      	ldr	r3, [pc, #400]	; (d4e4 <event_connection_prepare+0x664>)
    d352:	e74b      	b.n	d1ec <event_connection_prepare+0x36c>
	if (!conn_upd) {
    d354:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    d358:	b90b      	cbnz	r3, d35e <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    d35a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    d35e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d362:	f013 0303 	ands.w	r3, r3, #3
    d366:	d068      	beq.n	d43a <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d368:	485d      	ldr	r0, [pc, #372]	; (d4e0 <event_connection_prepare+0x660>)
    d36a:	f7fa fb1c 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    d36e:	4607      	mov	r7, r0
    d370:	2800      	cmp	r0, #0
    d372:	f000 826e 	beq.w	d852 <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    d376:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d37a:	f003 0303 	and.w	r3, r3, #3
    d37e:	2b01      	cmp	r3, #1
    d380:	d059      	beq.n	d436 <event_connection_prepare+0x5b6>
    d382:	2b02      	cmp	r3, #2
    d384:	d152      	bne.n	d42c <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    d386:	4a58      	ldr	r2, [pc, #352]	; (d4e8 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d388:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d38c:	f36f 0301 	bfc	r3, #0, #2
    d390:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    d394:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d396:	3306      	adds	r3, #6
    d398:	4433      	add	r3, r6
    d39a:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    d39c:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d3a0:	7939      	ldrb	r1, [r7, #4]
    d3a2:	f041 0103 	orr.w	r1, r1, #3
    d3a6:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    d3a8:	210c      	movs	r1, #12
    d3aa:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    d3ac:	2100      	movs	r1, #0
    d3ae:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    d3b0:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    d3b4:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    d3b6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    d3ba:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d3be:	fbb1 f1f0 	udiv	r1, r1, r0
    d3c2:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    d3c6:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    d3ca:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    d3ce:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    d3d2:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    d3d6:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    d3da:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    d3de:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d3e2:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    d3e4:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d3e8:	2900      	cmp	r1, #0
    d3ea:	da0b      	bge.n	d404 <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    d3ec:	68a3      	ldr	r3, [r4, #8]
    d3ee:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    d3f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    d3f4:	4283      	cmp	r3, r0
    d3f6:	bf2c      	ite	cs
    d3f8:	4443      	addcs	r3, r8
    d3fa:	eb08 0300 	addcc.w	r3, r8, r0
    d3fe:	1a5b      	subs	r3, r3, r1
    d400:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    d404:	f107 0309 	add.w	r3, r7, #9
    d408:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    d40c:	4b37      	ldr	r3, [pc, #220]	; (d4ec <event_connection_prepare+0x66c>)
    d40e:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d410:	2201      	movs	r2, #1
    d412:	4611      	mov	r1, r2
    d414:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    d416:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d418:	f7fa fb90 	bl	7b3c <mayfly_enqueue>
		LL_ASSERT(!retval);
    d41c:	2800      	cmp	r0, #0
    d41e:	f000 8214 	beq.w	d84a <event_connection_prepare+0x9ca>
    d422:	4b2a      	ldr	r3, [pc, #168]	; (d4cc <event_connection_prepare+0x64c>)
    d424:	9301      	str	r3, [sp, #4]
    d426:	9300      	str	r3, [sp, #0]
    d428:	4b31      	ldr	r3, [pc, #196]	; (d4f0 <event_connection_prepare+0x670>)
    d42a:	e5e1      	b.n	cff0 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    d42c:	4b27      	ldr	r3, [pc, #156]	; (d4cc <event_connection_prepare+0x64c>)
    d42e:	9301      	str	r3, [sp, #4]
    d430:	9300      	str	r3, [sp, #0]
    d432:	4b30      	ldr	r3, [pc, #192]	; (d4f4 <event_connection_prepare+0x674>)
    d434:	e6da      	b.n	d1ec <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    d436:	4a30      	ldr	r2, [pc, #192]	; (d4f8 <event_connection_prepare+0x678>)
    d438:	e7a6      	b.n	d388 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    d43a:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    d43e:	1bf7      	subs	r7, r6, r7
    d440:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    d442:	043a      	lsls	r2, r7, #16
    d444:	f100 8205 	bmi.w	d852 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d448:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    d44c:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d450:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    d454:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    d458:	428a      	cmp	r2, r1
    d45a:	d009      	beq.n	d470 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    d45c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d460:	f002 0207 	and.w	r2, r2, #7
    d464:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d466:	bf04      	itt	eq
    d468:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    d46c:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    d470:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    d474:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    d476:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    d478:	bf08      	it	eq
    d47a:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    d47e:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    d480:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    d482:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d486:	429a      	cmp	r2, r3
    d488:	d114      	bne.n	d4b4 <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    d48a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    d48e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d490:	4299      	cmp	r1, r3
    d492:	d10f      	bne.n	d4b4 <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    d494:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d498:	435a      	muls	r2, r3
    d49a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d49e:	f242 7110 	movw	r1, #10000	; 0x2710
    d4a2:	fb01 2303 	mla	r3, r1, r3, r2
    d4a6:	3b01      	subs	r3, #1
    d4a8:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    d4ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    d4ae:	b29b      	uxth	r3, r3
    d4b0:	429a      	cmp	r2, r3
    d4b2:	d036      	beq.n	d522 <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    d4b4:	2002      	movs	r0, #2
    d4b6:	f7fd fc0b 	bl	acd0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    d4ba:	bb08      	cbnz	r0, d500 <event_connection_prepare+0x680>
    d4bc:	4b03      	ldr	r3, [pc, #12]	; (d4cc <event_connection_prepare+0x64c>)
    d4be:	9301      	str	r3, [sp, #4]
    d4c0:	9300      	str	r3, [sp, #0]
    d4c2:	4b0c      	ldr	r3, [pc, #48]	; (d4f4 <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    d4c4:	4a03      	ldr	r2, [pc, #12]	; (d4d4 <event_connection_prepare+0x654>)
    d4c6:	4904      	ldr	r1, [pc, #16]	; (d4d8 <event_connection_prepare+0x658>)
    d4c8:	480c      	ldr	r0, [pc, #48]	; (d4fc <event_connection_prepare+0x67c>)
    d4ca:	e4e9      	b.n	cea0 <event_connection_prepare+0x20>
    d4cc:	00015af1 	.word	0x00015af1
    d4d0:	00018eda 	.word	0x00018eda
    d4d4:	00016fae 	.word	0x00016fae
    d4d8:	00016060 	.word	0x00016060
    d4dc:	00016f22 	.word	0x00016f22
    d4e0:	20000a38 	.word	0x20000a38
    d4e4:	00018eff 	.word	0x00018eff
    d4e8:	0000b6f9 	.word	0x0000b6f9
    d4ec:	20003e70 	.word	0x20003e70
    d4f0:	00018e8e 	.word	0x00018e8e
    d4f4:	00018ea2 	.word	0x00018ea2
    d4f8:	0000c3e1 	.word	0x0000c3e1
    d4fc:	000196d1 	.word	0x000196d1
			node_rx->hdr.handle = conn->handle;
    d500:	8c23      	ldrh	r3, [r4, #32]
    d502:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d504:	2308      	movs	r3, #8
    d506:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    d508:	2300      	movs	r3, #0
    d50a:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    d50c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d510:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    d512:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    d516:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    d518:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d51c:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    d51e:	f7fe fa43 	bl	b9a8 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d522:	6823      	ldr	r3, [r4, #0]
    d524:	6866      	ldr	r6, [r4, #4]
    d526:	2b00      	cmp	r3, #0
    d528:	da09      	bge.n	d53e <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    d52a:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    d52c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d530:	42b0      	cmp	r0, r6
    d532:	bf2c      	ite	cs
    d534:	4480      	addcs	r8, r0
    d536:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    d538:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d53a:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    d53e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    d540:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    d544:	49a0      	ldr	r1, [pc, #640]	; (d7c8 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    d546:	fb13 f307 	smulbb	r3, r3, r7
    d54a:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    d54c:	fbb3 f2fa 	udiv	r2, r3, sl
    d550:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    d554:	fb1a f009 	smulbb	r0, sl, r9
    d558:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    d55a:	4283      	cmp	r3, r0
    d55c:	f080 80bf 	bcs.w	d6de <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    d560:	1ac0      	subs	r0, r0, r3
    d562:	f240 1223 	movw	r2, #291	; 0x123
    d566:	4342      	muls	r2, r0
    d568:	17c3      	asrs	r3, r0, #31
    d56a:	fb01 2303 	mla	r3, r1, r3, r2
    d56e:	fba0 0101 	umull	r0, r1, r0, r1
    d572:	4419      	add	r1, r3
    d574:	a392      	add	r3, pc, #584	; (adr r3, d7c0 <event_connection_prepare+0x940>)
    d576:	e9d3 2300 	ldrd	r2, r3, [r3]
    d57a:	f7f2 fe4b 	bl	214 <__aeabi_uldivmod>
    d57e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d582:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d586:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    d588:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d58a:	f8df b274 	ldr.w	fp, [pc, #628]	; d800 <event_connection_prepare+0x980>
    d58e:	1bdb      	subs	r3, r3, r7
    d590:	444b      	add	r3, r9
    d592:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    d594:	6823      	ldr	r3, [r4, #0]
    d596:	42b3      	cmp	r3, r6
    d598:	bf38      	it	cc
    d59a:	4633      	movcc	r3, r6
    d59c:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    d59e:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    d5a2:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    d5a6:	2b00      	cmp	r3, #0
    d5a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    d5ac:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    d5ae:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    d5b2:	f280 80a5 	bge.w	d700 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    d5b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    d5b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d5ba:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    d5be:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    d5c2:	4a82      	ldr	r2, [pc, #520]	; (d7cc <event_connection_prepare+0x94c>)
    d5c4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    d5c8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d5cc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d5d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    d5d4:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    d5d8:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    d5da:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d5dc:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    d5e0:	4b7b      	ldr	r3, [pc, #492]	; (d7d0 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    d5e2:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d5e6:	f205 253f 	addw	r5, r5, #575	; 0x23f
    d5ea:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    d5ee:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    d5f0:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    d5f4:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    d5f6:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    d5f8:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    d5fa:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    d5fc:	429f      	cmp	r7, r3
    d5fe:	bf94      	ite	ls
    d600:	65e7      	strls	r7, [r4, #92]	; 0x5c
    d602:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    d604:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    d606:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    d608:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d60a:	fba0 010b 	umull	r0, r1, r0, fp
    d60e:	a36c      	add	r3, pc, #432	; (adr r3, d7c0 <event_connection_prepare+0x940>)
    d610:	e9d3 2300 	ldrd	r2, r3, [r3]
    d614:	f7f2 fdfe 	bl	214 <__aeabi_uldivmod>
    d618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d61a:	1a1b      	subs	r3, r3, r0
    d61c:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d61e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d620:	fbb3 f0f8 	udiv	r0, r3, r8
    d624:	fb08 f000 	mul.w	r0, r8, r0
    d628:	a365      	add	r3, pc, #404	; (adr r3, d7c0 <event_connection_prepare+0x940>)
    d62a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d62e:	fba0 010b 	umull	r0, r1, r0, fp
    d632:	f7f2 fdef 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    d636:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d638:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    d63c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    d640:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    d644:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    d646:	f242 7110 	movw	r1, #10000	; 0x2710
    d64a:	fb01 6303 	mla	r3, r1, r3, r6
    d64e:	3b01      	subs	r3, #1
    d650:	fbb3 f3f6 	udiv	r3, r3, r6
    d654:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d656:	4b5f      	ldr	r3, [pc, #380]	; (d7d4 <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    d658:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d65c:	4433      	add	r3, r6
    d65e:	fbb3 f3f6 	udiv	r3, r3, r6
    d662:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d666:	4b5c      	ldr	r3, [pc, #368]	; (d7d8 <event_connection_prepare+0x958>)
    d668:	4433      	add	r3, r6
    d66a:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d66e:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d670:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d672:	4299      	cmp	r1, r3
    d674:	bfc4      	itt	gt
    d676:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    d67a:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d67c:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d680:	bfc8      	it	gt
    d682:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    d684:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d688:	bfc8      	it	gt
    d68a:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    d68c:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    d690:	bf08      	it	eq
    d692:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d696:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    d69a:	2000      	movs	r0, #0
    d69c:	2101      	movs	r1, #1
    d69e:	f006 fa2d 	bl	13afc <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d6a2:	2200      	movs	r2, #0
    d6a4:	2101      	movs	r1, #1
		mayfly_was_enabled =
    d6a6:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d6a8:	4610      	mov	r0, r2
    d6aa:	f7fa fa1f 	bl	7aec <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d6ae:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    d6b2:	f641 2385 	movw	r3, #6789	; 0x1a85
    d6b6:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d6b8:	3207      	adds	r2, #7
		ticker_status =
    d6ba:	9300      	str	r3, [sp, #0]
    d6bc:	b2d2      	uxtb	r2, r2
    d6be:	4b47      	ldr	r3, [pc, #284]	; (d7dc <event_connection_prepare+0x95c>)
    d6c0:	4608      	mov	r0, r1
    d6c2:	f7fb f897 	bl	87f4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d6c6:	f030 0802 	bics.w	r8, r0, #2
    d6ca:	d026      	beq.n	d71a <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d6cc:	4b44      	ldr	r3, [pc, #272]	; (d7e0 <event_connection_prepare+0x960>)
    d6ce:	9301      	str	r3, [sp, #4]
    d6d0:	9300      	str	r3, [sp, #0]
    d6d2:	4a44      	ldr	r2, [pc, #272]	; (d7e4 <event_connection_prepare+0x964>)
    d6d4:	4b44      	ldr	r3, [pc, #272]	; (d7e8 <event_connection_prepare+0x968>)
    d6d6:	4945      	ldr	r1, [pc, #276]	; (d7ec <event_connection_prepare+0x96c>)
    d6d8:	4845      	ldr	r0, [pc, #276]	; (d7f0 <event_connection_prepare+0x970>)
    d6da:	f7ff bbe1 	b.w	cea0 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d6de:	fb0a 3212 	mls	r2, sl, r2, r3
    d6e2:	b292      	uxth	r2, r2
    d6e4:	fba2 0101 	umull	r0, r1, r2, r1
    d6e8:	f240 1323 	movw	r3, #291	; 0x123
    d6ec:	fb03 1102 	mla	r1, r3, r2, r1
    d6f0:	a333      	add	r3, pc, #204	; (adr r3, d7c0 <event_connection_prepare+0x940>)
    d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    d6f6:	f7f2 fd8d 	bl	214 <__aeabi_uldivmod>
    d6fa:	eba8 0300 	sub.w	r3, r8, r0
    d6fe:	e742      	b.n	d586 <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d700:	990c      	ldr	r1, [sp, #48]	; 0x30
    d702:	a32f      	add	r3, pc, #188	; (adr r3, d7c0 <event_connection_prepare+0x940>)
    d704:	e9d3 2300 	ldrd	r2, r3, [r3]
    d708:	fba1 010b 	umull	r0, r1, r1, fp
    d70c:	f7f2 fd82 	bl	214 <__aeabi_uldivmod>
    d710:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    d714:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    d716:	4635      	mov	r5, r6
    d718:	e790      	b.n	d63c <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    d71a:	fba5 ab0b 	umull	sl, fp, r5, fp
    d71e:	a328      	add	r3, pc, #160	; (adr r3, d7c0 <event_connection_prepare+0x940>)
    d720:	e9d3 2300 	ldrd	r2, r3, [r3]
    d724:	4650      	mov	r0, sl
    d726:	4659      	mov	r1, fp
    d728:	f7f2 fd74 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    d72c:	4a31      	ldr	r2, [pc, #196]	; (d7f4 <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d72e:	f894 6020 	ldrb.w	r6, [r4, #32]
    d732:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    d736:	2307      	movs	r3, #7
    d738:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d73c:	2100      	movs	r1, #0
    d73e:	4343      	muls	r3, r0
    d740:	fb02 3301 	mla	r3, r2, r1, r3
    d744:	fba0 0102 	umull	r0, r1, r0, r2
    d748:	ebba 0000 	subs.w	r0, sl, r0
    d74c:	4419      	add	r1, r3
    d74e:	eb6b 0101 	sbc.w	r1, fp, r1
    d752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d756:	2300      	movs	r3, #0
    d758:	f7f2 fd5c 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d75c:	68e3      	ldr	r3, [r4, #12]
    d75e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d760:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    d764:	4924      	ldr	r1, [pc, #144]	; (d7f8 <event_connection_prepare+0x978>)
		ticker_status =
    d766:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d768:	441a      	add	r2, r3
    d76a:	4613      	mov	r3, r2
    d76c:	4a23      	ldr	r2, [pc, #140]	; (d7fc <event_connection_prepare+0x97c>)
		ticker_status =
    d76e:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d770:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    d774:	bf38      	it	cc
    d776:	460a      	movcc	r2, r1
    d778:	3607      	adds	r6, #7
		ticker_status =
    d77a:	f641 2195 	movw	r1, #6805	; 0x1a95
    d77e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d780:	b2f6      	uxtb	r6, r6
		ticker_status =
    d782:	4916      	ldr	r1, [pc, #88]	; (d7dc <event_connection_prepare+0x95c>)
    d784:	9107      	str	r1, [sp, #28]
    d786:	9205      	str	r2, [sp, #20]
    d788:	9406      	str	r4, [sp, #24]
    d78a:	f8cd 800c 	str.w	r8, [sp, #12]
    d78e:	9501      	str	r5, [sp, #4]
    d790:	9700      	str	r7, [sp, #0]
    d792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d794:	4632      	mov	r2, r6
    d796:	4641      	mov	r1, r8
    d798:	4640      	mov	r0, r8
    d79a:	f7fa ff8d 	bl	86b8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d79e:	f030 0002 	bics.w	r0, r0, #2
    d7a2:	d193      	bne.n	d6cc <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    d7a4:	f1b9 0f00 	cmp.w	r9, #0
    d7a8:	f000 8383 	beq.w	deb2 <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d7ac:	2201      	movs	r2, #1
    d7ae:	4611      	mov	r1, r2
}
    d7b0:	b00f      	add	sp, #60	; 0x3c
    d7b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d7b6:	f7fa b999 	b.w	7aec <mayfly_enable>
    d7ba:	bf00      	nop
    d7bc:	f3af 8000 	nop.w
    d7c0:	1afd498d 	.word	0x1afd498d
    d7c4:	00000007 	.word	0x00000007
    d7c8:	09ce5400 	.word	0x09ce5400
    d7cc:	0001928a 	.word	0x0001928a
    d7d0:	000f4240 	.word	0x000f4240
    d7d4:	026259ff 	.word	0x026259ff
    d7d8:	01c9c37f 	.word	0x01c9c37f
    d7dc:	0000bbbd 	.word	0x0000bbbd
    d7e0:	00015af1 	.word	0x00015af1
    d7e4:	00016fae 	.word	0x00016fae
    d7e8:	00018ea2 	.word	0x00018ea2
    d7ec:	00016060 	.word	0x00016060
    d7f0:	0001906a 	.word	0x0001906a
    d7f4:	1afd498d 	.word	0x1afd498d
    d7f8:	0000e061 	.word	0x0000e061
    d7fc:	0000e065 	.word	0x0000e065
    d800:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    d804:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d808:	2b00      	cmp	r3, #0
    d80a:	d05e      	beq.n	d8ca <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d80c:	48c9      	ldr	r0, [pc, #804]	; (db34 <event_connection_prepare+0xcb4>)
    d80e:	f7fa f8ca 	bl	79a6 <mem_acquire>
		if (node_tx) {
    d812:	4607      	mov	r7, r0
    d814:	b1e8      	cbz	r0, d852 <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    d816:	2300      	movs	r3, #0
    d818:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    d81c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d81e:	3306      	adds	r3, #6
    d820:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    d822:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d826:	7903      	ldrb	r3, [r0, #4]
    d828:	f043 0303 	orr.w	r3, r3, #3
    d82c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d82e:	2308      	movs	r3, #8
    d830:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d832:	2301      	movs	r3, #1
    d834:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    d836:	2205      	movs	r2, #5
    d838:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d83c:	3008      	adds	r0, #8
    d83e:	f7f4 f9dd 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    d842:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d846:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    d84a:	4639      	mov	r1, r7
    d84c:	4620      	mov	r0, r4
    d84e:	f7ff fa47 	bl	cce0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    d852:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    d856:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    d85a:	429a      	cmp	r2, r3
    d85c:	d01e      	beq.n	d89c <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d85e:	2005      	movs	r0, #5
    d860:	f7ff f8a8 	bl	c9b4 <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d864:	48b3      	ldr	r0, [pc, #716]	; (db34 <event_connection_prepare+0xcb4>)
    d866:	f7fa f89e 	bl	79a6 <mem_acquire>
		if (node_tx) {
    d86a:	4601      	mov	r1, r0
    d86c:	b1b0      	cbz	r0, d89c <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    d86e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    d872:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d876:	7903      	ldrb	r3, [r0, #4]
    d878:	f043 0303 	orr.w	r3, r3, #3
    d87c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d87e:	2302      	movs	r3, #2
    d880:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d882:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    d884:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    d888:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    d88a:	4620      	mov	r0, r4
    d88c:	f7ff fa28 	bl	cce0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    d890:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    d892:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    d894:	bf98      	it	ls
    d896:	3301      	addls	r3, #1
    d898:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    d89c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    d8a0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d8a4:	429a      	cmp	r2, r3
    d8a6:	f000 82eb 	beq.w	de80 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d8aa:	2005      	movs	r0, #5
    d8ac:	f7ff f882 	bl	c9b4 <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    d8b0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    d8b4:	f003 0303 	and.w	r3, r3, #3
    d8b8:	2b03      	cmp	r3, #3
    d8ba:	f200 830c 	bhi.w	ded6 <event_connection_prepare+0x1056>
    d8be:	e8df f013 	tbh	[pc, r3, lsl #1]
    d8c2:	0288      	.short	0x0288
    d8c4:	02df02df 	.word	0x02df02df
    d8c8:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    d8ca:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d8ce:	1af3      	subs	r3, r6, r3
    d8d0:	041f      	lsls	r7, r3, #16
    d8d2:	d4be      	bmi.n	d852 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    d8d4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d8d8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    d8dc:	f104 0717 	add.w	r7, r4, #23
    d8e0:	2205      	movs	r2, #5
    d8e2:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d8e6:	4638      	mov	r0, r7
    d8e8:	f7f4 f988 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    d8ec:	2105      	movs	r1, #5
    d8ee:	4638      	mov	r0, r7
    d8f0:	f7fa fa04 	bl	7cfc <util_ones_count_get>
		conn->data_chan_count =
    d8f4:	7f63      	ldrb	r3, [r4, #29]
    d8f6:	f360 0305 	bfi	r3, r0, #0, #6
    d8fa:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    d8fc:	2301      	movs	r3, #1
    d8fe:	7723      	strb	r3, [r4, #28]
    d900:	e7a7      	b.n	d852 <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    d902:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    d906:	f1b9 0f00 	cmp.w	r9, #0
    d90a:	d1a2      	bne.n	d852 <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d90c:	4889      	ldr	r0, [pc, #548]	; (db34 <event_connection_prepare+0xcb4>)
    d90e:	f7fa f84a 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    d912:	4607      	mov	r7, r0
    d914:	2800      	cmp	r0, #0
    d916:	d09c      	beq.n	d852 <event_connection_prepare+0x9d2>
	if (!conn->role) {
    d918:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d91c:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    d91e:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    d922:	db4d      	blt.n	d9c0 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d924:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    d928:	465b      	mov	r3, fp
    d92a:	464a      	mov	r2, r9
    d92c:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d930:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d934:	f005 fc58 	bl	131e8 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    d938:	2210      	movs	r2, #16
    d93a:	4659      	mov	r1, fp
    d93c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d940:	f7f4 f95c 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d944:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d948:	2208      	movs	r2, #8
    d94a:	f204 1033 	addw	r0, r4, #307	; 0x133
    d94e:	f7f4 f955 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    d952:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    d956:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    d95a:	f369 0300 	bfi	r3, r9, #0, #1
    d95e:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    d962:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    d966:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    d96a:	f043 0301 	orr.w	r3, r3, #1
    d96e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    d972:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    d976:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    d97a:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    d97e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    d982:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d986:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d98a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d98e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    d992:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d996:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d99a:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d99e:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    d9a2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    d9a6:	4651      	mov	r1, sl
    d9a8:	4620      	mov	r0, r4
    d9aa:	f7ff fa27 	bl	cdfc <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    d9ae:	4639      	mov	r1, r7
    d9b0:	4620      	mov	r0, r4
    d9b2:	f7ff f995 	bl	cce0 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    d9b6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d9ba:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    d9be:	e748      	b.n	d852 <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    d9c0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d9c4:	f003 0348 	and.w	r3, r3, #72	; 0x48
    d9c8:	2b08      	cmp	r3, #8
    d9ca:	f000 80a2 	beq.w	db12 <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    d9ce:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    d9d2:	f1b9 0f00 	cmp.w	r9, #0
    d9d6:	d020      	beq.n	da1a <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d9d8:	7903      	ldrb	r3, [r0, #4]
    d9da:	f043 0303 	orr.w	r3, r3, #3
    d9de:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    d9e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d9e4:	0698      	lsls	r0, r3, #26
    d9e6:	d512      	bpl.n	da0e <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    d9e8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    d9ec:	0759      	lsls	r1, r3, #29
    d9ee:	d50e      	bpl.n	da0e <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d9f0:	2311      	movs	r3, #17
    d9f2:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d9f4:	2303      	movs	r3, #3
    d9f6:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    d9f8:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    d9fc:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d9fe:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    da00:	797b      	ldrb	r3, [r7, #5]
    da02:	3301      	adds	r3, #1
    da04:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    da06:	2300      	movs	r3, #0
    da08:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    da0c:	e7cf      	b.n	d9ae <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    da0e:	230d      	movs	r3, #13
    da10:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    da12:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    da16:	2301      	movs	r3, #1
    da18:	e7f1      	b.n	d9fe <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da1a:	4846      	ldr	r0, [pc, #280]	; (db34 <event_connection_prepare+0xcb4>)
    da1c:	f7f9 ffc3 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    da20:	4682      	mov	sl, r0
    da22:	2800      	cmp	r0, #0
    da24:	f000 8300 	beq.w	e028 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da28:	7903      	ldrb	r3, [r0, #4]
    da2a:	f043 0303 	orr.w	r3, r3, #3
    da2e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    da30:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    da34:	230d      	movs	r3, #13
    da36:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    da38:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    da3c:	f100 0308 	add.w	r3, r0, #8
    da40:	4619      	mov	r1, r3
    da42:	2208      	movs	r2, #8
    da44:	6868      	ldr	r0, [r5, #4]
    da46:	930d      	str	r3, [sp, #52]	; 0x34
    da48:	f006 fd98 	bl	1457c <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    da4c:	f10a 0310 	add.w	r3, sl, #16
    da50:	4619      	mov	r1, r3
    da52:	465a      	mov	r2, fp
    da54:	6868      	ldr	r0, [r5, #4]
    da56:	930b      	str	r3, [sp, #44]	; 0x2c
    da58:	f006 fd90 	bl	1457c <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    da5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    da5e:	2208      	movs	r2, #8
    da60:	4619      	mov	r1, r3
    da62:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    da66:	f7f4 f8c9 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    da6a:	465a      	mov	r2, fp
    da6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    da6e:	f504 708b 	add.w	r0, r4, #278	; 0x116
    da72:	f7f4 f8c3 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    da76:	4651      	mov	r1, sl
    da78:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    da7a:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    da7e:	f7ff f92f 	bl	cce0 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    da82:	4653      	mov	r3, sl
    da84:	464a      	mov	r2, r9
    da86:	f104 0194 	add.w	r1, r4, #148	; 0x94
    da8a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    da8e:	f005 fbab 	bl	131e8 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    da92:	2210      	movs	r2, #16
    da94:	4651      	mov	r1, sl
    da96:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    da9a:	f7f4 f8af 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    da9e:	2208      	movs	r2, #8
    daa0:	f504 7189 	add.w	r1, r4, #274	; 0x112
    daa4:	f204 1033 	addw	r0, r4, #307	; 0x133
    daa8:	f7f4 f8a8 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    daac:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    dab0:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    dab4:	f043 0301 	orr.w	r3, r3, #1
    dab8:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    dabc:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    dac0:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    dac4:	f369 0300 	bfi	r3, r9, #0, #1
    dac8:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    dacc:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    dad0:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    dad4:	f043 0310 	orr.w	r3, r3, #16
    dad8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dadc:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    dade:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dae2:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    dae6:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    daea:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    daee:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    daf2:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    daf6:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    dafa:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    dafe:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    db02:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db06:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    db08:	2301      	movs	r3, #1
    db0a:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    db0c:	2305      	movs	r3, #5
    db0e:	71fb      	strb	r3, [r7, #7]
    db10:	e74d      	b.n	d9ae <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    db12:	4651      	mov	r1, sl
    db14:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    db18:	f7ff f970 	bl	cdfc <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    db1c:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    db20:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    db24:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    db28:	f369 03c3 	bfi	r3, r9, #3, #1
    db2c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    db30:	e73d      	b.n	d9ae <event_connection_prepare+0xb2e>
    db32:	bf00      	nop
    db34:	20000a38 	.word	0x20000a38
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    db38:	48b0      	ldr	r0, [pc, #704]	; (ddfc <event_connection_prepare+0xf7c>)
    db3a:	f7f9 ff34 	bl	79a6 <mem_acquire>
	if (node_tx) {
    db3e:	4607      	mov	r7, r0
    db40:	2800      	cmp	r0, #0
    db42:	f43f ae86 	beq.w	d852 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    db46:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    db4a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    db4e:	4bac      	ldr	r3, [pc, #688]	; (de00 <event_connection_prepare+0xf80>)
    db50:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db54:	7903      	ldrb	r3, [r0, #4]
    db56:	f043 0303 	orr.w	r3, r3, #3
    db5a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    db5c:	2309      	movs	r3, #9
    db5e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    db60:	f994 301d 	ldrsb.w	r3, [r4, #29]
    db64:	2b00      	cmp	r3, #0
    db66:	bfac      	ite	ge
    db68:	2308      	movge	r3, #8
    db6a:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    db6c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    db6e:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    db70:	2100      	movs	r1, #0
    db72:	4410      	add	r0, r2
    db74:	f7f4 f86e 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    db78:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    db7c:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    db7e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    db80:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    db82:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    db84:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    db86:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    db88:	4620      	mov	r0, r4
    db8a:	f7ff f8a9 	bl	cce0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    db8e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    db92:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    db96:	e65c      	b.n	d852 <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    db98:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    db9c:	07da      	lsls	r2, r3, #31
    db9e:	d424      	bmi.n	dbea <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dba0:	4896      	ldr	r0, [pc, #600]	; (ddfc <event_connection_prepare+0xf7c>)
    dba2:	f7f9 ff00 	bl	79a6 <mem_acquire>
		if (node_tx) {
    dba6:	4601      	mov	r1, r0
    dba8:	2800      	cmp	r0, #0
    dbaa:	f43f ae52 	beq.w	d852 <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    dbae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    dbb2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    dbb6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    dbba:	f043 0301 	orr.w	r3, r3, #1
    dbbe:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbc2:	7903      	ldrb	r3, [r0, #4]
    dbc4:	f043 0303 	orr.w	r3, r3, #3
    dbc8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    dbca:	2306      	movs	r3, #6
    dbcc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    dbce:	230c      	movs	r3, #12
    dbd0:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    dbd2:	2309      	movs	r3, #9
    dbd4:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    dbd6:	f06f 030e 	mvn.w	r3, #14
    dbda:	7243      	strb	r3, [r0, #9]
    dbdc:	2305      	movs	r3, #5
    dbde:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    dbe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dbe4:	72c3      	strb	r3, [r0, #11]
    dbe6:	7303      	strb	r3, [r0, #12]
    dbe8:	e7ce      	b.n	db88 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    dbea:	079b      	lsls	r3, r3, #30
    dbec:	d526      	bpl.n	dc3c <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    dbee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    dbf2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    dbf6:	2002      	movs	r0, #2
    dbf8:	f7fd f86a 	bl	acd0 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    dbfc:	b920      	cbnz	r0, dc08 <event_connection_prepare+0xd88>
    dbfe:	4b81      	ldr	r3, [pc, #516]	; (de04 <event_connection_prepare+0xf84>)
    dc00:	9301      	str	r3, [sp, #4]
    dc02:	9300      	str	r3, [sp, #0]
    dc04:	4b80      	ldr	r3, [pc, #512]	; (de08 <event_connection_prepare+0xf88>)
    dc06:	e45d      	b.n	d4c4 <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    dc08:	8c23      	ldrh	r3, [r4, #32]
    dc0a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    dc0c:	2301      	movs	r3, #1
    dc0e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    dc10:	7a03      	ldrb	r3, [r0, #8]
    dc12:	f043 0303 	orr.w	r3, r3, #3
    dc16:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    dc18:	2306      	movs	r3, #6
    dc1a:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    dc1c:	230c      	movs	r3, #12
    dc1e:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    dc20:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    dc24:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    dc26:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    dc2a:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    dc2e:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    dc32:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    dc36:	f7fd feb7 	bl	b9a8 <packet_rx_enqueue>
    dc3a:	e60a      	b.n	d852 <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    dc3c:	4b71      	ldr	r3, [pc, #452]	; (de04 <event_connection_prepare+0xf84>)
    dc3e:	9301      	str	r3, [sp, #4]
    dc40:	9300      	str	r3, [sp, #0]
    dc42:	4b71      	ldr	r3, [pc, #452]	; (de08 <event_connection_prepare+0xf88>)
    dc44:	f7ff bad2 	b.w	d1ec <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc48:	486c      	ldr	r0, [pc, #432]	; (ddfc <event_connection_prepare+0xf7c>)
    dc4a:	f7f9 feac 	bl	79a6 <mem_acquire>
	if (node_tx) {
    dc4e:	4601      	mov	r1, r0
    dc50:	2800      	cmp	r0, #0
    dc52:	f43f adfe 	beq.w	d852 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    dc56:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    dc5a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc5e:	7903      	ldrb	r3, [r0, #4]
    dc60:	f043 0303 	orr.w	r3, r3, #3
    dc64:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    dc66:	2301      	movs	r3, #1
    dc68:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    dc6a:	2312      	movs	r3, #18
    dc6c:	71c3      	strb	r3, [r0, #7]
    dc6e:	e78b      	b.n	db88 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    dc70:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    dc74:	07d7      	lsls	r7, r2, #31
    dc76:	d551      	bpl.n	dd1c <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc78:	4860      	ldr	r0, [pc, #384]	; (ddfc <event_connection_prepare+0xf7c>)
    dc7a:	f7f9 fe94 	bl	79a6 <mem_acquire>
		if (node_tx) {
    dc7e:	4607      	mov	r7, r0
    dc80:	2800      	cmp	r0, #0
    dc82:	f43f ade6 	beq.w	d852 <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    dc86:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dc8a:	f36f 0300 	bfc	r3, #0, #1
    dc8e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    dc92:	b2db      	uxtb	r3, r3
    dc94:	f3c3 0982 	ubfx	r9, r3, #2, #3
    dc98:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    dc9c:	d138      	bne.n	dd10 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    dc9e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    dca2:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    dca6:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    dca8:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    dcac:	d51a      	bpl.n	dce4 <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    dcae:	2002      	movs	r0, #2
    dcb0:	f7fd f80e 	bl	acd0 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    dcb4:	b920      	cbnz	r0, dcc0 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    dcb6:	4b53      	ldr	r3, [pc, #332]	; (de04 <event_connection_prepare+0xf84>)
    dcb8:	9301      	str	r3, [sp, #4]
    dcba:	9300      	str	r3, [sp, #0]
    dcbc:	4b53      	ldr	r3, [pc, #332]	; (de0c <event_connection_prepare+0xf8c>)
    dcbe:	e401      	b.n	d4c4 <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    dcc0:	8c23      	ldrh	r3, [r4, #32]
    dcc2:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    dcc4:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    dcc8:	230c      	movs	r3, #12
    dcca:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    dccc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    dcd0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    dcd4:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    dcd6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    dcda:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dcde:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    dce0:	f7fd fe62 	bl	b9a8 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dce4:	793b      	ldrb	r3, [r7, #4]
    dce6:	f043 0303 	orr.w	r3, r3, #3
    dcea:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    dcec:	2305      	movs	r3, #5
    dcee:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    dcf0:	2318      	movs	r3, #24
    dcf2:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    dcf4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dcf8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    dcfc:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    dcfe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dd02:	f3c3 1342 	ubfx	r3, r3, #5, #3
    dd06:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    dd08:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    dd0c:	817b      	strh	r3, [r7, #10]
    dd0e:	e59c      	b.n	d84a <event_connection_prepare+0x9ca>
								 conn->latency +
    dd10:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    dd12:	3306      	adds	r3, #6
    dd14:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    dd16:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    dd1a:	e7e3      	b.n	dce4 <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    dd1c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    dd20:	1af3      	subs	r3, r6, r3
    dd22:	0419      	lsls	r1, r3, #16
    dd24:	f53f ad95 	bmi.w	d852 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    dd28:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    dd2c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    dd30:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    dd34:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    dd38:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    dd3c:	bf18      	it	ne
    dd3e:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    dd42:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    dd46:	bf1c      	itt	ne
    dd48:	f367 03c5 	bfine	r3, r7, #3, #3
    dd4c:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    dd50:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    dd54:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    dd58:	d008      	beq.n	dd6c <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    dd5a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dd5e:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    dd62:	095b      	lsrs	r3, r3, #5
    dd64:	f363 0702 	bfi	r7, r3, #0, #3
    dd68:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    dd6c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    dd70:	461f      	mov	r7, r3
    dd72:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dd76:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    dd7a:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    dd7c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    dd80:	d40b      	bmi.n	dd9a <event_connection_prepare+0xf1a>
    dd82:	b2fb      	uxtb	r3, r7
    dd84:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    dd88:	4283      	cmp	r3, r0
    dd8a:	d106      	bne.n	dd9a <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    dd8c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    dd90:	f003 0307 	and.w	r3, r3, #7
    dd94:	428b      	cmp	r3, r1
    dd96:	f43f ad5c 	beq.w	d852 <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    dd9a:	2002      	movs	r0, #2
    dd9c:	f7fc ff98 	bl	acd0 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    dda0:	2800      	cmp	r0, #0
    dda2:	d088      	beq.n	dcb6 <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    dda4:	8c23      	ldrh	r3, [r4, #32]
    dda6:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    dda8:	230c      	movs	r3, #12
    ddaa:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    ddac:	2300      	movs	r3, #0
    ddae:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    ddb0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ddb4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ddb8:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    ddba:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ddbe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ddc2:	7343      	strb	r3, [r0, #13]
    ddc4:	e737      	b.n	dc36 <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    ddc6:	4b0f      	ldr	r3, [pc, #60]	; (de04 <event_connection_prepare+0xf84>)
    ddc8:	9301      	str	r3, [sp, #4]
    ddca:	9300      	str	r3, [sp, #0]
    ddcc:	4b10      	ldr	r3, [pc, #64]	; (de10 <event_connection_prepare+0xf90>)
    ddce:	f7ff ba0d 	b.w	d1ec <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    ddd2:	f7fc ff67 	bl	aca4 <packet_rx_acquired_count_get>
    ddd6:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ddd8:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    dddc:	f7f9 fe12 	bl	7a04 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    dde0:	4438      	add	r0, r7
    dde2:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    dde4:	28ff      	cmp	r0, #255	; 0xff
    dde6:	d91d      	bls.n	de24 <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    dde8:	4b06      	ldr	r3, [pc, #24]	; (de04 <event_connection_prepare+0xf84>)
    ddea:	9301      	str	r3, [sp, #4]
    ddec:	9300      	str	r3, [sp, #0]
    ddee:	4a09      	ldr	r2, [pc, #36]	; (de14 <event_connection_prepare+0xf94>)
    ddf0:	4b09      	ldr	r3, [pc, #36]	; (de18 <event_connection_prepare+0xf98>)
    ddf2:	490a      	ldr	r1, [pc, #40]	; (de1c <event_connection_prepare+0xf9c>)
    ddf4:	480a      	ldr	r0, [pc, #40]	; (de20 <event_connection_prepare+0xfa0>)
    ddf6:	f7ff b853 	b.w	cea0 <event_connection_prepare+0x20>
    ddfa:	bf00      	nop
    ddfc:	20000a38 	.word	0x20000a38
    de00:	000141ff 	.word	0x000141ff
    de04:	00015af1 	.word	0x00015af1
    de08:	00018eb6 	.word	0x00018eb6
    de0c:	00018f12 	.word	0x00018f12
    de10:	00018f29 	.word	0x00018f29
    de14:	00016fae 	.word	0x00016fae
    de18:	00018ef0 	.word	0x00018ef0
    de1c:	00016060 	.word	0x00016060
    de20:	000190b8 	.word	0x000190b8
		if (_radio.packet_rx_data_count != free_count_rx) {
    de24:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    de28:	4283      	cmp	r3, r0
    de2a:	d129      	bne.n	de80 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    de2c:	4881      	ldr	r0, [pc, #516]	; (e034 <event_connection_prepare+0x11b4>)
    de2e:	f7f9 fdba 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    de32:	4601      	mov	r1, r0
    de34:	b320      	cbz	r0, de80 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    de36:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    de3a:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    de3e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    de42:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    de44:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    de46:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    de48:	f365 0301 	bfi	r3, r5, #0, #2
    de4c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de50:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    de52:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de54:	f043 0303 	orr.w	r3, r3, #3
    de58:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    de5a:	2309      	movs	r3, #9
    de5c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    de5e:	2314      	movs	r3, #20
    de60:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    de62:	231b      	movs	r3, #27
    de64:	720b      	strb	r3, [r1, #8]
    de66:	2300      	movs	r3, #0
    de68:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    de6a:	2348      	movs	r3, #72	; 0x48
    de6c:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    de6e:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    de70:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    de72:	4620      	mov	r0, r4
    de74:	f7fe ff34 	bl	cce0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    de78:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    de7c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    de80:	f894 3020 	ldrb.w	r3, [r4, #32]
    de84:	f994 501d 	ldrsb.w	r5, [r4, #29]
    de88:	486b      	ldr	r0, [pc, #428]	; (e038 <event_connection_prepare+0x11b8>)
    de8a:	496c      	ldr	r1, [pc, #432]	; (e03c <event_connection_prepare+0x11bc>)
    de8c:	68a2      	ldr	r2, [r4, #8]
    de8e:	9403      	str	r4, [sp, #12]
    de90:	3307      	adds	r3, #7
    de92:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    de96:	bf38      	it	cc
    de98:	4601      	movcc	r1, r0
    de9a:	b2db      	uxtb	r3, r3
    de9c:	e88d 000c 	stmia.w	sp, {r2, r3}
    dea0:	9102      	str	r1, [sp, #8]
    dea2:	1d23      	adds	r3, r4, #4
    dea4:	4622      	mov	r2, r4
    dea6:	990c      	ldr	r1, [sp, #48]	; 0x30
    dea8:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    deaa:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    deac:	f7fe fd90 	bl	c9d0 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    deb0:	8466      	strh	r6, [r4, #34]	; 0x22
}
    deb2:	b00f      	add	sp, #60	; 0x3c
    deb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    deb8:	f7fc fef4 	bl	aca4 <packet_rx_acquired_count_get>
    debc:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    debe:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    dec2:	f7f9 fd9f 	bl	7a04 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    dec6:	4438      	add	r0, r7
    dec8:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    deca:	28ff      	cmp	r0, #255	; 0xff
    decc:	d88c      	bhi.n	dde8 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    dece:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    ded2:	4283      	cmp	r3, r0
    ded4:	d005      	beq.n	dee2 <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    ded6:	4b5a      	ldr	r3, [pc, #360]	; (e040 <event_connection_prepare+0x11c0>)
    ded8:	9301      	str	r3, [sp, #4]
    deda:	9300      	str	r3, [sp, #0]
    dedc:	4b59      	ldr	r3, [pc, #356]	; (e044 <event_connection_prepare+0x11c4>)
    dede:	f7ff b985 	b.w	d1ec <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    dee2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    dee6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    deea:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    deee:	2100      	movs	r1, #0
    def0:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    def4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    def8:	f361 02c3 	bfi	r2, r1, #3, #1
    defc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    df00:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    df04:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    df06:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    df0a:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    df0c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    df10:	f7f9 fd78 	bl	7a04 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    df14:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    df18:	b10b      	cbz	r3, df1e <event_connection_prepare+0x109e>
			free_count_conn++;
    df1a:	3001      	adds	r0, #1
    df1c:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    df1e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    df22:	b10b      	cbz	r3, df28 <event_connection_prepare+0x10a8>
			free_count_conn++;
    df24:	3001      	adds	r0, #1
    df26:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    df28:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    df2a:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    df2e:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    df30:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    df32:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    df36:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    df38:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    df3a:	d052      	beq.n	dfe2 <event_connection_prepare+0x1162>
    df3c:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    df40:	42bb      	cmp	r3, r7
    df42:	d34e      	bcc.n	dfe2 <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    df44:	2002      	movs	r0, #2
    df46:	f7fc fec3 	bl	acd0 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    df4a:	2800      	cmp	r0, #0
    df4c:	d155      	bne.n	dffa <event_connection_prepare+0x117a>
    df4e:	4b3c      	ldr	r3, [pc, #240]	; (e040 <event_connection_prepare+0x11c0>)
    df50:	9301      	str	r3, [sp, #4]
    df52:	9300      	str	r3, [sp, #0]
    df54:	4b3b      	ldr	r3, [pc, #236]	; (e044 <event_connection_prepare+0x11c4>)
    df56:	f7ff bab5 	b.w	d4c4 <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    df5a:	b90b      	cbnz	r3, df60 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    df5c:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    df60:	3b01      	subs	r3, #1
    df62:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    df66:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    df6a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    df6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    df72:	4649      	mov	r1, r9
    df74:	6818      	ldr	r0, [r3, #0]
    df76:	f7f9 fd30 	bl	79da <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    df7a:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    df7e:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    df82:	3a01      	subs	r2, #1
    df84:	4293      	cmp	r3, r2
    df86:	db08      	blt.n	df9a <event_connection_prepare+0x111a>
    df88:	4b2d      	ldr	r3, [pc, #180]	; (e040 <event_connection_prepare+0x11c0>)
    df8a:	9301      	str	r3, [sp, #4]
    df8c:	9300      	str	r3, [sp, #0]
    df8e:	4a2e      	ldr	r2, [pc, #184]	; (e048 <event_connection_prepare+0x11c8>)
    df90:	4b2c      	ldr	r3, [pc, #176]	; (e044 <event_connection_prepare+0x11c4>)
    df92:	492e      	ldr	r1, [pc, #184]	; (e04c <event_connection_prepare+0x11cc>)
    df94:	482e      	ldr	r0, [pc, #184]	; (e050 <event_connection_prepare+0x11d0>)
    df96:	f7fe bf83 	b.w	cea0 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    df9a:	3301      	adds	r3, #1
    df9c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    dfa0:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    dfa4:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    dfa8:	4293      	cmp	r3, r2
    dfaa:	d1d6      	bne.n	df5a <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    dfac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    dfae:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    dfb2:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    dfb4:	bf9a      	itte	ls
    dfb6:	2334      	movls	r3, #52	; 0x34
    dfb8:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    dfbc:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    dfc0:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    dfc4:	fbb2 f2f1 	udiv	r2, r2, r1
    dfc8:	b2d2      	uxtb	r2, r2
    dfca:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    dfce:	b95a      	cbnz	r2, dfe8 <event_connection_prepare+0x1168>
    dfd0:	4b1b      	ldr	r3, [pc, #108]	; (e040 <event_connection_prepare+0x11c0>)
    dfd2:	9301      	str	r3, [sp, #4]
    dfd4:	9300      	str	r3, [sp, #0]
    dfd6:	4a1c      	ldr	r2, [pc, #112]	; (e048 <event_connection_prepare+0x11c8>)
    dfd8:	4b1a      	ldr	r3, [pc, #104]	; (e044 <event_connection_prepare+0x11c4>)
    dfda:	491c      	ldr	r1, [pc, #112]	; (e04c <event_connection_prepare+0x11cc>)
    dfdc:	481d      	ldr	r0, [pc, #116]	; (e054 <event_connection_prepare+0x11d4>)
    dfde:	f7fe bf5f 	b.w	cea0 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    dfe2:	f8df 9078 	ldr.w	r9, [pc, #120]	; e05c <event_connection_prepare+0x11dc>
    dfe6:	e7db      	b.n	dfa0 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    dfe8:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    dfec:	4b1a      	ldr	r3, [pc, #104]	; (e058 <event_connection_prepare+0x11d8>)
    dfee:	f7f9 fcb3 	bl	7958 <mem_init>
			packet_rx_allocate(4);
    dff2:	2004      	movs	r0, #4
    dff4:	f7fc fee4 	bl	adc0 <packet_rx_allocate>
    dff8:	e7a4      	b.n	df44 <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    dffa:	8c23      	ldrh	r3, [r4, #32]
    dffc:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    dffe:	2301      	movs	r3, #1
    e000:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e002:	7a03      	ldrb	r3, [r0, #8]
    e004:	f043 0303 	orr.w	r3, r3, #3
    e008:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    e00a:	2309      	movs	r3, #9
    e00c:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e00e:	2315      	movs	r3, #21
    e010:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    e012:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e014:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    e016:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    e018:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    e01a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    e01c:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    e01e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    e020:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    e022:	f7fd fcc1 	bl	b9a8 <packet_rx_enqueue>
    e026:	e72b      	b.n	de80 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e028:	4902      	ldr	r1, [pc, #8]	; (e034 <event_connection_prepare+0x11b4>)
    e02a:	4638      	mov	r0, r7
    e02c:	f7f9 fcd5 	bl	79da <mem_release>
    e030:	e40f      	b.n	d852 <event_connection_prepare+0x9d2>
    e032:	bf00      	nop
    e034:	20000a38 	.word	0x20000a38
    e038:	0000e38d 	.word	0x0000e38d
    e03c:	0000e0a5 	.word	0x0000e0a5
    e040:	00015af1 	.word	0x00015af1
    e044:	00018ef0 	.word	0x00018ef0
    e048:	00016fae 	.word	0x00016fae
    e04c:	00016060 	.word	0x00016060
    e050:	000190ef 	.word	0x000190ef
    e054:	00019149 	.word	0x00019149
    e058:	20000a0c 	.word	0x20000a0c
    e05c:	20000a24 	.word	0x20000a24

0000e060 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    e060:	f7fe bf0e 	b.w	ce80 <event_connection_prepare>

0000e064 <event_slave_prepare>:
    e064:	f7fe bf0c 	b.w	ce80 <event_connection_prepare>

0000e068 <connection_configure>:
{
    e068:	b510      	push	{r4, lr}
    e06a:	4604      	mov	r4, r0
	radio_reset();
    e06c:	f005 f998 	bl	133a0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    e070:	2000      	movs	r0, #0
    e072:	f005 f9bf 	bl	133f4 <radio_tx_power_set>
	radio_isr_set(isr);
    e076:	480a      	ldr	r0, [pc, #40]	; (e0a0 <connection_configure+0x38>)
    e078:	f005 f95c 	bl	13334 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    e07c:	f104 0010 	add.w	r0, r4, #16
    e080:	f005 f9d6 	bl	13430 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    e084:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    e086:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    e088:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    e08a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    e08e:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    e090:	f240 605b 	movw	r0, #1627	; 0x65b
    e094:	4319      	orrs	r1, r3
}
    e096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    e09a:	f005 ba71 	b.w	13580 <radio_crc_configure>
    e09e:	bf00      	nop
    e0a0:	0000f751 	.word	0x0000f751

0000e0a4 <event_slave>:
{
    e0a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e0a8:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    e0aa:	4b71      	ldr	r3, [pc, #452]	; (e270 <event_slave+0x1cc>)
    e0ac:	7cda      	ldrb	r2, [r3, #19]
{
    e0ae:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    e0b0:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    e0b4:	461d      	mov	r5, r3
    e0b6:	b172      	cbz	r2, e0d6 <event_slave+0x32>
    e0b8:	4b6e      	ldr	r3, [pc, #440]	; (e274 <event_slave+0x1d0>)
    e0ba:	9301      	str	r3, [sp, #4]
    e0bc:	9300      	str	r3, [sp, #0]
    e0be:	4a6e      	ldr	r2, [pc, #440]	; (e278 <event_slave+0x1d4>)
    e0c0:	4b6e      	ldr	r3, [pc, #440]	; (e27c <event_slave+0x1d8>)
    e0c2:	496f      	ldr	r1, [pc, #444]	; (e280 <event_slave+0x1dc>)
    e0c4:	486f      	ldr	r0, [pc, #444]	; (e284 <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    e0c6:	f7f2 ff61 	bl	f8c <printk>
    e0ca:	4040      	eors	r0, r0
    e0cc:	f380 8811 	msr	BASEPRI, r0
    e0d0:	f04f 0004 	mov.w	r0, #4
    e0d4:	df02      	svc	2
    e0d6:	7c1b      	ldrb	r3, [r3, #16]
    e0d8:	8c22      	ldrh	r2, [r4, #32]
    e0da:	b2db      	uxtb	r3, r3
    e0dc:	3207      	adds	r2, #7
    e0de:	4293      	cmp	r3, r2
    e0e0:	d007      	beq.n	e0f2 <event_slave+0x4e>
    e0e2:	4b64      	ldr	r3, [pc, #400]	; (e274 <event_slave+0x1d0>)
    e0e4:	9301      	str	r3, [sp, #4]
    e0e6:	9300      	str	r3, [sp, #0]
    e0e8:	4a63      	ldr	r2, [pc, #396]	; (e278 <event_slave+0x1d4>)
    e0ea:	4b64      	ldr	r3, [pc, #400]	; (e27c <event_slave+0x1d8>)
    e0ec:	4964      	ldr	r1, [pc, #400]	; (e280 <event_slave+0x1dc>)
    e0ee:	4866      	ldr	r0, [pc, #408]	; (e288 <event_slave+0x1e4>)
    e0f0:	e7e9      	b.n	e0c6 <event_slave+0x22>
	_radio.packet_counter = 0;
    e0f2:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    e0f6:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    e0fa:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    e0fc:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    e0fe:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    e100:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    e102:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    e104:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    e106:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    e10a:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    e10c:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    e10e:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    e110:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    e112:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    e114:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    e116:	f7ff ffa7 	bl	e068 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    e11a:	2096      	movs	r0, #150	; 0x96
    e11c:	f005 faea 	bl	136f4 <radio_tmr_tifs_set>
				     conn->phy_flags);
    e120:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    e124:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e128:	09d3      	lsrs	r3, r2, #7
    e12a:	4631      	mov	r1, r6
    e12c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e130:	f000 0007 	and.w	r0, r0, #7
    e134:	f005 fa4e 	bl	135d4 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e138:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    e13c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    e140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    e144:	4620      	mov	r0, r4
    e146:	3108      	adds	r1, #8
    e148:	f7fd f920 	bl	b38c <rx_packet_set>
	if (conn->data_chan_sel) {
    e14c:	7f63      	ldrb	r3, [r4, #29]
    e14e:	f013 0f40 	tst.w	r3, #64	; 0x40
    e152:	f104 0217 	add.w	r2, r4, #23
    e156:	d05a      	beq.n	e20e <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    e158:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    e15a:	8be1      	ldrh	r1, [r4, #30]
    e15c:	3801      	subs	r0, #1
    e15e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e162:	b280      	uxth	r0, r0
    e164:	f7fe fd78 	bl	cc58 <chan_sel_2>
	chan_set(data_chan_use);
    e168:	f7fe f84c 	bl	c204 <chan_set>
	conn->slave.window_widening_event_us +=
    e16c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e16e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    e170:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    e172:	2200      	movs	r2, #0
    e174:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    e176:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    e178:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    e17a:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    e17c:	bf88      	it	hi
    e17e:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    e180:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e182:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    e184:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    e186:	4413      	add	r3, r2
    e188:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    e18a:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    e18c:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    e18e:	f107 0109 	add.w	r1, r7, #9
    e192:	4630      	mov	r0, r6
    e194:	f005 faba 	bl	1370c <radio_tmr_start>
    e198:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    e19a:	f005 fb53 	bl	13844 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    e19e:	4630      	mov	r0, r6
    e1a0:	f005 fb72 	bl	13888 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    e1a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    e1a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    e1a8:	f103 0650 	add.w	r6, r3, #80	; 0x50
    e1ac:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    e1b0:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e1b4:	2101      	movs	r1, #1
    e1b6:	f000 0007 	and.w	r0, r0, #7
    e1ba:	f005 f992 	bl	134e2 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    e1be:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    e1c0:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    e1c2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e1c6:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    e1ca:	2802      	cmp	r0, #2
    e1cc:	d03f      	beq.n	e24e <event_slave+0x1aa>
		return 40;
    e1ce:	2804      	cmp	r0, #4
    e1d0:	bf0c      	ite	eq
    e1d2:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    e1d6:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    e1d8:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    e1da:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    e1dc:	f005 f983 	bl	134e6 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    e1e0:	4430      	add	r0, r6
    e1e2:	f005 fb11 	bl	13808 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    e1e6:	f894 1020 	ldrb.w	r1, [r4, #32]
    e1ea:	3107      	adds	r1, #7
    e1ec:	463a      	mov	r2, r7
    e1ee:	b2c9      	uxtb	r1, r1
    e1f0:	4620      	mov	r0, r4
    e1f2:	f7fe fab9 	bl	c768 <preempt_calc>
    e1f6:	4603      	mov	r3, r0
    e1f8:	b358      	cbz	r0, e252 <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    e1fa:	2304      	movs	r3, #4
    e1fc:	752b      	strb	r3, [r5, #20]
		radio_disable();
    e1fe:	f005 f983 	bl	13508 <radio_disable>
	packet_tx_enqueue(2);
    e202:	2002      	movs	r0, #2
}
    e204:	b002      	add	sp, #8
    e206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    e20a:	f7fd bf11 	b.w	c030 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e20e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    e210:	7fa6      	ldrb	r6, [r4, #30]
    e212:	fb01 6606 	mla	r6, r1, r6, r6
    e216:	7fe1      	ldrb	r1, [r4, #31]
    e218:	2025      	movs	r0, #37	; 0x25
    e21a:	440e      	add	r6, r1
    e21c:	fb96 f1f0 	sdiv	r1, r6, r0
    e220:	fb00 6611 	mls	r6, r0, r1, r6
    e224:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e226:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    e228:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e22a:	5c51      	ldrb	r1, [r2, r1]
    e22c:	f006 0607 	and.w	r6, r6, #7
    e230:	fa41 f606 	asr.w	r6, r1, r6
    e234:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    e236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e23a:	d495      	bmi.n	e168 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    e23c:	fbb0 f1f3 	udiv	r1, r0, r3
    e240:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    e244:	b2c9      	uxtb	r1, r1
    e246:	4610      	mov	r0, r2
    e248:	f7fc fd10 	bl	ac6c <chan_sel_remap>
    e24c:	e78c      	b.n	e168 <event_slave+0xc4>
		return 24;
    e24e:	2318      	movs	r3, #24
    e250:	e7c2      	b.n	e1d8 <event_slave+0x134>
		ticker_status =
    e252:	4a0e      	ldr	r2, [pc, #56]	; (e28c <event_slave+0x1e8>)
    e254:	4601      	mov	r1, r0
    e256:	f7fa fb4b 	bl	88f0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e25a:	f030 0302 	bics.w	r3, r0, #2
    e25e:	d0d0      	beq.n	e202 <event_slave+0x15e>
    e260:	4b04      	ldr	r3, [pc, #16]	; (e274 <event_slave+0x1d0>)
    e262:	9301      	str	r3, [sp, #4]
    e264:	9300      	str	r3, [sp, #0]
    e266:	4a04      	ldr	r2, [pc, #16]	; (e278 <event_slave+0x1d4>)
    e268:	4b04      	ldr	r3, [pc, #16]	; (e27c <event_slave+0x1d8>)
    e26a:	4905      	ldr	r1, [pc, #20]	; (e280 <event_slave+0x1dc>)
    e26c:	4808      	ldr	r0, [pc, #32]	; (e290 <event_slave+0x1ec>)
    e26e:	e72a      	b.n	e0c6 <event_slave+0x22>
    e270:	200008dc 	.word	0x200008dc
    e274:	00015af1 	.word	0x00015af1
    e278:	00016fae 	.word	0x00016fae
    e27c:	00018f42 	.word	0x00018f42
    e280:	00016060 	.word	0x00016060
    e284:	00019186 	.word	0x00019186
    e288:	00019239 	.word	0x00019239
    e28c:	0000bda5 	.word	0x0000bda5
    e290:	0001906a 	.word	0x0001906a

0000e294 <prepare_pdu_data_tx>:
	    conn->empty ||
    e294:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    e298:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    e29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e29e:	4604      	mov	r4, r0
    e2a0:	460e      	mov	r6, r1
	if (/* empty packet */
    e2a2:	d109      	bne.n	e2b8 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    e2a4:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    e2a8:	b131      	cbz	r1, e2b8 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    e2aa:	f01c 0f08 	tst.w	ip, #8
    e2ae:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    e2b2:	d022      	beq.n	e2fa <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    e2b4:	4571      	cmp	r1, lr
    e2b6:	d020      	beq.n	e2fa <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    e2b8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    e2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e2c0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    e2c4:	f005 f972 	bl	135ac <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e2c8:	7803      	ldrb	r3, [r0, #0]
    e2ca:	2201      	movs	r2, #1
    e2cc:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    e2d0:	2200      	movs	r2, #0
    e2d2:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    e2d4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e2d8:	7003      	strb	r3, [r0, #0]
    e2da:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    e2dc:	b152      	cbz	r2, e2f4 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    e2de:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    e2e2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    e2e4:	7803      	ldrb	r3, [r0, #0]
    e2e6:	f36f 1347 	bfc	r3, #5, #3
    e2ea:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    e2ec:	2300      	movs	r3, #0
    e2ee:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    e2f0:	6030      	str	r0, [r6, #0]
    e2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    e2f4:	f362 1304 	bfi	r3, r2, #4, #1
    e2f8:	e7f3      	b.n	e2e2 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    e2fa:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    e2fe:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    e302:	1d0d      	adds	r5, r1, #4
    e304:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    e306:	b913      	cbnz	r3, e30e <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    e308:	7843      	ldrb	r3, [r0, #1]
    e30a:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    e30e:	b122      	cbz	r2, e31a <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e310:	5cab      	ldrb	r3, [r5, r2]
    e312:	2701      	movs	r7, #1
    e314:	f367 0301 	bfi	r3, r7, #0, #2
    e318:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    e31a:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    e31e:	1abf      	subs	r7, r7, r2
    e320:	b2ff      	uxtb	r7, r7
    e322:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    e324:	5cab      	ldrb	r3, [r5, r2]
    e326:	f36f 1304 	bfc	r3, #4, #1
    e32a:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    e32c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    e330:	f003 0307 	and.w	r3, r3, #7
    e334:	2b02      	cmp	r3, #2
    e336:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    e338:	bf15      	itete	ne
    e33a:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    e33c:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    e33e:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    e340:	3b0b      	subeq	r3, #11
    e342:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    e344:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    e348:	bf18      	it	ne
    e34a:	3b04      	subne	r3, #4
    e34c:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    e350:	bf18      	it	ne
    e352:	b29b      	uxthne	r3, r3
    e354:	4563      	cmp	r3, ip
    e356:	bf28      	it	cs
    e358:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    e35a:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    e35c:	bf81      	itttt	hi
    e35e:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    e360:	5cab      	ldrbhi	r3, [r5, r2]
    e362:	f043 0310 	orrhi.w	r3, r3, #16
    e366:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    e368:	680b      	ldr	r3, [r1, #0]
    e36a:	b11b      	cbz	r3, e374 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    e36c:	5cab      	ldrb	r3, [r5, r2]
    e36e:	f043 0310 	orr.w	r3, r3, #16
    e372:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    e374:	f1be 0f00 	cmp.w	lr, #0
    e378:	d1b4      	bne.n	e2e4 <prepare_pdu_data_tx+0x50>
    e37a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    e37e:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    e380:	bf1c      	itt	ne
    e382:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    e386:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    e38a:	e7ab      	b.n	e2e4 <prepare_pdu_data_tx+0x50>

0000e38c <event_master>:
{
    e38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e38e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    e390:	4b56      	ldr	r3, [pc, #344]	; (e4ec <event_master+0x160>)
    e392:	7cd9      	ldrb	r1, [r3, #19]
{
    e394:	b085      	sub	sp, #20
    e396:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    e398:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    e39c:	461d      	mov	r5, r3
    e39e:	b171      	cbz	r1, e3be <event_master+0x32>
    e3a0:	4b53      	ldr	r3, [pc, #332]	; (e4f0 <event_master+0x164>)
    e3a2:	9301      	str	r3, [sp, #4]
    e3a4:	9300      	str	r3, [sp, #0]
    e3a6:	4a53      	ldr	r2, [pc, #332]	; (e4f4 <event_master+0x168>)
    e3a8:	4b53      	ldr	r3, [pc, #332]	; (e4f8 <event_master+0x16c>)
    e3aa:	4954      	ldr	r1, [pc, #336]	; (e4fc <event_master+0x170>)
    e3ac:	4854      	ldr	r0, [pc, #336]	; (e500 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    e3ae:	f7f2 fded 	bl	f8c <printk>
    e3b2:	4040      	eors	r0, r0
    e3b4:	f380 8811 	msr	BASEPRI, r0
    e3b8:	f04f 0004 	mov.w	r0, #4
    e3bc:	df02      	svc	2
    e3be:	7c1b      	ldrb	r3, [r3, #16]
    e3c0:	8c21      	ldrh	r1, [r4, #32]
    e3c2:	b2db      	uxtb	r3, r3
    e3c4:	3107      	adds	r1, #7
    e3c6:	428b      	cmp	r3, r1
    e3c8:	d007      	beq.n	e3da <event_master+0x4e>
    e3ca:	4b49      	ldr	r3, [pc, #292]	; (e4f0 <event_master+0x164>)
    e3cc:	9301      	str	r3, [sp, #4]
    e3ce:	9300      	str	r3, [sp, #0]
    e3d0:	4a48      	ldr	r2, [pc, #288]	; (e4f4 <event_master+0x168>)
    e3d2:	4b49      	ldr	r3, [pc, #292]	; (e4f8 <event_master+0x16c>)
    e3d4:	4949      	ldr	r1, [pc, #292]	; (e4fc <event_master+0x170>)
    e3d6:	484b      	ldr	r0, [pc, #300]	; (e504 <event_master+0x178>)
    e3d8:	e7e9      	b.n	e3ae <event_master+0x22>
	_radio.packet_counter = 0;
    e3da:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    e3de:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    e3e2:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    e3e4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    e3e6:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    e3e8:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    e3ea:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    e3ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    e3ee:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    e3f2:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    e3f4:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    e3f6:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    e3f8:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    e3fa:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    e3fc:	f7fd fe18 	bl	c030 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    e400:	a903      	add	r1, sp, #12
    e402:	4620      	mov	r0, r4
    e404:	f7ff ff46 	bl	e294 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    e408:	9903      	ldr	r1, [sp, #12]
    e40a:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    e40e:	780b      	ldrb	r3, [r1, #0]
    e410:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    e414:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e418:	f362 0382 	bfi	r3, r2, #2, #1
    e41c:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    e41e:	4620      	mov	r0, r4
    e420:	f7ff fe22 	bl	e068 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    e424:	2096      	movs	r0, #150	; 0x96
    e426:	f005 f965 	bl	136f4 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    e42a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e42e:	f000 0007 	and.w	r0, r0, #7
    e432:	f005 f8c3 	bl	135bc <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    e436:	9903      	ldr	r1, [sp, #12]
    e438:	4620      	mov	r0, r4
    e43a:	f7fc ffd3 	bl	b3e4 <tx_packet_set>
	if (conn->data_chan_sel) {
    e43e:	7f63      	ldrb	r3, [r4, #29]
    e440:	f013 0f40 	tst.w	r3, #64	; 0x40
    e444:	f104 0217 	add.w	r2, r4, #23
    e448:	d021      	beq.n	e48e <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    e44a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    e44c:	8be1      	ldrh	r1, [r4, #30]
    e44e:	3801      	subs	r0, #1
    e450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e454:	b280      	uxth	r0, r0
    e456:	f7fe fbff 	bl	cc58 <chan_sel_2>
	chan_set(data_chan_use);
    e45a:	f7fd fed3 	bl	c204 <chan_set>
		remainder_us = radio_tmr_start(1,
    e45e:	68ea      	ldr	r2, [r5, #12]
    e460:	f107 0109 	add.w	r1, r7, #9
    e464:	2001      	movs	r0, #1
    e466:	f005 f951 	bl	1370c <radio_tmr_start>
		radio_tmr_end_capture();
    e46a:	f005 fa1f 	bl	138ac <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    e46e:	f894 1020 	ldrb.w	r1, [r4, #32]
    e472:	3107      	adds	r1, #7
    e474:	463a      	mov	r2, r7
    e476:	b2c9      	uxtb	r1, r1
    e478:	4620      	mov	r0, r4
    e47a:	f7fe f975 	bl	c768 <preempt_calc>
	if (0 !=
    e47e:	4603      	mov	r3, r0
    e480:	b328      	cbz	r0, e4ce <event_master+0x142>
		_radio.state = STATE_STOP;
    e482:	2304      	movs	r3, #4
    e484:	752b      	strb	r3, [r5, #20]
		radio_disable();
    e486:	f005 f83f 	bl	13508 <radio_disable>
}
    e48a:	b005      	add	sp, #20
    e48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e48e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    e490:	7fa6      	ldrb	r6, [r4, #30]
    e492:	fb01 6606 	mla	r6, r1, r6, r6
    e496:	7fe1      	ldrb	r1, [r4, #31]
    e498:	2025      	movs	r0, #37	; 0x25
    e49a:	440e      	add	r6, r1
    e49c:	fb96 f1f0 	sdiv	r1, r6, r0
    e4a0:	fb00 6611 	mls	r6, r0, r1, r6
    e4a4:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e4a6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    e4a8:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e4aa:	5c51      	ldrb	r1, [r2, r1]
    e4ac:	f006 0607 	and.w	r6, r6, #7
    e4b0:	fa41 f606 	asr.w	r6, r1, r6
    e4b4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    e4b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e4ba:	d4ce      	bmi.n	e45a <event_master+0xce>
		chan_index = chan_next % chan_count;
    e4bc:	fbb0 f1f3 	udiv	r1, r0, r3
    e4c0:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    e4c4:	b2c9      	uxtb	r1, r1
    e4c6:	4610      	mov	r0, r2
    e4c8:	f7fc fbd0 	bl	ac6c <chan_sel_remap>
    e4cc:	e7c5      	b.n	e45a <event_master+0xce>
		ticker_status =
    e4ce:	4a0e      	ldr	r2, [pc, #56]	; (e508 <event_master+0x17c>)
    e4d0:	4601      	mov	r1, r0
    e4d2:	f7fa fa0d 	bl	88f0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e4d6:	f030 0302 	bics.w	r3, r0, #2
    e4da:	d0d6      	beq.n	e48a <event_master+0xfe>
    e4dc:	4b04      	ldr	r3, [pc, #16]	; (e4f0 <event_master+0x164>)
    e4de:	9301      	str	r3, [sp, #4]
    e4e0:	9300      	str	r3, [sp, #0]
    e4e2:	4a04      	ldr	r2, [pc, #16]	; (e4f4 <event_master+0x168>)
    e4e4:	4b04      	ldr	r3, [pc, #16]	; (e4f8 <event_master+0x16c>)
    e4e6:	4905      	ldr	r1, [pc, #20]	; (e4fc <event_master+0x170>)
    e4e8:	4808      	ldr	r0, [pc, #32]	; (e50c <event_master+0x180>)
    e4ea:	e760      	b.n	e3ae <event_master+0x22>
    e4ec:	200008dc 	.word	0x200008dc
    e4f0:	00015af1 	.word	0x00015af1
    e4f4:	00016fae 	.word	0x00016fae
    e4f8:	00018f4e 	.word	0x00018f4e
    e4fc:	00016060 	.word	0x00016060
    e500:	00019186 	.word	0x00019186
    e504:	00019239 	.word	0x00019239
    e508:	0000bda5 	.word	0x0000bda5
    e50c:	0001906a 	.word	0x0001906a

0000e510 <isr_rx_conn_pkt_ctrl>:
{
    e510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    e514:	7ac7      	ldrb	r7, [r0, #11]
{
    e516:	4604      	mov	r4, r0
    e518:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    e51a:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    e51e:	2f19      	cmp	r7, #25
    e520:	f201 80e0 	bhi.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
    e524:	e8df f017 	tbh	[pc, r7, lsl #1]
    e528:	0081001a 	.word	0x0081001a
    e52c:	00cc00bd 	.word	0x00cc00bd
    e530:	012200fa 	.word	0x012200fa
    e534:	05850154 	.word	0x05850154
    e538:	01c40190 	.word	0x01c40190
    e53c:	021c01f2 	.word	0x021c01f2
    e540:	02b6024d 	.word	0x02b6024d
    e544:	02ce01a6 	.word	0x02ce01a6
    e548:	04a40421 	.word	0x04a40421
    e54c:	057a0560 	.word	0x057a0560
    e550:	06480648 	.word	0x06480648
    e554:	07ea071d 	.word	0x07ea071d
    e558:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    e55c:	4ecb      	ldr	r6, [pc, #812]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e55e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e562:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e566:	2b00      	cmp	r3, #0
    e568:	f281 80bc 	bge.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    e56c:	7a41      	ldrb	r1, [r0, #9]
    e56e:	2000      	movs	r0, #0
    e570:	f7fc fb50 	bl	ac14 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e574:	2800      	cmp	r0, #0
    e576:	f001 80b5 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    e57a:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    e57e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    e580:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    e582:	041b      	lsls	r3, r3, #16
    e584:	f101 80c4 	bmi.w	f710 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e588:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e58c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    e590:	429a      	cmp	r2, r3
    e592:	d007      	beq.n	e5a4 <isr_rx_conn_pkt_ctrl+0x94>
    e594:	4bbe      	ldr	r3, [pc, #760]	; (e890 <isr_rx_conn_pkt_ctrl+0x380>)
    e596:	9301      	str	r3, [sp, #4]
    e598:	9300      	str	r3, [sp, #0]
    e59a:	4bbe      	ldr	r3, [pc, #760]	; (e894 <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e59c:	4abe      	ldr	r2, [pc, #760]	; (e898 <isr_rx_conn_pkt_ctrl+0x388>)
    e59e:	49bf      	ldr	r1, [pc, #764]	; (e89c <isr_rx_conn_pkt_ctrl+0x38c>)
    e5a0:	48bf      	ldr	r0, [pc, #764]	; (e8a0 <isr_rx_conn_pkt_ctrl+0x390>)
    e5a2:	e0f7      	b.n	e794 <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    e5a4:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    e5a8:	b90a      	cbnz	r2, e5ae <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    e5aa:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    e5ae:	7b22      	ldrb	r2, [r4, #12]
    e5b0:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    e5b4:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    e5b8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e5bc:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    e5be:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    e5c2:	7c20      	ldrb	r0, [r4, #16]
    e5c4:	7be2      	ldrb	r2, [r4, #15]
    e5c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    e5ca:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    e5ce:	7ca0      	ldrb	r0, [r4, #18]
    e5d0:	7c62      	ldrb	r2, [r4, #17]
    e5d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    e5d6:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    e5da:	7ce2      	ldrb	r2, [r4, #19]
    e5dc:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    e5de:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    e5e2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    e5e6:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    e5ea:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    e5ee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e5f2:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    e5f6:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    e5f8:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    e5fc:	2201      	movs	r2, #1
    e5fe:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    e602:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e606:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e60a:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e60e:	4293      	cmp	r3, r2
    e610:	d007      	beq.n	e622 <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    e612:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e616:	f003 0307 	and.w	r3, r3, #7
    e61a:	2b04      	cmp	r3, #4
    e61c:	d101      	bne.n	e622 <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e61e:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    e622:	2000      	movs	r0, #0
    e624:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    e628:	e038      	b.n	e69c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    e62a:	4b98      	ldr	r3, [pc, #608]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e62c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e630:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e634:	2b00      	cmp	r3, #0
    e636:	f281 8055 	bge.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    e63a:	7a41      	ldrb	r1, [r0, #9]
    e63c:	2001      	movs	r0, #1
    e63e:	f7fc fae9 	bl	ac14 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e642:	2800      	cmp	r0, #0
    e644:	f001 804e 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    e648:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    e64c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    e64e:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    e650:	041f      	lsls	r7, r3, #16
    e652:	f101 805d 	bmi.w	f710 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e656:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e65a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e65e:	429a      	cmp	r2, r3
    e660:	d004      	beq.n	e66c <isr_rx_conn_pkt_ctrl+0x15c>
    e662:	4b8b      	ldr	r3, [pc, #556]	; (e890 <isr_rx_conn_pkt_ctrl+0x380>)
    e664:	9301      	str	r3, [sp, #4]
    e666:	9300      	str	r3, [sp, #0]
    e668:	4b8e      	ldr	r3, [pc, #568]	; (e8a4 <isr_rx_conn_pkt_ctrl+0x394>)
    e66a:	e797      	b.n	e59c <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    e66c:	2205      	movs	r2, #5
    e66e:	f104 010c 	add.w	r1, r4, #12
    e672:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e676:	f7f3 fac1 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    e67a:	7c63      	ldrb	r3, [r4, #17]
    e67c:	7ca2      	ldrb	r2, [r4, #18]
    e67e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    e682:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    e686:	2302      	movs	r3, #2
    e688:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    e68c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    e690:	2000      	movs	r0, #0
	conn->llcp_ack--;
    e692:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    e694:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    e698:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    e69c:	b003      	add	sp, #12
    e69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    e6a2:	7a41      	ldrb	r1, [r0, #9]
    e6a4:	2002      	movs	r0, #2
    e6a6:	f7fc fab5 	bl	ac14 <pdu_len_cmp>
    e6aa:	2800      	cmp	r0, #0
    e6ac:	f001 801a 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    e6b0:	4b76      	ldr	r3, [pc, #472]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e6b2:	7b22      	ldrb	r2, [r4, #12]
    e6b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e6b8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    e6bc:	2000      	movs	r0, #0
	return nack;
    e6be:	e7ed      	b.n	e69c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    e6c0:	4e72      	ldr	r6, [pc, #456]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e6c2:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    e6c6:	f998 301d 	ldrsb.w	r3, [r8, #29]
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	f281 800a 	bge.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    e6d0:	7a41      	ldrb	r1, [r0, #9]
    e6d2:	2003      	movs	r0, #3
    e6d4:	f7fc fa9e 	bl	ac14 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e6d8:	2800      	cmp	r0, #0
    e6da:	f001 8003 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    e6de:	2208      	movs	r2, #8
    e6e0:	f104 0116 	add.w	r1, r4, #22
    e6e4:	f108 0094 	add.w	r0, r8, #148	; 0x94
    e6e8:	f7f3 fa88 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    e6ec:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    e6f0:	2204      	movs	r2, #4
    e6f2:	f104 011e 	add.w	r1, r4, #30
    e6f6:	f500 7089 	add.w	r0, r0, #274	; 0x112
    e6fa:	f7f3 fa7f 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    e6fe:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    e702:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e706:	f042 0204 	orr.w	r2, r2, #4
    e70a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    e70e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    e712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    e716:	2301      	movs	r3, #1
    e718:	702b      	strb	r3, [r5, #0]
    e71a:	e7cf      	b.n	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    e71c:	4d5b      	ldr	r5, [pc, #364]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e71e:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    e722:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e726:	2b00      	cmp	r3, #0
    e728:	f2c0 87dc 	blt.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    e72c:	7a41      	ldrb	r1, [r0, #9]
    e72e:	2004      	movs	r0, #4
    e730:	f7fc fa70 	bl	ac14 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e734:	2800      	cmp	r0, #0
    e736:	f000 87d5 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    e73a:	2208      	movs	r2, #8
    e73c:	f104 010c 	add.w	r1, r4, #12
    e740:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    e744:	f7f3 fa5a 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    e748:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    e74c:	2204      	movs	r2, #4
    e74e:	f104 0114 	add.w	r1, r4, #20
    e752:	f500 708b 	add.w	r0, r0, #278	; 0x116
    e756:	f7f3 fa51 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    e75a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    e75e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    e762:	f043 0304 	orr.w	r3, r3, #4
    e766:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    e76a:	e7a7      	b.n	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    e76c:	4b47      	ldr	r3, [pc, #284]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e76e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e772:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    e776:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e77a:	42b3      	cmp	r3, r6
    e77c:	d012      	beq.n	e7a4 <isr_rx_conn_pkt_ctrl+0x294>
    e77e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    e782:	2b03      	cmp	r3, #3
    e784:	d00e      	beq.n	e7a4 <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    e786:	4b42      	ldr	r3, [pc, #264]	; (e890 <isr_rx_conn_pkt_ctrl+0x380>)
    e788:	9301      	str	r3, [sp, #4]
    e78a:	9300      	str	r3, [sp, #0]
    e78c:	4a42      	ldr	r2, [pc, #264]	; (e898 <isr_rx_conn_pkt_ctrl+0x388>)
    e78e:	4b46      	ldr	r3, [pc, #280]	; (e8a8 <isr_rx_conn_pkt_ctrl+0x398>)
    e790:	4942      	ldr	r1, [pc, #264]	; (e89c <isr_rx_conn_pkt_ctrl+0x38c>)
    e792:	4846      	ldr	r0, [pc, #280]	; (e8ac <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e794:	f7f2 fbfa 	bl	f8c <printk>
    e798:	4040      	eors	r0, r0
    e79a:	f380 8811 	msr	BASEPRI, r0
    e79e:	f04f 0004 	mov.w	r0, #4
    e7a2:	df02      	svc	2
		if (_radio.conn_curr->role ||
    e7a4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e7a8:	2b00      	cmp	r3, #0
    e7aa:	f2c0 879b 	blt.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    e7ae:	7a61      	ldrb	r1, [r4, #9]
    e7b0:	2005      	movs	r0, #5
    e7b2:	f7fc fa2f 	bl	ac14 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e7b6:	2800      	cmp	r0, #0
    e7b8:	f000 8794 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    e7bc:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e7be:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    e7c0:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    e7c2:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e7c6:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    e7ca:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    e7ce:	e765      	b.n	e69c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    e7d0:	7a41      	ldrb	r1, [r0, #9]
    e7d2:	2006      	movs	r0, #6
    e7d4:	f7fc fa1e 	bl	ac14 <pdu_len_cmp>
    e7d8:	2800      	cmp	r0, #0
    e7da:	f000 8783 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    e7de:	4b2b      	ldr	r3, [pc, #172]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e7e0:	7cda      	ldrb	r2, [r3, #19]
    e7e2:	2a03      	cmp	r2, #3
    e7e4:	4619      	mov	r1, r3
    e7e6:	d124      	bne.n	e832 <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    e7e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e7ec:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    e7f0:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    e7f4:	4290      	cmp	r0, r2
    e7f6:	d003      	beq.n	e800 <isr_rx_conn_pkt_ctrl+0x2f0>
    e7f8:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    e7fc:	2803      	cmp	r0, #3
    e7fe:	d1c2      	bne.n	e786 <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    e800:	2000      	movs	r0, #0
    e802:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    e806:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e808:	2003      	movs	r0, #3
    e80a:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    e80e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    e812:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    e816:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    e81a:	065e      	lsls	r6, r3, #25
    e81c:	d505      	bpl.n	e82a <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    e81e:	f36f 1386 	bfc	r3, #6, #1
    e822:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    e826:	2309      	movs	r3, #9
    e828:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    e82a:	2301      	movs	r3, #1
    e82c:	702b      	strb	r3, [r5, #0]
				break;
    e82e:	f000 bcbf 	b.w	f1b0 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    e832:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e836:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    e83a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e83e:	f36f 03c3 	bfc	r3, #3, #1
    e842:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    e846:	e7e4      	b.n	e812 <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    e848:	4b10      	ldr	r3, [pc, #64]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e84a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e84e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e852:	2b00      	cmp	r3, #0
    e854:	f280 8746 	bge.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    e858:	7a41      	ldrb	r1, [r0, #9]
    e85a:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e85c:	f7fc f9da 	bl	ac14 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e860:	2800      	cmp	r0, #0
    e862:	f000 873f 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e866:	4631      	mov	r1, r6
    e868:	4628      	mov	r0, r5
}
    e86a:	b003      	add	sp, #12
    e86c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e870:	f7fe ba7e 	b.w	cd70 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    e874:	4b05      	ldr	r3, [pc, #20]	; (e88c <isr_rx_conn_pkt_ctrl+0x37c>)
    e876:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e87a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e87e:	2b00      	cmp	r3, #0
    e880:	f2c0 8730 	blt.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e884:	7a41      	ldrb	r1, [r0, #9]
    e886:	200e      	movs	r0, #14
    e888:	e7e8      	b.n	e85c <isr_rx_conn_pkt_ctrl+0x34c>
    e88a:	bf00      	nop
    e88c:	200008dc 	.word	0x200008dc
    e890:	00015af1 	.word	0x00015af1
    e894:	00018fad 	.word	0x00018fad
    e898:	00016fae 	.word	0x00016fae
    e89c:	00016060 	.word	0x00016060
    e8a0:	00019436 	.word	0x00019436
    e8a4:	00018fb9 	.word	0x00018fb9
    e8a8:	00018c5f 	.word	0x00018c5f
    e8ac:	00019478 	.word	0x00019478
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    e8b0:	7a41      	ldrb	r1, [r0, #9]
    e8b2:	2009      	movs	r0, #9
    e8b4:	f7fc f9ae 	bl	ac14 <pdu_len_cmp>
    e8b8:	2800      	cmp	r0, #0
    e8ba:	f000 8713 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e8be:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    e8c0:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e8c2:	48b2      	ldr	r0, [pc, #712]	; (eb8c <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e8c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    e8c8:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    e8cc:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    e8d0:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e8d4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e8d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    e8dc:	7ba1      	ldrb	r1, [r4, #14]
    e8de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e8e2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    e8e6:	f3c1 0110 	ubfx	r1, r1, #0, #17
    e8ea:	400b      	ands	r3, r1
    e8ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    e8f0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e8f4:	f043 0320 	orr.w	r3, r3, #32
    e8f8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    e8fc:	2301      	movs	r3, #1
    e8fe:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    e900:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    e904:	2000      	movs	r0, #0
    e906:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    e90a:	e6c7      	b.n	e69c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    e90c:	4e9f      	ldr	r6, [pc, #636]	; (eb8c <isr_rx_conn_pkt_ctrl+0x67c>)
    e90e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e912:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e916:	2b00      	cmp	r3, #0
    e918:	f280 86e4 	bge.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    e91c:	7a41      	ldrb	r1, [r0, #9]
    e91e:	200a      	movs	r0, #10
    e920:	f7fc f978 	bl	ac14 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e924:	2800      	cmp	r0, #0
    e926:	f000 86dd 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e92a:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    e92e:	f7f9 f83a 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    e932:	4601      	mov	r1, r0
    e934:	b908      	cbnz	r0, e93a <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e936:	2001      	movs	r0, #1
    e938:	e6b0      	b.n	e69c <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    e93a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    e93e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    e942:	f36f 1304 	bfc	r3, #4, #1
    e946:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e94a:	7903      	ldrb	r3, [r0, #4]
    e94c:	f043 0303 	orr.w	r3, r3, #3
    e950:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e952:	2301      	movs	r3, #1
    e954:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e956:	230b      	movs	r3, #11
    e958:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e95a:	4628      	mov	r0, r5
    e95c:	f000 bcdc 	b.w	f318 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    e960:	7a41      	ldrb	r1, [r0, #9]
    e962:	200b      	movs	r0, #11
    e964:	f7fc f956 	bl	ac14 <pdu_len_cmp>
    e968:	2800      	cmp	r0, #0
    e96a:	f000 86bb 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    e96e:	4887      	ldr	r0, [pc, #540]	; (eb8c <isr_rx_conn_pkt_ctrl+0x67c>)
    e970:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    e974:	f994 301d 	ldrsb.w	r3, [r4, #29]
    e978:	2b00      	cmp	r3, #0
    e97a:	db1b      	blt.n	e9b4 <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e97c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e980:	f7f9 f811 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    e984:	4601      	mov	r1, r0
    e986:	2800      	cmp	r0, #0
    e988:	d0d5      	beq.n	e936 <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    e98a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    e98e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    e992:	f043 0304 	orr.w	r3, r3, #4
    e996:	f36f 1304 	bfc	r3, #4, #1
    e99a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e99e:	7903      	ldrb	r3, [r0, #4]
    e9a0:	f043 0303 	orr.w	r3, r3, #3
    e9a4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e9a6:	2301      	movs	r3, #1
    e9a8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e9aa:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e9ac:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e9ae:	4620      	mov	r0, r4
    e9b0:	f000 bcb2 	b.w	f318 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    e9b4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    e9b8:	f36f 1345 	bfc	r3, #5, #1
    e9bc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    e9c0:	e67c      	b.n	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    e9c2:	7a41      	ldrb	r1, [r0, #9]
    e9c4:	200c      	movs	r0, #12
    e9c6:	f7fc f925 	bl	ac14 <pdu_len_cmp>
    e9ca:	2800      	cmp	r0, #0
    e9cc:	f000 868a 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    e9d0:	486e      	ldr	r0, [pc, #440]	; (eb8c <isr_rx_conn_pkt_ctrl+0x67c>)
    e9d2:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    e9d6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e9da:	f013 0701 	ands.w	r7, r3, #1
    e9de:	d150      	bne.n	ea82 <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e9e0:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e9e4:	f7f8 ffdf 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    e9e8:	4601      	mov	r1, r0
    e9ea:	2800      	cmp	r0, #0
    e9ec:	d0a3      	beq.n	e936 <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    e9ee:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e9f2:	f043 0301 	orr.w	r3, r3, #1
    e9f6:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e9fa:	7903      	ldrb	r3, [r0, #4]
    e9fc:	f043 0303 	orr.w	r3, r3, #3
    ea00:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    ea02:	2306      	movs	r3, #6
    ea04:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    ea06:	230c      	movs	r3, #12
    ea08:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    ea0a:	2309      	movs	r3, #9
    ea0c:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    ea0e:	f06f 030e 	mvn.w	r3, #14
    ea12:	7243      	strb	r3, [r0, #9]
    ea14:	2305      	movs	r3, #5
    ea16:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    ea18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea1c:	72c3      	strb	r3, [r0, #11]
    ea1e:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    ea20:	4630      	mov	r0, r6
    ea22:	f7fe f98b 	bl	cd3c <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    ea26:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    ea2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ea2e:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    ea32:	f004 fdbb 	bl	135ac <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ea36:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    ea38:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ea3a:	2201      	movs	r2, #1
    ea3c:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    ea40:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ea44:	7003      	strb	r3, [r0, #0]
    ea46:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    ea48:	b1c2      	cbz	r2, ea7c <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    ea4a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    ea4e:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    ea50:	7b23      	ldrb	r3, [r4, #12]
    ea52:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    ea56:	7ba2      	ldrb	r2, [r4, #14]
    ea58:	7b63      	ldrb	r3, [r4, #13]
    ea5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ea5e:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    ea62:	7be3      	ldrb	r3, [r4, #15]
    ea64:	7c22      	ldrb	r2, [r4, #16]
    ea66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ea6a:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    ea6e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    ea72:	f043 0302 	orr.w	r3, r3, #2
    ea76:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    ea7a:	e61f      	b.n	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    ea7c:	f362 1304 	bfi	r3, r2, #4, #1
    ea80:	e7e5      	b.n	ea4e <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    ea82:	f013 0302 	ands.w	r3, r3, #2
    ea86:	f47f ae19 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    ea8a:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    ea8e:	2301      	movs	r3, #1
    ea90:	702b      	strb	r3, [r5, #0]
    ea92:	e7dd      	b.n	ea50 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    ea94:	7a41      	ldrb	r1, [r0, #9]
    ea96:	200d      	movs	r0, #13
    ea98:	f7fc f8bc 	bl	ac14 <pdu_len_cmp>
    ea9c:	2800      	cmp	r0, #0
    ea9e:	f000 8621 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    eaa2:	4b3a      	ldr	r3, [pc, #232]	; (eb8c <isr_rx_conn_pkt_ctrl+0x67c>)
    eaa4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    eaa8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    eaac:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    eab0:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    eab4:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    eab6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    eaba:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    eabe:	2301      	movs	r3, #1
    eac0:	702b      	strb	r3, [r5, #0]
    eac2:	e5eb      	b.n	e69c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    eac4:	7a41      	ldrb	r1, [r0, #9]
    eac6:	200f      	movs	r0, #15
    eac8:	f7fc f8a4 	bl	ac14 <pdu_len_cmp>
    eacc:	2800      	cmp	r0, #0
    eace:	f000 8609 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    ead2:	4b2e      	ldr	r3, [pc, #184]	; (eb8c <isr_rx_conn_pkt_ctrl+0x67c>)
    ead4:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    ead8:	461a      	mov	r2, r3
    eada:	b151      	cbz	r1, eaf2 <isr_rx_conn_pkt_ctrl+0x5e2>
    eadc:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    eae0:	4281      	cmp	r1, r0
    eae2:	d006      	beq.n	eaf2 <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    eae4:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    eae6:	210f      	movs	r1, #15
}
    eae8:	b003      	add	sp, #12
    eaea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    eaee:	f7fe b9a9 	b.w	ce44 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    eaf2:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    eaf6:	f990 301d 	ldrsb.w	r3, [r0, #29]
    eafa:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    eafe:	2b00      	cmp	r3, #0
    eb00:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    eb04:	f2c0 80a7 	blt.w	ec56 <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    eb08:	4299      	cmp	r1, r3
    eb0a:	d009      	beq.n	eb20 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    eb0c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    eb10:	f013 0307 	ands.w	r3, r3, #7
    eb14:	d002      	beq.n	eb1c <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    eb16:	3b04      	subs	r3, #4
    eb18:	2b01      	cmp	r3, #1
    eb1a:	d801      	bhi.n	eb20 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    eb1c:	2223      	movs	r2, #35	; 0x23
    eb1e:	e7e2      	b.n	eae6 <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    eb20:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    eb24:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    eb28:	4299      	cmp	r1, r3
    eb2a:	d003      	beq.n	eb34 <isr_rx_conn_pkt_ctrl+0x624>
    eb2c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    eb30:	2b03      	cmp	r3, #3
    eb32:	d105      	bne.n	eb40 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    eb34:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    eb38:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    eb3c:	4299      	cmp	r1, r3
    eb3e:	d001      	beq.n	eb44 <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    eb40:	222a      	movs	r2, #42	; 0x2a
    eb42:	e7d0      	b.n	eae6 <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    eb44:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    eb48:	4643      	mov	r3, r8
    eb4a:	2b05      	cmp	r3, #5
    eb4c:	d91b      	bls.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    eb4e:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    eb50:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    eb54:	d817      	bhi.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    eb56:	45b8      	cmp	r8, r7
    eb58:	d815      	bhi.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    eb5a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    eb5e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    eb62:	d210      	bcs.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    eb64:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    eb68:	f1ae 060a 	sub.w	r6, lr, #10
    eb6c:	b2b6      	uxth	r6, r6
    eb6e:	f640 4976 	movw	r9, #3190	; 0xc76
    eb72:	454e      	cmp	r6, r9
    eb74:	d807      	bhi.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    eb76:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    eb7a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    eb7e:	da02      	bge.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    eb80:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    eb82:	428f      	cmp	r7, r1
    eb84:	d204      	bcs.n	eb90 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    eb86:	221e      	movs	r2, #30
    eb88:	e7ad      	b.n	eae6 <isr_rx_conn_pkt_ctrl+0x5d6>
    eb8a:	bf00      	nop
    eb8c:	200008dc 	.word	0x200008dc
				conn->llcp_conn_param.interval = cpr->interval_min;
    eb90:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    eb94:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    eb98:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    eb9c:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    eba0:	7da6      	ldrb	r6, [r4, #22]
    eba2:	7d61      	ldrb	r1, [r4, #21]
    eba4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    eba8:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    ebac:	7e26      	ldrb	r6, [r4, #24]
    ebae:	7de1      	ldrb	r1, [r4, #23]
    ebb0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ebb4:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    ebb8:	7ea6      	ldrb	r6, [r4, #26]
    ebba:	7e61      	ldrb	r1, [r4, #25]
    ebbc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ebc0:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    ebc4:	7f26      	ldrb	r6, [r4, #28]
    ebc6:	7ee1      	ldrb	r1, [r4, #27]
    ebc8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ebcc:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    ebd0:	7fa6      	ldrb	r6, [r4, #30]
    ebd2:	7f61      	ldrb	r1, [r4, #29]
    ebd4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ebd8:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    ebdc:	7fe1      	ldrb	r1, [r4, #31]
    ebde:	f894 6020 	ldrb.w	r6, [r4, #32]
    ebe2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ebe6:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    ebea:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    ebee:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    ebf2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    ebf6:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    ebfa:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    ebfe:	6a41      	ldr	r1, [r0, #36]	; 0x24
    ec00:	428c      	cmp	r4, r1
    ec02:	d10f      	bne.n	ec24 <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    ec04:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    ec06:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec0a:	4361      	muls	r1, r4
    ec0c:	f242 7410 	movw	r4, #10000	; 0x2710
    ec10:	fb04 130e 	mla	r3, r4, lr, r1
    ec14:	3b01      	subs	r3, #1
    ec16:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    ec1a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    ec1c:	b29b      	uxth	r3, r3
    ec1e:	4299      	cmp	r1, r3
    ec20:	f000 8092 	beq.w	ed48 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    ec24:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    ec28:	071c      	lsls	r4, r3, #28
    ec2a:	f140 8087 	bpl.w	ed3c <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    ec2e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    ec32:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    ec34:	f361 0302 	bfi	r3, r1, #0, #3
    ec38:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    ec3c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    ec40:	3b01      	subs	r3, #1
    ec42:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    ec46:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    ec4a:	2b00      	cmp	r3, #0
    ec4c:	f47f ad36 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    ec50:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    ec54:	e532      	b.n	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    ec56:	4299      	cmp	r1, r3
    ec58:	d003      	beq.n	ec62 <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    ec5a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    ec5e:	0799      	lsls	r1, r3, #30
    ec60:	d17b      	bne.n	ed5a <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    ec62:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    ec66:	4643      	mov	r3, r8
    ec68:	2b05      	cmp	r3, #5
    ec6a:	d98c      	bls.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    ec6c:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    ec6e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    ec72:	d888      	bhi.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    ec74:	45b8      	cmp	r8, r7
    ec76:	d886      	bhi.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    ec78:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    ec7c:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    ec80:	d281      	bcs.n	eb86 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    ec82:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    ec86:	f1ae 060a 	sub.w	r6, lr, #10
    ec8a:	b2b6      	uxth	r6, r6
    ec8c:	f640 4976 	movw	r9, #3190	; 0xc76
    ec90:	454e      	cmp	r6, r9
    ec92:	f63f af78 	bhi.w	eb86 <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    ec96:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    ec9a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    ec9e:	f6bf af72 	bge.w	eb86 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    eca2:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    eca4:	428f      	cmp	r7, r1
    eca6:	f4ff af6e 	bcc.w	eb86 <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    ecaa:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    ecae:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    ecb2:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    ecb6:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    ecba:	7da6      	ldrb	r6, [r4, #22]
    ecbc:	7d61      	ldrb	r1, [r4, #21]
    ecbe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    ecc2:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    ecc6:	7e26      	ldrb	r6, [r4, #24]
    ecc8:	7de1      	ldrb	r1, [r4, #23]
    ecca:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ecce:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    ecd2:	7ea6      	ldrb	r6, [r4, #26]
    ecd4:	7e61      	ldrb	r1, [r4, #25]
    ecd6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ecda:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    ecde:	7f26      	ldrb	r6, [r4, #28]
    ece0:	7ee1      	ldrb	r1, [r4, #27]
    ece2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ece6:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    ecea:	7fa6      	ldrb	r6, [r4, #30]
    ecec:	7f61      	ldrb	r1, [r4, #29]
    ecee:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ecf2:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    ecf6:	7fe1      	ldrb	r1, [r4, #31]
    ecf8:	f894 6020 	ldrb.w	r6, [r4, #32]
    ecfc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ed00:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    ed04:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    ed08:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    ed0c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    ed10:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    ed14:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    ed18:	6a41      	ldr	r1, [r0, #36]	; 0x24
    ed1a:	428c      	cmp	r4, r1
    ed1c:	d10e      	bne.n	ed3c <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    ed1e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    ed20:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ed24:	4361      	muls	r1, r4
    ed26:	f242 7410 	movw	r4, #10000	; 0x2710
    ed2a:	fb04 130e 	mla	r3, r4, lr, r1
    ed2e:	3b01      	subs	r3, #1
    ed30:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    ed34:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    ed36:	b29b      	uxth	r3, r3
    ed38:	4299      	cmp	r1, r3
    ed3a:	d005      	beq.n	ed48 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    ed3c:	2301      	movs	r3, #1
    ed3e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    ed40:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    ed44:	2103      	movs	r1, #3
    ed46:	e775      	b.n	ec34 <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    ed48:	2300      	movs	r3, #0
    ed4a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    ed4e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    ed52:	2101      	movs	r1, #1
    ed54:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    ed58:	e76c      	b.n	ec34 <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    ed5a:	4bc9      	ldr	r3, [pc, #804]	; (f080 <isr_rx_conn_pkt_ctrl+0xb70>)
    ed5c:	9301      	str	r3, [sp, #4]
    ed5e:	9300      	str	r3, [sp, #0]
    ed60:	4ac8      	ldr	r2, [pc, #800]	; (f084 <isr_rx_conn_pkt_ctrl+0xb74>)
    ed62:	4bc9      	ldr	r3, [pc, #804]	; (f088 <isr_rx_conn_pkt_ctrl+0xb78>)
    ed64:	49c9      	ldr	r1, [pc, #804]	; (f08c <isr_rx_conn_pkt_ctrl+0xb7c>)
    ed66:	48ca      	ldr	r0, [pc, #808]	; (f090 <isr_rx_conn_pkt_ctrl+0xb80>)
    ed68:	e514      	b.n	e794 <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    ed6a:	4bca      	ldr	r3, [pc, #808]	; (f094 <isr_rx_conn_pkt_ctrl+0xb84>)
    ed6c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    ed70:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ed74:	2b00      	cmp	r3, #0
    ed76:	f2c0 84b5 	blt.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    ed7a:	7a41      	ldrb	r1, [r0, #9]
    ed7c:	2010      	movs	r0, #16
    ed7e:	f7fb ff49 	bl	ac14 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    ed82:	2800      	cmp	r0, #0
    ed84:	f000 84ae 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    ed88:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    ed8c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    ed90:	429a      	cmp	r2, r3
    ed92:	f43f ac93 	beq.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    ed96:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    ed9a:	f003 0307 	and.w	r3, r3, #7
    ed9e:	2b04      	cmp	r3, #4
    eda0:	f47f ac8c 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    eda4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    eda8:	fa1f f28e 	uxth.w	r2, lr
    edac:	2a05      	cmp	r2, #5
    edae:	d91b      	bls.n	ede8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    edb0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    edb2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    edb6:	d817      	bhi.n	ede8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    edb8:	429a      	cmp	r2, r3
    edba:	d815      	bhi.n	ede8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    edbc:	8a27      	ldrh	r7, [r4, #16]
    edbe:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    edc0:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    edc4:	d210      	bcs.n	ede8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    edc6:	8a66      	ldrh	r6, [r4, #18]
    edc8:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    edca:	f1a0 010a 	sub.w	r1, r0, #10
    edce:	b289      	uxth	r1, r1
    edd0:	f640 4c76 	movw	ip, #3190	; 0xc76
    edd4:	4561      	cmp	r1, ip
    edd6:	d807      	bhi.n	ede8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    edd8:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    eddc:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    ede0:	da02      	bge.n	ede8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    ede2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    ede4:	4293      	cmp	r3, r2
    ede6:	d203      	bcs.n	edf0 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    ede8:	221e      	movs	r2, #30
    edea:	2110      	movs	r1, #16
    edec:	4628      	mov	r0, r5
    edee:	e67b      	b.n	eae8 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    edf0:	2000      	movs	r0, #0
    edf2:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    edf6:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    edfa:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    edfe:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    ee02:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    ee06:	7da2      	ldrb	r2, [r4, #22]
    ee08:	7d63      	ldrb	r3, [r4, #21]
    ee0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    ee0e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    ee12:	7e22      	ldrb	r2, [r4, #24]
    ee14:	7de3      	ldrb	r3, [r4, #23]
    ee16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee1a:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    ee1e:	7ea2      	ldrb	r2, [r4, #26]
    ee20:	7e63      	ldrb	r3, [r4, #25]
    ee22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee26:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    ee2a:	7f22      	ldrb	r2, [r4, #28]
    ee2c:	7ee3      	ldrb	r3, [r4, #27]
    ee2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee32:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    ee36:	7fa2      	ldrb	r2, [r4, #30]
    ee38:	7f63      	ldrb	r3, [r4, #29]
    ee3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee3e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    ee42:	f894 2020 	ldrb.w	r2, [r4, #32]
    ee46:	7fe3      	ldrb	r3, [r4, #31]
    ee48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee4c:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    ee50:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    ee54:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    ee58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee5c:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    ee60:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    ee64:	2201      	movs	r2, #1
    ee66:	f362 0302 	bfi	r3, r2, #0, #3
    ee6a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    ee6e:	e415      	b.n	e69c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    ee70:	7a41      	ldrb	r1, [r0, #9]
    ee72:	2011      	movs	r0, #17
    ee74:	f7fb fece 	bl	ac14 <pdu_len_cmp>
    ee78:	2800      	cmp	r0, #0
    ee7a:	f000 8433 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    ee7e:	4a85      	ldr	r2, [pc, #532]	; (f094 <isr_rx_conn_pkt_ctrl+0xb84>)
    ee80:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    ee84:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    ee88:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    ee8c:	4281      	cmp	r1, r0
    ee8e:	7b21      	ldrb	r1, [r4, #12]
    ee90:	d027      	beq.n	eee2 <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    ee92:	2916      	cmp	r1, #22
    ee94:	f47f ac12 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    ee98:	7b61      	ldrb	r1, [r4, #13]
    ee9a:	2923      	cmp	r1, #35	; 0x23
    ee9c:	d00e      	beq.n	eebc <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    ee9e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    eea2:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    eea6:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    eeaa:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    eeae:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    eeb2:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    eeb4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    eeb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    eebc:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    eec0:	0792      	lsls	r2, r2, #30
    eec2:	f57f abfb 	bpl.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    eec6:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    eec8:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    eeca:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    eecc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    eed0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    eed4:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    eed6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    eeda:	f3c3 0302 	ubfx	r3, r3, #0, #3
    eede:	7363      	strb	r3, [r4, #13]
    eee0:	e419      	b.n	e716 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    eee2:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    eee6:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    eeea:	42b8      	cmp	r0, r7
    eeec:	d048      	beq.n	ef80 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    eeee:	290f      	cmp	r1, #15
    eef0:	f47f abe4 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
    eef4:	f993 001d 	ldrsb.w	r0, [r3, #29]
    eef8:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    eefa:	2800      	cmp	r0, #0
    eefc:	db0e      	blt.n	ef1c <isr_rx_conn_pkt_ctrl+0xa0c>
    eefe:	291a      	cmp	r1, #26
    ef00:	d10c      	bne.n	ef1c <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    ef02:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    ef06:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    ef0a:	4294      	cmp	r4, r2
    ef0c:	f000 80c8 	beq.w	f0a0 <isr_rx_conn_pkt_ctrl+0xb90>
    ef10:	4b5b      	ldr	r3, [pc, #364]	; (f080 <isr_rx_conn_pkt_ctrl+0xb70>)
    ef12:	9301      	str	r3, [sp, #4]
    ef14:	9300      	str	r3, [sp, #0]
    ef16:	4b60      	ldr	r3, [pc, #384]	; (f098 <isr_rx_conn_pkt_ctrl+0xb88>)
    ef18:	f7ff bb40 	b.w	e59c <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    ef1c:	2923      	cmp	r1, #35	; 0x23
    ef1e:	d018      	beq.n	ef52 <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    ef20:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    ef24:	42b3      	cmp	r3, r6
    ef26:	d007      	beq.n	ef38 <isr_rx_conn_pkt_ctrl+0xa28>
    ef28:	4b55      	ldr	r3, [pc, #340]	; (f080 <isr_rx_conn_pkt_ctrl+0xb70>)
    ef2a:	9301      	str	r3, [sp, #4]
    ef2c:	9300      	str	r3, [sp, #0]
    ef2e:	4b5a      	ldr	r3, [pc, #360]	; (f098 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    ef30:	4a54      	ldr	r2, [pc, #336]	; (f084 <isr_rx_conn_pkt_ctrl+0xb74>)
    ef32:	4956      	ldr	r1, [pc, #344]	; (f08c <isr_rx_conn_pkt_ctrl+0xb7c>)
    ef34:	4859      	ldr	r0, [pc, #356]	; (f09c <isr_rx_conn_pkt_ctrl+0xb8c>)
    ef36:	e42d      	b.n	e794 <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    ef38:	2600      	movs	r6, #0
		if (conn->role) {
    ef3a:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    ef3c:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    ef40:	bfb8      	it	lt
    ef42:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    ef46:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    ef4a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    ef4e:	bfb8      	it	lt
    ef50:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    ef52:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    ef56:	0717      	lsls	r7, r2, #28
    ef58:	f57f abb0 	bpl.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    ef5c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ef5e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    ef60:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ef62:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    ef64:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    ef66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    ef68:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    ef6a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    ef6c:	237d      	movs	r3, #125	; 0x7d
    ef6e:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    ef70:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    ef72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ef76:	fb93 f3f2 	sdiv	r3, r3, r2
    ef7a:	8223      	strh	r3, [r4, #16]
    ef7c:	f7ff bbcb 	b.w	e716 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    ef80:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    ef84:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    ef88:	4290      	cmp	r0, r2
    ef8a:	d01a      	beq.n	efc2 <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    ef8c:	2914      	cmp	r1, #20
    ef8e:	f47f ab95 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    ef92:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    ef96:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    ef9a:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    ef9c:	f360 02c3 	bfi	r2, r0, #3, #1
    efa0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    efa4:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    efa6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    efaa:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    efac:	2215      	movs	r2, #21
    efae:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    efb0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    efb2:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    efb4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    efb6:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    efb8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    efba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    efbc:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    efbe:	8263      	strh	r3, [r4, #18]
    efc0:	e57d      	b.n	eabe <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    efc2:	2903      	cmp	r1, #3
    efc4:	f47f ab7a 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    efc8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    efcc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    efd0:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    efd4:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    efd6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    efda:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    efde:	230d      	movs	r3, #13
    efe0:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    efe2:	7b63      	ldrb	r3, [r4, #13]
    efe4:	7323      	strb	r3, [r4, #12]
    efe6:	e56a      	b.n	eabe <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    efe8:	7a41      	ldrb	r1, [r0, #9]
    efea:	2012      	movs	r0, #18
    efec:	f7fb fe12 	bl	ac14 <pdu_len_cmp>
    eff0:	2800      	cmp	r0, #0
    eff2:	f000 8377 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    eff6:	4827      	ldr	r0, [pc, #156]	; (f094 <isr_rx_conn_pkt_ctrl+0xb84>)
    eff8:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    effc:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    f000:	f7f8 fcd1 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    f004:	4601      	mov	r1, r0
    f006:	2800      	cmp	r0, #0
    f008:	f43f ac95 	beq.w	e936 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f00c:	7903      	ldrb	r3, [r0, #4]
    f00e:	f043 0303 	orr.w	r3, r3, #3
    f012:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    f014:	2301      	movs	r3, #1
    f016:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    f018:	2313      	movs	r3, #19
    f01a:	e4c7      	b.n	e9ac <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    f01c:	7a41      	ldrb	r1, [r0, #9]
    f01e:	2013      	movs	r0, #19
    f020:	f7fb fdf8 	bl	ac14 <pdu_len_cmp>
    f024:	2800      	cmp	r0, #0
    f026:	f000 835d 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    f02a:	4b1a      	ldr	r3, [pc, #104]	; (f094 <isr_rx_conn_pkt_ctrl+0xb84>)
    f02c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    f030:	e468      	b.n	e904 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    f032:	7a41      	ldrb	r1, [r0, #9]
    f034:	2007      	movs	r0, #7
    f036:	f7fb fded 	bl	ac14 <pdu_len_cmp>
    f03a:	2800      	cmp	r0, #0
    f03c:	f000 8352 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    f040:	4a14      	ldr	r2, [pc, #80]	; (f094 <isr_rx_conn_pkt_ctrl+0xb84>)
    f042:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    f046:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    f04a:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    f04e:	42b1      	cmp	r1, r6
    f050:	4611      	mov	r1, r2
    f052:	d077      	beq.n	f144 <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    f054:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    f058:	f040 0010 	orr.w	r0, r0, #16
    f05c:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    f060:	f993 001d 	ldrsb.w	r0, [r3, #29]
    f064:	2800      	cmp	r0, #0
    f066:	db47      	blt.n	f0f8 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f068:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    f06c:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    f070:	4294      	cmp	r4, r2
    f072:	d015      	beq.n	f0a0 <isr_rx_conn_pkt_ctrl+0xb90>
    f074:	4b02      	ldr	r3, [pc, #8]	; (f080 <isr_rx_conn_pkt_ctrl+0xb70>)
    f076:	9301      	str	r3, [sp, #4]
    f078:	9300      	str	r3, [sp, #0]
    f07a:	4b03      	ldr	r3, [pc, #12]	; (f088 <isr_rx_conn_pkt_ctrl+0xb78>)
    f07c:	f7ff ba8e 	b.w	e59c <isr_rx_conn_pkt_ctrl+0x8c>
    f080:	00015af1 	.word	0x00015af1
    f084:	00016fae 	.word	0x00016fae
    f088:	00018c5f 	.word	0x00018c5f
    f08c:	00016060 	.word	0x00016060
    f090:	00016f22 	.word	0x00016f22
    f094:	200008dc 	.word	0x200008dc
    f098:	00018c24 	.word	0x00018c24
    f09c:	00019508 	.word	0x00019508
				conn->llcp_conn_param.state =
    f0a0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    f0a4:	2105      	movs	r1, #5
    f0a6:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    f0aa:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    f0ae:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    f0b2:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    f0b6:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    f0ba:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    f0be:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    f0c2:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    f0c6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    f0ca:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    f0cc:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    f0d0:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    f0d4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    f0d8:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    f0da:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    f0de:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    f0e0:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    f0e4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    f0e8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    f0ec:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    f0f0:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    f0f4:	f7ff bad2 	b.w	e69c <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    f0f8:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    f0fc:	4293      	cmp	r3, r2
    f0fe:	d004      	beq.n	f10a <isr_rx_conn_pkt_ctrl+0xbfa>
    f100:	4bc9      	ldr	r3, [pc, #804]	; (f428 <isr_rx_conn_pkt_ctrl+0xf18>)
    f102:	9301      	str	r3, [sp, #4]
    f104:	9300      	str	r3, [sp, #0]
    f106:	4bc9      	ldr	r3, [pc, #804]	; (f42c <isr_rx_conn_pkt_ctrl+0xf1c>)
    f108:	e712      	b.n	ef30 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    f10a:	2200      	movs	r2, #0
    f10c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    f110:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f114:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    f118:	0716      	lsls	r6, r2, #28
    f11a:	f57f aacf 	bpl.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f11e:	2208      	movs	r2, #8
    f120:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    f122:	221a      	movs	r2, #26
    f124:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    f126:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    f128:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    f12a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    f12c:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    f12e:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    f130:	237d      	movs	r3, #125	; 0x7d
    f132:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    f134:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    f136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f13a:	fb93 f3f2 	sdiv	r3, r3, r2
    f13e:	8223      	strh	r3, [r4, #16]
    f140:	f7ff bb73 	b.w	e82a <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    f144:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    f148:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    f14c:	4290      	cmp	r0, r2
    f14e:	d009      	beq.n	f164 <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    f150:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    f154:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f158:	f36f 02c3 	bfc	r2, #3, #1
    f15c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    f160:	f7ff bb63 	b.w	e82a <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    f164:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    f168:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    f16c:	4290      	cmp	r0, r2
    f16e:	d01b      	beq.n	f1a8 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    f170:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    f174:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    f178:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    f17c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    f180:	f362 0002 	bfi	r0, r2, #0, #3
    f184:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    f188:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    f18c:	0780      	lsls	r0, r0, #30
    f18e:	d50f      	bpl.n	f1b0 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f190:	200c      	movs	r0, #12
    f192:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    f194:	2000      	movs	r0, #0
    f196:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    f198:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    f19a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    f19e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f1a2:	7363      	strb	r3, [r4, #13]
    f1a4:	f7ff bb41 	b.w	e82a <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    f1a8:	7b23      	ldrb	r3, [r4, #12]
    f1aa:	2b12      	cmp	r3, #18
    f1ac:	f47f ab3d 	bne.w	e82a <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    f1b0:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    f1b4:	f7ff bba6 	b.w	e904 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    f1b8:	7a41      	ldrb	r1, [r0, #9]
    f1ba:	2014      	movs	r0, #20
    f1bc:	f7fb fd2a 	bl	ac14 <pdu_len_cmp>
    f1c0:	2800      	cmp	r0, #0
    f1c2:	f000 828f 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    f1c6:	2f14      	cmp	r7, #20
    f1c8:	d127      	bne.n	f21a <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f1ca:	4899      	ldr	r0, [pc, #612]	; (f430 <isr_rx_conn_pkt_ctrl+0xf20>)
    f1cc:	f7f8 fbeb 	bl	79a6 <mem_acquire>
		if (!node_tx) {
    f1d0:	4606      	mov	r6, r0
    f1d2:	2800      	cmp	r0, #0
    f1d4:	f43f abaf 	beq.w	e936 <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f1d8:	4f96      	ldr	r7, [pc, #600]	; (f434 <isr_rx_conn_pkt_ctrl+0xf24>)
    f1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    f1de:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    f1e2:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f1e6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f1e8:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    f1ea:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f1ec:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    f1f0:	45e0      	cmp	r8, ip
    f1f2:	46b9      	mov	r9, r7
    f1f4:	f894 800b 	ldrb.w	r8, [r4, #11]
    f1f8:	d111      	bne.n	f21e <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    f1fa:	f1b8 0f14 	cmp.w	r8, #20
    f1fe:	d01a      	beq.n	f236 <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    f200:	f1b8 0f15 	cmp.w	r8, #21
    f204:	f000 8292 	beq.w	f72c <isr_rx_conn_pkt_ctrl+0x121c>
    f208:	4b87      	ldr	r3, [pc, #540]	; (f428 <isr_rx_conn_pkt_ctrl+0xf18>)
    f20a:	9301      	str	r3, [sp, #4]
    f20c:	9300      	str	r3, [sp, #0]
    f20e:	4a8a      	ldr	r2, [pc, #552]	; (f438 <isr_rx_conn_pkt_ctrl+0xf28>)
    f210:	4b8a      	ldr	r3, [pc, #552]	; (f43c <isr_rx_conn_pkt_ctrl+0xf2c>)
    f212:	498b      	ldr	r1, [pc, #556]	; (f440 <isr_rx_conn_pkt_ctrl+0xf30>)
    f214:	488b      	ldr	r0, [pc, #556]	; (f444 <isr_rx_conn_pkt_ctrl+0xf34>)
    f216:	f7ff babd 	b.w	e794 <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    f21a:	2600      	movs	r6, #0
    f21c:	e7dc      	b.n	f1d8 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    f21e:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    f222:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    f226:	2f01      	cmp	r7, #1
    f228:	d9e7      	bls.n	f1fa <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    f22a:	2f02      	cmp	r7, #2
    f22c:	d1e8      	bne.n	f200 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    f22e:	f1a8 0714 	sub.w	r7, r8, #20
    f232:	2f01      	cmp	r7, #1
    f234:	d8e4      	bhi.n	f200 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    f236:	89a7      	ldrh	r7, [r4, #12]
    f238:	2f1a      	cmp	r7, #26
    f23a:	d934      	bls.n	f2a6 <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    f23c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    f240:	4547      	cmp	r7, r8
    f242:	bf28      	it	cs
    f244:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    f246:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    f24a:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    f24e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    f252:	bf34      	ite	cc
    f254:	4693      	movcc	fp, r2
    f256:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    f25a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    f25e:	d324      	bcc.n	f2aa <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    f260:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    f264:	45d0      	cmp	r8, sl
    f266:	bf28      	it	cs
    f268:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    f26a:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    f26e:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    f272:	bf34      	ite	cc
    f274:	4682      	movcc	sl, r0
    f276:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    f27a:	455a      	cmp	r2, fp
    f27c:	d050      	beq.n	f320 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    f27e:	f7fb fd11 	bl	aca4 <packet_rx_acquired_count_get>
    f282:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    f284:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    f288:	f7f8 fbbc 	bl	7a04 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    f28c:	4420      	add	r0, r4
    f28e:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    f290:	28ff      	cmp	r0, #255	; 0xff
    f292:	d90c      	bls.n	f2ae <isr_rx_conn_pkt_ctrl+0xd9e>
    f294:	4b64      	ldr	r3, [pc, #400]	; (f428 <isr_rx_conn_pkt_ctrl+0xf18>)
    f296:	9301      	str	r3, [sp, #4]
    f298:	9300      	str	r3, [sp, #0]
    f29a:	4a67      	ldr	r2, [pc, #412]	; (f438 <isr_rx_conn_pkt_ctrl+0xf28>)
    f29c:	4b67      	ldr	r3, [pc, #412]	; (f43c <isr_rx_conn_pkt_ctrl+0xf2c>)
    f29e:	4968      	ldr	r1, [pc, #416]	; (f440 <isr_rx_conn_pkt_ctrl+0xf30>)
    f2a0:	4869      	ldr	r0, [pc, #420]	; (f448 <isr_rx_conn_pkt_ctrl+0xf38>)
    f2a2:	f7ff ba77 	b.w	e794 <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f2a6:	460f      	mov	r7, r1
    f2a8:	e7cd      	b.n	f246 <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f2aa:	46f0      	mov	r8, lr
    f2ac:	e7dd      	b.n	f26a <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    f2ae:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    f2b2:	4283      	cmp	r3, r0
    f2b4:	f040 8231 	bne.w	f71a <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f2b8:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    f2bc:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f2c0:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    f2c2:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    f2c4:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    f2c8:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    f2cc:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    f2d0:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    f2d4:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    f2d8:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    f2dc:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    f2e0:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    f2e4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    f2e8:	2303      	movs	r3, #3
    f2ea:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    f2ee:	2e00      	cmp	r6, #0
    f2f0:	f43f a9e4 	beq.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2f4:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    f2f6:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    f2fa:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2fe:	f043 0303 	orr.w	r3, r3, #3
    f302:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f304:	2309      	movs	r3, #9
    f306:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f308:	2315      	movs	r3, #21
    f30a:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    f30c:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    f30e:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    f312:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    f316:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    f318:	f7fd fce2 	bl	cce0 <ctrl_tx_enqueue>
    f31c:	f7ff b9ce 	b.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    f320:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    f324:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    f328:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    f32c:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    f330:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    f332:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    f336:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    f33a:	d103      	bne.n	f344 <isr_rx_conn_pkt_ctrl+0xe34>
    f33c:	45c6      	cmp	lr, r8
    f33e:	d101      	bne.n	f344 <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    f340:	4550      	cmp	r0, sl
    f342:	d0d4      	beq.n	f2ee <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f344:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    f346:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    f34a:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    f34e:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    f350:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    f354:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    f356:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    f35a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    f35e:	702b      	strb	r3, [r5, #0]
    f360:	e7c5      	b.n	f2ee <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    f362:	7a41      	ldrb	r1, [r0, #9]
    f364:	2016      	movs	r0, #22
    f366:	f7fb fc55 	bl	ac14 <pdu_len_cmp>
    f36a:	2800      	cmp	r0, #0
    f36c:	f000 81ba 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    f370:	4830      	ldr	r0, [pc, #192]	; (f434 <isr_rx_conn_pkt_ctrl+0xf24>)
    f372:	7cc3      	ldrb	r3, [r0, #19]
    f374:	2b04      	cmp	r3, #4
    f376:	d169      	bne.n	f44c <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    f378:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    f37c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    f380:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    f384:	428b      	cmp	r3, r1
    f386:	d00a      	beq.n	f39e <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    f388:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    f38c:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    f390:	3a01      	subs	r2, #1
    f392:	2a02      	cmp	r2, #2
    f394:	d803      	bhi.n	f39e <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    f396:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    f398:	2116      	movs	r1, #22
    f39a:	f7ff bba5 	b.w	eae8 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    f39e:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    f3a2:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    f3a6:	4295      	cmp	r5, r2
    f3a8:	d003      	beq.n	f3b2 <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    f3aa:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    f3ae:	2a03      	cmp	r2, #3
    f3b0:	d105      	bne.n	f3be <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    f3b2:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    f3b6:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    f3ba:	4295      	cmp	r5, r2
    f3bc:	d001      	beq.n	f3c2 <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    f3be:	222a      	movs	r2, #42	; 0x2a
    f3c0:	e7ea      	b.n	f398 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    f3c2:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    f3c6:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    f3c8:	f042 0203 	orr.w	r2, r2, #3
    f3cc:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    f3d0:	d116      	bne.n	f400 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    f3d2:	3b01      	subs	r3, #1
    f3d4:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    f3d8:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    f3dc:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    f3e0:	f36f 0341 	bfc	r3, #1, #1
    f3e4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    f3e8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    f3ec:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    f3f0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    f3f4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f3f8:	f362 1347 	bfi	r3, r2, #5, #3
    f3fc:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f400:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    f404:	7b62      	ldrb	r2, [r4, #13]
    f406:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f40a:	400a      	ands	r2, r1
    f40c:	f362 0384 	bfi	r3, r2, #2, #3
    f410:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f414:	7b22      	ldrb	r2, [r4, #12]
    f416:	b2db      	uxtb	r3, r3
    f418:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f41c:	f362 1347 	bfi	r3, r2, #5, #3
    f420:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    f424:	f7ff b94a 	b.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
    f428:	00015af1 	.word	0x00015af1
    f42c:	00018c5f 	.word	0x00018c5f
    f430:	20000a38 	.word	0x20000a38
    f434:	200008dc 	.word	0x200008dc
    f438:	00016fae 	.word	0x00016fae
    f43c:	00018c46 	.word	0x00018c46
    f440:	00016060 	.word	0x00016060
    f444:	00019541 	.word	0x00019541
    f448:	000190b8 	.word	0x000190b8
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    f44c:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f450:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    f454:	f7f8 faa7 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    f458:	4601      	mov	r1, r0
    f45a:	2800      	cmp	r0, #0
    f45c:	f43f aa6b 	beq.w	e936 <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f460:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f464:	2202      	movs	r2, #2
    f466:	f362 0301 	bfi	r3, r2, #0, #2
    f46a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    f46e:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    f472:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    f476:	4293      	cmp	r3, r2
    f478:	d11a      	bne.n	f4b0 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    f47a:	3b01      	subs	r3, #1
    f47c:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    f480:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    f484:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    f488:	f36f 0341 	bfc	r3, #1, #1
    f48c:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    f490:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f494:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    f498:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    f49c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f4a0:	f362 1347 	bfi	r3, r2, #5, #3
    f4a4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    f4a8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    f4ac:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    f4b0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f4b4:	7b62      	ldrb	r2, [r4, #13]
    f4b6:	f3c3 0082 	ubfx	r0, r3, #2, #3
    f4ba:	4002      	ands	r2, r0
    f4bc:	f362 0384 	bfi	r3, r2, #2, #3
    f4c0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    f4c4:	7b22      	ldrb	r2, [r4, #12]
    f4c6:	b2db      	uxtb	r3, r3
    f4c8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f4cc:	f362 1347 	bfi	r3, r2, #5, #3
    f4d0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f4d4:	790b      	ldrb	r3, [r1, #4]
    f4d6:	f043 0303 	orr.w	r3, r3, #3
    f4da:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    f4dc:	2303      	movs	r3, #3
    f4de:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f4e0:	2317      	movs	r3, #23
    f4e2:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    f4e4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f4e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f4ec:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    f4ee:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    f4f2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f4f6:	724b      	strb	r3, [r1, #9]
    f4f8:	f7ff ba2f 	b.w	e95a <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    f4fc:	4e90      	ldr	r6, [pc, #576]	; (f740 <isr_rx_conn_pkt_ctrl+0x1230>)
    f4fe:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    f502:	f995 301d 	ldrsb.w	r3, [r5, #29]
    f506:	2b00      	cmp	r3, #0
    f508:	f2c0 80ec 	blt.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    f50c:	7a41      	ldrb	r1, [r0, #9]
    f50e:	2017      	movs	r0, #23
    f510:	f7fb fb80 	bl	ac14 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    f514:	2800      	cmp	r0, #0
    f516:	f000 80e5 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    f51a:	7cf3      	ldrb	r3, [r6, #19]
    f51c:	2b04      	cmp	r3, #4
    f51e:	f47f a8cd 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
    f522:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    f526:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    f52a:	429a      	cmp	r2, r3
    f52c:	f43f a8c6 	beq.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    f530:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    f534:	f003 0203 	and.w	r2, r3, #3
    f538:	2a02      	cmp	r2, #2
    f53a:	f47f a8bf 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    f53e:	f043 0303 	orr.w	r3, r3, #3
    f542:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f546:	7b62      	ldrb	r2, [r4, #13]
    f548:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f54c:	400a      	ands	r2, r1
    f54e:	f362 0384 	bfi	r3, r2, #2, #3
    f552:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f556:	7b22      	ldrb	r2, [r4, #12]
    f558:	b2db      	uxtb	r3, r3
    f55a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f55e:	f362 1347 	bfi	r3, r2, #5, #3
    f562:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    f566:	f7ff b85c 	b.w	e622 <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    f56a:	4b75      	ldr	r3, [pc, #468]	; (f740 <isr_rx_conn_pkt_ctrl+0x1230>)
    f56c:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    f570:	f996 301d 	ldrsb.w	r3, [r6, #29]
    f574:	2b00      	cmp	r3, #0
    f576:	f280 80b5 	bge.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    f57a:	7a41      	ldrb	r1, [r0, #9]
    f57c:	2018      	movs	r0, #24
    f57e:	f7fb fb49 	bl	ac14 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    f582:	2800      	cmp	r0, #0
    f584:	f000 80ae 	beq.w	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    f588:	7b27      	ldrb	r7, [r4, #12]
    f58a:	7b62      	ldrb	r2, [r4, #13]
    f58c:	ea47 0002 	orr.w	r0, r7, r2
    f590:	f010 0007 	ands.w	r0, r0, #7
    f594:	d125      	bne.n	f5e2 <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f596:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    f59a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    f59e:	4293      	cmp	r3, r2
    f5a0:	f43f a88c 	beq.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    f5a4:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f5a8:	f003 0303 	and.w	r3, r3, #3
    f5ac:	2b02      	cmp	r3, #2
    f5ae:	f47f a885 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    f5b2:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f5b6:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    f5ba:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    f5bc:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    f5c0:	f57f a87c 	bpl.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f5c4:	230c      	movs	r3, #12
		upd->status = 0;
    f5c6:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f5c8:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    f5ca:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    f5ce:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f5d2:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    f5d4:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    f5d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f5dc:	7363      	strb	r3, [r4, #13]
    f5de:	f7ff ba6e 	b.w	eabe <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    f5e2:	89e0      	ldrh	r0, [r4, #14]
    f5e4:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    f5e6:	1ac3      	subs	r3, r0, r3
    f5e8:	041b      	lsls	r3, r3, #16
    f5ea:	f100 80a4 	bmi.w	f736 <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f5ee:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    f5f2:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    f5f6:	428b      	cmp	r3, r1
    f5f8:	d005      	beq.n	f606 <isr_rx_conn_pkt_ctrl+0x10f6>
    f5fa:	4b52      	ldr	r3, [pc, #328]	; (f744 <isr_rx_conn_pkt_ctrl+0x1234>)
    f5fc:	9301      	str	r3, [sp, #4]
    f5fe:	9300      	str	r3, [sp, #0]
    f600:	4b51      	ldr	r3, [pc, #324]	; (f748 <isr_rx_conn_pkt_ctrl+0x1238>)
    f602:	f7fe bfcb 	b.w	e59c <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f606:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    f60a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    f60e:	42a3      	cmp	r3, r4
    f610:	d014      	beq.n	f63c <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    f612:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f616:	f003 0303 	and.w	r3, r3, #3
    f61a:	2b02      	cmp	r3, #2
    f61c:	d10e      	bne.n	f63c <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f61e:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f622:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f626:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    f62a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f62e:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    f632:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f634:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    f638:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f63c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    f640:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f644:	f002 0207 	and.w	r2, r2, #7
    f648:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    f64c:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    f650:	f36f 0300 	bfc	r3, #0, #1
    f654:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    f658:	2008      	movs	r0, #8
	conn->llcp_ack--;
    f65a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    f65c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    f660:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    f664:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    f668:	2b00      	cmp	r3, #0
    f66a:	f43f a827 	beq.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    f66e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    f672:	f362 0302 	bfi	r3, r2, #0, #3
    f676:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    f67a:	f7ff b81f 	b.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    f67e:	4e30      	ldr	r6, [pc, #192]	; (f740 <isr_rx_conn_pkt_ctrl+0x1230>)
    f680:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    f684:	f995 301d 	ldrsb.w	r3, [r5, #29]
    f688:	2b00      	cmp	r3, #0
    f68a:	db2b      	blt.n	f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    f68c:	7a41      	ldrb	r1, [r0, #9]
    f68e:	2019      	movs	r0, #25
    f690:	f7fb fac0 	bl	ac14 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    f694:	b330      	cbz	r0, f6e4 <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    f696:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    f69a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    f69e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    f6a2:	7b22      	ldrb	r2, [r4, #12]
    f6a4:	f003 0307 	and.w	r3, r3, #7
    f6a8:	4213      	tst	r3, r2
    f6aa:	f43f a807 	beq.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    f6ae:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    f6b2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    f6b6:	429a      	cmp	r2, r3
    f6b8:	f47f a800 	bne.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    f6bc:	2205      	movs	r2, #5
    f6be:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    f6c2:	f105 0079 	add.w	r0, r5, #121	; 0x79
    f6c6:	f7f2 fa99 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    f6ca:	2301      	movs	r3, #1
    f6cc:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    f6d0:	2302      	movs	r3, #2
    f6d2:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    f6d6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    f6da:	3b01      	subs	r3, #1
    f6dc:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    f6e0:	f7fe bfec 	b.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    f6e4:	4816      	ldr	r0, [pc, #88]	; (f740 <isr_rx_conn_pkt_ctrl+0x1230>)
    f6e6:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f6ea:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    f6ee:	f7f8 f95a 	bl	79a6 <mem_acquire>
	if (!node_tx) {
    f6f2:	4601      	mov	r1, r0
    f6f4:	2800      	cmp	r0, #0
    f6f6:	f43f a91e 	beq.w	e936 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f6fa:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    f6fc:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f6fe:	f043 0303 	orr.w	r3, r3, #3
    f702:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    f704:	2302      	movs	r3, #2
    f706:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    f708:	2307      	movs	r3, #7
    f70a:	71c3      	strb	r3, [r0, #7]
    f70c:	f7ff b94f 	b.w	e9ae <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    f710:	2328      	movs	r3, #40	; 0x28
    f712:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    f716:	f7fe bfd1 	b.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    f71a:	2e00      	cmp	r6, #0
    f71c:	f43f a90b 	beq.w	e936 <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f720:	490a      	ldr	r1, [pc, #40]	; (f74c <isr_rx_conn_pkt_ctrl+0x123c>)
    f722:	4630      	mov	r0, r6
    f724:	f7f8 f959 	bl	79da <mem_release>
    f728:	f7ff b905 	b.w	e936 <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f72c:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    f72e:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f730:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f732:	4693      	mov	fp, r2
    f734:	e5db      	b.n	f2ee <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    f736:	2328      	movs	r3, #40	; 0x28
    f738:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    f73c:	f7fe bfbe 	b.w	e6bc <isr_rx_conn_pkt_ctrl+0x1ac>
    f740:	200008dc 	.word	0x200008dc
    f744:	00015af1 	.word	0x00015af1
    f748:	00018fc9 	.word	0x00018fc9
    f74c:	20000a38 	.word	0x20000a38

0000f750 <isr>:
{
    f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f754:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    f756:	f003 feff 	bl	13558 <radio_is_done>
    f75a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    f75c:	b366      	cbz	r6, f7b8 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    f75e:	f003 ff1b 	bl	13598 <radio_crc_is_valid>
    f762:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    f764:	f003 ff9c 	bl	136a0 <radio_filter_has_match>
    f768:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    f76c:	f003 ffa2 	bl	136b4 <radio_filter_match_get>
    f770:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    f774:	f004 f986 	bl	13a84 <radio_ar_has_match>
    f778:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    f77c:	f004 f970 	bl	13a60 <radio_ar_match_get>
    f780:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    f784:	f003 ff56 	bl	13634 <radio_rssi_is_ready>
    f788:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    f78a:	4cb4      	ldr	r4, [pc, #720]	; (fa5c <isr+0x30c>)
	radio_status_reset();
    f78c:	f003 fece 	bl	1352c <radio_status_reset>
	radio_tmr_status_reset();
    f790:	f003 ffa2 	bl	136d8 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f794:	f003 ff7c 	bl	13690 <radio_filter_status_reset>
	radio_ar_status_reset();
    f798:	f004 f968 	bl	13a6c <radio_ar_status_reset>
	radio_rssi_status_reset();
    f79c:	f003 ff42 	bl	13624 <radio_rssi_status_reset>
	switch (_radio.state) {
    f7a0:	7d23      	ldrb	r3, [r4, #20]
    f7a2:	2b05      	cmp	r3, #5
    f7a4:	f201 846e 	bhi.w	11084 <__kernel_ram_size+0x1084>
    f7a8:	e8df f013 	tbh	[pc, r3, lsl #1]
    f7ac:	00cd007c 	.word	0x00cd007c
    f7b0:	0a1c000e 	.word	0x0a1c000e
    f7b4:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    f7b8:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f7bc:	4635      	mov	r5, r6
    f7be:	46b2      	mov	sl, r6
    f7c0:	46b1      	mov	r9, r6
    f7c2:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    f7c4:	46d8      	mov	r8, fp
    f7c6:	e7e0      	b.n	f78a <isr+0x3a>
	_radio.state = STATE_RX;
    f7c8:	2301      	movs	r3, #1
    f7ca:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    f7cc:	f004 f886 	bl	138dc <radio_tmr_tifs_base_get>
    f7d0:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    f7d2:	2096      	movs	r0, #150	; 0x96
    f7d4:	f003 ff8e 	bl	136f4 <radio_tmr_tifs_set>
	switch (_radio.role) {
    f7d8:	7ce3      	ldrb	r3, [r4, #19]
    f7da:	3b01      	subs	r3, #1
    f7dc:	2b03      	cmp	r3, #3
    f7de:	f200 80aa 	bhi.w	f936 <isr+0x1e6>
    f7e2:	e8df f003 	tbb	[pc, r3]
    f7e6:	3202      	.short	0x3202
    f7e8:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f7ea:	2300      	movs	r3, #0
    f7ec:	461a      	mov	r2, r3
    f7ee:	4619      	mov	r1, r3
    f7f0:	4618      	mov	r0, r3
    f7f2:	f003 feef 	bl	135d4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f7f6:	f003 fedd 	bl	135b4 <radio_pkt_scratch_get>
    f7fa:	f003 fe5f 	bl	134bc <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f7fe:	f003 fea1 	bl	13544 <radio_is_ready>
    f802:	b138      	cbz	r0, f814 <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    f804:	4b96      	ldr	r3, [pc, #600]	; (fa60 <isr+0x310>)
    f806:	9301      	str	r3, [sp, #4]
    f808:	9300      	str	r3, [sp, #0]
    f80a:	4b96      	ldr	r3, [pc, #600]	; (fa64 <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    f80c:	4a96      	ldr	r2, [pc, #600]	; (fa68 <isr+0x318>)
    f80e:	4997      	ldr	r1, [pc, #604]	; (fa6c <isr+0x31c>)
    f810:	4897      	ldr	r0, [pc, #604]	; (fa70 <isr+0x320>)
    f812:	e34b      	b.n	feac <isr+0x75c>
		if (ctrl_rl_enabled()) {
    f814:	f003 f95e 	bl	12ad4 <ctrl_rl_enabled>
    f818:	b138      	cbz	r0, f82a <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    f81a:	a810      	add	r0, sp, #64	; 0x40
    f81c:	f002 feaa 	bl	12574 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f820:	4601      	mov	r1, r0
    f822:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f826:	f004 f8e9 	bl	139fc <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f82a:	2100      	movs	r1, #0
    f82c:	4608      	mov	r0, r1
    f82e:	f003 fe5a 	bl	134e6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f832:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f834:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f836:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f838:	4608      	mov	r0, r1
    f83a:	f003 fe50 	bl	134de <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f83e:	1a28      	subs	r0, r5, r0
    f840:	f003 ffe2 	bl	13808 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f844:	f004 f832 	bl	138ac <radio_tmr_end_capture>
    f848:	e02c      	b.n	f8a4 <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f84a:	2300      	movs	r3, #0
    f84c:	461a      	mov	r2, r3
    f84e:	4619      	mov	r1, r3
    f850:	4618      	mov	r0, r3
    f852:	f003 febf 	bl	135d4 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f856:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f85a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f85e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f862:	3008      	adds	r0, #8
    f864:	f003 fe2a 	bl	134bc <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f868:	f003 fe6c 	bl	13544 <radio_is_ready>
    f86c:	2800      	cmp	r0, #0
    f86e:	d1c9      	bne.n	f804 <isr+0xb4>
		if (ctrl_rl_enabled()) {
    f870:	f003 f930 	bl	12ad4 <ctrl_rl_enabled>
    f874:	b138      	cbz	r0, f886 <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    f876:	a810      	add	r0, sp, #64	; 0x40
    f878:	f002 fe7c 	bl	12574 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f87c:	4601      	mov	r1, r0
    f87e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f882:	f004 f8bb 	bl	139fc <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f886:	2100      	movs	r1, #0
    f888:	4608      	mov	r0, r1
    f88a:	f003 fe2c 	bl	134e6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f88e:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f890:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f892:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f894:	4608      	mov	r0, r1
    f896:	f003 fe22 	bl	134de <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f89a:	1a28      	subs	r0, r5, r0
    f89c:	f003 ffb4 	bl	13808 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f8a0:	f003 feb0 	bl	13604 <radio_rssi_measure>
}
    f8a4:	b013      	add	sp, #76	; 0x4c
    f8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f8aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    f8ae:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f8b2:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f8b6:	2100      	movs	r1, #0
    f8b8:	09d3      	lsrs	r3, r2, #7
    f8ba:	f000 0007 	and.w	r0, r0, #7
    f8be:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f8c2:	f003 fe87 	bl	135d4 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f8c6:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f8ca:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    f8ce:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f8d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    f8d6:	3108      	adds	r1, #8
    f8d8:	f7fb fd58 	bl	b38c <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f8dc:	f003 fe32 	bl	13544 <radio_is_ready>
    f8e0:	2800      	cmp	r0, #0
    f8e2:	d18f      	bne.n	f804 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f8e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f8e8:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f8ec:	2101      	movs	r1, #1
    f8ee:	f000 0007 	and.w	r0, r0, #7
    f8f2:	f003 fdf8 	bl	134e6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f8f6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f8fa:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    f8fe:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    f902:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    f904:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f906:	4405      	add	r5, r0
	switch (phy) {
    f908:	d013      	beq.n	f932 <isr+0x1e2>
		return 40;
    f90a:	2b04      	cmp	r3, #4
    f90c:	bf0c      	ite	eq
    f90e:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    f912:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f914:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    f916:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f91a:	09c1      	lsrs	r1, r0, #7
    f91c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f920:	f003 fddd 	bl	134de <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f924:	1a28      	subs	r0, r5, r0
    f926:	f003 ff6f 	bl	13808 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f92a:	2001      	movs	r0, #1
    f92c:	f7fc fb80 	bl	c030 <packet_tx_enqueue>
    f930:	e7b8      	b.n	f8a4 <isr+0x154>
		return 24;
    f932:	2018      	movs	r0, #24
    f934:	e7ee      	b.n	f914 <isr+0x1c4>
		LL_ASSERT(0);
    f936:	4b4a      	ldr	r3, [pc, #296]	; (fa60 <isr+0x310>)
    f938:	9301      	str	r3, [sp, #4]
    f93a:	9300      	str	r3, [sp, #0]
    f93c:	4b49      	ldr	r3, [pc, #292]	; (fa64 <isr+0x314>)
		LL_ASSERT(0);
    f93e:	4a4a      	ldr	r2, [pc, #296]	; (fa68 <isr+0x318>)
    f940:	494a      	ldr	r1, [pc, #296]	; (fa6c <isr+0x31c>)
    f942:	484c      	ldr	r0, [pc, #304]	; (fa74 <isr+0x324>)
    f944:	e2b2      	b.n	feac <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f946:	b926      	cbnz	r6, f952 <isr+0x202>
		_radio.state = STATE_CLOSE;
    f948:	2303      	movs	r3, #3
    f94a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f94c:	f003 fddc 	bl	13508 <radio_disable>
    f950:	e7a8      	b.n	f8a4 <isr+0x154>
	switch (_radio.role) {
    f952:	7ce3      	ldrb	r3, [r4, #19]
    f954:	3b01      	subs	r3, #1
    f956:	2b03      	cmp	r3, #3
    f958:	f201 813e 	bhi.w	10bd8 <__kernel_ram_size+0xbd8>
    f95c:	e8df f013 	tbh	[pc, r3, lsl #1]
    f960:	02ae0004 	.word	0x02ae0004
    f964:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    f968:	2f00      	cmp	r7, #0
    f96a:	d0ed      	beq.n	f948 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f96c:	f1ba 0f00 	cmp.w	sl, #0
    f970:	d039      	beq.n	f9e6 <isr+0x296>
    f972:	4658      	mov	r0, fp
    f974:	f002 fe5c 	bl	12630 <ctrl_rl_irk_idx>
    f978:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    f97c:	f003 fe1a 	bl	135b4 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f980:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    f984:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f986:	232b      	movs	r3, #43	; 0x2b
    f988:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f98a:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f98c:	fb11 3302 	smlabb	r3, r1, r2, r3
    f990:	930a      	str	r3, [sp, #40]	; 0x28
    f992:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f994:	f000 030f 	and.w	r3, r0, #15
    f998:	2b03      	cmp	r3, #3
    f99a:	d10a      	bne.n	f9b2 <isr+0x262>
    f99c:	7873      	ldrb	r3, [r6, #1]
    f99e:	2b0c      	cmp	r3, #12
    f9a0:	d107      	bne.n	f9b2 <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f9a2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f9a6:	065f      	lsls	r7, r3, #25
    f9a8:	d51f      	bpl.n	f9ea <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f9aa:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    f9ae:	0658      	lsls	r0, r3, #25
    f9b0:	d449      	bmi.n	fa46 <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    f9b2:	7830      	ldrb	r0, [r6, #0]
    f9b4:	f000 030f 	and.w	r3, r0, #15
    f9b8:	2b05      	cmp	r3, #5
    f9ba:	d1c5      	bne.n	f948 <isr+0x1f8>
    f9bc:	7873      	ldrb	r3, [r6, #1]
    f9be:	2b22      	cmp	r3, #34	; 0x22
    f9c0:	d1c2      	bne.n	f948 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9c4:	5ce3      	ldrb	r3, [r4, r3]
    f9c6:	f003 030f 	and.w	r3, r3, #15
    f9ca:	2b01      	cmp	r3, #1
    f9cc:	f040 814f 	bne.w	fc6e <isr+0x51e>
					    ci->connect_ind.init_addr,
    f9d0:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    f9d2:	aa10      	add	r2, sp, #64	; 0x40
    f9d4:	4639      	mov	r1, r7
    f9d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f9da:	f003 f81f 	bl	12a1c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    f9de:	2800      	cmp	r0, #0
    f9e0:	d14c      	bne.n	fa7c <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f9e2:	2000      	movs	r0, #0
    f9e4:	e05a      	b.n	fa9c <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f9e6:	20ff      	movs	r0, #255	; 0xff
    f9e8:	e7c6      	b.n	f978 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    f9ea:	aa10      	add	r2, sp, #64	; 0x40
    f9ec:	1cb1      	adds	r1, r6, #2
    f9ee:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f9f2:	f003 f813 	bl	12a1c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f9f6:	2800      	cmp	r0, #0
    f9f8:	d0d7      	beq.n	f9aa <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    f9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9fc:	7832      	ldrb	r2, [r6, #0]
    f9fe:	5ce3      	ldrb	r3, [r4, r3]
    fa00:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fa04:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    fa08:	d1d3      	bne.n	f9b2 <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    fa0a:	2206      	movs	r2, #6
    fa0c:	f106 0108 	add.w	r1, r6, #8
    fa10:	1ca8      	adds	r0, r5, #2
    fa12:	f7f2 f8de 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    fa16:	2800      	cmp	r0, #0
    fa18:	d1cb      	bne.n	f9b2 <isr+0x262>
		_radio.state = STATE_CLOSE;
    fa1a:	2303      	movs	r3, #3
    fa1c:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    fa1e:	f003 fde3 	bl	135e8 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    fa22:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    fa26:	2327      	movs	r3, #39	; 0x27
    fa28:	fb03 4000 	mla	r0, r3, r0, r4
    fa2c:	307b      	adds	r0, #123	; 0x7b
    fa2e:	f003 fd4b 	bl	134c8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    fa32:	f003 fd87 	bl	13544 <radio_is_ready>
    fa36:	2800      	cmp	r0, #0
    fa38:	f43f af34 	beq.w	f8a4 <isr+0x154>
    fa3c:	4b08      	ldr	r3, [pc, #32]	; (fa60 <isr+0x310>)
    fa3e:	9301      	str	r3, [sp, #4]
    fa40:	9300      	str	r3, [sp, #0]
    fa42:	4b0d      	ldr	r3, [pc, #52]	; (fa78 <isr+0x328>)
    fa44:	e6e2      	b.n	f80c <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    fa46:	f1b9 0f00 	cmp.w	r9, #0
    fa4a:	d1d6      	bne.n	f9fa <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fa4c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fa50:	f002 fe34 	bl	126bc <ctrl_irk_whitelisted>
    fa54:	2800      	cmp	r0, #0
    fa56:	d1d0      	bne.n	f9fa <isr+0x2aa>
    fa58:	e7ab      	b.n	f9b2 <isr+0x262>
    fa5a:	bf00      	nop
    fa5c:	200008dc 	.word	0x200008dc
    fa60:	00015af1 	.word	0x00015af1
    fa64:	00018bd3 	.word	0x00018bd3
    fa68:	00016fae 	.word	0x00016fae
    fa6c:	00016060 	.word	0x00016060
    fa70:	0001929a 	.word	0x0001929a
    fa74:	00016f22 	.word	0x00016f22
    fa78:	00018be6 	.word	0x00018be6
		       isr_adv_ci_adva_check(adv, ci) &&
    fa7c:	4631      	mov	r1, r6
    fa7e:	4628      	mov	r0, r5
    fa80:	f7fb ff6e 	bl	b960 <isr_adv_ci_adva_check>
					    rl_idx) &&
    fa84:	2800      	cmp	r0, #0
    fa86:	d0ac      	beq.n	f9e2 <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    fa88:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    fa8c:	2bff      	cmp	r3, #255	; 0xff
    fa8e:	f000 80db 	beq.w	fc48 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    fa92:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    fa96:	1ac1      	subs	r1, r0, r3
    fa98:	4248      	negs	r0, r1
    fa9a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fa9c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    faa0:	2800      	cmp	r0, #0
    faa2:	f43f af51 	beq.w	f948 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    faa6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    faaa:	b133      	cbz	r3, faba <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    faac:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    fab0:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    fab4:	429a      	cmp	r2, r3
    fab6:	f47f af47 	bne.w	f948 <isr+0x1f8>
    faba:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    fabe:	2b00      	cmp	r3, #0
    fac0:	f43f af42 	beq.w	f948 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    fac4:	2004      	movs	r0, #4
    fac6:	f7fb f903 	bl	acd0 <packet_rx_reserve_get>
		if (!node_rx) {
    faca:	4607      	mov	r7, r0
    facc:	2800      	cmp	r0, #0
    face:	f43f af3b 	beq.w	f948 <isr+0x1f8>
		_radio.state = STATE_STOP;
    fad2:	f04f 0904 	mov.w	r9, #4
    fad6:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    fada:	f003 fd15 	bl	13508 <radio_disable>
		conn = _radio.advertiser.conn;
    fade:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fae2:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    fae6:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fae8:	f44f 72aa 	mov.w	r2, #340	; 0x154
    faec:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    faee:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    faf2:	f7f7 ff90 	bl	7a16 <mem_index_get>
		memcpy(&conn->access_addr[0],
    faf6:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    fafa:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    fafc:	2203      	movs	r2, #3
    fafe:	f106 0112 	add.w	r1, r6, #18
    fb02:	f105 0014 	add.w	r0, r5, #20
    fb06:	f7f2 f879 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    fb0a:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    fb0e:	464a      	mov	r2, r9
    fb10:	f106 010e 	add.w	r1, r6, #14
    fb14:	4650      	mov	r0, sl
    fb16:	f7f2 f871 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    fb1a:	2205      	movs	r2, #5
    fb1c:	f106 011e 	add.w	r1, r6, #30
    fb20:	4640      	mov	r0, r8
    fb22:	f7f2 f86b 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    fb26:	2105      	movs	r1, #5
    fb28:	4640      	mov	r0, r8
    fb2a:	f7f8 f8e7 	bl	7cfc <util_ones_count_get>
		conn->data_chan_count =
    fb2e:	7f6b      	ldrb	r3, [r5, #29]
    fb30:	f360 0305 	bfi	r3, r0, #0, #6
    fb34:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    fb36:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    fb3a:	f3c3 0304 	ubfx	r3, r3, #0, #5
    fb3e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    fb40:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    fb42:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    fb44:	f240 48e2 	movw	r8, #1250	; 0x4e2
    fb48:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    fb4c:	7ef2      	ldrb	r2, [r6, #27]
    fb4e:	7eb3      	ldrb	r3, [r6, #26]
    fb50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    fb54:	4651      	mov	r1, sl
    fb56:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    fb58:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    fb5a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    fb5e:	f7f2 f84d 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    fb62:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fb64:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    fb66:	f242 7210 	movw	r2, #10000	; 0x2710
    fb6a:	fb02 8303 	mla	r3, r2, r3, r8
    fb6e:	3b01      	subs	r3, #1
    fb70:	fbb3 f3f8 	udiv	r3, r3, r8
    fb74:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    fb76:	4b54      	ldr	r3, [pc, #336]	; (fcc8 <isr+0x578>)
    fb78:	4443      	add	r3, r8
    fb7a:	fbb3 f3f8 	udiv	r3, r3, r8
    fb7e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fb82:	4b52      	ldr	r3, [pc, #328]	; (fccc <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fb84:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fb86:	4443      	add	r3, r8
    fb88:	fbb3 f3f8 	udiv	r3, r3, r8
    fb8c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fb8e:	4282      	cmp	r2, r0
    fb90:	4613      	mov	r3, r2
    fb92:	bfc4      	itt	gt
    fb94:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    fb98:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fb9a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fb9e:	bfc4      	itt	gt
    fba0:	18d2      	addgt	r2, r2, r3
    fba2:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    fba4:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fba6:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    fbaa:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    fbac:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    fbae:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    fbb0:	2300      	movs	r3, #0
    fbb2:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    fbb4:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    fbb6:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    fbba:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fbbc:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    fbc0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    fbc4:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fbc6:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    fbca:	464a      	mov	r2, r9
    fbcc:	f107 001b 	add.w	r0, r7, #27
    fbd0:	f7f2 f814 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    fbd4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fbd8:	f107 030e 	add.w	r3, r7, #14
    fbdc:	28ff      	cmp	r0, #255	; 0xff
    fbde:	930b      	str	r3, [sp, #44]	; 0x2c
    fbe0:	f106 0a02 	add.w	sl, r6, #2
    fbe4:	f107 0b14 	add.w	fp, r7, #20
    fbe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fbea:	d05f      	beq.n	fcac <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
    fbec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fbee:	f107 010d 	add.w	r1, r7, #13
    fbf2:	f002 fed5 	bl	129a0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    fbf6:	7b7b      	ldrb	r3, [r7, #13]
    fbf8:	3302      	adds	r3, #2
    fbfa:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    fbfc:	464a      	mov	r2, r9
    fbfe:	4651      	mov	r1, sl
    fc00:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fc02:	f7f1 fffb 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    fc06:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    fc08:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    fc0c:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    fc0e:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    fc12:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    fc14:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    fc18:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    fc1c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    fc20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    fc24:	8c28      	ldrh	r0, [r5, #32]
    fc26:	f7fb ffaf 	bl	bb88 <rx_fc_lock>
		packet_rx_enqueue();
    fc2a:	f7fb febd 	bl	b9a8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    fc2e:	2003      	movs	r0, #3
    fc30:	f7fb f84e 	bl	acd0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fc34:	2800      	cmp	r0, #0
    fc36:	d155      	bne.n	fce4 <isr+0x594>
    fc38:	4b25      	ldr	r3, [pc, #148]	; (fcd0 <isr+0x580>)
    fc3a:	9301      	str	r3, [sp, #4]
    fc3c:	9300      	str	r3, [sp, #0]
    fc3e:	4b25      	ldr	r3, [pc, #148]	; (fcd4 <isr+0x584>)
			LL_ASSERT(node_rx);
    fc40:	4a25      	ldr	r2, [pc, #148]	; (fcd8 <isr+0x588>)
    fc42:	4926      	ldr	r1, [pc, #152]	; (fcdc <isr+0x58c>)
    fc44:	4826      	ldr	r0, [pc, #152]	; (fce0 <isr+0x590>)
    fc46:	e131      	b.n	feac <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
    fc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc4a:	5ce2      	ldrb	r2, [r4, r3]
    fc4c:	7833      	ldrb	r3, [r6, #0]
    fc4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fc52:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    fc56:	f47f aec4 	bne.w	f9e2 <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    fc5a:	2206      	movs	r2, #6
    fc5c:	4639      	mov	r1, r7
    fc5e:	f105 0008 	add.w	r0, r5, #8
    fc62:	f7f1 ffb6 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    fc66:	fab0 f080 	clz	r0, r0
    fc6a:	0940      	lsrs	r0, r0, #5
    fc6c:	e716      	b.n	fa9c <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    fc6e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fc72:	09db      	lsrs	r3, r3, #7
    fc74:	d00d      	beq.n	fc92 <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    fc76:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    fc7a:	09db      	lsrs	r3, r3, #7
    fc7c:	f43f aeb1 	beq.w	f9e2 <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    fc80:	f1b9 0f00 	cmp.w	r9, #0
    fc84:	d10d      	bne.n	fca2 <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fc86:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fc8a:	f002 fd17 	bl	126bc <ctrl_irk_whitelisted>
    fc8e:	b940      	cbnz	r0, fca2 <isr+0x552>
    fc90:	e6a7      	b.n	f9e2 <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    fc92:	aa10      	add	r2, sp, #64	; 0x40
    fc94:	1cb1      	adds	r1, r6, #2
    fc96:	f3c0 1080 	ubfx	r0, r0, #6, #1
    fc9a:	f002 febf 	bl	12a1c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    fc9e:	2800      	cmp	r0, #0
    fca0:	d0e9      	beq.n	fc76 <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
    fca2:	4631      	mov	r1, r6
    fca4:	4628      	mov	r0, r5
    fca6:	f7fb fe5b 	bl	b960 <isr_adv_ci_adva_check>
    fcaa:	e6f7      	b.n	fa9c <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    fcac:	4619      	mov	r1, r3
    fcae:	464a      	mov	r2, r9
    fcb0:	4658      	mov	r0, fp
    fcb2:	f7f1 ffcf 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    fcb6:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fcb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    fcba:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fcbe:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fcc0:	464a      	mov	r2, r9
    fcc2:	4651      	mov	r1, sl
    fcc4:	e79d      	b.n	fc02 <isr+0x4b2>
    fcc6:	bf00      	nop
    fcc8:	026259ff 	.word	0x026259ff
    fccc:	01c9c37f 	.word	0x01c9c37f
    fcd0:	00015af1 	.word	0x00015af1
    fcd4:	00018be6 	.word	0x00018be6
    fcd8:	00016fae 	.word	0x00016fae
    fcdc:	00016060 	.word	0x00016060
    fce0:	000196d1 	.word	0x000196d1
			node_rx->hdr.handle = conn->handle;
    fce4:	8c2b      	ldrh	r3, [r5, #32]
    fce6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    fce8:	230b      	movs	r3, #11
    fcea:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    fcec:	7833      	ldrb	r3, [r6, #0]
    fcee:	f013 0320 	ands.w	r3, r3, #32
    fcf2:	d00e      	beq.n	fd12 <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
    fcf4:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    fcf6:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    fcf8:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    fcfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    fcfe:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    fd00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    fd04:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    fd06:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    fd08:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    fd0c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    fd0e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    fd10:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    fd12:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    fd14:	f7fb fe48 	bl	b9a8 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    fd18:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    fd1c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    fd20:	497d      	ldr	r1, [pc, #500]	; (ff18 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    fd22:	0952      	lsrs	r2, r2, #5
    fd24:	f362 0384 	bfi	r3, r2, #2, #3
    fd28:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    fd2c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    fd30:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    fd34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    fd38:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    fd3a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    fd3e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    fd42:	4a76      	ldr	r2, [pc, #472]	; (ff1c <isr+0x7cc>)
    fd44:	f203 233f 	addw	r3, r3, #575	; 0x23f
    fd48:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    fd4c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    fd4e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    fd52:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    fd54:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    fd56:	7d73      	ldrb	r3, [r6, #21]
    fd58:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    fd5c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    fd5e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    fd62:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    fd64:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    fd66:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    fd68:	4638      	mov	r0, r7
    fd6a:	f003 fbba 	bl	134e2 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    fd6e:	496c      	ldr	r1, [pc, #432]	; (ff20 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    fd70:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    fd72:	f200 4052 	addw	r0, r0, #1106	; 0x452
    fd76:	a366      	add	r3, pc, #408	; (adr r3, ff10 <isr+0x7c0>)
    fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd7c:	fba0 0101 	umull	r0, r1, r0, r1
    fd80:	f7f0 fa48 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fd84:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    fd88:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    fd8a:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fd8c:	4293      	cmp	r3, r2
    fd8e:	bf38      	it	cc
    fd90:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    fd92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fd96:	469a      	mov	sl, r3
		conn_interval_us -=
    fd98:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    fd9a:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    fd9c:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    fd9e:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    fda0:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    fda4:	f003 fd94 	bl	138d0 <radio_tmr_end_get>
    fda8:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    fdaa:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    fdac:	4639      	mov	r1, r7
		conn_offset_us +=
    fdae:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    fdb2:	4638      	mov	r0, r7
    fdb4:	f003 fb93 	bl	134de <radio_tx_chain_delay_get>
    fdb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fdba:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    fdbe:	4499      	add	r9, r3
    fdc0:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    fdc4:	eba9 030b 	sub.w	r3, r9, fp
    fdc8:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fdca:	f240 4383 	movw	r3, #1155	; 0x483
    fdce:	9300      	str	r3, [sp, #0]
    fdd0:	2205      	movs	r2, #5
    fdd2:	4b54      	ldr	r3, [pc, #336]	; (ff24 <isr+0x7d4>)
    fdd4:	f8df b148 	ldr.w	fp, [pc, #328]	; ff20 <isr+0x7d0>
    fdd8:	4639      	mov	r1, r7
    fdda:	4638      	mov	r0, r7
    fddc:	f7f8 fd0a 	bl	87f4 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    fde0:	f240 4184 	movw	r1, #1156	; 0x484
    fde4:	f7fb ff08 	bl	bbf8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    fde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fdea:	5ce3      	ldrb	r3, [r4, r3]
    fdec:	f003 030f 	and.w	r3, r3, #15
    fdf0:	2b01      	cmp	r3, #1
    fdf2:	d106      	bne.n	fe02 <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fdf4:	9700      	str	r7, [sp, #0]
    fdf6:	463b      	mov	r3, r7
    fdf8:	2203      	movs	r2, #3
    fdfa:	4639      	mov	r1, r7
    fdfc:	4638      	mov	r0, r7
    fdfe:	f7f8 fcf9 	bl	87f4 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fe02:	fba8 890b 	umull	r8, r9, r8, fp
    fe06:	a342      	add	r3, pc, #264	; (adr r3, ff10 <isr+0x7c0>)
    fe08:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe0c:	4640      	mov	r0, r8
    fe0e:	4649      	mov	r1, r9
    fe10:	f7f0 fa00 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe14:	f895 3020 	ldrb.w	r3, [r5, #32]
    fe18:	68a4      	ldr	r4, [r4, #8]
    fe1a:	9506      	str	r5, [sp, #24]
    fe1c:	3307      	adds	r3, #7
    fe1e:	b2db      	uxtb	r3, r3
    fe20:	930a      	str	r3, [sp, #40]	; 0x28
    fe22:	f240 439b 	movw	r3, #1179	; 0x49b
    fe26:	9308      	str	r3, [sp, #32]
    fe28:	4b3f      	ldr	r3, [pc, #252]	; (ff28 <isr+0x7d8>)
    fe2a:	9307      	str	r3, [sp, #28]
    fe2c:	4b3f      	ldr	r3, [pc, #252]	; (ff2c <isr+0x7dc>)
    fe2e:	9305      	str	r3, [sp, #20]
    fe30:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    fe32:	4a3f      	ldr	r2, [pc, #252]	; (ff30 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe34:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fe36:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe38:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    fe3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fe3e:	2307      	movs	r3, #7
    fe40:	2100      	movs	r1, #0
    fe42:	4343      	muls	r3, r0
    fe44:	fb02 3301 	mla	r3, r2, r1, r3
    fe48:	fba0 1202 	umull	r1, r2, r0, r2
    fe4c:	441a      	add	r2, r3
    fe4e:	4608      	mov	r0, r1
    fe50:	ebb8 0000 	subs.w	r0, r8, r0
    fe54:	4611      	mov	r1, r2
    fe56:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe5a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    fe5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe60:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe62:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    fe64:	f7f0 f9d6 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    fe68:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe6a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    fe6c:	a328      	add	r3, pc, #160	; (adr r3, ff10 <isr+0x7c0>)
    fe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe72:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    fe76:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe7a:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    fe7c:	f7f0 f9ca 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fe80:	eba4 040a 	sub.w	r4, r4, sl
    fe84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fe88:	9000      	str	r0, [sp, #0]
    fe8a:	4623      	mov	r3, r4
    fe8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fe8e:	4629      	mov	r1, r5
    fe90:	4628      	mov	r0, r5
    fe92:	f7f8 fc11 	bl	86b8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fe96:	f030 0302 	bics.w	r3, r0, #2
    fe9a:	f43f ad03 	beq.w	f8a4 <isr+0x154>
    fe9e:	4b25      	ldr	r3, [pc, #148]	; (ff34 <isr+0x7e4>)
    fea0:	9301      	str	r3, [sp, #4]
    fea2:	9300      	str	r3, [sp, #0]
    fea4:	4b24      	ldr	r3, [pc, #144]	; (ff38 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fea6:	4a25      	ldr	r2, [pc, #148]	; (ff3c <isr+0x7ec>)
    fea8:	4925      	ldr	r1, [pc, #148]	; (ff40 <isr+0x7f0>)
    feaa:	4826      	ldr	r0, [pc, #152]	; (ff44 <isr+0x7f4>)
		LL_ASSERT(0);
    feac:	f7f1 f86e 	bl	f8c <printk>
    feb0:	4040      	eors	r0, r0
    feb2:	f380 8811 	msr	BASEPRI, r0
    feb6:	f04f 0004 	mov.w	r0, #4
    feba:	df02      	svc	2
		rl_idx = devmatch_ok ?
    febc:	f1b9 0f00 	cmp.w	r9, #0
    fec0:	d01c      	beq.n	fefc <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    fec2:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    fec6:	4641      	mov	r1, r8
    fec8:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fecc:	f002 fb5c 	bl	12588 <ctrl_rl_idx>
    fed0:	4680      	mov	r8, r0
		if (crc_ok &&
    fed2:	b147      	cbz	r7, fee6 <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    fed4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fed8:	06da      	lsls	r2, r3, #27
    feda:	d535      	bpl.n	ff48 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    fedc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fee0:	06db      	lsls	r3, r3, #27
    fee2:	f100 811d 	bmi.w	10120 <__kernel_ram_size+0x120>
			_radio.state = STATE_CLOSE;
    fee6:	2303      	movs	r3, #3
    fee8:	7523      	strb	r3, [r4, #20]
			radio_disable();
    feea:	f003 fb0d 	bl	13508 <radio_disable>
			_radio.scanner.state = 0;
    feee:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    fef2:	f36f 0341 	bfc	r3, #1, #1
    fef6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    fefa:	e4d3      	b.n	f8a4 <isr+0x154>
		rl_idx = devmatch_ok ?
    fefc:	f1ba 0f00 	cmp.w	sl, #0
    ff00:	d003      	beq.n	ff0a <isr+0x7ba>
    ff02:	4658      	mov	r0, fp
    ff04:	f002 fb94 	bl	12630 <ctrl_rl_irk_idx>
    ff08:	e7e2      	b.n	fed0 <isr+0x780>
    ff0a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    ff0e:	e7e0      	b.n	fed2 <isr+0x782>
    ff10:	1afd498d 	.word	0x1afd498d
    ff14:	00000007 	.word	0x00000007
    ff18:	0001928a 	.word	0x0001928a
    ff1c:	000f4240 	.word	0x000f4240
    ff20:	3b9aca00 	.word	0x3b9aca00
    ff24:	0000bbf9 	.word	0x0000bbf9
    ff28:	0000bbbd 	.word	0x0000bbbd
    ff2c:	0000e065 	.word	0x0000e065
    ff30:	1afd498d 	.word	0x1afd498d
    ff34:	00015af1 	.word	0x00015af1
    ff38:	00018be6 	.word	0x00018be6
    ff3c:	00016fae 	.word	0x00016fae
    ff40:	00016060 	.word	0x00016060
    ff44:	0001906a 	.word	0x0001906a
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ff48:	f1b9 0f00 	cmp.w	r9, #0
    ff4c:	d005      	beq.n	ff5a <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ff4e:	4641      	mov	r1, r8
    ff50:	4650      	mov	r0, sl
    ff52:	f002 fcf1 	bl	12938 <ctrl_rl_idx_allowed>
    ff56:	2800      	cmp	r0, #0
    ff58:	d0c0      	beq.n	fedc <isr+0x78c>
	bool dir_report = false;
    ff5a:	2300      	movs	r3, #0
    ff5c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ff60:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ff64:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    ff68:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ff6c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ff70:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ff74:	2b00      	cmp	r3, #0
    ff76:	f000 80ec 	beq.w	10152 <__kernel_ram_size+0x152>
    ff7a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    ff7e:	b133      	cbz	r3, ff8e <isr+0x83e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ff80:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ff84:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    ff88:	429a      	cmp	r2, r3
    ff8a:	f040 80e2 	bne.w	10152 <__kernel_ram_size+0x152>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ff8e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ff92:	f3c3 1000 	ubfx	r0, r3, #4, #1
    ff96:	2800      	cmp	r0, #0
    ff98:	f000 80cd 	beq.w	10136 <__kernel_ram_size+0x136>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    ff9c:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ffa0:	f010 000f 	ands.w	r0, r0, #15
    ffa4:	f040 814c 	bne.w	10240 <__kernel_ram_size+0x240>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ffa8:	f003 fc92 	bl	138d0 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ffac:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ffb0:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ffb4:	48b8      	ldr	r0, [pc, #736]	; (10298 <__kernel_ram_size+0x298>)
    ffb6:	2207      	movs	r2, #7
    ffb8:	fba3 0100 	umull	r0, r1, r3, r0
    ffbc:	fb02 1103 	mla	r1, r2, r3, r1
    ffc0:	a3b3      	add	r3, pc, #716	; (adr r3, 10290 <__kernel_ram_size+0x290>)
    ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ffc6:	f7f0 f925 	bl	214 <__aeabi_uldivmod>
    ffca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    ffce:	4287      	cmp	r7, r0
    ffd0:	f080 80bf 	bcs.w	10152 <__kernel_ram_size+0x152>
			node_rx = packet_rx_reserve_get(4);
    ffd4:	2004      	movs	r0, #4
    ffd6:	f7fa fe7b 	bl	acd0 <packet_rx_reserve_get>
		if (node_rx == 0) {
    ffda:	4607      	mov	r7, r0
    ffdc:	2800      	cmp	r0, #0
    ffde:	d082      	beq.n	fee6 <isr+0x796>
		_radio.state = STATE_STOP;
    ffe0:	2304      	movs	r3, #4
    ffe2:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    ffe4:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    ffe6:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    ffea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ffee:	f003 fae1 	bl	135b4 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    fff2:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    fff4:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    fff8:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    fffc:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fffe:	f899 3008 	ldrb.w	r3, [r9, #8]
   10002:	7802      	ldrb	r2, [r0, #0]
   10004:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10008:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   1000c:	2322      	movs	r3, #34	; 0x22
   1000e:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   10010:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   10012:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   10014:	4640      	mov	r0, r8
   10016:	f002 fa99 	bl	1254c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   1001a:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   1001e:	4601      	mov	r1, r0
   10020:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   10022:	f013 0f01 	tst.w	r3, #1
   10026:	f810 3b02 	ldrb.w	r3, [r0], #2
   1002a:	f000 8114 	beq.w	10256 <__kernel_ram_size+0x256>
   1002e:	2900      	cmp	r1, #0
   10030:	f000 8111 	beq.w	10256 <__kernel_ram_size+0x256>
			pdu_adv_tx->tx_addr = 1;
   10034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10038:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   1003a:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   1003c:	f7f1 fdde 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   10040:	f105 0308 	add.w	r3, r5, #8
   10044:	4618      	mov	r0, r3
   10046:	2206      	movs	r2, #6
   10048:	f109 010a 	add.w	r1, r9, #10
   1004c:	930a      	str	r3, [sp, #40]	; 0x28
   1004e:	f7f1 fdd5 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   10052:	2204      	movs	r2, #4
   10054:	f106 0110 	add.w	r1, r6, #16
   10058:	f105 000e 	add.w	r0, r5, #14
   1005c:	f7f1 fdce 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   10060:	2203      	movs	r2, #3
   10062:	f106 0114 	add.w	r1, r6, #20
   10066:	f105 0012 	add.w	r0, r5, #18
   1006a:	f7f1 fdc7 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   1006e:	2301      	movs	r3, #1
   10070:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   10072:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
   10076:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1007a:	4353      	muls	r3, r2
   1007c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1007e:	f003 fc27 	bl	138d0 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   10082:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   10084:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
   10088:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1008a:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   1008e:	bfd8      	it	le
   10090:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   10094:	f1bb 0f00 	cmp.w	fp, #0
   10098:	f040 80e8 	bne.w	1026c <__kernel_ram_size+0x26c>
			pdu_adv_tx->connect_ind.win_offset = 0;
   1009c:	f885 b016 	strb.w	fp, [r5, #22]
   100a0:	f885 b017 	strb.w	fp, [r5, #23]
   100a4:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   100a6:	2100      	movs	r1, #0
   100a8:	4608      	mov	r0, r1
   100aa:	f003 fa13 	bl	134d4 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   100ae:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   100b0:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   100b4:	4608      	mov	r0, r1
   100b6:	f003 fa12 	bl	134de <radio_tx_chain_delay_get>
   100ba:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   100be:	f100 031e 	add.w	r3, r0, #30
   100c2:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
   100c4:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   100c8:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   100ca:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   100ce:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   100d0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   100d4:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   100d6:	f106 0117 	add.w	r1, r6, #23
   100da:	2205      	movs	r2, #5
   100dc:	f105 001e 	add.w	r0, r5, #30
   100e0:	f7f1 fd8c 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
   100e4:	7fb2      	ldrb	r2, [r6, #30]
   100e6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   100ea:	f362 0304 	bfi	r3, r2, #0, #5
   100ee:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   100f2:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
   100f6:	f362 1347 	bfi	r3, r2, #5, #3
   100fa:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   100fe:	f003 fa73 	bl	135e8 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   10102:	4628      	mov	r0, r5
   10104:	f003 f9e0 	bl	134c8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   10108:	f003 fa1c 	bl	13544 <radio_is_ready>
   1010c:	4683      	mov	fp, r0
   1010e:	2800      	cmp	r0, #0
   10110:	f000 80cc 	beq.w	102ac <__kernel_ram_size+0x2ac>
		LL_ASSERT(!radio_is_ready());
   10114:	4b61      	ldr	r3, [pc, #388]	; (1029c <__kernel_ram_size+0x29c>)
   10116:	9301      	str	r3, [sp, #4]
   10118:	9300      	str	r3, [sp, #0]
   1011a:	4b61      	ldr	r3, [pc, #388]	; (102a0 <__kernel_ram_size+0x2a0>)
   1011c:	f7ff bb76 	b.w	f80c <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   10120:	f1b9 0f00 	cmp.w	r9, #0
   10124:	f47f af19 	bne.w	ff5a <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   10128:	4640      	mov	r0, r8
   1012a:	f002 fac7 	bl	126bc <ctrl_irk_whitelisted>
		if (crc_ok &&
   1012e:	2800      	cmp	r0, #0
   10130:	f43f aed9 	beq.w	fee6 <isr+0x796>
   10134:	e711      	b.n	ff5a <isr+0x80a>
	if (rl_idx != FILTER_IDX_NONE) {
   10136:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1013a:	d06f      	beq.n	1021c <__kernel_ram_size+0x21c>
		return (rl_idx == _radio.scanner.rl_idx);
   1013c:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
   10140:	eba0 0e08 	sub.w	lr, r0, r8
   10144:	f1de 0000 	rsbs	r0, lr, #0
   10148:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   1014c:	2800      	cmp	r0, #0
   1014e:	f47f af25 	bne.w	ff9c <isr+0x84c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   10152:	f899 0008 	ldrb.w	r0, [r9, #8]
   10156:	f010 000f 	ands.w	r0, r0, #15
   1015a:	d002      	beq.n	10162 <__kernel_ram_size+0x162>
   1015c:	2806      	cmp	r0, #6
   1015e:	f040 81ac 	bne.w	104ba <__kernel_ram_size+0x4ba>
		 (_radio.scanner.type != 0) &&
   10162:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   10166:	071f      	lsls	r7, r3, #28
   10168:	f140 8191 	bpl.w	1048e <__kernel_ram_size+0x48e>
		 (_radio.scanner.type != 0) &&
   1016c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   10170:	2a00      	cmp	r2, #0
   10172:	f040 818c 	bne.w	1048e <__kernel_ram_size+0x48e>
		err = isr_rx_scan_report(rssi_ready,
   10176:	f1ba 0f00 	cmp.w	sl, #0
   1017a:	bf14      	ite	ne
   1017c:	4641      	movne	r1, r8
   1017e:	21ff      	moveq	r1, #255	; 0xff
   10180:	4628      	mov	r0, r5
   10182:	f7fb fca9 	bl	bad8 <isr_rx_scan_report>
		if (err) {
   10186:	2800      	cmp	r0, #0
   10188:	f47f aead 	bne.w	fee6 <isr+0x796>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1018c:	f003 fa12 	bl	135b4 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   10190:	7803      	ldrb	r3, [r0, #0]
   10192:	2203      	movs	r2, #3
   10194:	f362 0303 	bfi	r3, r2, #0, #4
   10198:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1019a:	f899 3008 	ldrb.w	r3, [r9, #8]
   1019e:	7802      	ldrb	r2, [r0, #0]
   101a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   101a4:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   101a8:	230c      	movs	r3, #12
   101aa:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   101ac:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   101ae:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   101b0:	4640      	mov	r0, r8
   101b2:	f002 f9cb 	bl	1254c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   101b6:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   101ba:	4601      	mov	r1, r0
   101bc:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   101be:	f013 0f01 	tst.w	r3, #1
   101c2:	f810 3b02 	ldrb.w	r3, [r0], #2
   101c6:	f000 8159 	beq.w	1047c <__kernel_ram_size+0x47c>
   101ca:	2900      	cmp	r1, #0
   101cc:	f000 8156 	beq.w	1047c <__kernel_ram_size+0x47c>
			pdu_adv_tx->tx_addr = 1;
   101d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   101d4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   101d6:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   101d8:	f7f1 fd10 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   101dc:	2206      	movs	r2, #6
   101de:	f109 010a 	add.w	r1, r9, #10
   101e2:	f105 0008 	add.w	r0, r5, #8
   101e6:	f7f1 fd09 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
   101ea:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   101ee:	f043 0302 	orr.w	r3, r3, #2
   101f2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
   101f6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   101f8:	2302      	movs	r3, #2
   101fa:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
   101fc:	f003 fa7a 	bl	136f4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   10200:	2000      	movs	r0, #0
   10202:	f003 f9db 	bl	135bc <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   10206:	4628      	mov	r0, r5
   10208:	f003 f95e 	bl	134c8 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   1020c:	f003 fb4e 	bl	138ac <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   10210:	f003 f998 	bl	13544 <radio_is_ready>
   10214:	2800      	cmp	r0, #0
   10216:	f43f ab45 	beq.w	f8a4 <isr+0x154>
   1021a:	e77b      	b.n	10114 <__kernel_ram_size+0x114>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   1021c:	f899 2008 	ldrb.w	r2, [r9, #8]
   10220:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10224:	f3c2 1280 	ubfx	r2, r2, #6, #1
   10228:	4293      	cmp	r3, r2
   1022a:	d18f      	bne.n	1014c <__kernel_ram_size+0x14c>
		(memcmp(&_radio.scanner.adv_addr[0],
   1022c:	2206      	movs	r2, #6
   1022e:	f109 010a 	add.w	r1, r9, #10
   10232:	481c      	ldr	r0, [pc, #112]	; (102a4 <__kernel_ram_size+0x2a4>)
   10234:	f7f1 fccd 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   10238:	fab0 f080 	clz	r0, r0
   1023c:	0940      	lsrs	r0, r0, #5
   1023e:	e785      	b.n	1014c <__kernel_ram_size+0x14c>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   10240:	2801      	cmp	r0, #1
   10242:	d18b      	bne.n	1015c <__kernel_ram_size+0x15c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   10244:	2300      	movs	r3, #0
   10246:	4642      	mov	r2, r8
   10248:	4631      	mov	r1, r6
   1024a:	f7fb fbf9 	bl	ba40 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   1024e:	2800      	cmp	r0, #0
   10250:	f43f af7f 	beq.w	10152 <__kernel_ram_size+0x152>
   10254:	e6a8      	b.n	ffa8 <isr+0x858>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   10256:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   1025a:	4913      	ldr	r1, [pc, #76]	; (102a8 <__kernel_ram_size+0x2a8>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   1025c:	09d2      	lsrs	r2, r2, #7
   1025e:	f362 1386 	bfi	r3, r2, #6, #1
   10262:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   10264:	2206      	movs	r2, #6
   10266:	e6e9      	b.n	1003c <__kernel_ram_size+0x3c>
				conn_space_us += conn_interval_us;
   10268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1026a:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   1026c:	f1bb 0f00 	cmp.w	fp, #0
   10270:	dbfa      	blt.n	10268 <__kernel_ram_size+0x268>
   10272:	459b      	cmp	fp, r3
   10274:	d3f8      	bcc.n	10268 <__kernel_ram_size+0x268>
				(conn_space_us - conn_offset_us) / 1250;
   10276:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
   1027a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1027e:	fbb3 f3f2 	udiv	r3, r3, r2
   10282:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   10284:	7d6b      	ldrb	r3, [r5, #21]
   10286:	3301      	adds	r3, #1
   10288:	756b      	strb	r3, [r5, #21]
   1028a:	e70c      	b.n	100a6 <__kernel_ram_size+0xa6>
   1028c:	f3af 8000 	nop.w
   10290:	3b9aca00 	.word	0x3b9aca00
   10294:	00000000 	.word	0x00000000
   10298:	1afd498d 	.word	0x1afd498d
   1029c:	00015af1 	.word	0x00015af1
   102a0:	00018c04 	.word	0x00018c04
   102a4:	200009c6 	.word	0x200009c6
   102a8:	200009c0 	.word	0x200009c0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   102ac:	f44f 72aa 	mov.w	r2, #340	; 0x154
   102b0:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   102b4:	4630      	mov	r0, r6
   102b6:	f7f7 fbae 	bl	7a16 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   102ba:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   102bc:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   102be:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   102c2:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
   102c6:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   102ca:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   102cc:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   102d0:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   102d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   102d6:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   102d8:	2206      	movs	r2, #6
   102da:	f107 001b 	add.w	r0, r7, #27
   102de:	f7f1 fc8d 	bl	1bfc <memcpy>
   102e2:	f107 0b0e 	add.w	fp, r7, #14
   102e6:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   102ea:	f1ba 0f00 	cmp.w	sl, #0
   102ee:	d032      	beq.n	10356 <__kernel_ram_size+0x356>
   102f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   102f4:	d02f      	beq.n	10356 <__kernel_ram_size+0x356>
			ll_rl_id_addr_get(rl_idx,
   102f6:	465a      	mov	r2, fp
   102f8:	f107 010d 	add.w	r1, r7, #13
   102fc:	4640      	mov	r0, r8
   102fe:	930d      	str	r3, [sp, #52]	; 0x34
   10300:	f002 fb4e 	bl	129a0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   10304:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   10306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10308:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   1030a:	3202      	adds	r2, #2
   1030c:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1030e:	4618      	mov	r0, r3
   10310:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   10312:	f7f1 fc73 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   10316:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1031a:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   1031e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   10322:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   10326:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   1032a:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
   1032e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   10332:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   10336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
   1033a:	8c30      	ldrh	r0, [r6, #32]
   1033c:	f7fb fc24 	bl	bb88 <rx_fc_lock>
		packet_rx_enqueue();
   10340:	f7fb fb32 	bl	b9a8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   10344:	2003      	movs	r0, #3
   10346:	f7fa fcc3 	bl	acd0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1034a:	b988      	cbnz	r0, 10370 <__kernel_ram_size+0x370>
   1034c:	4bba      	ldr	r3, [pc, #744]	; (10638 <__kernel_ram_size+0x638>)
   1034e:	9301      	str	r3, [sp, #4]
   10350:	9300      	str	r3, [sp, #0]
   10352:	4bba      	ldr	r3, [pc, #744]	; (1063c <__kernel_ram_size+0x63c>)
   10354:	e474      	b.n	fc40 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   10356:	2206      	movs	r2, #6
   10358:	2100      	movs	r1, #0
   1035a:	4618      	mov	r0, r3
   1035c:	f7f1 fc7a 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
   10360:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   10362:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   10364:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   10368:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1036a:	2206      	movs	r2, #6
   1036c:	4658      	mov	r0, fp
   1036e:	e7d0      	b.n	10312 <__kernel_ram_size+0x312>
			node_rx->hdr.handle = conn->handle;
   10370:	8c33      	ldrh	r3, [r6, #32]
   10372:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   10374:	230b      	movs	r3, #11
   10376:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
   10378:	f899 3008 	ldrb.w	r3, [r9, #8]
   1037c:	f013 0320 	ands.w	r3, r3, #32
   10380:	d00e      	beq.n	103a0 <__kernel_ram_size+0x3a0>
					((u16_t)conn->access_addr[1] << 8) |
   10382:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   10384:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   10386:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   10388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   1038c:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   1038e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   10392:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   10394:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   10396:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   1039a:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   1039c:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   1039e:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   103a0:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   103a2:	f7fb fb01 	bl	b9a8 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   103a6:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   103a8:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   103ac:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   103ae:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   103b2:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   103b4:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   103b6:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   103ba:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   103bc:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   103be:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   103c2:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   103c4:	4629      	mov	r1, r5
   103c6:	9300      	str	r3, [sp, #0]
   103c8:	4628      	mov	r0, r5
   103ca:	4b9d      	ldr	r3, [pc, #628]	; (10640 <__kernel_ram_size+0x640>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   103cc:	f8df a284 	ldr.w	sl, [pc, #644]	; 10654 <__kernel_ram_size+0x654>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   103d0:	bf38      	it	cc
   103d2:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   103d4:	f7f8 fa0e 	bl	87f4 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   103d8:	f240 6139 	movw	r1, #1593	; 0x639
   103dc:	f7fb fc40 	bl	bc60 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   103e0:	462b      	mov	r3, r5
   103e2:	2204      	movs	r2, #4
   103e4:	4629      	mov	r1, r5
   103e6:	9500      	str	r5, [sp, #0]
   103e8:	4628      	mov	r0, r5
   103ea:	f7f8 fa03 	bl	87f4 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   103ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   103f0:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   103f4:	68a3      	ldr	r3, [r4, #8]
   103f6:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
   103fa:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   103fc:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   10400:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   10404:	9308      	str	r3, [sp, #32]
   10406:	4b8f      	ldr	r3, [pc, #572]	; (10644 <__kernel_ram_size+0x644>)
   10408:	9307      	str	r3, [sp, #28]
   1040a:	4b8f      	ldr	r3, [pc, #572]	; (10648 <__kernel_ram_size+0x648>)
   1040c:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1040e:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
   10410:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10412:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   10414:	4640      	mov	r0, r8
   10416:	a386      	add	r3, pc, #536	; (adr r3, 10630 <__kernel_ram_size+0x630>)
   10418:	e9d3 2300 	ldrd	r2, r3, [r3]
   1041c:	4649      	mov	r1, r9
		ticker_status =
   1041e:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   10420:	f7ef fef8 	bl	214 <__aeabi_uldivmod>
   10424:	4610      	mov	r0, r2
   10426:	4619      	mov	r1, r3
   10428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1042c:	2300      	movs	r3, #0
   1042e:	f7ef fef1 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   10432:	a37f      	add	r3, pc, #508	; (adr r3, 10630 <__kernel_ram_size+0x630>)
   10434:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10438:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1043a:	4649      	mov	r1, r9
   1043c:	4640      	mov	r0, r8
   1043e:	f7ef fee9 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   10442:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   10444:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   10446:	a37a      	add	r3, pc, #488	; (adr r3, 10630 <__kernel_ram_size+0x630>)
   10448:	e9d3 2300 	ldrd	r2, r3, [r3]
   1044c:	fba1 010a 	umull	r0, r1, r1, sl
   10450:	f7ef fee0 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10454:	3407      	adds	r4, #7
   10456:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   1045a:	b2e4      	uxtb	r4, r4
   1045c:	9000      	str	r0, [sp, #0]
   1045e:	465b      	mov	r3, fp
   10460:	4622      	mov	r2, r4
   10462:	4629      	mov	r1, r5
   10464:	4628      	mov	r0, r5
   10466:	f7f8 f927 	bl	86b8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1046a:	f030 0302 	bics.w	r3, r0, #2
   1046e:	f43f aa19 	beq.w	f8a4 <isr+0x154>
   10472:	4b71      	ldr	r3, [pc, #452]	; (10638 <__kernel_ram_size+0x638>)
   10474:	9301      	str	r3, [sp, #4]
   10476:	9300      	str	r3, [sp, #0]
   10478:	4b70      	ldr	r3, [pc, #448]	; (1063c <__kernel_ram_size+0x63c>)
   1047a:	e514      	b.n	fea6 <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   1047c:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   10480:	4972      	ldr	r1, [pc, #456]	; (1064c <__kernel_ram_size+0x64c>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   10482:	09d2      	lsrs	r2, r2, #7
   10484:	f362 1386 	bfi	r3, r2, #6, #1
   10488:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   1048a:	2206      	movs	r2, #6
   1048c:	e6a4      	b.n	101d8 <__kernel_ram_size+0x1d8>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1048e:	b9a0      	cbnz	r0, 104ba <__kernel_ram_size+0x4ba>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   10490:	f899 3009 	ldrb.w	r3, [r9, #9]
   10494:	2b00      	cmp	r3, #0
   10496:	f43f ad26 	beq.w	fee6 <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   1049a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1049e:	2b00      	cmp	r3, #0
   104a0:	f47f ad21 	bne.w	fee6 <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
   104a4:	f1ba 0f00 	cmp.w	sl, #0
   104a8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   104ac:	bf14      	ite	ne
   104ae:	4641      	movne	r1, r8
   104b0:	21ff      	moveq	r1, #255	; 0xff
   104b2:	4628      	mov	r0, r5
   104b4:	f7fb fb10 	bl	bad8 <isr_rx_scan_report>
   104b8:	e515      	b.n	fee6 <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   104ba:	2801      	cmp	r0, #1
   104bc:	d00e      	beq.n	104dc <__kernel_ram_size+0x4dc>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   104be:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
   104c2:	f003 020b 	and.w	r2, r3, #11
   104c6:	2a02      	cmp	r2, #2
   104c8:	d0e2      	beq.n	10490 <__kernel_ram_size+0x490>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   104ca:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   104ce:	2b07      	cmp	r3, #7
   104d0:	d10d      	bne.n	104ee <__kernel_ram_size+0x4ee>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   104d2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   104d6:	0758      	lsls	r0, r3, #29
   104d8:	d1da      	bne.n	10490 <__kernel_ram_size+0x490>
   104da:	e504      	b.n	fee6 <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   104dc:	ab10      	add	r3, sp, #64	; 0x40
   104de:	4642      	mov	r2, r8
   104e0:	4631      	mov	r1, r6
   104e2:	2000      	movs	r0, #0
   104e4:	f7fb faac 	bl	ba40 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   104e8:	2800      	cmp	r0, #0
   104ea:	d1d1      	bne.n	10490 <__kernel_ram_size+0x490>
   104ec:	e7e7      	b.n	104be <__kernel_ram_size+0x4be>
		   (_radio.scanner.phy)) ||
   104ee:	2b04      	cmp	r3, #4
   104f0:	f47f acf9 	bne.w	fee6 <isr+0x796>
		   (_radio.scanner.state != 0) &&
   104f4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   104f8:	0799      	lsls	r1, r3, #30
   104fa:	f57f acf4 	bpl.w	fee6 <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   104fe:	f003 f859 	bl	135b4 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   10502:	f899 3008 	ldrb.w	r3, [r9, #8]
   10506:	7802      	ldrb	r2, [r0, #0]
   10508:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1050c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   10510:	f47f ace9 	bne.w	fee6 <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
   10514:	2206      	movs	r2, #6
   10516:	f109 010a 	add.w	r1, r9, #10
   1051a:	3008      	adds	r0, #8
   1051c:	f7f1 fb59 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
   10520:	2800      	cmp	r0, #0
   10522:	d0b5      	beq.n	10490 <__kernel_ram_size+0x490>
   10524:	e4df      	b.n	fee6 <isr+0x796>
	_radio.packet_counter++;
   10526:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1052a:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
   1052e:	3301      	adds	r3, #1
   10530:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
   10534:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   10536:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
   1053a:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1053e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10542:	2301      	movs	r3, #1
   10544:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   10548:	2f00      	cmp	r7, #0
   1054a:	f000 82d2 	beq.w	10af2 <__kernel_ram_size+0xaf2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   1054e:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   10552:	f898 1008 	ldrb.w	r1, [r8, #8]
   10556:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1055a:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1055e:	f003 0201 	and.w	r2, r3, #1
   10562:	4291      	cmp	r1, r2
   10564:	f000 819e 	beq.w	108a4 <__kernel_ram_size+0x8a4>
		_radio.conn_curr->sn++;
   10568:	f082 0201 	eor.w	r2, r2, #1
   1056c:	f362 0300 	bfi	r3, r2, #0, #1
   10570:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   10574:	7ce3      	ldrb	r3, [r4, #19]
   10576:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   10578:	bf02      	ittt	eq
   1057a:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   1057e:	f043 0301 	orreq.w	r3, r3, #1
   10582:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   10586:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1058a:	061a      	lsls	r2, r3, #24
   1058c:	f100 8185 	bmi.w	1089a <__kernel_ram_size+0x89a>
			node_tx = _radio.conn_curr->pkt_tx_head;
   10590:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   10594:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   10598:	1d30      	adds	r0, r6, #4
   1059a:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   1059e:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   105a2:	f1b9 0f00 	cmp.w	r9, #0
   105a6:	f000 80ab 	beq.w	10700 <__kernel_ram_size+0x700>
				if (_radio.conn_curr->enc_tx) {
   105aa:	069b      	lsls	r3, r3, #26
   105ac:	d50b      	bpl.n	105c6 <__kernel_ram_size+0x5c6>
					_radio.conn_curr->ccm_tx.counter++;
   105ae:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   105b2:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   105b6:	f11b 0201 	adds.w	r2, fp, #1
   105ba:	f14c 0300 	adc.w	r3, ip, #0
   105be:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   105c2:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   105c6:	5c43      	ldrb	r3, [r0, r1]
   105c8:	f003 0303 	and.w	r3, r3, #3
   105cc:	2b03      	cmp	r3, #3
   105ce:	f040 8097 	bne.w	10700 <__kernel_ram_size+0x700>
	switch (pdu_data_tx->llctrl.opcode) {
   105d2:	f89a 3003 	ldrb.w	r3, [sl, #3]
   105d6:	3b02      	subs	r3, #2
   105d8:	2b16      	cmp	r3, #22
   105da:	f200 8091 	bhi.w	10700 <__kernel_ram_size+0x700>
   105de:	e8df f013 	tbh	[pc, r3, lsl #1]
   105e2:	0017      	.short	0x0017
   105e4:	00c50073 	.word	0x00c50073
   105e8:	008f008f 	.word	0x008f008f
   105ec:	008f008f 	.word	0x008f008f
   105f0:	0091008f 	.word	0x0091008f
   105f4:	008f009c 	.word	0x008f009c
   105f8:	008f00cc 	.word	0x008f00cc
   105fc:	008f008f 	.word	0x008f008f
   10600:	008f008f 	.word	0x008f008f
   10604:	00d6008f 	.word	0x00d6008f
   10608:	00ee008f 	.word	0x00ee008f
   1060c:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
   10610:	2303      	movs	r3, #3
   10612:	7523      	strb	r3, [r4, #20]
		radio_disable();
   10614:	f002 ff78 	bl	13508 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   10618:	f002 ff94 	bl	13544 <radio_is_ready>
   1061c:	b1e0      	cbz	r0, 10658 <__kernel_ram_size+0x658>
   1061e:	4b06      	ldr	r3, [pc, #24]	; (10638 <__kernel_ram_size+0x638>)
   10620:	9301      	str	r3, [sp, #4]
   10622:	9300      	str	r3, [sp, #0]
   10624:	4b0a      	ldr	r3, [pc, #40]	; (10650 <__kernel_ram_size+0x650>)
   10626:	f7ff b8f1 	b.w	f80c <isr+0xbc>
   1062a:	bf00      	nop
   1062c:	f3af 8000 	nop.w
   10630:	1afd498d 	.word	0x1afd498d
   10634:	00000007 	.word	0x00000007
   10638:	00015af1 	.word	0x00015af1
   1063c:	00018c04 	.word	0x00018c04
   10640:	0000bc61 	.word	0x0000bc61
   10644:	0000bbbd 	.word	0x0000bbbd
   10648:	0000e061 	.word	0x0000e061
   1064c:	200009c0 	.word	0x200009c0
   10650:	00018c10 	.word	0x00018c10
   10654:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   10658:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   1065c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10660:	2913      	cmp	r1, #19
   10662:	bf08      	it	eq
   10664:	2116      	moveq	r1, #22
   10666:	f7fb fee3 	bl	c430 <terminate_ind_rx_enqueue>
		terminate = 1;
   1066a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   1066c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10670:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   10674:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   10676:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   1067a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   1067e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   10680:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   10684:	d11e      	bne.n	106c4 <__kernel_ram_size+0x6c4>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   10686:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1068a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   1068e:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   10690:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   10692:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   10696:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   1069a:	f040 80c9 	bne.w	10830 <__kernel_ram_size+0x830>
		if (node_tx) {
   1069e:	b18e      	cbz	r6, 106c4 <__kernel_ram_size+0x6c4>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   106a0:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   106a4:	f8d3 e000 	ldr.w	lr, [r3]
   106a8:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   106ac:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   106ae:	bf06      	itte	eq
   106b0:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   106b4:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   106b8:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   106bc:	49cd      	ldr	r1, [pc, #820]	; (109f4 <__kernel_ram_size+0x9f4>)
   106be:	4630      	mov	r0, r6
   106c0:	f7f7 f98b 	bl	79da <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   106c4:	2600      	movs	r6, #0
   106c6:	e0bc      	b.n	10842 <__kernel_ram_size+0x842>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   106c8:	2208      	movs	r2, #8
   106ca:	f10a 010e 	add.w	r1, sl, #14
   106ce:	f105 0094 	add.w	r0, r5, #148	; 0x94
   106d2:	f7f1 fa93 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   106d6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   106da:	2204      	movs	r2, #4
   106dc:	f10a 0116 	add.w	r1, sl, #22
   106e0:	f500 7089 	add.w	r0, r0, #274	; 0x112
   106e4:	f7f1 fa8a 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
   106e8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   106ec:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   106f0:	f042 0208 	orr.w	r2, r2, #8
   106f4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   106f8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   106fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   10700:	2500      	movs	r5, #0
   10702:	e7b3      	b.n	1066c <__kernel_ram_size+0x66c>
		_radio.conn_curr->pause_tx = 1;
   10704:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   10708:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   1070c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   10710:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   10714:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   10718:	e7f2      	b.n	10700 <__kernel_ram_size+0x700>
		if (_radio.role == ROLE_MASTER) {
   1071a:	f894 a013 	ldrb.w	sl, [r4, #19]
   1071e:	fa5f fa8a 	uxtb.w	sl, sl
   10722:	f1ba 0f04 	cmp.w	sl, #4
   10726:	d121      	bne.n	1076c <__kernel_ram_size+0x76c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10728:	7933      	ldrb	r3, [r6, #4]
   1072a:	f043 0303 	orr.w	r3, r3, #3
   1072e:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   10730:	2317      	movs	r3, #23
   10732:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   10734:	2303      	movs	r3, #3
   10736:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   10738:	2208      	movs	r2, #8
   1073a:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   1073e:	3004      	adds	r0, #4
   10740:	f7f1 fa5c 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   10744:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   10748:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   1074a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   1074e:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   10750:	f106 0112 	add.w	r1, r6, #18
   10754:	2208      	movs	r2, #8
   10756:	6860      	ldr	r0, [r4, #4]
   10758:	f003 ff10 	bl	1457c <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   1075c:	f106 011a 	add.w	r1, r6, #26
   10760:	4652      	mov	r2, sl
   10762:	6860      	ldr	r0, [r4, #4]
   10764:	f003 ff0a 	bl	1457c <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
   10768:	2600      	movs	r6, #0
   1076a:	e7c9      	b.n	10700 <__kernel_ram_size+0x700>
			_radio.conn_curr->pause_tx = 1;
   1076c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   10770:	f043 0308 	orr.w	r3, r3, #8
   10774:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   10778:	e7c2      	b.n	10700 <__kernel_ram_size+0x700>
		_radio.conn_curr->pause_rx = 0;
   1077a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   1077e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   10782:	f36f 03c3 	bfc	r3, #3, #1
   10786:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   1078a:	2300      	movs	r3, #0
   1078c:	e7c2      	b.n	10714 <__kernel_ram_size+0x714>
		if ((_radio.conn_curr->llcp_length.req !=
   1078e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   10792:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   10796:	429a      	cmp	r2, r3
   10798:	d0b2      	beq.n	10700 <__kernel_ram_size+0x700>
		    (_radio.conn_curr->llcp_length.state ==
   1079a:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   1079e:	f003 0203 	and.w	r2, r3, #3
   107a2:	2a01      	cmp	r2, #1
   107a4:	d1ac      	bne.n	10700 <__kernel_ram_size+0x700>
			_radio.conn_curr->pause_tx = 1;
   107a6:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   107aa:	f042 0208 	orr.w	r2, r2, #8
   107ae:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   107b2:	2202      	movs	r2, #2
   107b4:	f362 0301 	bfi	r3, r2, #0, #2
   107b8:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   107bc:	e7a0      	b.n	10700 <__kernel_ram_size+0x700>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   107be:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   107c2:	2202      	movs	r2, #2
   107c4:	f362 0301 	bfi	r3, r2, #0, #2
   107c8:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   107cc:	7ce3      	ldrb	r3, [r4, #19]
   107ce:	2b03      	cmp	r3, #3
   107d0:	d196      	bne.n	10700 <__kernel_ram_size+0x700>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   107d2:	2301      	movs	r3, #1
   107d4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   107d8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   107dc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   107e0:	2202      	movs	r2, #2
   107e2:	2304      	movs	r3, #4
   107e4:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   107e8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   107ec:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   107f0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   107f4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   107f8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   107fc:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   10800:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10804:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   10808:	f003 0307 	and.w	r3, r3, #7
   1080c:	aa12      	add	r2, sp, #72	; 0x48
   1080e:	4413      	add	r3, r2
   10810:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   10814:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   10818:	f363 0202 	bfi	r2, r3, #0, #3
   1081c:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   10820:	e76e      	b.n	10700 <__kernel_ram_size+0x700>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   10822:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   10826:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1082a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1082e:	e7f3      	b.n	10818 <__kernel_ram_size+0x818>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   10830:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   10834:	4293      	cmp	r3, r2
   10836:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   10838:	bf08      	it	eq
   1083a:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1083e:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   10842:	b37d      	cbz	r5, 108a4 <__kernel_ram_size+0x8a4>
		connection_release(_radio.conn_curr);
   10844:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10848:	f7fb fc40 	bl	c0cc <connection_release>
		_radio.conn_curr = NULL;
   1084c:	2300      	movs	r3, #0
   1084e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
   10852:	f003 f81f 	bl	13894 <radio_tmr_aa_restore>
   10856:	b918      	cbnz	r0, 10860 <__kernel_ram_size+0x860>
		radio_tmr_aa_save(radio_tmr_aa_get());
   10858:	f003 f810 	bl	1387c <radio_tmr_aa_get>
   1085c:	f003 f814 	bl	13888 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   10860:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10864:	2b00      	cmp	r3, #0
   10866:	f43f a81d 	beq.w	f8a4 <isr+0x154>
	if (tx_release) {
   1086a:	b11e      	cbz	r6, 10874 <__kernel_ram_size+0x874>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   1086c:	4631      	mov	r1, r6
   1086e:	8c18      	ldrh	r0, [r3, #32]
   10870:	f7fb fba2 	bl	bfb8 <pdu_node_tx_release>
	if (rx_enqueue) {
   10874:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   10878:	2b00      	cmp	r3, #0
   1087a:	f43f a813 	beq.w	f8a4 <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
   1087e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10882:	8c18      	ldrh	r0, [r3, #32]
   10884:	f7fb f980 	bl	bb88 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   10888:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1088c:	8c1b      	ldrh	r3, [r3, #32]
   1088e:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   10892:	f7fb f889 	bl	b9a8 <packet_rx_enqueue>
   10896:	f7ff b805 	b.w	f8a4 <isr+0x154>
			_radio.conn_curr->empty = 0;
   1089a:	f36f 13c7 	bfc	r3, #7, #1
   1089e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   108a2:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   108a4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   108a8:	f898 2008 	ldrb.w	r2, [r8, #8]
   108ac:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   108b0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   108b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   108b8:	429a      	cmp	r2, r3
   108ba:	f040 80e9 	bne.w	10a90 <__kernel_ram_size+0xa90>
	    (packet_rx_reserve_get(3) != 0) &&
   108be:	2003      	movs	r0, #3
   108c0:	f7fa fa06 	bl	acd0 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   108c4:	2800      	cmp	r0, #0
   108c6:	f000 80e3 	beq.w	10a90 <__kernel_ram_size+0xa90>
	    (packet_rx_reserve_get(3) != 0) &&
   108ca:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   108ce:	b393      	cbz	r3, 10936 <__kernel_ram_size+0x936>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   108d0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   108d4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
   108d8:	4293      	cmp	r3, r2
   108da:	d105      	bne.n	108e8 <__kernel_ram_size+0x8e8>
	      (_radio.fc_req == _radio.fc_ack)) ||
   108dc:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   108e0:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
   108e4:	4291      	cmp	r1, r2
   108e6:	d026      	beq.n	10936 <__kernel_ram_size+0x936>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   108e8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
   108ec:	4293      	cmp	r3, r2
   108ee:	f000 80cf 	beq.w	10a90 <__kernel_ram_size+0xa90>
	      (_radio.fc_req != _radio.fc_ack) &&
   108f2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   108f6:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   108fa:	429a      	cmp	r2, r3
   108fc:	f000 80c8 	beq.w	10a90 <__kernel_ram_size+0xa90>
		(((_radio.fc_req == 0) &&
   10900:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
   10904:	b933      	cbnz	r3, 10914 <__kernel_ram_size+0x914>
		   _radio.conn_curr->handle)) ||
   10906:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
   1090a:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   1090e:	8c1b      	ldrh	r3, [r3, #32]
   10910:	429a      	cmp	r2, r3
   10912:	d010      	beq.n	10936 <__kernel_ram_size+0x936>
		 ((_radio.fc_req != 0) &&
   10914:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
   10918:	2b00      	cmp	r3, #0
   1091a:	f000 80b9 	beq.w	10a90 <__kernel_ram_size+0xa90>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1091e:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
   10922:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   10926:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   1092a:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
   1092e:	8c0b      	ldrh	r3, [r1, #32]
   10930:	429a      	cmp	r2, r3
   10932:	f040 80ad 	bne.w	10a90 <__kernel_ram_size+0xa90>
		if (pdu_data_rx->len != 0) {
   10936:	f898 5009 	ldrb.w	r5, [r8, #9]
   1093a:	2d00      	cmp	r5, #0
   1093c:	f000 80b1 	beq.w	10aa2 <__kernel_ram_size+0xaa2>
			if (_radio.conn_curr->enc_rx) {
   10940:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10944:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   10948:	f015 0510 	ands.w	r5, r5, #16
   1094c:	d00c      	beq.n	10968 <__kernel_ram_size+0x968>
				done = radio_ccm_is_done();
   1094e:	f003 f82d 	bl	139ac <radio_ccm_is_done>
				LL_ASSERT(done);
   10952:	b940      	cbnz	r0, 10966 <__kernel_ram_size+0x966>
   10954:	4b28      	ldr	r3, [pc, #160]	; (109f8 <__kernel_ram_size+0x9f8>)
   10956:	9301      	str	r3, [sp, #4]
   10958:	9300      	str	r3, [sp, #0]
   1095a:	4a28      	ldr	r2, [pc, #160]	; (109fc <__kernel_ram_size+0x9fc>)
   1095c:	4b28      	ldr	r3, [pc, #160]	; (10a00 <__kernel_ram_size+0xa00>)
   1095e:	4929      	ldr	r1, [pc, #164]	; (10a04 <__kernel_ram_size+0xa04>)
   10960:	4829      	ldr	r0, [pc, #164]	; (10a08 <__kernel_ram_size+0xa08>)
   10962:	f7ff baa3 	b.w	feac <isr+0x75c>
				ccm_rx_increment = 1;
   10966:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   10968:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1096c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   10970:	06d9      	lsls	r1, r3, #27
   10972:	d42c      	bmi.n	109ce <__kernel_ram_size+0x9ce>
			    (_radio.conn_curr->pause_rx &&
   10974:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10978:	f898 3008 	ldrb.w	r3, [r8, #8]
   1097c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   10980:	f012 0f04 	tst.w	r2, #4
   10984:	d142      	bne.n	10a0c <__kernel_ram_size+0xa0c>
			_radio.conn_curr->appto_expire = 0;
   10986:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   10988:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   1098c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   10990:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   10994:	d004      	beq.n	109a0 <__kernel_ram_size+0x9a0>
   10996:	2b02      	cmp	r3, #2
   10998:	d873      	bhi.n	10a82 <__kernel_ram_size+0xa82>
				*rx_enqueue = 1;
   1099a:	2301      	movs	r3, #1
   1099c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   109a0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   109a4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   109a8:	f082 0202 	eor.w	r2, r2, #2
   109ac:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   109b0:	2d00      	cmp	r5, #0
   109b2:	d06d      	beq.n	10a90 <__kernel_ram_size+0xa90>
				_radio.conn_curr->ccm_rx.counter++;
   109b4:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   109b8:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   109bc:	f119 0001 	adds.w	r0, r9, #1
   109c0:	f14a 0100 	adc.w	r1, sl, #0
   109c4:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   109c8:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   109cc:	e060      	b.n	10a90 <__kernel_ram_size+0xa90>
			     !radio_ccm_mic_is_valid()) ||
   109ce:	f003 f80b 	bl	139e8 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   109d2:	2800      	cmp	r0, #0
   109d4:	d1ce      	bne.n	10974 <__kernel_ram_size+0x974>
				_radio.state = STATE_CLOSE;
   109d6:	2303      	movs	r3, #3
   109d8:	7523      	strb	r3, [r4, #20]
				radio_disable();
   109da:	f002 fd95 	bl	13508 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   109de:	f002 fdb1 	bl	13544 <radio_is_ready>
   109e2:	4605      	mov	r5, r0
   109e4:	2800      	cmp	r0, #0
   109e6:	d040      	beq.n	10a6a <__kernel_ram_size+0xa6a>
   109e8:	4b03      	ldr	r3, [pc, #12]	; (109f8 <__kernel_ram_size+0x9f8>)
   109ea:	9301      	str	r3, [sp, #4]
   109ec:	9300      	str	r3, [sp, #0]
   109ee:	4b04      	ldr	r3, [pc, #16]	; (10a00 <__kernel_ram_size+0xa00>)
   109f0:	f7fe bf0c 	b.w	f80c <isr+0xbc>
   109f4:	20000a38 	.word	0x20000a38
   109f8:	00015af1 	.word	0x00015af1
   109fc:	00016fae 	.word	0x00016fae
   10a00:	00018c74 	.word	0x00018c74
   10a04:	00016060 	.word	0x00016060
   10a08:	000192cd 	.word	0x000192cd
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   10a0c:	f003 0103 	and.w	r1, r3, #3
   10a10:	2903      	cmp	r1, #3
   10a12:	d1e0      	bne.n	109d6 <__kernel_ram_size+0x9d6>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   10a14:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   10a18:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   10a1c:	f1be 0f00 	cmp.w	lr, #0
   10a20:	f002 0240 	and.w	r2, r2, #64	; 0x40
   10a24:	db15      	blt.n	10a52 <__kernel_ram_size+0xa52>
	       (!conn->role &&
   10a26:	b922      	cbnz	r2, 10a32 <__kernel_ram_size+0xa32>
		((!conn->refresh &&
   10a28:	2902      	cmp	r1, #2
   10a2a:	d0ac      	beq.n	10986 <__kernel_ram_size+0x986>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10a2c:	2911      	cmp	r1, #17
   10a2e:	d8d2      	bhi.n	109d6 <__kernel_ram_size+0x9d6>
   10a30:	e009      	b.n	10a46 <__kernel_ram_size+0xa46>
		 (conn->refresh &&
   10a32:	1e8a      	subs	r2, r1, #2
   10a34:	b2d2      	uxtb	r2, r2
   10a36:	2a09      	cmp	r2, #9
   10a38:	d8f8      	bhi.n	10a2c <__kernel_ram_size+0xa2c>
   10a3a:	f240 2e05 	movw	lr, #517	; 0x205
   10a3e:	fa2e f202 	lsr.w	r2, lr, r2
   10a42:	07d2      	lsls	r2, r2, #31
   10a44:	d49f      	bmi.n	10986 <__kernel_ram_size+0x986>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10a46:	4aac      	ldr	r2, [pc, #688]	; (10cf8 <__kernel_ram_size+0xcf8>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10a48:	fa22 f101 	lsr.w	r1, r2, r1
   10a4c:	07ca      	lsls	r2, r1, #31
   10a4e:	d5c2      	bpl.n	109d6 <__kernel_ram_size+0x9d6>
   10a50:	e799      	b.n	10986 <__kernel_ram_size+0x986>
	       (conn->role &&
   10a52:	b92a      	cbnz	r2, 10a60 <__kernel_ram_size+0xa60>
		((!conn->refresh &&
   10a54:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10a56:	d096      	beq.n	10986 <__kernel_ram_size+0x986>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10a58:	2911      	cmp	r1, #17
   10a5a:	d8bc      	bhi.n	109d6 <__kernel_ram_size+0x9d6>
   10a5c:	4aa7      	ldr	r2, [pc, #668]	; (10cfc <__kernel_ram_size+0xcfc>)
   10a5e:	e7f3      	b.n	10a48 <__kernel_ram_size+0xa48>
		 (conn->refresh &&
   10a60:	1e8a      	subs	r2, r1, #2
   10a62:	2a01      	cmp	r2, #1
   10a64:	d98f      	bls.n	10986 <__kernel_ram_size+0x986>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10a66:	290b      	cmp	r1, #11
   10a68:	e7f5      	b.n	10a56 <__kernel_ram_size+0xa56>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   10a6a:	213d      	movs	r1, #61	; 0x3d
   10a6c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10a70:	f7fb fcde 	bl	c430 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   10a74:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10a78:	f7fb fb28 	bl	c0cc <connection_release>
				_radio.conn_curr = NULL;
   10a7c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   10a80:	e6e7      	b.n	10852 <__kernel_ram_size+0x852>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   10a82:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   10a86:	4640      	mov	r0, r8
   10a88:	f7fd fd42 	bl	e510 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   10a8c:	2800      	cmp	r0, #0
   10a8e:	d087      	beq.n	109a0 <__kernel_ram_size+0x9a0>
		_radio.conn_curr->supervision_expire = 0;
   10a90:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
   10a94:	2300      	movs	r3, #0
   10a96:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
   10a9a:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   10a9c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   10aa0:	e03e      	b.n	10b20 <__kernel_ram_size+0xb20>
		} else if ((_radio.conn_curr->enc_rx) ||
   10aa2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   10aa6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   10aaa:	f013 0f14 	tst.w	r3, #20
   10aae:	f43f af77 	beq.w	109a0 <__kernel_ram_size+0x9a0>
					    (conn->latency + 6)) ?
   10ab2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   10ab4:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   10ab8:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   10aba:	4299      	cmp	r1, r3
   10abc:	bfc4      	itt	gt
   10abe:	1f8b      	subgt	r3, r1, #6
   10ac0:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   10ac2:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   10ac6:	bfcc      	ite	gt
   10ac8:	b29b      	uxthgt	r3, r3
   10aca:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   10acc:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
   10ace:	bf1e      	ittt	ne
   10ad0:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   10ad4:	2300      	movne	r3, #0
   10ad6:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   10ada:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   10ade:	2b00      	cmp	r3, #0
   10ae0:	f47f af5e 	bne.w	109a0 <__kernel_ram_size+0x9a0>
				conn->appto_expire = conn->appto_reload;
   10ae4:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   10ae8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   10aec:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
   10af0:	e756      	b.n	109a0 <__kernel_ram_size+0x9a0>
		if (_radio.crc_expire == 0) {
   10af2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10af6:	b913      	cbnz	r3, 10afe <__kernel_ram_size+0xafe>
			_radio.crc_expire = 2;
   10af8:	2302      	movs	r3, #2
   10afa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
   10afe:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   10b02:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
   10b06:	3b01      	subs	r3, #1
   10b08:	b2db      	uxtb	r3, r3
   10b0a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   10b0e:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   10b12:	fab3 f583 	clz	r5, r3
   10b16:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   10b18:	bb86      	cbnz	r6, 10b7c <__kernel_ram_size+0xb7c>
			_radio.conn_curr->supervision_expire =
   10b1a:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   10b1c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10b20:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10b24:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10b26:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10b2a:	f7fd fbb3 	bl	e294 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10b2e:	7d23      	ldrb	r3, [r4, #20]
   10b30:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10b32:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10b36:	d010      	beq.n	10b5a <__kernel_ram_size+0xb5a>
   10b38:	bb15      	cbnz	r5, 10b80 <__kernel_ram_size+0xb80>
   10b3a:	b137      	cbz	r7, 10b4a <__kernel_ram_size+0xb4a>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   10b3c:	f898 3008 	ldrb.w	r3, [r8, #8]
   10b40:	06d8      	lsls	r0, r3, #27
   10b42:	d402      	bmi.n	10b4a <__kernel_ram_size+0xb4a>
			 (pdu_data_tx->len == 0)) ||
   10b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   10b46:	785b      	ldrb	r3, [r3, #1]
   10b48:	b1d3      	cbz	r3, 10b80 <__kernel_ram_size+0xb80>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   10b4a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
   10b4e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10b52:	2b00      	cmp	r3, #0
   10b54:	bf0c      	ite	eq
   10b56:	2302      	moveq	r3, #2
   10b58:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   10b5a:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10b5c:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   10b5e:	d12d      	bne.n	10bbc <__kernel_ram_size+0xbbc>
		if (_radio.role == ROLE_MASTER) {
   10b60:	7ce3      	ldrb	r3, [r4, #19]
   10b62:	2b04      	cmp	r3, #4
   10b64:	d10e      	bne.n	10b84 <__kernel_ram_size+0xb84>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   10b66:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10b6a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10b6e:	f369 12c7 	bfi	r2, r9, #7, #1
   10b72:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   10b76:	f002 fcc7 	bl	13508 <radio_disable>
   10b7a:	e66a      	b.n	10852 <__kernel_ram_size+0x852>
	struct radio_pdu_node_tx *tx_release = NULL;
   10b7c:	2600      	movs	r6, #0
   10b7e:	e7cf      	b.n	10b20 <__kernel_ram_size+0xb20>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10b80:	2303      	movs	r3, #3
   10b82:	e7ea      	b.n	10b5a <__kernel_ram_size+0xb5a>
			radio_switch_complete_and_disable();
   10b84:	f002 fd30 	bl	135e8 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   10b88:	9910      	ldr	r1, [sp, #64]	; 0x40
   10b8a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10b8e:	780b      	ldrb	r3, [r1, #0]
   10b90:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   10b94:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   10b98:	f3c2 0240 	ubfx	r2, r2, #1, #1
   10b9c:	f362 0382 	bfi	r3, r2, #2, #1
   10ba0:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   10ba2:	f7fa fc1f 	bl	b3e4 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   10ba6:	f002 fccd 	bl	13544 <radio_is_ready>
   10baa:	2800      	cmp	r0, #0
   10bac:	f43f ae51 	beq.w	10852 <__kernel_ram_size+0x852>
   10bb0:	4b53      	ldr	r3, [pc, #332]	; (10d00 <__kernel_ram_size+0xd00>)
   10bb2:	9301      	str	r3, [sp, #4]
   10bb4:	9300      	str	r3, [sp, #0]
   10bb6:	4b53      	ldr	r3, [pc, #332]	; (10d04 <__kernel_ram_size+0xd04>)
   10bb8:	f7fe be28 	b.w	f80c <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
   10bbc:	2096      	movs	r0, #150	; 0x96
   10bbe:	f002 fd99 	bl	136f4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   10bc2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10bc6:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   10bca:	f000 0007 	and.w	r0, r0, #7
   10bce:	f002 fcf5 	bl	135bc <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   10bd2:	f002 fe6b 	bl	138ac <radio_tmr_end_capture>
   10bd6:	e7d7      	b.n	10b88 <__kernel_ram_size+0xb88>
		LL_ASSERT(0);
   10bd8:	4b49      	ldr	r3, [pc, #292]	; (10d00 <__kernel_ram_size+0xd00>)
   10bda:	9301      	str	r3, [sp, #4]
   10bdc:	9300      	str	r3, [sp, #0]
   10bde:	4b4a      	ldr	r3, [pc, #296]	; (10d08 <__kernel_ram_size+0xd08>)
   10be0:	f7fe bead 	b.w	f93e <isr+0x1ee>
	switch (_radio.role) {
   10be4:	7ce2      	ldrb	r2, [r4, #19]
   10be6:	2a04      	cmp	r2, #4
   10be8:	f200 823a 	bhi.w	11060 <__kernel_ram_size+0x1060>
   10bec:	e8df f012 	tbh	[pc, r2, lsl #1]
   10bf0:	00050228 	.word	0x00050228
   10bf4:	00bf0058 	.word	0x00bf0058
   10bf8:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
   10bfa:	2b03      	cmp	r3, #3
   10bfc:	d109      	bne.n	10c12 <__kernel_ram_size+0xc12>
	    (_radio.advertiser.chan_map_current != 0)) {
   10bfe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   10c02:	0759      	lsls	r1, r3, #29
   10c04:	d005      	beq.n	10c12 <__kernel_ram_size+0xc12>
		adv_setup();
   10c06:	f7fb fb35 	bl	c274 <adv_setup>
		radio_tx_enable();
   10c0a:	f002 fc77 	bl	134fc <radio_tx_enable>
   10c0e:	f7fe be19 	b.w	f844 <isr+0xf4>
		radio_filter_disable();
   10c12:	f002 fd33 	bl	1367c <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   10c16:	7d23      	ldrb	r3, [r4, #20]
   10c18:	2b03      	cmp	r3, #3
   10c1a:	f040 808f 	bne.w	10d3c <__kernel_ram_size+0xd3c>
		    (!_radio.advertiser.is_hdcd)) {
   10c1e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   10c22:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   10c26:	f040 8089 	bne.w	10d3c <__kernel_ram_size+0xd3c>
			entropy_nrf_get_entropy_isr(_radio.entropy,
   10c2a:	2201      	movs	r2, #1
   10c2c:	a910      	add	r1, sp, #64	; 0x40
   10c2e:	6860      	ldr	r0, [r4, #4]
   10c30:	f003 fca4 	bl	1457c <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
   10c34:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   10c38:	4834      	ldr	r0, [pc, #208]	; (10d0c <__kernel_ram_size+0xd0c>)
			random_delay %= 10;
   10c3a:	230a      	movs	r3, #10
   10c3c:	fbb1 f2f3 	udiv	r2, r1, r3
   10c40:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
   10c44:	3201      	adds	r2, #1
   10c46:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
   10c48:	b2d6      	uxtb	r6, r2
   10c4a:	fba6 0100 	umull	r0, r1, r6, r0
   10c4e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
   10c50:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   10c54:	fb03 1106 	mla	r1, r3, r6, r1
   10c58:	a325      	add	r3, pc, #148	; (adr r3, 10cf0 <__kernel_ram_size+0xcf0>)
   10c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c5e:	f7ef fad9 	bl	214 <__aeabi_uldivmod>
			ticker_status =
   10c62:	f640 734b 	movw	r3, #3915	; 0xf4b
   10c66:	9306      	str	r3, [sp, #24]
   10c68:	4b29      	ldr	r3, [pc, #164]	; (10d10 <__kernel_ram_size+0xd10>)
   10c6a:	9305      	str	r3, [sp, #20]
   10c6c:	9504      	str	r5, [sp, #16]
   10c6e:	b283      	uxth	r3, r0
   10c70:	9503      	str	r5, [sp, #12]
   10c72:	9502      	str	r5, [sp, #8]
   10c74:	9501      	str	r5, [sp, #4]
   10c76:	9500      	str	r5, [sp, #0]
   10c78:	2205      	movs	r2, #5
   10c7a:	4629      	mov	r1, r5
   10c7c:	4628      	mov	r0, r5
   10c7e:	f7f7 fd6b 	bl	8758 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10c82:	f030 0302 	bics.w	r3, r0, #2
   10c86:	d059      	beq.n	10d3c <__kernel_ram_size+0xd3c>
   10c88:	7ca3      	ldrb	r3, [r4, #18]
   10c8a:	2b05      	cmp	r3, #5
   10c8c:	d056      	beq.n	10d3c <__kernel_ram_size+0xd3c>
   10c8e:	4b1c      	ldr	r3, [pc, #112]	; (10d00 <__kernel_ram_size+0xd00>)
   10c90:	9301      	str	r3, [sp, #4]
   10c92:	9300      	str	r3, [sp, #0]
   10c94:	4a1f      	ldr	r2, [pc, #124]	; (10d14 <__kernel_ram_size+0xd14>)
   10c96:	4b20      	ldr	r3, [pc, #128]	; (10d18 <__kernel_ram_size+0xd18>)
   10c98:	4920      	ldr	r1, [pc, #128]	; (10d1c <__kernel_ram_size+0xd1c>)
   10c9a:	4821      	ldr	r0, [pc, #132]	; (10d20 <__kernel_ram_size+0xd20>)
   10c9c:	f7ff b906 	b.w	feac <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
   10ca0:	2b03      	cmp	r3, #3
   10ca2:	d13f      	bne.n	10d24 <__kernel_ram_size+0xd24>
		radio_tmr_tifs_set(RADIO_TIFS);
   10ca4:	2096      	movs	r0, #150	; 0x96
   10ca6:	f002 fd25 	bl	136f4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   10caa:	2300      	movs	r3, #0
   10cac:	4619      	mov	r1, r3
   10cae:	461a      	mov	r2, r3
   10cb0:	4618      	mov	r0, r3
   10cb2:	f002 fc8f 	bl	135d4 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   10cb6:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   10cba:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   10cbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   10cc2:	3008      	adds	r0, #8
   10cc4:	f002 fbfa 	bl	134bc <radio_pkt_rx_set>
		radio_rssi_measure();
   10cc8:	f002 fc9c 	bl	13604 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10ccc:	f001 ff02 	bl	12ad4 <ctrl_rl_enabled>
   10cd0:	b138      	cbz	r0, 10ce2 <__kernel_ram_size+0xce2>
			u8_t count, *irks = ctrl_irks_get(&count);
   10cd2:	a810      	add	r0, sp, #64	; 0x40
   10cd4:	f001 fc4e 	bl	12574 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10cd8:	4601      	mov	r1, r0
   10cda:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   10cde:	f002 fe8d 	bl	139fc <radio_ar_configure>
		_radio.state = STATE_RX;
   10ce2:	2301      	movs	r3, #1
   10ce4:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   10ce6:	f002 fc03 	bl	134f0 <radio_rx_enable>
   10cea:	f7fe bdab 	b.w	f844 <isr+0xf4>
   10cee:	bf00      	nop
   10cf0:	1afd498d 	.word	0x1afd498d
   10cf4:	00000007 	.word	0x00000007
   10cf8:	00022060 	.word	0x00022060
   10cfc:	00022040 	.word	0x00022040
   10d00:	00015af1 	.word	0x00015af1
   10d04:	00018c84 	.word	0x00018c84
   10d08:	00018c90 	.word	0x00018c90
   10d0c:	d4a51000 	.word	0xd4a51000
   10d10:	0000bcc9 	.word	0x0000bcc9
   10d14:	00016fae 	.word	0x00016fae
   10d18:	00018ca3 	.word	0x00018ca3
   10d1c:	00016060 	.word	0x00016060
   10d20:	000192f3 	.word	0x000192f3
		radio_filter_disable();
   10d24:	f002 fcaa 	bl	1367c <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   10d28:	7d23      	ldrb	r3, [r4, #20]
   10d2a:	2b05      	cmp	r3, #5
   10d2c:	d106      	bne.n	10d3c <__kernel_ram_size+0xd3c>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d2e:	2300      	movs	r3, #0
   10d30:	9300      	str	r3, [sp, #0]
   10d32:	2204      	movs	r2, #4
   10d34:	4619      	mov	r1, r3
   10d36:	4618      	mov	r0, r3
   10d38:	f7f7 fd5c 	bl	87f4 <ticker_stop>
	_radio.role = ROLE_NONE;
   10d3c:	2500      	movs	r5, #0
   10d3e:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   10d40:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   10d42:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   10d44:	f002 fd54 	bl	137f0 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10d48:	462a      	mov	r2, r5
   10d4a:	4629      	mov	r1, r5
   10d4c:	4628      	mov	r0, r5
   10d4e:	4bb2      	ldr	r3, [pc, #712]	; (11018 <__kernel_ram_size+0x1018>)
   10d50:	f7f6 fef4 	bl	7b3c <mayfly_enqueue>
	LL_ASSERT(!retval);
   10d54:	4605      	mov	r5, r0
   10d56:	2800      	cmp	r0, #0
   10d58:	f000 8188 	beq.w	1106c <__kernel_ram_size+0x106c>
   10d5c:	4baf      	ldr	r3, [pc, #700]	; (1101c <__kernel_ram_size+0x101c>)
   10d5e:	9301      	str	r3, [sp, #4]
   10d60:	9300      	str	r3, [sp, #0]
   10d62:	4aaf      	ldr	r2, [pc, #700]	; (11020 <__kernel_ram_size+0x1020>)
   10d64:	4baf      	ldr	r3, [pc, #700]	; (11024 <__kernel_ram_size+0x1024>)
   10d66:	49b0      	ldr	r1, [pc, #704]	; (11028 <__kernel_ram_size+0x1028>)
   10d68:	48b0      	ldr	r0, [pc, #704]	; (1102c <__kernel_ram_size+0x102c>)
   10d6a:	f7ff b89f 	b.w	feac <isr+0x75c>
	if (_radio.conn_curr == 0) {
   10d6e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10d72:	2800      	cmp	r0, #0
   10d74:	d0e2      	beq.n	10d3c <__kernel_ram_size+0xd3c>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   10d76:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   10d7a:	b181      	cbz	r1, 10d9e <__kernel_ram_size+0xd9e>
   10d7c:	7ce3      	ldrb	r3, [r4, #19]
   10d7e:	2b03      	cmp	r3, #3
   10d80:	d003      	beq.n	10d8a <__kernel_ram_size+0xd8a>
   10d82:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10d86:	07da      	lsls	r2, r3, #31
   10d88:	d509      	bpl.n	10d9e <__kernel_ram_size+0xd9e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10d8a:	f7fb fb51 	bl	c430 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10d8e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10d92:	f7fb f99b 	bl	c0cc <connection_release>
			_radio.conn_curr = NULL;
   10d96:	2300      	movs	r3, #0
   10d98:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   10d9c:	e7ce      	b.n	10d3c <__kernel_ram_size+0xd3c>
	latency_event = _radio.conn_curr->latency_event;
   10d9e:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   10da2:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   10da6:	f10b 0601 	add.w	r6, fp, #1
   10daa:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   10dac:	2f00      	cmp	r7, #0
   10dae:	f000 8084 	beq.w	10eba <__kernel_ram_size+0xeba>
		if (_radio.role == ROLE_SLAVE) {
   10db2:	7ce3      	ldrb	r3, [r4, #19]
   10db4:	2b03      	cmp	r3, #3
   10db6:	d173      	bne.n	10ea0 <__kernel_ram_size+0xea0>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10db8:	f002 fd6c 	bl	13894 <radio_tmr_aa_restore>
   10dbc:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   10dbe:	f002 fd6f 	bl	138a0 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   10dc2:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   10dc6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   10dca:	f003 0307 	and.w	r3, r3, #7
   10dce:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10dd0:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   10dd4:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   10dd6:	d052      	beq.n	10e7e <__kernel_ram_size+0xe7e>
		return 40;
   10dd8:	2b04      	cmp	r3, #4
   10dda:	bf0c      	ite	eq
   10ddc:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   10de0:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10de4:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10de8:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   10dea:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10dec:	930a      	str	r3, [sp, #40]	; 0x28
   10dee:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1103c <__kernel_ram_size+0x103c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10df2:	a387      	add	r3, pc, #540	; (adr r3, 11010 <__kernel_ram_size+0x1010>)
   10df4:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   10df8:	d844      	bhi.n	10e84 <__kernel_ram_size+0xe84>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10dfa:	fba0 010a 	umull	r0, r1, r0, sl
   10dfe:	f7ef fa09 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10e04:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10e06:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10e0a:	a381      	add	r3, pc, #516	; (adr r3, 11010 <__kernel_ram_size+0x1010>)
   10e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e10:	fba0 010a 	umull	r0, r1, r0, sl
   10e14:	f7ef f9fe 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   10e18:	2300      	movs	r3, #0
   10e1a:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   10e1c:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   10e1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10e22:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   10e26:	b3ab      	cbz	r3, 10e94 <__kernel_ram_size+0xe94>
				if (pdu_data_tx->len ||
   10e28:	795b      	ldrb	r3, [r3, #5]
   10e2a:	b913      	cbnz	r3, 10e32 <__kernel_ram_size+0xe32>
   10e2c:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   10e30:	b10b      	cbz	r3, 10e36 <__kernel_ram_size+0xe36>
					_radio.conn_curr->latency_event = 0;
   10e32:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   10e34:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   10e36:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10e3a:	2200      	movs	r2, #0
   10e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   10e3e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10e42:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10e46:	b1c3      	cbz	r3, 10e7a <__kernel_ram_size+0xe7a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10e48:	429e      	cmp	r6, r3
   10e4a:	f080 80b0 	bcs.w	10fae <__kernel_ram_size+0xfae>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10e4e:	1b9b      	subs	r3, r3, r6
   10e50:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   10e52:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   10e54:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10e56:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   10e5a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   10e5c:	f240 80a9 	bls.w	10fb2 <__kernel_ram_size+0xfb2>
			else if (_radio.role == ROLE_SLAVE) {
   10e60:	7ce3      	ldrb	r3, [r4, #19]
   10e62:	2b03      	cmp	r3, #3
   10e64:	d109      	bne.n	10e7a <__kernel_ram_size+0xe7a>
				if (latency_event != 0) {
   10e66:	f1bb 0f00 	cmp.w	fp, #0
   10e6a:	f040 80a2 	bne.w	10fb2 <__kernel_ram_size+0xfb2>
					force = _radio.conn_curr->slave.force & 0x01;
   10e6e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   10e70:	087b      	lsrs	r3, r7, #1
					if (force) {
   10e72:	f017 0701 	ands.w	r7, r7, #1
   10e76:	d13d      	bne.n	10ef4 <__kernel_ram_size+0xef4>
					_radio.conn_curr->slave.force >>= 1;
   10e78:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   10e7a:	2700      	movs	r7, #0
   10e7c:	e03d      	b.n	10efa <__kernel_ram_size+0xefa>
		return 24;
   10e7e:	f04f 0818 	mov.w	r8, #24
   10e82:	e7af      	b.n	10de4 <__kernel_ram_size+0xde4>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10e84:	fba9 010a 	umull	r0, r1, r9, sl
   10e88:	f7ef f9c4 	bl	214 <__aeabi_uldivmod>
   10e8c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10e8e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   10e92:	e7ba      	b.n	10e0a <__kernel_ram_size+0xe0a>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   10e94:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   10e98:	07db      	lsls	r3, r3, #31
   10e9a:	d5cc      	bpl.n	10e36 <__kernel_ram_size+0xe36>
				_radio.conn_curr->latency_event =
   10e9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   10e9e:	e7c9      	b.n	10e34 <__kernel_ram_size+0xe34>
		} else if (reason_peer) {
   10ea0:	b149      	cbz	r1, 10eb6 <__kernel_ram_size+0xeb6>
			_radio.conn_curr->master.terminate_ack = 1;
   10ea2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10ea6:	f043 0301 	orr.w	r3, r3, #1
   10eaa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   10eae:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   10eb2:	4645      	mov	r5, r8
   10eb4:	e7bf      	b.n	10e36 <__kernel_ram_size+0xe36>
	ticks_drift_minus = 0;
   10eb6:	4688      	mov	r8, r1
   10eb8:	e7fb      	b.n	10eb2 <__kernel_ram_size+0xeb2>
	else if (_radio.conn_curr->connect_expire) {
   10eba:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   10ebc:	b185      	cbz	r5, 10ee0 <__kernel_ram_size+0xee0>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10ebe:	42ae      	cmp	r6, r5
   10ec0:	d204      	bcs.n	10ecc <__kernel_ram_size+0xecc>
			_radio.conn_curr->connect_expire -= elapsed_event;
   10ec2:	1bad      	subs	r5, r5, r6
   10ec4:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10ec6:	463d      	mov	r5, r7
   10ec8:	46a8      	mov	r8, r5
   10eca:	e7b8      	b.n	10e3e <__kernel_ram_size+0xe3e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10ecc:	213e      	movs	r1, #62	; 0x3e
   10ece:	f7fb faaf 	bl	c430 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10ed2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10ed6:	f7fb f8f9 	bl	c0cc <connection_release>
			_radio.conn_curr = NULL;
   10eda:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   10ede:	e72d      	b.n	10d3c <__kernel_ram_size+0xd3c>
		if (!_radio.conn_curr->supervision_expire) {
   10ee0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   10ee4:	f1b8 0f00 	cmp.w	r8, #0
   10ee8:	d1ee      	bne.n	10ec8 <__kernel_ram_size+0xec8>
			_radio.conn_curr->supervision_expire =
   10eea:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   10eec:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10ef0:	4645      	mov	r5, r8
   10ef2:	e7a4      	b.n	10e3e <__kernel_ram_size+0xe3e>
						_radio.conn_curr->slave.force |=
   10ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10ef8:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   10efa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10efe:	b123      	cbz	r3, 10f0a <__kernel_ram_size+0xf0a>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   10f00:	429e      	cmp	r6, r3
   10f02:	d258      	bcs.n	10fb6 <__kernel_ram_size+0xfb6>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   10f04:	1b9b      	subs	r3, r3, r6
   10f06:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   10f0a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   10f0e:	b123      	cbz	r3, 10f1a <__kernel_ram_size+0xf1a>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   10f10:	429e      	cmp	r6, r3
   10f12:	d252      	bcs.n	10fba <__kernel_ram_size+0xfba>
			_radio.conn_curr->apto_expire -= elapsed_event;
   10f14:	1b9b      	subs	r3, r3, r6
   10f16:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   10f1a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   10f1e:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   10f22:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   10f26:	b123      	cbz	r3, 10f32 <__kernel_ram_size+0xf32>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10f28:	429e      	cmp	r6, r3
   10f2a:	d25c      	bcs.n	10fe6 <__kernel_ram_size+0xfe6>
			_radio.conn_curr->appto_expire -= elapsed_event;
   10f2c:	1b9e      	subs	r6, r3, r6
   10f2e:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10f32:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10f36:	428b      	cmp	r3, r1
   10f38:	d006      	beq.n	10f48 <__kernel_ram_size+0xf48>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   10f3a:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10f3e:	3b01      	subs	r3, #1
   10f40:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   10f42:	bf9c      	itt	ls
   10f44:	2300      	movls	r3, #0
   10f46:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10f48:	b917      	cbnz	r7, 10f50 <__kernel_ram_size+0xf50>
   10f4a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10f4c:	455b      	cmp	r3, fp
   10f4e:	d05c      	beq.n	1100a <__kernel_ram_size+0x100a>
		lazy = _radio.conn_curr->latency_event + 1;
   10f50:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10f52:	3301      	adds	r3, #1
   10f54:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10f56:	b935      	cbnz	r5, 10f66 <__kernel_ram_size+0xf66>
   10f58:	f1b8 0f00 	cmp.w	r8, #0
   10f5c:	d103      	bne.n	10f66 <__kernel_ram_size+0xf66>
   10f5e:	b913      	cbnz	r3, 10f66 <__kernel_ram_size+0xf66>
	    (lazy != 0) || (force != 0)) {
   10f60:	2f00      	cmp	r7, #0
   10f62:	f43f aeeb 	beq.w	10d3c <__kernel_ram_size+0xd3c>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10f66:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   10f6a:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10f6c:	3207      	adds	r2, #7
		ticker_status =
   10f6e:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10f70:	b2d6      	uxtb	r6, r2
		ticker_status =
   10f72:	4a2f      	ldr	r2, [pc, #188]	; (11030 <__kernel_ram_size+0x1030>)
   10f74:	9205      	str	r2, [sp, #20]
   10f76:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   10f78:	9606      	str	r6, [sp, #24]
		ticker_status =
   10f7a:	9704      	str	r7, [sp, #16]
   10f7c:	9102      	str	r1, [sp, #8]
   10f7e:	9101      	str	r1, [sp, #4]
   10f80:	f8cd 8000 	str.w	r8, [sp]
   10f84:	4632      	mov	r2, r6
   10f86:	4608      	mov	r0, r1
   10f88:	f7f7 fbe6 	bl	8758 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10f8c:	f030 0302 	bics.w	r3, r0, #2
   10f90:	f43f aed4 	beq.w	10d3c <__kernel_ram_size+0xd3c>
   10f94:	7ca3      	ldrb	r3, [r4, #18]
   10f96:	429e      	cmp	r6, r3
   10f98:	f43f aed0 	beq.w	10d3c <__kernel_ram_size+0xd3c>
   10f9c:	4b1f      	ldr	r3, [pc, #124]	; (1101c <__kernel_ram_size+0x101c>)
   10f9e:	9301      	str	r3, [sp, #4]
   10fa0:	9300      	str	r3, [sp, #0]
   10fa2:	4a1f      	ldr	r2, [pc, #124]	; (11020 <__kernel_ram_size+0x1020>)
   10fa4:	4b23      	ldr	r3, [pc, #140]	; (11034 <__kernel_ram_size+0x1034>)
   10fa6:	4920      	ldr	r1, [pc, #128]	; (11028 <__kernel_ram_size+0x1028>)
   10fa8:	4823      	ldr	r0, [pc, #140]	; (11038 <__kernel_ram_size+0x1038>)
   10faa:	f7fe bf7f 	b.w	feac <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10fae:	2108      	movs	r1, #8
   10fb0:	e6eb      	b.n	10d8a <__kernel_ram_size+0xd8a>
				force = 1;
   10fb2:	2701      	movs	r7, #1
   10fb4:	e7a1      	b.n	10efa <__kernel_ram_size+0xefa>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10fb6:	2122      	movs	r1, #34	; 0x22
   10fb8:	e6e7      	b.n	10d8a <__kernel_ram_size+0xd8a>
			_radio.conn_curr->apto_expire = 0;
   10fba:	2300      	movs	r3, #0
   10fbc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   10fc0:	2002      	movs	r0, #2
   10fc2:	f7f9 fe85 	bl	acd0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   10fc6:	b928      	cbnz	r0, 10fd4 <__kernel_ram_size+0xfd4>
   10fc8:	4b14      	ldr	r3, [pc, #80]	; (1101c <__kernel_ram_size+0x101c>)
   10fca:	9301      	str	r3, [sp, #4]
   10fcc:	9300      	str	r3, [sp, #0]
   10fce:	4b19      	ldr	r3, [pc, #100]	; (11034 <__kernel_ram_size+0x1034>)
   10fd0:	f7fe be36 	b.w	fc40 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   10fd4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10fd8:	8c1b      	ldrh	r3, [r3, #32]
   10fda:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10fdc:	230a      	movs	r3, #10
   10fde:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   10fe0:	f7fa fce2 	bl	b9a8 <packet_rx_enqueue>
   10fe4:	e799      	b.n	10f1a <__kernel_ram_size+0xf1a>
			_radio.conn_curr->appto_expire = 0;
   10fe6:	2300      	movs	r3, #0
   10fe8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10fec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   10ff0:	2b00      	cmp	r3, #0
   10ff2:	d19e      	bne.n	10f32 <__kernel_ram_size+0xf32>
   10ff4:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10ff8:	428b      	cmp	r3, r1
   10ffa:	d19e      	bne.n	10f3a <__kernel_ram_size+0xf3a>
				_radio.conn_curr->llcp_type = LLCP_PING;
   10ffc:	2307      	movs	r3, #7
   10ffe:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   11002:	1e4b      	subs	r3, r1, #1
   11004:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   11008:	e793      	b.n	10f32 <__kernel_ram_size+0xf32>
	lazy = 0;
   1100a:	463b      	mov	r3, r7
   1100c:	e7a3      	b.n	10f56 <__kernel_ram_size+0xf56>
   1100e:	bf00      	nop
   11010:	1afd498d 	.word	0x1afd498d
   11014:	00000007 	.word	0x00000007
   11018:	20003e20 	.word	0x20003e20
   1101c:	00015af1 	.word	0x00015af1
   11020:	00016fae 	.word	0x00016fae
   11024:	00018d74 	.word	0x00018d74
   11028:	00016060 	.word	0x00016060
   1102c:	000197a5 	.word	0x000197a5
   11030:	0000bd11 	.word	0x0000bd11
   11034:	00018cb1 	.word	0x00018cb1
   11038:	00019361 	.word	0x00019361
   1103c:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
   11040:	3b04      	subs	r3, #4
   11042:	2b01      	cmp	r3, #1
   11044:	d908      	bls.n	11058 <__kernel_ram_size+0x1058>
   11046:	4b12      	ldr	r3, [pc, #72]	; (11090 <__kernel_ram_size+0x1090>)
   11048:	9301      	str	r3, [sp, #4]
   1104a:	9300      	str	r3, [sp, #0]
   1104c:	4a11      	ldr	r2, [pc, #68]	; (11094 <__kernel_ram_size+0x1094>)
   1104e:	4b12      	ldr	r3, [pc, #72]	; (11098 <__kernel_ram_size+0x1098>)
   11050:	4912      	ldr	r1, [pc, #72]	; (1109c <__kernel_ram_size+0x109c>)
   11052:	4813      	ldr	r0, [pc, #76]	; (110a0 <__kernel_ram_size+0x10a0>)
   11054:	f7fe bf2a 	b.w	feac <isr+0x75c>
		_radio.state = STATE_NONE;
   11058:	2300      	movs	r3, #0
   1105a:	7523      	strb	r3, [r4, #20]
   1105c:	f7fe bc22 	b.w	f8a4 <isr+0x154>
		LL_ASSERT(0);
   11060:	4b0b      	ldr	r3, [pc, #44]	; (11090 <__kernel_ram_size+0x1090>)
   11062:	9301      	str	r3, [sp, #4]
   11064:	9300      	str	r3, [sp, #0]
   11066:	4b0c      	ldr	r3, [pc, #48]	; (11098 <__kernel_ram_size+0x1098>)
   11068:	f7fe bc69 	b.w	f93e <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
   1106c:	6820      	ldr	r0, [r4, #0]
   1106e:	6843      	ldr	r3, [r0, #4]
   11070:	4629      	mov	r1, r5
   11072:	685b      	ldr	r3, [r3, #4]
   11074:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   11076:	2201      	movs	r2, #1
   11078:	4611      	mov	r1, r2
   1107a:	4628      	mov	r0, r5
   1107c:	f7f6 fd36 	bl	7aec <mayfly_enable>
   11080:	f7fe bc10 	b.w	f8a4 <isr+0x154>
		LL_ASSERT(0);
   11084:	4b02      	ldr	r3, [pc, #8]	; (11090 <__kernel_ram_size+0x1090>)
   11086:	9301      	str	r3, [sp, #4]
   11088:	9300      	str	r3, [sp, #0]
   1108a:	4b06      	ldr	r3, [pc, #24]	; (110a4 <__kernel_ram_size+0x10a4>)
   1108c:	f7fe bc57 	b.w	f93e <isr+0x1ee>
   11090:	00015af1 	.word	0x00015af1
   11094:	00016fae 	.word	0x00016fae
   11098:	00018cc0 	.word	0x00018cc0
   1109c:	00016060 	.word	0x00016060
   110a0:	000193d7 	.word	0x000193d7
   110a4:	00018cd6 	.word	0x00018cd6

000110a8 <radio_init>:
{
   110a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   110ac:	4e3d      	ldr	r6, [pc, #244]	; (111a4 <radio_init+0xfc>)
{
   110ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   110b0:	f89d c01c 	ldrb.w	ip, [sp, #28]
   110b4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   110b8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   110bc:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   110c0:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   110c2:	f44f 70aa 	mov.w	r0, #340	; 0x154
   110c6:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   110ca:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   110ce:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   110d2:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   110d4:	f10c 0401 	add.w	r4, ip, #1
   110d8:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   110da:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   110dc:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   110e0:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   110e4:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   110e6:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   110e8:	bf98      	it	ls
   110ea:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   110ee:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   110f2:	bf88      	it	hi
   110f4:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   110f8:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   110fc:	bf8c      	ite	hi
   110fe:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   11102:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   11106:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   1110a:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   1110e:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   11112:	bf8c      	ite	hi
   11114:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   11118:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   1111a:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   1111e:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   11122:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   11126:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1112a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   1112e:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   11132:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   11136:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1113a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1113c:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   1113e:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   11142:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   11144:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   11148:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1114c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   11150:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   11152:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   11156:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1115a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1115e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   11162:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   11166:	340a      	adds	r4, #10
   11168:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   1116c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1116e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   11170:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   11174:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   11178:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   1117a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   1117e:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   11182:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   11186:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   1118a:	d003      	beq.n	11194 <radio_init+0xec>
		return (retcode + mem_size);
   1118c:	442c      	add	r4, r5
}
   1118e:	4620      	mov	r0, r4
   11190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   11194:	2301      	movs	r3, #1
   11196:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   1119a:	f7f9 fe5d 	bl	ae58 <common_init>
	radio_setup();
   1119e:	f002 f8dd 	bl	1335c <radio_setup>
	return retcode;
   111a2:	e7f4      	b.n	1118e <radio_init+0xe6>
   111a4:	200008dc 	.word	0x200008dc

000111a8 <ll_reset>:
{
   111a8:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   111aa:	2103      	movs	r1, #3
   111ac:	2005      	movs	r0, #5
   111ae:	f7f9 ff3d 	bl	b02c <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   111b2:	2104      	movs	r1, #4
   111b4:	2006      	movs	r0, #6
   111b6:	f7f9 ff39 	bl	b02c <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   111ba:	4c22      	ldr	r4, [pc, #136]	; (11244 <ll_reset+0x9c>)
   111bc:	2500      	movs	r5, #0
   111be:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   111c2:	b2ab      	uxth	r3, r5
   111c4:	429a      	cmp	r2, r3
   111c6:	f105 0501 	add.w	r5, r5, #1
   111ca:	d834      	bhi.n	11236 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   111cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   111d0:	f36f 13c7 	bfc	r3, #7, #1
   111d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   111d8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   111dc:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   111de:	f360 0300 	bfi	r3, r0, #0, #1
   111e2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   111e6:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   111e8:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   111ec:	fbb3 f3f2 	udiv	r3, r3, r2
   111f0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   111f4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   111f8:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   111fc:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   111fe:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   11202:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   11206:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   1120a:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   1120e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   11212:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   11216:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   1121a:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   1121e:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   11222:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   11226:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   1122a:	f001 ff17 	bl	1305c <ll_filter_reset>
}
   1122e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   11232:	f7f9 be11 	b.w	ae58 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   11236:	1da8      	adds	r0, r5, #6
   11238:	21ff      	movs	r1, #255	; 0xff
   1123a:	b2c0      	uxtb	r0, r0
   1123c:	f7f9 fef6 	bl	b02c <role_disable>
   11240:	e7bd      	b.n	111be <ll_reset+0x16>
   11242:	bf00      	nop
   11244:	200008dc 	.word	0x200008dc

00011248 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   11248:	4b02      	ldr	r3, [pc, #8]	; (11254 <ll_adv_is_enabled+0xc>)
   1124a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   1124e:	09c0      	lsrs	r0, r0, #7
   11250:	4770      	bx	lr
   11252:	bf00      	nop
   11254:	200008dc 	.word	0x200008dc

00011258 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   11258:	4b04      	ldr	r3, [pc, #16]	; (1126c <radio_adv_filter_pol_get+0x14>)
   1125a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   1125e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   11260:	bfba      	itte	lt
   11262:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   11266:	0980      	lsrlt	r0, r0, #6
   11268:	2000      	movge	r0, #0
}
   1126a:	4770      	bx	lr
   1126c:	200008dc 	.word	0x200008dc

00011270 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   11270:	4a09      	ldr	r2, [pc, #36]	; (11298 <ll_scan_is_enabled+0x28>)
   11272:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   11276:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1127a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1127e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   11282:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   11284:	f003 0301 	and.w	r3, r3, #1
   11288:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   1128c:	bf14      	ite	ne
   1128e:	2004      	movne	r0, #4
   11290:	2000      	moveq	r0, #0
}
   11292:	4318      	orrs	r0, r3
   11294:	4770      	bx	lr
   11296:	bf00      	nop
   11298:	200008dc 	.word	0x200008dc

0001129c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   1129c:	4b05      	ldr	r3, [pc, #20]	; (112b4 <radio_scan_filter_pol_get+0x18>)
   1129e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   112a2:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   112a6:	bf1c      	itt	ne
   112a8:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   112ac:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   112b0:	4770      	bx	lr
   112b2:	bf00      	nop
   112b4:	200008dc 	.word	0x200008dc

000112b8 <radio_connect_enable>:
{
   112b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   112bc:	f8df 8384 	ldr.w	r8, [pc, #900]	; 11644 <radio_connect_enable+0x38c>
{
   112c0:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   112c2:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   112c6:	9303      	str	r3, [sp, #12]
   112c8:	4683      	mov	fp, r0
   112ca:	468a      	mov	sl, r1
   112cc:	4691      	mov	r9, r2
   112ce:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   112d0:	2e00      	cmp	r6, #0
   112d2:	f040 819c 	bne.w	1160e <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   112d6:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   112da:	f7f6 fb64 	bl	79a6 <mem_acquire>
	if (!link) {
   112de:	4607      	mov	r7, r0
   112e0:	b150      	cbz	r0, 112f8 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   112e2:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   112e6:	f7f6 fb5e 	bl	79a6 <mem_acquire>
	if (!conn) {
   112ea:	4604      	mov	r4, r0
   112ec:	b930      	cbnz	r0, 112fc <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   112ee:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   112f2:	4638      	mov	r0, r7
   112f4:	f7f6 fb71 	bl	79da <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   112f8:	2007      	movs	r0, #7
   112fa:	e15c      	b.n	115b6 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   112fc:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   11300:	f36b 1386 	bfi	r3, fp, #6, #1
   11304:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   11308:	2206      	movs	r2, #6
   1130a:	4651      	mov	r1, sl
   1130c:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   11310:	f7f0 fc74 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
   11314:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11318:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1131c:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   1131e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   11322:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   11326:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   11328:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1132c:	f002 f8d2 	bl	134d4 <radio_tx_ready_delay_get>
   11330:	49bb      	ldr	r1, [pc, #748]	; (11620 <radio_connect_enable+0x368>)
   11332:	f200 4052 	addw	r0, r0, #1106	; 0x452
   11336:	a3b8      	add	r3, pc, #736	; (adr r3, 11618 <radio_connect_enable+0x360>)
   11338:	e9d3 2300 	ldrd	r2, r3, [r3]
   1133c:	fba0 0101 	umull	r0, r1, r0, r1
   11340:	f7ee ff68 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   11344:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   11348:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1134c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   11350:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   11352:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 11648 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   11356:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   1135a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   1135e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   11360:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   11364:	2104      	movs	r1, #4
   11366:	a805      	add	r0, sp, #20
   11368:	f7f7 fb54 	bl	8a14 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   1136c:	f8dd c014 	ldr.w	ip, [sp, #20]
   11370:	2000      	movs	r0, #0
   11372:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   11376:	231f      	movs	r3, #31
	transitions = 0;
   11378:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   1137a:	2101      	movs	r1, #1
	while (bit_idx--) {
   1137c:	3b01      	subs	r3, #1
   1137e:	b2db      	uxtb	r3, r3
   11380:	2bff      	cmp	r3, #255	; 0xff
   11382:	d103      	bne.n	1138c <radio_connect_enable+0xd4>
   11384:	b3d0      	cbz	r0, 113fc <radio_connect_enable+0x144>
   11386:	f8cd c014 	str.w	ip, [sp, #20]
   1138a:	e037      	b.n	113fc <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   1138c:	fa2c fe03 	lsr.w	lr, ip, r3
   11390:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   11394:	45d6      	cmp	lr, sl
   11396:	d11a      	bne.n	113ce <radio_connect_enable+0x116>
			consecutive_cnt++;
   11398:	3101      	adds	r1, #1
   1139a:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   1139c:	2906      	cmp	r1, #6
   1139e:	d807      	bhi.n	113b0 <radio_connect_enable+0xf8>
   113a0:	2b1b      	cmp	r3, #27
   113a2:	d81a      	bhi.n	113da <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   113a4:	b122      	cbz	r2, 113b0 <radio_connect_enable+0xf8>
   113a6:	2b1b      	cmp	r3, #27
   113a8:	d017      	beq.n	113da <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   113aa:	2a01      	cmp	r2, #1
   113ac:	d815      	bhi.n	113da <radio_connect_enable+0x122>
   113ae:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   113b0:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   113b4:	f1be 0f00 	cmp.w	lr, #0
   113b8:	f000 8100 	beq.w	115bc <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   113bc:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   113c0:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   113c4:	3201      	adds	r2, #1
   113c6:	2001      	movs	r0, #1
   113c8:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   113ca:	4601      	mov	r1, r0
   113cc:	e005      	b.n	113da <radio_connect_enable+0x122>
			transitions++;
   113ce:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   113d0:	2b1b      	cmp	r3, #27
			transitions++;
   113d2:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   113d4:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   113d8:	d9e5      	bls.n	113a6 <radio_connect_enable+0xee>
		if (transitions > 24) {
   113da:	2a18      	cmp	r2, #24
   113dc:	f240 80f6 	bls.w	115cc <radio_connect_enable+0x314>
   113e0:	b108      	cbz	r0, 113e6 <radio_connect_enable+0x12e>
   113e2:	f8cd c014 	str.w	ip, [sp, #20]
   113e6:	3301      	adds	r3, #1
   113e8:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   113ea:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   113ee:	f1be 0f00 	cmp.w	lr, #0
   113f2:	f000 80e8 	beq.w	115c6 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   113f6:	425b      	negs	r3, r3
   113f8:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   113fa:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   113fc:	9b05      	ldr	r3, [sp, #20]
   113fe:	a806      	add	r0, sp, #24
   11400:	ea83 0308 	eor.w	r3, r3, r8
   11404:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   11408:	2104      	movs	r1, #4
   1140a:	f7f6 fc77 	bl	7cfc <util_ones_count_get>
   1140e:	2801      	cmp	r0, #1
   11410:	f240 80e3 	bls.w	115da <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   11414:	9b05      	ldr	r3, [sp, #20]
   11416:	b29a      	uxth	r2, r3
   11418:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   1141c:	f000 80d8 	beq.w	115d0 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   11420:	2204      	movs	r2, #4
   11422:	a905      	add	r1, sp, #20
   11424:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   11428:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   1142a:	f7f0 fbe7 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   1142e:	2103      	movs	r1, #3
   11430:	f104 0014 	add.w	r0, r4, #20
   11434:	f7f7 faee 	bl	8a14 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   11438:	2205      	movs	r2, #5
   1143a:	497a      	ldr	r1, [pc, #488]	; (11624 <radio_connect_enable+0x36c>)
   1143c:	f104 0017 	add.w	r0, r4, #23
   11440:	f7f0 fbdc 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   11444:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   11448:	7f63      	ldrb	r3, [r4, #29]
   1144a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   1144e:	f36f 1386 	bfc	r3, #6, #1
   11452:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   11454:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   11456:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   11458:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   1145a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   1145c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   11460:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   11464:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   11468:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1146a:	211b      	movs	r1, #27
   1146c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1146e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   11470:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   11474:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   11476:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   1147a:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1147e:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   11480:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   11482:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   11486:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   11488:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   1148c:	2601      	movs	r6, #1
   1148e:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   11492:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   11496:	f363 11c7 	bfi	r1, r3, #7, #1
   1149a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1149e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   114a2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   114a6:	f366 0102 	bfi	r1, r6, #0, #3
   114aa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   114ae:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   114b2:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   114b4:	b2c9      	uxtb	r1, r1
   114b6:	f36c 01c5 	bfi	r1, ip, #3, #3
   114ba:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   114be:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   114c2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   114c4:	f366 0102 	bfi	r1, r6, #0, #3
   114c8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   114cc:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   114ce:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   114d0:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   114d4:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   114d6:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   114d8:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   114dc:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   114e0:	f363 0100 	bfi	r1, r3, #0, #1
   114e4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   114e8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   114ec:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   114f0:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   114f4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   114f8:	1e56      	subs	r6, r2, #1
   114fa:	f242 7e10 	movw	lr, #10000	; 0x2710
   114fe:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   11502:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   11506:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1150a:	4b47      	ldr	r3, [pc, #284]	; (11628 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   1150c:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1150e:	4947      	ldr	r1, [pc, #284]	; (1162c <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11510:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11512:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11514:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11518:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1151c:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1151e:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11522:	1d81      	adds	r1, r0, #6
   11524:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11526:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1152a:	dc6a      	bgt.n	11602 <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   1152c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11530:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   11534:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   11536:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1153a:	f360 0341 	bfi	r3, r0, #1, #1
   1153e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   11542:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   11546:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   1154a:	f360 1304 	bfi	r3, r0, #4, #1
   1154e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   11552:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   11556:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   1155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1155e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   11562:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   11566:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   1156a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1156e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   11572:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   11576:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1157a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1157e:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   11582:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   11586:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1158a:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1158e:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   11592:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   11596:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   1159a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1159e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   115a2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   115a6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   115aa:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   115ae:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   115b2:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   115b6:	b007      	add	sp, #28
   115b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   115bc:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   115c0:	f04f 0e01 	mov.w	lr, #1
   115c4:	e6fe      	b.n	113c4 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   115c6:	3b01      	subs	r3, #1
   115c8:	4313      	orrs	r3, r2
   115ca:	e716      	b.n	113fa <radio_connect_enable+0x142>
		if (transitions > 24) {
   115cc:	46f2      	mov	sl, lr
   115ce:	e6d5      	b.n	1137c <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   115d0:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   115d2:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   115d6:	f47f af23 	bne.w	11420 <radio_connect_enable+0x168>
   115da:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   115dc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   115e0:	f47f aec0 	bne.w	11364 <radio_connect_enable+0xac>
   115e4:	4b12      	ldr	r3, [pc, #72]	; (11630 <radio_connect_enable+0x378>)
   115e6:	9301      	str	r3, [sp, #4]
   115e8:	9300      	str	r3, [sp, #0]
   115ea:	4a12      	ldr	r2, [pc, #72]	; (11634 <radio_connect_enable+0x37c>)
   115ec:	4b12      	ldr	r3, [pc, #72]	; (11638 <radio_connect_enable+0x380>)
   115ee:	4913      	ldr	r1, [pc, #76]	; (1163c <radio_connect_enable+0x384>)
   115f0:	4813      	ldr	r0, [pc, #76]	; (11640 <radio_connect_enable+0x388>)
   115f2:	f7ef fccb 	bl	f8c <printk>
   115f6:	4040      	eors	r0, r0
   115f8:	f380 8811 	msr	BASEPRI, r0
   115fc:	f04f 0004 	mov.w	r0, #4
   11600:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11602:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   11606:	33fa      	adds	r3, #250	; 0xfa
   11608:	441a      	add	r2, r3
   1160a:	b292      	uxth	r2, r2
   1160c:	e78e      	b.n	1152c <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1160e:	200c      	movs	r0, #12
   11610:	e7d1      	b.n	115b6 <radio_connect_enable+0x2fe>
   11612:	bf00      	nop
   11614:	f3af 8000 	nop.w
   11618:	1afd498d 	.word	0x1afd498d
   1161c:	00000007 	.word	0x00000007
   11620:	3b9aca00 	.word	0x3b9aca00
   11624:	200009f6 	.word	0x200009f6
   11628:	01c9c37f 	.word	0x01c9c37f
   1162c:	026259ff 	.word	0x026259ff
   11630:	00015af1 	.word	0x00015af1
   11634:	00016fae 	.word	0x00016fae
   11638:	00018e60 	.word	0x00018e60
   1163c:	00016060 	.word	0x00016060
   11640:	000198ba 	.word	0x000198ba
   11644:	200008dc 	.word	0x200008dc
   11648:	8e89bed6 	.word	0x8e89bed6

0001164c <ll_conn_update>:
{
   1164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11650:	460c      	mov	r4, r1
   11652:	4690      	mov	r8, r2
   11654:	461d      	mov	r5, r3
   11656:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1165a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   1165e:	f7f9 fccf 	bl	b000 <connection_get>
	if (!conn) {
   11662:	b330      	cbz	r0, 116b2 <ll_conn_update+0x66>
	if (!cmd) {
   11664:	2c00      	cmp	r4, #0
   11666:	d14a      	bne.n	116fe <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   11668:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1166c:	06d9      	lsls	r1, r3, #27
   1166e:	d407      	bmi.n	11680 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   11670:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   11674:	069a      	lsls	r2, r3, #26
   11676:	d541      	bpl.n	116fc <ll_conn_update+0xb0>
		     (conn->llcp_features &
   11678:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   1167c:	079b      	lsls	r3, r3, #30
   1167e:	d43d      	bmi.n	116fc <ll_conn_update+0xb0>
		} else if (conn->role) {
   11680:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11684:	2b00      	cmp	r3, #0
   11686:	da17      	bge.n	116b8 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11688:	201a      	movs	r0, #26
   1168a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   1168e:	428b      	cmp	r3, r1
   11690:	d00f      	beq.n	116b2 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   11692:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   11696:	f003 0207 	and.w	r2, r3, #7
   1169a:	2a03      	cmp	r2, #3
   1169c:	d109      	bne.n	116b2 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1169e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   116a2:	b2db      	uxtb	r3, r3
   116a4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   116a8:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   116ac:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   116b0:	e021      	b.n	116f6 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   116b2:	200c      	movs	r0, #12
   116b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   116b8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   116bc:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   116c0:	429a      	cmp	r2, r3
   116c2:	d1f6      	bne.n	116b2 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   116c4:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   116c8:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   116cc:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   116ce:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   116d0:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   116d4:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   116d8:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   116da:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   116de:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   116e2:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   116e6:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   116ea:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   116ee:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   116f2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   116f6:	2000      	movs	r0, #0
   116f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   116fc:	2401      	movs	r4, #1
		cmd--;
   116fe:	3c01      	subs	r4, #1
		if (cmd) {
   11700:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   11704:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   11708:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   1170c:	d1bf      	bne.n	1168e <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   1170e:	4299      	cmp	r1, r3
   11710:	d1cf      	bne.n	116b2 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   11712:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   11716:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   1171a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1171e:	b2db      	uxtb	r3, r3
   11720:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   11724:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   11726:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   1172a:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   1172e:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   11732:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   11736:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   1173a:	e7dc      	b.n	116f6 <ll_conn_update+0xaa>

0001173c <ll_chm_update>:
{
   1173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   11740:	4c1e      	ldr	r4, [pc, #120]	; (117bc <ll_chm_update+0x80>)
   11742:	4601      	mov	r1, r0
   11744:	2205      	movs	r2, #5
{
   11746:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   11748:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1174c:	f7f0 fa56 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   11750:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11754:	2105      	movs	r1, #5
   11756:	f7f6 fad1 	bl	7cfc <util_ones_count_get>
	_radio.data_chan_count =
   1175a:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   1175e:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   11762:	3c01      	subs	r4, #1
   11764:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   11766:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   11768:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   1176c:	2cff      	cmp	r4, #255	; 0xff
   1176e:	d102      	bne.n	11776 <ll_chm_update+0x3a>
	return 0;
   11770:	2000      	movs	r0, #0
   11772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   11776:	4620      	mov	r0, r4
   11778:	f7f9 fc42 	bl	b000 <connection_get>
		if (!conn || conn->role) {
   1177c:	4606      	mov	r6, r0
   1177e:	b1b8      	cbz	r0, 117b0 <ll_chm_update+0x74>
   11780:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11784:	2b00      	cmp	r3, #0
   11786:	db13      	blt.n	117b0 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   11788:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1178c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11790:	429a      	cmp	r2, r3
   11792:	d110      	bne.n	117b6 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   11794:	2205      	movs	r2, #5
   11796:	4629      	mov	r1, r5
   11798:	3079      	adds	r0, #121	; 0x79
   1179a:	f7f0 fa2f 	bl	1bfc <memcpy>
		conn->llcp_req++;
   1179e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   117a2:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   117a6:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   117a8:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   117ac:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   117b0:	3c01      	subs	r4, #1
   117b2:	b2e4      	uxtb	r4, r4
   117b4:	e7da      	b.n	1176c <ll_chm_update+0x30>
			return 1;
   117b6:	2001      	movs	r0, #1
}
   117b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117bc:	200008dc 	.word	0x200008dc

000117c0 <ll_chm_get>:
{
   117c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117c2:	460d      	mov	r5, r1
	conn = connection_get(handle);
   117c4:	f7f9 fc1c 	bl	b000 <connection_get>
	if (!conn) {
   117c8:	4604      	mov	r4, r0
   117ca:	b160      	cbz	r0, 117e6 <ll_chm_get+0x26>
		conn->chm_update = 0;
   117cc:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   117ce:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   117d2:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   117d4:	2205      	movs	r2, #5
   117d6:	4631      	mov	r1, r6
   117d8:	4628      	mov	r0, r5
   117da:	f7f0 fa0f 	bl	1bfc <memcpy>
	} while (conn->chm_update);
   117de:	7f20      	ldrb	r0, [r4, #28]
   117e0:	2800      	cmp	r0, #0
   117e2:	d1f6      	bne.n	117d2 <ll_chm_get+0x12>
   117e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   117e6:	2001      	movs	r0, #1
}
   117e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000117ea <ll_feature_req_send>:
{
   117ea:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   117ec:	f7f9 fc08 	bl	b000 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   117f0:	b168      	cbz	r0, 1180e <ll_feature_req_send+0x24>
   117f2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   117f6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   117fa:	4293      	cmp	r3, r2
   117fc:	d107      	bne.n	1180e <ll_feature_req_send+0x24>
	conn->llcp_req++;
   117fe:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   11800:	2204      	movs	r2, #4
	conn->llcp_req++;
   11802:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   11806:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   1180a:	2000      	movs	r0, #0
   1180c:	bd08      	pop	{r3, pc}
		return 1;
   1180e:	2001      	movs	r0, #1
}
   11810:	bd08      	pop	{r3, pc}

00011812 <ll_version_ind_send>:
{
   11812:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   11814:	f7f9 fbf4 	bl	b000 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11818:	b168      	cbz	r0, 11836 <ll_version_ind_send+0x24>
   1181a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1181e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11822:	4293      	cmp	r3, r2
   11824:	d107      	bne.n	11836 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   11826:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   11828:	2205      	movs	r2, #5
	conn->llcp_req++;
   1182a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1182e:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   11832:	2000      	movs	r0, #0
   11834:	bd08      	pop	{r3, pc}
		return 1;
   11836:	2001      	movs	r0, #1
}
   11838:	bd08      	pop	{r3, pc}

0001183a <ll_terminate_ind_send>:
{
   1183a:	b510      	push	{r4, lr}
   1183c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1183e:	f7f9 fbdf 	bl	b000 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   11842:	b160      	cbz	r0, 1185e <ll_terminate_ind_send+0x24>
   11844:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   11848:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   1184c:	4293      	cmp	r3, r2
   1184e:	d106      	bne.n	1185e <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   11850:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   11852:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   11856:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1185a:	2000      	movs	r0, #0
   1185c:	bd10      	pop	{r4, pc}
		return 1;
   1185e:	2001      	movs	r0, #1
}
   11860:	bd10      	pop	{r4, pc}

00011862 <ll_tx_pwr_lvl_get>:
{
   11862:	b510      	push	{r4, lr}
   11864:	4614      	mov	r4, r2
	conn = connection_get(handle);
   11866:	f7f9 fbcb 	bl	b000 <connection_get>
	if (!conn) {
   1186a:	b110      	cbz	r0, 11872 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   1186c:	2000      	movs	r0, #0
   1186e:	7020      	strb	r0, [r4, #0]
	return 0;
   11870:	bd10      	pop	{r4, pc}
		return 1;
   11872:	2001      	movs	r0, #1
}
   11874:	bd10      	pop	{r4, pc}

00011876 <ll_apto_get>:
{
   11876:	b510      	push	{r4, lr}
   11878:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1187a:	f7f9 fbc1 	bl	b000 <connection_get>
	if (!conn) {
   1187e:	b160      	cbz	r0, 1189a <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   11880:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   11882:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   11886:	435a      	muls	r2, r3
   11888:	237d      	movs	r3, #125	; 0x7d
   1188a:	4353      	muls	r3, r2
	return 0;
   1188c:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1188e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11892:	fb93 f3f2 	sdiv	r3, r3, r2
   11896:	8023      	strh	r3, [r4, #0]
	return 0;
   11898:	bd10      	pop	{r4, pc}
		return 1;
   1189a:	2001      	movs	r0, #1
}
   1189c:	bd10      	pop	{r4, pc}

0001189e <ll_apto_set>:
{
   1189e:	b510      	push	{r4, lr}
   118a0:	460c      	mov	r4, r1
	conn = connection_get(handle);
   118a2:	f7f9 fbad 	bl	b000 <connection_get>
	if (!conn) {
   118a6:	b170      	cbz	r0, 118c6 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   118a8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   118aa:	f240 43e2 	movw	r3, #1250	; 0x4e2
   118ae:	4353      	muls	r3, r2
   118b0:	f242 7110 	movw	r1, #10000	; 0x2710
   118b4:	fb01 3404 	mla	r4, r1, r4, r3
   118b8:	3c01      	subs	r4, #1
   118ba:	fb94 f4f3 	sdiv	r4, r4, r3
   118be:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   118c2:	2000      	movs	r0, #0
   118c4:	bd10      	pop	{r4, pc}
		return 1;
   118c6:	2001      	movs	r0, #1
}
   118c8:	bd10      	pop	{r4, pc}

000118ca <ll_length_req_send>:
{
   118ca:	b570      	push	{r4, r5, r6, lr}
   118cc:	460e      	mov	r6, r1
   118ce:	4615      	mov	r5, r2
	conn = connection_get(handle);
   118d0:	f7f9 fb96 	bl	b000 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   118d4:	b1d0      	cbz	r0, 1190c <ll_length_req_send+0x42>
   118d6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   118da:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   118de:	429a      	cmp	r2, r3
   118e0:	d114      	bne.n	1190c <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   118e2:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   118e6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   118ea:	4293      	cmp	r3, r2
   118ec:	d10e      	bne.n	1190c <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   118ee:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   118f2:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   118f6:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   118f8:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   118fc:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11900:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   11904:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   11908:	2000      	movs	r0, #0
   1190a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1190c:	2001      	movs	r0, #1
}
   1190e:	bd70      	pop	{r4, r5, r6, pc}

00011910 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   11910:	4b03      	ldr	r3, [pc, #12]	; (11920 <ll_length_default_get+0x10>)
   11912:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   11916:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   11918:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   1191c:	800b      	strh	r3, [r1, #0]
   1191e:	4770      	bx	lr
   11920:	200008dc 	.word	0x200008dc

00011924 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   11924:	4b03      	ldr	r3, [pc, #12]	; (11934 <ll_length_default_set+0x10>)
   11926:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   1192a:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   1192e:	2000      	movs	r0, #0
   11930:	4770      	bx	lr
   11932:	bf00      	nop
   11934:	200008dc 	.word	0x200008dc

00011938 <ll_length_max_get>:
{
   11938:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1193a:	241b      	movs	r4, #27
   1193c:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1193e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11942:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   11944:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   11946:	8018      	strh	r0, [r3, #0]
   11948:	bd10      	pop	{r4, pc}

0001194a <ll_phy_get>:
{
   1194a:	b538      	push	{r3, r4, r5, lr}
   1194c:	460d      	mov	r5, r1
   1194e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   11950:	f7f9 fb56 	bl	b000 <connection_get>
	if (!conn) {
   11954:	b158      	cbz	r0, 1196e <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   11956:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1195a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1195e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   11960:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   11964:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11968:	7023      	strb	r3, [r4, #0]
	return 0;
   1196a:	2000      	movs	r0, #0
   1196c:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1196e:	2001      	movs	r0, #1
}
   11970:	bd38      	pop	{r3, r4, r5, pc}
	...

00011974 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   11974:	4b03      	ldr	r3, [pc, #12]	; (11984 <ll_phy_default_set+0x10>)
   11976:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   1197a:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   1197e:	2000      	movs	r0, #0
   11980:	4770      	bx	lr
   11982:	bf00      	nop
   11984:	200008dc 	.word	0x200008dc

00011988 <ll_phy_req_send>:
{
   11988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1198c:	4689      	mov	r9, r1
   1198e:	4690      	mov	r8, r2
   11990:	461f      	mov	r7, r3
	conn = connection_get(handle);
   11992:	f7f9 fb35 	bl	b000 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11996:	b320      	cbz	r0, 119e2 <ll_phy_req_send+0x5a>
   11998:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1199c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   119a0:	429a      	cmp	r2, r3
   119a2:	d11e      	bne.n	119e2 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   119a4:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   119a8:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   119ac:	429d      	cmp	r5, r3
   119ae:	d118      	bne.n	119e2 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   119b0:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   119b4:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   119b8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   119bc:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   119c0:	f046 0102 	orr.w	r1, r6, #2
   119c4:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   119c8:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   119ca:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   119cc:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   119d0:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   119d4:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   119d8:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   119dc:	2000      	movs	r0, #0
   119de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   119e2:	2001      	movs	r0, #1
}
   119e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000119e8 <ll_rx_get>:
{
   119e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   119ec:	4605      	mov	r5, r0
   119ee:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   119f0:	4918      	ldr	r1, [pc, #96]	; (11a54 <ll_rx_get+0x6c>)
   119f2:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   119f6:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   119fa:	4293      	cmp	r3, r2
   119fc:	460f      	mov	r7, r1
   119fe:	d01f      	beq.n	11a40 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   11a00:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   11a04:	f201 1177 	addw	r1, r1, #375	; 0x177
   11a08:	f898 2000 	ldrb.w	r2, [r8]
   11a0c:	f7f9 faae 	bl	af6c <tx_cmplt_get>
		if (!cmplt) {
   11a10:	4604      	mov	r4, r0
   11a12:	b9e0      	cbnz	r0, 11a4e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   11a14:	ae02      	add	r6, sp, #8
   11a16:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   11a1a:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   11a1e:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   11a22:	4631      	mov	r1, r6
   11a24:	f10d 0006 	add.w	r0, sp, #6
   11a28:	f7f9 faa0 	bl	af6c <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   11a2c:	b934      	cbnz	r4, 11a3c <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   11a2e:	b928      	cbnz	r0, 11a3c <ll_rx_get+0x54>
			*node_rx = _node_rx;
   11a30:	f8c5 8000 	str.w	r8, [r5]
}
   11a34:	4620      	mov	r0, r4
   11a36:	b002      	add	sp, #8
   11a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   11a3c:	4604      	mov	r4, r0
   11a3e:	e7ee      	b.n	11a1e <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   11a40:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   11a44:	f201 1177 	addw	r1, r1, #375	; 0x177
   11a48:	f7f9 fa90 	bl	af6c <tx_cmplt_get>
   11a4c:	4604      	mov	r4, r0
		*node_rx = NULL;
   11a4e:	2300      	movs	r3, #0
   11a50:	602b      	str	r3, [r5, #0]
   11a52:	e7ef      	b.n	11a34 <ll_rx_get+0x4c>
   11a54:	200008dc 	.word	0x200008dc

00011a58 <ll_rx_mem_release>:
{
   11a58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   11a5c:	4c1c      	ldr	r4, [pc, #112]	; (11ad0 <ll_rx_mem_release+0x78>)
{
   11a5e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   11a60:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11a62:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   11a66:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   11a6a:	b930      	cbnz	r0, 11a7a <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   11a6c:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   11a6e:	20ff      	movs	r0, #255	; 0xff
}
   11a70:	b002      	add	sp, #8
   11a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   11a76:	f7f9 b9a3 	b.w	adc0 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   11a7a:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   11a7c:	f8d0 8000 	ldr.w	r8, [r0]
   11a80:	2a0c      	cmp	r2, #12
   11a82:	d807      	bhi.n	11a94 <ll_rx_mem_release+0x3c>
   11a84:	2301      	movs	r3, #1
   11a86:	4093      	lsls	r3, r2
   11a88:	f641 727e 	movw	r2, #8062	; 0x1f7e
   11a8c:	4213      	tst	r3, r2
   11a8e:	d110      	bne.n	11ab2 <ll_rx_mem_release+0x5a>
   11a90:	061b      	lsls	r3, r3, #24
   11a92:	d413      	bmi.n	11abc <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   11a94:	4b0f      	ldr	r3, [pc, #60]	; (11ad4 <ll_rx_mem_release+0x7c>)
   11a96:	9301      	str	r3, [sp, #4]
   11a98:	9300      	str	r3, [sp, #0]
   11a9a:	4a0f      	ldr	r2, [pc, #60]	; (11ad8 <ll_rx_mem_release+0x80>)
   11a9c:	4b0f      	ldr	r3, [pc, #60]	; (11adc <ll_rx_mem_release+0x84>)
   11a9e:	4910      	ldr	r1, [pc, #64]	; (11ae0 <ll_rx_mem_release+0x88>)
   11aa0:	4810      	ldr	r0, [pc, #64]	; (11ae4 <ll_rx_mem_release+0x8c>)
   11aa2:	f7ef fa73 	bl	f8c <printk>
   11aa6:	4040      	eors	r0, r0
   11aa8:	f380 8811 	msr	BASEPRI, r0
   11aac:	f04f 0004 	mov.w	r0, #4
   11ab0:	df02      	svc	2
			mem_release(_node_rx_free,
   11ab2:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   11ab4:	f7f5 ff91 	bl	79da <mem_release>
{
   11ab8:	4640      	mov	r0, r8
   11aba:	e7d6      	b.n	11a6a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11abc:	88c2      	ldrh	r2, [r0, #6]
   11abe:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   11ac2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11ac6:	f7f5 ffa3 	bl	7a10 <mem_get>
			mem_release(conn, &_radio.conn_free);
   11aca:	4639      	mov	r1, r7
   11acc:	e7f2      	b.n	11ab4 <ll_rx_mem_release+0x5c>
   11ace:	bf00      	nop
   11ad0:	20000a0c 	.word	0x20000a0c
   11ad4:	00015af1 	.word	0x00015af1
   11ad8:	00016fae 	.word	0x00016fae
   11adc:	00019004 	.word	0x00019004
   11ae0:	00016060 	.word	0x00016060
   11ae4:	00016f22 	.word	0x00016f22

00011ae8 <do_radio_rx_fc_set>:
	if (req == ack) {
   11ae8:	4291      	cmp	r1, r2
{
   11aea:	b510      	push	{r4, lr}
   11aec:	4b14      	ldr	r3, [pc, #80]	; (11b40 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   11aee:	d119      	bne.n	11b24 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   11af0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   11af4:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   11af8:	4294      	cmp	r4, r2
   11afa:	d111      	bne.n	11b20 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   11afc:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   11afe:	bf14      	ite	ne
   11b00:	460a      	movne	r2, r1
   11b02:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   11b04:	3a01      	subs	r2, #1
   11b06:	b2d2      	uxtb	r2, r2
   11b08:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   11b0c:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   11b10:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   11b14:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   11b18:	4291      	cmp	r1, r2
   11b1a:	d00f      	beq.n	11b3c <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   11b1c:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   11b20:	2001      	movs	r0, #1
   11b22:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   11b24:	b929      	cbnz	r1, 11b32 <do_radio_rx_fc_set+0x4a>
   11b26:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   11b2a:	1a18      	subs	r0, r3, r0
   11b2c:	bf18      	it	ne
   11b2e:	2001      	movne	r0, #1
   11b30:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   11b32:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   11b36:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   11b3a:	e7f6      	b.n	11b2a <do_radio_rx_fc_set+0x42>
	return 0;
   11b3c:	2000      	movs	r0, #0
}
   11b3e:	bd10      	pop	{r4, pc}
   11b40:	200008dc 	.word	0x200008dc

00011b44 <radio_rx_fc_set>:
{
   11b44:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   11b46:	4b14      	ldr	r3, [pc, #80]	; (11b98 <radio_rx_fc_set+0x54>)
   11b48:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   11b4c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   11b4e:	b302      	cbz	r2, 11b92 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   11b50:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   11b54:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   11b56:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   11b5a:	b135      	cbz	r5, 11b6a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   11b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b60:	4298      	cmp	r0, r3
   11b62:	d016      	beq.n	11b92 <radio_rx_fc_set+0x4e>
}
   11b64:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   11b66:	f7ff bfbf 	b.w	11ae8 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   11b6a:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   11b6e:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   11b72:	42a0      	cmp	r0, r4
   11b74:	d10d      	bne.n	11b92 <radio_rx_fc_set+0x4e>
   11b76:	4291      	cmp	r1, r2
   11b78:	d00b      	beq.n	11b92 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11b7a:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   11b7e:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11b82:	42a0      	cmp	r0, r4
   11b84:	d005      	beq.n	11b92 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   11b86:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11b8a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   11b8c:	bf08      	it	eq
   11b8e:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   11b92:	2000      	movs	r0, #0
   11b94:	bc30      	pop	{r4, r5}
   11b96:	4770      	bx	lr
   11b98:	200008dc 	.word	0x200008dc

00011b9c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   11b9c:	4801      	ldr	r0, [pc, #4]	; (11ba4 <ll_tx_mem_acquire+0x8>)
   11b9e:	f7f5 bf02 	b.w	79a6 <mem_acquire>
   11ba2:	bf00      	nop
   11ba4:	20000a40 	.word	0x20000a40

00011ba8 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   11ba8:	4901      	ldr	r1, [pc, #4]	; (11bb0 <ll_tx_mem_release+0x8>)
   11baa:	f7f5 bf16 	b.w	79da <mem_release>
   11bae:	bf00      	nop
   11bb0:	20000a40 	.word	0x20000a40

00011bb4 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   11bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   11bb6:	4d33      	ldr	r5, [pc, #204]	; (11c84 <ll_tx_mem_enqueue+0xd0>)
   11bb8:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   11bbc:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   11bc0:	3401      	adds	r4, #1
{
   11bc2:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   11bc4:	b2e4      	uxtb	r4, r4
{
   11bc6:	4607      	mov	r7, r0
   11bc8:	460e      	mov	r6, r1
		last = 0;
   11bca:	42a3      	cmp	r3, r4
   11bcc:	bf08      	it	eq
   11bce:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   11bd0:	f7f9 fa16 	bl	b000 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   11bd4:	2800      	cmp	r0, #0
   11bd6:	d052      	beq.n	11c7e <ll_tx_mem_enqueue+0xca>
   11bd8:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   11bdc:	429c      	cmp	r4, r3
   11bde:	d04e      	beq.n	11c7e <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   11be0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   11be4:	7972      	ldrb	r2, [r6, #5]
   11be6:	3b07      	subs	r3, #7
   11be8:	429a      	cmp	r2, r3
   11bea:	d90e      	bls.n	11c0a <ll_tx_mem_enqueue+0x56>
   11bec:	4b26      	ldr	r3, [pc, #152]	; (11c88 <ll_tx_mem_enqueue+0xd4>)
   11bee:	9301      	str	r3, [sp, #4]
   11bf0:	9300      	str	r3, [sp, #0]
   11bf2:	4a26      	ldr	r2, [pc, #152]	; (11c8c <ll_tx_mem_enqueue+0xd8>)
   11bf4:	4b26      	ldr	r3, [pc, #152]	; (11c90 <ll_tx_mem_enqueue+0xdc>)
   11bf6:	4927      	ldr	r1, [pc, #156]	; (11c94 <ll_tx_mem_enqueue+0xe0>)
   11bf8:	4827      	ldr	r0, [pc, #156]	; (11c98 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11bfa:	f7ef f9c7 	bl	f8c <printk>
   11bfe:	4040      	eors	r0, r0
   11c00:	f380 8811 	msr	BASEPRI, r0
   11c04:	f04f 0004 	mov.w	r0, #4
   11c08:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   11c0a:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   11c0e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   11c12:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   11c16:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   11c1a:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   11c1c:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   11c20:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11c24:	2b00      	cmp	r3, #0
   11c26:	db02      	blt.n	11c2e <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   11c28:	2000      	movs	r0, #0
}
   11c2a:	b009      	add	sp, #36	; 0x24
   11c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   11c2e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   11c30:	2b00      	cmp	r3, #0
   11c32:	d0f9      	beq.n	11c28 <ll_tx_mem_enqueue+0x74>
   11c34:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   11c38:	f012 0302 	ands.w	r3, r2, #2
   11c3c:	d1f4      	bne.n	11c28 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   11c3e:	f042 0202 	orr.w	r2, r2, #2
   11c42:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c46:	f890 2020 	ldrb.w	r2, [r0, #32]
   11c4a:	4914      	ldr	r1, [pc, #80]	; (11c9c <ll_tx_mem_enqueue+0xe8>)
   11c4c:	9105      	str	r1, [sp, #20]
   11c4e:	3207      	adds	r2, #7
   11c50:	2101      	movs	r1, #1
   11c52:	9006      	str	r0, [sp, #24]
   11c54:	9304      	str	r3, [sp, #16]
   11c56:	9103      	str	r1, [sp, #12]
   11c58:	9302      	str	r3, [sp, #8]
   11c5a:	9301      	str	r3, [sp, #4]
   11c5c:	9300      	str	r3, [sp, #0]
   11c5e:	4618      	mov	r0, r3
   11c60:	b2d2      	uxtb	r2, r2
   11c62:	2103      	movs	r1, #3
   11c64:	f7f6 fd78 	bl	8758 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11c68:	f030 0302 	bics.w	r3, r0, #2
   11c6c:	d0dc      	beq.n	11c28 <ll_tx_mem_enqueue+0x74>
   11c6e:	4b06      	ldr	r3, [pc, #24]	; (11c88 <ll_tx_mem_enqueue+0xd4>)
   11c70:	9301      	str	r3, [sp, #4]
   11c72:	9300      	str	r3, [sp, #0]
   11c74:	4a05      	ldr	r2, [pc, #20]	; (11c8c <ll_tx_mem_enqueue+0xd8>)
   11c76:	4b06      	ldr	r3, [pc, #24]	; (11c90 <ll_tx_mem_enqueue+0xdc>)
   11c78:	4906      	ldr	r1, [pc, #24]	; (11c94 <ll_tx_mem_enqueue+0xe0>)
   11c7a:	4809      	ldr	r0, [pc, #36]	; (11ca0 <ll_tx_mem_enqueue+0xec>)
   11c7c:	e7bd      	b.n	11bfa <ll_tx_mem_enqueue+0x46>
		return 1;
   11c7e:	2001      	movs	r0, #1
   11c80:	e7d3      	b.n	11c2a <ll_tx_mem_enqueue+0x76>
   11c82:	bf00      	nop
   11c84:	200008dc 	.word	0x200008dc
   11c88:	00015af1 	.word	0x00015af1
   11c8c:	00016fae 	.word	0x00016fae
   11c90:	00019032 	.word	0x00019032
   11c94:	00016060 	.word	0x00016060
   11c98:	00019619 	.word	0x00019619
   11c9c:	0000bd5d 	.word	0x0000bd5d
   11ca0:	0001906a 	.word	0x0001906a

00011ca4 <ll_enc_req_send>:
{
   11ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11ca8:	4607      	mov	r7, r0
   11caa:	4688      	mov	r8, r1
   11cac:	4616      	mov	r6, r2
   11cae:	4699      	mov	r9, r3
	conn = connection_get(handle);
   11cb0:	f7f9 f9a6 	bl	b000 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11cb4:	4605      	mov	r5, r0
   11cb6:	b910      	cbnz	r0, 11cbe <ll_enc_req_send+0x1a>
			return 1;
   11cb8:	2001      	movs	r0, #1
   11cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11cbe:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11cc2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11cc6:	429a      	cmp	r2, r3
   11cc8:	d1f6      	bne.n	11cb8 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   11cca:	f7ff ff67 	bl	11b9c <ll_tx_mem_acquire>
	if (node_tx) {
   11cce:	4604      	mov	r4, r0
   11cd0:	2800      	cmp	r0, #0
   11cd2:	d0f1      	beq.n	11cb8 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   11cd4:	2210      	movs	r2, #16
   11cd6:	4649      	mov	r1, r9
   11cd8:	f105 0084 	add.w	r0, r5, #132	; 0x84
   11cdc:	f7ef ff8e 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   11ce0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11ce4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   11ce8:	d124      	bne.n	11d34 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cea:	7923      	ldrb	r3, [r4, #4]
   11cec:	f043 0303 	orr.w	r3, r3, #3
   11cf0:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   11cf2:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   11cf4:	2208      	movs	r2, #8
			pdu_data_tx->len =
   11cf6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11cf8:	2303      	movs	r3, #3
   11cfa:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   11cfc:	4641      	mov	r1, r8
   11cfe:	18a0      	adds	r0, r4, r2
   11d00:	f7ef ff7c 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
   11d04:	7833      	ldrb	r3, [r6, #0]
   11d06:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   11d08:	7873      	ldrb	r3, [r6, #1]
   11d0a:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   11d0c:	2108      	movs	r1, #8
   11d0e:	f104 0012 	add.w	r0, r4, #18
   11d12:	f7f6 fe7f 	bl	8a14 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   11d16:	2104      	movs	r1, #4
   11d18:	f104 001a 	add.w	r0, r4, #26
   11d1c:	f7f6 fe7a 	bl	8a14 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   11d20:	4621      	mov	r1, r4
   11d22:	4638      	mov	r0, r7
   11d24:	f7ff ff46 	bl	11bb4 <ll_tx_mem_enqueue>
   11d28:	2601      	movs	r6, #1
   11d2a:	b1d0      	cbz	r0, 11d62 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   11d2c:	4620      	mov	r0, r4
   11d2e:	f7ff ff3b 	bl	11ba8 <ll_tx_mem_release>
   11d32:	e7c1      	b.n	11cb8 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   11d34:	2b30      	cmp	r3, #48	; 0x30
   11d36:	d1f9      	bne.n	11d2c <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   11d38:	2208      	movs	r2, #8
   11d3a:	4641      	mov	r1, r8
   11d3c:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   11d40:	f7ef ff5c 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   11d44:	7833      	ldrb	r3, [r6, #0]
   11d46:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   11d4a:	7873      	ldrb	r3, [r6, #1]
   11d4c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d50:	7923      	ldrb	r3, [r4, #4]
   11d52:	f043 0303 	orr.w	r3, r3, #3
   11d56:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   11d58:	2301      	movs	r3, #1
   11d5a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11d5c:	230a      	movs	r3, #10
   11d5e:	71e3      	strb	r3, [r4, #7]
   11d60:	e7de      	b.n	11d20 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   11d62:	2303      	movs	r3, #3
   11d64:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   11d68:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   11d6c:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   11d70:	3301      	adds	r3, #1
   11d72:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   11d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d7a:	0000      	movs	r0, r0
   11d7c:	0000      	movs	r0, r0
	...

00011d80 <radio_scan_enable>:
{
   11d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   11d84:	4c68      	ldr	r4, [pc, #416]	; (11f28 <radio_scan_enable+0x1a8>)
   11d86:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   11d8a:	b08e      	sub	sp, #56	; 0x38
   11d8c:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   11d8e:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11d92:	f04f 0302 	mov.w	r3, #2
{
   11d96:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11d98:	930b      	str	r3, [sp, #44]	; 0x2c
{
   11d9a:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   11d9c:	d003      	beq.n	11da6 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11d9e:	200c      	movs	r0, #12
}
   11da0:	b00e      	add	sp, #56	; 0x38
   11da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   11da6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   11daa:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   11dae:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   11db2:	0840      	lsrs	r0, r0, #1
   11db4:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   11db8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   11dbc:	f360 0200 	bfi	r2, r0, #0, #1
   11dc0:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   11dc4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   11dc8:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   11dcc:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11dd0:	2206      	movs	r2, #6
   11dd2:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   11dd6:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11dda:	4e54      	ldr	r6, [pc, #336]	; (11f2c <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11ddc:	f7ef ff0e 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11de0:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   11de4:	f04f 0991 	mov.w	r9, #145	; 0x91
   11de8:	fba2 0106 	umull	r0, r1, r2, r6
   11dec:	fb09 1102 	mla	r1, r9, r2, r1
   11df0:	a34b      	add	r3, pc, #300	; (adr r3, 11f20 <radio_scan_enable+0x1a0>)
   11df2:	e9d3 2300 	ldrd	r2, r3, [r3]
   11df6:	f7ee fa0d 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   11dfa:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   11dfe:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   11e02:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11e06:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   11e0a:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11e0e:	b2ba      	uxth	r2, r7
   11e10:	fba2 6706 	umull	r6, r7, r2, r6
   11e14:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   11e18:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   11e1c:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   11e1e:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   11e22:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   11e26:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   11e2a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11e2e:	a33c      	add	r3, pc, #240	; (adr r3, 11f20 <radio_scan_enable+0x1a0>)
   11e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e34:	4630      	mov	r0, r6
   11e36:	4639      	mov	r1, r7
   11e38:	f7ee f9ec 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   11e3c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   11e40:	459a      	cmp	sl, r3
   11e42:	bf94      	ite	ls
   11e44:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   11e48:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   11e4c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11e50:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   11e52:	bf38      	it	cc
   11e54:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   11e58:	f7f6 fd9c 	bl	8994 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   11e5c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   11e60:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   11e62:	2b00      	cmp	r3, #0
   11e64:	d045      	beq.n	11ef2 <radio_scan_enable+0x172>
		us_offset = 0;
   11e66:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11e68:	980c      	ldr	r0, [sp, #48]	; 0x30
   11e6a:	4931      	ldr	r1, [pc, #196]	; (11f30 <radio_scan_enable+0x1b0>)
   11e6c:	a32c      	add	r3, pc, #176	; (adr r3, 11f20 <radio_scan_enable+0x1a0>)
   11e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e72:	fba0 0101 	umull	r0, r1, r0, r1
   11e76:	f7ee f9cd 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11e7a:	ab0b      	add	r3, sp, #44	; 0x2c
   11e7c:	9308      	str	r3, [sp, #32]
   11e7e:	4b2d      	ldr	r3, [pc, #180]	; (11f34 <radio_scan_enable+0x1b4>)
   11e80:	9307      	str	r3, [sp, #28]
   11e82:	4b2d      	ldr	r3, [pc, #180]	; (11f38 <radio_scan_enable+0x1b8>)
   11e84:	9305      	str	r3, [sp, #20]
   11e86:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11e8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11e8e:	4443      	add	r3, r8
   11e90:	2500      	movs	r5, #0
   11e92:	4482      	add	sl, r0
   11e94:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   11e96:	4630      	mov	r0, r6
   11e98:	a321      	add	r3, pc, #132	; (adr r3, 11f20 <radio_scan_enable+0x1a0>)
   11e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e9e:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11ea0:	9506      	str	r5, [sp, #24]
   11ea2:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   11ea4:	f7ee f9b6 	bl	214 <__aeabi_uldivmod>
   11ea8:	4610      	mov	r0, r2
   11eaa:	4619      	mov	r1, r3
   11eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11eb0:	2300      	movs	r3, #0
   11eb2:	f7ee f9af 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11eb6:	e88d 0220 	stmia.w	sp, {r5, r9}
   11eba:	9002      	str	r0, [sp, #8]
   11ebc:	4653      	mov	r3, sl
   11ebe:	2206      	movs	r2, #6
   11ec0:	2103      	movs	r1, #3
   11ec2:	4628      	mov	r0, r5
   11ec4:	f7f6 fbf8 	bl	86b8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   11ec8:	2802      	cmp	r0, #2
   11eca:	d023      	beq.n	11f14 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11ecc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11ece:	2d00      	cmp	r5, #0
   11ed0:	f47f af65 	bne.w	11d9e <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   11ed4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11ed8:	f043 0301 	orr.w	r3, r3, #1
   11edc:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   11ee0:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11ee4:	2b00      	cmp	r3, #0
   11ee6:	db02      	blt.n	11eee <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   11ee8:	2002      	movs	r0, #2
   11eea:	f000 febb 	bl	12c64 <ll_adv_scan_state_cb>
	return 0;
   11eee:	4628      	mov	r0, r5
   11ef0:	e756      	b.n	11da0 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11ef2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   11ef6:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11ef8:	aa0d      	add	r2, sp, #52	; 0x34
   11efa:	ab0c      	add	r3, sp, #48	; 0x30
   11efc:	4441      	add	r1, r8
   11efe:	2003      	movs	r0, #3
   11f00:	f7f9 fc86 	bl	b810 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   11f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11f06:	2b00      	cmp	r3, #0
   11f08:	d0ae      	beq.n	11e68 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   11f0a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   11f0e:	e7ab      	b.n	11e68 <radio_scan_enable+0xe8>
			cpu_sleep();
   11f10:	f7f8 fe7c 	bl	ac0c <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   11f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11f16:	2b02      	cmp	r3, #2
   11f18:	d0fa      	beq.n	11f10 <radio_scan_enable+0x190>
   11f1a:	e7d7      	b.n	11ecc <radio_scan_enable+0x14c>
   11f1c:	f3af 8000 	nop.w
   11f20:	1afd498d 	.word	0x1afd498d
   11f24:	00000007 	.word	0x00000007
   11f28:	200008dc 	.word	0x200008dc
   11f2c:	84e72a00 	.word	0x84e72a00
   11f30:	3b9aca00 	.word	0x3b9aca00
   11f34:	0000ac51 	.word	0x0000ac51
   11f38:	0000cb7d 	.word	0x0000cb7d

00011f3c <radio_scan_disable>:
{
   11f3c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   11f3e:	2104      	movs	r1, #4
   11f40:	2006      	movs	r0, #6
   11f42:	f7f9 f873 	bl	b02c <role_disable>
	if (!status) {
   11f46:	4605      	mov	r5, r0
   11f48:	b9e8      	cbnz	r0, 11f86 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   11f4a:	4c10      	ldr	r4, [pc, #64]	; (11f8c <radio_scan_disable+0x50>)
   11f4c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   11f50:	f360 0200 	bfi	r2, r0, #0, #1
   11f54:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   11f58:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   11f5c:	2a00      	cmp	r2, #0
   11f5e:	db01      	blt.n	11f64 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   11f60:	f000 fe80 	bl	12c64 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   11f64:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   11f68:	b15e      	cbz	r6, 11f82 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   11f6a:	2300      	movs	r3, #0
   11f6c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   11f70:	4907      	ldr	r1, [pc, #28]	; (11f90 <radio_scan_disable+0x54>)
   11f72:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   11f76:	f7f5 fd30 	bl	79da <mem_release>
			mem_release(conn, &_radio.conn_free);
   11f7a:	4906      	ldr	r1, [pc, #24]	; (11f94 <radio_scan_disable+0x58>)
   11f7c:	4630      	mov	r0, r6
   11f7e:	f7f5 fd2c 	bl	79da <mem_release>
}
   11f82:	4628      	mov	r0, r5
   11f84:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   11f86:	250c      	movs	r5, #12
   11f88:	e7fb      	b.n	11f82 <radio_scan_disable+0x46>
   11f8a:	bf00      	nop
   11f8c:	200008dc 	.word	0x200008dc
   11f90:	20000a24 	.word	0x20000a24
   11f94:	200009e8 	.word	0x200009e8

00011f98 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   11f98:	4b03      	ldr	r3, [pc, #12]	; (11fa8 <ll_connect_disable+0x10>)
   11f9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11f9e:	b10b      	cbz	r3, 11fa4 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   11fa0:	f7ff bfcc 	b.w	11f3c <radio_scan_disable>
}
   11fa4:	200c      	movs	r0, #12
   11fa6:	4770      	bx	lr
   11fa8:	200008dc 	.word	0x200008dc

00011fac <ll_rx_dequeue>:
{
   11fac:	b530      	push	{r4, r5, lr}
   11fae:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11fb0:	4d47      	ldr	r5, [pc, #284]	; (120d0 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   11fb2:	aa04      	add	r2, sp, #16
   11fb4:	2300      	movs	r3, #0
   11fb6:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11fba:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   11fbe:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   11fc2:	f7f5 fd59 	bl	7a78 <memq_dequeue>
   11fc6:	462c      	mov	r4, r5
	LL_ASSERT(link);
   11fc8:	b970      	cbnz	r0, 11fe8 <ll_rx_dequeue+0x3c>
   11fca:	4b42      	ldr	r3, [pc, #264]	; (120d4 <ll_rx_dequeue+0x128>)
   11fcc:	9301      	str	r3, [sp, #4]
   11fce:	9300      	str	r3, [sp, #0]
   11fd0:	4a41      	ldr	r2, [pc, #260]	; (120d8 <ll_rx_dequeue+0x12c>)
   11fd2:	4b42      	ldr	r3, [pc, #264]	; (120dc <ll_rx_dequeue+0x130>)
   11fd4:	4942      	ldr	r1, [pc, #264]	; (120e0 <ll_rx_dequeue+0x134>)
   11fd6:	4843      	ldr	r0, [pc, #268]	; (120e4 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   11fd8:	f7ee ffd8 	bl	f8c <printk>
   11fdc:	4040      	eors	r0, r0
   11fde:	f380 8811 	msr	BASEPRI, r0
   11fe2:	f04f 0004 	mov.w	r0, #4
   11fe6:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   11fe8:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   11fec:	f7f5 fcf5 	bl	79da <mem_release>
	switch (node_rx->hdr.type) {
   11ff0:	9a03      	ldr	r2, [sp, #12]
   11ff2:	7911      	ldrb	r1, [r2, #4]
   11ff4:	290c      	cmp	r1, #12
   11ff6:	d807      	bhi.n	12008 <ll_rx_dequeue+0x5c>
   11ff8:	2301      	movs	r3, #1
   11ffa:	408b      	lsls	r3, r1
   11ffc:	f641 707e 	movw	r0, #8062	; 0x1f7e
   12000:	4203      	tst	r3, r0
   12002:	d109      	bne.n	12018 <ll_rx_dequeue+0x6c>
   12004:	0618      	lsls	r0, r3, #24
   12006:	d419      	bmi.n	1203c <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   12008:	4b32      	ldr	r3, [pc, #200]	; (120d4 <ll_rx_dequeue+0x128>)
   1200a:	9301      	str	r3, [sp, #4]
   1200c:	9300      	str	r3, [sp, #0]
   1200e:	4a32      	ldr	r2, [pc, #200]	; (120d8 <ll_rx_dequeue+0x12c>)
   12010:	4b32      	ldr	r3, [pc, #200]	; (120dc <ll_rx_dequeue+0x130>)
   12012:	4933      	ldr	r1, [pc, #204]	; (120e0 <ll_rx_dequeue+0x134>)
   12014:	4834      	ldr	r0, [pc, #208]	; (120e8 <ll_rx_dequeue+0x13c>)
   12016:	e7df      	b.n	11fd8 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   12018:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   1201c:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   12020:	3801      	subs	r0, #1
   12022:	4283      	cmp	r3, r0
   12024:	db07      	blt.n	12036 <ll_rx_dequeue+0x8a>
   12026:	4b2b      	ldr	r3, [pc, #172]	; (120d4 <ll_rx_dequeue+0x128>)
   12028:	9301      	str	r3, [sp, #4]
   1202a:	9300      	str	r3, [sp, #0]
   1202c:	4a2a      	ldr	r2, [pc, #168]	; (120d8 <ll_rx_dequeue+0x12c>)
   1202e:	4b2b      	ldr	r3, [pc, #172]	; (120dc <ll_rx_dequeue+0x130>)
   12030:	492b      	ldr	r1, [pc, #172]	; (120e0 <ll_rx_dequeue+0x134>)
   12032:	482e      	ldr	r0, [pc, #184]	; (120ec <ll_rx_dequeue+0x140>)
   12034:	e7d0      	b.n	11fd8 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   12036:	3301      	adds	r3, #1
   12038:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1203c:	2906      	cmp	r1, #6
   1203e:	d136      	bne.n	120ae <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   12040:	7ad3      	ldrb	r3, [r2, #11]
   12042:	2b3c      	cmp	r3, #60	; 0x3c
   12044:	d00d      	beq.n	12062 <ll_rx_dequeue+0xb6>
   12046:	7b12      	ldrb	r2, [r2, #12]
   12048:	b9e2      	cbnz	r2, 12084 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   1204a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1204e:	07d9      	lsls	r1, r3, #31
   12050:	d42f      	bmi.n	120b2 <ll_rx_dequeue+0x106>
   12052:	4b20      	ldr	r3, [pc, #128]	; (120d4 <ll_rx_dequeue+0x128>)
   12054:	9301      	str	r3, [sp, #4]
   12056:	9300      	str	r3, [sp, #0]
   12058:	4a1f      	ldr	r2, [pc, #124]	; (120d8 <ll_rx_dequeue+0x12c>)
   1205a:	4b20      	ldr	r3, [pc, #128]	; (120dc <ll_rx_dequeue+0x130>)
   1205c:	4920      	ldr	r1, [pc, #128]	; (120e0 <ll_rx_dequeue+0x134>)
   1205e:	4824      	ldr	r0, [pc, #144]	; (120f0 <ll_rx_dequeue+0x144>)
   12060:	e7ba      	b.n	11fd8 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   12062:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   12064:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   12068:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   1206c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   12070:	2b00      	cmp	r3, #0
   12072:	db09      	blt.n	12088 <ll_rx_dequeue+0xdc>
   12074:	4b17      	ldr	r3, [pc, #92]	; (120d4 <ll_rx_dequeue+0x128>)
   12076:	9301      	str	r3, [sp, #4]
   12078:	9300      	str	r3, [sp, #0]
   1207a:	4a17      	ldr	r2, [pc, #92]	; (120d8 <ll_rx_dequeue+0x12c>)
   1207c:	4b17      	ldr	r3, [pc, #92]	; (120dc <ll_rx_dequeue+0x130>)
   1207e:	4918      	ldr	r1, [pc, #96]	; (120e0 <ll_rx_dequeue+0x134>)
   12080:	481c      	ldr	r0, [pc, #112]	; (120f4 <ll_rx_dequeue+0x148>)
   12082:	e7a9      	b.n	11fd8 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   12084:	2500      	movs	r5, #0
   12086:	e7f1      	b.n	1206c <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   12088:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1208c:	f36f 13c7 	bfc	r3, #7, #1
   12090:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   12094:	b995      	cbnz	r5, 120bc <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   12096:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   1209a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1209e:	f000 0001 	and.w	r0, r0, #1
   120a2:	0040      	lsls	r0, r0, #1
		if (!bm) {
   120a4:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   120a8:	d101      	bne.n	120ae <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   120aa:	f000 fddb 	bl	12c64 <ll_adv_scan_state_cb>
}
   120ae:	b005      	add	sp, #20
   120b0:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   120b2:	f362 0300 	bfi	r3, r2, #0, #1
   120b6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   120ba:	e7ec      	b.n	12096 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   120bc:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   120c0:	490d      	ldr	r1, [pc, #52]	; (120f8 <ll_rx_dequeue+0x14c>)
   120c2:	f7f5 fc8a 	bl	79da <mem_release>
			mem_release(conn, &_radio.conn_free);
   120c6:	490d      	ldr	r1, [pc, #52]	; (120fc <ll_rx_dequeue+0x150>)
   120c8:	4628      	mov	r0, r5
   120ca:	f7f5 fc86 	bl	79da <mem_release>
   120ce:	e7e2      	b.n	12096 <ll_rx_dequeue+0xea>
   120d0:	200008dc 	.word	0x200008dc
   120d4:	00015af1 	.word	0x00015af1
   120d8:	00016fae 	.word	0x00016fae
   120dc:	00018ff6 	.word	0x00018ff6
   120e0:	00016060 	.word	0x00016060
   120e4:	00019044 	.word	0x00019044
   120e8:	00016f22 	.word	0x00016f22
   120ec:	000190ef 	.word	0x000190ef
   120f0:	000195de 	.word	0x000195de
   120f4:	000195a0 	.word	0x000195a0
   120f8:	20000a24 	.word	0x20000a24
   120fc:	200009e8 	.word	0x200009e8

00012100 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   12100:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   12102:	4c0b      	ldr	r4, [pc, #44]	; (12130 <rtc0_nrf5_isr+0x30>)
   12104:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   12108:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   1210c:	b122      	cbz	r2, 12118 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1210e:	2000      	movs	r0, #0
   12110:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   12114:	f7f6 fabe 	bl	8694 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   12118:	b12d      	cbz	r5, 12126 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   1211a:	2300      	movs	r3, #0
   1211c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   12120:	2001      	movs	r0, #1
   12122:	f7f6 fab7 	bl	8694 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   12126:	2000      	movs	r0, #0
}
   12128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   1212c:	f7f5 bd54 	b.w	7bd8 <mayfly_run>
   12130:	4000b000 	.word	0x4000b000

00012134 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   12134:	2001      	movs	r0, #1
   12136:	f7f5 bd4f 	b.w	7bd8 <mayfly_run>

0001213a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1213a:	4668      	mov	r0, sp
   1213c:	f020 0107 	bic.w	r1, r0, #7
   12140:	468d      	mov	sp, r1
   12142:	b501      	push	{r0, lr}
	isr_radio();
   12144:	f001 f8ee 	bl	13324 <isr_radio>
	ISR_DIRECT_PM();
   12148:	f7ef fbd2 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1214c:	f7ef f9bc 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   12150:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   12154:	4685      	mov	sp, r0
   12156:	4770      	bx	lr

00012158 <radio_active_callback>:
{
   12158:	4770      	bx	lr
	...

0001215c <radio_event_callback>:
	k_sem_give(sem_recv);
   1215c:	4b01      	ldr	r3, [pc, #4]	; (12164 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1215e:	6818      	ldr	r0, [r3, #0]
   12160:	f002 bf0f 	b.w	14f82 <_impl_k_sem_give>
   12164:	2000120c 	.word	0x2000120c

00012168 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   12168:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1216a:	4b41      	ldr	r3, [pc, #260]	; (12270 <ll_init+0x108>)
{
   1216c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1216e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   12170:	4840      	ldr	r0, [pc, #256]	; (12274 <ll_init+0x10c>)
   12172:	f002 fa1f 	bl	145b4 <device_get_binding>
	if (!clk_k32) {
   12176:	b918      	cbnz	r0, 12180 <ll_init+0x18>
		return -ENODEV;
   12178:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   1217c:	b006      	add	sp, #24
   1217e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   12180:	6843      	ldr	r3, [r0, #4]
   12182:	2101      	movs	r1, #1
   12184:	681b      	ldr	r3, [r3, #0]
   12186:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   12188:	483b      	ldr	r0, [pc, #236]	; (12278 <ll_init+0x110>)
   1218a:	f002 fa13 	bl	145b4 <device_get_binding>
	if (!entropy) {
   1218e:	4604      	mov	r4, r0
   12190:	2800      	cmp	r0, #0
   12192:	d0f1      	beq.n	12178 <ll_init+0x10>
	cntr_init();
   12194:	f000 ffaa 	bl	130ec <cntr_init>
	mayfly_init();
   12198:	f7f5 fc7e 	bl	7a98 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1219c:	4b37      	ldr	r3, [pc, #220]	; (1227c <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1219e:	2203      	movs	r2, #3
   121a0:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   121a2:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   121a4:	4a36      	ldr	r2, [pc, #216]	; (12280 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   121a6:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   121a8:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   121aa:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   121ac:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   121ae:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   121b0:	9205      	str	r2, [sp, #20]
   121b2:	4a34      	ldr	r2, [pc, #208]	; (12284 <ll_init+0x11c>)
   121b4:	9204      	str	r2, [sp, #16]
   121b6:	4a34      	ldr	r2, [pc, #208]	; (12288 <ll_init+0x120>)
   121b8:	9203      	str	r2, [sp, #12]
   121ba:	4a34      	ldr	r2, [pc, #208]	; (1228c <ll_init+0x124>)
   121bc:	9202      	str	r2, [sp, #8]
   121be:	220d      	movs	r2, #13
   121c0:	9201      	str	r2, [sp, #4]
   121c2:	9300      	str	r3, [sp, #0]
   121c4:	4a32      	ldr	r2, [pc, #200]	; (12290 <ll_init+0x128>)
   121c6:	2304      	movs	r3, #4
   121c8:	f7f6 fa2c 	bl	8624 <ticker_init>
	LL_ASSERT(!err);
   121cc:	b170      	cbz	r0, 121ec <ll_init+0x84>
   121ce:	4b31      	ldr	r3, [pc, #196]	; (12294 <ll_init+0x12c>)
   121d0:	9301      	str	r3, [sp, #4]
   121d2:	9300      	str	r3, [sp, #0]
   121d4:	4a30      	ldr	r2, [pc, #192]	; (12298 <ll_init+0x130>)
   121d6:	4b31      	ldr	r3, [pc, #196]	; (1229c <ll_init+0x134>)
   121d8:	4931      	ldr	r1, [pc, #196]	; (122a0 <ll_init+0x138>)
   121da:	4832      	ldr	r0, [pc, #200]	; (122a4 <ll_init+0x13c>)
   121dc:	f7ee fed6 	bl	f8c <printk>
   121e0:	4040      	eors	r0, r0
   121e2:	f380 8811 	msr	BASEPRI, r0
   121e6:	f04f 0004 	mov.w	r0, #4
   121ea:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   121ec:	482e      	ldr	r0, [pc, #184]	; (122a8 <ll_init+0x140>)
   121ee:	f002 f9e1 	bl	145b4 <device_get_binding>
	if (!clk_m16) {
   121f2:	2800      	cmp	r0, #0
   121f4:	d0c0      	beq.n	12178 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   121f6:	4b2d      	ldr	r3, [pc, #180]	; (122ac <ll_init+0x144>)
   121f8:	9304      	str	r3, [sp, #16]
   121fa:	9501      	str	r5, [sp, #4]
   121fc:	231b      	movs	r3, #27
   121fe:	2501      	movs	r5, #1
   12200:	f44f 7657 	mov.w	r6, #860	; 0x35c
   12204:	9303      	str	r3, [sp, #12]
   12206:	9302      	str	r3, [sp, #8]
   12208:	4622      	mov	r2, r4
   1220a:	9605      	str	r6, [sp, #20]
   1220c:	9500      	str	r5, [sp, #0]
   1220e:	462b      	mov	r3, r5
   12210:	2107      	movs	r1, #7
   12212:	f7fe ff49 	bl	110a8 <radio_init>
	if (err) {
   12216:	4604      	mov	r4, r0
   12218:	b160      	cbz	r0, 12234 <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   1221a:	4b1e      	ldr	r3, [pc, #120]	; (12294 <ll_init+0x12c>)
   1221c:	9303      	str	r3, [sp, #12]
   1221e:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   12222:	4a1d      	ldr	r2, [pc, #116]	; (12298 <ll_init+0x130>)
   12224:	4b1d      	ldr	r3, [pc, #116]	; (1229c <ll_init+0x134>)
   12226:	491e      	ldr	r1, [pc, #120]	; (122a0 <ll_init+0x138>)
   12228:	4821      	ldr	r0, [pc, #132]	; (122b0 <ll_init+0x148>)
   1222a:	f7ee feaf 	bl	f8c <printk>
		return -ENOMEM;
   1222e:	f06f 000b 	mvn.w	r0, #11
   12232:	e7a3      	b.n	1217c <ll_init+0x14>
	ll_filter_reset(true);
   12234:	4628      	mov	r0, r5
   12236:	f000 ff11 	bl	1305c <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1223a:	4622      	mov	r2, r4
   1223c:	4621      	mov	r1, r4
   1223e:	4628      	mov	r0, r5
   12240:	f7ef fb3c 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   12244:	4622      	mov	r2, r4
   12246:	4621      	mov	r1, r4
   12248:	200b      	movs	r0, #11
   1224a:	f7ef fb37 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   1224e:	4622      	mov	r2, r4
   12250:	4621      	mov	r1, r4
   12252:	2018      	movs	r0, #24
   12254:	f7ef fb32 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   12258:	4628      	mov	r0, r5
   1225a:	f7ef fafd 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1225e:	200b      	movs	r0, #11
   12260:	f7ef fafa 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   12264:	2018      	movs	r0, #24
   12266:	f7ef faf7 	bl	1858 <_arch_irq_enable>
	return 0;
   1226a:	4620      	mov	r0, r4
   1226c:	e786      	b.n	1217c <ll_init+0x14>
   1226e:	bf00      	nop
   12270:	2000120c 	.word	0x2000120c
   12274:	00015bc4 	.word	0x00015bc4
   12278:	00015b98 	.word	0x00015b98
   1227c:	200011ec 	.word	0x200011ec
   12280:	00013cc1 	.word	0x00013cc1
   12284:	00013c1d 	.word	0x00013c1d
   12288:	00013bc1 	.word	0x00013bc1
   1228c:	20000f7c 	.word	0x20000f7c
   12290:	20000e3c 	.word	0x20000e3c
   12294:	00015af1 	.word	0x00015af1
   12298:	00016fae 	.word	0x00016fae
   1229c:	00019d15 	.word	0x00019d15
   122a0:	00016060 	.word	0x00016060
   122a4:	00019d1d 	.word	0x00019d1d
   122a8:	00015bcf 	.word	0x00015bcf
   122ac:	20000ae0 	.word	0x20000ae0
   122b0:	00019d43 	.word	0x00019d43

000122b4 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   122b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   122b8:	4681      	mov	r9, r0
   122ba:	4688      	mov	r8, r1
   122bc:	4617      	mov	r7, r2
   122be:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   122c0:	f7fe ffd6 	bl	11270 <ll_scan_is_enabled>
   122c4:	b988      	cbnz	r0, 122ea <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   122c6:	4d0a      	ldr	r5, [pc, #40]	; (122f0 <ll_scan_params_set+0x3c>)
   122c8:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   122ca:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   122ce:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   122d2:	4622      	mov	r2, r4
   122d4:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   122d8:	4613      	mov	r3, r2
   122da:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   122de:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   122e0:	f362 1387 	bfi	r3, r2, #6, #2
   122e4:	712b      	strb	r3, [r5, #4]

	return 0;
   122e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   122ea:	200c      	movs	r0, #12
}
   122ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   122f0:	20001210 	.word	0x20001210

000122f4 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   122f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   122f6:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   122f8:	b920      	cbnz	r0, 12304 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   122fa:	b005      	add	sp, #20
   122fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   12300:	f7ff be1c 	b.w	11f3c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   12304:	f7fe ffb4 	bl	11270 <ll_scan_is_enabled>
   12308:	4606      	mov	r6, r0
   1230a:	bb40      	cbnz	r0, 1235e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   1230c:	4c15      	ldr	r4, [pc, #84]	; (12364 <ll_scan_enable+0x70>)
   1230e:	7920      	ldrb	r0, [r4, #4]
   12310:	0980      	lsrs	r0, r0, #6
   12312:	f000 fa63 	bl	127dc <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   12316:	7923      	ldrb	r3, [r4, #4]
   12318:	f013 0501 	ands.w	r5, r3, #1
   1231c:	d006      	beq.n	1232c <ll_scan_enable+0x38>
   1231e:	f013 0520 	ands.w	r5, r3, #32
   12322:	d003      	beq.n	1232c <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   12324:	4630      	mov	r0, r6
   12326:	f000 fbdd 	bl	12ae4 <ll_rl_rpa_update>
		rpa_gen = 1;
   1232a:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1232c:	7926      	ldrb	r6, [r4, #4]
   1232e:	f006 070f 	and.w	r7, r6, #15
   12332:	f3c6 1600 	ubfx	r6, r6, #4, #1
   12336:	2100      	movs	r1, #0
   12338:	4630      	mov	r0, r6
   1233a:	f7f6 fb31 	bl	89a0 <ll_addr_get>
   1233e:	22ff      	movs	r2, #255	; 0xff
   12340:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   12342:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   12344:	8823      	ldrh	r3, [r4, #0]
   12346:	9502      	str	r5, [sp, #8]
   12348:	0992      	lsrs	r2, r2, #6
   1234a:	9201      	str	r2, [sp, #4]
   1234c:	8862      	ldrh	r2, [r4, #2]
   1234e:	9200      	str	r2, [sp, #0]
   12350:	4631      	mov	r1, r6
   12352:	4602      	mov	r2, r0
   12354:	4638      	mov	r0, r7
   12356:	f7ff fd13 	bl	11d80 <radio_scan_enable>
}
   1235a:	b005      	add	sp, #20
   1235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   1235e:	2000      	movs	r0, #0
   12360:	e7fb      	b.n	1235a <ll_scan_enable+0x66>
   12362:	bf00      	nop
   12364:	20001210 	.word	0x20001210

00012368 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   12368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1236c:	b085      	sub	sp, #20
   1236e:	461e      	mov	r6, r3
   12370:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   12374:	9303      	str	r3, [sp, #12]
   12376:	4680      	mov	r8, r0
   12378:	4689      	mov	r9, r1
   1237a:	4615      	mov	r5, r2
   1237c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1237e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   12382:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   12386:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   1238a:	f7fe ff71 	bl	11270 <ll_scan_is_enabled>
   1238e:	9b03      	ldr	r3, [sp, #12]
   12390:	bba0      	cbnz	r0, 123fc <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   12392:	9300      	str	r3, [sp, #0]
   12394:	4652      	mov	r2, sl
   12396:	465b      	mov	r3, fp
   12398:	4639      	mov	r1, r7
   1239a:	4630      	mov	r0, r6
   1239c:	f7fe ff8c 	bl	112b8 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   123a0:	bb68      	cbnz	r0, 123fe <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   123a2:	4628      	mov	r0, r5
   123a4:	f000 fa1a 	bl	127dc <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   123a8:	b1dd      	cbz	r5, 123e2 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   123aa:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   123ac:	1ea3      	subs	r3, r4, #2
   123ae:	2b01      	cmp	r3, #1
   123b0:	d822      	bhi.n	123f8 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   123b2:	2000      	movs	r0, #0
   123b4:	f000 fb96 	bl	12ae4 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   123b8:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   123bc:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   123be:	2100      	movs	r1, #0
   123c0:	4620      	mov	r0, r4
   123c2:	f7f6 faed 	bl	89a0 <ll_addr_get>
   123c6:	4643      	mov	r3, r8
   123c8:	4602      	mov	r2, r0
   123ca:	4621      	mov	r1, r4
   123cc:	2000      	movs	r0, #0
   123ce:	9711      	str	r7, [sp, #68]	; 0x44
   123d0:	9610      	str	r6, [sp, #64]	; 0x40
   123d2:	950f      	str	r5, [sp, #60]	; 0x3c
   123d4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   123d8:	b005      	add	sp, #20
   123da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   123de:	f7ff bccf 	b.w	11d80 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   123e2:	f000 fb77 	bl	12ad4 <ctrl_rl_enabled>
   123e6:	2800      	cmp	r0, #0
   123e8:	d0df      	beq.n	123aa <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   123ea:	4639      	mov	r1, r7
   123ec:	462a      	mov	r2, r5
   123ee:	4630      	mov	r0, r6
   123f0:	f000 fa16 	bl	12820 <ll_rl_find>
   123f4:	4607      	mov	r7, r0
   123f6:	e7d9      	b.n	123ac <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   123f8:	2600      	movs	r6, #0
   123fa:	e7e0      	b.n	123be <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   123fc:	200c      	movs	r0, #12
}
   123fe:	b005      	add	sp, #20
   12400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012404 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   12404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12408:	4688      	mov	r8, r1
	int i;

	if (free) {
   1240a:	4615      	mov	r5, r2
   1240c:	b10a      	cbz	r2, 12412 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1240e:	23ff      	movs	r3, #255	; 0xff
   12410:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   12412:	4e14      	ldr	r6, [pc, #80]	; (12464 <wl_find+0x60>)
{
   12414:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   12416:	f000 0701 	and.w	r7, r0, #1
   1241a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1241e:	07da      	lsls	r2, r3, #31
   12420:	d51d      	bpl.n	1245e <wl_find+0x5a>
   12422:	f3c3 0340 	ubfx	r3, r3, #1, #1
   12426:	42bb      	cmp	r3, r7
   12428:	d113      	bne.n	12452 <wl_find+0x4e>
   1242a:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   1242e:	2206      	movs	r2, #6
   12430:	4641      	mov	r1, r8
   12432:	3002      	adds	r0, #2
   12434:	f7ef fbcd 	bl	1bd2 <memcmp>
   12438:	b910      	cbnz	r0, 12440 <wl_find+0x3c>
			return i;
   1243a:	b2e0      	uxtb	r0, r4
   1243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   12440:	b13d      	cbz	r5, 12452 <wl_find+0x4e>
   12442:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   12446:	07db      	lsls	r3, r3, #31
   12448:	d403      	bmi.n	12452 <wl_find+0x4e>
   1244a:	782b      	ldrb	r3, [r5, #0]
   1244c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1244e:	bf08      	it	eq
   12450:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   12452:	3401      	adds	r4, #1
   12454:	2c08      	cmp	r4, #8
   12456:	d1e0      	bne.n	1241a <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   12458:	20ff      	movs	r0, #255	; 0xff
   1245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1245e:	2d00      	cmp	r5, #0
   12460:	d1f3      	bne.n	1244a <wl_find+0x46>
   12462:	e7f6      	b.n	12452 <wl_find+0x4e>
   12464:	20001443 	.word	0x20001443

00012468 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   12468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1246c:	4d1a      	ldr	r5, [pc, #104]	; (124d8 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1246e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 124e4 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   12472:	1eae      	subs	r6, r5, #2
{
   12474:	2400      	movs	r4, #0
   12476:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   12478:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1247c:	07d9      	lsls	r1, r3, #31
   1247e:	d524      	bpl.n	124ca <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   12480:	f898 3000 	ldrb.w	r3, [r8]
   12484:	b15b      	cbz	r3, 1249e <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   12486:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1248a:	2a07      	cmp	r2, #7
   1248c:	d807      	bhi.n	1249e <filter_wl_update+0x36>
   1248e:	2328      	movs	r3, #40	; 0x28
   12490:	4353      	muls	r3, r2
   12492:	4a12      	ldr	r2, [pc, #72]	; (124dc <filter_wl_update+0x74>)
   12494:	5cd3      	ldrb	r3, [r2, r3]
   12496:	075a      	lsls	r2, r3, #29
   12498:	d501      	bpl.n	1249e <filter_wl_update+0x36>
   1249a:	06db      	lsls	r3, r3, #27
   1249c:	d515      	bpl.n	124ca <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   1249e:	4810      	ldr	r0, [pc, #64]	; (124e0 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   124a0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   124a4:	2201      	movs	r2, #1
   124a6:	fa02 f104 	lsl.w	r1, r2, r4
   124aa:	7802      	ldrb	r2, [r0, #0]
   124ac:	430a      	orrs	r2, r1
   124ae:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   124b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   124b4:	7842      	ldrb	r2, [r0, #1]
   124b6:	40a3      	lsls	r3, r4
   124b8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   124ba:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   124bc:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   124be:	fb02 0004 	mla	r0, r2, r4, r0
   124c2:	4629      	mov	r1, r5
   124c4:	3002      	adds	r0, #2
   124c6:	f7ef fb99 	bl	1bfc <memcpy>
   124ca:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   124cc:	2c08      	cmp	r4, #8
   124ce:	f105 0508 	add.w	r5, r5, #8
   124d2:	d1d1      	bne.n	12478 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   124d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   124d8:	20001445 	.word	0x20001445
   124dc:	200012d0 	.word	0x200012d0
   124e0:	20001483 	.word	0x20001483
   124e4:	20001410 	.word	0x20001410

000124e8 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   124e8:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   124ea:	f7fe fead 	bl	11248 <ll_adv_is_enabled>
   124ee:	b928      	cbnz	r0, 124fc <rl_access_check.constprop.1+0x14>
   124f0:	f7fe febe 	bl	11270 <ll_scan_is_enabled>
   124f4:	fab0 f080 	clz	r0, r0
   124f8:	0940      	lsrs	r0, r0, #5
   124fa:	bd08      	pop	{r3, pc}
   124fc:	2000      	movs	r0, #0
}
   124fe:	bd08      	pop	{r3, pc}

00012500 <filter_rl_update>:
{
   12500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   12502:	4e10      	ldr	r6, [pc, #64]	; (12544 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   12504:	4d10      	ldr	r5, [pc, #64]	; (12548 <filter_rl_update+0x48>)
{
   12506:	2400      	movs	r4, #0
		if (rl[i].taken) {
   12508:	2728      	movs	r7, #40	; 0x28
   1250a:	fb07 f104 	mul.w	r1, r7, r4
   1250e:	5c73      	ldrb	r3, [r6, r1]
   12510:	07da      	lsls	r2, r3, #31
   12512:	d513      	bpl.n	1253c <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   12514:	2201      	movs	r2, #1
   12516:	fa02 f004 	lsl.w	r0, r2, r4
   1251a:	782a      	ldrb	r2, [r5, #0]
   1251c:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1251e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   12522:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12524:	786a      	ldrb	r2, [r5, #1]
   12526:	40a3      	lsls	r3, r4
   12528:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1252a:	2206      	movs	r2, #6
   1252c:	3101      	adds	r1, #1
   1252e:	fb02 5004 	mla	r0, r2, r4, r5
   12532:	4431      	add	r1, r6
   12534:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12536:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12538:	f7ef fb60 	bl	1bfc <memcpy>
   1253c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1253e:	2c08      	cmp	r4, #8
   12540:	d1e3      	bne.n	1250a <filter_rl_update+0xa>
}
   12542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12544:	200012d0 	.word	0x200012d0
   12548:	20001411 	.word	0x20001411

0001254c <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1254c:	2807      	cmp	r0, #7
   1254e:	d80c      	bhi.n	1256a <ctrl_lrpa_get+0x1e>
   12550:	2328      	movs	r3, #40	; 0x28
   12552:	4358      	muls	r0, r3
   12554:	4a06      	ldr	r2, [pc, #24]	; (12570 <ctrl_lrpa_get+0x24>)
   12556:	5c13      	ldrb	r3, [r2, r0]
   12558:	1811      	adds	r1, r2, r0
   1255a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1255e:	b128      	cbz	r0, 1256c <ctrl_lrpa_get+0x20>
   12560:	f3c3 0040 	ubfx	r0, r3, #1, #1
   12564:	b110      	cbz	r0, 1256c <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   12566:	6a48      	ldr	r0, [r1, #36]	; 0x24
   12568:	4770      	bx	lr
		return NULL;
   1256a:	2000      	movs	r0, #0
}
   1256c:	4770      	bx	lr
   1256e:	bf00      	nop
   12570:	200012d0 	.word	0x200012d0

00012574 <ctrl_irks_get>:
	*count = peer_irk_count;
   12574:	4b02      	ldr	r3, [pc, #8]	; (12580 <ctrl_irks_get+0xc>)
   12576:	781b      	ldrb	r3, [r3, #0]
   12578:	7003      	strb	r3, [r0, #0]
}
   1257a:	4802      	ldr	r0, [pc, #8]	; (12584 <ctrl_irks_get+0x10>)
   1257c:	4770      	bx	lr
   1257e:	bf00      	nop
   12580:	20001246 	.word	0x20001246
   12584:	2000124f 	.word	0x2000124f

00012588 <ctrl_rl_idx>:
{
   12588:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   1258a:	b320      	cbz	r0, 125d6 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1258c:	2907      	cmp	r1, #7
   1258e:	d90e      	bls.n	125ae <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   12590:	4b1d      	ldr	r3, [pc, #116]	; (12608 <ctrl_rl_idx+0x80>)
   12592:	9301      	str	r3, [sp, #4]
   12594:	9300      	str	r3, [sp, #0]
   12596:	4a1d      	ldr	r2, [pc, #116]	; (1260c <ctrl_rl_idx+0x84>)
   12598:	4b1d      	ldr	r3, [pc, #116]	; (12610 <ctrl_rl_idx+0x88>)
   1259a:	491e      	ldr	r1, [pc, #120]	; (12614 <ctrl_rl_idx+0x8c>)
   1259c:	481e      	ldr	r0, [pc, #120]	; (12618 <ctrl_rl_idx+0x90>)
   1259e:	f7ee fcf5 	bl	f8c <printk>
   125a2:	4040      	eors	r0, r0
   125a4:	f380 8811 	msr	BASEPRI, r0
   125a8:	f04f 0004 	mov.w	r0, #4
   125ac:	df02      	svc	2
   125ae:	4b1b      	ldr	r3, [pc, #108]	; (1261c <ctrl_rl_idx+0x94>)
   125b0:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   125b4:	07d2      	lsls	r2, r2, #31
   125b6:	d407      	bmi.n	125c8 <ctrl_rl_idx+0x40>
   125b8:	4b13      	ldr	r3, [pc, #76]	; (12608 <ctrl_rl_idx+0x80>)
   125ba:	9301      	str	r3, [sp, #4]
   125bc:	9300      	str	r3, [sp, #0]
   125be:	4a13      	ldr	r2, [pc, #76]	; (1260c <ctrl_rl_idx+0x84>)
   125c0:	4b13      	ldr	r3, [pc, #76]	; (12610 <ctrl_rl_idx+0x88>)
   125c2:	4914      	ldr	r1, [pc, #80]	; (12614 <ctrl_rl_idx+0x8c>)
   125c4:	4816      	ldr	r0, [pc, #88]	; (12620 <ctrl_rl_idx+0x98>)
   125c6:	e7ea      	b.n	1259e <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   125c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   125cc:	7849      	ldrb	r1, [r1, #1]
}
   125ce:	4608      	mov	r0, r1
   125d0:	b003      	add	sp, #12
   125d2:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   125d6:	2907      	cmp	r1, #7
   125d8:	d907      	bls.n	125ea <ctrl_rl_idx+0x62>
   125da:	4b0b      	ldr	r3, [pc, #44]	; (12608 <ctrl_rl_idx+0x80>)
   125dc:	9301      	str	r3, [sp, #4]
   125de:	9300      	str	r3, [sp, #0]
   125e0:	4a0a      	ldr	r2, [pc, #40]	; (1260c <ctrl_rl_idx+0x84>)
   125e2:	4b0b      	ldr	r3, [pc, #44]	; (12610 <ctrl_rl_idx+0x88>)
   125e4:	490b      	ldr	r1, [pc, #44]	; (12614 <ctrl_rl_idx+0x8c>)
   125e6:	480f      	ldr	r0, [pc, #60]	; (12624 <ctrl_rl_idx+0x9c>)
   125e8:	e7d9      	b.n	1259e <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   125ea:	2328      	movs	r3, #40	; 0x28
   125ec:	434b      	muls	r3, r1
   125ee:	4a0e      	ldr	r2, [pc, #56]	; (12628 <ctrl_rl_idx+0xa0>)
   125f0:	5cd3      	ldrb	r3, [r2, r3]
   125f2:	07db      	lsls	r3, r3, #31
   125f4:	d4eb      	bmi.n	125ce <ctrl_rl_idx+0x46>
   125f6:	4b04      	ldr	r3, [pc, #16]	; (12608 <ctrl_rl_idx+0x80>)
   125f8:	9301      	str	r3, [sp, #4]
   125fa:	9300      	str	r3, [sp, #0]
   125fc:	4a03      	ldr	r2, [pc, #12]	; (1260c <ctrl_rl_idx+0x84>)
   125fe:	4b04      	ldr	r3, [pc, #16]	; (12610 <ctrl_rl_idx+0x88>)
   12600:	4904      	ldr	r1, [pc, #16]	; (12614 <ctrl_rl_idx+0x8c>)
   12602:	480a      	ldr	r0, [pc, #40]	; (1262c <ctrl_rl_idx+0xa4>)
   12604:	e7cb      	b.n	1259e <ctrl_rl_idx+0x16>
   12606:	bf00      	nop
   12608:	00015af1 	.word	0x00015af1
   1260c:	00016fae 	.word	0x00016fae
   12610:	00019d78 	.word	0x00019d78
   12614:	00016060 	.word	0x00016060
   12618:	00019e24 	.word	0x00019e24
   1261c:	20001443 	.word	0x20001443
   12620:	00019ef1 	.word	0x00019ef1
   12624:	00019f28 	.word	0x00019f28
   12628:	200012d0 	.word	0x200012d0
   1262c:	00019ff5 	.word	0x00019ff5

00012630 <ctrl_rl_irk_idx>:
{
   12630:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   12632:	4b18      	ldr	r3, [pc, #96]	; (12694 <ctrl_rl_irk_idx+0x64>)
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	4283      	cmp	r3, r0
   12638:	d80e      	bhi.n	12658 <ctrl_rl_irk_idx+0x28>
   1263a:	4b17      	ldr	r3, [pc, #92]	; (12698 <ctrl_rl_irk_idx+0x68>)
   1263c:	9301      	str	r3, [sp, #4]
   1263e:	9300      	str	r3, [sp, #0]
   12640:	4a16      	ldr	r2, [pc, #88]	; (1269c <ctrl_rl_irk_idx+0x6c>)
   12642:	4b17      	ldr	r3, [pc, #92]	; (126a0 <ctrl_rl_irk_idx+0x70>)
   12644:	4917      	ldr	r1, [pc, #92]	; (126a4 <ctrl_rl_irk_idx+0x74>)
   12646:	4818      	ldr	r0, [pc, #96]	; (126a8 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   12648:	f7ee fca0 	bl	f8c <printk>
   1264c:	4040      	eors	r0, r0
   1264e:	f380 8811 	msr	BASEPRI, r0
   12652:	f04f 0004 	mov.w	r0, #4
   12656:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   12658:	4b14      	ldr	r3, [pc, #80]	; (126ac <ctrl_rl_irk_idx+0x7c>)
   1265a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1265c:	2807      	cmp	r0, #7
   1265e:	d907      	bls.n	12670 <ctrl_rl_irk_idx+0x40>
   12660:	4b0d      	ldr	r3, [pc, #52]	; (12698 <ctrl_rl_irk_idx+0x68>)
   12662:	9301      	str	r3, [sp, #4]
   12664:	9300      	str	r3, [sp, #0]
   12666:	4a0d      	ldr	r2, [pc, #52]	; (1269c <ctrl_rl_irk_idx+0x6c>)
   12668:	4b0d      	ldr	r3, [pc, #52]	; (126a0 <ctrl_rl_irk_idx+0x70>)
   1266a:	490e      	ldr	r1, [pc, #56]	; (126a4 <ctrl_rl_irk_idx+0x74>)
   1266c:	4810      	ldr	r0, [pc, #64]	; (126b0 <ctrl_rl_irk_idx+0x80>)
   1266e:	e7eb      	b.n	12648 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   12670:	2328      	movs	r3, #40	; 0x28
   12672:	4343      	muls	r3, r0
   12674:	4a0f      	ldr	r2, [pc, #60]	; (126b4 <ctrl_rl_irk_idx+0x84>)
   12676:	5cd3      	ldrb	r3, [r2, r3]
   12678:	07db      	lsls	r3, r3, #31
   1267a:	d407      	bmi.n	1268c <ctrl_rl_irk_idx+0x5c>
   1267c:	4b06      	ldr	r3, [pc, #24]	; (12698 <ctrl_rl_irk_idx+0x68>)
   1267e:	9301      	str	r3, [sp, #4]
   12680:	9300      	str	r3, [sp, #0]
   12682:	4a06      	ldr	r2, [pc, #24]	; (1269c <ctrl_rl_irk_idx+0x6c>)
   12684:	4b06      	ldr	r3, [pc, #24]	; (126a0 <ctrl_rl_irk_idx+0x70>)
   12686:	4907      	ldr	r1, [pc, #28]	; (126a4 <ctrl_rl_irk_idx+0x74>)
   12688:	480b      	ldr	r0, [pc, #44]	; (126b8 <ctrl_rl_irk_idx+0x88>)
   1268a:	e7dd      	b.n	12648 <ctrl_rl_irk_idx+0x18>
}
   1268c:	b003      	add	sp, #12
   1268e:	f85d fb04 	ldr.w	pc, [sp], #4
   12692:	bf00      	nop
   12694:	20001246 	.word	0x20001246
   12698:	00015af1 	.word	0x00015af1
   1269c:	00016fae 	.word	0x00016fae
   126a0:	00019d84 	.word	0x00019d84
   126a4:	00016060 	.word	0x00016060
   126a8:	0001a022 	.word	0x0001a022
   126ac:	20001247 	.word	0x20001247
   126b0:	0001a060 	.word	0x0001a060
   126b4:	200012d0 	.word	0x200012d0
   126b8:	00019ff5 	.word	0x00019ff5

000126bc <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   126bc:	2807      	cmp	r0, #7
{
   126be:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   126c0:	d819      	bhi.n	126f6 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   126c2:	2328      	movs	r3, #40	; 0x28
   126c4:	4358      	muls	r0, r3
   126c6:	4b0d      	ldr	r3, [pc, #52]	; (126fc <ctrl_irk_whitelisted+0x40>)
   126c8:	5c18      	ldrb	r0, [r3, r0]
   126ca:	07c3      	lsls	r3, r0, #31
   126cc:	d40e      	bmi.n	126ec <ctrl_irk_whitelisted+0x30>
   126ce:	4b0c      	ldr	r3, [pc, #48]	; (12700 <ctrl_irk_whitelisted+0x44>)
   126d0:	9301      	str	r3, [sp, #4]
   126d2:	9300      	str	r3, [sp, #0]
   126d4:	4a0b      	ldr	r2, [pc, #44]	; (12704 <ctrl_irk_whitelisted+0x48>)
   126d6:	4b0c      	ldr	r3, [pc, #48]	; (12708 <ctrl_irk_whitelisted+0x4c>)
   126d8:	490c      	ldr	r1, [pc, #48]	; (1270c <ctrl_irk_whitelisted+0x50>)
   126da:	480d      	ldr	r0, [pc, #52]	; (12710 <ctrl_irk_whitelisted+0x54>)
   126dc:	f7ee fc56 	bl	f8c <printk>
   126e0:	4040      	eors	r0, r0
   126e2:	f380 8811 	msr	BASEPRI, r0
   126e6:	f04f 0004 	mov.w	r0, #4
   126ea:	df02      	svc	2
	return rl[rl_idx].wl;
   126ec:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   126f0:	b003      	add	sp, #12
   126f2:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   126f6:	2000      	movs	r0, #0
   126f8:	e7fa      	b.n	126f0 <ctrl_irk_whitelisted+0x34>
   126fa:	bf00      	nop
   126fc:	200012d0 	.word	0x200012d0
   12700:	00015af1 	.word	0x00015af1
   12704:	00016fae 	.word	0x00016fae
   12708:	00019d94 	.word	0x00019d94
   1270c:	00016060 	.word	0x00016060
   12710:	00019df2 	.word	0x00019df2

00012714 <ctrl_filter_get>:
}
   12714:	4b03      	ldr	r3, [pc, #12]	; (12724 <ctrl_filter_get+0x10>)
   12716:	4a04      	ldr	r2, [pc, #16]	; (12728 <ctrl_filter_get+0x14>)
   12718:	2800      	cmp	r0, #0
   1271a:	bf14      	ite	ne
   1271c:	4610      	movne	r0, r2
   1271e:	4618      	moveq	r0, r3
   12720:	4770      	bx	lr
   12722:	bf00      	nop
   12724:	20001411 	.word	0x20001411
   12728:	20001483 	.word	0x20001483

0001272c <ll_wl_size_get>:
   1272c:	2008      	movs	r0, #8
   1272e:	4770      	bx	lr

00012730 <ll_wl_clear>:
{
   12730:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12732:	f7fe fd91 	bl	11258 <radio_adv_filter_pol_get>
   12736:	4604      	mov	r4, r0
   12738:	b110      	cbz	r0, 12740 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1273a:	240c      	movs	r4, #12
}
   1273c:	4620      	mov	r0, r4
   1273e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12740:	f7fe fdac 	bl	1129c <radio_scan_filter_pol_get>
   12744:	07c3      	lsls	r3, r0, #31
   12746:	d4f8      	bmi.n	1273a <ll_wl_clear+0xa>
		wl[i].taken = 0;
   12748:	4a07      	ldr	r2, [pc, #28]	; (12768 <ll_wl_clear+0x38>)
   1274a:	4623      	mov	r3, r4
   1274c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12750:	f36f 0100 	bfc	r1, #0, #1
   12754:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12758:	3301      	adds	r3, #1
   1275a:	2b08      	cmp	r3, #8
   1275c:	d1f6      	bne.n	1274c <ll_wl_clear+0x1c>
	wl_anon = 0;
   1275e:	4b03      	ldr	r3, [pc, #12]	; (1276c <ll_wl_clear+0x3c>)
   12760:	2200      	movs	r2, #0
   12762:	701a      	strb	r2, [r3, #0]
	return 0;
   12764:	e7ea      	b.n	1273c <ll_wl_clear+0xc>
   12766:	bf00      	nop
   12768:	20001443 	.word	0x20001443
   1276c:	20001948 	.word	0x20001948

00012770 <ll_wl_remove>:
{
   12770:	b538      	push	{r3, r4, r5, lr}
   12772:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12774:	f7fe fd70 	bl	11258 <radio_adv_filter_pol_get>
   12778:	4604      	mov	r4, r0
   1277a:	b110      	cbz	r0, 12782 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1277c:	240c      	movs	r4, #12
}
   1277e:	4620      	mov	r0, r4
   12780:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12782:	f7fe fd8b 	bl	1129c <radio_scan_filter_pol_get>
   12786:	07c3      	lsls	r3, r0, #31
   12788:	d4f8      	bmi.n	1277c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1278a:	7828      	ldrb	r0, [r5, #0]
   1278c:	28ff      	cmp	r0, #255	; 0xff
   1278e:	d102      	bne.n	12796 <ll_wl_remove+0x26>
		wl_anon = 0;
   12790:	4b0f      	ldr	r3, [pc, #60]	; (127d0 <ll_wl_remove+0x60>)
   12792:	701c      	strb	r4, [r3, #0]
		return 0;
   12794:	e7f3      	b.n	1277e <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   12796:	4622      	mov	r2, r4
   12798:	1c69      	adds	r1, r5, #1
   1279a:	f7ff fe33 	bl	12404 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1279e:	2807      	cmp	r0, #7
   127a0:	d813      	bhi.n	127ca <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   127a2:	4b0c      	ldr	r3, [pc, #48]	; (127d4 <ll_wl_remove+0x64>)
   127a4:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   127a8:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   127aa:	2d07      	cmp	r5, #7
   127ac:	d806      	bhi.n	127bc <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   127ae:	2228      	movs	r2, #40	; 0x28
   127b0:	4909      	ldr	r1, [pc, #36]	; (127d8 <ll_wl_remove+0x68>)
   127b2:	436a      	muls	r2, r5
   127b4:	5c8d      	ldrb	r5, [r1, r2]
   127b6:	f364 1545 	bfi	r5, r4, #5, #1
   127ba:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   127bc:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   127c0:	f36f 0200 	bfc	r2, #0, #1
   127c4:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   127c8:	e7d9      	b.n	1277e <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   127ca:	2402      	movs	r4, #2
   127cc:	e7d7      	b.n	1277e <ll_wl_remove+0xe>
   127ce:	bf00      	nop
   127d0:	20001948 	.word	0x20001948
   127d4:	20001443 	.word	0x20001443
   127d8:	200012d0 	.word	0x200012d0

000127dc <ll_filters_scan_update>:
{
   127dc:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   127de:	4b0d      	ldr	r3, [pc, #52]	; (12814 <ll_filters_scan_update+0x38>)
   127e0:	2200      	movs	r2, #0
   127e2:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   127e4:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   127e6:	07c3      	lsls	r3, r0, #31
   127e8:	d504      	bpl.n	127f4 <ll_filters_scan_update+0x18>
   127ea:	f7fe fd35 	bl	11258 <radio_adv_filter_pol_get>
   127ee:	b908      	cbnz	r0, 127f4 <ll_filters_scan_update+0x18>
		filter_wl_update();
   127f0:	f7ff fe3a 	bl	12468 <filter_wl_update>
	filter->enable_bitmask = 0;
   127f4:	4b08      	ldr	r3, [pc, #32]	; (12818 <ll_filters_scan_update+0x3c>)
   127f6:	2200      	movs	r2, #0
   127f8:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   127fa:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   127fc:	4b07      	ldr	r3, [pc, #28]	; (1281c <ll_filters_scan_update+0x40>)
   127fe:	781b      	ldrb	r3, [r3, #0]
   12800:	b133      	cbz	r3, 12810 <ll_filters_scan_update+0x34>
   12802:	f7fe fd21 	bl	11248 <ll_adv_is_enabled>
   12806:	b918      	cbnz	r0, 12810 <ll_filters_scan_update+0x34>
}
   12808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1280c:	f7ff be78 	b.w	12500 <filter_rl_update>
   12810:	bd08      	pop	{r3, pc}
   12812:	bf00      	nop
   12814:	20001483 	.word	0x20001483
   12818:	20001411 	.word	0x20001411
   1281c:	20001410 	.word	0x20001410

00012820 <ll_rl_find>:
{
   12820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12824:	468a      	mov	sl, r1
	if (free) {
   12826:	4614      	mov	r4, r2
   12828:	b10a      	cbz	r2, 1282e <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1282a:	23ff      	movs	r3, #255	; 0xff
   1282c:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1282e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12884 <ll_rl_find+0x64>
{
   12832:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12834:	f000 0901 	and.w	r9, r0, #1
   12838:	2628      	movs	r6, #40	; 0x28
   1283a:	436e      	muls	r6, r5
   1283c:	b2ef      	uxtb	r7, r5
   1283e:	f818 3006 	ldrb.w	r3, [r8, r6]
   12842:	07da      	lsls	r2, r3, #31
   12844:	d51a      	bpl.n	1287c <ll_rl_find+0x5c>
   12846:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1284a:	454b      	cmp	r3, r9
   1284c:	d10f      	bne.n	1286e <ll_rl_find+0x4e>
   1284e:	1c70      	adds	r0, r6, #1
   12850:	2206      	movs	r2, #6
   12852:	4651      	mov	r1, sl
   12854:	4440      	add	r0, r8
   12856:	f7ef f9bc 	bl	1bd2 <memcmp>
   1285a:	b160      	cbz	r0, 12876 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1285c:	b13c      	cbz	r4, 1286e <ll_rl_find+0x4e>
   1285e:	f818 3006 	ldrb.w	r3, [r8, r6]
   12862:	07db      	lsls	r3, r3, #31
   12864:	d403      	bmi.n	1286e <ll_rl_find+0x4e>
   12866:	7823      	ldrb	r3, [r4, #0]
   12868:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1286a:	bf08      	it	eq
   1286c:	7027      	strbeq	r7, [r4, #0]
   1286e:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12870:	2d08      	cmp	r5, #8
   12872:	d1e1      	bne.n	12838 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   12874:	27ff      	movs	r7, #255	; 0xff
}
   12876:	4638      	mov	r0, r7
   12878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1287c:	2c00      	cmp	r4, #0
   1287e:	d1f2      	bne.n	12866 <ll_rl_find+0x46>
   12880:	e7f5      	b.n	1286e <ll_rl_find+0x4e>
   12882:	bf00      	nop
   12884:	200012d0 	.word	0x200012d0

00012888 <ll_wl_add>:
{
   12888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1288c:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1288e:	f7fe fce3 	bl	11258 <radio_adv_filter_pol_get>
   12892:	4605      	mov	r5, r0
   12894:	b120      	cbz	r0, 128a0 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12896:	250c      	movs	r5, #12
}
   12898:	4628      	mov	r0, r5
   1289a:	b002      	add	sp, #8
   1289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   128a0:	f7fe fcfc 	bl	1129c <radio_scan_filter_pol_get>
   128a4:	07c3      	lsls	r3, r0, #31
   128a6:	d4f6      	bmi.n	12896 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   128a8:	7838      	ldrb	r0, [r7, #0]
   128aa:	28ff      	cmp	r0, #255	; 0xff
   128ac:	d103      	bne.n	128b6 <ll_wl_add+0x2e>
		wl_anon = 1;
   128ae:	4b1f      	ldr	r3, [pc, #124]	; (1292c <ll_wl_add+0xa4>)
   128b0:	2201      	movs	r2, #1
   128b2:	701a      	strb	r2, [r3, #0]
		return 0;
   128b4:	e7f0      	b.n	12898 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   128b6:	f107 0801 	add.w	r8, r7, #1
   128ba:	f10d 0207 	add.w	r2, sp, #7
   128be:	4641      	mov	r1, r8
   128c0:	f7ff fda0 	bl	12404 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   128c4:	2807      	cmp	r0, #7
   128c6:	d92d      	bls.n	12924 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   128c8:	f89d 6007 	ldrb.w	r6, [sp, #7]
   128cc:	2e07      	cmp	r6, #7
   128ce:	d82b      	bhi.n	12928 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   128d0:	4c17      	ldr	r4, [pc, #92]	; (12930 <ll_wl_add+0xa8>)
   128d2:	783a      	ldrb	r2, [r7, #0]
   128d4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   128d8:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   128dc:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   128e0:	4641      	mov	r1, r8
   128e2:	2206      	movs	r2, #6
   128e4:	3002      	adds	r0, #2
   128e6:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   128ea:	f7ef f987 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   128ee:	462a      	mov	r2, r5
   128f0:	4641      	mov	r1, r8
   128f2:	7838      	ldrb	r0, [r7, #0]
   128f4:	f7ff ff94 	bl	12820 <ll_rl_find>
   128f8:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   128fa:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   128fc:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   128fe:	d80e      	bhi.n	1291e <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   12900:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   12902:	2328      	movs	r3, #40	; 0x28
   12904:	4a0b      	ldr	r2, [pc, #44]	; (12934 <ll_wl_add+0xac>)
   12906:	4358      	muls	r0, r3
   12908:	5c13      	ldrb	r3, [r2, r0]
   1290a:	f043 0320 	orr.w	r3, r3, #32
   1290e:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   12910:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   12914:	f043 0301 	orr.w	r3, r3, #1
   12918:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1291c:	e7bc      	b.n	12898 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1291e:	22ff      	movs	r2, #255	; 0xff
   12920:	705a      	strb	r2, [r3, #1]
   12922:	e7f5      	b.n	12910 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   12924:	2512      	movs	r5, #18
   12926:	e7b7      	b.n	12898 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12928:	2507      	movs	r5, #7
	return wl_add(addr);
   1292a:	e7b5      	b.n	12898 <ll_wl_add+0x10>
   1292c:	20001948 	.word	0x20001948
   12930:	20001443 	.word	0x20001443
   12934:	200012d0 	.word	0x200012d0

00012938 <ctrl_rl_idx_allowed>:
{
   12938:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1293a:	4b12      	ldr	r3, [pc, #72]	; (12984 <ctrl_rl_idx_allowed+0x4c>)
   1293c:	781b      	ldrb	r3, [r3, #0]
   1293e:	b1f3      	cbz	r3, 1297e <ctrl_rl_idx_allowed+0x46>
   12940:	2907      	cmp	r1, #7
   12942:	d81c      	bhi.n	1297e <ctrl_rl_idx_allowed+0x46>
   12944:	b9d8      	cbnz	r0, 1297e <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   12946:	2328      	movs	r3, #40	; 0x28
   12948:	4359      	muls	r1, r3
   1294a:	4b0f      	ldr	r3, [pc, #60]	; (12988 <ctrl_rl_idx_allowed+0x50>)
   1294c:	5c58      	ldrb	r0, [r3, r1]
   1294e:	07c2      	lsls	r2, r0, #31
   12950:	d40e      	bmi.n	12970 <ctrl_rl_idx_allowed+0x38>
   12952:	4b0e      	ldr	r3, [pc, #56]	; (1298c <ctrl_rl_idx_allowed+0x54>)
   12954:	9301      	str	r3, [sp, #4]
   12956:	9300      	str	r3, [sp, #0]
   12958:	4a0d      	ldr	r2, [pc, #52]	; (12990 <ctrl_rl_idx_allowed+0x58>)
   1295a:	4b0e      	ldr	r3, [pc, #56]	; (12994 <ctrl_rl_idx_allowed+0x5c>)
   1295c:	490e      	ldr	r1, [pc, #56]	; (12998 <ctrl_rl_idx_allowed+0x60>)
   1295e:	480f      	ldr	r0, [pc, #60]	; (1299c <ctrl_rl_idx_allowed+0x64>)
   12960:	f7ee fb14 	bl	f8c <printk>
   12964:	4040      	eors	r0, r0
   12966:	f380 8811 	msr	BASEPRI, r0
   1296a:	f04f 0004 	mov.w	r0, #4
   1296e:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   12970:	0743      	lsls	r3, r0, #29
   12972:	d504      	bpl.n	1297e <ctrl_rl_idx_allowed+0x46>
   12974:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   12978:	b003      	add	sp, #12
   1297a:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   1297e:	2001      	movs	r0, #1
   12980:	e7fa      	b.n	12978 <ctrl_rl_idx_allowed+0x40>
   12982:	bf00      	nop
   12984:	20001410 	.word	0x20001410
   12988:	200012d0 	.word	0x200012d0
   1298c:	00015af1 	.word	0x00015af1
   12990:	00016fae 	.word	0x00016fae
   12994:	00019da9 	.word	0x00019da9
   12998:	00016060 	.word	0x00016060
   1299c:	00019df2 	.word	0x00019df2

000129a0 <ll_rl_id_addr_get>:
{
   129a0:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   129a2:	2b07      	cmp	r3, #7
{
   129a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   129a6:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   129a8:	d90e      	bls.n	129c8 <ll_rl_id_addr_get+0x28>
   129aa:	4b15      	ldr	r3, [pc, #84]	; (12a00 <ll_rl_id_addr_get+0x60>)
   129ac:	9301      	str	r3, [sp, #4]
   129ae:	9300      	str	r3, [sp, #0]
   129b0:	4a14      	ldr	r2, [pc, #80]	; (12a04 <ll_rl_id_addr_get+0x64>)
   129b2:	4b15      	ldr	r3, [pc, #84]	; (12a08 <ll_rl_id_addr_get+0x68>)
   129b4:	4915      	ldr	r1, [pc, #84]	; (12a0c <ll_rl_id_addr_get+0x6c>)
   129b6:	4816      	ldr	r0, [pc, #88]	; (12a10 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   129b8:	f7ee fae8 	bl	f8c <printk>
   129bc:	4040      	eors	r0, r0
   129be:	f380 8811 	msr	BASEPRI, r0
   129c2:	f04f 0004 	mov.w	r0, #4
   129c6:	df02      	svc	2
   129c8:	2528      	movs	r5, #40	; 0x28
   129ca:	4c12      	ldr	r4, [pc, #72]	; (12a14 <ll_rl_id_addr_get+0x74>)
   129cc:	fb05 f203 	mul.w	r2, r5, r3
   129d0:	5ca2      	ldrb	r2, [r4, r2]
   129d2:	f012 0f01 	tst.w	r2, #1
   129d6:	d107      	bne.n	129e8 <ll_rl_id_addr_get+0x48>
   129d8:	4b09      	ldr	r3, [pc, #36]	; (12a00 <ll_rl_id_addr_get+0x60>)
   129da:	9301      	str	r3, [sp, #4]
   129dc:	9300      	str	r3, [sp, #0]
   129de:	4a09      	ldr	r2, [pc, #36]	; (12a04 <ll_rl_id_addr_get+0x64>)
   129e0:	4b09      	ldr	r3, [pc, #36]	; (12a08 <ll_rl_id_addr_get+0x68>)
   129e2:	490a      	ldr	r1, [pc, #40]	; (12a0c <ll_rl_id_addr_get+0x6c>)
   129e4:	480c      	ldr	r0, [pc, #48]	; (12a18 <ll_rl_id_addr_get+0x78>)
   129e6:	e7e7      	b.n	129b8 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   129e8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   129ec:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   129ee:	fb05 4103 	mla	r1, r5, r3, r4
   129f2:	2206      	movs	r2, #6
   129f4:	3101      	adds	r1, #1
}
   129f6:	b003      	add	sp, #12
   129f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   129fc:	f7ef b8fe 	b.w	1bfc <memcpy>
   12a00:	00015af1 	.word	0x00015af1
   12a04:	00016fae 	.word	0x00016fae
   12a08:	00019dbd 	.word	0x00019dbd
   12a0c:	00016060 	.word	0x00016060
   12a10:	0001a087 	.word	0x0001a087
   12a14:	200012d0 	.word	0x200012d0
   12a18:	00019df2 	.word	0x00019df2

00012a1c <ctrl_rl_addr_allowed>:
{
   12a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   12a20:	4b1a      	ldr	r3, [pc, #104]	; (12a8c <ctrl_rl_addr_allowed+0x70>)
   12a22:	781b      	ldrb	r3, [r3, #0]
   12a24:	b37b      	cbz	r3, 12a86 <ctrl_rl_addr_allowed+0x6a>
   12a26:	7813      	ldrb	r3, [r2, #0]
   12a28:	2bff      	cmp	r3, #255	; 0xff
   12a2a:	d12c      	bne.n	12a86 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   12a2c:	4e18      	ldr	r6, [pc, #96]	; (12a90 <ctrl_rl_addr_allowed+0x74>)
   12a2e:	2400      	movs	r4, #0
   12a30:	f04f 0828 	mov.w	r8, #40	; 0x28
   12a34:	46b6      	mov	lr, r6
   12a36:	fb08 f304 	mul.w	r3, r8, r4
   12a3a:	fa5f fc84 	uxtb.w	ip, r4
   12a3e:	5cf7      	ldrb	r7, [r6, r3]
   12a40:	f017 0f01 	tst.w	r7, #1
   12a44:	eb06 0503 	add.w	r5, r6, r3
   12a48:	d01a      	beq.n	12a80 <ctrl_rl_addr_allowed+0x64>
   12a4a:	f3c7 1780 	ubfx	r7, r7, #6, #1
   12a4e:	4287      	cmp	r7, r0
   12a50:	d116      	bne.n	12a80 <ctrl_rl_addr_allowed+0x64>
   12a52:	3306      	adds	r3, #6
   12a54:	1e4f      	subs	r7, r1, #1
   12a56:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   12a58:	f815 af01 	ldrb.w	sl, [r5, #1]!
   12a5c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   12a60:	45ca      	cmp	sl, r9
   12a62:	d10d      	bne.n	12a80 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   12a64:	429d      	cmp	r5, r3
   12a66:	d1f7      	bne.n	12a58 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   12a68:	2328      	movs	r3, #40	; 0x28
   12a6a:	435c      	muls	r4, r3
				*rl_idx = i;
   12a6c:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   12a70:	f81e 0004 	ldrb.w	r0, [lr, r4]
   12a74:	0743      	lsls	r3, r0, #29
   12a76:	d506      	bpl.n	12a86 <ctrl_rl_addr_allowed+0x6a>
   12a78:	f3c0 1000 	ubfx	r0, r0, #4, #1
   12a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a80:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12a82:	2c08      	cmp	r4, #8
   12a84:	d1d7      	bne.n	12a36 <ctrl_rl_addr_allowed+0x1a>
   12a86:	2001      	movs	r0, #1
}
   12a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a8c:	20001410 	.word	0x20001410
   12a90:	200012d0 	.word	0x200012d0

00012a94 <ctrl_rl_addr_resolve>:
{
   12a94:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   12a96:	4c0d      	ldr	r4, [pc, #52]	; (12acc <ctrl_rl_addr_resolve+0x38>)
   12a98:	7824      	ldrb	r4, [r4, #0]
   12a9a:	b1a4      	cbz	r4, 12ac6 <ctrl_rl_addr_resolve+0x32>
   12a9c:	2a07      	cmp	r2, #7
   12a9e:	d812      	bhi.n	12ac6 <ctrl_rl_addr_resolve+0x32>
   12aa0:	2528      	movs	r5, #40	; 0x28
   12aa2:	4c0b      	ldr	r4, [pc, #44]	; (12ad0 <ctrl_rl_addr_resolve+0x3c>)
   12aa4:	fb05 f602 	mul.w	r6, r5, r2
   12aa8:	5da6      	ldrb	r6, [r4, r6]
   12aaa:	0736      	lsls	r6, r6, #28
   12aac:	d50b      	bpl.n	12ac6 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   12aae:	b150      	cbz	r0, 12ac6 <ctrl_rl_addr_resolve+0x32>
   12ab0:	794b      	ldrb	r3, [r1, #5]
   12ab2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12ab6:	2b40      	cmp	r3, #64	; 0x40
   12ab8:	d105      	bne.n	12ac6 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12aba:	fb05 4202 	mla	r2, r5, r2, r4
   12abe:	1dd0      	adds	r0, r2, #7
}
   12ac0:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12ac2:	f7ef b9d5 	b.w	1e70 <bt_rpa_irk_matches>
}
   12ac6:	2000      	movs	r0, #0
   12ac8:	bc70      	pop	{r4, r5, r6}
   12aca:	4770      	bx	lr
   12acc:	20001410 	.word	0x20001410
   12ad0:	200012d0 	.word	0x200012d0

00012ad4 <ctrl_rl_enabled>:
	return rl_enable;
   12ad4:	4b02      	ldr	r3, [pc, #8]	; (12ae0 <ctrl_rl_enabled+0xc>)
   12ad6:	7818      	ldrb	r0, [r3, #0]
}
   12ad8:	3000      	adds	r0, #0
   12ada:	bf18      	it	ne
   12adc:	2001      	movne	r0, #1
   12ade:	4770      	bx	lr
   12ae0:	20001410 	.word	0x20001410

00012ae4 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   12ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae8:	b08d      	sub	sp, #52	; 0x34
   12aea:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   12aec:	f002 faa6 	bl	1503c <_impl_k_uptime_get>
   12af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   12af4:	2c00      	cmp	r4, #0
   12af6:	d158      	bne.n	12baa <ll_rl_rpa_update+0xc6>
   12af8:	4b45      	ldr	r3, [pc, #276]	; (12c10 <ll_rl_rpa_update+0x12c>)
   12afa:	e9d3 2300 	ldrd	r2, r3, [r3]
   12afe:	1c5c      	adds	r4, r3, #1
   12b00:	bf08      	it	eq
   12b02:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   12b06:	d050      	beq.n	12baa <ll_rl_rpa_update+0xc6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   12b08:	1a80      	subs	r0, r0, r2
   12b0a:	eb61 0103 	sbc.w	r1, r1, r3
   12b0e:	460b      	mov	r3, r1
   12b10:	4940      	ldr	r1, [pc, #256]	; (12c14 <ll_rl_rpa_update+0x130>)
   12b12:	4602      	mov	r2, r0
   12b14:	6808      	ldr	r0, [r1, #0]
   12b16:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   12b18:	4282      	cmp	r2, r0
   12b1a:	418b      	sbcs	r3, r1
   12b1c:	bfac      	ite	ge
   12b1e:	2701      	movge	r7, #1
   12b20:	2700      	movlt	r7, #0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   12b22:	f002 fa1f 	bl	14f64 <_impl_k_current_get>
	BT_DBG("");
   12b26:	4e3c      	ldr	r6, [pc, #240]	; (12c18 <ll_rl_rpa_update+0x134>)
   12b28:	9001      	str	r0, [sp, #4]
   12b2a:	9602      	str	r6, [sp, #8]
   12b2c:	9600      	str	r6, [sp, #0]
   12b2e:	4b3b      	ldr	r3, [pc, #236]	; (12c1c <ll_rl_rpa_update+0x138>)
   12b30:	4a3b      	ldr	r2, [pc, #236]	; (12c20 <ll_rl_rpa_update+0x13c>)
   12b32:	493c      	ldr	r1, [pc, #240]	; (12c24 <ll_rl_rpa_update+0x140>)
   12b34:	483c      	ldr	r0, [pc, #240]	; (12c28 <ll_rl_rpa_update+0x144>)
   12b36:	4d3d      	ldr	r5, [pc, #244]	; (12c2c <ll_rl_rpa_update+0x148>)
   12b38:	f8df b100 	ldr.w	fp, [pc, #256]	; 12c3c <ll_rl_rpa_update+0x158>
   12b3c:	f7ee fa26 	bl	f8c <printk>

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12b40:	f1a5 0a07 	sub.w	sl, r5, #7
	BT_DBG("");
   12b44:	2400      	movs	r4, #0
   12b46:	46d0      	mov	r8, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12b48:	2328      	movs	r3, #40	; 0x28
   12b4a:	4363      	muls	r3, r4
   12b4c:	f81a 3003 	ldrb.w	r3, [sl, r3]
   12b50:	07d8      	lsls	r0, r3, #31
   12b52:	d54f      	bpl.n	12bf4 <ll_rl_rpa_update+0x110>
   12b54:	b90f      	cbnz	r7, 12b5a <ll_rl_rpa_update+0x76>
   12b56:	0799      	lsls	r1, r3, #30
   12b58:	d44c      	bmi.n	12bf4 <ll_rl_rpa_update+0x110>

			if (rl[i].pirk) {
   12b5a:	2328      	movs	r3, #40	; 0x28
   12b5c:	4363      	muls	r3, r4
   12b5e:	f818 3003 	ldrb.w	r3, [r8, r3]
   12b62:	075a      	lsls	r2, r3, #29
   12b64:	d523      	bpl.n	12bae <ll_rl_rpa_update+0xca>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   12b66:	7c2a      	ldrb	r2, [r5, #16]
   12b68:	4b31      	ldr	r3, [pc, #196]	; (12c30 <ll_rl_rpa_update+0x14c>)
   12b6a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   12b6e:	f103 0210 	add.w	r2, r3, #16
   12b72:	f10d 011f 	add.w	r1, sp, #31
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   12b76:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   12b7a:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   12b7e:	429a      	cmp	r2, r3
   12b80:	d1f9      	bne.n	12b76 <ll_rl_rpa_update+0x92>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   12b82:	f105 0117 	add.w	r1, r5, #23
   12b86:	a808      	add	r0, sp, #32
   12b88:	f7ef f9a8 	bl	1edc <bt_rpa_create>
				LL_ASSERT(!err);
   12b8c:	b178      	cbz	r0, 12bae <ll_rl_rpa_update+0xca>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   12b8e:	9601      	str	r6, [sp, #4]
   12b90:	9600      	str	r6, [sp, #0]
   12b92:	4b22      	ldr	r3, [pc, #136]	; (12c1c <ll_rl_rpa_update+0x138>)
   12b94:	4a27      	ldr	r2, [pc, #156]	; (12c34 <ll_rl_rpa_update+0x150>)
   12b96:	4923      	ldr	r1, [pc, #140]	; (12c24 <ll_rl_rpa_update+0x140>)
   12b98:	4827      	ldr	r0, [pc, #156]	; (12c38 <ll_rl_rpa_update+0x154>)
   12b9a:	f7ee f9f7 	bl	f8c <printk>
   12b9e:	4040      	eors	r0, r0
   12ba0:	f380 8811 	msr	BASEPRI, r0
   12ba4:	f04f 0004 	mov.w	r0, #4
   12ba8:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   12baa:	2701      	movs	r7, #1
   12bac:	e7b9      	b.n	12b22 <ll_rl_rpa_update+0x3e>
			if (rl[i].lirk) {
   12bae:	2328      	movs	r3, #40	; 0x28
   12bb0:	4363      	muls	r3, r4
   12bb2:	f818 3003 	ldrb.w	r3, [r8, r3]
   12bb6:	071b      	lsls	r3, r3, #28
   12bb8:	d514      	bpl.n	12be4 <ll_rl_rpa_update+0x100>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   12bba:	f10d 0920 	add.w	r9, sp, #32
   12bbe:	4649      	mov	r1, r9
   12bc0:	4628      	mov	r0, r5
   12bc2:	f7ef f98b 	bl	1edc <bt_rpa_create>
				LL_ASSERT(!err);
   12bc6:	2800      	cmp	r0, #0
   12bc8:	d1e1      	bne.n	12b8e <ll_rl_rpa_update+0xaa>
   12bca:	2206      	movs	r2, #6
   12bcc:	fb02 b304 	mla	r3, r2, r4, fp
   12bd0:	4618      	mov	r0, r3
   12bd2:	4649      	mov	r1, r9
   12bd4:	9307      	str	r3, [sp, #28]
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   12bd6:	f8c5 901d 	str.w	r9, [r5, #29]
   12bda:	f7ef f80f 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   12bde:	9b07      	ldr	r3, [sp, #28]
   12be0:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   12be4:	2328      	movs	r3, #40	; 0x28
   12be6:	4363      	muls	r3, r4
   12be8:	f818 2003 	ldrb.w	r2, [r8, r3]
   12bec:	f042 0202 	orr.w	r2, r2, #2
   12bf0:	f808 2003 	strb.w	r2, [r8, r3]
   12bf4:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12bf6:	2c08      	cmp	r4, #8
   12bf8:	f105 0528 	add.w	r5, r5, #40	; 0x28
   12bfc:	d1a4      	bne.n	12b48 <ll_rl_rpa_update+0x64>
		}
	}

	if (all) {
   12bfe:	b127      	cbz	r7, 12c0a <ll_rl_rpa_update+0x126>
		rpa_last_ms = now;
   12c00:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   12c04:	4b02      	ldr	r3, [pc, #8]	; (12c10 <ll_rl_rpa_update+0x12c>)
   12c06:	e9c3 1200 	strd	r1, r2, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   12c0a:	b00d      	add	sp, #52	; 0x34
   12c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c10:	20001940 	.word	0x20001940
   12c14:	20001974 	.word	0x20001974
   12c18:	00015af1 	.word	0x00015af1
   12c1c:	00019dcf 	.word	0x00019dcf
   12c20:	00016059 	.word	0x00016059
   12c24:	00016060 	.word	0x00016060
   12c28:	00017656 	.word	0x00017656
   12c2c:	200012d7 	.word	0x200012d7
   12c30:	2000124f 	.word	0x2000124f
   12c34:	00016fae 	.word	0x00016fae
   12c38:	00019d1d 	.word	0x00019d1d
   12c3c:	20001216 	.word	0x20001216

00012c40 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   12c40:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   12c42:	2001      	movs	r0, #1
   12c44:	f7ff ff4e 	bl	12ae4 <ll_rl_rpa_update>
   12c48:	4b03      	ldr	r3, [pc, #12]	; (12c58 <rpa_timeout+0x18>)
   12c4a:	4904      	ldr	r1, [pc, #16]	; (12c5c <rpa_timeout+0x1c>)
   12c4c:	681a      	ldr	r2, [r3, #0]
   12c4e:	4804      	ldr	r0, [pc, #16]	; (12c60 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   12c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12c54:	f002 bcf0 	b.w	15638 <k_delayed_work_submit_to_queue>
   12c58:	20001974 	.word	0x20001974
   12c5c:	2000194c 	.word	0x2000194c
   12c60:	200019b8 	.word	0x200019b8

00012c64 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   12c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12c66:	4b11      	ldr	r3, [pc, #68]	; (12cac <ll_adv_scan_state_cb+0x48>)
	if (!rl_enable) {
   12c68:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   12c6a:	b1a8      	cbz	r0, 12c98 <ll_adv_scan_state_cb+0x34>
	if (!rl_enable) {
   12c6c:	b1db      	cbz	r3, 12ca6 <ll_adv_scan_state_cb+0x42>
   12c6e:	f002 f979 	bl	14f64 <_impl_k_current_get>
	BT_DBG("");
   12c72:	4b0f      	ldr	r3, [pc, #60]	; (12cb0 <ll_adv_scan_state_cb+0x4c>)
   12c74:	9302      	str	r3, [sp, #8]
   12c76:	9001      	str	r0, [sp, #4]
   12c78:	9300      	str	r3, [sp, #0]
   12c7a:	4a0e      	ldr	r2, [pc, #56]	; (12cb4 <ll_adv_scan_state_cb+0x50>)
   12c7c:	4b0e      	ldr	r3, [pc, #56]	; (12cb8 <ll_adv_scan_state_cb+0x54>)
   12c7e:	490f      	ldr	r1, [pc, #60]	; (12cbc <ll_adv_scan_state_cb+0x58>)
   12c80:	480f      	ldr	r0, [pc, #60]	; (12cc0 <ll_adv_scan_state_cb+0x5c>)
   12c82:	f7ee f983 	bl	f8c <printk>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   12c86:	4b0f      	ldr	r3, [pc, #60]	; (12cc4 <ll_adv_scan_state_cb+0x60>)
   12c88:	490f      	ldr	r1, [pc, #60]	; (12cc8 <ll_adv_scan_state_cb+0x64>)
   12c8a:	681a      	ldr	r2, [r3, #0]
   12c8c:	480f      	ldr	r0, [pc, #60]	; (12ccc <ll_adv_scan_state_cb+0x68>)
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
   12c8e:	b005      	add	sp, #20
   12c90:	f85d eb04 	ldr.w	lr, [sp], #4
   12c94:	f002 bcd0 	b.w	15638 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   12c98:	b12b      	cbz	r3, 12ca6 <ll_adv_scan_state_cb+0x42>
	k_delayed_work_cancel(&rpa_work);
   12c9a:	480b      	ldr	r0, [pc, #44]	; (12cc8 <ll_adv_scan_state_cb+0x64>)
}
   12c9c:	b005      	add	sp, #20
   12c9e:	f85d eb04 	ldr.w	lr, [sp], #4
	k_delayed_work_cancel(&rpa_work);
   12ca2:	f002 bc65 	b.w	15570 <k_delayed_work_cancel>
}
   12ca6:	b005      	add	sp, #20
   12ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   12cac:	20001410 	.word	0x20001410
   12cb0:	00015af1 	.word	0x00015af1
   12cb4:	00016059 	.word	0x00016059
   12cb8:	00019de0 	.word	0x00019de0
   12cbc:	00016060 	.word	0x00016060
   12cc0:	00017656 	.word	0x00017656
   12cc4:	20001974 	.word	0x20001974
   12cc8:	2000194c 	.word	0x2000194c
   12ccc:	200019b8 	.word	0x200019b8

00012cd0 <ll_rl_size_get>:

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   12cd0:	2008      	movs	r0, #8
   12cd2:	4770      	bx	lr

00012cd4 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   12cd4:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   12cd6:	f7ff fc07 	bl	124e8 <rl_access_check.constprop.1>
   12cda:	b178      	cbz	r0, 12cfc <ll_rl_clear+0x28>
		rl[i].taken = 0;
   12cdc:	4908      	ldr	r1, [pc, #32]	; (12d00 <ll_rl_clear+0x2c>)
   12cde:	2300      	movs	r3, #0
   12ce0:	2428      	movs	r4, #40	; 0x28
   12ce2:	fb04 f203 	mul.w	r2, r4, r3
   12ce6:	3301      	adds	r3, #1
   12ce8:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12cea:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12cec:	f36f 0000 	bfc	r0, #0, #1
   12cf0:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12cf2:	d1f6      	bne.n	12ce2 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   12cf4:	4b03      	ldr	r3, [pc, #12]	; (12d04 <ll_rl_clear+0x30>)
   12cf6:	2000      	movs	r0, #0
   12cf8:	7018      	strb	r0, [r3, #0]
   12cfa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12cfc:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   12cfe:	bd10      	pop	{r4, pc}
   12d00:	200012d0 	.word	0x200012d0
   12d04:	20001246 	.word	0x20001246

00012d08 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   12d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d0c:	b085      	sub	sp, #20
   12d0e:	4607      	mov	r7, r0
   12d10:	4689      	mov	r9, r1
   12d12:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   12d14:	f7ff fbe8 	bl	124e8 <rl_access_check.constprop.1>
   12d18:	2800      	cmp	r0, #0
   12d1a:	f000 8086 	beq.w	12e2a <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   12d1e:	f107 0801 	add.w	r8, r7, #1
   12d22:	f10d 020f 	add.w	r2, sp, #15
   12d26:	4641      	mov	r1, r8
   12d28:	7838      	ldrb	r0, [r7, #0]
   12d2a:	f7ff fd79 	bl	12820 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   12d2e:	2807      	cmp	r0, #7
   12d30:	d97d      	bls.n	12e2e <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   12d32:	f89d 500f 	ldrb.w	r5, [sp, #15]
   12d36:	2d07      	cmp	r5, #7
   12d38:	d87b      	bhi.n	12e32 <ll_rl_add+0x12a>
   12d3a:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12d3e:	4c3e      	ldr	r4, [pc, #248]	; (12e38 <ll_rl_add+0x130>)
   12d40:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   12d44:	2628      	movs	r6, #40	; 0x28
   12d46:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12d48:	f10b 0001 	add.w	r0, fp, #1
   12d4c:	2206      	movs	r2, #6
   12d4e:	4641      	mov	r1, r8
   12d50:	4420      	add	r0, r4
   12d52:	f7ee ff53 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   12d56:	7839      	ldrb	r1, [r7, #0]
   12d58:	5da3      	ldrb	r3, [r4, r6]
   12d5a:	19a2      	adds	r2, r4, r6
   12d5c:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12d60:	4648      	mov	r0, r9
   12d62:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   12d64:	9201      	str	r2, [sp, #4]
   12d66:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12d68:	f7f4 fe69 	bl	7a3e <mem_nz>
   12d6c:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d6e:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12d70:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d74:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12d76:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d78:	f7f4 fe61 	bl	7a3e <mem_nz>
   12d7c:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   12d7e:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d80:	f000 0001 	and.w	r0, r0, #1
   12d84:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   12d88:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d8c:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   12d8e:	d138      	bne.n	12e02 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   12d90:	b158      	cbz	r0, 12daa <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   12d92:	f10b 0007 	add.w	r0, fp, #7
   12d96:	2210      	movs	r2, #16
   12d98:	4651      	mov	r1, sl
   12d9a:	4420      	add	r0, r4
   12d9c:	f7ee ff2e 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
   12da0:	2328      	movs	r3, #40	; 0x28
   12da2:	fb03 4305 	mla	r3, r3, r5, r4
   12da6:	2200      	movs	r2, #0
   12da8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   12daa:	2628      	movs	r6, #40	; 0x28
   12dac:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   12dae:	f10b 0018 	add.w	r0, fp, #24
   12db2:	2206      	movs	r2, #6
   12db4:	2100      	movs	r1, #0
   12db6:	4420      	add	r0, r4
   12db8:	f7ee ff4c 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
   12dbc:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12dbe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12dc2:	f36f 1304 	bfc	r3, #4, #1
   12dc6:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12dc8:	2200      	movs	r2, #0
   12dca:	4641      	mov	r1, r8
   12dcc:	7838      	ldrb	r0, [r7, #0]
   12dce:	f7ff fb19 	bl	12404 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   12dd2:	2807      	cmp	r0, #7
   12dd4:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   12dd6:	bf9d      	ittte	ls
   12dd8:	4a18      	ldrls	r2, [pc, #96]	; (12e3c <ll_rl_add+0x134>)
		rl[i].wl = 1;
   12dda:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   12dde:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   12de2:	f36f 1345 	bfchi	r3, #5, #1
   12de6:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   12de8:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   12dec:	bf98      	it	ls
   12dee:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   12df0:	435d      	muls	r5, r3

	return 0;
   12df2:	2000      	movs	r0, #0
	rl[i].taken = 1;
   12df4:	5d63      	ldrb	r3, [r4, r5]
   12df6:	f043 0301 	orr.w	r3, r3, #1
   12dfa:	5563      	strb	r3, [r4, r5]
}
   12dfc:	b005      	add	sp, #20
   12dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   12e02:	4b0f      	ldr	r3, [pc, #60]	; (12e40 <ll_rl_add+0x138>)
   12e04:	7819      	ldrb	r1, [r3, #0]
   12e06:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   12e08:	4a0e      	ldr	r2, [pc, #56]	; (12e44 <ll_rl_add+0x13c>)
   12e0a:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   12e0c:	1c4a      	adds	r2, r1, #1
   12e0e:	701a      	strb	r2, [r3, #0]
   12e10:	4b0d      	ldr	r3, [pc, #52]	; (12e48 <ll_rl_add+0x140>)
   12e12:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   12e16:	f109 0210 	add.w	r2, r9, #16
   12e1a:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   12e1c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   12e20:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   12e24:	454a      	cmp	r2, r9
   12e26:	d1f9      	bne.n	12e1c <ll_rl_add+0x114>
   12e28:	e7b2      	b.n	12d90 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12e2a:	200c      	movs	r0, #12
   12e2c:	e7e6      	b.n	12dfc <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   12e2e:	2012      	movs	r0, #18
   12e30:	e7e4      	b.n	12dfc <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12e32:	2007      	movs	r0, #7
   12e34:	e7e2      	b.n	12dfc <ll_rl_add+0xf4>
   12e36:	bf00      	nop
   12e38:	200012d0 	.word	0x200012d0
   12e3c:	20001443 	.word	0x20001443
   12e40:	20001246 	.word	0x20001246
   12e44:	20001247 	.word	0x20001247
   12e48:	2000124f 	.word	0x2000124f

00012e4c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   12e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e50:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   12e52:	f7ff fb49 	bl	124e8 <rl_access_check.constprop.1>
   12e56:	2800      	cmp	r0, #0
   12e58:	d053      	beq.n	12f02 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12e5a:	f109 0a01 	add.w	sl, r9, #1
   12e5e:	2200      	movs	r2, #0
   12e60:	4651      	mov	r1, sl
   12e62:	f899 0000 	ldrb.w	r0, [r9]
   12e66:	f7ff fcdb 	bl	12820 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12e6a:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12e6c:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   12e6e:	d84b      	bhi.n	12f08 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   12e70:	f04f 0b28 	mov.w	fp, #40	; 0x28
   12e74:	4c26      	ldr	r4, [pc, #152]	; (12f10 <ll_rl_remove+0xc4>)
   12e76:	fb0b f300 	mul.w	r3, fp, r0
   12e7a:	18e2      	adds	r2, r4, r3
   12e7c:	5ce3      	ldrb	r3, [r4, r3]
   12e7e:	075b      	lsls	r3, r3, #29
   12e80:	d524      	bpl.n	12ecc <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12e82:	4e24      	ldr	r6, [pc, #144]	; (12f14 <ll_rl_remove+0xc8>)
   12e84:	7835      	ldrb	r5, [r6, #0]
   12e86:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   12e88:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12e8c:	d01b      	beq.n	12ec6 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12e8e:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   12e90:	42af      	cmp	r7, r5
   12e92:	d018      	beq.n	12ec6 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   12e94:	4820      	ldr	r0, [pc, #128]	; (12f18 <ll_rl_remove+0xcc>)
   12e96:	2210      	movs	r2, #16
   12e98:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   12e9c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   12ea0:	f7ee feac 	bl	1bfc <memcpy>
   12ea4:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   12ea6:	fb0b f103 	mul.w	r1, fp, r3
   12eaa:	1862      	adds	r2, r4, r1
   12eac:	5c61      	ldrb	r1, [r4, r1]
   12eae:	f011 0f01 	tst.w	r1, #1
   12eb2:	b2d8      	uxtb	r0, r3
   12eb4:	d021      	beq.n	12efa <ll_rl_remove+0xae>
   12eb6:	0749      	lsls	r1, r1, #29
   12eb8:	d51f      	bpl.n	12efa <ll_rl_remove+0xae>
   12eba:	7dd1      	ldrb	r1, [r2, #23]
   12ebc:	42a9      	cmp	r1, r5
   12ebe:	d11c      	bne.n	12efa <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   12ec0:	4b16      	ldr	r3, [pc, #88]	; (12f1c <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   12ec2:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   12ec4:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   12ec6:	7833      	ldrb	r3, [r6, #0]
   12ec8:	3b01      	subs	r3, #1
   12eca:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12ecc:	2200      	movs	r2, #0
   12ece:	4651      	mov	r1, sl
   12ed0:	f899 0000 	ldrb.w	r0, [r9]
   12ed4:	f7ff fa96 	bl	12404 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   12ed8:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   12eda:	bf9f      	itttt	ls
   12edc:	4b10      	ldrls	r3, [pc, #64]	; (12f20 <ll_rl_remove+0xd4>)
   12ede:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   12ee2:	23ff      	movls	r3, #255	; 0xff
   12ee4:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   12ee6:	2028      	movs	r0, #40	; 0x28
   12ee8:	fb00 f008 	mul.w	r0, r0, r8
   12eec:	5c23      	ldrb	r3, [r4, r0]
   12eee:	f36f 0300 	bfc	r3, #0, #1
   12ef2:	5423      	strb	r3, [r4, r0]
		return 0;
   12ef4:	2000      	movs	r0, #0
   12ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12efa:	3301      	adds	r3, #1
				for (k = 0;
   12efc:	2b08      	cmp	r3, #8
   12efe:	d1d2      	bne.n	12ea6 <ll_rl_remove+0x5a>
   12f00:	e7e1      	b.n	12ec6 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12f02:	200c      	movs	r0, #12
   12f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12f08:	2002      	movs	r0, #2
}
   12f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f0e:	bf00      	nop
   12f10:	200012d0 	.word	0x200012d0
   12f14:	20001246 	.word	0x20001246
   12f18:	2000124f 	.word	0x2000124f
   12f1c:	20001247 	.word	0x20001247
   12f20:	20001443 	.word	0x20001443

00012f24 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   12f24:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   12f26:	795c      	ldrb	r4, [r3, #5]
   12f28:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   12f2c:	2c40      	cmp	r4, #64	; 0x40
{
   12f2e:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   12f30:	d117      	bne.n	12f62 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   12f32:	b119      	cbz	r1, 12f3c <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   12f34:	2200      	movs	r2, #0
   12f36:	f7ff fc73 	bl	12820 <ll_rl_find>
   12f3a:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   12f3c:	2a07      	cmp	r2, #7
   12f3e:	d810      	bhi.n	12f62 <ll_rl_crpa_set+0x3e>
   12f40:	2128      	movs	r1, #40	; 0x28
   12f42:	4c08      	ldr	r4, [pc, #32]	; (12f64 <ll_rl_crpa_set+0x40>)
   12f44:	fb01 f302 	mul.w	r3, r1, r2
   12f48:	5ce3      	ldrb	r3, [r4, r3]
   12f4a:	07db      	lsls	r3, r3, #31
   12f4c:	d509      	bpl.n	12f62 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12f4e:	2018      	movs	r0, #24
   12f50:	fb11 0002 	smlabb	r0, r1, r2, r0
   12f54:	4420      	add	r0, r4
   12f56:	4629      	mov	r1, r5
   12f58:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   12f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12f5e:	f7ee be4d 	b.w	1bfc <memcpy>
   12f62:	bd70      	pop	{r4, r5, r6, pc}
   12f64:	200012d0 	.word	0x200012d0

00012f68 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   12f68:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12f6a:	2200      	movs	r2, #0
{
   12f6c:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12f6e:	1c41      	adds	r1, r0, #1
   12f70:	7800      	ldrb	r0, [r0, #0]
   12f72:	f7ff fc55 	bl	12820 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   12f76:	2807      	cmp	r0, #7
   12f78:	d901      	bls.n	12f7e <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12f7a:	2002      	movs	r0, #2
   12f7c:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   12f7e:	2428      	movs	r4, #40	; 0x28
   12f80:	2318      	movs	r3, #24
   12f82:	fb14 3000 	smlabb	r0, r4, r0, r3
   12f86:	4c07      	ldr	r4, [pc, #28]	; (12fa4 <ll_rl_crpa_get+0x3c>)
   12f88:	4404      	add	r4, r0
   12f8a:	2106      	movs	r1, #6
   12f8c:	4620      	mov	r0, r4
   12f8e:	f7f4 fd56 	bl	7a3e <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   12f92:	2800      	cmp	r0, #0
   12f94:	d0f1      	beq.n	12f7a <ll_rl_crpa_get+0x12>
   12f96:	2206      	movs	r2, #6
   12f98:	4621      	mov	r1, r4
   12f9a:	4628      	mov	r0, r5
   12f9c:	f7ee fe2e 	bl	1bfc <memcpy>
			return 0;
   12fa0:	2000      	movs	r0, #0
}
   12fa2:	bd38      	pop	{r3, r4, r5, pc}
   12fa4:	200012d0 	.word	0x200012d0

00012fa8 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   12fa8:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12faa:	2200      	movs	r2, #0
{
   12fac:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12fae:	1c41      	adds	r1, r0, #1
   12fb0:	7800      	ldrb	r0, [r0, #0]
   12fb2:	f7ff fc35 	bl	12820 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12fb6:	2807      	cmp	r0, #7
   12fb8:	d80a      	bhi.n	12fd0 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   12fba:	4b06      	ldr	r3, [pc, #24]	; (12fd4 <ll_rl_lrpa_get+0x2c>)
   12fbc:	2228      	movs	r2, #40	; 0x28
   12fbe:	fb02 3000 	mla	r0, r2, r0, r3
   12fc2:	2206      	movs	r2, #6
   12fc4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   12fc6:	4620      	mov	r0, r4
   12fc8:	f7ee fe18 	bl	1bfc <memcpy>
		return 0;
   12fcc:	2000      	movs	r0, #0
   12fce:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12fd0:	2002      	movs	r0, #2
}
   12fd2:	bd10      	pop	{r4, pc}
   12fd4:	200012d0 	.word	0x200012d0

00012fd8 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   12fd8:	b510      	push	{r4, lr}
   12fda:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   12fdc:	f7ff fa84 	bl	124e8 <rl_access_check.constprop.1>
   12fe0:	b140      	cbz	r0, 12ff4 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   12fe2:	b11c      	cbz	r4, 12fec <ll_rl_enable+0x14>
   12fe4:	2c01      	cmp	r4, #1
   12fe6:	d001      	beq.n	12fec <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   12fe8:	2012      	movs	r0, #18
	}

	return 0;
}
   12fea:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   12fec:	4b02      	ldr	r3, [pc, #8]	; (12ff8 <ll_rl_enable+0x20>)
   12fee:	701c      	strb	r4, [r3, #0]
	return 0;
   12ff0:	2000      	movs	r0, #0
		break;
   12ff2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12ff4:	200c      	movs	r0, #12
   12ff6:	bd10      	pop	{r4, pc}
   12ff8:	20001410 	.word	0x20001410

00012ffc <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13000:	4358      	muls	r0, r3
   13002:	4b01      	ldr	r3, [pc, #4]	; (13008 <ll_rl_timeout_set+0xc>)
   13004:	6018      	str	r0, [r3, #0]
   13006:	4770      	bx	lr
   13008:	20001974 	.word	0x20001974

0001300c <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1300c:	b538      	push	{r3, r4, r5, lr}
   1300e:	4605      	mov	r5, r0
   13010:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   13012:	f7ff fa69 	bl	124e8 <rl_access_check.constprop.1>
   13016:	b1d8      	cbz	r0, 13050 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   13018:	2200      	movs	r2, #0
   1301a:	1c69      	adds	r1, r5, #1
   1301c:	7828      	ldrb	r0, [r5, #0]
   1301e:	f7ff fbff 	bl	12820 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   13022:	2807      	cmp	r0, #7
   13024:	d816      	bhi.n	13054 <ll_priv_mode_set+0x48>
		switch (mode) {
   13026:	b11c      	cbz	r4, 13030 <ll_priv_mode_set+0x24>
   13028:	2c01      	cmp	r4, #1
   1302a:	d00a      	beq.n	13042 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   1302c:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   1302e:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   13030:	2328      	movs	r3, #40	; 0x28
   13032:	4a09      	ldr	r2, [pc, #36]	; (13058 <ll_priv_mode_set+0x4c>)
   13034:	4358      	muls	r0, r3
   13036:	5c13      	ldrb	r3, [r2, r0]
   13038:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   1303c:	5413      	strb	r3, [r2, r0]
	return 0;
   1303e:	2000      	movs	r0, #0
			break;
   13040:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   13042:	2328      	movs	r3, #40	; 0x28
   13044:	4a04      	ldr	r2, [pc, #16]	; (13058 <ll_priv_mode_set+0x4c>)
   13046:	4358      	muls	r0, r3
   13048:	5c13      	ldrb	r3, [r2, r0]
   1304a:	f043 0310 	orr.w	r3, r3, #16
   1304e:	e7f5      	b.n	1303c <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13050:	200c      	movs	r0, #12
   13052:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13054:	2002      	movs	r0, #2
   13056:	bd38      	pop	{r3, r4, r5, pc}
   13058:	200012d0 	.word	0x200012d0

0001305c <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   1305c:	4a19      	ldr	r2, [pc, #100]	; (130c4 <ll_filter_reset+0x68>)
   1305e:	2300      	movs	r3, #0
{
   13060:	b430      	push	{r4, r5}
	wl_anon = 0;
   13062:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   13064:	4a18      	ldr	r2, [pc, #96]	; (130c8 <ll_filter_reset+0x6c>)
   13066:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1306a:	f36f 0100 	bfc	r1, #0, #1
   1306e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   13072:	3301      	adds	r3, #1
   13074:	2b08      	cmp	r3, #8
   13076:	d1f6      	bne.n	13066 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   13078:	4a14      	ldr	r2, [pc, #80]	; (130cc <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1307a:	4915      	ldr	r1, [pc, #84]	; (130d0 <ll_filter_reset+0x74>)
	rl_enable = 0;
   1307c:	2300      	movs	r3, #0
   1307e:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   13080:	4a14      	ldr	r2, [pc, #80]	; (130d4 <ll_filter_reset+0x78>)
   13082:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   13084:	4a14      	ldr	r2, [pc, #80]	; (130d8 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   13086:	4915      	ldr	r1, [pc, #84]	; (130dc <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   13088:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1308c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13090:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   13094:	2528      	movs	r5, #40	; 0x28
   13096:	fb05 f203 	mul.w	r2, r5, r3
   1309a:	3301      	adds	r3, #1
   1309c:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1309e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   130a0:	f36f 0400 	bfc	r4, #0, #1
   130a4:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   130a6:	d1f6      	bne.n	13096 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   130a8:	4b0d      	ldr	r3, [pc, #52]	; (130e0 <ll_filter_reset+0x84>)
   130aa:	2200      	movs	r2, #0
   130ac:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   130ae:	b120      	cbz	r0, 130ba <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   130b0:	490c      	ldr	r1, [pc, #48]	; (130e4 <ll_filter_reset+0x88>)
   130b2:	480d      	ldr	r0, [pc, #52]	; (130e8 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   130b4:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   130b6:	f002 ba4b 	b.w	15550 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   130ba:	480b      	ldr	r0, [pc, #44]	; (130e8 <ll_filter_reset+0x8c>)
}
   130bc:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   130be:	f002 ba57 	b.w	15570 <k_delayed_work_cancel>
   130c2:	bf00      	nop
   130c4:	20001948 	.word	0x20001948
   130c8:	20001443 	.word	0x20001443
   130cc:	20001410 	.word	0x20001410
   130d0:	000dbba0 	.word	0x000dbba0
   130d4:	20001974 	.word	0x20001974
   130d8:	20001940 	.word	0x20001940
   130dc:	200012d0 	.word	0x200012d0
   130e0:	20001246 	.word	0x20001246
   130e4:	00012c41 	.word	0x00012c41
   130e8:	2000194c 	.word	0x2000194c

000130ec <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   130ec:	4b05      	ldr	r3, [pc, #20]	; (13104 <cntr_init+0x18>)
   130ee:	2200      	movs	r2, #0
   130f0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   130f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   130f8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   130fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   13100:	4770      	bx	lr
   13102:	bf00      	nop
   13104:	4000b000 	.word	0x4000b000

00013108 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   13108:	4a04      	ldr	r2, [pc, #16]	; (1311c <cntr_start+0x14>)
   1310a:	7813      	ldrb	r3, [r2, #0]
   1310c:	1c59      	adds	r1, r3, #1
   1310e:	7011      	strb	r1, [r2, #0]
   13110:	2001      	movs	r0, #1
   13112:	b913      	cbnz	r3, 1311a <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   13114:	4a02      	ldr	r2, [pc, #8]	; (13120 <cntr_start+0x18>)
   13116:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   13118:	4618      	mov	r0, r3
}
   1311a:	4770      	bx	lr
   1311c:	200014b5 	.word	0x200014b5
   13120:	4000b000 	.word	0x4000b000

00013124 <cntr_stop>:

u32_t cntr_stop(void)
{
   13124:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   13126:	4b0f      	ldr	r3, [pc, #60]	; (13164 <cntr_stop+0x40>)
   13128:	7818      	ldrb	r0, [r3, #0]
   1312a:	b970      	cbnz	r0, 1314a <cntr_stop+0x26>
   1312c:	4b0e      	ldr	r3, [pc, #56]	; (13168 <cntr_stop+0x44>)
   1312e:	9301      	str	r3, [sp, #4]
   13130:	9300      	str	r3, [sp, #0]
   13132:	4a0e      	ldr	r2, [pc, #56]	; (1316c <cntr_stop+0x48>)
   13134:	4b0e      	ldr	r3, [pc, #56]	; (13170 <cntr_stop+0x4c>)
   13136:	490f      	ldr	r1, [pc, #60]	; (13174 <cntr_stop+0x50>)
   13138:	480f      	ldr	r0, [pc, #60]	; (13178 <cntr_stop+0x54>)
   1313a:	f7ed ff27 	bl	f8c <printk>
   1313e:	4040      	eors	r0, r0
   13140:	f380 8811 	msr	BASEPRI, r0
   13144:	f04f 0004 	mov.w	r0, #4
   13148:	df02      	svc	2

	if (--_refcount) {
   1314a:	3801      	subs	r0, #1
   1314c:	b2c0      	uxtb	r0, r0
   1314e:	7018      	strb	r0, [r3, #0]
   13150:	2301      	movs	r3, #1
   13152:	b920      	cbnz	r0, 1315e <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   13154:	4a09      	ldr	r2, [pc, #36]	; (1317c <cntr_stop+0x58>)
   13156:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   13158:	b003      	add	sp, #12
   1315a:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   1315e:	4618      	mov	r0, r3
   13160:	e7fa      	b.n	13158 <cntr_stop+0x34>
   13162:	bf00      	nop
   13164:	200014b5 	.word	0x200014b5
   13168:	00015af1 	.word	0x00015af1
   1316c:	00016fae 	.word	0x00016fae
   13170:	0001a0b3 	.word	0x0001a0b3
   13174:	00016060 	.word	0x00016060
   13178:	0001a0bd 	.word	0x0001a0bd
   1317c:	4000b000 	.word	0x4000b000

00013180 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   13180:	4b01      	ldr	r3, [pc, #4]	; (13188 <cntr_cnt_get+0x8>)
   13182:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   13186:	4770      	bx	lr
   13188:	4000b000 	.word	0x4000b000

0001318c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   1318c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13190:	4b01      	ldr	r3, [pc, #4]	; (13198 <cntr_cmp_set+0xc>)
   13192:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   13196:	4770      	bx	lr
   13198:	4000b000 	.word	0x4000b000

0001319c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   1319c:	4b11      	ldr	r3, [pc, #68]	; (131e4 <do_ecb+0x48>)
{
   1319e:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   131a0:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   131a2:	2500      	movs	r5, #0
   131a4:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   131a6:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   131a8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   131ac:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   131b0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   131b4:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   131b6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   131ba:	b934      	cbnz	r4, 131ca <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   131bc:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   131c0:	b91c      	cbnz	r4, 131ca <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   131c2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   131c6:	2c00      	cmp	r4, #0
   131c8:	d1f5      	bne.n	131b6 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   131ca:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   131cc:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   131d0:	2c00      	cmp	r4, #0
   131d2:	d1e8      	bne.n	131a6 <do_ecb+0xa>
   131d4:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   131d8:	2e00      	cmp	r6, #0
   131da:	d0e4      	beq.n	131a6 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   131dc:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   131e0:	bd70      	pop	{r4, r5, r6, pc}
   131e2:	bf00      	nop
   131e4:	4000e000 	.word	0x4000e000

000131e8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   131e8:	b570      	push	{r4, r5, r6, lr}
   131ea:	b08c      	sub	sp, #48	; 0x30
   131ec:	460e      	mov	r6, r1
   131ee:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   131f0:	4601      	mov	r1, r0
   131f2:	2210      	movs	r2, #16
   131f4:	4668      	mov	r0, sp
{
   131f6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   131f8:	f7f4 fc12 	bl	7a20 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   131fc:	2210      	movs	r2, #16
   131fe:	eb0d 0002 	add.w	r0, sp, r2
   13202:	4631      	mov	r1, r6
   13204:	f7f4 fc0c 	bl	7a20 <mem_rcopy>

	do_ecb(&ecb);
   13208:	4668      	mov	r0, sp
   1320a:	f7ff ffc7 	bl	1319c <do_ecb>

	if (cipher_text_le) {
   1320e:	b125      	cbz	r5, 1321a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   13210:	2210      	movs	r2, #16
   13212:	a908      	add	r1, sp, #32
   13214:	4628      	mov	r0, r5
   13216:	f7f4 fc03 	bl	7a20 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1321a:	b124      	cbz	r4, 13226 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1321c:	2210      	movs	r2, #16
   1321e:	a908      	add	r1, sp, #32
   13220:	4620      	mov	r0, r4
   13222:	f7ee fceb 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   13226:	b00c      	add	sp, #48	; 0x30
   13228:	bd70      	pop	{r4, r5, r6, pc}
	...

0001322c <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   1322c:	4b07      	ldr	r3, [pc, #28]	; (1324c <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   1322e:	4a08      	ldr	r2, [pc, #32]	; (13250 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   13230:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   13234:	4907      	ldr	r1, [pc, #28]	; (13254 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   13236:	4a08      	ldr	r2, [pc, #32]	; (13258 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   13238:	2800      	cmp	r0, #0
   1323a:	bf14      	ite	ne
   1323c:	4610      	movne	r0, r2
   1323e:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   13240:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   13242:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   13246:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1324a:	4770      	bx	lr
   1324c:	4001f000 	.word	0x4001f000
   13250:	40008140 	.word	0x40008140
   13254:	40001004 	.word	0x40001004
   13258:	40001000 	.word	0x40001000

0001325c <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1325c:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1325e:	4e2c      	ldr	r6, [pc, #176]	; (13310 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   13260:	4f2c      	ldr	r7, [pc, #176]	; (13314 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   13262:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   13264:	4b2c      	ldr	r3, [pc, #176]	; (13318 <sw_switch.isra.9+0xbc>)
   13266:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   1326a:	b22b      	sxth	r3, r5
   1326c:	00dc      	lsls	r4, r3, #3
   1326e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   13272:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   13276:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1327a:	f105 040b 	add.w	r4, r5, #11
   1327e:	b2e4      	uxtb	r4, r4
   13280:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   13282:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   13286:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1328a:	3fc0      	subs	r7, #192	; 0xc0
   1328c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   13290:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   13294:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   13298:	2800      	cmp	r0, #0
   1329a:	d034      	beq.n	13306 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   1329c:	f24a 075a 	movw	r7, #41050	; 0xa05a
   132a0:	f649 4040 	movw	r0, #40000	; 0x9c40
   132a4:	2a02      	cmp	r2, #2
   132a6:	bf0c      	ite	eq
   132a8:	4602      	moveq	r2, r0
   132aa:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   132ac:	f242 47b8 	movw	r7, #9400	; 0x24b8
   132b0:	f241 504a 	movw	r0, #5450	; 0x154a
   132b4:	2902      	cmp	r1, #2
   132b6:	bf18      	it	ne
   132b8:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   132ba:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   132be:	4401      	add	r1, r0
   132c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   132c4:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   132c8:	4a14      	ldr	r2, [pc, #80]	; (1331c <sw_switch.isra.9+0xc0>)
   132ca:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   132ce:	009b      	lsls	r3, r3, #2
   132d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   132d4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   132d8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   132dc:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   132de:	bf8b      	itete	hi
   132e0:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   132e4:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   132e6:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   132e8:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   132ec:	bf88      	it	hi
   132ee:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   132f2:	4b08      	ldr	r3, [pc, #32]	; (13314 <sw_switch.isra.9+0xb8>)
   132f4:	f44f 6290 	mov.w	r2, #1152	; 0x480
   132f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   132fc:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   132fe:	f003 0301 	and.w	r3, r3, #1
   13302:	7033      	strb	r3, [r6, #0]
   13304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   13306:	4a06      	ldr	r2, [pc, #24]	; (13320 <sw_switch.isra.9+0xc4>)
   13308:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1330c:	212d      	movs	r1, #45	; 0x2d
   1330e:	e7de      	b.n	132ce <sw_switch.isra.9+0x72>
   13310:	200016d8 	.word	0x200016d8
   13314:	4001f000 	.word	0x4001f000
   13318:	4000110c 	.word	0x4000110c
   1331c:	40001000 	.word	0x40001000
   13320:	40001004 	.word	0x40001004

00013324 <isr_radio>:
	if (sfp_radio_isr) {
   13324:	4b02      	ldr	r3, [pc, #8]	; (13330 <isr_radio+0xc>)
   13326:	681b      	ldr	r3, [r3, #0]
   13328:	b103      	cbz	r3, 1332c <isr_radio+0x8>
		sfp_radio_isr();
   1332a:	4718      	bx	r3
   1332c:	4770      	bx	lr
   1332e:	bf00      	nop
   13330:	200016d4 	.word	0x200016d4

00013334 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   13334:	4b06      	ldr	r3, [pc, #24]	; (13350 <radio_isr_set+0x1c>)
   13336:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   13338:	4b06      	ldr	r3, [pc, #24]	; (13354 <radio_isr_set+0x20>)
   1333a:	2210      	movs	r2, #16
   1333c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13340:	4b05      	ldr	r3, [pc, #20]	; (13358 <radio_isr_set+0x24>)
   13342:	2202      	movs	r2, #2
   13344:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   13348:	2001      	movs	r0, #1
   1334a:	f7ee ba85 	b.w	1858 <_arch_irq_enable>
   1334e:	bf00      	nop
   13350:	200016d4 	.word	0x200016d4
   13354:	40001000 	.word	0x40001000
   13358:	e000e100 	.word	0xe000e100

0001335c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1335c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   13364:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   13366:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1336a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1336e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   13372:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   13376:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1337a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1337e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   13382:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   13386:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1338a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1338e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   13392:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   13396:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1339a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   1339e:	4770      	bx	lr

000133a0 <radio_reset>:
{
   133a0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   133a2:	2001      	movs	r0, #1
   133a4:	f7ee fa68 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   133a8:	4b08      	ldr	r3, [pc, #32]	; (133cc <radio_reset+0x2c>)
   133aa:	2200      	movs	r2, #0
   133ac:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   133b0:	2201      	movs	r2, #1
   133b2:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   133b6:	4a06      	ldr	r2, [pc, #24]	; (133d0 <radio_reset+0x30>)
   133b8:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   133ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   133be:	f023 0301 	bic.w	r3, r3, #1
   133c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   133c6:	6013      	str	r3, [r2, #0]
   133c8:	bd08      	pop	{r3, pc}
   133ca:	bf00      	nop
   133cc:	40001000 	.word	0x40001000
   133d0:	40001774 	.word	0x40001774

000133d4 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   133d4:	4b06      	ldr	r3, [pc, #24]	; (133f0 <radio_phy_set+0x1c>)
	switch (phy) {
   133d6:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   133d8:	bf0c      	ite	eq
   133da:	2204      	moveq	r2, #4
   133dc:	2203      	movne	r2, #3
   133de:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   133e2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   133e6:	f042 0201 	orr.w	r2, r2, #1
   133ea:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   133ee:	4770      	bx	lr
   133f0:	40001000 	.word	0x40001000

000133f4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   133f4:	4b01      	ldr	r3, [pc, #4]	; (133fc <radio_tx_power_set+0x8>)
   133f6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   133fa:	4770      	bx	lr
   133fc:	40001000 	.word	0x40001000

00013400 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   13400:	4b01      	ldr	r3, [pc, #4]	; (13408 <radio_freq_chan_set+0x8>)
   13402:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   13406:	4770      	bx	lr
   13408:	40001000 	.word	0x40001000

0001340c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1340c:	4b07      	ldr	r3, [pc, #28]	; (1342c <radio_whiten_iv_set+0x20>)
   1340e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   13412:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   13416:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1341a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1341e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   13422:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   13426:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   1342a:	4770      	bx	lr
   1342c:	40001000 	.word	0x40001000

00013430 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   13430:	4a0a      	ldr	r2, [pc, #40]	; (1345c <radio_aa_set+0x2c>)
   13432:	2300      	movs	r3, #0
   13434:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   13438:	2301      	movs	r3, #1
   1343a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1343e:	78c3      	ldrb	r3, [r0, #3]
   13440:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   13444:	7843      	ldrb	r3, [r0, #1]
   13446:	7881      	ldrb	r1, [r0, #2]
   13448:	041b      	lsls	r3, r3, #16
   1344a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1344e:	7801      	ldrb	r1, [r0, #0]
   13450:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   13454:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   13458:	4770      	bx	lr
   1345a:	bf00      	nop
   1345c:	40001000 	.word	0x40001000

00013460 <radio_pkt_configure>:
	switch (phy) {
   13460:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   13464:	2b02      	cmp	r3, #2
{
   13466:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   13468:	bf0c      	ite	eq
   1346a:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   1346e:	2400      	movne	r4, #0
	if (dc) {
   13470:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   13472:	f1c0 0308 	rsb	r3, r0, #8
   13476:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1347a:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1347e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   13482:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   13486:	4a0b      	ldr	r2, [pc, #44]	; (134b4 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   13488:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1348c:	bf48      	it	mi
   1348e:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   13492:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   13494:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   13498:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1349c:	4b06      	ldr	r3, [pc, #24]	; (134b8 <radio_pkt_configure+0x58>)
   1349e:	4003      	ands	r3, r0
   134a0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   134a4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   134a8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   134ac:	4319      	orrs	r1, r3
   134ae:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   134b2:	bd10      	pop	{r4, pc}
   134b4:	40001000 	.word	0x40001000
   134b8:	fef80000 	.word	0xfef80000

000134bc <radio_pkt_rx_set>:
   134bc:	4b01      	ldr	r3, [pc, #4]	; (134c4 <radio_pkt_rx_set+0x8>)
   134be:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   134c2:	4770      	bx	lr
   134c4:	40001000 	.word	0x40001000

000134c8 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   134c8:	4b01      	ldr	r3, [pc, #4]	; (134d0 <radio_pkt_tx_set+0x8>)
   134ca:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   134ce:	4770      	bx	lr
   134d0:	40001000 	.word	0x40001000

000134d4 <radio_tx_ready_delay_get>:
	switch (phy) {
   134d4:	2802      	cmp	r0, #2
}
   134d6:	bf0c      	ite	eq
   134d8:	2028      	moveq	r0, #40	; 0x28
   134da:	2029      	movne	r0, #41	; 0x29
   134dc:	4770      	bx	lr

000134de <radio_tx_chain_delay_get>:
}
   134de:	2001      	movs	r0, #1
   134e0:	4770      	bx	lr

000134e2 <radio_rx_ready_delay_get>:
}
   134e2:	2029      	movs	r0, #41	; 0x29
   134e4:	4770      	bx	lr

000134e6 <radio_rx_chain_delay_get>:
	switch (phy) {
   134e6:	2802      	cmp	r0, #2
}
   134e8:	bf0c      	ite	eq
   134ea:	2006      	moveq	r0, #6
   134ec:	200a      	movne	r0, #10
   134ee:	4770      	bx	lr

000134f0 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   134f0:	4b01      	ldr	r3, [pc, #4]	; (134f8 <radio_rx_enable+0x8>)
   134f2:	2201      	movs	r2, #1
   134f4:	605a      	str	r2, [r3, #4]
   134f6:	4770      	bx	lr
   134f8:	40001000 	.word	0x40001000

000134fc <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   134fc:	4b01      	ldr	r3, [pc, #4]	; (13504 <radio_tx_enable+0x8>)
   134fe:	2201      	movs	r2, #1
   13500:	601a      	str	r2, [r3, #0]
   13502:	4770      	bx	lr
   13504:	40001000 	.word	0x40001000

00013508 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   13508:	4a07      	ldr	r2, [pc, #28]	; (13528 <radio_disable+0x20>)
   1350a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1350e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   13512:	2301      	movs	r3, #1
   13514:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   13516:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   13518:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1351c:	2100      	movs	r1, #0
   1351e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   13522:	6113      	str	r3, [r2, #16]
   13524:	4770      	bx	lr
   13526:	bf00      	nop
   13528:	4001f000 	.word	0x4001f000

0001352c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1352c:	4b04      	ldr	r3, [pc, #16]	; (13540 <radio_status_reset+0x14>)
   1352e:	2200      	movs	r2, #0
   13530:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   13534:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   13538:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1353c:	4770      	bx	lr
   1353e:	bf00      	nop
   13540:	40001000 	.word	0x40001000

00013544 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   13544:	4b03      	ldr	r3, [pc, #12]	; (13554 <radio_is_ready+0x10>)
   13546:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1354a:	3000      	adds	r0, #0
   1354c:	bf18      	it	ne
   1354e:	2001      	movne	r0, #1
   13550:	4770      	bx	lr
   13552:	bf00      	nop
   13554:	40001000 	.word	0x40001000

00013558 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   13558:	4b03      	ldr	r3, [pc, #12]	; (13568 <radio_is_done+0x10>)
   1355a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1355e:	3000      	adds	r0, #0
   13560:	bf18      	it	ne
   13562:	2001      	movne	r0, #1
   13564:	4770      	bx	lr
   13566:	bf00      	nop
   13568:	40001000 	.word	0x40001000

0001356c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1356c:	4b03      	ldr	r3, [pc, #12]	; (1357c <radio_is_idle+0x10>)
   1356e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   13572:	fab0 f080 	clz	r0, r0
   13576:	0940      	lsrs	r0, r0, #5
   13578:	4770      	bx	lr
   1357a:	bf00      	nop
   1357c:	40001000 	.word	0x40001000

00013580 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   13580:	4b04      	ldr	r3, [pc, #16]	; (13594 <radio_crc_configure+0x14>)
   13582:	f240 1203 	movw	r2, #259	; 0x103
   13586:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1358a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1358e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   13592:	4770      	bx	lr
   13594:	40001000 	.word	0x40001000

00013598 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   13598:	4b03      	ldr	r3, [pc, #12]	; (135a8 <radio_crc_is_valid+0x10>)
   1359a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1359e:	3000      	adds	r0, #0
   135a0:	bf18      	it	ne
   135a2:	2001      	movne	r0, #1
   135a4:	4770      	bx	lr
   135a6:	bf00      	nop
   135a8:	40001000 	.word	0x40001000

000135ac <radio_pkt_empty_get>:
}
   135ac:	4800      	ldr	r0, [pc, #0]	; (135b0 <radio_pkt_empty_get+0x4>)
   135ae:	4770      	bx	lr
   135b0:	200015c8 	.word	0x200015c8

000135b4 <radio_pkt_scratch_get>:
}
   135b4:	4800      	ldr	r0, [pc, #0]	; (135b8 <radio_pkt_scratch_get+0x4>)
   135b6:	4770      	bx	lr
   135b8:	200015cc 	.word	0x200015cc

000135bc <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   135bc:	4b04      	ldr	r3, [pc, #16]	; (135d0 <radio_switch_complete_and_rx+0x14>)
   135be:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   135c0:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   135c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   135c6:	4602      	mov	r2, r0
   135c8:	4608      	mov	r0, r1
   135ca:	f7ff be47 	b.w	1325c <sw_switch.isra.9>
   135ce:	bf00      	nop
   135d0:	40001000 	.word	0x40001000

000135d4 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   135d4:	4b03      	ldr	r3, [pc, #12]	; (135e4 <radio_switch_complete_and_tx+0x10>)
   135d6:	2103      	movs	r1, #3
   135d8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   135dc:	4601      	mov	r1, r0
   135de:	2001      	movs	r0, #1
   135e0:	f7ff be3c 	b.w	1325c <sw_switch.isra.9>
   135e4:	40001000 	.word	0x40001000

000135e8 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   135e8:	4b05      	ldr	r3, [pc, #20]	; (13600 <radio_switch_complete_and_disable+0x18>)
   135ea:	2203      	movs	r2, #3
   135ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   135f0:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   135f4:	f44f 6290 	mov.w	r2, #1152	; 0x480
   135f8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   135fc:	4770      	bx	lr
   135fe:	bf00      	nop
   13600:	40001000 	.word	0x40001000

00013604 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   13604:	4a03      	ldr	r2, [pc, #12]	; (13614 <radio_rssi_measure+0x10>)
   13606:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1360a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1360e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   13612:	4770      	bx	lr
   13614:	40001000 	.word	0x40001000

00013618 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   13618:	4b01      	ldr	r3, [pc, #4]	; (13620 <radio_rssi_get+0x8>)
   1361a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1361e:	4770      	bx	lr
   13620:	40001000 	.word	0x40001000

00013624 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   13624:	4b02      	ldr	r3, [pc, #8]	; (13630 <radio_rssi_status_reset+0xc>)
   13626:	2200      	movs	r2, #0
   13628:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1362c:	4770      	bx	lr
   1362e:	bf00      	nop
   13630:	40001000 	.word	0x40001000

00013634 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   13634:	4b03      	ldr	r3, [pc, #12]	; (13644 <radio_rssi_is_ready+0x10>)
   13636:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1363a:	3000      	adds	r0, #0
   1363c:	bf18      	it	ne
   1363e:	2001      	movne	r0, #1
   13640:	4770      	bx	lr
   13642:	bf00      	nop
   13644:	40001000 	.word	0x40001000

00013648 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   13648:	b530      	push	{r4, r5, lr}
   1364a:	2400      	movs	r4, #0
   1364c:	00a3      	lsls	r3, r4, #2
   1364e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   13656:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   13658:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   1365c:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   1365e:	8895      	ldrh	r5, [r2, #4]
   13660:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   13664:	2c08      	cmp	r4, #8
		bdaddr += 6;
   13666:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   1366a:	d1ef      	bne.n	1364c <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   1366c:	4b02      	ldr	r3, [pc, #8]	; (13678 <radio_filter_configure+0x30>)
   1366e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   13672:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   13676:	bd30      	pop	{r4, r5, pc}
   13678:	40001000 	.word	0x40001000

0001367c <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1367c:	4a03      	ldr	r2, [pc, #12]	; (1368c <radio_filter_disable+0x10>)
   1367e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   13682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13686:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   1368a:	4770      	bx	lr
   1368c:	40001000 	.word	0x40001000

00013690 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   13690:	4b02      	ldr	r3, [pc, #8]	; (1369c <radio_filter_status_reset+0xc>)
   13692:	2200      	movs	r2, #0
   13694:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   13698:	4770      	bx	lr
   1369a:	bf00      	nop
   1369c:	40001000 	.word	0x40001000

000136a0 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   136a0:	4b03      	ldr	r3, [pc, #12]	; (136b0 <radio_filter_has_match+0x10>)
   136a2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   136a6:	3000      	adds	r0, #0
   136a8:	bf18      	it	ne
   136aa:	2001      	movne	r0, #1
   136ac:	4770      	bx	lr
   136ae:	bf00      	nop
   136b0:	40001000 	.word	0x40001000

000136b4 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   136b4:	4b01      	ldr	r3, [pc, #4]	; (136bc <radio_filter_match_get+0x8>)
   136b6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   136ba:	4770      	bx	lr
   136bc:	40001000 	.word	0x40001000

000136c0 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   136c0:	4b04      	ldr	r3, [pc, #16]	; (136d4 <radio_bc_configure+0x14>)
   136c2:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   136c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   136ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   136ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   136d2:	4770      	bx	lr
   136d4:	40001000 	.word	0x40001000

000136d8 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   136d8:	4b05      	ldr	r3, [pc, #20]	; (136f0 <radio_tmr_status_reset+0x18>)
   136da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   136de:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   136e2:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   136e6:	227f      	movs	r2, #127	; 0x7f
   136e8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   136ec:	4770      	bx	lr
   136ee:	bf00      	nop
   136f0:	4000b000 	.word	0x4000b000

000136f4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   136f4:	4b03      	ldr	r3, [pc, #12]	; (13704 <radio_tmr_tifs_set+0x10>)
   136f6:	4a04      	ldr	r2, [pc, #16]	; (13708 <radio_tmr_tifs_set+0x14>)
   136f8:	781b      	ldrb	r3, [r3, #0]
   136fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   136fe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   13702:	4770      	bx	lr
   13704:	200016d8 	.word	0x200016d8
   13708:	40009000 	.word	0x40009000

0001370c <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13710:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   13714:	4c30      	ldr	r4, [pc, #192]	; (137d8 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   13716:	4d31      	ldr	r5, [pc, #196]	; (137dc <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13718:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1371c:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   1371e:	bf88      	it	hi
   13720:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   13724:	4b2e      	ldr	r3, [pc, #184]	; (137e0 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   13726:	4c2f      	ldr	r4, [pc, #188]	; (137e4 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   13728:	bf82      	ittt	hi
   1372a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1372e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   13732:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   13736:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   13738:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   1373c:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1373e:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   13740:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   13744:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   13746:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1374a:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1374e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   13752:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   13756:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   1375a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1375e:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   13762:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   13766:	4920      	ldr	r1, [pc, #128]	; (137e8 <radio_tmr_start+0xdc>)
   13768:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   1376c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   13770:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   13774:	f7ff fd5a 	bl	1322c <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   13778:	4b1c      	ldr	r3, [pc, #112]	; (137ec <radio_tmr_start+0xe0>)
   1377a:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   1377c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   13780:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   13784:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   13788:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   1378a:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1378e:	3b74      	subs	r3, #116	; 0x74
   13790:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   13794:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   13798:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1379c:	f503 739a 	add.w	r3, r3, #308	; 0x134
   137a0:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   137a4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   137a8:	33c4      	adds	r3, #196	; 0xc4
   137aa:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   137ae:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   137b2:	3bc0      	subs	r3, #192	; 0xc0
   137b4:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   137b8:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   137bc:	33c8      	adds	r3, #200	; 0xc8
   137be:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   137c2:	f44f 6310 	mov.w	r3, #2304	; 0x900
   137c6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   137ca:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   137ce:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   137d2:	4628      	mov	r0, r5
   137d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137d8:	7ff0bdbf 	.word	0x7ff0bdbf
   137dc:	000f4240 	.word	0x000f4240
   137e0:	40008000 	.word	0x40008000
   137e4:	4000b000 	.word	0x4000b000
   137e8:	4000b148 	.word	0x4000b148
   137ec:	40009000 	.word	0x40009000

000137f0 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   137f0:	4a04      	ldr	r2, [pc, #16]	; (13804 <radio_tmr_stop+0x14>)
   137f2:	2301      	movs	r3, #1
   137f4:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   137f6:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   137f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   137fc:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   137fe:	6113      	str	r3, [r2, #16]
   13800:	4770      	bx	lr
   13802:	bf00      	nop
   13804:	40008000 	.word	0x40008000

00013808 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   13808:	4b0c      	ldr	r3, [pc, #48]	; (1383c <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1380a:	4a0d      	ldr	r2, [pc, #52]	; (13840 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   1380c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13810:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   13814:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13818:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1381c:	3240      	adds	r2, #64	; 0x40
   1381e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   13822:	f502 7280 	add.w	r2, r2, #256	; 0x100
   13826:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   1382a:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   1382e:	3a34      	subs	r2, #52	; 0x34
   13830:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   13834:	2218      	movs	r2, #24
   13836:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1383a:	4770      	bx	lr
   1383c:	40008000 	.word	0x40008000
   13840:	40001104 	.word	0x40001104

00013844 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   13844:	4b0b      	ldr	r3, [pc, #44]	; (13874 <radio_tmr_aa_capture+0x30>)
   13846:	4a0c      	ldr	r2, [pc, #48]	; (13878 <radio_tmr_aa_capture+0x34>)
   13848:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   1384c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13850:	3240      	adds	r2, #64	; 0x40
   13852:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13856:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1385a:	3a3c      	subs	r2, #60	; 0x3c
   1385c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13860:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13864:	3240      	adds	r2, #64	; 0x40
   13866:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   1386a:	220c      	movs	r2, #12
   1386c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13870:	4770      	bx	lr
   13872:	bf00      	nop
   13874:	4001f000 	.word	0x4001f000
   13878:	40001100 	.word	0x40001100

0001387c <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1387c:	4b01      	ldr	r3, [pc, #4]	; (13884 <radio_tmr_aa_get+0x8>)
   1387e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   13882:	4770      	bx	lr
   13884:	40008000 	.word	0x40008000

00013888 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   13888:	4b01      	ldr	r3, [pc, #4]	; (13890 <radio_tmr_aa_save+0x8>)
   1388a:	6018      	str	r0, [r3, #0]
   1388c:	4770      	bx	lr
   1388e:	bf00      	nop
   13890:	200016d0 	.word	0x200016d0

00013894 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   13894:	4b01      	ldr	r3, [pc, #4]	; (1389c <radio_tmr_aa_restore+0x8>)
   13896:	6818      	ldr	r0, [r3, #0]
   13898:	4770      	bx	lr
   1389a:	bf00      	nop
   1389c:	200016d0 	.word	0x200016d0

000138a0 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   138a0:	4b01      	ldr	r3, [pc, #4]	; (138a8 <radio_tmr_ready_get+0x8>)
   138a2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   138a6:	4770      	bx	lr
   138a8:	40008000 	.word	0x40008000

000138ac <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   138ac:	4b06      	ldr	r3, [pc, #24]	; (138c8 <radio_tmr_end_capture+0x1c>)
   138ae:	4a07      	ldr	r2, [pc, #28]	; (138cc <radio_tmr_end_capture+0x20>)
   138b0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   138b4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   138b8:	323c      	adds	r2, #60	; 0x3c
   138ba:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   138be:	2220      	movs	r2, #32
   138c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   138c4:	4770      	bx	lr
   138c6:	bf00      	nop
   138c8:	4001f000 	.word	0x4001f000
   138cc:	4000110c 	.word	0x4000110c

000138d0 <radio_tmr_end_get>:
   138d0:	4b01      	ldr	r3, [pc, #4]	; (138d8 <radio_tmr_end_get+0x8>)
   138d2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   138d6:	4770      	bx	lr
   138d8:	40008000 	.word	0x40008000

000138dc <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   138dc:	4b01      	ldr	r3, [pc, #4]	; (138e4 <radio_tmr_tifs_base_get+0x8>)
   138de:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   138e2:	4770      	bx	lr
   138e4:	40008000 	.word	0x40008000

000138e8 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   138e8:	4b16      	ldr	r3, [pc, #88]	; (13944 <radio_ccm_rx_pkt_set+0x5c>)
{
   138ea:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   138ec:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   138ee:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   138f0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   138f4:	4e14      	ldr	r6, [pc, #80]	; (13948 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   138f6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   138fa:	4d14      	ldr	r5, [pc, #80]	; (1394c <radio_ccm_rx_pkt_set+0x64>)
   138fc:	2902      	cmp	r1, #2
   138fe:	bf0c      	ite	eq
   13900:	4629      	moveq	r1, r5
   13902:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   13904:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   13908:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1390c:	4810      	ldr	r0, [pc, #64]	; (13950 <radio_ccm_rx_pkt_set+0x68>)
   1390e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   13912:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13916:	4a0f      	ldr	r2, [pc, #60]	; (13954 <radio_ccm_rx_pkt_set+0x6c>)
   13918:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   1391c:	490e      	ldr	r1, [pc, #56]	; (13958 <radio_ccm_rx_pkt_set+0x70>)
   1391e:	4a0f      	ldr	r2, [pc, #60]	; (1395c <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   13920:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13924:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13928:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   1392c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   13930:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   13934:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   13938:	2140      	movs	r1, #64	; 0x40
   1393a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   1393e:	2201      	movs	r2, #1
   13940:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   13942:	bd70      	pop	{r4, r5, r6, pc}
   13944:	4000f000 	.word	0x4000f000
   13948:	01000001 	.word	0x01000001
   1394c:	01010001 	.word	0x01010001
   13950:	200015cc 	.word	0x200015cc
   13954:	200014bc 	.word	0x200014bc
   13958:	40001104 	.word	0x40001104
   1395c:	4001f000 	.word	0x4001f000

00013960 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   13960:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13962:	4b0e      	ldr	r3, [pc, #56]	; (1399c <radio_ccm_tx_pkt_set+0x3c>)
   13964:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13966:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13968:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1396c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   13970:	4c0b      	ldr	r4, [pc, #44]	; (139a0 <radio_ccm_tx_pkt_set+0x40>)
   13972:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   13976:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1397a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1397e:	4809      	ldr	r0, [pc, #36]	; (139a4 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13980:	4909      	ldr	r1, [pc, #36]	; (139a8 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   13982:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   13986:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1398a:	2101      	movs	r1, #1
   1398c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13990:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13994:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   13998:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1399a:	bd10      	pop	{r4, pc}
   1399c:	4000f000 	.word	0x4000f000
   139a0:	01010000 	.word	0x01010000
   139a4:	200015cc 	.word	0x200015cc
   139a8:	200014bc 	.word	0x200014bc

000139ac <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   139ac:	4b0c      	ldr	r3, [pc, #48]	; (139e0 <radio_ccm_is_done+0x34>)
   139ae:	2202      	movs	r2, #2
   139b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   139b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   139b8:	b16a      	cbz	r2, 139d6 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   139ba:	2202      	movs	r2, #2
   139bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   139c0:	4a08      	ldr	r2, [pc, #32]	; (139e4 <radio_ccm_is_done+0x38>)
   139c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   139c6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   139ca:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   139ce:	fab0 f080 	clz	r0, r0
   139d2:	0940      	lsrs	r0, r0, #5
   139d4:	4770      	bx	lr
		__WFE();
   139d6:	bf20      	wfe
		__SEV();
   139d8:	bf40      	sev
		__WFE();
   139da:	bf20      	wfe
   139dc:	e7ea      	b.n	139b4 <radio_ccm_is_done+0x8>
   139de:	bf00      	nop
   139e0:	4000f000 	.word	0x4000f000
   139e4:	e000e100 	.word	0xe000e100

000139e8 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   139e8:	4b03      	ldr	r3, [pc, #12]	; (139f8 <radio_ccm_mic_is_valid+0x10>)
   139ea:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   139ee:	3000      	adds	r0, #0
   139f0:	bf18      	it	ne
   139f2:	2001      	movne	r0, #1
   139f4:	4770      	bx	lr
   139f6:	bf00      	nop
   139f8:	4000f000 	.word	0x4000f000

000139fc <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   139fc:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   139fe:	4c13      	ldr	r4, [pc, #76]	; (13a4c <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   13a00:	4d13      	ldr	r5, [pc, #76]	; (13a50 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13a02:	2303      	movs	r3, #3
   13a04:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   13a08:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   13a0c:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   13a10:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   13a14:	3b01      	subs	r3, #1
   13a16:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   13a1a:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   13a1c:	4b0d      	ldr	r3, [pc, #52]	; (13a54 <radio_ar_configure+0x58>)
   13a1e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   13a22:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   13a24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   13a28:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   13a2c:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   13a30:	f7ff fe46 	bl	136c0 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   13a34:	4b08      	ldr	r3, [pc, #32]	; (13a58 <radio_ar_configure+0x5c>)
   13a36:	4a09      	ldr	r2, [pc, #36]	; (13a5c <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   13a38:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   13a3c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   13a40:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   13a42:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   13a46:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   13a4a:	bd38      	pop	{r3, r4, r5, pc}
   13a4c:	4000f000 	.word	0x4000f000
   13a50:	40001000 	.word	0x40001000
   13a54:	200014b8 	.word	0x200014b8
   13a58:	4001f000 	.word	0x4001f000
   13a5c:	40001128 	.word	0x40001128

00013a60 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   13a60:	4b01      	ldr	r3, [pc, #4]	; (13a68 <radio_ar_match_get+0x8>)
   13a62:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13a66:	4770      	bx	lr
   13a68:	4000f000 	.word	0x4000f000

00013a6c <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   13a6c:	4a04      	ldr	r2, [pc, #16]	; (13a80 <radio_ar_status_reset+0x14>)
   13a6e:	2300      	movs	r3, #0
   13a70:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   13a74:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   13a78:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   13a7c:	4770      	bx	lr
   13a7e:	bf00      	nop
   13a80:	40001000 	.word	0x40001000

00013a84 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   13a84:	4b08      	ldr	r3, [pc, #32]	; (13aa8 <radio_ar_has_match+0x24>)
   13a86:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   13a8a:	b160      	cbz	r0, 13aa6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   13a8c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   13a90:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   13a94:	b138      	cbz	r0, 13aa6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   13a96:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   13a9a:	b120      	cbz	r0, 13aa6 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   13a9c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   13aa0:	fab0 f080 	clz	r0, r0
   13aa4:	0940      	lsrs	r0, r0, #5
}
   13aa6:	4770      	bx	lr
   13aa8:	40001000 	.word	0x40001000

00013aac <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13aac:	2901      	cmp	r1, #1
{
   13aae:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13ab0:	d00e      	beq.n	13ad0 <mayfly_enable_cb+0x24>
   13ab2:	4b0d      	ldr	r3, [pc, #52]	; (13ae8 <mayfly_enable_cb+0x3c>)
   13ab4:	9301      	str	r3, [sp, #4]
   13ab6:	9300      	str	r3, [sp, #0]
   13ab8:	4a0c      	ldr	r2, [pc, #48]	; (13aec <mayfly_enable_cb+0x40>)
   13aba:	4b0d      	ldr	r3, [pc, #52]	; (13af0 <mayfly_enable_cb+0x44>)
   13abc:	490d      	ldr	r1, [pc, #52]	; (13af4 <mayfly_enable_cb+0x48>)
   13abe:	480e      	ldr	r0, [pc, #56]	; (13af8 <mayfly_enable_cb+0x4c>)
   13ac0:	f7ed fa64 	bl	f8c <printk>
   13ac4:	4040      	eors	r0, r0
   13ac6:	f380 8811 	msr	BASEPRI, r0
   13aca:	f04f 0004 	mov.w	r0, #4
   13ace:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   13ad0:	2018      	movs	r0, #24
	if (enable) {
   13ad2:	b122      	cbz	r2, 13ade <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   13ad4:	b003      	add	sp, #12
   13ad6:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   13ada:	f7ed bebd 	b.w	1858 <_arch_irq_enable>
}
   13ade:	b003      	add	sp, #12
   13ae0:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   13ae4:	f7ed bec8 	b.w	1878 <_arch_irq_disable>
   13ae8:	00015af1 	.word	0x00015af1
   13aec:	00016fae 	.word	0x00016fae
   13af0:	0001a0e8 	.word	0x0001a0e8
   13af4:	00016060 	.word	0x00016060
   13af8:	0001a117 	.word	0x0001a117

00013afc <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   13afc:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   13afe:	b181      	cbz	r1, 13b22 <mayfly_is_enabled+0x26>
   13b00:	2901      	cmp	r1, #1
   13b02:	d014      	beq.n	13b2e <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   13b04:	4b0b      	ldr	r3, [pc, #44]	; (13b34 <mayfly_is_enabled+0x38>)
   13b06:	9301      	str	r3, [sp, #4]
   13b08:	9300      	str	r3, [sp, #0]
   13b0a:	4a0b      	ldr	r2, [pc, #44]	; (13b38 <mayfly_is_enabled+0x3c>)
   13b0c:	4b0b      	ldr	r3, [pc, #44]	; (13b3c <mayfly_is_enabled+0x40>)
   13b0e:	490c      	ldr	r1, [pc, #48]	; (13b40 <mayfly_is_enabled+0x44>)
   13b10:	480c      	ldr	r0, [pc, #48]	; (13b44 <mayfly_is_enabled+0x48>)
   13b12:	f7ed fa3b 	bl	f8c <printk>
   13b16:	4040      	eors	r0, r0
   13b18:	f380 8811 	msr	BASEPRI, r0
   13b1c:	f04f 0004 	mov.w	r0, #4
   13b20:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   13b22:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   13b24:	b003      	add	sp, #12
   13b26:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   13b2a:	f7ed beb9 	b.w	18a0 <_arch_irq_is_enabled>
   13b2e:	2018      	movs	r0, #24
   13b30:	e7f8      	b.n	13b24 <mayfly_is_enabled+0x28>
   13b32:	bf00      	nop
   13b34:	00015af1 	.word	0x00015af1
   13b38:	00016fae 	.word	0x00016fae
   13b3c:	0001a0f9 	.word	0x0001a0f9
   13b40:	00016060 	.word	0x00016060
   13b44:	00016f22 	.word	0x00016f22

00013b48 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13b48:	4288      	cmp	r0, r1
   13b4a:	d00a      	beq.n	13b62 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   13b4c:	b918      	cbnz	r0, 13b56 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   13b4e:	1e4b      	subs	r3, r1, #1
   13b50:	4258      	negs	r0, r3
   13b52:	4158      	adcs	r0, r3
   13b54:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13b56:	2801      	cmp	r0, #1
   13b58:	d105      	bne.n	13b66 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   13b5a:	fab1 f081 	clz	r0, r1
   13b5e:	0940      	lsrs	r0, r0, #5
   13b60:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13b62:	2001      	movs	r0, #1
   13b64:	4770      	bx	lr
   13b66:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   13b68:	4770      	bx	lr
	...

00013b6c <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   13b6c:	b507      	push	{r0, r1, r2, lr}
   13b6e:	4b0e      	ldr	r3, [pc, #56]	; (13ba8 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   13b70:	b181      	cbz	r1, 13b94 <mayfly_pend+0x28>
   13b72:	2901      	cmp	r1, #1
   13b74:	d015      	beq.n	13ba2 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   13b76:	4b0d      	ldr	r3, [pc, #52]	; (13bac <mayfly_pend+0x40>)
   13b78:	9301      	str	r3, [sp, #4]
   13b7a:	9300      	str	r3, [sp, #0]
   13b7c:	4a0c      	ldr	r2, [pc, #48]	; (13bb0 <mayfly_pend+0x44>)
   13b7e:	4b0d      	ldr	r3, [pc, #52]	; (13bb4 <mayfly_pend+0x48>)
   13b80:	490d      	ldr	r1, [pc, #52]	; (13bb8 <mayfly_pend+0x4c>)
   13b82:	480e      	ldr	r0, [pc, #56]	; (13bbc <mayfly_pend+0x50>)
   13b84:	f7ed fa02 	bl	f8c <printk>
   13b88:	4040      	eors	r0, r0
   13b8a:	f380 8811 	msr	BASEPRI, r0
   13b8e:	f04f 0004 	mov.w	r0, #4
   13b92:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13b98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   13b9c:	b003      	add	sp, #12
   13b9e:	f85d fb04 	ldr.w	pc, [sp], #4
   13ba2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   13ba6:	e7f7      	b.n	13b98 <mayfly_pend+0x2c>
   13ba8:	e000e100 	.word	0xe000e100
   13bac:	00015af1 	.word	0x00015af1
   13bb0:	00016fae 	.word	0x00016fae
   13bb4:	0001a10b 	.word	0x0001a10b
   13bb8:	00016060 	.word	0x00016060
   13bbc:	00016f22 	.word	0x00016f22

00013bc0 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13bc0:	2803      	cmp	r0, #3
{
   13bc2:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13bc4:	d90e      	bls.n	13be4 <hal_ticker_instance0_caller_id_get+0x24>
   13bc6:	4b0e      	ldr	r3, [pc, #56]	; (13c00 <hal_ticker_instance0_caller_id_get+0x40>)
   13bc8:	9301      	str	r3, [sp, #4]
   13bca:	9300      	str	r3, [sp, #0]
   13bcc:	4a0d      	ldr	r2, [pc, #52]	; (13c04 <hal_ticker_instance0_caller_id_get+0x44>)
   13bce:	4b0e      	ldr	r3, [pc, #56]	; (13c08 <hal_ticker_instance0_caller_id_get+0x48>)
   13bd0:	490e      	ldr	r1, [pc, #56]	; (13c0c <hal_ticker_instance0_caller_id_get+0x4c>)
   13bd2:	480f      	ldr	r0, [pc, #60]	; (13c10 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13bd4:	f7ed f9da 	bl	f8c <printk>
   13bd8:	4040      	eors	r0, r0
   13bda:	f380 8811 	msr	BASEPRI, r0
   13bde:	f04f 0004 	mov.w	r0, #4
   13be2:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   13be4:	4b0b      	ldr	r3, [pc, #44]	; (13c14 <hal_ticker_instance0_caller_id_get+0x54>)
   13be6:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13be8:	b938      	cbnz	r0, 13bfa <hal_ticker_instance0_caller_id_get+0x3a>
   13bea:	4b05      	ldr	r3, [pc, #20]	; (13c00 <hal_ticker_instance0_caller_id_get+0x40>)
   13bec:	9301      	str	r3, [sp, #4]
   13bee:	9300      	str	r3, [sp, #0]
   13bf0:	4a04      	ldr	r2, [pc, #16]	; (13c04 <hal_ticker_instance0_caller_id_get+0x44>)
   13bf2:	4b05      	ldr	r3, [pc, #20]	; (13c08 <hal_ticker_instance0_caller_id_get+0x48>)
   13bf4:	4905      	ldr	r1, [pc, #20]	; (13c0c <hal_ticker_instance0_caller_id_get+0x4c>)
   13bf6:	4808      	ldr	r0, [pc, #32]	; (13c18 <hal_ticker_instance0_caller_id_get+0x58>)
   13bf8:	e7ec      	b.n	13bd4 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   13bfa:	b003      	add	sp, #12
   13bfc:	f85d fb04 	ldr.w	pc, [sp], #4
   13c00:	00015af1 	.word	0x00015af1
   13c04:	00016fae 	.word	0x00016fae
   13c08:	0001a147 	.word	0x0001a147
   13c0c:	00016060 	.word	0x00016060
   13c10:	0001a189 	.word	0x0001a189
   13c14:	0001a185 	.word	0x0001a185
   13c18:	0001a1ca 	.word	0x0001a1ca

00013c1c <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   13c1c:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   13c1e:	3802      	subs	r0, #2
{
   13c20:	461c      	mov	r4, r3
	switch (caller_id) {
   13c22:	2803      	cmp	r0, #3
   13c24:	d818      	bhi.n	13c58 <hal_ticker_instance0_sched+0x3c>
   13c26:	e8df f000 	tbb	[pc, r0]
   13c2a:	0d02      	.short	0x0d02
   13c2c:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   13c2e:	2903      	cmp	r1, #3
   13c30:	d112      	bne.n	13c58 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   13c32:	4b19      	ldr	r3, [pc, #100]	; (13c98 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13c34:	2100      	movs	r1, #0
			m.param = instance;
   13c36:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13c38:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   13c3a:	b002      	add	sp, #8
   13c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13c40:	f7f3 bf7c 	b.w	7b3c <mayfly_enqueue>
		switch (callee_id) {
   13c44:	2904      	cmp	r1, #4
   13c46:	d107      	bne.n	13c58 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13c48:	4b14      	ldr	r3, [pc, #80]	; (13c9c <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13c4a:	2101      	movs	r1, #1
			m.param = instance;
   13c4c:	609c      	str	r4, [r3, #8]
   13c4e:	e7f3      	b.n	13c38 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   13c50:	2903      	cmp	r1, #3
   13c52:	d010      	beq.n	13c76 <hal_ticker_instance0_sched+0x5a>
   13c54:	2904      	cmp	r1, #4
   13c56:	d013      	beq.n	13c80 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   13c58:	4b11      	ldr	r3, [pc, #68]	; (13ca0 <hal_ticker_instance0_sched+0x84>)
   13c5a:	9301      	str	r3, [sp, #4]
   13c5c:	9300      	str	r3, [sp, #0]
   13c5e:	4a11      	ldr	r2, [pc, #68]	; (13ca4 <hal_ticker_instance0_sched+0x88>)
   13c60:	4b11      	ldr	r3, [pc, #68]	; (13ca8 <hal_ticker_instance0_sched+0x8c>)
   13c62:	4912      	ldr	r1, [pc, #72]	; (13cac <hal_ticker_instance0_sched+0x90>)
   13c64:	4812      	ldr	r0, [pc, #72]	; (13cb0 <hal_ticker_instance0_sched+0x94>)
   13c66:	f7ed f991 	bl	f8c <printk>
   13c6a:	4040      	eors	r0, r0
   13c6c:	f380 8811 	msr	BASEPRI, r0
   13c70:	f04f 0004 	mov.w	r0, #4
   13c74:	df02      	svc	2
			m.param = instance;
   13c76:	4b0f      	ldr	r3, [pc, #60]	; (13cb4 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13c78:	2100      	movs	r1, #0
			m.param = instance;
   13c7a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13c7c:	2001      	movs	r0, #1
   13c7e:	e7dc      	b.n	13c3a <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   13c80:	4b0d      	ldr	r3, [pc, #52]	; (13cb8 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13c82:	2101      	movs	r1, #1
			m.param = instance;
   13c84:	609c      	str	r4, [r3, #8]
   13c86:	e7f9      	b.n	13c7c <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   13c88:	2904      	cmp	r1, #4
   13c8a:	d1e5      	bne.n	13c58 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13c8c:	4b0b      	ldr	r3, [pc, #44]	; (13cbc <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13c8e:	2101      	movs	r1, #1
			m.param = instance;
   13c90:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13c92:	2003      	movs	r0, #3
   13c94:	e7d1      	b.n	13c3a <hal_ticker_instance0_sched+0x1e>
   13c96:	bf00      	nop
   13c98:	20003ef0 	.word	0x20003ef0
   13c9c:	20003f00 	.word	0x20003f00
   13ca0:	00015af1 	.word	0x00015af1
   13ca4:	00016fae 	.word	0x00016fae
   13ca8:	0001a16a 	.word	0x0001a16a
   13cac:	00016060 	.word	0x00016060
   13cb0:	00016f22 	.word	0x00016f22
   13cb4:	20003f10 	.word	0x20003f10
   13cb8:	20003f20 	.word	0x20003f20
   13cbc:	20003f30 	.word	0x20003f30

00013cc0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   13cc0:	4601      	mov	r1, r0
   13cc2:	2000      	movs	r0, #0
   13cc4:	f7ff ba62 	b.w	1318c <cntr_cmp_set>

00013cc8 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   13cc8:	4770      	bx	lr
	...

00013ccc <net_buf_pool_get>:
}
   13ccc:	4b01      	ldr	r3, [pc, #4]	; (13cd4 <net_buf_pool_get+0x8>)
   13cce:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   13cd2:	4770      	bx	lr
   13cd4:	20004004 	.word	0x20004004

00013cd8 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13cd8:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   13cda:	4b04      	ldr	r3, [pc, #16]	; (13cec <net_buf_id+0x14>)
   13cdc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   13ce0:	69db      	ldr	r3, [r3, #28]
   13ce2:	1ac0      	subs	r0, r0, r3
}
   13ce4:	4b02      	ldr	r3, [pc, #8]	; (13cf0 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   13ce6:	10c0      	asrs	r0, r0, #3
}
   13ce8:	4358      	muls	r0, r3
   13cea:	4770      	bx	lr
   13cec:	20004004 	.word	0x20004004
   13cf0:	aaaaaaab 	.word	0xaaaaaaab

00013cf4 <fixed_data_alloc>:
{
   13cf4:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13cf6:	4b09      	ldr	r3, [pc, #36]	; (13d1c <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13cf8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13cfa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   13cfe:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13d00:	699b      	ldr	r3, [r3, #24]
   13d02:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   13d04:	6823      	ldr	r3, [r4, #0]
   13d06:	429a      	cmp	r2, r3
   13d08:	bf94      	ite	ls
   13d0a:	600a      	strls	r2, [r1, #0]
   13d0c:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13d0e:	f7ff ffe3 	bl	13cd8 <net_buf_id>
   13d12:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   13d16:	fb02 3000 	mla	r0, r2, r0, r3
   13d1a:	bd10      	pop	{r4, pc}
   13d1c:	20004004 	.word	0x20004004

00013d20 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   13d20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13d24:	4605      	mov	r5, r0
   13d26:	9101      	str	r1, [sp, #4]
   13d28:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13d2a:	f001 f96f 	bl	1500c <_impl_k_uptime_get_32>
   13d2e:	4607      	mov	r7, r0
	__asm__ volatile(
   13d30:	f04f 0320 	mov.w	r3, #32
   13d34:	f3ef 8811 	mrs	r8, BASEPRI
   13d38:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   13d3c:	8a6b      	ldrh	r3, [r5, #18]
   13d3e:	2b00      	cmp	r3, #0
   13d40:	d03d      	beq.n	13dbe <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   13d42:	8a2a      	ldrh	r2, [r5, #16]
   13d44:	429a      	cmp	r2, r3
   13d46:	d92a      	bls.n	13d9e <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13d48:	2100      	movs	r1, #0
   13d4a:	4628      	mov	r0, r5
   13d4c:	f000 fe78 	bl	14a40 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   13d50:	b328      	cbz	r0, 13d9e <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13d52:	f388 8811 	msr	BASEPRI, r8
   13d56:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   13d58:	9b01      	ldr	r3, [sp, #4]
   13d5a:	2b00      	cmp	r3, #0
   13d5c:	d03c      	beq.n	13dd8 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   13d5e:	1c73      	adds	r3, r6, #1
   13d60:	2b01      	cmp	r3, #1
   13d62:	d906      	bls.n	13d72 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13d64:	f001 f952 	bl	1500c <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   13d68:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   13d6a:	42b0      	cmp	r0, r6
   13d6c:	bf94      	ite	ls
   13d6e:	1a36      	subls	r6, r6, r0
   13d70:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13d72:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13d74:	4f1e      	ldr	r7, [pc, #120]	; (13df0 <net_buf_alloc_len+0xd0>)
   13d76:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   13d7a:	4632      	mov	r2, r6
   13d7c:	699b      	ldr	r3, [r3, #24]
   13d7e:	681b      	ldr	r3, [r3, #0]
   13d80:	a901      	add	r1, sp, #4
   13d82:	681b      	ldr	r3, [r3, #0]
   13d84:	4620      	mov	r0, r4
   13d86:	4798      	blx	r3
   13d88:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   13d8a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   13d8c:	bb28      	cbnz	r0, 13dda <net_buf_alloc_len+0xba>
	k_lifo_put(&pool->free, buf);
   13d8e:	79a0      	ldrb	r0, [r4, #6]
   13d90:	4621      	mov	r1, r4
   13d92:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   13d96:	f000 fe34 	bl	14a02 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   13d9a:	462c      	mov	r4, r5
   13d9c:	e018      	b.n	13dd0 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   13d9e:	8a68      	ldrh	r0, [r5, #18]
   13da0:	1e43      	subs	r3, r0, #1
   13da2:	826b      	strh	r3, [r5, #18]
   13da4:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   13da8:	8a2c      	ldrh	r4, [r5, #16]
   13daa:	1a24      	subs	r4, r4, r0
   13dac:	69e8      	ldr	r0, [r5, #28]
   13dae:	2318      	movs	r3, #24
   13db0:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   13db4:	4b0e      	ldr	r3, [pc, #56]	; (13df0 <net_buf_alloc_len+0xd0>)
   13db6:	1aed      	subs	r5, r5, r3
   13db8:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   13dba:	71a5      	strb	r5, [r4, #6]
		goto success;
   13dbc:	e7cc      	b.n	13d58 <net_buf_alloc_len+0x38>
   13dbe:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13dc2:	4631      	mov	r1, r6
   13dc4:	4628      	mov	r0, r5
   13dc6:	f000 fe3b 	bl	14a40 <_impl_k_queue_get>
		return NULL;
   13dca:	4604      	mov	r4, r0
	if (!buf) {
   13dcc:	2800      	cmp	r0, #0
   13dce:	d1c3      	bne.n	13d58 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   13dd0:	4620      	mov	r0, r4
   13dd2:	b002      	add	sp, #8
   13dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   13dd8:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   13dda:	2301      	movs	r3, #1
   13ddc:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   13dde:	2300      	movs	r3, #0
	buf->frags = NULL;
   13de0:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   13de2:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   13de4:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   13de6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   13de8:	6923      	ldr	r3, [r4, #16]
   13dea:	81e2      	strh	r2, [r4, #14]
   13dec:	60a3      	str	r3, [r4, #8]
	return buf;
   13dee:	e7ef      	b.n	13dd0 <net_buf_alloc_len+0xb0>
   13df0:	20004004 	.word	0x20004004

00013df4 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13df4:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   13df6:	685b      	ldr	r3, [r3, #4]
   13df8:	460a      	mov	r2, r1
   13dfa:	6819      	ldr	r1, [r3, #0]
   13dfc:	f7ff bf90 	b.w	13d20 <net_buf_alloc_len>

00013e00 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   13e00:	b570      	push	{r4, r5, r6, lr}
   13e02:	4606      	mov	r6, r0
   13e04:	f000 fe1c 	bl	14a40 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   13e08:	4605      	mov	r5, r0
   13e0a:	b128      	cbz	r0, 13e18 <net_buf_get+0x18>
   13e0c:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13e0e:	7963      	ldrb	r3, [r4, #5]
   13e10:	f013 0301 	ands.w	r3, r3, #1
   13e14:	d102      	bne.n	13e1c <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   13e16:	6023      	str	r3, [r4, #0]

	return buf;
}
   13e18:	4628      	mov	r0, r5
   13e1a:	bd70      	pop	{r4, r5, r6, pc}
   13e1c:	2100      	movs	r1, #0
   13e1e:	4630      	mov	r0, r6
   13e20:	f000 fe0e 	bl	14a40 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   13e24:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   13e26:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   13e28:	f023 0301 	bic.w	r3, r3, #1
   13e2c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13e2e:	4604      	mov	r4, r0
   13e30:	e7ed      	b.n	13e0e <net_buf_get+0xe>

00013e32 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   13e32:	6883      	ldr	r3, [r0, #8]
   13e34:	4419      	add	r1, r3
   13e36:	6001      	str	r1, [r0, #0]
   13e38:	4770      	bx	lr

00013e3a <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   13e3a:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   13e3c:	460a      	mov	r2, r1
   13e3e:	6814      	ldr	r4, [r2, #0]
   13e40:	b914      	cbnz	r4, 13e48 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   13e42:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   13e44:	f000 bde2 	b.w	14a0c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   13e48:	7953      	ldrb	r3, [r2, #5]
   13e4a:	f043 0301 	orr.w	r3, r3, #1
   13e4e:	7153      	strb	r3, [r2, #5]
   13e50:	4622      	mov	r2, r4
   13e52:	e7f4      	b.n	13e3e <net_buf_put+0x4>

00013e54 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e56:	4d15      	ldr	r5, [pc, #84]	; (13eac <net_buf_unref+0x58>)
   13e58:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13e5a:	2600      	movs	r6, #0
	while (buf) {
   13e5c:	b904      	cbnz	r4, 13e60 <net_buf_unref+0xc>
   13e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   13e60:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   13e62:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   13e64:	3b01      	subs	r3, #1
   13e66:	b2db      	uxtb	r3, r3
   13e68:	7123      	strb	r3, [r4, #4]
   13e6a:	2b00      	cmp	r3, #0
   13e6c:	d1f7      	bne.n	13e5e <net_buf_unref+0xa>
		if (buf->__buf) {
   13e6e:	6921      	ldr	r1, [r4, #16]
   13e70:	b159      	cbz	r1, 13e8a <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13e72:	7963      	ldrb	r3, [r4, #5]
   13e74:	079b      	lsls	r3, r3, #30
   13e76:	d407      	bmi.n	13e88 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13e78:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   13e7a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   13e7e:	4620      	mov	r0, r4
   13e80:	699b      	ldr	r3, [r3, #24]
   13e82:	681b      	ldr	r3, [r3, #0]
   13e84:	689b      	ldr	r3, [r3, #8]
   13e86:	4798      	blx	r3
			buf->__buf = NULL;
   13e88:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   13e8a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13e8c:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   13e8e:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   13e92:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   13e94:	695b      	ldr	r3, [r3, #20]
   13e96:	b11b      	cbz	r3, 13ea0 <net_buf_unref+0x4c>
			pool->destroy(buf);
   13e98:	4620      	mov	r0, r4
   13e9a:	4798      	blx	r3
{
   13e9c:	463c      	mov	r4, r7
   13e9e:	e7dd      	b.n	13e5c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   13ea0:	4621      	mov	r1, r4
   13ea2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   13ea6:	f000 fdac 	bl	14a02 <k_queue_prepend>
   13eaa:	e7f7      	b.n	13e9c <net_buf_unref+0x48>
   13eac:	20004004 	.word	0x20004004

00013eb0 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   13eb0:	7903      	ldrb	r3, [r0, #4]
   13eb2:	3301      	adds	r3, #1
   13eb4:	7103      	strb	r3, [r0, #4]
	return buf;
}
   13eb6:	4770      	bx	lr

00013eb8 <net_buf_simple_add>:
	return buf->data + buf->len;
   13eb8:	8883      	ldrh	r3, [r0, #4]
   13eba:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   13ebc:	4419      	add	r1, r3
   13ebe:	8081      	strh	r1, [r0, #4]
	return tail;
}
   13ec0:	18d0      	adds	r0, r2, r3
   13ec2:	4770      	bx	lr

00013ec4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   13ec4:	b430      	push	{r4, r5}
   13ec6:	8883      	ldrh	r3, [r0, #4]
   13ec8:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   13eca:	189d      	adds	r5, r3, r2
   13ecc:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13ece:	18e0      	adds	r0, r4, r3
}
   13ed0:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13ed2:	f7ed be93 	b.w	1bfc <memcpy>

00013ed6 <net_buf_simple_add_u8>:
   13ed6:	8883      	ldrh	r3, [r0, #4]
   13ed8:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   13eda:	b510      	push	{r4, lr}
	buf->len += len;
   13edc:	1c5c      	adds	r4, r3, #1
   13ede:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   13ee0:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   13ee2:	18d0      	adds	r0, r2, r3
   13ee4:	bd10      	pop	{r4, pc}

00013ee6 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   13ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13ee8:	ab02      	add	r3, sp, #8
   13eea:	8884      	ldrh	r4, [r0, #4]
   13eec:	f823 1d02 	strh.w	r1, [r3, #-2]!
   13ef0:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   13ef2:	1ca2      	adds	r2, r4, #2
   13ef4:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   13ef6:	4619      	mov	r1, r3
   13ef8:	2202      	movs	r2, #2
   13efa:	1928      	adds	r0, r5, r4
   13efc:	f7ed fe7e 	bl	1bfc <memcpy>
}
   13f00:	b003      	add	sp, #12
   13f02:	bd30      	pop	{r4, r5, pc}

00013f04 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   13f04:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   13f06:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   13f08:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   13f0a:	4411      	add	r1, r2
	buf->data -= len;
   13f0c:	6003      	str	r3, [r0, #0]
	buf->len += len;
   13f0e:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   13f10:	4618      	mov	r0, r3
   13f12:	4770      	bx	lr

00013f14 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   13f14:	8883      	ldrh	r3, [r0, #4]
   13f16:	1a5b      	subs	r3, r3, r1
   13f18:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   13f1a:	6803      	ldr	r3, [r0, #0]
   13f1c:	4419      	add	r1, r3
   13f1e:	6001      	str	r1, [r0, #0]
}
   13f20:	4608      	mov	r0, r1
   13f22:	4770      	bx	lr

00013f24 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   13f24:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   13f26:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   13f28:	2101      	movs	r1, #1
	val = buf->data[0];
   13f2a:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   13f2c:	f7ff fff2 	bl	13f14 <net_buf_simple_pull>

	return val;
}
   13f30:	4610      	mov	r0, r2
   13f32:	bd08      	pop	{r3, pc}

00013f34 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   13f34:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   13f36:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13f38:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   13f3a:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13f3c:	f7ff ffea 	bl	13f14 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   13f40:	4610      	mov	r0, r2
   13f42:	bd08      	pop	{r3, pc}

00013f44 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   13f44:	6802      	ldr	r2, [r0, #0]
   13f46:	6880      	ldr	r0, [r0, #8]
}
   13f48:	1a10      	subs	r0, r2, r0
   13f4a:	4770      	bx	lr

00013f4c <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   13f4c:	6802      	ldr	r2, [r0, #0]
   13f4e:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13f50:	88c3      	ldrh	r3, [r0, #6]
   13f52:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   13f54:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13f56:	1a9b      	subs	r3, r3, r2
}
   13f58:	1a18      	subs	r0, r3, r0
   13f5a:	4770      	bx	lr

00013f5c <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13f5c:	6800      	ldr	r0, [r0, #0]
   13f5e:	6880      	ldr	r0, [r0, #8]
   13f60:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   13f62:	b941      	cbnz	r1, 13f76 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   13f64:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   13f68:	fa21 f202 	lsr.w	r2, r1, r2
   13f6c:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   13f70:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   13f72:	2000      	movs	r0, #0
   13f74:	4770      	bx	lr
		*value = gpio->IN;
   13f76:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   13f7a:	e7f9      	b.n	13f70 <gpio_nrf5_read+0x14>

00013f7c <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13f7c:	6800      	ldr	r0, [r0, #0]
   13f7e:	6880      	ldr	r0, [r0, #8]
   13f80:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   13f82:	b949      	cbnz	r1, 13f98 <gpio_nrf5_write+0x1c>
   13f84:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   13f86:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   13f88:	b11b      	cbz	r3, 13f92 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   13f8a:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   13f8e:	2000      	movs	r0, #0
   13f90:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   13f92:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   13f96:	e7fa      	b.n	13f8e <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   13f98:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   13f9c:	e7f7      	b.n	13f8e <gpio_nrf5_write+0x12>

00013f9e <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13f9e:	6883      	ldr	r3, [r0, #8]
   13fa0:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   13fa2:	b172      	cbz	r2, 13fc2 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   13fa4:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   13fa6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13fa8:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   13faa:	b902      	cbnz	r2, 13fae <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   13fac:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   13fae:	2000      	movs	r0, #0
   13fb0:	4770      	bx	lr
	parent->next = child;
   13fb2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   13fb4:	6858      	ldr	r0, [r3, #4]
   13fb6:	4281      	cmp	r1, r0
	list->tail = node;
   13fb8:	bf08      	it	eq
   13fba:	605a      	streq	r2, [r3, #4]
   13fbc:	e00d      	b.n	13fda <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   13fbe:	4602      	mov	r2, r0
   13fc0:	6800      	ldr	r0, [r0, #0]
   13fc2:	2800      	cmp	r0, #0
   13fc4:	d0f3      	beq.n	13fae <gpio_nrf5_manage_callback+0x10>
   13fc6:	4281      	cmp	r1, r0
   13fc8:	d1f9      	bne.n	13fbe <gpio_nrf5_manage_callback+0x20>
   13fca:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   13fcc:	2a00      	cmp	r2, #0
   13fce:	d1f0      	bne.n	13fb2 <gpio_nrf5_manage_callback+0x14>
   13fd0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13fd2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   13fd4:	4291      	cmp	r1, r2
   13fd6:	d100      	bne.n	13fda <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   13fd8:	6058      	str	r0, [r3, #4]
	parent->next = child;
   13fda:	2300      	movs	r3, #0
   13fdc:	600b      	str	r3, [r1, #0]
   13fde:	e7e6      	b.n	13fae <gpio_nrf5_manage_callback+0x10>

00013fe0 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   13fe0:	4b0c      	ldr	r3, [pc, #48]	; (14014 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   13fe2:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13fe4:	4d0c      	ldr	r5, [pc, #48]	; (14018 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   13fe6:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13fe8:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   13fea:	fa24 f203 	lsr.w	r2, r4, r3
   13fee:	07d2      	lsls	r2, r2, #31
   13ff0:	d508      	bpl.n	14004 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13ff2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   13ff6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   13ffa:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   13ffe:	4282      	cmp	r2, r0
   14000:	d100      	bne.n	14004 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   14002:	b121      	cbz	r1, 1400e <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   14004:	3301      	adds	r3, #1
   14006:	2b08      	cmp	r3, #8
   14008:	d1ef      	bne.n	13fea <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   1400a:	f06f 0312 	mvn.w	r3, #18
}
   1400e:	4618      	mov	r0, r3
   14010:	bd30      	pop	{r4, r5, pc}
   14012:	bf00      	nop
   14014:	20001710 	.word	0x20001710
   14018:	40006000 	.word	0x40006000

0001401c <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   1401c:	b570      	push	{r4, r5, r6, lr}
   1401e:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   14020:	460d      	mov	r5, r1
   14022:	b9c9      	cbnz	r1, 14058 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   14024:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   14026:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   14028:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   1402a:	4610      	mov	r0, r2
   1402c:	7919      	ldrb	r1, [r3, #4]
   1402e:	f7ff ffd7 	bl	13fe0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   14032:	2800      	cmp	r0, #0
   14034:	db12      	blt.n	1405c <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   14036:	68b2      	ldr	r2, [r6, #8]
   14038:	2301      	movs	r3, #1
   1403a:	fa03 f404 	lsl.w	r4, r3, r4
   1403e:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   14040:	f100 0140 	add.w	r1, r0, #64	; 0x40
   14044:	4a06      	ldr	r2, [pc, #24]	; (14060 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   14046:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   14048:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   1404c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   14050:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   14054:	4628      	mov	r0, r5
   14056:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   14058:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   1405c:	bd70      	pop	{r4, r5, r6, pc}
   1405e:	bf00      	nop
   14060:	40006000 	.word	0x40006000

00014064 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   14064:	b570      	push	{r4, r5, r6, lr}
   14066:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   14068:	460d      	mov	r5, r1
   1406a:	b9b1      	cbnz	r1, 1409a <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   1406c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1406e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   14070:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   14072:	4610      	mov	r0, r2
   14074:	7919      	ldrb	r1, [r3, #4]
   14076:	f7ff ffb3 	bl	13fe0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1407a:	2800      	cmp	r0, #0
   1407c:	db0f      	blt.n	1409e <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   1407e:	68b2      	ldr	r2, [r6, #8]
   14080:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   14082:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   14086:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   1408a:	4b05      	ldr	r3, [pc, #20]	; (140a0 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   1408c:	ea22 0404 	bic.w	r4, r2, r4
   14090:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   14092:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   14096:	4628      	mov	r0, r5
   14098:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1409a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   1409e:	bd70      	pop	{r4, r5, r6, pc}
   140a0:	40006000 	.word	0x40006000

000140a4 <gpio_nrf5_config>:
{
   140a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   140a8:	6806      	ldr	r6, [r0, #0]
{
   140aa:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   140ac:	68b2      	ldr	r2, [r6, #8]
   140ae:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   140b0:	b119      	cbz	r1, 140ba <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   140b2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   140b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   140ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
   140be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   140c2:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   140c6:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   140ca:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   140ce:	d058      	beq.n	14182 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   140d0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   140d4:	bf0c      	ite	eq
   140d6:	2204      	moveq	r2, #4
   140d8:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   140da:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   140de:	bf08      	it	eq
   140e0:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   140e2:	f013 0f01 	tst.w	r3, #1
   140e6:	ea4f 0180 	mov.w	r1, r0, lsl #2
   140ea:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 141b8 <gpio_nrf5_config+0x114>
   140ee:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   140f2:	d04f      	beq.n	14194 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   140f4:	2a0c      	cmp	r2, #12
   140f6:	d146      	bne.n	14186 <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   140f8:	2701      	movs	r7, #1
   140fa:	40a7      	lsls	r7, r4
   140fc:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   14100:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   14102:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   14106:	f041 0103 	orr.w	r1, r1, #3
   1410a:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   1410c:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   14110:	f013 0002 	ands.w	r0, r3, #2
   14114:	d049      	beq.n	141aa <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   14116:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   14118:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   1411a:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   1411e:	d5c8      	bpl.n	140b2 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   14120:	065a      	lsls	r2, r3, #25
   14122:	d43d      	bmi.n	141a0 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   14124:	f013 0f04 	tst.w	r3, #4
   14128:	bf14      	ite	ne
   1412a:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   1412e:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   14132:	4e1f      	ldr	r6, [pc, #124]	; (141b0 <gpio_nrf5_config+0x10c>)
   14134:	6837      	ldr	r7, [r6, #0]
   14136:	4638      	mov	r0, r7
   14138:	f7ec f884 	bl	244 <__popcountsi2>
   1413c:	2808      	cmp	r0, #8
   1413e:	d032      	beq.n	141a6 <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   14140:	4641      	mov	r1, r8
   14142:	4620      	mov	r0, r4
   14144:	f7ff ff4c 	bl	13fe0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   14148:	2800      	cmp	r0, #0
   1414a:	da08      	bge.n	1415e <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   1414c:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   1414e:	fa93 f0a3 	rbit	r0, r3
   14152:	2b00      	cmp	r3, #0
   14154:	fab0 f080 	clz	r0, r0
   14158:	bf08      	it	eq
   1415a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   1415e:	2301      	movs	r3, #1
   14160:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   14162:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   14164:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   14166:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   1416a:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   1416c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   14170:	4b10      	ldr	r3, [pc, #64]	; (141b4 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   14172:	f044 0401 	orr.w	r4, r4, #1
   14176:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   14178:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   1417c:	2000      	movs	r0, #0
   1417e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   14182:	220c      	movs	r2, #12
   14184:	e7a9      	b.n	140da <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   14186:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   14188:	bf02      	ittt	eq
   1418a:	2701      	moveq	r7, #1
   1418c:	40a7      	lsleq	r7, r4
   1418e:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   14192:	e7b5      	b.n	14100 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   14194:	4461      	add	r1, ip
   14196:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   1419a:	430a      	orrs	r2, r1
   1419c:	433a      	orrs	r2, r7
   1419e:	e7b5      	b.n	1410c <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   141a0:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   141a4:	e7c5      	b.n	14132 <gpio_nrf5_config+0x8e>
			return -EIO;
   141a6:	f06f 0004 	mvn.w	r0, #4
}
   141aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   141ae:	bf00      	nop
   141b0:	20001710 	.word	0x20001710
   141b4:	40006000 	.word	0x40006000
   141b8:	0001a208 	.word	0x0001a208

000141bc <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   141bc:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   141be:	2200      	movs	r2, #0
   141c0:	2105      	movs	r1, #5
   141c2:	2006      	movs	r0, #6
   141c4:	f7ed fb7a 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   141c8:	2006      	movs	r0, #6
   141ca:	f7ed fb45 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   141ce:	2000      	movs	r0, #0
   141d0:	bd08      	pop	{r3, pc}
	...

000141d4 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   141d4:	2100      	movs	r1, #0
{
   141d6:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   141d8:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   141da:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   141dc:	2501      	movs	r5, #1
   141de:	008b      	lsls	r3, r1, #2
   141e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   141e4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   141e8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   141ec:	b140      	cbz	r0, 14200 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   141ee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   141f2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   141f6:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   141fa:	fa05 f303 	lsl.w	r3, r5, r3
   141fe:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   14200:	3101      	adds	r1, #1
   14202:	2908      	cmp	r1, #8
   14204:	d1eb      	bne.n	141de <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   14206:	4e08      	ldr	r6, [pc, #32]	; (14228 <gpio_nrf5_port_isr+0x54>)
   14208:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   1420a:	689d      	ldr	r5, [r3, #8]
   1420c:	681c      	ldr	r4, [r3, #0]
   1420e:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   14210:	b14c      	cbz	r4, 14226 <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   14212:	68a3      	ldr	r3, [r4, #8]
   14214:	421d      	tst	r5, r3
   14216:	d004      	beq.n	14222 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   14218:	6863      	ldr	r3, [r4, #4]
   1421a:	462a      	mov	r2, r5
   1421c:	4621      	mov	r1, r4
   1421e:	4630      	mov	r0, r6
   14220:	4798      	blx	r3
	return node->next;
   14222:	6824      	ldr	r4, [r4, #0]
   14224:	e7f4      	b.n	14210 <gpio_nrf5_port_isr+0x3c>
   14226:	bd70      	pop	{r4, r5, r6, pc}
   14228:	20003fac 	.word	0x20003fac

0001422c <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1422c:	4b03      	ldr	r3, [pc, #12]	; (1423c <uart_nrfx_err_check+0x10>)
   1422e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   14230:	b118      	cbz	r0, 1423a <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14232:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   14236:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   1423a:	4770      	bx	lr
   1423c:	40002124 	.word	0x40002124

00014240 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14240:	4b07      	ldr	r3, [pc, #28]	; (14260 <uart_nrfx_poll_out+0x20>)
   14242:	2200      	movs	r2, #0
   14244:	601a      	str	r2, [r3, #0]
{
   14246:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14248:	681a      	ldr	r2, [r3, #0]
   1424a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1424c:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   1424e:	4a05      	ldr	r2, [pc, #20]	; (14264 <uart_nrfx_poll_out+0x24>)
   14250:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14254:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   14256:	2a00      	cmp	r2, #0
   14258:	d0fc      	beq.n	14254 <uart_nrfx_poll_out+0x14>
}
   1425a:	4608      	mov	r0, r1
   1425c:	b002      	add	sp, #8
   1425e:	4770      	bx	lr
   14260:	4000211c 	.word	0x4000211c
   14264:	40002000 	.word	0x40002000

00014268 <uart_nrfx_poll_in>:
   14268:	4b08      	ldr	r3, [pc, #32]	; (1428c <uart_nrfx_poll_in+0x24>)
   1426a:	681a      	ldr	r2, [r3, #0]
{
   1426c:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   1426e:	b152      	cbz	r2, 14286 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14270:	2000      	movs	r0, #0
   14272:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14274:	681b      	ldr	r3, [r3, #0]
   14276:	9301      	str	r3, [sp, #4]
    (void)dummy;
   14278:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1427a:	4b05      	ldr	r3, [pc, #20]	; (14290 <uart_nrfx_poll_in+0x28>)
   1427c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   14280:	700b      	strb	r3, [r1, #0]
}
   14282:	b002      	add	sp, #8
   14284:	4770      	bx	lr
		return -1;
   14286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1428a:	e7fa      	b.n	14282 <uart_nrfx_poll_in+0x1a>
   1428c:	40002108 	.word	0x40002108
   14290:	40002000 	.word	0x40002000

00014294 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   14294:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   14296:	4819      	ldr	r0, [pc, #100]	; (142fc <uart_nrfx_init+0x68>)
   14298:	f000 f98c 	bl	145b4 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   1429c:	6843      	ldr	r3, [r0, #4]
   1429e:	4604      	mov	r4, r0
   142a0:	681d      	ldr	r5, [r3, #0]
   142a2:	2206      	movs	r2, #6
   142a4:	f240 1301 	movw	r3, #257	; 0x101
   142a8:	2100      	movs	r1, #0
   142aa:	47a8      	blx	r5
   142ac:	6863      	ldr	r3, [r4, #4]
   142ae:	681d      	ldr	r5, [r3, #0]
   142b0:	2300      	movs	r3, #0
   142b2:	4619      	mov	r1, r3
   142b4:	2208      	movs	r2, #8
   142b6:	4620      	mov	r0, r4
   142b8:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   142ba:	4b11      	ldr	r3, [pc, #68]	; (14300 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   142bc:	4911      	ldr	r1, [pc, #68]	; (14304 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   142be:	2208      	movs	r2, #8
   142c0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   142c4:	2206      	movs	r2, #6
   142c6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   142ca:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   142cc:	4a0e      	ldr	r2, [pc, #56]	; (14308 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   142ce:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   142d2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   142d6:	2204      	movs	r2, #4
   142d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   142dc:	4a0b      	ldr	r2, [pc, #44]	; (1430c <uart_nrfx_init+0x78>)
   142de:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   142e0:	6812      	ldr	r2, [r2, #0]
   142e2:	9201      	str	r2, [sp, #4]
    (void)dummy;
   142e4:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   142e6:	4a0a      	ldr	r2, [pc, #40]	; (14310 <uart_nrfx_init+0x7c>)
   142e8:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   142ea:	6812      	ldr	r2, [r2, #0]
   142ec:	9200      	str	r2, [sp, #0]
    (void)dummy;
   142ee:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   142f0:	2201      	movs	r2, #1
   142f2:	600a      	str	r2, [r1, #0]
   142f4:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   142f6:	b003      	add	sp, #12
   142f8:	bd30      	pop	{r4, r5, pc}
   142fa:	bf00      	nop
   142fc:	0001a26c 	.word	0x0001a26c
   14300:	40002000 	.word	0x40002000
   14304:	40002008 	.word	0x40002008
   14308:	01d7e000 	.word	0x01d7e000
   1430c:	4000211c 	.word	0x4000211c
   14310:	40002108 	.word	0x40002108

00014314 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   14314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   14318:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   1431a:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   1431c:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   1431e:	42a3      	cmp	r3, r4
	d = &rand[octets];
   14320:	440a      	add	r2, r1
	s = &rng->rand[first];
   14322:	4406      	add	r6, r0
	if (first <= last) {
   14324:	d81f      	bhi.n	14366 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   14326:	1ae4      	subs	r4, r4, r3
   14328:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   1432a:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   1432c:	bf3e      	ittt	cc
   1432e:	1a64      	subcc	r4, r4, r1
   14330:	b2e7      	uxtbcc	r7, r4
   14332:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   14334:	4423      	add	r3, r4
		octets -= avail;
   14336:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   1433a:	bf28      	it	cs
   1433c:	2700      	movcs	r7, #0
		first += avail;
   1433e:	b2db      	uxtb	r3, r3
		octets -= avail;
   14340:	b2c9      	uxtb	r1, r1
   14342:	4434      	add	r4, r6

		while (avail--) {
   14344:	42a6      	cmp	r6, r4
   14346:	d109      	bne.n	1435c <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   14348:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   1434a:	7843      	ldrb	r3, [r0, #1]
   1434c:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   1434e:	bf82      	ittt	hi
   14350:	4b20      	ldrhi	r3, [pc, #128]	; (143d4 <get+0xc0>)
   14352:	2201      	movhi	r2, #1
   14354:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   14356:	4608      	mov	r0, r1
   14358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   1435c:	f816 5b01 	ldrb.w	r5, [r6], #1
   14360:	f802 5d01 	strb.w	r5, [r2, #-1]!
   14364:	e7ee      	b.n	14344 <get+0x30>
		avail = rng->count - first;
   14366:	7805      	ldrb	r5, [r0, #0]
   14368:	1aed      	subs	r5, r5, r3
   1436a:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   1436c:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   1436e:	bf3f      	itttt	cc
   14370:	1a67      	subcc	r7, r4, r1
   14372:	19ed      	addcc	r5, r5, r7
   14374:	b2ef      	uxtbcc	r7, r5
   14376:	460d      	movcc	r5, r1
			first += avail;
   14378:	bf38      	it	cc
   1437a:	185b      	addcc	r3, r3, r1
		octets -= avail;
   1437c:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   14380:	bf32      	itee	cc
   14382:	b2db      	uxtbcc	r3, r3
   14384:	4627      	movcs	r7, r4
			first = 0;
   14386:	2300      	movcs	r3, #0
		octets -= avail;
   14388:	b2c9      	uxtb	r1, r1
   1438a:	4696      	mov	lr, r2
   1438c:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   14390:	4566      	cmp	r6, ip
   14392:	d119      	bne.n	143c8 <get+0xb4>
   14394:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   14396:	2900      	cmp	r1, #0
   14398:	d0d6      	beq.n	14348 <get+0x34>
   1439a:	2c00      	cmp	r4, #0
   1439c:	d0d4      	beq.n	14348 <get+0x34>
			if (octets < last) {
   1439e:	428c      	cmp	r4, r1
   143a0:	bf8a      	itet	hi
   143a2:	460b      	movhi	r3, r1
   143a4:	4623      	movls	r3, r4
				remaining = last - octets;
   143a6:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   143a8:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   143ac:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   143b0:	bf8c      	ite	hi
   143b2:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   143b4:	2700      	movls	r7, #0
			octets -= last;
   143b6:	b2c9      	uxtb	r1, r1
   143b8:	18f4      	adds	r4, r6, r3
			while (last--) {
   143ba:	42a6      	cmp	r6, r4
   143bc:	d0c4      	beq.n	14348 <get+0x34>
				*(--d) = *s++;
   143be:	f816 5b01 	ldrb.w	r5, [r6], #1
   143c2:	f802 5d01 	strb.w	r5, [r2, #-1]!
   143c6:	e7f8      	b.n	143ba <get+0xa6>
			*(--d) = *s++;
   143c8:	f816 8b01 	ldrb.w	r8, [r6], #1
   143cc:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   143d0:	e7de      	b.n	14390 <get+0x7c>
   143d2:	bf00      	nop
   143d4:	4000d000 	.word	0x4000d000

000143d8 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   143d8:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   143da:	b1d0      	cbz	r0, 14412 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   143dc:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   143de:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   143e0:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   143e2:	1c53      	adds	r3, r2, #1
   143e4:	b2db      	uxtb	r3, r3
		last = 0;
   143e6:	42ab      	cmp	r3, r5
   143e8:	bf08      	it	eq
   143ea:	2300      	moveq	r3, #0
	if (last == rng->first) {
   143ec:	42a3      	cmp	r3, r4
   143ee:	d010      	beq.n	14412 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   143f0:	b161      	cbz	r1, 1440c <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   143f2:	490a      	ldr	r1, [pc, #40]	; (1441c <isr+0x44>)
   143f4:	4402      	add	r2, r0
   143f6:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   143fa:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   143fc:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   143fe:	3301      	adds	r3, #1
   14400:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   14402:	429d      	cmp	r5, r3
   14404:	bf08      	it	eq
   14406:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   14408:	42a3      	cmp	r3, r4
   1440a:	d005      	beq.n	14418 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   1440c:	f06f 000f 	mvn.w	r0, #15
   14410:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   14412:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14416:	bd30      	pop	{r4, r5, pc}
		return 0;
   14418:	2000      	movs	r0, #0
}
   1441a:	bd30      	pop	{r4, r5, pc}
   1441c:	4000d000 	.word	0x4000d000

00014420 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   14420:	07db      	lsls	r3, r3, #31
{
   14422:	b570      	push	{r4, r5, r6, lr}
   14424:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   14426:	d507      	bpl.n	14438 <entropy_nrf5_get_entropy_isr+0x18>
   14428:	4613      	mov	r3, r2
   1442a:	4a0d      	ldr	r2, [pc, #52]	; (14460 <entropy_nrf5_get_entropy_isr+0x40>)
   1442c:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   1442e:	2500      	movs	r5, #0
	while (len) {
   14430:	b94b      	cbnz	r3, 14446 <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   14432:	6050      	str	r0, [r2, #4]

	return cnt;
   14434:	4620      	mov	r0, r4
}
   14436:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   14438:	6880      	ldr	r0, [r0, #8]
   1443a:	460a      	mov	r2, r1
   1443c:	303c      	adds	r0, #60	; 0x3c
   1443e:	b2e1      	uxtb	r1, r4
   14440:	f7ff ff68 	bl	14314 <get>
   14444:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   14446:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   1444a:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   1444c:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   14450:	2e00      	cmp	r6, #0
   14452:	d0fb      	beq.n	1444c <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   14454:	3b01      	subs	r3, #1
   14456:	b29b      	uxth	r3, r3
   14458:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   1445c:	54ce      	strb	r6, [r1, r3]
   1445e:	e7e7      	b.n	14430 <entropy_nrf5_get_entropy_isr+0x10>
   14460:	4000d000 	.word	0x4000d000

00014464 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   14464:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   14466:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   14468:	2201      	movs	r2, #1
   1446a:	4611      	mov	r1, r2
   1446c:	4620      	mov	r0, r4
   1446e:	f000 fd7f 	bl	14f70 <_impl_k_sem_init>
   14472:	f104 0018 	add.w	r0, r4, #24
   14476:	2201      	movs	r2, #1
   14478:	2100      	movs	r1, #0
   1447a:	f000 fd79 	bl	14f70 <_impl_k_sem_init>
	rng->threshold = threshold;
   1447e:	2304      	movs	r3, #4
   14480:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   14484:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   14486:	2500      	movs	r5, #0
	rng->threshold = threshold;
   14488:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   1448c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1448e:	4b11      	ldr	r3, [pc, #68]	; (144d4 <entropy_nrf5_init+0x70>)
	rng->count = len;
   14490:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   14494:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   14496:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   1449a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   1449e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   144a2:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   144a6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   144aa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   144ae:	f042 0201 	orr.w	r2, r2, #1
   144b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   144b6:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   144b8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   144bc:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   144be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   144c2:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   144c4:	462a      	mov	r2, r5
   144c6:	f7ed f9f9 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   144ca:	4630      	mov	r0, r6
   144cc:	f7ed f9c4 	bl	1858 <_arch_irq_enable>

	return 0;
}
   144d0:	4628      	mov	r0, r5
   144d2:	bd70      	pop	{r4, r5, r6, pc}
   144d4:	4000d000 	.word	0x4000d000

000144d8 <isr_rand>:
{
   144d8:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   144da:	4b12      	ldr	r3, [pc, #72]	; (14524 <isr_rand+0x4c>)
   144dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   144e0:	b1fb      	cbz	r3, 14522 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   144e2:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   144e4:	2101      	movs	r1, #1
   144e6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   144ea:	f7ff ff75 	bl	143d8 <isr>
		if (ret != -EBUSY) {
   144ee:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   144f2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   144f4:	d00d      	beq.n	14512 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   144f6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   144fa:	bf14      	ite	ne
   144fc:	2100      	movne	r1, #0
   144fe:	2101      	moveq	r1, #1
   14500:	f105 0030 	add.w	r0, r5, #48	; 0x30
   14504:	f7ff ff68 	bl	143d8 <isr>
   14508:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1450a:	f105 0018 	add.w	r0, r5, #24
   1450e:	f000 fd38 	bl	14f82 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   14512:	4b04      	ldr	r3, [pc, #16]	; (14524 <isr_rand+0x4c>)
   14514:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   14516:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   14518:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   1451c:	bf1c      	itt	ne
   1451e:	2201      	movne	r2, #1
   14520:	605a      	strne	r2, [r3, #4]
   14522:	bd38      	pop	{r3, r4, r5, pc}
   14524:	4000d000 	.word	0x4000d000

00014528 <entropy_nrf5_get_entropy>:
{
   14528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1452c:	6885      	ldr	r5, [r0, #8]
{
   1452e:	460f      	mov	r7, r1
   14530:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   14532:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   14536:	b914      	cbnz	r4, 1453e <entropy_nrf5_get_entropy+0x16>
}
   14538:	4620      	mov	r0, r4
   1453a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1453e:	2cff      	cmp	r4, #255	; 0xff
   14540:	4623      	mov	r3, r4
   14542:	bf28      	it	cs
   14544:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   14546:	1ae4      	subs	r4, r4, r3
   14548:	b2de      	uxtb	r6, r3
   1454a:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   1454c:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   14550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14554:	4628      	mov	r0, r5
   14556:	f000 fd3c 	bl	14fd2 <_impl_k_sem_take>
   1455a:	4631      	mov	r1, r6
   1455c:	463a      	mov	r2, r7
   1455e:	4648      	mov	r0, r9
   14560:	f7ff fed8 	bl	14314 <get>
   14564:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   14566:	4628      	mov	r0, r5
   14568:	f000 fd0b 	bl	14f82 <_impl_k_sem_give>
			if (len8) {
   1456c:	2e00      	cmp	r6, #0
   1456e:	d0e2      	beq.n	14536 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   14570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14574:	4640      	mov	r0, r8
   14576:	f000 fd2c 	bl	14fd2 <_impl_k_sem_take>
   1457a:	e7e9      	b.n	14550 <entropy_nrf5_get_entropy+0x28>

0001457c <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   1457c:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   1457e:	4802      	ldr	r0, [pc, #8]	; (14588 <entropy_nrf_get_entropy_isr+0xc>)
   14580:	460a      	mov	r2, r1
   14582:	4619      	mov	r1, r3
   14584:	f7ff bec6 	b.w	14314 <get>
   14588:	20001750 	.word	0x20001750

0001458c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   1458c:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   1458e:	4b08      	ldr	r3, [pc, #32]	; (145b0 <_sys_device_do_config_level+0x24>)
   14590:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   14594:	3001      	adds	r0, #1
   14596:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1459a:	4620      	mov	r0, r4
   1459c:	42a8      	cmp	r0, r5
   1459e:	f104 040c 	add.w	r4, r4, #12
   145a2:	d300      	bcc.n	145a6 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   145a4:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   145a6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   145aa:	685b      	ldr	r3, [r3, #4]
   145ac:	4798      	blx	r3
   145ae:	e7f4      	b.n	1459a <_sys_device_do_config_level+0xe>
   145b0:	0001a288 	.word	0x0001a288

000145b4 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   145b4:	4b10      	ldr	r3, [pc, #64]	; (145f8 <device_get_binding+0x44>)
{
   145b6:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   145b8:	4c10      	ldr	r4, [pc, #64]	; (145fc <device_get_binding+0x48>)
{
   145ba:	4605      	mov	r5, r0
   145bc:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   145be:	429c      	cmp	r4, r3
   145c0:	d104      	bne.n	145cc <device_get_binding+0x18>
   145c2:	4c0e      	ldr	r4, [pc, #56]	; (145fc <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   145c4:	42b4      	cmp	r4, r6
   145c6:	d109      	bne.n	145dc <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   145c8:	2400      	movs	r4, #0
   145ca:	e012      	b.n	145f2 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   145cc:	6862      	ldr	r2, [r4, #4]
   145ce:	b11a      	cbz	r2, 145d8 <device_get_binding+0x24>
   145d0:	6822      	ldr	r2, [r4, #0]
   145d2:	6812      	ldr	r2, [r2, #0]
   145d4:	42aa      	cmp	r2, r5
   145d6:	d00c      	beq.n	145f2 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   145d8:	340c      	adds	r4, #12
   145da:	e7f0      	b.n	145be <device_get_binding+0xa>
		if (!info->driver_api) {
   145dc:	6863      	ldr	r3, [r4, #4]
   145de:	b90b      	cbnz	r3, 145e4 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   145e0:	340c      	adds	r4, #12
   145e2:	e7ef      	b.n	145c4 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   145e4:	6823      	ldr	r3, [r4, #0]
   145e6:	4628      	mov	r0, r5
   145e8:	6819      	ldr	r1, [r3, #0]
   145ea:	f7ed fae5 	bl	1bb8 <strcmp>
   145ee:	2800      	cmp	r0, #0
   145f0:	d1f6      	bne.n	145e0 <device_get_binding+0x2c>
}
   145f2:	4620      	mov	r0, r4
   145f4:	bd70      	pop	{r4, r5, r6, pc}
   145f6:	bf00      	nop
   145f8:	20003fdc 	.word	0x20003fdc
   145fc:	20003f4c 	.word	0x20003f4c

00014600 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   14600:	1c43      	adds	r3, r0, #1
   14602:	d003      	beq.n	1460c <_sys_power_save_idle_exit+0xc>
   14604:	4b03      	ldr	r3, [pc, #12]	; (14614 <_sys_power_save_idle_exit+0x14>)
   14606:	681b      	ldr	r3, [r3, #0]
   14608:	4298      	cmp	r0, r3
   1460a:	db01      	blt.n	14610 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   1460c:	f7ec beec 	b.w	13e8 <_timer_idle_exit>
   14610:	4770      	bx	lr
   14612:	bf00      	nop
   14614:	20003f40 	.word	0x20003f40

00014618 <idle>:
	return list->head == list;
   14618:	4d0f      	ldr	r5, [pc, #60]	; (14658 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1461a:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   1461c:	4f0f      	ldr	r7, [pc, #60]	; (1465c <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1461e:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   14622:	f04f 0220 	mov.w	r2, #32
   14626:	f3ef 8311 	mrs	r3, BASEPRI
   1462a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   1462e:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14630:	42b3      	cmp	r3, r6
   14632:	d00a      	beq.n	1464a <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   14634:	b14b      	cbz	r3, 1464a <idle+0x32>
   14636:	691c      	ldr	r4, [r3, #16]
   14638:	1c63      	adds	r3, r4, #1
   1463a:	d008      	beq.n	1464e <idle+0x36>
   1463c:	683b      	ldr	r3, [r7, #0]
   1463e:	42a3      	cmp	r3, r4
   14640:	dd05      	ble.n	1464e <idle+0x36>
	_kernel.idle = ticks;
   14642:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   14644:	f7ed f990 	bl	1968 <k_cpu_idle>
   14648:	e7eb      	b.n	14622 <idle+0xa>
   1464a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   1464e:	4620      	mov	r0, r4
   14650:	f7ec feac 	bl	13ac <_timer_idle_enter>
   14654:	e7f5      	b.n	14642 <idle+0x2a>
   14656:	bf00      	nop
   14658:	20001978 	.word	0x20001978
   1465c:	20003f40 	.word	0x20003f40

00014660 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   14660:	4802      	ldr	r0, [pc, #8]	; (1466c <_bss_zero+0xc>)
   14662:	4a03      	ldr	r2, [pc, #12]	; (14670 <_bss_zero+0x10>)
   14664:	2100      	movs	r1, #0
   14666:	1a12      	subs	r2, r2, r0
   14668:	f7ed baf4 	b.w	1c54 <memset>
   1466c:	20000000 	.word	0x20000000
   14670:	20001a38 	.word	0x20001a38

00014674 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   14674:	4802      	ldr	r0, [pc, #8]	; (14680 <_data_copy+0xc>)
   14676:	4a03      	ldr	r2, [pc, #12]	; (14684 <_data_copy+0x10>)
   14678:	4903      	ldr	r1, [pc, #12]	; (14688 <_data_copy+0x14>)
   1467a:	1a12      	subs	r2, r2, r0
   1467c:	f7ed babe 	b.w	1bfc <memcpy>
   14680:	20003ac0 	.word	0x20003ac0
   14684:	200040a4 	.word	0x200040a4
   14688:	0001a2d8 	.word	0x0001a2d8

0001468c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1468c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1468e:	2002      	movs	r0, #2
   14690:	f7ff ff7c 	bl	1458c <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   14694:	4807      	ldr	r0, [pc, #28]	; (146b4 <bg_thread_main+0x28>)
   14696:	f7ec fc79 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1469a:	2003      	movs	r0, #3
   1469c:	f7ff ff76 	bl	1458c <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   146a0:	f000 feaa 	bl	153f8 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   146a4:	f7ec f80c 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   146a8:	4a03      	ldr	r2, [pc, #12]	; (146b8 <bg_thread_main+0x2c>)
   146aa:	7a13      	ldrb	r3, [r2, #8]
   146ac:	f023 0301 	bic.w	r3, r3, #1
   146b0:	7213      	strb	r3, [r2, #8]
   146b2:	bd08      	pop	{r3, pc}
   146b4:	0001a2a4 	.word	0x0001a2a4
   146b8:	200017d4 	.word	0x200017d4

000146bc <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   146bc:	b580      	push	{r7, lr}
   146be:	b086      	sub	sp, #24
   146c0:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   146c2:	f7ec ff15 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   146c6:	4b30      	ldr	r3, [pc, #192]	; (14788 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   146c8:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   146cc:	4b2f      	ldr	r3, [pc, #188]	; (1478c <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   146ce:	4d30      	ldr	r5, [pc, #192]	; (14790 <_Cstart+0xd4>)
   146d0:	4e30      	ldr	r6, [pc, #192]	; (14794 <_Cstart+0xd8>)
   146d2:	2400      	movs	r4, #0
   146d4:	22e0      	movs	r2, #224	; 0xe0
   146d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   146da:	77dc      	strb	r4, [r3, #31]
   146dc:	761c      	strb	r4, [r3, #24]
   146de:	765c      	strb	r4, [r3, #25]
   146e0:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   146e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   146e4:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   146e8:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   146ea:	f7ed f8ad 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   146ee:	f7ed f935 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   146f2:	4620      	mov	r0, r4
   146f4:	f7ff ff4a 	bl	1458c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   146f8:	2001      	movs	r0, #1
   146fa:	f7ff ff47 	bl	1458c <_sys_device_do_config_level>
	_sched_init();
   146fe:	f000 fbf9 	bl	14ef4 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   14702:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   14704:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   14706:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1470a:	9304      	str	r3, [sp, #16]
   1470c:	9403      	str	r4, [sp, #12]
   1470e:	9402      	str	r4, [sp, #8]
   14710:	9401      	str	r4, [sp, #4]
   14712:	9400      	str	r4, [sp, #0]
   14714:	4b20      	ldr	r3, [pc, #128]	; (14798 <_Cstart+0xdc>)
   14716:	4921      	ldr	r1, [pc, #132]	; (1479c <_Cstart+0xe0>)
   14718:	4628      	mov	r0, r5
   1471a:	f000 fe15 	bl	15348 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1471e:	7a6b      	ldrb	r3, [r5, #9]
   14720:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   14724:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14728:	726a      	strb	r2, [r5, #9]
   1472a:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   1472c:	d102      	bne.n	14734 <_Cstart+0x78>
   1472e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14730:	3301      	adds	r3, #1
   14732:	d024      	beq.n	1477e <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   14734:	2301      	movs	r3, #1
   14736:	4e1a      	ldr	r6, [pc, #104]	; (147a0 <_Cstart+0xe4>)
   14738:	9304      	str	r3, [sp, #16]
   1473a:	230f      	movs	r3, #15
   1473c:	9303      	str	r3, [sp, #12]
   1473e:	2300      	movs	r3, #0
   14740:	9302      	str	r3, [sp, #8]
   14742:	9301      	str	r3, [sp, #4]
   14744:	9300      	str	r3, [sp, #0]
   14746:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1474a:	4b16      	ldr	r3, [pc, #88]	; (147a4 <_Cstart+0xe8>)
   1474c:	4916      	ldr	r1, [pc, #88]	; (147a8 <_Cstart+0xec>)
   1474e:	4630      	mov	r0, r6
   14750:	f000 fdfa 	bl	15348 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14754:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   14756:	60e6      	str	r6, [r4, #12]
   14758:	f023 0304 	bic.w	r3, r3, #4
   1475c:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   1475e:	4b13      	ldr	r3, [pc, #76]	; (147ac <_Cstart+0xf0>)
   14760:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   14762:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   14764:	4b12      	ldr	r3, [pc, #72]	; (147b0 <_Cstart+0xf4>)

	_current = main_thread;
   14766:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   14768:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   1476c:	4c11      	ldr	r4, [pc, #68]	; (147b4 <_Cstart+0xf8>)
   1476e:	4a0a      	ldr	r2, [pc, #40]	; (14798 <_Cstart+0xdc>)
   14770:	f383 8809 	msr	PSP, r3
   14774:	2100      	movs	r1, #0
   14776:	f381 8811 	msr	BASEPRI, r1
   1477a:	4610      	mov	r0, r2
   1477c:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   1477e:	4628      	mov	r0, r5
   14780:	f000 fab4 	bl	14cec <_add_thread_to_ready_q>
   14784:	e7d6      	b.n	14734 <_Cstart+0x78>
   14786:	bf00      	nop
   14788:	200036c0 	.word	0x200036c0
   1478c:	e000ed00 	.word	0xe000ed00
   14790:	200017d4 	.word	0x200017d4
   14794:	20001978 	.word	0x20001978
   14798:	0001468d 	.word	0x0001468d
   1479c:	20002980 	.word	0x20002980
   147a0:	20001764 	.word	0x20001764
   147a4:	00014619 	.word	0x00014619
   147a8:	20002d80 	.word	0x20002d80
   147ac:	2000198c 	.word	0x2000198c
   147b0:	20002d80 	.word	0x20002d80
   147b4:	00000899 	.word	0x00000899

000147b8 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   147b8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   147ba:	4c07      	ldr	r4, [pc, #28]	; (147d8 <init_static_pools+0x20>)
   147bc:	4d07      	ldr	r5, [pc, #28]	; (147dc <init_static_pools+0x24>)
   147be:	42ac      	cmp	r4, r5
   147c0:	d301      	bcc.n	147c6 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   147c2:	2000      	movs	r0, #0
   147c4:	bd38      	pop	{r3, r4, r5, pc}
   147c6:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   147ca:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   147cc:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   147ce:	4620      	mov	r0, r4
   147d0:	f7ec f89d 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   147d4:	341c      	adds	r4, #28
   147d6:	e7f2      	b.n	147be <init_static_pools+0x6>
   147d8:	20003fdc 	.word	0x20003fdc
   147dc:	20003fdc 	.word	0x20003fdc

000147e0 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   147e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   147e4:	1e1d      	subs	r5, r3, #0
{
   147e6:	b085      	sub	sp, #20
   147e8:	4607      	mov	r7, r0
   147ea:	460c      	mov	r4, r1
   147ec:	4692      	mov	sl, r2
	if (timeout > 0) {
   147ee:	dd4c      	ble.n	1488a <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   147f0:	f000 fc16 	bl	15020 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   147f4:	f105 0309 	add.w	r3, r5, #9
   147f8:	220a      	movs	r2, #10
   147fa:	fbb3 f3f2 	udiv	r3, r3, r2
   147fe:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   14802:	4b23      	ldr	r3, [pc, #140]	; (14890 <k_mem_pool_alloc+0xb0>)
   14804:	4e23      	ldr	r6, [pc, #140]	; (14894 <k_mem_pool_alloc+0xb4>)
   14806:	1afb      	subs	r3, r7, r3
   14808:	109b      	asrs	r3, r3, #2
   1480a:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   1480c:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1480e:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   14812:	9400      	str	r4, [sp, #0]
   14814:	ab03      	add	r3, sp, #12
   14816:	aa02      	add	r2, sp, #8
   14818:	4651      	mov	r1, sl
   1481a:	4638      	mov	r0, r7
   1481c:	f7ec f8c2 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   14820:	f110 0f0b 	cmn.w	r0, #11
   14824:	d10b      	bne.n	1483e <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   14826:	9400      	str	r4, [sp, #0]
   14828:	ab03      	add	r3, sp, #12
   1482a:	aa02      	add	r2, sp, #8
   1482c:	4651      	mov	r1, sl
   1482e:	4638      	mov	r0, r7
   14830:	f7ec f8b8 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   14834:	f110 0f0b 	cmn.w	r0, #11
   14838:	bf08      	it	eq
   1483a:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   1483e:	7963      	ldrb	r3, [r4, #5]
   14840:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   14842:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   14844:	f362 0303 	bfi	r3, r2, #0, #4
   14848:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   1484a:	6863      	ldr	r3, [r4, #4]
   1484c:	9a03      	ldr	r2, [sp, #12]
   1484e:	f362 331f 	bfi	r3, r2, #12, #20
   14852:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   14854:	b1b0      	cbz	r0, 14884 <k_mem_pool_alloc+0xa4>
   14856:	b1ad      	cbz	r5, 14884 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   14858:	f110 0f0c 	cmn.w	r0, #12
   1485c:	d112      	bne.n	14884 <k_mem_pool_alloc+0xa4>
   1485e:	f04f 0320 	mov.w	r3, #32
   14862:	f3ef 8011 	mrs	r0, BASEPRI
   14866:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1486a:	462a      	mov	r2, r5
   1486c:	4659      	mov	r1, fp
   1486e:	f000 faeb 	bl	14e48 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   14872:	1c6b      	adds	r3, r5, #1
   14874:	d0cd      	beq.n	14812 <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   14876:	f000 fbd3 	bl	15020 <_tick_get>

			if (timeout < 0) {
   1487a:	ebb8 0500 	subs.w	r5, r8, r0
   1487e:	d5c8      	bpl.n	14812 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   14880:	f06f 000a 	mvn.w	r0, #10
}
   14884:	b005      	add	sp, #20
   14886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1488a:	f04f 0800 	mov.w	r8, #0
   1488e:	e7b8      	b.n	14802 <k_mem_pool_alloc+0x22>
   14890:	20003fdc 	.word	0x20003fdc
   14894:	b6db6db7 	.word	0xb6db6db7

00014898 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   14898:	b570      	push	{r4, r5, r6, lr}
   1489a:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1489c:	6802      	ldr	r2, [r0, #0]
   1489e:	7841      	ldrb	r1, [r0, #1]
   148a0:	4e13      	ldr	r6, [pc, #76]	; (148f0 <k_mem_pool_free_id+0x58>)
   148a2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   148a6:	00a4      	lsls	r4, r4, #2
   148a8:	0b12      	lsrs	r2, r2, #12
   148aa:	f001 010f 	and.w	r1, r1, #15
   148ae:	1930      	adds	r0, r6, r4
   148b0:	f7ec f92a 	bl	b08 <_sys_mem_pool_block_free>
   148b4:	f04f 0320 	mov.w	r3, #32
   148b8:	f3ef 8511 	mrs	r5, BASEPRI
   148bc:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   148c0:	f104 0014 	add.w	r0, r4, #20
   148c4:	4430      	add	r0, r6
   148c6:	f000 fb05 	bl	14ed4 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   148ca:	b140      	cbz	r0, 148de <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   148cc:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   148d0:	2b0d      	cmp	r3, #13
   148d2:	d804      	bhi.n	148de <k_mem_pool_free_id+0x46>
   148d4:	b133      	cbz	r3, 148e4 <k_mem_pool_free_id+0x4c>
   148d6:	4b07      	ldr	r3, [pc, #28]	; (148f4 <k_mem_pool_free_id+0x5c>)
   148d8:	685b      	ldr	r3, [r3, #4]
   148da:	051b      	lsls	r3, r3, #20
   148dc:	d402      	bmi.n	148e4 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   148de:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   148e2:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   148e4:	4628      	mov	r0, r5
}
   148e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   148ea:	f000 b9a7 	b.w	14c3c <_reschedule>
   148ee:	bf00      	nop
   148f0:	20003fdc 	.word	0x20003fdc
   148f4:	e000ed00 	.word	0xe000ed00

000148f8 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   148f8:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   148fa:	1d0a      	adds	r2, r1, #4
   148fc:	d204      	bcs.n	14908 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   148fe:	2300      	movs	r3, #0
   14900:	4669      	mov	r1, sp
   14902:	f7ff ff6d 	bl	147e0 <k_mem_pool_alloc>
   14906:	b118      	cbz	r0, 14910 <k_mem_pool_malloc+0x18>
		return NULL;
   14908:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   1490a:	b003      	add	sp, #12
   1490c:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   14910:	2204      	movs	r2, #4
   14912:	eb0d 0102 	add.w	r1, sp, r2
   14916:	9800      	ldr	r0, [sp, #0]
   14918:	f7ed f970 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   1491c:	9800      	ldr	r0, [sp, #0]
   1491e:	3004      	adds	r0, #4
   14920:	e7f3      	b.n	1490a <k_mem_pool_malloc+0x12>

00014922 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   14922:	b110      	cbz	r0, 1492a <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   14924:	3804      	subs	r0, #4
   14926:	f7ff bfb7 	b.w	14898 <k_mem_pool_free_id>
   1492a:	4770      	bx	lr

0001492c <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   1492c:	4b03      	ldr	r3, [pc, #12]	; (1493c <z_thread_malloc+0x10>)
   1492e:	689b      	ldr	r3, [r3, #8]
{
   14930:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   14932:	6e58      	ldr	r0, [r3, #100]	; 0x64
   14934:	b108      	cbz	r0, 1493a <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   14936:	f7ff bfdf 	b.w	148f8 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1493a:	4770      	bx	lr
   1493c:	20001978 	.word	0x20001978

00014940 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   14940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14942:	4605      	mov	r5, r0
   14944:	460f      	mov	r7, r1
   14946:	4614      	mov	r4, r2
	__asm__ volatile(
   14948:	f04f 0220 	mov.w	r2, #32
   1494c:	f3ef 8611 	mrs	r6, BASEPRI
   14950:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   14954:	b1a3      	cbz	r3, 14980 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   14956:	2008      	movs	r0, #8
   14958:	f7ff ffe8 	bl	1492c <z_thread_malloc>
		if (!anode) {
   1495c:	2800      	cmp	r0, #0
   1495e:	d034      	beq.n	149ca <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   14960:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   14962:	6044      	str	r4, [r0, #4]
   14964:	6003      	str	r3, [r0, #0]
   14966:	4604      	mov	r4, r0
   14968:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   1496a:	b95f      	cbnz	r7, 14984 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1496c:	682a      	ldr	r2, [r5, #0]
   1496e:	f003 0303 	and.w	r3, r3, #3
   14972:	4313      	orrs	r3, r2
   14974:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   14976:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   14978:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1497a:	b973      	cbnz	r3, 1499a <queue_insert+0x5a>
	list->tail = node;
   1497c:	606c      	str	r4, [r5, #4]
   1497e:	e00c      	b.n	1499a <queue_insert+0x5a>
	node->next_and_flags = flags;
   14980:	6023      	str	r3, [r4, #0]
   14982:	e7f1      	b.n	14968 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14984:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   14986:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1498a:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   1498e:	d114      	bne.n	149ba <queue_insert+0x7a>
   14990:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14992:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   14994:	b95a      	cbnz	r2, 149ae <queue_insert+0x6e>
	list->tail = node;
   14996:	606c      	str	r4, [r5, #4]
	list->head = node;
   14998:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   1499a:	2104      	movs	r1, #4
   1499c:	f105 0008 	add.w	r0, r5, #8
   149a0:	f000 ffb4 	bl	1590c <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   149a4:	4630      	mov	r0, r6
   149a6:	f000 f949 	bl	14c3c <_reschedule>
	return 0;
   149aa:	2000      	movs	r0, #0
   149ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   149ae:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   149b0:	f003 0303 	and.w	r3, r3, #3
   149b4:	4323      	orrs	r3, r4
   149b6:	6013      	str	r3, [r2, #0]
   149b8:	e7e0      	b.n	1497c <queue_insert+0x3c>
   149ba:	4313      	orrs	r3, r2
   149bc:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   149be:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   149c0:	f002 0203 	and.w	r2, r2, #3
   149c4:	4314      	orrs	r4, r2
   149c6:	603c      	str	r4, [r7, #0]
   149c8:	e7e7      	b.n	1499a <queue_insert+0x5a>
			return -ENOMEM;
   149ca:	f06f 000b 	mvn.w	r0, #11
}
   149ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000149d0 <z_queue_node_peek>:
{
   149d0:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   149d2:	4604      	mov	r4, r0
   149d4:	b130      	cbz	r0, 149e4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   149d6:	6802      	ldr	r2, [r0, #0]
   149d8:	0793      	lsls	r3, r2, #30
   149da:	d003      	beq.n	149e4 <z_queue_node_peek+0x14>
		ret = anode->data;
   149dc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   149de:	b109      	cbz	r1, 149e4 <z_queue_node_peek+0x14>
			k_free(anode);
   149e0:	f7ff ff9f 	bl	14922 <k_free>
}
   149e4:	4620      	mov	r0, r4
   149e6:	bd10      	pop	{r4, pc}

000149e8 <_impl_k_queue_init>:
	list->head = NULL;
   149e8:	2300      	movs	r3, #0
   149ea:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   149ec:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   149ee:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   149f2:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   149f4:	60c3      	str	r3, [r0, #12]
   149f6:	4770      	bx	lr

000149f8 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   149f8:	460a      	mov	r2, r1
   149fa:	2300      	movs	r3, #0
   149fc:	6841      	ldr	r1, [r0, #4]
   149fe:	f7ff bf9f 	b.w	14940 <queue_insert>

00014a02 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   14a02:	2300      	movs	r3, #0
   14a04:	460a      	mov	r2, r1
   14a06:	4619      	mov	r1, r3
   14a08:	f7ff bf9a 	b.w	14940 <queue_insert>

00014a0c <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   14a0c:	b538      	push	{r3, r4, r5, lr}
   14a0e:	f04f 0320 	mov.w	r3, #32
   14a12:	f3ef 8511 	mrs	r5, BASEPRI
   14a16:	f383 8811 	msr	BASEPRI, r3
   14a1a:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   14a1c:	b953      	cbnz	r3, 14a34 <k_queue_append_list+0x28>
	list->head = node;
   14a1e:	6001      	str	r1, [r0, #0]
	list->tail = node;
   14a20:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   14a22:	2104      	movs	r1, #4
   14a24:	3008      	adds	r0, #8
   14a26:	f000 ff71 	bl	1590c <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   14a2a:	4628      	mov	r0, r5
}
   14a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   14a30:	f000 b904 	b.w	14c3c <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14a34:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a36:	f004 0403 	and.w	r4, r4, #3
   14a3a:	4321      	orrs	r1, r4
   14a3c:	6019      	str	r1, [r3, #0]
   14a3e:	e7ef      	b.n	14a20 <k_queue_append_list+0x14>

00014a40 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   14a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a44:	4604      	mov	r4, r0
   14a46:	b086      	sub	sp, #24
   14a48:	460d      	mov	r5, r1
   14a4a:	f04f 0320 	mov.w	r3, #32
   14a4e:	f3ef 8711 	mrs	r7, BASEPRI
   14a52:	f383 8811 	msr	BASEPRI, r3
   14a56:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   14a58:	b182      	cbz	r2, 14a7c <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14a5a:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14a5c:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14a5e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14a62:	428a      	cmp	r2, r1
	list->head = node;
   14a64:	6003      	str	r3, [r0, #0]
	list->tail = node;
   14a66:	bf08      	it	eq
   14a68:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14a6a:	2101      	movs	r1, #1
   14a6c:	4610      	mov	r0, r2
   14a6e:	f7ff ffaf 	bl	149d0 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14a72:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   14a76:	b006      	add	sp, #24
   14a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   14a7c:	b919      	cbnz	r1, 14a86 <_impl_k_queue_get+0x46>
   14a7e:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   14a82:	2000      	movs	r0, #0
   14a84:	e7f7      	b.n	14a76 <_impl_k_queue_get+0x36>
   14a86:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   14a8a:	2104      	movs	r1, #4
   14a8c:	4603      	mov	r3, r0
   14a8e:	eb0d 0001 	add.w	r0, sp, r1
   14a92:	f000 fea4 	bl	157de <k_poll_event_init>
	if (timeout != K_FOREVER) {
   14a96:	1c6a      	adds	r2, r5, #1
   14a98:	d002      	beq.n	14aa0 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14a9a:	f000 fab7 	bl	1500c <_impl_k_uptime_get_32>
   14a9e:	4606      	mov	r6, r0
{
   14aa0:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   14aa2:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   14aa6:	1bea      	subs	r2, r5, r7
   14aa8:	f36f 1307 	bfc	r3, #4, #4
   14aac:	2101      	movs	r1, #1
   14aae:	a801      	add	r0, sp, #4
   14ab0:	f88d 3011 	strb.w	r3, [sp, #17]
   14ab4:	f000 fea6 	bl	15804 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   14ab8:	b108      	cbz	r0, 14abe <_impl_k_queue_get+0x7e>
   14aba:	300b      	adds	r0, #11
   14abc:	d1e1      	bne.n	14a82 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   14abe:	f04f 0320 	mov.w	r3, #32
   14ac2:	f3ef 8811 	mrs	r8, BASEPRI
   14ac6:	f383 8811 	msr	BASEPRI, r3
   14aca:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   14acc:	b138      	cbz	r0, 14ade <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14ace:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14ad0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14ad2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14ad6:	4290      	cmp	r0, r2
	list->head = node;
   14ad8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   14ada:	bf08      	it	eq
   14adc:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   14ade:	2101      	movs	r1, #1
   14ae0:	f7ff ff76 	bl	149d0 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14ae4:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   14ae8:	2800      	cmp	r0, #0
   14aea:	d1c4      	bne.n	14a76 <_impl_k_queue_get+0x36>
   14aec:	1c6b      	adds	r3, r5, #1
   14aee:	d0d8      	beq.n	14aa2 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14af0:	f000 fa8c 	bl	1500c <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   14af4:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   14af6:	42bd      	cmp	r5, r7
   14af8:	dad3      	bge.n	14aa2 <_impl_k_queue_get+0x62>
   14afa:	e7c2      	b.n	14a82 <_impl_k_queue_get+0x42>

00014afc <sys_dlist_remove>:
	node->prev->next = node->next;
   14afc:	e890 000c 	ldmia.w	r0, {r2, r3}
   14b00:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14b02:	6802      	ldr	r2, [r0, #0]
   14b04:	6053      	str	r3, [r2, #4]
   14b06:	4770      	bx	lr

00014b08 <_abort_timeout>:
{
   14b08:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14b0a:	6900      	ldr	r0, [r0, #16]
{
   14b0c:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14b0e:	1c43      	adds	r3, r0, #1
   14b10:	d00e      	beq.n	14b30 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14b12:	4b08      	ldr	r3, [pc, #32]	; (14b34 <_abort_timeout+0x2c>)
   14b14:	699b      	ldr	r3, [r3, #24]
   14b16:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   14b18:	bf1f      	itttt	ne
   14b1a:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14b1c:	6913      	ldrne	r3, [r2, #16]
   14b1e:	18c0      	addne	r0, r0, r3
   14b20:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   14b22:	4608      	mov	r0, r1
   14b24:	f7ff ffea 	bl	14afc <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   14b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b2c:	610b      	str	r3, [r1, #16]
	return 0;
   14b2e:	2000      	movs	r0, #0
}
   14b30:	bd08      	pop	{r3, pc}
   14b32:	bf00      	nop
   14b34:	20001978 	.word	0x20001978

00014b38 <k_spin_lock.isra.11>:
	__asm__ volatile(
   14b38:	f04f 0320 	mov.w	r3, #32
   14b3c:	f3ef 8011 	mrs	r0, BASEPRI
   14b40:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   14b44:	4770      	bx	lr
	...

00014b48 <update_cache>:
	return list->head == list;
   14b48:	4b0d      	ldr	r3, [pc, #52]	; (14b80 <update_cache+0x38>)
   14b4a:	4619      	mov	r1, r3
   14b4c:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14b50:	428a      	cmp	r2, r1
   14b52:	d000      	beq.n	14b56 <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   14b54:	b902      	cbnz	r2, 14b58 <update_cache+0x10>
   14b56:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   14b58:	b970      	cbnz	r0, 14b78 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   14b5a:	6899      	ldr	r1, [r3, #8]
   14b5c:	b161      	cbz	r1, 14b78 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   14b5e:	7a48      	ldrb	r0, [r1, #9]
   14b60:	06c0      	lsls	r0, r0, #27
   14b62:	d109      	bne.n	14b78 <update_cache+0x30>
   14b64:	6a48      	ldr	r0, [r1, #36]	; 0x24
   14b66:	3001      	adds	r0, #1
   14b68:	d106      	bne.n	14b78 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   14b6a:	8948      	ldrh	r0, [r1, #10]
   14b6c:	287f      	cmp	r0, #127	; 0x7f
   14b6e:	d903      	bls.n	14b78 <update_cache+0x30>
	return thread == _idle_thread;
   14b70:	4804      	ldr	r0, [pc, #16]	; (14b84 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   14b72:	6800      	ldr	r0, [r0, #0]
   14b74:	4281      	cmp	r1, r0
   14b76:	d101      	bne.n	14b7c <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   14b78:	621a      	str	r2, [r3, #32]
   14b7a:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   14b7c:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   14b7e:	4770      	bx	lr
   14b80:	20001978 	.word	0x20001978
   14b84:	0001a2a0 	.word	0x0001a2a0

00014b88 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   14b88:	f990 000a 	ldrsb.w	r0, [r0, #10]
   14b8c:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   14b90:	4298      	cmp	r0, r3
   14b92:	bfac      	ite	ge
   14b94:	2000      	movge	r0, #0
   14b96:	2001      	movlt	r0, #1
   14b98:	4770      	bx	lr
	...

00014b9c <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   14b9c:	b510      	push	{r4, lr}
   14b9e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14ba0:	f7ff ffca 	bl	14b38 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   14ba4:	7a4b      	ldrb	r3, [r1, #9]
   14ba6:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   14ba8:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   14baa:	d50d      	bpl.n	14bc8 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   14bac:	4608      	mov	r0, r1
   14bae:	f7ff ffa5 	bl	14afc <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   14bb2:	7a4b      	ldrb	r3, [r1, #9]
   14bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14bb8:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   14bba:	4b05      	ldr	r3, [pc, #20]	; (14bd0 <_remove_thread_from_ready_q+0x34>)
   14bbc:	6898      	ldr	r0, [r3, #8]
   14bbe:	1a43      	subs	r3, r0, r1
   14bc0:	4258      	negs	r0, r3
   14bc2:	4158      	adcs	r0, r3
   14bc4:	f7ff ffc0 	bl	14b48 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14bc8:	f384 8811 	msr	BASEPRI, r4
   14bcc:	bd10      	pop	{r4, pc}
   14bce:	bf00      	nop
   14bd0:	20001978 	.word	0x20001978

00014bd4 <_find_first_thread_to_unpend>:
{
   14bd4:	b508      	push	{r3, lr}
   14bd6:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   14bd8:	f7ff ffae 	bl	14b38 <k_spin_lock.isra.11>
	return list->head == list;
   14bdc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14bde:	429a      	cmp	r2, r3
   14be0:	bf08      	it	eq
   14be2:	2300      	moveq	r3, #0
   14be4:	f380 8811 	msr	BASEPRI, r0
}
   14be8:	4618      	mov	r0, r3
   14bea:	bd08      	pop	{r3, pc}

00014bec <_unpend_thread_no_timeout>:
{
   14bec:	b510      	push	{r4, lr}
   14bee:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   14bf0:	f7ff ffa2 	bl	14b38 <k_spin_lock.isra.11>
   14bf4:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   14bf6:	4608      	mov	r0, r1
   14bf8:	f7ff ff80 	bl	14afc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14bfc:	7a4b      	ldrb	r3, [r1, #9]
   14bfe:	f023 0302 	bic.w	r3, r3, #2
   14c02:	724b      	strb	r3, [r1, #9]
   14c04:	f384 8811 	msr	BASEPRI, r4
   14c08:	bd10      	pop	{r4, pc}

00014c0a <_unpend_first_thread>:
{
   14c0a:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   14c0c:	2100      	movs	r1, #0
   14c0e:	f7ff ffe1 	bl	14bd4 <_find_first_thread_to_unpend>

	if (thread) {
   14c12:	4604      	mov	r4, r0
   14c14:	b128      	cbz	r0, 14c22 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   14c16:	f7ff ffe9 	bl	14bec <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   14c1a:	f104 0014 	add.w	r0, r4, #20
   14c1e:	f7ff ff73 	bl	14b08 <_abort_timeout>
}
   14c22:	4620      	mov	r0, r4
   14c24:	bd10      	pop	{r4, pc}

00014c26 <_unpend_thread>:
{
   14c26:	b510      	push	{r4, lr}
   14c28:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   14c2a:	f7ff ffdf 	bl	14bec <_unpend_thread_no_timeout>
   14c2e:	f104 0014 	add.w	r0, r4, #20
}
   14c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14c36:	f7ff bf67 	b.w	14b08 <_abort_timeout>
	...

00014c3c <_reschedule>:
   14c3c:	f3ef 8305 	mrs	r3, IPSR
   14c40:	2b0d      	cmp	r3, #13
   14c42:	d809      	bhi.n	14c58 <_reschedule+0x1c>
   14c44:	b11b      	cbz	r3, 14c4e <_reschedule+0x12>
   14c46:	4b09      	ldr	r3, [pc, #36]	; (14c6c <_reschedule+0x30>)
   14c48:	685b      	ldr	r3, [r3, #4]
   14c4a:	051b      	lsls	r3, r3, #20
   14c4c:	d504      	bpl.n	14c58 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   14c4e:	4b08      	ldr	r3, [pc, #32]	; (14c70 <_reschedule+0x34>)
   14c50:	689a      	ldr	r2, [r3, #8]
   14c52:	6a1b      	ldr	r3, [r3, #32]
   14c54:	429a      	cmp	r2, r3
   14c56:	d103      	bne.n	14c60 <_reschedule+0x24>
   14c58:	f380 8811 	msr	BASEPRI, r0
}
   14c5c:	2000      	movs	r0, #0
   14c5e:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14c60:	4b04      	ldr	r3, [pc, #16]	; (14c74 <_reschedule+0x38>)
   14c62:	2200      	movs	r2, #0
   14c64:	601a      	str	r2, [r3, #0]
   14c66:	f7ec bc4f 	b.w	1508 <__swap>
   14c6a:	bf00      	nop
   14c6c:	e000ed00 	.word	0xe000ed00
   14c70:	20001978 	.word	0x20001978
   14c74:	200019ac 	.word	0x200019ac

00014c78 <k_sched_unlock>:
{
   14c78:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   14c7a:	f7ff ff5d 	bl	14b38 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   14c7e:	4b0a      	ldr	r3, [pc, #40]	; (14ca8 <k_sched_unlock+0x30>)
   14c80:	689a      	ldr	r2, [r3, #8]
   14c82:	7ad3      	ldrb	r3, [r2, #11]
   14c84:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   14c86:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   14c88:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   14c8a:	2001      	movs	r0, #1
   14c8c:	f7ff ff5c 	bl	14b48 <update_cache>
   14c90:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   14c94:	f04f 0320 	mov.w	r3, #32
   14c98:	f3ef 8011 	mrs	r0, BASEPRI
   14c9c:	f383 8811 	msr	BASEPRI, r3
}
   14ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   14ca4:	f7ff bfca 	b.w	14c3c <_reschedule>
   14ca8:	20001978 	.word	0x20001978

00014cac <_priq_dumb_add>:
{
   14cac:	b510      	push	{r4, lr}
	return list->head == list;
   14cae:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14cb0:	4298      	cmp	r0, r3
   14cb2:	bf08      	it	eq
   14cb4:	2300      	moveq	r3, #0
   14cb6:	b193      	cbz	r3, 14cde <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   14cb8:	f991 400a 	ldrsb.w	r4, [r1, #10]
   14cbc:	f993 200a 	ldrsb.w	r2, [r3, #10]
   14cc0:	4294      	cmp	r4, r2
   14cc2:	da06      	bge.n	14cd2 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   14cc4:	685a      	ldr	r2, [r3, #4]
   14cc6:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14cc8:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14cca:	685a      	ldr	r2, [r3, #4]
   14ccc:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14cce:	6059      	str	r1, [r3, #4]
   14cd0:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   14cd2:	6842      	ldr	r2, [r0, #4]
   14cd4:	4293      	cmp	r3, r2
   14cd6:	d002      	beq.n	14cde <_priq_dumb_add+0x32>
   14cd8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14cda:	2b00      	cmp	r3, #0
   14cdc:	d1eb      	bne.n	14cb6 <_priq_dumb_add+0xa>
	node->next = list;
   14cde:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14ce0:	6843      	ldr	r3, [r0, #4]
   14ce2:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14ce4:	6843      	ldr	r3, [r0, #4]
   14ce6:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14ce8:	6041      	str	r1, [r0, #4]
   14cea:	bd10      	pop	{r4, pc}

00014cec <_add_thread_to_ready_q>:
{
   14cec:	b538      	push	{r3, r4, r5, lr}
   14cee:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14cf0:	f7ff ff22 	bl	14b38 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14cf4:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   14cf6:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14cf8:	4806      	ldr	r0, [pc, #24]	; (14d14 <_add_thread_to_ready_q+0x28>)
   14cfa:	f7ff ffd7 	bl	14cac <_priq_dumb_add>
	thread->base.thread_state |= states;
   14cfe:	7a63      	ldrb	r3, [r4, #9]
   14d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14d04:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   14d06:	2000      	movs	r0, #0
   14d08:	f7ff ff1e 	bl	14b48 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14d0c:	f385 8811 	msr	BASEPRI, r5
   14d10:	bd38      	pop	{r3, r4, r5, pc}
   14d12:	bf00      	nop
   14d14:	2000199c 	.word	0x2000199c

00014d18 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   14d18:	7a42      	ldrb	r2, [r0, #9]
   14d1a:	06d2      	lsls	r2, r2, #27
   14d1c:	d104      	bne.n	14d28 <_ready_thread+0x10>
   14d1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14d20:	3301      	adds	r3, #1
   14d22:	d101      	bne.n	14d28 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   14d24:	f7ff bfe2 	b.w	14cec <_add_thread_to_ready_q>
   14d28:	4770      	bx	lr
	...

00014d2c <_add_timeout>:
{
   14d2c:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14d2e:	610b      	str	r3, [r1, #16]
{
   14d30:	4604      	mov	r4, r0
   14d32:	461d      	mov	r5, r3
	timeout->thread = thread;
   14d34:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14d36:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   14d38:	bb03      	cbnz	r3, 14d7c <_add_timeout+0x50>
	__asm__ volatile(
   14d3a:	f04f 0320 	mov.w	r3, #32
   14d3e:	f3ef 8611 	mrs	r6, BASEPRI
   14d42:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   14d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d4a:	610b      	str	r3, [r1, #16]
	if (thread) {
   14d4c:	b170      	cbz	r0, 14d6c <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   14d4e:	68cb      	ldr	r3, [r1, #12]
   14d50:	b113      	cbz	r3, 14d58 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   14d52:	f7ff ff4b 	bl	14bec <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   14d56:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14d58:	7a63      	ldrb	r3, [r4, #9]
   14d5a:	f023 0304 	bic.w	r3, r3, #4
   14d5e:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   14d60:	4620      	mov	r0, r4
   14d62:	f7ff ffd9 	bl	14d18 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14d66:	f386 8811 	msr	BASEPRI, r6
   14d6a:	bd70      	pop	{r4, r5, r6, pc}
   14d6c:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   14d70:	694b      	ldr	r3, [r1, #20]
   14d72:	b32b      	cbz	r3, 14dc0 <_add_timeout+0x94>
			timeout->func(timeout);
   14d74:	4608      	mov	r0, r1
}
   14d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   14d7a:	4718      	bx	r3
	return list->head == list;
   14d7c:	4a11      	ldr	r2, [pc, #68]	; (14dc4 <_add_timeout+0x98>)
   14d7e:	4610      	mov	r0, r2
   14d80:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14d84:	4283      	cmp	r3, r0
   14d86:	d10c      	bne.n	14da2 <_add_timeout+0x76>
	node->next = list;
   14d88:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14d8a:	6993      	ldr	r3, [r2, #24]
   14d8c:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14d8e:	6993      	ldr	r3, [r2, #24]
   14d90:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14d92:	6191      	str	r1, [r2, #24]
   14d94:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   14d96:	1b64      	subs	r4, r4, r5
   14d98:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   14d9a:	6994      	ldr	r4, [r2, #24]
   14d9c:	42a3      	cmp	r3, r4
   14d9e:	d0f3      	beq.n	14d88 <_add_timeout+0x5c>
   14da0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14da2:	2b00      	cmp	r3, #0
   14da4:	d0f0      	beq.n	14d88 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   14da6:	690c      	ldr	r4, [r1, #16]
   14da8:	691d      	ldr	r5, [r3, #16]
   14daa:	42ac      	cmp	r4, r5
   14dac:	dcf3      	bgt.n	14d96 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   14dae:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14db0:	1b2c      	subs	r4, r5, r4
   14db2:	611c      	str	r4, [r3, #16]
   14db4:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14db6:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14db8:	685a      	ldr	r2, [r3, #4]
   14dba:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14dbc:	6059      	str	r1, [r3, #4]
   14dbe:	bd70      	pop	{r4, r5, r6, pc}
   14dc0:	bd70      	pop	{r4, r5, r6, pc}
   14dc2:	bf00      	nop
   14dc4:	20001978 	.word	0x20001978

00014dc8 <_move_thread_to_end_of_prio_q>:
{
   14dc8:	b538      	push	{r3, r4, r5, lr}
   14dca:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14dcc:	f7ff feb4 	bl	14b38 <k_spin_lock.isra.11>
   14dd0:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   14dd2:	4620      	mov	r0, r4
   14dd4:	f7ff fe92 	bl	14afc <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14dd8:	4621      	mov	r1, r4
   14dda:	4806      	ldr	r0, [pc, #24]	; (14df4 <_move_thread_to_end_of_prio_q+0x2c>)
   14ddc:	f7ff ff66 	bl	14cac <_priq_dumb_add>
	thread->base.thread_state |= states;
   14de0:	7a63      	ldrb	r3, [r4, #9]
   14de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14de6:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   14de8:	2000      	movs	r0, #0
   14dea:	f7ff fead 	bl	14b48 <update_cache>
   14dee:	f385 8811 	msr	BASEPRI, r5
   14df2:	bd38      	pop	{r3, r4, r5, pc}
   14df4:	2000199c 	.word	0x2000199c

00014df8 <pend>:
{
   14df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dfa:	4605      	mov	r5, r0
   14dfc:	4614      	mov	r4, r2
   14dfe:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   14e00:	f7ff fecc 	bl	14b9c <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   14e04:	7a6b      	ldrb	r3, [r5, #9]
   14e06:	f043 0302 	orr.w	r3, r3, #2
   14e0a:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   14e0c:	1c63      	adds	r3, r4, #1
   14e0e:	d012      	beq.n	14e36 <pend+0x3e>
	__asm__ volatile(
   14e10:	f04f 0320 	mov.w	r3, #32
   14e14:	f3ef 8711 	mrs	r7, BASEPRI
   14e18:	f383 8811 	msr	BASEPRI, r3
   14e1c:	230a      	movs	r3, #10
   14e1e:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14e20:	4632      	mov	r2, r6
   14e22:	fbb4 f3f3 	udiv	r3, r4, r3
   14e26:	f105 0114 	add.w	r1, r5, #20
   14e2a:	3301      	adds	r3, #1
   14e2c:	4628      	mov	r0, r5
   14e2e:	f7ff ff7d 	bl	14d2c <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14e32:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   14e36:	b12e      	cbz	r6, 14e44 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   14e38:	4629      	mov	r1, r5
   14e3a:	4630      	mov	r0, r6
}
   14e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   14e40:	f7ff bf34 	b.w	14cac <_priq_dumb_add>
   14e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00014e48 <_pend_current_thread>:
{
   14e48:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   14e4a:	4b06      	ldr	r3, [pc, #24]	; (14e64 <_pend_current_thread+0x1c>)
{
   14e4c:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   14e4e:	6898      	ldr	r0, [r3, #8]
   14e50:	f7ff ffd2 	bl	14df8 <pend>
	_time_slice_elapsed = 0;
   14e54:	4b04      	ldr	r3, [pc, #16]	; (14e68 <_pend_current_thread+0x20>)
   14e56:	2200      	movs	r2, #0
   14e58:	4620      	mov	r0, r4
}
   14e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   14e5e:	601a      	str	r2, [r3, #0]
   14e60:	f7ec bb52 	b.w	1508 <__swap>
   14e64:	20001978 	.word	0x20001978
   14e68:	200019ac 	.word	0x200019ac

00014e6c <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14e6c:	4b13      	ldr	r3, [pc, #76]	; (14ebc <_is_thread_time_slicing+0x50>)
   14e6e:	681b      	ldr	r3, [r3, #0]
   14e70:	2b00      	cmp	r3, #0
{
   14e72:	b510      	push	{r4, lr}
   14e74:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14e76:	dd1f      	ble.n	14eb8 <_is_thread_time_slicing+0x4c>
   14e78:	8943      	ldrh	r3, [r0, #10]
   14e7a:	2b7f      	cmp	r3, #127	; 0x7f
   14e7c:	d81c      	bhi.n	14eb8 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   14e7e:	4b10      	ldr	r3, [pc, #64]	; (14ec0 <_is_thread_time_slicing+0x54>)
   14e80:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   14e84:	681b      	ldr	r3, [r3, #0]
   14e86:	4299      	cmp	r1, r3
   14e88:	db16      	blt.n	14eb8 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   14e8a:	f7ff fe55 	bl	14b38 <k_spin_lock.isra.11>
	return list->head == list;
   14e8e:	490d      	ldr	r1, [pc, #52]	; (14ec4 <_is_thread_time_slicing+0x58>)
   14e90:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e94:	428b      	cmp	r3, r1
   14e96:	4604      	mov	r4, r0
   14e98:	d00a      	beq.n	14eb0 <_is_thread_time_slicing+0x44>
		if (next) {
   14e9a:	b15b      	cbz	r3, 14eb4 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   14e9c:	f992 000a 	ldrsb.w	r0, [r2, #10]
   14ea0:	f993 300a 	ldrsb.w	r3, [r3, #10]
   14ea4:	1ac3      	subs	r3, r0, r3
   14ea6:	4258      	negs	r0, r3
   14ea8:	4158      	adcs	r0, r3
   14eaa:	f384 8811 	msr	BASEPRI, r4
	return ret;
   14eae:	bd10      	pop	{r4, pc}
   14eb0:	2000      	movs	r0, #0
   14eb2:	e7fa      	b.n	14eaa <_is_thread_time_slicing+0x3e>
   14eb4:	4618      	mov	r0, r3
   14eb6:	e7f8      	b.n	14eaa <_is_thread_time_slicing+0x3e>
		return 0;
   14eb8:	2000      	movs	r0, #0
}
   14eba:	bd10      	pop	{r4, pc}
   14ebc:	20001844 	.word	0x20001844
   14ec0:	20001848 	.word	0x20001848
   14ec4:	20001978 	.word	0x20001978

00014ec8 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   14ec8:	4b01      	ldr	r3, [pc, #4]	; (14ed0 <_update_time_slice_before_swap+0x8>)
   14eca:	2200      	movs	r2, #0
   14ecc:	601a      	str	r2, [r3, #0]
   14ece:	4770      	bx	lr
   14ed0:	200019ac 	.word	0x200019ac

00014ed4 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   14ed4:	b538      	push	{r3, r4, r5, lr}
   14ed6:	4605      	mov	r5, r0
	int need_sched = 0;
   14ed8:	2000      	movs	r0, #0
	return list->head == list;
   14eda:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14edc:	42a5      	cmp	r5, r4
   14ede:	d000      	beq.n	14ee2 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   14ee0:	b904      	cbnz	r4, 14ee4 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   14ee2:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   14ee4:	4620      	mov	r0, r4
   14ee6:	f7ff fe9e 	bl	14c26 <_unpend_thread>
		_ready_thread(th);
   14eea:	4620      	mov	r0, r4
   14eec:	f7ff ff14 	bl	14d18 <_ready_thread>
		need_sched = 1;
   14ef0:	2001      	movs	r0, #1
   14ef2:	e7f2      	b.n	14eda <_unpend_all+0x6>

00014ef4 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   14ef4:	4b02      	ldr	r3, [pc, #8]	; (14f00 <_sched_init+0xc>)
   14ef6:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14efa:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   14efc:	629a      	str	r2, [r3, #40]	; 0x28
   14efe:	4770      	bx	lr
   14f00:	20001978 	.word	0x20001978

00014f04 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   14f04:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   14f06:	4c14      	ldr	r4, [pc, #80]	; (14f58 <_impl_k_yield+0x54>)
   14f08:	4b14      	ldr	r3, [pc, #80]	; (14f5c <_impl_k_yield+0x58>)
   14f0a:	68a2      	ldr	r2, [r4, #8]
   14f0c:	681b      	ldr	r3, [r3, #0]
   14f0e:	429a      	cmp	r2, r3
   14f10:	d00f      	beq.n	14f32 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   14f12:	f7ff fe11 	bl	14b38 <k_spin_lock.isra.11>
   14f16:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   14f18:	68a0      	ldr	r0, [r4, #8]
   14f1a:	f7ff fdef 	bl	14afc <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   14f1e:	68a1      	ldr	r1, [r4, #8]
   14f20:	f104 0024 	add.w	r0, r4, #36	; 0x24
   14f24:	f7ff fec2 	bl	14cac <_priq_dumb_add>
			update_cache(1);
   14f28:	2001      	movs	r0, #1
   14f2a:	f7ff fe0d 	bl	14b48 <update_cache>
   14f2e:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   14f32:	6a22      	ldr	r2, [r4, #32]
   14f34:	68a3      	ldr	r3, [r4, #8]
   14f36:	429a      	cmp	r2, r3
   14f38:	d00c      	beq.n	14f54 <_impl_k_yield+0x50>
	__asm__ volatile(
   14f3a:	f04f 0320 	mov.w	r3, #32
   14f3e:	f3ef 8011 	mrs	r0, BASEPRI
   14f42:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   14f46:	4b06      	ldr	r3, [pc, #24]	; (14f60 <_impl_k_yield+0x5c>)
   14f48:	2200      	movs	r2, #0
   14f4a:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   14f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14f50:	f7ec bada 	b.w	1508 <__swap>
   14f54:	bd38      	pop	{r3, r4, r5, pc}
   14f56:	bf00      	nop
   14f58:	20001978 	.word	0x20001978
   14f5c:	0001a2a0 	.word	0x0001a2a0
   14f60:	200019ac 	.word	0x200019ac

00014f64 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   14f64:	4b01      	ldr	r3, [pc, #4]	; (14f6c <_impl_k_current_get+0x8>)
   14f66:	6898      	ldr	r0, [r3, #8]
   14f68:	4770      	bx	lr
   14f6a:	bf00      	nop
   14f6c:	20001978 	.word	0x20001978

00014f70 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   14f70:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   14f74:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   14f76:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   14f78:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   14f7a:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   14f7c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   14f7e:	6143      	str	r3, [r0, #20]
   14f80:	4770      	bx	lr

00014f82 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   14f82:	b570      	push	{r4, r5, r6, lr}
   14f84:	4604      	mov	r4, r0
   14f86:	f04f 0320 	mov.w	r3, #32
   14f8a:	f3ef 8611 	mrs	r6, BASEPRI
   14f8e:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   14f92:	f7ff fe3a 	bl	14c0a <_unpend_first_thread>
	if (thread) {
   14f96:	4605      	mov	r5, r0
   14f98:	b160      	cbz	r0, 14fb4 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   14f9a:	7a43      	ldrb	r3, [r0, #9]
   14f9c:	06db      	lsls	r3, r3, #27
   14f9e:	d102      	bne.n	14fa6 <_impl_k_sem_give+0x24>
   14fa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14fa2:	3301      	adds	r3, #1
   14fa4:	d012      	beq.n	14fcc <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14fa6:	2300      	movs	r3, #0
   14fa8:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   14faa:	4630      	mov	r0, r6
}
   14fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   14fb0:	f7ff be44 	b.w	14c3c <_reschedule>
	sem->count += (sem->count != sem->limit);
   14fb4:	68a3      	ldr	r3, [r4, #8]
   14fb6:	68e2      	ldr	r2, [r4, #12]
   14fb8:	429a      	cmp	r2, r3
   14fba:	bf18      	it	ne
   14fbc:	3301      	addne	r3, #1
   14fbe:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14fc0:	2102      	movs	r1, #2
   14fc2:	f104 0010 	add.w	r0, r4, #16
   14fc6:	f000 fca1 	bl	1590c <_handle_obj_poll_events>
   14fca:	e7ee      	b.n	14faa <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   14fcc:	f7ff fe8e 	bl	14cec <_add_thread_to_ready_q>
   14fd0:	e7e9      	b.n	14fa6 <_impl_k_sem_give+0x24>

00014fd2 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   14fd2:	b410      	push	{r4}
   14fd4:	460a      	mov	r2, r1
   14fd6:	4604      	mov	r4, r0
   14fd8:	f04f 0320 	mov.w	r3, #32
   14fdc:	f3ef 8011 	mrs	r0, BASEPRI
   14fe0:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   14fe4:	68a3      	ldr	r3, [r4, #8]
   14fe6:	b133      	cbz	r3, 14ff6 <_impl_k_sem_take+0x24>
		sem->count--;
   14fe8:	3b01      	subs	r3, #1
   14fea:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14fec:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   14ff0:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   14ff2:	bc10      	pop	{r4}
   14ff4:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   14ff6:	b921      	cbnz	r1, 15002 <_impl_k_sem_take+0x30>
   14ff8:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   14ffc:	f06f 000f 	mvn.w	r0, #15
   15000:	e7f7      	b.n	14ff2 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   15002:	4621      	mov	r1, r4
}
   15004:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   15006:	f7ff bf1f 	b.w	14e48 <_pend_current_thread>
	...

0001500c <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   1500c:	4b03      	ldr	r3, [pc, #12]	; (1501c <_impl_k_uptime_get_32+0x10>)
   1500e:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   15012:	230a      	movs	r3, #10
   15014:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   15018:	4770      	bx	lr
   1501a:	bf00      	nop
   1501c:	200019b0 	.word	0x200019b0

00015020 <_tick_get>:
	__asm__ volatile(
   15020:	f04f 0220 	mov.w	r2, #32
   15024:	f3ef 8311 	mrs	r3, BASEPRI
   15028:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   1502c:	4a02      	ldr	r2, [pc, #8]	; (15038 <_tick_get+0x18>)
   1502e:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15032:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   15036:	4770      	bx	lr
   15038:	200019b0 	.word	0x200019b0

0001503c <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   1503c:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   1503e:	f7ff ffef 	bl	15020 <_tick_get>
   15042:	240a      	movs	r4, #10
   15044:	fba0 2304 	umull	r2, r3, r0, r4
   15048:	fb04 3301 	mla	r3, r4, r1, r3
}
   1504c:	4610      	mov	r0, r2
   1504e:	4619      	mov	r1, r3
   15050:	bd10      	pop	{r4, pc}
	...

00015054 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   15054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15058:	4607      	mov	r7, r0
   1505a:	b085      	sub	sp, #20
	__asm__ volatile(
   1505c:	f04f 0320 	mov.w	r3, #32
   15060:	f3ef 8011 	mrs	r0, BASEPRI
   15064:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   15068:	4961      	ldr	r1, [pc, #388]	; (151f0 <_nano_sys_clock_tick_announce+0x19c>)
   1506a:	e9d1 4500 	ldrd	r4, r5, [r1]
   1506e:	19e2      	adds	r2, r4, r7
   15070:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   15074:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15078:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   1507c:	ae02      	add	r6, sp, #8
   1507e:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   15080:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   15082:	f04f 0320 	mov.w	r3, #32
   15086:	f3ef 8011 	mrs	r0, BASEPRI
   1508a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1508e:	4c59      	ldr	r4, [pc, #356]	; (151f4 <_nano_sys_clock_tick_announce+0x1a0>)
   15090:	4621      	mov	r1, r4
   15092:	4602      	mov	r2, r0
   15094:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15098:	428b      	cmp	r3, r1
   1509a:	d000      	beq.n	1509e <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   1509c:	b9fb      	cbnz	r3, 150de <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1509e:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   150a2:	68a0      	ldr	r0, [r4, #8]
   150a4:	f7ff fee2 	bl	14e6c <_is_thread_time_slicing>
   150a8:	b1b0      	cbz	r0, 150d8 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   150aa:	4a53      	ldr	r2, [pc, #332]	; (151f8 <_nano_sys_clock_tick_announce+0x1a4>)
   150ac:	6811      	ldr	r1, [r2, #0]
   150ae:	230a      	movs	r3, #10
   150b0:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   150b4:	4b51      	ldr	r3, [pc, #324]	; (151fc <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   150b6:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   150b8:	681b      	ldr	r3, [r3, #0]
   150ba:	429f      	cmp	r7, r3
   150bc:	db0c      	blt.n	150d8 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   150be:	2300      	movs	r3, #0
   150c0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   150c2:	f04f 0320 	mov.w	r3, #32
   150c6:	f3ef 8511 	mrs	r5, BASEPRI
   150ca:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   150ce:	68a0      	ldr	r0, [r4, #8]
   150d0:	f7ff fe7a 	bl	14dc8 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   150d4:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   150d8:	b005      	add	sp, #20
   150da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   150de:	4d48      	ldr	r5, [pc, #288]	; (15200 <_nano_sys_clock_tick_announce+0x1ac>)
   150e0:	9501      	str	r5, [sp, #4]
   150e2:	2101      	movs	r1, #1
   150e4:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   150e6:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   150ea:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   150ec:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   150f0:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   150f2:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   150f4:	bfaa      	itet	ge
   150f6:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   150fa:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   150fe:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   15102:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   15104:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   15106:	691d      	ldr	r5, [r3, #16]
   15108:	4298      	cmp	r0, r3
   1510a:	bf14      	ite	ne
   1510c:	6818      	ldrne	r0, [r3, #0]
   1510e:	2000      	moveq	r0, #0
   15110:	b9d5      	cbnz	r5, 15148 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   15112:	e893 0220 	ldmia.w	r3, {r5, r9}
   15116:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   1511a:	681d      	ldr	r5, [r3, #0]
   1511c:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   15120:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   15122:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   15126:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   15128:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   1512a:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   1512c:	f8c3 c010 	str.w	ip, [r3, #16]
   15130:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   15134:	f04f 0320 	mov.w	r3, #32
   15138:	f3ef 8211 	mrs	r2, BASEPRI
   1513c:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   15140:	4603      	mov	r3, r0
   15142:	2800      	cmp	r0, #0
   15144:	d1d4      	bne.n	150f0 <_nano_sys_clock_tick_announce+0x9c>
   15146:	e001      	b.n	1514c <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   15148:	2900      	cmp	r1, #0
   1514a:	dcf1      	bgt.n	15130 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1514c:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   15150:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15152:	42b0      	cmp	r0, r6
   15154:	d103      	bne.n	1515e <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   15156:	9a01      	ldr	r2, [sp, #4]
   15158:	2300      	movs	r3, #0
   1515a:	6013      	str	r3, [r2, #0]
   1515c:	e7a1      	b.n	150a2 <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   1515e:	2800      	cmp	r0, #0
   15160:	d0f9      	beq.n	15156 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   15162:	9b03      	ldr	r3, [sp, #12]
   15164:	4298      	cmp	r0, r3
   15166:	d102      	bne.n	1516e <_nano_sys_clock_tick_announce+0x11a>
   15168:	f04f 0b00 	mov.w	fp, #0
   1516c:	e001      	b.n	15172 <_nano_sys_clock_tick_announce+0x11e>
   1516e:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   15172:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   15176:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   1517a:	e890 000c 	ldmia.w	r0, {r2, r3}
   1517e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   15180:	6802      	ldr	r2, [r0, #0]
   15182:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   15184:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   15186:	f04f 0320 	mov.w	r3, #32
   1518a:	f3ef 8811 	mrs	r8, BASEPRI
   1518e:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   15192:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   15196:	b1d6      	cbz	r6, 151ce <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   15198:	68c3      	ldr	r3, [r0, #12]
   1519a:	b123      	cbz	r3, 151a6 <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   1519c:	4630      	mov	r0, r6
   1519e:	f7ff fd25 	bl	14bec <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   151a2:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   151a6:	7a73      	ldrb	r3, [r6, #9]
   151a8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   151ac:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   151b0:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   151b2:	d102      	bne.n	151ba <_nano_sys_clock_tick_announce+0x166>
   151b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
   151b6:	3301      	adds	r3, #1
   151b8:	d015      	beq.n	151e6 <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   151ba:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   151be:	f1bb 0f00 	cmp.w	fp, #0
   151c2:	d0c8      	beq.n	15156 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   151c4:	9b03      	ldr	r3, [sp, #12]
   151c6:	455b      	cmp	r3, fp
   151c8:	d108      	bne.n	151dc <_nano_sys_clock_tick_announce+0x188>
   151ca:	2300      	movs	r3, #0
   151cc:	e008      	b.n	151e0 <_nano_sys_clock_tick_announce+0x18c>
   151ce:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   151d2:	6943      	ldr	r3, [r0, #20]
   151d4:	2b00      	cmp	r3, #0
   151d6:	d0f2      	beq.n	151be <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   151d8:	4798      	blx	r3
   151da:	e7f0      	b.n	151be <_nano_sys_clock_tick_announce+0x16a>
   151dc:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   151e0:	4658      	mov	r0, fp
   151e2:	469b      	mov	fp, r3
   151e4:	e7c9      	b.n	1517a <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   151e6:	4630      	mov	r0, r6
   151e8:	f7ff fd80 	bl	14cec <_add_thread_to_ready_q>
   151ec:	e7e5      	b.n	151ba <_nano_sys_clock_tick_announce+0x166>
   151ee:	bf00      	nop
   151f0:	200019b0 	.word	0x200019b0
   151f4:	20001978 	.word	0x20001978
   151f8:	200019ac 	.word	0x200019ac
   151fc:	20001844 	.word	0x20001844
   15200:	200019a8 	.word	0x200019a8

00015204 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   15204:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   15206:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1520a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1520e:	4903      	ldr	r1, [pc, #12]	; (1521c <k_sys_work_q_init+0x18>)
   15210:	4803      	ldr	r0, [pc, #12]	; (15220 <k_sys_work_q_init+0x1c>)
   15212:	f000 f983 	bl	1551c <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   15216:	2000      	movs	r0, #0
   15218:	bd08      	pop	{r3, pc}
   1521a:	bf00      	nop
   1521c:	200036c0 	.word	0x200036c0
   15220:	200019b8 	.word	0x200019b8

00015224 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   15224:	6903      	ldr	r3, [r0, #16]
   15226:	1c5a      	adds	r2, r3, #1
   15228:	d011      	beq.n	1524e <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1522a:	4a0a      	ldr	r2, [pc, #40]	; (15254 <_abort_timeout+0x30>)
   1522c:	6992      	ldr	r2, [r2, #24]
   1522e:	4290      	cmp	r0, r2
   15230:	bf1f      	itttt	ne
   15232:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   15234:	690a      	ldrne	r2, [r1, #16]
   15236:	189b      	addne	r3, r3, r2
   15238:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   1523a:	e890 000c 	ldmia.w	r0, {r2, r3}
   1523e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   15240:	6802      	ldr	r2, [r0, #0]
   15242:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   15244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15248:	6103      	str	r3, [r0, #16]
	return 0;
   1524a:	2000      	movs	r0, #0
   1524c:	4770      	bx	lr
		return _INACTIVE;
   1524e:	4618      	mov	r0, r3
}
   15250:	4770      	bx	lr
   15252:	bf00      	nop
   15254:	20001978 	.word	0x20001978

00015258 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   15258:	7a42      	ldrb	r2, [r0, #9]
   1525a:	06d2      	lsls	r2, r2, #27
   1525c:	d104      	bne.n	15268 <_ready_thread+0x10>
   1525e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15260:	3301      	adds	r3, #1
   15262:	d101      	bne.n	15268 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   15264:	f7ff bd42 	b.w	14cec <_add_thread_to_ready_q>
   15268:	4770      	bx	lr
	...

0001526c <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   1526c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   1526e:	f04f 0320 	mov.w	r3, #32
   15272:	f3ef 8611 	mrs	r6, BASEPRI
   15276:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1527a:	4a19      	ldr	r2, [pc, #100]	; (152e0 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   1527c:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1527e:	230a      	movs	r3, #10
   15280:	3109      	adds	r1, #9
   15282:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   15286:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   15288:	6241      	str	r1, [r0, #36]	; 0x24
   1528a:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1528c:	2300      	movs	r3, #0
   1528e:	6203      	str	r3, [r0, #32]
   15290:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15294:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   15296:	f100 0514 	add.w	r5, r0, #20
   1529a:	d108      	bne.n	152ae <schedule_new_thread.part.11+0x42>
	node->next = list;
   1529c:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   1529e:	6993      	ldr	r3, [r2, #24]
   152a0:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   152a2:	6993      	ldr	r3, [r2, #24]
   152a4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   152a6:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   152a8:	f386 8811 	msr	BASEPRI, r6
   152ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   152ae:	2b00      	cmp	r3, #0
   152b0:	d0f4      	beq.n	1529c <schedule_new_thread.part.11+0x30>
   152b2:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   152b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   152b8:	691f      	ldr	r7, [r3, #16]
   152ba:	42bc      	cmp	r4, r7
   152bc:	dc08      	bgt.n	152d0 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   152be:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   152c0:	1b3c      	subs	r4, r7, r4
   152c2:	611c      	str	r4, [r3, #16]
   152c4:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   152c6:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   152c8:	685a      	ldr	r2, [r3, #4]
   152ca:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   152cc:	605d      	str	r5, [r3, #4]
   152ce:	e7eb      	b.n	152a8 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   152d0:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   152d2:	4573      	cmp	r3, lr
   152d4:	6244      	str	r4, [r0, #36]	; 0x24
   152d6:	d0e1      	beq.n	1529c <schedule_new_thread.part.11+0x30>
   152d8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   152da:	2b00      	cmp	r3, #0
   152dc:	d1eb      	bne.n	152b6 <schedule_new_thread.part.11+0x4a>
   152de:	e7dd      	b.n	1529c <schedule_new_thread.part.11+0x30>
   152e0:	20001978 	.word	0x20001978

000152e4 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   152e4:	4770      	bx	lr
	...

000152e8 <k_is_in_isr>:
   152e8:	f3ef 8005 	mrs	r0, IPSR
   152ec:	280d      	cmp	r0, #13
   152ee:	d807      	bhi.n	15300 <k_is_in_isr+0x18>
   152f0:	b138      	cbz	r0, 15302 <k_is_in_isr+0x1a>
   152f2:	4b04      	ldr	r3, [pc, #16]	; (15304 <k_is_in_isr+0x1c>)
   152f4:	6858      	ldr	r0, [r3, #4]
   152f6:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   152fa:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   152fe:	4770      	bx	lr
   15300:	2001      	movs	r0, #1
}
   15302:	4770      	bx	lr
   15304:	e000ed00 	.word	0xe000ed00

00015308 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   15308:	4b02      	ldr	r3, [pc, #8]	; (15314 <_is_thread_essential+0xc>)
   1530a:	689b      	ldr	r3, [r3, #8]
   1530c:	7a18      	ldrb	r0, [r3, #8]
}
   1530e:	f000 0001 	and.w	r0, r0, #1
   15312:	4770      	bx	lr
   15314:	20001978 	.word	0x20001978

00015318 <_impl_k_thread_start>:
{
   15318:	b510      	push	{r4, lr}
	__asm__ volatile(
   1531a:	f04f 0320 	mov.w	r3, #32
   1531e:	f3ef 8411 	mrs	r4, BASEPRI
   15322:	f383 8811 	msr	BASEPRI, r3
   15326:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   15328:	0759      	lsls	r1, r3, #29
   1532a:	d402      	bmi.n	15332 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1532c:	f384 8811 	msr	BASEPRI, r4
   15330:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15332:	f023 0304 	bic.w	r3, r3, #4
   15336:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   15338:	f7ff ff8e 	bl	15258 <_ready_thread>
	_reschedule(key);
   1533c:	4620      	mov	r0, r4
}
   1533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   15342:	f7ff bc7b 	b.w	14c3c <_reschedule>
	...

00015348 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   15348:	b530      	push	{r4, r5, lr}
   1534a:	b087      	sub	sp, #28
   1534c:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1534e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15350:	9504      	str	r5, [sp, #16]
   15352:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15354:	9503      	str	r5, [sp, #12]
   15356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15358:	9502      	str	r5, [sp, #8]
   1535a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1535c:	9501      	str	r5, [sp, #4]
   1535e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   15360:	9500      	str	r5, [sp, #0]
   15362:	f7ec fad3 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   15366:	4b04      	ldr	r3, [pc, #16]	; (15378 <_setup_new_thread+0x30>)
   15368:	689b      	ldr	r3, [r3, #8]
   1536a:	b913      	cbnz	r3, 15372 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1536c:	6663      	str	r3, [r4, #100]	; 0x64
}
   1536e:	b007      	add	sp, #28
   15370:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   15372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   15374:	e7fa      	b.n	1536c <_setup_new_thread+0x24>
   15376:	bf00      	nop
   15378:	20001978 	.word	0x20001978

0001537c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1537c:	b570      	push	{r4, r5, r6, lr}
   1537e:	b086      	sub	sp, #24
   15380:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15382:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   15384:	9604      	str	r6, [sp, #16]
   15386:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   15388:	9603      	str	r6, [sp, #12]
   1538a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1538c:	9602      	str	r6, [sp, #8]
   1538e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   15390:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15392:	9601      	str	r6, [sp, #4]
   15394:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   15396:	9600      	str	r6, [sp, #0]
   15398:	f7ff ffd6 	bl	15348 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   1539c:	1c6b      	adds	r3, r5, #1
   1539e:	d003      	beq.n	153a8 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   153a0:	b92d      	cbnz	r5, 153ae <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   153a2:	4620      	mov	r0, r4
   153a4:	f7ff ffb8 	bl	15318 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   153a8:	4620      	mov	r0, r4
   153aa:	b006      	add	sp, #24
   153ac:	bd70      	pop	{r4, r5, r6, pc}
   153ae:	4629      	mov	r1, r5
   153b0:	4620      	mov	r0, r4
   153b2:	f7ff ff5b 	bl	1526c <schedule_new_thread.part.11>
   153b6:	e7f7      	b.n	153a8 <_impl_k_thread_create+0x2c>

000153b8 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   153b8:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   153ba:	b510      	push	{r4, lr}
   153bc:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   153be:	b103      	cbz	r3, 153c2 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   153c0:	4798      	blx	r3
   153c2:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   153c4:	06da      	lsls	r2, r3, #27
   153c6:	d106      	bne.n	153d6 <_k_thread_single_abort+0x1e>
   153c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   153ca:	3201      	adds	r2, #1
   153cc:	d103      	bne.n	153d6 <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   153ce:	4620      	mov	r0, r4
   153d0:	f7ff fbe4 	bl	14b9c <_remove_thread_from_ready_q>
   153d4:	e00b      	b.n	153ee <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   153d6:	079b      	lsls	r3, r3, #30
   153d8:	d502      	bpl.n	153e0 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   153da:	4620      	mov	r0, r4
   153dc:	f7ff fc06 	bl	14bec <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   153e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   153e2:	3301      	adds	r3, #1
   153e4:	d003      	beq.n	153ee <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   153e6:	f104 0014 	add.w	r0, r4, #20
   153ea:	f7ff ff1b 	bl	15224 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   153ee:	7a63      	ldrb	r3, [r4, #9]
   153f0:	f043 0308 	orr.w	r3, r3, #8
   153f4:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   153f6:	bd10      	pop	{r4, pc}

000153f8 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   153f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   153fa:	4f21      	ldr	r7, [pc, #132]	; (15480 <_init_static_threads+0x88>)
   153fc:	4d21      	ldr	r5, [pc, #132]	; (15484 <_init_static_threads+0x8c>)
{
   153fe:	b087      	sub	sp, #28
   15400:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   15402:	42bd      	cmp	r5, r7
   15404:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   15408:	d314      	bcc.n	15434 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   1540a:	4b1f      	ldr	r3, [pc, #124]	; (15488 <_init_static_threads+0x90>)
   1540c:	689a      	ldr	r2, [r3, #8]
   1540e:	7ad3      	ldrb	r3, [r2, #11]
   15410:	3b01      	subs	r3, #1
   15412:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   15414:	f04f 0320 	mov.w	r3, #32
   15418:	f3ef 8511 	mrs	r5, BASEPRI
   1541c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   15420:	4c18      	ldr	r4, [pc, #96]	; (15484 <_init_static_threads+0x8c>)
   15422:	42b4      	cmp	r4, r6
   15424:	d31f      	bcc.n	15466 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15426:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   1542a:	b007      	add	sp, #28
   1542c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   15430:	f7ff bc22 	b.w	14c78 <k_sched_unlock>
		_setup_new_thread(
   15434:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   15438:	9304      	str	r3, [sp, #16]
   1543a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1543e:	9303      	str	r3, [sp, #12]
   15440:	f854 3c14 	ldr.w	r3, [r4, #-20]
   15444:	9302      	str	r3, [sp, #8]
   15446:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1544a:	9301      	str	r3, [sp, #4]
   1544c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15450:	9300      	str	r3, [sp, #0]
   15452:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   15456:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   15458:	f7ff ff76 	bl	15348 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1545c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   15460:	651d      	str	r5, [r3, #80]	; 0x50
   15462:	4625      	mov	r5, r4
   15464:	e7cd      	b.n	15402 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   15466:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15468:	1c4b      	adds	r3, r1, #1
   1546a:	d003      	beq.n	15474 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   1546c:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   1546e:	b919      	cbnz	r1, 15478 <_init_static_threads+0x80>
   15470:	f7ff ff52 	bl	15318 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   15474:	342c      	adds	r4, #44	; 0x2c
   15476:	e7d4      	b.n	15422 <_init_static_threads+0x2a>
   15478:	f7ff fef8 	bl	1526c <schedule_new_thread.part.11>
   1547c:	e7fa      	b.n	15474 <_init_static_threads+0x7c>
   1547e:	bf00      	nop
   15480:	20003fdc 	.word	0x20003fdc
   15484:	20003fdc 	.word	0x20003fdc
   15488:	20001978 	.word	0x20001978

0001548c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1548c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   1548e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   15490:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   15492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   15496:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   15498:	72c3      	strb	r3, [r0, #11]
   1549a:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   1549c:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   1549e:	61c3      	str	r3, [r0, #28]
	t->func = func;
   154a0:	6283      	str	r3, [r0, #40]	; 0x28
   154a2:	4770      	bx	lr

000154a4 <k_work_submit_to_queue>:
{
   154a4:	b500      	push	{lr}
   154a6:	f101 0308 	add.w	r3, r1, #8
   154aa:	f3bf 8f5b 	dmb	ish
   154ae:	e853 2f00 	ldrex	r2, [r3]
   154b2:	f042 0e01 	orr.w	lr, r2, #1
   154b6:	e843 ec00 	strex	ip, lr, [r3]
   154ba:	f1bc 0f00 	cmp.w	ip, #0
   154be:	d1f6      	bne.n	154ae <k_work_submit_to_queue+0xa>
   154c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   154c4:	07d3      	lsls	r3, r2, #31
   154c6:	d403      	bmi.n	154d0 <k_work_submit_to_queue+0x2c>
}
   154c8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   154cc:	f7ff ba94 	b.w	149f8 <k_queue_append>
   154d0:	f85d fb04 	ldr.w	pc, [sp], #4

000154d4 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   154d4:	f1a0 010c 	sub.w	r1, r0, #12
   154d8:	6980      	ldr	r0, [r0, #24]
   154da:	f7ff bfe3 	b.w	154a4 <k_work_submit_to_queue>

000154de <work_q_main>:
{
   154de:	b510      	push	{r4, lr}
   154e0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   154e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   154e6:	4620      	mov	r0, r4
   154e8:	f7ff faaa 	bl	14a40 <_impl_k_queue_get>
		if (!work) {
   154ec:	4603      	mov	r3, r0
   154ee:	2800      	cmp	r0, #0
   154f0:	d0f7      	beq.n	154e2 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   154f2:	3308      	adds	r3, #8
		handler = work->handler;
   154f4:	6842      	ldr	r2, [r0, #4]
   154f6:	f3bf 8f5b 	dmb	ish
   154fa:	e853 1f00 	ldrex	r1, [r3]
   154fe:	f021 0e01 	bic.w	lr, r1, #1
   15502:	e843 ec00 	strex	ip, lr, [r3]
   15506:	f1bc 0f00 	cmp.w	ip, #0
   1550a:	d1f6      	bne.n	154fa <work_q_main+0x1c>
   1550c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   15510:	07cb      	lsls	r3, r1, #31
   15512:	d500      	bpl.n	15516 <work_q_main+0x38>
			handler(work);
   15514:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   15516:	f7ff fcf5 	bl	14f04 <_impl_k_yield>
   1551a:	e7e2      	b.n	154e2 <work_q_main+0x4>

0001551c <k_work_q_start>:
{
   1551c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1551e:	b087      	sub	sp, #28
   15520:	4604      	mov	r4, r0
   15522:	461f      	mov	r7, r3
   15524:	460d      	mov	r5, r1
   15526:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   15528:	f7ff fa5e 	bl	149e8 <_impl_k_queue_init>

   1552c:	2000      	movs	r0, #0
   1552e:	9005      	str	r0, [sp, #20]
   15530:	9004      	str	r0, [sp, #16]
   15532:	9002      	str	r0, [sp, #8]
   15534:	9001      	str	r0, [sp, #4]
   15536:	9703      	str	r7, [sp, #12]
   15538:	9400      	str	r4, [sp, #0]
   1553a:	4b04      	ldr	r3, [pc, #16]	; (1554c <k_work_q_start+0x30>)
   1553c:	4632      	mov	r2, r6
   1553e:	4629      	mov	r1, r5
   15540:	f104 0010 	add.w	r0, r4, #16
   15544:	f7ff ff1a 	bl	1537c <_impl_k_thread_create>
}
   15548:	b007      	add	sp, #28
   1554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1554c:	000154df 	.word	0x000154df

00015550 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   15550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   15554:	2300      	movs	r3, #0
   15556:	61c2      	str	r2, [r0, #28]
	t->func = func;
   15558:	4a04      	ldr	r2, [pc, #16]	; (1556c <k_delayed_work_init+0x1c>)
   1555a:	6003      	str	r3, [r0, #0]
   1555c:	6041      	str	r1, [r0, #4]
   1555e:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   15560:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   15562:	6143      	str	r3, [r0, #20]
	t->func = func;
   15564:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   15566:	6243      	str	r3, [r0, #36]	; 0x24
   15568:	4770      	bx	lr
   1556a:	bf00      	nop
   1556c:	000154d5 	.word	0x000154d5

00015570 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   15570:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   15572:	f04f 0320 	mov.w	r3, #32
   15576:	f3ef 8411 	mrs	r4, BASEPRI
   1557a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   1557e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15580:	b923      	cbnz	r3, 1558c <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15582:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   15586:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   1558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1558c:	f3bf 8f5b 	dmb	ish
   15590:	6883      	ldr	r3, [r0, #8]
   15592:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   15596:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   15598:	f100 0508 	add.w	r5, r0, #8
   1559c:	d533      	bpl.n	15606 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1559e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   155a0:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   155a2:	2100      	movs	r1, #0
   155a4:	2b00      	cmp	r3, #0
   155a6:	d0ec      	beq.n	15582 <k_delayed_work_cancel+0x12>
   155a8:	4298      	cmp	r0, r3
   155aa:	d127      	bne.n	155fc <k_delayed_work_cancel+0x8c>
   155ac:	6803      	ldr	r3, [r0, #0]
   155ae:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   155b0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   155b4:	b9c9      	cbnz	r1, 155ea <k_delayed_work_cancel+0x7a>
   155b6:	42b8      	cmp	r0, r7
	list->head = node;
   155b8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   155ba:	d100      	bne.n	155be <k_delayed_work_cancel+0x4e>
	list->tail = node;
   155bc:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   155be:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   155c0:	f003 0303 	and.w	r3, r3, #3
   155c4:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   155c6:	2300      	movs	r3, #0
   155c8:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   155ca:	f3bf 8f5b 	dmb	ish
   155ce:	e855 2f00 	ldrex	r2, [r5]
   155d2:	f022 0201 	bic.w	r2, r2, #1
   155d6:	e845 2100 	strex	r1, r2, [r5]
   155da:	2900      	cmp	r1, #0
   155dc:	d1f7      	bne.n	155ce <k_delayed_work_cancel+0x5e>
   155de:	f3bf 8f5b 	dmb	ish
   155e2:	f384 8811 	msr	BASEPRI, r4
	return 0;
   155e6:	4618      	mov	r0, r3
   155e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   155ea:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   155ec:	f006 0603 	and.w	r6, r6, #3
   155f0:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   155f2:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   155f4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   155f6:	bf08      	it	eq
   155f8:	6051      	streq	r1, [r2, #4]
   155fa:	e7e0      	b.n	155be <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   155fc:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   155fe:	4619      	mov	r1, r3
   15600:	f026 0303 	bic.w	r3, r6, #3
   15604:	e7ce      	b.n	155a4 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   15606:	69c1      	ldr	r1, [r0, #28]
   15608:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   1560a:	f100 020c 	add.w	r2, r0, #12
   1560e:	d0da      	beq.n	155c6 <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   15610:	4b08      	ldr	r3, [pc, #32]	; (15634 <k_delayed_work_cancel+0xc4>)
   15612:	699b      	ldr	r3, [r3, #24]
   15614:	429a      	cmp	r2, r3
   15616:	bf1f      	itttt	ne
   15618:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1561a:	6913      	ldrne	r3, [r2, #16]
   1561c:	185b      	addne	r3, r3, r1
   1561e:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   15620:	6903      	ldr	r3, [r0, #16]
   15622:	68c2      	ldr	r2, [r0, #12]
   15624:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   15626:	68c2      	ldr	r2, [r0, #12]
   15628:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1562a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1562e:	61c3      	str	r3, [r0, #28]
   15630:	e7c9      	b.n	155c6 <k_delayed_work_cancel+0x56>
   15632:	bf00      	nop
   15634:	20001978 	.word	0x20001978

00015638 <k_delayed_work_submit_to_queue>:
{
   15638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1563a:	4607      	mov	r7, r0
   1563c:	460c      	mov	r4, r1
   1563e:	4615      	mov	r5, r2
	__asm__ volatile(
   15640:	f04f 0320 	mov.w	r3, #32
   15644:	f3ef 8611 	mrs	r6, BASEPRI
   15648:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   1564c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1564e:	b123      	cbz	r3, 1565a <k_delayed_work_submit_to_queue+0x22>
   15650:	4283      	cmp	r3, r0
   15652:	d00b      	beq.n	1566c <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   15654:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   15658:	e00d      	b.n	15676 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   1565a:	b138      	cbz	r0, 1566c <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   1565c:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   1565e:	b96d      	cbnz	r5, 1567c <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   15660:	4621      	mov	r1, r4
   15662:	4638      	mov	r0, r7
   15664:	f7ff ff1e 	bl	154a4 <k_work_submit_to_queue>
	err = 0;
   15668:	2000      	movs	r0, #0
   1566a:	e004      	b.n	15676 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   1566c:	4620      	mov	r0, r4
   1566e:	f7ff ff7f 	bl	15570 <k_delayed_work_cancel>
		if (err < 0) {
   15672:	2800      	cmp	r0, #0
   15674:	daf2      	bge.n	1565c <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15676:	f386 8811 	msr	BASEPRI, r6
}
   1567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1567c:	220a      	movs	r2, #10
   1567e:	3509      	adds	r5, #9
   15680:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   15684:	4a16      	ldr	r2, [pc, #88]	; (156e0 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   15686:	2300      	movs	r3, #0
   15688:	4611      	mov	r1, r2
   1568a:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1568c:	61a3      	str	r3, [r4, #24]
   1568e:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   15692:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15694:	428b      	cmp	r3, r1
   15696:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1569a:	61e5      	str	r5, [r4, #28]
   1569c:	d106      	bne.n	156ac <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   1569e:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   156a0:	6993      	ldr	r3, [r2, #24]
   156a2:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   156a4:	6993      	ldr	r3, [r2, #24]
   156a6:	601f      	str	r7, [r3, #0]
	list->tail = node;
   156a8:	6197      	str	r7, [r2, #24]
   156aa:	e7dd      	b.n	15668 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   156ac:	2b00      	cmp	r3, #0
   156ae:	d0f6      	beq.n	1569e <k_delayed_work_submit_to_queue+0x66>
   156b0:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   156b4:	69e0      	ldr	r0, [r4, #28]
   156b6:	691d      	ldr	r5, [r3, #16]
   156b8:	42a8      	cmp	r0, r5
   156ba:	dc08      	bgt.n	156ce <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   156bc:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   156be:	1a28      	subs	r0, r5, r0
   156c0:	6118      	str	r0, [r3, #16]
   156c2:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   156c4:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   156c6:	685a      	ldr	r2, [r3, #4]
   156c8:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   156ca:	605f      	str	r7, [r3, #4]
   156cc:	e7cc      	b.n	15668 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   156ce:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   156d0:	4573      	cmp	r3, lr
   156d2:	61e0      	str	r0, [r4, #28]
   156d4:	d0e3      	beq.n	1569e <k_delayed_work_submit_to_queue+0x66>
   156d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   156d8:	2b00      	cmp	r3, #0
   156da:	d1eb      	bne.n	156b4 <k_delayed_work_submit_to_queue+0x7c>
   156dc:	e7df      	b.n	1569e <k_delayed_work_submit_to_queue+0x66>
   156de:	bf00      	nop
   156e0:	20001978 	.word	0x20001978

000156e4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   156e4:	2314      	movs	r3, #20
   156e6:	b530      	push	{r4, r5, lr}
   156e8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   156ec:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   156ee:	2900      	cmp	r1, #0
   156f0:	da00      	bge.n	156f4 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   156f2:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   156f4:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   156f6:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   156f8:	f003 030f 	and.w	r3, r3, #15
   156fc:	2b02      	cmp	r3, #2
   156fe:	d003      	beq.n	15708 <clear_event_registrations+0x24>
   15700:	2b04      	cmp	r3, #4
   15702:	d001      	beq.n	15708 <clear_event_registrations+0x24>
   15704:	2b01      	cmp	r3, #1
   15706:	d104      	bne.n	15712 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   15708:	6843      	ldr	r3, [r0, #4]
   1570a:	6805      	ldr	r5, [r0, #0]
   1570c:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   1570e:	6805      	ldr	r5, [r0, #0]
   15710:	606b      	str	r3, [r5, #4]
   15712:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   15716:	f04f 0320 	mov.w	r3, #32
   1571a:	f3ef 8211 	mrs	r2, BASEPRI
   1571e:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   15722:	3901      	subs	r1, #1
   15724:	3814      	subs	r0, #20
   15726:	e7e2      	b.n	156ee <clear_event_registrations+0xa>

00015728 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   15728:	6883      	ldr	r3, [r0, #8]
{
   1572a:	b570      	push	{r4, r5, r6, lr}
   1572c:	4605      	mov	r5, r0
   1572e:	460e      	mov	r6, r1
	if (!event->poller) {
   15730:	b1d3      	cbz	r3, 15768 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   15732:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   15734:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   15736:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   15738:	7a63      	ldrb	r3, [r4, #9]
   1573a:	079a      	lsls	r2, r3, #30
   1573c:	d514      	bpl.n	15768 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   1573e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15740:	3302      	adds	r3, #2
   15742:	d01a      	beq.n	1577a <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   15744:	4620      	mov	r0, r4
   15746:	f7ff fa6e 	bl	14c26 <_unpend_thread>
	_set_thread_return_value(thread,
   1574a:	2e00      	cmp	r6, #0
   1574c:	bf0c      	ite	eq
   1574e:	f06f 0303 	mvneq.w	r3, #3
   15752:	2300      	movne	r3, #0
   15754:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   15756:	7a63      	ldrb	r3, [r4, #9]
   15758:	06db      	lsls	r3, r3, #27
   1575a:	d105      	bne.n	15768 <signal_poll_event+0x40>
   1575c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1575e:	3301      	adds	r3, #1
   15760:	d102      	bne.n	15768 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   15762:	4620      	mov	r0, r4
   15764:	f7ff fac2 	bl	14cec <_add_thread_to_ready_q>
	event->state |= state;
   15768:	7b6b      	ldrb	r3, [r5, #13]
   1576a:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   1576e:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   15772:	2000      	movs	r0, #0
	event->state |= state;
   15774:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   15776:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   15778:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1577a:	f06f 000a 	mvn.w	r0, #10
}
   1577e:	bd70      	pop	{r4, r5, r6, pc}

00015780 <add_event>:
{
   15780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15782:	6803      	ldr	r3, [r0, #0]
   15784:	4298      	cmp	r0, r3
   15786:	4604      	mov	r4, r0
   15788:	460e      	mov	r6, r1
   1578a:	4617      	mov	r7, r2
   1578c:	d106      	bne.n	1579c <add_event+0x1c>
	node->next = list;
   1578e:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   15790:	6863      	ldr	r3, [r4, #4]
   15792:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   15794:	6863      	ldr	r3, [r4, #4]
   15796:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15798:	6066      	str	r6, [r4, #4]
   1579a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1579c:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   1579e:	2b00      	cmp	r3, #0
   157a0:	d0f5      	beq.n	1578e <add_event+0xe>
   157a2:	689b      	ldr	r3, [r3, #8]
   157a4:	6811      	ldr	r1, [r2, #0]
   157a6:	6818      	ldr	r0, [r3, #0]
   157a8:	f7ff f9ee 	bl	14b88 <_is_t1_higher_prio_than_t2>
   157ac:	2800      	cmp	r0, #0
   157ae:	d1ee      	bne.n	1578e <add_event+0xe>
	return list->head == list;
   157b0:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   157b2:	42ac      	cmp	r4, r5
   157b4:	d0eb      	beq.n	1578e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   157b6:	2d00      	cmp	r5, #0
   157b8:	d0e9      	beq.n	1578e <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   157ba:	68ab      	ldr	r3, [r5, #8]
   157bc:	6838      	ldr	r0, [r7, #0]
   157be:	6819      	ldr	r1, [r3, #0]
   157c0:	f7ff f9e2 	bl	14b88 <_is_t1_higher_prio_than_t2>
   157c4:	b130      	cbz	r0, 157d4 <add_event+0x54>
		node->prev = insert_point->prev;
   157c6:	686b      	ldr	r3, [r5, #4]
   157c8:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   157ca:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   157cc:	686b      	ldr	r3, [r5, #4]
   157ce:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   157d0:	606e      	str	r6, [r5, #4]
   157d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   157d4:	6863      	ldr	r3, [r4, #4]
   157d6:	429d      	cmp	r5, r3
   157d8:	d0d9      	beq.n	1578e <add_event+0xe>
   157da:	682d      	ldr	r5, [r5, #0]
   157dc:	e7eb      	b.n	157b6 <add_event+0x36>

000157de <k_poll_event_init>:
{
   157de:	b530      	push	{r4, r5, lr}
	event->type = type;
   157e0:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   157e2:	6103      	str	r3, [r0, #16]
	event->type = type;
   157e4:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   157e8:	7b81      	ldrb	r1, [r0, #14]
   157ea:	f362 0100 	bfi	r1, r2, #0, #1
   157ee:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   157f0:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   157f2:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   157f4:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   157f8:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   157fc:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   157fe:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   15800:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   15802:	bd30      	pop	{r4, r5, pc}

00015804 <_impl_k_poll>:
{
   15804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15808:	4b3f      	ldr	r3, [pc, #252]	; (15908 <_impl_k_poll+0x104>)
{
   1580a:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1580c:	689b      	ldr	r3, [r3, #8]
   1580e:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   15810:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15812:	2301      	movs	r3, #1
{
   15814:	4607      	mov	r7, r0
   15816:	468a      	mov	sl, r1
   15818:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1581a:	9301      	str	r3, [sp, #4]
   1581c:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1581e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   15822:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   15824:	4556      	cmp	r6, sl
   15826:	db10      	blt.n	1584a <_impl_k_poll+0x46>
   15828:	f04f 0320 	mov.w	r3, #32
   1582c:	f3ef 8611 	mrs	r6, BASEPRI
   15830:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   15834:	9c01      	ldr	r4, [sp, #4]
   15836:	2c00      	cmp	r4, #0
   15838:	d13f      	bne.n	158ba <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   1583a:	4632      	mov	r2, r6
   1583c:	4629      	mov	r1, r5
   1583e:	4638      	mov	r0, r7
   15840:	f7ff ff50 	bl	156e4 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15844:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   15848:	e040      	b.n	158cc <_impl_k_poll+0xc8>
	__asm__ volatile(
   1584a:	f04f 0320 	mov.w	r3, #32
   1584e:	f3ef 8b11 	mrs	fp, BASEPRI
   15852:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   15856:	7b62      	ldrb	r2, [r4, #13]
   15858:	f002 030f 	and.w	r3, r2, #15
   1585c:	2b02      	cmp	r3, #2
   1585e:	d003      	beq.n	15868 <_impl_k_poll+0x64>
   15860:	2b04      	cmp	r3, #4
   15862:	d004      	beq.n	1586e <_impl_k_poll+0x6a>
   15864:	2b01      	cmp	r3, #1
   15866:	d106      	bne.n	15876 <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   15868:	6921      	ldr	r1, [r4, #16]
   1586a:	6889      	ldr	r1, [r1, #8]
   1586c:	e001      	b.n	15872 <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   1586e:	6921      	ldr	r1, [r4, #16]
   15870:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   15872:	2900      	cmp	r1, #0
   15874:	d13d      	bne.n	158f2 <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   15876:	f1b8 0f00 	cmp.w	r8, #0
   1587a:	d014      	beq.n	158a6 <_impl_k_poll+0xa2>
   1587c:	9a01      	ldr	r2, [sp, #4]
   1587e:	b192      	cbz	r2, 158a6 <_impl_k_poll+0xa2>
	switch (event->type) {
   15880:	2b02      	cmp	r3, #2
   15882:	d007      	beq.n	15894 <_impl_k_poll+0x90>
   15884:	2b04      	cmp	r3, #4
   15886:	d013      	beq.n	158b0 <_impl_k_poll+0xac>
   15888:	2b01      	cmp	r3, #1
   1588a:	d109      	bne.n	158a0 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   1588c:	466a      	mov	r2, sp
   1588e:	4621      	mov	r1, r4
   15890:	6920      	ldr	r0, [r4, #16]
   15892:	e003      	b.n	1589c <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   15894:	6920      	ldr	r0, [r4, #16]
   15896:	466a      	mov	r2, sp
   15898:	4621      	mov	r1, r4
   1589a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1589c:	f7ff ff70 	bl	15780 <add_event>
	event->poller = poller;
   158a0:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   158a4:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   158a6:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   158aa:	3601      	adds	r6, #1
   158ac:	3414      	adds	r4, #20
   158ae:	e7b9      	b.n	15824 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   158b0:	6920      	ldr	r0, [r4, #16]
   158b2:	466a      	mov	r2, sp
   158b4:	4621      	mov	r1, r4
   158b6:	3008      	adds	r0, #8
   158b8:	e7f0      	b.n	1589c <_impl_k_poll+0x98>
	poller.is_polling = 0;
   158ba:	2300      	movs	r3, #0
   158bc:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   158be:	f1b8 0f00 	cmp.w	r8, #0
   158c2:	d107      	bne.n	158d4 <_impl_k_poll+0xd0>
   158c4:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   158c8:	f06f 040a 	mvn.w	r4, #10
}
   158cc:	4620      	mov	r0, r4
   158ce:	b005      	add	sp, #20
   158d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   158d4:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   158d6:	4642      	mov	r2, r8
   158d8:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   158da:	9102      	str	r1, [sp, #8]
   158dc:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   158de:	f7ff fab3 	bl	14e48 <_pend_current_thread>
   158e2:	4604      	mov	r4, r0
	__asm__ volatile(
   158e4:	f04f 0320 	mov.w	r3, #32
   158e8:	f3ef 8611 	mrs	r6, BASEPRI
   158ec:	f383 8811 	msr	BASEPRI, r3
   158f0:	e7a3      	b.n	1583a <_impl_k_poll+0x36>
	event->state |= state;
   158f2:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   158f6:	f363 1207 	bfi	r2, r3, #4, #4
   158fa:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   158fc:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   15900:	f8cd 9004 	str.w	r9, [sp, #4]
   15904:	e7cf      	b.n	158a6 <_impl_k_poll+0xa2>
   15906:	bf00      	nop
   15908:	20001978 	.word	0x20001978

0001590c <_handle_obj_poll_events>:
	return list->head == list;
   1590c:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   1590e:	4298      	cmp	r0, r3
   15910:	d007      	beq.n	15922 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   15912:	e893 0005 	ldmia.w	r3, {r0, r2}
   15916:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   15918:	6818      	ldr	r0, [r3, #0]
   1591a:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   1591c:	4618      	mov	r0, r3
   1591e:	f7ff bf03 	b.w	15728 <signal_poll_event>
   15922:	4770      	bx	lr

00015924 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   15924:	b538      	push	{r3, r4, r5, lr}
   15926:	f04f 0320 	mov.w	r3, #32
   1592a:	f3ef 8511 	mrs	r5, BASEPRI
   1592e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15932:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   15934:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   15936:	4298      	cmp	r0, r3
	signal->signaled = 1;
   15938:	f04f 0101 	mov.w	r1, #1
   1593c:	6081      	str	r1, [r0, #8]
   1593e:	d00d      	beq.n	1595c <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   15940:	e893 0005 	ldmia.w	r3, {r0, r2}
   15944:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   15946:	6818      	ldr	r0, [r3, #0]
   15948:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1594a:	4618      	mov	r0, r3
   1594c:	f7ff feec 	bl	15728 <signal_poll_event>
   15950:	4604      	mov	r4, r0

	_reschedule(key);
   15952:	4628      	mov	r0, r5
   15954:	f7ff f972 	bl	14c3c <_reschedule>
	return rc;
}
   15958:	4620      	mov	r0, r4
   1595a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1595c:	f385 8811 	msr	BASEPRI, r5
		return 0;
   15960:	2400      	movs	r4, #0
   15962:	e7f9      	b.n	15958 <_impl_k_poll_signal+0x34>

00015964 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   15964:	4770      	bx	lr
