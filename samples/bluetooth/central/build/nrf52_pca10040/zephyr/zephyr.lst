
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002700 	.word	0x20002700

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 0000eff7 00001aa1 00001aa1     ................
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 00010d4d 00000000 000018ed     ....M...........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 0000efbd     ................
     13c:	00000000 000018ed 200038d0 00011051     .........8. Q...
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 0000eff1 00000000 000018ed     ................
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	000125ad 	.word	0x000125ad
     5b0:	000125d6 	.word	0x000125d6
     5b4:	000125b4 	.word	0x000125b4
     5b8:	000125bb 	.word	0x000125bb
     5bc:	000125c5 	.word	0x000125c5
     5c0:	000125cf 	.word	0x000125cf

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f003 f9f3 	bl	39b6 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f003 fa91 	bl	3b20 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	000125f9 	.word	0x000125f9
     604:	20000000 	.word	0x20000000
     608:	00012617 	.word	0x00012617

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 f9cc 	bl	39b6 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 f9be 	bl	39b0 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f002 fdf0 	bl	322c <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00012642 	.word	0x00012642
     664:	00012578 	.word	0x00012578
     668:	00000671 	.word	0x00000671
     66c:	00012660 	.word	0x00012660

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f002 fe1b 	bl	32d0 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 f987 	bl	39bc <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	00012626 	.word	0x00012626
     6bc:	0001257e 	.word	0x0001257e

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f002 fd62 	bl	318c <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f002 feb2 	bl	3448 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f002 fd9a 	bl	322c <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00012683 	.word	0x00012683
     70c:	000126a3 	.word	0x000126a3
     710:	20003440 	.word	0x20003440
     714:	00012586 	.word	0x00012586
     718:	00000671 	.word	0x00000671
     71c:	00012660 	.word	0x00012660
     720:	000126ba 	.word	0x000126ba

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003474 	.word	0x20003474
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f011 f91a 	bl	11adc <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003478 	.word	0x20003478

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003478 	.word	0x20003478

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f010 f899 	bl	1112c <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	000126e8 	.word	0x000126e8

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f010 f85e 	bl	1112c <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	000126f2 	.word	0x000126f2
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f010 fc29 	bl	11bcc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003890 	.word	0x20003890
    1394:	20000010 	.word	0x20000010
    1398:	2000388c 	.word	0x2000388c

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003890 	.word	0x20003890
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f00f fe88 	bl	1112c <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	00012714 	.word	0x00012714
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003890 	.word	0x20003890
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	20001728 	.word	0x20001728
    14c4:	20003890 	.word	0x20003890

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f010 fab4 	bl	11a40 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	200016f0 	.word	0x200016f0
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	200016f0 	.word	0x200016f0
    1530:	00012da8 	.word	0x00012da8
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	200016f0 	.word	0x200016f0
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f010 fa9a 	bl	11adc <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	0001286d 	.word	0x0001286d

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	000128b7 	.word	0x000128b7
    1630:	e000ed00 	.word	0xe000ed00
    1634:	000128ce 	.word	0x000128ce
    1638:	000128e0 	.word	0x000128e0
    163c:	000128f4 	.word	0x000128f4
    1640:	0001290d 	.word	0x0001290d
    1644:	0001291e 	.word	0x0001291e
    1648:	0001293e 	.word	0x0001293e

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	0001296e 	.word	0x0001296e
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	00012987 	.word	0x00012987
    16c8:	0001299b 	.word	0x0001299b
    16cc:	000129b6 	.word	0x000129b6
    16d0:	000129d5 	.word	0x000129d5
    16d4:	000129fb 	.word	0x000129fb
    16d8:	00012a16 	.word	0x00012a16

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	00012734 	.word	0x00012734
    175c:	e000ed00 	.word	0xe000ed00
    1760:	000128ce 	.word	0x000128ce
    1764:	000128e0 	.word	0x000128e0
    1768:	0001274b 	.word	0x0001274b
    176c:	0001290d 	.word	0x0001290d
    1770:	00012765 	.word	0x00012765
    1774:	00012781 	.word	0x00012781
    1778:	0001293e 	.word	0x0001293e

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	000127c8 	.word	0x000127c8
    1824:	000127e0 	.word	0x000127e0
    1828:	00012802 	.word	0x00012802
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	00012822 	.word	0x00012822
    183c:	0001279a 	.word	0x0001279a
    1840:	000127af 	.word	0x000127af
    1844:	00012859 	.word	0x00012859

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f00f fc3b 	bl	11178 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	200016f0 	.word	0x200016f0

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f010 fb72 	bl	12004 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f010 f892 	bl	11adc <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	00012a42 	.word	0x00012a42
    19e4:	00012ac0 	.word	0x00012ac0
    19e8:	00012a68 	.word	0x00012a68
    19ec:	00012a82 	.word	0x00012a82
    19f0:	00012a9d 	.word	0x00012a9d

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f010 fa2d 	bl	11e60 <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f010 fa2a 	bl	11e60 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f010 fa2d 	bl	11e80 <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	00012b00 	.word	0x00012b00
    1a44:	00012afc 	.word	0x00012afc
    1a48:	00012b11 	.word	0x00012b11
    1a4c:	200016f0 	.word	0x200016f0
    1a50:	00012b31 	.word	0x00012b31

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f010 fa64 	bl	11f30 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f00f ffe1 	bl	11a40 <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f00f be8f 	b.w	117b4 <_reschedule>
    1a96:	bf00      	nop
    1a98:	200016f0 	.word	0x200016f0
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f00f fb62 	blne	11178 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	200016f0 	.word	0x200016f0
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002840 	.word	0x20002840

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f00f fb5c 	bl	111d8 <_bss_zero>
	_data_copy();
    1b20:	f00f fb64 	bl	111ec <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f00f fb86 	bl	11234 <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003454 	.word	0x20003454
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>

00001c9a <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1c9a:	b530      	push	{r4, r5, lr}
    1c9c:	b085      	sub	sp, #20
    1c9e:	4604      	mov	r4, r0
    1ca0:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1ca2:	4668      	mov	r0, sp
    1ca4:	2203      	movs	r2, #3
    1ca6:	f7ff ffa9 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1caa:	220d      	movs	r2, #13
    1cac:	2100      	movs	r1, #0
    1cae:	f10d 0003 	add.w	r0, sp, #3
    1cb2:	f7ff ffcf 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1cb6:	4620      	mov	r0, r4
    1cb8:	466a      	mov	r2, sp
    1cba:	4669      	mov	r1, sp
    1cbc:	f005 f918 	bl	6ef0 <bt_encrypt_le>
	if (err) {
    1cc0:	4604      	mov	r4, r0
    1cc2:	b920      	cbnz	r0, 1cce <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1cc4:	2203      	movs	r2, #3
    1cc6:	4669      	mov	r1, sp
    1cc8:	4628      	mov	r0, r5
    1cca:	f7ff ff97 	bl	1bfc <memcpy>

	return 0;
}
    1cce:	4620      	mov	r0, r4
    1cd0:	b005      	add	sp, #20
    1cd2:	bd30      	pop	{r4, r5, pc}

00001cd4 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1cd4:	b513      	push	{r0, r1, r4, lr}
    1cd6:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1cd8:	aa01      	add	r2, sp, #4
    1cda:	3103      	adds	r1, #3
    1cdc:	f7ff ffdd 	bl	1c9a <ah>
	if (err) {
    1ce0:	b948      	cbnz	r0, 1cf6 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1ce2:	2203      	movs	r2, #3
    1ce4:	a901      	add	r1, sp, #4
    1ce6:	4620      	mov	r0, r4
    1ce8:	f7ff ff73 	bl	1bd2 <memcmp>
    1cec:	fab0 f080 	clz	r0, r0
    1cf0:	0940      	lsrs	r0, r0, #5
}
    1cf2:	b002      	add	sp, #8
    1cf4:	bd10      	pop	{r4, pc}
		return false;
    1cf6:	2000      	movs	r0, #0
    1cf8:	e7fb      	b.n	1cf2 <bt_rpa_irk_matches+0x1e>

00001cfa <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1cfa:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1cfc:	1ccd      	adds	r5, r1, #3
{
    1cfe:	4606      	mov	r6, r0
    1d00:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1d02:	4628      	mov	r0, r5
    1d04:	2103      	movs	r1, #3
    1d06:	f005 f8d7 	bl	6eb8 <bt_rand>
	if (err) {
    1d0a:	b960      	cbnz	r0, 1d26 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1d0c:	7963      	ldrb	r3, [r4, #5]
    1d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d16:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1d18:	4622      	mov	r2, r4
    1d1a:	4629      	mov	r1, r5
    1d1c:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1d22:	f7ff bfba 	b.w	1c9a <ah>
}
    1d26:	bd70      	pop	{r4, r5, r6, pc}

00001d28 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1d28:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1d2a:	7802      	ldrb	r2, [r0, #0]
    1d2c:	2a01      	cmp	r2, #1
{
    1d2e:	4604      	mov	r4, r0
    1d30:	460b      	mov	r3, r1
	switch (src->type) {
    1d32:	d017      	beq.n	1d64 <uuid_to_uuid128+0x3c>
    1d34:	d303      	bcc.n	1d3e <uuid_to_uuid128+0x16>
    1d36:	2a02      	cmp	r2, #2
    1d38:	d02c      	beq.n	1d94 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1d3a:	bcf0      	pop	{r4, r5, r6, r7}
    1d3c:	4770      	bx	lr
		*dst = uuid128_base;
    1d3e:	4a18      	ldr	r2, [pc, #96]	; (1da0 <uuid_to_uuid128+0x78>)
    1d40:	460d      	mov	r5, r1
    1d42:	f102 0710 	add.w	r7, r2, #16
    1d46:	6810      	ldr	r0, [r2, #0]
    1d48:	6851      	ldr	r1, [r2, #4]
    1d4a:	462e      	mov	r6, r5
    1d4c:	c603      	stmia	r6!, {r0, r1}
    1d4e:	3208      	adds	r2, #8
    1d50:	42ba      	cmp	r2, r7
    1d52:	4635      	mov	r5, r6
    1d54:	d1f7      	bne.n	1d46 <uuid_to_uuid128+0x1e>
    1d56:	7812      	ldrb	r2, [r2, #0]
    1d58:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1d5a:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1d5c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1d5e:	0a12      	lsrs	r2, r2, #8
    1d60:	739a      	strb	r2, [r3, #14]
    1d62:	e7ea      	b.n	1d3a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1d64:	4a0e      	ldr	r2, [pc, #56]	; (1da0 <uuid_to_uuid128+0x78>)
    1d66:	460d      	mov	r5, r1
    1d68:	f102 0710 	add.w	r7, r2, #16
    1d6c:	6810      	ldr	r0, [r2, #0]
    1d6e:	6851      	ldr	r1, [r2, #4]
    1d70:	462e      	mov	r6, r5
    1d72:	c603      	stmia	r6!, {r0, r1}
    1d74:	3208      	adds	r2, #8
    1d76:	42ba      	cmp	r2, r7
    1d78:	4635      	mov	r5, r6
    1d7a:	d1f7      	bne.n	1d6c <uuid_to_uuid128+0x44>
    1d7c:	7812      	ldrb	r2, [r2, #0]
    1d7e:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1d80:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1d82:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1d84:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1d88:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1d8a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1d8c:	0a12      	lsrs	r2, r2, #8
    1d8e:	7399      	strb	r1, [r3, #14]
    1d90:	741a      	strb	r2, [r3, #16]
    1d92:	e7d2      	b.n	1d3a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1d94:	4601      	mov	r1, r0
    1d96:	2211      	movs	r2, #17
    1d98:	4618      	mov	r0, r3
}
    1d9a:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1d9c:	f7ff bf2e 	b.w	1bfc <memcpy>
    1da0:	00012b56 	.word	0x00012b56

00001da4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1da4:	b510      	push	{r4, lr}
    1da6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1da8:	7801      	ldrb	r1, [r0, #0]
    1daa:	7822      	ldrb	r2, [r4, #0]
    1dac:	428a      	cmp	r2, r1
{
    1dae:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1db0:	d00e      	beq.n	1dd0 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1db2:	4669      	mov	r1, sp
    1db4:	f7ff ffb8 	bl	1d28 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1db8:	a905      	add	r1, sp, #20
    1dba:	4620      	mov	r0, r4
    1dbc:	f7ff ffb4 	bl	1d28 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1dc0:	2210      	movs	r2, #16
    1dc2:	f10d 0115 	add.w	r1, sp, #21
    1dc6:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1dca:	f7ff ff02 	bl	1bd2 <memcmp>
    1dce:	e00a      	b.n	1de6 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1dd0:	2a01      	cmp	r2, #1
    1dd2:	d00a      	beq.n	1dea <bt_uuid_cmp+0x46>
    1dd4:	d304      	bcc.n	1de0 <bt_uuid_cmp+0x3c>
    1dd6:	2a02      	cmp	r2, #2
    1dd8:	d00a      	beq.n	1df0 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1dda:	f06f 0015 	mvn.w	r0, #21
    1dde:	e002      	b.n	1de6 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1de0:	8840      	ldrh	r0, [r0, #2]
    1de2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1de4:	1ac0      	subs	r0, r0, r3
}
    1de6:	b00a      	add	sp, #40	; 0x28
    1de8:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1dea:	6840      	ldr	r0, [r0, #4]
    1dec:	6863      	ldr	r3, [r4, #4]
    1dee:	e7f9      	b.n	1de4 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1df0:	2210      	movs	r2, #16
    1df2:	1c61      	adds	r1, r4, #1
    1df4:	3001      	adds	r0, #1
    1df6:	e7e8      	b.n	1dca <bt_uuid_cmp+0x26>

00001df8 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1df8:	4770      	bx	lr

00001dfa <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1dfa:	2207      	movs	r2, #7
    1dfc:	f7ff befe 	b.w	1bfc <memcpy>

00001e00 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1e00:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1e02:	f3bf 8f5b 	dmb	ish
    1e06:	e850 3f00 	ldrex	r3, [r0]
    1e0a:	ea43 0201 	orr.w	r2, r3, r1
    1e0e:	e840 2e00 	strex	lr, r2, [r0]
    1e12:	f1be 0f00 	cmp.w	lr, #0
    1e16:	d1f6      	bne.n	1e06 <atomic_or+0x6>
    1e18:	f3bf 8f5b 	dmb	ish
    1e1c:	4618      	mov	r0, r3
    1e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00001e22 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1e22:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1e24:	f3bf 8f5b 	dmb	ish
    1e28:	e850 3f00 	ldrex	r3, [r0]
    1e2c:	ea03 0201 	and.w	r2, r3, r1
    1e30:	e840 2e00 	strex	lr, r2, [r0]
    1e34:	f1be 0f00 	cmp.w	lr, #0
    1e38:	d1f6      	bne.n	1e28 <atomic_and+0x6>
    1e3a:	f3bf 8f5b 	dmb	ish
    1e3e:	4618      	mov	r0, r3
    1e40:	f85d fb04 	ldr.w	pc, [sp], #4

00001e44 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    1e44:	78c3      	ldrb	r3, [r0, #3]
    1e46:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1e48:	f241 3288 	movw	r2, #5000	; 0x1388
    1e4c:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1e50:	bf08      	it	eq
    1e52:	2200      	moveq	r2, #0
    1e54:	4801      	ldr	r0, [pc, #4]	; (1e5c <update_conn_param+0x18>)
    1e56:	f010 b9ab 	b.w	121b0 <k_delayed_work_submit_to_queue>
    1e5a:	bf00      	nop
    1e5c:	20001730 	.word	0x20001730

00001e60 <hci_cmd_done.isra.18>:

	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
	atomic_set(bt_dev.flags, flags);
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1e60:	b570      	push	{r4, r5, r6, lr}
    1e62:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1e64:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1e66:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1e68:	f00e fcec 	bl	10844 <net_buf_pool_get>
    1e6c:	4b0e      	ldr	r3, [pc, #56]	; (1ea8 <hci_cmd_done.isra.18+0x48>)
    1e6e:	4283      	cmp	r3, r0
    1e70:	d119      	bne.n	1ea6 <hci_cmd_done.isra.18+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1e72:	4628      	mov	r0, r5
    1e74:	f00e fcec 	bl	10850 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1e78:	4628      	mov	r0, r5
    1e7a:	f00e fce9 	bl	10850 <net_buf_id>
    1e7e:	4c0b      	ldr	r4, [pc, #44]	; (1eac <hci_cmd_done.isra.18+0x4c>)
    1e80:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1e84:	6843      	ldr	r3, [r0, #4]
    1e86:	b173      	cbz	r3, 1ea6 <hci_cmd_done.isra.18+0x46>
		cmd(buf)->status = status;
    1e88:	4628      	mov	r0, r5
    1e8a:	f00e fce1 	bl	10850 <net_buf_id>
    1e8e:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1e92:	4628      	mov	r0, r5
    1e94:	f00e fcdc 	bl	10850 <net_buf_id>
    1e98:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1ea0:	6840      	ldr	r0, [r0, #4]
    1ea2:	f00f be2a 	b.w	11afa <_impl_k_sem_give>
    1ea6:	bd70      	pop	{r4, r5, r6, pc}
    1ea8:	2000398c 	.word	0x2000398c
    1eac:	20000018 	.word	0x20000018

00001eb0 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1eb0:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1eb2:	f3bf 8f5b 	dmb	ish
    1eb6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    1eba:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1ebe:	f001 011f 	and.w	r1, r1, #31
    1ec2:	4108      	asrs	r0, r1
}
    1ec4:	f000 0001 	and.w	r0, r0, #1
    1ec8:	4770      	bx	lr
	...

00001ecc <bt_hci_cmd_create>:
{
    1ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ed0:	4680      	mov	r8, r0
    1ed2:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1ed4:	4813      	ldr	r0, [pc, #76]	; (1f24 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1ed6:	4d14      	ldr	r5, [pc, #80]	; (1f28 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1edc:	f00e fd46 	bl	1096c <net_buf_alloc_fixed>
    1ee0:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1ee2:	f100 0608 	add.w	r6, r0, #8
    1ee6:	2100      	movs	r1, #0
    1ee8:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1eea:	2700      	movs	r7, #0
    1eec:	f00e fd5d 	bl	109aa <net_buf_simple_reserve>
    1ef0:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1ef2:	4620      	mov	r0, r4
    1ef4:	f00e fcac 	bl	10850 <net_buf_id>
    1ef8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1efc:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1f00:	4620      	mov	r0, r4
    1f02:	f00e fca5 	bl	10850 <net_buf_id>
    1f06:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f0a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1f0c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f0e:	4630      	mov	r0, r6
    1f10:	f00e fd8e 	bl	10a30 <net_buf_simple_add>
	hdr->param_len = param_len;
    1f14:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1f18:	f8a0 8000 	strh.w	r8, [r0]
}
    1f1c:	4620      	mov	r0, r4
    1f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f22:	bf00      	nop
    1f24:	2000398c 	.word	0x2000398c
    1f28:	20000018 	.word	0x20000018

00001f2c <bt_hci_cmd_send_sync>:
{
    1f2c:	b570      	push	{r4, r5, r6, lr}
    1f2e:	4615      	mov	r5, r2
    1f30:	b086      	sub	sp, #24
	if (!buf) {
    1f32:	460c      	mov	r4, r1
    1f34:	b919      	cbnz	r1, 1f3e <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1f36:	f7ff ffc9 	bl	1ecc <bt_hci_cmd_create>
		if (!buf) {
    1f3a:	4604      	mov	r4, r0
    1f3c:	b368      	cbz	r0, 1f9a <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1f3e:	2201      	movs	r2, #1
    1f40:	2100      	movs	r1, #0
    1f42:	4668      	mov	r0, sp
    1f44:	f00f fdd0 	bl	11ae8 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1f48:	4620      	mov	r0, r4
    1f4a:	f00e fc81 	bl	10850 <net_buf_id>
    1f4e:	4e14      	ldr	r6, [pc, #80]	; (1fa0 <bt_hci_cmd_send_sync+0x74>)
    1f50:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1f54:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1f58:	4620      	mov	r0, r4
    1f5a:	f00e fd65 	bl	10a28 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1f5e:	4621      	mov	r1, r4
    1f60:	4810      	ldr	r0, [pc, #64]	; (1fa4 <bt_hci_cmd_send_sync+0x78>)
    1f62:	f00e fd26 	bl	109b2 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1f66:	f242 7110 	movw	r1, #10000	; 0x2710
    1f6a:	4668      	mov	r0, sp
    1f6c:	f00f fded 	bl	11b4a <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1f70:	4620      	mov	r0, r4
    1f72:	f00e fc6d 	bl	10850 <net_buf_id>
    1f76:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1f7a:	b130      	cbz	r0, 1f8a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1f7c:	4620      	mov	r0, r4
    1f7e:	f00e fd25 	bl	109cc <net_buf_unref>
		err = -EIO;
    1f82:	f06f 0004 	mvn.w	r0, #4
}
    1f86:	b006      	add	sp, #24
    1f88:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    1f8a:	b10d      	cbz	r5, 1f90 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    1f8c:	602c      	str	r4, [r5, #0]
    1f8e:	e7fa      	b.n	1f86 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    1f90:	4620      	mov	r0, r4
    1f92:	f00e fd1b 	bl	109cc <net_buf_unref>
		err = 0;
    1f96:	4628      	mov	r0, r5
    1f98:	e7f5      	b.n	1f86 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    1f9a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1f9e:	e7f2      	b.n	1f86 <bt_hci_cmd_send_sync+0x5a>
    1fa0:	20000018 	.word	0x20000018
    1fa4:	20003544 	.word	0x20003544

00001fa8 <set_le_scan_enable>:
{
    1fa8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1faa:	2102      	movs	r1, #2
{
    1fac:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1fae:	f242 000c 	movw	r0, #8204	; 0x200c
    1fb2:	f7ff ff8b 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    1fb6:	4604      	mov	r4, r0
    1fb8:	b330      	cbz	r0, 2008 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    1fba:	2102      	movs	r1, #2
    1fbc:	3008      	adds	r0, #8
    1fbe:	f00e fd37 	bl	10a30 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fc2:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    1fc4:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fc6:	d116      	bne.n	1ff6 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    1fc8:	210b      	movs	r1, #11
    1fca:	4811      	ldr	r0, [pc, #68]	; (2010 <set_le_scan_enable+0x68>)
    1fcc:	f7ff ff70 	bl	1eb0 <atomic_test_bit>
    1fd0:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    1fd2:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    1fd4:	4621      	mov	r1, r4
    1fd6:	2200      	movs	r2, #0
    1fd8:	f242 000c 	movw	r0, #8204	; 0x200c
    1fdc:	f7ff ffa6 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    1fe0:	4604      	mov	r4, r0
    1fe2:	b930      	cbnz	r0, 1ff2 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fe4:	2d01      	cmp	r5, #1
    1fe6:	d109      	bne.n	1ffc <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
    1fec:	4808      	ldr	r0, [pc, #32]	; (2010 <set_le_scan_enable+0x68>)
    1fee:	f7ff ff07 	bl	1e00 <atomic_or>
}
    1ff2:	4620      	mov	r0, r4
    1ff4:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1ff6:	2300      	movs	r3, #0
    1ff8:	7043      	strb	r3, [r0, #1]
    1ffa:	e7ea      	b.n	1fd2 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ffc:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2000:	4803      	ldr	r0, [pc, #12]	; (2010 <set_le_scan_enable+0x68>)
    2002:	f7ff ff0e 	bl	1e22 <atomic_and>
    2006:	e7f4      	b.n	1ff2 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    2008:	f06f 0436 	mvn.w	r4, #54	; 0x36
    200c:	e7f1      	b.n	1ff2 <set_le_scan_enable+0x4a>
    200e:	bf00      	nop
    2010:	200034f0 	.word	0x200034f0

00002014 <set_random_address>:
{
    2014:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    2016:	4d15      	ldr	r5, [pc, #84]	; (206c <set_random_address+0x58>)
    2018:	2206      	movs	r2, #6
    201a:	f105 0108 	add.w	r1, r5, #8
    201e:	4606      	mov	r6, r0
    2020:	f7ff fdd7 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2024:	4604      	mov	r4, r0
    2026:	b1d8      	cbz	r0, 2060 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2028:	2106      	movs	r1, #6
    202a:	f242 0005 	movw	r0, #8197	; 0x2005
    202e:	f7ff ff4d 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2032:	4604      	mov	r4, r0
    2034:	b1b0      	cbz	r0, 2064 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2036:	2206      	movs	r2, #6
    2038:	4631      	mov	r1, r6
    203a:	3008      	adds	r0, #8
    203c:	f00e fcfe 	bl	10a3c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2040:	4621      	mov	r1, r4
    2042:	2200      	movs	r2, #0
    2044:	f242 0005 	movw	r0, #8197	; 0x2005
    2048:	f7ff ff70 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    204c:	4604      	mov	r4, r0
    204e:	b938      	cbnz	r0, 2060 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    2050:	2206      	movs	r2, #6
    2052:	4631      	mov	r1, r6
    2054:	f105 0008 	add.w	r0, r5, #8
    2058:	f7ff fdd0 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    205c:	2301      	movs	r3, #1
    205e:	71eb      	strb	r3, [r5, #7]
}
    2060:	4620      	mov	r0, r4
    2062:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2064:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2068:	e7fa      	b.n	2060 <set_random_address+0x4c>
    206a:	bf00      	nop
    206c:	20003480 	.word	0x20003480

00002070 <set_advertise_enable>:
{
    2070:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2072:	2101      	movs	r1, #1
{
    2074:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2076:	f242 000a 	movw	r0, #8202	; 0x200a
    207a:	f7ff ff27 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    207e:	4604      	mov	r4, r0
    2080:	b1d8      	cbz	r0, 20ba <set_advertise_enable+0x4a>
    2082:	3008      	adds	r0, #8
	if (enable) {
    2084:	b18d      	cbz	r5, 20aa <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2086:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2088:	f00e fce1 	bl	10a4e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    208c:	4621      	mov	r1, r4
    208e:	2200      	movs	r2, #0
    2090:	f242 000a 	movw	r0, #8202	; 0x200a
    2094:	f7ff ff4a 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2098:	4604      	mov	r4, r0
    209a:	b920      	cbnz	r0, 20a6 <set_advertise_enable+0x36>
	if (enable) {
    209c:	b13d      	cbz	r5, 20ae <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    209e:	2140      	movs	r1, #64	; 0x40
    20a0:	4807      	ldr	r0, [pc, #28]	; (20c0 <set_advertise_enable+0x50>)
    20a2:	f7ff fead 	bl	1e00 <atomic_or>
}
    20a6:	4620      	mov	r0, r4
    20a8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    20aa:	4629      	mov	r1, r5
    20ac:	e7ec      	b.n	2088 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    20ae:	f06f 0140 	mvn.w	r1, #64	; 0x40
    20b2:	4803      	ldr	r0, [pc, #12]	; (20c0 <set_advertise_enable+0x50>)
    20b4:	f7ff feb5 	bl	1e22 <atomic_and>
    20b8:	e7f5      	b.n	20a6 <set_advertise_enable+0x36>
		return -ENOBUFS;
    20ba:	f06f 0436 	mvn.w	r4, #54	; 0x36
    20be:	e7f2      	b.n	20a6 <set_advertise_enable+0x36>
    20c0:	200034f0 	.word	0x200034f0

000020c4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    20c4:	8802      	ldrh	r2, [r0, #0]
    20c6:	8843      	ldrh	r3, [r0, #2]
    20c8:	429a      	cmp	r2, r3
{
    20ca:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    20cc:	d818      	bhi.n	2100 <bt_le_conn_params_valid+0x3c>
    20ce:	2a05      	cmp	r2, #5
    20d0:	d916      	bls.n	2100 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    20d2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    20d6:	d813      	bhi.n	2100 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    20d8:	8884      	ldrh	r4, [r0, #4]
    20da:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    20de:	d20f      	bcs.n	2100 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    20e0:	88c1      	ldrh	r1, [r0, #6]
    20e2:	f1a1 020a 	sub.w	r2, r1, #10
    20e6:	b292      	uxth	r2, r2
    20e8:	f640 4076 	movw	r0, #3190	; 0xc76
    20ec:	4282      	cmp	r2, r0
    20ee:	d807      	bhi.n	2100 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    20f0:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    20f4:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    20f8:	bfb4      	ite	lt
    20fa:	2001      	movlt	r0, #1
    20fc:	2000      	movge	r0, #0
    20fe:	bd10      	pop	{r4, pc}
		return false;
    2100:	2000      	movs	r0, #0
}
    2102:	bd10      	pop	{r4, pc}

00002104 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    2104:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    2106:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2108:	2106      	movs	r1, #6
{
    210a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    210c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2110:	f004 fed2 	bl	6eb8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    2114:	b918      	cbnz	r0, 211e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    2116:	79a3      	ldrb	r3, [r4, #6]
    2118:	f063 033f 	orn	r3, r3, #63	; 0x3f
    211c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    211e:	bd10      	pop	{r4, pc}

00002120 <bt_set_static_addr>:

int bt_set_static_addr(void)
{
    2120:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2122:	4d0c      	ldr	r5, [pc, #48]	; (2154 <bt_set_static_addr+0x34>)
    2124:	782b      	ldrb	r3, [r5, #0]
    2126:	2b01      	cmp	r3, #1
    2128:	d110      	bne.n	214c <bt_set_static_addr+0x2c>
    212a:	79ab      	ldrb	r3, [r5, #6]
    212c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2130:	2bc0      	cmp	r3, #192	; 0xc0
    2132:	d10b      	bne.n	214c <bt_set_static_addr+0x2c>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
    2134:	1c68      	adds	r0, r5, #1
    2136:	f7ff ff6d 	bl	2014 <set_random_address>
	if (err) {
    213a:	4604      	mov	r4, r0
    213c:	b920      	cbnz	r0, 2148 <bt_set_static_addr+0x28>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    213e:	2104      	movs	r1, #4
    2140:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2144:	f7ff fe5c 	bl	1e00 <atomic_or>
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM);

	return 0;
}
    2148:	4620      	mov	r0, r4
    214a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    214c:	f06f 0415 	mvn.w	r4, #21
    2150:	e7fa      	b.n	2148 <bt_set_static_addr+0x28>
    2152:	bf00      	nop
    2154:	20003480 	.word	0x20003480

00002158 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2158:	4b02      	ldr	r3, [pc, #8]	; (2164 <bt_send+0xc>)
    215a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    215e:	691b      	ldr	r3, [r3, #16]
    2160:	4718      	bx	r3
    2162:	bf00      	nop
    2164:	20003480 	.word	0x20003480

00002168 <bt_hci_cmd_send>:
{
    2168:	b538      	push	{r3, r4, r5, lr}
    216a:	4605      	mov	r5, r0
	if (!buf) {
    216c:	460c      	mov	r4, r1
    216e:	b919      	cbnz	r1, 2178 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    2170:	f7ff feac 	bl	1ecc <bt_hci_cmd_create>
		if (!buf) {
    2174:	4604      	mov	r4, r0
    2176:	b198      	cbz	r0, 21a0 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2178:	f640 4335 	movw	r3, #3125	; 0xc35
    217c:	429d      	cmp	r5, r3
    217e:	d109      	bne.n	2194 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    2180:	4620      	mov	r0, r4
    2182:	f7ff ffe9 	bl	2158 <bt_send>
		if (err) {
    2186:	4605      	mov	r5, r0
    2188:	b110      	cbz	r0, 2190 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    218a:	4620      	mov	r0, r4
    218c:	f00e fc1e 	bl	109cc <net_buf_unref>
}
    2190:	4628      	mov	r0, r5
    2192:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2194:	4621      	mov	r1, r4
    2196:	4804      	ldr	r0, [pc, #16]	; (21a8 <bt_hci_cmd_send+0x40>)
    2198:	f00e fc0b 	bl	109b2 <net_buf_put>
	return 0;
    219c:	2500      	movs	r5, #0
    219e:	e7f7      	b.n	2190 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    21a0:	f06f 0536 	mvn.w	r5, #54	; 0x36
    21a4:	e7f4      	b.n	2190 <bt_hci_cmd_send+0x28>
    21a6:	bf00      	nop
    21a8:	20003544 	.word	0x20003544

000021ac <start_le_scan>:
{
    21ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    21ae:	460d      	mov	r5, r1
    21b0:	4614      	mov	r4, r2
    21b2:	4606      	mov	r6, r0
	memset(&set_param, 0, sizeof(set_param));
    21b4:	2207      	movs	r2, #7
    21b6:	2100      	movs	r1, #0
    21b8:	4668      	mov	r0, sp
    21ba:	f7ff fd4b 	bl	1c54 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    21be:	f8ad 5001 	strh.w	r5, [sp, #1]
		set_param.addr_type =  bt_dev.id_addr.type;
    21c2:	4d1b      	ldr	r5, [pc, #108]	; (2230 <start_le_scan+0x84>)
	set_param.window = sys_cpu_to_le16(window);
    21c4:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.filter_policy = 0x00;
    21c8:	2300      	movs	r3, #0
    21ca:	f88d 3006 	strb.w	r3, [sp, #6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    21ce:	2107      	movs	r1, #7
		set_param.addr_type =  bt_dev.id_addr.type;
    21d0:	782b      	ldrb	r3, [r5, #0]
	set_param.scan_type = scan_type;
    21d2:	f88d 6000 	strb.w	r6, [sp]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    21d6:	f242 000b 	movw	r0, #8203	; 0x200b
		set_param.addr_type =  bt_dev.id_addr.type;
    21da:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    21de:	f7ff fe75 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    21e2:	4604      	mov	r4, r0
    21e4:	b300      	cbz	r0, 2228 <start_le_scan+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    21e6:	2207      	movs	r2, #7
    21e8:	4669      	mov	r1, sp
    21ea:	3008      	adds	r0, #8
    21ec:	f00e fc26 	bl	10a3c <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    21f0:	4621      	mov	r1, r4
    21f2:	f242 000b 	movw	r0, #8203	; 0x200b
    21f6:	f7ff ffb7 	bl	2168 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    21fa:	2001      	movs	r0, #1
    21fc:	f7ff fed4 	bl	1fa8 <set_le_scan_enable>
	if (err) {
    2200:	4604      	mov	r4, r0
    2202:	b938      	cbnz	r0, 2214 <start_le_scan+0x68>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2204:	2e01      	cmp	r6, #1
    2206:	d108      	bne.n	221a <start_le_scan+0x6e>
    2208:	f44f 6180 	mov.w	r1, #1024	; 0x400
    220c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2210:	f7ff fdf6 	bl	1e00 <atomic_or>
}
    2214:	4620      	mov	r0, r4
    2216:	b002      	add	sp, #8
    2218:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    221a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    221e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2222:	f7ff fdfe 	bl	1e22 <atomic_and>
    2226:	e7f5      	b.n	2214 <start_le_scan+0x68>
		return -ENOBUFS;
    2228:	f06f 0436 	mvn.w	r4, #54	; 0x36
    222c:	e7f2      	b.n	2214 <start_le_scan+0x68>
    222e:	bf00      	nop
    2230:	20003480 	.word	0x20003480

00002234 <bt_le_scan_update>:
{
    2234:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2236:	2109      	movs	r1, #9
{
    2238:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    223a:	4816      	ldr	r0, [pc, #88]	; (2294 <bt_le_scan_update+0x60>)
    223c:	f7ff fe38 	bl	1eb0 <atomic_test_bit>
    2240:	4602      	mov	r2, r0
    2242:	b108      	cbz	r0, 2248 <bt_le_scan_update+0x14>
		return 0;
    2244:	2000      	movs	r0, #0
    2246:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2248:	2108      	movs	r1, #8
    224a:	4812      	ldr	r0, [pc, #72]	; (2294 <bt_le_scan_update+0x60>)
    224c:	f7ff fe30 	bl	1eb0 <atomic_test_bit>
    2250:	b9d0      	cbnz	r0, 2288 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    2252:	2101      	movs	r1, #1
    2254:	2000      	movs	r0, #0
    2256:	f001 fb89 	bl	396c <bt_conn_lookup_state_le>
		if (!conn) {
    225a:	4604      	mov	r4, r0
    225c:	2800      	cmp	r0, #0
    225e:	d0f1      	beq.n	2244 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2260:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2264:	480b      	ldr	r0, [pc, #44]	; (2294 <bt_le_scan_update+0x60>)
    2266:	f7ff fdcb 	bl	1e00 <atomic_or>
		bt_conn_unref(conn);
    226a:	4620      	mov	r0, r4
    226c:	f001 fba0 	bl	39b0 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    2270:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2272:	bf15      	itete	ne
    2274:	2230      	movne	r2, #48	; 0x30
    2276:	2212      	moveq	r2, #18
    2278:	2160      	movne	r1, #96	; 0x60
    227a:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    227e:	2000      	movs	r0, #0
}
    2280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2284:	f7ff bf92 	b.w	21ac <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2288:	4610      	mov	r0, r2
    228a:	f7ff fe8d 	bl	1fa8 <set_le_scan_enable>
		if (err) {
    228e:	2800      	cmp	r0, #0
    2290:	d0df      	beq.n	2252 <bt_le_scan_update+0x1e>
    2292:	bd38      	pop	{r3, r4, r5, pc}
    2294:	200034f0 	.word	0x200034f0

00002298 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    2298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    229c:	4dc1      	ldr	r5, [pc, #772]	; (25a4 <bt_init+0x30c>)
    229e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    22a2:	6899      	ldr	r1, [r3, #8]
    22a4:	f011 0101 	ands.w	r1, r1, #1
{
    22a8:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    22aa:	d124      	bne.n	22f6 <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    22ac:	aa04      	add	r2, sp, #16
    22ae:	f640 4003 	movw	r0, #3075	; 0xc03
    22b2:	f7ff fe3b 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    22b6:	4604      	mov	r4, r0
    22b8:	2800      	cmp	r0, #0
    22ba:	f040 81c8 	bne.w	264e <bt_init+0x3b6>
	u8_t status = buf->data[0];
    22be:	9b04      	ldr	r3, [sp, #16]
    22c0:	689b      	ldr	r3, [r3, #8]
	if (status) {
    22c2:	781b      	ldrb	r3, [r3, #0]
    22c4:	b9a3      	cbnz	r3, 22f0 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    22c6:	4ab8      	ldr	r2, [pc, #736]	; (25a8 <bt_init+0x310>)
    22c8:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    22ca:	462b      	mov	r3, r5
    22cc:	f3bf 8f5b 	dmb	ish
    22d0:	f853 2f70 	ldr.w	r2, [r3, #112]!
    22d4:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    22d8:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    22dc:	f3bf 8f5b 	dmb	ish
    22e0:	e853 1f00 	ldrex	r1, [r3]
    22e4:	e843 2000 	strex	r0, r2, [r3]
    22e8:	2800      	cmp	r0, #0
    22ea:	d1f9      	bne.n	22e0 <bt_init+0x48>
    22ec:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    22f0:	9804      	ldr	r0, [sp, #16]
    22f2:	f00e fb6b 	bl	109cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    22f6:	aa04      	add	r2, sp, #16
    22f8:	2100      	movs	r1, #0
    22fa:	f241 0003 	movw	r0, #4099	; 0x1003
    22fe:	f7ff fe15 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2302:	4604      	mov	r4, r0
    2304:	2800      	cmp	r0, #0
    2306:	f040 81a2 	bne.w	264e <bt_init+0x3b6>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    230a:	9b04      	ldr	r3, [sp, #16]
    230c:	48a7      	ldr	r0, [pc, #668]	; (25ac <bt_init+0x314>)
    230e:	6899      	ldr	r1, [r3, #8]
    2310:	2208      	movs	r2, #8
    2312:	3101      	adds	r1, #1
    2314:	f7ff fc72 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2318:	9804      	ldr	r0, [sp, #16]
    231a:	f00e fb57 	bl	109cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    231e:	4621      	mov	r1, r4
    2320:	aa04      	add	r2, sp, #16
    2322:	f241 0001 	movw	r0, #4097	; 0x1001
    2326:	f7ff fe01 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    232a:	4604      	mov	r4, r0
    232c:	2800      	cmp	r0, #0
    232e:	f040 818e 	bne.w	264e <bt_init+0x3b6>
	read_local_ver_complete(rsp);
    2332:	9804      	ldr	r0, [sp, #16]
    2334:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2336:	785a      	ldrb	r2, [r3, #1]
    2338:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    233a:	78d9      	ldrb	r1, [r3, #3]
    233c:	789a      	ldrb	r2, [r3, #2]
    233e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2342:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2344:	791a      	ldrb	r2, [r3, #4]
    2346:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2348:	7a19      	ldrb	r1, [r3, #8]
    234a:	79da      	ldrb	r2, [r3, #7]
    234c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2350:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2352:	795a      	ldrb	r2, [r3, #5]
    2354:	799b      	ldrb	r3, [r3, #6]
    2356:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    235a:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    235c:	f00e fb36 	bl	109cc <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2360:	2103      	movs	r1, #3
    2362:	4893      	ldr	r0, [pc, #588]	; (25b0 <bt_init+0x318>)
    2364:	f7ff fda4 	bl	1eb0 <atomic_test_bit>
    2368:	4601      	mov	r1, r0
    236a:	b998      	cbnz	r0, 2394 <bt_init+0xfc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    236c:	aa04      	add	r2, sp, #16
    236e:	f241 0009 	movw	r0, #4105	; 0x1009
    2372:	f7ff fddb 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    2376:	4604      	mov	r4, r0
    2378:	2800      	cmp	r0, #0
    237a:	f040 8168 	bne.w	264e <bt_init+0x3b6>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    237e:	9b04      	ldr	r3, [sp, #16]
    2380:	488c      	ldr	r0, [pc, #560]	; (25b4 <bt_init+0x31c>)
    2382:	6899      	ldr	r1, [r3, #8]
    2384:	2206      	movs	r2, #6
    2386:	3101      	adds	r1, #1
    2388:	f7ff fc38 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    238c:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    238e:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    2390:	f00e fb1c 	bl	109cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2394:	aa04      	add	r2, sp, #16
    2396:	2100      	movs	r1, #0
    2398:	f241 0002 	movw	r0, #4098	; 0x1002
    239c:	f7ff fdc6 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    23a0:	4604      	mov	r4, r0
    23a2:	2800      	cmp	r0, #0
    23a4:	f040 8153 	bne.w	264e <bt_init+0x3b6>
	memcpy(bt_dev.supported_commands, rp->commands,
    23a8:	9b04      	ldr	r3, [sp, #16]
    23aa:	4883      	ldr	r0, [pc, #524]	; (25b8 <bt_init+0x320>)
    23ac:	6899      	ldr	r1, [r3, #8]
    23ae:	2240      	movs	r2, #64	; 0x40
    23b0:	3101      	adds	r1, #1
    23b2:	f7ff fc23 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    23b6:	9804      	ldr	r0, [sp, #16]
    23b8:	f00e fb08 	bl	109cc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    23bc:	7eab      	ldrb	r3, [r5, #26]
    23be:	065a      	lsls	r2, r3, #25
    23c0:	f140 81b0 	bpl.w	2724 <bt_init+0x48c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    23c4:	4621      	mov	r1, r4
    23c6:	aa04      	add	r2, sp, #16
    23c8:	f242 0003 	movw	r0, #8195	; 0x2003
    23cc:	f7ff fdae 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    23d0:	4604      	mov	r4, r0
    23d2:	2800      	cmp	r0, #0
    23d4:	f040 813b 	bne.w	264e <bt_init+0x3b6>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    23d8:	9b04      	ldr	r3, [sp, #16]
    23da:	4878      	ldr	r0, [pc, #480]	; (25bc <bt_init+0x324>)
    23dc:	6899      	ldr	r1, [r3, #8]
    23de:	2208      	movs	r2, #8
    23e0:	3101      	adds	r1, #1
    23e2:	f7ff fc0b 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    23e6:	9804      	ldr	r0, [sp, #16]
    23e8:	f00e faf0 	bl	109cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    23ec:	4621      	mov	r1, r4
    23ee:	aa04      	add	r2, sp, #16
    23f0:	f242 0002 	movw	r0, #8194	; 0x2002
    23f4:	f7ff fd9a 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    23f8:	4604      	mov	r4, r0
    23fa:	2800      	cmp	r0, #0
    23fc:	f040 8127 	bne.w	264e <bt_init+0x3b6>
    2400:	9b04      	ldr	r3, [sp, #16]
    2402:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2404:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    2408:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    240c:	b13a      	cbz	r2, 241e <bt_init+0x186>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    240e:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2410:	486b      	ldr	r0, [pc, #428]	; (25c0 <bt_init+0x328>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2412:	2a02      	cmp	r2, #2
    2414:	bf28      	it	cs
    2416:	2202      	movcs	r2, #2
    2418:	4611      	mov	r1, r2
    241a:	f00f fb65 	bl	11ae8 <_impl_k_sem_init>
	net_buf_unref(rsp);
    241e:	9804      	ldr	r0, [sp, #16]
    2420:	f00e fad4 	bl	109cc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2424:	7eac      	ldrb	r4, [r5, #26]
    2426:	f014 0420 	ands.w	r4, r4, #32
    242a:	f000 80f5 	beq.w	2618 <bt_init+0x380>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    242e:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2432:	071b      	lsls	r3, r3, #28
    2434:	d514      	bpl.n	2460 <bt_init+0x1c8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2436:	aa04      	add	r2, sp, #16
    2438:	2100      	movs	r1, #0
    243a:	f242 001c 	movw	r0, #8220	; 0x201c
    243e:	f7ff fd75 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    2442:	4604      	mov	r4, r0
    2444:	2800      	cmp	r0, #0
    2446:	f040 8102 	bne.w	264e <bt_init+0x3b6>
		le_read_supp_states_complete(rsp);
    244a:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    244c:	6883      	ldr	r3, [r0, #8]
    244e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2452:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2454:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2458:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    245c:	f00e fab6 	bl	109cc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2460:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2464:	069f      	lsls	r7, r3, #26
    2466:	f100 80f6 	bmi.w	2656 <bt_init+0x3be>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    246a:	2108      	movs	r1, #8
    246c:	f242 0001 	movw	r0, #8193	; 0x2001
    2470:	f7ff fd2c 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2474:	4604      	mov	r4, r0
    2476:	2800      	cmp	r0, #0
    2478:	f000 80d5 	beq.w	2626 <bt_init+0x38e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    247c:	2108      	movs	r1, #8
    247e:	4408      	add	r0, r1
    2480:	f00e fad6 	bl	10a30 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2484:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    2488:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    248a:	bf4c      	ite	mi
    248c:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    248e:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2490:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2492:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2496:	bf48      	it	mi
    2498:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    249c:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    24a0:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    24a4:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    24a8:	bf18      	it	ne
    24aa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    24ae:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    24b0:	bf08      	it	eq
    24b2:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    24b6:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    24b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    24bc:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    24be:	2200      	movs	r2, #0
    24c0:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    24c2:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    24c4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    24c6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    24c8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    24ca:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    24cc:	4621      	mov	r1, r4
    24ce:	f242 0001 	movw	r0, #8193	; 0x2001
    24d2:	f7ff fd2b 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    24d6:	4604      	mov	r4, r0
    24d8:	2800      	cmp	r0, #0
    24da:	f040 80b8 	bne.w	264e <bt_init+0x3b6>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    24de:	7eab      	ldrb	r3, [r5, #26]
    24e0:	069a      	lsls	r2, r3, #26
    24e2:	d421      	bmi.n	2528 <bt_init+0x290>
	if (bt_dev.le.mtu) {
    24e4:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    24e8:	b9f1      	cbnz	r1, 2528 <bt_init+0x290>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    24ea:	aa04      	add	r2, sp, #16
    24ec:	f241 0005 	movw	r0, #4101	; 0x1005
    24f0:	f7ff fd1c 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    24f4:	4604      	mov	r4, r0
    24f6:	2800      	cmp	r0, #0
    24f8:	f040 80a9 	bne.w	264e <bt_init+0x3b6>
	if (bt_dev.le.mtu) {
    24fc:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2500:	b97b      	cbnz	r3, 2522 <bt_init+0x28a>
    2502:	9b04      	ldr	r3, [sp, #16]
    2504:	482e      	ldr	r0, [pc, #184]	; (25c0 <bt_init+0x328>)
    2506:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2508:	7899      	ldrb	r1, [r3, #2]
    250a:	785a      	ldrb	r2, [r3, #1]
    250c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2510:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2514:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2516:	2a02      	cmp	r2, #2
    2518:	bf28      	it	cs
    251a:	2202      	movcs	r2, #2
    251c:	4611      	mov	r1, r2
    251e:	f00f fae3 	bl	11ae8 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2522:	9804      	ldr	r0, [sp, #16]
    2524:	f00e fa52 	bl	109cc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2528:	2108      	movs	r1, #8
    252a:	f640 4001 	movw	r0, #3073	; 0xc01
    252e:	f7ff fccd 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2532:	4604      	mov	r4, r0
    2534:	2800      	cmp	r0, #0
    2536:	d076      	beq.n	2626 <bt_init+0x38e>
	ev = net_buf_add(buf, sizeof(*ev));
    2538:	2108      	movs	r1, #8
    253a:	4408      	add	r0, r1
    253c:	f00e fa78 	bl	10a30 <net_buf_simple_add>
	dst[0] = val;
    2540:	2310      	movs	r3, #16
    2542:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2544:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    2546:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2548:	7043      	strb	r3, [r0, #1]
    254a:	2602      	movs	r6, #2
    254c:	2320      	movs	r3, #32
	dst[0] = val;
    254e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2550:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    2552:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2554:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2556:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2558:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    255a:	4621      	mov	r1, r4
    255c:	f640 4001 	movw	r0, #3073	; 0xc01
    2560:	f7ff fce4 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2564:	4604      	mov	r4, r0
    2566:	2800      	cmp	r0, #0
    2568:	d171      	bne.n	264e <bt_init+0x3b6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    256a:	4601      	mov	r1, r0
    256c:	aa04      	add	r2, sp, #16
    256e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2572:	f7ff fcdb 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2576:	4604      	mov	r4, r0
    2578:	2800      	cmp	r0, #0
    257a:	d138      	bne.n	25ee <bt_init+0x356>
	net_buf_unref(rsp);
    257c:	9804      	ldr	r0, [sp, #16]
    257e:	f00e fa25 	bl	109cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2582:	4621      	mov	r1, r4
    2584:	aa04      	add	r2, sp, #16
    2586:	f64f 4002 	movw	r0, #64514	; 0xfc02
    258a:	f7ff fccf 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    258e:	4604      	mov	r4, r0
    2590:	bb68      	cbnz	r0, 25ee <bt_init+0x356>
	rp.cmds = (void *)rsp->data;
    2592:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2594:	480b      	ldr	r0, [pc, #44]	; (25c4 <bt_init+0x32c>)
    2596:	6899      	ldr	r1, [r3, #8]
    2598:	4632      	mov	r2, r6
    259a:	3101      	adds	r1, #1
    259c:	f7ff fb2e 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    25a0:	9804      	ldr	r0, [sp, #16]
    25a2:	e011      	b.n	25c8 <bt_init+0x330>
    25a4:	20003480 	.word	0x20003480
    25a8:	20000074 	.word	0x20000074
    25ac:	20003496 	.word	0x20003496
    25b0:	200034f0 	.word	0x200034f0
    25b4:	20003481 	.word	0x20003481
    25b8:	2000349e 	.word	0x2000349e
    25bc:	200034f8 	.word	0x200034f8
    25c0:	2000350c 	.word	0x2000350c
    25c4:	200034df 	.word	0x200034df
    25c8:	f00e fa00 	bl	109cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    25cc:	aa04      	add	r2, sp, #16
    25ce:	4621      	mov	r1, r4
    25d0:	f64f 4003 	movw	r0, #64515	; 0xfc03
    25d4:	f7ff fcaa 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    25d8:	b948      	cbnz	r0, 25ee <bt_init+0x356>
	rp.feat = (void *)rsp->data;
    25da:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    25dc:	4853      	ldr	r0, [pc, #332]	; (272c <bt_init+0x494>)
    25de:	6899      	ldr	r1, [r3, #8]
    25e0:	2201      	movs	r2, #1
    25e2:	4411      	add	r1, r2
    25e4:	f7ff fb0a 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    25e8:	9804      	ldr	r0, [sp, #16]
    25ea:	f00e f9ef 	bl	109cc <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    25ee:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    25f0:	2207      	movs	r2, #7
    25f2:	a904      	add	r1, sp, #16
    25f4:	484e      	ldr	r0, [pc, #312]	; (2730 <bt_init+0x498>)
    25f6:	9304      	str	r3, [sp, #16]
    25f8:	f8cd 3013 	str.w	r3, [sp, #19]
    25fc:	f7ff fae9 	bl	1bd2 <memcmp>
    2600:	2800      	cmp	r0, #0
    2602:	d153      	bne.n	26ac <bt_init+0x414>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2604:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2608:	07db      	lsls	r3, r3, #31
    260a:	d46c      	bmi.n	26e6 <bt_init+0x44e>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    260c:	4848      	ldr	r0, [pc, #288]	; (2730 <bt_init+0x498>)
    260e:	f7ff fd79 	bl	2104 <bt_addr_le_create_static>
		if (err) {
    2612:	4604      	mov	r4, r0
    2614:	b9d8      	cbnz	r0, 264e <bt_init+0x3b6>
    2616:	e07c      	b.n	2712 <bt_init+0x47a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2618:	2102      	movs	r1, #2
    261a:	f640 406d 	movw	r0, #3181	; 0xc6d
    261e:	f7ff fc55 	bl	1ecc <bt_hci_cmd_create>
		if (!buf) {
    2622:	4606      	mov	r6, r0
    2624:	b910      	cbnz	r0, 262c <bt_init+0x394>
		return -ENOBUFS;
    2626:	f06f 0436 	mvn.w	r4, #54	; 0x36
    262a:	e010      	b.n	264e <bt_init+0x3b6>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    262c:	2102      	movs	r1, #2
    262e:	3008      	adds	r0, #8
    2630:	f00e f9fe 	bl	10a30 <net_buf_simple_add>
		cp_le->le = 0x01;
    2634:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2636:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2638:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    263a:	4622      	mov	r2, r4
    263c:	4631      	mov	r1, r6
    263e:	f640 406d 	movw	r0, #3181	; 0xc6d
    2642:	f7ff fc73 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    2646:	4604      	mov	r4, r0
    2648:	2800      	cmp	r0, #0
    264a:	f43f aef0 	beq.w	242e <bt_init+0x196>
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    264e:	4620      	mov	r0, r4
    2650:	b006      	add	sp, #24
    2652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2656:	aa04      	add	r2, sp, #16
    2658:	2100      	movs	r1, #0
    265a:	f242 002f 	movw	r0, #8239	; 0x202f
    265e:	f7ff fc65 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    2662:	4604      	mov	r4, r0
    2664:	2800      	cmp	r0, #0
    2666:	d1f2      	bne.n	264e <bt_init+0x3b6>
		rp = (void *)rsp->data;
    2668:	9804      	ldr	r0, [sp, #16]
    266a:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    266c:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2670:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    2674:	f00e f9aa 	bl	109cc <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2678:	2104      	movs	r1, #4
    267a:	f242 0024 	movw	r0, #8228	; 0x2024
    267e:	f7ff fc25 	bl	1ecc <bt_hci_cmd_create>
		if (!buf) {
    2682:	4606      	mov	r6, r0
    2684:	2800      	cmp	r0, #0
    2686:	d0ce      	beq.n	2626 <bt_init+0x38e>
		cp = net_buf_add(buf, sizeof(*cp));
    2688:	2104      	movs	r1, #4
    268a:	3008      	adds	r0, #8
    268c:	f00e f9d0 	bl	10a30 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2690:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2692:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2696:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2698:	4631      	mov	r1, r6
    269a:	f242 0024 	movw	r0, #8228	; 0x2024
    269e:	f7ff fc45 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    26a2:	4604      	mov	r4, r0
    26a4:	2800      	cmp	r0, #0
    26a6:	f43f aee0 	beq.w	246a <bt_init+0x1d2>
    26aa:	e7d0      	b.n	264e <bt_init+0x3b6>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    26ac:	4b21      	ldr	r3, [pc, #132]	; (2734 <bt_init+0x49c>)
    26ae:	6818      	ldr	r0, [r3, #0]
    26b0:	889a      	ldrh	r2, [r3, #4]
    26b2:	9002      	str	r0, [sp, #8]
    26b4:	799b      	ldrb	r3, [r3, #6]
    26b6:	f8ad 200c 	strh.w	r2, [sp, #12]
    26ba:	a902      	add	r1, sp, #8
    26bc:	2207      	movs	r2, #7
    26be:	481c      	ldr	r0, [pc, #112]	; (2730 <bt_init+0x498>)
    26c0:	f88d 300e 	strb.w	r3, [sp, #14]
    26c4:	f7ff fa85 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    26c8:	2800      	cmp	r0, #0
    26ca:	d09b      	beq.n	2604 <bt_init+0x36c>
		err = bt_conn_init();
    26cc:	f001 fb9e 	bl	3e0c <bt_conn_init>
		if (err) {
    26d0:	4604      	mov	r4, r0
    26d2:	2800      	cmp	r0, #0
    26d4:	d1bb      	bne.n	264e <bt_init+0x3b6>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    26d6:	2102      	movs	r1, #2
    26d8:	4817      	ldr	r0, [pc, #92]	; (2738 <bt_init+0x4a0>)
    26da:	f7ff fb91 	bl	1e00 <atomic_or>
	bt_le_scan_update(false);
    26de:	4620      	mov	r0, r4
    26e0:	f7ff fda8 	bl	2234 <bt_le_scan_update>
    26e4:	e7b3      	b.n	264e <bt_init+0x3b6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    26e6:	aa01      	add	r2, sp, #4
    26e8:	2100      	movs	r1, #0
    26ea:	f64f 4009 	movw	r0, #64521	; 0xfc09
    26ee:	f7ff fc1d 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    26f2:	2800      	cmp	r0, #0
    26f4:	d18a      	bne.n	260c <bt_init+0x374>
		rp = (void *)rsp->data;
    26f6:	9801      	ldr	r0, [sp, #4]
    26f8:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    26fa:	784b      	ldrb	r3, [r1, #1]
    26fc:	b17b      	cbz	r3, 271e <bt_init+0x486>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    26fe:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2700:	2206      	movs	r2, #6
    2702:	3102      	adds	r1, #2
    2704:	480d      	ldr	r0, [pc, #52]	; (273c <bt_init+0x4a4>)
    2706:	702b      	strb	r3, [r5, #0]
    2708:	f7ff fa78 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    270c:	9801      	ldr	r0, [sp, #4]
    270e:	f00e f95d 	bl	109cc <net_buf_unref>
		return bt_set_static_addr();
    2712:	f7ff fd05 	bl	2120 <bt_set_static_addr>
    2716:	4604      	mov	r4, r0
		if (err) {
    2718:	2800      	cmp	r0, #0
    271a:	d0d7      	beq.n	26cc <bt_init+0x434>
    271c:	e797      	b.n	264e <bt_init+0x3b6>
		net_buf_unref(rsp);
    271e:	f00e f955 	bl	109cc <net_buf_unref>
    2722:	e773      	b.n	260c <bt_init+0x374>
		return -ENODEV;
    2724:	f06f 0412 	mvn.w	r4, #18
    2728:	e791      	b.n	264e <bt_init+0x3b6>
    272a:	bf00      	nop
    272c:	200034de 	.word	0x200034de
    2730:	20003480 	.word	0x20003480
    2734:	0001258c 	.word	0x0001258c
    2738:	200034f0 	.word	0x200034f0
    273c:	20003481 	.word	0x20003481

00002740 <init_work>:

static void init_work(struct k_work *work)
{
    2740:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2742:	f7ff fda9 	bl	2298 <bt_init>
	if (ready_cb) {
    2746:	4b03      	ldr	r3, [pc, #12]	; (2754 <init_work+0x14>)
    2748:	681b      	ldr	r3, [r3, #0]
    274a:	b113      	cbz	r3, 2752 <init_work+0x12>
		ready_cb(err);
	}
}
    274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2750:	4718      	bx	r3
    2752:	bd10      	pop	{r4, pc}
    2754:	20000070 	.word	0x20000070

00002758 <hci_le_set_phy.isra.30>:
static int hci_le_set_phy(struct bt_conn *conn)
    2758:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    275a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    275c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    275e:	f242 0032 	movw	r0, #8242	; 0x2032
    2762:	f7ff fbb3 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2766:	4605      	mov	r5, r0
    2768:	b198      	cbz	r0, 2792 <hci_le_set_phy.isra.30+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    276a:	2107      	movs	r1, #7
    276c:	3008      	adds	r0, #8
    276e:	f00e f95f 	bl	10a30 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2772:	8823      	ldrh	r3, [r4, #0]
    2774:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2776:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2778:	2302      	movs	r3, #2
	cp->all_phys = 0;
    277a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    277c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    277e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2780:	7144      	strb	r4, [r0, #5]
    2782:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2784:	4629      	mov	r1, r5
    2786:	f242 0032 	movw	r0, #8242	; 0x2032
    278a:	f7ff fced 	bl	2168 <bt_hci_cmd_send>
	return 0;
    278e:	4620      	mov	r0, r4
    2790:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2792:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2796:	bd38      	pop	{r3, r4, r5, pc}

00002798 <hci_le_set_data_len.isra.31>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    279a:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    279c:	aa01      	add	r2, sp, #4
    279e:	2100      	movs	r1, #0
    27a0:	f242 002f 	movw	r0, #8239	; 0x202f
    27a4:	f7ff fbc2 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    27a8:	b9d8      	cbnz	r0, 27e2 <hci_le_set_data_len.isra.31+0x4a>
	rp = (void *)rsp->data;
    27aa:	9801      	ldr	r0, [sp, #4]
    27ac:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    27ae:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    27b2:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    27b6:	f00e f909 	bl	109cc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    27ba:	2106      	movs	r1, #6
    27bc:	f242 0022 	movw	r0, #8226	; 0x2022
    27c0:	f7ff fb84 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    27c4:	4604      	mov	r4, r0
    27c6:	b170      	cbz	r0, 27e6 <hci_le_set_data_len.isra.31+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    27c8:	2106      	movs	r1, #6
    27ca:	3008      	adds	r0, #8
    27cc:	f00e f930 	bl	10a30 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    27d0:	883b      	ldrh	r3, [r7, #0]
    27d2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    27d4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    27d6:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    27d8:	4621      	mov	r1, r4
    27da:	f242 0022 	movw	r0, #8226	; 0x2022
    27de:	f7ff fcc3 	bl	2168 <bt_hci_cmd_send>
}
    27e2:	b003      	add	sp, #12
    27e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    27e6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    27ea:	e7fa      	b.n	27e2 <hci_le_set_data_len.isra.31+0x4a>

000027ec <le_enh_conn_complete>:
{
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    27ee:	7803      	ldrb	r3, [r0, #0]
{
    27f0:	b085      	sub	sp, #20
    27f2:	4605      	mov	r5, r0
	if (evt->status) {
    27f4:	b17b      	cbz	r3, 2816 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    27f6:	2102      	movs	r1, #2
    27f8:	2000      	movs	r0, #0
    27fa:	f001 f8b7 	bl	396c <bt_conn_lookup_state_le>
		if (!conn) {
    27fe:	4604      	mov	r4, r0
    2800:	b138      	cbz	r0, 2812 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2802:	782b      	ldrb	r3, [r5, #0]
    2804:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2806:	2100      	movs	r1, #0
    2808:	f000 ffba 	bl	3780 <bt_conn_set_state>
		bt_conn_unref(conn);
    280c:	4620      	mov	r0, r4
    280e:	f001 f8cf 	bl	39b0 <bt_conn_unref>
}
    2812:	b005      	add	sp, #20
    2814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2816:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2818:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    281c:	4621      	mov	r1, r4
    281e:	a802      	add	r0, sp, #8
    2820:	f7ff faeb 	bl	1dfa <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2824:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2828:	3b02      	subs	r3, #2
    282a:	b2db      	uxtb	r3, r3
    282c:	2b01      	cmp	r3, #1
    282e:	d87d      	bhi.n	292c <le_enh_conn_complete+0x140>
    2830:	2206      	movs	r2, #6
    2832:	f105 0111 	add.w	r1, r5, #17
    2836:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    283a:	f88d 3008 	strb.w	r3, [sp, #8]
    283e:	f7ff f9dd 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2842:	2301      	movs	r3, #1
    2844:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2848:	2102      	movs	r1, #2
    284a:	a802      	add	r0, sp, #8
    284c:	f001 f88e 	bl	396c <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2850:	78eb      	ldrb	r3, [r5, #3]
    2852:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2854:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2856:	d109      	bne.n	286c <le_enh_conn_complete+0x80>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2858:	f06f 0140 	mvn.w	r1, #64	; 0x40
    285c:	4844      	ldr	r0, [pc, #272]	; (2970 <le_enh_conn_complete+0x184>)
    285e:	f7ff fae0 	bl	1e22 <atomic_and>
		if (!conn) {
    2862:	b92c      	cbnz	r4, 2870 <le_enh_conn_complete+0x84>
			conn = bt_conn_add_le(&id_addr);
    2864:	a802      	add	r0, sp, #8
    2866:	f000 ff57 	bl	3718 <bt_conn_add_le>
    286a:	4604      	mov	r4, r0
	if (!conn) {
    286c:	2c00      	cmp	r4, #0
    286e:	d0d0      	beq.n	2812 <le_enh_conn_complete+0x26>
	conn->handle   = handle;
    2870:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2872:	a902      	add	r1, sp, #8
	conn->handle   = handle;
    2874:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2878:	f7ff fabf 	bl	1dfa <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    287c:	7e2a      	ldrb	r2, [r5, #24]
    287e:	7deb      	ldrb	r3, [r5, #23]
    2880:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2884:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2888:	7eaa      	ldrb	r2, [r5, #26]
    288a:	7e6b      	ldrb	r3, [r5, #25]
    288c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2890:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2894:	7eeb      	ldrb	r3, [r5, #27]
    2896:	7f2a      	ldrb	r2, [r5, #28]
    2898:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    289c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    28a0:	78ee      	ldrb	r6, [r5, #3]
    28a2:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    28a4:	2e01      	cmp	r6, #1
    28a6:	d11a      	bne.n	28de <le_enh_conn_complete+0xf2>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    28a8:	4f32      	ldr	r7, [pc, #200]	; (2974 <le_enh_conn_complete+0x188>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    28aa:	4669      	mov	r1, sp
    28ac:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    28b0:	f7ff faa3 	bl	1dfa <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    28b4:	4639      	mov	r1, r7
    28b6:	f104 0052 	add.w	r0, r4, #82	; 0x52
    28ba:	f7ff fa9e 	bl	1dfa <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    28be:	2107      	movs	r1, #7
    28c0:	f107 0070 	add.w	r0, r7, #112	; 0x70
    28c4:	f7ff faf4 	bl	1eb0 <atomic_test_bit>
    28c8:	b148      	cbz	r0, 28de <le_enh_conn_complete+0xf2>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    28ca:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    28ce:	2200      	movs	r2, #0
    28d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    28d4:	4313      	orrs	r3, r2
    28d6:	d002      	beq.n	28de <le_enh_conn_complete+0xf2>
			set_advertise_enable(true);
    28d8:	4630      	mov	r0, r6
    28da:	f7ff fbc9 	bl	2070 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    28de:	2103      	movs	r1, #3
    28e0:	4620      	mov	r0, r4
    28e2:	f000 ff4d 	bl	3780 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    28e6:	7a63      	ldrb	r3, [r4, #9]
    28e8:	2b03      	cmp	r3, #3
    28ea:	d118      	bne.n	291e <le_enh_conn_complete+0x132>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    28ec:	78eb      	ldrb	r3, [r5, #3]
    28ee:	b123      	cbz	r3, 28fa <le_enh_conn_complete+0x10e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    28f0:	4b20      	ldr	r3, [pc, #128]	; (2974 <le_enh_conn_complete+0x188>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    28f2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    28f6:	0719      	lsls	r1, r3, #28
    28f8:	d51d      	bpl.n	2936 <le_enh_conn_complete+0x14a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    28fa:	2102      	movs	r1, #2
    28fc:	f242 0016 	movw	r0, #8214	; 0x2016
    2900:	f7ff fae4 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2904:	4605      	mov	r5, r0
    2906:	b1b0      	cbz	r0, 2936 <le_enh_conn_complete+0x14a>
	cp = net_buf_add(buf, sizeof(*cp));
    2908:	2102      	movs	r1, #2
    290a:	3008      	adds	r0, #8
    290c:	f00e f890 	bl	10a30 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2910:	8823      	ldrh	r3, [r4, #0]
    2912:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2914:	4629      	mov	r1, r5
    2916:	f242 0016 	movw	r0, #8214	; 0x2016
    291a:	f7ff fc25 	bl	2168 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    291e:	4620      	mov	r0, r4
    2920:	f001 f846 	bl	39b0 <bt_conn_unref>
	bt_le_scan_update(false);
    2924:	2000      	movs	r0, #0
    2926:	f7ff fc85 	bl	2234 <bt_le_scan_update>
    292a:	e772      	b.n	2812 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    292c:	4621      	mov	r1, r4
    292e:	4668      	mov	r0, sp
    2930:	f7ff fa63 	bl	1dfa <bt_addr_le_copy>
    2934:	e788      	b.n	2848 <le_enh_conn_complete+0x5c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2936:	4d0f      	ldr	r5, [pc, #60]	; (2974 <le_enh_conn_complete+0x188>)
    2938:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    293c:	07d2      	lsls	r2, r2, #31
    293e:	d508      	bpl.n	2952 <le_enh_conn_complete+0x166>
		err = hci_le_set_phy(conn);
    2940:	4620      	mov	r0, r4
    2942:	f7ff ff09 	bl	2758 <hci_le_set_phy.isra.30>
		if (!err) {
    2946:	b920      	cbnz	r0, 2952 <le_enh_conn_complete+0x166>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2948:	2180      	movs	r1, #128	; 0x80
    294a:	1d20      	adds	r0, r4, #4
    294c:	f7ff fa58 	bl	1e00 <atomic_or>
    2950:	e7e5      	b.n	291e <le_enh_conn_complete+0x132>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2952:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2956:	069b      	lsls	r3, r3, #26
    2958:	d506      	bpl.n	2968 <le_enh_conn_complete+0x17c>
		err = hci_le_set_data_len(conn);
    295a:	4620      	mov	r0, r4
    295c:	f7ff ff1c 	bl	2798 <hci_le_set_data_len.isra.31>
		if (!err) {
    2960:	b910      	cbnz	r0, 2968 <le_enh_conn_complete+0x17c>
    2962:	f44f 7180 	mov.w	r1, #256	; 0x100
    2966:	e7f0      	b.n	294a <le_enh_conn_complete+0x15e>
	update_conn_param(conn);
    2968:	4620      	mov	r0, r4
    296a:	f7ff fa6b 	bl	1e44 <update_conn_param>
    296e:	e7d6      	b.n	291e <le_enh_conn_complete+0x132>
    2970:	200034f0 	.word	0x200034f0
    2974:	20003480 	.word	0x20003480

00002978 <le_conn_param_neg_reply>:
{
    2978:	b570      	push	{r4, r5, r6, lr}
    297a:	4606      	mov	r6, r0
    297c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    297e:	f242 0021 	movw	r0, #8225	; 0x2021
    2982:	2103      	movs	r1, #3
    2984:	f7ff faa2 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2988:	4604      	mov	r4, r0
    298a:	b160      	cbz	r0, 29a6 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    298c:	2103      	movs	r1, #3
    298e:	3008      	adds	r0, #8
    2990:	f00e f84e 	bl	10a30 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2994:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2996:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2998:	4621      	mov	r1, r4
    299a:	f242 0021 	movw	r0, #8225	; 0x2021
}
    299e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    29a2:	f7ff bbe1 	b.w	2168 <bt_hci_cmd_send>
}
    29a6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    29aa:	bd70      	pop	{r4, r5, r6, pc}

000029ac <hci_tx_thread>:
{
    29ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    29b0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2a94 <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    29b4:	4c35      	ldr	r4, [pc, #212]	; (2a8c <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    29b6:	f898 300d 	ldrb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    29ba:	4835      	ldr	r0, [pc, #212]	; (2a90 <hci_tx_thread+0xe4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    29bc:	f36f 1307 	bfc	r3, #4, #4
    29c0:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    29c4:	f000 fe60 	bl	3688 <bt_conn_prepare_events>
    29c8:	1c47      	adds	r7, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    29ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    29ce:	4639      	mov	r1, r7
    29d0:	4830      	ldr	r0, [pc, #192]	; (2a94 <hci_tx_thread+0xe8>)
    29d2:	f00f fcd3 	bl	1237c <_impl_k_poll>
		BT_ASSERT(err == 0);
    29d6:	b9b8      	cbnz	r0, 2a08 <hci_tx_thread+0x5c>
    29d8:	4d2e      	ldr	r5, [pc, #184]	; (2a94 <hci_tx_thread+0xe8>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    29da:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2a98 <hci_tx_thread+0xec>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    29de:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
	for (; count; ev++, count--) {
    29e2:	b917      	cbnz	r7, 29ea <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    29e4:	f00f f84a 	bl	11a7c <_impl_k_yield>
    29e8:	e7e5      	b.n	29b6 <hci_tx_thread+0xa>
		switch (ev->state) {
    29ea:	7b6b      	ldrb	r3, [r5, #13]
    29ec:	091b      	lsrs	r3, r3, #4
    29ee:	2b04      	cmp	r3, #4
    29f0:	d139      	bne.n	2a66 <hci_tx_thread+0xba>
			if (ev->tag == BT_EVENT_CMD_TX) {
    29f2:	f895 a00c 	ldrb.w	sl, [r5, #12]
    29f6:	f1ba 0f00 	cmp.w	sl, #0
    29fa:	d137      	bne.n	2a6c <hci_tx_thread+0xc0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    29fc:	4651      	mov	r1, sl
    29fe:	4658      	mov	r0, fp
    2a00:	f00d ffba 	bl	10978 <net_buf_get>
	BT_ASSERT(buf);
    2a04:	4606      	mov	r6, r0
    2a06:	b928      	cbnz	r0, 2a14 <hci_tx_thread+0x68>
    2a08:	4040      	eors	r0, r0
    2a0a:	f380 8811 	msr	BASEPRI, r0
    2a0e:	f04f 0004 	mov.w	r0, #4
    2a12:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2a18:	4648      	mov	r0, r9
    2a1a:	f00f f896 	bl	11b4a <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2a1e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2a22:	b118      	cbz	r0, 2a2c <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
    2a24:	f00d ffd2 	bl	109cc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2a28:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    2a2c:	4630      	mov	r0, r6
    2a2e:	f00d fffb 	bl	10a28 <net_buf_ref>
    2a32:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    2a36:	4630      	mov	r0, r6
    2a38:	f7ff fb8e 	bl	2158 <bt_send>
	if (err) {
    2a3c:	b198      	cbz	r0, 2a66 <hci_tx_thread+0xba>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2a3e:	4648      	mov	r0, r9
    2a40:	f00f f85b 	bl	11afa <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2a44:	4630      	mov	r0, r6
    2a46:	f00d ff03 	bl	10850 <net_buf_id>
    2a4a:	2100      	movs	r1, #0
    2a4c:	201f      	movs	r0, #31
    2a4e:	f7ff fa07 	bl	1e60 <hci_cmd_done.isra.18>
		net_buf_unref(bt_dev.sent_cmd);
    2a52:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2a56:	f00d ffb9 	bl	109cc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2a5a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2a5c:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    2a5e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    2a62:	f00d ffb3 	bl	109cc <net_buf_unref>
	for (; count; ev++, count--) {
    2a66:	3514      	adds	r5, #20
    2a68:	3f01      	subs	r7, #1
    2a6a:	e7ba      	b.n	29e2 <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2a6c:	f1ba 0f01 	cmp.w	sl, #1
    2a70:	d104      	bne.n	2a7c <hci_tx_thread+0xd0>
					conn = CONTAINER_OF(ev->fifo,
    2a72:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    2a74:	3818      	subs	r0, #24
    2a76:	f000 fd47 	bl	3508 <bt_conn_notify_tx>
    2a7a:	e7f4      	b.n	2a66 <hci_tx_thread+0xba>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2a7c:	f1ba 0f02 	cmp.w	sl, #2
    2a80:	d1f1      	bne.n	2a66 <hci_tx_thread+0xba>
					conn = CONTAINER_OF(ev->fifo,
    2a82:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    2a84:	3828      	subs	r0, #40	; 0x28
    2a86:	f001 f95b 	bl	3d40 <bt_conn_process_tx>
    2a8a:	e7ec      	b.n	2a66 <hci_tx_thread+0xba>
    2a8c:	20003480 	.word	0x20003480
    2a90:	2000356c 	.word	0x2000356c
    2a94:	20003558 	.word	0x20003558
    2a98:	20003528 	.word	0x20003528

00002a9c <bt_recv>:
{
    2a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    2aa0:	7d03      	ldrb	r3, [r0, #20]
    2aa2:	2b01      	cmp	r3, #1
{
    2aa4:	b08f      	sub	sp, #60	; 0x3c
    2aa6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2aa8:	d02a      	beq.n	2b00 <bt_recv+0x64>
    2aaa:	2b03      	cmp	r3, #3
    2aac:	f040 828e 	bne.w	2fcc <bt_recv+0x530>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    2ab0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    2ab2:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    2ab4:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    2ab6:	f3c6 030b 	ubfx	r3, r6, #0, #12
    2aba:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    2abc:	23ff      	movs	r3, #255	; 0xff
    2abe:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    2ac0:	2104      	movs	r1, #4
    2ac2:	3008      	adds	r0, #8
    2ac4:	f00d ffe2 	bl	10a8c <net_buf_simple_pull>
	if (buf->len != len) {
    2ac8:	89a3      	ldrh	r3, [r4, #12]
    2aca:	42ab      	cmp	r3, r5
    2acc:	d003      	beq.n	2ad6 <bt_recv+0x3a>
	net_buf_unref(buf);
    2ace:	4620      	mov	r0, r4
    2ad0:	f00d ff7c 	bl	109cc <net_buf_unref>
    2ad4:	e010      	b.n	2af8 <bt_recv+0x5c>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    2ad6:	8ae0      	ldrh	r0, [r4, #22]
    2ad8:	f000 fefc 	bl	38d4 <bt_conn_lookup_handle>
	if (!conn) {
    2adc:	4605      	mov	r5, r0
    2ade:	2800      	cmp	r0, #0
    2ae0:	d0f5      	beq.n	2ace <bt_recv+0x32>
	acl(buf)->id = bt_conn_get_id(conn);
    2ae2:	f001 f987 	bl	3df4 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    2ae6:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    2ae8:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    2aea:	4621      	mov	r1, r4
    2aec:	4628      	mov	r0, r5
    2aee:	f000 fcb3 	bl	3458 <bt_conn_recv>
	bt_conn_unref(conn);
    2af2:	4628      	mov	r0, r5
    2af4:	f000 ff5c 	bl	39b0 <bt_conn_unref>
		return 0;
    2af8:	2000      	movs	r0, #0
}
    2afa:	b00f      	add	sp, #60	; 0x3c
    2afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2b00:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2b02:	7832      	ldrb	r2, [r6, #0]
    2b04:	2a13      	cmp	r2, #19
    2b06:	f200 8266 	bhi.w	2fd6 <bt_recv+0x53a>
    2b0a:	4093      	lsls	r3, r2
    2b0c:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    2b10:	f000 8261 	beq.w	2fd6 <bt_recv+0x53a>
    2b14:	4040      	eors	r0, r0
    2b16:	f380 8811 	msr	BASEPRI, r0
    2b1a:	f04f 0004 	mov.w	r0, #4
    2b1e:	df02      	svc	2
    2b20:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    2b22:	783e      	ldrb	r6, [r7, #0]
    2b24:	2e00      	cmp	r6, #0
    2b26:	d1d2      	bne.n	2ace <bt_recv+0x32>
	conn = bt_conn_lookup_handle(handle);
    2b28:	f8b7 0001 	ldrh.w	r0, [r7, #1]
    2b2c:	f000 fed2 	bl	38d4 <bt_conn_lookup_handle>
	if (!conn) {
    2b30:	4605      	mov	r5, r0
    2b32:	b1e8      	cbz	r0, 2b70 <bt_recv+0xd4>
	conn->err = evt->reason;
    2b34:	78fb      	ldrb	r3, [r7, #3]
    2b36:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    2b38:	49b8      	ldr	r1, [pc, #736]	; (2e1c <bt_recv+0x380>)
    2b3a:	48b9      	ldr	r0, [pc, #740]	; (2e20 <bt_recv+0x384>)
    2b3c:	f00f f98e 	bl	11e5c <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2b40:	4631      	mov	r1, r6
    2b42:	4628      	mov	r0, r5
    2b44:	f000 fe1c 	bl	3780 <bt_conn_set_state>
	conn->handle = 0;
    2b48:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    2b4a:	78ae      	ldrb	r6, [r5, #2]
    2b4c:	b10e      	cbz	r6, 2b52 <bt_recv+0xb6>
	bt_conn_unref(conn);
    2b4e:	4628      	mov	r0, r5
    2b50:	e075      	b.n	2c3e <bt_recv+0x1a2>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    2b52:	4631      	mov	r1, r6
    2b54:	1d28      	adds	r0, r5, #4
    2b56:	f7ff f9ab 	bl	1eb0 <atomic_test_bit>
    2b5a:	b130      	cbz	r0, 2b6a <bt_recv+0xce>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    2b5c:	4628      	mov	r0, r5
    2b5e:	2101      	movs	r1, #1
    2b60:	f000 fe0e 	bl	3780 <bt_conn_set_state>
		bt_le_scan_update(false);
    2b64:	4630      	mov	r0, r6
    2b66:	f7ff fb65 	bl	2234 <bt_le_scan_update>
	bt_conn_unref(conn);
    2b6a:	4628      	mov	r0, r5
    2b6c:	f000 ff20 	bl	39b0 <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2b70:	2107      	movs	r1, #7
    2b72:	48ac      	ldr	r0, [pc, #688]	; (2e24 <bt_recv+0x388>)
    2b74:	f7ff f99c 	bl	1eb0 <atomic_test_bit>
    2b78:	2800      	cmp	r0, #0
    2b7a:	d0a8      	beq.n	2ace <bt_recv+0x32>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2b7c:	2106      	movs	r1, #6
    2b7e:	48a9      	ldr	r0, [pc, #676]	; (2e24 <bt_recv+0x388>)
    2b80:	f7ff f996 	bl	1eb0 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2b84:	2800      	cmp	r0, #0
    2b86:	d1a2      	bne.n	2ace <bt_recv+0x32>
		set_advertise_enable(true);
    2b88:	2001      	movs	r0, #1
    2b8a:	f7ff fa71 	bl	2070 <set_advertise_enable>
    2b8e:	e79e      	b.n	2ace <bt_recv+0x32>
    2b90:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    2b92:	780b      	ldrb	r3, [r1, #0]
    2b94:	f88d 3018 	strb.w	r3, [sp, #24]
	enh.handle         = evt->handle;
    2b98:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    2b9c:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.role           = evt->role;
    2ba0:	78cb      	ldrb	r3, [r1, #3]
    2ba2:	f88d 301b 	strb.w	r3, [sp, #27]
	enh.interval       = evt->interval;
    2ba6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    2baa:	f8ad 302f 	strh.w	r3, [sp, #47]	; 0x2f
	enh.latency        = evt->latency;
    2bae:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    2bb2:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.supv_timeout   = evt->supv_timeout;
    2bb6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    2bba:	f8ad 3033 	strh.w	r3, [sp, #51]	; 0x33
	enh.clock_accuracy = evt->clock_accuracy;
    2bbe:	7c4b      	ldrb	r3, [r1, #17]
    2bc0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    2bc4:	3104      	adds	r1, #4
    2bc6:	a807      	add	r0, sp, #28
    2bc8:	f7ff f917 	bl	1dfa <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    2bcc:	2500      	movs	r5, #0
    2bce:	2206      	movs	r2, #6
    2bd0:	a902      	add	r1, sp, #8
    2bd2:	f10d 0023 	add.w	r0, sp, #35	; 0x23
    2bd6:	9502      	str	r5, [sp, #8]
    2bd8:	f8ad 500c 	strh.w	r5, [sp, #12]
    2bdc:	f7ff f80e 	bl	1bfc <memcpy>
    2be0:	2206      	movs	r2, #6
    2be2:	a904      	add	r1, sp, #16
    2be4:	f10d 0029 	add.w	r0, sp, #41	; 0x29
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    2be8:	9504      	str	r5, [sp, #16]
    2bea:	f8ad 5014 	strh.w	r5, [sp, #20]
    2bee:	f7ff f805 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    2bf2:	a806      	add	r0, sp, #24
		le_enh_conn_complete((void *)buf->data);
    2bf4:	f7ff fdfa 	bl	27ec <le_enh_conn_complete>
    2bf8:	e769      	b.n	2ace <bt_recv+0x32>
    2bfa:	68a0      	ldr	r0, [r4, #8]
    2bfc:	e7fa      	b.n	2bf4 <bt_recv+0x158>
    2bfe:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2c00:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    2c04:	f000 fe66 	bl	38d4 <bt_conn_lookup_handle>
	if (!conn) {
    2c08:	4606      	mov	r6, r0
    2c0a:	2800      	cmp	r0, #0
    2c0c:	f43f af5f 	beq.w	2ace <bt_recv+0x32>
	if (!evt->status) {
    2c10:	782b      	ldrb	r3, [r5, #0]
    2c12:	b99b      	cbnz	r3, 2c3c <bt_recv+0x1a0>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    2c14:	792a      	ldrb	r2, [r5, #4]
    2c16:	78eb      	ldrb	r3, [r5, #3]
    2c18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2c1c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    2c20:	79aa      	ldrb	r2, [r5, #6]
    2c22:	796b      	ldrb	r3, [r5, #5]
    2c24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2c28:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2c2c:	79eb      	ldrb	r3, [r5, #7]
    2c2e:	7a2a      	ldrb	r2, [r5, #8]
    2c30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2c34:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    2c38:	f000 fbd2 	bl	33e0 <notify_le_param_updated>
	bt_conn_unref(conn);
    2c3c:	4630      	mov	r0, r6
    2c3e:	f000 feb7 	bl	39b0 <bt_conn_unref>
    2c42:	e744      	b.n	2ace <bt_recv+0x32>
    2c44:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2c46:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    2c4a:	f000 fe43 	bl	38d4 <bt_conn_lookup_handle>
	if (!conn) {
    2c4e:	4605      	mov	r5, r0
    2c50:	2800      	cmp	r0, #0
    2c52:	f43f af3c 	beq.w	2ace <bt_recv+0x32>
	if (!evt->status) {
    2c56:	7833      	ldrb	r3, [r6, #0]
    2c58:	b923      	cbnz	r3, 2c64 <bt_recv+0x1c8>
		memcpy(conn->le.features, evt->features,
    2c5a:	2208      	movs	r2, #8
    2c5c:	1cf1      	adds	r1, r6, #3
    2c5e:	3064      	adds	r0, #100	; 0x64
    2c60:	f7fe ffcc 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    2c64:	4e70      	ldr	r6, [pc, #448]	; (2e28 <bt_recv+0x38c>)
    2c66:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    2c6a:	07d2      	lsls	r2, r2, #31
    2c6c:	d50c      	bpl.n	2c88 <bt_recv+0x1ec>
    2c6e:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    2c72:	07db      	lsls	r3, r3, #31
    2c74:	d508      	bpl.n	2c88 <bt_recv+0x1ec>
		err = hci_le_set_phy(conn);
    2c76:	4628      	mov	r0, r5
    2c78:	f7ff fd6e 	bl	2758 <hci_le_set_phy.isra.30>
		if (!err) {
    2c7c:	b920      	cbnz	r0, 2c88 <bt_recv+0x1ec>
    2c7e:	2180      	movs	r1, #128	; 0x80
    2c80:	1d28      	adds	r0, r5, #4
    2c82:	f7ff f8bd 	bl	1e00 <atomic_or>
    2c86:	e762      	b.n	2b4e <bt_recv+0xb2>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2c88:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    2c8c:	069f      	lsls	r7, r3, #26
    2c8e:	d56e      	bpl.n	2d6e <bt_recv+0x2d2>
    2c90:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2c94:	069e      	lsls	r6, r3, #26
    2c96:	d56a      	bpl.n	2d6e <bt_recv+0x2d2>
		err = hci_le_set_data_len(conn);
    2c98:	4628      	mov	r0, r5
    2c9a:	f7ff fd7d 	bl	2798 <hci_le_set_data_len.isra.31>
		if (!err) {
    2c9e:	2800      	cmp	r0, #0
    2ca0:	d165      	bne.n	2d6e <bt_recv+0x2d2>
    2ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
    2ca6:	e7eb      	b.n	2c80 <bt_recv+0x1e4>
    2ca8:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    2caa:	78d9      	ldrb	r1, [r3, #3]
    2cac:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    2cae:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    2cb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2cb4:	f8ad 2018 	strh.w	r2, [sp, #24]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    2cb8:	7959      	ldrb	r1, [r3, #5]
    2cba:	791a      	ldrb	r2, [r3, #4]
    2cbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2cc0:	f8ad 201a 	strh.w	r2, [sp, #26]
	param.latency = sys_le16_to_cpu(evt->latency);
    2cc4:	799a      	ldrb	r2, [r3, #6]
    2cc6:	79d9      	ldrb	r1, [r3, #7]
    2cc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2ccc:	f8ad 201c 	strh.w	r2, [sp, #28]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2cd0:	7a1a      	ldrb	r2, [r3, #8]
    2cd2:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    2cd4:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2cd6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    2cda:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2cdc:	f8ad 301e 	strh.w	r3, [sp, #30]
	conn = bt_conn_lookup_handle(handle);
    2ce0:	f000 fdf8 	bl	38d4 <bt_conn_lookup_handle>
	if (!conn) {
    2ce4:	4680      	mov	r8, r0
    2ce6:	b920      	cbnz	r0, 2cf2 <bt_recv+0x256>
		return le_conn_param_neg_reply(handle,
    2ce8:	2102      	movs	r1, #2
    2cea:	4628      	mov	r0, r5
    2cec:	f7ff fe44 	bl	2978 <le_conn_param_neg_reply>
    2cf0:	e6ed      	b.n	2ace <bt_recv+0x32>
	if (!le_param_req(conn, &param)) {
    2cf2:	a906      	add	r1, sp, #24
    2cf4:	f000 fb88 	bl	3408 <le_param_req>
    2cf8:	b928      	cbnz	r0, 2d06 <bt_recv+0x26a>
		err = le_conn_param_neg_reply(handle,
    2cfa:	211e      	movs	r1, #30
    2cfc:	4628      	mov	r0, r5
    2cfe:	f7ff fe3b 	bl	2978 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    2d02:	4640      	mov	r0, r8
    2d04:	e79b      	b.n	2c3e <bt_recv+0x1a2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    2d06:	210e      	movs	r1, #14
    2d08:	f242 0020 	movw	r0, #8224	; 0x2020
    2d0c:	f7ff f8de 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2d10:	4606      	mov	r6, r0
    2d12:	2800      	cmp	r0, #0
    2d14:	d0f5      	beq.n	2d02 <bt_recv+0x266>
	cp = net_buf_add(buf, sizeof(*cp));
    2d16:	210e      	movs	r1, #14
    2d18:	3008      	adds	r0, #8
    2d1a:	f00d fe89 	bl	10a30 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2d1e:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    2d20:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    2d22:	2100      	movs	r1, #0
    2d24:	f7fe ff96 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    2d28:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2d2c:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    2d2e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    2d32:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    2d34:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2d38:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    2d3a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	cp->handle = sys_cpu_to_le16(handle);
    2d3e:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    2d40:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    2d42:	4631      	mov	r1, r6
    2d44:	f242 0020 	movw	r0, #8224	; 0x2020
    2d48:	f7ff fa0e 	bl	2168 <bt_hci_cmd_send>
    2d4c:	e7d9      	b.n	2d02 <bt_recv+0x266>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d4e:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2d50:	8818      	ldrh	r0, [r3, #0]
    2d52:	f000 fdbf 	bl	38d4 <bt_conn_lookup_handle>
	if (!conn) {
    2d56:	4605      	mov	r5, r0
    2d58:	2800      	cmp	r0, #0
    2d5a:	f43f aeb8 	beq.w	2ace <bt_recv+0x32>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d5e:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2d62:	3004      	adds	r0, #4
    2d64:	f7ff f85d 	bl	1e22 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    2d68:	05c0      	lsls	r0, r0, #23
    2d6a:	f57f aef0 	bpl.w	2b4e <bt_recv+0xb2>
	update_conn_param(conn);
    2d6e:	4628      	mov	r0, r5
    2d70:	f7ff f868 	bl	1e44 <update_conn_param>
    2d74:	e6eb      	b.n	2b4e <bt_recv+0xb2>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d76:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2d78:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    2d7c:	f000 fdaa 	bl	38d4 <bt_conn_lookup_handle>
	if (!conn) {
    2d80:	4605      	mov	r5, r0
    2d82:	2800      	cmp	r0, #0
    2d84:	f43f aea3 	beq.w	2ace <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    2d88:	1d06      	adds	r6, r0, #4
    2d8a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2d8e:	4630      	mov	r0, r6
    2d90:	f7ff f847 	bl	1e22 <atomic_and>
    2d94:	0601      	lsls	r1, r0, #24
    2d96:	f57f aeda 	bpl.w	2b4e <bt_recv+0xb2>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2d9a:	4b23      	ldr	r3, [pc, #140]	; (2e28 <bt_recv+0x38c>)
    2d9c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2da0:	069a      	lsls	r2, r3, #26
    2da2:	d5e4      	bpl.n	2d6e <bt_recv+0x2d2>
    2da4:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2da8:	069b      	lsls	r3, r3, #26
    2daa:	d5e0      	bpl.n	2d6e <bt_recv+0x2d2>
		err = hci_le_set_data_len(conn);
    2dac:	4628      	mov	r0, r5
    2dae:	f7ff fcf3 	bl	2798 <hci_le_set_data_len.isra.31>
		if (!err) {
    2db2:	2800      	cmp	r0, #0
    2db4:	d1db      	bne.n	2d6e <bt_recv+0x2d2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2db6:	f44f 7180 	mov.w	r1, #256	; 0x100
    2dba:	4630      	mov	r0, r6
    2dbc:	e761      	b.n	2c82 <bt_recv+0x1e6>
    2dbe:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2dc0:	4818      	ldr	r0, [pc, #96]	; (2e24 <bt_recv+0x388>)
    2dc2:	f06f 0120 	mvn.w	r1, #32
    2dc6:	f7ff f82c 	bl	1e22 <atomic_and>
	if (!evt->status) {
    2dca:	7833      	ldrb	r3, [r6, #0]
    2dcc:	b943      	cbnz	r3, 2de0 <bt_recv+0x344>
		memcpy(pub_key, evt->key, 64);
    2dce:	1c71      	adds	r1, r6, #1
    2dd0:	2240      	movs	r2, #64	; 0x40
    2dd2:	4816      	ldr	r0, [pc, #88]	; (2e2c <bt_recv+0x390>)
    2dd4:	f7fe ff12 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2dd8:	2110      	movs	r1, #16
    2dda:	4812      	ldr	r0, [pc, #72]	; (2e24 <bt_recv+0x388>)
    2ddc:	f7ff f810 	bl	1e00 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2de0:	4b13      	ldr	r3, [pc, #76]	; (2e30 <bt_recv+0x394>)
    2de2:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    2de4:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2de6:	2d00      	cmp	r5, #0
    2de8:	f43f ae71 	beq.w	2ace <bt_recv+0x32>
		cb->func(evt->status ? NULL : evt->key);
    2dec:	7832      	ldrb	r2, [r6, #0]
    2dee:	682b      	ldr	r3, [r5, #0]
    2df0:	2a00      	cmp	r2, #0
    2df2:	bf0c      	ite	eq
    2df4:	4638      	moveq	r0, r7
    2df6:	2000      	movne	r0, #0
    2df8:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2dfa:	686d      	ldr	r5, [r5, #4]
    2dfc:	e7f3      	b.n	2de6 <bt_recv+0x34a>
	if (dh_key_cb) {
    2dfe:	4d0d      	ldr	r5, [pc, #52]	; (2e34 <bt_recv+0x398>)
    2e00:	68a0      	ldr	r0, [r4, #8]
    2e02:	682a      	ldr	r2, [r5, #0]
    2e04:	2a00      	cmp	r2, #0
    2e06:	f43f ae62 	beq.w	2ace <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2e0a:	7803      	ldrb	r3, [r0, #0]
    2e0c:	b923      	cbnz	r3, 2e18 <bt_recv+0x37c>
    2e0e:	3001      	adds	r0, #1
    2e10:	4790      	blx	r2
		dh_key_cb = NULL;
    2e12:	2300      	movs	r3, #0
    2e14:	602b      	str	r3, [r5, #0]
    2e16:	e65a      	b.n	2ace <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2e18:	2000      	movs	r0, #0
    2e1a:	e7f9      	b.n	2e10 <bt_recv+0x374>
    2e1c:	00012b67 	.word	0x00012b67
    2e20:	00001df9 	.word	0x00001df9
    2e24:	200034f0 	.word	0x200034f0
    2e28:	20003480 	.word	0x20003480
    2e2c:	2000002c 	.word	0x2000002c
    2e30:	2000006c 	.word	0x2000006c
    2e34:	20000028 	.word	0x20000028
	u8_t num_reports = net_buf_pull_u8(buf);
    2e38:	4628      	mov	r0, r5
    2e3a:	f00d fe2f 	bl	10a9c <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2e3e:	f8df 9208 	ldr.w	r9, [pc, #520]	; 3048 <bt_recv+0x5ac>
	u8_t num_reports = net_buf_pull_u8(buf);
    2e42:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    2e44:	9b00      	ldr	r3, [sp, #0]
    2e46:	2b00      	cmp	r3, #0
    2e48:	f43f ae41 	beq.w	2ace <bt_recv+0x32>
		info = (void *)buf->data;
    2e4c:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    2e4e:	2109      	movs	r1, #9
    2e50:	4628      	mov	r0, r5
    2e52:	f00d fe1b 	bl	10a8c <net_buf_simple_pull>
		rssi = info->data[info->length];
    2e56:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2e58:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    2e5a:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    2e5c:	a806      	add	r0, sp, #24
		rssi = info->data[info->length];
    2e5e:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2e62:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    2e66:	3b02      	subs	r3, #2
    2e68:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    2e6a:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2e6c:	f200 8099 	bhi.w	2fa2 <bt_recv+0x506>
			bt_addr_le_copy(&id_addr, &info->addr);
    2e70:	f7fe ffc3 	bl	1dfa <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2e74:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2e78:	3b02      	subs	r3, #2
    2e7a:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    2e7e:	4b6f      	ldr	r3, [pc, #444]	; (303c <bt_recv+0x5a0>)
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	b1bb      	cbz	r3, 2eb4 <bt_recv+0x418>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2e84:	4628      	mov	r0, r5
    2e86:	f00d fe19 	bl	10abc <net_buf_simple_headroom>
	state->len = buf->len;
    2e8a:	89a3      	ldrh	r3, [r4, #12]
    2e8c:	9301      	str	r3, [sp, #4]
			buf->len = info->length;
    2e8e:	7a33      	ldrb	r3, [r6, #8]
    2e90:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2e92:	4b6a      	ldr	r3, [pc, #424]	; (303c <bt_recv+0x5a0>)
    2e94:	7832      	ldrb	r2, [r6, #0]
    2e96:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    2e98:	4682      	mov	sl, r0
    2e9a:	461f      	mov	r7, r3
    2e9c:	fa4f f18b 	sxtb.w	r1, fp
    2ea0:	462b      	mov	r3, r5
    2ea2:	a806      	add	r0, sp, #24
    2ea4:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2ea6:	6923      	ldr	r3, [r4, #16]
    2ea8:	fa13 f38a 	uxtah	r3, r3, sl
    2eac:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    2eae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2eb2:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2eb4:	2109      	movs	r1, #9
    2eb6:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    2eb8:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2eba:	f7fe fff9 	bl	1eb0 <atomic_test_bit>
    2ebe:	4682      	mov	sl, r0
    2ec0:	2800      	cmp	r0, #0
    2ec2:	d164      	bne.n	2f8e <bt_recv+0x4f2>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    2ec4:	2a01      	cmp	r2, #1
    2ec6:	d862      	bhi.n	2f8e <bt_recv+0x4f2>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    2ec8:	2101      	movs	r1, #1
    2eca:	a806      	add	r0, sp, #24
    2ecc:	f000 fd4e 	bl	396c <bt_conn_lookup_state_le>
	if (!conn) {
    2ed0:	4607      	mov	r7, r0
    2ed2:	2800      	cmp	r0, #0
    2ed4:	d05b      	beq.n	2f8e <bt_recv+0x4f2>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    2ed6:	2108      	movs	r1, #8
    2ed8:	4648      	mov	r0, r9
    2eda:	f7fe ffe9 	bl	1eb0 <atomic_test_bit>
    2ede:	2800      	cmp	r0, #0
    2ee0:	d162      	bne.n	2fa8 <bt_recv+0x50c>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    2ee2:	2102      	movs	r1, #2
    2ee4:	4648      	mov	r0, r9
    2ee6:	f7fe ffe3 	bl	1eb0 <atomic_test_bit>
    2eea:	b110      	cbz	r0, 2ef2 <bt_recv+0x456>
			set_random_address(&bt_dev.id_addr.a);
    2eec:	4854      	ldr	r0, [pc, #336]	; (3040 <bt_recv+0x5a4>)
    2eee:	f7ff f891 	bl	2014 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2ef2:	4954      	ldr	r1, [pc, #336]	; (3044 <bt_recv+0x5a8>)
    2ef4:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2ef8:	f107 0a52 	add.w	sl, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2efc:	f7fe ff7d 	bl	1dfa <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2f00:	4641      	mov	r1, r8
    2f02:	4650      	mov	r0, sl
    2f04:	f7fe ff79 	bl	1dfa <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    2f08:	2119      	movs	r1, #25
    2f0a:	f242 000d 	movw	r0, #8205	; 0x200d
    2f0e:	f7fe ffdd 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2f12:	4683      	mov	fp, r0
    2f14:	2800      	cmp	r0, #0
    2f16:	d04c      	beq.n	2fb2 <bt_recv+0x516>
	cp = net_buf_add(buf, sizeof(*cp));
    2f18:	2119      	movs	r1, #25
    2f1a:	3008      	adds	r0, #8
    2f1c:	f00d fd88 	bl	10a30 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2f20:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    2f22:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    2f24:	2100      	movs	r1, #0
    2f26:	f7fe fe95 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    2f2a:	2200      	movs	r2, #0
    2f2c:	2360      	movs	r3, #96	; 0x60
    2f2e:	f888 3000 	strb.w	r3, [r8]
    2f32:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    2f36:	f888 3002 	strb.w	r3, [r8, #2]
    2f3a:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2f3e:	4651      	mov	r1, sl
    2f40:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    2f44:	9201      	str	r2, [sp, #4]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2f46:	f7fe ff58 	bl	1dfa <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    2f4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    2f4e:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    2f52:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    2f56:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    2f5a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    2f5e:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    2f62:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    2f66:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    2f6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    2f6e:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2f72:	9a01      	ldr	r2, [sp, #4]
    2f74:	4659      	mov	r1, fp
    2f76:	f242 000d 	movw	r0, #8205	; 0x200d
    2f7a:	f7fe ffd7 	bl	1f2c <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    2f7e:	b9c0      	cbnz	r0, 2fb2 <bt_recv+0x516>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    2f80:	4638      	mov	r0, r7
    2f82:	2102      	movs	r1, #2
    2f84:	f000 fbfc 	bl	3780 <bt_conn_set_state>
	bt_conn_unref(conn);
    2f88:	4638      	mov	r0, r7
    2f8a:	f000 fd11 	bl	39b0 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    2f8e:	7a31      	ldrb	r1, [r6, #8]
    2f90:	4628      	mov	r0, r5
    2f92:	3101      	adds	r1, #1
    2f94:	f00d fd7a 	bl	10a8c <net_buf_simple_pull>
    2f98:	9b00      	ldr	r3, [sp, #0]
    2f9a:	3b01      	subs	r3, #1
    2f9c:	b2db      	uxtb	r3, r3
    2f9e:	9300      	str	r3, [sp, #0]
    2fa0:	e750      	b.n	2e44 <bt_recv+0x3a8>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    2fa2:	f7fe ff2a 	bl	1dfa <bt_addr_le_copy>
    2fa6:	e76a      	b.n	2e7e <bt_recv+0x3e2>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    2fa8:	4650      	mov	r0, sl
    2faa:	f7fe fffd 	bl	1fa8 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    2fae:	2800      	cmp	r0, #0
    2fb0:	d097      	beq.n	2ee2 <bt_recv+0x446>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    2fb2:	231f      	movs	r3, #31
    2fb4:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2fb6:	2100      	movs	r1, #0
    2fb8:	4638      	mov	r0, r7
    2fba:	f000 fbe1 	bl	3780 <bt_conn_set_state>
	bt_conn_unref(conn);
    2fbe:	4638      	mov	r0, r7
    2fc0:	f000 fcf6 	bl	39b0 <bt_conn_unref>
	bt_le_scan_update(false);
    2fc4:	2000      	movs	r0, #0
    2fc6:	f7ff f935 	bl	2234 <bt_le_scan_update>
    2fca:	e7e0      	b.n	2f8e <bt_recv+0x4f2>
		net_buf_unref(buf);
    2fcc:	f00d fcfe 	bl	109cc <net_buf_unref>
		return -EINVAL;
    2fd0:	f06f 0015 	mvn.w	r0, #21
    2fd4:	e591      	b.n	2afa <bt_recv+0x5e>
	net_buf_pull(buf, sizeof(*hdr));
    2fd6:	f104 0508 	add.w	r5, r4, #8
    2fda:	2102      	movs	r1, #2
    2fdc:	4628      	mov	r0, r5
    2fde:	f00d fd55 	bl	10a8c <net_buf_simple_pull>
	switch (hdr->evt) {
    2fe2:	7833      	ldrb	r3, [r6, #0]
    2fe4:	2b05      	cmp	r3, #5
    2fe6:	f43f ad9b 	beq.w	2b20 <bt_recv+0x84>
    2fea:	2b3e      	cmp	r3, #62	; 0x3e
    2fec:	f47f ad6f 	bne.w	2ace <bt_recv+0x32>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    2ff0:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2ff2:	2101      	movs	r1, #1
    2ff4:	4628      	mov	r0, r5
    2ff6:	f00d fd49 	bl	10a8c <net_buf_simple_pull>
	switch (evt->subevent) {
    2ffa:	7833      	ldrb	r3, [r6, #0]
    2ffc:	3b01      	subs	r3, #1
    2ffe:	2b0b      	cmp	r3, #11
    3000:	f63f ad65 	bhi.w	2ace <bt_recv+0x32>
    3004:	a201      	add	r2, pc, #4	; (adr r2, 300c <bt_recv+0x570>)
    3006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    300a:	bf00      	nop
    300c:	00002b91 	.word	0x00002b91
    3010:	00002e39 	.word	0x00002e39
    3014:	00002bff 	.word	0x00002bff
    3018:	00002c45 	.word	0x00002c45
    301c:	00002acf 	.word	0x00002acf
    3020:	00002ca9 	.word	0x00002ca9
    3024:	00002d4f 	.word	0x00002d4f
    3028:	00002dbf 	.word	0x00002dbf
    302c:	00002dff 	.word	0x00002dff
    3030:	00002bfb 	.word	0x00002bfb
    3034:	00002acf 	.word	0x00002acf
    3038:	00002d77 	.word	0x00002d77
    303c:	20000074 	.word	0x20000074
    3040:	20003481 	.word	0x20003481
    3044:	20003480 	.word	0x20003480
    3048:	200034f0 	.word	0x200034f0

0000304c <bt_recv_prio>:
{
    304c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3050:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3052:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3054:	2b01      	cmp	r3, #1
{
    3056:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3058:	d005      	beq.n	3066 <bt_recv_prio+0x1a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    305a:	4040      	eors	r0, r0
    305c:	f380 8811 	msr	BASEPRI, r0
    3060:	f04f 0004 	mov.w	r0, #4
    3064:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3066:	8982      	ldrh	r2, [r0, #12]
    3068:	2a01      	cmp	r2, #1
    306a:	d9f6      	bls.n	305a <bt_recv_prio+0xe>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    306c:	7832      	ldrb	r2, [r6, #0]
    306e:	2a13      	cmp	r2, #19
    3070:	d8f3      	bhi.n	305a <bt_recv_prio+0xe>
    3072:	4093      	lsls	r3, r2
    3074:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3078:	d0ef      	beq.n	305a <bt_recv_prio+0xe>
	net_buf_pull(buf, sizeof(*hdr));
    307a:	f100 0508 	add.w	r5, r0, #8
    307e:	2102      	movs	r1, #2
    3080:	4628      	mov	r0, r5
    3082:	f00d fd03 	bl	10a8c <net_buf_simple_pull>
	switch (hdr->evt) {
    3086:	7833      	ldrb	r3, [r6, #0]
    3088:	2b0f      	cmp	r3, #15
    308a:	d018      	beq.n	30be <bt_recv_prio+0x72>
    308c:	2b13      	cmp	r3, #19
    308e:	d023      	beq.n	30d8 <bt_recv_prio+0x8c>
    3090:	2b0e      	cmp	r3, #14
    3092:	d161      	bne.n	3158 <bt_recv_prio+0x10c>
	u8_t status, ncmd = evt->ncmd;
    3094:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3096:	2103      	movs	r1, #3
    3098:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    309a:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    309c:	f00d fcf6 	bl	10a8c <net_buf_simple_pull>
	status = buf->data[0];
    30a0:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    30a2:	4621      	mov	r1, r4
    30a4:	7818      	ldrb	r0, [r3, #0]
    30a6:	f7fe fedb 	bl	1e60 <hci_cmd_done.isra.18>
	if (ncmd) {
    30aa:	b116      	cbz	r6, 30b2 <bt_recv_prio+0x66>
    30ac:	482c      	ldr	r0, [pc, #176]	; (3160 <bt_recv_prio+0x114>)
    30ae:	f00e fd24 	bl	11afa <_impl_k_sem_give>
	net_buf_unref(buf);
    30b2:	4620      	mov	r0, r4
    30b4:	f00d fc8a 	bl	109cc <net_buf_unref>
}
    30b8:	2000      	movs	r0, #0
    30ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    30be:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    30c0:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    30c2:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    30c4:	4628      	mov	r0, r5
    30c6:	f00d fce1 	bl	10a8c <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    30ca:	4621      	mov	r1, r4
    30cc:	7830      	ldrb	r0, [r6, #0]
    30ce:	f7fe fec7 	bl	1e60 <hci_cmd_done.isra.18>
	if (ncmd) {
    30d2:	2f00      	cmp	r7, #0
    30d4:	d0ed      	beq.n	30b2 <bt_recv_prio+0x66>
    30d6:	e7e9      	b.n	30ac <bt_recv_prio+0x60>
    30d8:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
    30dc:	2700      	movs	r7, #0
    30de:	f898 3000 	ldrb.w	r3, [r8]
    30e2:	429f      	cmp	r7, r3
    30e4:	dae5      	bge.n	30b2 <bt_recv_prio+0x66>
    30e6:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    30ea:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    30ee:	f8b3 6003 	ldrh.w	r6, [r3, #3]
    30f2:	f04f 0320 	mov.w	r3, #32
    30f6:	f3ef 8911 	mrs	r9, BASEPRI
    30fa:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    30fe:	f000 fbe9 	bl	38d4 <bt_conn_lookup_handle>
		if (!conn) {
    3102:	4605      	mov	r5, r0
    3104:	b918      	cbnz	r0, 310e <bt_recv_prio+0xc2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3106:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
    310a:	3701      	adds	r7, #1
    310c:	e7e7      	b.n	30de <bt_recv_prio+0x92>
    310e:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
    3112:	f100 0918 	add.w	r9, r0, #24
		while (count--) {
    3116:	b196      	cbz	r6, 313e <bt_recv_prio+0xf2>
	__asm__ volatile(
    3118:	f04f 0320 	mov.w	r3, #32
    311c:	f3ef 8011 	mrs	r0, BASEPRI
    3120:	f383 8811 	msr	BASEPRI, r3
    3124:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3126:	b129      	cbz	r1, 3134 <bt_recv_prio+0xe8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3128:	696a      	ldr	r2, [r5, #20]
	return node->next;
    312a:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    312c:	612b      	str	r3, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    312e:	4291      	cmp	r1, r2
	list->tail = node;
    3130:	bf08      	it	eq
    3132:	616b      	streq	r3, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3134:	f380 8811 	msr	BASEPRI, r0
    3138:	3e01      	subs	r6, #1
    313a:	b2b6      	uxth	r6, r6
			if (!node) {
    313c:	b919      	cbnz	r1, 3146 <bt_recv_prio+0xfa>
		bt_conn_unref(conn);
    313e:	4628      	mov	r0, r5
    3140:	f000 fc36 	bl	39b0 <bt_conn_unref>
    3144:	e7e1      	b.n	310a <bt_recv_prio+0xbe>
			k_fifo_put(&conn->tx_notify, node);
    3146:	4648      	mov	r0, r9
    3148:	f00e fa12 	bl	11570 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    314c:	4628      	mov	r0, r5
    314e:	f000 f943 	bl	33d8 <bt_conn_get_pkts>
    3152:	f00e fcd2 	bl	11afa <_impl_k_sem_give>
    3156:	e7de      	b.n	3116 <bt_recv_prio+0xca>
		net_buf_unref(buf);
    3158:	4620      	mov	r0, r4
    315a:	f00d fc37 	bl	109cc <net_buf_unref>
    315e:	e77c      	b.n	305a <bt_recv_prio+0xe>
    3160:	20003528 	.word	0x20003528

00003164 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    3164:	4a08      	ldr	r2, [pc, #32]	; (3188 <bt_hci_driver_register+0x24>)
    3166:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    316a:	b93b      	cbnz	r3, 317c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    316c:	68c1      	ldr	r1, [r0, #12]
    316e:	b141      	cbz	r1, 3182 <bt_hci_driver_register+0x1e>
    3170:	6901      	ldr	r1, [r0, #16]
    3172:	b131      	cbz	r1, 3182 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    3174:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    3178:	4618      	mov	r0, r3
    317a:	4770      	bx	lr
		return -EALREADY;
    317c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3180:	4770      	bx	lr
		return -EINVAL;
    3182:	f06f 0015 	mvn.w	r0, #21
}
    3186:	4770      	bx	lr
    3188:	20003480 	.word	0x20003480

0000318c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    318c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    318e:	4c20      	ldr	r4, [pc, #128]	; (3210 <bt_enable+0x84>)
    3190:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
{
    3194:	b086      	sub	sp, #24
    3196:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3198:	2b00      	cmp	r3, #0
    319a:	d033      	beq.n	3204 <bt_enable+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    319c:	2101      	movs	r1, #1
    319e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    31a2:	f7fe fe2d 	bl	1e00 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    31a6:	f010 0001 	ands.w	r0, r0, #1
    31aa:	d12e      	bne.n	320a <bt_enable+0x7e>
		if (err) {
			return err;
		}
	}

	ready_cb = cb;
    31ac:	4b19      	ldr	r3, [pc, #100]	; (3214 <bt_enable+0x88>)

    31ae:	491a      	ldr	r1, [pc, #104]	; (3218 <bt_enable+0x8c>)
    31b0:	601e      	str	r6, [r3, #0]
    31b2:	f06f 0308 	mvn.w	r3, #8
    31b6:	9005      	str	r0, [sp, #20]
    31b8:	9004      	str	r0, [sp, #16]
    31ba:	9303      	str	r3, [sp, #12]
    31bc:	9002      	str	r0, [sp, #8]
    31be:	9001      	str	r0, [sp, #4]
    31c0:	9000      	str	r0, [sp, #0]
    31c2:	4b16      	ldr	r3, [pc, #88]	; (321c <bt_enable+0x90>)
    31c4:	4816      	ldr	r0, [pc, #88]	; (3220 <bt_enable+0x94>)
    31c6:	f44f 7220 	mov.w	r2, #640	; 0x280
    31ca:	f00e fe93 	bl	11ef4 <_impl_k_thread_create>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    31ce:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    31d2:	68db      	ldr	r3, [r3, #12]
    31d4:	4798      	blx	r3
	if (err) {
    31d6:	4605      	mov	r5, r0
    31d8:	b988      	cbnz	r0, 31fe <bt_enable+0x72>
		BT_ERR("HCI driver open failed (%d)", err);
		return err;
	}

	if (!cb) {
    31da:	b926      	cbnz	r6, 31e6 <bt_enable+0x5a>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    31dc:	b006      	add	sp, #24
    31de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    31e2:	f7ff b859 	b.w	2298 <bt_init>
    31e6:	2101      	movs	r1, #1
    31e8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    31ec:	f7fe fe08 	bl	1e00 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    31f0:	07c3      	lsls	r3, r0, #31
    31f2:	d404      	bmi.n	31fe <bt_enable+0x72>
		k_queue_append(&work_q->queue, work);
    31f4:	f104 0164 	add.w	r1, r4, #100	; 0x64
    31f8:	480a      	ldr	r0, [pc, #40]	; (3224 <bt_enable+0x98>)
    31fa:	f00e f9b9 	bl	11570 <k_queue_append>
}
    31fe:	4628      	mov	r0, r5
    3200:	b006      	add	sp, #24
    3202:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    3204:	f06f 0512 	mvn.w	r5, #18
    3208:	e7f9      	b.n	31fe <bt_enable+0x72>
		return -EALREADY;
    320a:	f06f 0544 	mvn.w	r5, #68	; 0x44
    320e:	e7f6      	b.n	31fe <bt_enable+0x72>
    3210:	20003480 	.word	0x20003480
    3214:	20000070 	.word	0x20000070
    3218:	200017b0 	.word	0x200017b0
    321c:	000029ad 	.word	0x000029ad
    3220:	20000078 	.word	0x20000078
    3224:	20001730 	.word	0x20001730

00003228 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    3228:	2000      	movs	r0, #0
    322a:	4770      	bx	lr

0000322c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    322c:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    322e:	7803      	ldrb	r3, [r0, #0]
    3230:	2b01      	cmp	r3, #1
{
    3232:	4605      	mov	r5, r0
    3234:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3236:	d810      	bhi.n	325a <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    3238:	7843      	ldrb	r3, [r0, #1]
    323a:	2b01      	cmp	r3, #1
    323c:	d80d      	bhi.n	325a <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    323e:	8841      	ldrh	r1, [r0, #2]
    3240:	1f0b      	subs	r3, r1, #4
    3242:	b29b      	uxth	r3, r3
    3244:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    3248:	4283      	cmp	r3, r0
    324a:	d806      	bhi.n	325a <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    324c:	88aa      	ldrh	r2, [r5, #4]
    324e:	1f13      	subs	r3, r2, #4
    3250:	b29b      	uxth	r3, r3
    3252:	4283      	cmp	r3, r0
    3254:	d801      	bhi.n	325a <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3256:	4291      	cmp	r1, r2
    3258:	d22b      	bcs.n	32b2 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    325a:	f06f 0415 	mvn.w	r4, #21
    325e:	e00e      	b.n	327e <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3260:	2108      	movs	r1, #8
    3262:	4819      	ldr	r0, [pc, #100]	; (32c8 <bt_le_scan_start+0x9c>)
    3264:	f7fe fe24 	bl	1eb0 <atomic_test_bit>
    3268:	b158      	cbz	r0, 3282 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    326a:	4610      	mov	r0, r2
    326c:	f7fe fe9c 	bl	1fa8 <set_le_scan_enable>
		if (err) {
    3270:	4604      	mov	r4, r0
    3272:	b130      	cbz	r0, 3282 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3274:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3278:	4813      	ldr	r0, [pc, #76]	; (32c8 <bt_le_scan_start+0x9c>)
    327a:	f7fe fdd2 	bl	1e22 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    327e:	4620      	mov	r0, r4
    3280:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3282:	786b      	ldrb	r3, [r5, #1]
    3284:	b17b      	cbz	r3, 32a6 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3286:	f44f 6100 	mov.w	r1, #2048	; 0x800
    328a:	480f      	ldr	r0, [pc, #60]	; (32c8 <bt_le_scan_start+0x9c>)
    328c:	f7fe fdb8 	bl	1e00 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3290:	88aa      	ldrh	r2, [r5, #4]
    3292:	8869      	ldrh	r1, [r5, #2]
    3294:	7828      	ldrb	r0, [r5, #0]
    3296:	f7fe ff89 	bl	21ac <start_le_scan>
	if (err) {
    329a:	4604      	mov	r4, r0
    329c:	2800      	cmp	r0, #0
    329e:	d1e9      	bne.n	3274 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    32a0:	4b0a      	ldr	r3, [pc, #40]	; (32cc <bt_le_scan_start+0xa0>)
    32a2:	601e      	str	r6, [r3, #0]
	return 0;
    32a4:	e7eb      	b.n	327e <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32a6:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    32aa:	4807      	ldr	r0, [pc, #28]	; (32c8 <bt_le_scan_start+0x9c>)
    32ac:	f7fe fdb9 	bl	1e22 <atomic_and>
    32b0:	e7ee      	b.n	3290 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    32b2:	f44f 7100 	mov.w	r1, #512	; 0x200
    32b6:	4804      	ldr	r0, [pc, #16]	; (32c8 <bt_le_scan_start+0x9c>)
    32b8:	f7fe fda2 	bl	1e00 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    32bc:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    32c0:	d0ce      	beq.n	3260 <bt_le_scan_start+0x34>
		return -EALREADY;
    32c2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    32c6:	e7da      	b.n	327e <bt_le_scan_start+0x52>
    32c8:	200034f0 	.word	0x200034f0
    32cc:	20000074 	.word	0x20000074

000032d0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    32d0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32d2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    32d6:	4807      	ldr	r0, [pc, #28]	; (32f4 <bt_le_scan_stop+0x24>)
    32d8:	f7fe fda3 	bl	1e22 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    32dc:	0583      	lsls	r3, r0, #22
    32de:	d506      	bpl.n	32ee <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    32e0:	4b05      	ldr	r3, [pc, #20]	; (32f8 <bt_le_scan_stop+0x28>)
    32e2:	2000      	movs	r0, #0
    32e4:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    32e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    32ea:	f7fe bfa3 	b.w	2234 <bt_le_scan_update>
}
    32ee:	f06f 0044 	mvn.w	r0, #68	; 0x44
    32f2:	bd08      	pop	{r3, pc}
    32f4:	200034f0 	.word	0x200034f0
    32f8:	20000074 	.word	0x20000074

000032fc <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    32fc:	b538      	push	{r3, r4, r5, lr}
    32fe:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3300:	4805      	ldr	r0, [pc, #20]	; (3318 <bt_buf_get_rx+0x1c>)
    3302:	f00d fb33 	bl	1096c <net_buf_alloc_fixed>
#endif

	if (buf) {
    3306:	4604      	mov	r4, r0
    3308:	b120      	cbz	r0, 3314 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    330a:	2100      	movs	r1, #0
    330c:	3008      	adds	r0, #8
    330e:	f00d fb4c 	bl	109aa <net_buf_simple_reserve>
    3312:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3314:	4620      	mov	r0, r4
    3316:	bd38      	pop	{r3, r4, r5, pc}
    3318:	200039ac 	.word	0x200039ac

0000331c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    331c:	b510      	push	{r4, lr}
    331e:	4601      	mov	r1, r0
	__asm__ volatile(
    3320:	f04f 0320 	mov.w	r3, #32
    3324:	f3ef 8011 	mrs	r0, BASEPRI
    3328:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    332c:	4a0b      	ldr	r2, [pc, #44]	; (335c <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    332e:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3330:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    3334:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3338:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    333c:	b924      	cbnz	r4, 3348 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    333e:	2001      	movs	r0, #1
}
    3340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3344:	f7ff bfda 	b.w	32fc <bt_buf_get_rx>
    3348:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    334a:	f104 0008 	add.w	r0, r4, #8
    334e:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3350:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3352:	4619      	mov	r1, r3
    3354:	f00d fb29 	bl	109aa <net_buf_simple_reserve>
}
    3358:	4620      	mov	r0, r4
    335a:	bd10      	pop	{r4, pc}
    335c:	20003480 	.word	0x20003480

00003360 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3360:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3362:	4b06      	ldr	r3, [pc, #24]	; (337c <notify_connected+0x1c>)
    3364:	681c      	ldr	r4, [r3, #0]
{
    3366:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3368:	b904      	cbnz	r4, 336c <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    336a:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    336c:	6823      	ldr	r3, [r4, #0]
    336e:	b113      	cbz	r3, 3376 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3370:	7a29      	ldrb	r1, [r5, #8]
    3372:	4628      	mov	r0, r5
    3374:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3376:	6924      	ldr	r4, [r4, #16]
    3378:	e7f6      	b.n	3368 <notify_connected+0x8>
    337a:	bf00      	nop
    337c:	200000e8 	.word	0x200000e8

00003380 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3380:	f3bf 8f5b 	dmb	ish
    3384:	6800      	ldr	r0, [r0, #0]
    3386:	f3bf 8f5b 	dmb	ish
}
    338a:	4770      	bx	lr

0000338c <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    338c:	8943      	ldrh	r3, [r0, #10]
{
    338e:	b510      	push	{r4, lr}
    3390:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3392:	b12b      	cbz	r3, 33a0 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3394:	68c0      	ldr	r0, [r0, #12]
    3396:	f00d fb19 	bl	109cc <net_buf_unref>
	conn->rx = NULL;
    339a:	2300      	movs	r3, #0
    339c:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    339e:	8163      	strh	r3, [r4, #10]
    33a0:	bd10      	pop	{r4, pc}

000033a2 <atomic_dec>:
}
    33a2:	f3bf 8f5b 	dmb	ish
    33a6:	e850 3f00 	ldrex	r3, [r0]
    33aa:	1e5a      	subs	r2, r3, #1
    33ac:	e840 2100 	strex	r1, r2, [r0]
    33b0:	2900      	cmp	r1, #0
    33b2:	d1f8      	bne.n	33a6 <atomic_dec+0x4>
    33b4:	f3bf 8f5b 	dmb	ish
    33b8:	4618      	mov	r0, r3
    33ba:	4770      	bx	lr

000033bc <atomic_inc>:
}
    33bc:	f3bf 8f5b 	dmb	ish
    33c0:	e850 3f00 	ldrex	r3, [r0]
    33c4:	1c5a      	adds	r2, r3, #1
    33c6:	e840 2100 	strex	r1, r2, [r0]
    33ca:	2900      	cmp	r1, #0
    33cc:	d1f8      	bne.n	33c0 <atomic_inc+0x4>
    33ce:	f3bf 8f5b 	dmb	ish
    33d2:	4618      	mov	r0, r3
    33d4:	4770      	bx	lr
	...

000033d8 <bt_conn_get_pkts>:
}
    33d8:	4800      	ldr	r0, [pc, #0]	; (33dc <bt_conn_get_pkts+0x4>)
    33da:	4770      	bx	lr
    33dc:	2000350c 	.word	0x2000350c

000033e0 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    33e0:	4b08      	ldr	r3, [pc, #32]	; (3404 <notify_le_param_updated+0x24>)
{
    33e2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    33e4:	681c      	ldr	r4, [r3, #0]
{
    33e6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    33e8:	b904      	cbnz	r4, 33ec <notify_le_param_updated+0xc>
}
    33ea:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    33ec:	68e6      	ldr	r6, [r4, #12]
    33ee:	b13e      	cbz	r6, 3400 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    33f0:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    33f4:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    33f8:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    33fc:	4628      	mov	r0, r5
    33fe:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3400:	6924      	ldr	r4, [r4, #16]
    3402:	e7f1      	b.n	33e8 <notify_le_param_updated+0x8>
    3404:	200000e8 	.word	0x200000e8

00003408 <le_param_req>:
{
    3408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    340a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    340c:	4608      	mov	r0, r1
{
    340e:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3410:	f7fe fe58 	bl	20c4 <bt_le_conn_params_valid>
    3414:	4605      	mov	r5, r0
    3416:	b910      	cbnz	r0, 341e <le_param_req+0x16>
		return false;
    3418:	2500      	movs	r5, #0
}
    341a:	4628      	mov	r0, r5
    341c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    341e:	4b09      	ldr	r3, [pc, #36]	; (3444 <le_param_req+0x3c>)
    3420:	681c      	ldr	r4, [r3, #0]
    3422:	2c00      	cmp	r4, #0
    3424:	d0f9      	beq.n	341a <le_param_req+0x12>
		if (!cb->le_param_req) {
    3426:	68a3      	ldr	r3, [r4, #8]
    3428:	b90b      	cbnz	r3, 342e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    342a:	6924      	ldr	r4, [r4, #16]
    342c:	e7f9      	b.n	3422 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    342e:	4631      	mov	r1, r6
    3430:	4638      	mov	r0, r7
    3432:	4798      	blx	r3
    3434:	2800      	cmp	r0, #0
    3436:	d0ef      	beq.n	3418 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3438:	4630      	mov	r0, r6
    343a:	f7fe fe43 	bl	20c4 <bt_le_conn_params_valid>
    343e:	2800      	cmp	r0, #0
    3440:	d1f3      	bne.n	342a <le_param_req+0x22>
    3442:	e7e9      	b.n	3418 <le_param_req+0x10>
    3444:	200000e8 	.word	0x200000e8

00003448 <bt_conn_cb_register>:
	cb->_next = callback_list;
    3448:	4b02      	ldr	r3, [pc, #8]	; (3454 <bt_conn_cb_register+0xc>)
    344a:	681a      	ldr	r2, [r3, #0]
    344c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    344e:	6018      	str	r0, [r3, #0]
    3450:	4770      	bx	lr
    3452:	bf00      	nop
    3454:	200000e8 	.word	0x200000e8

00003458 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    3458:	2a01      	cmp	r2, #1
{
    345a:	b570      	push	{r4, r5, r6, lr}
    345c:	4605      	mov	r5, r0
    345e:	460c      	mov	r4, r1
	switch (flags) {
    3460:	d00f      	beq.n	3482 <bt_conn_recv+0x2a>
    3462:	2a02      	cmp	r2, #2
    3464:	d110      	bne.n	3488 <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3466:	688b      	ldr	r3, [r1, #8]
    3468:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    346a:	8943      	ldrh	r3, [r0, #10]
    346c:	b10b      	cbz	r3, 3472 <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
    346e:	f7ff ff8d 	bl	338c <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3472:	89a3      	ldrh	r3, [r4, #12]
    3474:	1af3      	subs	r3, r6, r3
    3476:	3304      	adds	r3, #4
    3478:	b29b      	uxth	r3, r3
    347a:	816b      	strh	r3, [r5, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    347c:	b333      	cbz	r3, 34cc <bt_conn_recv+0x74>
			conn->rx = buf;
    347e:	60ec      	str	r4, [r5, #12]
			return;
    3480:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    3482:	8943      	ldrh	r3, [r0, #10]
    3484:	b93b      	cbnz	r3, 3496 <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
    3486:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
    3488:	f7ff ff80 	bl	338c <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
    348c:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    348e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    3492:	f00d ba9b 	b.w	109cc <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3496:	898e      	ldrh	r6, [r1, #12]
    3498:	42b3      	cmp	r3, r6
    349a:	d3f4      	bcc.n	3486 <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    349c:	68c0      	ldr	r0, [r0, #12]
    349e:	3008      	adds	r0, #8
    34a0:	f00d fb10 	bl	10ac4 <net_buf_simple_tailroom>
    34a4:	4286      	cmp	r6, r0
    34a6:	d8ee      	bhi.n	3486 <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    34a8:	68e8      	ldr	r0, [r5, #12]
    34aa:	89a2      	ldrh	r2, [r4, #12]
    34ac:	68a1      	ldr	r1, [r4, #8]
    34ae:	3008      	adds	r0, #8
    34b0:	f00d fac4 	bl	10a3c <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    34b4:	896b      	ldrh	r3, [r5, #10]
    34b6:	89a2      	ldrh	r2, [r4, #12]
    34b8:	1a9b      	subs	r3, r3, r2
    34ba:	816b      	strh	r3, [r5, #10]
		net_buf_unref(buf);
    34bc:	4620      	mov	r0, r4
    34be:	f00d fa85 	bl	109cc <net_buf_unref>
		if (conn->rx_len) {
    34c2:	896b      	ldrh	r3, [r5, #10]
    34c4:	b973      	cbnz	r3, 34e4 <bt_conn_recv+0x8c>
		buf = conn->rx;
    34c6:	68ec      	ldr	r4, [r5, #12]
		conn->rx_len = 0;
    34c8:	816b      	strh	r3, [r5, #10]
		conn->rx = NULL;
    34ca:	60eb      	str	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    34cc:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
    34ce:	89a2      	ldrh	r2, [r4, #12]
    34d0:	881b      	ldrh	r3, [r3, #0]
    34d2:	3304      	adds	r3, #4
    34d4:	4293      	cmp	r3, r2
    34d6:	d1d9      	bne.n	348c <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
    34d8:	4621      	mov	r1, r4
    34da:	4628      	mov	r0, r5
}
    34dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    34e0:	f000 be45 	b.w	416e <bt_l2cap_recv>
    34e4:	bd70      	pop	{r4, r5, r6, pc}

000034e6 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    34e6:	b510      	push	{r4, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    34e8:	7a44      	ldrb	r4, [r0, #9]
    34ea:	2c03      	cmp	r4, #3
    34ec:	d005      	beq.n	34fa <bt_conn_send_cb+0x14>
		BT_ERR("not connected!");
		net_buf_unref(buf);
    34ee:	4608      	mov	r0, r1
    34f0:	f00d fa6c 	bl	109cc <net_buf_unref>
		return -ENOTCONN;
    34f4:	f06f 0038 	mvn.w	r0, #56	; 0x38
    34f8:	bd10      	pop	{r4, pc}
	}

	conn_tx(buf)->cb = cb;
    34fa:	614a      	str	r2, [r1, #20]

	net_buf_put(&conn->tx_queue, buf);
    34fc:	3028      	adds	r0, #40	; 0x28
    34fe:	f00d fa58 	bl	109b2 <net_buf_put>
	return 0;
    3502:	2000      	movs	r0, #0
}
    3504:	bd10      	pop	{r4, pc}
	...

00003508 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    350c:	4d0d      	ldr	r5, [pc, #52]	; (3544 <bt_conn_notify_tx+0x3c>)
    350e:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3510:	f100 0718 	add.w	r7, r0, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3514:	f04f 0800 	mov.w	r8, #0
    3518:	2100      	movs	r1, #0
    351a:	4638      	mov	r0, r7
    351c:	f00e f84c 	bl	115b8 <_impl_k_queue_get>
    3520:	4604      	mov	r4, r0
    3522:	b908      	cbnz	r0, 3528 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3528:	6863      	ldr	r3, [r4, #4]
    352a:	b10b      	cbz	r3, 3530 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    352c:	4630      	mov	r0, r6
    352e:	4798      	blx	r3
    3530:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    3532:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3534:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3536:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    353a:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    353c:	2b00      	cmp	r3, #0
    353e:	d1eb      	bne.n	3518 <bt_conn_notify_tx+0x10>
	list->tail = node;
    3540:	606c      	str	r4, [r5, #4]
    3542:	e7e7      	b.n	3514 <bt_conn_notify_tx+0xc>
    3544:	20000194 	.word	0x20000194

00003548 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    354c:	4605      	mov	r5, r0
    354e:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3550:	483e      	ldr	r0, [pc, #248]	; (364c <send_frag+0x104>)
    3552:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3556:	4698      	mov	r8, r3
    3558:	4614      	mov	r4, r2
    355a:	f00e faf6 	bl	11b4a <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    355e:	4b3c      	ldr	r3, [pc, #240]	; (3650 <send_frag+0x108>)
    3560:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3564:	f7ff ff0c 	bl	3380 <atomic_get>
    3568:	b130      	cbz	r0, 3578 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    356a:	7a5a      	ldrb	r2, [r3, #9]
    356c:	3a03      	subs	r2, #3
    356e:	2a01      	cmp	r2, #1
    3570:	d802      	bhi.n	3578 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    3572:	4618      	mov	r0, r3
    3574:	f7ff ffc8 	bl	3508 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3578:	7a6b      	ldrb	r3, [r5, #9]
    357a:	2b03      	cmp	r3, #3
    357c:	d149      	bne.n	3612 <send_frag+0xca>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    357e:	2104      	movs	r1, #4
    3580:	f107 0008 	add.w	r0, r7, #8
    3584:	f00d fa7a 	bl	10a7c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3588:	882a      	ldrh	r2, [r5, #0]
    358a:	4e32      	ldr	r6, [pc, #200]	; (3654 <send_frag+0x10c>)
    358c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3590:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3592:	89bb      	ldrh	r3, [r7, #12]
    3594:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3596:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    3598:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    359a:	3b04      	subs	r3, #4
    359c:	8043      	strh	r3, [r0, #2]
    359e:	2302      	movs	r3, #2
    35a0:	753b      	strb	r3, [r7, #20]
	return node->next;
    35a2:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    35a4:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    35a6:	428c      	cmp	r4, r1
	list->tail = node;
    35a8:	bf08      	it	eq
    35aa:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    35ac:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    35ae:	f04f 0320 	mov.w	r3, #32
    35b2:	f3ef 8211 	mrs	r2, BASEPRI
    35b6:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    35ba:	2300      	movs	r3, #0
    35bc:	6023      	str	r3, [r4, #0]
    35be:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    35c0:	2b00      	cmp	r3, #0
    35c2:	d134      	bne.n	362e <send_frag+0xe6>
	list->tail = node;
    35c4:	616c      	str	r4, [r5, #20]
	list->head = node;
    35c6:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    35c8:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    35cc:	4638      	mov	r0, r7
    35ce:	f7fe fdc3 	bl	2158 <bt_send>
	if (err) {
    35d2:	2800      	cmp	r0, #0
    35d4:	d037      	beq.n	3646 <send_frag+0xfe>
	__asm__ volatile(
    35d6:	f04f 0320 	mov.w	r3, #32
    35da:	f3ef 8111 	mrs	r1, BASEPRI
    35de:	f383 8811 	msr	BASEPRI, r3
    35e2:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    35e4:	2200      	movs	r2, #0
    35e6:	b153      	cbz	r3, 35fe <send_frag+0xb6>
    35e8:	429c      	cmp	r4, r3
    35ea:	d129      	bne.n	3640 <send_frag+0xf8>
    35ec:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    35ee:	bb0a      	cbnz	r2, 3634 <send_frag+0xec>
    35f0:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    35f2:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    35f4:	4294      	cmp	r4, r2
    35f6:	d100      	bne.n	35fa <send_frag+0xb2>
	list->tail = node;
    35f8:	616b      	str	r3, [r5, #20]
	parent->next = child;
    35fa:	2300      	movs	r3, #0
    35fc:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    35fe:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    3602:	2300      	movs	r3, #0
    3604:	6063      	str	r3, [r4, #4]
    3606:	6833      	ldr	r3, [r6, #0]
    3608:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    360a:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    360c:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    360e:	b903      	cbnz	r3, 3612 <send_frag+0xca>
	list->tail = node;
    3610:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3612:	480e      	ldr	r0, [pc, #56]	; (364c <send_frag+0x104>)
    3614:	f00e fa71 	bl	11afa <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    3618:	f1b8 0f00 	cmp.w	r8, #0
    361c:	d004      	beq.n	3628 <send_frag+0xe0>
		net_buf_unref(buf);
    361e:	4638      	mov	r0, r7
    3620:	f00d f9d4 	bl	109cc <net_buf_unref>
	}
	return false;
    3624:	f04f 0800 	mov.w	r8, #0
}
    3628:	4640      	mov	r0, r8
    362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    362e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3630:	616c      	str	r4, [r5, #20]
    3632:	e7c9      	b.n	35c8 <send_frag+0x80>
	parent->next = child;
    3634:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    3636:	696b      	ldr	r3, [r5, #20]
    3638:	429c      	cmp	r4, r3
	list->tail = node;
    363a:	bf08      	it	eq
    363c:	616a      	streq	r2, [r5, #20]
    363e:	e7dc      	b.n	35fa <send_frag+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    3640:	461a      	mov	r2, r3
    3642:	681b      	ldr	r3, [r3, #0]
    3644:	e7cf      	b.n	35e6 <send_frag+0x9e>
	return true;
    3646:	f04f 0801 	mov.w	r8, #1
    364a:	e7ed      	b.n	3628 <send_frag+0xe0>
    364c:	2000350c 	.word	0x2000350c
    3650:	200000fc 	.word	0x200000fc
    3654:	20000194 	.word	0x20000194

00003658 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    3658:	b538      	push	{r3, r4, r5, lr}
    365a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    365c:	f100 0528 	add.w	r5, r0, #40	; 0x28
    3660:	2100      	movs	r1, #0
    3662:	4628      	mov	r0, r5
    3664:	f00d f988 	bl	10978 <net_buf_get>
    3668:	b958      	cbnz	r0, 3682 <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    366a:	4620      	mov	r0, r4
    366c:	f7ff ff4c 	bl	3508 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    3670:	4620      	mov	r0, r4
    3672:	f7ff fe8b 	bl	338c <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3676:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    367a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    367e:	f7ff be90 	b.w	33a2 <atomic_dec>
		net_buf_unref(buf);
    3682:	f00d f9a3 	bl	109cc <net_buf_unref>
    3686:	e7eb      	b.n	3660 <conn_cleanup+0x8>

00003688 <bt_conn_prepare_events>:
{
    3688:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    368a:	4b1f      	ldr	r3, [pc, #124]	; (3708 <bt_conn_prepare_events+0x80>)
    368c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    368e:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    3690:	609a      	str	r2, [r3, #8]
{
    3692:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3694:	f00e fe5f 	bl	12356 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    3698:	4b1c      	ldr	r3, [pc, #112]	; (370c <bt_conn_prepare_events+0x84>)
    369a:	f103 0040 	add.w	r0, r3, #64	; 0x40
    369e:	f7ff fe6f 	bl	3380 <atomic_get>
    36a2:	4619      	mov	r1, r3
    36a4:	b908      	cbnz	r0, 36aa <bt_conn_prepare_events+0x22>
			continue;
    36a6:	2001      	movs	r0, #1
    36a8:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    36aa:	7a5a      	ldrb	r2, [r3, #9]
    36ac:	b99a      	cbnz	r2, 36d6 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    36ae:	f3bf 8f5b 	dmb	ish
    36b2:	1d1a      	adds	r2, r3, #4
    36b4:	e852 0f00 	ldrex	r0, [r2]
    36b8:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    36bc:	e842 4e00 	strex	lr, r4, [r2]
    36c0:	f1be 0f00 	cmp.w	lr, #0
    36c4:	d1f6      	bne.n	36b4 <bt_conn_prepare_events+0x2c>
    36c6:	f3bf 8f5b 	dmb	ish
    36ca:	0642      	lsls	r2, r0, #25
    36cc:	d503      	bpl.n	36d6 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    36ce:	4618      	mov	r0, r3
    36d0:	f7ff ffc2 	bl	3658 <conn_cleanup>
    36d4:	e7e7      	b.n	36a6 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    36d6:	7a4c      	ldrb	r4, [r1, #9]
    36d8:	2c03      	cmp	r4, #3
    36da:	d1e4      	bne.n	36a6 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    36dc:	f105 0014 	add.w	r0, r5, #20
    36e0:	4b0b      	ldr	r3, [pc, #44]	; (3710 <bt_conn_prepare_events+0x88>)
    36e2:	2200      	movs	r2, #0
    36e4:	2104      	movs	r1, #4
    36e6:	f00e fe36 	bl	12356 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    36ea:	2301      	movs	r3, #1
    36ec:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    36f0:	f105 0028 	add.w	r0, r5, #40	; 0x28
    36f4:	4b07      	ldr	r3, [pc, #28]	; (3714 <bt_conn_prepare_events+0x8c>)
    36f6:	2200      	movs	r2, #0
    36f8:	2104      	movs	r1, #4
    36fa:	f00e fe2c 	bl	12356 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    36fe:	2302      	movs	r3, #2
    3700:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    3704:	4620      	mov	r0, r4
}
    3706:	bd38      	pop	{r3, r4, r5, pc}
    3708:	200035a8 	.word	0x200035a8
    370c:	200000fc 	.word	0x200000fc
    3710:	20000114 	.word	0x20000114
    3714:	20000124 	.word	0x20000124

00003718 <bt_conn_add_le>:
{
    3718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    371a:	4c17      	ldr	r4, [pc, #92]	; (3778 <bt_conn_add_le+0x60>)
    371c:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    3720:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    3722:	4630      	mov	r0, r6
    3724:	f7ff fe2c 	bl	3380 <atomic_get>
    3728:	4605      	mov	r5, r0
    372a:	b108      	cbz	r0, 3730 <bt_conn_add_le+0x18>
		return NULL;
    372c:	2000      	movs	r0, #0
    372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    3730:	4601      	mov	r1, r0
    3732:	2298      	movs	r2, #152	; 0x98
    3734:	4620      	mov	r0, r4
    3736:	f7fe fa8d 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    373a:	f3bf 8f5b 	dmb	ish
    373e:	2301      	movs	r3, #1
    3740:	e856 2f00 	ldrex	r2, [r6]
    3744:	e846 3100 	strex	r1, r3, [r6]
    3748:	2900      	cmp	r1, #0
    374a:	d1f9      	bne.n	3740 <bt_conn_add_le+0x28>
    374c:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    3750:	2207      	movs	r2, #7
    3752:	4639      	mov	r1, r7
    3754:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3758:	f7fe fa50 	bl	1bfc <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    375c:	2318      	movs	r3, #24
    375e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    3762:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    3764:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    3768:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    376a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    376e:	4903      	ldr	r1, [pc, #12]	; (377c <bt_conn_add_le+0x64>)
    3770:	f00e fcaa 	bl	120c8 <k_delayed_work_init>
			conn = &conns[i];
    3774:	4620      	mov	r0, r4
}
    3776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3778:	200000fc 	.word	0x200000fc
    377c:	00003c69 	.word	0x00003c69

00003780 <bt_conn_set_state>:
{
    3780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
    3782:	7a45      	ldrb	r5, [r0, #9]
    3784:	428d      	cmp	r5, r1
{
    3786:	4604      	mov	r4, r0
	if (conn->state == state) {
    3788:	f000 8099 	beq.w	38be <bt_conn_set_state+0x13e>
	conn->state = state;
    378c:	7241      	strb	r1, [r0, #9]
	switch (old_state) {
    378e:	b19d      	cbz	r5, 37b8 <bt_conn_set_state+0x38>
    3790:	2d02      	cmp	r5, #2
    3792:	d015      	beq.n	37c0 <bt_conn_set_state+0x40>
	switch (conn->state) {
    3794:	7a63      	ldrb	r3, [r4, #9]
    3796:	2b02      	cmp	r3, #2
    3798:	f000 8086 	beq.w	38a8 <bt_conn_set_state+0x128>
    379c:	2b03      	cmp	r3, #3
    379e:	d016      	beq.n	37ce <bt_conn_set_state+0x4e>
    37a0:	2b00      	cmp	r3, #0
    37a2:	f040 808c 	bne.w	38be <bt_conn_set_state+0x13e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    37a6:	78a3      	ldrb	r3, [r4, #2]
    37a8:	2b02      	cmp	r3, #2
    37aa:	d12a      	bne.n	3802 <bt_conn_set_state+0x82>
	atomic_dec(&conn->ref);
    37ac:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    37b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    37b4:	f7ff bdf5 	b.w	33a2 <atomic_dec>
	atomic_inc(&conn->ref);
    37b8:	3040      	adds	r0, #64	; 0x40
    37ba:	f7ff fdff 	bl	33bc <atomic_inc>
    37be:	e7e9      	b.n	3794 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    37c0:	7883      	ldrb	r3, [r0, #2]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d1e6      	bne.n	3794 <bt_conn_set_state+0x14>
			k_delayed_work_cancel(&conn->le.update_work);
    37c6:	3070      	adds	r0, #112	; 0x70
    37c8:	f00e fc8e 	bl	120e8 <k_delayed_work_cancel>
    37cc:	e7e2      	b.n	3794 <bt_conn_set_state+0x14>
		if (conn->type == BT_CONN_TYPE_SCO) {
    37ce:	78a3      	ldrb	r3, [r4, #2]
    37d0:	2b02      	cmp	r3, #2
    37d2:	d074      	beq.n	38be <bt_conn_set_state+0x13e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    37d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    37d8:	f00d fec2 	bl	11560 <_impl_k_queue_init>
    37dc:	f104 0018 	add.w	r0, r4, #24
    37e0:	f00d febe 	bl	11560 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    37e4:	2100      	movs	r1, #0
    37e6:	4836      	ldr	r0, [pc, #216]	; (38c0 <bt_conn_set_state+0x140>)
    37e8:	f00e fe58 	bl	1249c <_impl_k_poll_signal>
	list->head = NULL;
    37ec:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    37ee:	4620      	mov	r0, r4
    37f0:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    37f2:	63e3      	str	r3, [r4, #60]	; 0x3c
    37f4:	f000 fbb2 	bl	3f5c <bt_l2cap_connected>
		notify_connected(conn);
    37f8:	4620      	mov	r0, r4
}
    37fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    37fe:	f7ff bdaf 	b.w	3360 <notify_connected>
		if (old_state == BT_CONN_CONNECTED ||
    3802:	1eeb      	subs	r3, r5, #3
    3804:	2b01      	cmp	r3, #1
    3806:	d843      	bhi.n	3890 <bt_conn_set_state+0x110>
			bt_l2cap_disconnected(conn);
    3808:	4620      	mov	r0, r4
    380a:	f000 fbe1 	bl	3fd0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    380e:	4b2d      	ldr	r3, [pc, #180]	; (38c4 <bt_conn_set_state+0x144>)
    3810:	681d      	ldr	r5, [r3, #0]
    3812:	b9ed      	cbnz	r5, 3850 <bt_conn_set_state+0xd0>
    3814:	4e2c      	ldr	r6, [pc, #176]	; (38c8 <bt_conn_set_state+0x148>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3816:	4f2d      	ldr	r7, [pc, #180]	; (38cc <bt_conn_set_state+0x14c>)
	__asm__ volatile(
    3818:	f04f 0320 	mov.w	r3, #32
    381c:	f3ef 8111 	mrs	r1, BASEPRI
    3820:	f383 8811 	msr	BASEPRI, r3
    3824:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    3826:	b12b      	cbz	r3, 3834 <bt_conn_set_state+0xb4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3828:	6960      	ldr	r0, [r4, #20]
	return node->next;
    382a:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    382c:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    382e:	4283      	cmp	r3, r0
	list->tail = node;
    3830:	bf08      	it	eq
    3832:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3834:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    3838:	b18b      	cbz	r3, 385e <bt_conn_set_state+0xde>
    383a:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    383c:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    383e:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    3840:	605d      	str	r5, [r3, #4]
	list->head = node;
    3842:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    3844:	b902      	cbnz	r2, 3848 <bt_conn_set_state+0xc8>
	list->tail = node;
    3846:	6073      	str	r3, [r6, #4]
    3848:	4638      	mov	r0, r7
    384a:	f00e f956 	bl	11afa <_impl_k_sem_give>
    384e:	e7e3      	b.n	3818 <bt_conn_set_state+0x98>
		if (cb->disconnected) {
    3850:	686b      	ldr	r3, [r5, #4]
    3852:	b113      	cbz	r3, 385a <bt_conn_set_state+0xda>
			cb->disconnected(conn, conn->err);
    3854:	7a21      	ldrb	r1, [r4, #8]
    3856:	4620      	mov	r0, r4
    3858:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    385a:	692d      	ldr	r5, [r5, #16]
    385c:	e7d9      	b.n	3812 <bt_conn_set_state+0x92>
			if (conn->type == BT_CONN_TYPE_LE) {
    385e:	78a3      	ldrb	r3, [r4, #2]
    3860:	b91b      	cbnz	r3, 386a <bt_conn_set_state+0xea>
				k_delayed_work_cancel(&conn->le.update_work);
    3862:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3866:	f00e fc3f 	bl	120e8 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    386a:	f3bf 8f5b 	dmb	ish
    386e:	3404      	adds	r4, #4
    3870:	e854 3f00 	ldrex	r3, [r4]
    3874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3878:	e844 3200 	strex	r2, r3, [r4]
    387c:	2a00      	cmp	r2, #0
    387e:	d1f7      	bne.n	3870 <bt_conn_set_state+0xf0>
    3880:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    3884:	2100      	movs	r1, #0
    3886:	480e      	ldr	r0, [pc, #56]	; (38c0 <bt_conn_set_state+0x140>)
}
    3888:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    388c:	f00e be06 	b.w	1249c <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    3890:	2d02      	cmp	r5, #2
    3892:	d103      	bne.n	389c <bt_conn_set_state+0x11c>
			notify_connected(conn);
    3894:	4620      	mov	r0, r4
    3896:	f7ff fd63 	bl	3360 <notify_connected>
    389a:	e787      	b.n	37ac <bt_conn_set_state+0x2c>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    389c:	2d01      	cmp	r5, #1
    389e:	d10e      	bne.n	38be <bt_conn_set_state+0x13e>
			if (conn->err) {
    38a0:	7a23      	ldrb	r3, [r4, #8]
    38a2:	2b00      	cmp	r3, #0
    38a4:	d082      	beq.n	37ac <bt_conn_set_state+0x2c>
    38a6:	e7f5      	b.n	3894 <bt_conn_set_state+0x114>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    38a8:	78a3      	ldrb	r3, [r4, #2]
    38aa:	b943      	cbnz	r3, 38be <bt_conn_set_state+0x13e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    38ac:	f104 0170 	add.w	r1, r4, #112	; 0x70
    38b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
    38b4:	4806      	ldr	r0, [pc, #24]	; (38d0 <bt_conn_set_state+0x150>)
}
    38b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    38ba:	f00e bc79 	b.w	121b0 <k_delayed_work_submit_to_queue>
    38be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38c0:	200035a8 	.word	0x200035a8
    38c4:	200000e8 	.word	0x200000e8
    38c8:	20000194 	.word	0x20000194
    38cc:	2000350c 	.word	0x2000350c
    38d0:	20001730 	.word	0x20001730

000038d4 <bt_conn_lookup_handle>:
{
    38d4:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    38d6:	4c0b      	ldr	r4, [pc, #44]	; (3904 <bt_conn_lookup_handle+0x30>)
{
    38d8:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    38da:	f104 0040 	add.w	r0, r4, #64	; 0x40
    38de:	f7ff fd4f 	bl	3380 <atomic_get>
    38e2:	b168      	cbz	r0, 3900 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    38e4:	7a63      	ldrb	r3, [r4, #9]
    38e6:	3b03      	subs	r3, #3
    38e8:	2b01      	cmp	r3, #1
    38ea:	d808      	bhi.n	38fe <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    38ec:	8823      	ldrh	r3, [r4, #0]
    38ee:	4293      	cmp	r3, r2
    38f0:	d105      	bne.n	38fe <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    38f2:	f104 0040 	add.w	r0, r4, #64	; 0x40
    38f6:	f7ff fd61 	bl	33bc <atomic_inc>
			return bt_conn_ref(&conns[i]);
    38fa:	4620      	mov	r0, r4
    38fc:	bd10      	pop	{r4, pc}
	return NULL;
    38fe:	2000      	movs	r0, #0
}
    3900:	bd10      	pop	{r4, pc}
    3902:	bf00      	nop
    3904:	200000fc 	.word	0x200000fc

00003908 <bt_conn_addr_le_cmp>:
{
    3908:	b538      	push	{r3, r4, r5, lr}
    390a:	460d      	mov	r5, r1
    390c:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    390e:	f100 0144 	add.w	r1, r0, #68	; 0x44
    3912:	2207      	movs	r2, #7
    3914:	4628      	mov	r0, r5
    3916:	f7fe f95c 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    391a:	b160      	cbz	r0, 3936 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    391c:	78e3      	ldrb	r3, [r4, #3]
    391e:	2207      	movs	r2, #7
    3920:	b933      	cbnz	r3, 3930 <bt_conn_addr_le_cmp+0x28>
    3922:	f104 0152 	add.w	r1, r4, #82	; 0x52
    3926:	4628      	mov	r0, r5
}
    3928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    392c:	f7fe b951 	b.w	1bd2 <memcmp>
    3930:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    3934:	e7f7      	b.n	3926 <bt_conn_addr_le_cmp+0x1e>
    3936:	bd38      	pop	{r3, r4, r5, pc}

00003938 <bt_conn_lookup_addr_le>:
{
    3938:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    393a:	4c0b      	ldr	r4, [pc, #44]	; (3968 <bt_conn_lookup_addr_le+0x30>)
{
    393c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    393e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3942:	f7ff fd1d 	bl	3380 <atomic_get>
    3946:	b908      	cbnz	r0, 394c <bt_conn_lookup_addr_le+0x14>
	return NULL;
    3948:	2000      	movs	r0, #0
    394a:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    394c:	78a3      	ldrb	r3, [r4, #2]
    394e:	2b00      	cmp	r3, #0
    3950:	d1fa      	bne.n	3948 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    3952:	4620      	mov	r0, r4
    3954:	f7ff ffd8 	bl	3908 <bt_conn_addr_le_cmp>
    3958:	2800      	cmp	r0, #0
    395a:	d1f5      	bne.n	3948 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    395c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3960:	f7ff fd2c 	bl	33bc <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    3964:	4620      	mov	r0, r4
}
    3966:	bd10      	pop	{r4, pc}
    3968:	200000fc 	.word	0x200000fc

0000396c <bt_conn_lookup_state_le>:
{
    396c:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    396e:	4c0e      	ldr	r4, [pc, #56]	; (39a8 <bt_conn_lookup_state_le+0x3c>)
{
    3970:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    3972:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    3976:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    3978:	f7ff fd02 	bl	3380 <atomic_get>
    397c:	b908      	cbnz	r0, 3982 <bt_conn_lookup_state_le+0x16>
	return NULL;
    397e:	2000      	movs	r0, #0
    3980:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    3982:	78a2      	ldrb	r2, [r4, #2]
    3984:	2a00      	cmp	r2, #0
    3986:	d1fa      	bne.n	397e <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    3988:	b93b      	cbnz	r3, 399a <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    398a:	7a63      	ldrb	r3, [r4, #9]
    398c:	42ab      	cmp	r3, r5
    398e:	d1f6      	bne.n	397e <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    3990:	4806      	ldr	r0, [pc, #24]	; (39ac <bt_conn_lookup_state_le+0x40>)
    3992:	f7ff fd13 	bl	33bc <atomic_inc>
			return bt_conn_ref(&conns[i]);
    3996:	4804      	ldr	r0, [pc, #16]	; (39a8 <bt_conn_lookup_state_le+0x3c>)
}
    3998:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    399a:	4619      	mov	r1, r3
    399c:	4620      	mov	r0, r4
    399e:	f7ff ffb3 	bl	3908 <bt_conn_addr_le_cmp>
    39a2:	2800      	cmp	r0, #0
    39a4:	d1eb      	bne.n	397e <bt_conn_lookup_state_le+0x12>
    39a6:	e7f0      	b.n	398a <bt_conn_lookup_state_le+0x1e>
    39a8:	200000fc 	.word	0x200000fc
    39ac:	2000013c 	.word	0x2000013c

000039b0 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    39b0:	3040      	adds	r0, #64	; 0x40
    39b2:	f7ff bcf6 	b.w	33a2 <atomic_dec>

000039b6 <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    39b6:	3044      	adds	r0, #68	; 0x44
    39b8:	4770      	bx	lr
	...

000039bc <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    39bc:	b570      	push	{r4, r5, r6, lr}
    39be:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    39c0:	4608      	mov	r0, r1
{
    39c2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    39c4:	f7fe fb7e 	bl	20c4 <bt_le_conn_params_valid>
    39c8:	b908      	cbnz	r0, 39ce <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    39ca:	2400      	movs	r4, #0
    39cc:	e01d      	b.n	3a0a <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    39ce:	481e      	ldr	r0, [pc, #120]	; (3a48 <bt_conn_create_le+0x8c>)
    39d0:	f7ff fcd6 	bl	3380 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    39d4:	0583      	lsls	r3, r0, #22
    39d6:	d4f8      	bmi.n	39ca <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    39d8:	4630      	mov	r0, r6
    39da:	f7ff ffad 	bl	3938 <bt_conn_lookup_addr_le>
	if (conn) {
    39de:	4604      	mov	r4, r0
    39e0:	b1a8      	cbz	r0, 3a0e <bt_conn_create_le+0x52>
		switch (conn->state) {
    39e2:	7a43      	ldrb	r3, [r0, #9]
    39e4:	2b01      	cmp	r3, #1
    39e6:	d007      	beq.n	39f8 <bt_conn_create_le+0x3c>
    39e8:	d301      	bcc.n	39ee <bt_conn_create_le+0x32>
    39ea:	2b03      	cmp	r3, #3
    39ec:	d90d      	bls.n	3a0a <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    39ee:	f104 0040 	add.w	r0, r4, #64	; 0x40
    39f2:	f7ff fcd6 	bl	33a2 <atomic_dec>
    39f6:	e7e8      	b.n	39ca <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    39f8:	886b      	ldrh	r3, [r5, #2]
    39fa:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    39fe:	88ab      	ldrh	r3, [r5, #4]
    3a00:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3a04:	88eb      	ldrh	r3, [r5, #6]
    3a06:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    3a0a:	4620      	mov	r0, r4
    3a0c:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    3a0e:	4630      	mov	r0, r6
    3a10:	f7ff fe82 	bl	3718 <bt_conn_add_le>
	if (!conn) {
    3a14:	4604      	mov	r4, r0
    3a16:	2800      	cmp	r0, #0
    3a18:	d0f7      	beq.n	3a0a <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    3a1a:	2207      	movs	r2, #7
    3a1c:	4631      	mov	r1, r6
    3a1e:	3052      	adds	r0, #82	; 0x52
    3a20:	f7fe f8ec 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    3a24:	886b      	ldrh	r3, [r5, #2]
    3a26:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    3a2a:	88ab      	ldrh	r3, [r5, #4]
    3a2c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3a30:	88eb      	ldrh	r3, [r5, #6]
    3a32:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3a36:	4620      	mov	r0, r4
    3a38:	2101      	movs	r1, #1
    3a3a:	f7ff fea1 	bl	3780 <bt_conn_set_state>
	bt_le_scan_update(true);
    3a3e:	2001      	movs	r0, #1
    3a40:	f7fe fbf8 	bl	2234 <bt_le_scan_update>
	return conn;
    3a44:	e7e1      	b.n	3a0a <bt_conn_create_le+0x4e>
    3a46:	bf00      	nop
    3a48:	200034f0 	.word	0x200034f0

00003a4c <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    3a4c:	b570      	push	{r4, r5, r6, lr}
    3a4e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    3a50:	460d      	mov	r5, r1
    3a52:	2900      	cmp	r1, #0
    3a54:	d13d      	bne.n	3ad2 <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    3a56:	4630      	mov	r0, r6
    3a58:	f7ff ff6e 	bl	3938 <bt_conn_lookup_addr_le>
	if (!conn) {
    3a5c:	4604      	mov	r4, r0
    3a5e:	b928      	cbnz	r0, 3a6c <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    3a60:	4630      	mov	r0, r6
    3a62:	f7ff fe59 	bl	3718 <bt_conn_add_le>
		if (!conn) {
    3a66:	4604      	mov	r4, r0
    3a68:	2800      	cmp	r0, #0
    3a6a:	d053      	beq.n	3b14 <bt_le_set_auto_conn+0xc8>
    3a6c:	1d23      	adds	r3, r4, #4
    3a6e:	f104 0640 	add.w	r6, r4, #64	; 0x40
			return -ENOMEM;
		}
	}

	if (param) {
    3a72:	2d00      	cmp	r5, #0
    3a74:	d035      	beq.n	3ae2 <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    3a76:	886a      	ldrh	r2, [r5, #2]
    3a78:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    3a7c:	88aa      	ldrh	r2, [r5, #4]
    3a7e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3a82:	88ea      	ldrh	r2, [r5, #6]
    3a84:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3a88:	f3bf 8f5b 	dmb	ish
    3a8c:	e853 2f00 	ldrex	r2, [r3]
    3a90:	f042 0101 	orr.w	r1, r2, #1
    3a94:	e843 1000 	strex	r0, r1, [r3]
    3a98:	2800      	cmp	r0, #0
    3a9a:	d1f7      	bne.n	3a8c <bt_le_set_auto_conn+0x40>
    3a9c:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    3aa0:	07d1      	lsls	r1, r2, #31
    3aa2:	d402      	bmi.n	3aaa <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    3aa4:	4630      	mov	r0, r6
    3aa6:	f7ff fc89 	bl	33bc <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    3aaa:	7a63      	ldrb	r3, [r4, #9]
    3aac:	b963      	cbnz	r3, 3ac8 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3aae:	481b      	ldr	r0, [pc, #108]	; (3b1c <bt_le_set_auto_conn+0xd0>)
    3ab0:	f7ff fc66 	bl	3380 <atomic_get>
    3ab4:	0783      	lsls	r3, r0, #30
    3ab6:	d507      	bpl.n	3ac8 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    3ab8:	b11d      	cbz	r5, 3ac2 <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3aba:	2101      	movs	r1, #1
    3abc:	4620      	mov	r0, r4
    3abe:	f7ff fe5f 	bl	3780 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    3ac2:	2000      	movs	r0, #0
    3ac4:	f7fe fbb6 	bl	2234 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    3ac8:	4630      	mov	r0, r6
    3aca:	f7ff fc6a 	bl	33a2 <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    3ace:	2000      	movs	r0, #0
    3ad0:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    3ad2:	4608      	mov	r0, r1
    3ad4:	f7fe faf6 	bl	20c4 <bt_le_conn_params_valid>
    3ad8:	2800      	cmp	r0, #0
    3ada:	d1bc      	bne.n	3a56 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    3adc:	f06f 0015 	mvn.w	r0, #21
    3ae0:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ae2:	f3bf 8f5b 	dmb	ish
    3ae6:	e853 2f00 	ldrex	r2, [r3]
    3aea:	f022 0101 	bic.w	r1, r2, #1
    3aee:	e843 1000 	strex	r0, r1, [r3]
    3af2:	2800      	cmp	r0, #0
    3af4:	d1f7      	bne.n	3ae6 <bt_le_set_auto_conn+0x9a>
    3af6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    3afa:	07d2      	lsls	r2, r2, #31
    3afc:	d5d5      	bpl.n	3aaa <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    3afe:	4630      	mov	r0, r6
    3b00:	f7ff fc4f 	bl	33a2 <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    3b04:	7a63      	ldrb	r3, [r4, #9]
    3b06:	2b01      	cmp	r3, #1
    3b08:	d1cf      	bne.n	3aaa <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3b0a:	4629      	mov	r1, r5
    3b0c:	4620      	mov	r0, r4
    3b0e:	f7ff fe37 	bl	3780 <bt_conn_set_state>
    3b12:	e7ca      	b.n	3aaa <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    3b14:	f06f 000b 	mvn.w	r0, #11
}
    3b18:	bd70      	pop	{r4, r5, r6, pc}
    3b1a:	bf00      	nop
    3b1c:	200034f0 	.word	0x200034f0

00003b20 <bt_conn_disconnect>:
{
    3b20:	b570      	push	{r4, r5, r6, lr}
    3b22:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3b24:	7881      	ldrb	r1, [r0, #2]
{
    3b26:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3b28:	b911      	cbnz	r1, 3b30 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    3b2a:	3044      	adds	r0, #68	; 0x44
    3b2c:	f7ff ff8e 	bl	3a4c <bt_le_set_auto_conn>
	switch (conn->state) {
    3b30:	7a63      	ldrb	r3, [r4, #9]
    3b32:	3b01      	subs	r3, #1
    3b34:	2b03      	cmp	r3, #3
    3b36:	d803      	bhi.n	3b40 <bt_conn_disconnect+0x20>
    3b38:	e8df f003 	tbb	[pc, r3]
    3b3c:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    3b40:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    3b44:	4628      	mov	r0, r5
    3b46:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3b48:	4620      	mov	r0, r4
		conn->err = reason;
    3b4a:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3b4c:	2100      	movs	r1, #0
    3b4e:	f7ff fe17 	bl	3780 <bt_conn_set_state>
		bt_le_scan_update(false);
    3b52:	2000      	movs	r0, #0
    3b54:	f7fe fb6e 	bl	2234 <bt_le_scan_update>
		return 0;
    3b58:	2500      	movs	r5, #0
    3b5a:	e7f3      	b.n	3b44 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    3b5c:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3b60:	f00e fac2 	bl	120e8 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    3b64:	2100      	movs	r1, #0
    3b66:	f242 000e 	movw	r0, #8206	; 0x200e
}
    3b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    3b6e:	f7fe bafb 	b.w	2168 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    3b72:	2103      	movs	r1, #3
    3b74:	f240 4006 	movw	r0, #1030	; 0x406
    3b78:	f7fe f9a8 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    3b7c:	4605      	mov	r5, r0
    3b7e:	b198      	cbz	r0, 3ba8 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    3b80:	2103      	movs	r1, #3
    3b82:	3008      	adds	r0, #8
    3b84:	f00c ff54 	bl	10a30 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    3b88:	8823      	ldrh	r3, [r4, #0]
    3b8a:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    3b8c:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    3b8e:	4629      	mov	r1, r5
    3b90:	f240 4006 	movw	r0, #1030	; 0x406
    3b94:	f7fe fae8 	bl	2168 <bt_hci_cmd_send>
	if (err) {
    3b98:	4605      	mov	r5, r0
    3b9a:	2800      	cmp	r0, #0
    3b9c:	d1d2      	bne.n	3b44 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    3b9e:	2104      	movs	r1, #4
    3ba0:	4620      	mov	r0, r4
    3ba2:	f7ff fded 	bl	3780 <bt_conn_set_state>
    3ba6:	e7cd      	b.n	3b44 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    3ba8:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3bac:	e7ca      	b.n	3b44 <bt_conn_disconnect+0x24>

00003bae <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    3bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bb0:	4607      	mov	r7, r0
    3bb2:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    3bb4:	f242 0013 	movw	r0, #8211	; 0x2013
    3bb8:	210e      	movs	r1, #14
    3bba:	f7fe f987 	bl	1ecc <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    3bbe:	4606      	mov	r6, r0
    3bc0:	b1c8      	cbz	r0, 3bf6 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    3bc2:	210e      	movs	r1, #14
    3bc4:	3008      	adds	r0, #8
    3bc6:	f00c ff33 	bl	10a30 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    3bca:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    3bcc:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    3bce:	220e      	movs	r2, #14
    3bd0:	f7fe f840 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    3bd4:	883b      	ldrh	r3, [r7, #0]
    3bd6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    3bd8:	882b      	ldrh	r3, [r5, #0]
    3bda:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    3bdc:	886b      	ldrh	r3, [r5, #2]
    3bde:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    3be0:	88ab      	ldrh	r3, [r5, #4]
    3be2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    3be4:	88eb      	ldrh	r3, [r5, #6]
    3be6:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3be8:	4631      	mov	r1, r6
    3bea:	f242 0013 	movw	r0, #8211	; 0x2013
}
    3bee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3bf2:	f7fe bab9 	b.w	2168 <bt_hci_cmd_send>
}
    3bf6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003bfc <bt_conn_le_param_update>:
{
    3bfc:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    3bfe:	880a      	ldrh	r2, [r1, #0]
    3c00:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    3c04:	429a      	cmp	r2, r3
{
    3c06:	4604      	mov	r4, r0
    3c08:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    3c0a:	d80c      	bhi.n	3c26 <bt_conn_le_param_update+0x2a>
    3c0c:	884a      	ldrh	r2, [r1, #2]
    3c0e:	429a      	cmp	r2, r3
    3c10:	d309      	bcc.n	3c26 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    3c12:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    3c16:	888b      	ldrh	r3, [r1, #4]
    3c18:	429a      	cmp	r2, r3
    3c1a:	d104      	bne.n	3c26 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    3c1c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    3c20:	88cb      	ldrh	r3, [r1, #6]
    3c22:	429a      	cmp	r2, r3
    3c24:	d01a      	beq.n	3c5c <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    3c26:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3c2a:	f00e fa5d 	bl	120e8 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    3c2e:	4b0d      	ldr	r3, [pc, #52]	; (3c64 <bt_conn_le_param_update+0x68>)
    3c30:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3c34:	079a      	lsls	r2, r3, #30
    3c36:	d503      	bpl.n	3c40 <bt_conn_le_param_update+0x44>
    3c38:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    3c3c:	079b      	lsls	r3, r3, #30
    3c3e:	d401      	bmi.n	3c44 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    3c40:	78e3      	ldrb	r3, [r4, #3]
    3c42:	b92b      	cbnz	r3, 3c50 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    3c44:	4629      	mov	r1, r5
    3c46:	4620      	mov	r0, r4
}
    3c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    3c4c:	f7ff bfaf 	b.w	3bae <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    3c50:	4629      	mov	r1, r5
    3c52:	4620      	mov	r0, r4
}
    3c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    3c58:	f000 baa6 	b.w	41a8 <bt_l2cap_update_conn_param>
}
    3c5c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3c60:	bd38      	pop	{r3, r4, r5, pc}
    3c62:	bf00      	nop
    3c64:	20003480 	.word	0x20003480

00003c68 <le_conn_update>:
{
    3c68:	4603      	mov	r3, r0
    3c6a:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3c6c:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    3c70:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    3c72:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3c76:	d105      	bne.n	3c84 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    3c78:	2113      	movs	r1, #19
    3c7a:	f7ff ff51 	bl	3b20 <bt_conn_disconnect>
}
    3c7e:	b003      	add	sp, #12
    3c80:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3c84:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    3c88:	f8ad 2000 	strh.w	r2, [sp]
    3c8c:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    3c90:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    3c94:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3c96:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    3c9a:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    3c9e:	f8ad 2004 	strh.w	r2, [sp, #4]
    3ca2:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    3ca6:	f7ff ffa9 	bl	3bfc <bt_conn_le_param_update>
    3caa:	e7e8      	b.n	3c7e <le_conn_update+0x16>

00003cac <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    3cac:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    3cae:	4b08      	ldr	r3, [pc, #32]	; (3cd0 <bt_conn_create_pdu+0x24>)
{
    3cb0:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    3cb2:	2800      	cmp	r0, #0
    3cb4:	bf08      	it	eq
    3cb6:	4618      	moveq	r0, r3
    3cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3cbc:	f00c fe56 	bl	1096c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    3cc0:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    3cc2:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    3cc4:	3008      	adds	r0, #8
    3cc6:	f00c fe70 	bl	109aa <net_buf_simple_reserve>

	return buf;
}
    3cca:	4620      	mov	r0, r4
    3ccc:	bd38      	pop	{r3, r4, r5, pc}
    3cce:	bf00      	nop
    3cd0:	2000394c 	.word	0x2000394c

00003cd4 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    3cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cd8:	4606      	mov	r6, r0
    3cda:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    3cdc:	4816      	ldr	r0, [pc, #88]	; (3d38 <create_frag.isra.8+0x64>)
    3cde:	2100      	movs	r1, #0
    3ce0:	f7ff ffe4 	bl	3cac <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    3ce4:	7833      	ldrb	r3, [r6, #0]
    3ce6:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    3ce8:	4605      	mov	r5, r0
    3cea:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    3cee:	d005      	beq.n	3cfc <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    3cf0:	f00c fe6c 	bl	109cc <net_buf_unref>
		return NULL;
    3cf4:	4635      	mov	r5, r6
}
    3cf6:	4628      	mov	r0, r5
    3cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    3cfc:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3cfe:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    3d02:	4e0e      	ldr	r6, [pc, #56]	; (3d3c <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3d04:	4638      	mov	r0, r7
    3d06:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    3d0a:	f00c fedb 	bl	10ac4 <net_buf_simple_tailroom>
    3d0e:	4580      	cmp	r8, r0
    3d10:	d20c      	bcs.n	3d2c <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    3d12:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    3d16:	f854 1f08 	ldr.w	r1, [r4, #8]!
    3d1a:	4632      	mov	r2, r6
    3d1c:	4638      	mov	r0, r7
    3d1e:	f00c fe8d 	bl	10a3c <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    3d22:	4631      	mov	r1, r6
    3d24:	4620      	mov	r0, r4
    3d26:	f00c feb1 	bl	10a8c <net_buf_simple_pull>
    3d2a:	e7e4      	b.n	3cf6 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3d2c:	4638      	mov	r0, r7
    3d2e:	f00c fec9 	bl	10ac4 <net_buf_simple_tailroom>
    3d32:	b286      	uxth	r6, r0
    3d34:	e7ef      	b.n	3d16 <create_frag.isra.8+0x42>
    3d36:	bf00      	nop
    3d38:	2000396c 	.word	0x2000396c
    3d3c:	20003480 	.word	0x20003480

00003d40 <bt_conn_process_tx>:
{
    3d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    3d42:	7a43      	ldrb	r3, [r0, #9]
{
    3d44:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    3d46:	b993      	cbnz	r3, 3d6e <bt_conn_process_tx+0x2e>
    3d48:	f3bf 8f5b 	dmb	ish
    3d4c:	1d03      	adds	r3, r0, #4
    3d4e:	e853 2f00 	ldrex	r2, [r3]
    3d52:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    3d56:	e843 1400 	strex	r4, r1, [r3]
    3d5a:	2c00      	cmp	r4, #0
    3d5c:	d1f7      	bne.n	3d4e <bt_conn_process_tx+0xe>
    3d5e:	f3bf 8f5b 	dmb	ish
    3d62:	0653      	lsls	r3, r2, #25
    3d64:	d503      	bpl.n	3d6e <bt_conn_process_tx+0x2e>
}
    3d66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    3d6a:	f7ff bc75 	b.w	3658 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    3d6e:	2100      	movs	r1, #0
    3d70:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3d74:	f00c fe00 	bl	10978 <net_buf_get>
	BT_ASSERT(buf);
    3d78:	4604      	mov	r4, r0
    3d7a:	b928      	cbnz	r0, 3d88 <bt_conn_process_tx+0x48>
    3d7c:	4040      	eors	r0, r0
    3d7e:	f380 8811 	msr	BASEPRI, r0
    3d82:	f04f 0004 	mov.w	r0, #4
    3d86:	df02      	svc	2
	return bt_dev.le.mtu;
    3d88:	4e19      	ldr	r6, [pc, #100]	; (3df0 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    3d8a:	8981      	ldrh	r1, [r0, #12]
    3d8c:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    3d90:	4291      	cmp	r1, r2
    3d92:	d807      	bhi.n	3da4 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    3d94:	2300      	movs	r3, #0
    3d96:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    3d98:	4621      	mov	r1, r4
    3d9a:	4628      	mov	r0, r5
    3d9c:	f7ff fbd4 	bl	3548 <send_frag>
	if (!send_buf(conn, buf)) {
    3da0:	b140      	cbz	r0, 3db4 <bt_conn_process_tx+0x74>
}
    3da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3da4:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
    3da8:	4601      	mov	r1, r0
    3daa:	4638      	mov	r0, r7
    3dac:	f7ff ff92 	bl	3cd4 <create_frag.isra.8>
	if (!frag) {
    3db0:	4601      	mov	r1, r0
    3db2:	b920      	cbnz	r0, 3dbe <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    3db4:	4620      	mov	r0, r4
}
    3db6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    3dba:	f00c be07 	b.w	109cc <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    3dbe:	2301      	movs	r3, #1
    3dc0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3dc2:	4628      	mov	r0, r5
    3dc4:	f7ff fbc0 	bl	3548 <send_frag>
    3dc8:	2800      	cmp	r0, #0
    3dca:	d0f3      	beq.n	3db4 <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    3dcc:	89a2      	ldrh	r2, [r4, #12]
    3dce:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    3dd2:	429a      	cmp	r2, r3
    3dd4:	d802      	bhi.n	3ddc <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    3dd6:	2300      	movs	r3, #0
    3dd8:	2201      	movs	r2, #1
    3dda:	e7dd      	b.n	3d98 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    3ddc:	4621      	mov	r1, r4
    3dde:	4638      	mov	r0, r7
    3de0:	f7ff ff78 	bl	3cd4 <create_frag.isra.8>
		if (!frag) {
    3de4:	4601      	mov	r1, r0
    3de6:	2800      	cmp	r0, #0
    3de8:	d0e4      	beq.n	3db4 <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3dea:	2301      	movs	r3, #1
    3dec:	461a      	mov	r2, r3
    3dee:	e7e8      	b.n	3dc2 <bt_conn_process_tx+0x82>
    3df0:	20003480 	.word	0x20003480

00003df4 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    3df4:	4b03      	ldr	r3, [pc, #12]	; (3e04 <bt_conn_get_id+0x10>)
    3df6:	1ac0      	subs	r0, r0, r3
    3df8:	4b03      	ldr	r3, [pc, #12]	; (3e08 <bt_conn_get_id+0x14>)
    3dfa:	10c0      	asrs	r0, r0, #3
    3dfc:	4358      	muls	r0, r3
}
    3dfe:	b2c0      	uxtb	r0, r0
    3e00:	4770      	bx	lr
    3e02:	bf00      	nop
    3e04:	200000fc 	.word	0x200000fc
    3e08:	286bca1b 	.word	0x286bca1b

00003e0c <bt_conn_init>:
	parent->next = child;
    3e0c:	4b12      	ldr	r3, [pc, #72]	; (3e58 <bt_conn_init+0x4c>)
    3e0e:	4a13      	ldr	r2, [pc, #76]	; (3e5c <bt_conn_init+0x50>)
    3e10:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    3e12:	b510      	push	{r4, lr}
    3e14:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    3e16:	6859      	ldr	r1, [r3, #4]
    3e18:	b901      	cbnz	r1, 3e1c <bt_conn_init+0x10>
	list->tail = node;
    3e1a:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    3e1c:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    3e1e:	6092      	str	r2, [r2, #8]
	list->head = node;
    3e20:	4a0f      	ldr	r2, [pc, #60]	; (3e60 <bt_conn_init+0x54>)
    3e22:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    3e24:	b901      	cbnz	r1, 3e28 <bt_conn_init+0x1c>
	list->tail = node;
    3e26:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    3e28:	f001 f9c6 	bl	51b8 <bt_att_init>

	err = bt_smp_init();
    3e2c:	f001 fff2 	bl	5e14 <bt_smp_init>
	if (err) {
    3e30:	4604      	mov	r4, r0
    3e32:	b970      	cbnz	r0, 3e52 <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    3e34:	f000 f9e0 	bl	41f8 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    3e38:	480a      	ldr	r0, [pc, #40]	; (3e64 <bt_conn_init+0x58>)
    3e3a:	f7ff faa1 	bl	3380 <atomic_get>
    3e3e:	b140      	cbz	r0, 3e52 <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3e40:	4809      	ldr	r0, [pc, #36]	; (3e68 <bt_conn_init+0x5c>)
    3e42:	f7ff fa9d 	bl	3380 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    3e46:	07c3      	lsls	r3, r0, #31
    3e48:	d503      	bpl.n	3e52 <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3e4a:	2101      	movs	r1, #1
    3e4c:	4807      	ldr	r0, [pc, #28]	; (3e6c <bt_conn_init+0x60>)
    3e4e:	f7ff fc97 	bl	3780 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    3e52:	4620      	mov	r0, r4
    3e54:	bd10      	pop	{r4, pc}
    3e56:	bf00      	nop
    3e58:	20000194 	.word	0x20000194
    3e5c:	200000ec 	.word	0x200000ec
    3e60:	200000f4 	.word	0x200000f4
    3e64:	2000013c 	.word	0x2000013c
    3e68:	20000100 	.word	0x20000100
    3e6c:	200000fc 	.word	0x200000fc

00003e70 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    3e70:	4770      	bx	lr
	...

00003e74 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <l2cap_accept+0x14>)
    3e76:	6818      	ldr	r0, [r3, #0]
    3e78:	b918      	cbnz	r0, 3e82 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    3e7a:	4a04      	ldr	r2, [pc, #16]	; (3e8c <l2cap_accept+0x18>)
    3e7c:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    3e7e:	600b      	str	r3, [r1, #0]

		return 0;
    3e80:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    3e82:	f06f 000b 	mvn.w	r0, #11
}
    3e86:	4770      	bx	lr
    3e88:	2000019c 	.word	0x2000019c
    3e8c:	200035c4 	.word	0x200035c4

00003e90 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    3e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e92:	4607      	mov	r7, r0
    3e94:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3e96:	2000      	movs	r0, #0
    3e98:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    3e9a:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3e9c:	f7ff ff06 	bl	3cac <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    3ea0:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3ea2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    3ea4:	3008      	adds	r0, #8
    3ea6:	f00c fdc3 	bl	10a30 <net_buf_simple_add>
	hdr->code = code;
    3eaa:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    3eac:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    3eae:	8045      	strh	r5, [r0, #2]
}
    3eb0:	4620      	mov	r0, r4
    3eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003eb4 <l2cap_connected>:
    3eb4:	4770      	bx	lr
	...

00003eb8 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    3eb8:	2300      	movs	r3, #0
    3eba:	6083      	str	r3, [r0, #8]
    3ebc:	4b05      	ldr	r3, [pc, #20]	; (3ed4 <bt_l2cap_le_fixed_chan_register+0x1c>)
    3ebe:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    3ec0:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    3ec4:	b911      	cbnz	r1, 3ecc <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    3ec6:	605a      	str	r2, [r3, #4]
	list->head = node;
    3ec8:	601a      	str	r2, [r3, #0]
    3eca:	4770      	bx	lr
	parent->next = child;
    3ecc:	600a      	str	r2, [r1, #0]
	list->tail = node;
    3ece:	605a      	str	r2, [r3, #4]
    3ed0:	4770      	bx	lr
    3ed2:	bf00      	nop
    3ed4:	20000234 	.word	0x20000234

00003ed8 <bt_l2cap_chan_remove>:
{
    3ed8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3eda:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3edc:	b113      	cbz	r3, 3ee4 <bt_l2cap_chan_remove+0xc>
    3ede:	3b08      	subs	r3, #8
    3ee0:	2200      	movs	r2, #0
    3ee2:	b903      	cbnz	r3, 3ee6 <bt_l2cap_chan_remove+0xe>
    3ee4:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    3ee6:	428b      	cmp	r3, r1
    3ee8:	f103 0408 	add.w	r4, r3, #8
    3eec:	d10f      	bne.n	3f0e <bt_l2cap_chan_remove+0x36>
    3eee:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    3ef0:	b93a      	cbnz	r2, 3f02 <bt_l2cap_chan_remove+0x2a>
    3ef2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    3ef4:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    3ef6:	4294      	cmp	r4, r2
    3ef8:	d100      	bne.n	3efc <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    3efa:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    3efc:	2200      	movs	r2, #0
    3efe:	609a      	str	r2, [r3, #8]
    3f00:	bd10      	pop	{r4, pc}
    3f02:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    3f04:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    3f06:	428c      	cmp	r4, r1
	list->tail = node;
    3f08:	bf08      	it	eq
    3f0a:	63c2      	streq	r2, [r0, #60]	; 0x3c
    3f0c:	e7f6      	b.n	3efc <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    3f0e:	4622      	mov	r2, r4
    3f10:	2c00      	cmp	r4, #0
    3f12:	d0e7      	beq.n	3ee4 <bt_l2cap_chan_remove+0xc>
	return node->next;
    3f14:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3f16:	2b00      	cmp	r3, #0
    3f18:	d0e4      	beq.n	3ee4 <bt_l2cap_chan_remove+0xc>
    3f1a:	3b08      	subs	r3, #8
    3f1c:	e7e1      	b.n	3ee2 <bt_l2cap_chan_remove+0xa>

00003f1e <bt_l2cap_chan_del>:
	if (!chan->conn) {
    3f1e:	6803      	ldr	r3, [r0, #0]
{
    3f20:	b510      	push	{r4, lr}
    3f22:	4604      	mov	r4, r0
	if (!chan->conn) {
    3f24:	b12b      	cbz	r3, 3f32 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    3f26:	6843      	ldr	r3, [r0, #4]
    3f28:	685b      	ldr	r3, [r3, #4]
    3f2a:	b103      	cbz	r3, 3f2e <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    3f2c:	4798      	blx	r3
	chan->conn = NULL;
    3f2e:	2300      	movs	r3, #0
    3f30:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    3f32:	68e3      	ldr	r3, [r4, #12]
    3f34:	b11b      	cbz	r3, 3f3e <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    3f36:	4620      	mov	r0, r4
}
    3f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    3f3c:	4718      	bx	r3
    3f3e:	bd10      	pop	{r4, pc}

00003f40 <l2cap_rtx_timeout>:
{
    3f40:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    3f42:	f1a0 0410 	sub.w	r4, r0, #16
    3f46:	4621      	mov	r1, r4
    3f48:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3f4c:	f7ff ffc4 	bl	3ed8 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    3f50:	4620      	mov	r0, r4
}
    3f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
    3f56:	f7ff bfe2 	b.w	3f1e <bt_l2cap_chan_del>
	...

00003f5c <bt_l2cap_connected>:
{
    3f5c:	4b1a      	ldr	r3, [pc, #104]	; (3fc8 <bt_l2cap_connected+0x6c>)
    3f5e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3f62:	681c      	ldr	r4, [r3, #0]
    3f64:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    3f66:	b12c      	cbz	r4, 3f74 <bt_l2cap_connected+0x18>
	parent->next = child;
    3f68:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    3f6a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3fcc <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    3f6e:	3c08      	subs	r4, #8
    3f70:	46b9      	mov	r9, r7
    3f72:	b914      	cbnz	r4, 3f7a <bt_l2cap_connected+0x1e>
}
    3f74:	b003      	add	sp, #12
    3f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    3f7a:	6863      	ldr	r3, [r4, #4]
    3f7c:	a901      	add	r1, sp, #4
    3f7e:	4630      	mov	r0, r6
    3f80:	4798      	blx	r3
    3f82:	2800      	cmp	r0, #0
    3f84:	db18      	blt.n	3fb8 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    3f86:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    3f88:	8823      	ldrh	r3, [r4, #0]
    3f8a:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    3f8c:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    3f90:	4641      	mov	r1, r8
    3f92:	f105 0010 	add.w	r0, r5, #16
    3f96:	f00e f897 	bl	120c8 <k_delayed_work_init>
    3f9a:	60af      	str	r7, [r5, #8]
    3f9c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    3f9e:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    3fa2:	b972      	cbnz	r2, 3fc2 <bt_l2cap_connected+0x66>
	list->tail = node;
    3fa4:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    3fa6:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    3fa8:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    3faa:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    3fac:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    3fae:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	b103      	cbz	r3, 3fb8 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    3fb6:	4798      	blx	r3
	return node->next;
    3fb8:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    3fba:	2c00      	cmp	r4, #0
    3fbc:	d0da      	beq.n	3f74 <bt_l2cap_connected+0x18>
    3fbe:	3c08      	subs	r4, #8
    3fc0:	e7d7      	b.n	3f72 <bt_l2cap_connected+0x16>
	parent->next = child;
    3fc2:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3fc4:	63f3      	str	r3, [r6, #60]	; 0x3c
    3fc6:	e7ef      	b.n	3fa8 <bt_l2cap_connected+0x4c>
    3fc8:	20000234 	.word	0x20000234
    3fcc:	00003f41 	.word	0x00003f41

00003fd0 <bt_l2cap_disconnected>:
{
    3fd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3fd2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    3fd4:	b1a3      	cbz	r3, 4000 <bt_l2cap_disconnected+0x30>
    3fd6:	f1b3 0008 	subs.w	r0, r3, #8
    3fda:	d10a      	bne.n	3ff2 <bt_l2cap_disconnected+0x22>
    3fdc:	bd10      	pop	{r4, pc}
    3fde:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    3fe0:	f7ff ff9d 	bl	3f1e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    3fe4:	b164      	cbz	r4, 4000 <bt_l2cap_disconnected+0x30>
	return node->next;
    3fe6:	68a3      	ldr	r3, [r4, #8]
    3fe8:	b103      	cbz	r3, 3fec <bt_l2cap_disconnected+0x1c>
    3fea:	3b08      	subs	r3, #8
{
    3fec:	4620      	mov	r0, r4
    3fee:	461c      	mov	r4, r3
    3ff0:	e7f6      	b.n	3fe0 <bt_l2cap_disconnected+0x10>
    3ff2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    3ff4:	2c00      	cmp	r4, #0
    3ff6:	d1f2      	bne.n	3fde <bt_l2cap_disconnected+0xe>
}
    3ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    3ffc:	f7ff bf8f 	b.w	3f1e <bt_l2cap_chan_del>
    4000:	bd10      	pop	{r4, pc}

00004002 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4002:	3104      	adds	r1, #4
    4004:	f7ff be52 	b.w	3cac <bt_conn_create_pdu>

00004008 <bt_l2cap_send_cb>:
{
    4008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    400a:	4614      	mov	r4, r2
    400c:	4605      	mov	r5, r0
    400e:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    4010:	f102 0008 	add.w	r0, r2, #8
    4014:	2104      	movs	r1, #4
{
    4016:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    4018:	f00c fd30 	bl	10a7c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    401c:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    401e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4020:	3904      	subs	r1, #4
    4022:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    4024:	4632      	mov	r2, r6
    4026:	4621      	mov	r1, r4
    4028:	4628      	mov	r0, r5
}
    402a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    402e:	f7ff ba5a 	b.w	34e6 <bt_conn_send_cb>

00004032 <l2cap_recv>:
{
    4032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    4034:	898b      	ldrh	r3, [r1, #12]
    4036:	2b03      	cmp	r3, #3
{
    4038:	4606      	mov	r6, r0
    403a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    403c:	d912      	bls.n	4064 <l2cap_recv+0x32>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    403e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4040:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4042:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    4046:	8867      	ldrh	r7, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4048:	f00c fd20 	bl	10a8c <net_buf_simple_pull>
	if (buf->len != len) {
    404c:	89aa      	ldrh	r2, [r5, #12]
    404e:	42ba      	cmp	r2, r7
    4050:	d108      	bne.n	4064 <l2cap_recv+0x32>
	if (!hdr->ident) {
    4052:	7861      	ldrb	r1, [r4, #1]
    4054:	b131      	cbz	r1, 4064 <l2cap_recv+0x32>
	switch (hdr->code) {
    4056:	7823      	ldrb	r3, [r4, #0]
    4058:	2b12      	cmp	r3, #18
    405a:	d005      	beq.n	4068 <l2cap_recv+0x36>
    405c:	2b13      	cmp	r3, #19
    405e:	d001      	beq.n	4064 <l2cap_recv+0x32>
    4060:	2b01      	cmp	r3, #1
    4062:	d154      	bne.n	410e <l2cap_recv+0xdc>
}
    4064:	b003      	add	sp, #12
    4066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
    4068:	2a07      	cmp	r2, #7
    406a:	d9fb      	bls.n	4064 <l2cap_recv+0x32>
    406c:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    406e:	78e6      	ldrb	r6, [r4, #3]
    4070:	b18e      	cbz	r6, 4096 <l2cap_recv+0x64>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4072:	2202      	movs	r2, #2
    4074:	2001      	movs	r0, #1
    4076:	f7ff ff0b 	bl	3e90 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    407a:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    407c:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    407e:	3008      	adds	r0, #8
    4080:	f00c fcd6 	bl	10a30 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4084:	2300      	movs	r3, #0
    4086:	7003      	strb	r3, [r0, #0]
    4088:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    408a:	462a      	mov	r2, r5
    408c:	2105      	movs	r1, #5
    408e:	4620      	mov	r0, r4
    4090:	f7ff ffba 	bl	4008 <bt_l2cap_send_cb>
    4094:	e7e6      	b.n	4064 <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    4096:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4098:	7858      	ldrb	r0, [r3, #1]
    409a:	781a      	ldrb	r2, [r3, #0]
    409c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    40a0:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    40a4:	78d8      	ldrb	r0, [r3, #3]
    40a6:	789a      	ldrb	r2, [r3, #2]
    40a8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    40ac:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(req->latency);
    40b0:	7958      	ldrb	r0, [r3, #5]
    40b2:	791a      	ldrb	r2, [r3, #4]
    40b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    40b8:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(req->timeout);
    40bc:	799a      	ldrb	r2, [r3, #6]
    40be:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    40c0:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    40c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    40c6:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    40c8:	f8ad 3006 	strh.w	r3, [sp, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    40cc:	f7ff fee0 	bl	3e90 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    40d0:	4669      	mov	r1, sp
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    40d2:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    40d4:	4620      	mov	r0, r4
    40d6:	f7ff f997 	bl	3408 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    40da:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    40dc:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    40de:	f107 0008 	add.w	r0, r7, #8
    40e2:	f00c fca5 	bl	10a30 <net_buf_simple_add>
	if (accepted) {
    40e6:	b175      	cbz	r5, 4106 <l2cap_recv+0xd4>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    40e8:	7006      	strb	r6, [r0, #0]
    40ea:	7046      	strb	r6, [r0, #1]
    40ec:	2300      	movs	r3, #0
    40ee:	463a      	mov	r2, r7
    40f0:	2105      	movs	r1, #5
    40f2:	4620      	mov	r0, r4
    40f4:	f7ff ff88 	bl	4008 <bt_l2cap_send_cb>
	if (accepted) {
    40f8:	2d00      	cmp	r5, #0
    40fa:	d0b3      	beq.n	4064 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
    40fc:	4669      	mov	r1, sp
    40fe:	4620      	mov	r0, r4
    4100:	f7ff fd55 	bl	3bae <bt_conn_le_conn_update>
    4104:	e7ae      	b.n	4064 <l2cap_recv+0x32>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    4106:	2301      	movs	r3, #1
    4108:	7003      	strb	r3, [r0, #0]
    410a:	7045      	strb	r5, [r0, #1]
    410c:	e7ee      	b.n	40ec <l2cap_recv+0xba>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    410e:	2202      	movs	r2, #2
    4110:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    4112:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4114:	f7ff febc 	bl	3e90 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4118:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    411a:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    411c:	3008      	adds	r0, #8
    411e:	f00c fc87 	bl	10a30 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4122:	2300      	movs	r3, #0
    4124:	7003      	strb	r3, [r0, #0]
    4126:	7043      	strb	r3, [r0, #1]
    4128:	4622      	mov	r2, r4
    412a:	2105      	movs	r1, #5
    412c:	4628      	mov	r0, r5
    412e:	e7af      	b.n	4090 <l2cap_recv+0x5e>

00004130 <bt_l2cap_le_lookup_tx_cid>:
{
    4130:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4132:	b100      	cbz	r0, 4136 <bt_l2cap_le_lookup_tx_cid+0x6>
    4134:	3808      	subs	r0, #8
    4136:	b900      	cbnz	r0, 413a <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4138:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    413a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    413e:	428b      	cmp	r3, r1
    4140:	d0fa      	beq.n	4138 <bt_l2cap_le_lookup_tx_cid+0x8>
    4142:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4144:	2000      	movs	r0, #0
    4146:	2b00      	cmp	r3, #0
    4148:	d0f6      	beq.n	4138 <bt_l2cap_le_lookup_tx_cid+0x8>
    414a:	f1a3 0008 	sub.w	r0, r3, #8
    414e:	e7f2      	b.n	4136 <bt_l2cap_le_lookup_tx_cid+0x6>

00004150 <bt_l2cap_le_lookup_rx_cid>:
{
    4150:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4152:	b100      	cbz	r0, 4156 <bt_l2cap_le_lookup_rx_cid+0x6>
    4154:	3808      	subs	r0, #8
    4156:	b900      	cbnz	r0, 415a <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4158:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    415a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    415c:	428b      	cmp	r3, r1
    415e:	d0fb      	beq.n	4158 <bt_l2cap_le_lookup_rx_cid+0x8>
    4160:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4162:	2000      	movs	r0, #0
    4164:	2b00      	cmp	r3, #0
    4166:	d0f7      	beq.n	4158 <bt_l2cap_le_lookup_rx_cid+0x8>
    4168:	f1a3 0008 	sub.w	r0, r3, #8
    416c:	e7f3      	b.n	4156 <bt_l2cap_le_lookup_rx_cid+0x6>

0000416e <bt_l2cap_recv>:
{
    416e:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    4170:	898b      	ldrh	r3, [r1, #12]
    4172:	2b03      	cmp	r3, #3
{
    4174:	4605      	mov	r5, r0
    4176:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    4178:	d804      	bhi.n	4184 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
    417a:	4620      	mov	r0, r4
}
    417c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    4180:	f00c bc24 	b.w	109cc <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    4184:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4186:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    4188:	f850 3f08 	ldr.w	r3, [r0, #8]!
    418c:	885e      	ldrh	r6, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    418e:	f00c fc7d 	bl	10a8c <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    4192:	4631      	mov	r1, r6
    4194:	4628      	mov	r0, r5
    4196:	f7ff ffdb 	bl	4150 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    419a:	2800      	cmp	r0, #0
    419c:	d0ed      	beq.n	417a <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
    419e:	6843      	ldr	r3, [r0, #4]
    41a0:	4621      	mov	r1, r4
    41a2:	691b      	ldr	r3, [r3, #16]
    41a4:	4798      	blx	r3
    41a6:	e7e8      	b.n	417a <bt_l2cap_recv+0xc>

000041a8 <bt_l2cap_update_conn_param>:
{
    41a8:	b570      	push	{r4, r5, r6, lr}
	ident++;
    41aa:	4b12      	ldr	r3, [pc, #72]	; (41f4 <bt_l2cap_update_conn_param+0x4c>)
    41ac:	781a      	ldrb	r2, [r3, #0]
    41ae:	3201      	adds	r2, #1
	if (!ident) {
    41b0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    41b4:	bf08      	it	eq
    41b6:	2201      	moveq	r2, #1
    41b8:	701a      	strb	r2, [r3, #0]
{
    41ba:	460c      	mov	r4, r1
    41bc:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    41be:	7819      	ldrb	r1, [r3, #0]
    41c0:	2208      	movs	r2, #8
    41c2:	2012      	movs	r0, #18
    41c4:	f7ff fe64 	bl	3e90 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    41c8:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    41ca:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    41cc:	4408      	add	r0, r1
    41ce:	f00c fc2f 	bl	10a30 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    41d2:	8823      	ldrh	r3, [r4, #0]
    41d4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    41d6:	8863      	ldrh	r3, [r4, #2]
    41d8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    41da:	88a3      	ldrh	r3, [r4, #4]
    41dc:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    41de:	88e3      	ldrh	r3, [r4, #6]
    41e0:	80c3      	strh	r3, [r0, #6]
    41e2:	4632      	mov	r2, r6
    41e4:	4628      	mov	r0, r5
    41e6:	2300      	movs	r3, #0
    41e8:	2105      	movs	r1, #5
    41ea:	f7ff ff0d 	bl	4008 <bt_l2cap_send_cb>
}
    41ee:	2000      	movs	r0, #0
    41f0:	bd70      	pop	{r4, r5, r6, pc}
    41f2:	bf00      	nop
    41f4:	20000230 	.word	0x20000230

000041f8 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    41f8:	4801      	ldr	r0, [pc, #4]	; (4200 <bt_l2cap_init+0x8>)
    41fa:	f7ff be5d 	b.w	3eb8 <bt_l2cap_le_fixed_chan_register>
    41fe:	bf00      	nop
    4200:	200035b8 	.word	0x200035b8

00004204 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    4204:	2006      	movs	r0, #6
    4206:	4770      	bx	lr

00004208 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4208:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    420a:	4a0a      	ldr	r2, [pc, #40]	; (4234 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    420c:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    420e:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    4212:	4284      	cmp	r4, r0
    4214:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    4218:	d102      	bne.n	4220 <att_op_get_type+0x18>
			return handlers[i].type;
    421a:	440a      	add	r2, r1
    421c:	7890      	ldrb	r0, [r2, #2]
    421e:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4220:	3301      	adds	r3, #1
    4222:	2b1b      	cmp	r3, #27
    4224:	d1f3      	bne.n	420e <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4226:	f010 0f40 	tst.w	r0, #64	; 0x40
    422a:	bf14      	ite	ne
    422c:	2000      	movne	r0, #0
    422e:	2006      	moveq	r0, #6
}
    4230:	bd10      	pop	{r4, pc}
    4232:	bf00      	nop
    4234:	00012bc0 	.word	0x00012bc0

00004238 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4238:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    423a:	4d0b      	ldr	r5, [pc, #44]	; (4268 <bt_att_accept+0x30>)
    423c:	682c      	ldr	r4, [r5, #0]
{
    423e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    4240:	b97c      	cbnz	r4, 4262 <bt_att_accept+0x2a>
			continue;
		}

		memset(att, 0, sizeof(*att));
    4242:	4621      	mov	r1, r4
    4244:	22e4      	movs	r2, #228	; 0xe4
    4246:	4628      	mov	r0, r5
    4248:	f7fd fd04 	bl	1c54 <memset>
		att->chan.chan.ops = &ops;
    424c:	4b07      	ldr	r3, [pc, #28]	; (426c <bt_att_accept+0x34>)
    424e:	606b      	str	r3, [r5, #4]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4250:	2202      	movs	r2, #2
    4252:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    4256:	4611      	mov	r1, r2
    4258:	f00d fc46 	bl	11ae8 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    425c:	6035      	str	r5, [r6, #0]

		return 0;
    425e:	4620      	mov	r0, r4
    4260:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    4262:	f06f 000b 	mvn.w	r0, #11
}
    4266:	bd70      	pop	{r4, r5, r6, pc}
    4268:	2000023c 	.word	0x2000023c
    426c:	200035e4 	.word	0x200035e4

00004270 <att_req_destroy>:
{
    4270:	b510      	push	{r4, lr}
    4272:	4604      	mov	r4, r0
	if (req->buf) {
    4274:	6900      	ldr	r0, [r0, #16]
    4276:	b108      	cbz	r0, 427c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    4278:	f00c fba8 	bl	109cc <net_buf_unref>
	if (req->destroy) {
    427c:	68a3      	ldr	r3, [r4, #8]
    427e:	b10b      	cbz	r3, 4284 <att_req_destroy+0x14>
		req->destroy(req);
    4280:	4620      	mov	r0, r4
    4282:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    4284:	4620      	mov	r0, r4
    4286:	2214      	movs	r2, #20
    4288:	2100      	movs	r1, #0
}
    428a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    428e:	f7fd bce1 	b.w	1c54 <memset>

00004292 <att_notify>:
{
    4292:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4294:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    4296:	f101 0008 	add.w	r0, r1, #8
{
    429a:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    429c:	f00c fc06 	bl	10aac <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    42a0:	89a3      	ldrh	r3, [r4, #12]
    42a2:	68a2      	ldr	r2, [r4, #8]
    42a4:	4601      	mov	r1, r0
    42a6:	4628      	mov	r0, r5
    42a8:	f001 fce2 	bl	5c70 <bt_gatt_notification>
}
    42ac:	2000      	movs	r0, #0
    42ae:	bd38      	pop	{r3, r4, r5, pc}

000042b0 <read_group_cb>:
{
    42b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    42b4:	680d      	ldr	r5, [r1, #0]
{
    42b6:	4606      	mov	r6, r0
    42b8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    42ba:	f04f 0800 	mov.w	r8, #0
    42be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    42c2:	a902      	add	r1, sp, #8
    42c4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    42c6:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    42c8:	f88d 8008 	strb.w	r8, [sp, #8]
    42cc:	f8ad 300a 	strh.w	r3, [sp, #10]
    42d0:	f7fd fd68 	bl	1da4 <bt_uuid_cmp>
    42d4:	b198      	cbz	r0, 42fe <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    42d6:	f642 0301 	movw	r3, #10241	; 0x2801
    42da:	a903      	add	r1, sp, #12
    42dc:	6830      	ldr	r0, [r6, #0]
    42de:	f88d 800c 	strb.w	r8, [sp, #12]
    42e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    42e6:	f7fd fd5d 	bl	1da4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    42ea:	b140      	cbz	r0, 42fe <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    42ec:	6923      	ldr	r3, [r4, #16]
    42ee:	b123      	cbz	r3, 42fa <read_group_cb+0x4a>
    42f0:	8a32      	ldrh	r2, [r6, #16]
    42f2:	8859      	ldrh	r1, [r3, #2]
    42f4:	4291      	cmp	r1, r2
    42f6:	d200      	bcs.n	42fa <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    42f8:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    42fa:	2001      	movs	r0, #1
    42fc:	e012      	b.n	4324 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    42fe:	6861      	ldr	r1, [r4, #4]
    4300:	6830      	ldr	r0, [r6, #0]
    4302:	f7fd fd4f 	bl	1da4 <bt_uuid_cmp>
    4306:	b110      	cbz	r0, 430e <read_group_cb+0x5e>
		data->group = NULL;
    4308:	2300      	movs	r3, #0
    430a:	6123      	str	r3, [r4, #16]
    430c:	e7f5      	b.n	42fa <read_group_cb+0x4a>
	if (data->rsp->len &&
    430e:	68e3      	ldr	r3, [r4, #12]
    4310:	68a0      	ldr	r0, [r4, #8]
    4312:	781a      	ldrb	r2, [r3, #0]
    4314:	b14a      	cbz	r2, 432a <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    4316:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    431a:	8981      	ldrh	r1, [r0, #12]
    431c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    431e:	4293      	cmp	r3, r2
    4320:	da03      	bge.n	432a <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    4322:	2000      	movs	r0, #0
}
    4324:	b004      	add	sp, #16
    4326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    432a:	2104      	movs	r1, #4
    432c:	3008      	adds	r0, #8
    432e:	f00c fb7f 	bl	10a30 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4332:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4334:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4336:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4338:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    433a:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    433c:	898a      	ldrh	r2, [r1, #12]
    433e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    4342:	6889      	ldr	r1, [r1, #8]
    4344:	f8d6 8004 	ldr.w	r8, [r6, #4]
    4348:	1a9b      	subs	r3, r3, r2
    434a:	2500      	movs	r5, #0
    434c:	440a      	add	r2, r1
    434e:	9500      	str	r5, [sp, #0]
    4350:	4631      	mov	r1, r6
    4352:	b29b      	uxth	r3, r3
    4354:	4638      	mov	r0, r7
    4356:	47c0      	blx	r8
	if (read < 0) {
    4358:	1e01      	subs	r1, r0, #0
    435a:	dbe2      	blt.n	4322 <read_group_cb+0x72>
	if (!data->rsp->len) {
    435c:	68e0      	ldr	r0, [r4, #12]
    435e:	7802      	ldrb	r2, [r0, #0]
    4360:	1d0b      	adds	r3, r1, #4
    4362:	b92a      	cbnz	r2, 4370 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    4364:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    4366:	68a0      	ldr	r0, [r4, #8]
    4368:	3008      	adds	r0, #8
    436a:	f00c fb61 	bl	10a30 <net_buf_simple_add>
    436e:	e7c4      	b.n	42fa <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    4370:	429a      	cmp	r2, r3
    4372:	d0f8      	beq.n	4366 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    4374:	68a2      	ldr	r2, [r4, #8]
    4376:	8993      	ldrh	r3, [r2, #12]
    4378:	3b04      	subs	r3, #4
    437a:	8193      	strh	r3, [r2, #12]
    437c:	e7d1      	b.n	4322 <read_group_cb+0x72>

0000437e <find_info_cb>:
	if (!data->rsp) {
    437e:	688b      	ldr	r3, [r1, #8]
{
    4380:	b570      	push	{r4, r5, r6, lr}
    4382:	4605      	mov	r5, r0
    4384:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    4386:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    4388:	b963      	cbnz	r3, 43a4 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    438a:	6848      	ldr	r0, [r1, #4]
    438c:	2101      	movs	r1, #1
    438e:	3008      	adds	r0, #8
    4390:	f00c fb4e 	bl	10a30 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4394:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4396:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4398:	781b      	ldrb	r3, [r3, #0]
    439a:	2b00      	cmp	r3, #0
    439c:	bf0c      	ite	eq
    439e:	2301      	moveq	r3, #1
    43a0:	2302      	movne	r3, #2
    43a2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    43a4:	68a3      	ldr	r3, [r4, #8]
    43a6:	781b      	ldrb	r3, [r3, #0]
    43a8:	2b01      	cmp	r3, #1
    43aa:	d003      	beq.n	43b4 <find_info_cb+0x36>
    43ac:	2b02      	cmp	r3, #2
    43ae:	d01a      	beq.n	43e6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    43b0:	2000      	movs	r0, #0
}
    43b2:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    43b4:	682b      	ldr	r3, [r5, #0]
    43b6:	781b      	ldrb	r3, [r3, #0]
    43b8:	2b00      	cmp	r3, #0
    43ba:	d1f9      	bne.n	43b0 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    43bc:	6860      	ldr	r0, [r4, #4]
    43be:	2104      	movs	r1, #4
    43c0:	3008      	adds	r0, #8
    43c2:	f00c fb35 	bl	10a30 <net_buf_simple_add>
    43c6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    43c8:	8a2b      	ldrh	r3, [r5, #16]
    43ca:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    43cc:	682b      	ldr	r3, [r5, #0]
    43ce:	885b      	ldrh	r3, [r3, #2]
    43d0:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    43d2:	6863      	ldr	r3, [r4, #4]
    43d4:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    43d8:	899b      	ldrh	r3, [r3, #12]
    43da:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    43dc:	2804      	cmp	r0, #4
    43de:	bf94      	ite	ls
    43e0:	2000      	movls	r0, #0
    43e2:	2001      	movhi	r0, #1
    43e4:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    43e6:	682b      	ldr	r3, [r5, #0]
    43e8:	781b      	ldrb	r3, [r3, #0]
    43ea:	2b02      	cmp	r3, #2
    43ec:	d1e0      	bne.n	43b0 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    43ee:	6860      	ldr	r0, [r4, #4]
    43f0:	2112      	movs	r1, #18
    43f2:	3008      	adds	r0, #8
    43f4:	f00c fb1c 	bl	10a30 <net_buf_simple_add>
    43f8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    43fa:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    43fc:	8a2b      	ldrh	r3, [r5, #16]
    43fe:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4402:	2210      	movs	r2, #16
    4404:	3101      	adds	r1, #1
    4406:	f7fd fbf9 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    440a:	6863      	ldr	r3, [r4, #4]
    440c:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4410:	899b      	ldrh	r3, [r3, #12]
    4412:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4414:	2812      	cmp	r0, #18
    4416:	e7e2      	b.n	43de <find_info_cb+0x60>

00004418 <find_type_cb>:
{
    4418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    441c:	680e      	ldr	r6, [r1, #0]
{
    441e:	b088      	sub	sp, #32
    4420:	4605      	mov	r5, r0
    4422:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4424:	2700      	movs	r7, #0
    4426:	f642 0301 	movw	r3, #10241	; 0x2801
    442a:	a902      	add	r1, sp, #8
    442c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    442e:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4432:	f88d 7008 	strb.w	r7, [sp, #8]
    4436:	f8ad 300a 	strh.w	r3, [sp, #10]
    443a:	f7fd fcb3 	bl	1da4 <bt_uuid_cmp>
    443e:	b928      	cbnz	r0, 444c <find_type_cb+0x34>
		data->group = NULL;
    4440:	2300      	movs	r3, #0
    4442:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    4444:	2001      	movs	r0, #1
}
    4446:	b008      	add	sp, #32
    4448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    444c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4450:	a903      	add	r1, sp, #12
    4452:	6828      	ldr	r0, [r5, #0]
    4454:	f88d 700c 	strb.w	r7, [sp, #12]
    4458:	f8ad 300e 	strh.w	r3, [sp, #14]
    445c:	f7fd fca2 	bl	1da4 <bt_uuid_cmp>
    4460:	b140      	cbz	r0, 4474 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    4462:	68a3      	ldr	r3, [r4, #8]
    4464:	2b00      	cmp	r3, #0
    4466:	d0ed      	beq.n	4444 <find_type_cb+0x2c>
    4468:	8a2a      	ldrh	r2, [r5, #16]
    446a:	8859      	ldrh	r1, [r3, #2]
    446c:	4291      	cmp	r1, r2
    446e:	d2e9      	bcs.n	4444 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4470:	805a      	strh	r2, [r3, #2]
    4472:	e7e7      	b.n	4444 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    4474:	6862      	ldr	r2, [r4, #4]
    4476:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    447a:	8992      	ldrh	r2, [r2, #12]
    447c:	1a9b      	subs	r3, r3, r2
    447e:	2b03      	cmp	r3, #3
    4480:	d9e1      	bls.n	4446 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    4482:	2310      	movs	r3, #16
    4484:	9000      	str	r0, [sp, #0]
    4486:	eb0d 0203 	add.w	r2, sp, r3
    448a:	686e      	ldr	r6, [r5, #4]
    448c:	4629      	mov	r1, r5
    448e:	4640      	mov	r0, r8
    4490:	47b0      	blx	r6
	if (read < 0) {
    4492:	1e02      	subs	r2, r0, #0
    4494:	dbd4      	blt.n	4440 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    4496:	7c23      	ldrb	r3, [r4, #16]
    4498:	429a      	cmp	r2, r3
    449a:	d1d1      	bne.n	4440 <find_type_cb+0x28>
    449c:	a904      	add	r1, sp, #16
    449e:	68e0      	ldr	r0, [r4, #12]
    44a0:	f7fd fb97 	bl	1bd2 <memcmp>
    44a4:	2800      	cmp	r0, #0
    44a6:	d1cb      	bne.n	4440 <find_type_cb+0x28>
	data->err = 0x00;
    44a8:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    44aa:	6860      	ldr	r0, [r4, #4]
    44ac:	2104      	movs	r1, #4
    44ae:	3008      	adds	r0, #8
    44b0:	f00c fabe 	bl	10a30 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    44b4:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    44b6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    44b8:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    44ba:	8043      	strh	r3, [r0, #2]
    44bc:	e7c2      	b.n	4444 <find_type_cb+0x2c>
	...

000044c0 <bt_att_connected>:
{
    44c0:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    44c2:	2317      	movs	r3, #23
{
    44c4:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    44c6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    44ca:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    44cc:	4906      	ldr	r1, [pc, #24]	; (44e8 <bt_att_connected+0x28>)
    44ce:	30a4      	adds	r0, #164	; 0xa4
    44d0:	f00d fdfa 	bl	120c8 <k_delayed_work_init>
	list->head = NULL;
    44d4:	2300      	movs	r3, #0
    44d6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    44da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    44de:	6820      	ldr	r0, [r4, #0]
}
    44e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    44e4:	f001 bbf8 	b.w	5cd8 <bt_gatt_connected>
    44e8:	00004963 	.word	0x00004963

000044ec <check_perm.isra.4>:
	if ((mask & BT_GATT_PERM_READ) &&
    44ec:	f011 0f01 	tst.w	r1, #1
    44f0:	7c83      	ldrb	r3, [r0, #18]
    44f2:	d004      	beq.n	44fe <check_perm.isra.4+0x12>
    44f4:	f013 0f15 	tst.w	r3, #21
    44f8:	d012      	beq.n	4520 <check_perm.isra.4+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    44fa:	6842      	ldr	r2, [r0, #4]
    44fc:	b182      	cbz	r2, 4520 <check_perm.isra.4+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    44fe:	078a      	lsls	r2, r1, #30
    4500:	d504      	bpl.n	450c <check_perm.isra.4+0x20>
    4502:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    4506:	d00d      	beq.n	4524 <check_perm.isra.4+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    4508:	6882      	ldr	r2, [r0, #8]
    450a:	b15a      	cbz	r2, 4524 <check_perm.isra.4+0x38>
	mask &= attr->perm;
    450c:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    450e:	f011 0f30 	tst.w	r1, #48	; 0x30
    4512:	d109      	bne.n	4528 <check_perm.isra.4+0x3c>
	return 0;
    4514:	f011 0f0c 	tst.w	r1, #12
    4518:	bf14      	ite	ne
    451a:	200f      	movne	r0, #15
    451c:	2000      	moveq	r0, #0
    451e:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    4520:	2002      	movs	r0, #2
    4522:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    4524:	2003      	movs	r0, #3
    4526:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    4528:	2005      	movs	r0, #5
}
    452a:	4770      	bx	lr

0000452c <read_type_cb>:
{
    452c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    4530:	680f      	ldr	r7, [r1, #0]
{
    4532:	4606      	mov	r6, r0
    4534:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4536:	6800      	ldr	r0, [r0, #0]
    4538:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    453a:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    453e:	f7fd fc31 	bl	1da4 <bt_uuid_cmp>
    4542:	4680      	mov	r8, r0
    4544:	2800      	cmp	r0, #0
    4546:	d14d      	bne.n	45e4 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4548:	2115      	movs	r1, #21
    454a:	4630      	mov	r0, r6
    454c:	f7ff ffce 	bl	44ec <check_perm.isra.4>
    4550:	4605      	mov	r5, r0
    4552:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4554:	b148      	cbz	r0, 456a <read_type_cb+0x3e>
		if (data->rsp->len) {
    4556:	68e3      	ldr	r3, [r4, #12]
    4558:	781d      	ldrb	r5, [r3, #0]
    455a:	b115      	cbz	r5, 4562 <read_type_cb+0x36>
			data->err = 0x00;
    455c:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    4560:	4645      	mov	r5, r8
}
    4562:	4628      	mov	r0, r5
    4564:	b003      	add	sp, #12
    4566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    456a:	68a0      	ldr	r0, [r4, #8]
    456c:	2102      	movs	r1, #2
    456e:	3008      	adds	r0, #8
    4570:	f00c fa5e 	bl	10a30 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    4574:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4576:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    4578:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    457a:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    457c:	898a      	ldrh	r2, [r1, #12]
    457e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    4582:	6889      	ldr	r1, [r1, #8]
    4584:	f8d6 8004 	ldr.w	r8, [r6, #4]
    4588:	9500      	str	r5, [sp, #0]
    458a:	1a9b      	subs	r3, r3, r2
    458c:	b29b      	uxth	r3, r3
    458e:	440a      	add	r2, r1
    4590:	4648      	mov	r0, r9
    4592:	4631      	mov	r1, r6
    4594:	47c0      	blx	r8
	if (read < 0) {
    4596:	1e01      	subs	r1, r0, #0
    4598:	da08      	bge.n	45ac <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    459a:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    459e:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    45a0:	bf9a      	itte	ls
    45a2:	4249      	negls	r1, r1
    45a4:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    45a6:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    45a8:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    45aa:	e7da      	b.n	4562 <read_type_cb+0x36>
	if (!data->rsp->len) {
    45ac:	68e0      	ldr	r0, [r4, #12]
    45ae:	7802      	ldrb	r2, [r0, #0]
    45b0:	1c8b      	adds	r3, r1, #2
    45b2:	b982      	cbnz	r2, 45d6 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    45b4:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    45b6:	68a0      	ldr	r0, [r4, #8]
    45b8:	3008      	adds	r0, #8
    45ba:	f00c fa39 	bl	10a30 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    45be:	68a3      	ldr	r3, [r4, #8]
    45c0:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    45c4:	899b      	ldrh	r3, [r3, #12]
    45c6:	1aed      	subs	r5, r5, r3
    45c8:	68e3      	ldr	r3, [r4, #12]
    45ca:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    45cc:	429d      	cmp	r5, r3
    45ce:	bfd4      	ite	le
    45d0:	2500      	movle	r5, #0
    45d2:	2501      	movgt	r5, #1
    45d4:	e7c5      	b.n	4562 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    45d6:	429a      	cmp	r2, r3
    45d8:	d0ed      	beq.n	45b6 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    45da:	68a2      	ldr	r2, [r4, #8]
    45dc:	8993      	ldrh	r3, [r2, #12]
    45de:	3b02      	subs	r3, #2
    45e0:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    45e2:	e7be      	b.n	4562 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    45e4:	2501      	movs	r5, #1
    45e6:	e7bc      	b.n	4562 <read_type_cb+0x36>

000045e8 <uuid_create>:
{
    45e8:	b510      	push	{r4, lr}
	switch (buf->len) {
    45ea:	898a      	ldrh	r2, [r1, #12]
    45ec:	2a02      	cmp	r2, #2
{
    45ee:	4604      	mov	r4, r0
	switch (buf->len) {
    45f0:	d003      	beq.n	45fa <uuid_create+0x12>
    45f2:	2a10      	cmp	r2, #16
    45f4:	d00a      	beq.n	460c <uuid_create+0x24>
	return false;
    45f6:	2000      	movs	r0, #0
}
    45f8:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    45fa:	2300      	movs	r3, #0
    45fc:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    45fe:	f101 0008 	add.w	r0, r1, #8
    4602:	f00c fa53 	bl	10aac <net_buf_simple_pull_le16>
    4606:	8060      	strh	r0, [r4, #2]
		return true;
    4608:	2001      	movs	r0, #1
    460a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    460c:	2302      	movs	r3, #2
    460e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    4612:	6889      	ldr	r1, [r1, #8]
    4614:	f7fd faf2 	bl	1bfc <memcpy>
    4618:	e7f6      	b.n	4608 <uuid_create+0x20>
	...

0000461c <att_req_sent>:
{
    461c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    461e:	2104      	movs	r1, #4
    4620:	f7ff fd86 	bl	4130 <bt_l2cap_le_lookup_tx_cid>
    4624:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4626:	30cc      	adds	r0, #204	; 0xcc
    4628:	f00d fa67 	bl	11afa <_impl_k_sem_give>
	if (att->req) {
    462c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4630:	b143      	cbz	r3, 4644 <att_req_sent+0x28>
    4632:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    4636:	f247 5230 	movw	r2, #30000	; 0x7530
    463a:	4803      	ldr	r0, [pc, #12]	; (4648 <att_req_sent+0x2c>)
}
    463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4640:	f00d bdb6 	b.w	121b0 <k_delayed_work_submit_to_queue>
    4644:	bd10      	pop	{r4, pc}
    4646:	bf00      	nop
    4648:	20001730 	.word	0x20001730

0000464c <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    464c:	6803      	ldr	r3, [r0, #0]
    464e:	7a5b      	ldrb	r3, [r3, #9]
    4650:	2b03      	cmp	r3, #3
    4652:	d10a      	bne.n	466a <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4654:	f3bf 8f5b 	dmb	ish
    4658:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    465c:	f3bf 8f5b 	dmb	ish
    4660:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    4664:	f000 0001 	and.w	r0, r0, #1
    4668:	4770      	bx	lr
    466a:	2001      	movs	r0, #1
}
    466c:	4770      	bx	lr

0000466e <att_prepare_write_req>:
    466e:	2006      	movs	r0, #6
    4670:	4770      	bx	lr

00004672 <att_chan_get>:
{
    4672:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    4674:	7a43      	ldrb	r3, [r0, #9]
    4676:	2b03      	cmp	r3, #3
    4678:	d001      	beq.n	467e <att_chan_get+0xc>
		return NULL;
    467a:	2000      	movs	r0, #0
    467c:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    467e:	2104      	movs	r1, #4
    4680:	f7ff fd66 	bl	4150 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4684:	2800      	cmp	r0, #0
    4686:	d0f8      	beq.n	467a <att_chan_get+0x8>
    4688:	f3bf 8f5b 	dmb	ish
    468c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    4690:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    4694:	075b      	lsls	r3, r3, #29
    4696:	d4f0      	bmi.n	467a <att_chan_get+0x8>
}
    4698:	bd08      	pop	{r3, pc}

0000469a <att_pdu_sent>:
{
    469a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    469c:	2104      	movs	r1, #4
    469e:	f7ff fd47 	bl	4130 <bt_l2cap_le_lookup_tx_cid>
}
    46a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46a6:	30cc      	adds	r0, #204	; 0xcc
    46a8:	f00d ba27 	b.w	11afa <_impl_k_sem_give>

000046ac <att_cfm_sent>:
{
    46ac:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    46ae:	2104      	movs	r1, #4
    46b0:	f7ff fd3e 	bl	4130 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    46b4:	f3bf 8f5b 	dmb	ish
    46b8:	f100 0394 	add.w	r3, r0, #148	; 0x94
    46bc:	e853 2f00 	ldrex	r2, [r3]
    46c0:	f022 0202 	bic.w	r2, r2, #2
    46c4:	e843 2100 	strex	r1, r2, [r3]
    46c8:	2900      	cmp	r1, #0
    46ca:	d1f7      	bne.n	46bc <att_cfm_sent+0x10>
    46cc:	f3bf 8f5b 	dmb	ish
    46d0:	30cc      	adds	r0, #204	; 0xcc
}
    46d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46d6:	f00d ba10 	b.w	11afa <_impl_k_sem_give>

000046da <att_rsp_sent>:
{
    46da:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    46dc:	2104      	movs	r1, #4
    46de:	f7ff fd27 	bl	4130 <bt_l2cap_le_lookup_tx_cid>
    46e2:	f3bf 8f5b 	dmb	ish
    46e6:	f100 0394 	add.w	r3, r0, #148	; 0x94
    46ea:	e853 2f00 	ldrex	r2, [r3]
    46ee:	f022 0201 	bic.w	r2, r2, #1
    46f2:	e843 2100 	strex	r1, r2, [r3]
    46f6:	2900      	cmp	r1, #0
    46f8:	d1f7      	bne.n	46ea <att_rsp_sent+0x10>
    46fa:	f3bf 8f5b 	dmb	ish
    46fe:	30cc      	adds	r0, #204	; 0xcc
}
    4700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4704:	f00d b9f9 	b.w	11afa <_impl_k_sem_give>

00004708 <write_cb>:
{
    4708:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    470c:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    470e:	f8d1 8000 	ldr.w	r8, [r1]
    4712:	212a      	movs	r1, #42	; 0x2a
{
    4714:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4716:	f7ff fee9 	bl	44ec <check_perm.isra.4>
    471a:	4605      	mov	r5, r0
    471c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    471e:	b9e0      	cbnz	r0, 475a <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    4720:	8a62      	ldrh	r2, [r4, #18]
    4722:	9001      	str	r0, [sp, #4]
    4724:	9200      	str	r2, [sp, #0]
    4726:	7c23      	ldrb	r3, [r4, #16]
    4728:	68b7      	ldr	r7, [r6, #8]
    472a:	68e2      	ldr	r2, [r4, #12]
    472c:	4631      	mov	r1, r6
    472e:	4640      	mov	r0, r8
    4730:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    4732:	2800      	cmp	r0, #0
    4734:	db02      	blt.n	473c <write_cb+0x34>
    4736:	7c23      	ldrb	r3, [r4, #16]
    4738:	4298      	cmp	r0, r3
    473a:	d00b      	beq.n	4754 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    473c:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    4740:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    4742:	bf9a      	itte	ls
    4744:	4240      	negls	r0, r0
    4746:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    4748:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    474a:	7520      	strb	r0, [r4, #20]
}
    474c:	4628      	mov	r0, r5
    474e:	b002      	add	sp, #8
    4750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    4754:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    4756:	2501      	movs	r5, #1
    4758:	e7f8      	b.n	474c <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    475a:	2500      	movs	r5, #0
    475c:	e7f6      	b.n	474c <write_cb+0x44>
	...

00004760 <att_send_req>:
{
    4760:	b570      	push	{r4, r5, r6, lr}
    4762:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    4764:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    4768:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    476c:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    476e:	4630      	mov	r0, r6
    4770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4774:	f00d f9e9 	bl	11b4a <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    4778:	4628      	mov	r0, r5
    477a:	f7ff ff67 	bl	464c <att_is_connected>
    477e:	b928      	cbnz	r0, 478c <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4780:	4630      	mov	r0, r6
    4782:	f00d f9ba 	bl	11afa <_impl_k_sem_give>
		return -ENOTCONN;
    4786:	f06f 0038 	mvn.w	r0, #56	; 0x38
    478a:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    478c:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    478e:	f106 0008 	add.w	r0, r6, #8
    4792:	f00c f993 	bl	10abc <net_buf_simple_headroom>
	state->len = buf->len;
    4796:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    4798:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    479a:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    479c:	6920      	ldr	r0, [r4, #16]
    479e:	682d      	ldr	r5, [r5, #0]
    47a0:	f00c f942 	bl	10a28 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    47a4:	6923      	ldr	r3, [r4, #16]
    47a6:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    47a8:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    47aa:	7818      	ldrb	r0, [r3, #0]
    47ac:	f7ff fd2c 	bl	4208 <att_op_get_type>
    47b0:	3801      	subs	r0, #1
    47b2:	b2c0      	uxtb	r0, r0
    47b4:	2804      	cmp	r0, #4
    47b6:	bf96      	itet	ls
    47b8:	4b05      	ldrls	r3, [pc, #20]	; (47d0 <att_send_req+0x70>)
    47ba:	4b06      	ldrhi	r3, [pc, #24]	; (47d4 <att_send_req+0x74>)
    47bc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    47c0:	4632      	mov	r2, r6
    47c2:	4628      	mov	r0, r5
    47c4:	2104      	movs	r1, #4
    47c6:	f7ff fc1f 	bl	4008 <bt_l2cap_send_cb>
	return 0;
    47ca:	2000      	movs	r0, #0
}
    47cc:	bd70      	pop	{r4, r5, r6, pc}
    47ce:	bf00      	nop
    47d0:	00012bac 	.word	0x00012bac
    47d4:	0000469b 	.word	0x0000469b

000047d8 <att_handle_rsp>:
{
    47d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    47dc:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    47de:	30a4      	adds	r0, #164	; 0xa4
{
    47e0:	461e      	mov	r6, r3
    47e2:	460f      	mov	r7, r1
    47e4:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    47e6:	f00d fc7f 	bl	120e8 <k_delayed_work_cancel>
	if (!att->req) {
    47ea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    47ee:	b1db      	cbz	r3, 4828 <att_handle_rsp+0x50>
	if (att->req->buf) {
    47f0:	6918      	ldr	r0, [r3, #16]
    47f2:	b128      	cbz	r0, 4800 <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
    47f4:	f00c f8ea 	bl	109cc <net_buf_unref>
		att->req->buf = NULL;
    47f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    47fc:	2200      	movs	r2, #0
    47fe:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    4800:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    4804:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    4806:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    480a:	2500      	movs	r5, #0
    480c:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    480e:	463a      	mov	r2, r7
    4810:	9300      	str	r3, [sp, #0]
    4812:	4631      	mov	r1, r6
    4814:	4643      	mov	r3, r8
    4816:	47c8      	blx	r9
	if (!att->req->func) {
    4818:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    481c:	6843      	ldr	r3, [r0, #4]
    481e:	b90b      	cbnz	r3, 4824 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
    4820:	f7ff fd26 	bl	4270 <att_req_destroy>
	att->req = NULL;
    4824:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    4828:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    482c:	b159      	cbz	r1, 4846 <att_handle_rsp+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    482e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    4832:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    4834:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4838:	4291      	cmp	r1, r2
	list->tail = node;
    483a:	bf08      	it	eq
    483c:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    4840:	4620      	mov	r0, r4
    4842:	f7ff ff8d 	bl	4760 <att_send_req>
}
    4846:	2000      	movs	r0, #0
    4848:	b003      	add	sp, #12
    484a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000484e <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    484e:	898a      	ldrh	r2, [r1, #12]
    4850:	6889      	ldr	r1, [r1, #8]
    4852:	2300      	movs	r3, #0
    4854:	f7ff bfc0 	b.w	47d8 <att_handle_rsp>

00004858 <att_handle_exec_write_rsp>:
    4858:	f7ff bff9 	b.w	484e <att_confirm>

0000485c <att_handle_prepare_write_rsp>:
    485c:	f7ff bff7 	b.w	484e <att_confirm>

00004860 <att_handle_write_rsp>:
    4860:	f7ff bff5 	b.w	484e <att_confirm>

00004864 <att_handle_read_mult_rsp>:
    4864:	f7ff bff3 	b.w	484e <att_confirm>

00004868 <att_handle_read_blob_rsp>:
    4868:	f7ff bff1 	b.w	484e <att_confirm>

0000486c <att_handle_read_rsp>:
    486c:	f7ff bfef 	b.w	484e <att_confirm>

00004870 <att_handle_read_type_rsp>:
    4870:	f7ff bfed 	b.w	484e <att_confirm>

00004874 <att_handle_find_type_rsp>:
    4874:	f7ff bfeb 	b.w	484e <att_confirm>

00004878 <att_handle_find_info_rsp>:
    4878:	f7ff bfe9 	b.w	484e <att_confirm>

0000487c <att_mtu_rsp>:
{
    487c:	b410      	push	{r4}
    487e:	460a      	mov	r2, r1
	if (!att) {
    4880:	4603      	mov	r3, r0
    4882:	b180      	cbz	r0, 48a6 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    4884:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    4886:	880c      	ldrh	r4, [r1, #0]
    4888:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    488a:	bf83      	ittte	hi
    488c:	2417      	movhi	r4, #23
    488e:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    4890:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    4894:	2200      	movls	r2, #0
    4896:	bf99      	ittee	ls
    4898:	2304      	movls	r3, #4
    489a:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    489c:	2300      	movhi	r3, #0
    489e:	8992      	ldrhhi	r2, [r2, #12]
}
    48a0:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    48a2:	f7ff bf99 	b.w	47d8 <att_handle_rsp>
}
    48a6:	bc10      	pop	{r4}
    48a8:	4770      	bx	lr

000048aa <att_error_rsp>:
{
    48aa:	b430      	push	{r4, r5}
	if (!att->req) {
    48ac:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    48b0:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    48b2:	b16a      	cbz	r2, 48d0 <att_error_rsp+0x26>
	if (att->req->buf) {
    48b4:	6913      	ldr	r3, [r2, #16]
    48b6:	b12b      	cbz	r3, 48c4 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    48b8:	8995      	ldrh	r5, [r2, #12]
    48ba:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    48bc:	89d2      	ldrh	r2, [r2, #14]
    48be:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    48c0:	4429      	add	r1, r5
    48c2:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    48c4:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    48c6:	2200      	movs	r2, #0
    48c8:	4611      	mov	r1, r2
}
    48ca:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    48cc:	f7ff bf84 	b.w	47d8 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    48d0:	230e      	movs	r3, #14
    48d2:	e7f8      	b.n	48c6 <att_error_rsp+0x1c>

000048d4 <att_reset>:
{
    48d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    48d6:	f100 0394 	add.w	r3, r0, #148	; 0x94
    48da:	4605      	mov	r5, r0
    48dc:	f3bf 8f5b 	dmb	ish
    48e0:	e853 2f00 	ldrex	r2, [r3]
    48e4:	f042 0204 	orr.w	r2, r2, #4
    48e8:	e843 2100 	strex	r1, r2, [r3]
    48ec:	2900      	cmp	r1, #0
    48ee:	d1f7      	bne.n	48e0 <att_reset+0xc>
    48f0:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    48f4:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    48f8:	4620      	mov	r0, r4
    48fa:	f00d f8fe 	bl	11afa <_impl_k_sem_give>
    48fe:	4620      	mov	r0, r4
    4900:	f00d f8fb 	bl	11afa <_impl_k_sem_give>
    4904:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4908:	b98c      	cbnz	r4, 492e <att_reset+0x5a>
	if (!att->req) {
    490a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    490e:	2200      	movs	r2, #0
    4910:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    4914:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    4918:	b90b      	cbnz	r3, 491e <att_reset+0x4a>
}
    491a:	b003      	add	sp, #12
    491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    491e:	230e      	movs	r3, #14
    4920:	4611      	mov	r1, r2
    4922:	4628      	mov	r0, r5
}
    4924:	b003      	add	sp, #12
    4926:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    492a:	f7ff bf55 	b.w	47d8 <att_handle_rsp>
	return node->next;
    492e:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    4930:	6867      	ldr	r7, [r4, #4]
    4932:	b12f      	cbz	r7, 4940 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    4934:	2300      	movs	r3, #0
    4936:	9400      	str	r4, [sp, #0]
    4938:	461a      	mov	r2, r3
    493a:	210e      	movs	r1, #14
    493c:	4618      	mov	r0, r3
    493e:	47b8      	blx	r7
		att_req_destroy(req);
    4940:	4620      	mov	r0, r4
    4942:	f7ff fc95 	bl	4270 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4946:	2e00      	cmp	r6, #0
    4948:	d0df      	beq.n	490a <att_reset+0x36>
    494a:	4634      	mov	r4, r6
    494c:	6836      	ldr	r6, [r6, #0]
    494e:	e7ef      	b.n	4930 <att_reset+0x5c>

00004950 <bt_att_disconnected>:
{
    4950:	b510      	push	{r4, lr}
    4952:	4604      	mov	r4, r0
	att_reset(att);
    4954:	f7ff ffbe 	bl	48d4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    4958:	6820      	ldr	r0, [r4, #0]
}
    495a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    495e:	f001 b9dd 	b.w	5d1c <bt_gatt_disconnected>

00004962 <att_timeout>:
{
    4962:	b510      	push	{r4, lr}
    4964:	4604      	mov	r4, r0
	att_reset(att);
    4966:	38a4      	subs	r0, #164	; 0xa4
    4968:	f7ff ffb4 	bl	48d4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    496c:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    4970:	f001 f9d4 	bl	5d1c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    4974:	2300      	movs	r3, #0
    4976:	f844 3ca4 	str.w	r3, [r4, #-164]
    497a:	bd10      	pop	{r4, pc}

0000497c <read_cb>:
{
    497c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4980:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4982:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    4984:	f8d1 9000 	ldr.w	r9, [r1]
{
    4988:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    498a:	3008      	adds	r0, #8
    498c:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    498e:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4992:	f00c f84d 	bl	10a30 <net_buf_simple_add>
	data->err = 0x00;
    4996:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4998:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    499a:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    499c:	2115      	movs	r1, #21
    499e:	4630      	mov	r0, r6
    49a0:	f7ff fda4 	bl	44ec <check_perm.isra.4>
    49a4:	4605      	mov	r5, r0
    49a6:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    49a8:	bb08      	cbnz	r0, 49ee <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    49aa:	68a1      	ldr	r1, [r4, #8]
    49ac:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    49b0:	898a      	ldrh	r2, [r1, #12]
    49b2:	6889      	ldr	r1, [r1, #8]
    49b4:	88a0      	ldrh	r0, [r4, #4]
    49b6:	9000      	str	r0, [sp, #0]
    49b8:	1a9b      	subs	r3, r3, r2
    49ba:	6877      	ldr	r7, [r6, #4]
    49bc:	440a      	add	r2, r1
    49be:	b29b      	uxth	r3, r3
    49c0:	4631      	mov	r1, r6
    49c2:	4640      	mov	r0, r8
    49c4:	47b8      	blx	r7
	if (read < 0) {
    49c6:	1e01      	subs	r1, r0, #0
    49c8:	da0b      	bge.n	49e2 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    49ca:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    49ce:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    49d0:	bf9a      	itte	ls
    49d2:	4249      	negls	r1, r1
    49d4:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    49d6:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    49d8:	7421      	strb	r1, [r4, #16]
}
    49da:	4628      	mov	r0, r5
    49dc:	b003      	add	sp, #12
    49de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    49e2:	68a0      	ldr	r0, [r4, #8]
    49e4:	3008      	adds	r0, #8
    49e6:	f00c f823 	bl	10a30 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    49ea:	2501      	movs	r5, #1
    49ec:	e7f5      	b.n	49da <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    49ee:	463d      	mov	r5, r7
    49f0:	e7f3      	b.n	49da <read_cb+0x5e>

000049f2 <bt_att_create_pdu>:
{
    49f2:	b538      	push	{r3, r4, r5, lr}
    49f4:	460d      	mov	r5, r1
    49f6:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    49f8:	f7ff fe3b 	bl	4672 <att_chan_get>
	if (!att) {
    49fc:	b180      	cbz	r0, 4a20 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    49fe:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    4a02:	3401      	adds	r4, #1
    4a04:	429c      	cmp	r4, r3
    4a06:	d80b      	bhi.n	4a20 <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
    4a08:	2100      	movs	r1, #0
    4a0a:	4608      	mov	r0, r1
    4a0c:	f7ff faf9 	bl	4002 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4a10:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    4a12:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4a14:	3008      	adds	r0, #8
    4a16:	f00c f80b 	bl	10a30 <net_buf_simple_add>
	hdr->code = op;
    4a1a:	7005      	strb	r5, [r0, #0]
}
    4a1c:	4620      	mov	r0, r4
    4a1e:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    4a20:	2400      	movs	r4, #0
    4a22:	e7fb      	b.n	4a1c <bt_att_create_pdu+0x2a>

00004a24 <att_indicate>:
{
    4a24:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4a26:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    4a28:	f101 0008 	add.w	r0, r1, #8
{
    4a2c:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    4a2e:	f00c f83d 	bl	10aac <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    4a32:	89ab      	ldrh	r3, [r5, #12]
    4a34:	68aa      	ldr	r2, [r5, #8]
    4a36:	4601      	mov	r1, r0
    4a38:	4620      	mov	r0, r4
    4a3a:	f001 f919 	bl	5c70 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    4a3e:	2200      	movs	r2, #0
    4a40:	211e      	movs	r1, #30
    4a42:	4620      	mov	r0, r4
    4a44:	f7ff ffd5 	bl	49f2 <bt_att_create_pdu>
	if (!buf) {
    4a48:	4602      	mov	r2, r0
    4a4a:	b120      	cbz	r0, 4a56 <att_indicate+0x32>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    4a4c:	4b03      	ldr	r3, [pc, #12]	; (4a5c <att_indicate+0x38>)
    4a4e:	2104      	movs	r1, #4
    4a50:	4620      	mov	r0, r4
    4a52:	f7ff fad9 	bl	4008 <bt_l2cap_send_cb>
}
    4a56:	2000      	movs	r0, #0
    4a58:	bd38      	pop	{r3, r4, r5, pc}
    4a5a:	bf00      	nop
    4a5c:	000046ad 	.word	0x000046ad

00004a60 <att_mtu_req>:
{
    4a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    4a64:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    4a66:	881b      	ldrh	r3, [r3, #0]
    4a68:	2b16      	cmp	r3, #22
{
    4a6a:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    4a6c:	d91c      	bls.n	4aa8 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    4a6e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    4a72:	2202      	movs	r2, #2
    4a74:	2103      	movs	r1, #3
    4a76:	4640      	mov	r0, r8
    4a78:	f7ff ffbb 	bl	49f2 <bt_att_create_pdu>
	if (!pdu) {
    4a7c:	4607      	mov	r7, r0
    4a7e:	b1b0      	cbz	r0, 4aae <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    4a80:	2102      	movs	r1, #2
    4a82:	3008      	adds	r0, #8
    4a84:	f00b ffd4 	bl	10a30 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    4a88:	2617      	movs	r6, #23
    4a8a:	2400      	movs	r4, #0
    4a8c:	7006      	strb	r6, [r0, #0]
    4a8e:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    4a90:	4b08      	ldr	r3, [pc, #32]	; (4ab4 <att_mtu_req+0x54>)
    4a92:	4640      	mov	r0, r8
    4a94:	463a      	mov	r2, r7
    4a96:	2104      	movs	r1, #4
    4a98:	f7ff fab6 	bl	4008 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    4a9c:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    4a9e:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    4aa2:	4620      	mov	r0, r4
    4aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    4aa8:	2004      	movs	r0, #4
    4aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    4aae:	200e      	movs	r0, #14
}
    4ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ab4:	000046db 	.word	0x000046db

00004ab8 <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4abc:	4688      	mov	r8, r1
    4abe:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4ac0:	2101      	movs	r1, #1
    4ac2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4ac4:	4605      	mov	r5, r0
    4ac6:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4ac8:	f7ff ff93 	bl	49f2 <bt_att_create_pdu>
	if (!buf) {
    4acc:	4604      	mov	r4, r0
    4ace:	b180      	cbz	r0, 4af2 <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4ad0:	2104      	movs	r1, #4
    4ad2:	3008      	adds	r0, #8
    4ad4:	f00b ffac 	bl	10a30 <net_buf_simple_add>
	rsp->request = req;
    4ad8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    4adc:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    4ade:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    4ae2:	4622      	mov	r2, r4
    4ae4:	4628      	mov	r0, r5
    4ae6:	4b04      	ldr	r3, [pc, #16]	; (4af8 <send_err_rsp.part.10+0x40>)
    4ae8:	2104      	movs	r1, #4
}
    4aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    4aee:	f7ff ba8b 	b.w	4008 <bt_l2cap_send_cb>
    4af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4af6:	bf00      	nop
    4af8:	000046db 	.word	0x000046db

00004afc <bt_att_recv>:
{
    4afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    4b00:	898b      	ldrh	r3, [r1, #12]
{
    4b02:	4604      	mov	r4, r0
    4b04:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    4b06:	2b00      	cmp	r3, #0
    4b08:	d05e      	beq.n	4bc8 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
    4b0a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4b0c:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    4b0e:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    4b12:	f00b ffbb 	bl	10a8c <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    4b16:	4a2d      	ldr	r2, [pc, #180]	; (4bcc <bt_att_recv+0xd0>)
    4b18:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4b1a:	2300      	movs	r3, #0
    4b1c:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    4b1e:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
    4b22:	45ae      	cmp	lr, r5
    4b24:	ea4f 00c3 	mov.w	r0, r3, lsl #3
    4b28:	d118      	bne.n	4b5c <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    4b2a:	4402      	add	r2, r0
    4b2c:	7895      	ldrb	r5, [r2, #2]
    4b2e:	2d01      	cmp	r5, #1
    4b30:	d024      	beq.n	4b7c <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    4b32:	2d05      	cmp	r5, #5
    4b34:	d133      	bne.n	4b9e <bt_att_recv+0xa2>
    4b36:	f3bf 8f5b 	dmb	ish
    4b3a:	f104 0294 	add.w	r2, r4, #148	; 0x94
    4b3e:	e852 3f00 	ldrex	r3, [r2]
    4b42:	f043 0e02 	orr.w	lr, r3, #2
    4b46:	e842 ec00 	strex	ip, lr, [r2]
    4b4a:	f1bc 0f00 	cmp.w	ip, #0
    4b4e:	d1f6      	bne.n	4b3e <bt_att_recv+0x42>
    4b50:	f3bf 8f5b 	dmb	ish
    4b54:	079b      	lsls	r3, r3, #30
    4b56:	d522      	bpl.n	4b9e <bt_att_recv+0xa2>
    4b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4b5c:	3301      	adds	r3, #1
    4b5e:	2b1b      	cmp	r3, #27
    4b60:	d1dd      	bne.n	4b1e <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    4b62:	4628      	mov	r0, r5
    4b64:	f7ff fb50 	bl	4208 <att_op_get_type>
    4b68:	b370      	cbz	r0, 4bc8 <bt_att_recv+0xcc>
	if (!req) {
    4b6a:	b36d      	cbz	r5, 4bc8 <bt_att_recv+0xcc>
    4b6c:	2306      	movs	r3, #6
    4b6e:	2200      	movs	r2, #0
    4b70:	4629      	mov	r1, r5
    4b72:	6820      	ldr	r0, [r4, #0]
}
    4b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4b78:	f7ff bf9e 	b.w	4ab8 <send_err_rsp.part.10>
    4b7c:	f104 0294 	add.w	r2, r4, #148	; 0x94
    4b80:	f3bf 8f5b 	dmb	ish
    4b84:	e852 3f00 	ldrex	r3, [r2]
    4b88:	f043 0e01 	orr.w	lr, r3, #1
    4b8c:	e842 ec00 	strex	ip, lr, [r2]
    4b90:	f1bc 0f00 	cmp.w	ip, #0
    4b94:	d1f6      	bne.n	4b84 <bt_att_recv+0x88>
    4b96:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    4b9a:	07da      	lsls	r2, r3, #31
    4b9c:	d414      	bmi.n	4bc8 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
    4b9e:	180b      	adds	r3, r1, r0
    4ba0:	89b1      	ldrh	r1, [r6, #12]
    4ba2:	785a      	ldrb	r2, [r3, #1]
    4ba4:	4291      	cmp	r1, r2
    4ba6:	d30d      	bcc.n	4bc4 <bt_att_recv+0xc8>
		err = handler->func(att, buf);
    4ba8:	685b      	ldr	r3, [r3, #4]
    4baa:	4631      	mov	r1, r6
    4bac:	4620      	mov	r0, r4
    4bae:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    4bb0:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    4bb2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    4bb4:	d108      	bne.n	4bc8 <bt_att_recv+0xcc>
    4bb6:	b138      	cbz	r0, 4bc8 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    4bb8:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    4bba:	b129      	cbz	r1, 4bc8 <bt_att_recv+0xcc>
    4bbc:	2200      	movs	r2, #0
    4bbe:	e7d8      	b.n	4b72 <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
    4bc0:	2304      	movs	r3, #4
    4bc2:	e7f9      	b.n	4bb8 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
    4bc4:	2d01      	cmp	r5, #1
    4bc6:	d0fb      	beq.n	4bc0 <bt_att_recv+0xc4>
    4bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bcc:	00012bc0 	.word	0x00012bc0

00004bd0 <att_read_group_req>:
{
    4bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4bd4:	898b      	ldrh	r3, [r1, #12]
    4bd6:	2b06      	cmp	r3, #6
{
    4bd8:	b08d      	sub	sp, #52	; 0x34
    4bda:	4680      	mov	r8, r0
    4bdc:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4bde:	d001      	beq.n	4be4 <att_read_group_req+0x14>
    4be0:	2b14      	cmp	r3, #20
    4be2:	d168      	bne.n	4cb6 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    4be4:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    4be6:	2104      	movs	r1, #4
	req = (void *)buf->data;
    4be8:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    4bec:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    4bf0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4bf2:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    4bf4:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    4bf6:	f00b ff49 	bl	10a8c <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    4bfa:	4621      	mov	r1, r4
    4bfc:	4638      	mov	r0, r7
    4bfe:	f7ff fcf3 	bl	45e8 <uuid_create>
    4c02:	2800      	cmp	r0, #0
    4c04:	d059      	beq.n	4cba <att_read_group_req+0xea>
	if (!start || !end) {
    4c06:	2d00      	cmp	r5, #0
    4c08:	d05a      	beq.n	4cc0 <att_read_group_req+0xf0>
    4c0a:	2400      	movs	r4, #0
    4c0c:	2e00      	cmp	r6, #0
    4c0e:	d056      	beq.n	4cbe <att_read_group_req+0xee>
	if (start > end) {
    4c10:	42b5      	cmp	r5, r6
    4c12:	d855      	bhi.n	4cc0 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    4c14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4c18:	4669      	mov	r1, sp
    4c1a:	4638      	mov	r0, r7
    4c1c:	f88d 4000 	strb.w	r4, [sp]
    4c20:	f8ad 3002 	strh.w	r3, [sp, #2]
    4c24:	f7fd f8be 	bl	1da4 <bt_uuid_cmp>
    4c28:	bb38      	cbnz	r0, 4c7a <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    4c2a:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    4c2e:	2214      	movs	r2, #20
    4c30:	2100      	movs	r1, #0
    4c32:	a807      	add	r0, sp, #28
    4c34:	f7fd f80e 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    4c38:	2201      	movs	r2, #1
    4c3a:	2111      	movs	r1, #17
    4c3c:	4648      	mov	r0, r9
    4c3e:	f7ff fed8 	bl	49f2 <bt_att_create_pdu>
    4c42:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    4c44:	2800      	cmp	r0, #0
    4c46:	d038      	beq.n	4cba <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4c48:	2101      	movs	r1, #1
    4c4a:	3008      	adds	r0, #8
	data.uuid = uuid;
    4c4c:	9708      	str	r7, [sp, #32]
	data.att = att;
    4c4e:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4c52:	f00b feed 	bl	10a30 <net_buf_simple_add>
	data.rsp->len = 0;
    4c56:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4c58:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4c5a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    4c5c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4c5e:	4a1c      	ldr	r2, [pc, #112]	; (4cd0 <att_read_group_req+0x100>)
	data.group = NULL;
    4c60:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4c62:	4631      	mov	r1, r6
    4c64:	4628      	mov	r0, r5
    4c66:	f000 fed9 	bl	5a1c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    4c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4c6c:	781c      	ldrb	r4, [r3, #0]
    4c6e:	b9d4      	cbnz	r4, 4ca6 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    4c70:	9809      	ldr	r0, [sp, #36]	; 0x24
    4c72:	f00b feab 	bl	109cc <net_buf_unref>
    4c76:	230a      	movs	r3, #10
    4c78:	e00c      	b.n	4c94 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    4c7a:	f642 0301 	movw	r3, #10241	; 0x2801
    4c7e:	a901      	add	r1, sp, #4
    4c80:	4638      	mov	r0, r7
    4c82:	f88d 4004 	strb.w	r4, [sp, #4]
    4c86:	f8ad 3006 	strh.w	r3, [sp, #6]
    4c8a:	f7fd f88b 	bl	1da4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    4c8e:	2800      	cmp	r0, #0
    4c90:	d0cb      	beq.n	4c2a <att_read_group_req+0x5a>
    4c92:	2310      	movs	r3, #16
    4c94:	462a      	mov	r2, r5
    4c96:	2110      	movs	r1, #16
    4c98:	4648      	mov	r0, r9
    4c9a:	f7ff ff0d 	bl	4ab8 <send_err_rsp.part.10>
}
    4c9e:	4620      	mov	r0, r4
    4ca0:	b00d      	add	sp, #52	; 0x34
    4ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4ca6:	4b0b      	ldr	r3, [pc, #44]	; (4cd4 <att_read_group_req+0x104>)
    4ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4caa:	2104      	movs	r1, #4
    4cac:	4648      	mov	r0, r9
    4cae:	f7ff f9ab 	bl	4008 <bt_l2cap_send_cb>
		return 0;
    4cb2:	2400      	movs	r4, #0
    4cb4:	e7f3      	b.n	4c9e <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    4cb6:	2404      	movs	r4, #4
    4cb8:	e7f1      	b.n	4c9e <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    4cba:	240e      	movs	r4, #14
    4cbc:	e7ef      	b.n	4c9e <att_read_group_req+0xce>
			*err = 0;
    4cbe:	4635      	mov	r5, r6
    4cc0:	2301      	movs	r3, #1
    4cc2:	462a      	mov	r2, r5
    4cc4:	2110      	movs	r1, #16
    4cc6:	4648      	mov	r0, r9
    4cc8:	f7ff fef6 	bl	4ab8 <send_err_rsp.part.10>
    4ccc:	e7f1      	b.n	4cb2 <att_read_group_req+0xe2>
    4cce:	bf00      	nop
    4cd0:	000042b1 	.word	0x000042b1
    4cd4:	000046db 	.word	0x000046db

00004cd8 <att_read_mult_req>:
{
    4cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4cdc:	6804      	ldr	r4, [r0, #0]
{
    4cde:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    4ce0:	2214      	movs	r2, #20
{
    4ce2:	4606      	mov	r6, r0
    4ce4:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    4ce6:	a801      	add	r0, sp, #4
    4ce8:	2100      	movs	r1, #0
    4cea:	f7fc ffb3 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    4cee:	2200      	movs	r2, #0
    4cf0:	210f      	movs	r1, #15
    4cf2:	4620      	mov	r0, r4
    4cf4:	f7ff fe7d 	bl	49f2 <bt_att_create_pdu>
    4cf8:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    4cfa:	b368      	cbz	r0, 4d58 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4cfc:	f8df 9060 	ldr.w	r9, [pc, #96]	; 4d60 <att_read_mult_req+0x88>
	data.att = att;
    4d00:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    4d02:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    4d06:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    4d0a:	89ab      	ldrh	r3, [r5, #12]
    4d0c:	2b01      	cmp	r3, #1
    4d0e:	d806      	bhi.n	4d1e <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4d10:	4b12      	ldr	r3, [pc, #72]	; (4d5c <att_read_mult_req+0x84>)
    4d12:	9a03      	ldr	r2, [sp, #12]
    4d14:	2104      	movs	r1, #4
    4d16:	4620      	mov	r0, r4
    4d18:	f7ff f976 	bl	4008 <bt_l2cap_send_cb>
    4d1c:	e018      	b.n	4d50 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    4d1e:	4638      	mov	r0, r7
    4d20:	f00b fec4 	bl	10aac <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d24:	ab01      	add	r3, sp, #4
    4d26:	464a      	mov	r2, r9
    4d28:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    4d2a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    4d2c:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d30:	f000 fe74 	bl	5a1c <bt_gatt_foreach_attr>
		if (data.err) {
    4d34:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d0e6      	beq.n	4d0a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    4d3c:	9803      	ldr	r0, [sp, #12]
    4d3e:	f00b fe45 	bl	109cc <net_buf_unref>
    4d42:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4d46:	4632      	mov	r2, r6
    4d48:	210e      	movs	r1, #14
    4d4a:	4620      	mov	r0, r4
    4d4c:	f7ff feb4 	bl	4ab8 <send_err_rsp.part.10>
	return 0;
    4d50:	2000      	movs	r0, #0
}
    4d52:	b007      	add	sp, #28
    4d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    4d58:	200e      	movs	r0, #14
    4d5a:	e7fa      	b.n	4d52 <att_read_mult_req+0x7a>
    4d5c:	000046db 	.word	0x000046db
    4d60:	0000497d 	.word	0x0000497d

00004d64 <att_read_rsp>:
{
    4d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d68:	4607      	mov	r7, r0
    4d6a:	b086      	sub	sp, #24
    4d6c:	460c      	mov	r4, r1
    4d6e:	4690      	mov	r8, r2
	if (!handle) {
    4d70:	461d      	mov	r5, r3
    4d72:	b3a3      	cbz	r3, 4dde <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    4d74:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    4d76:	2214      	movs	r2, #20
    4d78:	2100      	movs	r1, #0
    4d7a:	a801      	add	r0, sp, #4
    4d7c:	f7fc ff6a 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    4d80:	2200      	movs	r2, #0
    4d82:	4641      	mov	r1, r8
    4d84:	4630      	mov	r0, r6
    4d86:	f7ff fe34 	bl	49f2 <bt_att_create_pdu>
    4d8a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    4d8c:	b348      	cbz	r0, 4de2 <att_read_rsp+0x7e>
	data.offset = offset;
    4d8e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    4d92:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    4d96:	2301      	movs	r3, #1
    4d98:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d9c:	4a12      	ldr	r2, [pc, #72]	; (4de8 <att_read_rsp+0x84>)
	data.att = att;
    4d9e:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4da0:	ab01      	add	r3, sp, #4
    4da2:	4629      	mov	r1, r5
    4da4:	4628      	mov	r0, r5
    4da6:	f000 fe39 	bl	5a1c <bt_gatt_foreach_attr>
	if (data.err) {
    4daa:	f89d 7014 	ldrb.w	r7, [sp, #20]
    4dae:	b17f      	cbz	r7, 4dd0 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    4db0:	9803      	ldr	r0, [sp, #12]
    4db2:	f00b fe0b 	bl	109cc <net_buf_unref>
	if (!req) {
    4db6:	b13c      	cbz	r4, 4dc8 <att_read_rsp+0x64>
    4db8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4dbc:	462a      	mov	r2, r5
    4dbe:	4621      	mov	r1, r4
    4dc0:	4630      	mov	r0, r6
    4dc2:	f7ff fe79 	bl	4ab8 <send_err_rsp.part.10>
		return 0;
    4dc6:	2400      	movs	r4, #0
}
    4dc8:	4620      	mov	r0, r4
    4dca:	b006      	add	sp, #24
    4dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4dd0:	4b06      	ldr	r3, [pc, #24]	; (4dec <att_read_rsp+0x88>)
    4dd2:	9a03      	ldr	r2, [sp, #12]
    4dd4:	2104      	movs	r1, #4
    4dd6:	4630      	mov	r0, r6
    4dd8:	f7ff f916 	bl	4008 <bt_l2cap_send_cb>
    4ddc:	e7f3      	b.n	4dc6 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    4dde:	2401      	movs	r4, #1
    4de0:	e7f2      	b.n	4dc8 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    4de2:	240e      	movs	r4, #14
    4de4:	e7f0      	b.n	4dc8 <att_read_rsp+0x64>
    4de6:	bf00      	nop
    4de8:	0000497d 	.word	0x0000497d
    4dec:	000046db 	.word	0x000046db

00004df0 <att_read_blob_req>:
{
    4df0:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    4df2:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    4df4:	8813      	ldrh	r3, [r2, #0]
    4df6:	8852      	ldrh	r2, [r2, #2]
    4df8:	9200      	str	r2, [sp, #0]
    4dfa:	210c      	movs	r1, #12
    4dfc:	220d      	movs	r2, #13
    4dfe:	f7ff ffb1 	bl	4d64 <att_read_rsp>
}
    4e02:	b003      	add	sp, #12
    4e04:	f85d fb04 	ldr.w	pc, [sp], #4

00004e08 <att_read_req>:
{
    4e08:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    4e0a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    4e0c:	2200      	movs	r2, #0
    4e0e:	881b      	ldrh	r3, [r3, #0]
    4e10:	9200      	str	r2, [sp, #0]
    4e12:	210a      	movs	r1, #10
    4e14:	220b      	movs	r2, #11
    4e16:	f7ff ffa5 	bl	4d64 <att_read_rsp>
}
    4e1a:	b003      	add	sp, #12
    4e1c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e20 <att_read_type_req>:
{
    4e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4e24:	898b      	ldrh	r3, [r1, #12]
    4e26:	2b06      	cmp	r3, #6
{
    4e28:	b08d      	sub	sp, #52	; 0x34
    4e2a:	4607      	mov	r7, r0
    4e2c:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4e2e:	d001      	beq.n	4e34 <att_read_type_req+0x14>
    4e30:	2b14      	cmp	r3, #20
    4e32:	d152      	bne.n	4eda <att_read_type_req+0xba>
	req = (void *)buf->data;
    4e34:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    4e36:	2104      	movs	r1, #4
	req = (void *)buf->data;
    4e38:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    4e3c:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    4e40:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4e42:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    4e44:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    4e48:	f00b fe20 	bl	10a8c <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    4e4c:	4631      	mov	r1, r6
    4e4e:	4640      	mov	r0, r8
    4e50:	f7ff fbca 	bl	45e8 <uuid_create>
    4e54:	b198      	cbz	r0, 4e7e <att_read_type_req+0x5e>
	if (!start || !end) {
    4e56:	2d00      	cmp	r5, #0
    4e58:	d042      	beq.n	4ee0 <att_read_type_req+0xc0>
    4e5a:	2c00      	cmp	r4, #0
    4e5c:	d03f      	beq.n	4ede <att_read_type_req+0xbe>
	if (start > end) {
    4e5e:	42a5      	cmp	r5, r4
    4e60:	d83e      	bhi.n	4ee0 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    4e62:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    4e64:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    4e66:	2100      	movs	r1, #0
    4e68:	eb0d 0002 	add.w	r0, sp, r2
    4e6c:	f7fc fef2 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    4e70:	2201      	movs	r2, #1
    4e72:	2109      	movs	r1, #9
    4e74:	4630      	mov	r0, r6
    4e76:	f7ff fdbc 	bl	49f2 <bt_att_create_pdu>
    4e7a:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    4e7c:	b908      	cbnz	r0, 4e82 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    4e7e:	240e      	movs	r4, #14
    4e80:	e027      	b.n	4ed2 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4e82:	2101      	movs	r1, #1
    4e84:	3008      	adds	r0, #8
	data.att = att;
    4e86:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    4e88:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4e8c:	f00b fdd0 	bl	10a30 <net_buf_simple_add>
	data.rsp->len = 0;
    4e90:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4e92:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4e94:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4e96:	4621      	mov	r1, r4
	data.rsp->len = 0;
    4e98:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4e9a:	4a14      	ldr	r2, [pc, #80]	; (4eec <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4e9c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4ea0:	4628      	mov	r0, r5
    4ea2:	ab06      	add	r3, sp, #24
    4ea4:	f000 fdba 	bl	5a1c <bt_gatt_foreach_attr>
	if (data.err) {
    4ea8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    4eac:	b15c      	cbz	r4, 4ec6 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    4eae:	9808      	ldr	r0, [sp, #32]
    4eb0:	f00b fd8c 	bl	109cc <net_buf_unref>
    4eb4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    4eb8:	462a      	mov	r2, r5
    4eba:	2108      	movs	r1, #8
    4ebc:	4630      	mov	r0, r6
    4ebe:	f7ff fdfb 	bl	4ab8 <send_err_rsp.part.10>
		return 0;
    4ec2:	2400      	movs	r4, #0
    4ec4:	e005      	b.n	4ed2 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4ec6:	4b0a      	ldr	r3, [pc, #40]	; (4ef0 <att_read_type_req+0xd0>)
    4ec8:	9a08      	ldr	r2, [sp, #32]
    4eca:	2104      	movs	r1, #4
    4ecc:	4630      	mov	r0, r6
    4ece:	f7ff f89b 	bl	4008 <bt_l2cap_send_cb>
}
    4ed2:	4620      	mov	r0, r4
    4ed4:	b00d      	add	sp, #52	; 0x34
    4ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    4eda:	2404      	movs	r4, #4
    4edc:	e7f9      	b.n	4ed2 <att_read_type_req+0xb2>
			*err = 0;
    4ede:	4625      	mov	r5, r4
    4ee0:	2301      	movs	r3, #1
    4ee2:	462a      	mov	r2, r5
    4ee4:	2108      	movs	r1, #8
    4ee6:	4648      	mov	r0, r9
    4ee8:	e7e9      	b.n	4ebe <att_read_type_req+0x9e>
    4eea:	bf00      	nop
    4eec:	0000452d 	.word	0x0000452d
    4ef0:	000046db 	.word	0x000046db

00004ef4 <att_find_type_req>:
{
    4ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4ef8:	f8d0 9000 	ldr.w	r9, [r0]
{
    4efc:	4680      	mov	r8, r0
	req = (void *)buf->data;
    4efe:	4608      	mov	r0, r1
{
    4f00:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    4f02:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    4f06:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    4f08:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    4f0a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4f0c:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    4f0e:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    4f10:	f00b fdbc 	bl	10a8c <net_buf_simple_pull>
    4f14:	4682      	mov	sl, r0
	if (!start || !end) {
    4f16:	2d00      	cmp	r5, #0
    4f18:	d057      	beq.n	4fca <att_find_type_req+0xd6>
    4f1a:	2400      	movs	r4, #0
    4f1c:	2f00      	cmp	r7, #0
    4f1e:	d053      	beq.n	4fc8 <att_find_type_req+0xd4>
	if (start > end) {
    4f20:	42bd      	cmp	r5, r7
    4f22:	d852      	bhi.n	4fca <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    4f24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4f28:	a902      	add	r1, sp, #8
    4f2a:	a801      	add	r0, sp, #4
    4f2c:	f8ad 6006 	strh.w	r6, [sp, #6]
    4f30:	f88d 4004 	strb.w	r4, [sp, #4]
    4f34:	f88d 4008 	strb.w	r4, [sp, #8]
    4f38:	f8ad 300a 	strh.w	r3, [sp, #10]
    4f3c:	f7fc ff32 	bl	1da4 <bt_uuid_cmp>
    4f40:	4606      	mov	r6, r0
    4f42:	b148      	cbz	r0, 4f58 <att_find_type_req+0x64>
    4f44:	230a      	movs	r3, #10
    4f46:	462a      	mov	r2, r5
    4f48:	2106      	movs	r1, #6
    4f4a:	4648      	mov	r0, r9
    4f4c:	f7ff fdb4 	bl	4ab8 <send_err_rsp.part.10>
}
    4f50:	4620      	mov	r0, r4
    4f52:	b009      	add	sp, #36	; 0x24
    4f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    4f58:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    4f5c:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    4f60:	2214      	movs	r2, #20
    4f62:	4631      	mov	r1, r6
    4f64:	a803      	add	r0, sp, #12
    4f66:	f7fc fe75 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    4f6a:	4632      	mov	r2, r6
    4f6c:	2107      	movs	r1, #7
    4f6e:	4648      	mov	r0, r9
    4f70:	f7ff fd3f 	bl	49f2 <bt_att_create_pdu>
    4f74:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    4f76:	b328      	cbz	r0, 4fc4 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4f78:	230a      	movs	r3, #10
    4f7a:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4f7e:	4a14      	ldr	r2, [pc, #80]	; (4fd0 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    4f80:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4f84:	ab03      	add	r3, sp, #12
    4f86:	4639      	mov	r1, r7
    4f88:	4628      	mov	r0, r5
	data.att = att;
    4f8a:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    4f8e:	9605      	str	r6, [sp, #20]
	data.value = value;
    4f90:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4f94:	f000 fd42 	bl	5a1c <bt_gatt_foreach_attr>
	if (data.err) {
    4f98:	f89d 401d 	ldrb.w	r4, [sp, #29]
    4f9c:	b15c      	cbz	r4, 4fb6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    4f9e:	9804      	ldr	r0, [sp, #16]
    4fa0:	f00b fd14 	bl	109cc <net_buf_unref>
    4fa4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    4fa8:	462a      	mov	r2, r5
    4faa:	2106      	movs	r1, #6
    4fac:	4648      	mov	r0, r9
    4fae:	f7ff fd83 	bl	4ab8 <send_err_rsp.part.10>
		return 0;
    4fb2:	2400      	movs	r4, #0
    4fb4:	e7cc      	b.n	4f50 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4fb6:	4b07      	ldr	r3, [pc, #28]	; (4fd4 <att_find_type_req+0xe0>)
    4fb8:	9a04      	ldr	r2, [sp, #16]
    4fba:	2104      	movs	r1, #4
    4fbc:	4648      	mov	r0, r9
    4fbe:	f7ff f823 	bl	4008 <bt_l2cap_send_cb>
    4fc2:	e7c5      	b.n	4f50 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    4fc4:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    4fc6:	e7c3      	b.n	4f50 <att_find_type_req+0x5c>
			*err = 0;
    4fc8:	463d      	mov	r5, r7
    4fca:	2301      	movs	r3, #1
    4fcc:	e7ec      	b.n	4fa8 <att_find_type_req+0xb4>
    4fce:	bf00      	nop
    4fd0:	00004419 	.word	0x00004419
    4fd4:	000046db 	.word	0x000046db

00004fd8 <att_find_info_req>:
{
    4fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    4fda:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    4fdc:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    4fde:	881d      	ldrh	r5, [r3, #0]
{
    4fe0:	b085      	sub	sp, #20
    4fe2:	4607      	mov	r7, r0
	if (!start || !end) {
    4fe4:	b375      	cbz	r5, 5044 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    4fe6:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    4fe8:	b35c      	cbz	r4, 5042 <att_find_info_req+0x6a>
	if (start > end) {
    4fea:	42a5      	cmp	r5, r4
    4fec:	d82a      	bhi.n	5044 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    4fee:	2210      	movs	r2, #16
    4ff0:	2100      	movs	r1, #0
    4ff2:	4668      	mov	r0, sp
    4ff4:	f7fc fe2e 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    4ff8:	2200      	movs	r2, #0
    4ffa:	2105      	movs	r1, #5
    4ffc:	4630      	mov	r0, r6
    4ffe:	f7ff fcf8 	bl	49f2 <bt_att_create_pdu>
    5002:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    5004:	b910      	cbnz	r0, 500c <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    5006:	200e      	movs	r0, #14
}
    5008:	b005      	add	sp, #20
    500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    500c:	4621      	mov	r1, r4
    500e:	466b      	mov	r3, sp
    5010:	4a0d      	ldr	r2, [pc, #52]	; (5048 <att_find_info_req+0x70>)
	data.att = att;
    5012:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5014:	4628      	mov	r0, r5
    5016:	f000 fd01 	bl	5a1c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    501a:	9c02      	ldr	r4, [sp, #8]
    501c:	b94c      	cbnz	r4, 5032 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    501e:	9801      	ldr	r0, [sp, #4]
    5020:	f00b fcd4 	bl	109cc <net_buf_unref>
    5024:	230a      	movs	r3, #10
    5026:	462a      	mov	r2, r5
    5028:	2104      	movs	r1, #4
    502a:	4630      	mov	r0, r6
    502c:	f7ff fd44 	bl	4ab8 <send_err_rsp.part.10>
    5030:	e005      	b.n	503e <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5032:	4b06      	ldr	r3, [pc, #24]	; (504c <att_find_info_req+0x74>)
    5034:	9a01      	ldr	r2, [sp, #4]
    5036:	2104      	movs	r1, #4
    5038:	4630      	mov	r0, r6
    503a:	f7fe ffe5 	bl	4008 <bt_l2cap_send_cb>
		return 0;
    503e:	2000      	movs	r0, #0
    5040:	e7e2      	b.n	5008 <att_find_info_req+0x30>
			*err = 0;
    5042:	4625      	mov	r5, r4
    5044:	2301      	movs	r3, #1
    5046:	e7ee      	b.n	5026 <att_find_info_req+0x4e>
    5048:	0000437f 	.word	0x0000437f
    504c:	000046db 	.word	0x000046db

00005050 <att_write_rsp.part.11.constprop.16>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5054:	b086      	sub	sp, #24
    5056:	4690      	mov	r8, r2
    5058:	4605      	mov	r5, r0
    505a:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    505c:	2218      	movs	r2, #24
    505e:	2100      	movs	r1, #0
    5060:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5062:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    5064:	f7fc fdf6 	bl	1c54 <memset>
	if (rsp) {
    5068:	f1b8 0f00 	cmp.w	r8, #0
    506c:	d11f      	bne.n	50ae <att_write_rsp.part.11.constprop.16+0x5e>
	data.offset = offset;
    506e:	2300      	movs	r3, #0
    5070:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    5074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5076:	9303      	str	r3, [sp, #12]
	data.len = len;
    5078:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    507c:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5080:	2301      	movs	r3, #1
    5082:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5086:	4a1b      	ldr	r2, [pc, #108]	; (50f4 <att_write_rsp.part.11.constprop.16+0xa4>)
	data.conn = conn;
    5088:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    508a:	466b      	mov	r3, sp
    508c:	4639      	mov	r1, r7
    508e:	4638      	mov	r0, r7
	data.op = op;
    5090:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5094:	f000 fcc2 	bl	5a1c <bt_gatt_foreach_attr>
	if (data.err) {
    5098:	f89d 4014 	ldrb.w	r4, [sp, #20]
    509c:	b98c      	cbnz	r4, 50c2 <att_write_rsp.part.11.constprop.16+0x72>
	if (data.buf) {
    509e:	9a01      	ldr	r2, [sp, #4]
    50a0:	b1b2      	cbz	r2, 50d0 <att_write_rsp.part.11.constprop.16+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    50a2:	4b15      	ldr	r3, [pc, #84]	; (50f8 <att_write_rsp.part.11.constprop.16+0xa8>)
    50a4:	2104      	movs	r1, #4
    50a6:	4628      	mov	r0, r5
    50a8:	f7fe ffae 	bl	4008 <bt_l2cap_send_cb>
    50ac:	e011      	b.n	50d2 <att_write_rsp.part.11.constprop.16+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    50ae:	2200      	movs	r2, #0
    50b0:	4641      	mov	r1, r8
    50b2:	4628      	mov	r0, r5
    50b4:	f7ff fc9d 	bl	49f2 <bt_att_create_pdu>
    50b8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    50ba:	2800      	cmp	r0, #0
    50bc:	d1d7      	bne.n	506e <att_write_rsp.part.11.constprop.16+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    50be:	240e      	movs	r4, #14
    50c0:	e007      	b.n	50d2 <att_write_rsp.part.11.constprop.16+0x82>
		if (rsp) {
    50c2:	f1b8 0f00 	cmp.w	r8, #0
    50c6:	d00f      	beq.n	50e8 <att_write_rsp.part.11.constprop.16+0x98>
			net_buf_unref(data.buf);
    50c8:	9801      	ldr	r0, [sp, #4]
    50ca:	f00b fc7f 	bl	109cc <net_buf_unref>
	if (!req) {
    50ce:	b926      	cbnz	r6, 50da <att_write_rsp.part.11.constprop.16+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    50d0:	2400      	movs	r4, #0
}
    50d2:	4620      	mov	r0, r4
    50d4:	b006      	add	sp, #24
    50d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50da:	f89d 3014 	ldrb.w	r3, [sp, #20]
    50de:	463a      	mov	r2, r7
    50e0:	4631      	mov	r1, r6
    50e2:	4628      	mov	r0, r5
    50e4:	f7ff fce8 	bl	4ab8 <send_err_rsp.part.10>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    50e8:	2e18      	cmp	r6, #24
    50ea:	d1f1      	bne.n	50d0 <att_write_rsp.part.11.constprop.16+0x80>
    50ec:	f89d 4014 	ldrb.w	r4, [sp, #20]
    50f0:	e7ef      	b.n	50d2 <att_write_rsp.part.11.constprop.16+0x82>
    50f2:	bf00      	nop
    50f4:	00004709 	.word	0x00004709
    50f8:	000046db 	.word	0x000046db

000050fc <att_signed_write_cmd>:
{
    50fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    5100:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    5102:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    5104:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    5108:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    510a:	4620      	mov	r0, r4
    510c:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    510e:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5112:	f00b fcb3 	bl	10a7c <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    5116:	4629      	mov	r1, r5
    5118:	4630      	mov	r0, r6
    511a:	f000 fe74 	bl	5e06 <bt_smp_sign_verify>
	if (err) {
    511e:	4607      	mov	r7, r0
    5120:	b9c8      	cbnz	r0, 5156 <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    5122:	2101      	movs	r1, #1
    5124:	4620      	mov	r0, r4
    5126:	f00b fcb1 	bl	10a8c <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    512a:	2102      	movs	r1, #2
    512c:	4620      	mov	r0, r4
    512e:	f00b fcad 	bl	10a8c <net_buf_simple_pull>
	if (!handle) {
    5132:	f1b8 0f00 	cmp.w	r8, #0
    5136:	d010      	beq.n	515a <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    5138:	7b2b      	ldrb	r3, [r5, #12]
    513a:	3b0c      	subs	r3, #12
    513c:	b2db      	uxtb	r3, r3
    513e:	9301      	str	r3, [sp, #4]
    5140:	68ab      	ldr	r3, [r5, #8]
    5142:	9300      	str	r3, [sp, #0]
    5144:	463a      	mov	r2, r7
    5146:	4643      	mov	r3, r8
    5148:	4639      	mov	r1, r7
    514a:	4630      	mov	r0, r6
    514c:	f7ff ff80 	bl	5050 <att_write_rsp.part.11.constprop.16>
}
    5150:	b002      	add	sp, #8
    5152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    5156:	2000      	movs	r0, #0
    5158:	e7fa      	b.n	5150 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    515a:	2001      	movs	r0, #1
    515c:	e7f8      	b.n	5150 <att_signed_write_cmd+0x54>

0000515e <att_write_cmd>:
{
    515e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5160:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5162:	f101 0008 	add.w	r0, r1, #8
{
    5166:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5168:	f00b fca0 	bl	10aac <net_buf_simple_pull_le16>
	if (!handle) {
    516c:	4603      	mov	r3, r0
    516e:	b150      	cbz	r0, 5186 <att_write_cmd+0x28>
    5170:	7b22      	ldrb	r2, [r4, #12]
    5172:	9201      	str	r2, [sp, #4]
    5174:	68a2      	ldr	r2, [r4, #8]
    5176:	9200      	str	r2, [sp, #0]
    5178:	2200      	movs	r2, #0
    517a:	4611      	mov	r1, r2
    517c:	4628      	mov	r0, r5
    517e:	f7ff ff67 	bl	5050 <att_write_rsp.part.11.constprop.16>
}
    5182:	b003      	add	sp, #12
    5184:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    5186:	2001      	movs	r0, #1
    5188:	e7fb      	b.n	5182 <att_write_cmd+0x24>

0000518a <att_write_req>:
{
    518a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    518c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    518e:	f101 0008 	add.w	r0, r1, #8
{
    5192:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5194:	f00b fc8a 	bl	10aac <net_buf_simple_pull_le16>
	if (!handle) {
    5198:	4603      	mov	r3, r0
    519a:	b150      	cbz	r0, 51b2 <att_write_req+0x28>
    519c:	7b22      	ldrb	r2, [r4, #12]
    519e:	9201      	str	r2, [sp, #4]
    51a0:	68a2      	ldr	r2, [r4, #8]
    51a2:	9200      	str	r2, [sp, #0]
    51a4:	2112      	movs	r1, #18
    51a6:	2213      	movs	r2, #19
    51a8:	4628      	mov	r0, r5
    51aa:	f7ff ff51 	bl	5050 <att_write_rsp.part.11.constprop.16>
}
    51ae:	b003      	add	sp, #12
    51b0:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    51b2:	2001      	movs	r0, #1
    51b4:	e7fb      	b.n	51ae <att_write_req+0x24>
	...

000051b8 <bt_att_init>:

void bt_att_init(void)
{
    51b8:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    51ba:	4803      	ldr	r0, [pc, #12]	; (51c8 <bt_att_init+0x10>)
    51bc:	f7fe fe7c 	bl	3eb8 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    51c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    51c4:	f000 bc14 	b.w	59f0 <bt_gatt_init>
    51c8:	200035d8 	.word	0x200035d8

000051cc <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    51cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51ce:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    51d0:	4607      	mov	r7, r0
    51d2:	2800      	cmp	r0, #0
    51d4:	d038      	beq.n	5248 <bt_att_send+0x7c>
    51d6:	2900      	cmp	r1, #0
    51d8:	d036      	beq.n	5248 <bt_att_send+0x7c>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    51da:	f7ff fa4a 	bl	4672 <att_chan_get>
	if (!att) {
    51de:	4604      	mov	r4, r0
    51e0:	b168      	cbz	r0, 51fe <bt_att_send+0x32>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    51e2:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    51e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    51ea:	4630      	mov	r0, r6
    51ec:	f00c fcad 	bl	11b4a <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    51f0:	4620      	mov	r0, r4
    51f2:	f7ff fa2b 	bl	464c <att_is_connected>
    51f6:	b928      	cbnz	r0, 5204 <bt_att_send+0x38>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    51f8:	4630      	mov	r0, r6
    51fa:	f00c fc7e 	bl	11afa <_impl_k_sem_give>
		return -ENOTCONN;
    51fe:	f06f 0438 	mvn.w	r4, #56	; 0x38
    5202:	e00c      	b.n	521e <bt_att_send+0x52>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    5204:	68ab      	ldr	r3, [r5, #8]
    5206:	781b      	ldrb	r3, [r3, #0]
    5208:	2bd2      	cmp	r3, #210	; 0xd2
    520a:	d10a      	bne.n	5222 <bt_att_send+0x56>
		int err;

		err = bt_smp_sign(conn, buf);
    520c:	4629      	mov	r1, r5
    520e:	4638      	mov	r0, r7
    5210:	f000 fdfc 	bl	5e0c <bt_smp_sign>
		if (err) {
    5214:	4604      	mov	r4, r0
    5216:	b120      	cbz	r0, 5222 <bt_att_send+0x56>
    5218:	4630      	mov	r0, r6
    521a:	f00c fc6e 	bl	11afa <_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));

	return 0;
}
    521e:	4620      	mov	r0, r4
    5220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(buf->data[0])) {
    5222:	68ab      	ldr	r3, [r5, #8]
    5224:	7818      	ldrb	r0, [r3, #0]
    5226:	f7fe ffef 	bl	4208 <att_op_get_type>
    522a:	3801      	subs	r0, #1
    522c:	b2c0      	uxtb	r0, r0
    522e:	2804      	cmp	r0, #4
    5230:	bf96      	itet	ls
    5232:	4b07      	ldrls	r3, [pc, #28]	; (5250 <bt_att_send+0x84>)
    5234:	4b07      	ldrhi	r3, [pc, #28]	; (5254 <bt_att_send+0x88>)
    5236:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    523a:	462a      	mov	r2, r5
    523c:	2104      	movs	r1, #4
    523e:	4638      	mov	r0, r7
    5240:	f7fe fee2 	bl	4008 <bt_l2cap_send_cb>
	return 0;
    5244:	2400      	movs	r4, #0
    5246:	e7ea      	b.n	521e <bt_att_send+0x52>
		return -EINVAL;
    5248:	f06f 0415 	mvn.w	r4, #21
    524c:	e7e7      	b.n	521e <bt_att_send+0x52>
    524e:	bf00      	nop
    5250:	00012bac 	.word	0x00012bac
    5254:	0000469b 	.word	0x0000469b

00005258 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    5258:	b510      	push	{r4, lr}
    525a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    525c:	b1d8      	cbz	r0, 5296 <bt_att_req_send+0x3e>
    525e:	b1d1      	cbz	r1, 5296 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    5260:	f7ff fa07 	bl	4672 <att_chan_get>
	if (!att) {
    5264:	4603      	mov	r3, r0
    5266:	b1c8      	cbz	r0, 529c <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    5268:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    526c:	b172      	cbz	r2, 528c <bt_att_req_send+0x34>
	parent->next = child;
    526e:	2000      	movs	r0, #0
    5270:	6020      	str	r0, [r4, #0]
    5272:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    5276:	b92a      	cbnz	r2, 5284 <bt_att_req_send+0x2c>
	list->tail = node;
    5278:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    527c:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    5280:	4610      	mov	r0, r2
    5282:	bd10      	pop	{r4, pc}
	parent->next = child;
    5284:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5286:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    528a:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    528c:	4621      	mov	r1, r4
}
    528e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    5292:	f7ff ba65 	b.w	4760 <att_send_req>
		return -EINVAL;
    5296:	f06f 0015 	mvn.w	r0, #21
    529a:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    529c:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    52a0:	bd10      	pop	{r4, pc}

000052a2 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode);
    52a2:	6813      	ldr	r3, [r2, #0]
    52a4:	b939      	cbnz	r1, 52b6 <sys_slist_remove+0x14>
    52a6:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    52a8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode);
    52aa:	428a      	cmp	r2, r1
    52ac:	d100      	bne.n	52b0 <sys_slist_remove+0xe>
	list->tail = node;
    52ae:	6043      	str	r3, [r0, #4]
	parent->next = child;
    52b0:	2300      	movs	r3, #0
    52b2:	6013      	str	r3, [r2, #0]
    52b4:	4770      	bx	lr
    52b6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    52b8:	6843      	ldr	r3, [r0, #4]
    52ba:	429a      	cmp	r2, r3
	list->tail = node;
    52bc:	bf08      	it	eq
    52be:	6041      	streq	r1, [r0, #4]
    52c0:	e7f6      	b.n	52b0 <sys_slist_remove+0xe>

000052c2 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    52c2:	4770      	bx	lr

000052c4 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    52c4:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    52c6:	2000      	movs	r0, #0
    52c8:	4770      	bx	lr

000052ca <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    52ca:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    52cc:	2300      	movs	r3, #0
    52ce:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    52d0:	461a      	mov	r2, r3
    52d2:	42aa      	cmp	r2, r5
    52d4:	d107      	bne.n	52e6 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    52d6:	890a      	ldrh	r2, [r1, #8]
    52d8:	429a      	cmp	r2, r3
    52da:	d00d      	beq.n	52f8 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    52dc:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    52de:	68ca      	ldr	r2, [r1, #12]
	}
}
    52e0:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    52e2:	4619      	mov	r1, r3
    52e4:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    52e6:	680c      	ldr	r4, [r1, #0]
    52e8:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    52ec:	3201      	adds	r2, #1
    52ee:	8924      	ldrh	r4, [r4, #8]
    52f0:	42a3      	cmp	r3, r4
    52f2:	bf38      	it	cc
    52f4:	4623      	movcc	r3, r4
    52f6:	e7ec      	b.n	52d2 <gatt_ccc_changed+0x8>
}
    52f8:	bc30      	pop	{r4, r5}
    52fa:	4770      	bx	lr

000052fc <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    52fc:	b410      	push	{r4}
    52fe:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    5300:	699c      	ldr	r4, [r3, #24]
    5302:	460a      	mov	r2, r1
    5304:	6959      	ldr	r1, [r3, #20]
    5306:	4623      	mov	r3, r4
}
    5308:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    530a:	4718      	bx	r3

0000530c <gatt_subscription_remove>:
	bt_addr_le_copy(&params->_peer, &conn->le.dst);
}

static void gatt_subscription_remove(struct bt_conn *conn, sys_snode_t *prev,
				     struct bt_gatt_subscribe_params *params)
{
    530c:	b570      	push	{r4, r5, r6, lr}
    530e:	4614      	mov	r4, r2
    5310:	4606      	mov	r6, r0
	/* Remove subscription from the list*/
	sys_slist_remove(&subscriptions, prev, &params->node);
    5312:	3228      	adds	r2, #40	; 0x28
    5314:	4805      	ldr	r0, [pc, #20]	; (532c <gatt_subscription_remove+0x20>)
    5316:	f7ff ffc4 	bl	52a2 <sys_slist_remove>

	params->notify(conn, params, NULL, 0);
    531a:	69e5      	ldr	r5, [r4, #28]
    531c:	2300      	movs	r3, #0
    531e:	4621      	mov	r1, r4
    5320:	4630      	mov	r0, r6
    5322:	46ac      	mov	ip, r5
    5324:	461a      	mov	r2, r3
}
    5326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->notify(conn, params, NULL, 0);
    532a:	4760      	bx	ip
    532c:	2000038c 	.word	0x2000038c

00005330 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, u8_t err,
			       const void *pdu, u16_t length,
			       void *user_data)
{
    5330:	b430      	push	{r4, r5}
    5332:	9c02      	ldr	r4, [sp, #8]
    5334:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    5336:	b181      	cbz	r1, 535a <gatt_write_ccc_rsp+0x2a>
    5338:	4b0d      	ldr	r3, [pc, #52]	; (5370 <gatt_write_ccc_rsp+0x40>)
    533a:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode);
    533c:	b1ab      	cbz	r3, 536a <gatt_write_ccc_rsp+0x3a>
	return node->next;
    533e:	6819      	ldr	r1, [r3, #0]
		sys_snode_t *node, *tmp, *prev = NULL;

		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
			if (node == &params->node) {
    5340:	f104 0228 	add.w	r2, r4, #40	; 0x28
    5344:	4293      	cmp	r3, r2
    5346:	d104      	bne.n	5352 <gatt_write_ccc_rsp+0x22>
				gatt_subscription_remove(conn, tmp, params);
    5348:	4622      	mov	r2, r4
    534a:	4628      	mov	r0, r5
		}
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}
    534c:	bc30      	pop	{r4, r5}
				gatt_subscription_remove(conn, tmp, params);
    534e:	f7ff bfdd 	b.w	530c <gatt_subscription_remove>
Z_GENLIST_PEEK_NEXT(slist, snode);
    5352:	b151      	cbz	r1, 536a <gatt_write_ccc_rsp+0x3a>
    5354:	460b      	mov	r3, r1
    5356:	6809      	ldr	r1, [r1, #0]
    5358:	e7f4      	b.n	5344 <gatt_write_ccc_rsp+0x14>
	} else if (!params->value) {
    535a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    535c:	b92b      	cbnz	r3, 536a <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
    535e:	69e5      	ldr	r5, [r4, #28]
    5360:	4621      	mov	r1, r4
    5362:	46ac      	mov	ip, r5
    5364:	461a      	mov	r2, r3
}
    5366:	bc30      	pop	{r4, r5}
		params->notify(conn, params, NULL, 0);
    5368:	4760      	bx	ip
}
    536a:	bc30      	pop	{r4, r5}
    536c:	4770      	bx	lr
    536e:	bf00      	nop
    5370:	2000038c 	.word	0x2000038c

00005374 <gatt_notify>:
{
    5374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5378:	468a      	mov	sl, r1
    537a:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    537c:	211b      	movs	r1, #27
    537e:	1c9a      	adds	r2, r3, #2
{
    5380:	4680      	mov	r8, r0
    5382:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    5384:	f7ff fb35 	bl	49f2 <bt_att_create_pdu>
	if (!buf) {
    5388:	4604      	mov	r4, r0
    538a:	b1d0      	cbz	r0, 53c2 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    538c:	f100 0708 	add.w	r7, r0, #8
    5390:	2102      	movs	r1, #2
    5392:	4638      	mov	r0, r7
    5394:	f00b fb4c 	bl	10a30 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    5398:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    539a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    539c:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    53a0:	4638      	mov	r0, r7
    53a2:	f00b fb45 	bl	10a30 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    53a6:	4632      	mov	r2, r6
    53a8:	4649      	mov	r1, r9
    53aa:	4628      	mov	r0, r5
    53ac:	f7fc fc26 	bl	1bfc <memcpy>
    53b0:	4640      	mov	r0, r8
    53b2:	2300      	movs	r3, #0
    53b4:	4622      	mov	r2, r4
    53b6:	2104      	movs	r1, #4
    53b8:	f7fe fe26 	bl	4008 <bt_l2cap_send_cb>
	return 0;
    53bc:	2000      	movs	r0, #0
    53be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    53c2:	f06f 000b 	mvn.w	r0, #11
}
    53c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000053cc <gatt_register>:
	if (sys_slist_is_empty(&db)) {
    53cc:	4a18      	ldr	r2, [pc, #96]	; (5430 <gatt_register+0x64>)
    53ce:	6813      	ldr	r3, [r2, #0]
{
    53d0:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    53d2:	e890 0012 	ldmia.w	r0, {r1, r4}
	if (sys_slist_is_empty(&db)) {
    53d6:	b143      	cbz	r3, 53ea <gatt_register+0x1e>
    53d8:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    53da:	b33b      	cbz	r3, 542c <gatt_register+0x60>
	handle = last->attrs[last->attr_count - 1].handle;
    53dc:	e913 0028 	ldmdb	r3, {r3, r5}
    53e0:	2614      	movs	r6, #20
    53e2:	fb06 3305 	mla	r3, r6, r5, r3
    53e6:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    53ea:	b2a4      	uxth	r4, r4
    53ec:	2514      	movs	r5, #20
    53ee:	fb05 1404 	mla	r4, r5, r4, r1
	for (; attrs && count; attrs++, count--) {
    53f2:	b109      	cbz	r1, 53f8 <gatt_register+0x2c>
    53f4:	42a1      	cmp	r1, r4
    53f6:	d108      	bne.n	540a <gatt_register+0x3e>
	parent->next = child;
    53f8:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    53fa:	f100 0108 	add.w	r1, r0, #8
    53fe:	6083      	str	r3, [r0, #8]
    5400:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    5402:	b978      	cbnz	r0, 5424 <gatt_register+0x58>
	list->tail = node;
    5404:	6051      	str	r1, [r2, #4]
	list->head = node;
    5406:	6011      	str	r1, [r2, #0]
    5408:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    540a:	8a0d      	ldrh	r5, [r1, #16]
    540c:	b92d      	cbnz	r5, 541a <gatt_register+0x4e>
			attrs->handle = ++handle;
    540e:	3301      	adds	r3, #1
    5410:	b29d      	uxth	r5, r3
    5412:	820d      	strh	r5, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    5414:	3114      	adds	r1, #20
    5416:	462b      	mov	r3, r5
    5418:	e7eb      	b.n	53f2 <gatt_register+0x26>
		} else if (attrs->handle > handle) {
    541a:	42ab      	cmp	r3, r5
    541c:	d3fa      	bcc.n	5414 <gatt_register+0x48>
			return -EINVAL;
    541e:	f06f 0015 	mvn.w	r0, #21
    5422:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    5424:	6001      	str	r1, [r0, #0]
	list->tail = node;
    5426:	6051      	str	r1, [r2, #4]
	return 0;
    5428:	4618      	mov	r0, r3
    542a:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
    542c:	681b      	ldr	r3, [r3, #0]
    542e:	deff      	udf	#255	; 0xff
    5430:	20000320 	.word	0x20000320

00005434 <gatt_send.constprop.28>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    5434:	b538      	push	{r3, r4, r5, lr}
    5436:	460d      	mov	r5, r1
	if (params) {
    5438:	b16b      	cbz	r3, 5456 <gatt_send.constprop.28+0x22>
		req->func = func;
    543a:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    543c:	2200      	movs	r2, #0
		req->buf = buf;
    543e:	6119      	str	r1, [r3, #16]
		req->destroy = destroy;
    5440:	609a      	str	r2, [r3, #8]
		err = bt_att_req_send(conn, req);
    5442:	4619      	mov	r1, r3
    5444:	f7ff ff08 	bl	5258 <bt_att_req_send>
		err = bt_att_send(conn, buf);
    5448:	4604      	mov	r4, r0
	if (err) {
    544a:	b110      	cbz	r0, 5452 <gatt_send.constprop.28+0x1e>
		net_buf_unref(buf);
    544c:	4628      	mov	r0, r5
    544e:	f00b fabd 	bl	109cc <net_buf_unref>
}
    5452:	4620      	mov	r0, r4
    5454:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    5456:	f7ff feb9 	bl	51cc <bt_att_send>
    545a:	e7f5      	b.n	5448 <gatt_send.constprop.28+0x14>

0000545c <gatt_write_ccc.constprop.18>:

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    545c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5460:	4689      	mov	r9, r1
    5462:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    5464:	2112      	movs	r1, #18
    5466:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    5468:	4606      	mov	r6, r0
    546a:	461f      	mov	r7, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    546c:	f7ff fac1 	bl	49f2 <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    5470:	4604      	mov	r4, r0
    5472:	b198      	cbz	r0, 549c <gatt_write_ccc.constprop.18+0x40>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    5474:	f100 0508 	add.w	r5, r0, #8
    5478:	2102      	movs	r1, #2
    547a:	4628      	mov	r0, r5
    547c:	f00b fad8 	bl	10a30 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    5480:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    5482:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    5486:	4628      	mov	r0, r5
    5488:	f00b fae9 	bl	10a5e <net_buf_simple_add_le16>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	return gatt_send(conn, buf, func, params, NULL);
    548c:	463b      	mov	r3, r7
    548e:	4621      	mov	r1, r4
    5490:	4630      	mov	r0, r6
    5492:	4a04      	ldr	r2, [pc, #16]	; (54a4 <gatt_write_ccc.constprop.18+0x48>)
}
    5494:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    5498:	f7ff bfcc 	b.w	5434 <gatt_send.constprop.28>
}
    549c:	f06f 000b 	mvn.w	r0, #11
    54a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54a4:	00005331 	.word	0x00005331

000054a8 <gatt_indicate>:
{
    54a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    54ac:	694b      	ldr	r3, [r1, #20]
{
    54ae:	4680      	mov	r8, r0
	u16_t value_handle = params->attr->handle;
    54b0:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    54b2:	6818      	ldr	r0, [r3, #0]
    54b4:	2300      	movs	r3, #0
{
    54b6:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    54b8:	f88d 3004 	strb.w	r3, [sp, #4]
    54bc:	a901      	add	r1, sp, #4
    54be:	f642 0303 	movw	r3, #10243	; 0x2803
    54c2:	f8ad 3006 	strh.w	r3, [sp, #6]
    54c6:	f7fc fc6d 	bl	1da4 <bt_uuid_cmp>
    54ca:	b930      	cbnz	r0, 54da <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    54cc:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    54ce:	68db      	ldr	r3, [r3, #12]
    54d0:	791b      	ldrb	r3, [r3, #4]
    54d2:	069b      	lsls	r3, r3, #26
    54d4:	d524      	bpl.n	5520 <gatt_indicate+0x78>
		value_handle += 1;
    54d6:	3501      	adds	r5, #1
    54d8:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    54da:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    54dc:	211d      	movs	r1, #29
    54de:	3202      	adds	r2, #2
    54e0:	4640      	mov	r0, r8
    54e2:	f7ff fa86 	bl	49f2 <bt_att_create_pdu>
	if (!buf) {
    54e6:	4606      	mov	r6, r0
    54e8:	b1e8      	cbz	r0, 5526 <gatt_indicate+0x7e>
	ind = net_buf_add(buf, sizeof(*ind));
    54ea:	f100 0908 	add.w	r9, r0, #8
    54ee:	2102      	movs	r1, #2
    54f0:	4648      	mov	r0, r9
    54f2:	f00b fa9d 	bl	10a30 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    54f6:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    54f8:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    54fa:	f827 5b02 	strh.w	r5, [r7], #2
	net_buf_add(buf, params->len);
    54fe:	4648      	mov	r0, r9
    5500:	f00b fa96 	bl	10a30 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    5504:	8c22      	ldrh	r2, [r4, #32]
    5506:	69e1      	ldr	r1, [r4, #28]
    5508:	4638      	mov	r0, r7
    550a:	f7fc fb77 	bl	1bfc <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    550e:	4623      	mov	r3, r4
    5510:	4a06      	ldr	r2, [pc, #24]	; (552c <gatt_indicate+0x84>)
    5512:	4631      	mov	r1, r6
    5514:	4640      	mov	r0, r8
    5516:	f7ff ff8d 	bl	5434 <gatt_send.constprop.28>
}
    551a:	b003      	add	sp, #12
    551c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    5520:	f06f 0015 	mvn.w	r0, #21
    5524:	e7f9      	b.n	551a <gatt_indicate+0x72>
		return -ENOMEM;
    5526:	f06f 000b 	mvn.w	r0, #11
    552a:	e7f6      	b.n	551a <gatt_indicate+0x72>
    552c:	000052fd 	.word	0x000052fd

00005530 <sc_indicate.constprop.26>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    5530:	b510      	push	{r4, lr}
    5532:	4b17      	ldr	r3, [pc, #92]	; (5590 <sc_indicate.constprop.26+0x60>)
    5534:	f3bf 8f5b 	dmb	ish
    5538:	f103 0250 	add.w	r2, r3, #80	; 0x50
    553c:	e852 4f00 	ldrex	r4, [r2]
    5540:	f044 0e01 	orr.w	lr, r4, #1
    5544:	e842 ec00 	strex	ip, lr, [r2]
    5548:	f1bc 0f00 	cmp.w	ip, #0
    554c:	d1f6      	bne.n	553c <sc_indicate.constprop.26+0xc>
    554e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    5552:	07e2      	lsls	r2, r4, #31
    5554:	d402      	bmi.n	555c <sc_indicate.constprop.26+0x2c>
		sc->start = start;
    5556:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    5558:	84d9      	strh	r1, [r3, #38]	; 0x26
    555a:	e00a      	b.n	5572 <sc_indicate.constprop.26+0x42>
	if (new_start >= *start && new_end <= *end) {
    555c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    555e:	4282      	cmp	r2, r0
    5560:	d803      	bhi.n	556a <sc_indicate.constprop.26+0x3a>
    5562:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    5564:	428a      	cmp	r2, r1
    5566:	d301      	bcc.n	556c <sc_indicate.constprop.26+0x3c>
    5568:	bd10      	pop	{r4, pc}
		*start = new_start;
    556a:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    556c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    556e:	428a      	cmp	r2, r1
    5570:	d3f2      	bcc.n	5558 <sc_indicate.constprop.26+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5572:	f3bf 8f5b 	dmb	ish
    5576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    5578:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    557c:	079b      	lsls	r3, r3, #30
    557e:	d406      	bmi.n	558e <sc_indicate.constprop.26+0x5e>
    5580:	220a      	movs	r2, #10
    5582:	4904      	ldr	r1, [pc, #16]	; (5594 <sc_indicate.constprop.26+0x64>)
    5584:	4804      	ldr	r0, [pc, #16]	; (5598 <sc_indicate.constprop.26+0x68>)
}
    5586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    558a:	f00c be11 	b.w	121b0 <k_delayed_work_submit_to_queue>
    558e:	bd10      	pop	{r4, pc}
    5590:	20000328 	.word	0x20000328
    5594:	20000350 	.word	0x20000350
    5598:	20001730 	.word	0x20001730

0000559c <connected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    559c:	6882      	ldr	r2, [r0, #8]
    559e:	4b19      	ldr	r3, [pc, #100]	; (5604 <connected_cb+0x68>)
    55a0:	429a      	cmp	r2, r3
{
    55a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55a6:	4607      	mov	r7, r0
    55a8:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    55aa:	d125      	bne.n	55f8 <connected_cb+0x5c>
	ccc = attr->user_data;
    55ac:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    55ae:	2600      	movs	r6, #0
    55b0:	686b      	ldr	r3, [r5, #4]
    55b2:	429e      	cmp	r6, r3
    55b4:	d220      	bcs.n	55f8 <connected_cb+0x5c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    55b6:	6829      	ldr	r1, [r5, #0]
    55b8:	ea4f 1806 	mov.w	r8, r6, lsl #4
    55bc:	4441      	add	r1, r8
    55be:	4620      	mov	r0, r4
    55c0:	f7fe f9a2 	bl	3908 <bt_conn_addr_le_cmp>
    55c4:	b9d8      	cbnz	r0, 55fe <connected_cb+0x62>
		if (ccc->cfg[i].value) {
    55c6:	682b      	ldr	r3, [r5, #0]
    55c8:	4443      	add	r3, r8
    55ca:	891b      	ldrh	r3, [r3, #8]
    55cc:	b1bb      	cbz	r3, 55fe <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    55ce:	4629      	mov	r1, r5
    55d0:	4638      	mov	r0, r7
    55d2:	f7ff fe7a 	bl	52ca <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    55d6:	682c      	ldr	r4, [r5, #0]
    55d8:	4b0b      	ldr	r3, [pc, #44]	; (5608 <connected_cb+0x6c>)
    55da:	429c      	cmp	r4, r3
    55dc:	d10c      	bne.n	55f8 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    55de:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    55e0:	89a0      	ldrh	r0, [r4, #12]
    55e2:	89e1      	ldrh	r1, [r4, #14]
    55e4:	b900      	cbnz	r0, 55e8 <connected_cb+0x4c>
    55e6:	b139      	cbz	r1, 55f8 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    55e8:	f7ff ffa2 	bl	5530 <sc_indicate.constprop.26>
	memset(cfg->data, 0, sizeof(cfg->data));
    55ec:	2204      	movs	r2, #4
    55ee:	2100      	movs	r1, #0
    55f0:	f104 000c 	add.w	r0, r4, #12
    55f4:	f7fc fb2e 	bl	1c54 <memset>
}
    55f8:	2001      	movs	r0, #1
    55fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    55fe:	3601      	adds	r6, #1
    5600:	e7d6      	b.n	55b0 <connected_cb+0x14>
    5602:	bf00      	nop
    5604:	000057d5 	.word	0x000057d5
    5608:	2000037c 	.word	0x2000037c

0000560c <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    560c:	490d      	ldr	r1, [pc, #52]	; (5644 <sc_indicate_rsp+0x38>)
    560e:	f3bf 8f5b 	dmb	ish
    5612:	f101 0350 	add.w	r3, r1, #80	; 0x50
    5616:	e853 2f00 	ldrex	r2, [r3]
    561a:	f022 0202 	bic.w	r2, r2, #2
    561e:	e843 2000 	strex	r0, r2, [r3]
    5622:	2800      	cmp	r0, #0
    5624:	d1f7      	bne.n	5616 <sc_indicate_rsp+0xa>
    5626:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    562a:	f3bf 8f5b 	dmb	ish
    562e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    5630:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    5634:	07db      	lsls	r3, r3, #31
    5636:	d504      	bpl.n	5642 <sc_indicate_rsp+0x36>
    5638:	2200      	movs	r2, #0
    563a:	3128      	adds	r1, #40	; 0x28
    563c:	4802      	ldr	r0, [pc, #8]	; (5648 <sc_indicate_rsp+0x3c>)
    563e:	f00c bdb7 	b.w	121b0 <k_delayed_work_submit_to_queue>
    5642:	4770      	bx	lr
    5644:	20000328 	.word	0x20000328
    5648:	20001730 	.word	0x20001730

0000564c <read_appearance>:
{
    564c:	b513      	push	{r0, r1, r4, lr}
    564e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    5652:	4610      	mov	r0, r2
	if (offset > value_len) {
    5654:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    5656:	f04f 0200 	mov.w	r2, #0
    565a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    565e:	d80d      	bhi.n	567c <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    5660:	f1c1 0402 	rsb	r4, r1, #2
    5664:	429c      	cmp	r4, r3
    5666:	bfa8      	it	ge
    5668:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    566a:	f10d 0306 	add.w	r3, sp, #6
    566e:	4622      	mov	r2, r4
    5670:	4419      	add	r1, r3
    5672:	f7fc fac3 	bl	1bfc <memcpy>
}
    5676:	4620      	mov	r0, r4
    5678:	b002      	add	sp, #8
    567a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    567c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    5680:	e7f9      	b.n	5676 <read_appearance+0x2a>
	...

00005684 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    5684:	6882      	ldr	r2, [r0, #8]
    5686:	4b27      	ldr	r3, [pc, #156]	; (5724 <disconnected_cb+0xa0>)
    5688:	429a      	cmp	r2, r3
{
    568a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    568e:	4680      	mov	r8, r0
    5690:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    5692:	d127      	bne.n	56e4 <disconnected_cb+0x60>
	ccc = attr->user_data;
    5694:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    5696:	8923      	ldrh	r3, [r4, #8]
    5698:	b323      	cbz	r3, 56e4 <disconnected_cb+0x60>
    569a:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    569c:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    56a0:	6863      	ldr	r3, [r4, #4]
    56a2:	429e      	cmp	r6, r3
    56a4:	d30b      	bcc.n	56be <disconnected_cb+0x3a>
	memset(&ccc->value, 0, sizeof(ccc->value));
    56a6:	2202      	movs	r2, #2
    56a8:	2100      	movs	r1, #0
    56aa:	f104 0008 	add.w	r0, r4, #8
    56ae:	f7fc fad1 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    56b2:	68e3      	ldr	r3, [r4, #12]
    56b4:	b1b3      	cbz	r3, 56e4 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    56b6:	8921      	ldrh	r1, [r4, #8]
    56b8:	4640      	mov	r0, r8
    56ba:	4798      	blx	r3
    56bc:	e012      	b.n	56e4 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    56be:	6821      	ldr	r1, [r4, #0]
    56c0:	0135      	lsls	r5, r6, #4
    56c2:	4429      	add	r1, r5
    56c4:	890b      	ldrh	r3, [r1, #8]
    56c6:	b19b      	cbz	r3, 56f0 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    56c8:	4648      	mov	r0, r9
    56ca:	f7fe f91d 	bl	3908 <bt_conn_addr_le_cmp>
    56ce:	b188      	cbz	r0, 56f4 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    56d0:	6820      	ldr	r0, [r4, #0]
    56d2:	4428      	add	r0, r5
    56d4:	f7fe f930 	bl	3938 <bt_conn_lookup_addr_le>
			if (tmp) {
    56d8:	b150      	cbz	r0, 56f0 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    56da:	7a43      	ldrb	r3, [r0, #9]
    56dc:	2b03      	cmp	r3, #3
    56de:	d105      	bne.n	56ec <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    56e0:	f7fe f966 	bl	39b0 <bt_conn_unref>
}
    56e4:	2001      	movs	r0, #1
    56e6:	b002      	add	sp, #8
    56e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    56ec:	f7fe f960 	bl	39b0 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    56f0:	3601      	adds	r6, #1
    56f2:	e7d5      	b.n	56a0 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    56f4:	4650      	mov	r0, sl
    56f6:	f7fd fd97 	bl	3228 <bt_addr_le_is_bonded>
    56fa:	4607      	mov	r7, r0
    56fc:	6820      	ldr	r0, [r4, #0]
    56fe:	b95f      	cbnz	r7, 5718 <disconnected_cb+0x94>
    5700:	4428      	add	r0, r5
    5702:	2207      	movs	r2, #7
    5704:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    5706:	9700      	str	r7, [sp, #0]
    5708:	f8cd 7003 	str.w	r7, [sp, #3]
    570c:	f7fc fa76 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    5710:	6823      	ldr	r3, [r4, #0]
    5712:	441d      	add	r5, r3
    5714:	812f      	strh	r7, [r5, #8]
    5716:	e7eb      	b.n	56f0 <disconnected_cb+0x6c>
    5718:	2207      	movs	r2, #7
    571a:	4651      	mov	r1, sl
    571c:	4428      	add	r0, r5
    571e:	f7fc fa6d 	bl	1bfc <memcpy>
    5722:	e7e5      	b.n	56f0 <disconnected_cb+0x6c>
    5724:	000057d5 	.word	0x000057d5

00005728 <read_name>:
{
    5728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    572c:	4e0d      	ldr	r6, [pc, #52]	; (5764 <read_name+0x3c>)
{
    572e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    5732:	4630      	mov	r0, r6
{
    5734:	4698      	mov	r8, r3
    5736:	4617      	mov	r7, r2
				 strlen(gap_name));
    5738:	f7fc fa36 	bl	1ba8 <strlen>
	if (offset > value_len) {
    573c:	b283      	uxth	r3, r0
    573e:	42ab      	cmp	r3, r5
    5740:	d30d      	bcc.n	575e <read_name+0x36>
	len = min(buf_len, value_len - offset);
    5742:	1b5c      	subs	r4, r3, r5
    5744:	4544      	cmp	r4, r8
    5746:	4623      	mov	r3, r4
    5748:	bfa8      	it	ge
    574a:	4643      	movge	r3, r8
    574c:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    574e:	4622      	mov	r2, r4
    5750:	1971      	adds	r1, r6, r5
    5752:	4638      	mov	r0, r7
    5754:	f7fc fa52 	bl	1bfc <memcpy>
}
    5758:	4620      	mov	r0, r4
    575a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    575e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    5762:	e7f9      	b.n	5758 <read_name+0x30>
    5764:	00012c98 	.word	0x00012c98

00005768 <bt_gatt_attr_read_ccc>:
{
    5768:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    576c:	68ce      	ldr	r6, [r1, #12]
{
    576e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    5772:	4604      	mov	r4, r0
    5774:	4690      	mov	r8, r2
    5776:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    5778:	2500      	movs	r5, #0
    577a:	6873      	ldr	r3, [r6, #4]
    577c:	429d      	cmp	r5, r3
    577e:	d20e      	bcs.n	579e <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5780:	6831      	ldr	r1, [r6, #0]
    5782:	ea4f 1905 	mov.w	r9, r5, lsl #4
    5786:	4449      	add	r1, r9
    5788:	4620      	mov	r0, r4
    578a:	f7fe f8bd 	bl	3908 <bt_conn_addr_le_cmp>
    578e:	b108      	cbz	r0, 5794 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    5790:	3501      	adds	r5, #1
    5792:	e7f2      	b.n	577a <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    5794:	6832      	ldr	r2, [r6, #0]
    5796:	444a      	add	r2, r9
    5798:	8913      	ldrh	r3, [r2, #8]
    579a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    579e:	6873      	ldr	r3, [r6, #4]
    57a0:	429d      	cmp	r5, r3
		value = 0x0000;
    57a2:	bf04      	itt	eq
    57a4:	2300      	moveq	r3, #0
    57a6:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    57aa:	2f02      	cmp	r7, #2
    57ac:	d80f      	bhi.n	57ce <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    57ae:	f1c7 0402 	rsb	r4, r7, #2
    57b2:	4554      	cmp	r4, sl
    57b4:	bfa8      	it	ge
    57b6:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    57b8:	f10d 0306 	add.w	r3, sp, #6
    57bc:	4622      	mov	r2, r4
    57be:	19d9      	adds	r1, r3, r7
    57c0:	4640      	mov	r0, r8
    57c2:	f7fc fa1b 	bl	1bfc <memcpy>
}
    57c6:	4620      	mov	r0, r4
    57c8:	b002      	add	sp, #8
    57ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    57ce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    57d2:	e7f8      	b.n	57c6 <bt_gatt_attr_read_ccc+0x5e>

000057d4 <bt_gatt_attr_write_ccc>:
{
    57d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d8:	b085      	sub	sp, #20
    57da:	4688      	mov	r8, r1
    57dc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
    57e0:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    57e4:	2902      	cmp	r1, #2
{
    57e6:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    57e8:	d853      	bhi.n	5892 <bt_gatt_attr_write_ccc+0xbe>
	if (offset + len > sizeof(u16_t)) {
    57ea:	4419      	add	r1, r3
    57ec:	2902      	cmp	r1, #2
    57ee:	461f      	mov	r7, r3
    57f0:	dc52      	bgt.n	5898 <bt_gatt_attr_write_ccc+0xc4>
	return ((u16_t)src[1] << 8) | src[0];
    57f2:	7853      	ldrb	r3, [r2, #1]
    57f4:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    57f6:	2400      	movs	r4, #0
    57f8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    57fc:	686b      	ldr	r3, [r5, #4]
    57fe:	429c      	cmp	r4, r3
    5800:	d206      	bcs.n	5810 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5802:	6829      	ldr	r1, [r5, #0]
    5804:	4648      	mov	r0, r9
    5806:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    580a:	f7fe f87d 	bl	3908 <bt_conn_addr_le_cmp>
    580e:	b9c0      	cbnz	r0, 5842 <bt_gatt_attr_write_ccc+0x6e>
	if (i == ccc->cfg_len) {
    5810:	686b      	ldr	r3, [r5, #4]
    5812:	429c      	cmp	r4, r3
    5814:	d121      	bne.n	585a <bt_gatt_attr_write_ccc+0x86>
		if (!value) {
    5816:	2e00      	cmp	r6, #0
    5818:	d037      	beq.n	588a <bt_gatt_attr_write_ccc+0xb6>
    581a:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    581c:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    581e:	686b      	ldr	r3, [r5, #4]
    5820:	429c      	cmp	r4, r3
    5822:	d217      	bcs.n	5854 <bt_gatt_attr_write_ccc+0x80>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    5824:	6828      	ldr	r0, [r5, #0]
    5826:	f8cd a000 	str.w	sl, [sp]
    582a:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    582e:	2207      	movs	r2, #7
    5830:	4669      	mov	r1, sp
    5832:	4458      	add	r0, fp
    5834:	f8cd a003 	str.w	sl, [sp, #3]
    5838:	f7fc f9cb 	bl	1bd2 <memcmp>
    583c:	b118      	cbz	r0, 5846 <bt_gatt_attr_write_ccc+0x72>
		for (i = 0; i < ccc->cfg_len; i++) {
    583e:	3401      	adds	r4, #1
    5840:	e7ed      	b.n	581e <bt_gatt_attr_write_ccc+0x4a>
	for (i = 0; i < ccc->cfg_len; i++) {
    5842:	3401      	adds	r4, #1
    5844:	e7da      	b.n	57fc <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    5846:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    5848:	2207      	movs	r2, #7
    584a:	f109 0144 	add.w	r1, r9, #68	; 0x44
    584e:	4458      	add	r0, fp
    5850:	f7fc f9d4 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    5854:	686b      	ldr	r3, [r5, #4]
    5856:	429c      	cmp	r4, r3
    5858:	d021      	beq.n	589e <bt_gatt_attr_write_ccc+0xca>
	ccc->cfg[i].value = value;
    585a:	682b      	ldr	r3, [r5, #0]
    585c:	0124      	lsls	r4, r4, #4
    585e:	4423      	add	r3, r4
    5860:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    5862:	892b      	ldrh	r3, [r5, #8]
    5864:	42b3      	cmp	r3, r6
    5866:	d003      	beq.n	5870 <bt_gatt_attr_write_ccc+0x9c>
		gatt_ccc_changed(attr, ccc);
    5868:	4629      	mov	r1, r5
    586a:	4640      	mov	r0, r8
    586c:	f7ff fd2d 	bl	52ca <gatt_ccc_changed>
	if (!value) {
    5870:	b95e      	cbnz	r6, 588a <bt_gatt_attr_write_ccc+0xb6>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    5872:	6828      	ldr	r0, [r5, #0]
    5874:	9602      	str	r6, [sp, #8]
    5876:	4420      	add	r0, r4
    5878:	2207      	movs	r2, #7
    587a:	a902      	add	r1, sp, #8
    587c:	f8cd 600b 	str.w	r6, [sp, #11]
    5880:	f7fc f9bc 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    5884:	682b      	ldr	r3, [r5, #0]
    5886:	441c      	add	r4, r3
    5888:	8126      	strh	r6, [r4, #8]
}
    588a:	4638      	mov	r0, r7
    588c:	b005      	add	sp, #20
    588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5892:	f06f 0706 	mvn.w	r7, #6
    5896:	e7f8      	b.n	588a <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    5898:	f06f 070c 	mvn.w	r7, #12
    589c:	e7f5      	b.n	588a <bt_gatt_attr_write_ccc+0xb6>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    589e:	f06f 0710 	mvn.w	r7, #16
    58a2:	e7f2      	b.n	588a <bt_gatt_attr_write_ccc+0xb6>

000058a4 <bt_gatt_attr_read_service>:
{
    58a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    58a6:	68c9      	ldr	r1, [r1, #12]
{
    58a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    58ac:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    58ae:	780a      	ldrb	r2, [r1, #0]
    58b0:	b992      	cbnz	r2, 58d8 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    58b2:	884a      	ldrh	r2, [r1, #2]
    58b4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    58b8:	2d02      	cmp	r5, #2
    58ba:	d819      	bhi.n	58f0 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    58bc:	f1c5 0402 	rsb	r4, r5, #2
    58c0:	429c      	cmp	r4, r3
    58c2:	bfa8      	it	ge
    58c4:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    58c6:	f10d 0306 	add.w	r3, sp, #6
    58ca:	4622      	mov	r2, r4
    58cc:	1959      	adds	r1, r3, r5
    58ce:	f7fc f995 	bl	1bfc <memcpy>
}
    58d2:	4620      	mov	r0, r4
    58d4:	b003      	add	sp, #12
    58d6:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    58d8:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    58da:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    58de:	d807      	bhi.n	58f0 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    58e0:	f1c5 0410 	rsb	r4, r5, #16
    58e4:	429c      	cmp	r4, r3
    58e6:	bfa8      	it	ge
    58e8:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    58ea:	4622      	mov	r2, r4
    58ec:	4429      	add	r1, r5
    58ee:	e7ee      	b.n	58ce <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    58f0:	f06f 0406 	mvn.w	r4, #6
    58f4:	e7ed      	b.n	58d2 <bt_gatt_attr_read_service+0x2e>
	...

000058f8 <notify_cb>:
{
    58f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    58fc:	f642 1302 	movw	r3, #10498	; 0x2902
{
    5900:	4605      	mov	r5, r0
    5902:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    5904:	2400      	movs	r4, #0
    5906:	4669      	mov	r1, sp
    5908:	6800      	ldr	r0, [r0, #0]
    590a:	f88d 4000 	strb.w	r4, [sp]
    590e:	f8ad 3002 	strh.w	r3, [sp, #2]
    5912:	f7fc fa47 	bl	1da4 <bt_uuid_cmp>
    5916:	b178      	cbz	r0, 5938 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    5918:	f642 0303 	movw	r3, #10243	; 0x2803
    591c:	6828      	ldr	r0, [r5, #0]
    591e:	f88d 4004 	strb.w	r4, [sp, #4]
    5922:	a901      	add	r1, sp, #4
    5924:	f8ad 3006 	strh.w	r3, [sp, #6]
    5928:	f7fc fa3c 	bl	1da4 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    592c:	1b00      	subs	r0, r0, r4
    592e:	bf18      	it	ne
    5930:	2001      	movne	r0, #1
}
    5932:	b003      	add	sp, #12
    5934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    5938:	68aa      	ldr	r2, [r5, #8]
    593a:	4b2b      	ldr	r3, [pc, #172]	; (59e8 <notify_cb+0xf0>)
    593c:	429a      	cmp	r2, r3
    593e:	d001      	beq.n	5944 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    5940:	2001      	movs	r0, #1
    5942:	e7f6      	b.n	5932 <notify_cb+0x3a>
	ccc = attr->user_data;
    5944:	68ef      	ldr	r7, [r5, #12]
    5946:	4d29      	ldr	r5, [pc, #164]	; (59ec <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    5948:	4604      	mov	r4, r0
    594a:	46a8      	mov	r8, r5
    594c:	4681      	mov	r9, r0
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	429c      	cmp	r4, r3
    5952:	d2f5      	bcs.n	5940 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    5954:	6838      	ldr	r0, [r7, #0]
    5956:	88b3      	ldrh	r3, [r6, #4]
    5958:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    595c:	8902      	ldrh	r2, [r0, #8]
    595e:	429a      	cmp	r2, r3
    5960:	d114      	bne.n	598c <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    5962:	f7fd ffe9 	bl	3938 <bt_conn_lookup_addr_le>
		if (!conn) {
    5966:	4683      	mov	fp, r0
    5968:	b9f8      	cbnz	r0, 59aa <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    596a:	683b      	ldr	r3, [r7, #0]
    596c:	4543      	cmp	r3, r8
    596e:	d10d      	bne.n	598c <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    5970:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    5972:	a801      	add	r0, sp, #4
    5974:	8c1a      	ldrh	r2, [r3, #32]
    5976:	69d9      	ldr	r1, [r3, #28]
    5978:	f7fc f940 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    597c:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    597e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5982:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    5984:	b928      	cbnz	r0, 5992 <notify_cb+0x9a>
    5986:	b942      	cbnz	r2, 599a <notify_cb+0xa2>
		*stored = data;
    5988:	9801      	ldr	r0, [sp, #4]
    598a:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    598c:	3401      	adds	r4, #1
    598e:	3510      	adds	r5, #16
    5990:	e7dd      	b.n	594e <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    5992:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    5996:	4281      	cmp	r1, r0
    5998:	d305      	bcc.n	59a6 <notify_cb+0xae>
    599a:	429a      	cmp	r2, r3
    599c:	d2f6      	bcs.n	598c <notify_cb+0x94>
	if (*end < new_end) {
    599e:	429a      	cmp	r2, r3
    59a0:	d2f4      	bcs.n	598c <notify_cb+0x94>
		*end = new_end;
    59a2:	81eb      	strh	r3, [r5, #14]
    59a4:	e7f2      	b.n	598c <notify_cb+0x94>
		*start = new_start;
    59a6:	81a9      	strh	r1, [r5, #12]
    59a8:	e7f9      	b.n	599e <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    59aa:	7a43      	ldrb	r3, [r0, #9]
    59ac:	2b03      	cmp	r3, #3
    59ae:	d002      	beq.n	59b6 <notify_cb+0xbe>
			bt_conn_unref(conn);
    59b0:	f7fd fffe 	bl	39b0 <bt_conn_unref>
    59b4:	e7ea      	b.n	598c <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    59b6:	88b3      	ldrh	r3, [r6, #4]
    59b8:	2b02      	cmp	r3, #2
    59ba:	d10c      	bne.n	59d6 <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    59bc:	6971      	ldr	r1, [r6, #20]
    59be:	f7ff fd73 	bl	54a8 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    59c2:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    59c4:	4658      	mov	r0, fp
    59c6:	f7fd fff3 	bl	39b0 <bt_conn_unref>
		if (err < 0) {
    59ca:	f1ba 0f00 	cmp.w	sl, #0
    59ce:	db09      	blt.n	59e4 <notify_cb+0xec>
		data->err = 0;
    59d0:	f8c6 9000 	str.w	r9, [r6]
    59d4:	e7da      	b.n	598c <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    59d6:	68b1      	ldr	r1, [r6, #8]
    59d8:	8a33      	ldrh	r3, [r6, #16]
    59da:	68f2      	ldr	r2, [r6, #12]
    59dc:	8a09      	ldrh	r1, [r1, #16]
    59de:	f7ff fcc9 	bl	5374 <gatt_notify>
    59e2:	e7ee      	b.n	59c2 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    59e4:	2000      	movs	r0, #0
    59e6:	e7a4      	b.n	5932 <notify_cb+0x3a>
    59e8:	000057d5 	.word	0x000057d5
    59ec:	2000037c 	.word	0x2000037c

000059f0 <bt_gatt_init>:
{
    59f0:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    59f2:	4806      	ldr	r0, [pc, #24]	; (5a0c <bt_gatt_init+0x1c>)
    59f4:	f7ff fcea 	bl	53cc <gatt_register>
	gatt_register(&gatt_svc);
    59f8:	4805      	ldr	r0, [pc, #20]	; (5a10 <bt_gatt_init+0x20>)
    59fa:	f7ff fce7 	bl	53cc <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    59fe:	4905      	ldr	r1, [pc, #20]	; (5a14 <bt_gatt_init+0x24>)
    5a00:	4805      	ldr	r0, [pc, #20]	; (5a18 <bt_gatt_init+0x28>)
}
    5a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    5a06:	f00c bb5f 	b.w	120c8 <k_delayed_work_init>
    5a0a:	bf00      	nop
    5a0c:	200036bc 	.word	0x200036bc
    5a10:	20003718 	.word	0x20003718
    5a14:	00005a9d 	.word	0x00005a9d
    5a18:	20000350 	.word	0x20000350

00005a1c <bt_gatt_foreach_attr>:
{
    5a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a20:	4699      	mov	r9, r3
    5a22:	4b12      	ldr	r3, [pc, #72]	; (5a6c <bt_gatt_foreach_attr+0x50>)
    5a24:	681c      	ldr	r4, [r3, #0]
    5a26:	4606      	mov	r6, r0
    5a28:	460f      	mov	r7, r1
    5a2a:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5a2c:	b1dc      	cbz	r4, 5a66 <bt_gatt_foreach_attr+0x4a>
    5a2e:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    5a30:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5a34:	b1bc      	cbz	r4, 5a66 <bt_gatt_foreach_attr+0x4a>
    5a36:	2500      	movs	r5, #0
    5a38:	e006      	b.n	5a48 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    5a3a:	6820      	ldr	r0, [r4, #0]
    5a3c:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    5a40:	8a03      	ldrh	r3, [r0, #16]
    5a42:	42b3      	cmp	r3, r6
    5a44:	d207      	bcs.n	5a56 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    5a46:	3501      	adds	r5, #1
    5a48:	6863      	ldr	r3, [r4, #4]
    5a4a:	42ab      	cmp	r3, r5
    5a4c:	d8f5      	bhi.n	5a3a <bt_gatt_foreach_attr+0x1e>
	return node->next;
    5a4e:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5a50:	b14c      	cbz	r4, 5a66 <bt_gatt_foreach_attr+0x4a>
    5a52:	3c08      	subs	r4, #8
    5a54:	e7ee      	b.n	5a34 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    5a56:	42bb      	cmp	r3, r7
    5a58:	d8f5      	bhi.n	5a46 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    5a5a:	4649      	mov	r1, r9
    5a5c:	47c0      	blx	r8
    5a5e:	2800      	cmp	r0, #0
    5a60:	d1f1      	bne.n	5a46 <bt_gatt_foreach_attr+0x2a>
    5a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a6a:	bf00      	nop
    5a6c:	20000320 	.word	0x20000320

00005a70 <bt_gatt_indicate.part.11>:
int bt_gatt_indicate(struct bt_conn *conn,
    5a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    5a72:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    5a76:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    5a78:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    5a7a:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    5a7c:	2302      	movs	r3, #2
    5a7e:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    5a82:	4a05      	ldr	r2, [pc, #20]	; (5a98 <bt_gatt_indicate.part.11+0x28>)
    5a84:	8a00      	ldrh	r0, [r0, #16]
    5a86:	466b      	mov	r3, sp
    5a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5a8c:	f7ff ffc6 	bl	5a1c <bt_gatt_foreach_attr>
}
    5a90:	9800      	ldr	r0, [sp, #0]
    5a92:	b007      	add	sp, #28
    5a94:	f85d fb04 	ldr.w	pc, [sp], #4
    5a98:	000058f9 	.word	0x000058f9

00005a9c <sc_process>:
{
    5a9c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    5a9e:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    5aa2:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    5aa6:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    5aa8:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    5aac:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    5ab0:	3828      	subs	r0, #40	; 0x28
    5ab2:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ab6:	f3bf 8f5b 	dmb	ish
    5aba:	e854 2f00 	ldrex	r2, [r4]
    5abe:	f022 0201 	bic.w	r2, r2, #1
    5ac2:	e844 2100 	strex	r1, r2, [r4]
    5ac6:	2900      	cmp	r1, #0
    5ac8:	d1f7      	bne.n	5aba <sc_process+0x1e>
    5aca:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    5ace:	2200      	movs	r2, #0
    5ad0:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    5ad4:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    5ad8:	4a0e      	ldr	r2, [pc, #56]	; (5b14 <sc_process+0x78>)
    5ada:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    5ade:	4a0e      	ldr	r2, [pc, #56]	; (5b18 <sc_process+0x7c>)
    5ae0:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    5ae4:	aa01      	add	r2, sp, #4
    5ae6:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    5aea:	2204      	movs	r2, #4
    5aec:	f823 2c08 	strh.w	r2, [r3, #-8]
    5af0:	f7ff ffbe 	bl	5a70 <bt_gatt_indicate.part.11>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    5af4:	b958      	cbnz	r0, 5b0e <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5af6:	f3bf 8f5b 	dmb	ish
    5afa:	e854 3f00 	ldrex	r3, [r4]
    5afe:	f043 0302 	orr.w	r3, r3, #2
    5b02:	e844 3200 	strex	r2, r3, [r4]
    5b06:	2a00      	cmp	r2, #0
    5b08:	d1f7      	bne.n	5afa <sc_process+0x5e>
    5b0a:	f3bf 8f5b 	dmb	ish
}
    5b0e:	b002      	add	sp, #8
    5b10:	bd10      	pop	{r4, pc}
    5b12:	bf00      	nop
    5b14:	200036f0 	.word	0x200036f0
    5b18:	0000560d 	.word	0x0000560d

00005b1c <bt_gatt_attr_next>:
{
    5b1c:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    5b1e:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    5b20:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    5b22:	3101      	adds	r1, #1
    5b24:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    5b26:	2200      	movs	r2, #0
    5b28:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    5b2c:	4608      	mov	r0, r1
    5b2e:	4a03      	ldr	r2, [pc, #12]	; (5b3c <bt_gatt_attr_next+0x20>)
    5b30:	f7ff ff74 	bl	5a1c <bt_gatt_foreach_attr>
}
    5b34:	9801      	ldr	r0, [sp, #4]
    5b36:	b003      	add	sp, #12
    5b38:	f85d fb04 	ldr.w	pc, [sp], #4
    5b3c:	000052c5 	.word	0x000052c5

00005b40 <bt_gatt_attr_read_chrc>:
{
    5b40:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    5b42:	68cf      	ldr	r7, [r1, #12]
{
    5b44:	b087      	sub	sp, #28
    5b46:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    5b48:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    5b4a:	793b      	ldrb	r3, [r7, #4]
{
    5b4c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    5b50:	f88d 3004 	strb.w	r3, [sp, #4]
{
    5b54:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    5b56:	f7ff ffe1 	bl	5b1c <bt_gatt_attr_next>
	if (!next) {
    5b5a:	b9d0      	cbnz	r0, 5b92 <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
    5b5c:	f88d 0005 	strb.w	r0, [sp, #5]
    5b60:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    5b64:	6839      	ldr	r1, [r7, #0]
    5b66:	780b      	ldrb	r3, [r1, #0]
    5b68:	b9bb      	cbnz	r3, 5b9a <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    5b6a:	884b      	ldrh	r3, [r1, #2]
    5b6c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    5b70:	2305      	movs	r3, #5
	if (offset > value_len) {
    5b72:	42ab      	cmp	r3, r5
    5b74:	d319      	bcc.n	5baa <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
    5b76:	1b5b      	subs	r3, r3, r5
    5b78:	42a3      	cmp	r3, r4
    5b7a:	bfa8      	it	ge
    5b7c:	4623      	movge	r3, r4
    5b7e:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    5b80:	ab01      	add	r3, sp, #4
    5b82:	4622      	mov	r2, r4
    5b84:	1959      	adds	r1, r3, r5
    5b86:	4630      	mov	r0, r6
    5b88:	f7fc f838 	bl	1bfc <memcpy>
}
    5b8c:	4620      	mov	r0, r4
    5b8e:	b007      	add	sp, #28
    5b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    5b92:	8a03      	ldrh	r3, [r0, #16]
    5b94:	f8ad 3005 	strh.w	r3, [sp, #5]
    5b98:	e7e4      	b.n	5b64 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    5b9a:	2210      	movs	r2, #16
    5b9c:	3101      	adds	r1, #1
    5b9e:	f10d 0007 	add.w	r0, sp, #7
    5ba2:	f7fc f82b 	bl	1bfc <memcpy>
		value_len += 16;
    5ba6:	2313      	movs	r3, #19
    5ba8:	e7e3      	b.n	5b72 <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5baa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    5bae:	e7ed      	b.n	5b8c <bt_gatt_attr_read_chrc+0x4c>

00005bb0 <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    5bb0:	7a43      	ldrb	r3, [r0, #9]
    5bb2:	2b03      	cmp	r3, #3
{
    5bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bb8:	4680      	mov	r8, r0
    5bba:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    5bbc:	d144      	bne.n	5c48 <bt_gatt_unsubscribe+0x98>
    5bbe:	4b2b      	ldr	r3, [pc, #172]	; (5c6c <bt_gatt_unsubscribe+0xbc>)
    5bc0:	681c      	ldr	r4, [r3, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    5bc2:	b1cc      	cbz	r4, 5bf8 <bt_gatt_unsubscribe+0x48>
    5bc4:	f1b4 0528 	subs.w	r5, r4, #40	; 0x28
    5bc8:	d144      	bne.n	5c54 <bt_gatt_unsubscribe+0xa4>
    5bca:	462c      	mov	r4, r5
    5bcc:	f04f 0b00 	mov.w	fp, #0
		/* Remove subscription */
		if (params == tmp) {
			found = true;
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    5bd0:	f8df a098 	ldr.w	sl, [pc, #152]	; 5c6c <bt_gatt_unsubscribe+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    5bd4:	465a      	mov	r2, fp
    5bd6:	465f      	mov	r7, fp
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    5bd8:	f106 0928 	add.w	r9, r6, #40	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    5bdc:	b975      	cbnz	r5, 5bfc <bt_gatt_unsubscribe+0x4c>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    5bde:	2a00      	cmp	r2, #0
    5be0:	d035      	beq.n	5c4e <bt_gatt_unsubscribe+0x9e>
		return -EINVAL;
	}

	if (has_subscription) {
    5be2:	b33f      	cbz	r7, 5c34 <bt_gatt_unsubscribe+0x84>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    5be4:	69f4      	ldr	r4, [r6, #28]
    5be6:	462b      	mov	r3, r5
    5be8:	462a      	mov	r2, r5
    5bea:	4631      	mov	r1, r6
    5bec:	4640      	mov	r0, r8
    5bee:	47a0      	blx	r4
		return 0;
    5bf0:	4628      	mov	r0, r5

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    5bf2:	b003      	add	sp, #12
    5bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5bf8:	4625      	mov	r5, r4
    5bfa:	e7e7      	b.n	5bcc <bt_gatt_unsubscribe+0x1c>
		if (params == tmp) {
    5bfc:	42b5      	cmp	r5, r6
    5bfe:	d108      	bne.n	5c12 <bt_gatt_unsubscribe+0x62>
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    5c00:	464a      	mov	r2, r9
    5c02:	4659      	mov	r1, fp
    5c04:	4650      	mov	r0, sl
    5c06:	f7ff fb4c 	bl	52a2 <sys_slist_remove>
			found = true;
    5c0a:	2201      	movs	r2, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    5c0c:	bb3c      	cbnz	r4, 5c5e <bt_gatt_unsubscribe+0xae>
    5c0e:	4623      	mov	r3, r4
    5c10:	e028      	b.n	5c64 <bt_gatt_unsubscribe+0xb4>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    5c12:	f105 0114 	add.w	r1, r5, #20
    5c16:	4640      	mov	r0, r8
    5c18:	9201      	str	r2, [sp, #4]
    5c1a:	f7fd fe75 	bl	3908 <bt_conn_addr_le_cmp>
			prev = &tmp->node;
    5c1e:	f105 0b28 	add.w	fp, r5, #40	; 0x28
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    5c22:	9a01      	ldr	r2, [sp, #4]
    5c24:	2800      	cmp	r0, #0
    5c26:	d1f1      	bne.n	5c0c <bt_gatt_unsubscribe+0x5c>
    5c28:	8c29      	ldrh	r1, [r5, #32]
    5c2a:	8c33      	ldrh	r3, [r6, #32]
			has_subscription = true;
    5c2c:	4299      	cmp	r1, r3
    5c2e:	bf08      	it	eq
    5c30:	2701      	moveq	r7, #1
    5c32:	e7eb      	b.n	5c0c <bt_gatt_unsubscribe+0x5c>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    5c34:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	params->value = 0x0000;
    5c36:	84b7      	strh	r7, [r6, #36]	; 0x24
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    5c38:	4633      	mov	r3, r6
    5c3a:	463a      	mov	r2, r7
    5c3c:	4640      	mov	r0, r8
}
    5c3e:	b003      	add	sp, #12
    5c40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    5c44:	f7ff bc0a 	b.w	545c <gatt_write_ccc.constprop.18>
		return -ENOTCONN;
    5c48:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5c4c:	e7d1      	b.n	5bf2 <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    5c4e:	f06f 0015 	mvn.w	r0, #21
    5c52:	e7ce      	b.n	5bf2 <bt_gatt_unsubscribe+0x42>
    5c54:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    5c56:	2c00      	cmp	r4, #0
    5c58:	d0b8      	beq.n	5bcc <bt_gatt_unsubscribe+0x1c>
    5c5a:	3c28      	subs	r4, #40	; 0x28
    5c5c:	e7b6      	b.n	5bcc <bt_gatt_unsubscribe+0x1c>
    5c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5c60:	b103      	cbz	r3, 5c64 <bt_gatt_unsubscribe+0xb4>
    5c62:	3b28      	subs	r3, #40	; 0x28
    5c64:	4625      	mov	r5, r4
    5c66:	461c      	mov	r4, r3
    5c68:	e7b8      	b.n	5bdc <bt_gatt_unsubscribe+0x2c>
    5c6a:	bf00      	nop
    5c6c:	2000038c 	.word	0x2000038c

00005c70 <bt_gatt_notification>:
{
    5c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c74:	4699      	mov	r9, r3
    5c76:	4b17      	ldr	r3, [pc, #92]	; (5cd4 <bt_gatt_notification+0x64>)
    5c78:	681b      	ldr	r3, [r3, #0]
    5c7a:	4605      	mov	r5, r0
    5c7c:	460e      	mov	r6, r1
    5c7e:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    5c80:	b333      	cbz	r3, 5cd0 <bt_gatt_notification+0x60>
    5c82:	f1b3 0a28 	subs.w	sl, r3, #40	; 0x28
    5c86:	d101      	bne.n	5c8c <bt_gatt_notification+0x1c>
    5c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c8c:	681c      	ldr	r4, [r3, #0]
    5c8e:	b104      	cbz	r4, 5c92 <bt_gatt_notification+0x22>
    5c90:	3c28      	subs	r4, #40	; 0x28
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    5c92:	f10a 0114 	add.w	r1, sl, #20
    5c96:	4628      	mov	r0, r5
    5c98:	f7fd fe36 	bl	3908 <bt_conn_addr_le_cmp>
    5c9c:	b978      	cbnz	r0, 5cbe <bt_gatt_notification+0x4e>
    5c9e:	f8ba 3020 	ldrh.w	r3, [sl, #32]
    5ca2:	42b3      	cmp	r3, r6
    5ca4:	d10b      	bne.n	5cbe <bt_gatt_notification+0x4e>
		if (params->notify(conn, params, data, length) ==
    5ca6:	f8da 701c 	ldr.w	r7, [sl, #28]
    5caa:	464b      	mov	r3, r9
    5cac:	4642      	mov	r2, r8
    5cae:	4651      	mov	r1, sl
    5cb0:	4628      	mov	r0, r5
    5cb2:	47b8      	blx	r7
    5cb4:	b918      	cbnz	r0, 5cbe <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
    5cb6:	4651      	mov	r1, sl
    5cb8:	4628      	mov	r0, r5
    5cba:	f7ff ff79 	bl	5bb0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    5cbe:	b90c      	cbnz	r4, 5cc4 <bt_gatt_notification+0x54>
    5cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5cc6:	b103      	cbz	r3, 5cca <bt_gatt_notification+0x5a>
    5cc8:	3b28      	subs	r3, #40	; 0x28
    5cca:	46a2      	mov	sl, r4
    5ccc:	461c      	mov	r4, r3
    5cce:	e7e0      	b.n	5c92 <bt_gatt_notification+0x22>
    5cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cd4:	2000038c 	.word	0x2000038c

00005cd8 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    5cd8:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    5cda:	4a0e      	ldr	r2, [pc, #56]	; (5d14 <bt_gatt_connected+0x3c>)
    5cdc:	4603      	mov	r3, r0
{
    5cde:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    5ce0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5ce4:	2001      	movs	r0, #1
    5ce6:	f7ff fe99 	bl	5a1c <bt_gatt_foreach_attr>
    5cea:	4b0b      	ldr	r3, [pc, #44]	; (5d18 <bt_gatt_connected+0x40>)
    5cec:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    5cee:	b10c      	cbz	r4, 5cf4 <bt_gatt_connected+0x1c>
    5cf0:	3c28      	subs	r4, #40	; 0x28
    5cf2:	b904      	cbnz	r4, 5cf6 <bt_gatt_connected+0x1e>
    5cf4:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    5cf6:	f104 0114 	add.w	r1, r4, #20
    5cfa:	4628      	mov	r0, r5
    5cfc:	f7fd fe04 	bl	3908 <bt_conn_addr_le_cmp>
    5d00:	b928      	cbnz	r0, 5d0e <bt_gatt_connected+0x36>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    5d02:	4623      	mov	r3, r4
    5d04:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    5d06:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    5d08:	4628      	mov	r0, r5
    5d0a:	f7ff fba7 	bl	545c <gatt_write_ccc.constprop.18>
    5d0e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    5d10:	e7ed      	b.n	5cee <bt_gatt_connected+0x16>
    5d12:	bf00      	nop
    5d14:	0000559d 	.word	0x0000559d
    5d18:	2000038c 	.word	0x2000038c

00005d1c <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    5d1c:	4603      	mov	r3, r0
{
    5d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    5d22:	4a21      	ldr	r2, [pc, #132]	; (5da8 <bt_gatt_disconnected+0x8c>)
{
    5d24:	4607      	mov	r7, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    5d26:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5d2a:	2001      	movs	r0, #1
    5d2c:	f7ff fe76 	bl	5a1c <bt_gatt_foreach_attr>
    5d30:	4b1e      	ldr	r3, [pc, #120]	; (5dac <bt_gatt_disconnected+0x90>)
    5d32:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    5d34:	b3b3      	cbz	r3, 5da4 <bt_gatt_disconnected+0x88>
    5d36:	f1b3 0628 	subs.w	r6, r3, #40	; 0x28
    5d3a:	d11b      	bne.n	5d74 <bt_gatt_disconnected+0x58>
    5d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    5d40:	4640      	mov	r0, r8
    5d42:	f7fd fa71 	bl	3228 <bt_addr_le_is_bonded>
    5d46:	b118      	cbz	r0, 5d50 <bt_gatt_disconnected+0x34>
    5d48:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    5d4c:	07db      	lsls	r3, r3, #31
    5d4e:	d509      	bpl.n	5d64 <bt_gatt_disconnected+0x48>
			params->value = 0;
    5d50:	f8a6 9024 	strh.w	r9, [r6, #36]	; 0x24
			gatt_subscription_remove(conn, prev, params);
    5d54:	4632      	mov	r2, r6
    5d56:	4629      	mov	r1, r5
    5d58:	4638      	mov	r0, r7
    5d5a:	f7ff fad7 	bl	530c <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    5d5e:	b9dc      	cbnz	r4, 5d98 <bt_gatt_disconnected+0x7c>
    5d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    5d64:	7d33      	ldrb	r3, [r6, #20]
    5d66:	b1a3      	cbz	r3, 5d92 <bt_gatt_disconnected+0x76>
    5d68:	2207      	movs	r2, #7
    5d6a:	4641      	mov	r1, r8
    5d6c:	4650      	mov	r0, sl
    5d6e:	f7fb ff45 	bl	1bfc <memcpy>
    5d72:	e00e      	b.n	5d92 <bt_gatt_disconnected+0x76>
    5d74:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    5d76:	b104      	cbz	r4, 5d7a <bt_gatt_disconnected+0x5e>
    5d78:	3c28      	subs	r4, #40	; 0x28
    5d7a:	2500      	movs	r5, #0
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    5d7c:	f107 0844 	add.w	r8, r7, #68	; 0x44
			params->value = 0;
    5d80:	46a9      	mov	r9, r5
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    5d82:	f106 0a14 	add.w	sl, r6, #20
    5d86:	4651      	mov	r1, sl
    5d88:	4638      	mov	r0, r7
    5d8a:	f7fd fdbd 	bl	3908 <bt_conn_addr_le_cmp>
    5d8e:	2800      	cmp	r0, #0
    5d90:	d0d6      	beq.n	5d40 <bt_gatt_disconnected+0x24>
			prev = &params->node;
    5d92:	f106 0528 	add.w	r5, r6, #40	; 0x28
    5d96:	e7e2      	b.n	5d5e <bt_gatt_disconnected+0x42>
    5d98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    5d9a:	b103      	cbz	r3, 5d9e <bt_gatt_disconnected+0x82>
    5d9c:	3b28      	subs	r3, #40	; 0x28
    5d9e:	4626      	mov	r6, r4
    5da0:	461c      	mov	r4, r3
    5da2:	e7ee      	b.n	5d82 <bt_gatt_disconnected+0x66>
    5da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5da8:	00005685 	.word	0x00005685
    5dac:	2000038c 	.word	0x2000038c

00005db0 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    5db0:	4b04      	ldr	r3, [pc, #16]	; (5dc4 <bt_smp_accept+0x14>)
    5db2:	6818      	ldr	r0, [r3, #0]
    5db4:	b918      	cbnz	r0, 5dbe <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    5db6:	4a04      	ldr	r2, [pc, #16]	; (5dc8 <bt_smp_accept+0x18>)
    5db8:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    5dba:	600b      	str	r3, [r1, #0]

		return 0;
    5dbc:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    5dbe:	f06f 000b 	mvn.w	r0, #11
}
    5dc2:	4770      	bx	lr
    5dc4:	20000394 	.word	0x20000394
    5dc8:	20003730 	.word	0x20003730

00005dcc <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    5dcc:	2100      	movs	r1, #0
{
    5dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    5dd2:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    5dd4:	4608      	mov	r0, r1
    5dd6:	f7fe f914 	bl	4002 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5dda:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    5dde:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5de0:	2101      	movs	r1, #1
    5de2:	4630      	mov	r0, r6
    5de4:	f00a fe24 	bl	10a30 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    5de8:	2505      	movs	r5, #5
    5dea:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    5dec:	2101      	movs	r1, #1
    5dee:	4630      	mov	r0, r6
    5df0:	f00a fe1e 	bl	10a30 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    5df4:	7005      	strb	r5, [r0, #0]
    5df6:	4622      	mov	r2, r4
    5df8:	4638      	mov	r0, r7
    5dfa:	2300      	movs	r3, #0
    5dfc:	2106      	movs	r1, #6
}
    5dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5e02:	f7fe b901 	b.w	4008 <bt_l2cap_send_cb>

00005e06 <bt_smp_sign_verify>:
    5e06:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5e0a:	4770      	bx	lr

00005e0c <bt_smp_sign>:
}
    5e0c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5e10:	4770      	bx	lr
	...

00005e14 <bt_smp_init>:

int bt_smp_init(void)
{
    5e14:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5e16:	4802      	ldr	r0, [pc, #8]	; (5e20 <bt_smp_init+0xc>)
    5e18:	f7fe f84e 	bl	3eb8 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    5e1c:	2000      	movs	r0, #0
    5e1e:	bd08      	pop	{r3, pc}
    5e20:	20003724 	.word	0x20003724

00005e24 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    5e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    5e26:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5e28:	1dc3      	adds	r3, r0, #7
{
    5e2a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5e2c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5e30:	1e50      	subs	r0, r2, #1
{
    5e32:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5e34:	b280      	uxth	r0, r0
{
    5e36:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5e38:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5e3a:	2100      	movs	r1, #0
    5e3c:	2204      	movs	r2, #4
    5e3e:	fb06 5000 	mla	r0, r6, r0, r5
    5e42:	f7fb ff07 	bl	1c54 <memset>
    5e46:	3c02      	subs	r4, #2
    5e48:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    5e4a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    5e4e:	42bc      	cmp	r4, r7
    5e50:	d101      	bne.n	5e56 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    5e52:	b003      	add	sp, #12
    5e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    5e56:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    5e5a:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    5e5c:	2204      	movs	r2, #4
    5e5e:	1b80      	subs	r0, r0, r6
    5e60:	eb0d 0102 	add.w	r1, sp, r2
    5e64:	4428      	add	r0, r5
    5e66:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    5e68:	9301      	str	r3, [sp, #4]
    5e6a:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    5e6c:	f7fb fec6 	bl	1bfc <memcpy>
    5e70:	e7ed      	b.n	5e4e <mem_init+0x2a>

00005e72 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    5e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    5e74:	6805      	ldr	r5, [r0, #0]
{
    5e76:	4606      	mov	r6, r0
	if (*mem_head) {
    5e78:	b195      	cbz	r5, 5ea0 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5e7a:	1deb      	adds	r3, r5, #7
    5e7c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    5e80:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5e82:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    5e84:	4629      	mov	r1, r5
    5e86:	eb0d 0002 	add.w	r0, sp, r2
    5e8a:	f7fb feb7 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    5e8e:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    5e90:	3c01      	subs	r4, #1
    5e92:	b2a4      	uxth	r4, r4
		if (head) {
    5e94:	b11b      	cbz	r3, 5e9e <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    5e96:	1dda      	adds	r2, r3, #7
    5e98:	f022 0203 	bic.w	r2, r2, #3
    5e9c:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    5e9e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    5ea0:	4628      	mov	r0, r5
    5ea2:	b002      	add	sp, #8
    5ea4:	bd70      	pop	{r4, r5, r6, pc}

00005ea6 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    5ea6:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    5ea8:	680c      	ldr	r4, [r1, #0]
{
    5eaa:	4606      	mov	r6, r0
    5eac:	460d      	mov	r5, r1
	if (*mem_head) {
    5eae:	b11c      	cbz	r4, 5eb8 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5eb0:	1de3      	adds	r3, r4, #7
    5eb2:	f023 0303 	bic.w	r3, r3, #3
    5eb6:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    5eb8:	2204      	movs	r2, #4
    5eba:	4629      	mov	r1, r5
    5ebc:	4630      	mov	r0, r6
    5ebe:	f7fb fe9d 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    5ec2:	1df2      	adds	r2, r6, #7
    5ec4:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    5ec8:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    5eca:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    5ecc:	602e      	str	r6, [r5, #0]
    5ece:	bd70      	pop	{r4, r5, r6, pc}

00005ed0 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    5ed0:	b118      	cbz	r0, 5eda <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    5ed2:	3007      	adds	r0, #7
    5ed4:	f020 0003 	bic.w	r0, r0, #3
    5ed8:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    5eda:	4770      	bx	lr

00005edc <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    5edc:	fb02 0001 	mla	r0, r2, r1, r0
    5ee0:	4770      	bx	lr

00005ee2 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    5ee2:	1a40      	subs	r0, r0, r1
    5ee4:	b280      	uxth	r0, r0
}
    5ee6:	fbb0 f0f2 	udiv	r0, r0, r2
    5eea:	4770      	bx	lr

00005eec <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    5eec:	b510      	push	{r4, lr}
	src += len;
    5eee:	4411      	add	r1, r2
    5ef0:	3801      	subs	r0, #1
	while (len--) {
    5ef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5ef6:	3a01      	subs	r2, #1
    5ef8:	b292      	uxth	r2, r2
    5efa:	429a      	cmp	r2, r3
    5efc:	d100      	bne.n	5f00 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    5efe:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    5f00:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    5f04:	f800 4f01 	strb.w	r4, [r0, #1]!
    5f08:	e7f5      	b.n	5ef6 <mem_rcopy+0xa>

00005f0a <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    5f0a:	4401      	add	r1, r0
	while (len--) {
    5f0c:	4288      	cmp	r0, r1
    5f0e:	d101      	bne.n	5f14 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    5f10:	2000      	movs	r0, #0
    5f12:	4770      	bx	lr
		if (*src++) {
    5f14:	f810 3b01 	ldrb.w	r3, [r0], #1
    5f18:	2b00      	cmp	r3, #0
    5f1a:	d0f7      	beq.n	5f0c <mem_nz+0x2>
			return 1;
    5f1c:	2001      	movs	r0, #1
}
    5f1e:	4770      	bx	lr

00005f20 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    5f20:	6010      	str	r0, [r2, #0]
    5f22:	6008      	str	r0, [r1, #0]

	return link;
}
    5f24:	4770      	bx	lr

00005f26 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    5f26:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    5f28:	6814      	ldr	r4, [r2, #0]
    5f2a:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    5f2c:	6814      	ldr	r4, [r2, #0]
    5f2e:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    5f30:	6010      	str	r0, [r2, #0]

	return link;
}
    5f32:	bd10      	pop	{r4, pc}

00005f34 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    5f34:	4288      	cmp	r0, r1
    5f36:	d003      	beq.n	5f40 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    5f38:	b11a      	cbz	r2, 5f42 <memq_peek+0xe>
		*mem = head->mem;
    5f3a:	6843      	ldr	r3, [r0, #4]
    5f3c:	6013      	str	r3, [r2, #0]
    5f3e:	4770      	bx	lr
		return NULL;
    5f40:	2000      	movs	r0, #0
	}

	return head;
}
    5f42:	4770      	bx	lr

00005f44 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    5f44:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    5f46:	4283      	cmp	r3, r0
    5f48:	d009      	beq.n	5f5e <memq_dequeue+0x1a>
	if (mem) {
    5f4a:	b122      	cbz	r2, 5f56 <memq_dequeue+0x12>
		*mem = head->mem;
    5f4c:	6858      	ldr	r0, [r3, #4]
    5f4e:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    5f50:	681a      	ldr	r2, [r3, #0]
    5f52:	600a      	str	r2, [r1, #0]

	return link;
    5f54:	e001      	b.n	5f5a <memq_dequeue+0x16>
	if (!link) {
    5f56:	2b00      	cmp	r3, #0
    5f58:	d1fa      	bne.n	5f50 <memq_dequeue+0xc>
}
    5f5a:	4618      	mov	r0, r3
    5f5c:	4770      	bx	lr
		return NULL;
    5f5e:	2300      	movs	r3, #0
    5f60:	e7fb      	b.n	5f5a <memq_dequeue+0x16>
	...

00005f64 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    5f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    5f68:	4f11      	ldr	r7, [pc, #68]	; (5fb0 <mayfly_init+0x4c>)
    5f6a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 5fb4 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    5f6e:	2604      	movs	r6, #4
	while (callee_id--) {
    5f70:	3e01      	subs	r6, #1
    5f72:	b2f6      	uxtb	r6, r6
    5f74:	2eff      	cmp	r6, #255	; 0xff
    5f76:	d019      	beq.n	5fac <mayfly_init+0x48>
    5f78:	b233      	sxth	r3, r6
    5f7a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    5f7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5f82:	011d      	lsls	r5, r3, #4
    5f84:	2404      	movs	r4, #4
    5f86:	f04f 0a0c 	mov.w	sl, #12
    5f8a:	e00a      	b.n	5fa2 <mayfly_init+0x3e>
    5f8c:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    5f90:	1d0a      	adds	r2, r1, #4
    5f92:	eb04 0008 	add.w	r0, r4, r8
    5f96:	443a      	add	r2, r7
    5f98:	4439      	add	r1, r7
    5f9a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    5f9e:	f7ff ffbf 	bl	5f20 <memq_init>
		while (caller_id--) {
    5fa2:	3c01      	subs	r4, #1
    5fa4:	b2e4      	uxtb	r4, r4
    5fa6:	2cff      	cmp	r4, #255	; 0xff
    5fa8:	d1f0      	bne.n	5f8c <mayfly_init+0x28>
    5faa:	e7e1      	b.n	5f70 <mayfly_init+0xc>
    5fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fb0:	200004a8 	.word	0x200004a8
    5fb4:	20000428 	.word	0x20000428

00005fb8 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    5fb8:	b4f0      	push	{r4, r5, r6, r7}
    5fba:	4b12      	ldr	r3, [pc, #72]	; (6004 <mayfly_enable+0x4c>)
    5fbc:	4605      	mov	r5, r0
    5fbe:	460f      	mov	r7, r1
    5fc0:	260c      	movs	r6, #12
    5fc2:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    5fc4:	b172      	cbz	r2, 5fe4 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    5fc6:	4361      	muls	r1, r4
    5fc8:	fb06 1400 	mla	r4, r6, r0, r1
    5fcc:	4423      	add	r3, r4
    5fce:	7a59      	ldrb	r1, [r3, #9]
    5fd0:	7a18      	ldrb	r0, [r3, #8]
    5fd2:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    5fd4:	bf04      	itt	eq
    5fd6:	3101      	addeq	r1, #1
    5fd8:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    5fda:	4628      	mov	r0, r5
    5fdc:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    5fde:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    5fe0:	f00a bb9c 	b.w	1071c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    5fe4:	434c      	muls	r4, r1
    5fe6:	fb06 4400 	mla	r4, r6, r0, r4
    5fea:	4423      	add	r3, r4
    5fec:	7a9c      	ldrb	r4, [r3, #10]
    5fee:	7ada      	ldrb	r2, [r3, #11]
    5ff0:	42a2      	cmp	r2, r4
    5ff2:	d104      	bne.n	5ffe <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    5ff4:	3201      	adds	r2, #1
    5ff6:	729a      	strb	r2, [r3, #10]
}
    5ff8:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    5ffa:	f00a bbbd 	b.w	10778 <mayfly_pend>
}
    5ffe:	bcf0      	pop	{r4, r5, r6, r7}
    6000:	4770      	bx	lr
    6002:	bf00      	nop
    6004:	200004a8 	.word	0x200004a8

00006008 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    6008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    600a:	4605      	mov	r5, r0
    600c:	460e      	mov	r6, r1
    600e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6010:	b18a      	cbz	r2, 6036 <mayfly_enqueue+0x2e>
    6012:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    6014:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6016:	7820      	ldrb	r0, [r4, #0]
    6018:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    601a:	f010 0703 	ands.w	r7, r0, #3
    601e:	d029      	beq.n	6074 <mayfly_enqueue+0x6c>
		if (chain) {
    6020:	b303      	cbz	r3, 6064 <mayfly_enqueue+0x5c>
			if (state != 1) {
    6022:	2f01      	cmp	r7, #1
    6024:	d039      	beq.n	609a <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6026:	3201      	adds	r2, #1
    6028:	b2d2      	uxtb	r2, r2
    602a:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    602c:	4631      	mov	r1, r6
    602e:	4628      	mov	r0, r5
    6030:	f00a fba2 	bl	10778 <mayfly_pend>
    6034:	e01c      	b.n	6070 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6036:	f00a fb8d 	bl	10754 <mayfly_prio_is_equal>
    603a:	2800      	cmp	r0, #0
    603c:	d0e9      	beq.n	6012 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    603e:	4631      	mov	r1, r6
    6040:	4628      	mov	r0, r5
    6042:	f00a fb79 	bl	10738 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6046:	2800      	cmp	r0, #0
    6048:	d0e3      	beq.n	6012 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    604a:	2330      	movs	r3, #48	; 0x30
    604c:	220c      	movs	r2, #12
    604e:	4373      	muls	r3, r6
    6050:	fb02 3305 	mla	r3, r2, r5, r3
    6054:	4a12      	ldr	r2, [pc, #72]	; (60a0 <mayfly_enqueue+0x98>)
    6056:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    6058:	7a93      	ldrb	r3, [r2, #10]
    605a:	7ad2      	ldrb	r2, [r2, #11]
    605c:	1a9b      	subs	r3, r3, r2
    605e:	bf18      	it	ne
    6060:	2301      	movne	r3, #1
    6062:	e7d7      	b.n	6014 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    6064:	3202      	adds	r2, #2
    6066:	b2d2      	uxtb	r2, r2
    6068:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    606a:	68e3      	ldr	r3, [r4, #12]
    606c:	68a0      	ldr	r0, [r4, #8]
    606e:	4798      	blx	r3
		return 0;
    6070:	2000      	movs	r0, #0
    6072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    6074:	2b00      	cmp	r3, #0
    6076:	d0f8      	beq.n	606a <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    6078:	3201      	adds	r2, #1
    607a:	b2d2      	uxtb	r2, r2
    607c:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    607e:	2304      	movs	r3, #4
    6080:	2230      	movs	r2, #48	; 0x30
    6082:	fb12 3206 	smlabb	r2, r2, r6, r3
    6086:	230c      	movs	r3, #12
    6088:	fb13 2305 	smlabb	r3, r3, r5, r2
    608c:	4a04      	ldr	r2, [pc, #16]	; (60a0 <mayfly_enqueue+0x98>)
    608e:	6860      	ldr	r0, [r4, #4]
    6090:	441a      	add	r2, r3
    6092:	4621      	mov	r1, r4
    6094:	f7ff ff47 	bl	5f26 <memq_enqueue>
    6098:	e7c8      	b.n	602c <mayfly_enqueue+0x24>
			return 1;
    609a:	4638      	mov	r0, r7

	return 0;
}
    609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    609e:	bf00      	nop
    60a0:	200004a8 	.word	0x200004a8

000060a4 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    60a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60a8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    60ac:	b089      	sub	sp, #36	; 0x24
    60ae:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    60b0:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    60b4:	4e43      	ldr	r6, [pc, #268]	; (61c4 <mayfly_run+0x120>)
    60b6:	9304      	str	r3, [sp, #16]
{
    60b8:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    60ba:	2404      	movs	r4, #4
	u8_t disable = 0;
    60bc:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    60c0:	3c01      	subs	r4, #1
    60c2:	b2e4      	uxtb	r4, r4
    60c4:	2cff      	cmp	r4, #255	; 0xff
    60c6:	d10b      	bne.n	60e0 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    60c8:	9b01      	ldr	r3, [sp, #4]
    60ca:	2b00      	cmp	r3, #0
    60cc:	d076      	beq.n	61bc <mayfly_run+0x118>
    60ce:	f1b8 0f00 	cmp.w	r8, #0
    60d2:	d173      	bne.n	61bc <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    60d4:	4642      	mov	r2, r8
    60d6:	4629      	mov	r1, r5
    60d8:	4628      	mov	r0, r5
    60da:	f00a fb1f 	bl	1071c <mayfly_enable_cb>
    60de:	e06d      	b.n	61bc <mayfly_run+0x118>
		struct mayfly *m = 0;
    60e0:	f10d 0b20 	add.w	fp, sp, #32
    60e4:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    60e6:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    60e8:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    60ec:	f04f 0930 	mov.w	r9, #48	; 0x30
    60f0:	fb07 f304 	mul.w	r3, r7, r4
    60f4:	fb09 3005 	mla	r0, r9, r5, r3
    60f8:	1831      	adds	r1, r6, r0
    60fa:	465a      	mov	r2, fp
    60fc:	6849      	ldr	r1, [r1, #4]
    60fe:	5830      	ldr	r0, [r6, r0]
    6100:	9302      	str	r3, [sp, #8]
    6102:	f7ff ff17 	bl	5f34 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6106:	9b04      	ldr	r3, [sp, #16]
    6108:	fb17 3704 	smlabb	r7, r7, r4, r3
    610c:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    610e:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    6110:	9303      	str	r3, [sp, #12]
		while (link) {
    6112:	f1ba 0f00 	cmp.w	sl, #0
    6116:	d119      	bne.n	614c <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    6118:	2230      	movs	r2, #48	; 0x30
    611a:	230c      	movs	r3, #12
    611c:	436a      	muls	r2, r5
    611e:	fb03 2204 	mla	r2, r3, r4, r2
    6122:	4432      	add	r2, r6
    6124:	7a91      	ldrb	r1, [r2, #10]
    6126:	7ad0      	ldrb	r0, [r2, #11]
    6128:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    612a:	bf1e      	ittt	ne
    612c:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    612e:	2201      	movne	r2, #1
    6130:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    6132:	2230      	movs	r2, #48	; 0x30
    6134:	436a      	muls	r2, r5
    6136:	fb03 2304 	mla	r3, r3, r4, r2
    613a:	4433      	add	r3, r6
    613c:	7a1a      	ldrb	r2, [r3, #8]
    613e:	7a59      	ldrb	r1, [r3, #9]
    6140:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    6142:	bf1c      	itt	ne
    6144:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    6146:	f04f 0801 	movne.w	r8, #1
    614a:	e7b9      	b.n	60c0 <mayfly_run+0x1c>
			req = m->_req;
    614c:	9b07      	ldr	r3, [sp, #28]
    614e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    6150:	785a      	ldrb	r2, [r3, #1]
    6152:	1abf      	subs	r7, r7, r2
    6154:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    6158:	2f01      	cmp	r7, #1
    615a:	d104      	bne.n	6166 <mayfly_run+0xc2>
				m->_ack--;
    615c:	3a01      	subs	r2, #1
    615e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    6160:	6898      	ldr	r0, [r3, #8]
    6162:	68da      	ldr	r2, [r3, #12]
    6164:	4790      	blx	r2
			req = m->_req;
    6166:	9a07      	ldr	r2, [sp, #28]
    6168:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    616a:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    616c:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    616e:	1a9a      	subs	r2, r3, r2
    6170:	f002 0203 	and.w	r2, r2, #3
    6174:	2a01      	cmp	r2, #1
    6176:	9305      	str	r3, [sp, #20]
    6178:	d00d      	beq.n	6196 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    617a:	9b02      	ldr	r3, [sp, #8]
    617c:	9903      	ldr	r1, [sp, #12]
    617e:	fb09 3005 	mla	r0, r9, r5, r3
    6182:	4430      	add	r0, r6
    6184:	2200      	movs	r2, #0
    6186:	6840      	ldr	r0, [r0, #4]
    6188:	f7ff fedc 	bl	5f44 <memq_dequeue>
				m->_link = link;
    618c:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    618e:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    6190:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    6194:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    6196:	9b02      	ldr	r3, [sp, #8]
    6198:	fb09 3305 	mla	r3, r9, r5, r3
    619c:	18f1      	adds	r1, r6, r3
    619e:	465a      	mov	r2, fp
    61a0:	6849      	ldr	r1, [r1, #4]
    61a2:	58f0      	ldr	r0, [r6, r3]
    61a4:	f7ff fec6 	bl	5f34 <memq_peek>
			if (state == 1) {
    61a8:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    61aa:	4682      	mov	sl, r0
			if (state == 1) {
    61ac:	d1b1      	bne.n	6112 <mayfly_run+0x6e>
				if (caller_id || link) {
    61ae:	b90c      	cbnz	r4, 61b4 <mayfly_run+0x110>
    61b0:	2800      	cmp	r0, #0
    61b2:	d0b1      	beq.n	6118 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    61b4:	4629      	mov	r1, r5
    61b6:	4628      	mov	r0, r5
    61b8:	f00a fade 	bl	10778 <mayfly_pend>
	}
}
    61bc:	b009      	add	sp, #36	; 0x24
    61be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61c2:	bf00      	nop
    61c4:	200004a8 	.word	0x200004a8

000061c8 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    61c8:	b510      	push	{r4, lr}
    61ca:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    61cc:	2000      	movs	r0, #0

	while (octets_len--) {
    61ce:	3901      	subs	r1, #1
    61d0:	b2c9      	uxtb	r1, r1
    61d2:	29ff      	cmp	r1, #255	; 0xff
    61d4:	d100      	bne.n	61d8 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    61d6:	bd10      	pop	{r4, pc}
		bite = *octets;
    61d8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    61dc:	2b00      	cmp	r3, #0
    61de:	d0f6      	beq.n	61ce <util_ones_count_get+0x6>
			bite &= (bite - 1);
    61e0:	1e5c      	subs	r4, r3, #1
			one_count++;
    61e2:	3001      	adds	r0, #1
			bite &= (bite - 1);
    61e4:	4023      	ands	r3, r4
			one_count++;
    61e6:	b2c0      	uxtb	r0, r0
    61e8:	e7f8      	b.n	61dc <util_ones_count_get+0x14>

000061ea <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    61ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    61ec:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    61ee:	6805      	ldr	r5, [r0, #0]
	current = previous;
    61f0:	461a      	mov	r2, r3
	total = 0;
    61f2:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    61f4:	2aff      	cmp	r2, #255	; 0xff
    61f6:	d101      	bne.n	61fc <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    61f8:	2000      	movs	r0, #0
    61fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    61fc:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    6200:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    6202:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    6206:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    620a:	d004      	beq.n	6216 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    620c:	68b3      	ldr	r3, [r6, #8]
    620e:	441c      	add	r4, r3
		current = ticker_current->next;
    6210:	4613      	mov	r3, r2
    6212:	463a      	mov	r2, r7
    6214:	e7ee      	b.n	61f4 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    6216:	4293      	cmp	r3, r2
    6218:	d100      	bne.n	621c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    621a:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    621c:	b21b      	sxth	r3, r3
    621e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6222:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    6224:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    6226:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    622a:	7833      	ldrb	r3, [r6, #0]
    622c:	2bff      	cmp	r3, #255	; 0xff
    622e:	d006      	beq.n	623e <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    6230:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6234:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    6238:	689a      	ldr	r2, [r3, #8]
    623a:	4402      	add	r2, r0
    623c:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    623e:	4420      	add	r0, r4
    6240:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006242 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    6242:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    6244:	1a55      	subs	r5, r2, r1
    6246:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    624a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    624c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    624e:	d109      	bne.n	6264 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6250:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    6254:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    6256:	42a2      	cmp	r2, r4
    6258:	d90e      	bls.n	6278 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    625a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    625c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    625e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    6260:	6144      	str	r4, [r0, #20]
    6262:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6264:	1a8a      	subs	r2, r1, r2
    6266:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    626a:	4293      	cmp	r3, r2
    626c:	d901      	bls.n	6272 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    626e:	1a9a      	subs	r2, r3, r2
    6270:	e7f1      	b.n	6256 <ticks_to_expire_prep+0x14>
    6272:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    6274:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    6276:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    6278:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    627a:	2200      	movs	r2, #0
    627c:	e7ef      	b.n	625e <ticks_to_expire_prep+0x1c>

0000627e <ticker_job_op_cb>:
{
    627e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    6280:	2200      	movs	r2, #0
    6282:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    6284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    6286:	6259      	str	r1, [r3, #36]	; 0x24
{
    6288:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    628a:	b10a      	cbz	r2, 6290 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    628c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    628e:	4710      	bx	r2
    6290:	4770      	bx	lr

00006292 <ticker_worker>:
{
    6292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    6296:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    6298:	2301      	movs	r3, #1
{
    629a:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    629c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    629e:	2d00      	cmp	r5, #0
    62a0:	d14c      	bne.n	633c <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    62a2:	7f43      	ldrb	r3, [r0, #29]
    62a4:	2bff      	cmp	r3, #255	; 0xff
    62a6:	d102      	bne.n	62ae <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    62a8:	77c5      	strb	r5, [r0, #31]
		return;
    62aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    62ae:	f009 fd9f 	bl	fdf0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    62b2:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    62b4:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    62b6:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    62ba:	1bc7      	subs	r7, r0, r7
    62bc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    62c0:	2eff      	cmp	r6, #255	; 0xff
    62c2:	d006      	beq.n	62d2 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    62c4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    62c8:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    62cc:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    62ce:	429f      	cmp	r7, r3
    62d0:	d218      	bcs.n	6304 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    62d2:	7aa2      	ldrb	r2, [r4, #10]
    62d4:	7ae3      	ldrb	r3, [r4, #11]
    62d6:	4293      	cmp	r3, r2
    62d8:	d105      	bne.n	62e6 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    62da:	3301      	adds	r3, #1
    62dc:	b2db      	uxtb	r3, r3
			last = 0;
    62de:	2b02      	cmp	r3, #2
    62e0:	bf08      	it	eq
    62e2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    62e4:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    62e6:	7ae3      	ldrb	r3, [r4, #11]
    62e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    62ec:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    62ee:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    62f0:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    62f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    62f4:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    62f6:	46ac      	mov	ip, r5
    62f8:	4623      	mov	r3, r4
    62fa:	2104      	movs	r1, #4
    62fc:	2003      	movs	r0, #3
}
    62fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6302:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    6304:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    6306:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    6308:	788a      	ldrb	r2, [r1, #2]
    630a:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    630c:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    6310:	1a9b      	subs	r3, r3, r2
    6312:	b2db      	uxtb	r3, r3
    6314:	2b01      	cmp	r3, #1
    6316:	d1d3      	bne.n	62c0 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    6318:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    631c:	3a01      	subs	r2, #1
    631e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    6320:	f1b9 0f00 	cmp.w	r9, #0
    6324:	d0cc      	beq.n	62c0 <ticker_worker+0x2e>
					   ticks_expired -
    6326:	6948      	ldr	r0, [r1, #20]
    6328:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    632a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    632c:	1a28      	subs	r0, r5, r0
    632e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    6330:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6334:	690b      	ldr	r3, [r1, #16]
    6336:	6a49      	ldr	r1, [r1, #36]	; 0x24
    6338:	47c8      	blx	r9
    633a:	e7c1      	b.n	62c0 <ticker_worker+0x2e>
    633c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006340 <ticker_job>:
{
    6340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    6344:	7fc2      	ldrb	r2, [r0, #31]
{
    6346:	b093      	sub	sp, #76	; 0x4c
    6348:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    634a:	2a00      	cmp	r2, #0
    634c:	f040 83b5 	bne.w	6aba <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    6350:	6943      	ldr	r3, [r0, #20]
    6352:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    6354:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    6356:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    6358:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    635a:	7ac0      	ldrb	r0, [r0, #11]
    635c:	4298      	cmp	r0, r3
    635e:	f000 808f 	beq.w	6480 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    6362:	440b      	add	r3, r1
    6364:	b2db      	uxtb	r3, r3
			first = 0;
    6366:	2b02      	cmp	r3, #2
    6368:	bf08      	it	eq
    636a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    636c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    6370:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    6374:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    6376:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    637a:	9b05      	ldr	r3, [sp, #20]
    637c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    637e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6382:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    6386:	f89b 301d 	ldrb.w	r3, [fp, #29]
    638a:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    638c:	f8db 3000 	ldr.w	r3, [fp]
    6390:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    6392:	f8db 3004 	ldr.w	r3, [fp, #4]
    6396:	930b      	str	r3, [sp, #44]	; 0x2c
    6398:	f89b 3009 	ldrb.w	r3, [fp, #9]
    639c:	3b01      	subs	r3, #1
    639e:	b2db      	uxtb	r3, r3
    63a0:	9302      	str	r3, [sp, #8]
	pending = 0;
    63a2:	2300      	movs	r3, #0
    63a4:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    63a6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    63aa:	9b02      	ldr	r3, [sp, #8]
    63ac:	2bff      	cmp	r3, #255	; 0xff
    63ae:	d16a      	bne.n	6486 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    63b0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    63b4:	9a03      	ldr	r2, [sp, #12]
    63b6:	1a9b      	subs	r3, r3, r2
    63b8:	bf18      	it	ne
    63ba:	2301      	movne	r3, #1
    63bc:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    63be:	9b01      	ldr	r3, [sp, #4]
    63c0:	b1e3      	cbz	r3, 63fc <ticker_job+0xbc>
	node = &instance->node[0];
    63c2:	f8db 3000 	ldr.w	r3, [fp]
    63c6:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    63c8:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    63cc:	f89b 601d 	ldrb.w	r6, [fp, #29]
    63d0:	2eff      	cmp	r6, #255	; 0xff
    63d2:	d00c      	beq.n	63ee <ticker_job+0xae>
		ticker = &node[id_expired];
    63d4:	b237      	sxth	r7, r6
    63d6:	9b04      	ldr	r3, [sp, #16]
    63d8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    63dc:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    63e0:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    63e2:	4545      	cmp	r5, r8
    63e4:	f240 8136 	bls.w	6654 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    63e8:	eba5 0508 	sub.w	r5, r5, r8
    63ec:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    63ee:	9b02      	ldr	r3, [sp, #8]
    63f0:	9a01      	ldr	r2, [sp, #4]
    63f2:	9903      	ldr	r1, [sp, #12]
    63f4:	42b1      	cmp	r1, r6
    63f6:	bf18      	it	ne
    63f8:	4613      	movne	r3, r2
    63fa:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    63fc:	f8db 3000 	ldr.w	r3, [fp]
    6400:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    6402:	f8db 3004 	ldr.w	r3, [fp, #4]
    6406:	9310      	str	r3, [sp, #64]	; 0x40
    6408:	f89b 3009 	ldrb.w	r3, [fp, #9]
    640c:	3b01      	subs	r3, #1
    640e:	b2db      	uxtb	r3, r3
    6410:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    6412:	9b01      	ldr	r3, [sp, #4]
    6414:	2bff      	cmp	r3, #255	; 0xff
    6416:	f040 8170 	bne.w	66fa <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    641a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    641e:	9a03      	ldr	r2, [sp, #12]
    6420:	4293      	cmp	r3, r2
	if (!pending) {
    6422:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    6424:	f040 8340 	bne.w	6aa8 <ticker_job+0x768>
	if (!pending) {
    6428:	b95b      	cbnz	r3, 6442 <ticker_job+0x102>
    642a:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    642e:	f8db 3004 	ldr.w	r3, [fp, #4]
    6432:	9301      	str	r3, [sp, #4]
    6434:	3c01      	subs	r4, #1
    6436:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    6438:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    643c:	2cff      	cmp	r4, #255	; 0xff
    643e:	f040 82a0 	bne.w	6982 <ticker_job+0x642>
	instance->job_guard = 0;
    6442:	2300      	movs	r3, #0
    6444:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    6448:	9b02      	ldr	r3, [sp, #8]
    644a:	b14b      	cbz	r3, 6460 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    644c:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6450:	2bff      	cmp	r3, #255	; 0xff
    6452:	f040 82e9 	bne.w	6a28 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    6456:	f009 fcb3 	bl	fdc0 <cntr_stop>
    645a:	b908      	cbnz	r0, 6460 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    645c:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    6460:	f89b 301f 	ldrb.w	r3, [fp, #31]
    6464:	2b00      	cmp	r3, #0
    6466:	f000 8328 	beq.w	6aba <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    646a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    646e:	465b      	mov	r3, fp
    6470:	2201      	movs	r2, #1
    6472:	2103      	movs	r1, #3
    6474:	2004      	movs	r0, #4
    6476:	46a4      	mov	ip, r4
}
    6478:	b013      	add	sp, #76	; 0x4c
    647a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    647e:	4760      	bx	ip
		flag_elapsed = 0;
    6480:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    6482:	4690      	mov	r8, r2
    6484:	e77f      	b.n	6386 <ticker_job+0x46>
		user = &users[count_user];
    6486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6488:	9a02      	ldr	r2, [sp, #8]
    648a:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    6492:	78f9      	ldrb	r1, [r7, #3]
    6494:	78be      	ldrb	r6, [r7, #2]
    6496:	428e      	cmp	r6, r1
    6498:	f000 80d7 	beq.w	664a <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    649c:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    649e:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    64a0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    64a4:	0112      	lsls	r2, r2, #4
    64a6:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    64a8:	1c73      	adds	r3, r6, #1
    64aa:	b2db      	uxtb	r3, r3
				middle = 0;
    64ac:	4298      	cmp	r0, r3
    64ae:	bf08      	it	eq
    64b0:	2300      	moveq	r3, #0
			user->middle = middle;
    64b2:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    64b4:	9b06      	ldr	r3, [sp, #24]
    64b6:	5c9a      	ldrb	r2, [r3, r2]
    64b8:	2a03      	cmp	r2, #3
    64ba:	d9eb      	bls.n	6494 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    64bc:	2a05      	cmp	r2, #5
    64be:	d817      	bhi.n	64f0 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    64c0:	7869      	ldrb	r1, [r5, #1]
    64c2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    64c6:	930a      	str	r3, [sp, #40]	; 0x28
    64c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    64ca:	9b04      	ldr	r3, [sp, #16]
    64cc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    64d0:	7863      	ldrb	r3, [r4, #1]
    64d2:	78a0      	ldrb	r0, [r4, #2]
    64d4:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    64d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    64da:	d009      	beq.n	64f0 <ticker_job+0x1b0>
			    (state == 0) ||
    64dc:	2a04      	cmp	r2, #4
    64de:	d10c      	bne.n	64fa <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    64e0:	686a      	ldr	r2, [r5, #4]
    64e2:	b952      	cbnz	r2, 64fa <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    64e4:	68aa      	ldr	r2, [r5, #8]
    64e6:	b942      	cbnz	r2, 64fa <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    64e8:	68ea      	ldr	r2, [r5, #12]
    64ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    64ee:	d104      	bne.n	64fa <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    64f0:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    64f2:	4628      	mov	r0, r5
    64f4:	f7ff fec3 	bl	627e <ticker_job_op_cb>
    64f8:	e7cb      	b.n	6492 <ticker_job+0x152>
			if (state == 1) {
    64fa:	2b01      	cmp	r3, #1
    64fc:	f040 809b 	bne.w	6636 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    6500:	4658      	mov	r0, fp
    6502:	f7ff fe72 	bl	61ea <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    6506:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    6508:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    650a:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    650c:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    650e:	f040 8084 	bne.w	661a <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    6512:	f8db 3014 	ldr.w	r3, [fp, #20]
    6516:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    6518:	f009 fc6a 	bl	fdf0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    651c:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    651e:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6520:	1ac3      	subs	r3, r0, r3
    6522:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    6526:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    6528:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    652a:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    652c:	bf9e      	ittt	ls
    652e:	6962      	ldrls	r2, [r4, #20]
    6530:	1b92      	subls	r2, r2, r6
    6532:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    6534:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    6536:	bf96      	itet	ls
    6538:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    653a:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    653c:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    653e:	b18a      	cbz	r2, 6564 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    6540:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    6542:	b179      	cbz	r1, 6564 <ticker_job+0x224>
		user_op->params.update.lazy--;
    6544:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    6548:	fa1f fe8e 	uxth.w	lr, lr
    654c:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6550:	429a      	cmp	r2, r3
    6552:	d32b      	bcc.n	65ac <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    6554:	f8df 9324 	ldr.w	r9, [pc, #804]	; 687c <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    6558:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    655c:	45e6      	cmp	lr, ip
    655e:	d847      	bhi.n	65f0 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    6560:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    6564:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    6566:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    6568:	4413      	add	r3, r2
    656a:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    656c:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    656e:	6963      	ldr	r3, [r4, #20]
    6570:	4413      	add	r3, r2
    6572:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    6574:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6576:	4620      	mov	r0, r4
    6578:	f7ff fe63 	bl	6242 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    657c:	69a2      	ldr	r2, [r4, #24]
    657e:	892b      	ldrh	r3, [r5, #8]
    6580:	4413      	add	r3, r2
    6582:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    6584:	896a      	ldrh	r2, [r5, #10]
    6586:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    6588:	bf8c      	ite	hi
    658a:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    658c:	2300      	movls	r3, #0
    658e:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    6590:	7bab      	ldrb	r3, [r5, #14]
    6592:	b103      	cbz	r3, 6596 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    6594:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    6596:	9b04      	ldr	r3, [sp, #16]
    6598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    659a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    659e:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    65a0:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    65a4:	3301      	adds	r3, #1
    65a6:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    65a8:	2100      	movs	r1, #0
    65aa:	e7a2      	b.n	64f2 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    65ac:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    65b0:	45e6      	cmp	lr, ip
    65b2:	d2cf      	bcs.n	6554 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    65b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    65b6:	4eaf      	ldr	r6, [pc, #700]	; (6874 <ticker_job+0x534>)
    65b8:	48af      	ldr	r0, [pc, #700]	; (6878 <ticker_job+0x538>)
    65ba:	198e      	adds	r6, r1, r6
    65bc:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    65be:	bf81      	itttt	hi
    65c0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    65c4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    65c8:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    65cc:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    65ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
    65d0:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    65d2:	bf8c      	ite	hi
    65d4:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    65d8:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    65dc:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    65de:	4491      	add	r9, r2
			ticker->lazy_current--;
    65e0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    65e4:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    65e6:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    65ea:	f8a4 c01e 	strh.w	ip, [r4, #30]
    65ee:	e7af      	b.n	6550 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    65f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    65f2:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    65f4:	48a0      	ldr	r0, [pc, #640]	; (6878 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    65f6:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    65f8:	499e      	ldr	r1, [pc, #632]	; (6874 <ticker_job+0x534>)
    65fa:	1871      	adds	r1, r6, r1
    65fc:	4281      	cmp	r1, r0
	return 0;
    65fe:	bf8e      	itee	hi
    6600:	2100      	movhi	r1, #0
		return 1;
    6602:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    6604:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    6606:	4411      	add	r1, r2
			ticker->lazy_current++;
    6608:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    660c:	bf8c      	ite	hi
    660e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    6610:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    6612:	440b      	add	r3, r1
			ticker->lazy_current++;
    6614:	f8a4 c01e 	strh.w	ip, [r4, #30]
    6618:	e79e      	b.n	6558 <ticker_job+0x218>
		ticker->req = ticker->ack;
    661a:	78a3      	ldrb	r3, [r4, #2]
    661c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    661e:	786b      	ldrb	r3, [r5, #1]
    6620:	f89b 201c 	ldrb.w	r2, [fp, #28]
    6624:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    6626:	bf01      	itttt	eq
    6628:	23ff      	moveq	r3, #255	; 0xff
    662a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    662e:	2300      	moveq	r3, #0
    6630:	f8cb 3018 	streq.w	r3, [fp, #24]
    6634:	e7b8      	b.n	65a8 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    6636:	2104      	movs	r1, #4
    6638:	465b      	mov	r3, fp
    663a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    663e:	2201      	movs	r2, #1
    6640:	4608      	mov	r0, r1
    6642:	47a0      	blx	r4
				pending = 1;
    6644:	2301      	movs	r3, #1
				user->middle = prev;
    6646:	70be      	strb	r6, [r7, #2]
				pending = 1;
    6648:	9307      	str	r3, [sp, #28]
    664a:	9b02      	ldr	r3, [sp, #8]
    664c:	3b01      	subs	r3, #1
    664e:	b2db      	uxtb	r3, r3
    6650:	9302      	str	r3, [sp, #8]
    6652:	e6aa      	b.n	63aa <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    6654:	f8db 3018 	ldr.w	r3, [fp, #24]
    6658:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    665a:	bf29      	itett	cs
    665c:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    665e:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    6660:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    6664:	2300      	movcs	r3, #0
    6666:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    666a:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    666c:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    666e:	b11b      	cbz	r3, 6678 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    6670:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    6674:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    6678:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    667a:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    667c:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    667e:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    6682:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    6686:	f8d4 e004 	ldr.w	lr, [r4, #4]
    668a:	f1be 0f00 	cmp.w	lr, #0
    668e:	d030      	beq.n	66f2 <ticker_job+0x3b2>
    6690:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    6692:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 6878 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    6696:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6698:	6a21      	ldr	r1, [r4, #32]
    669a:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    669c:	4975      	ldr	r1, [pc, #468]	; (6874 <ticker_job+0x534>)
    669e:	1859      	adds	r1, r3, r1
    66a0:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    66a2:	bf9f      	itttt	ls
    66a4:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    66a8:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    66ac:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    66b0:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    66b2:	bf92      	itee	ls
    66b4:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    66b6:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    66b8:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    66ba:	4473      	add	r3, lr
			while (count--) {
    66bc:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    66c0:	441a      	add	r2, r3
			while (count--) {
    66c2:	d2e8      	bcs.n	6696 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    66c4:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    66c6:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    66c8:	f8db 1014 	ldr.w	r1, [fp, #20]
    66cc:	eb03 0209 	add.w	r2, r3, r9
    66d0:	4620      	mov	r0, r4
    66d2:	f7ff fdb6 	bl	6242 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    66d6:	8ba3      	ldrh	r3, [r4, #28]
    66d8:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    66da:	2300      	movs	r3, #0
    66dc:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    66de:	9b04      	ldr	r3, [sp, #16]
    66e0:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    66e4:	7863      	ldrb	r3, [r4, #1]
    66e6:	3301      	adds	r3, #1
    66e8:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    66ea:	eba8 0805 	sub.w	r8, r8, r5
    66ee:	46b2      	mov	sl, r6
    66f0:	e66c      	b.n	63cc <ticker_job+0x8c>
			ticker->req = ticker->ack;
    66f2:	78a3      	ldrb	r3, [r4, #2]
    66f4:	7063      	strb	r3, [r4, #1]
    66f6:	4656      	mov	r6, sl
    66f8:	e7f7      	b.n	66ea <ticker_job+0x3aa>
		user = &users[count_user];
    66fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    66fc:	9a01      	ldr	r2, [sp, #4]
    66fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6702:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    6704:	685b      	ldr	r3, [r3, #4]
    6706:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    6708:	9b04      	ldr	r3, [sp, #16]
    670a:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    670e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    6712:	f000 808e 	beq.w	6832 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    6716:	fa0f f38a 	sxth.w	r3, sl
    671a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    671e:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    6720:	46d0      	mov	r8, sl
    6722:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    6726:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    672a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    672c:	f8db 3000 	ldr.w	r3, [fp]
    6730:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    6732:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    6734:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    6736:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    6738:	8be3      	ldrh	r3, [r4, #30]
    673a:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    673c:	bf86      	itte	hi
    673e:	1a9b      	subhi	r3, r3, r2
    6740:	b29b      	uxthhi	r3, r3
		skip = 0;
    6742:	2300      	movls	r3, #0
    6744:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    6746:	fa0f f388 	sxth.w	r3, r8
    674a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    674e:	00db      	lsls	r3, r3, #3
    6750:	9311      	str	r3, [sp, #68]	; 0x44
    6752:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    6754:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    6758:	f8db 0018 	ldr.w	r0, [fp, #24]
    675c:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    675e:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    6762:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    6764:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    6768:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    676c:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    676e:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    6770:	2bff      	cmp	r3, #255	; 0xff
    6772:	d007      	beq.n	6784 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    6774:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    6778:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    677c:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    677e:	4281      	cmp	r1, r0
    6780:	f200 80a9 	bhi.w	68d6 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    6784:	f8de 0018 	ldr.w	r0, [lr, #24]
    6788:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    678a:	eb01 0c00 	add.w	ip, r1, r0
    678e:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    6790:	2eff      	cmp	r6, #255	; 0xff
    6792:	f040 80ae 	bne.w	68f2 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    6796:	980d      	ldr	r0, [sp, #52]	; 0x34
    6798:	b130      	cbz	r0, 67a8 <ticker_job+0x468>
    679a:	9805      	ldr	r0, [sp, #20]
    679c:	4281      	cmp	r1, r0
    679e:	f0c0 80bf 	bcc.w	6920 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    67a2:	2eff      	cmp	r6, #255	; 0xff
    67a4:	f040 8185 	bne.w	6ab2 <ticker_job+0x772>
		if (previous == current) {
    67a8:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    67aa:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    67ae:	4283      	cmp	r3, r0
			node[previous].next = id;
    67b0:	bf18      	it	ne
    67b2:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    67b6:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    67ba:	bf16      	itet	ne
    67bc:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    67c0:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    67c4:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    67c8:	2bff      	cmp	r3, #255	; 0xff
    67ca:	d006      	beq.n	67da <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    67cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    67d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    67d4:	689a      	ldr	r2, [r3, #8]
    67d6:	1a51      	subs	r1, r2, r1
    67d8:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    67da:	78a3      	ldrb	r3, [r4, #2]
    67dc:	3301      	adds	r3, #1
    67de:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    67e0:	2100      	movs	r1, #0
			if (user_op) {
    67e2:	2d00      	cmp	r5, #0
    67e4:	d093      	beq.n	670e <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    67e6:	4628      	mov	r0, r5
    67e8:	f7ff fd49 	bl	627e <ticker_job_op_cb>
    67ec:	e78f      	b.n	670e <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    67ee:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    67f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    67f4:	011b      	lsls	r3, r3, #4
    67f6:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    67f8:	f109 0201 	add.w	r2, r9, #1
    67fc:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    6800:	9a04      	ldr	r2, [sp, #16]
    6802:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    6804:	454a      	cmp	r2, r9
    6806:	bf08      	it	eq
    6808:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    680c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    680e:	5cd3      	ldrb	r3, [r2, r3]
    6810:	2b03      	cmp	r3, #3
    6812:	d10e      	bne.n	6832 <ticker_job+0x4f2>
				id_insert = user_op->id;
    6814:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    6818:	9b08      	ldr	r3, [sp, #32]
    681a:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    681e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    6822:	7862      	ldrb	r2, [r4, #1]
    6824:	78a3      	ldrb	r3, [r4, #2]
    6826:	429a      	cmp	r2, r3
    6828:	d009      	beq.n	683e <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    682a:	2101      	movs	r1, #1
    682c:	4628      	mov	r0, r5
    682e:	f7ff fd26 	bl	627e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    6832:	9b04      	ldr	r3, [sp, #16]
    6834:	789b      	ldrb	r3, [r3, #2]
    6836:	454b      	cmp	r3, r9
    6838:	d1d9      	bne.n	67ee <ticker_job+0x4ae>
    683a:	9b01      	ldr	r3, [sp, #4]
    683c:	e5e6      	b.n	640c <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    683e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    6840:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    6844:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    6846:	692b      	ldr	r3, [r5, #16]
    6848:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    684a:	8aab      	ldrh	r3, [r5, #20]
    684c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    684e:	69ab      	ldr	r3, [r5, #24]
    6850:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    6852:	69eb      	ldr	r3, [r5, #28]
    6854:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    6856:	6a2b      	ldr	r3, [r5, #32]
    6858:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    685a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    685c:	68ab      	ldr	r3, [r5, #8]
    685e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    6860:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    6862:	686a      	ldr	r2, [r5, #4]
    6864:	4620      	mov	r0, r4
    6866:	f7ff fcec 	bl	6242 <ticks_to_expire_prep>
	ticker->force = 1;
    686a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    686c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    686e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    6870:	70e3      	strb	r3, [r4, #3]
    6872:	e75b      	b.n	672c <ticker_job+0x3ec>
    6874:	ff172b5a 	.word	0xff172b5a
    6878:	7f172b59 	.word	0x7f172b59
    687c:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    6880:	6860      	ldr	r0, [r4, #4]
    6882:	2800      	cmp	r0, #0
    6884:	d07b      	beq.n	697e <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    6886:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6888:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    688a:	4b8d      	ldr	r3, [pc, #564]	; (6ac0 <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    688c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    688e:	498d      	ldr	r1, [pc, #564]	; (6ac4 <ticker_job+0x784>)
    6890:	18d3      	adds	r3, r2, r3
    6892:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    6894:	bf9c      	itt	ls
    6896:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    689a:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    689e:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    68a0:	bf8b      	itete	hi
    68a2:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    68a4:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    68a8:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    68aa:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    68ac:	4403      	add	r3, r0
		return 1;
    68ae:	bf98      	it	ls
    68b0:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    68b2:	4413      	add	r3, r2
			ticker->lazy_current++;
    68b4:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    68b6:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    68b8:	3201      	adds	r2, #1
    68ba:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    68bc:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    68be:	4293      	cmp	r3, r2
    68c0:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    68c4:	bf89      	itett	hi
    68c6:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    68c8:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    68ca:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    68cc:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    68ce:	bf9c      	itt	ls
    68d0:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    68d2:	60a1      	strls	r1, [r4, #8]
    68d4:	e73d      	b.n	6752 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    68d6:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    68d8:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    68da:	b946      	cbnz	r6, 68ee <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    68dc:	9f05      	ldr	r7, [sp, #20]
    68de:	42b8      	cmp	r0, r7
    68e0:	d200      	bcs.n	68e4 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    68e2:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    68e4:	9309      	str	r3, [sp, #36]	; 0x24
    68e6:	9605      	str	r6, [sp, #20]
    68e8:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    68ec:	e740      	b.n	6770 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    68ee:	9306      	str	r3, [sp, #24]
    68f0:	e7f8      	b.n	68e4 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    68f2:	b230      	sxth	r0, r6
    68f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    68f8:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    68fc:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    68fe:	68bf      	ldr	r7, [r7, #8]
    6900:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    6902:	4567      	cmp	r7, ip
    6904:	d20a      	bcs.n	691c <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    6906:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    6908:	69bf      	ldr	r7, [r7, #24]
    690a:	2f00      	cmp	r7, #0
    690c:	f47f af43 	bne.w	6796 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    6910:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    6912:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    6916:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    691a:	e739      	b.n	6790 <ticker_job+0x450>
			return TICKER_NULL;
    691c:	26ff      	movs	r6, #255	; 0xff
    691e:	e73a      	b.n	6796 <ticker_job+0x456>
	while (id_insert !=
    6920:	9b06      	ldr	r3, [sp, #24]
    6922:	4598      	cmp	r8, r3
    6924:	f43f af59 	beq.w	67da <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    6928:	9b06      	ldr	r3, [sp, #24]
    692a:	2bff      	cmp	r3, #255	; 0xff
    692c:	d0a8      	beq.n	6880 <ticker_job+0x540>
    692e:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    6930:	b233      	sxth	r3, r6
    6932:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6936:	9305      	str	r3, [sp, #20]
    6938:	9a05      	ldr	r2, [sp, #20]
    693a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    693c:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    6940:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    6942:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    6944:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    6946:	bf88      	it	hi
    6948:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    694a:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    694c:	bf8c      	ite	hi
    694e:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    6950:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    6952:	2a00      	cmp	r2, #0
    6954:	d094      	beq.n	6880 <ticker_job+0x540>
    6956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6958:	4293      	cmp	r3, r2
    695a:	d891      	bhi.n	6880 <ticker_job+0x540>
			    skip_collide <= skip &&
    695c:	78fa      	ldrb	r2, [r7, #3]
    695e:	78e3      	ldrb	r3, [r4, #3]
    6960:	429a      	cmp	r2, r3
    6962:	d28d      	bcs.n	6880 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    6964:	4631      	mov	r1, r6
    6966:	4658      	mov	r0, fp
    6968:	f7ff fc3f 	bl	61ea <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    696c:	78bb      	ldrb	r3, [r7, #2]
    696e:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    6970:	9a05      	ldr	r2, [sp, #20]
    6972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    6974:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    6976:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    697a:	46b2      	mov	sl, r6
    697c:	e6e9      	b.n	6752 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    697e:	2101      	movs	r1, #1
    6980:	e72f      	b.n	67e2 <ticker_job+0x4a2>
		user = &users[count_user];
    6982:	9b01      	ldr	r3, [sp, #4]
    6984:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    6988:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    698a:	786b      	ldrb	r3, [r5, #1]
    698c:	78ea      	ldrb	r2, [r5, #3]
    698e:	429a      	cmp	r2, r3
    6990:	d102      	bne.n	6998 <ticker_job+0x658>
    6992:	3c01      	subs	r4, #1
    6994:	b2e4      	uxtb	r4, r4
    6996:	e551      	b.n	643c <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    6998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    699c:	011b      	lsls	r3, r3, #4
    699e:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    69a0:	5cf3      	ldrb	r3, [r6, r3]
    69a2:	2b01      	cmp	r3, #1
    69a4:	d025      	beq.n	69f2 <ticker_job+0x6b2>
    69a6:	2b02      	cmp	r3, #2
    69a8:	d12a      	bne.n	6a00 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    69aa:	f8d2 c004 	ldr.w	ip, [r2, #4]
    69ae:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    69b0:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    69b4:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    69b8:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    69bc:	28ff      	cmp	r0, #255	; 0xff
    69be:	d004      	beq.n	69ca <ticker_job+0x68a>
    69c0:	6819      	ldr	r1, [r3, #0]
    69c2:	f8db 7014 	ldr.w	r7, [fp, #20]
    69c6:	42b9      	cmp	r1, r7
    69c8:	d023      	beq.n	6a12 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    69ca:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    69ce:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    69d2:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    69d4:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    69d6:	29ff      	cmp	r1, #255	; 0xff
    69d8:	d007      	beq.n	69ea <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    69da:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    69de:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    69e2:	6987      	ldr	r7, [r0, #24]
    69e4:	6880      	ldr	r0, [r0, #8]
    69e6:	b1df      	cbz	r7, 6a20 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    69e8:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    69ea:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    69ee:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    69f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    69f4:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    69f8:	b113      	cbz	r3, 6a00 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    69fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    69fc:	2000      	movs	r0, #0
    69fe:	4798      	blx	r3
			first = user->first + 1;
    6a00:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    6a02:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    6a04:	3301      	adds	r3, #1
    6a06:	b2db      	uxtb	r3, r3
				first = 0;
    6a08:	429a      	cmp	r2, r3
    6a0a:	bf08      	it	eq
    6a0c:	2300      	moveq	r3, #0
			user->first = first;
    6a0e:	706b      	strb	r3, [r5, #1]
    6a10:	e7bb      	b.n	698a <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    6a12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    6a16:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    6a1a:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    6a1e:	e7da      	b.n	69d6 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    6a20:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    6a22:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    6a26:	e7d6      	b.n	69d6 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    6a28:	9b03      	ldr	r3, [sp, #12]
    6a2a:	2bff      	cmp	r3, #255	; 0xff
    6a2c:	d107      	bne.n	6a3e <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    6a2e:	f009 f9df 	bl	fdf0 <cntr_cnt_get>
    6a32:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    6a34:	f009 f9b6 	bl	fda4 <cntr_start>
    6a38:	b908      	cbnz	r0, 6a3e <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    6a3a:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    6a3e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    6a42:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    6a46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    6a4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6a4e:	260a      	movs	r6, #10
    6a50:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    6a52:	f009 f9cd 	bl	fdf0 <cntr_cnt_get>
		cc = instance->ticks_current;
    6a56:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6a5a:	1b03      	subs	r3, r0, r4
    6a5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    6a60:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    6a62:	42ab      	cmp	r3, r5
    6a64:	bf2c      	ite	cs
    6a66:	18e4      	addcs	r4, r4, r3
    6a68:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    6a6a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    6a6e:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    6a70:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    6a74:	4620      	mov	r0, r4
    6a76:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    6a78:	f009 f9ba 	bl	fdf0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6a7c:	1bc0      	subs	r0, r0, r7
    6a7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6a82:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    6a84:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6a86:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    6a8a:	42a0      	cmp	r0, r4
    6a8c:	f67f ace8 	bls.w	6460 <ticker_job+0x120>
		LL_ASSERT(i);
    6a90:	3e01      	subs	r6, #1
    6a92:	d1de      	bne.n	6a52 <ticker_job+0x712>
    6a94:	4040      	eors	r0, r0
    6a96:	f380 8811 	msr	BASEPRI, r0
    6a9a:	f04f 0004 	mov.w	r0, #4
    6a9e:	df02      	svc	2
	instance->job_guard = 0;
    6aa0:	2300      	movs	r3, #0
    6aa2:	f88b 301e 	strb.w	r3, [fp, #30]
    6aa6:	e4d1      	b.n	644c <ticker_job+0x10c>
	if (!pending) {
    6aa8:	2b00      	cmp	r3, #0
    6aaa:	d1f9      	bne.n	6aa0 <ticker_job+0x760>
		flag_compare_update = 1;
    6aac:	2301      	movs	r3, #1
    6aae:	9302      	str	r3, [sp, #8]
    6ab0:	e4bb      	b.n	642a <ticker_job+0xea>
	while (id_insert !=
    6ab2:	45b0      	cmp	r8, r6
    6ab4:	f47f af3c 	bne.w	6930 <ticker_job+0x5f0>
    6ab8:	e68f      	b.n	67da <ticker_job+0x49a>
}
    6aba:	b013      	add	sp, #76	; 0x4c
    6abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ac0:	ff172b5a 	.word	0xff172b5a
    6ac4:	7f172b59 	.word	0x7f172b59

00006ac8 <ticker_init>:
{
    6ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    6aca:	4d1a      	ldr	r5, [pc, #104]	; (6b34 <ticker_init+0x6c>)
{
    6acc:	9f05      	ldr	r7, [sp, #20]
    6ace:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    6ad2:	262c      	movs	r6, #44	; 0x2c
    6ad4:	4346      	muls	r6, r0
    6ad6:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    6ada:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    6adc:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    6ae0:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    6ae2:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    6ae6:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    6aea:	3b01      	subs	r3, #1
    6aec:	b2db      	uxtb	r3, r3
    6aee:	2bff      	cmp	r3, #255	; 0xff
    6af0:	d111      	bne.n	6b16 <ticker_init+0x4e>
	if (count_op) {
    6af2:	b9ec      	cbnz	r4, 6b30 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    6af4:	222c      	movs	r2, #44	; 0x2c
    6af6:	fb02 5200 	mla	r2, r2, r0, r5
    6afa:	9908      	ldr	r1, [sp, #32]
    6afc:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    6afe:	9909      	ldr	r1, [sp, #36]	; 0x24
    6b00:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    6b02:	990a      	ldr	r1, [sp, #40]	; 0x28
    6b04:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    6b06:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    6b08:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    6b0a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    6b0c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    6b0e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    6b10:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    6b12:	4620      	mov	r0, r4
    6b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    6b16:	b21a      	sxth	r2, r3
    6b18:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    6b1c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    6b1e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    6b22:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    6b26:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    6b28:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    6b2c:	b2e4      	uxtb	r4, r4
    6b2e:	e7dc      	b.n	6aea <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    6b30:	2001      	movs	r0, #1
}
    6b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b34:	20000568 	.word	0x20000568

00006b38 <ticker_trigger>:
	instance = &_instance[instance_index];
    6b38:	4a07      	ldr	r2, [pc, #28]	; (6b58 <ticker_trigger+0x20>)
    6b3a:	212c      	movs	r1, #44	; 0x2c
    6b3c:	fb00 2301 	mla	r3, r0, r1, r2
{
    6b40:	b410      	push	{r4}
	if (instance->sched_cb) {
    6b42:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    6b44:	b12c      	cbz	r4, 6b52 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    6b46:	46a4      	mov	ip, r4
    6b48:	2201      	movs	r2, #1
    6b4a:	2103      	movs	r1, #3
    6b4c:	2002      	movs	r0, #2
}
    6b4e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    6b50:	4760      	bx	ip
}
    6b52:	bc10      	pop	{r4}
    6b54:	4770      	bx	lr
    6b56:	bf00      	nop
    6b58:	20000568 	.word	0x20000568

00006b5c <ticker_start>:
{
    6b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6b60:	4f25      	ldr	r7, [pc, #148]	; (6bf8 <ticker_start+0x9c>)
    6b62:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    6b66:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    6b68:	fb08 7000 	mla	r0, r8, r0, r7
    6b6c:	fa0f fc81 	sxth.w	ip, r1
    6b70:	f8d0 e004 	ldr.w	lr, [r0, #4]
    6b74:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    6b78:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    6b7c:	78f4      	ldrb	r4, [r6, #3]
    6b7e:	1c65      	adds	r5, r4, #1
    6b80:	b2ed      	uxtb	r5, r5
		last = 0;
    6b82:	45ae      	cmp	lr, r5
    6b84:	bf98      	it	ls
    6b86:	2500      	movls	r5, #0
	if (last == user->first) {
    6b88:	f896 e001 	ldrb.w	lr, [r6, #1]
    6b8c:	45ae      	cmp	lr, r5
    6b8e:	d02f      	beq.n	6bf0 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    6b90:	f8d6 c004 	ldr.w	ip, [r6, #4]
    6b94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6b98:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    6b9c:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    6ba0:	f04f 0a03 	mov.w	sl, #3
    6ba4:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    6ba8:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    6baa:	9b08      	ldr	r3, [sp, #32]
    6bac:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    6bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6bb0:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    6bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6bb4:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    6bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6bb8:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    6bba:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    6bbe:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    6bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6bc2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    6bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6bc6:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    6bc8:	2302      	movs	r3, #2
    6bca:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    6bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6bce:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    6bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    6bd2:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    6bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    6bd6:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6bd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    6bda:	6a03      	ldr	r3, [r0, #32]
    6bdc:	4608      	mov	r0, r1
    6bde:	4798      	blx	r3
    6be0:	fb09 7308 	mla	r3, r9, r8, r7
    6be4:	2200      	movs	r2, #0
    6be6:	2104      	movs	r1, #4
    6be8:	47a8      	blx	r5
	return user_op->status;
    6bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6bf0:	2001      	movs	r0, #1
}
    6bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bf6:	bf00      	nop
    6bf8:	20000568 	.word	0x20000568

00006bfc <ticker_update>:
{
    6bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6c00:	f8df 8090 	ldr.w	r8, [pc, #144]	; 6c94 <ticker_update+0x98>
    6c04:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    6c08:	fb0a 8e00 	mla	lr, sl, r0, r8
    6c0c:	b20f      	sxth	r7, r1
    6c0e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    6c12:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    6c14:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    6c18:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    6c1c:	78c4      	ldrb	r4, [r0, #3]
    6c1e:	1c66      	adds	r6, r4, #1
    6c20:	b2f6      	uxtb	r6, r6
		last = 0;
    6c22:	42b5      	cmp	r5, r6
    6c24:	bf98      	it	ls
    6c26:	2600      	movls	r6, #0
	if (last == user->first) {
    6c28:	7845      	ldrb	r5, [r0, #1]
    6c2a:	42b5      	cmp	r5, r6
    6c2c:	d02f      	beq.n	6c8e <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    6c2e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6c32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6c36:	0125      	lsls	r5, r4, #4
    6c38:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    6c3c:	2704      	movs	r7, #4
    6c3e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    6c42:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    6c44:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    6c48:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    6c4a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    6c4e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    6c50:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6c54:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    6c56:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    6c5a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    6c5c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    6c60:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    6c62:	2302      	movs	r3, #2
    6c64:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    6c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6c68:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    6c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    6c6c:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    6c6e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    6c70:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6c72:	f8de 3020 	ldr.w	r3, [lr, #32]
    6c76:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    6c7a:	4608      	mov	r0, r1
    6c7c:	4798      	blx	r3
    6c7e:	fb09 830a 	mla	r3, r9, sl, r8
    6c82:	2200      	movs	r2, #0
    6c84:	4639      	mov	r1, r7
    6c86:	47a8      	blx	r5
	return user_op->status;
    6c88:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6c8e:	2001      	movs	r0, #1
}
    6c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c94:	20000568 	.word	0x20000568

00006c98 <ticker_stop>:
{
    6c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6c9c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 6d0c <ticker_stop+0x74>
    6ca0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    6ca4:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    6ca8:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    6caa:	f8de 0004 	ldr.w	r0, [lr, #4]
    6cae:	b20e      	sxth	r6, r1
    6cb0:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    6cb4:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    6cb8:	78fc      	ldrb	r4, [r7, #3]
    6cba:	1c65      	adds	r5, r4, #1
    6cbc:	b2ed      	uxtb	r5, r5
		last = 0;
    6cbe:	42a8      	cmp	r0, r5
    6cc0:	bf98      	it	ls
    6cc2:	2500      	movls	r5, #0
	if (last == user->first) {
    6cc4:	7878      	ldrb	r0, [r7, #1]
    6cc6:	42a8      	cmp	r0, r5
    6cc8:	d01d      	beq.n	6d06 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    6cca:	6878      	ldr	r0, [r7, #4]
    6ccc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6cd0:	0124      	lsls	r4, r4, #4
    6cd2:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    6cd4:	f04f 0c05 	mov.w	ip, #5
    6cd8:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    6cdc:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    6cde:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    6ce0:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    6ce2:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    6ce4:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    6ce6:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    6ce8:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6cea:	f8de 3020 	ldr.w	r3, [lr, #32]
    6cee:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    6cf2:	4608      	mov	r0, r1
    6cf4:	4798      	blx	r3
    6cf6:	fb08 930a 	mla	r3, r8, sl, r9
    6cfa:	2200      	movs	r2, #0
    6cfc:	2104      	movs	r1, #4
    6cfe:	47a0      	blx	r4
	return user_op->status;
    6d00:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6d06:	2001      	movs	r0, #1
}
    6d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d0c:	20000568 	.word	0x20000568

00006d10 <ticker_next_slot_get>:
{
    6d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6d14:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6d90 <ticker_next_slot_get+0x80>
    6d18:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    6d1c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    6d1e:	fb0a 8000 	mla	r0, sl, r0, r8
    6d22:	fa0f fe81 	sxth.w	lr, r1
    6d26:	6845      	ldr	r5, [r0, #4]
    6d28:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    6d2c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    6d30:	78fc      	ldrb	r4, [r7, #3]
    6d32:	1c66      	adds	r6, r4, #1
    6d34:	b2f6      	uxtb	r6, r6
		last = 0;
    6d36:	42b5      	cmp	r5, r6
    6d38:	bf98      	it	ls
    6d3a:	2600      	movls	r6, #0
	if (last == user->first) {
    6d3c:	787d      	ldrb	r5, [r7, #1]
    6d3e:	42b5      	cmp	r5, r6
    6d40:	d023      	beq.n	6d8a <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    6d42:	f8d7 c004 	ldr.w	ip, [r7, #4]
    6d46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6d4a:	0125      	lsls	r5, r4, #4
    6d4c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    6d50:	f04f 0e02 	mov.w	lr, #2
    6d54:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    6d58:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    6d5a:	9b08      	ldr	r3, [sp, #32]
    6d5c:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    6d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6d60:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    6d62:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    6d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    6d66:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    6d68:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    6d6a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    6d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    6d70:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6d72:	6a45      	ldr	r5, [r0, #36]	; 0x24
    6d74:	6a03      	ldr	r3, [r0, #32]
    6d76:	4608      	mov	r0, r1
    6d78:	4798      	blx	r3
    6d7a:	fb09 830a 	mla	r3, r9, sl, r8
    6d7e:	2200      	movs	r2, #0
    6d80:	2104      	movs	r1, #4
    6d82:	47a8      	blx	r5
	return user_op->status;
    6d84:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6d8a:	2001      	movs	r0, #1
}
    6d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d90:	20000568 	.word	0x20000568

00006d94 <ticker_job_idle_get>:
{
    6d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6d98:	f8df 906c 	ldr.w	r9, [pc, #108]	; 6e08 <ticker_job_idle_get+0x74>
    6d9c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    6da0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    6da4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    6da6:	f8de 0004 	ldr.w	r0, [lr, #4]
    6daa:	b20e      	sxth	r6, r1
    6dac:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    6db0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    6db4:	78fc      	ldrb	r4, [r7, #3]
    6db6:	1c65      	adds	r5, r4, #1
    6db8:	b2ed      	uxtb	r5, r5
		last = 0;
    6dba:	42a8      	cmp	r0, r5
    6dbc:	bf98      	it	ls
    6dbe:	2500      	movls	r5, #0
	if (last == user->first) {
    6dc0:	7878      	ldrb	r0, [r7, #1]
    6dc2:	42a8      	cmp	r0, r5
    6dc4:	d01d      	beq.n	6e02 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    6dc6:	6878      	ldr	r0, [r7, #4]
    6dc8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6dcc:	0124      	lsls	r4, r4, #4
    6dce:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    6dd0:	f04f 0c01 	mov.w	ip, #1
    6dd4:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    6dd8:	20ff      	movs	r0, #255	; 0xff
    6dda:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    6ddc:	2002      	movs	r0, #2
    6dde:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    6de0:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    6de2:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    6de4:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6de6:	f8de 3020 	ldr.w	r3, [lr, #32]
    6dea:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    6dee:	4608      	mov	r0, r1
    6df0:	4798      	blx	r3
    6df2:	fb08 930a 	mla	r3, r8, sl, r9
    6df6:	2200      	movs	r2, #0
    6df8:	2104      	movs	r1, #4
    6dfa:	47a0      	blx	r4
	return user_op->status;
    6dfc:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6e02:	2001      	movs	r0, #1
}
    6e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e08:	20000568 	.word	0x20000568

00006e0c <ticker_job_sched>:
{
    6e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6e10:	4c08      	ldr	r4, [pc, #32]	; (6e34 <ticker_job_sched+0x28>)
    6e12:	252c      	movs	r5, #44	; 0x2c
    6e14:	fb05 4300 	mla	r3, r5, r0, r4
{
    6e18:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6e1a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    6e1c:	6a1b      	ldr	r3, [r3, #32]
    6e1e:	4608      	mov	r0, r1
    6e20:	4798      	blx	r3
    6e22:	fb06 4305 	mla	r3, r6, r5, r4
    6e26:	46bc      	mov	ip, r7
    6e28:	2200      	movs	r2, #0
    6e2a:	2104      	movs	r1, #4
}
    6e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6e30:	4760      	bx	ip
    6e32:	bf00      	nop
    6e34:	20000568 	.word	0x20000568

00006e38 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    6e38:	f008 bfda 	b.w	fdf0 <cntr_cnt_get>

00006e3c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6e3c:	1a40      	subs	r0, r0, r1
}
    6e3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6e42:	4770      	bx	lr

00006e44 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    6e44:	b508      	push	{r3, lr}
    6e46:	4603      	mov	r3, r0
	if (addr_type > 1) {
    6e48:	2b01      	cmp	r3, #1
{
    6e4a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    6e4c:	d80e      	bhi.n	6e6c <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    6e4e:	b133      	cbz	r3, 6e5e <ll_addr_get+0x1a>
		if (bdaddr) {
    6e50:	b119      	cbz	r1, 6e5a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    6e52:	2206      	movs	r2, #6
    6e54:	4906      	ldr	r1, [pc, #24]	; (6e70 <ll_addr_get+0x2c>)
    6e56:	f7fa fed1 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    6e5a:	4805      	ldr	r0, [pc, #20]	; (6e70 <ll_addr_get+0x2c>)
    6e5c:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    6e5e:	b119      	cbz	r1, 6e68 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    6e60:	2206      	movs	r2, #6
    6e62:	4904      	ldr	r1, [pc, #16]	; (6e74 <ll_addr_get+0x30>)
    6e64:	f7fa feca 	bl	1bfc <memcpy>
	}

	return pub_addr;
    6e68:	4802      	ldr	r0, [pc, #8]	; (6e74 <ll_addr_get+0x30>)
}
    6e6a:	bd08      	pop	{r3, pc}
		return NULL;
    6e6c:	2000      	movs	r0, #0
    6e6e:	bd08      	pop	{r3, pc}
    6e70:	200005c6 	.word	0x200005c6
    6e74:	200005c0 	.word	0x200005c0

00006e78 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    6e78:	b570      	push	{r4, r5, r6, lr}
    6e7a:	4606      	mov	r6, r0
    6e7c:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    6e7e:	f007 f9c3 	bl	e208 <ll_adv_is_enabled>
    6e82:	4604      	mov	r4, r0
    6e84:	b110      	cbz	r0, 6e8c <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    6e86:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    6e88:	4620      	mov	r0, r4
    6e8a:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    6e8c:	f007 f9d0 	bl	e230 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    6e90:	f010 0f06 	tst.w	r0, #6
    6e94:	d1f7      	bne.n	6e86 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    6e96:	2206      	movs	r2, #6
    6e98:	4629      	mov	r1, r5
	if (addr_type) {
    6e9a:	b11e      	cbz	r6, 6ea4 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    6e9c:	4802      	ldr	r0, [pc, #8]	; (6ea8 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    6e9e:	f7fa fead 	bl	1bfc <memcpy>
    6ea2:	e7f1      	b.n	6e88 <ll_addr_set+0x10>
    6ea4:	4801      	ldr	r0, [pc, #4]	; (6eac <ll_addr_set+0x34>)
    6ea6:	e7fa      	b.n	6e9e <ll_addr_set+0x26>
    6ea8:	200005c6 	.word	0x200005c6
    6eac:	200005c0 	.word	0x200005c0

00006eb0 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    6eb0:	2300      	movs	r3, #0
    6eb2:	7003      	strb	r3, [r0, #0]
	*max = 0;
    6eb4:	700b      	strb	r3, [r1, #0]
    6eb6:	4770      	bx	lr

00006eb8 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    6eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6eba:	4607      	mov	r7, r0
    6ebc:	460e      	mov	r6, r1
	while (len) {
    6ebe:	460c      	mov	r4, r1
    6ec0:	1b35      	subs	r5, r6, r4
    6ec2:	443d      	add	r5, r7
    6ec4:	b18c      	cbz	r4, 6eea <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    6ec6:	f7fa f88d 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    6eca:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    6ecc:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    6ece:	d907      	bls.n	6ee0 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    6ed0:	2204      	movs	r2, #4
    6ed2:	eb0d 0102 	add.w	r1, sp, r2
    6ed6:	4628      	mov	r0, r5
    6ed8:	f7fa fe90 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    6edc:	3c04      	subs	r4, #4
    6ede:	e7ef      	b.n	6ec0 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    6ee0:	4622      	mov	r2, r4
    6ee2:	a901      	add	r1, sp, #4
    6ee4:	4628      	mov	r0, r5
    6ee6:	f7fa fe89 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    6eea:	2000      	movs	r0, #0
    6eec:	b003      	add	sp, #12
    6eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006ef0 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    6ef0:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    6ef2:	2300      	movs	r3, #0
    6ef4:	f008 ffb0 	bl	fe58 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    6ef8:	2000      	movs	r0, #0
    6efa:	bd08      	pop	{r3, pc}

00006efc <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    6efc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    6efe:	4802      	ldr	r0, [pc, #8]	; (6f08 <_hci_driver_init+0xc>)
    6f00:	f7fc f930 	bl	3164 <bt_hci_driver_register>

	return 0;
}
    6f04:	2000      	movs	r0, #0
    6f06:	bd08      	pop	{r3, pc}
    6f08:	00012ca0 	.word	0x00012ca0

00006f0c <hci_driver_send>:
{
    6f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
    6f0e:	8983      	ldrh	r3, [r0, #12]
{
    6f10:	4605      	mov	r5, r0
	if (!buf->len) {
    6f12:	b323      	cbz	r3, 6f5e <hci_driver_send+0x52>
	switch (type) {
    6f14:	7d03      	ldrb	r3, [r0, #20]
    6f16:	b18b      	cbz	r3, 6f3c <hci_driver_send+0x30>
    6f18:	2b02      	cmp	r3, #2
    6f1a:	d120      	bne.n	6f5e <hci_driver_send+0x52>
	err = hci_acl_handle(buf, &evt);
    6f1c:	a901      	add	r1, sp, #4
    6f1e:	f000 ffc9 	bl	7eb4 <hci_acl_handle>
    6f22:	4604      	mov	r4, r0
	if (evt) {
    6f24:	9801      	ldr	r0, [sp, #4]
    6f26:	b108      	cbz	r0, 6f2c <hci_driver_send+0x20>
		bt_recv_prio(evt);
    6f28:	f7fc f890 	bl	304c <bt_recv_prio>
	if (!err) {
    6f2c:	b91c      	cbnz	r4, 6f36 <hci_driver_send+0x2a>
		net_buf_unref(buf);
    6f2e:	4628      	mov	r0, r5
    6f30:	f009 fd4c 	bl	109cc <net_buf_unref>
    6f34:	2400      	movs	r4, #0
}
    6f36:	4620      	mov	r0, r4
    6f38:	b003      	add	sp, #12
    6f3a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf);
    6f3c:	f000 fa70 	bl	7420 <hci_cmd_handle>
	if (evt) {
    6f40:	4602      	mov	r2, r0
    6f42:	2800      	cmp	r0, #0
    6f44:	d0f3      	beq.n	6f2e <hci_driver_send+0x22>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    6f46:	6883      	ldr	r3, [r0, #8]
    6f48:	7819      	ldrb	r1, [r3, #0]
    6f4a:	2913      	cmp	r1, #19
    6f4c:	d80a      	bhi.n	6f64 <hci_driver_send+0x58>
    6f4e:	2301      	movs	r3, #1
    6f50:	408b      	lsls	r3, r1
    6f52:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    6f56:	d005      	beq.n	6f64 <hci_driver_send+0x58>
			bt_recv_prio(evt);
    6f58:	f7fc f878 	bl	304c <bt_recv_prio>
    6f5c:	e7e7      	b.n	6f2e <hci_driver_send+0x22>
		return -EINVAL;
    6f5e:	f06f 0415 	mvn.w	r4, #21
    6f62:	e7e8      	b.n	6f36 <hci_driver_send+0x2a>
			bt_recv(evt);
    6f64:	4610      	mov	r0, r2
    6f66:	f7fb fd99 	bl	2a9c <bt_recv>
    6f6a:	e7e0      	b.n	6f2e <hci_driver_send+0x22>

00006f6c <recv_thread>:
{
    6f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    6f6e:	4d23      	ldr	r5, [pc, #140]	; (6ffc <recv_thread+0x90>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    6f70:	2600      	movs	r6, #0
    6f72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6f76:	4628      	mov	r0, r5
    6f78:	f00a fb1e 	bl	115b8 <_impl_k_queue_get>
		if (node_rx && !buf) {
    6f7c:	4604      	mov	r4, r0
    6f7e:	b368      	cbz	r0, 6fdc <recv_thread+0x70>
	s8_t class = hci_get_class(node_rx);
    6f80:	f001 fb6c 	bl	865c <hci_get_class>
	switch (class) {
    6f84:	1e03      	subs	r3, r0, #0
    6f86:	9401      	str	r4, [sp, #4]
    6f88:	db03      	blt.n	6f92 <recv_thread+0x26>
    6f8a:	2b02      	cmp	r3, #2
    6f8c:	dd07      	ble.n	6f9e <recv_thread+0x32>
    6f8e:	2b03      	cmp	r3, #3
    6f90:	d027      	beq.n	6fe2 <recv_thread+0x76>
		LL_ASSERT(0);
    6f92:	4040      	eors	r0, r0
    6f94:	f380 8811 	msr	BASEPRI, r0
    6f98:	f04f 0004 	mov.w	r0, #4
    6f9c:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    6f9e:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    6fa0:	bf0e      	itee	eq
    6fa2:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6fa4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6fa8:	2001      	movne	r0, #1
    6faa:	f7fc f9a7 	bl	32fc <bt_buf_get_rx>
    6fae:	4604      	mov	r4, r0
		if (buf) {
    6fb0:	b118      	cbz	r0, 6fba <recv_thread+0x4e>
			hci_evt_encode(node_rx, buf);
    6fb2:	4601      	mov	r1, r0
    6fb4:	9801      	ldr	r0, [sp, #4]
    6fb6:	f001 f807 	bl	7fc8 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    6fba:	9b01      	ldr	r3, [sp, #4]
    6fbc:	2100      	movs	r1, #0
    6fbe:	88d8      	ldrh	r0, [r3, #6]
    6fc0:	f007 fd76 	bl	eab0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    6fc4:	a802      	add	r0, sp, #8
    6fc6:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    6fca:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    6fcc:	f007 fd0e 	bl	e9ec <ll_rx_mem_release>
		if (buf) {
    6fd0:	b124      	cbz	r4, 6fdc <recv_thread+0x70>
			if (buf->len) {
    6fd2:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    6fd4:	4620      	mov	r0, r4
			if (buf->len) {
    6fd6:	b173      	cbz	r3, 6ff6 <recv_thread+0x8a>
				bt_recv(buf);
    6fd8:	f7fb fd60 	bl	2a9c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6fdc:	f00a fd4e 	bl	11a7c <_impl_k_yield>
    6fe0:	e7c7      	b.n	6f72 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    6fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6fe6:	f7fc f989 	bl	32fc <bt_buf_get_rx>
    6fea:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    6fec:	4601      	mov	r1, r0
    6fee:	9801      	ldr	r0, [sp, #4]
    6ff0:	f000 ffbe 	bl	7f70 <hci_acl_encode>
    6ff4:	e7e1      	b.n	6fba <recv_thread+0x4e>
				net_buf_unref(buf);
    6ff6:	f009 fce9 	bl	109cc <net_buf_unref>
    6ffa:	e7ef      	b.n	6fdc <recv_thread+0x70>
    6ffc:	2000393c 	.word	0x2000393c

00007000 <prio_recv_thread>:
{
    7000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7002:	4d14      	ldr	r5, [pc, #80]	; (7054 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    7004:	4e14      	ldr	r6, [pc, #80]	; (7058 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    7006:	f10d 0102 	add.w	r1, sp, #2
    700a:	a801      	add	r0, sp, #4
    700c:	f007 fcb6 	bl	e97c <ll_rx_get>
    7010:	4604      	mov	r4, r0
    7012:	b940      	cbnz	r0, 7026 <prio_recv_thread+0x26>
		if (node_rx) {
    7014:	9b01      	ldr	r3, [sp, #4]
    7016:	b1bb      	cbz	r3, 7048 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    7018:	f007 ff60 	bl	eedc <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    701c:	9901      	ldr	r1, [sp, #4]
    701e:	4630      	mov	r0, r6
    7020:	f00a faa6 	bl	11570 <k_queue_append>
    7024:	e7ef      	b.n	7006 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7026:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    702a:	2001      	movs	r0, #1
    702c:	f7fc f966 	bl	32fc <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7030:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7032:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7034:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7038:	f001 fafc 	bl	8634 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    703c:	4638      	mov	r0, r7
    703e:	f7fc f805 	bl	304c <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7042:	f00a fd1b 	bl	11a7c <_impl_k_yield>
    7046:	e7de      	b.n	7006 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    704c:	4628      	mov	r0, r5
    704e:	f00a fd7c 	bl	11b4a <_impl_k_sem_take>
    7052:	e7d8      	b.n	7006 <prio_recv_thread+0x6>
    7054:	20003924 	.word	0x20003924
    7058:	2000393c 	.word	0x2000393c

0000705c <hci_driver_open>:
{
    705c:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    705e:	4814      	ldr	r0, [pc, #80]	; (70b0 <hci_driver_open+0x54>)
{
    7060:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    7062:	f007 ffdf 	bl	f024 <ll_init>
	if (err) {
    7066:	4604      	mov	r4, r0
    7068:	b9f8      	cbnz	r0, 70aa <hci_driver_open+0x4e>
	hci_init(NULL);
    706a:	f001 fb0f 	bl	868c <hci_init>

    706e:	f06f 0309 	mvn.w	r3, #9
    7072:	9303      	str	r3, [sp, #12]
    7074:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    7078:	4b0e      	ldr	r3, [pc, #56]	; (70b4 <hci_driver_open+0x58>)
    707a:	490f      	ldr	r1, [pc, #60]	; (70b8 <hci_driver_open+0x5c>)
    707c:	9405      	str	r4, [sp, #20]
    707e:	9404      	str	r4, [sp, #16]
    7080:	9402      	str	r4, [sp, #8]
    7082:	9401      	str	r4, [sp, #4]
    7084:	9400      	str	r4, [sp, #0]
    7086:	480d      	ldr	r0, [pc, #52]	; (70bc <hci_driver_open+0x60>)
    7088:	f00a ff34 	bl	11ef4 <_impl_k_thread_create>
    708c:	f06f 0307 	mvn.w	r3, #7
    7090:	9303      	str	r3, [sp, #12]
    7092:	9405      	str	r4, [sp, #20]
    7094:	9404      	str	r4, [sp, #16]
    7096:	9402      	str	r4, [sp, #8]
    7098:	9401      	str	r4, [sp, #4]
    709a:	9400      	str	r4, [sp, #0]
    709c:	4b08      	ldr	r3, [pc, #32]	; (70c0 <hci_driver_open+0x64>)
    709e:	4909      	ldr	r1, [pc, #36]	; (70c4 <hci_driver_open+0x68>)
    70a0:	4809      	ldr	r0, [pc, #36]	; (70c8 <hci_driver_open+0x6c>)
    70a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    70a6:	f00a ff25 	bl	11ef4 <_impl_k_thread_create>
}
    70aa:	4620      	mov	r0, r4
    70ac:	b006      	add	sp, #24
    70ae:	bd10      	pop	{r4, pc}
    70b0:	20003924 	.word	0x20003924
    70b4:	00007001 	.word	0x00007001
    70b8:	20001d40 	.word	0x20001d40
    70bc:	20001648 	.word	0x20001648
    70c0:	00006f6d 	.word	0x00006f6d
    70c4:	20001f00 	.word	0x20001f00
    70c8:	200015d8 	.word	0x200015d8

000070cc <sys_put_le32>:
	dst[1] = val >> 8;
    70cc:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    70d0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    70d2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    70d4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    70d6:	0a00      	lsrs	r0, r0, #8
    70d8:	704b      	strb	r3, [r1, #1]
    70da:	70c8      	strb	r0, [r1, #3]
    70dc:	4770      	bx	lr

000070de <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    70de:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    70e0:	3008      	adds	r0, #8
{
    70e2:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    70e4:	2102      	movs	r1, #2
{
    70e6:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    70e8:	f009 fca2 	bl	10a30 <net_buf_simple_add>
	hdr->evt = evt;
    70ec:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    70ee:	7044      	strb	r4, [r0, #1]
    70f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000070f4 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    70f4:	b538      	push	{r3, r4, r5, lr}
    70f6:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    70f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    70fc:	f7fc f90e 	bl	331c <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7100:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7102:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7104:	210f      	movs	r1, #15
    7106:	f7ff ffea 	bl	70de <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    710a:	2104      	movs	r1, #4
    710c:	f104 0008 	add.w	r0, r4, #8
    7110:	f009 fc8e 	bl	10a30 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    7114:	2301      	movs	r3, #1
    7116:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    7118:	4b02      	ldr	r3, [pc, #8]	; (7124 <cmd_status+0x30>)
	cs->status = status;
    711a:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    711c:	881b      	ldrh	r3, [r3, #0]
    711e:	8043      	strh	r3, [r0, #2]

	return buf;
}
    7120:	4620      	mov	r0, r4
    7122:	bd38      	pop	{r3, r4, r5, pc}
    7124:	200005cc 	.word	0x200005cc

00007128 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    7128:	b570      	push	{r4, r5, r6, lr}
    712a:	4604      	mov	r4, r0
    712c:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    712e:	3201      	adds	r2, #1
{
    7130:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    7132:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    7134:	b2d2      	uxtb	r2, r2
    7136:	213e      	movs	r1, #62	; 0x3e
    7138:	f7ff ffd1 	bl	70de <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    713c:	2101      	movs	r1, #1
    713e:	4620      	mov	r0, r4
    7140:	f009 fc76 	bl	10a30 <net_buf_simple_add>
	me->subevent = subevt;
    7144:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    7146:	4629      	mov	r1, r5
    7148:	4620      	mov	r0, r4
}
    714a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    714e:	f009 bc6f 	b.w	10a30 <net_buf_simple_add>
	...

00007154 <cmd_complete>:
{
    7154:	b538      	push	{r3, r4, r5, lr}
    7156:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    715c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    715e:	f7fc f8dd 	bl	331c <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    7162:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7164:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    7166:	b2d2      	uxtb	r2, r2
    7168:	210e      	movs	r1, #14
    716a:	f7ff ffb8 	bl	70de <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    716e:	6820      	ldr	r0, [r4, #0]
    7170:	2103      	movs	r1, #3
    7172:	3008      	adds	r0, #8
    7174:	f009 fc5c 	bl	10a30 <net_buf_simple_add>
	cc->ncmd = 1;
    7178:	2301      	movs	r3, #1
    717a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    717c:	4b05      	ldr	r3, [pc, #20]	; (7194 <cmd_complete+0x40>)
    717e:	881b      	ldrh	r3, [r3, #0]
    7180:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    7184:	6820      	ldr	r0, [r4, #0]
    7186:	4629      	mov	r1, r5
    7188:	3008      	adds	r0, #8
}
    718a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    718e:	f009 bc4f 	b.w	10a30 <net_buf_simple_add>
    7192:	bf00      	nop
    7194:	200005cc 	.word	0x200005cc

00007198 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    7198:	4b0e      	ldr	r3, [pc, #56]	; (71d4 <encrypt_change+0x3c>)
{
    719a:	b570      	push	{r4, r5, r6, lr}
    719c:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    719e:	e9d3 2300 	ldrd	r2, r3, [r3]
    71a2:	2300      	movs	r3, #0
    71a4:	f002 0280 	and.w	r2, r2, #128	; 0x80
    71a8:	4313      	orrs	r3, r2
{
    71aa:	4604      	mov	r4, r0
    71ac:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    71ae:	d010      	beq.n	71d2 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    71b0:	2204      	movs	r2, #4
    71b2:	2108      	movs	r1, #8
    71b4:	4628      	mov	r0, r5
    71b6:	f7ff ff92 	bl	70de <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    71ba:	2104      	movs	r1, #4
    71bc:	f105 0008 	add.w	r0, r5, #8
    71c0:	f009 fc36 	bl	10a30 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    71c4:	fab4 f384 	clz	r3, r4
    71c8:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    71ca:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    71cc:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    71d0:	70c3      	strb	r3, [r0, #3]
    71d2:	bd70      	pop	{r4, r5, r6, pc}
    71d4:	20003748 	.word	0x20003748

000071d8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    71d8:	b570      	push	{r4, r5, r6, lr}
    71da:	4604      	mov	r4, r0
    71dc:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    71de:	4b13      	ldr	r3, [pc, #76]	; (722c <le_remote_feat_complete+0x54>)
{
    71e0:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    71e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    71e6:	2200      	movs	r2, #0
    71e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    71ec:	4313      	orrs	r3, r2
{
    71ee:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    71f0:	d01b      	beq.n	722a <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    71f2:	4b0f      	ldr	r3, [pc, #60]	; (7230 <le_remote_feat_complete+0x58>)
    71f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    71f8:	2300      	movs	r3, #0
    71fa:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    71fe:	4313      	orrs	r3, r2
    7200:	d013      	beq.n	722a <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    7202:	220b      	movs	r2, #11
    7204:	2104      	movs	r1, #4
    7206:	f7ff ff8f 	bl	7128 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    720a:	2208      	movs	r2, #8
	sep->status = status;
    720c:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    720e:	f8a0 6001 	strh.w	r6, [r0, #1]
    7212:	3003      	adds	r0, #3
	if (!status) {
    7214:	b924      	cbnz	r4, 7220 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    7216:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    7218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    721c:	f7fa bcee 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    7220:	2100      	movs	r1, #0
}
    7222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    7226:	f7fa bd15 	b.w	1c54 <memset>
    722a:	bd70      	pop	{r4, r5, r6, pc}
    722c:	20003748 	.word	0x20003748
    7230:	20003750 	.word	0x20003750

00007234 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    7234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7238:	4605      	mov	r5, r0
    723a:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    723c:	4b46      	ldr	r3, [pc, #280]	; (7358 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    723e:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    7240:	e9d3 2300 	ldrd	r2, r3, [r3]
    7244:	f240 2801 	movw	r8, #513	; 0x201
    7248:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    724c:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    7250:	ea03 0309 	and.w	r3, r3, r9
    7254:	ea02 0208 	and.w	r2, r2, r8
    7258:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    725a:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    725c:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    7260:	d077      	beq.n	7352 <le_conn_complete.part.39+0x11e>
	if (!status) {
    7262:	2d00      	cmp	r5, #0
    7264:	d150      	bne.n	7308 <le_conn_complete.part.39+0xd4>
		conn_count++;
    7266:	4a3d      	ldr	r2, [pc, #244]	; (735c <le_conn_complete.part.39+0x128>)
    7268:	6813      	ldr	r3, [r2, #0]
    726a:	3301      	adds	r3, #1
    726c:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    726e:	ea5a 030b 	orrs.w	r3, sl, fp
    7272:	f101 0803 	add.w	r8, r1, #3
    7276:	d151      	bne.n	731c <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    7278:	2212      	movs	r2, #18
    727a:	2101      	movs	r1, #1
    727c:	f7ff ff54 	bl	7128 <meta_evt>
	lecc->status = 0x00;
    7280:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    7282:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    7286:	7863      	ldrb	r3, [r4, #1]
    7288:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    728a:	78a3      	ldrb	r3, [r4, #2]
    728c:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    728e:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    7290:	2206      	movs	r2, #6
    7292:	4641      	mov	r1, r8
    7294:	3005      	adds	r0, #5
    7296:	f7fa fcb1 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    729a:	8ae3      	ldrh	r3, [r4, #22]
    729c:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    72a0:	8b23      	ldrh	r3, [r4, #24]
    72a2:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    72a6:	8b63      	ldrh	r3, [r4, #26]
    72a8:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    72ac:	7f23      	ldrb	r3, [r4, #28]
    72ae:	747b      	strb	r3, [r7, #17]
    72b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    72b4:	221e      	movs	r2, #30
    72b6:	210a      	movs	r1, #10
    72b8:	f7ff ff36 	bl	7128 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    72bc:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    72be:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    72c0:	2100      	movs	r1, #0
    72c2:	f7fa fcc7 	bl	1c54 <memset>
		lecc->status = status;
    72c6:	7025      	strb	r5, [r4, #0]
    72c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    72cc:	7d63      	ldrb	r3, [r4, #21]
    72ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    72d2:	2b40      	cmp	r3, #64	; 0x40
    72d4:	d138      	bne.n	7348 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    72d6:	2206      	movs	r2, #6
    72d8:	f104 0110 	add.w	r1, r4, #16
    72dc:	f7fa fc8e 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    72e0:	2206      	movs	r2, #6
    72e2:	f104 0109 	add.w	r1, r4, #9
    72e6:	f107 0011 	add.w	r0, r7, #17
    72ea:	f7fa fc87 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    72ee:	8ae3      	ldrh	r3, [r4, #22]
    72f0:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    72f4:	8b23      	ldrh	r3, [r4, #24]
    72f6:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    72fa:	8b63      	ldrh	r3, [r4, #26]
    72fc:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    7300:	7f23      	ldrb	r3, [r4, #28]
    7302:	777b      	strb	r3, [r7, #29]
    7304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    7308:	ea5a 030b 	orrs.w	r3, sl, fp
    730c:	d1d2      	bne.n	72b4 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    730e:	2212      	movs	r2, #18
    7310:	2101      	movs	r1, #1
    7312:	f7ff ff09 	bl	7128 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    7316:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    7318:	4604      	mov	r4, r0
    731a:	e7d1      	b.n	72c0 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    731c:	221e      	movs	r2, #30
    731e:	210a      	movs	r1, #10
    7320:	f7ff ff02 	bl	7128 <meta_evt>
		leecc->status = 0x00;
    7324:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    7326:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    732a:	7863      	ldrb	r3, [r4, #1]
    732c:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    732e:	78a3      	ldrb	r3, [r4, #2]
    7330:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7332:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    7334:	2206      	movs	r2, #6
    7336:	4641      	mov	r1, r8
    7338:	3005      	adds	r0, #5
    733a:	f7fa fc5f 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    733e:	7be3      	ldrb	r3, [r4, #15]
    7340:	f107 000b 	add.w	r0, r7, #11
    7344:	2b00      	cmp	r3, #0
    7346:	d1c1      	bne.n	72cc <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    7348:	2206      	movs	r2, #6
    734a:	2100      	movs	r1, #0
    734c:	f7fa fc82 	bl	1c54 <memset>
    7350:	e7c6      	b.n	72e0 <le_conn_complete.part.39+0xac>
    7352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7356:	bf00      	nop
    7358:	20003750 	.word	0x20003750
    735c:	200005d0 	.word	0x200005d0

00007360 <bt_addr_le_to_str.constprop.71>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7360:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    7362:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7364:	b08a      	sub	sp, #40	; 0x28
    7366:	4604      	mov	r4, r0
    7368:	460e      	mov	r6, r1
    736a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    736c:	2b03      	cmp	r3, #3
    736e:	d820      	bhi.n	73b2 <bt_addr_le_to_str.constprop.71+0x52>
    7370:	e8df f003 	tbb	[pc, r3]
    7374:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    7378:	4911      	ldr	r1, [pc, #68]	; (73c0 <bt_addr_le_to_str.constprop.71+0x60>)
		strcpy(type, "random");
    737a:	4628      	mov	r0, r5
    737c:	f7fa fc0a 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7380:	7862      	ldrb	r2, [r4, #1]
    7382:	9204      	str	r2, [sp, #16]
    7384:	78a2      	ldrb	r2, [r4, #2]
    7386:	9203      	str	r2, [sp, #12]
    7388:	78e2      	ldrb	r2, [r4, #3]
    738a:	9202      	str	r2, [sp, #8]
    738c:	7922      	ldrb	r2, [r4, #4]
    738e:	9201      	str	r2, [sp, #4]
    7390:	7962      	ldrb	r2, [r4, #5]
    7392:	9200      	str	r2, [sp, #0]
    7394:	79a3      	ldrb	r3, [r4, #6]
    7396:	9505      	str	r5, [sp, #20]
    7398:	4a0a      	ldr	r2, [pc, #40]	; (73c4 <bt_addr_le_to_str.constprop.71+0x64>)
    739a:	211b      	movs	r1, #27
    739c:	4630      	mov	r0, r6
    739e:	f7f9 fe03 	bl	fa8 <snprintk>
}
    73a2:	b00a      	add	sp, #40	; 0x28
    73a4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    73a6:	4908      	ldr	r1, [pc, #32]	; (73c8 <bt_addr_le_to_str.constprop.71+0x68>)
    73a8:	e7e7      	b.n	737a <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "public id");
    73aa:	4908      	ldr	r1, [pc, #32]	; (73cc <bt_addr_le_to_str.constprop.71+0x6c>)
    73ac:	e7e5      	b.n	737a <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "random id");
    73ae:	4908      	ldr	r1, [pc, #32]	; (73d0 <bt_addr_le_to_str.constprop.71+0x70>)
    73b0:	e7e3      	b.n	737a <bt_addr_le_to_str.constprop.71+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    73b2:	4a08      	ldr	r2, [pc, #32]	; (73d4 <bt_addr_le_to_str.constprop.71+0x74>)
    73b4:	210a      	movs	r1, #10
    73b6:	4628      	mov	r0, r5
    73b8:	f7f9 fdf6 	bl	fa8 <snprintk>
    73bc:	e7e0      	b.n	7380 <bt_addr_le_to_str.constprop.71+0x20>
    73be:	bf00      	nop
    73c0:	000125ad 	.word	0x000125ad
    73c4:	000125d6 	.word	0x000125d6
    73c8:	000125b4 	.word	0x000125b4
    73cc:	000125bb 	.word	0x000125bb
    73d0:	000125c5 	.word	0x000125c5
    73d4:	000125cf 	.word	0x000125cf

000073d8 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    73d8:	b510      	push	{r4, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    73da:	7803      	ldrb	r3, [r0, #0]
    73dc:	f003 020f 	and.w	r2, r3, #15
    73e0:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    73e2:	b08a      	sub	sp, #40	; 0x28
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    73e4:	d116      	bne.n	7414 <le_adv_ext_report.isra.66+0x3c>
    73e6:	7842      	ldrb	r2, [r0, #1]
    73e8:	b1a2      	cbz	r2, 7414 <le_adv_ext_report.isra.66+0x3c>
		if (!p->ext_hdr_len) {
    73ea:	7882      	ldrb	r2, [r0, #2]
    73ec:	0691      	lsls	r1, r2, #26
    73ee:	d011      	beq.n	7414 <le_adv_ext_report.isra.66+0x3c>
		if (h->adv_addr) {
    73f0:	78c2      	ldrb	r2, [r0, #3]
    73f2:	07d2      	lsls	r2, r2, #31
    73f4:	d50e      	bpl.n	7414 <le_adv_ext_report.isra.66+0x3c>
			addr.type = adv->tx_addr;
    73f6:	ac0a      	add	r4, sp, #40	; 0x28
    73f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    73fc:	f804 3d24 	strb.w	r3, [r4, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    7400:	1d01      	adds	r1, r0, #4
    7402:	2206      	movs	r2, #6
    7404:	f10d 0005 	add.w	r0, sp, #5
    7408:	f7fa fbf8 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    740c:	a903      	add	r1, sp, #12
    740e:	4620      	mov	r0, r4
    7410:	f7ff ffa6 	bl	7360 <bt_addr_le_to_str.constprop.71>
}
    7414:	b00a      	add	sp, #40	; 0x28
    7416:	bd10      	pop	{r4, pc}

00007418 <sys_get_le64>:
{
    7418:	4603      	mov	r3, r0
}
    741a:	6800      	ldr	r0, [r0, #0]
    741c:	6859      	ldr	r1, [r3, #4]
    741e:	4770      	bx	lr

00007420 <hci_cmd_handle>:
{
    7420:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    7422:	8981      	ldrh	r1, [r0, #12]
{
    7424:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    7426:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    7428:	2902      	cmp	r1, #2
{
    742a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    742c:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    742e:	d802      	bhi.n	7436 <hci_cmd_handle+0x16>
		return NULL;
    7430:	2000      	movs	r0, #0
}
    7432:	b013      	add	sp, #76	; 0x4c
    7434:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    7436:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    7438:	4eba      	ldr	r6, [pc, #744]	; (7724 <hci_cmd_handle+0x304>)
    743a:	781a      	ldrb	r2, [r3, #0]
    743c:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    743e:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    7440:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    7444:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    7446:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    7448:	d8f2      	bhi.n	7430 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    744a:	2103      	movs	r1, #3
    744c:	f104 0008 	add.w	r0, r4, #8
    7450:	f009 fb1c 	bl	10a8c <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    7454:	8833      	ldrh	r3, [r6, #0]
    7456:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    745a:	0a9b      	lsrs	r3, r3, #10
    745c:	2b04      	cmp	r3, #4
    745e:	f000 80bd 	beq.w	75dc <hci_cmd_handle+0x1bc>
    7462:	d809      	bhi.n	7478 <hci_cmd_handle+0x58>
    7464:	2b01      	cmp	r3, #1
    7466:	d027      	beq.n	74b8 <hci_cmd_handle+0x98>
    7468:	2b03      	cmp	r3, #3
    746a:	d03c      	beq.n	74e6 <hci_cmd_handle+0xc6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    746c:	2101      	movs	r1, #1
    746e:	a807      	add	r0, sp, #28
    7470:	f7ff fe70 	bl	7154 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    7474:	2301      	movs	r3, #1
    7476:	e28d      	b.n	7994 <hci_cmd_handle+0x574>
	switch (BT_OGF(_opcode)) {
    7478:	2b08      	cmp	r3, #8
    747a:	f000 815d 	beq.w	7738 <hci_cmd_handle+0x318>
    747e:	2b3f      	cmp	r3, #63	; 0x3f
    7480:	d1f4      	bne.n	746c <hci_cmd_handle+0x4c>
	switch (ocf) {
    7482:	3a01      	subs	r2, #1
    7484:	2a09      	cmp	r2, #9
    7486:	d8f1      	bhi.n	746c <hci_cmd_handle+0x4c>
    7488:	a301      	add	r3, pc, #4	; (adr r3, 7490 <hci_cmd_handle+0x70>)
    748a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    748e:	bf00      	nop
    7490:	00007ccb 	.word	0x00007ccb
    7494:	00007cfb 	.word	0x00007cfb
    7498:	00007d25 	.word	0x00007d25
    749c:	0000746d 	.word	0x0000746d
    74a0:	0000746d 	.word	0x0000746d
    74a4:	00007d6b 	.word	0x00007d6b
    74a8:	0000746d 	.word	0x0000746d
    74ac:	00007d3d 	.word	0x00007d3d
    74b0:	00007d77 	.word	0x00007d77
    74b4:	00007de5 	.word	0x00007de5
	switch (ocf) {
    74b8:	2a06      	cmp	r2, #6
    74ba:	d006      	beq.n	74ca <hci_cmd_handle+0xaa>
    74bc:	2a1d      	cmp	r2, #29
    74be:	d1d5      	bne.n	746c <hci_cmd_handle+0x4c>
	handle = sys_le16_to_cpu(cmd->handle);
    74c0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    74c2:	8818      	ldrh	r0, [r3, #0]
    74c4:	f007 f96f 	bl	e7a6 <ll_version_ind_send>
    74c8:	e004      	b.n	74d4 <hci_cmd_handle+0xb4>
    74ca:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    74cc:	7899      	ldrb	r1, [r3, #2]
    74ce:	8818      	ldrh	r0, [r3, #0]
    74d0:	f007 f97d 	bl	e7ce <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    74d4:	2800      	cmp	r0, #0
    74d6:	bf14      	ite	ne
    74d8:	200c      	movne	r0, #12
    74da:	2000      	moveq	r0, #0
    74dc:	f7ff fe0a 	bl	70f4 <cmd_status>
    74e0:	9007      	str	r0, [sp, #28]
	return evt;
    74e2:	9807      	ldr	r0, [sp, #28]
    74e4:	e7a5      	b.n	7432 <hci_cmd_handle+0x12>
	switch (ocf) {
    74e6:	2a2d      	cmp	r2, #45	; 0x2d
    74e8:	d03a      	beq.n	7560 <hci_cmd_handle+0x140>
    74ea:	d820      	bhi.n	752e <hci_cmd_handle+0x10e>
    74ec:	2a01      	cmp	r2, #1
    74ee:	d02b      	beq.n	7548 <hci_cmd_handle+0x128>
    74f0:	2a03      	cmp	r2, #3
    74f2:	d1bb      	bne.n	746c <hci_cmd_handle+0x4c>
	dup_count = -1;
    74f4:	4b8c      	ldr	r3, [pc, #560]	; (7728 <hci_cmd_handle+0x308>)
    74f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    74fa:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    74fc:	4b8b      	ldr	r3, [pc, #556]	; (772c <hci_cmd_handle+0x30c>)
    74fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7502:	f641 71ff 	movw	r1, #8191	; 0x1fff
    7506:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    750a:	4b89      	ldr	r3, [pc, #548]	; (7730 <hci_cmd_handle+0x310>)
    750c:	2000      	movs	r0, #0
    750e:	2100      	movs	r1, #0
    7510:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    7514:	4b87      	ldr	r3, [pc, #540]	; (7734 <hci_cmd_handle+0x314>)
    7516:	201f      	movs	r0, #31
    7518:	2100      	movs	r1, #0
    751a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    751e:	f006 fe23 	bl	e168 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    7522:	2101      	movs	r1, #1
    7524:	a807      	add	r0, sp, #28
    7526:	f7ff fe15 	bl	7154 <cmd_complete>
	ccst->status = 0x00;
    752a:	2300      	movs	r3, #0
    752c:	e232      	b.n	7994 <hci_cmd_handle+0x574>
	switch (ocf) {
    752e:	2a7b      	cmp	r2, #123	; 0x7b
    7530:	d02c      	beq.n	758c <hci_cmd_handle+0x16c>
    7532:	2a7c      	cmp	r2, #124	; 0x7c
    7534:	d041      	beq.n	75ba <hci_cmd_handle+0x19a>
    7536:	2a63      	cmp	r2, #99	; 0x63
    7538:	d198      	bne.n	746c <hci_cmd_handle+0x4c>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    753a:	68a0      	ldr	r0, [r4, #8]
    753c:	f7ff ff6c 	bl	7418 <sys_get_le64>
    7540:	4b7b      	ldr	r3, [pc, #492]	; (7730 <hci_cmd_handle+0x310>)
	le_event_mask = sys_get_le64(cmd->events);
    7542:	e9c3 0100 	strd	r0, r1, [r3]
    7546:	e7ec      	b.n	7522 <hci_cmd_handle+0x102>
	event_mask = sys_get_le64(cmd->events);
    7548:	68a0      	ldr	r0, [r4, #8]
    754a:	f7ff ff65 	bl	7418 <sys_get_le64>
    754e:	4b77      	ldr	r3, [pc, #476]	; (772c <hci_cmd_handle+0x30c>)
    7550:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    7554:	4611      	mov	r1, r2
    7556:	a807      	add	r0, sp, #28
    7558:	f7ff fdfc 	bl	7154 <cmd_complete>
	ccst->status = 0x00;
    755c:	7005      	strb	r5, [r0, #0]
    755e:	e7c0      	b.n	74e2 <hci_cmd_handle+0xc2>
    7560:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    7562:	2104      	movs	r1, #4
    7564:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    7566:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    7568:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    756a:	f7ff fdf3 	bl	7154 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    756e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    7570:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    7572:	1cc2      	adds	r2, r0, #3
    7574:	4639      	mov	r1, r7
    7576:	4630      	mov	r0, r6
    7578:	f007 f93d 	bl	e7f6 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    757c:	2800      	cmp	r0, #0
    757e:	bf14      	ite	ne
    7580:	2302      	movne	r3, #2
    7582:	2300      	moveq	r3, #0
    7584:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    7586:	f8a4 5001 	strh.w	r5, [r4, #1]
    758a:	e7aa      	b.n	74e2 <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
    758c:	68a3      	ldr	r3, [r4, #8]
    758e:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    7590:	a908      	add	r1, sp, #32
    7592:	b2a0      	uxth	r0, r4
    7594:	f007 f939 	bl	e80a <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    7598:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    759a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    759c:	a807      	add	r0, sp, #28
    759e:	f7ff fdd9 	bl	7154 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    75a2:	2d00      	cmp	r5, #0
    75a4:	bf14      	ite	ne
    75a6:	230c      	movne	r3, #12
    75a8:	2300      	moveq	r3, #0
    75aa:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    75ac:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    75b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    75b4:	f8a0 3003 	strh.w	r3, [r0, #3]
    75b8:	e793      	b.n	74e2 <hci_cmd_handle+0xc2>
    75ba:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    75bc:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    75be:	8859      	ldrh	r1, [r3, #2]
    75c0:	b2a0      	uxth	r0, r4
    75c2:	f007 f936 	bl	e832 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    75c6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    75c8:	2103      	movs	r1, #3
    75ca:	a807      	add	r0, sp, #28
    75cc:	f7ff fdc2 	bl	7154 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    75d0:	2d00      	cmp	r5, #0
    75d2:	bf14      	ite	ne
    75d4:	230c      	movne	r3, #12
    75d6:	2300      	moveq	r3, #0
    75d8:	7003      	strb	r3, [r0, #0]
    75da:	e271      	b.n	7ac0 <hci_cmd_handle+0x6a0>
	switch (ocf) {
    75dc:	3a01      	subs	r2, #1
    75de:	2a08      	cmp	r2, #8
    75e0:	f63f af44 	bhi.w	746c <hci_cmd_handle+0x4c>
    75e4:	a301      	add	r3, pc, #4	; (adr r3, 75ec <hci_cmd_handle+0x1cc>)
    75e6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    75ea:	bf00      	nop
    75ec:	00007611 	.word	0x00007611
    75f0:	0000763b 	.word	0x0000763b
    75f4:	000076ef 	.word	0x000076ef
    75f8:	0000746d 	.word	0x0000746d
    75fc:	0000746d 	.word	0x0000746d
    7600:	0000746d 	.word	0x0000746d
    7604:	0000746d 	.word	0x0000746d
    7608:	0000746d 	.word	0x0000746d
    760c:	0000770b 	.word	0x0000770b
	rp = cmd_complete(evt, sizeof(*rp));
    7610:	2109      	movs	r1, #9
    7612:	a807      	add	r0, sp, #28
    7614:	f7ff fd9e 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7618:	2300      	movs	r3, #0
    761a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    761c:	7083      	strb	r3, [r0, #2]
    761e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    7620:	f06f 030e 	mvn.w	r3, #14
    7624:	7143      	strb	r3, [r0, #5]
    7626:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    7628:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    762a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    762c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    7630:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    7632:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    7634:	71c3      	strb	r3, [r0, #7]
    7636:	7203      	strb	r3, [r0, #8]
    7638:	e753      	b.n	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    763a:	2141      	movs	r1, #65	; 0x41
    763c:	a807      	add	r0, sp, #28
    763e:	f7ff fd89 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7642:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7644:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7646:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    7648:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    764c:	f7fa fb02 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    7650:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    7652:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    7654:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7658:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    765a:	79a3      	ldrb	r3, [r4, #6]
    765c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    7660:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    7662:	7ae3      	ldrb	r3, [r4, #11]
    7664:	f043 0304 	orr.w	r3, r3, #4
    7668:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    766a:	7be3      	ldrb	r3, [r4, #15]
    766c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    7670:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    7672:	7c23      	ldrb	r3, [r4, #16]
    7674:	f043 0302 	orr.w	r3, r3, #2
    7678:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    767a:	7de3      	ldrb	r3, [r4, #23]
    767c:	f043 0304 	orr.w	r3, r3, #4
    7680:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    7682:	7ea3      	ldrb	r3, [r4, #26]
    7684:	f043 0317 	orr.w	r3, r3, #23
    7688:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    768a:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    768c:	f043 0309 	orr.w	r3, r3, #9
    7690:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    7692:	7863      	ldrb	r3, [r4, #1]
    7694:	f043 0320 	orr.w	r3, r3, #32
    7698:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    769a:	23ff      	movs	r3, #255	; 0xff
    769c:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    769e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    76a2:	f063 030f 	orn	r3, r3, #15
    76a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    76aa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    76ae:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    76b2:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    76b6:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    76b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    76bc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    76c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    76c4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    76c8:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    76cc:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    76d0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    76d4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    76d8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    76dc:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    76e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    76e4:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    76e8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    76ec:	e6f9      	b.n	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    76ee:	2109      	movs	r1, #9
    76f0:	a807      	add	r0, sp, #28
    76f2:	f7ff fd2f 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    76f6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    76f8:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    76fa:	2208      	movs	r2, #8
	rp->status = 0x00;
    76fc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7700:	f7fa faa8 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    7704:	2360      	movs	r3, #96	; 0x60
    7706:	7163      	strb	r3, [r4, #5]
    7708:	e6eb      	b.n	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    770a:	2107      	movs	r1, #7
    770c:	a807      	add	r0, sp, #28
    770e:	f7ff fd21 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7712:	4601      	mov	r1, r0
    7714:	2300      	movs	r3, #0
    7716:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    771a:	4618      	mov	r0, r3
    771c:	f7ff fb92 	bl	6e44 <ll_addr_get>
    7720:	e6df      	b.n	74e2 <hci_cmd_handle+0xc2>
    7722:	bf00      	nop
    7724:	200005cc 	.word	0x200005cc
    7728:	200005d4 	.word	0x200005d4
    772c:	20003748 	.word	0x20003748
    7730:	20000660 	.word	0x20000660
    7734:	20003750 	.word	0x20003750
	switch (ocf) {
    7738:	3a01      	subs	r2, #1
    773a:	2a4d      	cmp	r2, #77	; 0x4d
    773c:	f63f ae96 	bhi.w	746c <hci_cmd_handle+0x4c>
    7740:	a301      	add	r3, pc, #4	; (adr r3, 7748 <hci_cmd_handle+0x328>)
    7742:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    7746:	bf00      	nop
    7748:	00007881 	.word	0x00007881
    774c:	0000788b 	.word	0x0000788b
    7750:	000078a3 	.word	0x000078a3
    7754:	0000746d 	.word	0x0000746d
    7758:	000078c7 	.word	0x000078c7
    775c:	0000746d 	.word	0x0000746d
    7760:	0000746d 	.word	0x0000746d
    7764:	0000746d 	.word	0x0000746d
    7768:	0000746d 	.word	0x0000746d
    776c:	0000746d 	.word	0x0000746d
    7770:	0000796b 	.word	0x0000796b
    7774:	00007999 	.word	0x00007999
    7778:	000079b9 	.word	0x000079b9
    777c:	000079e3 	.word	0x000079e3
    7780:	000078d3 	.word	0x000078d3
    7784:	000078e9 	.word	0x000078e9
    7788:	000078fb 	.word	0x000078fb
    778c:	00007903 	.word	0x00007903
    7790:	00007a83 	.word	0x00007a83
    7794:	00007a43 	.word	0x00007a43
    7798:	00007a5f 	.word	0x00007a5f
    779c:	00007a79 	.word	0x00007a79
    77a0:	0000790b 	.word	0x0000790b
    77a4:	00007931 	.word	0x00007931
    77a8:	00007a4b 	.word	0x00007a4b
    77ac:	0000746d 	.word	0x0000746d
    77b0:	0000746d 	.word	0x0000746d
    77b4:	00007947 	.word	0x00007947
    77b8:	0000746d 	.word	0x0000746d
    77bc:	0000746d 	.word	0x0000746d
    77c0:	0000746d 	.word	0x0000746d
    77c4:	00007a9d 	.word	0x00007a9d
    77c8:	00007ac7 	.word	0x00007ac7
    77cc:	00007ad5 	.word	0x00007ad5
    77d0:	00007ae5 	.word	0x00007ae5
    77d4:	00007afd 	.word	0x00007afd
    77d8:	0000746d 	.word	0x0000746d
    77dc:	0000746d 	.word	0x0000746d
    77e0:	00007c15 	.word	0x00007c15
    77e4:	00007c23 	.word	0x00007c23
    77e8:	00007c2b 	.word	0x00007c2b
    77ec:	00007c3b 	.word	0x00007c3b
    77f0:	00007c4d 	.word	0x00007c4d
    77f4:	00007c6b 	.word	0x00007c6b
    77f8:	00007c89 	.word	0x00007c89
    77fc:	00007c9f 	.word	0x00007c9f
    7800:	00007b19 	.word	0x00007b19
    7804:	00007b45 	.word	0x00007b45
    7808:	00007b9b 	.word	0x00007b9b
    780c:	00007bb9 	.word	0x00007bb9
    7810:	0000746d 	.word	0x0000746d
    7814:	0000746d 	.word	0x0000746d
    7818:	0000746d 	.word	0x0000746d
    781c:	0000746d 	.word	0x0000746d
    7820:	0000746d 	.word	0x0000746d
    7824:	0000746d 	.word	0x0000746d
    7828:	0000746d 	.word	0x0000746d
    782c:	0000746d 	.word	0x0000746d
    7830:	0000746d 	.word	0x0000746d
    7834:	0000746d 	.word	0x0000746d
    7838:	0000746d 	.word	0x0000746d
    783c:	0000746d 	.word	0x0000746d
    7840:	0000746d 	.word	0x0000746d
    7844:	0000746d 	.word	0x0000746d
    7848:	0000746d 	.word	0x0000746d
    784c:	0000746d 	.word	0x0000746d
    7850:	0000746d 	.word	0x0000746d
    7854:	0000746d 	.word	0x0000746d
    7858:	0000746d 	.word	0x0000746d
    785c:	0000746d 	.word	0x0000746d
    7860:	0000746d 	.word	0x0000746d
    7864:	0000746d 	.word	0x0000746d
    7868:	0000746d 	.word	0x0000746d
    786c:	0000746d 	.word	0x0000746d
    7870:	00007cb3 	.word	0x00007cb3
    7874:	0000746d 	.word	0x0000746d
    7878:	0000746d 	.word	0x0000746d
    787c:	00007ca9 	.word	0x00007ca9
	le_event_mask = sys_get_le64(cmd->events);
    7880:	68a0      	ldr	r0, [r4, #8]
    7882:	f7ff fdc9 	bl	7418 <sys_get_le64>
    7886:	4baa      	ldr	r3, [pc, #680]	; (7b30 <hci_cmd_handle+0x710>)
    7888:	e65b      	b.n	7542 <hci_cmd_handle+0x122>
	rp = cmd_complete(evt, sizeof(*rp));
    788a:	2104      	movs	r1, #4
    788c:	a807      	add	r0, sp, #28
    788e:	f7ff fc61 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7892:	2300      	movs	r3, #0
    7894:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    7896:	221b      	movs	r2, #27
    7898:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    789a:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    789c:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    789e:	70c3      	strb	r3, [r0, #3]
    78a0:	e61f      	b.n	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    78a2:	2109      	movs	r1, #9
    78a4:	a807      	add	r0, sp, #28
    78a6:	f7ff fc55 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    78aa:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    78ac:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    78ae:	2208      	movs	r2, #8
	rp->status = 0x00;
    78b0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    78b4:	f7fa f9ce 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    78b8:	23ff      	movs	r3, #255	; 0xff
    78ba:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    78bc:	2341      	movs	r3, #65	; 0x41
    78be:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    78c0:	2301      	movs	r3, #1
    78c2:	70e3      	strb	r3, [r4, #3]
    78c4:	e60d      	b.n	74e2 <hci_cmd_handle+0xc2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    78c6:	68a1      	ldr	r1, [r4, #8]
    78c8:	2001      	movs	r0, #1
    78ca:	f7ff fad5 	bl	6e78 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    78ce:	4604      	mov	r4, r0
    78d0:	e0af      	b.n	7a32 <hci_cmd_handle+0x612>
	rp = cmd_complete(evt, sizeof(*rp));
    78d2:	2102      	movs	r1, #2
    78d4:	a807      	add	r0, sp, #28
    78d6:	f7ff fc3d 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    78da:	2300      	movs	r3, #0
    78dc:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    78de:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    78e0:	f007 fdee 	bl	f4c0 <ll_wl_size_get>
    78e4:	7060      	strb	r0, [r4, #1]
    78e6:	e5fc      	b.n	74e2 <hci_cmd_handle+0xc2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    78e8:	2101      	movs	r1, #1
    78ea:	a807      	add	r0, sp, #28
    78ec:	f7ff fc32 	bl	7154 <cmd_complete>
    78f0:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    78f2:	f007 fde7 	bl	f4c4 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    78f6:	7020      	strb	r0, [r4, #0]
    78f8:	e5f3      	b.n	74e2 <hci_cmd_handle+0xc2>
	status = ll_wl_add(&cmd->addr);
    78fa:	68a0      	ldr	r0, [r4, #8]
    78fc:	f007 fe8e 	bl	f61c <ll_wl_add>
    7900:	e7e5      	b.n	78ce <hci_cmd_handle+0x4ae>
	status = ll_wl_remove(&cmd->addr);
    7902:	68a0      	ldr	r0, [r4, #8]
    7904:	f007 fdfe 	bl	f504 <ll_wl_remove>
    7908:	e7e1      	b.n	78ce <hci_cmd_handle+0x4ae>
    790a:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    790c:	2300      	movs	r3, #0
    790e:	aa08      	add	r2, sp, #32
    7910:	f100 0110 	add.w	r1, r0, #16
    7914:	f008 faa0 	bl	fe58 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    7918:	2111      	movs	r1, #17
    791a:	a807      	add	r0, sp, #28
    791c:	f7ff fc1a 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7920:	2300      	movs	r3, #0
    7922:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    7926:	2210      	movs	r2, #16
    7928:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    792a:	f7fa f967 	bl	1bfc <memcpy>
    792e:	e5d8      	b.n	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7930:	2109      	movs	r1, #9
    7932:	a807      	add	r0, sp, #28
    7934:	f7ff fc0e 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7938:	2300      	movs	r3, #0
    793a:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    793e:	2108      	movs	r1, #8
    7940:	f7ff faba 	bl	6eb8 <bt_rand>
    7944:	e5cd      	b.n	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7946:	2109      	movs	r1, #9
    7948:	a807      	add	r0, sp, #28
    794a:	f7ff fc03 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    794e:	4601      	mov	r1, r0
    7950:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7952:	4602      	mov	r2, r0
	rp->status = 0x00;
    7954:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    7958:	4876      	ldr	r0, [pc, #472]	; (7b34 <hci_cmd_handle+0x714>)
    795a:	f7ff fbb7 	bl	70cc <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    795e:	f240 203f 	movw	r0, #575	; 0x23f
    7962:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    7964:	f7ff fbb2 	bl	70cc <sys_put_le32>
    7968:	e5bb      	b.n	74e2 <hci_cmd_handle+0xc2>
    796a:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    796c:	7963      	ldrb	r3, [r4, #5]
    796e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    7972:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    7976:	7820      	ldrb	r0, [r4, #0]
    7978:	79a4      	ldrb	r4, [r4, #6]
    797a:	9400      	str	r4, [sp, #0]
    797c:	f007 fbd8 	bl	f130 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    7980:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    7982:	2101      	movs	r1, #1
    7984:	a807      	add	r0, sp, #28
    7986:	f7ff fbe5 	bl	7154 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    798a:	2c00      	cmp	r4, #0
    798c:	bf18      	it	ne
    798e:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    7990:	bf08      	it	eq
    7992:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    7994:	7003      	strb	r3, [r0, #0]
    7996:	e5a4      	b.n	74e2 <hci_cmd_handle+0xc2>
    7998:	68a2      	ldr	r2, [r4, #8]
    799a:	4b67      	ldr	r3, [pc, #412]	; (7b38 <hci_cmd_handle+0x718>)
	if (cmd->enable && cmd->filter_dup) {
    799c:	7810      	ldrb	r0, [r2, #0]
    799e:	b140      	cbz	r0, 79b2 <hci_cmd_handle+0x592>
    79a0:	7852      	ldrb	r2, [r2, #1]
    79a2:	b132      	cbz	r2, 79b2 <hci_cmd_handle+0x592>
		dup_count = 0;
    79a4:	2200      	movs	r2, #0
    79a6:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    79a8:	4b64      	ldr	r3, [pc, #400]	; (7b3c <hci_cmd_handle+0x71c>)
		dup_count = -1;
    79aa:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    79ac:	f007 fbe0 	bl	f170 <ll_scan_enable>
    79b0:	e7e6      	b.n	7980 <hci_cmd_handle+0x560>
		dup_count = -1;
    79b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    79b6:	e7f8      	b.n	79aa <hci_cmd_handle+0x58a>
    79b8:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    79ba:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    79be:	7963      	ldrb	r3, [r4, #5]
    79c0:	7922      	ldrb	r2, [r4, #4]
    79c2:	8861      	ldrh	r1, [r4, #2]
    79c4:	8820      	ldrh	r0, [r4, #0]
    79c6:	9504      	str	r5, [sp, #16]
    79c8:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    79cc:	9503      	str	r5, [sp, #12]
    79ce:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    79d2:	9502      	str	r5, [sp, #8]
    79d4:	7b25      	ldrb	r5, [r4, #12]
    79d6:	9501      	str	r5, [sp, #4]
    79d8:	3406      	adds	r4, #6
    79da:	9400      	str	r4, [sp, #0]
    79dc:	f007 fc02 	bl	f1e4 <ll_create_connection>
    79e0:	e578      	b.n	74d4 <hci_cmd_handle+0xb4>
	status = ll_connect_disable();
    79e2:	f007 fa71 	bl	eec8 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    79e6:	4606      	mov	r6, r0
    79e8:	bb48      	cbnz	r0, 7a3e <hci_cmd_handle+0x61e>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    79ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    79ee:	2001      	movs	r0, #1
    79f0:	f7fb fc84 	bl	32fc <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    79f4:	4a52      	ldr	r2, [pc, #328]	; (7b40 <hci_cmd_handle+0x720>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    79f6:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    79f8:	e9d2 4500 	ldrd	r4, r5, [r2]
    79fc:	2400      	movs	r4, #0
    79fe:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    7a02:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7a06:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7a08:	d004      	beq.n	7a14 <hci_cmd_handle+0x5f4>
    7a0a:	4632      	mov	r2, r6
    7a0c:	4631      	mov	r1, r6
    7a0e:	2002      	movs	r0, #2
    7a10:	f7ff fc10 	bl	7234 <le_conn_complete.part.39>
		if ((*evt)->len) {
    7a14:	9807      	ldr	r0, [sp, #28]
    7a16:	8984      	ldrh	r4, [r0, #12]
    7a18:	b14c      	cbz	r4, 7a2e <hci_cmd_handle+0x60e>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    7a1a:	2101      	movs	r1, #1
    7a1c:	a808      	add	r0, sp, #32
    7a1e:	f7ff fb99 	bl	7154 <cmd_complete>
			ccst->status = cmd_status;
    7a22:	2300      	movs	r3, #0
    7a24:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    7a26:	9808      	ldr	r0, [sp, #32]
    7a28:	f7fb fb10 	bl	304c <bt_recv_prio>
    7a2c:	e559      	b.n	74e2 <hci_cmd_handle+0xc2>
			net_buf_unref(*evt);
    7a2e:	f008 ffcd 	bl	109cc <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    7a32:	2101      	movs	r1, #1
    7a34:	a807      	add	r0, sp, #28
    7a36:	f7ff fb8d 	bl	7154 <cmd_complete>
	ccst->status = status;
    7a3a:	7004      	strb	r4, [r0, #0]
    7a3c:	e551      	b.n	74e2 <hci_cmd_handle+0xc2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    7a3e:	240c      	movs	r4, #12
    7a40:	e7f7      	b.n	7a32 <hci_cmd_handle+0x612>
	status = ll_chm_update(&cmd->ch_map[0]);
    7a42:	68a0      	ldr	r0, [r4, #8]
    7a44:	f006 fe44 	bl	e6d0 <ll_chm_update>
    7a48:	e79a      	b.n	7980 <hci_cmd_handle+0x560>
    7a4a:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    7a4c:	f100 030c 	add.w	r3, r0, #12
    7a50:	f100 020a 	add.w	r2, r0, #10
    7a54:	1c81      	adds	r1, r0, #2
    7a56:	8800      	ldrh	r0, [r0, #0]
    7a58:	f007 f8be 	bl	ebd8 <ll_enc_req_send>
    7a5c:	e53a      	b.n	74d4 <hci_cmd_handle+0xb4>
	handle = sys_le16_to_cpu(cmd->handle);
    7a5e:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    7a60:	2108      	movs	r1, #8
    7a62:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    7a64:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    7a66:	f7ff fb75 	bl	7154 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    7a6a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    7a6c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    7a6e:	1cc1      	adds	r1, r0, #3
    7a70:	4630      	mov	r0, r6
    7a72:	f006 fe6f 	bl	e754 <ll_chm_get>
    7a76:	e581      	b.n	757c <hci_cmd_handle+0x15c>
	handle = sys_le16_to_cpu(cmd->handle);
    7a78:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    7a7a:	8818      	ldrh	r0, [r3, #0]
    7a7c:	f006 fe7f 	bl	e77e <ll_feature_req_send>
    7a80:	e528      	b.n	74d4 <hci_cmd_handle+0xb4>
    7a82:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    7a84:	8911      	ldrh	r1, [r2, #8]
    7a86:	8893      	ldrh	r3, [r2, #4]
    7a88:	8810      	ldrh	r0, [r2, #0]
    7a8a:	9101      	str	r1, [sp, #4]
    7a8c:	88d2      	ldrh	r2, [r2, #6]
    7a8e:	9200      	str	r2, [sp, #0]
    7a90:	2200      	movs	r2, #0
    7a92:	4611      	mov	r1, r2
    7a94:	f006 fda4 	bl	e5e0 <ll_conn_update>
	*evt = cmd_status(status);
    7a98:	b2c0      	uxtb	r0, r0
    7a9a:	e51f      	b.n	74dc <hci_cmd_handle+0xbc>
    7a9c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    7a9e:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7aa0:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    7aa2:	8893      	ldrh	r3, [r2, #4]
    7aa4:	9101      	str	r1, [sp, #4]
    7aa6:	88d2      	ldrh	r2, [r2, #6]
    7aa8:	9200      	str	r2, [sp, #0]
    7aaa:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    7aac:	2102      	movs	r1, #2
    7aae:	b2a0      	uxth	r0, r4
    7ab0:	f006 fd96 	bl	e5e0 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    7ab4:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    7ab6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    7ab8:	a807      	add	r0, sp, #28
    7aba:	f7ff fb4b 	bl	7154 <cmd_complete>
	rp->status = status;
    7abe:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    7ac0:	f8a0 4001 	strh.w	r4, [r0, #1]
    7ac4:	e50d      	b.n	74e2 <hci_cmd_handle+0xc2>
    7ac6:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7ac8:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    7aca:	789a      	ldrb	r2, [r3, #2]
    7acc:	2300      	movs	r3, #0
    7ace:	9301      	str	r3, [sp, #4]
    7ad0:	9300      	str	r3, [sp, #0]
    7ad2:	e7eb      	b.n	7aac <hci_cmd_handle+0x68c>
    7ad4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7ad6:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    7ad8:	889a      	ldrh	r2, [r3, #4]
    7ada:	8859      	ldrh	r1, [r3, #2]
    7adc:	b2a0      	uxth	r0, r4
    7ade:	f006 febe 	bl	e85e <ll_length_req_send>
    7ae2:	e570      	b.n	75c6 <hci_cmd_handle+0x1a6>
	rp = cmd_complete(evt, sizeof(*rp));
    7ae4:	2105      	movs	r1, #5
    7ae6:	a807      	add	r0, sp, #28
    7ae8:	f7ff fb34 	bl	7154 <cmd_complete>
    7aec:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    7aee:	1cc1      	adds	r1, r0, #3
    7af0:	3001      	adds	r0, #1
    7af2:	f006 fed7 	bl	e8a4 <ll_length_default_get>
	rp->status = 0x00;
    7af6:	2300      	movs	r3, #0
    7af8:	7023      	strb	r3, [r4, #0]
    7afa:	e4f2      	b.n	74e2 <hci_cmd_handle+0xc2>
    7afc:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    7afe:	8859      	ldrh	r1, [r3, #2]
    7b00:	8818      	ldrh	r0, [r3, #0]
    7b02:	f006 fed9 	bl	e8b8 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    7b06:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    7b08:	2101      	movs	r1, #1
    7b0a:	a807      	add	r0, sp, #28
    7b0c:	f7ff fb22 	bl	7154 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    7b10:	2c00      	cmp	r4, #0
    7b12:	bf18      	it	ne
    7b14:	231e      	movne	r3, #30
    7b16:	e73b      	b.n	7990 <hci_cmd_handle+0x570>
	rp = cmd_complete(evt, sizeof(*rp));
    7b18:	2109      	movs	r1, #9
    7b1a:	a807      	add	r0, sp, #28
    7b1c:	f7ff fb1a 	bl	7154 <cmd_complete>
    7b20:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    7b22:	1dc3      	adds	r3, r0, #7
    7b24:	1d42      	adds	r2, r0, #5
    7b26:	1cc1      	adds	r1, r0, #3
    7b28:	3001      	adds	r0, #1
    7b2a:	f006 fecf 	bl	e8cc <ll_length_max_get>
    7b2e:	e7e2      	b.n	7af6 <hci_cmd_handle+0x6d6>
    7b30:	20003750 	.word	0x20003750
    7b34:	130f3370 	.word	0x130f3370
    7b38:	200005d4 	.word	0x200005d4
    7b3c:	200005d8 	.word	0x200005d8
    7b40:	20003748 	.word	0x20003748
	handle = sys_le16_to_cpu(cmd->handle);
    7b44:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    7b46:	2105      	movs	r1, #5
    7b48:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    7b4a:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    7b4c:	f7ff fb02 	bl	7154 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    7b50:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    7b52:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    7b54:	1d02      	adds	r2, r0, #4
    7b56:	1cc1      	adds	r1, r0, #3
    7b58:	4630      	mov	r0, r6
    7b5a:	f006 fec0 	bl	e8de <ll_phy_get>
	return __builtin_ffs(op);
    7b5e:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    7b60:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    7b64:	2800      	cmp	r0, #0
    7b66:	bf14      	ite	ne
    7b68:	230c      	movne	r3, #12
    7b6a:	2300      	moveq	r3, #0
    7b6c:	7023      	strb	r3, [r4, #0]
    7b6e:	2a00      	cmp	r2, #0
    7b70:	fa92 f3a2 	rbit	r3, r2
    7b74:	fab3 f383 	clz	r3, r3
    7b78:	7922      	ldrb	r2, [r4, #4]
    7b7a:	bf08      	it	eq
    7b7c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7b80:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    7b82:	70e3      	strb	r3, [r4, #3]
    7b84:	2a00      	cmp	r2, #0
    7b86:	fa92 f3a2 	rbit	r3, r2
    7b8a:	fab3 f383 	clz	r3, r3
    7b8e:	bf08      	it	eq
    7b90:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7b94:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    7b96:	7123      	strb	r3, [r4, #4]
    7b98:	e4a3      	b.n	74e2 <hci_cmd_handle+0xc2>
    7b9a:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    7b9c:	781a      	ldrb	r2, [r3, #0]
    7b9e:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    7ba0:	bf44      	itt	mi
    7ba2:	2107      	movmi	r1, #7
    7ba4:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    7ba6:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    7ba8:	bf44      	itt	mi
    7baa:	2207      	movmi	r2, #7
    7bac:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    7bae:	7899      	ldrb	r1, [r3, #2]
    7bb0:	7858      	ldrb	r0, [r3, #1]
    7bb2:	f006 fea9 	bl	e908 <ll_phy_default_set>
    7bb6:	e7a6      	b.n	7b06 <hci_cmd_handle+0x6e6>
    7bb8:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    7bba:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    7bbc:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    7bbe:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    7bc2:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    7bc4:	bf44      	itt	mi
    7bc6:	2103      	movmi	r1, #3
    7bc8:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    7bca:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    7bcc:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    7bce:	bf44      	itt	mi
    7bd0:	2203      	movmi	r2, #3
    7bd2:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    7bd4:	074d      	lsls	r5, r1, #29
    7bd6:	d002      	beq.n	7bde <hci_cmd_handle+0x7be>
	    !(cmd->rx_phys & 0x07)) {
    7bd8:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    7bda:	075a      	lsls	r2, r3, #29
    7bdc:	d105      	bne.n	7bea <hci_cmd_handle+0x7ca>
		ccst = cmd_complete(evt, sizeof(*ccst));
    7bde:	2101      	movs	r1, #1
    7be0:	a807      	add	r0, sp, #28
    7be2:	f7ff fab7 	bl	7154 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    7be6:	2312      	movs	r3, #18
    7be8:	e6d4      	b.n	7994 <hci_cmd_handle+0x574>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    7bea:	ea41 0203 	orr.w	r2, r1, r3
    7bee:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    7bf2:	d005      	beq.n	7c00 <hci_cmd_handle+0x7e0>
		ccst = cmd_complete(evt, sizeof(*ccst));
    7bf4:	2101      	movs	r1, #1
    7bf6:	a807      	add	r0, sp, #28
    7bf8:	f7ff faac 	bl	7154 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    7bfc:	2311      	movs	r3, #17
    7bfe:	e6c9      	b.n	7994 <hci_cmd_handle+0x574>
	if (phy_opts & 0x03) {
    7c00:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    7c04:	bf1c      	itt	ne
    7c06:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    7c0a:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    7c0e:	f006 fe85 	bl	e91c <ll_phy_req_send>
    7c12:	e45f      	b.n	74d4 <hci_cmd_handle+0xb4>
    7c14:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    7c16:	f100 0217 	add.w	r2, r0, #23
    7c1a:	1dc1      	adds	r1, r0, #7
    7c1c:	f007 fec2 	bl	f9a4 <ll_rl_add>
    7c20:	e655      	b.n	78ce <hci_cmd_handle+0x4ae>
	status = ll_rl_remove(&cmd->peer_id_addr);
    7c22:	68a0      	ldr	r0, [r4, #8]
    7c24:	f007 ff60 	bl	fae8 <ll_rl_remove>
    7c28:	e651      	b.n	78ce <hci_cmd_handle+0x4ae>
	ccst = cmd_complete(evt, sizeof(*ccst));
    7c2a:	2101      	movs	r1, #1
    7c2c:	a807      	add	r0, sp, #28
    7c2e:	f7ff fa91 	bl	7154 <cmd_complete>
    7c32:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    7c34:	f007 fe9c 	bl	f970 <ll_rl_clear>
    7c38:	e65d      	b.n	78f6 <hci_cmd_handle+0x4d6>
	rp = cmd_complete(evt, sizeof(*rp));
    7c3a:	2102      	movs	r1, #2
    7c3c:	a807      	add	r0, sp, #28
    7c3e:	f7ff fa89 	bl	7154 <cmd_complete>
    7c42:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    7c44:	f007 fe92 	bl	f96c <ll_rl_size_get>
    7c48:	7060      	strb	r0, [r4, #1]
    7c4a:	e754      	b.n	7af6 <hci_cmd_handle+0x6d6>
    7c4c:	2207      	movs	r2, #7
    7c4e:	68a1      	ldr	r1, [r4, #8]
    7c50:	a808      	add	r0, sp, #32
    7c52:	f7f9 ffd3 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    7c56:	2107      	movs	r1, #7
    7c58:	a807      	add	r0, sp, #28
    7c5a:	f7ff fa7b 	bl	7154 <cmd_complete>
    7c5e:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    7c60:	1c41      	adds	r1, r0, #1
    7c62:	a808      	add	r0, sp, #32
    7c64:	f007 ffce 	bl	fc04 <ll_rl_crpa_get>
    7c68:	e645      	b.n	78f6 <hci_cmd_handle+0x4d6>
    7c6a:	2207      	movs	r2, #7
    7c6c:	68a1      	ldr	r1, [r4, #8]
    7c6e:	a808      	add	r0, sp, #32
    7c70:	f7f9 ffc4 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    7c74:	2107      	movs	r1, #7
    7c76:	a807      	add	r0, sp, #28
    7c78:	f7ff fa6c 	bl	7154 <cmd_complete>
    7c7c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    7c7e:	1c41      	adds	r1, r0, #1
    7c80:	a808      	add	r0, sp, #32
    7c82:	f007 ffdf 	bl	fc44 <ll_rl_lrpa_get>
    7c86:	e636      	b.n	78f6 <hci_cmd_handle+0x4d6>
	u8_t enable = cmd->enable;
    7c88:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    7c8a:	2101      	movs	r1, #1
    7c8c:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    7c8e:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    7c90:	f7ff fa60 	bl	7154 <cmd_complete>
    7c94:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    7c96:	4628      	mov	r0, r5
    7c98:	f007 ffec 	bl	fc74 <ll_rl_enable>
    7c9c:	e62b      	b.n	78f6 <hci_cmd_handle+0x4d6>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    7c9e:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    7ca0:	8818      	ldrh	r0, [r3, #0]
    7ca2:	f007 fff9 	bl	fc98 <ll_rl_timeout_set>
    7ca6:	e43c      	b.n	7522 <hci_cmd_handle+0x102>
    7ca8:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    7caa:	79c1      	ldrb	r1, [r0, #7]
    7cac:	f007 fffc 	bl	fca8 <ll_priv_mode_set>
    7cb0:	e60d      	b.n	78ce <hci_cmd_handle+0x4ae>
	rp = cmd_complete(evt, sizeof(*rp));
    7cb2:	2103      	movs	r1, #3
    7cb4:	a807      	add	r0, sp, #28
    7cb6:	f7ff fa4d 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7cba:	4601      	mov	r1, r0
    7cbc:	2300      	movs	r3, #0
    7cbe:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    7cc2:	3001      	adds	r0, #1
    7cc4:	f7ff f8f4 	bl	6eb0 <ll_tx_pwr_get>
    7cc8:	e40b      	b.n	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7cca:	210d      	movs	r1, #13
    7ccc:	a807      	add	r0, sp, #28
    7cce:	f7ff fa41 	bl	7154 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    7cd2:	2202      	movs	r2, #2
    7cd4:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    7cd6:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    7cd8:	2201      	movs	r2, #1
    7cda:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    7cdc:	220c      	movs	r2, #12
	rp->status = 0x00;
    7cde:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    7ce0:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    7ce2:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    7ce4:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    7ce6:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    7ce8:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    7cea:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    7cec:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    7cee:	7242      	strb	r2, [r0, #9]
    7cf0:	7283      	strb	r3, [r0, #10]
    7cf2:	72c3      	strb	r3, [r0, #11]
    7cf4:	7303      	strb	r3, [r0, #12]
    7cf6:	f7ff bbf4 	b.w	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7cfa:	2141      	movs	r1, #65	; 0x41
    7cfc:	a807      	add	r0, sp, #28
    7cfe:	f7ff fa29 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7d02:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7d04:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7d06:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    7d08:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7d0c:	f7f9 ffa2 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    7d10:	7863      	ldrb	r3, [r4, #1]
    7d12:	f063 0358 	orn	r3, r3, #88	; 0x58
    7d16:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    7d18:	78a3      	ldrb	r3, [r4, #2]
    7d1a:	f043 0303 	orr.w	r3, r3, #3
    7d1e:	70a3      	strb	r3, [r4, #2]
    7d20:	f7ff bbdf 	b.w	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7d24:	2109      	movs	r1, #9
    7d26:	a807      	add	r0, sp, #28
    7d28:	f7ff fa14 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7d2c:	2100      	movs	r1, #0
    7d2e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7d32:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    7d34:	f7f9 ff8e 	bl	1c54 <memset>
    7d38:	f7ff bbd3 	b.w	74e2 <hci_cmd_handle+0xc2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    7d3c:	4b5c      	ldr	r3, [pc, #368]	; (7eb0 <hci_cmd_handle+0xa90>)
    7d3e:	aa08      	add	r2, sp, #32
    7d40:	f103 0628 	add.w	r6, r3, #40	; 0x28
    7d44:	4615      	mov	r5, r2
    7d46:	6818      	ldr	r0, [r3, #0]
    7d48:	6859      	ldr	r1, [r3, #4]
    7d4a:	4614      	mov	r4, r2
    7d4c:	c403      	stmia	r4!, {r0, r1}
    7d4e:	3308      	adds	r3, #8
    7d50:	42b3      	cmp	r3, r6
    7d52:	4622      	mov	r2, r4
    7d54:	d1f7      	bne.n	7d46 <hci_cmd_handle+0x926>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    7d56:	2129      	movs	r1, #41	; 0x29
    7d58:	a807      	add	r0, sp, #28
    7d5a:	f7ff f9fb 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7d5e:	2300      	movs	r3, #0
    7d60:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    7d64:	2228      	movs	r2, #40	; 0x28
    7d66:	4629      	mov	r1, r5
    7d68:	e5df      	b.n	792a <hci_cmd_handle+0x50a>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    7d6a:	68a1      	ldr	r1, [r4, #8]
    7d6c:	2000      	movs	r0, #0
    7d6e:	f7ff f883 	bl	6e78 <ll_addr_set>
    7d72:	f7ff bbd6 	b.w	7522 <hci_cmd_handle+0x102>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7d76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7d7a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    7d7e:	3201      	adds	r2, #1
    7d80:	d106      	bne.n	7d90 <hci_cmd_handle+0x970>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7d82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7d8a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7d8c:	4293      	cmp	r3, r2
    7d8e:	d020      	beq.n	7dd2 <hci_cmd_handle+0x9b2>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    7d90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7d94:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7d98:	07db      	lsls	r3, r3, #31
    7d9a:	d51a      	bpl.n	7dd2 <hci_cmd_handle+0x9b2>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    7d9c:	2118      	movs	r1, #24
    7d9e:	a807      	add	r0, sp, #28
    7da0:	f7ff f9d8 	bl	7154 <cmd_complete>
		rp->status = 0x00;
    7da4:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    7da6:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    7da8:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    7daa:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    7dac:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    7dae:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    7db2:	1ca1      	adds	r1, r4, #2
    7db4:	f7ff f98a 	bl	70cc <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    7db8:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    7dbc:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    7dbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    7dc2:	f063 033f 	orn	r3, r3, #63	; 0x3f
    7dc6:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    7dc8:	2210      	movs	r2, #16
    7dca:	4631      	mov	r1, r6
    7dcc:	f104 0008 	add.w	r0, r4, #8
    7dd0:	e7b0      	b.n	7d34 <hci_cmd_handle+0x914>
	rp = cmd_complete(evt, sizeof(*rp));
    7dd2:	2102      	movs	r1, #2
    7dd4:	a807      	add	r0, sp, #28
    7dd6:	f7ff f9bd 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7dda:	2300      	movs	r3, #0
    7ddc:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    7dde:	7043      	strb	r3, [r0, #1]
    7de0:	f7ff bb7f 	b.w	74e2 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7de4:	2121      	movs	r1, #33	; 0x21
    7de6:	a807      	add	r0, sp, #28
    7de8:	f7ff f9b4 	bl	7154 <cmd_complete>
	rp->status = 0x00;
    7dec:	4603      	mov	r3, r0
    7dee:	2200      	movs	r2, #0
    7df0:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    7df8:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7dfa:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    7dfe:	3101      	adds	r1, #1
    7e00:	d04b      	beq.n	7e9a <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    7e02:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7e06:	3101      	adds	r1, #1
    7e08:	d047      	beq.n	7e9a <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    7e0a:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    7e0e:	3101      	adds	r1, #1
    7e10:	d043      	beq.n	7e9a <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    7e12:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    7e16:	3101      	adds	r1, #1
    7e18:	d03f      	beq.n	7e9a <hci_cmd_handle+0xa7a>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    7e1a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    7e1e:	4619      	mov	r1, r3
    7e20:	f7ff f954 	bl	70cc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    7e24:	1d61      	adds	r1, r4, #5
    7e26:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    7e2a:	f7ff f94f 	bl	70cc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    7e2e:	f104 0109 	add.w	r1, r4, #9
    7e32:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    7e36:	f7ff f949 	bl	70cc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    7e3a:	f104 010d 	add.w	r1, r4, #13
    7e3e:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    7e42:	f7ff f943 	bl	70cc <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    7e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7e4a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    7e4e:	3301      	adds	r3, #1
    7e50:	f104 0311 	add.w	r3, r4, #17
    7e54:	d027      	beq.n	7ea6 <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    7e56:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    7e5a:	3101      	adds	r1, #1
    7e5c:	d023      	beq.n	7ea6 <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    7e5e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    7e62:	3101      	adds	r1, #1
    7e64:	d01f      	beq.n	7ea6 <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    7e66:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    7e6a:	3101      	adds	r1, #1
    7e6c:	d01b      	beq.n	7ea6 <hci_cmd_handle+0xa86>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    7e6e:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    7e72:	4619      	mov	r1, r3
    7e74:	f7ff f92a 	bl	70cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    7e78:	f104 0115 	add.w	r1, r4, #21
    7e7c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    7e80:	f7ff f924 	bl	70cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    7e84:	f104 0119 	add.w	r1, r4, #25
    7e88:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    7e8c:	f7ff f91e 	bl	70cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    7e90:	f104 011d 	add.w	r1, r4, #29
    7e94:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    7e98:	e564      	b.n	7964 <hci_cmd_handle+0x544>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    7e9a:	2210      	movs	r2, #16
    7e9c:	2100      	movs	r1, #0
    7e9e:	4618      	mov	r0, r3
    7ea0:	f7f9 fed8 	bl	1c54 <memset>
    7ea4:	e7cf      	b.n	7e46 <hci_cmd_handle+0xa26>
		memset(rp->er, 0x00, sizeof(rp->er));
    7ea6:	2210      	movs	r2, #16
    7ea8:	2100      	movs	r1, #0
    7eaa:	4618      	mov	r0, r3
    7eac:	e742      	b.n	7d34 <hci_cmd_handle+0x914>
    7eae:	bf00      	nop
    7eb0:	00012cca 	.word	0x00012cca

00007eb4 <hci_acl_handle>:
{
    7eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    7eb8:	2300      	movs	r3, #0
    7eba:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    7ebc:	8983      	ldrh	r3, [r0, #12]
    7ebe:	2b03      	cmp	r3, #3
{
    7ec0:	4606      	mov	r6, r0
    7ec2:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    7ec4:	d803      	bhi.n	7ece <hci_acl_handle+0x1a>
		return -EINVAL;
    7ec6:	f06f 0015 	mvn.w	r0, #21
    7eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    7ece:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    7ed2:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    7ed4:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    7ed6:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    7ed8:	f008 fdd8 	bl	10a8c <net_buf_simple_pull>
	if (buf->len < len) {
    7edc:	89b3      	ldrh	r3, [r6, #12]
    7ede:	42bb      	cmp	r3, r7
    7ee0:	d3f1      	bcc.n	7ec6 <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    7ee2:	f006 fe11 	bl	eb08 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    7ee6:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    7eea:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    7eec:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    7ef0:	b9f0      	cbnz	r0, 7f30 <hci_acl_handle+0x7c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    7ef2:	4b1e      	ldr	r3, [pc, #120]	; (7f6c <hci_acl_handle+0xb8>)
    7ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ef8:	2300      	movs	r3, #0
    7efa:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    7efe:	4313      	orrs	r3, r2
    7f00:	d012      	beq.n	7f28 <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7f06:	2001      	movs	r0, #1
    7f08:	f7fb f9f8 	bl	32fc <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    7f0c:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7f0e:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    7f12:	211a      	movs	r1, #26
    7f14:	f7ff f8e3 	bl	70de <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    7f18:	f8d8 0000 	ldr.w	r0, [r8]
    7f1c:	2101      	movs	r1, #1
    7f1e:	3008      	adds	r0, #8
    7f20:	f008 fd86 	bl	10a30 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    7f24:	2301      	movs	r3, #1
    7f26:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    7f28:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    7f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f30:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    7f32:	f1b9 0f00 	cmp.w	r9, #0
    7f36:	d002      	beq.n	7f3e <hci_acl_handle+0x8a>
    7f38:	f1b9 0f02 	cmp.w	r9, #2
    7f3c:	d113      	bne.n	7f66 <hci_acl_handle+0xb2>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    7f3e:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7f40:	f362 0301 	bfi	r3, r2, #0, #2
    7f44:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    7f46:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    7f48:	68b1      	ldr	r1, [r6, #8]
    7f4a:	463a      	mov	r2, r7
    7f4c:	1de0      	adds	r0, r4, #7
    7f4e:	f7f9 fe55 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    7f52:	4621      	mov	r1, r4
    7f54:	4628      	mov	r0, r5
    7f56:	f006 fde3 	bl	eb20 <ll_tx_mem_enqueue>
    7f5a:	2800      	cmp	r0, #0
    7f5c:	d0e6      	beq.n	7f2c <hci_acl_handle+0x78>
		ll_tx_mem_release(node_tx);
    7f5e:	4620      	mov	r0, r4
    7f60:	f006 fdd8 	bl	eb14 <ll_tx_mem_release>
    7f64:	e7af      	b.n	7ec6 <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7f66:	2201      	movs	r2, #1
    7f68:	e7ea      	b.n	7f40 <hci_acl_handle+0x8c>
    7f6a:	bf00      	nop
    7f6c:	20003748 	.word	0x20003748

00007f70 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    7f70:	7a03      	ldrb	r3, [r0, #8]
    7f72:	f003 0303 	and.w	r3, r3, #3
    7f76:	3b01      	subs	r3, #1
    7f78:	2b01      	cmp	r3, #1
{
    7f7a:	b570      	push	{r4, r5, r6, lr}
    7f7c:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    7f7e:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    7f80:	d81b      	bhi.n	7fba <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    7f82:	f101 0608 	add.w	r6, r1, #8
    7f86:	4630      	mov	r0, r6
    7f88:	2104      	movs	r1, #4
    7f8a:	f008 fd51 	bl	10a30 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    7f8e:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    7f90:	7a61      	ldrb	r1, [r4, #9]
    7f92:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    7f94:	f003 0303 	and.w	r3, r3, #3
    7f98:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    7f9a:	bf0c      	ite	eq
    7f9c:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    7fa0:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    7fa4:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    7fa6:	4630      	mov	r0, r6
    7fa8:	f008 fd42 	bl	10a30 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    7fac:	7a62      	ldrb	r2, [r4, #9]
    7fae:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    7fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    7fb6:	f7f9 be21 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    7fba:	4040      	eors	r0, r0
    7fbc:	f380 8811 	msr	BASEPRI, r0
    7fc0:	f04f 0004 	mov.w	r0, #4
    7fc4:	df02      	svc	2
	...

00007fc8 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    7fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7fcc:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    7fce:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7fd0:	2b01      	cmp	r3, #1
{
    7fd2:	b08f      	sub	sp, #60	; 0x3c
    7fd4:	4604      	mov	r4, r0
    7fd6:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    7fd8:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7fdc:	f000 824f 	beq.w	847e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47e>
	switch (node_rx->hdr.type) {
    7fe0:	3b02      	subs	r3, #2
    7fe2:	2b0a      	cmp	r3, #10
    7fe4:	f200 80be 	bhi.w	8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>
    7fe8:	e8df f013 	tbh	[pc, r3, lsl #1]
    7fec:	012b000b 	.word	0x012b000b
    7ff0:	012f012b 	.word	0x012f012b
    7ff4:	017e0163 	.word	0x017e0163
    7ff8:	01cf01aa 	.word	0x01cf01aa
    7ffc:	01fc01e7 	.word	0x01fc01e7
    8000:	0217      	.short	0x0217
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8002:	2301      	movs	r3, #1
    8004:	f88d 301d 	strb.w	r3, [sp, #29]
    8008:	2303      	movs	r3, #3
    800a:	f88d 301e 	strb.w	r3, [sp, #30]
    800e:	23ff      	movs	r3, #255	; 0xff
    8010:	f88d 301f 	strb.w	r3, [sp, #31]
    8014:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    8018:	2302      	movs	r3, #2
    801a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    801e:	7a43      	ldrb	r3, [r0, #9]
    8020:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8022:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8024:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    8028:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    802a:	f88d 101c 	strb.w	r1, [sp, #28]
    802e:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    8030:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8032:	f88d 2020 	strb.w	r2, [sp, #32]
	if (adv->tx_addr) {
    8036:	d505      	bpl.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    8038:	f104 030a 	add.w	r3, r4, #10
    803c:	464a      	mov	r2, r9
    803e:	4608      	mov	r0, r1
    8040:	f007 fdbe 	bl	fbc0 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    8044:	4bb7      	ldr	r3, [pc, #732]	; (8324 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x324>)
    8046:	e9d3 2300 	ldrd	r2, r3, [r3]
    804a:	2200      	movs	r2, #0
    804c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8050:	4313      	orrs	r3, r2
    8052:	f000 80b0 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8056:	7a63      	ldrb	r3, [r4, #9]
    8058:	4423      	add	r3, r4
    805a:	f893 a00c 	ldrb.w	sl, [r3, #12]
    805e:	4bb2      	ldr	r3, [pc, #712]	; (8328 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x328>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    8060:	e9d3 2300 	ldrd	r2, r3, [r3]
    8064:	f1ba 0f00 	cmp.w	sl, #0
    8068:	d13d      	bne.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
    806a:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    806e:	2300      	movs	r3, #0
    8070:	4313      	orrs	r3, r2
    8072:	f000 80a0 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (dup_count >= 0) {
    8076:	4bad      	ldr	r3, [pc, #692]	; (832c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32c>)
    8078:	681a      	ldr	r2, [r3, #0]
    807a:	2a00      	cmp	r2, #0
    807c:	4698      	mov	r8, r3
    807e:	db54      	blt.n	812a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a>
    8080:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>
    8084:	2600      	movs	r6, #0
    8086:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    808a:	f8d8 2000 	ldr.w	r2, [r8]
    808e:	4296      	cmp	r6, r2
    8090:	db2c      	blt.n	80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    8092:	4ea7      	ldr	r6, [pc, #668]	; (8330 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x330>)
    8094:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>
    8098:	6830      	ldr	r0, [r6, #0]
    809a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    809e:	4619      	mov	r1, r3
    80a0:	2206      	movs	r2, #6
    80a2:	3002      	adds	r0, #2
    80a4:	f7f9 fdaa 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    80a8:	6832      	ldr	r2, [r6, #0]
    80aa:	7a23      	ldrb	r3, [r4, #8]
    80ac:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    80b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    80b4:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    80b6:	7a23      	ldrb	r3, [r4, #8]
    80b8:	f003 010f 	and.w	r1, r3, #15
    80bc:	2301      	movs	r3, #1
    80be:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    80c0:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    80c4:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    80c8:	290f      	cmp	r1, #15
			dup_count++;
    80ca:	bfd5      	itete	le
    80cc:	3101      	addle	r1, #1
			dup_curr++;
    80ce:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    80d0:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    80d2:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    80d4:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    80d6:	bfd8      	it	le
    80d8:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    80dc:	2a10      	cmp	r2, #16
    80de:	d124      	bne.n	812a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a>
			dup_curr = 0;
    80e0:	2200      	movs	r2, #0
    80e2:	6032      	str	r2, [r6, #0]
    80e4:	e021      	b.n	812a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    80e6:	f002 020b 	and.w	r2, r2, #11
    80ea:	e7c0      	b.n	806e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e>
			if (!memcmp(&adv->adv_ind.addr[0],
    80ec:	4618      	mov	r0, r3
    80ee:	2206      	movs	r2, #6
    80f0:	4659      	mov	r1, fp
    80f2:	9303      	str	r3, [sp, #12]
    80f4:	f7f9 fd6d 	bl	1bd2 <memcmp>
    80f8:	9b03      	ldr	r3, [sp, #12]
    80fa:	bb00      	cbnz	r0, 813e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e>
			    adv->tx_addr == dup_filter[i].addr.type) {
    80fc:	7a21      	ldrb	r1, [r4, #8]
    80fe:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    8102:	460a      	mov	r2, r1
    8104:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    8108:	4281      	cmp	r1, r0
    810a:	d118      	bne.n	813e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e>
				if (dup_filter[i].mask & BIT(adv->type)) {
    810c:	4889      	ldr	r0, [pc, #548]	; (8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>)
    810e:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    8112:	f002 020f 	and.w	r2, r2, #15
    8116:	fa23 f102 	lsr.w	r1, r3, r2
    811a:	07c9      	lsls	r1, r1, #31
    811c:	d44b      	bmi.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    811e:	2101      	movs	r1, #1
    8120:	fa01 f202 	lsl.w	r2, r1, r2
    8124:	4313      	orrs	r3, r2
    8126:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    812a:	f894 b008 	ldrb.w	fp, [r4, #8]
    812e:	7a63      	ldrb	r3, [r4, #9]
    8130:	f00b 0b0f 	and.w	fp, fp, #15
    8134:	f1bb 0f01 	cmp.w	fp, #1
    8138:	d105      	bne.n	8146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146>
		data_len = 0;
    813a:	2600      	movs	r6, #0
    813c:	e005      	b.n	814a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14a>
		for (i = 0; i < dup_count; i++) {
    813e:	3601      	adds	r6, #1
    8140:	f10b 0b08 	add.w	fp, fp, #8
    8144:	e7a1      	b.n	808a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a>
		data_len = (adv->len - BDADDR_SIZE);
    8146:	1f9e      	subs	r6, r3, #6
    8148:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    814a:	4423      	add	r3, r4
    814c:	f893 800a 	ldrb.w	r8, [r3, #10]
    8150:	f1c8 0800 	rsb	r8, r8, #0
    8154:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    8158:	f1ba 0f00 	cmp.w	sl, #0
    815c:	d038      	beq.n	81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    815e:	f1bb 0f01 	cmp.w	fp, #1
    8162:	d005      	beq.n	8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>
		LL_ASSERT(0);
    8164:	4040      	eors	r0, r0
    8166:	f380 8811 	msr	BASEPRI, r0
    816a:	f04f 0004 	mov.w	r0, #4
    816e:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    8170:	2211      	movs	r2, #17
    8172:	210b      	movs	r1, #11
    8174:	4628      	mov	r0, r5
    8176:	f7fe ffd7 	bl	7128 <meta_evt>
		drp->num_reports = 1;
    817a:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    817e:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    8182:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    8184:	f007 fbf2 	bl	f96c <ll_rl_size_get>
    8188:	4581      	cmp	r9, r0
    818a:	f105 0003 	add.w	r0, r5, #3
    818e:	d215      	bcs.n	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    8190:	4602      	mov	r2, r0
    8192:	1ca9      	adds	r1, r5, #2
    8194:	4648      	mov	r0, r9
    8196:	f007 fab7 	bl	f708 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    819a:	78ab      	ldrb	r3, [r5, #2]
    819c:	3302      	adds	r3, #2
    819e:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    81a0:	2301      	movs	r3, #1
    81a2:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    81a4:	2206      	movs	r2, #6
    81a6:	f107 0108 	add.w	r1, r7, #8
    81aa:	f105 000a 	add.w	r0, r5, #10
    81ae:	f7f9 fd25 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    81b2:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    81b6:	b00f      	add	sp, #60	; 0x3c
    81b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    81bc:	7a23      	ldrb	r3, [r4, #8]
    81be:	f3c3 1380 	ubfx	r3, r3, #6, #1
    81c2:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    81c4:	2206      	movs	r2, #6
    81c6:	f104 010a 	add.w	r1, r4, #10
    81ca:	f7f9 fd17 	bl	1bfc <memcpy>
    81ce:	e7e7      	b.n	81a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    81d0:	f106 020b 	add.w	r2, r6, #11
    81d4:	b2d2      	uxtb	r2, r2
    81d6:	2102      	movs	r1, #2
    81d8:	4628      	mov	r0, r5
    81da:	f7fe ffa5 	bl	7128 <meta_evt>
	sep->num_reports = 1;
    81de:	2301      	movs	r3, #1
    81e0:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    81e2:	7a23      	ldrb	r3, [r4, #8]
    81e4:	aa0e      	add	r2, sp, #56	; 0x38
    81e6:	f003 030f 	and.w	r3, r3, #15
    81ea:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    81ec:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    81ee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    81f2:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    81f4:	7a63      	ldrb	r3, [r4, #9]
    81f6:	4423      	add	r3, r4
    81f8:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    81fc:	f007 fbb6 	bl	f96c <ll_rl_size_get>
    8200:	4581      	cmp	r9, r0
    8202:	f105 0003 	add.w	r0, r5, #3
    8206:	d212      	bcs.n	822e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22e>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    8208:	4602      	mov	r2, r0
    820a:	1ca9      	adds	r1, r5, #2
    820c:	4648      	mov	r0, r9
    820e:	f007 fa7b 	bl	f708 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    8212:	78ab      	ldrb	r3, [r5, #2]
    8214:	3302      	adds	r3, #2
    8216:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    8218:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    821a:	350a      	adds	r5, #10
    821c:	4632      	mov	r2, r6
    821e:	f107 0108 	add.w	r1, r7, #8
    8222:	4628      	mov	r0, r5
    8224:	f7f9 fcea 	bl	1bfc <memcpy>
	*prssi = rssi;
    8228:	f805 8006 	strb.w	r8, [r5, r6]
    822c:	e7c3      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
		adv_info->addr.type = adv->tx_addr;
    822e:	7a23      	ldrb	r3, [r4, #8]
    8230:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8234:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    8236:	2206      	movs	r2, #6
    8238:	f104 010a 	add.w	r1, r4, #10
    823c:	f7f9 fcde 	bl	1bfc <memcpy>
    8240:	e7ea      	b.n	8218 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x218>
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    8242:	4638      	mov	r0, r7
    8244:	f7ff f8c8 	bl	73d8 <le_adv_ext_report.isra.66>
    8248:	e7b5      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    824a:	4b36      	ldr	r3, [pc, #216]	; (8324 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x324>)
    824c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8250:	2200      	movs	r2, #0
    8252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8256:	4313      	orrs	r3, r2
    8258:	f100 060a 	add.w	r6, r0, #10
    825c:	d007      	beq.n	826e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26e>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    825e:	4b32      	ldr	r3, [pc, #200]	; (8328 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x328>)
    8260:	e9d3 2300 	ldrd	r2, r3, [r3]
    8264:	2300      	movs	r3, #0
    8266:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    826a:	4313      	orrs	r3, r2
    826c:	d110      	bne.n	8290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x290>
		addr.type = adv->tx_addr;
    826e:	7a23      	ldrb	r3, [r4, #8]
    8270:	ac0e      	add	r4, sp, #56	; 0x38
    8272:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8276:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    827a:	4631      	mov	r1, r6
    827c:	2206      	movs	r2, #6
    827e:	f10d 0015 	add.w	r0, sp, #21
    8282:	f7f9 fcbb 	bl	1bfc <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8286:	a907      	add	r1, sp, #28
    8288:	4620      	mov	r0, r4
    828a:	f7ff f869 	bl	7360 <bt_addr_le_to_str.constprop.71>
    828e:	e792      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    8290:	2208      	movs	r2, #8
    8292:	2113      	movs	r1, #19
    8294:	4628      	mov	r0, r5
    8296:	f7fe ff47 	bl	7128 <meta_evt>
	sep->handle = 0;
    829a:	2300      	movs	r3, #0
    829c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    829e:	7a23      	ldrb	r3, [r4, #8]
    82a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    82a4:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    82a6:	2206      	movs	r2, #6
    82a8:	4631      	mov	r1, r6
    82aa:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    82ac:	f7f9 fca6 	bl	1bfc <memcpy>
    82b0:	e781      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
			le_conn_complete(cc->status, cc, handle, buf);
    82b2:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    82b4:	b93f      	cbnz	r7, 82c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c6>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    82b6:	f100 0314 	add.w	r3, r0, #20
    82ba:	f100 010e 	add.w	r1, r0, #14
    82be:	22ff      	movs	r2, #255	; 0xff
    82c0:	7b40      	ldrb	r0, [r0, #13]
    82c2:	f007 fc7d 	bl	fbc0 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    82c6:	4b17      	ldr	r3, [pc, #92]	; (8324 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x324>)
    82c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    82cc:	2200      	movs	r2, #0
    82ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    82d2:	4313      	orrs	r3, r2
    82d4:	f43f af6f 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
    82d8:	462b      	mov	r3, r5
    82da:	4632      	mov	r2, r6
    82dc:	f104 010b 	add.w	r1, r4, #11
    82e0:	4638      	mov	r0, r7
    82e2:	f7fe ffa7 	bl	7234 <le_conn_complete.part.39>
    82e6:	e766      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    82e8:	4b0e      	ldr	r3, [pc, #56]	; (8324 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x324>)
    82ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    82ee:	2300      	movs	r3, #0
    82f0:	f002 0210 	and.w	r2, r2, #16
    82f4:	4313      	orrs	r3, r2
    82f6:	f43f af5e 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    82fa:	2204      	movs	r2, #4
    82fc:	2105      	movs	r1, #5
    82fe:	4628      	mov	r0, r5
    8300:	f7fe feed 	bl	70de <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8304:	2104      	movs	r1, #4
    8306:	f105 0008 	add.w	r0, r5, #8
    830a:	f008 fb91 	bl	10a30 <net_buf_simple_add>
	ep->status = 0x00;
    830e:	2300      	movs	r3, #0
	conn_count--;
    8310:	4a09      	ldr	r2, [pc, #36]	; (8338 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x338>)
	ep->status = 0x00;
    8312:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8314:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    8318:	7a23      	ldrb	r3, [r4, #8]
    831a:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    831c:	6813      	ldr	r3, [r2, #0]
    831e:	3b01      	subs	r3, #1
    8320:	6013      	str	r3, [r2, #0]
    8322:	e748      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
    8324:	20003748 	.word	0x20003748
    8328:	20003750 	.word	0x20003750
    832c:	200005d4 	.word	0x200005d4
    8330:	200005d8 	.word	0x200005d8
    8334:	200005dc 	.word	0x200005dc
    8338:	200005d0 	.word	0x200005d0
    833c:	200005de 	.word	0x200005de
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8340:	4bb9      	ldr	r3, [pc, #740]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    8342:	e9d3 2300 	ldrd	r2, r3, [r3]
    8346:	2200      	movs	r2, #0
    8348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    834c:	4313      	orrs	r3, r2
    834e:	f43f af32 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    8352:	4bb6      	ldr	r3, [pc, #728]	; (862c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62c>)
    8354:	e9d3 2300 	ldrd	r2, r3, [r3]
    8358:	2300      	movs	r3, #0
    835a:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    835e:	4313      	orrs	r3, r2
    8360:	f43f af29 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    8364:	2209      	movs	r2, #9
    8366:	2103      	movs	r1, #3
    8368:	4628      	mov	r0, r5
    836a:	f7fe fedd 	bl	7128 <meta_evt>
	sep->status = radio_cu->status;
    836e:	7ae3      	ldrb	r3, [r4, #11]
    8370:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    8372:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    8374:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    8378:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    837c:	89e3      	ldrh	r3, [r4, #14]
    837e:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    8382:	8a23      	ldrh	r3, [r4, #16]
    8384:	f8a0 3007 	strh.w	r3, [r0, #7]
    8388:	e715      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    838a:	4ba7      	ldr	r3, [pc, #668]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    838c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8390:	2200      	movs	r2, #0
    8392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    8396:	4313      	orrs	r3, r2
    8398:	f43f af0d 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    839c:	2203      	movs	r2, #3
    839e:	2130      	movs	r1, #48	; 0x30
    83a0:	4628      	mov	r0, r5
    83a2:	f7fe fe9c 	bl	70de <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    83a6:	2103      	movs	r1, #3
    83a8:	f105 0008 	add.w	r0, r5, #8
    83ac:	f008 fb40 	bl	10a30 <net_buf_simple_add>
	ep->status = 0x00;
    83b0:	2300      	movs	r3, #0
    83b2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    83b4:	f8a0 6001 	strh.w	r6, [r0, #1]
    83b8:	e6fd      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    83ba:	4b9d      	ldr	r3, [pc, #628]	; (8630 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x630>)
    83bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    83c0:	2300      	movs	r3, #0
    83c2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    83c6:	4313      	orrs	r3, r2
    83c8:	f43f aef5 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    83cc:	2202      	movs	r2, #2
    83ce:	2157      	movs	r1, #87	; 0x57
    83d0:	4628      	mov	r0, r5
    83d2:	f7fe fe84 	bl	70de <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    83d6:	2102      	movs	r1, #2
    83d8:	f105 0008 	add.w	r0, r5, #8
    83dc:	f008 fb28 	bl	10a30 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    83e0:	8006      	strh	r6, [r0, #0]
    83e2:	e6e8      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    83e4:	4b90      	ldr	r3, [pc, #576]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    83e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    83ea:	2200      	movs	r2, #0
    83ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    83f0:	4313      	orrs	r3, r2
    83f2:	f43f aee0 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    83f6:	4b8d      	ldr	r3, [pc, #564]	; (862c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62c>)
    83f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    83fc:	2300      	movs	r3, #0
    83fe:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8402:	4313      	orrs	r3, r2
    8404:	f43f aed7 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    8408:	2203      	movs	r2, #3
    840a:	2114      	movs	r1, #20
    840c:	4628      	mov	r0, r5
    840e:	f7fe fe8b 	bl	7128 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    8412:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    8414:	7ae3      	ldrb	r3, [r4, #11]
    8416:	7083      	strb	r3, [r0, #2]
    8418:	e6cd      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    841a:	4b83      	ldr	r3, [pc, #524]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    841c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8420:	2200      	movs	r2, #0
    8422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8426:	4313      	orrs	r3, r2
    8428:	f43f aec5 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    842c:	4b7f      	ldr	r3, [pc, #508]	; (862c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62c>)
    842e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8432:	2300      	movs	r3, #0
    8434:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8438:	4313      	orrs	r3, r2
    843a:	f43f aebc 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    843e:	2205      	movs	r2, #5
    8440:	210c      	movs	r1, #12
    8442:	4628      	mov	r0, r5
    8444:	f7fe fe70 	bl	7128 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    8448:	7ae3      	ldrb	r3, [r4, #11]
    844a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    844c:	f8a0 6001 	strh.w	r6, [r0, #1]
    8450:	7b22      	ldrb	r2, [r4, #12]
    8452:	2a00      	cmp	r2, #0
    8454:	fa92 f3a2 	rbit	r3, r2
    8458:	fab3 f383 	clz	r3, r3
    845c:	bf08      	it	eq
    845e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8462:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    8464:	70c3      	strb	r3, [r0, #3]
    8466:	7b62      	ldrb	r2, [r4, #13]
    8468:	fa92 f3a2 	rbit	r3, r2
    846c:	2a00      	cmp	r2, #0
    846e:	fab3 f383 	clz	r3, r3
    8472:	bf08      	it	eq
    8474:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8478:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    847a:	7103      	strb	r3, [r0, #4]
    847c:	e69b      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	switch (pdu_data->llctrl.opcode) {
    847e:	7ac3      	ldrb	r3, [r0, #11]
    8480:	3b03      	subs	r3, #3
    8482:	2b12      	cmp	r3, #18
    8484:	f63f ae6e 	bhi.w	8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>
    8488:	a201      	add	r2, pc, #4	; (adr r2, 8490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x490>)
    848a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    848e:	bf00      	nop
    8490:	000084dd 	.word	0x000084dd
    8494:	00008165 	.word	0x00008165
    8498:	00008165 	.word	0x00008165
    849c:	00008527 	.word	0x00008527
    84a0:	00008617 	.word	0x00008617
    84a4:	00008165 	.word	0x00008165
    84a8:	00008533 	.word	0x00008533
    84ac:	00008165 	.word	0x00008165
    84b0:	00008165 	.word	0x00008165
    84b4:	00008541 	.word	0x00008541
    84b8:	0000857f 	.word	0x0000857f
    84bc:	00008165 	.word	0x00008165
    84c0:	00008587 	.word	0x00008587
    84c4:	00008165 	.word	0x00008165
    84c8:	00008165 	.word	0x00008165
    84cc:	00008165 	.word	0x00008165
    84d0:	00008165 	.word	0x00008165
    84d4:	000085d7 	.word	0x000085d7
    84d8:	000085d7 	.word	0x000085d7
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    84dc:	4b52      	ldr	r3, [pc, #328]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    84de:	e9d3 2300 	ldrd	r2, r3, [r3]
    84e2:	2200      	movs	r2, #0
    84e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    84e8:	4313      	orrs	r3, r2
    84ea:	f43f ae64 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    84ee:	4b4f      	ldr	r3, [pc, #316]	; (862c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62c>)
    84f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    84f4:	2300      	movs	r3, #0
    84f6:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    84fa:	4313      	orrs	r3, r2
    84fc:	f43f ae5b 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    8500:	220c      	movs	r2, #12
    8502:	2105      	movs	r1, #5
    8504:	4628      	mov	r0, r5
    8506:	f7fe fe0f 	bl	7128 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    850a:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    850c:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    850e:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    8512:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    8516:	f7f9 fb71 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    851a:	2202      	movs	r2, #2
    851c:	f104 0114 	add.w	r1, r4, #20
    8520:	f105 000a 	add.w	r0, r5, #10
    8524:	e6c2      	b.n	82ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ac>
		encrypt_change(0x00, handle, buf);
    8526:	460a      	mov	r2, r1
    8528:	2000      	movs	r0, #0
    852a:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    852c:	f7fe fe34 	bl	7198 <encrypt_change>
    8530:	e641      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    8532:	460b      	mov	r3, r1
    8534:	4632      	mov	r2, r6
    8536:	4639      	mov	r1, r7
    8538:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    853a:	f7fe fe4d 	bl	71d8 <le_remote_feat_complete>
    853e:	e63a      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    8540:	4b39      	ldr	r3, [pc, #228]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    8542:	e9d3 2300 	ldrd	r2, r3, [r3]
    8546:	2300      	movs	r3, #0
    8548:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    854c:	4313      	orrs	r3, r2
    854e:	f43f ae32 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    8552:	2208      	movs	r2, #8
    8554:	210c      	movs	r1, #12
    8556:	4628      	mov	r0, r5
    8558:	f7fe fdc1 	bl	70de <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    855c:	2108      	movs	r1, #8
    855e:	1868      	adds	r0, r5, r1
    8560:	f008 fa66 	bl	10a30 <net_buf_simple_add>
	ep->status = 0x00;
    8564:	2300      	movs	r3, #0
    8566:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8568:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    856c:	7b23      	ldrb	r3, [r4, #12]
    856e:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    8570:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    8574:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    8576:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    857a:	80c3      	strh	r3, [r0, #6]
    857c:	e61b      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    857e:	460a      	mov	r2, r1
    8580:	7b00      	ldrb	r0, [r0, #12]
    8582:	4631      	mov	r1, r6
    8584:	e7d2      	b.n	852c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8586:	4b28      	ldr	r3, [pc, #160]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    8588:	e9d3 2300 	ldrd	r2, r3, [r3]
    858c:	2200      	movs	r2, #0
    858e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8592:	4313      	orrs	r3, r2
    8594:	d007      	beq.n	85a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    8596:	4b25      	ldr	r3, [pc, #148]	; (862c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62c>)
    8598:	e9d3 2300 	ldrd	r2, r3, [r3]
    859c:	2300      	movs	r3, #0
    859e:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    85a2:	4313      	orrs	r3, r2
    85a4:	d108      	bne.n	85b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    85a6:	2300      	movs	r3, #0
    85a8:	9301      	str	r3, [sp, #4]
    85aa:	9300      	str	r3, [sp, #0]
    85ac:	221a      	movs	r2, #26
    85ae:	2102      	movs	r1, #2
    85b0:	4630      	mov	r0, r6
    85b2:	f006 f815 	bl	e5e0 <ll_conn_update>
    85b6:	e5fe      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    85b8:	220a      	movs	r2, #10
    85ba:	2106      	movs	r1, #6
    85bc:	4628      	mov	r0, r5
    85be:	f7fe fdb3 	bl	7128 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    85c2:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    85c4:	89a3      	ldrh	r3, [r4, #12]
    85c6:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    85c8:	89e3      	ldrh	r3, [r4, #14]
    85ca:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    85cc:	8a23      	ldrh	r3, [r4, #16]
    85ce:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    85d0:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    85d2:	8103      	strh	r3, [r0, #8]
    85d4:	e5ef      	b.n	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    85d6:	4b14      	ldr	r3, [pc, #80]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    85d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    85dc:	2200      	movs	r2, #0
    85de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    85e2:	4313      	orrs	r3, r2
    85e4:	f43f ade7 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    85e8:	4b10      	ldr	r3, [pc, #64]	; (862c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62c>)
    85ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    85ee:	2300      	movs	r3, #0
    85f0:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    85f4:	4313      	orrs	r3, r2
    85f6:	f43f adde 	beq.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    85fa:	220a      	movs	r2, #10
    85fc:	2107      	movs	r1, #7
    85fe:	4628      	mov	r0, r5
    8600:	f7fe fd92 	bl	7128 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    8604:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    8606:	8a23      	ldrh	r3, [r4, #16]
    8608:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    860a:	8a63      	ldrh	r3, [r4, #18]
    860c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    860e:	89a3      	ldrh	r3, [r4, #12]
    8610:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    8612:	89e3      	ldrh	r3, [r4, #14]
    8614:	e7dd      	b.n	85d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5d2>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    8616:	7b03      	ldrb	r3, [r0, #12]
    8618:	2b0e      	cmp	r3, #14
    861a:	f47f adcc 	bne.w	81b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    861e:	460b      	mov	r3, r1
    8620:	4632      	mov	r2, r6
    8622:	2100      	movs	r1, #0
    8624:	201a      	movs	r0, #26
    8626:	e788      	b.n	853a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x53a>
    8628:	20003748 	.word	0x20003748
    862c:	20003750 	.word	0x20003750
    8630:	20000660 	.word	0x20000660

00008634 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    8634:	b570      	push	{r4, r5, r6, lr}
    8636:	4606      	mov	r6, r0
    8638:	460d      	mov	r5, r1
    863a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    863c:	2113      	movs	r1, #19
    863e:	2205      	movs	r2, #5
    8640:	f7fe fd4d 	bl	70de <evt_create>

	ep = net_buf_add(buf, len);
    8644:	2105      	movs	r1, #5
    8646:	f106 0008 	add.w	r0, r6, #8
    864a:	f008 f9f1 	bl	10a30 <net_buf_simple_add>
	ep->num_handles = num_handles;
    864e:	2301      	movs	r3, #1
    8650:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    8652:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    8656:	f8a0 4003 	strh.w	r4, [r0, #3]
    865a:	bd70      	pop	{r4, r5, r6, pc}

0000865c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    865c:	7903      	ldrb	r3, [r0, #4]
    865e:	2b01      	cmp	r3, #1
    8660:	d006      	beq.n	8670 <hci_get_class+0x14>
    8662:	3b02      	subs	r3, #2
    8664:	b2db      	uxtb	r3, r3
    8666:	2b0a      	cmp	r3, #10
    8668:	d80a      	bhi.n	8680 <hci_get_class+0x24>
    866a:	4a07      	ldr	r2, [pc, #28]	; (8688 <hci_get_class+0x2c>)
    866c:	56d0      	ldrsb	r0, [r2, r3]
    866e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    8670:	7a03      	ldrb	r3, [r0, #8]
    8672:	f003 0303 	and.w	r3, r3, #3
    8676:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    8678:	bf0c      	ite	eq
    867a:	2002      	moveq	r0, #2
    867c:	2003      	movne	r0, #3
    867e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    8684:	4770      	bx	lr
    8686:	bf00      	nop
    8688:	00012cbf 	.word	0x00012cbf

0000868c <hci_init>:
	dup_count = -1;
    868c:	4b0a      	ldr	r3, [pc, #40]	; (86b8 <hci_init+0x2c>)
    868e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8692:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    8694:	4b09      	ldr	r3, [pc, #36]	; (86bc <hci_init+0x30>)
    8696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    869a:	f641 71ff 	movw	r1, #8191	; 0x1fff
    869e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    86a2:	4b07      	ldr	r3, [pc, #28]	; (86c0 <hci_init+0x34>)
    86a4:	2000      	movs	r0, #0
    86a6:	2100      	movs	r1, #0
    86a8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    86ac:	4b05      	ldr	r3, [pc, #20]	; (86c4 <hci_init+0x38>)
    86ae:	201f      	movs	r0, #31
    86b0:	2100      	movs	r1, #0
    86b2:	e9c3 0100 	strd	r0, r1, [r3]
    86b6:	4770      	bx	lr
    86b8:	200005d4 	.word	0x200005d4
    86bc:	20003748 	.word	0x20003748
    86c0:	20000660 	.word	0x20000660
    86c4:	20003750 	.word	0x20003750

000086c8 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    86c8:	bf20      	wfe
	__SEV();
    86ca:	bf40      	sev
	__WFE();
    86cc:	bf20      	wfe
    86ce:	4770      	bx	lr

000086d0 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    86d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    86d2:	4b0d      	ldr	r3, [pc, #52]	; (8708 <pdu_len_cmp+0x38>)
{
    86d4:	b089      	sub	sp, #36	; 0x24
    86d6:	4605      	mov	r5, r0
    86d8:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    86da:	aa01      	add	r2, sp, #4
    86dc:	f103 0718 	add.w	r7, r3, #24
    86e0:	6818      	ldr	r0, [r3, #0]
    86e2:	6859      	ldr	r1, [r3, #4]
    86e4:	4614      	mov	r4, r2
    86e6:	c403      	stmia	r4!, {r0, r1}
    86e8:	3308      	adds	r3, #8
    86ea:	42bb      	cmp	r3, r7
    86ec:	4622      	mov	r2, r4
    86ee:	d1f7      	bne.n	86e0 <pdu_len_cmp+0x10>
    86f0:	881b      	ldrh	r3, [r3, #0]
    86f2:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    86f4:	ab08      	add	r3, sp, #32
    86f6:	441d      	add	r5, r3
    86f8:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    86fc:	1b83      	subs	r3, r0, r6
    86fe:	4258      	negs	r0, r3
    8700:	4158      	adcs	r0, r3
    8702:	b009      	add	sp, #36	; 0x24
    8704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8706:	bf00      	nop
    8708:	00012593 	.word	0x00012593

0000870c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    870c:	6008      	str	r0, [r1, #0]
    870e:	4770      	bx	lr

00008710 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    8710:	b918      	cbnz	r0, 871a <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    8712:	680b      	ldr	r3, [r1, #0]
    8714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8718:	600b      	str	r3, [r1, #0]
    871a:	4770      	bx	lr

0000871c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    871c:	b918      	cbnz	r0, 8726 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    871e:	680b      	ldr	r3, [r1, #0]
    8720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8724:	600b      	str	r3, [r1, #0]
    8726:	4770      	bx	lr

00008728 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    8728:	b570      	push	{r4, r5, r6, lr}
    872a:	1d03      	adds	r3, r0, #4
    872c:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    872e:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    8730:	429d      	cmp	r5, r3
    8732:	d101      	bne.n	8738 <chan_sel_remap+0x10>
    8734:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    8736:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    8738:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    873c:	2200      	movs	r2, #0
    873e:	18a0      	adds	r0, r4, r2
    8740:	2a08      	cmp	r2, #8
    8742:	b2c0      	uxtb	r0, r0
    8744:	d101      	bne.n	874a <chan_sel_remap+0x22>
    8746:	4604      	mov	r4, r0
    8748:	e7f2      	b.n	8730 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    874a:	f016 0f01 	tst.w	r6, #1
    874e:	d003      	beq.n	8758 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    8750:	2900      	cmp	r1, #0
    8752:	d0f0      	beq.n	8736 <chan_sel_remap+0xe>
				chan_index--;
    8754:	3901      	subs	r1, #1
    8756:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    8758:	0876      	lsrs	r6, r6, #1
    875a:	3201      	adds	r2, #1
    875c:	e7ef      	b.n	873e <chan_sel_remap+0x16>
	...

00008760 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    8760:	4b09      	ldr	r3, [pc, #36]	; (8788 <packet_rx_acquired_count_get+0x28>)
    8762:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    8766:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    876a:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    876c:	bf3b      	ittet	cc
    876e:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    8772:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    8776:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    877a:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    877c:	bf2c      	ite	cs
    877e:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    8780:	1a80      	subcc	r0, r0, r2
    8782:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    8784:	4770      	bx	lr
    8786:	bf00      	nop
    8788:	20000668 	.word	0x20000668

0000878c <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    878c:	b508      	push	{r3, lr}
    878e:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    8790:	f7ff ffe6 	bl	8760 <packet_rx_acquired_count_get>
    8794:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    8796:	bf21      	itttt	cs
    8798:	4b04      	ldrcs	r3, [pc, #16]	; (87ac <packet_rx_reserve_get+0x20>)
    879a:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    879e:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    87a2:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    87a6:	bf38      	it	cc
    87a8:	2000      	movcc	r0, #0
}
    87aa:	bd08      	pop	{r3, pc}
    87ac:	20000668 	.word	0x20000668

000087b0 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    87b0:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    87b2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    87b6:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    87ba:	429c      	cmp	r4, r3
    87bc:	d15a      	bne.n	8874 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    87be:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    87c2:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    87c6:	428b      	cmp	r3, r1
    87c8:	d154      	bne.n	8874 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    87ca:	f990 301d 	ldrsb.w	r3, [r0, #29]
    87ce:	2b00      	cmp	r3, #0
    87d0:	db25      	blt.n	881e <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    87d2:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    87d4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    87d6:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    87da:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    87dc:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    87e0:	4351      	muls	r1, r2
					      conn->supervision_reload *
    87e2:	227d      	movs	r2, #125	; 0x7d
    87e4:	434a      	muls	r2, r1
					      125 / 1000;
    87e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    87ea:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    87ee:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    87f2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    87f6:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    87f8:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    87fc:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    87fe:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    8800:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    8804:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    8806:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    880a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    880e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    8812:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    8816:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    881a:	4618      	mov	r0, r3
    881c:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    881e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    8822:	06dc      	lsls	r4, r3, #27
    8824:	d428      	bmi.n	8878 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    8826:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    882a:	069a      	lsls	r2, r3, #26
    882c:	d503      	bpl.n	8836 <conn_update_req+0x86>
		    (conn->llcp_features &
    882e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    8832:	079b      	lsls	r3, r3, #30
    8834:	d520      	bpl.n	8878 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    8836:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    8838:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    883a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    883e:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    8840:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    8844:	4354      	muls	r4, r2
						conn->supervision_reload *
    8846:	227d      	movs	r2, #125	; 0x7d
    8848:	4362      	muls	r2, r4
						125 / 1000;
    884a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    884e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    8852:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    8856:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    885a:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    885c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    8860:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    8864:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    8866:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    886a:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    886e:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    8872:	e7d2      	b.n	881a <conn_update_req+0x6a>
		return 1;
    8874:	2001      	movs	r0, #1
    8876:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    8878:	2002      	movs	r0, #2
}
    887a:	bd30      	pop	{r4, r5, pc}

0000887c <packet_rx_allocate>:
{
    887c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    8880:	4d22      	ldr	r5, [pc, #136]	; (890c <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    8882:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    8886:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    888a:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    888e:	3401      	adds	r4, #1
    8890:	4581      	cmp	r9, r0
    8892:	b2e4      	uxtb	r4, r4
    8894:	bf28      	it	cs
    8896:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    8898:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    889c:	42a3      	cmp	r3, r4
    889e:	bf08      	it	eq
    88a0:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    88a2:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    88a6:	f1b9 0f00 	cmp.w	r9, #0
    88aa:	d003      	beq.n	88b4 <packet_rx_allocate+0x38>
    88ac:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    88b0:	429c      	cmp	r4, r3
    88b2:	d101      	bne.n	88b8 <packet_rx_allocate+0x3c>
    88b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    88b8:	4638      	mov	r0, r7
    88ba:	f7fd fada 	bl	5e72 <mem_acquire>
		if (!link) {
    88be:	4606      	mov	r6, r0
    88c0:	2800      	cmp	r0, #0
    88c2:	d0f7      	beq.n	88b4 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    88c4:	4640      	mov	r0, r8
    88c6:	f7fd fad4 	bl	5e72 <mem_acquire>
		if (!node_rx) {
    88ca:	b928      	cbnz	r0, 88d8 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    88cc:	4630      	mov	r0, r6
    88ce:	4910      	ldr	r1, [pc, #64]	; (8910 <packet_rx_allocate+0x94>)
}
    88d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    88d4:	f7fd bae7 	b.w	5ea6 <mem_release>
		node_rx->hdr.onion.link = link;
    88d8:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    88da:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    88de:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    88e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    88e6:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    88ea:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    88ee:	3401      	adds	r4, #1
    88f0:	b2e4      	uxtb	r4, r4
			acquire = 0;
    88f2:	42a3      	cmp	r3, r4
    88f4:	bf08      	it	eq
    88f6:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    88f8:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    88fc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    8900:	3b01      	subs	r3, #1
    8902:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    8906:	fa5f f989 	uxtb.w	r9, r9
    890a:	e7cc      	b.n	88a6 <packet_rx_allocate+0x2a>
    890c:	20000668 	.word	0x20000668
    8910:	200007b0 	.word	0x200007b0

00008914 <common_init>:
{
    8914:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    8916:	4c34      	ldr	r4, [pc, #208]	; (89e8 <common_init+0xd4>)
    8918:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    891c:	2a00      	cmp	r2, #0
    891e:	d037      	beq.n	8990 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    8920:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    8924:	f44f 71aa 	mov.w	r1, #340	; 0x154
    8928:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    892c:	f7fd fa7a 	bl	5e24 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    8930:	4b2e      	ldr	r3, [pc, #184]	; (89ec <common_init+0xd8>)
    8932:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    8936:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    893a:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    893e:	f7fd fa71 	bl	5e24 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    8942:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    8946:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    894a:	4b29      	ldr	r3, [pc, #164]	; (89f0 <common_init+0xdc>)
    894c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    8950:	440a      	add	r2, r1
    8952:	2108      	movs	r1, #8
    8954:	f7fd fa66 	bl	5e24 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    8958:	4b26      	ldr	r3, [pc, #152]	; (89f4 <common_init+0xe0>)
    895a:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    895e:	2202      	movs	r2, #2
    8960:	2124      	movs	r1, #36	; 0x24
    8962:	f7fd fa5f 	bl	5e24 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    8966:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    896a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    896e:	4b22      	ldr	r3, [pc, #136]	; (89f8 <common_init+0xe4>)
    8970:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    8974:	3a01      	subs	r2, #1
    8976:	b292      	uxth	r2, r2
    8978:	f7fd fa54 	bl	5e24 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    897c:	481c      	ldr	r0, [pc, #112]	; (89f0 <common_init+0xdc>)
    897e:	f7fd fa78 	bl	5e72 <mem_acquire>
	LL_ASSERT(link);
    8982:	b940      	cbnz	r0, 8996 <common_init+0x82>
    8984:	4040      	eors	r0, r0
    8986:	f380 8811 	msr	BASEPRI, r0
    898a:	f04f 0004 	mov.w	r0, #4
    898e:	df02      	svc	2
		_radio.conn_free = NULL;
    8990:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    8994:	e7cc      	b.n	8930 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    8996:	4a19      	ldr	r2, [pc, #100]	; (89fc <common_init+0xe8>)
    8998:	1f11      	subs	r1, r2, #4
    899a:	f7fd fac1 	bl	5f20 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    899e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    89a2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    89a6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    89aa:	231f      	movs	r3, #31
    89ac:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    89b0:	2325      	movs	r3, #37	; 0x25
    89b2:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    89b6:	231b      	movs	r3, #27
    89b8:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    89bc:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    89c0:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    89c2:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    89c6:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    89c8:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    89cc:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    89d0:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    89d4:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    89d8:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    89dc:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    89e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    89e4:	f7ff bf4a 	b.w	887c <packet_rx_allocate>
    89e8:	20000668 	.word	0x20000668
    89ec:	20000798 	.word	0x20000798
    89f0:	200007b0 	.word	0x200007b0
    89f4:	200007c4 	.word	0x200007c4
    89f8:	200007cc 	.word	0x200007cc
    89fc:	200007b8 	.word	0x200007b8

00008a00 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    8a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    8a04:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    8a06:	4294      	cmp	r4, r2
{
    8a08:	4681      	mov	r9, r0
    8a0a:	460f      	mov	r7, r1
    8a0c:	4690      	mov	r8, r2
	if (_first == last) {
    8a0e:	d03d      	beq.n	8a8c <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    8a10:	4e1f      	ldr	r6, [pc, #124]	; (8a90 <tx_cmplt_get+0x90>)
    8a12:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    8a16:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    8a1a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    8a1c:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    8a1e:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    8a22:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    8a26:	b222      	sxth	r2, r4
    8a28:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    8a2c:	f8b9 e000 	ldrh.w	lr, [r9]
    8a30:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    8a34:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    8a38:	4596      	cmp	lr, r2
    8a3a:	d120      	bne.n	8a7e <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    8a3c:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    8a3e:	2801      	cmp	r0, #1
    8a40:	f020 0303 	bic.w	r3, r0, #3
    8a44:	d90a      	bls.n	8a5c <tx_cmplt_get+0x5c>
    8a46:	b1f3      	cbz	r3, 8a86 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    8a48:	1d02      	adds	r2, r0, #4
    8a4a:	d01c      	beq.n	8a86 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    8a4c:	7942      	ldrb	r2, [r0, #5]
    8a4e:	b1d2      	cbz	r2, 8a86 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    8a50:	7902      	ldrb	r2, [r0, #4]
    8a52:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    8a56:	3a01      	subs	r2, #1
    8a58:	2a01      	cmp	r2, #1
    8a5a:	d814      	bhi.n	8a86 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    8a5c:	2201      	movs	r2, #1
			cmplt++;
    8a5e:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    8a60:	604a      	str	r2, [r1, #4]
			cmplt++;
    8a62:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    8a64:	b113      	cbz	r3, 8a6c <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    8a66:	4651      	mov	r1, sl
    8a68:	f7fd fa1d 	bl	5ea6 <mem_release>
		}

		_first = _first + 1;
    8a6c:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    8a6e:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    8a72:	b2e4      	uxtb	r4, r4
			_first = 0;
    8a74:	42a2      	cmp	r2, r4
    8a76:	bf08      	it	eq
    8a78:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    8a7a:	4544      	cmp	r4, r8
    8a7c:	d1d3      	bne.n	8a26 <tx_cmplt_get+0x26>

	*first = _first;
    8a7e:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    8a80:	4628      	mov	r0, r5
    8a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    8a86:	f8c1 b004 	str.w	fp, [r1, #4]
    8a8a:	e7eb      	b.n	8a64 <tx_cmplt_get+0x64>
		return 0;
    8a8c:	2500      	movs	r5, #0
    8a8e:	e7f7      	b.n	8a80 <tx_cmplt_get+0x80>
    8a90:	20000668 	.word	0x20000668

00008a94 <connection_get>:
{
    8a94:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    8a96:	4b09      	ldr	r3, [pc, #36]	; (8abc <connection_get+0x28>)
    8a98:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    8a9c:	4282      	cmp	r2, r0
{
    8a9e:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    8aa0:	d90a      	bls.n	8ab8 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    8aa2:	4602      	mov	r2, r0
    8aa4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    8aa8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    8aac:	f7fd fa16 	bl	5edc <mem_get>
		if ((conn) && (conn->handle == handle)) {
    8ab0:	b110      	cbz	r0, 8ab8 <connection_get+0x24>
    8ab2:	8c03      	ldrh	r3, [r0, #32]
    8ab4:	42a3      	cmp	r3, r4
    8ab6:	d000      	beq.n	8aba <connection_get+0x26>
	return 0;
    8ab8:	2000      	movs	r0, #0
}
    8aba:	bd10      	pop	{r4, pc}
    8abc:	20000668 	.word	0x20000668

00008ac0 <role_disable>:
{
    8ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ac4:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8ac6:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    8ac8:	2805      	cmp	r0, #5
{
    8aca:	4605      	mov	r5, r0
    8acc:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8ace:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    8ad0:	d00e      	beq.n	8af0 <role_disable+0x30>
    8ad2:	2806      	cmp	r0, #6
    8ad4:	f000 808e 	beq.w	8bf4 <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    8ad8:	f240 8086 	bls.w	8be8 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    8adc:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    8ade:	b280      	uxth	r0, r0
    8ae0:	f7ff ffd8 	bl	8a94 <connection_get>
			if (!conn) {
    8ae4:	2800      	cmp	r0, #0
    8ae6:	f000 80d9 	beq.w	8c9c <role_disable+0x1dc>
			ticks_active_to_start =
    8aea:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    8aee:	e010      	b.n	8b12 <role_disable+0x52>
		ticks_xtal_to_start =
    8af0:	4b6b      	ldr	r3, [pc, #428]	; (8ca0 <role_disable+0x1e0>)
    8af2:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    8af4:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8af8:	ab02      	add	r3, sp, #8
    8afa:	9300      	str	r3, [sp, #0]
    8afc:	460a      	mov	r2, r1
    8afe:	4b69      	ldr	r3, [pc, #420]	; (8ca4 <role_disable+0x1e4>)
    8b00:	2103      	movs	r1, #3
    8b02:	2000      	movs	r0, #0
    8b04:	f7fe f8c8 	bl	6c98 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    8b08:	2802      	cmp	r0, #2
    8b0a:	d066      	beq.n	8bda <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    8b0c:	9b02      	ldr	r3, [sp, #8]
    8b0e:	2b00      	cmp	r3, #0
    8b10:	d167      	bne.n	8be2 <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    8b12:	4c63      	ldr	r4, [pc, #396]	; (8ca0 <role_disable+0x1e0>)
    8b14:	7ca3      	ldrb	r3, [r4, #18]
    8b16:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	d164      	bne.n	8be8 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    8b1e:	ab06      	add	r3, sp, #24
    8b20:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    8b22:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    8b24:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b28:	2103      	movs	r1, #3
    8b2a:	9300      	str	r3, [sp, #0]
    8b2c:	462a      	mov	r2, r5
    8b2e:	4b5d      	ldr	r3, [pc, #372]	; (8ca4 <role_disable+0x1e4>)
    8b30:	f7fe f8b2 	bl	6c98 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    8b34:	2802      	cmp	r0, #2
    8b36:	d063      	beq.n	8c00 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    8b38:	9b02      	ldr	r3, [sp, #8]
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d145      	bne.n	8bca <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    8b3e:	7c23      	ldrb	r3, [r4, #16]
    8b40:	429d      	cmp	r5, r3
    8b42:	d002      	beq.n	8b4a <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    8b44:	7c63      	ldrb	r3, [r4, #17]
    8b46:	429d      	cmp	r5, r3
    8b48:	d13b      	bne.n	8bc2 <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    8b4a:	ab06      	add	r3, sp, #24
    8b4c:	2202      	movs	r2, #2
    8b4e:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b52:	2200      	movs	r2, #0
    8b54:	9300      	str	r3, [sp, #0]
    8b56:	2103      	movs	r1, #3
    8b58:	4b52      	ldr	r3, [pc, #328]	; (8ca4 <role_disable+0x1e4>)
    8b5a:	4610      	mov	r0, r2
    8b5c:	f7fe f89c 	bl	6c98 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    8b60:	2802      	cmp	r0, #2
    8b62:	d107      	bne.n	8b74 <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8b64:	2201      	movs	r2, #1
    8b66:	4611      	mov	r1, r2
    8b68:	2003      	movs	r0, #3
    8b6a:	f7fd fa25 	bl	5fb8 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    8b6e:	9b03      	ldr	r3, [sp, #12]
    8b70:	2b02      	cmp	r3, #2
    8b72:	d039      	beq.n	8be8 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    8b74:	9803      	ldr	r0, [sp, #12]
    8b76:	2800      	cmp	r0, #0
    8b78:	d15e      	bne.n	8c38 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    8b7a:	2302      	movs	r3, #2
    8b7c:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    8b7e:	7c23      	ldrb	r3, [r4, #16]
    8b80:	2b00      	cmp	r3, #0
    8b82:	d031      	beq.n	8be8 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b84:	ab04      	add	r3, sp, #16
    8b86:	9300      	str	r3, [sp, #0]
    8b88:	2201      	movs	r2, #1
    8b8a:	4b46      	ldr	r3, [pc, #280]	; (8ca4 <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    8b8c:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b8e:	2103      	movs	r1, #3
    8b90:	f7fe f882 	bl	6c98 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    8b94:	2802      	cmp	r0, #2
    8b96:	d107      	bne.n	8ba8 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8b98:	2201      	movs	r2, #1
    8b9a:	4611      	mov	r1, r2
    8b9c:	2003      	movs	r0, #3
    8b9e:	f7fd fa0b 	bl	5fb8 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    8ba2:	9b04      	ldr	r3, [sp, #16]
    8ba4:	2b02      	cmp	r3, #2
    8ba6:	d01f      	beq.n	8be8 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    8ba8:	9a04      	ldr	r2, [sp, #16]
    8baa:	2a00      	cmp	r2, #0
    8bac:	d136      	bne.n	8c1c <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    8bae:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    8bb2:	45b0      	cmp	r8, r6
    8bb4:	d93e      	bls.n	8c34 <role_disable+0x174>
				ret = mayfly_enqueue(
    8bb6:	4b3c      	ldr	r3, [pc, #240]	; (8ca8 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8bb8:	4611      	mov	r1, r2
    8bba:	2003      	movs	r0, #3
    8bbc:	f7fd fa24 	bl	6008 <mayfly_enqueue>
			LL_ASSERT(!ret);
    8bc0:	b990      	cbnz	r0, 8be8 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    8bc2:	7ca3      	ldrb	r3, [r4, #18]
    8bc4:	b90b      	cbnz	r3, 8bca <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    8bc6:	2301      	movs	r3, #1
    8bc8:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    8bca:	2300      	movs	r3, #0
    8bcc:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    8bce:	9802      	ldr	r0, [sp, #8]
}
    8bd0:	b006      	add	sp, #24
    8bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    8bd6:	f7ff fd77 	bl	86c8 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8bda:	9b02      	ldr	r3, [sp, #8]
    8bdc:	2b02      	cmp	r3, #2
    8bde:	d0fa      	beq.n	8bd6 <role_disable+0x116>
    8be0:	e794      	b.n	8b0c <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    8be2:	9b02      	ldr	r3, [sp, #8]
    8be4:	2b01      	cmp	r3, #1
    8be6:	d094      	beq.n	8b12 <role_disable+0x52>
		LL_ASSERT(0);
    8be8:	4040      	eors	r0, r0
    8bea:	f380 8811 	msr	BASEPRI, r0
    8bee:	f04f 0004 	mov.w	r0, #4
    8bf2:	df02      	svc	2
		ticks_xtal_to_start =
    8bf4:	4b2a      	ldr	r3, [pc, #168]	; (8ca0 <role_disable+0x1e0>)
    8bf6:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    8bfa:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    8bfe:	e788      	b.n	8b12 <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    8c00:	7c63      	ldrb	r3, [r4, #17]
    8c02:	429d      	cmp	r5, r3
    8c04:	d104      	bne.n	8c10 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8c06:	2201      	movs	r2, #1
    8c08:	4611      	mov	r1, r2
    8c0a:	2003      	movs	r0, #3
    8c0c:	f7fd f9d4 	bl	5fb8 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    8c10:	9b02      	ldr	r3, [sp, #8]
    8c12:	2b02      	cmp	r3, #2
    8c14:	d190      	bne.n	8b38 <role_disable+0x78>
			cpu_sleep();
    8c16:	f7ff fd57 	bl	86c8 <cpu_sleep>
    8c1a:	e7f9      	b.n	8c10 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    8c1c:	9b04      	ldr	r3, [sp, #16]
    8c1e:	2b01      	cmp	r3, #1
    8c20:	d1e2      	bne.n	8be8 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8c22:	2200      	movs	r2, #0
    8c24:	4611      	mov	r1, r2
    8c26:	4b20      	ldr	r3, [pc, #128]	; (8ca8 <role_disable+0x1e8>)
    8c28:	2003      	movs	r0, #3
    8c2a:	f7fd f9ed 	bl	6008 <mayfly_enqueue>
			LL_ASSERT(!ret);
    8c2e:	4602      	mov	r2, r0
    8c30:	2800      	cmp	r0, #0
    8c32:	d1d9      	bne.n	8be8 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8c34:	4b1d      	ldr	r3, [pc, #116]	; (8cac <role_disable+0x1ec>)
    8c36:	e7bf      	b.n	8bb8 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    8c38:	9d03      	ldr	r5, [sp, #12]
    8c3a:	2d01      	cmp	r5, #1
    8c3c:	d1d4      	bne.n	8be8 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    8c3e:	2fff      	cmp	r7, #255	; 0xff
    8c40:	d019      	beq.n	8c76 <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    8c42:	ab06      	add	r3, sp, #24
    8c44:	2202      	movs	r2, #2
    8c46:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c4a:	2103      	movs	r1, #3
    8c4c:	9300      	str	r3, [sp, #0]
    8c4e:	463a      	mov	r2, r7
    8c50:	4b14      	ldr	r3, [pc, #80]	; (8ca4 <role_disable+0x1e4>)
    8c52:	2000      	movs	r0, #0
    8c54:	f7fe f820 	bl	6c98 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    8c58:	2802      	cmp	r0, #2
    8c5a:	d107      	bne.n	8c6c <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8c5c:	462a      	mov	r2, r5
    8c5e:	4629      	mov	r1, r5
    8c60:	2003      	movs	r0, #3
    8c62:	f7fd f9a9 	bl	5fb8 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    8c66:	9b05      	ldr	r3, [sp, #20]
    8c68:	2b02      	cmp	r3, #2
    8c6a:	d0bd      	beq.n	8be8 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    8c6c:	9b05      	ldr	r3, [sp, #20]
    8c6e:	b113      	cbz	r3, 8c76 <role_disable+0x1b6>
    8c70:	9b05      	ldr	r3, [sp, #20]
    8c72:	2b01      	cmp	r3, #1
    8c74:	d1b8      	bne.n	8be8 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    8c76:	7ce3      	ldrb	r3, [r4, #19]
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d0a2      	beq.n	8bc2 <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    8c7c:	4b0c      	ldr	r3, [pc, #48]	; (8cb0 <role_disable+0x1f0>)
    8c7e:	2204      	movs	r2, #4
    8c80:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8c82:	2200      	movs	r2, #0
    8c84:	4611      	mov	r1, r2
    8c86:	2003      	movs	r0, #3
    8c88:	f7fd f9be 	bl	6008 <mayfly_enqueue>
			LL_ASSERT(!ret);
    8c8c:	2800      	cmp	r0, #0
    8c8e:	d1ab      	bne.n	8be8 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    8c90:	7ce3      	ldrb	r3, [r4, #19]
    8c92:	2b00      	cmp	r3, #0
    8c94:	d095      	beq.n	8bc2 <role_disable+0x102>
				cpu_sleep();
    8c96:	f7ff fd17 	bl	86c8 <cpu_sleep>
    8c9a:	e7f9      	b.n	8c90 <role_disable+0x1d0>
				return 1;
    8c9c:	2001      	movs	r0, #1
    8c9e:	e797      	b.n	8bd0 <role_disable+0x110>
    8ca0:	20000668 	.word	0x20000668
    8ca4:	0000870d 	.word	0x0000870d
    8ca8:	20003778 	.word	0x20003778
    8cac:	20003818 	.word	0x20003818
    8cb0:	20003798 	.word	0x20003798

00008cb4 <rx_packet_set>:
{
    8cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    8cb6:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    8cba:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    8cbc:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    8cbe:	f004 0407 	and.w	r4, r4, #7
{
    8cc2:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    8cc4:	4620      	mov	r0, r4
    8cc6:	2100      	movs	r1, #0
    8cc8:	f007 f9bc 	bl	10044 <radio_phy_set>
	if (conn->enc_rx) {
    8ccc:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    8cd0:	f013 0f10 	tst.w	r3, #16
    8cd4:	ea4f 0244 	mov.w	r2, r4, lsl #1
    8cd8:	d010      	beq.n	8cfc <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    8cda:	1d29      	adds	r1, r5, #4
    8cdc:	f042 0201 	orr.w	r2, r2, #1
    8ce0:	b2c9      	uxtb	r1, r1
    8ce2:	2008      	movs	r0, #8
    8ce4:	f007 f9f4 	bl	100d0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    8ce8:	463a      	mov	r2, r7
    8cea:	4621      	mov	r1, r4
    8cec:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    8cf0:	f007 fc32 	bl	10558 <radio_ccm_rx_pkt_set>
}
    8cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    8cf8:	f007 ba18 	b.w	1012c <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    8cfc:	2008      	movs	r0, #8
    8cfe:	f042 0201 	orr.w	r2, r2, #1
    8d02:	b2e9      	uxtb	r1, r5
    8d04:	f007 f9e4 	bl	100d0 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    8d08:	4638      	mov	r0, r7
    8d0a:	e7f3      	b.n	8cf4 <rx_packet_set+0x40>

00008d0c <tx_packet_set>:
{
    8d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d0e:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    8d10:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    8d14:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    8d16:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    8d1a:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    8d1c:	09c9      	lsrs	r1, r1, #7
    8d1e:	4620      	mov	r0, r4
    8d20:	f007 f990 	bl	10044 <radio_phy_set>
	if (conn->enc_tx) {
    8d24:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    8d28:	f013 0f20 	tst.w	r3, #32
    8d2c:	ea4f 0244 	mov.w	r2, r4, lsl #1
    8d30:	d00f      	beq.n	8d52 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    8d32:	1d29      	adds	r1, r5, #4
    8d34:	b2c9      	uxtb	r1, r1
    8d36:	2008      	movs	r0, #8
    8d38:	f042 0201 	orr.w	r2, r2, #1
    8d3c:	f007 f9c8 	bl	100d0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    8d40:	4639      	mov	r1, r7
    8d42:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    8d46:	f007 fc43 	bl	105d0 <radio_ccm_tx_pkt_set>
}
    8d4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    8d4e:	f007 b9f3 	b.w	10138 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    8d52:	2008      	movs	r0, #8
    8d54:	f042 0201 	orr.w	r2, r2, #1
    8d58:	b2e9      	uxtb	r1, r5
    8d5a:	f007 f9b9 	bl	100d0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    8d5e:	4638      	mov	r0, r7
    8d60:	e7f3      	b.n	8d4a <tx_packet_set+0x3e>
    8d62:	0000      	movs	r0, r0
    8d64:	0000      	movs	r0, r0
	...

00008d68 <sched_free_win_offset_calc>:
{
    8d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d6c:	b08f      	sub	sp, #60	; 0x3c
    8d6e:	4692      	mov	sl, r2
    8d70:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8d72:	6803      	ldr	r3, [r0, #0]
{
    8d74:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8d76:	2b00      	cmp	r3, #0
{
    8d78:	4680      	mov	r8, r0
    8d7a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8d7c:	da31      	bge.n	8de2 <sched_free_win_offset_calc+0x7a>
		u32_t ticks_prepare_to_start =
    8d7e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    8d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    8d84:	4291      	cmp	r1, r2
    8d86:	bf2c      	ite	cs
    8d88:	1a5a      	subcs	r2, r3, r1
    8d8a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    8d8c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    8d8e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    8d92:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8d94:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8d96:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    8d98:	18d3      	adds	r3, r2, r3
    8d9a:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8d9c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8da0:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    8da4:	940c      	str	r4, [sp, #48]	; 0x30
    8da6:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8da8:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8daa:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    8dac:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    8dae:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8db0:	2302      	movs	r3, #2
    8db2:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8db4:	ab0d      	add	r3, sp, #52	; 0x34
    8db6:	9302      	str	r3, [sp, #8]
    8db8:	4b77      	ldr	r3, [pc, #476]	; (8f98 <sched_free_win_offset_calc+0x230>)
    8dba:	9301      	str	r3, [sp, #4]
    8dbc:	ab0b      	add	r3, sp, #44	; 0x2c
    8dbe:	9300      	str	r3, [sp, #0]
    8dc0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    8dc4:	ab0c      	add	r3, sp, #48	; 0x30
    8dc6:	2101      	movs	r1, #1
    8dc8:	2000      	movs	r0, #0
    8dca:	f7fd ffa1 	bl	6d10 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    8dce:	2802      	cmp	r0, #2
    8dd0:	d010      	beq.n	8df4 <sched_free_win_offset_calc+0x8c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8dd4:	b193      	cbz	r3, 8dfc <sched_free_win_offset_calc+0x94>
			LL_ASSERT(0);
    8dd6:	4040      	eors	r0, r0
    8dd8:	f380 8811 	msr	BASEPRI, r0
    8ddc:	f04f 0004 	mov.w	r0, #4
    8de0:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    8de2:	4293      	cmp	r3, r2
    8de4:	bf38      	it	cc
    8de6:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    8de8:	2200      	movs	r2, #0
    8dea:	e7cf      	b.n	8d8c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    8dec:	2101      	movs	r1, #1
    8dee:	2000      	movs	r0, #0
    8df0:	f7fe f80c 	bl	6e0c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8df6:	2b02      	cmp	r3, #2
    8df8:	d0f8      	beq.n	8dec <sched_free_win_offset_calc+0x84>
    8dfa:	e7ea      	b.n	8dd2 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    8dfc:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    8e00:	2aff      	cmp	r2, #255	; 0xff
    8e02:	d05d      	beq.n	8ec0 <sched_free_win_offset_calc+0x158>
		if ((ticker_id_prev != 0xff) &&
    8e04:	2fff      	cmp	r7, #255	; 0xff
    8e06:	d002      	beq.n	8e0e <sched_free_win_offset_calc+0xa6>
    8e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8e0a:	4599      	cmp	r9, r3
    8e0c:	d1e3      	bne.n	8dd6 <sched_free_win_offset_calc+0x6e>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    8e0e:	2a05      	cmp	r2, #5
    8e10:	d951      	bls.n	8eb6 <sched_free_win_offset_calc+0x14e>
				  _radio.connection_count)) {
    8e12:	4862      	ldr	r0, [pc, #392]	; (8f9c <sched_free_win_offset_calc+0x234>)
    8e14:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8e18:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    8e1a:	429a      	cmp	r2, r3
    8e1c:	da4b      	bge.n	8eb6 <sched_free_win_offset_calc+0x14e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    8e1e:	2a06      	cmp	r2, #6
    8e20:	f000 8092 	beq.w	8f48 <sched_free_win_offset_calc+0x1e0>
		if (ticker_id_other != 0xFF) {
    8e24:	9b06      	ldr	r3, [sp, #24]
    8e26:	2bff      	cmp	r3, #255	; 0xff
    8e28:	d14a      	bne.n	8ec0 <sched_free_win_offset_calc+0x158>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8e2a:	3a07      	subs	r2, #7
    8e2c:	b292      	uxth	r2, r2
    8e2e:	f44f 71aa 	mov.w	r1, #340	; 0x154
    8e32:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    8e36:	f7fd f851 	bl	5edc <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    8e3a:	4580      	cmp	r8, r0
    8e3c:	d03b      	beq.n	8eb6 <sched_free_win_offset_calc+0x14e>
    8e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e40:	b91b      	cbnz	r3, 8e4a <sched_free_win_offset_calc+0xe2>
    8e42:	f990 301d 	ldrsb.w	r3, [r0, #29]
    8e46:	2b00      	cmp	r3, #0
    8e48:	db35      	blt.n	8eb6 <sched_free_win_offset_calc+0x14e>
			u32_t ticks_to_expire_normal =
    8e4a:	9b05      	ldr	r3, [sp, #20]
    8e4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8e4e:	6841      	ldr	r1, [r0, #4]
    8e50:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8e52:	6803      	ldr	r3, [r0, #0]
    8e54:	2b00      	cmp	r3, #0
    8e56:	da4e      	bge.n	8ef6 <sched_free_win_offset_calc+0x18e>
				u32_t ticks_prepare_to_start =
    8e58:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    8e5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8e5e:	428a      	cmp	r2, r1
    8e60:	bf2c      	ite	cs
    8e62:	18b6      	addcs	r6, r6, r2
    8e64:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    8e66:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    8e68:	68c2      	ldr	r2, [r0, #12]
    8e6a:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    8e6e:	444b      	add	r3, r9
    8e70:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    8e72:	f8da 3000 	ldr.w	r3, [sl]
    8e76:	429e      	cmp	r6, r3
    8e78:	d916      	bls.n	8ea8 <sched_free_win_offset_calc+0x140>
    8e7a:	429d      	cmp	r5, r3
    8e7c:	bf38      	it	cc
    8e7e:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    8e80:	9b07      	ldr	r3, [sp, #28]
    8e82:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    8e86:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8e88:	781b      	ldrb	r3, [r3, #0]
    8e8a:	42a3      	cmp	r3, r4
    8e8c:	d905      	bls.n	8e9a <sched_free_win_offset_calc+0x132>
				       (ticker_ticks_diff_get(
    8e8e:	4629      	mov	r1, r5
    8e90:	4630      	mov	r0, r6
    8e92:	f7fd ffd3 	bl	6e3c <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    8e96:	42b8      	cmp	r0, r7
    8e98:	d231      	bcs.n	8efe <sched_free_win_offset_calc+0x196>
				if (_win_offset >= conn_interval) {
    8e9a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    8e9e:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    8ea0:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    8ea4:	4293      	cmp	r3, r2
    8ea6:	d20b      	bcs.n	8ec0 <sched_free_win_offset_calc+0x158>
			ticks_anchor_prev = ticks_anchor;
    8ea8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    8eac:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    8eb0:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    8eb4:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    8eb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8eb8:	781b      	ldrb	r3, [r3, #0]
    8eba:	42a3      	cmp	r3, r4
    8ebc:	f63f af78 	bhi.w	8db0 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    8ec0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    8ec4:	2bff      	cmp	r3, #255	; 0xff
    8ec6:	d111      	bne.n	8eec <sched_free_win_offset_calc+0x184>
    8ec8:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8ecc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8fa0 <sched_free_win_offset_calc+0x238>
    8ed0:	a72f      	add	r7, pc, #188	; (adr r7, 8f90 <sched_free_win_offset_calc+0x228>)
    8ed2:	e9d7 6700 	ldrd	r6, r7, [r7]
    8ed6:	429d      	cmp	r5, r3
    8ed8:	bf38      	it	cc
    8eda:	461d      	movcc	r5, r3
    8edc:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    8ee0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8ee2:	781b      	ldrb	r3, [r3, #0]
    8ee4:	42a3      	cmp	r3, r4
    8ee6:	d831      	bhi.n	8f4c <sched_free_win_offset_calc+0x1e4>
		*ticks_to_offset_next = ticks_to_expire_prev;
    8ee8:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    8eec:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8eee:	701c      	strb	r4, [r3, #0]
}
    8ef0:	b00f      	add	sp, #60	; 0x3c
    8ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    8ef6:	428b      	cmp	r3, r1
    8ef8:	bf38      	it	cc
    8efa:	460b      	movcc	r3, r1
    8efc:	e7b4      	b.n	8e68 <sched_free_win_offset_calc+0x100>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8efe:	4a28      	ldr	r2, [pc, #160]	; (8fa0 <sched_free_win_offset_calc+0x238>)
    8f00:	eb05 030b 	add.w	r3, r5, fp
    8f04:	fba3 0102 	umull	r0, r1, r3, r2
    8f08:	2207      	movs	r2, #7
    8f0a:	fb02 1103 	mla	r1, r2, r3, r1
    8f0e:	a320      	add	r3, pc, #128	; (adr r3, 8f90 <sched_free_win_offset_calc+0x228>)
    8f10:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f14:	f7f7 f97e 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    8f18:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8f1c:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    8f20:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8f22:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    8f24:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8f26:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    8f2a:	d20b      	bcs.n	8f44 <sched_free_win_offset_calc+0x1dc>
					memcpy(win_offset +
    8f2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8f2e:	2202      	movs	r2, #2
    8f30:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    8f34:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    8f38:	3401      	adds	r4, #1
					memcpy(win_offset +
    8f3a:	f7f8 fe5f 	bl	1bfc <memcpy>
					offset_index++;
    8f3e:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    8f40:	3528      	adds	r5, #40	; 0x28
    8f42:	e7a0      	b.n	8e86 <sched_free_win_offset_calc+0x11e>
						ticks_to_expire_prev = 0;
    8f44:	2500      	movs	r5, #0
    8f46:	e7a8      	b.n	8e9a <sched_free_win_offset_calc+0x132>
    8f48:	9206      	str	r2, [sp, #24]
    8f4a:	e7b4      	b.n	8eb6 <sched_free_win_offset_calc+0x14e>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8f4c:	eb05 030b 	add.w	r3, r5, fp
    8f50:	fba3 0108 	umull	r0, r1, r3, r8
    8f54:	fb09 1103 	mla	r1, r9, r3, r1
    8f58:	4632      	mov	r2, r6
    8f5a:	463b      	mov	r3, r7
    8f5c:	f7f7 f95a 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    8f60:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8f64:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    8f68:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8f6a:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    8f6c:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8f6e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    8f72:	d90b      	bls.n	8f8c <sched_free_win_offset_calc+0x224>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    8f74:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8f76:	2202      	movs	r2, #2
    8f78:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    8f7c:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    8f80:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    8f82:	f7f8 fe3b 	bl	1bfc <memcpy>
			offset_index++;
    8f86:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    8f88:	3528      	adds	r5, #40	; 0x28
    8f8a:	e7a9      	b.n	8ee0 <sched_free_win_offset_calc+0x178>
				ticks_to_expire_prev = 0;
    8f8c:	2500      	movs	r5, #0
    8f8e:	e7ab      	b.n	8ee8 <sched_free_win_offset_calc+0x180>
    8f90:	3b9aca00 	.word	0x3b9aca00
    8f94:	00000000 	.word	0x00000000
    8f98:	0000870d 	.word	0x0000870d
    8f9c:	20000668 	.word	0x20000668
    8fa0:	1afd498d 	.word	0x1afd498d

00008fa4 <mayfly_sched_free_win_offset_calc>:
{
    8fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    8fa6:	2300      	movs	r3, #0
    8fa8:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    8faa:	2306      	movs	r3, #6
    8fac:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    8fb0:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8fb4:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    8fb8:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    8fba:	bfbe      	ittt	lt
    8fbc:	4602      	movlt	r2, r0
    8fbe:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    8fc0:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8fc4:	9101      	str	r1, [sp, #4]
    8fc6:	f10d 010b 	add.w	r1, sp, #11
    8fca:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    8fcc:	bfa8      	it	ge
    8fce:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8fd0:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    8fd4:	2100      	movs	r1, #0
    8fd6:	f7ff fec7 	bl	8d68 <sched_free_win_offset_calc>
}
    8fda:	b005      	add	sp, #20
    8fdc:	f85d fb04 	ldr.w	pc, [sp], #4

00008fe0 <mayfly_sched_win_offset_select>:
{
    8fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8fe4:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    8fe8:	b089      	sub	sp, #36	; 0x24
    8fea:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8fec:	4840      	ldr	r0, [pc, #256]	; (90f0 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    8fee:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    8ff0:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8ff2:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    8ff6:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8ffa:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    8ffe:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9000:	fb03 1102 	mla	r1, r3, r2, r1
    9004:	a338      	add	r3, pc, #224	; (adr r3, 90e8 <mayfly_sched_win_offset_select+0x108>)
    9006:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    900a:	9505      	str	r5, [sp, #20]
    900c:	6075      	str	r5, [r6, #4]
    900e:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    9010:	f7f7 f900 	bl	214 <__aeabi_uldivmod>
    9014:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    9016:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    901a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    901e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    9022:	9100      	str	r1, [sp, #0]
    9024:	9601      	str	r6, [sp, #4]
    9026:	2101      	movs	r1, #1
    9028:	4620      	mov	r0, r4
    902a:	f7ff fe9d 	bl	8d68 <sched_free_win_offset_calc>
    902e:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    9032:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    9036:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    903a:	2202      	movs	r2, #2
    903c:	4639      	mov	r1, r7
    903e:	f10d 000e 	add.w	r0, sp, #14
    9042:	f7f8 fddb 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    9046:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    904a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    904e:	2300      	movs	r3, #0
    9050:	b2d9      	uxtb	r1, r3
    9052:	4288      	cmp	r0, r1
    9054:	d811      	bhi.n	907a <mayfly_sched_win_offset_select+0x9a>
    9056:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    9058:	4547      	cmp	r7, r8
    905a:	d1ee      	bne.n	903a <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    905c:	b9b5      	cbnz	r5, 908c <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    905e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    9062:	f240 43e2 	movw	r3, #1250	; 0x4e2
    9066:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    9068:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    906c:	2202      	movs	r2, #2
    906e:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    9070:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    9074:	f7f8 fdc2 	bl	1bfc <memcpy>
    9078:	e027      	b.n	90ca <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    907a:	454a      	cmp	r2, r9
    907c:	d004      	beq.n	9088 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    907e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    9082:	4291      	cmp	r1, r2
    9084:	d024      	beq.n	90d0 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    9086:	2501      	movs	r5, #1
    9088:	3301      	adds	r3, #1
    908a:	e7e1      	b.n	9050 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    908c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    9090:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    9094:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    9098:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    909c:	4b15      	ldr	r3, [pc, #84]	; (90f4 <mayfly_sched_win_offset_select+0x114>)
    909e:	2200      	movs	r2, #0
    90a0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    90a4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    90a8:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    90ac:	f042 0203 	orr.w	r2, r2, #3
    90b0:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    90b4:	2203      	movs	r2, #3
    90b6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    90ba:	2211      	movs	r2, #17
    90bc:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    90c0:	220f      	movs	r2, #15
    90c2:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    90c6:	2220      	movs	r2, #32
    90c8:	701a      	strb	r2, [r3, #0]
}
    90ca:	b009      	add	sp, #36	; 0x24
    90cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    90d0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    90d4:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    90d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    90da:	2202      	movs	r2, #2
    90dc:	f10d 010e 	add.w	r1, sp, #14
    90e0:	e7c6      	b.n	9070 <mayfly_sched_win_offset_select+0x90>
    90e2:	bf00      	nop
    90e4:	f3af 8000 	nop.w
    90e8:	1afd498d 	.word	0x1afd498d
    90ec:	00000007 	.word	0x00000007
    90f0:	09ce5400 	.word	0x09ce5400
    90f4:	20000668 	.word	0x20000668

000090f8 <sched_after_mstr_free_slot_get>:
{
    90f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90fc:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    90fe:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    9100:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    9102:	f8df 9114 	ldr.w	r9, [pc, #276]	; 9218 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    9106:	f88d 501f 	strb.w	r5, [sp, #31]
{
    910a:	4680      	mov	r8, r0
    910c:	4693      	mov	fp, r2
    910e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    9110:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    9114:	601c      	str	r4, [r3, #0]
    9116:	9408      	str	r4, [sp, #32]
    9118:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    911a:	2302      	movs	r3, #2
    911c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    911e:	ab09      	add	r3, sp, #36	; 0x24
    9120:	9302      	str	r3, [sp, #8]
    9122:	4b3b      	ldr	r3, [pc, #236]	; (9210 <sched_after_mstr_free_slot_get+0x118>)
    9124:	9301      	str	r3, [sp, #4]
    9126:	ab08      	add	r3, sp, #32
    9128:	9300      	str	r3, [sp, #0]
    912a:	f10d 021f 	add.w	r2, sp, #31
    912e:	465b      	mov	r3, fp
    9130:	4641      	mov	r1, r8
    9132:	2000      	movs	r0, #0
    9134:	f7fd fdec 	bl	6d10 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    9138:	2802      	cmp	r0, #2
    913a:	d00b      	beq.n	9154 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    913c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    913e:	b16b      	cbz	r3, 915c <sched_after_mstr_free_slot_get+0x64>
    9140:	4040      	eors	r0, r0
    9142:	f380 8811 	msr	BASEPRI, r0
    9146:	f04f 0004 	mov.w	r0, #4
    914a:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    914c:	4641      	mov	r1, r8
    914e:	2000      	movs	r0, #0
    9150:	f7fd fe5c 	bl	6e0c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9154:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9156:	2b02      	cmp	r3, #2
    9158:	d0f8      	beq.n	914c <sched_after_mstr_free_slot_get+0x54>
    915a:	e7ef      	b.n	913c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    915c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9160:	2aff      	cmp	r2, #255	; 0xff
    9162:	d04e      	beq.n	9202 <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    9164:	2a06      	cmp	r2, #6
    9166:	d9d8      	bls.n	911a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    9168:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    916c:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    916e:	429a      	cmp	r2, r3
    9170:	dad3      	bge.n	911a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9172:	3a07      	subs	r2, #7
    9174:	b292      	uxth	r2, r2
    9176:	f44f 71aa 	mov.w	r1, #340	; 0x154
    917a:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    917e:	f7fc fead 	bl	5edc <mem_get>
		if (conn && !conn->role) {
    9182:	2800      	cmp	r0, #0
    9184:	d0c9      	beq.n	911a <sched_after_mstr_free_slot_get+0x22>
    9186:	f990 301d 	ldrsb.w	r3, [r0, #29]
    918a:	2b00      	cmp	r3, #0
    918c:	dbc5      	blt.n	911a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    918e:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    9190:	9a08      	ldr	r2, [sp, #32]
    9192:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9196:	2b00      	cmp	r3, #0
    9198:	da12      	bge.n	91c0 <sched_after_mstr_free_slot_get+0xc8>
    919a:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    919c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    91a0:	4571      	cmp	r1, lr
    91a2:	bf2c      	ite	cs
    91a4:	1852      	addcs	r2, r2, r1
    91a6:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    91a8:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    91aa:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    91ac:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    91ae:	f101 0104 	add.w	r1, r1, #4
    91b2:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    91b4:	d108      	bne.n	91c8 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    91b6:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    91ba:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    91bc:	4616      	mov	r6, r2
    91be:	e7ac      	b.n	911a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    91c0:	4573      	cmp	r3, lr
    91c2:	bf38      	it	cc
    91c4:	4673      	movcc	r3, lr
    91c6:	e7f0      	b.n	91aa <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    91c8:	4631      	mov	r1, r6
    91ca:	4610      	mov	r0, r2
    91cc:	9305      	str	r3, [sp, #20]
    91ce:	9204      	str	r2, [sp, #16]
    91d0:	f7fd fe34 	bl	6e3c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    91d4:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    91d8:	4288      	cmp	r0, r1
    91da:	9a04      	ldr	r2, [sp, #16]
    91dc:	9b05      	ldr	r3, [sp, #20]
    91de:	d9ea      	bls.n	91b6 <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    91e0:	480c      	ldr	r0, [pc, #48]	; (9214 <sched_after_mstr_free_slot_get+0x11c>)
    91e2:	4434      	add	r4, r6
    91e4:	fba4 0100 	umull	r0, r1, r4, r0
    91e8:	2307      	movs	r3, #7
    91ea:	fb03 1104 	mla	r1, r3, r4, r1
    91ee:	a306      	add	r3, pc, #24	; (adr r3, 9208 <sched_after_mstr_free_slot_get+0x110>)
    91f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    91f4:	f7f7 f80e 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    91f8:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    91fa:	6038      	str	r0, [r7, #0]
}
    91fc:	b00b      	add	sp, #44	; 0x2c
    91fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    9202:	2dff      	cmp	r5, #255	; 0xff
    9204:	d1ec      	bne.n	91e0 <sched_after_mstr_free_slot_get+0xe8>
    9206:	e7f9      	b.n	91fc <sched_after_mstr_free_slot_get+0x104>
    9208:	3b9aca00 	.word	0x3b9aca00
    920c:	00000000 	.word	0x00000000
    9210:	0000870d 	.word	0x0000870d
    9214:	1afd498d 	.word	0x1afd498d
    9218:	20000668 	.word	0x20000668

0000921c <isr_adv_ci_adva_check>:
{
    921c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    921e:	7804      	ldrb	r4, [r0, #0]
    9220:	780a      	ldrb	r2, [r1, #0]
    9222:	f3c4 1380 	ubfx	r3, r4, #6, #1
    9226:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    922a:	d119      	bne.n	9260 <isr_adv_ci_adva_check+0x44>
    922c:	f004 040f 	and.w	r4, r4, #15
    9230:	2c01      	cmp	r4, #1
    9232:	f101 0608 	add.w	r6, r1, #8
    9236:	f100 0502 	add.w	r5, r0, #2
    923a:	d008      	beq.n	924e <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    923c:	2206      	movs	r2, #6
    923e:	4631      	mov	r1, r6
    9240:	4628      	mov	r0, r5
    9242:	f7f8 fcc6 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    9246:	fab0 f080 	clz	r0, r0
    924a:	0940      	lsrs	r0, r0, #5
    924c:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    924e:	2206      	movs	r2, #6
    9250:	4631      	mov	r1, r6
    9252:	4628      	mov	r0, r5
    9254:	f7f8 fcbd 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    9258:	2800      	cmp	r0, #0
    925a:	d1ef      	bne.n	923c <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    925c:	4620      	mov	r0, r4
    925e:	bd70      	pop	{r4, r5, r6, pc}
    9260:	2000      	movs	r0, #0
}
    9262:	bd70      	pop	{r4, r5, r6, pc}

00009264 <isr_scan_tgta_check>:
{
    9264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9268:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    926a:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    926c:	f101 0808 	add.w	r8, r1, #8
{
    9270:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    9272:	09c0      	lsrs	r0, r0, #7
    9274:	4641      	mov	r1, r8
{
    9276:	4691      	mov	r9, r2
    9278:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    927a:	f006 faa1 	bl	f7c0 <ctrl_rl_addr_resolve>
    927e:	4604      	mov	r4, r0
    9280:	b9d8      	cbnz	r0, 92ba <isr_scan_tgta_check+0x56>
    9282:	4f1c      	ldr	r7, [pc, #112]	; (92f4 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    9284:	f1ba 0f00 	cmp.w	sl, #0
    9288:	d10e      	bne.n	92a8 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    928a:	782b      	ldrb	r3, [r5, #0]
    928c:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    9290:	09db      	lsrs	r3, r3, #7
    9292:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    9296:	d113      	bne.n	92c0 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    9298:	2206      	movs	r2, #6
    929a:	4641      	mov	r1, r8
    929c:	4816      	ldr	r0, [pc, #88]	; (92f8 <isr_scan_tgta_check+0x94>)
    929e:	f7f8 fc98 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    92a2:	b968      	cbnz	r0, 92c0 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    92a4:	2001      	movs	r0, #1
    92a6:	e012      	b.n	92ce <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    92a8:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    92ac:	07db      	lsls	r3, r3, #31
    92ae:	d5ec      	bpl.n	928a <isr_scan_tgta_check+0x26>
    92b0:	4648      	mov	r0, r9
    92b2:	f006 f889 	bl	f3c8 <ctrl_lrpa_get>
    92b6:	2800      	cmp	r0, #0
    92b8:	d0e7      	beq.n	928a <isr_scan_tgta_check+0x26>
}
    92ba:	4620      	mov	r0, r4
    92bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    92c0:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    92c4:	f3c0 1001 	ubfx	r0, r0, #4, #2
    92c8:	f010 0002 	ands.w	r0, r0, #2
    92cc:	d101      	bne.n	92d2 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    92ce:	4604      	mov	r4, r0
    92d0:	e7f3      	b.n	92ba <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    92d2:	f995 3000 	ldrsb.w	r3, [r5]
    92d6:	2b00      	cmp	r3, #0
    92d8:	da09      	bge.n	92ee <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    92da:	7b6b      	ldrb	r3, [r5, #13]
    92dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    92e0:	2b40      	cmp	r3, #64	; 0x40
    92e2:	d104      	bne.n	92ee <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    92e4:	2e00      	cmp	r6, #0
    92e6:	d0dd      	beq.n	92a4 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    92e8:	2001      	movs	r0, #1
    92ea:	7030      	strb	r0, [r6, #0]
    92ec:	e7ef      	b.n	92ce <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    92ee:	2000      	movs	r0, #0
    92f0:	e7ed      	b.n	92ce <isr_scan_tgta_check+0x6a>
    92f2:	bf00      	nop
    92f4:	20000668 	.word	0x20000668
    92f8:	2000074c 	.word	0x2000074c

000092fc <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    92fc:	4a0b      	ldr	r2, [pc, #44]	; (932c <rx_fc_lock+0x30>)
    92fe:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    9302:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    9306:	4299      	cmp	r1, r3
    9308:	d10e      	bne.n	9328 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    930a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    930e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    9312:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    9316:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    931a:	3301      	adds	r3, #1
    931c:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    931e:	2b03      	cmp	r3, #3
    9320:	bf08      	it	eq
    9322:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    9324:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    9328:	4770      	bx	lr
    932a:	bf00      	nop
    932c:	20000668 	.word	0x20000668

00009330 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    9330:	4b04      	ldr	r3, [pc, #16]	; (9344 <ticker_job_disable+0x14>)
    9332:	7d1b      	ldrb	r3, [r3, #20]
    9334:	b123      	cbz	r3, 9340 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    9336:	2101      	movs	r1, #1
    9338:	2200      	movs	r2, #0
    933a:	4608      	mov	r0, r1
    933c:	f7fc be3c 	b.w	5fb8 <mayfly_enable>
    9340:	4770      	bx	lr
    9342:	bf00      	nop
    9344:	20000668 	.word	0x20000668

00009348 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9348:	2806      	cmp	r0, #6
{
    934a:	b510      	push	{r4, lr}
    934c:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    934e:	d90a      	bls.n	9366 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9350:	4b09      	ldr	r3, [pc, #36]	; (9378 <hdr_conn_get+0x30>)
    9352:	1fc2      	subs	r2, r0, #7
    9354:	b292      	uxth	r2, r2
    9356:	f44f 71aa 	mov.w	r1, #340	; 0x154
    935a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    935e:	f7fc fdbd 	bl	5edc <mem_get>
    9362:	6020      	str	r0, [r4, #0]
    9364:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    9366:	2805      	cmp	r0, #5
    9368:	d004      	beq.n	9374 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    936a:	2806      	cmp	r0, #6
	return NULL;
    936c:	4803      	ldr	r0, [pc, #12]	; (937c <hdr_conn_get+0x34>)
    936e:	bf18      	it	ne
    9370:	2000      	movne	r0, #0
    9372:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    9374:	4802      	ldr	r0, [pc, #8]	; (9380 <hdr_conn_get+0x38>)
}
    9376:	bd10      	pop	{r4, pc}
    9378:	20000668 	.word	0x20000668
    937c:	20000738 	.word	0x20000738
    9380:	20000680 	.word	0x20000680

00009384 <mayfly_xtal_retain.part.13>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    9384:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    9386:	4b0a      	ldr	r3, [pc, #40]	; (93b0 <mayfly_xtal_retain.part.13+0x2c>)
    9388:	2200      	movs	r2, #0
    938a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    938c:	b168      	cbz	r0, 93aa <mayfly_xtal_retain.part.13+0x26>
    938e:	2801      	cmp	r0, #1
    9390:	d105      	bne.n	939e <mayfly_xtal_retain.part.13+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    9392:	4b08      	ldr	r3, [pc, #32]	; (93b4 <mayfly_xtal_retain.part.13+0x30>)
			retval = mayfly_enqueue(caller_id,
    9394:	2200      	movs	r2, #0
    9396:	4611      	mov	r1, r2
    9398:	f7fc fe36 	bl	6008 <mayfly_enqueue>
			LL_ASSERT(!retval);
    939c:	b138      	cbz	r0, 93ae <mayfly_xtal_retain.part.13+0x2a>
    939e:	4040      	eors	r0, r0
    93a0:	f380 8811 	msr	BASEPRI, r0
    93a4:	f04f 0004 	mov.w	r0, #4
    93a8:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    93aa:	4b03      	ldr	r3, [pc, #12]	; (93b8 <mayfly_xtal_retain.part.13+0x34>)
    93ac:	e7f2      	b.n	9394 <mayfly_xtal_retain.part.13+0x10>
    93ae:	bd08      	pop	{r3, pc}
    93b0:	20000868 	.word	0x20000868
    93b4:	20003808 	.word	0x20003808
    93b8:	200037f8 	.word	0x200037f8

000093bc <chan_set.part.19>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    93bc:	4040      	eors	r0, r0
    93be:	f380 8811 	msr	BASEPRI, r0
    93c2:	f04f 0004 	mov.w	r0, #4
    93c6:	df02      	svc	2

000093c8 <prepare_normal_set>:
{
    93c8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    93ca:	6804      	ldr	r4, [r0, #0]
    93cc:	2c00      	cmp	r4, #0
{
    93ce:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    93d0:	da19      	bge.n	9406 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    93d2:	6843      	ldr	r3, [r0, #4]
    93d4:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    93d6:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    93d8:	429d      	cmp	r5, r3
    93da:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    93de:	bf34      	ite	cc
    93e0:	1ae4      	subcc	r4, r4, r3
    93e2:	1b64      	subcs	r4, r4, r5
		ticker_status =
    93e4:	4b09      	ldr	r3, [pc, #36]	; (940c <prepare_normal_set+0x44>)
    93e6:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    93e8:	b2a4      	uxth	r4, r4
		ticker_status =
    93ea:	2300      	movs	r3, #0
    93ec:	9304      	str	r3, [sp, #16]
    93ee:	9303      	str	r3, [sp, #12]
    93f0:	9302      	str	r3, [sp, #8]
    93f2:	4618      	mov	r0, r3
    93f4:	9401      	str	r4, [sp, #4]
    93f6:	9400      	str	r4, [sp, #0]
    93f8:	f7fd fc00 	bl	6bfc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    93fc:	f030 0302 	bics.w	r3, r0, #2
    9400:	d001      	beq.n	9406 <prepare_normal_set+0x3e>
    9402:	f7ff ffdb 	bl	93bc <chan_set.part.19>
}
    9406:	b009      	add	sp, #36	; 0x24
    9408:	bd30      	pop	{r4, r5, pc}
    940a:	bf00      	nop
    940c:	0000871d 	.word	0x0000871d

00009410 <terminate_ind_rx_enqueue>:
{
    9410:	b510      	push	{r4, lr}
    9412:	4603      	mov	r3, r0
    9414:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    9416:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    941a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    941e:	b908      	cbnz	r0, 9424 <terminate_ind_rx_enqueue+0x14>
    9420:	f7ff ffcc 	bl	93bc <chan_set.part.19>
	node_rx->hdr.handle = conn->handle;
    9424:	8c1c      	ldrh	r4, [r3, #32]
    9426:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    942a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    942e:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9430:	4a0a      	ldr	r2, [pc, #40]	; (945c <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    9432:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9436:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    943a:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    943e:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    9442:	f7fc fd70 	bl	5f26 <memq_enqueue>
	LL_ASSERT(link);
    9446:	b928      	cbnz	r0, 9454 <terminate_ind_rx_enqueue+0x44>
    9448:	4040      	eors	r0, r0
    944a:	f380 8811 	msr	BASEPRI, r0
    944e:	f04f 0004 	mov.w	r0, #4
    9452:	df02      	svc	2
}
    9454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    9458:	f005 bdde 	b.w	f018 <radio_event_callback>
    945c:	20000668 	.word	0x20000668

00009460 <packet_rx_enqueue>:
{
    9460:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    9462:	4a16      	ldr	r2, [pc, #88]	; (94bc <packet_rx_enqueue+0x5c>)
    9464:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    9468:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    946c:	4299      	cmp	r1, r3
    946e:	d101      	bne.n	9474 <packet_rx_enqueue+0x14>
    9470:	f7ff ffa4 	bl	93bc <chan_set.part.19>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    9474:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    9478:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    947c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9480:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    9484:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9486:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    9488:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    948c:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    9490:	3301      	adds	r3, #1
    9492:	b2db      	uxtb	r3, r3
		last = 0;
    9494:	429c      	cmp	r4, r3
    9496:	bf08      	it	eq
    9498:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    949a:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    949e:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    94a2:	f7fc fd40 	bl	5f26 <memq_enqueue>
	LL_ASSERT(link);
    94a6:	b928      	cbnz	r0, 94b4 <packet_rx_enqueue+0x54>
    94a8:	4040      	eors	r0, r0
    94aa:	f380 8811 	msr	BASEPRI, r0
    94ae:	f04f 0004 	mov.w	r0, #4
    94b2:	df02      	svc	2
}
    94b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    94b8:	f005 bdae 	b.w	f018 <radio_event_callback>
    94bc:	20000668 	.word	0x20000668

000094c0 <isr_rx_scan_report>:
{
    94c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    94c4:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    94c6:	2003      	movs	r0, #3
{
    94c8:	460f      	mov	r7, r1
    94ca:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    94cc:	f7ff f95e 	bl	878c <packet_rx_reserve_get>
	if (node_rx == 0) {
    94d0:	4604      	mov	r4, r0
    94d2:	b3a0      	cbz	r0, 953e <isr_rx_scan_report+0x7e>
	node_rx->hdr.handle = 0xffff;
    94d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    94d8:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    94da:	4b1a      	ldr	r3, [pc, #104]	; (9544 <isr_rx_scan_report+0x84>)
    94dc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    94e0:	075a      	lsls	r2, r3, #29
    94e2:	d028      	beq.n	9536 <isr_rx_scan_report+0x76>
		switch (_radio.scanner.phy) {
    94e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    94e8:	b2da      	uxtb	r2, r3
    94ea:	2a01      	cmp	r2, #1
    94ec:	d007      	beq.n	94fe <isr_rx_scan_report+0x3e>
    94ee:	2a04      	cmp	r2, #4
    94f0:	d006      	beq.n	9500 <isr_rx_scan_report+0x40>
			LL_ASSERT(0);
    94f2:	4040      	eors	r0, r0
    94f4:	f380 8811 	msr	BASEPRI, r0
    94f8:	f04f 0004 	mov.w	r0, #4
    94fc:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    94fe:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    9500:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    9504:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    9506:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    950a:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    950e:	f1b9 0f00 	cmp.w	r9, #0
    9512:	d012      	beq.n	953a <isr_rx_scan_report+0x7a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    9514:	f006 feb8 	bl	10288 <radio_rssi_get>
			     pdu_adv_rx->len] =
    9518:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    951c:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    9520:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    9522:	442b      	add	r3, r5
    9524:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    9526:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    9528:	441d      	add	r5, r3
    952a:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    952c:	f7ff ff98 	bl	9460 <packet_rx_enqueue>
	return 0;
    9530:	2000      	movs	r0, #0
    9532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    9536:	2302      	movs	r3, #2
    9538:	e7e2      	b.n	9500 <isr_rx_scan_report+0x40>
			     pdu_adv_rx->len] =
    953a:	207f      	movs	r0, #127	; 0x7f
    953c:	e7ee      	b.n	951c <isr_rx_scan_report+0x5c>
		return 1;
    953e:	2001      	movs	r0, #1
}
    9540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9544:	20000668 	.word	0x20000668

00009548 <sched_after_mstr_free_offset_get>:
{
    9548:	b573      	push	{r0, r1, r4, r5, r6, lr}
    954a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    954c:	aa02      	add	r2, sp, #8
{
    954e:	461c      	mov	r4, r3
    9550:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    9552:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    9556:	3127      	adds	r1, #39	; 0x27
    9558:	2001      	movs	r0, #1
    955a:	f7ff fdcd 	bl	90f8 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    955e:	6823      	ldr	r3, [r4, #0]
    9560:	b1fb      	cbz	r3, 95a2 <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    9562:	9801      	ldr	r0, [sp, #4]
    9564:	1b83      	subs	r3, r0, r6
    9566:	021b      	lsls	r3, r3, #8
    9568:	d501      	bpl.n	956e <sched_after_mstr_free_offset_get+0x26>
    956a:	f7ff ff27 	bl	93bc <chan_set.part.19>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    956e:	4631      	mov	r1, r6
    9570:	f7fd fc64 	bl	6e3c <ticker_ticks_diff_get>
    9574:	4602      	mov	r2, r0
    9576:	4810      	ldr	r0, [pc, #64]	; (95b8 <sched_after_mstr_free_offset_get+0x70>)
    9578:	2307      	movs	r3, #7
    957a:	fba2 0100 	umull	r0, r1, r2, r0
    957e:	fb03 1102 	mla	r1, r3, r2, r1
    9582:	a30b      	add	r3, pc, #44	; (adr r3, 95b0 <sched_after_mstr_free_offset_get+0x68>)
    9584:	e9d3 2300 	ldrd	r2, r3, [r3]
    9588:	f7f6 fe44 	bl	214 <__aeabi_uldivmod>
    958c:	6823      	ldr	r3, [r4, #0]
    958e:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    9590:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    9592:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    9594:	db05      	blt.n	95a2 <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    9596:	f240 40e2 	movw	r0, #1250	; 0x4e2
    959a:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    959c:	6823      	ldr	r3, [r4, #0]
    959e:	4298      	cmp	r0, r3
    95a0:	d301      	bcc.n	95a6 <sched_after_mstr_free_offset_get+0x5e>
}
    95a2:	b002      	add	sp, #8
    95a4:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    95a6:	1a1b      	subs	r3, r3, r0
    95a8:	6023      	str	r3, [r4, #0]
    95aa:	e7f7      	b.n	959c <sched_after_mstr_free_offset_get+0x54>
    95ac:	f3af 8000 	nop.w
    95b0:	3b9aca00 	.word	0x3b9aca00
    95b4:	00000000 	.word	0x00000000
    95b8:	1afd498d 	.word	0x1afd498d

000095bc <mayfly_sched_win_offset_use>:
{
    95bc:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    95be:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    95c2:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    95c4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    95c8:	68c1      	ldr	r1, [r0, #12]
    95ca:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    95cc:	f7ff ffbc 	bl	9548 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    95d0:	a902      	add	r1, sp, #8
    95d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    95d6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    95da:	f240 42e2 	movw	r2, #1250	; 0x4e2
    95de:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    95e2:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    95e4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    95e8:	f7f8 fb08 	bl	1bfc <memcpy>
}
    95ec:	b002      	add	sp, #8
    95ee:	bd10      	pop	{r4, pc}

000095f0 <mayfly_sched_after_mstr_free_offset_get>:
{
    95f0:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    95f2:	4c05      	ldr	r4, [pc, #20]	; (9608 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    95f4:	4602      	mov	r2, r0
    95f6:	f504 7382 	add.w	r3, r4, #260	; 0x104
    95fa:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    95fe:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    9602:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    9604:	f7ff bfa0 	b.w	9548 <sched_after_mstr_free_offset_get>
    9608:	20000668 	.word	0x20000668

0000960c <chan_set>:
	switch (chan) {
    960c:	2826      	cmp	r0, #38	; 0x26
{
    960e:	b510      	push	{r4, lr}
    9610:	4604      	mov	r4, r0
	switch (chan) {
    9612:	d00b      	beq.n	962c <chan_set+0x20>
    9614:	2827      	cmp	r0, #39	; 0x27
    9616:	d00b      	beq.n	9630 <chan_set+0x24>
    9618:	2825      	cmp	r0, #37	; 0x25
    961a:	d10b      	bne.n	9634 <chan_set+0x28>
		radio_freq_chan_set(2);
    961c:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    961e:	f006 fd27 	bl	10070 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    9622:	4620      	mov	r0, r4
}
    9624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    9628:	f006 bd28 	b.w	1007c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    962c:	201a      	movs	r0, #26
    962e:	e7f6      	b.n	961e <chan_set+0x12>
		radio_freq_chan_set(80);
    9630:	2050      	movs	r0, #80	; 0x50
    9632:	e7f4      	b.n	961e <chan_set+0x12>
		if (chan < 11) {
    9634:	280a      	cmp	r0, #10
    9636:	d802      	bhi.n	963e <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
    9638:	3002      	adds	r0, #2
    963a:	0040      	lsls	r0, r0, #1
    963c:	e7ef      	b.n	961e <chan_set+0x12>
		} else if (chan < 40) {
    963e:	2827      	cmp	r0, #39	; 0x27
    9640:	d801      	bhi.n	9646 <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    9642:	3003      	adds	r0, #3
    9644:	e7f9      	b.n	963a <chan_set+0x2e>
    9646:	f7ff feb9 	bl	93bc <chan_set.part.19>
	...

0000964c <adv_setup>:
{
    964c:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    964e:	4c31      	ldr	r4, [pc, #196]	; (9714 <adv_setup+0xc8>)
    9650:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    9654:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    9658:	429a      	cmp	r2, r3
    965a:	d051      	beq.n	9700 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    965c:	3301      	adds	r3, #1
    965e:	b2db      	uxtb	r3, r3
			first = 0;
    9660:	2b02      	cmp	r3, #2
    9662:	bf08      	it	eq
    9664:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    9666:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    966a:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    966c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    9670:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    9674:	4299      	cmp	r1, r3
    9676:	d007      	beq.n	9688 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    9678:	3301      	adds	r3, #1
    967a:	b2db      	uxtb	r3, r3
			first = 0;
    967c:	2b02      	cmp	r3, #2
    967e:	bf08      	it	eq
    9680:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    9682:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    9686:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    9688:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    968c:	2327      	movs	r3, #39	; 0x27
    968e:	212b      	movs	r1, #43	; 0x2b
    9690:	fb13 1505 	smlabb	r5, r3, r5, r1
    9694:	1966      	adds	r6, r4, r5
	if (upd) {
    9696:	b142      	cbz	r2, 96aa <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    9698:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    969c:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    96a0:	2206      	movs	r2, #6
    96a2:	1cb1      	adds	r1, r6, #2
    96a4:	307d      	adds	r0, #125	; 0x7d
    96a6:	f7f8 faa9 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    96aa:	4630      	mov	r0, r6
    96ac:	f006 fd44 	bl	10138 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    96b0:	5d63      	ldrb	r3, [r4, r5]
    96b2:	f003 030f 	and.w	r3, r3, #15
    96b6:	2b02      	cmp	r3, #2
    96b8:	d024      	beq.n	9704 <adv_setup+0xb8>
    96ba:	2b07      	cmp	r3, #7
    96bc:	d022      	beq.n	9704 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    96be:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    96c0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    96c2:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    96c4:	f006 fe4e 	bl	10364 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    96c8:	2000      	movs	r0, #0
    96ca:	f006 fdaf 	bl	1022c <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    96ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    96d2:	f3c3 0202 	ubfx	r2, r3, #0, #3
    96d6:	b2d3      	uxtb	r3, r2
    96d8:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    96da:	2000      	movs	r0, #0
    96dc:	07ce      	lsls	r6, r1, #31
    96de:	f100 0501 	add.w	r5, r0, #1
    96e2:	d514      	bpl.n	970e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    96e4:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    96e6:	4013      	ands	r3, r2
    96e8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    96ec:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    96ee:	f363 0202 	bfi	r2, r3, #0, #3
    96f2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    96f6:	3025      	adds	r0, #37	; 0x25
}
    96f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    96fc:	f7ff bf86 	b.w	960c <chan_set>
	u8_t upd = 0;
    9700:	2200      	movs	r2, #0
    9702:	e7b3      	b.n	966c <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    9704:	2303      	movs	r3, #3
    9706:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    9708:	f006 fda6 	bl	10258 <radio_switch_complete_and_disable>
    970c:	e7df      	b.n	96ce <adv_setup+0x82>
		bitmap >>= 1;
    970e:	0849      	lsrs	r1, r1, #1
    9710:	4628      	mov	r0, r5
    9712:	e7e3      	b.n	96dc <adv_setup+0x90>
    9714:	20000668 	.word	0x20000668

00009718 <pdu_node_tx_release>:
{
    9718:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    971a:	4a10      	ldr	r2, [pc, #64]	; (975c <pdu_node_tx_release+0x44>)
    971c:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    9720:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    9724:	3301      	adds	r3, #1
    9726:	b2db      	uxtb	r3, r3
		last = 0;
    9728:	429c      	cmp	r4, r3
    972a:	bf08      	it	eq
    972c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    972e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    9732:	429c      	cmp	r4, r3
    9734:	d101      	bne.n	973a <pdu_node_tx_release+0x22>
    9736:	f7ff fe41 	bl	93bc <chan_set.part.19>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    973a:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    973e:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    9742:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    9746:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    974a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    974e:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    9750:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    9754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    9758:	f005 bc5e 	b.w	f018 <radio_event_callback>
    975c:	20000668 	.word	0x20000668

00009760 <packet_tx_enqueue>:
{
    9760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    9764:	4c24      	ldr	r4, [pc, #144]	; (97f8 <packet_tx_enqueue+0x98>)
{
    9766:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    9768:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    976a:	b12e      	cbz	r6, 9778 <packet_tx_enqueue+0x18>
    976c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    9770:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    9774:	429a      	cmp	r2, r3
    9776:	d101      	bne.n	977c <packet_tx_enqueue+0x1c>
    9778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    977c:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    9780:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9784:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9788:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    978c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9790:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    9794:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    9796:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9798:	f7fc fba0 	bl	5edc <mem_get>
    979c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    979e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    97a2:	8c1a      	ldrh	r2, [r3, #32]
    97a4:	4282      	cmp	r2, r0
    97a6:	d11f      	bne.n	97e8 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    97a8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    97ac:	b942      	cbnz	r2, 97c0 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    97ae:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    97b2:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    97b6:	b91a      	cbnz	r2, 97c0 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    97b8:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    97bc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    97c0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    97c4:	b102      	cbz	r2, 97c8 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    97c6:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    97c8:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    97cc:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    97d0:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    97d4:	3301      	adds	r3, #1
    97d6:	b2db      	uxtb	r3, r3
			first = 0;
    97d8:	429a      	cmp	r2, r3
    97da:	bf08      	it	eq
    97dc:	2300      	moveq	r3, #0
    97de:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    97e0:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    97e4:	b2f6      	uxtb	r6, r6
    97e6:	e7c0      	b.n	976a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    97e8:	792b      	ldrb	r3, [r5, #4]
    97ea:	f367 0301 	bfi	r3, r7, #0, #2
    97ee:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    97f0:	4629      	mov	r1, r5
    97f2:	f7ff ff91 	bl	9718 <pdu_node_tx_release>
    97f6:	e7e9      	b.n	97cc <packet_tx_enqueue+0x6c>
    97f8:	20000668 	.word	0x20000668

000097fc <connection_release>:
{
    97fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    97fe:	2201      	movs	r2, #1
{
    9800:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    9802:	4611      	mov	r1, r2
    9804:	2000      	movs	r0, #0
    9806:	f7fc fbd7 	bl	5fb8 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    980a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    980e:	2100      	movs	r1, #0
    9810:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9814:	3207      	adds	r2, #7
	ticker_status =
    9816:	9300      	str	r3, [sp, #0]
    9818:	4608      	mov	r0, r1
    981a:	4b3a      	ldr	r3, [pc, #232]	; (9904 <connection_release+0x108>)
    981c:	b2d2      	uxtb	r2, r2
    981e:	f7fd fa3b 	bl	6c98 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9822:	f030 0102 	bics.w	r1, r0, #2
    9826:	d005      	beq.n	9834 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9828:	4040      	eors	r0, r0
    982a:	f380 8811 	msr	BASEPRI, r0
    982e:	f04f 0004 	mov.w	r0, #4
    9832:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    9834:	4b34      	ldr	r3, [pc, #208]	; (9908 <connection_release+0x10c>)
    9836:	7d1a      	ldrb	r2, [r3, #20]
    9838:	2a05      	cmp	r2, #5
    983a:	461d      	mov	r5, r3
    983c:	d11b      	bne.n	9876 <connection_release+0x7a>
					  conn->handle))) {
    983e:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    9840:	7c18      	ldrb	r0, [r3, #16]
    9842:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    9844:	4290      	cmp	r0, r2
    9846:	d116      	bne.n	9876 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    9848:	7419      	strb	r1, [r3, #16]
		ticker_status =
    984a:	f242 23fb 	movw	r3, #8955	; 0x22fb
    984e:	9300      	str	r3, [sp, #0]
    9850:	2201      	movs	r2, #1
    9852:	4b2c      	ldr	r3, [pc, #176]	; (9904 <connection_release+0x108>)
    9854:	4608      	mov	r0, r1
    9856:	f7fd fa1f 	bl	6c98 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    985a:	f030 0202 	bics.w	r2, r0, #2
    985e:	d1e3      	bne.n	9828 <connection_release+0x2c>
		ticker_status =
    9860:	f242 3302 	movw	r3, #8962	; 0x2302
    9864:	9300      	str	r3, [sp, #0]
    9866:	4611      	mov	r1, r2
    9868:	4b26      	ldr	r3, [pc, #152]	; (9904 <connection_release+0x108>)
    986a:	4610      	mov	r0, r2
    986c:	f7fd fa14 	bl	6c98 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9870:	f030 0302 	bics.w	r3, r0, #2
    9874:	d1d8      	bne.n	9828 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    9876:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    987a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    987e:	4299      	cmp	r1, r3
    9880:	d003      	beq.n	988a <connection_release+0x8e>
    9882:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    9886:	4299      	cmp	r1, r3
    9888:	d101      	bne.n	988e <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    988a:	4e20      	ldr	r6, [pc, #128]	; (990c <connection_release+0x110>)
    988c:	e012      	b.n	98b4 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    988e:	790b      	ldrb	r3, [r1, #4]
    9890:	f36f 0301 	bfc	r3, #0, #2
    9894:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    9896:	680b      	ldr	r3, [r1, #0]
    9898:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    989c:	8c20      	ldrh	r0, [r4, #32]
    989e:	f7ff ff3b 	bl	9718 <pdu_node_tx_release>
    98a2:	e7e8      	b.n	9876 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    98a4:	6803      	ldr	r3, [r0, #0]
    98a6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    98aa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    98ae:	4631      	mov	r1, r6
    98b0:	f7fc faf9 	bl	5ea6 <mem_release>
	while ((conn->pkt_tx_head) &&
    98b4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    98b8:	b118      	cbz	r0, 98c2 <connection_release+0xc6>
    98ba:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    98be:	4298      	cmp	r0, r3
    98c0:	d1f0      	bne.n	98a4 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    98c2:	2300      	movs	r3, #0
    98c4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    98c8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    98cc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    98d0:	b951      	cbnz	r1, 98e8 <connection_release+0xec>
	conn->handle = 0xffff;
    98d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    98d6:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    98d8:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    98dc:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    98de:	bf08      	it	eq
    98e0:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    98e4:	b002      	add	sp, #8
    98e6:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    98e8:	790b      	ldrb	r3, [r1, #4]
    98ea:	f36f 0301 	bfc	r3, #0, #2
    98ee:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    98f0:	680b      	ldr	r3, [r1, #0]
    98f2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    98f6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    98fa:	8c20      	ldrh	r0, [r4, #32]
    98fc:	f7ff ff0c 	bl	9718 <pdu_node_tx_release>
    9900:	e7e4      	b.n	98cc <connection_release+0xd0>
    9902:	bf00      	nop
    9904:	00009a7d 	.word	0x00009a7d
    9908:	20000668 	.word	0x20000668
    990c:	200007c4 	.word	0x200007c4

00009910 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    9910:	b2c0      	uxtb	r0, r0
{
    9912:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    9914:	1f03      	subs	r3, r0, #4
    9916:	2b01      	cmp	r3, #1
    9918:	d901      	bls.n	991e <mayfly_radio_stop+0xe>
    991a:	f7ff fd4f 	bl	93bc <chan_set.part.19>
	radio_used = ((_radio.state != STATE_NONE) &&
    991e:	4a08      	ldr	r2, [pc, #32]	; (9940 <mayfly_radio_stop+0x30>)
    9920:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    9922:	b13b      	cbz	r3, 9934 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    9924:	3b04      	subs	r3, #4
    9926:	2b01      	cmp	r3, #1
    9928:	d904      	bls.n	9934 <mayfly_radio_stop+0x24>
			_radio.state = state;
    992a:	7510      	strb	r0, [r2, #20]
}
    992c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    9930:	f006 bc22 	b.w	10178 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    9934:	f006 fc52 	bl	101dc <radio_is_idle>
    9938:	2800      	cmp	r0, #0
    993a:	d0f7      	beq.n	992c <mayfly_radio_stop+0x1c>
}
    993c:	bd08      	pop	{r3, pc}
    993e:	bf00      	nop
    9940:	20000668 	.word	0x20000668

00009944 <mayfly_radio_active>:
{
    9944:	b508      	push	{r3, lr}
    9946:	4a0a      	ldr	r2, [pc, #40]	; (9970 <mayfly_radio_active+0x2c>)
		if (s_active++) {
    9948:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    994a:	b138      	cbz	r0, 995c <mayfly_radio_active+0x18>
		if (s_active++) {
    994c:	1c59      	adds	r1, r3, #1
    994e:	7011      	strb	r1, [r2, #0]
    9950:	b963      	cbnz	r3, 996c <mayfly_radio_active+0x28>
		radio_active_callback(1);
    9952:	2001      	movs	r0, #1
}
    9954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    9958:	f005 bb5c 	b.w	f014 <radio_active_callback>
		LL_ASSERT(s_active);
    995c:	b90b      	cbnz	r3, 9962 <mayfly_radio_active+0x1e>
    995e:	f7ff fd2d 	bl	93bc <chan_set.part.19>
		if (--s_active) {
    9962:	3b01      	subs	r3, #1
    9964:	b2db      	uxtb	r3, r3
    9966:	7013      	strb	r3, [r2, #0]
    9968:	2b00      	cmp	r3, #0
    996a:	d0f3      	beq.n	9954 <mayfly_radio_active+0x10>
    996c:	bd08      	pop	{r3, pc}
    996e:	bf00      	nop
    9970:	2000080c 	.word	0x2000080c

00009974 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    9974:	2000      	movs	r0, #0
    9976:	f7ff bfe5 	b.w	9944 <mayfly_radio_active>
	...

0000997c <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    997c:	2200      	movs	r2, #0
{
    997e:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9980:	4611      	mov	r1, r2
    9982:	4b04      	ldr	r3, [pc, #16]	; (9994 <event_xtal+0x18>)
    9984:	4610      	mov	r0, r2
    9986:	f7fc fb3f 	bl	6008 <mayfly_enqueue>
	LL_ASSERT(!retval);
    998a:	b108      	cbz	r0, 9990 <event_xtal+0x14>
    998c:	f7ff fd16 	bl	93bc <chan_set.part.19>
    9990:	bd08      	pop	{r3, pc}
    9992:	bf00      	nop
    9994:	200037d8 	.word	0x200037d8

00009998 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9998:	2200      	movs	r2, #0
{
    999a:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    999c:	4611      	mov	r1, r2
    999e:	4b04      	ldr	r3, [pc, #16]	; (99b0 <event_active+0x18>)
    99a0:	4610      	mov	r0, r2
    99a2:	f7fc fb31 	bl	6008 <mayfly_enqueue>
	LL_ASSERT(!retval);
    99a6:	b108      	cbz	r0, 99ac <event_active+0x14>
    99a8:	f7ff fd08 	bl	93bc <chan_set.part.19>
    99ac:	bd08      	pop	{r3, pc}
    99ae:	bf00      	nop
    99b0:	20003758 	.word	0x20003758

000099b4 <event_stop>:
	s_mfy_radio_stop.param = context;
    99b4:	4a06      	ldr	r2, [pc, #24]	; (99d0 <event_stop+0x1c>)
{
    99b6:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    99b8:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    99ba:	4613      	mov	r3, r2
    99bc:	2200      	movs	r2, #0
    99be:	4611      	mov	r1, r2
    99c0:	4610      	mov	r0, r2
    99c2:	f7fc fb21 	bl	6008 <mayfly_enqueue>
	LL_ASSERT(!retval);
    99c6:	b108      	cbz	r0, 99cc <event_stop+0x18>
    99c8:	f7ff fcf8 	bl	93bc <chan_set.part.19>
    99cc:	bd08      	pop	{r3, pc}
    99ce:	bf00      	nop
    99d0:	20003788 	.word	0x20003788

000099d4 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    99d4:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    99d6:	b108      	cbz	r0, 99dc <ticker_op_latency_cancelled+0x8>
    99d8:	f7ff fcf0 	bl	93bc <chan_set.part.19>

	conn->slave.latency_cancel = 0;
    99dc:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    99e0:	f360 0341 	bfi	r3, r0, #1, #1
    99e4:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    99e8:	bd08      	pop	{r3, pc}
	...

000099ec <ticker_update_slave_assert>:
{
    99ec:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    99ee:	b130      	cbz	r0, 99fe <ticker_update_slave_assert+0x12>
    99f0:	4b03      	ldr	r3, [pc, #12]	; (9a00 <ticker_update_slave_assert+0x14>)
    99f2:	7c9b      	ldrb	r3, [r3, #18]
    99f4:	b2c9      	uxtb	r1, r1
    99f6:	4299      	cmp	r1, r3
    99f8:	d001      	beq.n	99fe <ticker_update_slave_assert+0x12>
    99fa:	f7ff fcdf 	bl	93bc <chan_set.part.19>
    99fe:	bd08      	pop	{r3, pc}
    9a00:	20000668 	.word	0x20000668

00009a04 <ticker_update_adv_assert>:
{
    9a04:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    9a06:	b128      	cbz	r0, 9a14 <ticker_update_adv_assert+0x10>
    9a08:	4b03      	ldr	r3, [pc, #12]	; (9a18 <ticker_update_adv_assert+0x14>)
    9a0a:	7c9b      	ldrb	r3, [r3, #18]
    9a0c:	2b05      	cmp	r3, #5
    9a0e:	d001      	beq.n	9a14 <ticker_update_adv_assert+0x10>
    9a10:	f7ff fcd4 	bl	93bc <chan_set.part.19>
    9a14:	bd08      	pop	{r3, pc}
    9a16:	bf00      	nop
    9a18:	20000668 	.word	0x20000668

00009a1c <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    9a1c:	2801      	cmp	r0, #1
{
    9a1e:	b508      	push	{r3, lr}
    9a20:	4b09      	ldr	r3, [pc, #36]	; (9a48 <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    9a22:	d107      	bne.n	9a34 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    9a24:	7c9a      	ldrb	r2, [r3, #18]
    9a26:	2a06      	cmp	r2, #6
    9a28:	d102      	bne.n	9a30 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    9a2a:	2200      	movs	r2, #0
    9a2c:	749a      	strb	r2, [r3, #18]
    9a2e:	bd08      	pop	{r3, pc}
    9a30:	f7ff fcc4 	bl	93bc <chan_set.part.19>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    9a34:	7c1b      	ldrb	r3, [r3, #16]
    9a36:	2b06      	cmp	r3, #6
    9a38:	d105      	bne.n	9a46 <ticker_stop_scan_assert+0x2a>
    9a3a:	4040      	eors	r0, r0
    9a3c:	f380 8811 	msr	BASEPRI, r0
    9a40:	f04f 0004 	mov.w	r0, #4
    9a44:	df02      	svc	2
    9a46:	bd08      	pop	{r3, pc}
    9a48:	20000668 	.word	0x20000668

00009a4c <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    9a4c:	2801      	cmp	r0, #1
{
    9a4e:	b508      	push	{r3, lr}
    9a50:	4b09      	ldr	r3, [pc, #36]	; (9a78 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    9a52:	d107      	bne.n	9a64 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    9a54:	7c9a      	ldrb	r2, [r3, #18]
    9a56:	2a05      	cmp	r2, #5
    9a58:	d102      	bne.n	9a60 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    9a5a:	2200      	movs	r2, #0
    9a5c:	749a      	strb	r2, [r3, #18]
    9a5e:	bd08      	pop	{r3, pc}
    9a60:	f7ff fcac 	bl	93bc <chan_set.part.19>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    9a64:	7c1b      	ldrb	r3, [r3, #16]
    9a66:	2b05      	cmp	r3, #5
    9a68:	d105      	bne.n	9a76 <ticker_stop_adv_assert+0x2a>
    9a6a:	4040      	eors	r0, r0
    9a6c:	f380 8811 	msr	BASEPRI, r0
    9a70:	f04f 0004 	mov.w	r0, #4
    9a74:	df02      	svc	2
    9a76:	bd08      	pop	{r3, pc}
    9a78:	20000668 	.word	0x20000668

00009a7c <ticker_success_assert>:
{
    9a7c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    9a7e:	b108      	cbz	r0, 9a84 <ticker_success_assert+0x8>
    9a80:	f7ff fc9c 	bl	93bc <chan_set.part.19>
    9a84:	bd08      	pop	{r3, pc}
	...

00009a88 <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    9a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    9a8a:	ad02      	add	r5, sp, #8
    9a8c:	4b10      	ldr	r3, [pc, #64]	; (9ad0 <adv_scan_configure.constprop.32+0x48>)
    9a8e:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    9a92:	4604      	mov	r4, r0
	radio_reset();
    9a94:	f006 fabc 	bl	10010 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    9a98:	2000      	movs	r0, #0
    9a9a:	f006 fae3 	bl	10064 <radio_tx_power_set>
	radio_isr_set(isr);
    9a9e:	480d      	ldr	r0, [pc, #52]	; (9ad4 <adv_scan_configure.constprop.32+0x4c>)
    9aa0:	f006 fa80 	bl	ffa4 <radio_isr_set>
	radio_phy_set(phy, flags);
    9aa4:	2101      	movs	r1, #1
    9aa6:	4620      	mov	r0, r4
    9aa8:	f006 facc 	bl	10044 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    9aac:	4628      	mov	r0, r5
    9aae:	f006 faf7 	bl	100a0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    9ab2:	0062      	lsls	r2, r4, #1
    9ab4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    9ab8:	2125      	movs	r1, #37	; 0x25
    9aba:	2008      	movs	r0, #8
    9abc:	f006 fb08 	bl	100d0 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    9ac0:	4905      	ldr	r1, [pc, #20]	; (9ad8 <adv_scan_configure.constprop.32+0x50>)
    9ac2:	f240 605b 	movw	r0, #1627	; 0x65b
    9ac6:	f006 fb93 	bl	101f0 <radio_crc_configure>
}
    9aca:	b003      	add	sp, #12
    9acc:	bd30      	pop	{r4, r5, pc}
    9ace:	bf00      	nop
    9ad0:	8e89bed6 	.word	0x8e89bed6
    9ad4:	0000c8f1 	.word	0x0000c8f1
    9ad8:	00555555 	.word	0x00555555

00009adc <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    9adc:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    9ade:	4b05      	ldr	r3, [pc, #20]	; (9af4 <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9ae0:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    9ae2:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9ae4:	4611      	mov	r1, r2
    9ae6:	4610      	mov	r0, r2
    9ae8:	f7fc fa8e 	bl	6008 <mayfly_enqueue>
	LL_ASSERT(!retval);
    9aec:	b108      	cbz	r0, 9af2 <event_stop.constprop.33+0x16>
    9aee:	f7ff fc65 	bl	93bc <chan_set.part.19>
    9af2:	bd08      	pop	{r3, pc}
    9af4:	20003788 	.word	0x20003788

00009af8 <event_common_prepare>:
{
    9af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    9afc:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    9afe:	681d      	ldr	r5, [r3, #0]
{
    9b00:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    9b02:	2c00      	cmp	r4, #0
{
    9b04:	4681      	mov	r9, r0
    9b06:	910b      	str	r1, [sp, #44]	; 0x2c
    9b08:	4690      	mov	r8, r2
    9b0a:	469b      	mov	fp, r3
    9b0c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    9b10:	da03      	bge.n	9b1a <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    9b12:	9c16      	ldr	r4, [sp, #88]	; 0x58
    9b14:	42ac      	cmp	r4, r5
    9b16:	bf38      	it	cc
    9b18:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    9b1a:	42ac      	cmp	r4, r5
    9b1c:	4f4e      	ldr	r7, [pc, #312]	; (9c58 <event_common_prepare+0x160>)
    9b1e:	d91b      	bls.n	9b58 <event_common_prepare+0x60>
		ticker_status =
    9b20:	f241 5374 	movw	r3, #5492	; 0x1574
    9b24:	9308      	str	r3, [sp, #32]
    9b26:	4b4d      	ldr	r3, [pc, #308]	; (9c5c <event_common_prepare+0x164>)
    9b28:	9305      	str	r3, [sp, #20]
    9b2a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    9b2c:	1b63      	subs	r3, r4, r5
		ticker_status =
    9b2e:	9300      	str	r3, [sp, #0]
    9b30:	9707      	str	r7, [sp, #28]
    9b32:	464b      	mov	r3, r9
    9b34:	9106      	str	r1, [sp, #24]
    9b36:	9104      	str	r1, [sp, #16]
    9b38:	9103      	str	r1, [sp, #12]
    9b3a:	9102      	str	r1, [sp, #8]
    9b3c:	9101      	str	r1, [sp, #4]
    9b3e:	2201      	movs	r2, #1
    9b40:	4608      	mov	r0, r1
    9b42:	f7fd f80b 	bl	6b5c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9b46:	f030 0302 	bics.w	r3, r0, #2
    9b4a:	d02b      	beq.n	9ba4 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    9b4c:	4040      	eors	r0, r0
    9b4e:	f380 8811 	msr	BASEPRI, r0
    9b52:	f04f 0004 	mov.w	r0, #4
    9b56:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    9b58:	d21d      	bcs.n	9b96 <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    9b5a:	2300      	movs	r3, #0
    9b5c:	461a      	mov	r2, r3
    9b5e:	4619      	mov	r1, r3
    9b60:	4618      	mov	r0, r3
    9b62:	f7ff ff19 	bl	9998 <event_active>
		ticker_status =
    9b66:	f241 5389 	movw	r3, #5513	; 0x1589
    9b6a:	2100      	movs	r1, #0
    9b6c:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    9b6e:	1b2c      	subs	r4, r5, r4
		ticker_status =
    9b70:	4b3b      	ldr	r3, [pc, #236]	; (9c60 <event_common_prepare+0x168>)
    9b72:	9305      	str	r3, [sp, #20]
    9b74:	9707      	str	r7, [sp, #28]
    9b76:	464b      	mov	r3, r9
    9b78:	9106      	str	r1, [sp, #24]
    9b7a:	9104      	str	r1, [sp, #16]
    9b7c:	9103      	str	r1, [sp, #12]
    9b7e:	9102      	str	r1, [sp, #8]
    9b80:	9101      	str	r1, [sp, #4]
    9b82:	9400      	str	r4, [sp, #0]
    9b84:	2201      	movs	r2, #1
    9b86:	4608      	mov	r0, r1
    9b88:	f7fc ffe8 	bl	6b5c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9b8c:	f030 0302 	bics.w	r3, r0, #2
    9b90:	d1dc      	bne.n	9b4c <event_common_prepare+0x54>
    9b92:	462c      	mov	r4, r5
    9b94:	e00b      	b.n	9bae <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    9b96:	2300      	movs	r3, #0
    9b98:	461a      	mov	r2, r3
    9b9a:	4619      	mov	r1, r3
    9b9c:	4618      	mov	r0, r3
    9b9e:	f7ff fefb 	bl	9998 <event_active>
		event_xtal(0, 0, 0, NULL);
    9ba2:	2300      	movs	r3, #0
    9ba4:	461a      	mov	r2, r3
    9ba6:	4619      	mov	r1, r3
    9ba8:	4618      	mov	r0, r3
    9baa:	f7ff fee7 	bl	997c <event_xtal>
	_radio.remainder_anchor = remainder;
    9bae:	4e2d      	ldr	r6, [pc, #180]	; (9c64 <event_common_prepare+0x16c>)
    9bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9bb2:	60f3      	str	r3, [r6, #12]
	ticker_status =
    9bb4:	f241 53a1 	movw	r3, #5537	; 0x15a1
    9bb8:	9308      	str	r3, [sp, #32]
    9bba:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9bbc:	9306      	str	r3, [sp, #24]
    9bbe:	2200      	movs	r2, #0
    9bc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9bc2:	9305      	str	r3, [sp, #20]
    9bc4:	9707      	str	r7, [sp, #28]
    9bc6:	464b      	mov	r3, r9
    9bc8:	9204      	str	r2, [sp, #16]
    9bca:	9203      	str	r2, [sp, #12]
    9bcc:	9202      	str	r2, [sp, #8]
    9bce:	9201      	str	r2, [sp, #4]
    9bd0:	9400      	str	r4, [sp, #0]
    9bd2:	4611      	mov	r1, r2
    9bd4:	4610      	mov	r0, r2
    9bd6:	f7fc ffc1 	bl	6b5c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9bda:	f030 0302 	bics.w	r3, r0, #2
    9bde:	d1b5      	bne.n	9b4c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    9be0:	2005      	movs	r0, #5
    9be2:	f7ff ff7b 	bl	9adc <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    9be6:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    9bea:	429d      	cmp	r5, r3
    9bec:	d023      	beq.n	9c36 <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    9bee:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    9bf2:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    9bf6:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    9bf8:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    9bfa:	bfbc      	itt	lt
    9bfc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9c00:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    9c04:	f8d8 2000 	ldr.w	r2, [r8]
    9c08:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    9c0c:	428a      	cmp	r2, r1
    9c0e:	bf38      	it	cc
    9c10:	460a      	movcc	r2, r1
		ticker_status =
    9c12:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    9c16:	b2a3      	uxth	r3, r4
    9c18:	b292      	uxth	r2, r2
		ticker_status =
    9c1a:	9106      	str	r1, [sp, #24]
    9c1c:	2100      	movs	r1, #0
    9c1e:	9302      	str	r3, [sp, #8]
    9c20:	9201      	str	r2, [sp, #4]
    9c22:	9200      	str	r2, [sp, #0]
    9c24:	9104      	str	r1, [sp, #16]
    9c26:	9103      	str	r1, [sp, #12]
    9c28:	4652      	mov	r2, sl
    9c2a:	4608      	mov	r0, r1
    9c2c:	f7fc ffe6 	bl	6bfc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9c30:	f030 0302 	bics.w	r3, r0, #2
    9c34:	d18a      	bne.n	9b4c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    9c36:	20ff      	movs	r0, #255	; 0xff
    9c38:	f7ff fd92 	bl	9760 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    9c3c:	4b0a      	ldr	r3, [pc, #40]	; (9c68 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9c3e:	2201      	movs	r2, #1
    9c40:	4611      	mov	r1, r2
    9c42:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    9c44:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9c48:	f7fc f9de 	bl	6008 <mayfly_enqueue>
		LL_ASSERT(!retval);
    9c4c:	2800      	cmp	r0, #0
    9c4e:	f47f af7d 	bne.w	9b4c <event_common_prepare+0x54>
}
    9c52:	b00d      	add	sp, #52	; 0x34
    9c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c58:	00009a7d 	.word	0x00009a7d
    9c5c:	00009999 	.word	0x00009999
    9c60:	0000997d 	.word	0x0000997d
    9c64:	20000668 	.word	0x20000668
    9c68:	20003828 	.word	0x20003828

00009c6c <event_scan_prepare>:
{
    9c6c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    9c6e:	4c1d      	ldr	r4, [pc, #116]	; (9ce4 <event_scan_prepare+0x78>)
    9c70:	7c23      	ldrb	r3, [r4, #16]
{
    9c72:	b085      	sub	sp, #20
    9c74:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    9c76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    9c7a:	b12b      	cbz	r3, 9c88 <event_scan_prepare+0x1c>
		LL_ASSERT(!retval);
    9c7c:	4040      	eors	r0, r0
    9c7e:	f380 8811 	msr	BASEPRI, r0
    9c82:	f04f 0004 	mov.w	r0, #4
    9c86:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    9c88:	2306      	movs	r3, #6
    9c8a:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    9c8c:	9203      	str	r2, [sp, #12]
    9c8e:	9301      	str	r3, [sp, #4]
    9c90:	4a15      	ldr	r2, [pc, #84]	; (9ce8 <event_scan_prepare+0x7c>)
    9c92:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    9c96:	9202      	str	r2, [sp, #8]
    9c98:	9300      	str	r3, [sp, #0]
    9c9a:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    9c9e:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    9ca2:	f7ff ff29 	bl	9af8 <event_common_prepare>
	if (_radio.scanner.conn) {
    9ca6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9caa:	b1cb      	cbz	r3, 9ce0 <event_scan_prepare+0x74>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    9cac:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    9cb0:	2b00      	cmp	r3, #0
    9cb2:	da0c      	bge.n	9cce <event_scan_prepare+0x62>
			u32_t ticks_prepare_to_start =
    9cb4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    9cb8:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    9cbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    9cc0:	4291      	cmp	r1, r2
    9cc2:	bf2c      	ite	cs
    9cc4:	ebc3 0301 	rsbcs	r3, r3, r1
    9cc8:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    9ccc:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    9cce:	4b07      	ldr	r3, [pc, #28]	; (9cec <event_scan_prepare+0x80>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9cd0:	2201      	movs	r2, #1
    9cd2:	4611      	mov	r1, r2
    9cd4:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    9cd6:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9cd8:	f7fc f996 	bl	6008 <mayfly_enqueue>
		LL_ASSERT(!retval);
    9cdc:	2800      	cmp	r0, #0
    9cde:	d1cd      	bne.n	9c7c <event_scan_prepare+0x10>
}
    9ce0:	b005      	add	sp, #20
    9ce2:	bd30      	pop	{r4, r5, pc}
    9ce4:	20000668 	.word	0x20000668
    9ce8:	00009ddd 	.word	0x00009ddd
    9cec:	200037a8 	.word	0x200037a8

00009cf0 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    9cf0:	4b02      	ldr	r3, [pc, #8]	; (9cfc <mayfly_xtal_start+0xc>)
    9cf2:	6818      	ldr	r0, [r3, #0]
    9cf4:	6843      	ldr	r3, [r0, #4]
    9cf6:	2100      	movs	r1, #0
    9cf8:	681b      	ldr	r3, [r3, #0]
    9cfa:	4718      	bx	r3
    9cfc:	20000668 	.word	0x20000668

00009d00 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    9d00:	4b02      	ldr	r3, [pc, #8]	; (9d0c <mayfly_xtal_stop+0xc>)
    9d02:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    9d04:	6843      	ldr	r3, [r0, #4]
    9d06:	2100      	movs	r1, #0
    9d08:	685b      	ldr	r3, [r3, #4]
    9d0a:	4718      	bx	r3
    9d0c:	20000668 	.word	0x20000668

00009d10 <chan_sel_2>:
{
    9d10:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    9d12:	4048      	eors	r0, r1
    9d14:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    9d16:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    9d1a:	2608      	movs	r6, #8
	o = 0;
    9d1c:	2400      	movs	r4, #0
		o |= (i & 1);
    9d1e:	f00e 0501 	and.w	r5, lr, #1
    9d22:	3e01      	subs	r6, #1
    9d24:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    9d28:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    9d2c:	b2ec      	uxtb	r4, r5
		i >>= 1;
    9d2e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    9d32:	d1f4      	bne.n	9d1e <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    9d34:	0225      	lsls	r5, r4, #8
    9d36:	b22d      	sxth	r5, r5
    9d38:	b2c0      	uxtb	r0, r0
    9d3a:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    9d3e:	4634      	mov	r4, r6
		o |= (i & 1);
    9d40:	f000 0601 	and.w	r6, r0, #1
    9d44:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    9d48:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    9d4c:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    9d50:	b2e4      	uxtb	r4, r4
		i >>= 1;
    9d52:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    9d56:	d1f3      	bne.n	9d40 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    9d58:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    9d5a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    9d5e:	3f01      	subs	r7, #1
    9d60:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    9d62:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    9d66:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    9d68:	d1d5      	bne.n	9d16 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    9d6a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    9d6c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    9d6e:	fbb1 f0f4 	udiv	r0, r1, r4
    9d72:	fb04 1010 	mls	r0, r4, r0, r1
    9d76:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9d78:	08c4      	lsrs	r4, r0, #3
    9d7a:	f000 0507 	and.w	r5, r0, #7
    9d7e:	5d14      	ldrb	r4, [r2, r4]
    9d80:	412c      	asrs	r4, r5
    9d82:	07e4      	lsls	r4, r4, #31
    9d84:	d407      	bmi.n	9d96 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    9d86:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    9d88:	f3c1 4107 	ubfx	r1, r1, #16, #8
    9d8c:	4610      	mov	r0, r2
}
    9d8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    9d92:	f7fe bcc9 	b.w	8728 <chan_sel_remap>
}
    9d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009d98 <preempt_calc>:
{
    9d98:	b570      	push	{r4, r5, r6, lr}
    9d9a:	4614      	mov	r4, r2
    9d9c:	460e      	mov	r6, r1
    9d9e:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    9da0:	f7fd f84a 	bl	6e38 <ticker_ticks_now_get>
	u32_t diff =
    9da4:	4621      	mov	r1, r4
    9da6:	f7fd f849 	bl	6e3c <ticker_ticks_diff_get>
	diff += 3;
    9daa:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    9dac:	2c09      	cmp	r4, #9
    9dae:	d911      	bls.n	9dd4 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    9db0:	4b09      	ldr	r3, [pc, #36]	; (9dd8 <preempt_calc+0x40>)
    9db2:	781b      	ldrb	r3, [r3, #0]
    9db4:	b113      	cbz	r3, 9dbc <preempt_calc+0x24>
    9db6:	2000      	movs	r0, #0
    9db8:	f7ff fae4 	bl	9384 <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    9dbc:	4632      	mov	r2, r6
    9dbe:	2100      	movs	r1, #0
    9dc0:	4628      	mov	r0, r5
    9dc2:	f7ff fb01 	bl	93c8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    9dc6:	68ab      	ldr	r3, [r5, #8]
    9dc8:	441c      	add	r4, r3
		if (diff <
    9dca:	2c26      	cmp	r4, #38	; 0x26
    9dcc:	d800      	bhi.n	9dd0 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    9dce:	60ac      	str	r4, [r5, #8]
		return 1;
    9dd0:	2001      	movs	r0, #1
}
    9dd2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    9dd4:	2000      	movs	r0, #0
    9dd6:	bd70      	pop	{r4, r5, r6, pc}
    9dd8:	20000868 	.word	0x20000868

00009ddc <event_scan>:
{
    9ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    9dde:	4b56      	ldr	r3, [pc, #344]	; (9f38 <event_scan+0x15c>)
    9de0:	7cda      	ldrb	r2, [r3, #19]
{
    9de2:	b08d      	sub	sp, #52	; 0x34
    9de4:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    9de6:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    9dea:	461c      	mov	r4, r3
    9dec:	b12a      	cbz	r2, 9dfa <event_scan+0x1e>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9dee:	4040      	eors	r0, r0
    9df0:	f380 8811 	msr	BASEPRI, r0
    9df4:	f04f 0004 	mov.w	r0, #4
    9df8:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    9dfa:	7c1b      	ldrb	r3, [r3, #16]
    9dfc:	b2db      	uxtb	r3, r3
    9dfe:	2b06      	cmp	r3, #6
    9e00:	d1f5      	bne.n	9dee <event_scan+0x12>
	_radio.role = ROLE_SCAN;
    9e02:	2202      	movs	r2, #2
    9e04:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    9e06:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    9e08:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9e0a:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    9e0e:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    9e10:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    9e14:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    9e16:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9e1a:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    9e1e:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    9e20:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9e24:	f7ff fe30 	bl	9a88 <adv_scan_configure.constprop.32>
	chan_set(37 + _radio.scanner.chan++);
    9e28:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9e2c:	f3c3 0081 	ubfx	r0, r3, #2, #2
    9e30:	1c42      	adds	r2, r0, #1
    9e32:	f362 0383 	bfi	r3, r2, #2, #2
    9e36:	3025      	adds	r0, #37	; 0x25
    9e38:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    9e3c:	f7ff fbe6 	bl	960c <chan_set>
	if (_radio.scanner.chan == 3) {
    9e40:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9e44:	f003 020c 	and.w	r2, r3, #12
    9e48:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    9e4a:	bf08      	it	eq
    9e4c:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    9e50:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    9e54:	bf08      	it	eq
    9e56:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    9e5a:	f006 fa83 	bl	10364 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    9e5e:	2300      	movs	r3, #0
    9e60:	4619      	mov	r1, r3
    9e62:	461a      	mov	r2, r3
    9e64:	4618      	mov	r0, r3
    9e66:	f006 f9ed 	bl	10244 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    9e6a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    9e6e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    9e72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9e76:	3008      	adds	r0, #8
    9e78:	f006 f958 	bl	1012c <radio_pkt_rx_set>
	radio_rssi_measure();
    9e7c:	f006 f9fa 	bl	10274 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    9e80:	f005 fcbe 	bl	f800 <ctrl_rl_enabled>
    9e84:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9e88:	b340      	cbz	r0, 9edc <event_scan+0x100>
		struct ll_filter *filter =
    9e8a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    9e8e:	f005 fb0b 	bl	f4a8 <ctrl_filter_get>
    9e92:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    9e94:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    9e98:	f005 faaa 	bl	f3f0 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    9e9c:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    9e9e:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    9ea0:	1cb2      	adds	r2, r6, #2
    9ea2:	7830      	ldrb	r0, [r6, #0]
    9ea4:	f006 fa08 	bl	102b8 <radio_filter_configure>
		radio_ar_configure(count, irks);
    9ea8:	4639      	mov	r1, r7
    9eaa:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    9eae:	f006 fbdd 	bl	1066c <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    9eb2:	68e2      	ldr	r2, [r4, #12]
    9eb4:	f105 0109 	add.w	r1, r5, #9
    9eb8:	2000      	movs	r0, #0
    9eba:	f006 fa5f 	bl	1037c <radio_tmr_start>
	radio_tmr_end_capture();
    9ebe:	f006 fb2d 	bl	1051c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    9ec2:	2106      	movs	r1, #6
    9ec4:	462a      	mov	r2, r5
    9ec6:	481d      	ldr	r0, [pc, #116]	; (9f3c <event_scan+0x160>)
    9ec8:	f7ff ff66 	bl	9d98 <preempt_calc>
    9ecc:	4601      	mov	r1, r0
    9ece:	b188      	cbz	r0, 9ef4 <event_scan+0x118>
		_radio.state = STATE_STOP;
    9ed0:	2304      	movs	r3, #4
    9ed2:	7523      	strb	r3, [r4, #20]
		radio_disable();
    9ed4:	f006 f950 	bl	10178 <radio_disable>
}
    9ed8:	b00d      	add	sp, #52	; 0x34
    9eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    9edc:	f013 0f30 	tst.w	r3, #48	; 0x30
    9ee0:	d0e7      	beq.n	9eb2 <event_scan+0xd6>
		struct ll_filter *wl = ctrl_filter_get(true);
    9ee2:	2001      	movs	r0, #1
    9ee4:	f005 fae0 	bl	f4a8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    9ee8:	1c82      	adds	r2, r0, #2
    9eea:	7841      	ldrb	r1, [r0, #1]
    9eec:	7800      	ldrb	r0, [r0, #0]
    9eee:	f006 f9e3 	bl	102b8 <radio_filter_configure>
    9ef2:	e7de      	b.n	9eb2 <event_scan+0xd6>
		ret = ticker_start(
    9ef4:	f641 1336 	movw	r3, #6454	; 0x1936
    9ef8:	9308      	str	r3, [sp, #32]
    9efa:	4b11      	ldr	r3, [pc, #68]	; (9f40 <event_scan+0x164>)
    9efc:	9307      	str	r3, [sp, #28]
    9efe:	2204      	movs	r2, #4
    9f00:	4b10      	ldr	r3, [pc, #64]	; (9f44 <event_scan+0x168>)
    9f02:	9206      	str	r2, [sp, #24]
    9f04:	9305      	str	r3, [sp, #20]
    9f06:	9004      	str	r0, [sp, #16]
    9f08:	9003      	str	r0, [sp, #12]
    9f0a:	9002      	str	r0, [sp, #8]
    9f0c:	9001      	str	r0, [sp, #4]
    9f0e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    9f12:	3309      	adds	r3, #9
    9f14:	9300      	str	r3, [sp, #0]
    9f16:	462b      	mov	r3, r5
    9f18:	f7fc fe20 	bl	6b5c <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9f1c:	f030 0302 	bics.w	r3, r0, #2
    9f20:	f47f af65 	bne.w	9dee <event_scan+0x12>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    9f24:	4619      	mov	r1, r3
    9f26:	4618      	mov	r0, r3
    9f28:	4a07      	ldr	r2, [pc, #28]	; (9f48 <event_scan+0x16c>)
    9f2a:	f7fc ff33 	bl	6d94 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9f2e:	f030 0302 	bics.w	r3, r0, #2
    9f32:	f47f af5c 	bne.w	9dee <event_scan+0x12>
    9f36:	e7cf      	b.n	9ed8 <event_scan+0xfc>
    9f38:	20000668 	.word	0x20000668
    9f3c:	20000738 	.word	0x20000738
    9f40:	00009a7d 	.word	0x00009a7d
    9f44:	000099b5 	.word	0x000099b5
    9f48:	00009331 	.word	0x00009331

00009f4c <ctrl_tx_enqueue>:
{
    9f4c:	b510      	push	{r4, lr}
	    !conn->empty &&
    9f4e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    9f52:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    9f56:	f014 0f80 	tst.w	r4, #128	; 0x80
    9f5a:	d118      	bne.n	9f8e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    9f5c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    9f60:	b1ab      	cbz	r3, 9f8e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    9f62:	0724      	lsls	r4, r4, #28
    9f64:	d413      	bmi.n	9f8e <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    9f66:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    9f6a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    9f6c:	bf04      	itt	eq
    9f6e:	681c      	ldreq	r4, [r3, #0]
    9f70:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    9f74:	b992      	cbnz	r2, 9f9c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    9f76:	681a      	ldr	r2, [r3, #0]
    9f78:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    9f7a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    9f7c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    9f80:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    9f84:	680b      	ldr	r3, [r1, #0]
    9f86:	b90b      	cbnz	r3, 9f8c <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    9f88:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    9f8c:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    9f8e:	b92a      	cbnz	r2, 9f9c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    9f90:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    9f94:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    9f96:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    9f9a:	e7ef      	b.n	9f7c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    9f9c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    9fa0:	681a      	ldr	r2, [r3, #0]
    9fa2:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    9fa4:	6019      	str	r1, [r3, #0]
    9fa6:	e7eb      	b.n	9f80 <ctrl_tx_enqueue+0x34>

00009fa8 <ctrl_tx_sec_enqueue>:
{
    9fa8:	b410      	push	{r4}
	if (conn->pause_tx) {
    9faa:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    9fae:	0724      	lsls	r4, r4, #28
{
    9fb0:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    9fb2:	d50f      	bpl.n	9fd4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    9fb4:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    9fb8:	b931      	cbnz	r1, 9fc8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    9fba:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    9fbe:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    9fc0:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    9fc4:	bc10      	pop	{r4}
    9fc6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    9fc8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    9fcc:	6819      	ldr	r1, [r3, #0]
    9fce:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    9fd0:	601a      	str	r2, [r3, #0]
    9fd2:	e7f7      	b.n	9fc4 <ctrl_tx_sec_enqueue+0x1c>
}
    9fd4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    9fd6:	f7ff bfb9 	b.w	9f4c <ctrl_tx_enqueue>
	...

00009fdc <feature_rsp_send>:
{
    9fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9fde:	4f21      	ldr	r7, [pc, #132]	; (a064 <feature_rsp_send+0x88>)
{
    9fe0:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9fe2:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    9fe6:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9fe8:	f7fb ff43 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    9fec:	4604      	mov	r4, r0
    9fee:	b3b0      	cbz	r0, a05e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9ff0:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    9ff2:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    9ff4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    9ffc:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    a000:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    a004:	f043 0310 	orr.w	r3, r3, #16
    a008:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    a00c:	79b1      	ldrb	r1, [r6, #6]
    a00e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    a012:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    a016:	f3c1 0110 	ubfx	r1, r1, #0, #17
    a01a:	400b      	ands	r3, r1
    a01c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    a020:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    a024:	f043 0320 	orr.w	r3, r3, #32
    a028:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a02c:	7903      	ldrb	r3, [r0, #4]
    a02e:	f043 0303 	orr.w	r3, r3, #3
    a032:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    a034:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    a036:	2309      	movs	r3, #9
    a038:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    a03a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    a03c:	2100      	movs	r1, #0
    a03e:	4410      	add	r0, r2
    a040:	f7f7 fe08 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    a044:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    a048:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    a04a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    a04c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    a04e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    a050:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    a052:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    a054:	4621      	mov	r1, r4
    a056:	f7ff ffa7 	bl	9fa8 <ctrl_tx_sec_enqueue>
	return 0;
    a05a:	2000      	movs	r0, #0
    a05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    a05e:	2001      	movs	r0, #1
}
    a060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a062:	bf00      	nop
    a064:	20000668 	.word	0x20000668

0000a068 <start_enc_rsp_send>:
{
    a068:	b510      	push	{r4, lr}
    a06a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    a06c:	b9c9      	cbnz	r1, a0a2 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a06e:	480f      	ldr	r0, [pc, #60]	; (a0ac <start_enc_rsp_send+0x44>)
    a070:	f7fb feff 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    a074:	b1b8      	cbz	r0, a0a6 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    a076:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    a078:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    a07c:	f043 0320 	orr.w	r3, r3, #32
    a080:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a084:	780b      	ldrb	r3, [r1, #0]
    a086:	f043 0303 	orr.w	r3, r3, #3
    a08a:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    a08c:	2301      	movs	r3, #1
    a08e:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    a090:	2306      	movs	r3, #6
    a092:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    a094:	b140      	cbz	r0, a0a8 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    a096:	4601      	mov	r1, r0
    a098:	4620      	mov	r0, r4
    a09a:	f7ff ff57 	bl	9f4c <ctrl_tx_enqueue>
	return 0;
    a09e:	2000      	movs	r0, #0
    a0a0:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    a0a2:	2000      	movs	r0, #0
    a0a4:	e7e8      	b.n	a078 <start_enc_rsp_send+0x10>
			return 1;
    a0a6:	2001      	movs	r0, #1
}
    a0a8:	bd10      	pop	{r4, pc}
    a0aa:	bf00      	nop
    a0ac:	200007c4 	.word	0x200007c4

0000a0b0 <reject_ext_ind_send>:
{
    a0b0:	b570      	push	{r4, r5, r6, lr}
    a0b2:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a0b4:	480b      	ldr	r0, [pc, #44]	; (a0e4 <reject_ext_ind_send+0x34>)
{
    a0b6:	460e      	mov	r6, r1
    a0b8:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a0ba:	f7fb feda 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    a0be:	b178      	cbz	r0, a0e0 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a0c0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    a0c2:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a0c4:	f043 0303 	orr.w	r3, r3, #3
    a0c8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    a0ca:	2303      	movs	r3, #3
    a0cc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    a0ce:	2311      	movs	r3, #17
    a0d0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    a0d2:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    a0d4:	4601      	mov	r1, r0
    a0d6:	4620      	mov	r0, r4
    a0d8:	f7ff ff38 	bl	9f4c <ctrl_tx_enqueue>
	return 0;
    a0dc:	2000      	movs	r0, #0
    a0de:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    a0e0:	2001      	movs	r0, #1
}
    a0e2:	bd70      	pop	{r4, r5, r6, pc}
    a0e4:	200007c4 	.word	0x200007c4

0000a0e8 <event_connection_prepare>:
{
    a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    a0ec:	4dc5      	ldr	r5, [pc, #788]	; (a404 <event_connection_prepare+0x31c>)
{
    a0ee:	b08f      	sub	sp, #60	; 0x3c
    a0f0:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    a0f2:	7c2b      	ldrb	r3, [r5, #16]
{
    a0f4:	910c      	str	r1, [sp, #48]	; 0x30
    a0f6:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    a0f8:	b12b      	cbz	r3, a106 <event_connection_prepare+0x1e>
		LL_ASSERT(0);
    a0fa:	4040      	eors	r0, r0
    a0fc:	f380 8811 	msr	BASEPRI, r0
    a100:	f04f 0004 	mov.w	r0, #4
    a104:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    a106:	f894 3020 	ldrb.w	r3, [r4, #32]
    a10a:	3307      	adds	r3, #7
    a10c:	b2db      	uxtb	r3, r3
    a10e:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    a110:	f994 301d 	ldrsb.w	r3, [r4, #29]
    a114:	2b00      	cmp	r3, #0
    a116:	da09      	bge.n	a12c <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    a118:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    a11a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    a11c:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    a120:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    a122:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    a124:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    a126:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    a128:	bf88      	it	hi
    a12a:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    a12c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    a12e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    a132:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    a134:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    a136:	b292      	uxth	r2, r2
    a138:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    a13a:	4432      	add	r2, r6
    a13c:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    a13e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    a142:	429a      	cmp	r2, r3
    a144:	f040 819d 	bne.w	a482 <event_connection_prepare+0x39a>
    a148:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    a14c:	075f      	lsls	r7, r3, #29
    a14e:	f100 8281 	bmi.w	a654 <event_connection_prepare+0x56c>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    a152:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    a156:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a15a:	429a      	cmp	r2, r3
    a15c:	d06e      	beq.n	a23c <event_connection_prepare+0x154>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    a15e:	2005      	movs	r0, #5
    a160:	f7ff fcbc 	bl	9adc <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
    a164:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    a168:	b10b      	cbz	r3, a16e <event_connection_prepare+0x86>
    a16a:	429c      	cmp	r4, r3
    a16c:	d166      	bne.n	a23c <event_connection_prepare+0x154>
	switch (conn->llcp_conn_param.state) {
    a16e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    a172:	f003 0307 	and.w	r3, r3, #7
    a176:	2b05      	cmp	r3, #5
    a178:	d8bf      	bhi.n	a0fa <event_connection_prepare+0x12>
    a17a:	e8df f013 	tbh	[pc, r3, lsl #1]
    a17e:	0006      	.short	0x0006
    a180:	01180076 	.word	0x01180076
    a184:	005f005f 	.word	0x005f005f
    a188:	005f      	.short	0x005f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a18a:	489f      	ldr	r0, [pc, #636]	; (a408 <event_connection_prepare+0x320>)
    a18c:	f7fb fe71 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    a190:	4607      	mov	r7, r0
    a192:	2800      	cmp	r0, #0
    a194:	d052      	beq.n	a23c <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    a196:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    a19a:	2204      	movs	r2, #4
    a19c:	f362 0302 	bfi	r3, r2, #0, #3
    a1a0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a1a4:	7903      	ldrb	r3, [r0, #4]
    a1a6:	f043 0303 	orr.w	r3, r3, #3
    a1aa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    a1ac:	2318      	movs	r3, #24
    a1ae:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    a1b0:	230f      	movs	r3, #15
    a1b2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    a1b4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a1b8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    a1ba:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    a1bc:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a1c0:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    a1c2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a1c6:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    a1c8:	2300      	movs	r3, #0
    a1ca:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    a1cc:	74c3      	strb	r3, [r0, #19]
    a1ce:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    a1d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a1d4:	7543      	strb	r3, [r0, #21]
    a1d6:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    a1d8:	75c3      	strb	r3, [r0, #23]
    a1da:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    a1dc:	7643      	strb	r3, [r0, #25]
    a1de:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    a1e0:	76c3      	strb	r3, [r0, #27]
    a1e2:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    a1e4:	7743      	strb	r3, [r0, #29]
    a1e6:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    a1e8:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    a1ec:	4601      	mov	r1, r0
    a1ee:	4620      	mov	r0, r4
    a1f0:	f7ff feac 	bl	9f4c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a1f4:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    a1f6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    a1fa:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a1fe:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    a200:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    a204:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a208:	da0b      	bge.n	a222 <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    a20a:	68a3      	ldr	r3, [r4, #8]
    a20c:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    a20e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    a212:	428b      	cmp	r3, r1
    a214:	bf2c      	ite	cs
    a216:	4443      	addcs	r3, r8
    a218:	eb08 0301 	addcc.w	r3, r8, r1
    a21c:	1a9b      	subs	r3, r3, r2
    a21e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    a222:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    a224:	4b79      	ldr	r3, [pc, #484]	; (a40c <event_connection_prepare+0x324>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    a226:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a22a:	2201      	movs	r2, #1
    a22c:	4611      	mov	r1, r2
    a22e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    a230:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a232:	f7fb fee9 	bl	6008 <mayfly_enqueue>
		LL_ASSERT(!retval);
    a236:	2800      	cmp	r0, #0
    a238:	f47f af5f 	bne.w	a0fa <event_connection_prepare+0x12>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    a23c:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    a240:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    a244:	429a      	cmp	r2, r3
    a246:	f000 8115 	beq.w	a474 <event_connection_prepare+0x38c>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    a24a:	2005      	movs	r0, #5
    a24c:	f7ff fc46 	bl	9adc <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
    a250:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    a254:	f003 0203 	and.w	r2, r3, #3
    a258:	2a03      	cmp	r2, #3
    a25a:	f63f af4e 	bhi.w	a0fa <event_connection_prepare+0x12>
    a25e:	e8df f012 	tbh	[pc, r2, lsl #1]
    a262:	00d7      	.short	0x00d7
    a264:	01090109 	.word	0x01090109
    a268:	012d      	.short	0x012d
	if (conn->llcp_conn_param.status) {
    a26a:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    a26e:	b1ef      	cbz	r7, a2ac <event_connection_prepare+0x1c4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a270:	4865      	ldr	r0, [pc, #404]	; (a408 <event_connection_prepare+0x320>)
    a272:	f7fb fdfe 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    a276:	4601      	mov	r1, r0
    a278:	2800      	cmp	r0, #0
    a27a:	d0df      	beq.n	a23c <event_connection_prepare+0x154>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    a27c:	7903      	ldrb	r3, [r0, #4]
    a27e:	f043 0303 	orr.w	r3, r3, #3
    a282:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    a284:	2311      	movs	r3, #17
    a286:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    a288:	2303      	movs	r3, #3
    a28a:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    a28c:	230f      	movs	r3, #15
    a28e:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    a290:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    a294:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    a296:	4620      	mov	r0, r4
    a298:	f7ff fe58 	bl	9f4c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a29c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a2a0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a2a4:	2300      	movs	r3, #0
    a2a6:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
    a2aa:	e7c7      	b.n	a23c <event_connection_prepare+0x154>
	if (!conn->role) {
    a2ac:	f994 301d 	ldrsb.w	r3, [r4, #29]
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	db3b      	blt.n	a32c <event_connection_prepare+0x244>
		if (conn->llcp_req != conn->llcp_ack) {
    a2b4:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    a2b8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    a2bc:	428b      	cmp	r3, r1
    a2be:	d1bd      	bne.n	a23c <event_connection_prepare+0x154>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    a2c0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    a2c4:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    a2c8:	2205      	movs	r2, #5
    a2ca:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    a2ce:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    a2d2:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    a2d6:	2301      	movs	r3, #1
    a2d8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    a2dc:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    a2e0:	b122      	cbz	r2, a2ec <event_connection_prepare+0x204>
				((conn->llcp_conn_param.interval /
    a2e2:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    a2e6:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    a2e8:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    a2ec:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    a2f0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a2f4:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    a2f8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a2fc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    a300:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a304:	2202      	movs	r2, #2
    a306:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    a30a:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    a30e:	f082 0208 	eor.w	r2, r2, #8
    a312:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    a316:	f362 0382 	bfi	r3, r2, #2, #1
    a31a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    a31e:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    a320:	2301      	movs	r3, #1
    a322:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    a326:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    a32a:	e787      	b.n	a23c <event_connection_prepare+0x154>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a32c:	4836      	ldr	r0, [pc, #216]	; (a408 <event_connection_prepare+0x320>)
    a32e:	f7fb fda0 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    a332:	4601      	mov	r1, r0
    a334:	2800      	cmp	r0, #0
    a336:	d081      	beq.n	a23c <event_connection_prepare+0x154>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    a338:	7903      	ldrb	r3, [r0, #4]
    a33a:	f043 0303 	orr.w	r3, r3, #3
    a33e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    a340:	2318      	movs	r3, #24
    a342:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    a344:	2310      	movs	r3, #16
    a346:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    a348:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a34c:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    a34e:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    a350:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a354:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    a356:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a35a:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    a35c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    a360:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    a362:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    a366:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    a36a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    a36e:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    a372:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    a376:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    a37a:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    a37e:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    a382:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    a386:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    a38a:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    a38e:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    a392:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    a396:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    a39a:	4620      	mov	r0, r4
    a39c:	f7ff fdd6 	bl	9f4c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a3a0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a3a4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    a3a8:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    a3ac:	e746      	b.n	a23c <event_connection_prepare+0x154>
	if (conn->pause_tx) {
    a3ae:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    a3b2:	0718      	lsls	r0, r3, #28
    a3b4:	f53f af42 	bmi.w	a23c <event_connection_prepare+0x154>
	node_rx = packet_rx_reserve_get(2);
    a3b8:	2002      	movs	r0, #2
    a3ba:	f7fe f9e7 	bl	878c <packet_rx_reserve_get>
	if (!node_rx) {
    a3be:	2800      	cmp	r0, #0
    a3c0:	f43f af3c 	beq.w	a23c <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    a3c4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    a3c8:	2203      	movs	r2, #3
    a3ca:	f362 0302 	bfi	r3, r2, #0, #3
    a3ce:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    a3d2:	8c23      	ldrh	r3, [r4, #32]
    a3d4:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    a3d6:	2301      	movs	r3, #1
    a3d8:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    a3da:	7a03      	ldrb	r3, [r0, #8]
    a3dc:	4313      	orrs	r3, r2
    a3de:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    a3e0:	2318      	movs	r3, #24
    a3e2:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    a3e4:	230f      	movs	r3, #15
    a3e6:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    a3e8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a3ec:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    a3ee:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    a3f0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a3f4:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    a3f6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a3fa:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    a3fc:	f7ff f830 	bl	9460 <packet_rx_enqueue>
    a400:	e71c      	b.n	a23c <event_connection_prepare+0x154>
    a402:	bf00      	nop
    a404:	20000668 	.word	0x20000668
    a408:	200007c4 	.word	0x200007c4
    a40c:	200037c8 	.word	0x200037c8
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a410:	48af      	ldr	r0, [pc, #700]	; (a6d0 <event_connection_prepare+0x5e8>)
    a412:	f7fb fd2e 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    a416:	4601      	mov	r1, r0
    a418:	b360      	cbz	r0, a474 <event_connection_prepare+0x38c>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    a41a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a41e:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    a422:	2201      	movs	r2, #1
    a424:	f362 0301 	bfi	r3, r2, #0, #2
    a428:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a42c:	b2db      	uxtb	r3, r3
    a42e:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a432:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a436:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a43a:	f363 07c5 	bfi	r7, r3, #3, #3
    a43e:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    a442:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a446:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    a44a:	f367 1286 	bfi	r2, r7, #6, #1
    a44e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a452:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    a454:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a456:	f042 0203 	orr.w	r2, r2, #3
    a45a:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    a45c:	2203      	movs	r2, #3
    a45e:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    a460:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    a462:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    a464:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    a466:	4620      	mov	r0, r4
    a468:	f7ff fd70 	bl	9f4c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    a46c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    a470:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    a474:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    a478:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a47c:	429a      	cmp	r2, r3
    a47e:	f000 80e9 	beq.w	a654 <event_connection_prepare+0x56c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a482:	2005      	movs	r0, #5
    a484:	f7ff fb2a 	bl	9adc <event_stop.constprop.33>
		switch (conn->llcp_type) {
    a488:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    a48c:	3b01      	subs	r3, #1
    a48e:	2b07      	cmp	r3, #7
    a490:	f63f ae33 	bhi.w	a0fa <event_connection_prepare+0x12>
    a494:	a201      	add	r2, pc, #4	; (adr r2, a49c <event_connection_prepare+0x3b4>)
    a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a49a:	bf00      	nop
    a49c:	0000a57b 	.word	0x0000a57b
    a4a0:	0000aa11 	.word	0x0000aa11
    a4a4:	0000aacd 	.word	0x0000aacd
    a4a8:	0000ad01 	.word	0x0000ad01
    a4ac:	0000ad61 	.word	0x0000ad61
    a4b0:	0000a0fb 	.word	0x0000a0fb
    a4b4:	0000ae01 	.word	0x0000ae01
    a4b8:	0000ae31 	.word	0x0000ae31
		conn->llcp_phy.ack = conn->llcp_phy.req;
    a4bc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    a4c0:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    a4c4:	f3c3 0282 	ubfx	r2, r3, #2, #3
    a4c8:	0791      	lsls	r1, r2, #30
    a4ca:	d544      	bpl.n	a556 <event_connection_prepare+0x46e>
			conn->llcp_phy.tx = BIT(1);
    a4cc:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    a4ce:	f362 0384 	bfi	r3, r2, #2, #3
    a4d2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    a4d6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    a4da:	095a      	lsrs	r2, r3, #5
    a4dc:	0790      	lsls	r0, r2, #30
    a4de:	d543      	bpl.n	a568 <event_connection_prepare+0x480>
			conn->llcp_phy.rx = BIT(1);
    a4e0:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    a4e2:	f362 1347 	bfi	r3, r2, #5, #3
    a4e6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    a4ea:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    a4ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    a4f2:	f3c2 0182 	ubfx	r1, r2, #2, #3
    a4f6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    a4fa:	428b      	cmp	r3, r1
    a4fc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    a500:	bf14      	ite	ne
    a502:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    a506:	f36f 0384 	bfceq	r3, #2, #3
    a50a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    a50e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    a512:	0952      	lsrs	r2, r2, #5
    a514:	f003 0307 	and.w	r3, r3, #7
    a518:	4293      	cmp	r3, r2
    a51a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    a51e:	bf14      	ite	ne
    a520:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    a524:	f36f 1347 	bfceq	r3, #5, #3
    a528:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    a52c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    a530:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    a534:	f043 0301 	orr.w	r3, r3, #1
    a538:	f3c2 0240 	ubfx	r2, r2, #1, #1
    a53c:	f362 0341 	bfi	r3, r2, #1, #1
    a540:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    a544:	2308      	movs	r3, #8
    a546:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    a54a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    a54e:	3b01      	subs	r3, #1
    a550:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    a554:	e78e      	b.n	a474 <event_connection_prepare+0x38c>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    a556:	07d7      	lsls	r7, r2, #31
    a558:	d501      	bpl.n	a55e <event_connection_prepare+0x476>
			conn->llcp_phy.tx = BIT(0);
    a55a:	2201      	movs	r2, #1
    a55c:	e7b7      	b.n	a4ce <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    a55e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    a562:	bf18      	it	ne
    a564:	2204      	movne	r2, #4
    a566:	e7b2      	b.n	a4ce <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    a568:	07d1      	lsls	r1, r2, #31
    a56a:	d501      	bpl.n	a570 <event_connection_prepare+0x488>
			conn->llcp_phy.rx = BIT(0);
    a56c:	2201      	movs	r2, #1
    a56e:	e7b8      	b.n	a4e2 <event_connection_prepare+0x3fa>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    a570:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    a574:	bf18      	it	ne
    a576:	2204      	movne	r2, #4
    a578:	e7b3      	b.n	a4e2 <event_connection_prepare+0x3fa>
	if (!conn_upd) {
    a57a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    a57e:	b90b      	cbnz	r3, a584 <event_connection_prepare+0x49c>
		_radio.conn_upd = conn;
    a580:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    a584:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a588:	f013 0303 	ands.w	r3, r3, #3
    a58c:	f000 80a8 	beq.w	a6e0 <event_connection_prepare+0x5f8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a590:	484f      	ldr	r0, [pc, #316]	; (a6d0 <event_connection_prepare+0x5e8>)
    a592:	f7fb fc6e 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    a596:	4607      	mov	r7, r0
    a598:	2800      	cmp	r0, #0
    a59a:	d05b      	beq.n	a654 <event_connection_prepare+0x56c>
		switch (conn->llcp.conn_upd.state) {
    a59c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a5a0:	f003 0303 	and.w	r3, r3, #3
    a5a4:	2b01      	cmp	r3, #1
    a5a6:	f000 8091 	beq.w	a6cc <event_connection_prepare+0x5e4>
    a5aa:	2b02      	cmp	r3, #2
    a5ac:	f47f ada5 	bne.w	a0fa <event_connection_prepare+0x12>
			fp_mayfly_select_or_use =
    a5b0:	4a48      	ldr	r2, [pc, #288]	; (a6d4 <event_connection_prepare+0x5ec>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    a5b2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a5b6:	f36f 0301 	bfc	r3, #0, #2
    a5ba:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    a5be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a5c0:	3306      	adds	r3, #6
    a5c2:	4433      	add	r3, r6
    a5c4:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    a5c6:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a5ca:	7939      	ldrb	r1, [r7, #4]
    a5cc:	f041 0103 	orr.w	r1, r1, #3
    a5d0:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    a5d2:	210c      	movs	r1, #12
    a5d4:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    a5d6:	2100      	movs	r1, #0
    a5d8:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    a5da:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    a5de:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    a5e0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    a5e4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    a5e8:	fbb1 f1f0 	udiv	r1, r1, r0
    a5ec:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    a5f0:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    a5f4:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    a5f8:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    a5fc:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    a600:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    a604:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    a608:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a60c:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    a60e:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a612:	2900      	cmp	r1, #0
    a614:	da0b      	bge.n	a62e <event_connection_prepare+0x546>
			u32_t ticks_prepare_to_start =
    a616:	68a3      	ldr	r3, [r4, #8]
    a618:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    a61a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    a61e:	4283      	cmp	r3, r0
    a620:	bf2c      	ite	cs
    a622:	4443      	addcs	r3, r8
    a624:	eb08 0300 	addcc.w	r3, r8, r0
    a628:	1a5b      	subs	r3, r3, r1
    a62a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    a62e:	f107 0309 	add.w	r3, r7, #9
    a632:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    a636:	4b28      	ldr	r3, [pc, #160]	; (a6d8 <event_connection_prepare+0x5f0>)
    a638:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a63a:	2201      	movs	r2, #1
    a63c:	4611      	mov	r1, r2
    a63e:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    a640:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a642:	f7fb fce1 	bl	6008 <mayfly_enqueue>
		LL_ASSERT(!retval);
    a646:	2800      	cmp	r0, #0
    a648:	f47f ad57 	bne.w	a0fa <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    a64c:	4639      	mov	r1, r7
    a64e:	4620      	mov	r0, r4
    a650:	f7ff fc7c 	bl	9f4c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    a654:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    a658:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    a65c:	429a      	cmp	r2, r3
    a65e:	d01e      	beq.n	a69e <event_connection_prepare+0x5b6>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a660:	2005      	movs	r0, #5
    a662:	f7ff fa3b 	bl	9adc <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a666:	481a      	ldr	r0, [pc, #104]	; (a6d0 <event_connection_prepare+0x5e8>)
    a668:	f7fb fc03 	bl	5e72 <mem_acquire>
		if (node_tx) {
    a66c:	4601      	mov	r1, r0
    a66e:	b1b0      	cbz	r0, a69e <event_connection_prepare+0x5b6>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    a670:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    a674:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a678:	7903      	ldrb	r3, [r0, #4]
    a67a:	f043 0303 	orr.w	r3, r3, #3
    a67e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    a680:	2302      	movs	r3, #2
    a682:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    a684:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    a686:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    a68a:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    a68c:	4620      	mov	r0, r4
    a68e:	f7ff fc5d 	bl	9f4c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    a692:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    a694:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    a696:	bf98      	it	ls
    a698:	3301      	addls	r3, #1
    a69a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    a69e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    a6a2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    a6a6:	429a      	cmp	r2, r3
    a6a8:	f000 84a6 	beq.w	aff8 <event_connection_prepare+0xf10>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a6ac:	2005      	movs	r0, #5
    a6ae:	f7ff fa15 	bl	9adc <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
    a6b2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    a6b6:	f003 0303 	and.w	r3, r3, #3
    a6ba:	2b03      	cmp	r3, #3
    a6bc:	f63f ad1d 	bhi.w	a0fa <event_connection_prepare+0x12>
    a6c0:	e8df f013 	tbh	[pc, r3, lsl #1]
    a6c4:	049a0460 	.word	0x049a0460
    a6c8:	04b6049a 	.word	0x04b6049a
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    a6cc:	4a03      	ldr	r2, [pc, #12]	; (a6dc <event_connection_prepare+0x5f4>)
    a6ce:	e770      	b.n	a5b2 <event_connection_prepare+0x4ca>
    a6d0:	200007c4 	.word	0x200007c4
    a6d4:	00008fe1 	.word	0x00008fe1
    a6d8:	200037b8 	.word	0x200037b8
    a6dc:	000095bd 	.word	0x000095bd
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    a6e0:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    a6e4:	1bf7      	subs	r7, r6, r7
    a6e6:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    a6e8:	043a      	lsls	r2, r7, #16
    a6ea:	d4b3      	bmi.n	a654 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    a6ec:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    a6f0:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    a6f4:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    a6f8:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    a6fc:	428a      	cmp	r2, r1
    a6fe:	d009      	beq.n	a714 <event_connection_prepare+0x62c>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    a700:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    a704:	f002 0207 	and.w	r2, r2, #7
    a708:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a70a:	bf04      	itt	eq
    a70c:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    a710:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    a714:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    a718:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    a71a:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    a71c:	bf08      	it	eq
    a71e:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    a722:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    a724:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a726:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    a72a:	429a      	cmp	r2, r3
    a72c:	d114      	bne.n	a758 <event_connection_prepare+0x670>
		     conn->conn_interval) ||
    a72e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    a732:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a734:	4299      	cmp	r1, r3
    a736:	d10f      	bne.n	a758 <event_connection_prepare+0x670>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    a738:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a73c:	435a      	muls	r2, r3
    a73e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a742:	f242 7110 	movw	r1, #10000	; 0x2710
    a746:	fb01 2303 	mla	r3, r1, r3, r2
    a74a:	3b01      	subs	r3, #1
    a74c:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    a750:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a752:	b29b      	uxth	r3, r3
    a754:	429a      	cmp	r2, r3
    a756:	d016      	beq.n	a786 <event_connection_prepare+0x69e>
			node_rx = packet_rx_reserve_get(2);
    a758:	2002      	movs	r0, #2
    a75a:	f7fe f817 	bl	878c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    a75e:	2800      	cmp	r0, #0
    a760:	f43f accb 	beq.w	a0fa <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    a764:	8c23      	ldrh	r3, [r4, #32]
    a766:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    a768:	2308      	movs	r3, #8
    a76a:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    a76c:	2300      	movs	r3, #0
    a76e:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    a770:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    a774:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    a776:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    a77a:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    a77c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a780:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    a782:	f7fe fe6d 	bl	9460 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a786:	6823      	ldr	r3, [r4, #0]
    a788:	6866      	ldr	r6, [r4, #4]
    a78a:	2b00      	cmp	r3, #0
    a78c:	da09      	bge.n	a7a2 <event_connection_prepare+0x6ba>
			u32_t ticks_prepare_to_start =
    a78e:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    a790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    a794:	42b0      	cmp	r0, r6
    a796:	bf2c      	ite	cs
    a798:	4480      	addcs	r8, r0
    a79a:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    a79c:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    a79e:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    a7a2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    a7a4:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    a7a8:	49bd      	ldr	r1, [pc, #756]	; (aaa0 <event_connection_prepare+0x9b8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    a7aa:	fb13 f307 	smulbb	r3, r3, r7
    a7ae:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    a7b0:	fbb3 f2fa 	udiv	r2, r3, sl
    a7b4:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    a7b8:	fb1a f009 	smulbb	r0, sl, r9
    a7bc:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    a7be:	4283      	cmp	r3, r0
    a7c0:	f080 8108 	bcs.w	a9d4 <event_connection_prepare+0x8ec>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    a7c4:	1ac0      	subs	r0, r0, r3
    a7c6:	f240 1223 	movw	r2, #291	; 0x123
    a7ca:	4342      	muls	r2, r0
    a7cc:	17c3      	asrs	r3, r0, #31
    a7ce:	fb01 2303 	mla	r3, r1, r3, r2
    a7d2:	fba0 0101 	umull	r0, r1, r0, r1
    a7d6:	4419      	add	r1, r3
    a7d8:	a3af      	add	r3, pc, #700	; (adr r3, aa98 <event_connection_prepare+0x9b0>)
    a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7de:	f7f5 fd19 	bl	214 <__aeabi_uldivmod>
    a7e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7e6:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a7ea:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    a7ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    a7ee:	f8df b2d8 	ldr.w	fp, [pc, #728]	; aac8 <event_connection_prepare+0x9e0>
    a7f2:	1bdb      	subs	r3, r3, r7
    a7f4:	444b      	add	r3, r9
    a7f6:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    a7f8:	6823      	ldr	r3, [r4, #0]
    a7fa:	42b3      	cmp	r3, r6
    a7fc:	bf38      	it	cc
    a7fe:	4633      	movcc	r3, r6
    a800:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    a802:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    a806:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    a80a:	2b00      	cmp	r3, #0
    a80c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    a810:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    a812:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    a816:	f280 80ee 	bge.w	a9f6 <event_connection_prepare+0x90e>
				conn->slave.window_widening_periodic_us *
    a81a:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    a81c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    a81e:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    a822:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    a826:	4a9f      	ldr	r2, [pc, #636]	; (aaa4 <event_connection_prepare+0x9bc>)
    a828:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    a82c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    a830:	f3c3 0382 	ubfx	r3, r3, #2, #3
    a834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    a838:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    a83c:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    a83e:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    a840:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    a844:	4b98      	ldr	r3, [pc, #608]	; (aaa8 <event_connection_prepare+0x9c0>)
				conn->llcp.conn_upd.win_size * 1250;
    a846:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    a84a:	f205 253f 	addw	r5, r5, #575	; 0x23f
    a84e:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    a852:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    a854:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    a858:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    a85a:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    a85c:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    a85e:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    a860:	429f      	cmp	r7, r3
    a862:	bf94      	ite	ls
    a864:	65e7      	strls	r7, [r4, #92]	; 0x5c
    a866:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    a868:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    a86a:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    a86c:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a86e:	fba0 010b 	umull	r0, r1, r0, fp
    a872:	a389      	add	r3, pc, #548	; (adr r3, aa98 <event_connection_prepare+0x9b0>)
    a874:	e9d3 2300 	ldrd	r2, r3, [r3]
    a878:	f7f5 fccc 	bl	214 <__aeabi_uldivmod>
    a87c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a87e:	1a1b      	subs	r3, r3, r0
    a880:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a884:	fbb3 f0f8 	udiv	r0, r3, r8
    a888:	fb08 f000 	mul.w	r0, r8, r0
    a88c:	a382      	add	r3, pc, #520	; (adr r3, aa98 <event_connection_prepare+0x9b0>)
    a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a892:	fba0 010b 	umull	r0, r1, r0, fp
    a896:	f7f5 fcbd 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    a89a:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a89c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    a8a0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    a8a4:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    a8a8:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    a8aa:	f242 7110 	movw	r1, #10000	; 0x2710
    a8ae:	fb01 6303 	mla	r3, r1, r3, r6
    a8b2:	3b01      	subs	r3, #1
    a8b4:	fbb3 f3f6 	udiv	r3, r3, r6
    a8b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    a8ba:	4b7c      	ldr	r3, [pc, #496]	; (aaac <event_connection_prepare+0x9c4>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    a8bc:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    a8c0:	4433      	add	r3, r6
    a8c2:	fbb3 f3f6 	udiv	r3, r3, r6
    a8c6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a8ca:	4b79      	ldr	r3, [pc, #484]	; (aab0 <event_connection_prepare+0x9c8>)
    a8cc:	4433      	add	r3, r6
    a8ce:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a8d2:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a8d4:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a8d6:	4299      	cmp	r1, r3
    a8d8:	bfc4      	itt	gt
    a8da:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    a8de:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a8e0:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a8e4:	bfc8      	it	gt
    a8e6:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    a8e8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a8ec:	bfc8      	it	gt
    a8ee:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    a8f0:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    a8f4:	bf08      	it	eq
    a8f6:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a8fa:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    a8fe:	2000      	movs	r0, #0
    a900:	2101      	movs	r1, #1
    a902:	f005 ff19 	bl	10738 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a906:	2200      	movs	r2, #0
    a908:	2101      	movs	r1, #1
		mayfly_was_enabled =
    a90a:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a90c:	4610      	mov	r0, r2
    a90e:	f7fb fb53 	bl	5fb8 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a912:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    a916:	f641 2385 	movw	r3, #6789	; 0x1a85
    a91a:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a91c:	3207      	adds	r2, #7
		ticker_status =
    a91e:	9300      	str	r3, [sp, #0]
    a920:	b2d2      	uxtb	r2, r2
    a922:	4b64      	ldr	r3, [pc, #400]	; (aab4 <event_connection_prepare+0x9cc>)
    a924:	4608      	mov	r0, r1
    a926:	f7fc f9b7 	bl	6c98 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a92a:	f030 0802 	bics.w	r8, r0, #2
    a92e:	f47f abe4 	bne.w	a0fa <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    a932:	fba5 ab0b 	umull	sl, fp, r5, fp
    a936:	a358      	add	r3, pc, #352	; (adr r3, aa98 <event_connection_prepare+0x9b0>)
    a938:	e9d3 2300 	ldrd	r2, r3, [r3]
    a93c:	4650      	mov	r0, sl
    a93e:	4659      	mov	r1, fp
    a940:	f7f5 fc68 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    a944:	4a5c      	ldr	r2, [pc, #368]	; (aab8 <event_connection_prepare+0x9d0>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a946:	f894 6020 	ldrb.w	r6, [r4, #32]
    a94a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    a94e:	2307      	movs	r3, #7
    a950:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a954:	2100      	movs	r1, #0
    a956:	4343      	muls	r3, r0
    a958:	fb02 3301 	mla	r3, r2, r1, r3
    a95c:	fba0 0102 	umull	r0, r1, r0, r2
    a960:	ebba 0000 	subs.w	r0, sl, r0
    a964:	4419      	add	r1, r3
    a966:	eb6b 0101 	sbc.w	r1, fp, r1
    a96a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a96e:	2300      	movs	r3, #0
    a970:	f7f5 fc50 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a974:	68e3      	ldr	r3, [r4, #12]
    a976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a978:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    a97c:	494f      	ldr	r1, [pc, #316]	; (aabc <event_connection_prepare+0x9d4>)
		ticker_status =
    a97e:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a980:	441a      	add	r2, r3
    a982:	4613      	mov	r3, r2
    a984:	4a4e      	ldr	r2, [pc, #312]	; (aac0 <event_connection_prepare+0x9d8>)
		ticker_status =
    a986:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a988:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    a98c:	bf38      	it	cc
    a98e:	460a      	movcc	r2, r1
    a990:	3607      	adds	r6, #7
		ticker_status =
    a992:	f641 2195 	movw	r1, #6805	; 0x1a95
    a996:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a998:	b2f6      	uxtb	r6, r6
		ticker_status =
    a99a:	4946      	ldr	r1, [pc, #280]	; (aab4 <event_connection_prepare+0x9cc>)
    a99c:	9107      	str	r1, [sp, #28]
    a99e:	9205      	str	r2, [sp, #20]
    a9a0:	9406      	str	r4, [sp, #24]
    a9a2:	f8cd 800c 	str.w	r8, [sp, #12]
    a9a6:	9501      	str	r5, [sp, #4]
    a9a8:	9700      	str	r7, [sp, #0]
    a9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a9ac:	4632      	mov	r2, r6
    a9ae:	4641      	mov	r1, r8
    a9b0:	4640      	mov	r0, r8
    a9b2:	f7fc f8d3 	bl	6b5c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a9b6:	f030 0002 	bics.w	r0, r0, #2
    a9ba:	f47f ab9e 	bne.w	a0fa <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    a9be:	f1b9 0f00 	cmp.w	r9, #0
    a9c2:	f000 8332 	beq.w	b02a <event_connection_prepare+0xf42>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a9c6:	2201      	movs	r2, #1
    a9c8:	4611      	mov	r1, r2
}
    a9ca:	b00f      	add	sp, #60	; 0x3c
    a9cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a9d0:	f7fb baf2 	b.w	5fb8 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a9d4:	fb0a 3212 	mls	r2, sl, r2, r3
    a9d8:	b292      	uxth	r2, r2
    a9da:	fba2 0101 	umull	r0, r1, r2, r1
    a9de:	f240 1323 	movw	r3, #291	; 0x123
    a9e2:	fb03 1102 	mla	r1, r3, r2, r1
    a9e6:	a32c      	add	r3, pc, #176	; (adr r3, aa98 <event_connection_prepare+0x9b0>)
    a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9ec:	f7f5 fc12 	bl	214 <__aeabi_uldivmod>
    a9f0:	eba8 0300 	sub.w	r3, r8, r0
    a9f4:	e6f9      	b.n	a7ea <event_connection_prepare+0x702>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a9f6:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9f8:	a327      	add	r3, pc, #156	; (adr r3, aa98 <event_connection_prepare+0x9b0>)
    a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9fe:	fba1 010b 	umull	r0, r1, r1, fp
    aa02:	f7f5 fc07 	bl	214 <__aeabi_uldivmod>
    aa06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    aa0a:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    aa0c:	4635      	mov	r5, r6
    aa0e:	e747      	b.n	a8a0 <event_connection_prepare+0x7b8>
	if (conn->llcp.chan_map.initiate) {
    aa10:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    aa14:	b30b      	cbz	r3, aa5a <event_connection_prepare+0x972>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    aa16:	482b      	ldr	r0, [pc, #172]	; (aac4 <event_connection_prepare+0x9dc>)
    aa18:	f7fb fa2b 	bl	5e72 <mem_acquire>
		if (node_tx) {
    aa1c:	4607      	mov	r7, r0
    aa1e:	2800      	cmp	r0, #0
    aa20:	f43f ae18 	beq.w	a654 <event_connection_prepare+0x56c>
			conn->llcp.chan_map.initiate = 0;
    aa24:	2300      	movs	r3, #0
    aa26:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    aa2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    aa2c:	3306      	adds	r3, #6
    aa2e:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    aa30:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    aa34:	7903      	ldrb	r3, [r0, #4]
    aa36:	f043 0303 	orr.w	r3, r3, #3
    aa3a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    aa3c:	2308      	movs	r3, #8
    aa3e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    aa40:	2301      	movs	r3, #1
    aa42:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    aa44:	2205      	movs	r2, #5
    aa46:	f104 0179 	add.w	r1, r4, #121	; 0x79
    aa4a:	3008      	adds	r0, #8
    aa4c:	f7f7 f8d6 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    aa50:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    aa54:	f8a7 300d 	strh.w	r3, [r7, #13]
    aa58:	e5f8      	b.n	a64c <event_connection_prepare+0x564>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    aa5a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    aa5e:	1af3      	subs	r3, r6, r3
    aa60:	041f      	lsls	r7, r3, #16
    aa62:	f53f adf7 	bmi.w	a654 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    aa66:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    aa6a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    aa6e:	f104 0717 	add.w	r7, r4, #23
    aa72:	2205      	movs	r2, #5
    aa74:	f104 0179 	add.w	r1, r4, #121	; 0x79
    aa78:	4638      	mov	r0, r7
    aa7a:	f7f7 f8bf 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    aa7e:	2105      	movs	r1, #5
    aa80:	4638      	mov	r0, r7
    aa82:	f7fb fba1 	bl	61c8 <util_ones_count_get>
		conn->data_chan_count =
    aa86:	7f63      	ldrb	r3, [r4, #29]
    aa88:	f360 0305 	bfi	r3, r0, #0, #6
    aa8c:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    aa8e:	2301      	movs	r3, #1
    aa90:	7723      	strb	r3, [r4, #28]
    aa92:	e5df      	b.n	a654 <event_connection_prepare+0x56c>
    aa94:	f3af 8000 	nop.w
    aa98:	1afd498d 	.word	0x1afd498d
    aa9c:	00000007 	.word	0x00000007
    aaa0:	09ce5400 	.word	0x09ce5400
    aaa4:	00012cf2 	.word	0x00012cf2
    aaa8:	000f4240 	.word	0x000f4240
    aaac:	026259ff 	.word	0x026259ff
    aab0:	01c9c37f 	.word	0x01c9c37f
    aab4:	00009a7d 	.word	0x00009a7d
    aab8:	1afd498d 	.word	0x1afd498d
    aabc:	0000b191 	.word	0x0000b191
    aac0:	0000b195 	.word	0x0000b195
    aac4:	200007c4 	.word	0x200007c4
    aac8:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.encryption.initiate) {
    aacc:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    aad0:	f1b9 0f00 	cmp.w	r9, #0
    aad4:	f47f adbe 	bne.w	a654 <event_connection_prepare+0x56c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    aad8:	48d3      	ldr	r0, [pc, #844]	; (ae28 <event_connection_prepare+0xd40>)
    aada:	f7fb f9ca 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    aade:	4607      	mov	r7, r0
    aae0:	2800      	cmp	r0, #0
    aae2:	f43f adb7 	beq.w	a654 <event_connection_prepare+0x56c>
	if (!conn->role) {
    aae6:	f994 301d 	ldrsb.w	r3, [r4, #29]
    aaea:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    aaec:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    aaf0:	db4d      	blt.n	ab8e <event_connection_prepare+0xaa6>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    aaf2:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    aaf6:	465b      	mov	r3, fp
    aaf8:	464a      	mov	r2, r9
    aafa:	f104 0194 	add.w	r1, r4, #148	; 0x94
    aafe:	f104 0084 	add.w	r0, r4, #132	; 0x84
    ab02:	f005 f9a9 	bl	fe58 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    ab06:	2210      	movs	r2, #16
    ab08:	4659      	mov	r1, fp
    ab0a:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    ab0e:	f7f7 f875 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    ab12:	f504 7189 	add.w	r1, r4, #274	; 0x112
    ab16:	2208      	movs	r2, #8
    ab18:	f204 1033 	addw	r0, r4, #307	; 0x133
    ab1c:	f7f7 f86e 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    ab20:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    ab24:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    ab28:	f369 0300 	bfi	r3, r9, #0, #1
    ab2c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    ab30:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    ab34:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    ab38:	f043 0301 	orr.w	r3, r3, #1
    ab3c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    ab40:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    ab44:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    ab48:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    ab4c:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    ab50:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    ab54:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    ab58:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    ab5c:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    ab60:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    ab64:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    ab68:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    ab6c:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    ab70:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    ab74:	4651      	mov	r1, sl
    ab76:	4620      	mov	r0, r4
    ab78:	f7ff fa76 	bl	a068 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    ab7c:	4639      	mov	r1, r7
    ab7e:	4620      	mov	r0, r4
    ab80:	f7ff f9e4 	bl	9f4c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    ab84:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ab88:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    ab8c:	e562      	b.n	a654 <event_connection_prepare+0x56c>
	else if (!conn->pause_tx || conn->refresh) {
    ab8e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ab92:	f003 0348 	and.w	r3, r3, #72	; 0x48
    ab96:	2b08      	cmp	r3, #8
    ab98:	f000 80a2 	beq.w	ace0 <event_connection_prepare+0xbf8>
		if (conn->llcp.encryption.error_code) {
    ab9c:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    aba0:	f1b9 0f00 	cmp.w	r9, #0
    aba4:	d020      	beq.n	abe8 <event_connection_prepare+0xb00>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    aba6:	7903      	ldrb	r3, [r0, #4]
    aba8:	f043 0303 	orr.w	r3, r3, #3
    abac:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    abae:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    abb2:	0698      	lsls	r0, r3, #26
    abb4:	d512      	bpl.n	abdc <event_connection_prepare+0xaf4>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    abb6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    abba:	0759      	lsls	r1, r3, #29
    abbc:	d50e      	bpl.n	abdc <event_connection_prepare+0xaf4>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    abbe:	2311      	movs	r3, #17
    abc0:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    abc2:	2303      	movs	r3, #3
    abc4:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    abc6:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    abca:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    abcc:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    abce:	797b      	ldrb	r3, [r7, #5]
    abd0:	3301      	adds	r3, #1
    abd2:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    abd4:	2300      	movs	r3, #0
    abd6:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    abda:	e7cf      	b.n	ab7c <event_connection_prepare+0xa94>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    abdc:	230d      	movs	r3, #13
    abde:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    abe0:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    abe4:	2301      	movs	r3, #1
    abe6:	e7f1      	b.n	abcc <event_connection_prepare+0xae4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    abe8:	488f      	ldr	r0, [pc, #572]	; (ae28 <event_connection_prepare+0xd40>)
    abea:	f7fb f942 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    abee:	4682      	mov	sl, r0
    abf0:	2800      	cmp	r0, #0
    abf2:	f000 82bd 	beq.w	b170 <event_connection_prepare+0x1088>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    abf6:	7903      	ldrb	r3, [r0, #4]
    abf8:	f043 0303 	orr.w	r3, r3, #3
    abfc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    abfe:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    ac02:	230d      	movs	r3, #13
    ac04:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ac06:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    ac0a:	f100 0308 	add.w	r3, r0, #8
    ac0e:	4619      	mov	r1, r3
    ac10:	2208      	movs	r2, #8
    ac12:	6868      	ldr	r0, [r5, #4]
    ac14:	930d      	str	r3, [sp, #52]	; 0x34
    ac16:	f006 fa6d 	bl	110f4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    ac1a:	f10a 0310 	add.w	r3, sl, #16
    ac1e:	4619      	mov	r1, r3
    ac20:	465a      	mov	r2, fp
    ac22:	6868      	ldr	r0, [r5, #4]
    ac24:	930b      	str	r3, [sp, #44]	; 0x2c
    ac26:	f006 fa65 	bl	110f4 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    ac2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac2c:	2208      	movs	r2, #8
    ac2e:	4619      	mov	r1, r3
    ac30:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    ac34:	f7f6 ffe2 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    ac38:	465a      	mov	r2, fp
    ac3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ac3c:	f504 708b 	add.w	r0, r4, #278	; 0x116
    ac40:	f7f6 ffdc 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    ac44:	4651      	mov	r1, sl
    ac46:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    ac48:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    ac4c:	f7ff f97e 	bl	9f4c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    ac50:	4653      	mov	r3, sl
    ac52:	464a      	mov	r2, r9
    ac54:	f104 0194 	add.w	r1, r4, #148	; 0x94
    ac58:	f104 0084 	add.w	r0, r4, #132	; 0x84
    ac5c:	f005 f8fc 	bl	fe58 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    ac60:	2210      	movs	r2, #16
    ac62:	4651      	mov	r1, sl
    ac64:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    ac68:	f7f6 ffc8 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    ac6c:	2208      	movs	r2, #8
    ac6e:	f504 7189 	add.w	r1, r4, #274	; 0x112
    ac72:	f204 1033 	addw	r0, r4, #307	; 0x133
    ac76:	f7f6 ffc1 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    ac7a:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    ac7e:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    ac82:	f043 0301 	orr.w	r3, r3, #1
    ac86:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    ac8a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    ac8e:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    ac92:	f369 0300 	bfi	r3, r9, #0, #1
    ac96:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    ac9a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    ac9e:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    aca2:	f043 0310 	orr.w	r3, r3, #16
    aca6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    acaa:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    acac:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    acb0:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    acb4:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    acb8:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    acbc:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    acc0:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    acc4:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    acc8:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    accc:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    acd0:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    acd4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    acd6:	2301      	movs	r3, #1
    acd8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    acda:	2305      	movs	r3, #5
    acdc:	71fb      	strb	r3, [r7, #7]
    acde:	e74d      	b.n	ab7c <event_connection_prepare+0xa94>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    ace0:	4651      	mov	r1, sl
    ace2:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    ace6:	f7ff f9bf 	bl	a068 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    acea:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    acee:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    acf2:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    acf6:	f369 03c3 	bfi	r3, r9, #3, #1
    acfa:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    acfe:	e73d      	b.n	ab7c <event_connection_prepare+0xa94>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ad00:	4849      	ldr	r0, [pc, #292]	; (ae28 <event_connection_prepare+0xd40>)
    ad02:	f7fb f8b6 	bl	5e72 <mem_acquire>
	if (node_tx) {
    ad06:	4607      	mov	r7, r0
    ad08:	2800      	cmp	r0, #0
    ad0a:	f43f aca3 	beq.w	a654 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    ad0e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ad12:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    ad16:	4b45      	ldr	r3, [pc, #276]	; (ae2c <event_connection_prepare+0xd44>)
    ad18:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ad1c:	7903      	ldrb	r3, [r0, #4]
    ad1e:	f043 0303 	orr.w	r3, r3, #3
    ad22:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    ad24:	2309      	movs	r3, #9
    ad26:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    ad28:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ad2c:	2b00      	cmp	r3, #0
    ad2e:	bfac      	ite	ge
    ad30:	2308      	movge	r3, #8
    ad32:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ad34:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    ad36:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ad38:	2100      	movs	r1, #0
    ad3a:	4410      	add	r0, r2
    ad3c:	f7f6 ff8a 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    ad40:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    ad44:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    ad46:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    ad48:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    ad4a:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    ad4c:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    ad4e:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    ad50:	4620      	mov	r0, r4
    ad52:	f7ff f8fb 	bl	9f4c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ad56:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ad5a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    ad5e:	e479      	b.n	a654 <event_connection_prepare+0x56c>
	if (conn->llcp_version.tx == 0) {
    ad60:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    ad64:	07da      	lsls	r2, r3, #31
    ad66:	d424      	bmi.n	adb2 <event_connection_prepare+0xcca>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ad68:	482f      	ldr	r0, [pc, #188]	; (ae28 <event_connection_prepare+0xd40>)
    ad6a:	f7fb f882 	bl	5e72 <mem_acquire>
		if (node_tx) {
    ad6e:	4601      	mov	r1, r0
    ad70:	2800      	cmp	r0, #0
    ad72:	f43f ac6f 	beq.w	a654 <event_connection_prepare+0x56c>
			conn->llcp_ack = conn->llcp_req;
    ad76:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ad7a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    ad7e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    ad82:	f043 0301 	orr.w	r3, r3, #1
    ad86:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ad8a:	7903      	ldrb	r3, [r0, #4]
    ad8c:	f043 0303 	orr.w	r3, r3, #3
    ad90:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    ad92:	2306      	movs	r3, #6
    ad94:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    ad96:	230c      	movs	r3, #12
    ad98:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    ad9a:	2309      	movs	r3, #9
    ad9c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    ad9e:	f06f 030e 	mvn.w	r3, #14
    ada2:	7243      	strb	r3, [r0, #9]
    ada4:	2305      	movs	r3, #5
    ada6:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    ada8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    adac:	72c3      	strb	r3, [r0, #11]
    adae:	7303      	strb	r3, [r0, #12]
    adb0:	e7ce      	b.n	ad50 <event_connection_prepare+0xc68>
	} else if (conn->llcp_version.rx != 0) {
    adb2:	079b      	lsls	r3, r3, #30
    adb4:	f57f a9a1 	bpl.w	a0fa <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    adb8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    adbc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    adc0:	2002      	movs	r0, #2
    adc2:	f7fd fce3 	bl	878c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    adc6:	2800      	cmp	r0, #0
    adc8:	f43f a997 	beq.w	a0fa <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    adcc:	8c23      	ldrh	r3, [r4, #32]
    adce:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    add0:	2301      	movs	r3, #1
    add2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    add4:	7a03      	ldrb	r3, [r0, #8]
    add6:	f043 0303 	orr.w	r3, r3, #3
    adda:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    addc:	2306      	movs	r3, #6
    adde:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    ade0:	230c      	movs	r3, #12
    ade2:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    ade4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    ade8:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    adea:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    adee:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    adf2:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    adf6:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    adfa:	f7fe fb31 	bl	9460 <packet_rx_enqueue>
    adfe:	e429      	b.n	a654 <event_connection_prepare+0x56c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ae00:	4809      	ldr	r0, [pc, #36]	; (ae28 <event_connection_prepare+0xd40>)
    ae02:	f7fb f836 	bl	5e72 <mem_acquire>
	if (node_tx) {
    ae06:	4601      	mov	r1, r0
    ae08:	2800      	cmp	r0, #0
    ae0a:	f43f ac23 	beq.w	a654 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    ae0e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ae12:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ae16:	7903      	ldrb	r3, [r0, #4]
    ae18:	f043 0303 	orr.w	r3, r3, #3
    ae1c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    ae1e:	2301      	movs	r3, #1
    ae20:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    ae22:	2312      	movs	r3, #18
    ae24:	71c3      	strb	r3, [r0, #7]
    ae26:	e793      	b.n	ad50 <event_connection_prepare+0xc68>
    ae28:	200007c4 	.word	0x200007c4
    ae2c:	000141ff 	.word	0x000141ff
	if (conn->llcp.phy_upd_ind.initiate) {
    ae30:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    ae34:	07d7      	lsls	r7, r2, #31
    ae36:	d54f      	bpl.n	aed8 <event_connection_prepare+0xdf0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ae38:	48d0      	ldr	r0, [pc, #832]	; (b17c <event_connection_prepare+0x1094>)
    ae3a:	f7fb f81a 	bl	5e72 <mem_acquire>
		if (node_tx) {
    ae3e:	4607      	mov	r7, r0
    ae40:	2800      	cmp	r0, #0
    ae42:	f43f ac07 	beq.w	a654 <event_connection_prepare+0x56c>
			conn->llcp.phy_upd_ind.initiate = 0;
    ae46:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ae4a:	f36f 0300 	bfc	r3, #0, #1
    ae4e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    ae52:	b2db      	uxtb	r3, r3
    ae54:	f3c3 0982 	ubfx	r9, r3, #2, #3
    ae58:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    ae5c:	d136      	bne.n	aecc <event_connection_prepare+0xde4>
				conn->llcp_ack = conn->llcp_req;
    ae5e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    ae62:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    ae66:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    ae68:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    ae6c:	d517      	bpl.n	ae9e <event_connection_prepare+0xdb6>
					node_rx = packet_rx_reserve_get(2);
    ae6e:	2002      	movs	r0, #2
    ae70:	f7fd fc8c 	bl	878c <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    ae74:	2800      	cmp	r0, #0
    ae76:	f43f a940 	beq.w	a0fa <event_connection_prepare+0x12>
					node_rx->hdr.handle = conn->handle;
    ae7a:	8c23      	ldrh	r3, [r4, #32]
    ae7c:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    ae7e:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    ae82:	230c      	movs	r3, #12
    ae84:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    ae86:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ae8a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ae8e:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    ae90:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ae94:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae98:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    ae9a:	f7fe fae1 	bl	9460 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ae9e:	793b      	ldrb	r3, [r7, #4]
    aea0:	f043 0303 	orr.w	r3, r3, #3
    aea4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    aea6:	2305      	movs	r3, #5
    aea8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    aeaa:	2318      	movs	r3, #24
    aeac:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    aeae:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    aeb2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    aeb6:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    aeb8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    aebc:	f3c3 1342 	ubfx	r3, r3, #5, #3
    aec0:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    aec2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    aec6:	817b      	strh	r3, [r7, #10]
    aec8:	f7ff bbc0 	b.w	a64c <event_connection_prepare+0x564>
								 conn->latency +
    aecc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    aece:	3306      	adds	r3, #6
    aed0:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    aed2:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    aed6:	e7e2      	b.n	ae9e <event_connection_prepare+0xdb6>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    aed8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    aedc:	1af3      	subs	r3, r6, r3
    aede:	0419      	lsls	r1, r3, #16
    aee0:	f53f abb8 	bmi.w	a654 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    aee4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    aee8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    aeec:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    aef0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    aef4:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    aef8:	bf18      	it	ne
    aefa:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    aefe:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    af02:	bf1c      	itt	ne
    af04:	f367 03c5 	bfine	r3, r7, #3, #3
    af08:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    af0c:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    af10:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    af14:	d008      	beq.n	af28 <event_connection_prepare+0xe40>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    af16:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    af1a:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    af1e:	095b      	lsrs	r3, r3, #5
    af20:	f363 0702 	bfi	r7, r3, #0, #3
    af24:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    af28:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    af2c:	461f      	mov	r7, r3
    af2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    af32:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    af36:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    af38:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    af3c:	d40b      	bmi.n	af56 <event_connection_prepare+0xe6e>
    af3e:	b2fb      	uxtb	r3, r7
    af40:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    af44:	4283      	cmp	r3, r0
    af46:	d106      	bne.n	af56 <event_connection_prepare+0xe6e>
		    (conn->phy_rx == old_rx)) {
    af48:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    af4c:	f003 0307 	and.w	r3, r3, #7
    af50:	428b      	cmp	r3, r1
    af52:	f43f ab7f 	beq.w	a654 <event_connection_prepare+0x56c>
		node_rx = packet_rx_reserve_get(2);
    af56:	2002      	movs	r0, #2
    af58:	f7fd fc18 	bl	878c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    af5c:	2800      	cmp	r0, #0
    af5e:	f43f a8cc 	beq.w	a0fa <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    af62:	8c23      	ldrh	r3, [r4, #32]
    af64:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    af66:	230c      	movs	r3, #12
    af68:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    af6a:	2300      	movs	r3, #0
    af6c:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    af6e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    af72:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    af76:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    af78:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    af7c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af80:	7343      	strb	r3, [r0, #13]
    af82:	e73a      	b.n	adfa <event_connection_prepare+0xd12>
		free_count_rx = packet_rx_acquired_count_get() +
    af84:	f7fd fbec 	bl	8760 <packet_rx_acquired_count_get>
    af88:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    af8a:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    af8e:	f7fa ff9f 	bl	5ed0 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    af92:	4438      	add	r0, r7
    af94:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    af96:	28ff      	cmp	r0, #255	; 0xff
    af98:	f63f a8af 	bhi.w	a0fa <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    af9c:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    afa0:	4283      	cmp	r3, r0
    afa2:	d129      	bne.n	aff8 <event_connection_prepare+0xf10>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    afa4:	4875      	ldr	r0, [pc, #468]	; (b17c <event_connection_prepare+0x1094>)
    afa6:	f7fa ff64 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    afaa:	4601      	mov	r1, r0
    afac:	b320      	cbz	r0, aff8 <event_connection_prepare+0xf10>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    afae:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    afb2:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    afb6:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    afba:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    afbc:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    afbe:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    afc0:	f365 0301 	bfi	r3, r5, #0, #2
    afc4:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    afc8:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    afca:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    afcc:	f043 0303 	orr.w	r3, r3, #3
    afd0:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    afd2:	2309      	movs	r3, #9
    afd4:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    afd6:	2314      	movs	r3, #20
    afd8:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    afda:	231b      	movs	r3, #27
    afdc:	720b      	strb	r3, [r1, #8]
    afde:	2300      	movs	r3, #0
    afe0:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    afe2:	2348      	movs	r3, #72	; 0x48
    afe4:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    afe6:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    afe8:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    afea:	4620      	mov	r0, r4
    afec:	f7fe ffae 	bl	9f4c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    aff0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    aff4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    aff8:	f894 3020 	ldrb.w	r3, [r4, #32]
    affc:	f994 501d 	ldrsb.w	r5, [r4, #29]
    b000:	485f      	ldr	r0, [pc, #380]	; (b180 <event_connection_prepare+0x1098>)
    b002:	4960      	ldr	r1, [pc, #384]	; (b184 <event_connection_prepare+0x109c>)
    b004:	68a2      	ldr	r2, [r4, #8]
    b006:	9403      	str	r4, [sp, #12]
    b008:	3307      	adds	r3, #7
    b00a:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    b00e:	bf38      	it	cc
    b010:	4601      	movcc	r1, r0
    b012:	b2db      	uxtb	r3, r3
    b014:	e88d 000c 	stmia.w	sp, {r2, r3}
    b018:	9102      	str	r1, [sp, #8]
    b01a:	1d23      	adds	r3, r4, #4
    b01c:	4622      	mov	r2, r4
    b01e:	990c      	ldr	r1, [sp, #48]	; 0x30
    b020:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    b022:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    b024:	f7fe fd68 	bl	9af8 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    b028:	8466      	strh	r6, [r4, #34]	; 0x22
}
    b02a:	b00f      	add	sp, #60	; 0x3c
    b02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    b030:	f7fd fb96 	bl	8760 <packet_rx_acquired_count_get>
    b034:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    b036:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    b03a:	f7fa ff49 	bl	5ed0 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    b03e:	4438      	add	r0, r7
    b040:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    b042:	28ff      	cmp	r0, #255	; 0xff
    b044:	f63f a859 	bhi.w	a0fa <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    b048:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    b04c:	4283      	cmp	r3, r0
    b04e:	f47f a854 	bne.w	a0fa <event_connection_prepare+0x12>
		conn->llcp_length.ack = conn->llcp_length.req;
    b052:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    b056:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    b05a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    b05e:	2100      	movs	r1, #0
    b060:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    b064:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    b068:	f361 02c3 	bfi	r2, r1, #3, #1
    b06c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    b070:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    b074:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    b076:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    b07a:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    b07c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    b080:	f7fa ff26 	bl	5ed0 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    b084:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    b088:	b10b      	cbz	r3, b08e <event_connection_prepare+0xfa6>
			free_count_conn++;
    b08a:	3001      	adds	r0, #1
    b08c:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    b08e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    b092:	b10b      	cbz	r3, b098 <event_connection_prepare+0xfb0>
			free_count_conn++;
    b094:	3001      	adds	r0, #1
    b096:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    b098:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    b09a:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    b09e:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    b0a0:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    b0a2:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    b0a6:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    b0a8:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    b0aa:	d05e      	beq.n	b16a <event_connection_prepare+0x1082>
    b0ac:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    b0b0:	42bb      	cmp	r3, r7
    b0b2:	d35a      	bcc.n	b16a <event_connection_prepare+0x1082>
		node_rx = packet_rx_reserve_get(2);
    b0b4:	2002      	movs	r0, #2
    b0b6:	f7fd fb69 	bl	878c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    b0ba:	2800      	cmp	r0, #0
    b0bc:	f43f a81d 	beq.w	a0fa <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    b0c0:	8c23      	ldrh	r3, [r4, #32]
    b0c2:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    b0c4:	2301      	movs	r3, #1
    b0c6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    b0c8:	7a03      	ldrb	r3, [r0, #8]
    b0ca:	f043 0303 	orr.w	r3, r3, #3
    b0ce:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    b0d0:	2309      	movs	r3, #9
    b0d2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    b0d4:	2315      	movs	r3, #21
    b0d6:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    b0d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    b0da:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    b0dc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    b0de:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    b0e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    b0e2:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    b0e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    b0e6:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    b0e8:	f7fe f9ba 	bl	9460 <packet_rx_enqueue>
    b0ec:	e784      	b.n	aff8 <event_connection_prepare+0xf10>
				if (_radio.packet_rx_acquire == 0) {
    b0ee:	b90b      	cbnz	r3, b0f4 <event_connection_prepare+0x100c>
						_radio.packet_rx_count - 1;
    b0f0:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    b0f4:	3b01      	subs	r3, #1
    b0f6:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    b0fa:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    b0fe:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    b102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b106:	4649      	mov	r1, r9
    b108:	6818      	ldr	r0, [r3, #0]
    b10a:	f7fa fecc 	bl	5ea6 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    b10e:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    b112:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    b116:	3a01      	subs	r2, #1
    b118:	4293      	cmp	r3, r2
    b11a:	f6be afee 	bge.w	a0fa <event_connection_prepare+0x12>
				_radio.link_rx_data_quota++;
    b11e:	3301      	adds	r3, #1
    b120:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    b124:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    b128:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    b12c:	4293      	cmp	r3, r2
    b12e:	d1de      	bne.n	b0ee <event_connection_prepare+0x1006>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    b130:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    b132:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    b136:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    b138:	bf9a      	itte	ls
    b13a:	2334      	movls	r3, #52	; 0x34
    b13c:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    b140:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    b144:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    b148:	fbb2 f2f1 	udiv	r2, r2, r1
    b14c:	b2d2      	uxtb	r2, r2
    b14e:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    b152:	2a00      	cmp	r2, #0
    b154:	f43e afd1 	beq.w	a0fa <event_connection_prepare+0x12>
			mem_init(_radio.pkt_rx_data_pool,
    b158:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    b15c:	4b0a      	ldr	r3, [pc, #40]	; (b188 <event_connection_prepare+0x10a0>)
    b15e:	f7fa fe61 	bl	5e24 <mem_init>
			packet_rx_allocate(4);
    b162:	2004      	movs	r0, #4
    b164:	f7fd fb8a 	bl	887c <packet_rx_allocate>
    b168:	e7a4      	b.n	b0b4 <event_connection_prepare+0xfcc>
				mem_release(node_rx->hdr.onion.link,
    b16a:	f8df 9020 	ldr.w	r9, [pc, #32]	; b18c <event_connection_prepare+0x10a4>
    b16e:	e7d9      	b.n	b124 <event_connection_prepare+0x103c>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    b170:	4902      	ldr	r1, [pc, #8]	; (b17c <event_connection_prepare+0x1094>)
    b172:	4638      	mov	r0, r7
    b174:	f7fa fe97 	bl	5ea6 <mem_release>
    b178:	f7ff ba6c 	b.w	a654 <event_connection_prepare+0x56c>
    b17c:	200007c4 	.word	0x200007c4
    b180:	0000b669 	.word	0x0000b669
    b184:	0000b1d5 	.word	0x0000b1d5
    b188:	20000798 	.word	0x20000798
    b18c:	200007b0 	.word	0x200007b0

0000b190 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    b190:	f7fe bfaa 	b.w	a0e8 <event_connection_prepare>

0000b194 <event_slave_prepare>:
    b194:	f7fe bfa8 	b.w	a0e8 <event_connection_prepare>

0000b198 <connection_configure>:
{
    b198:	b510      	push	{r4, lr}
    b19a:	4604      	mov	r4, r0
	radio_reset();
    b19c:	f004 ff38 	bl	10010 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b1a0:	2000      	movs	r0, #0
    b1a2:	f004 ff5f 	bl	10064 <radio_tx_power_set>
	radio_isr_set(isr);
    b1a6:	480a      	ldr	r0, [pc, #40]	; (b1d0 <connection_configure+0x38>)
    b1a8:	f004 fefc 	bl	ffa4 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    b1ac:	f104 0010 	add.w	r0, r4, #16
    b1b0:	f004 ff76 	bl	100a0 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    b1b4:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    b1b6:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    b1b8:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    b1ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    b1be:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b1c0:	f240 605b 	movw	r0, #1627	; 0x65b
    b1c4:	4319      	orrs	r1, r3
}
    b1c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b1ca:	f005 b811 	b.w	101f0 <radio_crc_configure>
    b1ce:	bf00      	nop
    b1d0:	0000c8f1 	.word	0x0000c8f1

0000b1d4 <event_slave>:
{
    b1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1d8:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    b1da:	4b65      	ldr	r3, [pc, #404]	; (b370 <event_slave+0x19c>)
    b1dc:	7cda      	ldrb	r2, [r3, #19]
{
    b1de:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b1e0:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b1e4:	461d      	mov	r5, r3
    b1e6:	b12a      	cbz	r2, b1f4 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b1e8:	4040      	eors	r0, r0
    b1ea:	f380 8811 	msr	BASEPRI, r0
    b1ee:	f04f 0004 	mov.w	r0, #4
    b1f2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    b1f4:	7c1b      	ldrb	r3, [r3, #16]
    b1f6:	8c22      	ldrh	r2, [r4, #32]
    b1f8:	b2db      	uxtb	r3, r3
    b1fa:	3207      	adds	r2, #7
    b1fc:	4293      	cmp	r3, r2
    b1fe:	d1f3      	bne.n	b1e8 <event_slave+0x14>
	_radio.packet_counter = 0;
    b200:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    b204:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    b208:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    b20a:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    b20c:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    b20e:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    b210:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    b212:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    b214:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    b218:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    b21a:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    b21c:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    b21e:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    b220:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    b222:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    b224:	f7ff ffb8 	bl	b198 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    b228:	2096      	movs	r0, #150	; 0x96
    b22a:	f005 f89b 	bl	10364 <radio_tmr_tifs_set>
				     conn->phy_flags);
    b22e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    b232:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    b236:	09d3      	lsrs	r3, r2, #7
    b238:	4631      	mov	r1, r6
    b23a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    b23e:	f000 0007 	and.w	r0, r0, #7
    b242:	f004 ffff 	bl	10244 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b246:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    b24a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    b24e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    b252:	4620      	mov	r0, r4
    b254:	3108      	adds	r1, #8
    b256:	f7fd fd2d 	bl	8cb4 <rx_packet_set>
	if (conn->data_chan_sel) {
    b25a:	7f63      	ldrb	r3, [r4, #29]
    b25c:	f013 0f40 	tst.w	r3, #64	; 0x40
    b260:	f104 0217 	add.w	r2, r4, #23
    b264:	d059      	beq.n	b31a <event_slave+0x146>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    b266:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    b268:	8be1      	ldrh	r1, [r4, #30]
    b26a:	3801      	subs	r0, #1
    b26c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b270:	b280      	uxth	r0, r0
    b272:	f7fe fd4d 	bl	9d10 <chan_sel_2>
	chan_set(data_chan_use);
    b276:	f7fe f9c9 	bl	960c <chan_set>
	conn->slave.window_widening_event_us +=
    b27a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    b27c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    b27e:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    b280:	2200      	movs	r2, #0
    b282:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    b284:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    b286:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    b288:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    b28a:	bf88      	it	hi
    b28c:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    b28e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    b290:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    b292:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    b294:	4413      	add	r3, r2
    b296:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b298:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    b29a:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b29c:	f107 0109 	add.w	r1, r7, #9
    b2a0:	4630      	mov	r0, r6
    b2a2:	f005 f86b 	bl	1037c <radio_tmr_start>
    b2a6:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    b2a8:	f005 f904 	bl	104b4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    b2ac:	4630      	mov	r0, r6
    b2ae:	f005 f923 	bl	104f8 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    b2b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    b2b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    b2b6:	f103 0650 	add.w	r6, r3, #80	; 0x50
    b2ba:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    b2be:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    b2c2:	2101      	movs	r1, #1
    b2c4:	f000 0007 	and.w	r0, r0, #7
    b2c8:	f004 ff43 	bl	10152 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    b2cc:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    b2ce:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    b2d0:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    b2d4:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    b2d8:	2802      	cmp	r0, #2
    b2da:	d03e      	beq.n	b35a <event_slave+0x186>
		return 40;
    b2dc:	2804      	cmp	r0, #4
    b2de:	bf0c      	ite	eq
    b2e0:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    b2e4:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    b2e6:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    b2e8:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    b2ea:	f004 ff34 	bl	10156 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    b2ee:	4430      	add	r0, r6
    b2f0:	f005 f8c2 	bl	10478 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    b2f4:	f894 1020 	ldrb.w	r1, [r4, #32]
    b2f8:	3107      	adds	r1, #7
    b2fa:	463a      	mov	r2, r7
    b2fc:	b2c9      	uxtb	r1, r1
    b2fe:	4620      	mov	r0, r4
    b300:	f7fe fd4a 	bl	9d98 <preempt_calc>
    b304:	4603      	mov	r3, r0
    b306:	b350      	cbz	r0, b35e <event_slave+0x18a>
		_radio.state = STATE_STOP;
    b308:	2304      	movs	r3, #4
    b30a:	752b      	strb	r3, [r5, #20]
		radio_disable();
    b30c:	f004 ff34 	bl	10178 <radio_disable>
	packet_tx_enqueue(2);
    b310:	2002      	movs	r0, #2
}
    b312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    b316:	f7fe ba23 	b.w	9760 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    b31a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    b31c:	7fa6      	ldrb	r6, [r4, #30]
    b31e:	fb01 6606 	mla	r6, r1, r6, r6
    b322:	7fe1      	ldrb	r1, [r4, #31]
    b324:	2025      	movs	r0, #37	; 0x25
    b326:	440e      	add	r6, r1
    b328:	fb96 f1f0 	sdiv	r1, r6, r0
    b32c:	fb00 6611 	mls	r6, r0, r1, r6
    b330:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b332:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    b334:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b336:	5c51      	ldrb	r1, [r2, r1]
    b338:	f006 0607 	and.w	r6, r6, #7
    b33c:	fa41 f606 	asr.w	r6, r1, r6
    b340:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    b342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b346:	d496      	bmi.n	b276 <event_slave+0xa2>
		chan_index = chan_next % chan_count;
    b348:	fbb0 f1f3 	udiv	r1, r0, r3
    b34c:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    b350:	b2c9      	uxtb	r1, r1
    b352:	4610      	mov	r0, r2
    b354:	f7fd f9e8 	bl	8728 <chan_sel_remap>
    b358:	e78d      	b.n	b276 <event_slave+0xa2>
		return 24;
    b35a:	2318      	movs	r3, #24
    b35c:	e7c3      	b.n	b2e6 <event_slave+0x112>
		ticker_status =
    b35e:	4a05      	ldr	r2, [pc, #20]	; (b374 <event_slave+0x1a0>)
    b360:	4601      	mov	r1, r0
    b362:	f7fb fd17 	bl	6d94 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b366:	f030 0302 	bics.w	r3, r0, #2
    b36a:	f47f af3d 	bne.w	b1e8 <event_slave+0x14>
    b36e:	e7cf      	b.n	b310 <event_slave+0x13c>
    b370:	20000668 	.word	0x20000668
    b374:	00009331 	.word	0x00009331

0000b378 <prepare_pdu_data_tx>:
	    conn->empty ||
    b378:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    b37c:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b382:	4604      	mov	r4, r0
    b384:	460e      	mov	r6, r1
	if (/* empty packet */
    b386:	d109      	bne.n	b39c <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    b388:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    b38c:	b131      	cbz	r1, b39c <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    b38e:	f01c 0f08 	tst.w	ip, #8
    b392:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    b396:	d022      	beq.n	b3de <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    b398:	4571      	cmp	r1, lr
    b39a:	d020      	beq.n	b3de <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    b39c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b3a4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    b3a8:	f004 ff38 	bl	1021c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b3ac:	7803      	ldrb	r3, [r0, #0]
    b3ae:	2201      	movs	r2, #1
    b3b0:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    b3b4:	2200      	movs	r2, #0
    b3b6:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    b3b8:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b3bc:	7003      	strb	r3, [r0, #0]
    b3be:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    b3c0:	b152      	cbz	r2, b3d8 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    b3c2:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    b3c6:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    b3c8:	7803      	ldrb	r3, [r0, #0]
    b3ca:	f36f 1347 	bfc	r3, #5, #3
    b3ce:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    b3d0:	2300      	movs	r3, #0
    b3d2:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    b3d4:	6030      	str	r0, [r6, #0]
    b3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    b3d8:	f362 1304 	bfi	r3, r2, #4, #1
    b3dc:	e7f3      	b.n	b3c6 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    b3de:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    b3e2:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    b3e6:	1d0d      	adds	r5, r1, #4
    b3e8:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    b3ea:	b913      	cbnz	r3, b3f2 <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    b3ec:	7843      	ldrb	r3, [r0, #1]
    b3ee:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    b3f2:	b122      	cbz	r2, b3fe <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b3f4:	5cab      	ldrb	r3, [r5, r2]
    b3f6:	2701      	movs	r7, #1
    b3f8:	f367 0301 	bfi	r3, r7, #0, #2
    b3fc:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    b3fe:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    b402:	1abf      	subs	r7, r7, r2
    b404:	b2ff      	uxtb	r7, r7
    b406:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    b408:	5cab      	ldrb	r3, [r5, r2]
    b40a:	f36f 1304 	bfc	r3, #4, #1
    b40e:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    b410:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    b414:	f003 0307 	and.w	r3, r3, #7
    b418:	2b02      	cmp	r3, #2
    b41a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    b41c:	bf15      	itete	ne
    b41e:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    b420:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    b422:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    b424:	3b0b      	subeq	r3, #11
    b426:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    b428:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    b42c:	bf18      	it	ne
    b42e:	3b04      	subne	r3, #4
    b430:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    b434:	bf18      	it	ne
    b436:	b29b      	uxthne	r3, r3
    b438:	4563      	cmp	r3, ip
    b43a:	bf28      	it	cs
    b43c:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    b43e:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    b440:	bf81      	itttt	hi
    b442:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    b444:	5cab      	ldrbhi	r3, [r5, r2]
    b446:	f043 0310 	orrhi.w	r3, r3, #16
    b44a:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    b44c:	680b      	ldr	r3, [r1, #0]
    b44e:	b11b      	cbz	r3, b458 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    b450:	5cab      	ldrb	r3, [r5, r2]
    b452:	f043 0310 	orr.w	r3, r3, #16
    b456:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    b458:	f1be 0f00 	cmp.w	lr, #0
    b45c:	d1b4      	bne.n	b3c8 <prepare_pdu_data_tx+0x50>
    b45e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b462:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    b464:	bf1c      	itt	ne
    b466:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    b46a:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    b46e:	e7ab      	b.n	b3c8 <prepare_pdu_data_tx+0x50>

0000b470 <mayfly_xtal_stop_calc>:
{
    b470:	b5f0      	push	{r4, r5, r6, r7, lr}
    b472:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b474:	2302      	movs	r3, #2
    b476:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b478:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b47a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b47c:	4e74      	ldr	r6, [pc, #464]	; (b650 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    b47e:	4d75      	ldr	r5, [pc, #468]	; (b654 <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
    b480:	930a      	str	r3, [sp, #40]	; 0x28
{
    b482:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b484:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b486:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b48a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b48c:	ab09      	add	r3, sp, #36	; 0x24
    b48e:	9302      	str	r3, [sp, #8]
    b490:	ab0c      	add	r3, sp, #48	; 0x30
    b492:	9300      	str	r3, [sp, #0]
    b494:	9601      	str	r6, [sp, #4]
    b496:	ab0d      	add	r3, sp, #52	; 0x34
    b498:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b49c:	2101      	movs	r1, #1
    b49e:	2000      	movs	r0, #0
    b4a0:	f7fb fc36 	bl	6d10 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b4a4:	2802      	cmp	r0, #2
    b4a6:	d00b      	beq.n	b4c0 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b4aa:	b16b      	cbz	r3, b4c8 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b4ac:	4040      	eors	r0, r0
    b4ae:	f380 8811 	msr	BASEPRI, r0
    b4b2:	f04f 0004 	mov.w	r0, #4
    b4b6:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b4b8:	2101      	movs	r1, #1
    b4ba:	2000      	movs	r0, #0
    b4bc:	f7fb fca6 	bl	6e0c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b4c2:	2b02      	cmp	r3, #2
    b4c4:	d0f8      	beq.n	b4b8 <mayfly_xtal_stop_calc+0x48>
    b4c6:	e7ef      	b.n	b4a8 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b4c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b4cc:	2bff      	cmp	r3, #255	; 0xff
    b4ce:	d004      	beq.n	b4da <mayfly_xtal_stop_calc+0x6a>
    b4d0:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b4d4:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b4d6:	4293      	cmp	r3, r2
    b4d8:	dad8      	bge.n	b48c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b4da:	1f5a      	subs	r2, r3, #5
    b4dc:	b2d2      	uxtb	r2, r2
    b4de:	2af9      	cmp	r2, #249	; 0xf9
    b4e0:	4f5d      	ldr	r7, [pc, #372]	; (b658 <mayfly_xtal_stop_calc+0x1e8>)
    b4e2:	d805      	bhi.n	b4f0 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
    b4e4:	4a5b      	ldr	r2, [pc, #364]	; (b654 <mayfly_xtal_stop_calc+0x1e4>)
    b4e6:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b4ea:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b4ec:	4293      	cmp	r3, r2
    b4ee:	db06      	blt.n	b4fe <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
    b4f0:	783b      	ldrb	r3, [r7, #0]
    b4f2:	b113      	cbz	r3, b4fa <mayfly_xtal_stop_calc+0x8a>
    b4f4:	2001      	movs	r0, #1
    b4f6:	f7fd ff45 	bl	9384 <mayfly_xtal_retain.part.13>
}
    b4fa:	b00f      	add	sp, #60	; 0x3c
    b4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b4fe:	a90a      	add	r1, sp, #40	; 0x28
    b500:	b2e0      	uxtb	r0, r4
    b502:	f7fd ff21 	bl	9348 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b506:	2800      	cmp	r0, #0
    b508:	d0d0      	beq.n	b4ac <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b50a:	6803      	ldr	r3, [r0, #0]
    b50c:	6844      	ldr	r4, [r0, #4]
    b50e:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b510:	bfb8      	it	lt
    b512:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b514:	429c      	cmp	r4, r3
    b516:	bf38      	it	cc
    b518:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b51a:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b51c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b520:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b522:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b524:	f7fd ff10 	bl	9348 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b528:	4605      	mov	r5, r0
    b52a:	2800      	cmp	r0, #0
    b52c:	d0be      	beq.n	b4ac <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next =
    b52e:	6886      	ldr	r6, [r0, #8]
    b530:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b532:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b534:	429e      	cmp	r6, r3
    b536:	bf38      	it	cc
    b538:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b53a:	2a00      	cmp	r2, #0
    b53c:	da05      	bge.n	b54a <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
    b53e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b540:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b544:	4433      	add	r3, r6
    b546:	1a9b      	subs	r3, r3, r2
    b548:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b54a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b54c:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b550:	4293      	cmp	r3, r2
    b552:	d20b      	bcs.n	b56c <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
    b554:	783b      	ldrb	r3, [r7, #0]
    b556:	b113      	cbz	r3, b55e <mayfly_xtal_stop_calc+0xee>
    b558:	2001      	movs	r0, #1
    b55a:	f7fd ff13 	bl	9384 <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b55e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b562:	2101      	movs	r1, #1
    b564:	4628      	mov	r0, r5
    b566:	f7fd ff2f 	bl	93c8 <prepare_normal_set>
    b56a:	e7c6      	b.n	b4fa <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
    b56c:	783a      	ldrb	r2, [r7, #0]
    b56e:	b93a      	cbnz	r2, b580 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
    b570:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    b572:	4b3a      	ldr	r3, [pc, #232]	; (b65c <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    b574:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    b576:	4611      	mov	r1, r2
    b578:	f7fa fd46 	bl	6008 <mayfly_enqueue>
			LL_ASSERT(!retval);
    b57c:	2800      	cmp	r0, #0
    b57e:	d195      	bne.n	b4ac <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b580:	682b      	ldr	r3, [r5, #0]
    b582:	2b00      	cmp	r3, #0
    b584:	db15      	blt.n	b5b2 <mayfly_xtal_stop_calc+0x142>
    b586:	429e      	cmp	r6, r3
    b588:	d213      	bcs.n	b5b2 <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b58a:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b58c:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b58e:	b29b      	uxth	r3, r3
			ticker_status =
    b590:	4933      	ldr	r1, [pc, #204]	; (b660 <mayfly_xtal_stop_calc+0x1f0>)
    b592:	9105      	str	r1, [sp, #20]
    b594:	9302      	str	r3, [sp, #8]
    b596:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b59a:	9506      	str	r5, [sp, #24]
    b59c:	9004      	str	r0, [sp, #16]
    b59e:	9003      	str	r0, [sp, #12]
    b5a0:	9001      	str	r0, [sp, #4]
    b5a2:	9000      	str	r0, [sp, #0]
    b5a4:	2101      	movs	r1, #1
    b5a6:	f7fb fb29 	bl	6bfc <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5aa:	f030 0302 	bics.w	r3, r0, #2
    b5ae:	f47f af7d 	bne.w	b4ac <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
    b5b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b5b4:	2e00      	cmp	r6, #0
    b5b6:	d0a0      	beq.n	b4fa <mayfly_xtal_stop_calc+0x8a>
    b5b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b5ba:	2d00      	cmp	r5, #0
    b5bc:	d09d      	beq.n	b4fa <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b5be:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b5c0:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b5c2:	429a      	cmp	r2, r3
    b5c4:	d199      	bne.n	b4fa <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b5c6:	4827      	ldr	r0, [pc, #156]	; (b664 <mayfly_xtal_stop_calc+0x1f4>)
    b5c8:	b292      	uxth	r2, r2
    b5ca:	fba2 0100 	umull	r0, r1, r2, r0
    b5ce:	f240 1323 	movw	r3, #291	; 0x123
    b5d2:	fb03 1102 	mla	r1, r3, r2, r1
    b5d6:	a31c      	add	r3, pc, #112	; (adr r3, b648 <mayfly_xtal_stop_calc+0x1d8>)
    b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b5dc:	f7f4 fe1a 	bl	214 <__aeabi_uldivmod>
    b5e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b5e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b5e6:	2200      	movs	r2, #0
    b5e8:	4298      	cmp	r0, r3
    b5ea:	d318      	bcc.n	b61e <mayfly_xtal_stop_calc+0x1ae>
    b5ec:	b102      	cbz	r2, b5f0 <mayfly_xtal_stop_calc+0x180>
    b5ee:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b5f0:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b5f4:	2a00      	cmp	r2, #0
    b5f6:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b5fa:	da13      	bge.n	b624 <mayfly_xtal_stop_calc+0x1b4>
    b5fc:	2a00      	cmp	r2, #0
    b5fe:	f6ff af7c 	blt.w	b4fa <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
    b602:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b604:	429c      	cmp	r4, r3
    b606:	f67f af78 	bls.w	b4fa <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
    b60a:	4630      	mov	r0, r6
    b60c:	f7fd f8d0 	bl	87b0 <conn_update_req>
				if (status == 2) {
    b610:	2802      	cmp	r0, #2
    b612:	f47f af72 	bne.w	b4fa <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
    b616:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b618:	f7fd f8ca 	bl	87b0 <conn_update_req>
    b61c:	e76d      	b.n	b4fa <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
    b61e:	1a1b      	subs	r3, r3, r0
    b620:	2201      	movs	r2, #1
    b622:	e7e1      	b.n	b5e8 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
    b624:	2a00      	cmp	r2, #0
    b626:	f6bf af68 	bge.w	b4fa <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
    b62a:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b62c:	429c      	cmp	r4, r3
    b62e:	f67f af64 	bls.w	b4fa <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
    b632:	4628      	mov	r0, r5
    b634:	f7fd f8bc 	bl	87b0 <conn_update_req>
				if (status == 2) {
    b638:	2802      	cmp	r0, #2
    b63a:	f47f af5e 	bne.w	b4fa <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
    b63e:	980a      	ldr	r0, [sp, #40]	; 0x28
    b640:	e7ea      	b.n	b618 <mayfly_xtal_stop_calc+0x1a8>
    b642:	bf00      	nop
    b644:	f3af 8000 	nop.w
    b648:	1afd498d 	.word	0x1afd498d
    b64c:	00000007 	.word	0x00000007
    b650:	0000870d 	.word	0x0000870d
    b654:	20000668 	.word	0x20000668
    b658:	20000868 	.word	0x20000868
    b65c:	200037e8 	.word	0x200037e8
    b660:	00008711 	.word	0x00008711
    b664:	09ce5400 	.word	0x09ce5400

0000b668 <event_master>:
{
    b668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b66a:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    b66c:	4b4a      	ldr	r3, [pc, #296]	; (b798 <event_master+0x130>)
    b66e:	7cd9      	ldrb	r1, [r3, #19]
{
    b670:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b672:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    b676:	461d      	mov	r5, r3
    b678:	b129      	cbz	r1, b686 <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b67a:	4040      	eors	r0, r0
    b67c:	f380 8811 	msr	BASEPRI, r0
    b680:	f04f 0004 	mov.w	r0, #4
    b684:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    b686:	7c1b      	ldrb	r3, [r3, #16]
    b688:	8c21      	ldrh	r1, [r4, #32]
    b68a:	b2db      	uxtb	r3, r3
    b68c:	3107      	adds	r1, #7
    b68e:	428b      	cmp	r3, r1
    b690:	d1f3      	bne.n	b67a <event_master+0x12>
	_radio.packet_counter = 0;
    b692:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    b696:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    b69a:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    b69c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    b69e:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    b6a0:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    b6a2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    b6a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    b6a6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    b6aa:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    b6ac:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    b6ae:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    b6b0:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    b6b2:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    b6b4:	f7fe f854 	bl	9760 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    b6b8:	a901      	add	r1, sp, #4
    b6ba:	4620      	mov	r0, r4
    b6bc:	f7ff fe5c 	bl	b378 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    b6c0:	9901      	ldr	r1, [sp, #4]
    b6c2:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    b6c6:	780b      	ldrb	r3, [r1, #0]
    b6c8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    b6cc:	f3c2 0240 	ubfx	r2, r2, #1, #1
    b6d0:	f362 0382 	bfi	r3, r2, #2, #1
    b6d4:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    b6d6:	4620      	mov	r0, r4
    b6d8:	f7ff fd5e 	bl	b198 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    b6dc:	2096      	movs	r0, #150	; 0x96
    b6de:	f004 fe41 	bl	10364 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    b6e2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    b6e6:	f000 0007 	and.w	r0, r0, #7
    b6ea:	f004 fd9f 	bl	1022c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    b6ee:	9901      	ldr	r1, [sp, #4]
    b6f0:	4620      	mov	r0, r4
    b6f2:	f7fd fb0b 	bl	8d0c <tx_packet_set>
	if (conn->data_chan_sel) {
    b6f6:	7f63      	ldrb	r3, [r4, #29]
    b6f8:	f013 0f40 	tst.w	r3, #64	; 0x40
    b6fc:	f104 0217 	add.w	r2, r4, #23
    b700:	d021      	beq.n	b746 <event_master+0xde>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    b702:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    b704:	8be1      	ldrh	r1, [r4, #30]
    b706:	3801      	subs	r0, #1
    b708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b70c:	b280      	uxth	r0, r0
    b70e:	f7fe faff 	bl	9d10 <chan_sel_2>
	chan_set(data_chan_use);
    b712:	f7fd ff7b 	bl	960c <chan_set>
		remainder_us = radio_tmr_start(1,
    b716:	68ea      	ldr	r2, [r5, #12]
    b718:	f107 0109 	add.w	r1, r7, #9
    b71c:	2001      	movs	r0, #1
    b71e:	f004 fe2d 	bl	1037c <radio_tmr_start>
		radio_tmr_end_capture();
    b722:	f004 fefb 	bl	1051c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    b726:	f894 1020 	ldrb.w	r1, [r4, #32]
    b72a:	3107      	adds	r1, #7
    b72c:	463a      	mov	r2, r7
    b72e:	b2c9      	uxtb	r1, r1
    b730:	4620      	mov	r0, r4
    b732:	f7fe fb31 	bl	9d98 <preempt_calc>
	if (0 !=
    b736:	4603      	mov	r3, r0
    b738:	b328      	cbz	r0, b786 <event_master+0x11e>
		_radio.state = STATE_STOP;
    b73a:	2304      	movs	r3, #4
    b73c:	752b      	strb	r3, [r5, #20]
		radio_disable();
    b73e:	f004 fd1b 	bl	10178 <radio_disable>
}
    b742:	b003      	add	sp, #12
    b744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    b746:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    b748:	7fa6      	ldrb	r6, [r4, #30]
    b74a:	fb01 6606 	mla	r6, r1, r6, r6
    b74e:	7fe1      	ldrb	r1, [r4, #31]
    b750:	2025      	movs	r0, #37	; 0x25
    b752:	440e      	add	r6, r1
    b754:	fb96 f1f0 	sdiv	r1, r6, r0
    b758:	fb00 6611 	mls	r6, r0, r1, r6
    b75c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b75e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    b760:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b762:	5c51      	ldrb	r1, [r2, r1]
    b764:	f006 0607 	and.w	r6, r6, #7
    b768:	fa41 f606 	asr.w	r6, r1, r6
    b76c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    b76e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b772:	d4ce      	bmi.n	b712 <event_master+0xaa>
		chan_index = chan_next % chan_count;
    b774:	fbb0 f1f3 	udiv	r1, r0, r3
    b778:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    b77c:	b2c9      	uxtb	r1, r1
    b77e:	4610      	mov	r0, r2
    b780:	f7fc ffd2 	bl	8728 <chan_sel_remap>
    b784:	e7c5      	b.n	b712 <event_master+0xaa>
		ticker_status =
    b786:	4a05      	ldr	r2, [pc, #20]	; (b79c <event_master+0x134>)
    b788:	4601      	mov	r1, r0
    b78a:	f7fb fb03 	bl	6d94 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b78e:	f030 0302 	bics.w	r3, r0, #2
    b792:	f47f af72 	bne.w	b67a <event_master+0x12>
    b796:	e7d4      	b.n	b742 <event_master+0xda>
    b798:	20000668 	.word	0x20000668
    b79c:	00009331 	.word	0x00009331

0000b7a0 <isr_rx_conn_pkt_ctrl>:
{
    b7a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    b7a4:	7ac7      	ldrb	r7, [r0, #11]
{
    b7a6:	4604      	mov	r4, r0
    b7a8:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    b7aa:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    b7ae:	2f19      	cmp	r7, #25
    b7b0:	f201 8071 	bhi.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
    b7b4:	e8df f017 	tbh	[pc, r7, lsl #1]
    b7b8:	0080001a 	.word	0x0080001a
    b7bc:	00c600b6 	.word	0x00c600b6
    b7c0:	011c00f4 	.word	0x011c00f4
    b7c4:	05800141 	.word	0x05800141
    b7c8:	019e017e 	.word	0x019e017e
    b7cc:	01fb01d0 	.word	0x01fb01d0
    b7d0:	0295022c 	.word	0x0295022c
    b7d4:	02ae0193 	.word	0x02ae0193
    b7d8:	047d03f9 	.word	0x047d03f9
    b7dc:	05720558 	.word	0x05720558
    b7e0:	05f805f8 	.word	0x05f805f8
    b7e4:	078006c1 	.word	0x078006c1
    b7e8:	083c07b7 	.word	0x083c07b7
		if (!_radio.conn_curr->role ||
    b7ec:	4ed9      	ldr	r6, [pc, #868]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b7ee:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    b7f2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	f281 804d 	bge.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    b7fc:	7a41      	ldrb	r1, [r0, #9]
    b7fe:	2000      	movs	r0, #0
    b800:	f7fc ff66 	bl	86d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b804:	2800      	cmp	r0, #0
    b806:	f001 8046 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    b80a:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    b80e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    b810:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    b812:	041b      	lsls	r3, r3, #16
    b814:	f101 8055 	bmi.w	c8c2 <isr_rx_conn_pkt_ctrl+0x1122>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b818:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    b81c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    b820:	429a      	cmp	r2, r3
    b822:	d005      	beq.n	b830 <isr_rx_conn_pkt_ctrl+0x90>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b824:	4040      	eors	r0, r0
    b826:	f380 8811 	msr	BASEPRI, r0
    b82a:	f04f 0004 	mov.w	r0, #4
    b82e:	df02      	svc	2
	if (_radio.conn_upd == 0) {
    b830:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    b834:	b90a      	cbnz	r2, b83a <isr_rx_conn_pkt_ctrl+0x9a>
		_radio.conn_upd = conn;
    b836:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    b83a:	7b22      	ldrb	r2, [r4, #12]
    b83c:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    b840:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    b844:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b848:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    b84a:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    b84e:	7c20      	ldrb	r0, [r4, #16]
    b850:	7be2      	ldrb	r2, [r4, #15]
    b852:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    b856:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    b85a:	7ca0      	ldrb	r0, [r4, #18]
    b85c:	7c62      	ldrb	r2, [r4, #17]
    b85e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    b862:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    b866:	7ce2      	ldrb	r2, [r4, #19]
    b868:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    b86a:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    b86e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    b872:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    b876:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    b87a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    b87e:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    b882:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    b884:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    b888:	2201      	movs	r2, #1
    b88a:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    b88e:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    b892:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    b896:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    b89a:	4293      	cmp	r3, r2
    b89c:	d007      	beq.n	b8ae <isr_rx_conn_pkt_ctrl+0x10e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    b89e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    b8a2:	f003 0307 	and.w	r3, r3, #7
    b8a6:	2b04      	cmp	r3, #4
    b8a8:	d101      	bne.n	b8ae <isr_rx_conn_pkt_ctrl+0x10e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b8aa:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    b8ae:	2000      	movs	r0, #0
    b8b0:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    b8b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    b8b8:	4ba6      	ldr	r3, [pc, #664]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b8ba:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b8be:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	f280 87e7 	bge.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    b8c8:	7a41      	ldrb	r1, [r0, #9]
    b8ca:	2001      	movs	r0, #1
    b8cc:	f7fc ff00 	bl	86d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b8d0:	2800      	cmp	r0, #0
    b8d2:	f000 87e0 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    b8d6:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    b8da:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    b8dc:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    b8de:	041f      	lsls	r7, r3, #16
    b8e0:	f100 87ef 	bmi.w	c8c2 <isr_rx_conn_pkt_ctrl+0x1122>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b8e4:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    b8e8:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    b8ec:	429a      	cmp	r2, r3
    b8ee:	d199      	bne.n	b824 <isr_rx_conn_pkt_ctrl+0x84>
	memcpy(&conn->llcp.chan_map.chm[0],
    b8f0:	2205      	movs	r2, #5
    b8f2:	f104 010c 	add.w	r1, r4, #12
    b8f6:	f105 0079 	add.w	r0, r5, #121	; 0x79
    b8fa:	f7f6 f97f 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    b8fe:	7c63      	ldrb	r3, [r4, #17]
    b900:	7ca2      	ldrb	r2, [r4, #18]
    b902:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    b906:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    b90a:	2302      	movs	r3, #2
    b90c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    b910:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    b914:	2000      	movs	r0, #0
	conn->llcp_ack--;
    b916:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    b918:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    b91c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    b920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    b924:	7a41      	ldrb	r1, [r0, #9]
    b926:	2002      	movs	r0, #2
    b928:	f7fc fed2 	bl	86d0 <pdu_len_cmp>
    b92c:	2800      	cmp	r0, #0
    b92e:	f000 87b2 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->llcp_terminate.reason_peer =
    b932:	4b88      	ldr	r3, [pc, #544]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b934:	7b22      	ldrb	r2, [r4, #12]
    b936:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    b93a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    b93e:	2000      	movs	r0, #0
}
    b940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    b944:	4e83      	ldr	r6, [pc, #524]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b946:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    b94a:	f998 301d 	ldrsb.w	r3, [r8, #29]
    b94e:	2b00      	cmp	r3, #0
    b950:	f280 87a1 	bge.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    b954:	7a41      	ldrb	r1, [r0, #9]
    b956:	2003      	movs	r0, #3
    b958:	f7fc feba 	bl	86d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b95c:	2800      	cmp	r0, #0
    b95e:	f000 879a 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    b962:	2208      	movs	r2, #8
    b964:	f104 0116 	add.w	r1, r4, #22
    b968:	f108 0094 	add.w	r0, r8, #148	; 0x94
    b96c:	f7f6 f946 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    b970:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    b974:	2204      	movs	r2, #4
    b976:	f104 011e 	add.w	r1, r4, #30
    b97a:	f500 7089 	add.w	r0, r0, #274	; 0x112
    b97e:	f7f6 f93d 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    b982:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    b986:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    b98a:	f042 0204 	orr.w	r2, r2, #4
    b98e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    b992:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    b996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    b99a:	2301      	movs	r3, #1
    b99c:	702b      	strb	r3, [r5, #0]
    b99e:	e7ce      	b.n	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
    b9a0:	4d6c      	ldr	r5, [pc, #432]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b9a2:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    b9a6:	f996 301d 	ldrsb.w	r3, [r6, #29]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	f2c0 8773 	blt.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    b9b0:	7a41      	ldrb	r1, [r0, #9]
    b9b2:	2004      	movs	r0, #4
    b9b4:	f7fc fe8c 	bl	86d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    b9b8:	2800      	cmp	r0, #0
    b9ba:	f000 876c 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    b9be:	2208      	movs	r2, #8
    b9c0:	f104 010c 	add.w	r1, r4, #12
    b9c4:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    b9c8:	f7f6 f918 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    b9cc:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    b9d0:	2204      	movs	r2, #4
    b9d2:	f104 0114 	add.w	r1, r4, #20
    b9d6:	f500 708b 	add.w	r0, r0, #278	; 0x116
    b9da:	f7f6 f90f 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    b9de:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    b9e2:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    b9e6:	f043 0304 	orr.w	r3, r3, #4
    b9ea:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    b9ee:	e7a6      	b.n	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    b9f0:	4b58      	ldr	r3, [pc, #352]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b9f2:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b9f6:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    b9fa:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    b9fe:	42b3      	cmp	r3, r6
    ba00:	d004      	beq.n	ba0c <isr_rx_conn_pkt_ctrl+0x26c>
    ba02:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    ba06:	2b03      	cmp	r3, #3
    ba08:	f47f af0c 	bne.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
		if (_radio.conn_curr->role ||
    ba0c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    ba10:	2b00      	cmp	r3, #0
    ba12:	f2c0 8740 	blt.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    ba16:	7a61      	ldrb	r1, [r4, #9]
    ba18:	2005      	movs	r0, #5
    ba1a:	f7fc fe59 	bl	86d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    ba1e:	2800      	cmp	r0, #0
    ba20:	f000 8739 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    ba24:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_ack--;
    ba26:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    ba28:	2303      	movs	r3, #3
		_radio.conn_curr->llcp.encryption.initiate = 0;
    ba2a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_ack--;
    ba2e:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    ba32:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		break;
    ba36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    ba3a:	7a41      	ldrb	r1, [r0, #9]
    ba3c:	2006      	movs	r0, #6
    ba3e:	f7fc fe47 	bl	86d0 <pdu_len_cmp>
    ba42:	2800      	cmp	r0, #0
    ba44:	f000 8727 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.role == ROLE_SLAVE) {
    ba48:	4b42      	ldr	r3, [pc, #264]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    ba4a:	7cda      	ldrb	r2, [r3, #19]
    ba4c:	2a03      	cmp	r2, #3
    ba4e:	4619      	mov	r1, r3
    ba50:	d125      	bne.n	ba9e <isr_rx_conn_pkt_ctrl+0x2fe>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    ba52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    ba56:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    ba5a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    ba5e:	4290      	cmp	r0, r2
    ba60:	d004      	beq.n	ba6c <isr_rx_conn_pkt_ctrl+0x2cc>
    ba62:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    ba66:	2803      	cmp	r0, #3
    ba68:	f47f aedc 	bne.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    ba6c:	2000      	movs	r0, #0
    ba6e:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    ba72:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    ba74:	2003      	movs	r0, #3
    ba76:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    ba7a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    ba7e:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    ba82:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    ba86:	065e      	lsls	r6, r3, #25
    ba88:	d505      	bpl.n	ba96 <isr_rx_conn_pkt_ctrl+0x2f6>
			_radio.conn_curr->refresh = 0;
    ba8a:	f36f 1386 	bfc	r3, #6, #1
    ba8e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    ba92:	2309      	movs	r3, #9
    ba94:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    ba96:	2301      	movs	r3, #1
    ba98:	702b      	strb	r3, [r5, #0]
				break;
    ba9a:	f000 bc81 	b.w	c3a0 <isr_rx_conn_pkt_ctrl+0xc00>
			_radio.conn_curr->pause_rx = 0;
    ba9e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    baa2:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    baa6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    baaa:	f36f 03c3 	bfc	r3, #3, #1
    baae:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    bab2:	e7e4      	b.n	ba7e <isr_rx_conn_pkt_ctrl+0x2de>
		if (!_radio.conn_curr->role ||
    bab4:	4b27      	ldr	r3, [pc, #156]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    bab6:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    baba:	f995 301d 	ldrsb.w	r3, [r5, #29]
    babe:	2b00      	cmp	r3, #0
    bac0:	f280 86e9 	bge.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    bac4:	7a41      	ldrb	r1, [r0, #9]
    bac6:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    bac8:	f7fc fe02 	bl	86d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    bacc:	2800      	cmp	r0, #0
    bace:	f000 86e2 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    bad2:	4631      	mov	r1, r6
    bad4:	4628      	mov	r0, r5
}
    bad6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    bada:	f7fe ba7f 	b.w	9fdc <feature_rsp_send>
		if (_radio.conn_curr->role ||
    bade:	4b1d      	ldr	r3, [pc, #116]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
    bae0:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    bae4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    bae8:	2b00      	cmp	r3, #0
    baea:	f2c0 86d4 	blt.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    baee:	7a41      	ldrb	r1, [r0, #9]
    baf0:	200e      	movs	r0, #14
    baf2:	e7e9      	b.n	bac8 <isr_rx_conn_pkt_ctrl+0x328>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    baf4:	7a41      	ldrb	r1, [r0, #9]
    baf6:	2009      	movs	r0, #9
    baf8:	f7fc fdea 	bl	86d0 <pdu_len_cmp>
    bafc:	2800      	cmp	r0, #0
    bafe:	f000 86ca 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bb02:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    bb04:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    bb06:	4813      	ldr	r0, [pc, #76]	; (bb54 <isr_rx_conn_pkt_ctrl+0x3b4>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bb08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    bb0c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    bb10:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    bb14:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    bb18:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bb1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    bb20:	7ba1      	ldrb	r1, [r4, #14]
    bb22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    bb26:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    bb2a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    bb2e:	400b      	ands	r3, r1
    bb30:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    bb34:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    bb38:	f043 0320 	orr.w	r3, r3, #32
    bb3c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    bb40:	2301      	movs	r3, #1
    bb42:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    bb44:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    bb48:	2000      	movs	r0, #0
    bb4a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    bb4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb52:	bf00      	nop
    bb54:	20000668 	.word	0x20000668
		if (!_radio.conn_curr->role ||
    bb58:	4ed1      	ldr	r6, [pc, #836]	; (bea0 <isr_rx_conn_pkt_ctrl+0x700>)
    bb5a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    bb5e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    bb62:	2b00      	cmp	r3, #0
    bb64:	f280 8697 	bge.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    bb68:	7a41      	ldrb	r1, [r0, #9]
    bb6a:	200a      	movs	r0, #10
    bb6c:	f7fc fdb0 	bl	86d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    bb70:	2800      	cmp	r0, #0
    bb72:	f000 8690 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb76:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    bb7a:	f7fa f97a 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    bb7e:	4601      	mov	r1, r0
    bb80:	b910      	cbnz	r0, bb88 <isr_rx_conn_pkt_ctrl+0x3e8>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    bb82:	2001      	movs	r0, #1
    bb84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->refresh = 1;
    bb88:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    bb8c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    bb90:	f36f 1304 	bfc	r3, #4, #1
    bb94:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb98:	7903      	ldrb	r3, [r0, #4]
    bb9a:	f043 0303 	orr.w	r3, r3, #3
    bb9e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    bba0:	2301      	movs	r3, #1
    bba2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    bba4:	230b      	movs	r3, #11
    bba6:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    bba8:	4628      	mov	r0, r5
    bbaa:	f000 bc9d 	b.w	c4e8 <isr_rx_conn_pkt_ctrl+0xd48>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    bbae:	7a41      	ldrb	r1, [r0, #9]
    bbb0:	200b      	movs	r0, #11
    bbb2:	f7fc fd8d 	bl	86d0 <pdu_len_cmp>
    bbb6:	2800      	cmp	r0, #0
    bbb8:	f000 866d 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    bbbc:	48b8      	ldr	r0, [pc, #736]	; (bea0 <isr_rx_conn_pkt_ctrl+0x700>)
    bbbe:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    bbc2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	db1b      	blt.n	bc02 <isr_rx_conn_pkt_ctrl+0x462>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bbca:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    bbce:	f7fa f950 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    bbd2:	4601      	mov	r1, r0
    bbd4:	2800      	cmp	r0, #0
    bbd6:	d0d4      	beq.n	bb82 <isr_rx_conn_pkt_ctrl+0x3e2>
		conn->enc_tx = 0;
    bbd8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    bbdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    bbe0:	f043 0304 	orr.w	r3, r3, #4
    bbe4:	f36f 1304 	bfc	r3, #4, #1
    bbe8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bbec:	7903      	ldrb	r3, [r0, #4]
    bbee:	f043 0303 	orr.w	r3, r3, #3
    bbf2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    bbf4:	2301      	movs	r3, #1
    bbf6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    bbf8:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    bbfa:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    bbfc:	4620      	mov	r0, r4
    bbfe:	f000 bc73 	b.w	c4e8 <isr_rx_conn_pkt_ctrl+0xd48>
		conn->enc_tx = 0;
    bc02:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bc06:	f36f 1345 	bfc	r3, #5, #1
    bc0a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    bc0e:	e696      	b.n	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    bc10:	7a41      	ldrb	r1, [r0, #9]
    bc12:	200c      	movs	r0, #12
    bc14:	f7fc fd5c 	bl	86d0 <pdu_len_cmp>
    bc18:	2800      	cmp	r0, #0
    bc1a:	f000 863c 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    bc1e:	48a0      	ldr	r0, [pc, #640]	; (bea0 <isr_rx_conn_pkt_ctrl+0x700>)
    bc20:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    bc24:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    bc28:	f013 0701 	ands.w	r7, r3, #1
    bc2c:	d150      	bne.n	bcd0 <isr_rx_conn_pkt_ctrl+0x530>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc2e:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    bc32:	f7fa f91e 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    bc36:	4601      	mov	r1, r0
    bc38:	2800      	cmp	r0, #0
    bc3a:	d0a2      	beq.n	bb82 <isr_rx_conn_pkt_ctrl+0x3e2>
		conn->llcp_version.tx = 1;
    bc3c:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    bc40:	f043 0301 	orr.w	r3, r3, #1
    bc44:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc48:	7903      	ldrb	r3, [r0, #4]
    bc4a:	f043 0303 	orr.w	r3, r3, #3
    bc4e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    bc50:	2306      	movs	r3, #6
    bc52:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    bc54:	230c      	movs	r3, #12
    bc56:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    bc58:	2309      	movs	r3, #9
    bc5a:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    bc5c:	f06f 030e 	mvn.w	r3, #14
    bc60:	7243      	strb	r3, [r0, #9]
    bc62:	2305      	movs	r3, #5
    bc64:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    bc66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc6a:	72c3      	strb	r3, [r0, #11]
    bc6c:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    bc6e:	4630      	mov	r0, r6
    bc70:	f7fe f99a 	bl	9fa8 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    bc74:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    bc78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bc7c:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    bc80:	f004 facc 	bl	1021c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    bc84:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    bc86:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    bc88:	2201      	movs	r2, #1
    bc8a:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    bc8e:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    bc92:	7003      	strb	r3, [r0, #0]
    bc94:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    bc96:	b1c2      	cbz	r2, bcca <isr_rx_conn_pkt_ctrl+0x52a>
		pdu_data_tx->md = 1;
    bc98:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    bc9c:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    bc9e:	7b23      	ldrb	r3, [r4, #12]
    bca0:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    bca4:	7ba2      	ldrb	r2, [r4, #14]
    bca6:	7b63      	ldrb	r3, [r4, #13]
    bca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bcac:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    bcb0:	7be3      	ldrb	r3, [r4, #15]
    bcb2:	7c22      	ldrb	r2, [r4, #16]
    bcb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bcb8:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    bcbc:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    bcc0:	f043 0302 	orr.w	r3, r3, #2
    bcc4:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    bcc8:	e639      	b.n	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		pdu_data_tx->md = 0;
    bcca:	f362 1304 	bfi	r3, r2, #4, #1
    bcce:	e7e5      	b.n	bc9c <isr_rx_conn_pkt_ctrl+0x4fc>
	} else if (!conn->llcp_version.rx) {
    bcd0:	f013 0302 	ands.w	r3, r3, #2
    bcd4:	f47f ae33 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		conn->procedure_expire = 0;
    bcd8:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    bcdc:	2301      	movs	r3, #1
    bcde:	702b      	strb	r3, [r5, #0]
    bce0:	e7dd      	b.n	bc9e <isr_rx_conn_pkt_ctrl+0x4fe>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    bce2:	7a41      	ldrb	r1, [r0, #9]
    bce4:	200d      	movs	r0, #13
    bce6:	f7fc fcf3 	bl	86d0 <pdu_len_cmp>
    bcea:	2800      	cmp	r0, #0
    bcec:	f000 85d3 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->pause_rx = 0;
    bcf0:	4b6b      	ldr	r3, [pc, #428]	; (bea0 <isr_rx_conn_pkt_ctrl+0x700>)
    bcf2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    bcf6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    bcfa:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    bcfe:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    bd02:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    bd04:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    bd08:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    bd0c:	2301      	movs	r3, #1
    bd0e:	702b      	strb	r3, [r5, #0]
    bd10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    bd14:	7a41      	ldrb	r1, [r0, #9]
    bd16:	200f      	movs	r0, #15
    bd18:	f7fc fcda 	bl	86d0 <pdu_len_cmp>
    bd1c:	2800      	cmp	r0, #0
    bd1e:	f000 85ba 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    bd22:	4b5f      	ldr	r3, [pc, #380]	; (bea0 <isr_rx_conn_pkt_ctrl+0x700>)
    bd24:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    bd28:	461a      	mov	r2, r3
    bd2a:	b149      	cbz	r1, bd40 <isr_rx_conn_pkt_ctrl+0x5a0>
    bd2c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    bd30:	4281      	cmp	r1, r0
    bd32:	d005      	beq.n	bd40 <isr_rx_conn_pkt_ctrl+0x5a0>
			nack = reject_ext_ind_send(_radio.conn_curr,
    bd34:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    bd36:	210f      	movs	r1, #15
}
    bd38:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    bd3c:	f7fe b9b8 	b.w	a0b0 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    bd40:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    bd44:	f990 301d 	ldrsb.w	r3, [r0, #29]
    bd48:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    bd52:	f2c0 80a7 	blt.w	bea4 <isr_rx_conn_pkt_ctrl+0x704>
			if ((conn->llcp_conn_param.req !=
    bd56:	4299      	cmp	r1, r3
    bd58:	d009      	beq.n	bd6e <isr_rx_conn_pkt_ctrl+0x5ce>
			    ((conn->llcp_conn_param.state ==
    bd5a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    bd5e:	f013 0307 	ands.w	r3, r3, #7
    bd62:	d002      	beq.n	bd6a <isr_rx_conn_pkt_ctrl+0x5ca>
			      LLCP_CPR_STATE_REQ) ||
    bd64:	3b04      	subs	r3, #4
    bd66:	2b01      	cmp	r3, #1
    bd68:	d801      	bhi.n	bd6e <isr_rx_conn_pkt_ctrl+0x5ce>
				nack = reject_ext_ind_send(_radio.conn_curr,
    bd6a:	2223      	movs	r2, #35	; 0x23
    bd6c:	e7e3      	b.n	bd36 <isr_rx_conn_pkt_ctrl+0x596>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    bd6e:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    bd72:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    bd76:	4299      	cmp	r1, r3
    bd78:	d003      	beq.n	bd82 <isr_rx_conn_pkt_ctrl+0x5e2>
    bd7a:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    bd7e:	2b03      	cmp	r3, #3
    bd80:	d105      	bne.n	bd8e <isr_rx_conn_pkt_ctrl+0x5ee>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    bd82:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    bd86:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    bd8a:	4299      	cmp	r1, r3
    bd8c:	d001      	beq.n	bd92 <isr_rx_conn_pkt_ctrl+0x5f2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    bd8e:	222a      	movs	r2, #42	; 0x2a
    bd90:	e7d1      	b.n	bd36 <isr_rx_conn_pkt_ctrl+0x596>
				if ((cpr->interval_min < 6) ||
    bd92:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    bd96:	4643      	mov	r3, r8
    bd98:	2b05      	cmp	r3, #5
    bd9a:	d91b      	bls.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->interval_max > 3200) ||
    bd9c:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    bd9e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    bda2:	d817      	bhi.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->interval_max > 3200) ||
    bda4:	45b8      	cmp	r8, r7
    bda6:	d815      	bhi.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->latency > 499) ||
    bda8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    bdac:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    bdb0:	d210      	bcs.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->timeout < 10) ||
    bdb2:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    bdb6:	f1ae 060a 	sub.w	r6, lr, #10
    bdba:	b2b6      	uxth	r6, r6
    bdbc:	f640 4976 	movw	r9, #3190	; 0xc76
    bdc0:	454e      	cmp	r6, r9
    bdc2:	d807      	bhi.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
				     ((cpr->latency + 1) *
    bdc4:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    bdc8:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    bdcc:	da02      	bge.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->preferred_periodicity >
    bdce:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    bdd0:	428f      	cmp	r7, r1
    bdd2:	d201      	bcs.n	bdd8 <isr_rx_conn_pkt_ctrl+0x638>
				nack = reject_ext_ind_send(conn,
    bdd4:	221e      	movs	r2, #30
    bdd6:	e7ae      	b.n	bd36 <isr_rx_conn_pkt_ctrl+0x596>
				conn->llcp_conn_param.interval = cpr->interval_min;
    bdd8:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    bddc:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    bde0:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    bde4:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    bde8:	7da6      	ldrb	r6, [r4, #22]
    bdea:	7d61      	ldrb	r1, [r4, #21]
    bdec:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    bdf0:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    bdf4:	7e26      	ldrb	r6, [r4, #24]
    bdf6:	7de1      	ldrb	r1, [r4, #23]
    bdf8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bdfc:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    be00:	7ea6      	ldrb	r6, [r4, #26]
    be02:	7e61      	ldrb	r1, [r4, #25]
    be04:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    be08:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    be0c:	7f26      	ldrb	r6, [r4, #28]
    be0e:	7ee1      	ldrb	r1, [r4, #27]
    be10:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    be14:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    be18:	7fa6      	ldrb	r6, [r4, #30]
    be1a:	7f61      	ldrb	r1, [r4, #29]
    be1c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    be20:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    be24:	7fe1      	ldrb	r1, [r4, #31]
    be26:	f894 6020 	ldrb.w	r6, [r4, #32]
    be2a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    be2e:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    be32:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    be36:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    be3a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    be3e:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    be42:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    be46:	6a41      	ldr	r1, [r0, #36]	; 0x24
    be48:	428c      	cmp	r4, r1
    be4a:	d10f      	bne.n	be6c <isr_rx_conn_pkt_ctrl+0x6cc>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    be4c:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    be4e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    be52:	4361      	muls	r1, r4
    be54:	f242 7410 	movw	r4, #10000	; 0x2710
    be58:	fb04 130e 	mla	r3, r4, lr, r1
    be5c:	3b01      	subs	r3, #1
    be5e:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    be62:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    be64:	b29b      	uxth	r3, r3
    be66:	4299      	cmp	r1, r3
    be68:	f000 8096 	beq.w	bf98 <isr_rx_conn_pkt_ctrl+0x7f8>
					if (conn->pause_tx) {
    be6c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    be70:	071c      	lsls	r4, r3, #28
    be72:	f140 808b 	bpl.w	bf8c <isr_rx_conn_pkt_ctrl+0x7ec>
						conn->llcp_conn_param.state =
    be76:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    be7a:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    be7c:	f361 0302 	bfi	r3, r1, #0, #3
    be80:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    be84:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    be88:	3b01      	subs	r3, #1
    be8a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    be8e:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    be92:	2b00      	cmp	r3, #0
    be94:	f47f ad53 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
				_radio.conn_upd = conn;
    be98:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    be9c:	e54f      	b.n	b93e <isr_rx_conn_pkt_ctrl+0x19e>
    be9e:	bf00      	nop
    bea0:	20000668 	.word	0x20000668
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    bea4:	4299      	cmp	r1, r3
    bea6:	d004      	beq.n	beb2 <isr_rx_conn_pkt_ctrl+0x712>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    bea8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    beac:	0799      	lsls	r1, r3, #30
    beae:	f47f acb9 	bne.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
			if ((cpr->interval_min < 6) ||
    beb2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    beb6:	4643      	mov	r3, r8
    beb8:	2b05      	cmp	r3, #5
    beba:	d98b      	bls.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->interval_max > 3200) ||
    bebc:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    bebe:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    bec2:	d887      	bhi.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->interval_max > 3200) ||
    bec4:	45b8      	cmp	r8, r7
    bec6:	d885      	bhi.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->latency > 499) ||
    bec8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    becc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    bed0:	d280      	bcs.n	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bed2:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    bed6:	f1ae 060a 	sub.w	r6, lr, #10
    beda:	b2b6      	uxth	r6, r6
    bedc:	f640 4976 	movw	r9, #3190	; 0xc76
    bee0:	454e      	cmp	r6, r9
    bee2:	f63f af77 	bhi.w	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    bee6:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    beea:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    beee:	f6bf af71 	bge.w	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    bef2:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    bef4:	428f      	cmp	r7, r1
    bef6:	f4ff af6d 	bcc.w	bdd4 <isr_rx_conn_pkt_ctrl+0x634>
			conn->llcp_conn_param.interval = cpr->interval_min;
    befa:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    befe:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    bf02:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    bf06:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    bf0a:	7da6      	ldrb	r6, [r4, #22]
    bf0c:	7d61      	ldrb	r1, [r4, #21]
    bf0e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    bf12:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    bf16:	7e26      	ldrb	r6, [r4, #24]
    bf18:	7de1      	ldrb	r1, [r4, #23]
    bf1a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bf1e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    bf22:	7ea6      	ldrb	r6, [r4, #26]
    bf24:	7e61      	ldrb	r1, [r4, #25]
    bf26:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bf2a:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    bf2e:	7f26      	ldrb	r6, [r4, #28]
    bf30:	7ee1      	ldrb	r1, [r4, #27]
    bf32:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bf36:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    bf3a:	7fa6      	ldrb	r6, [r4, #30]
    bf3c:	7f61      	ldrb	r1, [r4, #29]
    bf3e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bf42:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    bf46:	7fe1      	ldrb	r1, [r4, #31]
    bf48:	f894 6020 	ldrb.w	r6, [r4, #32]
    bf4c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bf50:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    bf54:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    bf58:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    bf5c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    bf60:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    bf64:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    bf68:	6a41      	ldr	r1, [r0, #36]	; 0x24
    bf6a:	428c      	cmp	r4, r1
    bf6c:	d10e      	bne.n	bf8c <isr_rx_conn_pkt_ctrl+0x7ec>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    bf6e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    bf70:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bf74:	4361      	muls	r1, r4
    bf76:	f242 7410 	movw	r4, #10000	; 0x2710
    bf7a:	fb04 130e 	mla	r3, r4, lr, r1
    bf7e:	3b01      	subs	r3, #1
    bf80:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    bf84:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    bf86:	b29b      	uxth	r3, r3
    bf88:	4299      	cmp	r1, r3
    bf8a:	d005      	beq.n	bf98 <isr_rx_conn_pkt_ctrl+0x7f8>
				*rx_enqueue = 1;
    bf8c:	2301      	movs	r3, #1
    bf8e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    bf90:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    bf94:	2103      	movs	r1, #3
    bf96:	e771      	b.n	be7c <isr_rx_conn_pkt_ctrl+0x6dc>
				conn->llcp_conn_param.status = 0;
    bf98:	2300      	movs	r3, #0
    bf9a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    bf9e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    bfa2:	2101      	movs	r1, #1
    bfa4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    bfa8:	e768      	b.n	be7c <isr_rx_conn_pkt_ctrl+0x6dc>
		if (_radio.conn_curr->role ||
    bfaa:	4bc2      	ldr	r3, [pc, #776]	; (c2b4 <isr_rx_conn_pkt_ctrl+0xb14>)
    bfac:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    bfb0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	f2c0 846e 	blt.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    bfba:	7a41      	ldrb	r1, [r0, #9]
    bfbc:	2010      	movs	r0, #16
    bfbe:	f7fc fb87 	bl	86d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    bfc2:	2800      	cmp	r0, #0
    bfc4:	f000 8467 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		if (!_radio.conn_curr->role &&
    bfc8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    bfcc:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    bfd0:	429a      	cmp	r2, r3
    bfd2:	f43f acb4 	beq.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_conn_param.state ==
    bfd6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    bfda:	f003 0307 	and.w	r3, r3, #7
    bfde:	2b04      	cmp	r3, #4
    bfe0:	f47f acad 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
			if ((cpr->interval_min < 6) ||
    bfe4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    bfe8:	fa1f f28e 	uxth.w	r2, lr
    bfec:	2a05      	cmp	r2, #5
    bfee:	d91b      	bls.n	c028 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->interval_max > 3200) ||
    bff0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    bff2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    bff6:	d817      	bhi.n	c028 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->interval_max > 3200) ||
    bff8:	429a      	cmp	r2, r3
    bffa:	d815      	bhi.n	c028 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->latency > 499) ||
    bffc:	8a27      	ldrh	r7, [r4, #16]
    bffe:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    c000:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    c004:	d210      	bcs.n	c028 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    c006:	8a66      	ldrh	r6, [r4, #18]
    c008:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    c00a:	f1a0 010a 	sub.w	r1, r0, #10
    c00e:	b289      	uxth	r1, r1
    c010:	f640 4c76 	movw	ip, #3190	; 0xc76
    c014:	4561      	cmp	r1, ip
    c016:	d807      	bhi.n	c028 <isr_rx_conn_pkt_ctrl+0x888>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    c018:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    c01c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    c020:	da02      	bge.n	c028 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    c022:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    c024:	4293      	cmp	r3, r2
    c026:	d203      	bcs.n	c030 <isr_rx_conn_pkt_ctrl+0x890>
				nack = reject_ext_ind_send(conn,
    c028:	221e      	movs	r2, #30
    c02a:	2110      	movs	r1, #16
    c02c:	4628      	mov	r0, r5
    c02e:	e683      	b.n	bd38 <isr_rx_conn_pkt_ctrl+0x598>
			_radio.conn_curr->procedure_expire = 0;
    c030:	2000      	movs	r0, #0
    c032:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    c036:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    c03a:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    c03e:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    c042:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    c046:	7da2      	ldrb	r2, [r4, #22]
    c048:	7d63      	ldrb	r3, [r4, #21]
    c04a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    c04e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    c052:	7e22      	ldrb	r2, [r4, #24]
    c054:	7de3      	ldrb	r3, [r4, #23]
    c056:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c05a:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    c05e:	7ea2      	ldrb	r2, [r4, #26]
    c060:	7e63      	ldrb	r3, [r4, #25]
    c062:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c066:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    c06a:	7f22      	ldrb	r2, [r4, #28]
    c06c:	7ee3      	ldrb	r3, [r4, #27]
    c06e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c072:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    c076:	7fa2      	ldrb	r2, [r4, #30]
    c078:	7f63      	ldrb	r3, [r4, #29]
    c07a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c07e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    c082:	f894 2020 	ldrb.w	r2, [r4, #32]
    c086:	7fe3      	ldrb	r3, [r4, #31]
    c088:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c08c:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    c090:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    c094:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    c098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c09c:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    c0a0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    c0a4:	2201      	movs	r2, #1
    c0a6:	f362 0302 	bfi	r3, r2, #0, #3
    c0aa:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    c0ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    c0b2:	7a41      	ldrb	r1, [r0, #9]
    c0b4:	2011      	movs	r0, #17
    c0b6:	f7fc fb0b 	bl	86d0 <pdu_len_cmp>
    c0ba:	2800      	cmp	r0, #0
    c0bc:	f000 83eb 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    c0c0:	4a7c      	ldr	r2, [pc, #496]	; (c2b4 <isr_rx_conn_pkt_ctrl+0xb14>)
    c0c2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    c0c6:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    c0ca:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    c0ce:	4281      	cmp	r1, r0
    c0d0:	7b21      	ldrb	r1, [r4, #12]
    c0d2:	d027      	beq.n	c124 <isr_rx_conn_pkt_ctrl+0x984>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    c0d4:	2916      	cmp	r1, #22
    c0d6:	f47f ac32 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		if (rej_ext_ind->error_code != 0x23) {
    c0da:	7b61      	ldrb	r1, [r4, #13]
    c0dc:	2923      	cmp	r1, #35	; 0x23
    c0de:	d00e      	beq.n	c0fe <isr_rx_conn_pkt_ctrl+0x95e>
				_radio.conn_curr->phy_tx;
    c0e0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    c0e4:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    c0e8:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    c0ec:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c0f0:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    c0f4:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    c0f6:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    c0fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    c0fe:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    c102:	0792      	lsls	r2, r2, #30
    c104:	f57f ac1b 	bpl.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c108:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    c10a:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c10c:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    c10e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    c112:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c116:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    c118:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    c11c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c120:	7363      	strb	r3, [r4, #13]
    c122:	e43a      	b.n	b99a <isr_rx_conn_pkt_ctrl+0x1fa>
		   _radio.conn_curr->llcp_conn_param.req) {
    c124:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    c128:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    c12c:	42b8      	cmp	r0, r7
    c12e:	d067      	beq.n	c200 <isr_rx_conn_pkt_ctrl+0xa60>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    c130:	290f      	cmp	r1, #15
    c132:	f47f ac04 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
    c136:	f993 001d 	ldrsb.w	r0, [r3, #29]
    c13a:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    c13c:	2800      	cmp	r0, #0
    c13e:	db34      	blt.n	c1aa <isr_rx_conn_pkt_ctrl+0xa0a>
    c140:	291a      	cmp	r1, #26
    c142:	d132      	bne.n	c1aa <isr_rx_conn_pkt_ctrl+0xa0a>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    c144:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    c148:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    c14c:	4294      	cmp	r4, r2
    c14e:	f47f ab69 	bne.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
				conn->llcp_conn_param.state =
    c152:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    c156:	2105      	movs	r1, #5
    c158:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    c15c:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    c160:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    c164:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    c168:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    c16c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    c170:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    c174:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    c178:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    c17c:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    c17e:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    c182:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    c186:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    c18a:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    c18c:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    c190:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    c192:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    c196:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    c19a:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_ack--;
    c19e:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				conn->llcp_type = LLCP_CONN_UPD;
    c1a2:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				break;
    c1a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (rej_ext_ind->error_code != 0x23) {
    c1aa:	2923      	cmp	r1, #35	; 0x23
    c1ac:	d011      	beq.n	c1d2 <isr_rx_conn_pkt_ctrl+0xa32>
		LL_ASSERT(_radio.conn_upd == conn);
    c1ae:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    c1b2:	42b3      	cmp	r3, r6
    c1b4:	f47f ab36 	bne.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
		_radio.conn_upd = NULL;
    c1b8:	2600      	movs	r6, #0
		if (conn->role) {
    c1ba:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    c1bc:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    c1c0:	bfb8      	it	lt
    c1c2:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    c1c6:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    c1ca:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    c1ce:	bfb8      	it	lt
    c1d0:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    c1d2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    c1d6:	0717      	lsls	r7, r2, #28
    c1d8:	f57f abb1 	bpl.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
	cp->status = rej_ext_ind->error_code;
    c1dc:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c1de:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    c1e0:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c1e2:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    c1e4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    c1e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    c1e8:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    c1ea:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    c1ec:	237d      	movs	r3, #125	; 0x7d
    c1ee:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    c1f0:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    c1f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c1f6:	fb93 f3f2 	sdiv	r3, r3, r2
    c1fa:	8223      	strh	r3, [r4, #16]
    c1fc:	f7ff bbcd 	b.w	b99a <isr_rx_conn_pkt_ctrl+0x1fa>
		   _radio.conn_curr->llcp_length.req) {
    c200:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    c204:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    c208:	4290      	cmp	r0, r2
    c20a:	d01a      	beq.n	c242 <isr_rx_conn_pkt_ctrl+0xaa2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    c20c:	2914      	cmp	r1, #20
    c20e:	f47f ab96 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		conn->llcp_length.ack = conn->llcp_length.req;
    c212:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    c216:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    c21a:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    c21c:	f360 02c3 	bfi	r2, r0, #3, #1
    c220:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    c224:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    c226:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    c22a:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c22c:	2215      	movs	r2, #21
    c22e:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    c230:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    c232:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    c234:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    c236:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    c238:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    c23a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    c23c:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    c23e:	8263      	strh	r3, [r4, #18]
    c240:	e564      	b.n	bd0c <isr_rx_conn_pkt_ctrl+0x56c>
		switch (rej_ext_ind->reject_opcode) {
    c242:	2903      	cmp	r1, #3
    c244:	f47f ab7b 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->pause_rx = 0;
    c248:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    c24c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    c250:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    c254:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    c256:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    c25a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c25e:	230d      	movs	r3, #13
    c260:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    c262:	7b63      	ldrb	r3, [r4, #13]
    c264:	7323      	strb	r3, [r4, #12]
    c266:	e551      	b.n	bd0c <isr_rx_conn_pkt_ctrl+0x56c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    c268:	7a41      	ldrb	r1, [r0, #9]
    c26a:	2012      	movs	r0, #18
    c26c:	f7fc fa30 	bl	86d0 <pdu_len_cmp>
    c270:	2800      	cmp	r0, #0
    c272:	f000 8310 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = ping_resp_send(_radio.conn_curr);
    c276:	480f      	ldr	r0, [pc, #60]	; (c2b4 <isr_rx_conn_pkt_ctrl+0xb14>)
    c278:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c27c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    c280:	f7f9 fdf7 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    c284:	4601      	mov	r1, r0
    c286:	2800      	cmp	r0, #0
    c288:	f43f ac7b 	beq.w	bb82 <isr_rx_conn_pkt_ctrl+0x3e2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c28c:	7903      	ldrb	r3, [r0, #4]
    c28e:	f043 0303 	orr.w	r3, r3, #3
    c292:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    c294:	2301      	movs	r3, #1
    c296:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    c298:	2313      	movs	r3, #19
    c29a:	e4ae      	b.n	bbfa <isr_rx_conn_pkt_ctrl+0x45a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    c29c:	7a41      	ldrb	r1, [r0, #9]
    c29e:	2013      	movs	r0, #19
    c2a0:	f7fc fa16 	bl	86d0 <pdu_len_cmp>
    c2a4:	2800      	cmp	r0, #0
    c2a6:	f000 82f6 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->procedure_expire = 0;
    c2aa:	4b02      	ldr	r3, [pc, #8]	; (c2b4 <isr_rx_conn_pkt_ctrl+0xb14>)
    c2ac:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    c2b0:	e44a      	b.n	bb48 <isr_rx_conn_pkt_ctrl+0x3a8>
    c2b2:	bf00      	nop
    c2b4:	20000668 	.word	0x20000668
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    c2b8:	7a41      	ldrb	r1, [r0, #9]
    c2ba:	2007      	movs	r0, #7
    c2bc:	f7fc fa08 	bl	86d0 <pdu_len_cmp>
    c2c0:	2800      	cmp	r0, #0
    c2c2:	f000 82e8 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    c2c6:	4ace      	ldr	r2, [pc, #824]	; (c600 <isr_rx_conn_pkt_ctrl+0xe60>)
    c2c8:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    c2cc:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    c2d0:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    c2d4:	42b1      	cmp	r1, r6
    c2d6:	4611      	mov	r1, r2
    c2d8:	d02c      	beq.n	c334 <isr_rx_conn_pkt_ctrl+0xb94>
			conn->llcp_conn_param.disabled = 1;
    c2da:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    c2de:	f040 0010 	orr.w	r0, r0, #16
    c2e2:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    c2e6:	f993 001d 	ldrsb.w	r0, [r3, #29]
    c2ea:	2800      	cmp	r0, #0
    c2ec:	f6bf af2a 	bge.w	c144 <isr_rx_conn_pkt_ctrl+0x9a4>
			LL_ASSERT(_radio.conn_upd == conn);
    c2f0:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    c2f4:	4293      	cmp	r3, r2
    c2f6:	f47f aa95 	bne.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_upd = NULL;
    c2fa:	2200      	movs	r2, #0
    c2fc:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    c300:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c304:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    c308:	0716      	lsls	r6, r2, #28
    c30a:	f57f ab18 	bpl.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c30e:	2208      	movs	r2, #8
    c310:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    c312:	221a      	movs	r2, #26
    c314:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    c316:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    c318:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    c31a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    c31c:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    c31e:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    c320:	237d      	movs	r3, #125	; 0x7d
    c322:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    c324:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    c326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c32a:	fb93 f3f2 	sdiv	r3, r3, r2
    c32e:	8223      	strh	r3, [r4, #16]
    c330:	f7ff bbb1 	b.w	ba96 <isr_rx_conn_pkt_ctrl+0x2f6>
		} else if (_radio.conn_curr->llcp_length.req !=
    c334:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    c338:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    c33c:	4290      	cmp	r0, r2
    c33e:	d009      	beq.n	c354 <isr_rx_conn_pkt_ctrl+0xbb4>
			_radio.conn_curr->llcp_length.ack =
    c340:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    c344:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    c348:	f36f 02c3 	bfc	r2, #3, #1
    c34c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    c350:	f7ff bba1 	b.w	ba96 <isr_rx_conn_pkt_ctrl+0x2f6>
		} else if (_radio.conn_curr->llcp_phy.req !=
    c354:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    c358:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    c35c:	4290      	cmp	r0, r2
    c35e:	d01b      	beq.n	c398 <isr_rx_conn_pkt_ctrl+0xbf8>
			_radio.conn_curr->llcp_phy.ack =
    c360:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    c364:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    c368:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    c36c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    c370:	f362 0002 	bfi	r0, r2, #0, #3
    c374:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    c378:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    c37c:	0780      	lsls	r0, r0, #30
    c37e:	d50f      	bpl.n	c3a0 <isr_rx_conn_pkt_ctrl+0xc00>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c380:	200c      	movs	r0, #12
    c382:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    c384:	2000      	movs	r0, #0
    c386:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    c388:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    c38a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    c38e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c392:	7363      	strb	r3, [r4, #13]
    c394:	f7ff bb7f 	b.w	ba96 <isr_rx_conn_pkt_ctrl+0x2f6>
			switch (llctrl->unknown_rsp.type) {
    c398:	7b23      	ldrb	r3, [r4, #12]
    c39a:	2b12      	cmp	r3, #18
    c39c:	f47f ab7b 	bne.w	ba96 <isr_rx_conn_pkt_ctrl+0x2f6>
		_radio.conn_curr->procedure_expire = 0;
    c3a0:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    c3a4:	f7ff bbd0 	b.w	bb48 <isr_rx_conn_pkt_ctrl+0x3a8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    c3a8:	7a41      	ldrb	r1, [r0, #9]
    c3aa:	2014      	movs	r0, #20
    c3ac:	f7fc f990 	bl	86d0 <pdu_len_cmp>
    c3b0:	2800      	cmp	r0, #0
    c3b2:	f000 8270 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    c3b6:	2f14      	cmp	r7, #20
    c3b8:	d123      	bne.n	c402 <isr_rx_conn_pkt_ctrl+0xc62>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c3ba:	4892      	ldr	r0, [pc, #584]	; (c604 <isr_rx_conn_pkt_ctrl+0xe64>)
    c3bc:	f7f9 fd59 	bl	5e72 <mem_acquire>
		if (!node_tx) {
    c3c0:	4606      	mov	r6, r0
    c3c2:	2800      	cmp	r0, #0
    c3c4:	f43f abdd 	beq.w	bb82 <isr_rx_conn_pkt_ctrl+0x3e2>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c3c8:	4f8d      	ldr	r7, [pc, #564]	; (c600 <isr_rx_conn_pkt_ctrl+0xe60>)
    c3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    c3ce:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    c3d2:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c3d6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c3d8:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    c3da:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c3dc:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    c3e0:	45e0      	cmp	r8, ip
    c3e2:	46b9      	mov	r9, r7
    c3e4:	f894 800b 	ldrb.w	r8, [r4, #11]
    c3e8:	d10d      	bne.n	c406 <isr_rx_conn_pkt_ctrl+0xc66>
	      _radio.conn_curr->llcp_length.ack) &&
    c3ea:	f1b8 0f14 	cmp.w	r8, #20
    c3ee:	d016      	beq.n	c41e <isr_rx_conn_pkt_ctrl+0xc7e>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    c3f0:	f1b8 0f15 	cmp.w	r8, #21
    c3f4:	f47f aa16 	bne.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c3f8:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    c3fa:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c3fc:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c3fe:	4693      	mov	fp, r2
    c400:	e05d      	b.n	c4be <isr_rx_conn_pkt_ctrl+0xd1e>
	struct radio_pdu_node_tx *node_tx = NULL;
    c402:	2600      	movs	r6, #0
    c404:	e7e0      	b.n	c3c8 <isr_rx_conn_pkt_ctrl+0xc28>
		 LLCP_LENGTH_STATE_REQ) ||
    c406:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    c40a:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    c40e:	2f01      	cmp	r7, #1
    c410:	d9eb      	bls.n	c3ea <isr_rx_conn_pkt_ctrl+0xc4a>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    c412:	2f02      	cmp	r7, #2
    c414:	d1ec      	bne.n	c3f0 <isr_rx_conn_pkt_ctrl+0xc50>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    c416:	f1a8 0714 	sub.w	r7, r8, #20
    c41a:	2f01      	cmp	r7, #1
    c41c:	d8e8      	bhi.n	c3f0 <isr_rx_conn_pkt_ctrl+0xc50>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    c41e:	89a7      	ldrh	r7, [r4, #12]
    c420:	2f1a      	cmp	r7, #26
    c422:	d965      	bls.n	c4f0 <isr_rx_conn_pkt_ctrl+0xd50>
			eff_tx_octets = min(lr->max_rx_octets,
    c424:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    c428:	4547      	cmp	r7, r8
    c42a:	bf28      	it	cs
    c42c:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    c42e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    c432:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    c436:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    c43a:	bf34      	ite	cc
    c43c:	4693      	movcc	fp, r2
    c43e:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    c442:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    c446:	d355      	bcc.n	c4f4 <isr_rx_conn_pkt_ctrl+0xd54>
			eff_tx_time = min(lr->max_rx_time,
    c448:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    c44c:	45d0      	cmp	r8, sl
    c44e:	bf28      	it	cs
    c450:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    c452:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    c456:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    c45a:	bf34      	ite	cc
    c45c:	4682      	movcc	sl, r0
    c45e:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    c462:	455a      	cmp	r2, fp
    c464:	d048      	beq.n	c4f8 <isr_rx_conn_pkt_ctrl+0xd58>
			free_count_rx = packet_rx_acquired_count_get() +
    c466:	f7fc f97b 	bl	8760 <packet_rx_acquired_count_get>
    c46a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    c46c:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    c470:	f7f9 fd2e 	bl	5ed0 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    c474:	4420      	add	r0, r4
    c476:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    c478:	28ff      	cmp	r0, #255	; 0xff
    c47a:	f63f a9d3 	bhi.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
			if (_radio.packet_rx_data_count == free_count_rx) {
    c47e:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    c482:	4283      	cmp	r3, r0
    c484:	f040 8222 	bne.w	c8cc <isr_rx_conn_pkt_ctrl+0x112c>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c488:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    c48c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c490:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    c492:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    c494:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    c498:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    c49c:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    c4a0:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    c4a4:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    c4a8:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    c4ac:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    c4b0:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    c4b4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    c4b8:	2303      	movs	r3, #3
    c4ba:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    c4be:	2e00      	cmp	r6, #0
    c4c0:	f43f aa3d 	beq.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4c4:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    c4c6:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    c4ca:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4ce:	f043 0303 	orr.w	r3, r3, #3
    c4d2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    c4d4:	2309      	movs	r3, #9
    c4d6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c4d8:	2315      	movs	r3, #21
    c4da:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    c4dc:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    c4de:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    c4e2:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    c4e6:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    c4e8:	f7fd fd30 	bl	9f4c <ctrl_tx_enqueue>
    c4ec:	f7ff ba27 	b.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c4f0:	460f      	mov	r7, r1
    c4f2:	e79c      	b.n	c42e <isr_rx_conn_pkt_ctrl+0xc8e>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c4f4:	46f0      	mov	r8, lr
    c4f6:	e7ac      	b.n	c452 <isr_rx_conn_pkt_ctrl+0xcb2>
			_radio.conn_curr->pause_tx = 0;
    c4f8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    c4fc:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    c500:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    c504:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    c508:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    c50a:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    c50e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    c512:	d103      	bne.n	c51c <isr_rx_conn_pkt_ctrl+0xd7c>
    c514:	45c6      	cmp	lr, r8
    c516:	d101      	bne.n	c51c <isr_rx_conn_pkt_ctrl+0xd7c>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    c518:	4550      	cmp	r0, sl
    c51a:	d0d0      	beq.n	c4be <isr_rx_conn_pkt_ctrl+0xd1e>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c51c:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    c51e:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    c522:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    c526:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    c528:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    c52c:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    c52e:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    c532:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    c536:	702b      	strb	r3, [r5, #0]
    c538:	e7c1      	b.n	c4be <isr_rx_conn_pkt_ctrl+0xd1e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    c53a:	7a41      	ldrb	r1, [r0, #9]
    c53c:	2016      	movs	r0, #22
    c53e:	f7fc f8c7 	bl	86d0 <pdu_len_cmp>
    c542:	2800      	cmp	r0, #0
    c544:	f000 81a7 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.role == ROLE_MASTER) {
    c548:	482d      	ldr	r0, [pc, #180]	; (c600 <isr_rx_conn_pkt_ctrl+0xe60>)
    c54a:	7cc3      	ldrb	r3, [r0, #19]
    c54c:	2b04      	cmp	r3, #4
    c54e:	d15b      	bne.n	c608 <isr_rx_conn_pkt_ctrl+0xe68>
			if ((_radio.conn_curr->llcp_phy.ack !=
    c550:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    c554:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    c558:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    c55c:	428b      	cmp	r3, r1
    c55e:	d00a      	beq.n	c576 <isr_rx_conn_pkt_ctrl+0xdd6>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    c560:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    c564:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    c568:	3a01      	subs	r2, #1
    c56a:	2a02      	cmp	r2, #2
    c56c:	d803      	bhi.n	c576 <isr_rx_conn_pkt_ctrl+0xdd6>
				nack = reject_ext_ind_send(_radio.conn_curr,
    c56e:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    c570:	2116      	movs	r1, #22
    c572:	f7ff bbe1 	b.w	bd38 <isr_rx_conn_pkt_ctrl+0x598>
			} else if (((_radio.conn_curr->llcp_req !=
    c576:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    c57a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    c57e:	4295      	cmp	r5, r2
    c580:	d003      	beq.n	c58a <isr_rx_conn_pkt_ctrl+0xdea>
				     _radio.conn_curr->llcp_ack) &&
    c582:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    c586:	2a03      	cmp	r2, #3
    c588:	d105      	bne.n	c596 <isr_rx_conn_pkt_ctrl+0xdf6>
				     LLCP_ENCRYPTION)) ||
    c58a:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    c58e:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    c592:	4295      	cmp	r5, r2
    c594:	d001      	beq.n	c59a <isr_rx_conn_pkt_ctrl+0xdfa>
				nack = reject_ext_ind_send(_radio.conn_curr,
    c596:	222a      	movs	r2, #42	; 0x2a
    c598:	e7ea      	b.n	c570 <isr_rx_conn_pkt_ctrl+0xdd0>
				_radio.conn_curr->llcp_phy.state =
    c59a:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    c59e:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    c5a0:	f042 0203 	orr.w	r2, r2, #3
    c5a4:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    c5a8:	d116      	bne.n	c5d8 <isr_rx_conn_pkt_ctrl+0xe38>
					_radio.conn_curr->llcp_phy.ack--;
    c5aa:	3b01      	subs	r3, #1
    c5ac:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    c5b0:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    c5b4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    c5b8:	f36f 0341 	bfc	r3, #1, #1
    c5bc:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    c5c0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    c5c4:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    c5c8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    c5cc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c5d0:	f362 1347 	bfi	r3, r2, #5, #3
    c5d4:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    c5d8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    c5dc:	7b62      	ldrb	r2, [r4, #13]
    c5de:	f3c3 0182 	ubfx	r1, r3, #2, #3
    c5e2:	400a      	ands	r2, r1
    c5e4:	f362 0384 	bfi	r3, r2, #2, #3
    c5e8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    c5ec:	7b22      	ldrb	r2, [r4, #12]
    c5ee:	b2db      	uxtb	r3, r3
    c5f0:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c5f4:	f362 1347 	bfi	r3, r2, #5, #3
    c5f8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    c5fc:	f7ff b99f 	b.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
    c600:	20000668 	.word	0x20000668
    c604:	200007c4 	.word	0x200007c4
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    c608:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c60c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    c610:	f7f9 fc2f 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    c614:	4601      	mov	r1, r0
    c616:	2800      	cmp	r0, #0
    c618:	f43f aab3 	beq.w	bb82 <isr_rx_conn_pkt_ctrl+0x3e2>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    c61c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c620:	2202      	movs	r2, #2
    c622:	f362 0301 	bfi	r3, r2, #0, #2
    c626:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    c62a:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    c62e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    c632:	4293      	cmp	r3, r2
    c634:	d11a      	bne.n	c66c <isr_rx_conn_pkt_ctrl+0xecc>
		conn->llcp_phy.ack--;
    c636:	3b01      	subs	r3, #1
    c638:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    c63c:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    c640:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    c644:	f36f 0341 	bfc	r3, #1, #1
    c648:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    c64c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c650:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    c654:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    c658:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c65c:	f362 1347 	bfi	r3, r2, #5, #3
    c660:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    c664:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    c668:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    c66c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c670:	7b62      	ldrb	r2, [r4, #13]
    c672:	f3c3 0082 	ubfx	r0, r3, #2, #3
    c676:	4002      	ands	r2, r0
    c678:	f362 0384 	bfi	r3, r2, #2, #3
    c67c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    c680:	7b22      	ldrb	r2, [r4, #12]
    c682:	b2db      	uxtb	r3, r3
    c684:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c688:	f362 1347 	bfi	r3, r2, #5, #3
    c68c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c690:	790b      	ldrb	r3, [r1, #4]
    c692:	f043 0303 	orr.w	r3, r3, #3
    c696:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    c698:	2303      	movs	r3, #3
    c69a:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    c69c:	2317      	movs	r3, #23
    c69e:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    c6a0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    c6a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6a8:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    c6aa:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    c6ae:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c6b2:	724b      	strb	r3, [r1, #9]
    c6b4:	f7ff ba78 	b.w	bba8 <isr_rx_conn_pkt_ctrl+0x408>
		if (_radio.conn_curr->role ||
    c6b8:	4e8b      	ldr	r6, [pc, #556]	; (c8e8 <isr_rx_conn_pkt_ctrl+0x1148>)
    c6ba:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    c6be:	f995 301d 	ldrsb.w	r3, [r5, #29]
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	f2c0 80e7 	blt.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    c6c8:	7a41      	ldrb	r1, [r0, #9]
    c6ca:	2017      	movs	r0, #23
    c6cc:	f7fc f800 	bl	86d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    c6d0:	2800      	cmp	r0, #0
    c6d2:	f000 80e0 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		if ((_radio.role == ROLE_MASTER) &&
    c6d6:	7cf3      	ldrb	r3, [r6, #19]
    c6d8:	2b04      	cmp	r3, #4
    c6da:	f47f a930 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
    c6de:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    c6e2:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    c6e6:	429a      	cmp	r2, r3
    c6e8:	f43f a929 	beq.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_phy.state ==
    c6ec:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    c6f0:	f003 0203 	and.w	r2, r3, #3
    c6f4:	2a02      	cmp	r2, #2
    c6f6:	f47f a922 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    c6fa:	f043 0303 	orr.w	r3, r3, #3
    c6fe:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    c702:	7b62      	ldrb	r2, [r4, #13]
    c704:	f3c3 0182 	ubfx	r1, r3, #2, #3
    c708:	400a      	ands	r2, r1
    c70a:	f362 0384 	bfi	r3, r2, #2, #3
    c70e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    c712:	7b22      	ldrb	r2, [r4, #12]
    c714:	b2db      	uxtb	r3, r3
    c716:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c71a:	f362 1347 	bfi	r3, r2, #5, #3
    c71e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    c722:	f7ff b8c4 	b.w	b8ae <isr_rx_conn_pkt_ctrl+0x10e>
		if (!_radio.conn_curr->role ||
    c726:	4b70      	ldr	r3, [pc, #448]	; (c8e8 <isr_rx_conn_pkt_ctrl+0x1148>)
    c728:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    c72c:	f996 301d 	ldrsb.w	r3, [r6, #29]
    c730:	2b00      	cmp	r3, #0
    c732:	f280 80b0 	bge.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    c736:	7a41      	ldrb	r1, [r0, #9]
    c738:	2018      	movs	r0, #24
    c73a:	f7fb ffc9 	bl	86d0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    c73e:	2800      	cmp	r0, #0
    c740:	f000 80a9 	beq.w	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    c744:	7b27      	ldrb	r7, [r4, #12]
    c746:	7b62      	ldrb	r2, [r4, #13]
    c748:	ea47 0002 	orr.w	r0, r7, r2
    c74c:	f010 0007 	ands.w	r0, r0, #7
    c750:	d125      	bne.n	c79e <isr_rx_conn_pkt_ctrl+0xffe>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    c752:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    c756:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    c75a:	4293      	cmp	r3, r2
    c75c:	f43f a8ef 	beq.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    c760:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    c764:	f003 0303 	and.w	r3, r3, #3
    c768:	2b02      	cmp	r3, #2
    c76a:	f47f a8e8 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		if (!conn->llcp_phy.cmd) {
    c76e:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c772:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    c776:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    c778:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    c77c:	f57f a8df 	bpl.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c780:	230c      	movs	r3, #12
		upd->status = 0;
    c782:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c784:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    c786:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    c78a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c78e:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    c790:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    c794:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c798:	7363      	strb	r3, [r4, #13]
    c79a:	f7ff bab7 	b.w	bd0c <isr_rx_conn_pkt_ctrl+0x56c>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    c79e:	89e0      	ldrh	r0, [r4, #14]
    c7a0:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    c7a2:	1ac3      	subs	r3, r0, r3
    c7a4:	041b      	lsls	r3, r3, #16
    c7a6:	f100 809a 	bmi.w	c8de <isr_rx_conn_pkt_ctrl+0x113e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    c7aa:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    c7ae:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    c7b2:	428b      	cmp	r3, r1
    c7b4:	f47f a836 	bne.w	b824 <isr_rx_conn_pkt_ctrl+0x84>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    c7b8:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    c7bc:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    c7c0:	42a3      	cmp	r3, r4
    c7c2:	d014      	beq.n	c7ee <isr_rx_conn_pkt_ctrl+0x104e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    c7c4:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    c7c8:	f003 0303 	and.w	r3, r3, #3
    c7cc:	2b02      	cmp	r3, #2
    c7ce:	d10e      	bne.n	c7ee <isr_rx_conn_pkt_ctrl+0x104e>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c7d0:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c7d4:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c7d8:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    c7dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
    c7e0:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    c7e4:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c7e6:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    c7ea:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    c7ee:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    c7f2:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    c7f6:	f002 0207 	and.w	r2, r2, #7
    c7fa:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    c7fe:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    c802:	f36f 0300 	bfc	r3, #0, #1
    c806:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    c80a:	2008      	movs	r0, #8
	conn->llcp_ack--;
    c80c:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    c80e:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    c812:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    c816:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    c81a:	2b00      	cmp	r3, #0
    c81c:	f43f a88f 	beq.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    c820:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    c824:	f362 0302 	bfi	r3, r2, #0, #3
    c828:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    c82c:	f7ff b887 	b.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
    c830:	4e2d      	ldr	r6, [pc, #180]	; (c8e8 <isr_rx_conn_pkt_ctrl+0x1148>)
    c832:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    c836:	f995 301d 	ldrsb.w	r3, [r5, #29]
    c83a:	2b00      	cmp	r3, #0
    c83c:	db2b      	blt.n	c896 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    c83e:	7a41      	ldrb	r1, [r0, #9]
    c840:	2019      	movs	r0, #25
    c842:	f7fb ff45 	bl	86d0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    c846:	b330      	cbz	r0, c896 <isr_rx_conn_pkt_ctrl+0x10f6>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    c848:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    c84c:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    c850:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    c854:	7b22      	ldrb	r2, [r4, #12]
    c856:	f003 0307 	and.w	r3, r3, #7
    c85a:	4213      	tst	r3, r2
    c85c:	f43f a86f 	beq.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
			if (conn->llcp_req != conn->llcp_ack) {
    c860:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    c864:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    c868:	429a      	cmp	r2, r3
    c86a:	f47f a868 	bne.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
			memcpy(&conn->llcp.chan_map.chm[0],
    c86e:	2205      	movs	r2, #5
    c870:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    c874:	f105 0079 	add.w	r0, r5, #121	; 0x79
    c878:	f7f5 f9c0 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    c87c:	2301      	movs	r3, #1
    c87e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    c882:	2302      	movs	r3, #2
    c884:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    c888:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    c88c:	3b01      	subs	r3, #1
    c88e:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    c892:	f7ff b854 	b.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
		nack = unknown_rsp_send(_radio.conn_curr,
    c896:	4814      	ldr	r0, [pc, #80]	; (c8e8 <isr_rx_conn_pkt_ctrl+0x1148>)
    c898:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c89c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    c8a0:	f7f9 fae7 	bl	5e72 <mem_acquire>
	if (!node_tx) {
    c8a4:	4601      	mov	r1, r0
    c8a6:	2800      	cmp	r0, #0
    c8a8:	f43f a96b 	beq.w	bb82 <isr_rx_conn_pkt_ctrl+0x3e2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c8ac:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    c8ae:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c8b0:	f043 0303 	orr.w	r3, r3, #3
    c8b4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    c8b6:	2302      	movs	r3, #2
    c8b8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    c8ba:	2307      	movs	r3, #7
    c8bc:	71c3      	strb	r3, [r0, #7]
    c8be:	f7ff b99d 	b.w	bbfc <isr_rx_conn_pkt_ctrl+0x45c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    c8c2:	2328      	movs	r3, #40	; 0x28
    c8c4:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    c8c8:	f7ff b839 	b.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
	if (node_tx) {
    c8cc:	2e00      	cmp	r6, #0
    c8ce:	f43f a958 	beq.w	bb82 <isr_rx_conn_pkt_ctrl+0x3e2>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    c8d2:	4906      	ldr	r1, [pc, #24]	; (c8ec <isr_rx_conn_pkt_ctrl+0x114c>)
    c8d4:	4630      	mov	r0, r6
    c8d6:	f7f9 fae6 	bl	5ea6 <mem_release>
    c8da:	f7ff b952 	b.w	bb82 <isr_rx_conn_pkt_ctrl+0x3e2>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    c8de:	2328      	movs	r3, #40	; 0x28
    c8e0:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    c8e4:	f7ff b82b 	b.w	b93e <isr_rx_conn_pkt_ctrl+0x19e>
    c8e8:	20000668 	.word	0x20000668
    c8ec:	200007c4 	.word	0x200007c4

0000c8f0 <isr>:
{
    c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8f4:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    c8f6:	f003 fc67 	bl	101c8 <radio_is_done>
    c8fa:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    c8fc:	b35e      	cbz	r6, c956 <isr+0x66>
		crc_ok = radio_crc_is_valid();
    c8fe:	f003 fc83 	bl	10208 <radio_crc_is_valid>
    c902:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    c904:	f003 fd04 	bl	10310 <radio_filter_has_match>
    c908:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    c90c:	f003 fd0a 	bl	10324 <radio_filter_match_get>
    c910:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    c914:	f003 feee 	bl	106f4 <radio_ar_has_match>
    c918:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    c91c:	f003 fed8 	bl	106d0 <radio_ar_match_get>
    c920:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    c924:	f003 fcbe 	bl	102a4 <radio_rssi_is_ready>
    c928:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    c92a:	4cac      	ldr	r4, [pc, #688]	; (cbdc <isr+0x2ec>)
	radio_status_reset();
    c92c:	f003 fc36 	bl	1019c <radio_status_reset>
	radio_tmr_status_reset();
    c930:	f003 fd0a 	bl	10348 <radio_tmr_status_reset>
	radio_filter_status_reset();
    c934:	f003 fce4 	bl	10300 <radio_filter_status_reset>
	radio_ar_status_reset();
    c938:	f003 fed0 	bl	106dc <radio_ar_status_reset>
	radio_rssi_status_reset();
    c93c:	f003 fcaa 	bl	10294 <radio_rssi_status_reset>
	switch (_radio.state) {
    c940:	7d23      	ldrb	r3, [r4, #20]
    c942:	2b05      	cmp	r3, #5
    c944:	d82c      	bhi.n	c9a0 <isr+0xb0>
    c946:	e8df f013 	tbh	[pc, r3, lsl #1]
    c94a:	0079      	.short	0x0079
    c94c:	000e00c2 	.word	0x000e00c2
    c950:	09880988 	.word	0x09880988
    c954:	0988      	.short	0x0988
		devmatch_id = irkmatch_id = 0xFF;
    c956:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    c95a:	4635      	mov	r5, r6
    c95c:	46b2      	mov	sl, r6
    c95e:	46b1      	mov	r9, r6
    c960:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    c962:	46d8      	mov	r8, fp
    c964:	e7e1      	b.n	c92a <isr+0x3a>
	_radio.state = STATE_RX;
    c966:	2301      	movs	r3, #1
    c968:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    c96a:	f003 fdef 	bl	1054c <radio_tmr_tifs_base_get>
    c96e:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    c970:	2096      	movs	r0, #150	; 0x96
    c972:	f003 fcf7 	bl	10364 <radio_tmr_tifs_set>
	switch (_radio.role) {
    c976:	7ce3      	ldrb	r3, [r4, #19]
    c978:	3b01      	subs	r3, #1
    c97a:	2b03      	cmp	r3, #3
    c97c:	d810      	bhi.n	c9a0 <isr+0xb0>
    c97e:	e8df f003 	tbb	[pc, r3]
    c982:	3002      	.short	0x3002
    c984:	6060      	.short	0x6060
		radio_switch_complete_and_tx(0, 0, 0, 0);
    c986:	2300      	movs	r3, #0
    c988:	461a      	mov	r2, r3
    c98a:	4619      	mov	r1, r3
    c98c:	4618      	mov	r0, r3
    c98e:	f003 fc59 	bl	10244 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    c992:	f003 fc47 	bl	10224 <radio_pkt_scratch_get>
    c996:	f003 fbc9 	bl	1012c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    c99a:	f003 fc0b 	bl	101b4 <radio_is_ready>
    c99e:	b128      	cbz	r0, c9ac <isr+0xbc>
		LL_ASSERT(0);
    c9a0:	4040      	eors	r0, r0
    c9a2:	f380 8811 	msr	BASEPRI, r0
    c9a6:	f04f 0004 	mov.w	r0, #4
    c9aa:	df02      	svc	2
		if (ctrl_rl_enabled()) {
    c9ac:	f002 ff28 	bl	f800 <ctrl_rl_enabled>
    c9b0:	b138      	cbz	r0, c9c2 <isr+0xd2>
			u8_t count, *irks = ctrl_irks_get(&count);
    c9b2:	a810      	add	r0, sp, #64	; 0x40
    c9b4:	f002 fd1c 	bl	f3f0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    c9b8:	4601      	mov	r1, r0
    c9ba:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c9be:	f003 fe55 	bl	1066c <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    c9c2:	2100      	movs	r1, #0
    c9c4:	4608      	mov	r0, r1
    c9c6:	f003 fbc6 	bl	10156 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    c9ca:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    c9cc:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    c9ce:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    c9d0:	4608      	mov	r0, r1
    c9d2:	f003 fbbc 	bl	1014e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    c9d6:	1a28      	subs	r0, r5, r0
    c9d8:	f003 fd4e 	bl	10478 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    c9dc:	f003 fd9e 	bl	1051c <radio_tmr_end_capture>
    c9e0:	e02c      	b.n	ca3c <isr+0x14c>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    c9e2:	2300      	movs	r3, #0
    c9e4:	461a      	mov	r2, r3
    c9e6:	4619      	mov	r1, r3
    c9e8:	4618      	mov	r0, r3
    c9ea:	f003 fc2b 	bl	10244 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    c9ee:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c9f2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    c9f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c9fa:	3008      	adds	r0, #8
    c9fc:	f003 fb96 	bl	1012c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    ca00:	f003 fbd8 	bl	101b4 <radio_is_ready>
    ca04:	2800      	cmp	r0, #0
    ca06:	d1cb      	bne.n	c9a0 <isr+0xb0>
		if (ctrl_rl_enabled()) {
    ca08:	f002 fefa 	bl	f800 <ctrl_rl_enabled>
    ca0c:	b138      	cbz	r0, ca1e <isr+0x12e>
			u8_t count, *irks = ctrl_irks_get(&count);
    ca0e:	a810      	add	r0, sp, #64	; 0x40
    ca10:	f002 fcee 	bl	f3f0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    ca14:	4601      	mov	r1, r0
    ca16:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ca1a:	f003 fe27 	bl	1066c <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    ca1e:	2100      	movs	r1, #0
    ca20:	4608      	mov	r0, r1
    ca22:	f003 fb98 	bl	10156 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    ca26:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    ca28:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    ca2a:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    ca2c:	4608      	mov	r0, r1
    ca2e:	f003 fb8e 	bl	1014e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ca32:	1a28      	subs	r0, r5, r0
    ca34:	f003 fd20 	bl	10478 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    ca38:	f003 fc1c 	bl	10274 <radio_rssi_measure>
}
    ca3c:	b013      	add	sp, #76	; 0x4c
    ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ca42:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    ca46:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ca4a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ca4e:	2100      	movs	r1, #0
    ca50:	09d3      	lsrs	r3, r2, #7
    ca52:	f000 0007 	and.w	r0, r0, #7
    ca56:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ca5a:	f003 fbf3 	bl	10244 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ca5e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ca62:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    ca66:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ca6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    ca6e:	3108      	adds	r1, #8
    ca70:	f7fc f920 	bl	8cb4 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    ca74:	f003 fb9e 	bl	101b4 <radio_is_ready>
    ca78:	2800      	cmp	r0, #0
    ca7a:	d191      	bne.n	c9a0 <isr+0xb0>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    ca7c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ca80:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ca84:	2101      	movs	r1, #1
    ca86:	f000 0007 	and.w	r0, r0, #7
    ca8a:	f003 fb64 	bl	10156 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ca8e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    ca92:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    ca96:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    ca9a:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    ca9c:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    ca9e:	4405      	add	r5, r0
	switch (phy) {
    caa0:	d013      	beq.n	caca <isr+0x1da>
		return 40;
    caa2:	2b04      	cmp	r3, #4
    caa4:	bf0c      	ite	eq
    caa6:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    caaa:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    caac:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    caae:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    cab2:	09c1      	lsrs	r1, r0, #7
    cab4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    cab8:	f003 fb49 	bl	1014e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    cabc:	1a28      	subs	r0, r5, r0
    cabe:	f003 fcdb 	bl	10478 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    cac2:	2001      	movs	r0, #1
    cac4:	f7fc fe4c 	bl	9760 <packet_tx_enqueue>
    cac8:	e7b8      	b.n	ca3c <isr+0x14c>
		return 24;
    caca:	2018      	movs	r0, #24
    cacc:	e7ee      	b.n	caac <isr+0x1bc>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    cace:	b926      	cbnz	r6, cada <isr+0x1ea>
		_radio.state = STATE_CLOSE;
    cad0:	2303      	movs	r3, #3
    cad2:	7523      	strb	r3, [r4, #20]
		radio_disable();
    cad4:	f003 fb50 	bl	10178 <radio_disable>
    cad8:	e7b0      	b.n	ca3c <isr+0x14c>
	switch (_radio.role) {
    cada:	7ce3      	ldrb	r3, [r4, #19]
    cadc:	3b01      	subs	r3, #1
    cade:	2b03      	cmp	r3, #3
    cae0:	f63f af5e 	bhi.w	c9a0 <isr+0xb0>
    cae4:	e8df f013 	tbh	[pc, r3, lsl #1]
    cae8:	02920004 	.word	0x02920004
    caec:	05940594 	.word	0x05940594
		if (crc_ok) {
    caf0:	2f00      	cmp	r7, #0
    caf2:	d0ed      	beq.n	cad0 <isr+0x1e0>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    caf4:	f1ba 0f00 	cmp.w	sl, #0
    caf8:	d039      	beq.n	cb6e <isr+0x27e>
    cafa:	4658      	mov	r0, fp
    cafc:	f002 fca2 	bl	f444 <ctrl_rl_irk_idx>
    cb00:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    cb04:	f003 fb8e 	bl	10224 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    cb08:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    cb0c:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    cb0e:	232b      	movs	r3, #43	; 0x2b
    cb10:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    cb12:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    cb14:	fb11 3302 	smlabb	r3, r1, r2, r3
    cb18:	930a      	str	r3, [sp, #40]	; 0x28
    cb1a:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    cb1c:	f000 030f 	and.w	r3, r0, #15
    cb20:	2b03      	cmp	r3, #3
    cb22:	d10a      	bne.n	cb3a <isr+0x24a>
    cb24:	7873      	ldrb	r3, [r6, #1]
    cb26:	2b0c      	cmp	r3, #12
    cb28:	d107      	bne.n	cb3a <isr+0x24a>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    cb2a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cb2e:	065f      	lsls	r7, r3, #25
    cb30:	d51f      	bpl.n	cb72 <isr+0x282>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    cb32:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    cb36:	0658      	lsls	r0, r3, #25
    cb38:	d445      	bmi.n	cbc6 <isr+0x2d6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    cb3a:	7830      	ldrb	r0, [r6, #0]
    cb3c:	f000 030f 	and.w	r3, r0, #15
    cb40:	2b05      	cmp	r3, #5
    cb42:	d1c5      	bne.n	cad0 <isr+0x1e0>
    cb44:	7873      	ldrb	r3, [r6, #1]
    cb46:	2b22      	cmp	r3, #34	; 0x22
    cb48:	d1c2      	bne.n	cad0 <isr+0x1e0>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    cb4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb4c:	5ce3      	ldrb	r3, [r4, r3]
    cb4e:	f003 030f 	and.w	r3, r3, #15
    cb52:	2b01      	cmp	r3, #1
    cb54:	f040 8216 	bne.w	cf84 <isr+0x694>
					    ci->connect_ind.init_addr,
    cb58:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    cb5a:	aa10      	add	r2, sp, #64	; 0x40
    cb5c:	4639      	mov	r1, r7
    cb5e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    cb62:	f002 fdf1 	bl	f748 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    cb66:	2800      	cmp	r0, #0
    cb68:	d13a      	bne.n	cbe0 <isr+0x2f0>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cb6a:	2000      	movs	r0, #0
    cb6c:	e048      	b.n	cc00 <isr+0x310>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    cb6e:	20ff      	movs	r0, #255	; 0xff
    cb70:	e7c6      	b.n	cb00 <isr+0x210>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    cb72:	aa10      	add	r2, sp, #64	; 0x40
    cb74:	1cb1      	adds	r1, r6, #2
    cb76:	f3c0 1080 	ubfx	r0, r0, #6, #1
    cb7a:	f002 fde5 	bl	f748 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    cb7e:	2800      	cmp	r0, #0
    cb80:	d0d7      	beq.n	cb32 <isr+0x242>
	return (adv->tx_addr == sr->rx_addr) &&
    cb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb84:	7832      	ldrb	r2, [r6, #0]
    cb86:	5ce3      	ldrb	r3, [r4, r3]
    cb88:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cb8c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    cb90:	d1d3      	bne.n	cb3a <isr+0x24a>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    cb92:	2206      	movs	r2, #6
    cb94:	f106 0108 	add.w	r1, r6, #8
    cb98:	1ca8      	adds	r0, r5, #2
    cb9a:	f7f5 f81a 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    cb9e:	2800      	cmp	r0, #0
    cba0:	d1cb      	bne.n	cb3a <isr+0x24a>
		_radio.state = STATE_CLOSE;
    cba2:	2303      	movs	r3, #3
    cba4:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    cba6:	f003 fb57 	bl	10258 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    cbaa:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    cbae:	2327      	movs	r3, #39	; 0x27
    cbb0:	fb03 4000 	mla	r0, r3, r0, r4
    cbb4:	307b      	adds	r0, #123	; 0x7b
    cbb6:	f003 fabf 	bl	10138 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    cbba:	f003 fafb 	bl	101b4 <radio_is_ready>
    cbbe:	2800      	cmp	r0, #0
    cbc0:	f43f af3c 	beq.w	ca3c <isr+0x14c>
    cbc4:	e6ec      	b.n	c9a0 <isr+0xb0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    cbc6:	f1b9 0f00 	cmp.w	r9, #0
    cbca:	d1da      	bne.n	cb82 <isr+0x292>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cbcc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    cbd0:	f002 fc54 	bl	f47c <ctrl_irk_whitelisted>
    cbd4:	2800      	cmp	r0, #0
    cbd6:	d1d4      	bne.n	cb82 <isr+0x292>
    cbd8:	e7af      	b.n	cb3a <isr+0x24a>
    cbda:	bf00      	nop
    cbdc:	20000668 	.word	0x20000668
		       isr_adv_ci_adva_check(adv, ci) &&
    cbe0:	4631      	mov	r1, r6
    cbe2:	4628      	mov	r0, r5
    cbe4:	f7fc fb1a 	bl	921c <isr_adv_ci_adva_check>
					    rl_idx) &&
    cbe8:	2800      	cmp	r0, #0
    cbea:	d0be      	beq.n	cb6a <isr+0x27a>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    cbec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    cbf0:	2bff      	cmp	r3, #255	; 0xff
    cbf2:	f000 81b4 	beq.w	cf5e <isr+0x66e>
		return rl_idx == _radio.advertiser.rl_idx;
    cbf6:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    cbfa:	1ac1      	subs	r1, r0, r3
    cbfc:	4248      	negs	r0, r1
    cbfe:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cc00:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    cc04:	2800      	cmp	r0, #0
    cc06:	f43f af63 	beq.w	cad0 <isr+0x1e0>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    cc0a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    cc0e:	b133      	cbz	r3, cc1e <isr+0x32e>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    cc10:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    cc14:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    cc18:	429a      	cmp	r2, r3
    cc1a:	f47f af59 	bne.w	cad0 <isr+0x1e0>
    cc1e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    cc22:	2b00      	cmp	r3, #0
    cc24:	f43f af54 	beq.w	cad0 <isr+0x1e0>
			node_rx = packet_rx_reserve_get(4);
    cc28:	2004      	movs	r0, #4
    cc2a:	f7fb fdaf 	bl	878c <packet_rx_reserve_get>
		if (!node_rx) {
    cc2e:	4607      	mov	r7, r0
    cc30:	2800      	cmp	r0, #0
    cc32:	f43f af4d 	beq.w	cad0 <isr+0x1e0>
		_radio.state = STATE_STOP;
    cc36:	f04f 0904 	mov.w	r9, #4
    cc3a:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    cc3e:	f003 fa9b 	bl	10178 <radio_disable>
		conn = _radio.advertiser.conn;
    cc42:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cc46:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    cc4a:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cc4c:	f44f 72aa 	mov.w	r2, #340	; 0x154
    cc50:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    cc52:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cc56:	f7f9 f944 	bl	5ee2 <mem_index_get>
		memcpy(&conn->access_addr[0],
    cc5a:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cc5e:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    cc60:	2203      	movs	r2, #3
    cc62:	f106 0112 	add.w	r1, r6, #18
    cc66:	f105 0014 	add.w	r0, r5, #20
    cc6a:	f7f4 ffc7 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    cc6e:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    cc72:	464a      	mov	r2, r9
    cc74:	f106 010e 	add.w	r1, r6, #14
    cc78:	4650      	mov	r0, sl
    cc7a:	f7f4 ffbf 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    cc7e:	2205      	movs	r2, #5
    cc80:	f106 011e 	add.w	r1, r6, #30
    cc84:	4640      	mov	r0, r8
    cc86:	f7f4 ffb9 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    cc8a:	2105      	movs	r1, #5
    cc8c:	4640      	mov	r0, r8
    cc8e:	f7f9 fa9b 	bl	61c8 <util_ones_count_get>
		conn->data_chan_count =
    cc92:	7f6b      	ldrb	r3, [r5, #29]
    cc94:	f360 0305 	bfi	r3, r0, #0, #6
    cc98:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    cc9a:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    cc9e:	f3c3 0304 	ubfx	r3, r3, #0, #5
    cca2:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    cca4:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    cca6:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    cca8:	f240 48e2 	movw	r8, #1250	; 0x4e2
    ccac:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    ccb0:	7ef2      	ldrb	r2, [r6, #27]
    ccb2:	7eb3      	ldrb	r3, [r6, #26]
    ccb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ccb8:	4651      	mov	r1, sl
    ccba:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    ccbc:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ccbe:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    ccc2:	f7f4 ff9b 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    ccc6:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ccc8:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    ccca:	f242 7210 	movw	r2, #10000	; 0x2710
    ccce:	fb02 8303 	mla	r3, r2, r3, r8
    ccd2:	3b01      	subs	r3, #1
    ccd4:	fbb3 f3f8 	udiv	r3, r3, r8
    ccd8:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    ccda:	4bc3      	ldr	r3, [pc, #780]	; (cfe8 <isr+0x6f8>)
    ccdc:	4443      	add	r3, r8
    ccde:	fbb3 f3f8 	udiv	r3, r3, r8
    cce2:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    cce6:	4bc1      	ldr	r3, [pc, #772]	; (cfec <isr+0x6fc>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cce8:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ccea:	4443      	add	r3, r8
    ccec:	fbb3 f3f8 	udiv	r3, r3, r8
    ccf0:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ccf2:	4282      	cmp	r2, r0
    ccf4:	4613      	mov	r3, r2
    ccf6:	bfc4      	itt	gt
    ccf8:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    ccfc:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ccfe:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cd02:	bfc4      	itt	gt
    cd04:	18d2      	addgt	r2, r2, r3
    cd06:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    cd08:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    cd0a:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    cd0e:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    cd10:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    cd12:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    cd14:	2300      	movs	r3, #0
    cd16:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    cd18:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    cd1a:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    cd1e:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cd20:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    cd24:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    cd28:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cd2a:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    cd2e:	464a      	mov	r2, r9
    cd30:	f107 001b 	add.w	r0, r7, #27
    cd34:	f7f4 ff62 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    cd38:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    cd3c:	f107 030e 	add.w	r3, r7, #14
    cd40:	28ff      	cmp	r0, #255	; 0xff
    cd42:	930b      	str	r3, [sp, #44]	; 0x2c
    cd44:	f106 0a02 	add.w	sl, r6, #2
    cd48:	f107 0b14 	add.w	fp, r7, #20
    cd4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd4e:	f000 8138 	beq.w	cfc2 <isr+0x6d2>
			ll_rl_id_addr_get(rl_idx,
    cd52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd54:	f107 010d 	add.w	r1, r7, #13
    cd58:	f002 fcd6 	bl	f708 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    cd5c:	7b7b      	ldrb	r3, [r7, #13]
    cd5e:	3302      	adds	r3, #2
    cd60:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    cd62:	464a      	mov	r2, r9
    cd64:	4651      	mov	r1, sl
    cd66:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cd68:	f7f4 ff48 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    cd6c:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    cd6e:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    cd72:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    cd74:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    cd78:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    cd7a:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    cd7e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    cd82:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    cd86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    cd8a:	8c28      	ldrh	r0, [r5, #32]
    cd8c:	f7fc fab6 	bl	92fc <rx_fc_lock>
		packet_rx_enqueue();
    cd90:	f7fc fb66 	bl	9460 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    cd94:	2003      	movs	r0, #3
    cd96:	f7fb fcf9 	bl	878c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    cd9a:	2800      	cmp	r0, #0
    cd9c:	f43f ae00 	beq.w	c9a0 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    cda0:	8c2b      	ldrh	r3, [r5, #32]
    cda2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    cda4:	230b      	movs	r3, #11
    cda6:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    cda8:	7833      	ldrb	r3, [r6, #0]
    cdaa:	f013 0320 	ands.w	r3, r3, #32
    cdae:	d00e      	beq.n	cdce <isr+0x4de>
					((u16_t)conn->access_addr[1] << 8) |
    cdb0:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    cdb2:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    cdb4:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    cdb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    cdba:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    cdbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    cdc0:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    cdc2:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    cdc4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    cdc8:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    cdca:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    cdcc:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    cdce:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    cdd0:	f7fc fb46 	bl	9460 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    cdd4:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    cdd8:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    cddc:	4984      	ldr	r1, [pc, #528]	; (cff0 <isr+0x700>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    cdde:	0952      	lsrs	r2, r2, #5
    cde0:	f362 0384 	bfi	r3, r2, #2, #3
    cde4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    cde8:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    cdec:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    cdf0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    cdf4:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    cdf6:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    cdfa:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    cdfe:	4a7d      	ldr	r2, [pc, #500]	; (cff4 <isr+0x704>)
    ce00:	f203 233f 	addw	r3, r3, #575	; 0x23f
    ce04:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    ce08:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    ce0a:	ea4f 0358 	mov.w	r3, r8, lsr #1
    ce0e:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    ce10:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    ce12:	7d73      	ldrb	r3, [r6, #21]
    ce14:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    ce18:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    ce1a:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    ce1e:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ce20:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    ce22:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ce24:	4638      	mov	r0, r7
    ce26:	f003 f994 	bl	10152 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ce2a:	4973      	ldr	r1, [pc, #460]	; (cff8 <isr+0x708>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ce2c:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ce2e:	f200 4052 	addw	r0, r0, #1106	; 0x452
    ce32:	a36b      	add	r3, pc, #428	; (adr r3, cfe0 <isr+0x6f0>)
    ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce38:	fba0 0101 	umull	r0, r1, r0, r1
    ce3c:	f7f3 f9ea 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ce40:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    ce44:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    ce46:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ce48:	4293      	cmp	r3, r2
    ce4a:	bf38      	it	cc
    ce4c:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ce4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ce52:	469a      	mov	sl, r3
		conn_interval_us -=
    ce54:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    ce56:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    ce58:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    ce5a:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    ce5c:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    ce60:	f003 fb6e 	bl	10540 <radio_tmr_end_get>
    ce64:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    ce66:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ce68:	4639      	mov	r1, r7
		conn_offset_us +=
    ce6a:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ce6e:	4638      	mov	r0, r7
    ce70:	f003 f96d 	bl	1014e <radio_tx_chain_delay_get>
    ce74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce76:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    ce7a:	4499      	add	r9, r3
    ce7c:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    ce80:	eba9 030b 	sub.w	r3, r9, fp
    ce84:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ce86:	f240 4383 	movw	r3, #1155	; 0x483
    ce8a:	9300      	str	r3, [sp, #0]
    ce8c:	2205      	movs	r2, #5
    ce8e:	4b5b      	ldr	r3, [pc, #364]	; (cffc <isr+0x70c>)
    ce90:	f8df b164 	ldr.w	fp, [pc, #356]	; cff8 <isr+0x708>
    ce94:	4639      	mov	r1, r7
    ce96:	4638      	mov	r0, r7
    ce98:	f7f9 fefe 	bl	6c98 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    ce9c:	f240 4184 	movw	r1, #1156	; 0x484
    cea0:	f7fc fdd4 	bl	9a4c <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    cea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cea6:	5ce3      	ldrb	r3, [r4, r3]
    cea8:	f003 030f 	and.w	r3, r3, #15
    ceac:	2b01      	cmp	r3, #1
    ceae:	d106      	bne.n	cebe <isr+0x5ce>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ceb0:	9700      	str	r7, [sp, #0]
    ceb2:	463b      	mov	r3, r7
    ceb4:	2203      	movs	r2, #3
    ceb6:	4639      	mov	r1, r7
    ceb8:	4638      	mov	r0, r7
    ceba:	f7f9 feed 	bl	6c98 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    cebe:	fba8 890b 	umull	r8, r9, r8, fp
    cec2:	a347      	add	r3, pc, #284	; (adr r3, cfe0 <isr+0x6f0>)
    cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cec8:	4640      	mov	r0, r8
    ceca:	4649      	mov	r1, r9
    cecc:	f7f3 f9a2 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ced0:	f895 3020 	ldrb.w	r3, [r5, #32]
    ced4:	68a4      	ldr	r4, [r4, #8]
    ced6:	9506      	str	r5, [sp, #24]
    ced8:	3307      	adds	r3, #7
    ceda:	b2db      	uxtb	r3, r3
    cedc:	930a      	str	r3, [sp, #40]	; 0x28
    cede:	f240 439b 	movw	r3, #1179	; 0x49b
    cee2:	9308      	str	r3, [sp, #32]
    cee4:	4b46      	ldr	r3, [pc, #280]	; (d000 <isr+0x710>)
    cee6:	9307      	str	r3, [sp, #28]
    cee8:	4b46      	ldr	r3, [pc, #280]	; (d004 <isr+0x714>)
    ceea:	9305      	str	r3, [sp, #20]
    ceec:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ceee:	4a46      	ldr	r2, [pc, #280]	; (d008 <isr+0x718>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cef0:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    cef2:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cef4:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    cef6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cefa:	2307      	movs	r3, #7
    cefc:	2100      	movs	r1, #0
    cefe:	4343      	muls	r3, r0
    cf00:	fb02 3301 	mla	r3, r2, r1, r3
    cf04:	fba0 1202 	umull	r1, r2, r0, r2
    cf08:	441a      	add	r2, r3
    cf0a:	4608      	mov	r0, r1
    cf0c:	ebb8 0000 	subs.w	r0, r8, r0
    cf10:	4611      	mov	r1, r2
    cf12:	f04f 0300 	mov.w	r3, #0
    cf16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cf1a:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cf1e:	2500      	movs	r5, #0
    cf20:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    cf22:	f7f3 f977 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cf26:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cf28:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cf2a:	a32d      	add	r3, pc, #180	; (adr r3, cfe0 <isr+0x6f0>)
    cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cf30:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cf34:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cf38:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cf3a:	f7f3 f96b 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cf3e:	eba4 040a 	sub.w	r4, r4, sl
    cf42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cf46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cf48:	9000      	str	r0, [sp, #0]
    cf4a:	4623      	mov	r3, r4
		ticker_status =
    cf4c:	4629      	mov	r1, r5
    cf4e:	4628      	mov	r0, r5
    cf50:	f7f9 fe04 	bl	6b5c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cf54:	f030 0302 	bics.w	r3, r0, #2
    cf58:	f47f ad22 	bne.w	c9a0 <isr+0xb0>
    cf5c:	e56e      	b.n	ca3c <isr+0x14c>
	return (adv->rx_addr == ci->tx_addr) &&
    cf5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf60:	5ce2      	ldrb	r2, [r4, r3]
    cf62:	7833      	ldrb	r3, [r6, #0]
    cf64:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cf68:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    cf6c:	f47f adfd 	bne.w	cb6a <isr+0x27a>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    cf70:	2206      	movs	r2, #6
    cf72:	4639      	mov	r1, r7
    cf74:	f105 0008 	add.w	r0, r5, #8
    cf78:	f7f4 fe2b 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    cf7c:	fab0 f080 	clz	r0, r0
    cf80:	0940      	lsrs	r0, r0, #5
    cf82:	e63d      	b.n	cc00 <isr+0x310>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    cf84:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cf88:	09db      	lsrs	r3, r3, #7
    cf8a:	d00d      	beq.n	cfa8 <isr+0x6b8>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    cf8c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    cf90:	09db      	lsrs	r3, r3, #7
    cf92:	f43f adea 	beq.w	cb6a <isr+0x27a>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    cf96:	f1b9 0f00 	cmp.w	r9, #0
    cf9a:	d10d      	bne.n	cfb8 <isr+0x6c8>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cf9c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    cfa0:	f002 fa6c 	bl	f47c <ctrl_irk_whitelisted>
    cfa4:	b940      	cbnz	r0, cfb8 <isr+0x6c8>
    cfa6:	e5e0      	b.n	cb6a <isr+0x27a>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    cfa8:	aa10      	add	r2, sp, #64	; 0x40
    cfaa:	1cb1      	adds	r1, r6, #2
    cfac:	f3c0 1080 	ubfx	r0, r0, #6, #1
    cfb0:	f002 fbca 	bl	f748 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    cfb4:	2800      	cmp	r0, #0
    cfb6:	d0e9      	beq.n	cf8c <isr+0x69c>
	       isr_adv_ci_adva_check(adv, ci);
    cfb8:	4631      	mov	r1, r6
    cfba:	4628      	mov	r0, r5
    cfbc:	f7fc f92e 	bl	921c <isr_adv_ci_adva_check>
    cfc0:	e61e      	b.n	cc00 <isr+0x310>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    cfc2:	4619      	mov	r1, r3
    cfc4:	464a      	mov	r2, r9
    cfc6:	4658      	mov	r0, fp
    cfc8:	f7f4 fe44 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    cfcc:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cfce:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    cfd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cfd4:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cfd6:	464a      	mov	r2, r9
    cfd8:	4651      	mov	r1, sl
    cfda:	e6c5      	b.n	cd68 <isr+0x478>
    cfdc:	f3af 8000 	nop.w
    cfe0:	1afd498d 	.word	0x1afd498d
    cfe4:	00000007 	.word	0x00000007
    cfe8:	026259ff 	.word	0x026259ff
    cfec:	01c9c37f 	.word	0x01c9c37f
    cff0:	00012cf2 	.word	0x00012cf2
    cff4:	000f4240 	.word	0x000f4240
    cff8:	3b9aca00 	.word	0x3b9aca00
    cffc:	00009a4d 	.word	0x00009a4d
    d000:	00009a7d 	.word	0x00009a7d
    d004:	0000b195 	.word	0x0000b195
    d008:	1afd498d 	.word	0x1afd498d
		rl_idx = devmatch_ok ?
    d00c:	f1b9 0f00 	cmp.w	r9, #0
    d010:	d01c      	beq.n	d04c <isr+0x75c>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    d012:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    d016:	4641      	mov	r1, r8
    d018:	f3c0 1000 	ubfx	r0, r0, #4, #1
    d01c:	f002 f9f2 	bl	f404 <ctrl_rl_idx>
    d020:	4680      	mov	r8, r0
		if (crc_ok &&
    d022:	b147      	cbz	r7, d036 <isr+0x746>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    d024:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    d028:	06da      	lsls	r2, r3, #27
    d02a:	d519      	bpl.n	d060 <isr+0x770>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    d02c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    d030:	06db      	lsls	r3, r3, #27
    d032:	f100 81c9 	bmi.w	d3c8 <isr+0xad8>
			_radio.state = STATE_CLOSE;
    d036:	2303      	movs	r3, #3
    d038:	7523      	strb	r3, [r4, #20]
			radio_disable();
    d03a:	f003 f89d 	bl	10178 <radio_disable>
			_radio.scanner.state = 0;
    d03e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    d042:	f36f 0341 	bfc	r3, #1, #1
    d046:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    d04a:	e4f7      	b.n	ca3c <isr+0x14c>
		rl_idx = devmatch_ok ?
    d04c:	f1ba 0f00 	cmp.w	sl, #0
    d050:	d003      	beq.n	d05a <isr+0x76a>
    d052:	4658      	mov	r0, fp
    d054:	f002 f9f6 	bl	f444 <ctrl_rl_irk_idx>
    d058:	e7e2      	b.n	d020 <isr+0x730>
    d05a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    d05e:	e7e0      	b.n	d022 <isr+0x732>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    d060:	f1b9 0f00 	cmp.w	r9, #0
    d064:	d005      	beq.n	d072 <isr+0x782>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    d066:	4641      	mov	r1, r8
    d068:	4650      	mov	r0, sl
    d06a:	f002 fb2f 	bl	f6cc <ctrl_rl_idx_allowed>
    d06e:	2800      	cmp	r0, #0
    d070:	d0dc      	beq.n	d02c <isr+0x73c>
	bool dir_report = false;
    d072:	2300      	movs	r3, #0
    d074:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    d078:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    d07c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    d080:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    d084:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    d088:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    d08c:	2b00      	cmp	r3, #0
    d08e:	f000 81c7 	beq.w	d420 <isr+0xb30>
    d092:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    d096:	b133      	cbz	r3, d0a6 <isr+0x7b6>
				      (_radio.fc_req == _radio.fc_ack)) &&
    d098:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    d09c:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    d0a0:	429a      	cmp	r2, r3
    d0a2:	f040 81bd 	bne.w	d420 <isr+0xb30>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    d0a6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    d0aa:	f3c3 1000 	ubfx	r0, r3, #4, #1
    d0ae:	2800      	cmp	r0, #0
    d0b0:	f000 81a8 	beq.w	d404 <isr+0xb14>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    d0b4:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    d0b8:	f010 000f 	ands.w	r0, r0, #15
    d0bc:	f040 8221 	bne.w	d502 <isr+0xc12>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    d0c0:	f003 fa3e 	bl	10540 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    d0c4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    d0c8:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    d0cc:	48c8      	ldr	r0, [pc, #800]	; (d3f0 <isr+0xb00>)
    d0ce:	2207      	movs	r2, #7
    d0d0:	fba3 0100 	umull	r0, r1, r3, r0
    d0d4:	fb02 1103 	mla	r1, r2, r3, r1
    d0d8:	a3c1      	add	r3, pc, #772	; (adr r3, d3e0 <isr+0xaf0>)
    d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0de:	f7f3 f899 	bl	214 <__aeabi_uldivmod>
    d0e2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    d0e6:	4287      	cmp	r7, r0
    d0e8:	f080 819a 	bcs.w	d420 <isr+0xb30>
			node_rx = packet_rx_reserve_get(4);
    d0ec:	2004      	movs	r0, #4
    d0ee:	f7fb fb4d 	bl	878c <packet_rx_reserve_get>
		if (node_rx == 0) {
    d0f2:	4607      	mov	r7, r0
    d0f4:	2800      	cmp	r0, #0
    d0f6:	d09e      	beq.n	d036 <isr+0x746>
		_radio.state = STATE_STOP;
    d0f8:	2304      	movs	r3, #4
    d0fa:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    d0fc:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    d0fe:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    d102:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    d106:	f003 f88d 	bl	10224 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    d10a:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    d10c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    d110:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    d114:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d116:	f899 3008 	ldrb.w	r3, [r9, #8]
    d11a:	7802      	ldrb	r2, [r0, #0]
    d11c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d120:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    d124:	2322      	movs	r3, #34	; 0x22
    d126:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    d128:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d12a:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    d12c:	4640      	mov	r0, r8
    d12e:	f002 f94b 	bl	f3c8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    d132:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    d136:	4601      	mov	r1, r0
    d138:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    d13a:	f013 0f01 	tst.w	r3, #1
    d13e:	f810 3b02 	ldrb.w	r3, [r0], #2
    d142:	f000 81e8 	beq.w	d516 <isr+0xc26>
    d146:	2900      	cmp	r1, #0
    d148:	f000 81e5 	beq.w	d516 <isr+0xc26>
			pdu_adv_tx->tx_addr = 1;
    d14c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d150:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    d152:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    d154:	f7f4 fd52 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    d158:	f105 0308 	add.w	r3, r5, #8
    d15c:	4618      	mov	r0, r3
    d15e:	2206      	movs	r2, #6
    d160:	f109 010a 	add.w	r1, r9, #10
    d164:	930a      	str	r3, [sp, #40]	; 0x28
    d166:	f7f4 fd49 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    d16a:	2204      	movs	r2, #4
    d16c:	f106 0110 	add.w	r1, r6, #16
    d170:	f105 000e 	add.w	r0, r5, #14
    d174:	f7f4 fd42 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    d178:	2203      	movs	r2, #3
    d17a:	f106 0114 	add.w	r1, r6, #20
    d17e:	f105 0012 	add.w	r0, r5, #18
    d182:	f7f4 fd3b 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    d186:	2301      	movs	r3, #1
    d188:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    d18a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    d18e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d192:	4353      	muls	r3, r2
    d194:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    d196:	f003 f9d3 	bl	10540 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    d19a:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    d19c:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    d1a0:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    d1a2:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    d1a6:	bfd8      	it	le
    d1a8:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    d1ac:	f1bb 0f00 	cmp.w	fp, #0
    d1b0:	f040 81bc 	bne.w	d52c <isr+0xc3c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    d1b4:	f885 b016 	strb.w	fp, [r5, #22]
    d1b8:	f885 b017 	strb.w	fp, [r5, #23]
    d1bc:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    d1be:	2100      	movs	r1, #0
    d1c0:	4608      	mov	r0, r1
    d1c2:	f002 ffbf 	bl	10144 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    d1c6:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    d1c8:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    d1cc:	4608      	mov	r0, r1
    d1ce:	f002 ffbe 	bl	1014e <radio_tx_chain_delay_get>
    d1d2:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    d1d6:	f100 031e 	add.w	r3, r0, #30
    d1da:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    d1dc:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    d1e0:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    d1e2:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    d1e6:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    d1e8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    d1ec:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    d1ee:	f106 0117 	add.w	r1, r6, #23
    d1f2:	2205      	movs	r2, #5
    d1f4:	f105 001e 	add.w	r0, r5, #30
    d1f8:	f7f4 fd00 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    d1fc:	7fb2      	ldrb	r2, [r6, #30]
    d1fe:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    d202:	f362 0304 	bfi	r3, r2, #0, #5
    d206:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    d20a:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    d20e:	f362 1347 	bfi	r3, r2, #5, #3
    d212:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    d216:	f003 f81f 	bl	10258 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    d21a:	4628      	mov	r0, r5
    d21c:	f002 ff8c 	bl	10138 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    d220:	f002 ffc8 	bl	101b4 <radio_is_ready>
    d224:	4683      	mov	fp, r0
    d226:	2800      	cmp	r0, #0
    d228:	f47f abba 	bne.w	c9a0 <isr+0xb0>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    d22c:	f44f 72aa 	mov.w	r2, #340	; 0x154
    d230:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    d234:	4630      	mov	r0, r6
    d236:	f7f8 fe54 	bl	5ee2 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    d23a:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    d23c:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    d23e:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    d242:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    d246:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    d24a:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    d24c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    d250:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    d252:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d256:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    d258:	2206      	movs	r2, #6
    d25a:	f107 001b 	add.w	r0, r7, #27
    d25e:	f7f4 fccd 	bl	1bfc <memcpy>
    d262:	f107 0b0e 	add.w	fp, r7, #14
    d266:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    d26a:	f1ba 0f00 	cmp.w	sl, #0
    d26e:	f000 816d 	beq.w	d54c <isr+0xc5c>
    d272:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    d276:	f000 8169 	beq.w	d54c <isr+0xc5c>
			ll_rl_id_addr_get(rl_idx,
    d27a:	465a      	mov	r2, fp
    d27c:	f107 010d 	add.w	r1, r7, #13
    d280:	4640      	mov	r0, r8
    d282:	930d      	str	r3, [sp, #52]	; 0x34
    d284:	f002 fa40 	bl	f708 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    d288:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    d28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d28c:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    d28e:	3202      	adds	r2, #2
    d290:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    d292:	4618      	mov	r0, r3
    d294:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d296:	f7f4 fcb1 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    d29a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    d29e:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    d2a2:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    d2a6:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    d2aa:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    d2ae:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    d2b2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    d2b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    d2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    d2be:	8c30      	ldrh	r0, [r6, #32]
    d2c0:	f7fc f81c 	bl	92fc <rx_fc_lock>
		packet_rx_enqueue();
    d2c4:	f7fc f8cc 	bl	9460 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    d2c8:	2003      	movs	r0, #3
    d2ca:	f7fb fa5f 	bl	878c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    d2ce:	2800      	cmp	r0, #0
    d2d0:	f43f ab66 	beq.w	c9a0 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    d2d4:	8c33      	ldrh	r3, [r6, #32]
    d2d6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    d2d8:	230b      	movs	r3, #11
    d2da:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    d2dc:	f899 3008 	ldrb.w	r3, [r9, #8]
    d2e0:	f013 0320 	ands.w	r3, r3, #32
    d2e4:	d00e      	beq.n	d304 <isr+0xa14>
					((u16_t)conn->access_addr[1] << 8) |
    d2e6:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    d2e8:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    d2ea:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    d2ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    d2f0:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    d2f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    d2f6:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    d2f8:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    d2fa:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    d2fe:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    d300:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    d302:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    d304:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    d306:	f7fc f8ab 	bl	9460 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    d30a:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    d30c:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    d310:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    d312:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    d316:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    d318:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d31a:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    d31e:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    d320:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d322:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    d326:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d328:	4629      	mov	r1, r5
    d32a:	9300      	str	r3, [sp, #0]
    d32c:	4628      	mov	r0, r5
    d32e:	4b31      	ldr	r3, [pc, #196]	; (d3f4 <isr+0xb04>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d330:	f8df a0cc 	ldr.w	sl, [pc, #204]	; d400 <isr+0xb10>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    d334:	bf38      	it	cc
    d336:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d338:	f7f9 fcae 	bl	6c98 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    d33c:	f240 6139 	movw	r1, #1593	; 0x639
    d340:	f7fc fb6c 	bl	9a1c <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d344:	462b      	mov	r3, r5
    d346:	2204      	movs	r2, #4
    d348:	4629      	mov	r1, r5
    d34a:	9500      	str	r5, [sp, #0]
    d34c:	4628      	mov	r0, r5
    d34e:	f7f9 fca3 	bl	6c98 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d354:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d358:	68a3      	ldr	r3, [r4, #8]
    d35a:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    d35e:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d360:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    d364:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    d368:	9308      	str	r3, [sp, #32]
    d36a:	4b23      	ldr	r3, [pc, #140]	; (d3f8 <isr+0xb08>)
    d36c:	9307      	str	r3, [sp, #28]
    d36e:	4b23      	ldr	r3, [pc, #140]	; (d3fc <isr+0xb0c>)
    d370:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d372:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    d374:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d376:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d378:	4640      	mov	r0, r8
    d37a:	a31b      	add	r3, pc, #108	; (adr r3, d3e8 <isr+0xaf8>)
    d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d380:	4649      	mov	r1, r9
		ticker_status =
    d382:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d384:	f7f2 ff46 	bl	214 <__aeabi_uldivmod>
    d388:	4610      	mov	r0, r2
    d38a:	4619      	mov	r1, r3
    d38c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d390:	2300      	movs	r3, #0
    d392:	f7f2 ff3f 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d396:	a314      	add	r3, pc, #80	; (adr r3, d3e8 <isr+0xaf8>)
    d398:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d39c:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d39e:	4649      	mov	r1, r9
    d3a0:	4640      	mov	r0, r8
    d3a2:	f7f2 ff37 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    d3a6:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d3a8:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    d3aa:	a30f      	add	r3, pc, #60	; (adr r3, d3e8 <isr+0xaf8>)
    d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3b0:	fba1 010a 	umull	r0, r1, r1, sl
    d3b4:	f7f2 ff2e 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d3b8:	3407      	adds	r4, #7
		ticker_status =
    d3ba:	b2e4      	uxtb	r4, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d3bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    d3c0:	9000      	str	r0, [sp, #0]
    d3c2:	465b      	mov	r3, fp
    d3c4:	4622      	mov	r2, r4
    d3c6:	e5c1      	b.n	cf4c <isr+0x65c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    d3c8:	f1b9 0f00 	cmp.w	r9, #0
    d3cc:	f47f ae51 	bne.w	d072 <isr+0x782>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    d3d0:	4640      	mov	r0, r8
    d3d2:	f002 f853 	bl	f47c <ctrl_irk_whitelisted>
		if (crc_ok &&
    d3d6:	2800      	cmp	r0, #0
    d3d8:	f43f ae2d 	beq.w	d036 <isr+0x746>
    d3dc:	e649      	b.n	d072 <isr+0x782>
    d3de:	bf00      	nop
    d3e0:	3b9aca00 	.word	0x3b9aca00
    d3e4:	00000000 	.word	0x00000000
    d3e8:	1afd498d 	.word	0x1afd498d
    d3ec:	00000007 	.word	0x00000007
    d3f0:	1afd498d 	.word	0x1afd498d
    d3f4:	00009a1d 	.word	0x00009a1d
    d3f8:	00009a7d 	.word	0x00009a7d
    d3fc:	0000b191 	.word	0x0000b191
    d400:	3b9aca00 	.word	0x3b9aca00
	if (rl_idx != FILTER_IDX_NONE) {
    d404:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    d408:	d069      	beq.n	d4de <isr+0xbee>
		return (rl_idx == _radio.scanner.rl_idx);
    d40a:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    d40e:	eba0 0e08 	sub.w	lr, r0, r8
    d412:	f1de 0000 	rsbs	r0, lr, #0
    d416:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    d41a:	2800      	cmp	r0, #0
    d41c:	f47f ae4a 	bne.w	d0b4 <isr+0x7c4>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d420:	f899 0008 	ldrb.w	r0, [r9, #8]
    d424:	f010 000f 	ands.w	r0, r0, #15
    d428:	d002      	beq.n	d430 <isr+0xb40>
    d42a:	2806      	cmp	r0, #6
    d42c:	f040 80ba 	bne.w	d5a4 <isr+0xcb4>
		 (_radio.scanner.type != 0) &&
    d430:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    d434:	071f      	lsls	r7, r3, #28
    d436:	f140 809f 	bpl.w	d578 <isr+0xc88>
		 (_radio.scanner.type != 0) &&
    d43a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    d43e:	2a00      	cmp	r2, #0
    d440:	f040 809a 	bne.w	d578 <isr+0xc88>
		err = isr_rx_scan_report(rssi_ready,
    d444:	f1ba 0f00 	cmp.w	sl, #0
    d448:	bf14      	ite	ne
    d44a:	4641      	movne	r1, r8
    d44c:	21ff      	moveq	r1, #255	; 0xff
    d44e:	4628      	mov	r0, r5
    d450:	f7fc f836 	bl	94c0 <isr_rx_scan_report>
		if (err) {
    d454:	2800      	cmp	r0, #0
    d456:	f47f adee 	bne.w	d036 <isr+0x746>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    d45a:	f002 fee3 	bl	10224 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    d45e:	7803      	ldrb	r3, [r0, #0]
    d460:	2203      	movs	r2, #3
    d462:	f362 0303 	bfi	r3, r2, #0, #4
    d466:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d468:	f899 3008 	ldrb.w	r3, [r9, #8]
    d46c:	7802      	ldrb	r2, [r0, #0]
    d46e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d472:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    d476:	230c      	movs	r3, #12
    d478:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    d47a:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d47c:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    d47e:	4640      	mov	r0, r8
    d480:	f001 ffa2 	bl	f3c8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    d484:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    d488:	4601      	mov	r1, r0
    d48a:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    d48c:	f013 0f01 	tst.w	r3, #1
    d490:	f810 3b02 	ldrb.w	r3, [r0], #2
    d494:	d067      	beq.n	d566 <isr+0xc76>
    d496:	2900      	cmp	r1, #0
    d498:	d065      	beq.n	d566 <isr+0xc76>
			pdu_adv_tx->tx_addr = 1;
    d49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d49e:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d4a0:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d4a2:	f7f4 fbab 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    d4a6:	2206      	movs	r2, #6
    d4a8:	f109 010a 	add.w	r1, r9, #10
    d4ac:	f105 0008 	add.w	r0, r5, #8
    d4b0:	f7f4 fba4 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
    d4b4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    d4b8:	f043 0302 	orr.w	r3, r3, #2
    d4bc:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    d4c0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    d4c2:	2302      	movs	r3, #2
    d4c4:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    d4c6:	f002 ff4d 	bl	10364 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    d4ca:	2000      	movs	r0, #0
    d4cc:	f002 feae 	bl	1022c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    d4d0:	4628      	mov	r0, r5
    d4d2:	f002 fe31 	bl	10138 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    d4d6:	f003 f821 	bl	1051c <radio_tmr_end_capture>
    d4da:	f7ff bb6e 	b.w	cbba <isr+0x2ca>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    d4de:	f899 2008 	ldrb.w	r2, [r9, #8]
    d4e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d4e6:	f3c2 1280 	ubfx	r2, r2, #6, #1
    d4ea:	4293      	cmp	r3, r2
    d4ec:	d195      	bne.n	d41a <isr+0xb2a>
		(memcmp(&_radio.scanner.adv_addr[0],
    d4ee:	2206      	movs	r2, #6
    d4f0:	f109 010a 	add.w	r1, r9, #10
    d4f4:	48c9      	ldr	r0, [pc, #804]	; (d81c <isr+0xf2c>)
    d4f6:	f7f4 fb6c 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    d4fa:	fab0 f080 	clz	r0, r0
    d4fe:	0940      	lsrs	r0, r0, #5
    d500:	e78b      	b.n	d41a <isr+0xb2a>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    d502:	2801      	cmp	r0, #1
    d504:	d191      	bne.n	d42a <isr+0xb3a>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    d506:	2300      	movs	r3, #0
    d508:	4642      	mov	r2, r8
    d50a:	4631      	mov	r1, r6
    d50c:	f7fb feaa 	bl	9264 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    d510:	2800      	cmp	r0, #0
    d512:	d085      	beq.n	d420 <isr+0xb30>
    d514:	e5d4      	b.n	d0c0 <isr+0x7d0>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d516:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    d51a:	49c1      	ldr	r1, [pc, #772]	; (d820 <isr+0xf30>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d51c:	09d2      	lsrs	r2, r2, #7
    d51e:	f362 1386 	bfi	r3, r2, #6, #1
    d522:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    d524:	2206      	movs	r2, #6
    d526:	e615      	b.n	d154 <isr+0x864>
				conn_space_us += conn_interval_us;
    d528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d52a:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    d52c:	f1bb 0f00 	cmp.w	fp, #0
    d530:	dbfa      	blt.n	d528 <isr+0xc38>
    d532:	459b      	cmp	fp, r3
    d534:	d3f8      	bcc.n	d528 <isr+0xc38>
				(conn_space_us - conn_offset_us) / 1250;
    d536:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    d53a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d53e:	fbb3 f3f2 	udiv	r3, r3, r2
    d542:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    d544:	7d6b      	ldrb	r3, [r5, #21]
    d546:	3301      	adds	r3, #1
    d548:	756b      	strb	r3, [r5, #21]
    d54a:	e638      	b.n	d1be <isr+0x8ce>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    d54c:	2206      	movs	r2, #6
    d54e:	2100      	movs	r1, #0
    d550:	4618      	mov	r0, r3
    d552:	f7f4 fb7f 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
    d556:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d558:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    d55a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    d55e:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d560:	2206      	movs	r2, #6
    d562:	4658      	mov	r0, fp
    d564:	e697      	b.n	d296 <isr+0x9a6>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d566:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d56a:	49ad      	ldr	r1, [pc, #692]	; (d820 <isr+0xf30>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d56c:	09d2      	lsrs	r2, r2, #7
    d56e:	f362 1386 	bfi	r3, r2, #6, #1
    d572:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d574:	2206      	movs	r2, #6
    d576:	e794      	b.n	d4a2 <isr+0xbb2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d578:	b9a0      	cbnz	r0, d5a4 <isr+0xcb4>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    d57a:	f899 3009 	ldrb.w	r3, [r9, #9]
    d57e:	2b00      	cmp	r3, #0
    d580:	f43f ad59 	beq.w	d036 <isr+0x746>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    d584:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    d588:	2b00      	cmp	r3, #0
    d58a:	f47f ad54 	bne.w	d036 <isr+0x746>
		err = isr_rx_scan_report(rssi_ready,
    d58e:	f1ba 0f00 	cmp.w	sl, #0
    d592:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    d596:	bf14      	ite	ne
    d598:	4641      	movne	r1, r8
    d59a:	21ff      	moveq	r1, #255	; 0xff
    d59c:	4628      	mov	r0, r5
    d59e:	f7fb ff8f 	bl	94c0 <isr_rx_scan_report>
    d5a2:	e548      	b.n	d036 <isr+0x746>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d5a4:	2801      	cmp	r0, #1
    d5a6:	d00e      	beq.n	d5c6 <isr+0xcd6>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    d5a8:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    d5ac:	f003 020b 	and.w	r2, r3, #11
    d5b0:	2a02      	cmp	r2, #2
    d5b2:	d0e2      	beq.n	d57a <isr+0xc8a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    d5b4:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    d5b8:	2b07      	cmp	r3, #7
    d5ba:	d10d      	bne.n	d5d8 <isr+0xce8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    d5bc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    d5c0:	0758      	lsls	r0, r3, #29
    d5c2:	d1da      	bne.n	d57a <isr+0xc8a>
    d5c4:	e537      	b.n	d036 <isr+0x746>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    d5c6:	ab10      	add	r3, sp, #64	; 0x40
    d5c8:	4642      	mov	r2, r8
    d5ca:	4631      	mov	r1, r6
    d5cc:	2000      	movs	r0, #0
    d5ce:	f7fb fe49 	bl	9264 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    d5d2:	2800      	cmp	r0, #0
    d5d4:	d1d1      	bne.n	d57a <isr+0xc8a>
    d5d6:	e7e7      	b.n	d5a8 <isr+0xcb8>
		   (_radio.scanner.phy)) ||
    d5d8:	2b04      	cmp	r3, #4
    d5da:	f47f ad2c 	bne.w	d036 <isr+0x746>
		   (_radio.scanner.state != 0) &&
    d5de:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    d5e2:	0799      	lsls	r1, r3, #30
    d5e4:	f57f ad27 	bpl.w	d036 <isr+0x746>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    d5e8:	f002 fe1c 	bl	10224 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    d5ec:	f899 3008 	ldrb.w	r3, [r9, #8]
    d5f0:	7802      	ldrb	r2, [r0, #0]
    d5f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d5f6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    d5fa:	f47f ad1c 	bne.w	d036 <isr+0x746>
		(memcmp(&sreq->scan_req.adv_addr[0],
    d5fe:	2206      	movs	r2, #6
    d600:	f109 010a 	add.w	r1, r9, #10
    d604:	3008      	adds	r0, #8
    d606:	f7f4 fae4 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
    d60a:	2800      	cmp	r0, #0
    d60c:	d0b5      	beq.n	d57a <isr+0xc8a>
    d60e:	e512      	b.n	d036 <isr+0x746>
	_radio.packet_counter++;
    d610:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d614:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    d618:	3301      	adds	r3, #1
    d61a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    d61e:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d620:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    d624:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d628:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d62c:	2301      	movs	r3, #1
    d62e:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    d632:	2f00      	cmp	r7, #0
    d634:	f000 82a2 	beq.w	db7c <isr+0x128c>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    d638:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    d63c:	f898 1008 	ldrb.w	r1, [r8, #8]
    d640:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d644:	f3c1 0180 	ubfx	r1, r1, #2, #1
    d648:	f003 0201 	and.w	r2, r3, #1
    d64c:	4291      	cmp	r1, r2
    d64e:	f000 8187 	beq.w	d960 <isr+0x1070>
		_radio.conn_curr->sn++;
    d652:	f082 0201 	eor.w	r2, r2, #1
    d656:	f362 0300 	bfi	r3, r2, #0, #1
    d65a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    d65e:	7ce3      	ldrb	r3, [r4, #19]
    d660:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    d662:	bf02      	ittt	eq
    d664:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    d668:	f043 0301 	orreq.w	r3, r3, #1
    d66c:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    d670:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d674:	061a      	lsls	r2, r3, #24
    d676:	f100 816e 	bmi.w	d956 <isr+0x1066>
			node_tx = _radio.conn_curr->pkt_tx_head;
    d67a:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    d67e:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    d682:	1d30      	adds	r0, r6, #4
    d684:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    d688:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    d68c:	f1b9 0f00 	cmp.w	r9, #0
    d690:	f000 808e 	beq.w	d7b0 <isr+0xec0>
				if (_radio.conn_curr->enc_tx) {
    d694:	069b      	lsls	r3, r3, #26
    d696:	d50b      	bpl.n	d6b0 <isr+0xdc0>
					_radio.conn_curr->ccm_tx.counter++;
    d698:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    d69c:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    d6a0:	f11b 0201 	adds.w	r2, fp, #1
    d6a4:	f14c 0300 	adc.w	r3, ip, #0
    d6a8:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    d6ac:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    d6b0:	5c43      	ldrb	r3, [r0, r1]
    d6b2:	f003 0303 	and.w	r3, r3, #3
    d6b6:	2b03      	cmp	r3, #3
    d6b8:	d17a      	bne.n	d7b0 <isr+0xec0>
	switch (pdu_data_tx->llctrl.opcode) {
    d6ba:	f89a 3003 	ldrb.w	r3, [sl, #3]
    d6be:	3b02      	subs	r3, #2
    d6c0:	2b16      	cmp	r3, #22
    d6c2:	d875      	bhi.n	d7b0 <isr+0xec0>
    d6c4:	e8df f013 	tbh	[pc, r3, lsl #1]
    d6c8:	00580017 	.word	0x00580017
    d6cc:	007400b0 	.word	0x007400b0
    d6d0:	00740074 	.word	0x00740074
    d6d4:	00740074 	.word	0x00740074
    d6d8:	00810076 	.word	0x00810076
    d6dc:	00b70074 	.word	0x00b70074
    d6e0:	00740074 	.word	0x00740074
    d6e4:	00740074 	.word	0x00740074
    d6e8:	00740074 	.word	0x00740074
    d6ec:	007400c1 	.word	0x007400c1
    d6f0:	00e000d9 	.word	0x00e000d9
    d6f4:	010b      	.short	0x010b
		_radio.state = STATE_CLOSE;
    d6f6:	2303      	movs	r3, #3
    d6f8:	7523      	strb	r3, [r4, #20]
		radio_disable();
    d6fa:	f002 fd3d 	bl	10178 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    d6fe:	f002 fd59 	bl	101b4 <radio_is_ready>
    d702:	2800      	cmp	r0, #0
    d704:	f47f a94c 	bne.w	c9a0 <isr+0xb0>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    d708:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    d70c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d710:	2913      	cmp	r1, #19
    d712:	bf08      	it	eq
    d714:	2116      	moveq	r1, #22
    d716:	f7fb fe7b 	bl	9410 <terminate_ind_rx_enqueue>
		terminate = 1;
    d71a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d71c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d720:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    d724:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    d726:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d72a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    d72e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d730:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    d734:	d11e      	bne.n	d774 <isr+0xe84>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d736:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    d73a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    d73e:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d740:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    d742:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    d746:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d74a:	f040 80cf 	bne.w	d8ec <isr+0xffc>
		if (node_tx) {
    d74e:	b18e      	cbz	r6, d774 <isr+0xe84>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    d750:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    d754:	f8d3 e000 	ldr.w	lr, [r3]
    d758:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    d75c:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    d75e:	bf06      	itte	eq
    d760:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    d764:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    d768:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d76c:	492d      	ldr	r1, [pc, #180]	; (d824 <isr+0xf34>)
    d76e:	4630      	mov	r0, r6
    d770:	f7f8 fb99 	bl	5ea6 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    d774:	2600      	movs	r6, #0
    d776:	e0c2      	b.n	d8fe <isr+0x100e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d778:	2208      	movs	r2, #8
    d77a:	f10a 010e 	add.w	r1, sl, #14
    d77e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    d782:	f7f4 fa3b 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d786:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d78a:	2204      	movs	r2, #4
    d78c:	f10a 0116 	add.w	r1, sl, #22
    d790:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d794:	f7f4 fa32 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
    d798:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d79c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d7a0:	f042 0208 	orr.w	r2, r2, #8
    d7a4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d7a8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d7ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    d7b0:	2500      	movs	r5, #0
    d7b2:	e7b3      	b.n	d71c <isr+0xe2c>
		_radio.conn_curr->pause_tx = 1;
    d7b4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    d7b8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    d7bc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d7c0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    d7c4:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    d7c8:	e7f2      	b.n	d7b0 <isr+0xec0>
		if (_radio.role == ROLE_MASTER) {
    d7ca:	f894 a013 	ldrb.w	sl, [r4, #19]
    d7ce:	fa5f fa8a 	uxtb.w	sl, sl
    d7d2:	f1ba 0f04 	cmp.w	sl, #4
    d7d6:	d127      	bne.n	d828 <isr+0xf38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d7d8:	7933      	ldrb	r3, [r6, #4]
    d7da:	f043 0303 	orr.w	r3, r3, #3
    d7de:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    d7e0:	2317      	movs	r3, #23
    d7e2:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d7e4:	2303      	movs	r3, #3
    d7e6:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    d7e8:	2208      	movs	r2, #8
    d7ea:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    d7ee:	3004      	adds	r0, #4
    d7f0:	f7f4 fa04 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    d7f4:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    d7f8:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    d7fa:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    d7fe:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    d800:	f106 0112 	add.w	r1, r6, #18
    d804:	2208      	movs	r2, #8
    d806:	6860      	ldr	r0, [r4, #4]
    d808:	f003 fc74 	bl	110f4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    d80c:	f106 011a 	add.w	r1, r6, #26
    d810:	4652      	mov	r2, sl
    d812:	6860      	ldr	r0, [r4, #4]
    d814:	f003 fc6e 	bl	110f4 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    d818:	2600      	movs	r6, #0
    d81a:	e7c9      	b.n	d7b0 <isr+0xec0>
    d81c:	20000752 	.word	0x20000752
    d820:	2000074c 	.word	0x2000074c
    d824:	200007c4 	.word	0x200007c4
			_radio.conn_curr->pause_tx = 1;
    d828:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d82c:	f043 0308 	orr.w	r3, r3, #8
    d830:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    d834:	e7bc      	b.n	d7b0 <isr+0xec0>
		_radio.conn_curr->pause_rx = 0;
    d836:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d83a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d83e:	f36f 03c3 	bfc	r3, #3, #1
    d842:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d846:	2300      	movs	r3, #0
    d848:	e7bc      	b.n	d7c4 <isr+0xed4>
		if ((_radio.conn_curr->llcp_length.req !=
    d84a:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    d84e:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    d852:	429a      	cmp	r2, r3
    d854:	d0ac      	beq.n	d7b0 <isr+0xec0>
		    (_radio.conn_curr->llcp_length.state ==
    d856:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    d85a:	f003 0203 	and.w	r2, r3, #3
    d85e:	2a01      	cmp	r2, #1
    d860:	d1a6      	bne.n	d7b0 <isr+0xec0>
			_radio.conn_curr->pause_tx = 1;
    d862:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    d866:	f042 0208 	orr.w	r2, r2, #8
    d86a:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    d86e:	2202      	movs	r2, #2
    d870:	f362 0301 	bfi	r3, r2, #0, #2
    d874:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    d878:	e79a      	b.n	d7b0 <isr+0xec0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    d87a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    d87e:	2202      	movs	r2, #2
    d880:	f362 0301 	bfi	r3, r2, #0, #2
    d884:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    d888:	7ce3      	ldrb	r3, [r4, #19]
    d88a:	2b03      	cmp	r3, #3
    d88c:	d190      	bne.n	d7b0 <isr+0xec0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    d88e:	2301      	movs	r3, #1
    d890:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    d894:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    d898:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d89c:	2202      	movs	r2, #2
    d89e:	2304      	movs	r3, #4
    d8a0:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    d8a4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    d8a8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    d8ac:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    d8b0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    d8b4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    d8b8:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    d8bc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d8c0:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    d8c4:	f003 0307 	and.w	r3, r3, #7
    d8c8:	aa12      	add	r2, sp, #72	; 0x48
    d8ca:	4413      	add	r3, r2
    d8cc:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    d8d0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    d8d4:	f363 0202 	bfi	r2, r3, #0, #3
    d8d8:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    d8dc:	e768      	b.n	d7b0 <isr+0xec0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    d8de:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    d8e2:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    d8e6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d8ea:	e7f3      	b.n	d8d4 <isr+0xfe4>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    d8ec:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    d8f0:	4293      	cmp	r3, r2
    d8f2:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    d8f4:	bf08      	it	eq
    d8f6:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    d8fa:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    d8fe:	b37d      	cbz	r5, d960 <isr+0x1070>
		connection_release(_radio.conn_curr);
    d900:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d904:	f7fb ff7a 	bl	97fc <connection_release>
		_radio.conn_curr = NULL;
    d908:	2300      	movs	r3, #0
    d90a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    d90e:	f002 fdf9 	bl	10504 <radio_tmr_aa_restore>
    d912:	b918      	cbnz	r0, d91c <isr+0x102c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    d914:	f002 fdea 	bl	104ec <radio_tmr_aa_get>
    d918:	f002 fdee 	bl	104f8 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    d91c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d920:	2b00      	cmp	r3, #0
    d922:	f43f a88b 	beq.w	ca3c <isr+0x14c>
	if (tx_release) {
    d926:	b11e      	cbz	r6, d930 <isr+0x1040>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    d928:	4631      	mov	r1, r6
    d92a:	8c18      	ldrh	r0, [r3, #32]
    d92c:	f7fb fef4 	bl	9718 <pdu_node_tx_release>
	if (rx_enqueue) {
    d930:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    d934:	2b00      	cmp	r3, #0
    d936:	f43f a881 	beq.w	ca3c <isr+0x14c>
		rx_fc_lock(_radio.conn_curr->handle);
    d93a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d93e:	8c18      	ldrh	r0, [r3, #32]
    d940:	f7fb fcdc 	bl	92fc <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    d944:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d948:	8c1b      	ldrh	r3, [r3, #32]
    d94a:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    d94e:	f7fb fd87 	bl	9460 <packet_rx_enqueue>
    d952:	f7ff b873 	b.w	ca3c <isr+0x14c>
			_radio.conn_curr->empty = 0;
    d956:	f36f 13c7 	bfc	r3, #7, #1
    d95a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    d95e:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    d960:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d964:	f898 2008 	ldrb.w	r2, [r8, #8]
    d968:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    d96c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d970:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d974:	429a      	cmp	r2, r3
    d976:	f040 80d1 	bne.w	db1c <isr+0x122c>
	    (packet_rx_reserve_get(3) != 0) &&
    d97a:	2003      	movs	r0, #3
    d97c:	f7fa ff06 	bl	878c <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    d980:	2800      	cmp	r0, #0
    d982:	f000 80cb 	beq.w	db1c <isr+0x122c>
	    (packet_rx_reserve_get(3) != 0) &&
    d986:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    d98a:	b393      	cbz	r3, d9f2 <isr+0x1102>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    d98c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    d990:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    d994:	4293      	cmp	r3, r2
    d996:	d105      	bne.n	d9a4 <isr+0x10b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
    d998:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    d99c:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    d9a0:	4291      	cmp	r1, r2
    d9a2:	d026      	beq.n	d9f2 <isr+0x1102>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    d9a4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    d9a8:	4293      	cmp	r3, r2
    d9aa:	f000 80b7 	beq.w	db1c <isr+0x122c>
	      (_radio.fc_req != _radio.fc_ack) &&
    d9ae:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    d9b2:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    d9b6:	429a      	cmp	r2, r3
    d9b8:	f000 80b0 	beq.w	db1c <isr+0x122c>
		(((_radio.fc_req == 0) &&
    d9bc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    d9c0:	b933      	cbnz	r3, d9d0 <isr+0x10e0>
		   _radio.conn_curr->handle)) ||
    d9c2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    d9c6:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    d9ca:	8c1b      	ldrh	r3, [r3, #32]
    d9cc:	429a      	cmp	r2, r3
    d9ce:	d010      	beq.n	d9f2 <isr+0x1102>
		 ((_radio.fc_req != 0) &&
    d9d0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    d9d4:	2b00      	cmp	r3, #0
    d9d6:	f000 80a1 	beq.w	db1c <isr+0x122c>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d9da:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    d9de:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d9e2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    d9e6:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    d9ea:	8c0b      	ldrh	r3, [r1, #32]
    d9ec:	429a      	cmp	r2, r3
    d9ee:	f040 8095 	bne.w	db1c <isr+0x122c>
		if (pdu_data_rx->len != 0) {
    d9f2:	f898 5009 	ldrb.w	r5, [r8, #9]
    d9f6:	2d00      	cmp	r5, #0
    d9f8:	f000 8099 	beq.w	db2e <isr+0x123e>
			if (_radio.conn_curr->enc_rx) {
    d9fc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    da00:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    da04:	f015 0510 	ands.w	r5, r5, #16
    da08:	d005      	beq.n	da16 <isr+0x1126>
				done = radio_ccm_is_done();
    da0a:	f002 fe07 	bl	1061c <radio_ccm_is_done>
				LL_ASSERT(done);
    da0e:	2800      	cmp	r0, #0
    da10:	f43e afc6 	beq.w	c9a0 <isr+0xb0>
				ccm_rx_increment = 1;
    da14:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    da16:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    da1a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    da1e:	06d9      	lsls	r1, r3, #27
    da20:	d42c      	bmi.n	da7c <isr+0x118c>
			    (_radio.conn_curr->pause_rx &&
    da22:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    da26:	f898 3008 	ldrb.w	r3, [r8, #8]
    da2a:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    da2e:	f012 0f04 	tst.w	r2, #4
    da32:	d13d      	bne.n	dab0 <isr+0x11c0>
			_radio.conn_curr->appto_expire = 0;
    da34:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    da36:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    da3a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    da3e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    da42:	d004      	beq.n	da4e <isr+0x115e>
    da44:	2b02      	cmp	r3, #2
    da46:	d862      	bhi.n	db0e <isr+0x121e>
				*rx_enqueue = 1;
    da48:	2301      	movs	r3, #1
    da4a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    da4e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    da52:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    da56:	f082 0202 	eor.w	r2, r2, #2
    da5a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    da5e:	2d00      	cmp	r5, #0
    da60:	d05c      	beq.n	db1c <isr+0x122c>
				_radio.conn_curr->ccm_rx.counter++;
    da62:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    da66:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    da6a:	f119 0001 	adds.w	r0, r9, #1
    da6e:	f14a 0100 	adc.w	r1, sl, #0
    da72:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    da76:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    da7a:	e04f      	b.n	db1c <isr+0x122c>
			     !radio_ccm_mic_is_valid()) ||
    da7c:	f002 fdec 	bl	10658 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    da80:	2800      	cmp	r0, #0
    da82:	d1ce      	bne.n	da22 <isr+0x1132>
				_radio.state = STATE_CLOSE;
    da84:	2303      	movs	r3, #3
    da86:	7523      	strb	r3, [r4, #20]
				radio_disable();
    da88:	f002 fb76 	bl	10178 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    da8c:	f002 fb92 	bl	101b4 <radio_is_ready>
    da90:	4605      	mov	r5, r0
    da92:	2800      	cmp	r0, #0
    da94:	f47e af84 	bne.w	c9a0 <isr+0xb0>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    da98:	213d      	movs	r1, #61	; 0x3d
    da9a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    da9e:	f7fb fcb7 	bl	9410 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    daa2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    daa6:	f7fb fea9 	bl	97fc <connection_release>
				_radio.conn_curr = NULL;
    daaa:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    daae:	e72e      	b.n	d90e <isr+0x101e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    dab0:	f003 0103 	and.w	r1, r3, #3
    dab4:	2903      	cmp	r1, #3
    dab6:	d1e5      	bne.n	da84 <isr+0x1194>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    dab8:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    dabc:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    dac0:	f1be 0f00 	cmp.w	lr, #0
    dac4:	f002 0240 	and.w	r2, r2, #64	; 0x40
    dac8:	db15      	blt.n	daf6 <isr+0x1206>
	       (!conn->role &&
    daca:	b922      	cbnz	r2, dad6 <isr+0x11e6>
		((!conn->refresh &&
    dacc:	2902      	cmp	r1, #2
    dace:	d0b1      	beq.n	da34 <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    dad0:	2911      	cmp	r1, #17
    dad2:	d8d7      	bhi.n	da84 <isr+0x1194>
    dad4:	e009      	b.n	daea <isr+0x11fa>
		 (conn->refresh &&
    dad6:	1e8a      	subs	r2, r1, #2
    dad8:	b2d2      	uxtb	r2, r2
    dada:	2a09      	cmp	r2, #9
    dadc:	d8f8      	bhi.n	dad0 <isr+0x11e0>
    dade:	f240 2e05 	movw	lr, #517	; 0x205
    dae2:	fa2e f202 	lsr.w	r2, lr, r2
    dae6:	07d2      	lsls	r2, r2, #31
    dae8:	d4a4      	bmi.n	da34 <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    daea:	4abd      	ldr	r2, [pc, #756]	; (dde0 <isr+0x14f0>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    daec:	fa22 f101 	lsr.w	r1, r2, r1
    daf0:	07ca      	lsls	r2, r1, #31
    daf2:	d5c7      	bpl.n	da84 <isr+0x1194>
    daf4:	e79e      	b.n	da34 <isr+0x1144>
	       (conn->role &&
    daf6:	b92a      	cbnz	r2, db04 <isr+0x1214>
		((!conn->refresh &&
    daf8:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    dafa:	d09b      	beq.n	da34 <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    dafc:	2911      	cmp	r1, #17
    dafe:	d8c1      	bhi.n	da84 <isr+0x1194>
    db00:	4ab8      	ldr	r2, [pc, #736]	; (dde4 <isr+0x14f4>)
    db02:	e7f3      	b.n	daec <isr+0x11fc>
		 (conn->refresh &&
    db04:	1e8a      	subs	r2, r1, #2
    db06:	2a01      	cmp	r2, #1
    db08:	d994      	bls.n	da34 <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    db0a:	290b      	cmp	r1, #11
    db0c:	e7f5      	b.n	dafa <isr+0x120a>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    db0e:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    db12:	4640      	mov	r0, r8
    db14:	f7fd fe44 	bl	b7a0 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    db18:	2800      	cmp	r0, #0
    db1a:	d098      	beq.n	da4e <isr+0x115e>
		_radio.conn_curr->supervision_expire = 0;
    db1c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    db20:	2300      	movs	r3, #0
    db22:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    db26:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    db28:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    db2c:	e03d      	b.n	dbaa <isr+0x12ba>
		} else if ((_radio.conn_curr->enc_rx) ||
    db2e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    db32:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    db36:	f013 0f14 	tst.w	r3, #20
    db3a:	d088      	beq.n	da4e <isr+0x115e>
					    (conn->latency + 6)) ?
    db3c:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    db3e:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    db42:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    db44:	4299      	cmp	r1, r3
    db46:	bfc4      	itt	gt
    db48:	1f8b      	subgt	r3, r1, #6
    db4a:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    db4c:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    db50:	bfcc      	ite	gt
    db52:	b29b      	uxthgt	r3, r3
    db54:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    db56:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    db58:	bf1e      	ittt	ne
    db5a:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    db5e:	2300      	movne	r3, #0
    db60:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    db64:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    db68:	2b00      	cmp	r3, #0
    db6a:	f47f af70 	bne.w	da4e <isr+0x115e>
				conn->appto_expire = conn->appto_reload;
    db6e:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    db72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    db76:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    db7a:	e768      	b.n	da4e <isr+0x115e>
		if (_radio.crc_expire == 0) {
    db7c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    db80:	b913      	cbnz	r3, db88 <isr+0x1298>
			_radio.crc_expire = 2;
    db82:	2302      	movs	r3, #2
    db84:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    db88:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    db8c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    db90:	3b01      	subs	r3, #1
    db92:	b2db      	uxtb	r3, r3
    db94:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    db98:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    db9c:	fab3 f583 	clz	r5, r3
    dba0:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    dba2:	bb86      	cbnz	r6, dc06 <isr+0x1316>
			_radio.conn_curr->supervision_expire =
    dba4:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    dba6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    dbaa:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    dbae:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    dbb0:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    dbb4:	f7fd fbe0 	bl	b378 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    dbb8:	7d23      	ldrb	r3, [r4, #20]
    dbba:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    dbbc:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    dbc0:	d010      	beq.n	dbe4 <isr+0x12f4>
    dbc2:	bb15      	cbnz	r5, dc0a <isr+0x131a>
    dbc4:	b137      	cbz	r7, dbd4 <isr+0x12e4>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    dbc6:	f898 3008 	ldrb.w	r3, [r8, #8]
    dbca:	06d8      	lsls	r0, r3, #27
    dbcc:	d402      	bmi.n	dbd4 <isr+0x12e4>
			 (pdu_data_tx->len == 0)) ||
    dbce:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    dbd0:	785b      	ldrb	r3, [r3, #1]
    dbd2:	b1d3      	cbz	r3, dc0a <isr+0x131a>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    dbd4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    dbd8:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    dbdc:	2b00      	cmp	r3, #0
    dbde:	bf0c      	ite	eq
    dbe0:	2302      	moveq	r3, #2
    dbe2:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    dbe4:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    dbe6:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    dbe8:	d129      	bne.n	dc3e <isr+0x134e>
		if (_radio.role == ROLE_MASTER) {
    dbea:	7ce3      	ldrb	r3, [r4, #19]
    dbec:	2b04      	cmp	r3, #4
    dbee:	d10e      	bne.n	dc0e <isr+0x131e>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    dbf0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    dbf4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    dbf8:	f369 12c7 	bfi	r2, r9, #7, #1
    dbfc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    dc00:	f002 faba 	bl	10178 <radio_disable>
    dc04:	e683      	b.n	d90e <isr+0x101e>
	struct radio_pdu_node_tx *tx_release = NULL;
    dc06:	2600      	movs	r6, #0
    dc08:	e7cf      	b.n	dbaa <isr+0x12ba>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    dc0a:	2303      	movs	r3, #3
    dc0c:	e7ea      	b.n	dbe4 <isr+0x12f4>
			radio_switch_complete_and_disable();
    dc0e:	f002 fb23 	bl	10258 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    dc12:	9910      	ldr	r1, [sp, #64]	; 0x40
    dc14:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    dc18:	780b      	ldrb	r3, [r1, #0]
    dc1a:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    dc1e:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    dc22:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dc26:	f362 0382 	bfi	r3, r2, #2, #1
    dc2a:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    dc2c:	f7fb f86e 	bl	8d0c <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    dc30:	f002 fac0 	bl	101b4 <radio_is_ready>
    dc34:	2800      	cmp	r0, #0
    dc36:	f43f ae6a 	beq.w	d90e <isr+0x101e>
    dc3a:	f7fe beb1 	b.w	c9a0 <isr+0xb0>
		radio_tmr_tifs_set(RADIO_TIFS);
    dc3e:	2096      	movs	r0, #150	; 0x96
    dc40:	f002 fb90 	bl	10364 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    dc44:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    dc48:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    dc4c:	f000 0007 	and.w	r0, r0, #7
    dc50:	f002 faec 	bl	1022c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    dc54:	f002 fc62 	bl	1051c <radio_tmr_end_capture>
    dc58:	e7db      	b.n	dc12 <isr+0x1322>
	switch (_radio.role) {
    dc5a:	7ce2      	ldrb	r2, [r4, #19]
    dc5c:	2a04      	cmp	r2, #4
    dc5e:	f63e ae9f 	bhi.w	c9a0 <isr+0xb0>
    dc62:	e8df f012 	tbh	[pc, r2, lsl #1]
    dc66:	01f1      	.short	0x01f1
    dc68:	004f0005 	.word	0x004f0005
    dc6c:	009e009e 	.word	0x009e009e
	if ((_radio.state == STATE_CLOSE) &&
    dc70:	2b03      	cmp	r3, #3
    dc72:	d109      	bne.n	dc88 <isr+0x1398>
	    (_radio.advertiser.chan_map_current != 0)) {
    dc74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    dc78:	0759      	lsls	r1, r3, #29
    dc7a:	d005      	beq.n	dc88 <isr+0x1398>
		adv_setup();
    dc7c:	f7fb fce6 	bl	964c <adv_setup>
		radio_tx_enable();
    dc80:	f002 fa74 	bl	1016c <radio_tx_enable>
    dc84:	f7fe beaa 	b.w	c9dc <isr+0xec>
		radio_filter_disable();
    dc88:	f002 fb30 	bl	102ec <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    dc8c:	7d23      	ldrb	r3, [r4, #20]
    dc8e:	2b03      	cmp	r3, #3
    dc90:	d16b      	bne.n	dd6a <isr+0x147a>
		    (!_radio.advertiser.is_hdcd)) {
    dc92:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    dc96:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    dc9a:	d166      	bne.n	dd6a <isr+0x147a>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    dc9c:	2201      	movs	r2, #1
    dc9e:	a910      	add	r1, sp, #64	; 0x40
    dca0:	6860      	ldr	r0, [r4, #4]
    dca2:	f003 fa27 	bl	110f4 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    dca6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    dcaa:	484f      	ldr	r0, [pc, #316]	; (dde8 <isr+0x14f8>)
			random_delay %= 10;
    dcac:	230a      	movs	r3, #10
    dcae:	fbb1 f2f3 	udiv	r2, r1, r3
    dcb2:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    dcb6:	3201      	adds	r2, #1
    dcb8:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    dcba:	b2d6      	uxtb	r6, r2
    dcbc:	fba6 0100 	umull	r0, r1, r6, r0
    dcc0:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    dcc2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    dcc6:	fb03 1106 	mla	r1, r3, r6, r1
    dcca:	a343      	add	r3, pc, #268	; (adr r3, ddd8 <isr+0x14e8>)
    dccc:	e9d3 2300 	ldrd	r2, r3, [r3]
    dcd0:	f7f2 faa0 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    dcd4:	f640 734b 	movw	r3, #3915	; 0xf4b
    dcd8:	9306      	str	r3, [sp, #24]
    dcda:	4b44      	ldr	r3, [pc, #272]	; (ddec <isr+0x14fc>)
    dcdc:	9305      	str	r3, [sp, #20]
    dcde:	9504      	str	r5, [sp, #16]
    dce0:	b283      	uxth	r3, r0
    dce2:	9503      	str	r5, [sp, #12]
    dce4:	9502      	str	r5, [sp, #8]
    dce6:	9501      	str	r5, [sp, #4]
    dce8:	9500      	str	r5, [sp, #0]
    dcea:	2205      	movs	r2, #5
    dcec:	4629      	mov	r1, r5
    dcee:	4628      	mov	r0, r5
    dcf0:	f7f8 ff84 	bl	6bfc <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    dcf4:	f030 0302 	bics.w	r3, r0, #2
    dcf8:	d037      	beq.n	dd6a <isr+0x147a>
    dcfa:	7ca3      	ldrb	r3, [r4, #18]
    dcfc:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    dcfe:	d034      	beq.n	dd6a <isr+0x147a>
    dd00:	f7fe be4e 	b.w	c9a0 <isr+0xb0>
	if (_radio.state == STATE_CLOSE) {
    dd04:	2b03      	cmp	r3, #3
    dd06:	d124      	bne.n	dd52 <isr+0x1462>
		radio_tmr_tifs_set(RADIO_TIFS);
    dd08:	2096      	movs	r0, #150	; 0x96
    dd0a:	f002 fb2b 	bl	10364 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    dd0e:	2300      	movs	r3, #0
    dd10:	4619      	mov	r1, r3
    dd12:	461a      	mov	r2, r3
    dd14:	4618      	mov	r0, r3
    dd16:	f002 fa95 	bl	10244 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    dd1a:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    dd1e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    dd22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    dd26:	3008      	adds	r0, #8
    dd28:	f002 fa00 	bl	1012c <radio_pkt_rx_set>
		radio_rssi_measure();
    dd2c:	f002 faa2 	bl	10274 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    dd30:	f001 fd66 	bl	f800 <ctrl_rl_enabled>
    dd34:	b138      	cbz	r0, dd46 <isr+0x1456>
			u8_t count, *irks = ctrl_irks_get(&count);
    dd36:	a810      	add	r0, sp, #64	; 0x40
    dd38:	f001 fb5a 	bl	f3f0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    dd3c:	4601      	mov	r1, r0
    dd3e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    dd42:	f002 fc93 	bl	1066c <radio_ar_configure>
		_radio.state = STATE_RX;
    dd46:	2301      	movs	r3, #1
    dd48:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    dd4a:	f002 fa09 	bl	10160 <radio_rx_enable>
    dd4e:	f7fe be45 	b.w	c9dc <isr+0xec>
		radio_filter_disable();
    dd52:	f002 facb 	bl	102ec <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    dd56:	7d23      	ldrb	r3, [r4, #20]
    dd58:	2b05      	cmp	r3, #5
    dd5a:	d106      	bne.n	dd6a <isr+0x147a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    dd5c:	2300      	movs	r3, #0
    dd5e:	9300      	str	r3, [sp, #0]
    dd60:	2204      	movs	r2, #4
    dd62:	4619      	mov	r1, r3
    dd64:	4618      	mov	r0, r3
    dd66:	f7f8 ff97 	bl	6c98 <ticker_stop>
	_radio.role = ROLE_NONE;
    dd6a:	2500      	movs	r5, #0
    dd6c:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    dd6e:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    dd70:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    dd72:	f002 fb75 	bl	10460 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    dd76:	462a      	mov	r2, r5
    dd78:	4629      	mov	r1, r5
    dd7a:	4628      	mov	r0, r5
    dd7c:	4b1c      	ldr	r3, [pc, #112]	; (ddf0 <isr+0x1500>)
    dd7e:	f7f8 f943 	bl	6008 <mayfly_enqueue>
	LL_ASSERT(!retval);
    dd82:	4605      	mov	r5, r0
    dd84:	2800      	cmp	r0, #0
    dd86:	f47e ae0b 	bne.w	c9a0 <isr+0xb0>
	clock_control_off(_radio.hf_clock, NULL);
    dd8a:	6820      	ldr	r0, [r4, #0]
    dd8c:	6843      	ldr	r3, [r0, #4]
    dd8e:	4629      	mov	r1, r5
    dd90:	685b      	ldr	r3, [r3, #4]
    dd92:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    dd94:	2201      	movs	r2, #1
    dd96:	4611      	mov	r1, r2
    dd98:	4628      	mov	r0, r5
    dd9a:	f7f8 f90d 	bl	5fb8 <mayfly_enable>
    dd9e:	f7fe be4d 	b.w	ca3c <isr+0x14c>
	if (_radio.conn_curr == 0) {
    dda2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    dda6:	2800      	cmp	r0, #0
    dda8:	d0df      	beq.n	dd6a <isr+0x147a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    ddaa:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    ddae:	b309      	cbz	r1, ddf4 <isr+0x1504>
    ddb0:	7ce3      	ldrb	r3, [r4, #19]
    ddb2:	2b03      	cmp	r3, #3
    ddb4:	d003      	beq.n	ddbe <isr+0x14ce>
    ddb6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    ddba:	07da      	lsls	r2, r3, #31
    ddbc:	d51a      	bpl.n	ddf4 <isr+0x1504>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    ddbe:	f7fb fb27 	bl	9410 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    ddc2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    ddc6:	f7fb fd19 	bl	97fc <connection_release>
			_radio.conn_curr = NULL;
    ddca:	2300      	movs	r3, #0
    ddcc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    ddd0:	e7cb      	b.n	dd6a <isr+0x147a>
    ddd2:	bf00      	nop
    ddd4:	f3af 8000 	nop.w
    ddd8:	1afd498d 	.word	0x1afd498d
    dddc:	00000007 	.word	0x00000007
    dde0:	00022060 	.word	0x00022060
    dde4:	00022040 	.word	0x00022040
    dde8:	d4a51000 	.word	0xd4a51000
    ddec:	00009a05 	.word	0x00009a05
    ddf0:	20003768 	.word	0x20003768
	latency_event = _radio.conn_curr->latency_event;
    ddf4:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    ddf8:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    ddfc:	f10b 0601 	add.w	r6, fp, #1
    de00:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    de02:	2f00      	cmp	r7, #0
    de04:	f000 8084 	beq.w	df10 <isr+0x1620>
		if (_radio.role == ROLE_SLAVE) {
    de08:	7ce3      	ldrb	r3, [r4, #19]
    de0a:	2b03      	cmp	r3, #3
    de0c:	d173      	bne.n	def6 <isr+0x1606>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    de0e:	f002 fb79 	bl	10504 <radio_tmr_aa_restore>
    de12:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    de14:	f002 fb7c 	bl	10510 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    de18:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    de1c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    de20:	f003 0307 	and.w	r3, r3, #7
    de24:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    de26:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    de2a:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    de2c:	d052      	beq.n	ded4 <isr+0x15e4>
		return 40;
    de2e:	2b04      	cmp	r3, #4
    de30:	bf0c      	ite	eq
    de32:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    de36:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    de3a:	f100 0330 	add.w	r3, r0, #48	; 0x30
    de3e:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    de40:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    de42:	930a      	str	r3, [sp, #40]	; 0x28
    de44:	f8df a21c 	ldr.w	sl, [pc, #540]	; e064 <isr+0x1774>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    de48:	a384      	add	r3, pc, #528	; (adr r3, e05c <isr+0x176c>)
    de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    de4e:	d844      	bhi.n	deda <isr+0x15ea>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    de50:	fba0 010a 	umull	r0, r1, r0, sl
    de54:	f7f2 f9de 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    de58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    de5a:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    de5c:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    de60:	a37e      	add	r3, pc, #504	; (adr r3, e05c <isr+0x176c>)
    de62:	e9d3 2300 	ldrd	r2, r3, [r3]
    de66:	fba0 010a 	umull	r0, r1, r0, sl
    de6a:	f7f2 f9d3 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    de6e:	2300      	movs	r3, #0
    de70:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    de72:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    de74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    de78:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    de7c:	b3ab      	cbz	r3, deea <isr+0x15fa>
				if (pdu_data_tx->len ||
    de7e:	795b      	ldrb	r3, [r3, #5]
    de80:	b913      	cbnz	r3, de88 <isr+0x1598>
    de82:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    de86:	b10b      	cbz	r3, de8c <isr+0x159c>
					_radio.conn_curr->latency_event = 0;
    de88:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    de8a:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    de8c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    de90:	2200      	movs	r2, #0
    de92:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    de94:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    de98:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    de9c:	b1c3      	cbz	r3, ded0 <isr+0x15e0>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    de9e:	429e      	cmp	r6, r3
    dea0:	f080 80a6 	bcs.w	dff0 <isr+0x1700>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    dea4:	1b9b      	subs	r3, r3, r6
    dea6:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    dea8:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    deaa:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    deac:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    deb0:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    deb2:	f240 809f 	bls.w	dff4 <isr+0x1704>
			else if (_radio.role == ROLE_SLAVE) {
    deb6:	7ce3      	ldrb	r3, [r4, #19]
    deb8:	2b03      	cmp	r3, #3
    deba:	d109      	bne.n	ded0 <isr+0x15e0>
				if (latency_event != 0) {
    debc:	f1bb 0f00 	cmp.w	fp, #0
    dec0:	f040 8098 	bne.w	dff4 <isr+0x1704>
					force = _radio.conn_curr->slave.force & 0x01;
    dec4:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    dec6:	087b      	lsrs	r3, r7, #1
					if (force) {
    dec8:	f017 0701 	ands.w	r7, r7, #1
    decc:	d13d      	bne.n	df4a <isr+0x165a>
					_radio.conn_curr->slave.force >>= 1;
    dece:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    ded0:	2700      	movs	r7, #0
    ded2:	e03d      	b.n	df50 <isr+0x1660>
		return 24;
    ded4:	f04f 0818 	mov.w	r8, #24
    ded8:	e7af      	b.n	de3a <isr+0x154a>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    deda:	fba9 010a 	umull	r0, r1, r9, sl
    dede:	f7f2 f999 	bl	214 <__aeabi_uldivmod>
    dee2:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    dee4:	f108 0030 	add.w	r0, r8, #48	; 0x30
    dee8:	e7ba      	b.n	de60 <isr+0x1570>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    deea:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    deee:	07db      	lsls	r3, r3, #31
    def0:	d5cc      	bpl.n	de8c <isr+0x159c>
				_radio.conn_curr->latency_event =
    def2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    def4:	e7c9      	b.n	de8a <isr+0x159a>
		} else if (reason_peer) {
    def6:	b149      	cbz	r1, df0c <isr+0x161c>
			_radio.conn_curr->master.terminate_ack = 1;
    def8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    defc:	f043 0301 	orr.w	r3, r3, #1
    df00:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    df04:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    df08:	4645      	mov	r5, r8
    df0a:	e7bf      	b.n	de8c <isr+0x159c>
	ticks_drift_minus = 0;
    df0c:	4688      	mov	r8, r1
    df0e:	e7fb      	b.n	df08 <isr+0x1618>
	else if (_radio.conn_curr->connect_expire) {
    df10:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    df12:	b185      	cbz	r5, df36 <isr+0x1646>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    df14:	42ae      	cmp	r6, r5
    df16:	d204      	bcs.n	df22 <isr+0x1632>
			_radio.conn_curr->connect_expire -= elapsed_event;
    df18:	1bad      	subs	r5, r5, r6
    df1a:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    df1c:	463d      	mov	r5, r7
    df1e:	46a8      	mov	r8, r5
    df20:	e7b8      	b.n	de94 <isr+0x15a4>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    df22:	213e      	movs	r1, #62	; 0x3e
    df24:	f7fb fa74 	bl	9410 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    df28:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    df2c:	f7fb fc66 	bl	97fc <connection_release>
			_radio.conn_curr = NULL;
    df30:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    df34:	e719      	b.n	dd6a <isr+0x147a>
		if (!_radio.conn_curr->supervision_expire) {
    df36:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    df3a:	f1b8 0f00 	cmp.w	r8, #0
    df3e:	d1ee      	bne.n	df1e <isr+0x162e>
			_radio.conn_curr->supervision_expire =
    df40:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    df42:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    df46:	4645      	mov	r5, r8
    df48:	e7a4      	b.n	de94 <isr+0x15a4>
						_radio.conn_curr->slave.force |=
    df4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    df4e:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    df50:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    df54:	b123      	cbz	r3, df60 <isr+0x1670>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    df56:	429e      	cmp	r6, r3
    df58:	d24e      	bcs.n	dff8 <isr+0x1708>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    df5a:	1b9b      	subs	r3, r3, r6
    df5c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    df60:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    df64:	b123      	cbz	r3, df70 <isr+0x1680>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    df66:	429e      	cmp	r6, r3
    df68:	d248      	bcs.n	dffc <isr+0x170c>
			_radio.conn_curr->apto_expire -= elapsed_event;
    df6a:	1b9b      	subs	r3, r3, r6
    df6c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    df70:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    df74:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    df78:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    df7c:	b123      	cbz	r3, df88 <isr+0x1698>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    df7e:	429e      	cmp	r6, r3
    df80:	d24e      	bcs.n	e020 <isr+0x1730>
			_radio.conn_curr->appto_expire -= elapsed_event;
    df82:	1b9e      	subs	r6, r3, r6
    df84:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    df88:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    df8c:	428b      	cmp	r3, r1
    df8e:	d006      	beq.n	df9e <isr+0x16ae>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    df90:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    df94:	3b01      	subs	r3, #1
    df96:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    df98:	bf9c      	itt	ls
    df9a:	2300      	movls	r3, #0
    df9c:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    df9e:	b917      	cbnz	r7, dfa6 <isr+0x16b6>
    dfa0:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    dfa2:	455b      	cmp	r3, fp
    dfa4:	d04e      	beq.n	e044 <isr+0x1754>
		lazy = _radio.conn_curr->latency_event + 1;
    dfa6:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    dfa8:	3301      	adds	r3, #1
    dfaa:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    dfac:	b935      	cbnz	r5, dfbc <isr+0x16cc>
    dfae:	f1b8 0f00 	cmp.w	r8, #0
    dfb2:	d103      	bne.n	dfbc <isr+0x16cc>
    dfb4:	b913      	cbnz	r3, dfbc <isr+0x16cc>
	    (lazy != 0) || (force != 0)) {
    dfb6:	2f00      	cmp	r7, #0
    dfb8:	f43f aed7 	beq.w	dd6a <isr+0x147a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dfbc:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    dfc0:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dfc2:	3207      	adds	r2, #7
		ticker_status =
    dfc4:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dfc6:	b2d6      	uxtb	r6, r2
		ticker_status =
    dfc8:	4a23      	ldr	r2, [pc, #140]	; (e058 <isr+0x1768>)
    dfca:	9205      	str	r2, [sp, #20]
    dfcc:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    dfce:	9606      	str	r6, [sp, #24]
		ticker_status =
    dfd0:	9704      	str	r7, [sp, #16]
    dfd2:	9102      	str	r1, [sp, #8]
    dfd4:	9101      	str	r1, [sp, #4]
    dfd6:	f8cd 8000 	str.w	r8, [sp]
    dfda:	4632      	mov	r2, r6
    dfdc:	4608      	mov	r0, r1
    dfde:	f7f8 fe0d 	bl	6bfc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    dfe2:	f030 0302 	bics.w	r3, r0, #2
    dfe6:	f43f aec0 	beq.w	dd6a <isr+0x147a>
    dfea:	7ca3      	ldrb	r3, [r4, #18]
    dfec:	429e      	cmp	r6, r3
    dfee:	e686      	b.n	dcfe <isr+0x140e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    dff0:	2108      	movs	r1, #8
    dff2:	e6e4      	b.n	ddbe <isr+0x14ce>
				force = 1;
    dff4:	2701      	movs	r7, #1
    dff6:	e7ab      	b.n	df50 <isr+0x1660>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    dff8:	2122      	movs	r1, #34	; 0x22
    dffa:	e6e0      	b.n	ddbe <isr+0x14ce>
			_radio.conn_curr->apto_expire = 0;
    dffc:	2300      	movs	r3, #0
    dffe:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    e002:	2002      	movs	r0, #2
    e004:	f7fa fbc2 	bl	878c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    e008:	2800      	cmp	r0, #0
    e00a:	f43e acc9 	beq.w	c9a0 <isr+0xb0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    e00e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e012:	8c1b      	ldrh	r3, [r3, #32]
    e014:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    e016:	230a      	movs	r3, #10
    e018:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    e01a:	f7fb fa21 	bl	9460 <packet_rx_enqueue>
    e01e:	e7a7      	b.n	df70 <isr+0x1680>
			_radio.conn_curr->appto_expire = 0;
    e020:	2300      	movs	r3, #0
    e022:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    e026:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    e02a:	2b00      	cmp	r3, #0
    e02c:	d1ac      	bne.n	df88 <isr+0x1698>
    e02e:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    e032:	428b      	cmp	r3, r1
    e034:	d1ac      	bne.n	df90 <isr+0x16a0>
				_radio.conn_curr->llcp_type = LLCP_PING;
    e036:	2307      	movs	r3, #7
    e038:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    e03c:	1e4b      	subs	r3, r1, #1
    e03e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    e042:	e7a1      	b.n	df88 <isr+0x1698>
	lazy = 0;
    e044:	463b      	mov	r3, r7
    e046:	e7b1      	b.n	dfac <isr+0x16bc>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    e048:	3b04      	subs	r3, #4
    e04a:	2b01      	cmp	r3, #1
    e04c:	f63e aca8 	bhi.w	c9a0 <isr+0xb0>
		_radio.state = STATE_NONE;
    e050:	2300      	movs	r3, #0
    e052:	7523      	strb	r3, [r4, #20]
    e054:	f7fe bcf2 	b.w	ca3c <isr+0x14c>
    e058:	000099ed 	.word	0x000099ed
    e05c:	1afd498d 	.word	0x1afd498d
    e060:	00000007 	.word	0x00000007
    e064:	3b9aca00 	.word	0x3b9aca00

0000e068 <radio_init>:
{
    e068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    e06c:	4e3d      	ldr	r6, [pc, #244]	; (e164 <radio_init+0xfc>)
{
    e06e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e070:	f89d c01c 	ldrb.w	ip, [sp, #28]
    e074:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    e078:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    e07c:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    e080:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    e082:	f44f 70aa 	mov.w	r0, #340	; 0x154
    e086:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    e08a:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    e08e:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    e092:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    e094:	f10c 0401 	add.w	r4, ip, #1
    e098:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    e09a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    e09c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    e0a0:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    e0a4:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    e0a6:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    e0a8:	bf98      	it	ls
    e0aa:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    e0ae:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    e0b2:	bf88      	it	hi
    e0b4:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    e0b8:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    e0bc:	bf8c      	ite	hi
    e0be:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    e0c2:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    e0c6:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    e0ca:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    e0ce:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    e0d2:	bf8c      	ite	hi
    e0d4:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    e0d8:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    e0da:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    e0de:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
    e0e2:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
    e0e6:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    e0ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    e0ee:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e0f2:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
    e0f6:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    e0fa:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e0fc:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
    e0fe:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    e102:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e104:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    e108:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e10c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    e110:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    e112:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    e116:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    e11a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    e11e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    e122:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    e126:	340a      	adds	r4, #10
    e128:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    e12c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    e12e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    e130:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    e134:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    e138:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    e13a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    e13e:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e142:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    e146:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
    e14a:	d003      	beq.n	e154 <radio_init+0xec>
		return (retcode + mem_size);
    e14c:	442c      	add	r4, r5
}
    e14e:	4620      	mov	r0, r4
    e150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    e154:	2301      	movs	r3, #1
    e156:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
    e15a:	f7fa fbdb 	bl	8914 <common_init>
	radio_setup();
    e15e:	f001 ff35 	bl	ffcc <radio_setup>
	return retcode;
    e162:	e7f4      	b.n	e14e <radio_init+0xe6>
    e164:	20000668 	.word	0x20000668

0000e168 <ll_reset>:
{
    e168:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    e16a:	2103      	movs	r1, #3
    e16c:	2005      	movs	r0, #5
    e16e:	f7fa fca7 	bl	8ac0 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    e172:	2104      	movs	r1, #4
    e174:	2006      	movs	r0, #6
    e176:	f7fa fca3 	bl	8ac0 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    e17a:	4c22      	ldr	r4, [pc, #136]	; (e204 <ll_reset+0x9c>)
    e17c:	2500      	movs	r5, #0
    e17e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    e182:	b2ab      	uxth	r3, r5
    e184:	429a      	cmp	r2, r3
    e186:	f105 0501 	add.w	r5, r5, #1
    e18a:	d834      	bhi.n	e1f6 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    e18c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e190:	f36f 13c7 	bfc	r3, #7, #1
    e194:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    e198:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    e19c:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    e19e:	f360 0300 	bfi	r3, r0, #0, #1
    e1a2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e1a6:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e1a8:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    e1ac:	fbb3 f3f2 	udiv	r3, r3, r2
    e1b0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    e1b4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
    e1b8:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    e1bc:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    e1be:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
    e1c2:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    e1c6:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    e1ca:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    e1ce:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    e1d2:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e1d6:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
    e1da:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
    e1de:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
    e1e2:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
    e1e6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
    e1ea:	f001 fd85 	bl	fcf8 <ll_filter_reset>
}
    e1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    e1f2:	f7fa bb8f 	b.w	8914 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    e1f6:	1da8      	adds	r0, r5, #6
    e1f8:	21ff      	movs	r1, #255	; 0xff
    e1fa:	b2c0      	uxtb	r0, r0
    e1fc:	f7fa fc60 	bl	8ac0 <role_disable>
    e200:	e7bd      	b.n	e17e <ll_reset+0x16>
    e202:	bf00      	nop
    e204:	20000668 	.word	0x20000668

0000e208 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    e208:	4b02      	ldr	r3, [pc, #8]	; (e214 <ll_adv_is_enabled+0xc>)
    e20a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    e20e:	09c0      	lsrs	r0, r0, #7
    e210:	4770      	bx	lr
    e212:	bf00      	nop
    e214:	20000668 	.word	0x20000668

0000e218 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    e218:	4b04      	ldr	r3, [pc, #16]	; (e22c <radio_adv_filter_pol_get+0x14>)
    e21a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    e21e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    e220:	bfba      	itte	lt
    e222:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    e226:	0980      	lsrlt	r0, r0, #6
    e228:	2000      	movge	r0, #0
}
    e22a:	4770      	bx	lr
    e22c:	20000668 	.word	0x20000668

0000e230 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    e230:	4a09      	ldr	r2, [pc, #36]	; (e258 <ll_scan_is_enabled+0x28>)
    e232:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    e236:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    e23a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    e23e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    e242:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    e244:	f003 0301 	and.w	r3, r3, #1
    e248:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    e24c:	bf14      	ite	ne
    e24e:	2004      	movne	r0, #4
    e250:	2000      	moveq	r0, #0
}
    e252:	4318      	orrs	r0, r3
    e254:	4770      	bx	lr
    e256:	bf00      	nop
    e258:	20000668 	.word	0x20000668

0000e25c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    e25c:	4b05      	ldr	r3, [pc, #20]	; (e274 <radio_scan_filter_pol_get+0x18>)
    e25e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    e262:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    e266:	bf1c      	itt	ne
    e268:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    e26c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    e270:	4770      	bx	lr
    e272:	bf00      	nop
    e274:	20000668 	.word	0x20000668

0000e278 <radio_connect_enable>:
{
    e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    e27c:	f8df 8358 	ldr.w	r8, [pc, #856]	; e5d8 <radio_connect_enable+0x360>
{
    e280:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
    e282:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
    e286:	9301      	str	r3, [sp, #4]
    e288:	4683      	mov	fp, r0
    e28a:	468a      	mov	sl, r1
    e28c:	4691      	mov	r9, r2
    e28e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
    e290:	2e00      	cmp	r6, #0
    e292:	f040 8193 	bne.w	e5bc <radio_connect_enable+0x344>
	link = mem_acquire(&_radio.link_rx_free);
    e296:	f508 70a4 	add.w	r0, r8, #328	; 0x148
    e29a:	f7f7 fdea 	bl	5e72 <mem_acquire>
	if (!link) {
    e29e:	4607      	mov	r7, r0
    e2a0:	b150      	cbz	r0, e2b8 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
    e2a2:	f508 7086 	add.w	r0, r8, #268	; 0x10c
    e2a6:	f7f7 fde4 	bl	5e72 <mem_acquire>
	if (!conn) {
    e2aa:	4604      	mov	r4, r0
    e2ac:	b930      	cbnz	r0, e2bc <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
    e2ae:	f508 71a4 	add.w	r1, r8, #328	; 0x148
    e2b2:	4638      	mov	r0, r7
    e2b4:	f7f7 fdf7 	bl	5ea6 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    e2b8:	2007      	movs	r0, #7
    e2ba:	e15c      	b.n	e576 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
    e2bc:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
    e2c0:	f36b 1386 	bfi	r3, fp, #6, #1
    e2c4:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    e2c8:	2206      	movs	r2, #6
    e2ca:	4651      	mov	r1, sl
    e2cc:	f108 00ea 	add.w	r0, r8, #234	; 0xea
    e2d0:	f7f3 fc94 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
    e2d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e2d8:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    e2dc:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    e2de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
    e2e2:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    e2e6:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    e2e8:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    e2ec:	f001 ff2a 	bl	10144 <radio_tx_ready_delay_get>
    e2f0:	49b5      	ldr	r1, [pc, #724]	; (e5c8 <radio_connect_enable+0x350>)
    e2f2:	f200 4052 	addw	r0, r0, #1106	; 0x452
    e2f6:	a3b2      	add	r3, pc, #712	; (adr r3, e5c0 <radio_connect_enable+0x348>)
    e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e2fc:	fba0 0101 	umull	r0, r1, r0, r1
    e300:	f7f1 ff88 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
    e304:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    e308:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e30c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
    e310:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    e312:	f8df 82c8 	ldr.w	r8, [pc, #712]	; e5dc <radio_connect_enable+0x364>
	conn->llcp_features = RADIO_BLE_FEAT;
    e316:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
    e31a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    e31e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
    e320:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
    e324:	2104      	movs	r1, #4
    e326:	a803      	add	r0, sp, #12
    e328:	f7f8 fdc6 	bl	6eb8 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    e32c:	f8dd c00c 	ldr.w	ip, [sp, #12]
    e330:	2000      	movs	r0, #0
    e332:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
    e336:	231f      	movs	r3, #31
	transitions = 0;
    e338:	4602      	mov	r2, r0
	consecutive_cnt = 1;
    e33a:	2101      	movs	r1, #1
	while (bit_idx--) {
    e33c:	3b01      	subs	r3, #1
    e33e:	b2db      	uxtb	r3, r3
    e340:	2bff      	cmp	r3, #255	; 0xff
    e342:	d103      	bne.n	e34c <radio_connect_enable+0xd4>
    e344:	b3d0      	cbz	r0, e3bc <radio_connect_enable+0x144>
    e346:	f8cd c00c 	str.w	ip, [sp, #12]
    e34a:	e037      	b.n	e3bc <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
    e34c:	fa2c fe03 	lsr.w	lr, ip, r3
    e350:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
    e354:	45d6      	cmp	lr, sl
    e356:	d11a      	bne.n	e38e <radio_connect_enable+0x116>
			consecutive_cnt++;
    e358:	3101      	adds	r1, #1
    e35a:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
    e35c:	2906      	cmp	r1, #6
    e35e:	d807      	bhi.n	e370 <radio_connect_enable+0xf8>
    e360:	2b1b      	cmp	r3, #27
    e362:	d81a      	bhi.n	e39a <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
    e364:	b122      	cbz	r2, e370 <radio_connect_enable+0xf8>
    e366:	2b1b      	cmp	r3, #27
    e368:	d017      	beq.n	e39a <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
    e36a:	2a01      	cmp	r2, #1
    e36c:	d815      	bhi.n	e39a <radio_connect_enable+0x122>
    e36e:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
    e370:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
    e374:	f1be 0f00 	cmp.w	lr, #0
    e378:	f000 8100 	beq.w	e57c <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
    e37c:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
    e380:	f04f 0e00 	mov.w	lr, #0
			transitions++;
    e384:	3201      	adds	r2, #1
    e386:	2001      	movs	r0, #1
    e388:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    e38a:	4601      	mov	r1, r0
    e38c:	e005      	b.n	e39a <radio_connect_enable+0x122>
			transitions++;
    e38e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
    e390:	2b1b      	cmp	r3, #27
			transitions++;
    e392:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    e394:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
    e398:	d9e5      	bls.n	e366 <radio_connect_enable+0xee>
		if (transitions > 24) {
    e39a:	2a18      	cmp	r2, #24
    e39c:	f240 80f6 	bls.w	e58c <radio_connect_enable+0x314>
    e3a0:	b108      	cbz	r0, e3a6 <radio_connect_enable+0x12e>
    e3a2:	f8cd c00c 	str.w	ip, [sp, #12]
    e3a6:	3301      	adds	r3, #1
    e3a8:	9a03      	ldr	r2, [sp, #12]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    e3aa:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
    e3ae:	f1be 0f00 	cmp.w	lr, #0
    e3b2:	f000 80e8 	beq.w	e586 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    e3b6:	425b      	negs	r3, r3
    e3b8:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
    e3ba:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    e3bc:	9b03      	ldr	r3, [sp, #12]
    e3be:	a804      	add	r0, sp, #16
    e3c0:	ea83 0308 	eor.w	r3, r3, r8
    e3c4:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    e3c8:	2104      	movs	r1, #4
    e3ca:	f7f7 fefd 	bl	61c8 <util_ones_count_get>
    e3ce:	2801      	cmp	r0, #1
    e3d0:	f240 80e3 	bls.w	e59a <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    e3d4:	9b03      	ldr	r3, [sp, #12]
    e3d6:	b29a      	uxth	r2, r3
    e3d8:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    e3dc:	f000 80d8 	beq.w	e590 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    e3e0:	2204      	movs	r2, #4
    e3e2:	a903      	add	r1, sp, #12
    e3e4:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
    e3e8:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    e3ea:	f7f3 fc07 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
    e3ee:	2103      	movs	r1, #3
    e3f0:	f104 0014 	add.w	r0, r4, #20
    e3f4:	f7f8 fd60 	bl	6eb8 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
    e3f8:	2205      	movs	r2, #5
    e3fa:	4974      	ldr	r1, [pc, #464]	; (e5cc <radio_connect_enable+0x354>)
    e3fc:	f104 0017 	add.w	r0, r4, #23
    e400:	f7f3 fbfc 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
    e404:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
    e408:	7f63      	ldrb	r3, [r4, #29]
    e40a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
    e40e:	f36f 1386 	bfc	r3, #6, #1
    e412:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
    e414:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
    e416:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
    e418:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
    e41a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
    e41c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
    e420:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
    e424:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
    e428:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    e42a:	211b      	movs	r1, #27
    e42c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    e42e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
    e430:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
    e434:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e436:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
    e43a:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e43e:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e440:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
    e442:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
    e446:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
    e448:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
    e44c:	2601      	movs	r6, #1
    e44e:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
    e452:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    e456:	f363 11c7 	bfi	r1, r3, #7, #1
    e45a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
    e45e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
    e462:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
    e466:	f366 0102 	bfi	r1, r6, #0, #3
    e46a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
    e46e:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
    e472:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
    e474:	b2c9      	uxtb	r1, r1
    e476:	f36c 01c5 	bfi	r1, ip, #3, #3
    e47a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
    e47e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
    e482:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
    e484:	f366 0102 	bfi	r1, r6, #0, #3
    e488:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
    e48c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
    e48e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
    e490:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
    e494:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
    e496:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
    e498:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
    e49c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    e4a0:	f363 0100 	bfi	r1, r3, #0, #1
    e4a4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
    e4a8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e4ac:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e4b0:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
    e4b4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e4b8:	1e56      	subs	r6, r2, #1
    e4ba:	f242 7e10 	movw	lr, #10000	; 0x2710
    e4be:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
    e4c2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e4c6:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e4ca:	4b41      	ldr	r3, [pc, #260]	; (e5d0 <radio_connect_enable+0x358>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e4cc:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e4ce:	4941      	ldr	r1, [pc, #260]	; (e5d4 <radio_connect_enable+0x35c>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e4d0:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e4d2:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e4d4:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e4d8:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e4dc:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e4de:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e4e2:	1d81      	adds	r1, r0, #6
    e4e4:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e4e6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e4ea:	dc61      	bgt.n	e5b0 <radio_connect_enable+0x338>
	conn->llcp_version.tx = 0;
    e4ec:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e4f0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
    e4f4:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
    e4f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    e4fa:	f360 0341 	bfi	r3, r0, #1, #1
    e4fe:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
    e502:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
    e506:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
    e50a:	f360 1304 	bfi	r3, r0, #4, #1
    e50e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
    e512:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
    e516:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
    e51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e51e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
    e522:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
    e526:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
    e52a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
    e52e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
    e532:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    e536:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
    e53a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
    e53e:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
    e542:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
    e546:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
    e54a:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
    e54e:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
    e552:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
    e556:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
    e55a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    e55e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
    e562:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
    e566:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
    e56a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    e56e:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
    e572:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
    e576:	b005      	add	sp, #20
    e578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
    e57c:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
    e580:	f04f 0e01 	mov.w	lr, #1
    e584:	e6fe      	b.n	e384 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
    e586:	3b01      	subs	r3, #1
    e588:	4313      	orrs	r3, r2
    e58a:	e716      	b.n	e3ba <radio_connect_enable+0x142>
		if (transitions > 24) {
    e58c:	46f2      	mov	sl, lr
    e58e:	e6d5      	b.n	e33c <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
    e590:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    e592:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
    e596:	f47f af23 	bne.w	e3e0 <radio_connect_enable+0x168>
    e59a:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
    e59c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    e5a0:	f47f aec0 	bne.w	e324 <radio_connect_enable+0xac>
    e5a4:	4040      	eors	r0, r0
    e5a6:	f380 8811 	msr	BASEPRI, r0
    e5aa:	f04f 0004 	mov.w	r0, #4
    e5ae:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e5b0:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    e5b4:	33fa      	adds	r3, #250	; 0xfa
    e5b6:	441a      	add	r2, r3
    e5b8:	b292      	uxth	r2, r2
    e5ba:	e797      	b.n	e4ec <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e5bc:	200c      	movs	r0, #12
    e5be:	e7da      	b.n	e576 <radio_connect_enable+0x2fe>
    e5c0:	1afd498d 	.word	0x1afd498d
    e5c4:	00000007 	.word	0x00000007
    e5c8:	3b9aca00 	.word	0x3b9aca00
    e5cc:	20000782 	.word	0x20000782
    e5d0:	01c9c37f 	.word	0x01c9c37f
    e5d4:	026259ff 	.word	0x026259ff
    e5d8:	20000668 	.word	0x20000668
    e5dc:	8e89bed6 	.word	0x8e89bed6

0000e5e0 <ll_conn_update>:
{
    e5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5e4:	460c      	mov	r4, r1
    e5e6:	4690      	mov	r8, r2
    e5e8:	461d      	mov	r5, r3
    e5ea:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e5ee:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
    e5f2:	f7fa fa4f 	bl	8a94 <connection_get>
	if (!conn) {
    e5f6:	b330      	cbz	r0, e646 <ll_conn_update+0x66>
	if (!cmd) {
    e5f8:	2c00      	cmp	r4, #0
    e5fa:	d14a      	bne.n	e692 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
    e5fc:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e600:	06d9      	lsls	r1, r3, #27
    e602:	d407      	bmi.n	e614 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
    e604:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
    e608:	069a      	lsls	r2, r3, #26
    e60a:	d541      	bpl.n	e690 <ll_conn_update+0xb0>
		     (conn->llcp_features &
    e60c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
    e610:	079b      	lsls	r3, r3, #30
    e612:	d43d      	bmi.n	e690 <ll_conn_update+0xb0>
		} else if (conn->role) {
    e614:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e618:	2b00      	cmp	r3, #0
    e61a:	da17      	bge.n	e64c <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e61c:	201a      	movs	r0, #26
    e61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
    e622:	428b      	cmp	r3, r1
    e624:	d00f      	beq.n	e646 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
    e626:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
    e62a:	f003 0207 	and.w	r2, r3, #7
    e62e:	2a03      	cmp	r2, #3
    e630:	d109      	bne.n	e646 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    e632:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    e636:	b2db      	uxtb	r3, r3
    e638:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
    e63c:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
    e640:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    e644:	e021      	b.n	e68a <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e646:	200c      	movs	r0, #12
    e648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
    e64c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    e650:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e654:	429a      	cmp	r2, r3
    e656:	d1f6      	bne.n	e646 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e658:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
    e65c:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
    e660:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
    e662:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e664:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
    e668:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
    e66c:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
    e66e:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    e672:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
    e676:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
    e67a:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
    e67e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    e682:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
    e686:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
    e68a:	2000      	movs	r0, #0
    e68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
    e690:	2401      	movs	r4, #1
		cmd--;
    e692:	3c01      	subs	r4, #1
		if (cmd) {
    e694:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    e698:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    e69c:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    e6a0:	d1bf      	bne.n	e622 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
    e6a2:	4299      	cmp	r1, r3
    e6a4:	d1cf      	bne.n	e646 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    e6a6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
    e6aa:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
    e6ae:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    e6b2:	b2db      	uxtb	r3, r3
    e6b4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
    e6b8:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
    e6ba:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
    e6be:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
    e6c2:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
    e6c6:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
    e6ca:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
    e6ce:	e7dc      	b.n	e68a <ll_conn_update+0xaa>

0000e6d0 <ll_chm_update>:
{
    e6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
    e6d4:	4c1e      	ldr	r4, [pc, #120]	; (e750 <ll_chm_update+0x80>)
    e6d6:	4601      	mov	r1, r0
    e6d8:	2205      	movs	r2, #5
{
    e6da:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
    e6dc:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    e6e0:	f7f3 fa8c 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
    e6e4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    e6e8:	2105      	movs	r1, #5
    e6ea:	f7f7 fd6d 	bl	61c8 <util_ones_count_get>
	_radio.data_chan_count =
    e6ee:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
    e6f2:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
    e6f6:	3c01      	subs	r4, #1
    e6f8:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
    e6fa:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    e6fc:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
    e700:	2cff      	cmp	r4, #255	; 0xff
    e702:	d102      	bne.n	e70a <ll_chm_update+0x3a>
	return 0;
    e704:	2000      	movs	r0, #0
    e706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
    e70a:	4620      	mov	r0, r4
    e70c:	f7fa f9c2 	bl	8a94 <connection_get>
		if (!conn || conn->role) {
    e710:	4606      	mov	r6, r0
    e712:	b1b8      	cbz	r0, e744 <ll_chm_update+0x74>
    e714:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e718:	2b00      	cmp	r3, #0
    e71a:	db13      	blt.n	e744 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
    e71c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e720:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e724:	429a      	cmp	r2, r3
    e726:	d110      	bne.n	e74a <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
    e728:	2205      	movs	r2, #5
    e72a:	4629      	mov	r1, r5
    e72c:	3079      	adds	r0, #121	; 0x79
    e72e:	f7f3 fa65 	bl	1bfc <memcpy>
		conn->llcp_req++;
    e732:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
    e736:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
    e73a:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    e73c:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
    e740:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
    e744:	3c01      	subs	r4, #1
    e746:	b2e4      	uxtb	r4, r4
    e748:	e7da      	b.n	e700 <ll_chm_update+0x30>
			return 1;
    e74a:	2001      	movs	r0, #1
}
    e74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e750:	20000668 	.word	0x20000668

0000e754 <ll_chm_get>:
{
    e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e756:	460d      	mov	r5, r1
	conn = connection_get(handle);
    e758:	f7fa f99c 	bl	8a94 <connection_get>
	if (!conn) {
    e75c:	4604      	mov	r4, r0
    e75e:	b160      	cbz	r0, e77a <ll_chm_get+0x26>
		conn->chm_update = 0;
    e760:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    e762:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
    e766:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    e768:	2205      	movs	r2, #5
    e76a:	4631      	mov	r1, r6
    e76c:	4628      	mov	r0, r5
    e76e:	f7f3 fa45 	bl	1bfc <memcpy>
	} while (conn->chm_update);
    e772:	7f20      	ldrb	r0, [r4, #28]
    e774:	2800      	cmp	r0, #0
    e776:	d1f6      	bne.n	e766 <ll_chm_get+0x12>
    e778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    e77a:	2001      	movs	r0, #1
}
    e77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e77e <ll_feature_req_send>:
{
    e77e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    e780:	f7fa f988 	bl	8a94 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e784:	b168      	cbz	r0, e7a2 <ll_feature_req_send+0x24>
    e786:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e78a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e78e:	4293      	cmp	r3, r2
    e790:	d107      	bne.n	e7a2 <ll_feature_req_send+0x24>
	conn->llcp_req++;
    e792:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    e794:	2204      	movs	r2, #4
	conn->llcp_req++;
    e796:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    e79a:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    e79e:	2000      	movs	r0, #0
    e7a0:	bd08      	pop	{r3, pc}
		return 1;
    e7a2:	2001      	movs	r0, #1
}
    e7a4:	bd08      	pop	{r3, pc}

0000e7a6 <ll_version_ind_send>:
{
    e7a6:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    e7a8:	f7fa f974 	bl	8a94 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e7ac:	b168      	cbz	r0, e7ca <ll_version_ind_send+0x24>
    e7ae:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e7b2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e7b6:	4293      	cmp	r3, r2
    e7b8:	d107      	bne.n	e7ca <ll_version_ind_send+0x24>
	conn->llcp_req++;
    e7ba:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    e7bc:	2205      	movs	r2, #5
	conn->llcp_req++;
    e7be:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    e7c2:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    e7c6:	2000      	movs	r0, #0
    e7c8:	bd08      	pop	{r3, pc}
		return 1;
    e7ca:	2001      	movs	r0, #1
}
    e7cc:	bd08      	pop	{r3, pc}

0000e7ce <ll_terminate_ind_send>:
{
    e7ce:	b510      	push	{r4, lr}
    e7d0:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e7d2:	f7fa f95f 	bl	8a94 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    e7d6:	b160      	cbz	r0, e7f2 <ll_terminate_ind_send+0x24>
    e7d8:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
    e7dc:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
    e7e0:	4293      	cmp	r3, r2
    e7e2:	d106      	bne.n	e7f2 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
    e7e4:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
    e7e6:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
    e7ea:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
    e7ee:	2000      	movs	r0, #0
    e7f0:	bd10      	pop	{r4, pc}
		return 1;
    e7f2:	2001      	movs	r0, #1
}
    e7f4:	bd10      	pop	{r4, pc}

0000e7f6 <ll_tx_pwr_lvl_get>:
{
    e7f6:	b510      	push	{r4, lr}
    e7f8:	4614      	mov	r4, r2
	conn = connection_get(handle);
    e7fa:	f7fa f94b 	bl	8a94 <connection_get>
	if (!conn) {
    e7fe:	b110      	cbz	r0, e806 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    e800:	2000      	movs	r0, #0
    e802:	7020      	strb	r0, [r4, #0]
	return 0;
    e804:	bd10      	pop	{r4, pc}
		return 1;
    e806:	2001      	movs	r0, #1
}
    e808:	bd10      	pop	{r4, pc}

0000e80a <ll_apto_get>:
{
    e80a:	b510      	push	{r4, lr}
    e80c:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e80e:	f7fa f941 	bl	8a94 <connection_get>
	if (!conn) {
    e812:	b160      	cbz	r0, e82e <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    e814:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    e816:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    e81a:	435a      	muls	r2, r3
    e81c:	237d      	movs	r3, #125	; 0x7d
    e81e:	4353      	muls	r3, r2
	return 0;
    e820:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    e822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e826:	fb93 f3f2 	sdiv	r3, r3, r2
    e82a:	8023      	strh	r3, [r4, #0]
	return 0;
    e82c:	bd10      	pop	{r4, pc}
		return 1;
    e82e:	2001      	movs	r0, #1
}
    e830:	bd10      	pop	{r4, pc}

0000e832 <ll_apto_set>:
{
    e832:	b510      	push	{r4, lr}
    e834:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e836:	f7fa f92d 	bl	8a94 <connection_get>
	if (!conn) {
    e83a:	b170      	cbz	r0, e85a <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
    e83c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    e83e:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e842:	4353      	muls	r3, r2
    e844:	f242 7110 	movw	r1, #10000	; 0x2710
    e848:	fb01 3404 	mla	r4, r1, r4, r3
    e84c:	3c01      	subs	r4, #1
    e84e:	fb94 f4f3 	sdiv	r4, r4, r3
    e852:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
    e856:	2000      	movs	r0, #0
    e858:	bd10      	pop	{r4, pc}
		return 1;
    e85a:	2001      	movs	r0, #1
}
    e85c:	bd10      	pop	{r4, pc}

0000e85e <ll_length_req_send>:
{
    e85e:	b570      	push	{r4, r5, r6, lr}
    e860:	460e      	mov	r6, r1
    e862:	4615      	mov	r5, r2
	conn = connection_get(handle);
    e864:	f7fa f916 	bl	8a94 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e868:	b1d0      	cbz	r0, e8a0 <ll_length_req_send+0x42>
    e86a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e86e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e872:	429a      	cmp	r2, r3
    e874:	d114      	bne.n	e8a0 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
    e876:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e87a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    e87e:	4293      	cmp	r3, r2
    e880:	d10e      	bne.n	e8a0 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e882:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
    e886:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
    e88a:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e88c:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
    e890:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e894:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
    e898:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
    e89c:	2000      	movs	r0, #0
    e89e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    e8a0:	2001      	movs	r0, #1
}
    e8a2:	bd70      	pop	{r4, r5, r6, pc}

0000e8a4 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
    e8a4:	4b03      	ldr	r3, [pc, #12]	; (e8b4 <ll_length_default_get+0x10>)
    e8a6:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
    e8aa:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    e8ac:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
    e8b0:	800b      	strh	r3, [r1, #0]
    e8b2:	4770      	bx	lr
    e8b4:	20000668 	.word	0x20000668

0000e8b8 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
    e8b8:	4b03      	ldr	r3, [pc, #12]	; (e8c8 <ll_length_default_set+0x10>)
    e8ba:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
    e8be:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
    e8c2:	2000      	movs	r0, #0
    e8c4:	4770      	bx	lr
    e8c6:	bf00      	nop
    e8c8:	20000668 	.word	0x20000668

0000e8cc <ll_length_max_get>:
{
    e8cc:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e8ce:	241b      	movs	r4, #27
    e8d0:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    e8d2:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e8d6:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e8d8:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    e8da:	8018      	strh	r0, [r3, #0]
    e8dc:	bd10      	pop	{r4, pc}

0000e8de <ll_phy_get>:
{
    e8de:	b538      	push	{r3, r4, r5, lr}
    e8e0:	460d      	mov	r5, r1
    e8e2:	4614      	mov	r4, r2
	conn = connection_get(handle);
    e8e4:	f7fa f8d6 	bl	8a94 <connection_get>
	if (!conn) {
    e8e8:	b158      	cbz	r0, e902 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
    e8ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    e8ee:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e8f2:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
    e8f4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    e8f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e8fc:	7023      	strb	r3, [r4, #0]
	return 0;
    e8fe:	2000      	movs	r0, #0
    e900:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
    e902:	2001      	movs	r0, #1
}
    e904:	bd38      	pop	{r3, r4, r5, pc}
	...

0000e908 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
    e908:	4b03      	ldr	r3, [pc, #12]	; (e918 <ll_phy_default_set+0x10>)
    e90a:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
    e90e:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
    e912:	2000      	movs	r0, #0
    e914:	4770      	bx	lr
    e916:	bf00      	nop
    e918:	20000668 	.word	0x20000668

0000e91c <ll_phy_req_send>:
{
    e91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e920:	4689      	mov	r9, r1
    e922:	4690      	mov	r8, r2
    e924:	461f      	mov	r7, r3
	conn = connection_get(handle);
    e926:	f7fa f8b5 	bl	8a94 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e92a:	b320      	cbz	r0, e976 <ll_phy_req_send+0x5a>
    e92c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e930:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e934:	429a      	cmp	r2, r3
    e936:	d11e      	bne.n	e976 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    e938:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e93c:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
    e940:	429d      	cmp	r5, r3
    e942:	d118      	bne.n	e976 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    e944:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
    e948:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
    e94c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
    e950:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
    e954:	f046 0102 	orr.w	r1, r6, #2
    e958:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
    e95c:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
    e95e:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
    e960:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
    e964:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
    e968:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
    e96c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
    e970:	2000      	movs	r0, #0
    e972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
    e976:	2001      	movs	r0, #1
}
    e978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e97c <ll_rx_get>:
{
    e97c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e980:	4605      	mov	r5, r0
    e982:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    e984:	4918      	ldr	r1, [pc, #96]	; (e9e8 <ll_rx_get+0x6c>)
    e986:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    e98a:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
    e98e:	4293      	cmp	r3, r2
    e990:	460f      	mov	r7, r1
    e992:	d01f      	beq.n	e9d4 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    e994:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    e998:	f201 1177 	addw	r1, r1, #375	; 0x177
    e99c:	f898 2000 	ldrb.w	r2, [r8]
    e9a0:	f7fa f82e 	bl	8a00 <tx_cmplt_get>
		if (!cmplt) {
    e9a4:	4604      	mov	r4, r0
    e9a6:	b9e0      	cbnz	r0, e9e2 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    e9a8:	ae02      	add	r6, sp, #8
    e9aa:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
    e9ae:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    e9b2:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
    e9b6:	4631      	mov	r1, r6
    e9b8:	f10d 0006 	add.w	r0, sp, #6
    e9bc:	f7fa f820 	bl	8a00 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    e9c0:	b934      	cbnz	r4, e9d0 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    e9c2:	b928      	cbnz	r0, e9d0 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    e9c4:	f8c5 8000 	str.w	r8, [r5]
}
    e9c8:	4620      	mov	r0, r4
    e9ca:	b002      	add	sp, #8
    e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    e9d0:	4604      	mov	r4, r0
    e9d2:	e7ee      	b.n	e9b2 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    e9d4:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
    e9d8:	f201 1177 	addw	r1, r1, #375	; 0x177
    e9dc:	f7fa f810 	bl	8a00 <tx_cmplt_get>
    e9e0:	4604      	mov	r4, r0
		*node_rx = NULL;
    e9e2:	2300      	movs	r3, #0
    e9e4:	602b      	str	r3, [r5, #0]
    e9e6:	e7ef      	b.n	e9c8 <ll_rx_get+0x4c>
    e9e8:	20000668 	.word	0x20000668

0000e9ec <ll_rx_mem_release>:
{
    e9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    e9f0:	4c17      	ldr	r4, [pc, #92]	; (ea50 <ll_rx_mem_release+0x64>)
{
    e9f2:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    e9f4:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e9f6:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
    e9fa:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
    e9fe:	b928      	cbnz	r0, ea0c <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
    ea00:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
    ea02:	20ff      	movs	r0, #255	; 0xff
}
    ea04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    ea08:	f7f9 bf38 	b.w	887c <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
    ea0c:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    ea0e:	f8d0 8000 	ldr.w	r8, [r0]
    ea12:	2a0c      	cmp	r2, #12
    ea14:	d807      	bhi.n	ea26 <ll_rx_mem_release+0x3a>
    ea16:	2301      	movs	r3, #1
    ea18:	4093      	lsls	r3, r2
    ea1a:	f641 727e 	movw	r2, #8062	; 0x1f7e
    ea1e:	4213      	tst	r3, r2
    ea20:	d107      	bne.n	ea32 <ll_rx_mem_release+0x46>
    ea22:	061b      	lsls	r3, r3, #24
    ea24:	d40a      	bmi.n	ea3c <ll_rx_mem_release+0x50>
			LL_ASSERT(0);
    ea26:	4040      	eors	r0, r0
    ea28:	f380 8811 	msr	BASEPRI, r0
    ea2c:	f04f 0004 	mov.w	r0, #4
    ea30:	df02      	svc	2
			mem_release(_node_rx_free,
    ea32:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    ea34:	f7f7 fa37 	bl	5ea6 <mem_release>
{
    ea38:	4640      	mov	r0, r8
    ea3a:	e7e0      	b.n	e9fe <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ea3c:	88c2      	ldrh	r2, [r0, #6]
    ea3e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    ea42:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ea46:	f7f7 fa49 	bl	5edc <mem_get>
			mem_release(conn, &_radio.conn_free);
    ea4a:	4639      	mov	r1, r7
    ea4c:	e7f2      	b.n	ea34 <ll_rx_mem_release+0x48>
    ea4e:	bf00      	nop
    ea50:	20000798 	.word	0x20000798

0000ea54 <do_radio_rx_fc_set>:
	if (req == ack) {
    ea54:	4291      	cmp	r1, r2
{
    ea56:	b510      	push	{r4, lr}
    ea58:	4b14      	ldr	r3, [pc, #80]	; (eaac <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    ea5a:	d119      	bne.n	ea90 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    ea5c:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    ea60:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
    ea64:	4294      	cmp	r4, r2
    ea66:	d111      	bne.n	ea8c <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
    ea68:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    ea6a:	bf14      	ite	ne
    ea6c:	460a      	movne	r2, r1
    ea6e:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
    ea70:	3a01      	subs	r2, #1
    ea72:	b2d2      	uxtb	r2, r2
    ea74:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    ea78:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
    ea7c:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
    ea80:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
    ea84:	4291      	cmp	r1, r2
    ea86:	d00f      	beq.n	eaa8 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    ea88:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
    ea8c:	2001      	movs	r0, #1
    ea8e:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
    ea90:	b929      	cbnz	r1, ea9e <do_radio_rx_fc_set+0x4a>
    ea92:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
    ea96:	1a18      	subs	r0, r3, r0
    ea98:	bf18      	it	ne
    ea9a:	2001      	movne	r0, #1
    ea9c:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    ea9e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    eaa2:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
    eaa6:	e7f6      	b.n	ea96 <do_radio_rx_fc_set+0x42>
	return 0;
    eaa8:	2000      	movs	r0, #0
}
    eaaa:	bd10      	pop	{r4, pc}
    eaac:	20000668 	.word	0x20000668

0000eab0 <radio_rx_fc_set>:
{
    eab0:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    eab2:	4b14      	ldr	r3, [pc, #80]	; (eb04 <radio_rx_fc_set+0x54>)
    eab4:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
    eab8:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    eaba:	b302      	cbz	r2, eafe <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    eabc:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
    eac0:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    eac2:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
    eac6:	b135      	cbz	r5, ead6 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    eac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    eacc:	4298      	cmp	r0, r3
    eace:	d016      	beq.n	eafe <radio_rx_fc_set+0x4e>
}
    ead0:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    ead2:	f7ff bfbf 	b.w	ea54 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    ead6:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
    eada:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
    eade:	42a0      	cmp	r0, r4
    eae0:	d10d      	bne.n	eafe <radio_rx_fc_set+0x4e>
    eae2:	4291      	cmp	r1, r2
    eae4:	d00b      	beq.n	eafe <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    eae6:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
    eaea:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    eaee:	42a0      	cmp	r0, r4
    eaf0:	d005      	beq.n	eafe <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    eaf2:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    eaf6:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    eaf8:	bf08      	it	eq
    eafa:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
    eafe:	2000      	movs	r0, #0
    eb00:	bc30      	pop	{r4, r5}
    eb02:	4770      	bx	lr
    eb04:	20000668 	.word	0x20000668

0000eb08 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
    eb08:	4801      	ldr	r0, [pc, #4]	; (eb10 <ll_tx_mem_acquire+0x8>)
    eb0a:	f7f7 b9b2 	b.w	5e72 <mem_acquire>
    eb0e:	bf00      	nop
    eb10:	200007cc 	.word	0x200007cc

0000eb14 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    eb14:	4901      	ldr	r1, [pc, #4]	; (eb1c <ll_tx_mem_release+0x8>)
    eb16:	f7f7 b9c6 	b.w	5ea6 <mem_release>
    eb1a:	bf00      	nop
    eb1c:	200007cc 	.word	0x200007cc

0000eb20 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
    eb20:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    eb22:	4d2b      	ldr	r5, [pc, #172]	; (ebd0 <ll_tx_mem_enqueue+0xb0>)
    eb24:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
    eb28:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
    eb2c:	3401      	adds	r4, #1
{
    eb2e:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
    eb30:	b2e4      	uxtb	r4, r4
{
    eb32:	4607      	mov	r7, r0
    eb34:	460e      	mov	r6, r1
		last = 0;
    eb36:	42a3      	cmp	r3, r4
    eb38:	bf08      	it	eq
    eb3a:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
    eb3c:	f7f9 ffaa 	bl	8a94 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
    eb40:	2800      	cmp	r0, #0
    eb42:	d042      	beq.n	ebca <ll_tx_mem_enqueue+0xaa>
    eb44:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
    eb48:	429c      	cmp	r4, r3
    eb4a:	d03e      	beq.n	ebca <ll_tx_mem_enqueue+0xaa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
    eb4c:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    eb50:	7972      	ldrb	r2, [r6, #5]
    eb52:	3b07      	subs	r3, #7
    eb54:	429a      	cmp	r2, r3
    eb56:	d905      	bls.n	eb64 <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    eb58:	4040      	eors	r0, r0
    eb5a:	f380 8811 	msr	BASEPRI, r0
    eb5e:	f04f 0004 	mov.w	r0, #4
    eb62:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
    eb64:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
    eb68:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
    eb6c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    eb70:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
    eb74:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
    eb76:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    eb7a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    eb7e:	2b00      	cmp	r3, #0
    eb80:	db02      	blt.n	eb88 <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
    eb82:	2000      	movs	r0, #0
}
    eb84:	b009      	add	sp, #36	; 0x24
    eb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    eb88:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    eb8a:	2b00      	cmp	r3, #0
    eb8c:	d0f9      	beq.n	eb82 <ll_tx_mem_enqueue+0x62>
    eb8e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    eb92:	f012 0302 	ands.w	r3, r2, #2
    eb96:	d1f4      	bne.n	eb82 <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1;
    eb98:	f042 0202 	orr.w	r2, r2, #2
    eb9c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    eba0:	f890 2020 	ldrb.w	r2, [r0, #32]
    eba4:	490b      	ldr	r1, [pc, #44]	; (ebd4 <ll_tx_mem_enqueue+0xb4>)
    eba6:	9105      	str	r1, [sp, #20]
    eba8:	3207      	adds	r2, #7
    ebaa:	2101      	movs	r1, #1
    ebac:	9006      	str	r0, [sp, #24]
    ebae:	9304      	str	r3, [sp, #16]
    ebb0:	9103      	str	r1, [sp, #12]
    ebb2:	9302      	str	r3, [sp, #8]
    ebb4:	9301      	str	r3, [sp, #4]
    ebb6:	9300      	str	r3, [sp, #0]
    ebb8:	4618      	mov	r0, r3
    ebba:	b2d2      	uxtb	r2, r2
    ebbc:	2103      	movs	r1, #3
    ebbe:	f7f8 f81d 	bl	6bfc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ebc2:	f030 0302 	bics.w	r3, r0, #2
    ebc6:	d1c7      	bne.n	eb58 <ll_tx_mem_enqueue+0x38>
    ebc8:	e7db      	b.n	eb82 <ll_tx_mem_enqueue+0x62>
		return 1;
    ebca:	2001      	movs	r0, #1
    ebcc:	e7da      	b.n	eb84 <ll_tx_mem_enqueue+0x64>
    ebce:	bf00      	nop
    ebd0:	20000668 	.word	0x20000668
    ebd4:	000099d5 	.word	0x000099d5

0000ebd8 <ll_enc_req_send>:
{
    ebd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ebdc:	4607      	mov	r7, r0
    ebde:	4688      	mov	r8, r1
    ebe0:	4616      	mov	r6, r2
    ebe2:	4699      	mov	r9, r3
	conn = connection_get(handle);
    ebe4:	f7f9 ff56 	bl	8a94 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    ebe8:	4605      	mov	r5, r0
    ebea:	b910      	cbnz	r0, ebf2 <ll_enc_req_send+0x1a>
			return 1;
    ebec:	2001      	movs	r0, #1
    ebee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    ebf2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    ebf6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    ebfa:	429a      	cmp	r2, r3
    ebfc:	d1f6      	bne.n	ebec <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
    ebfe:	f7ff ff83 	bl	eb08 <ll_tx_mem_acquire>
	if (node_tx) {
    ec02:	4604      	mov	r4, r0
    ec04:	2800      	cmp	r0, #0
    ec06:	d0f1      	beq.n	ebec <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    ec08:	2210      	movs	r2, #16
    ec0a:	4649      	mov	r1, r9
    ec0c:	f105 0084 	add.w	r0, r5, #132	; 0x84
    ec10:	f7f2 fff4 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
    ec14:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    ec18:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    ec1c:	d124      	bne.n	ec68 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    ec1e:	7923      	ldrb	r3, [r4, #4]
    ec20:	f043 0303 	orr.w	r3, r3, #3
    ec24:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
    ec26:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    ec28:	2208      	movs	r2, #8
			pdu_data_tx->len =
    ec2a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
    ec2c:	2303      	movs	r3, #3
    ec2e:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    ec30:	4641      	mov	r1, r8
    ec32:	18a0      	adds	r0, r4, r2
    ec34:	f7f2 ffe2 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
    ec38:	7833      	ldrb	r3, [r6, #0]
    ec3a:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
    ec3c:	7873      	ldrb	r3, [r6, #1]
    ec3e:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
    ec40:	2108      	movs	r1, #8
    ec42:	f104 0012 	add.w	r0, r4, #18
    ec46:	f7f8 f937 	bl	6eb8 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
    ec4a:	2104      	movs	r1, #4
    ec4c:	f104 001a 	add.w	r0, r4, #26
    ec50:	f7f8 f932 	bl	6eb8 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
    ec54:	4621      	mov	r1, r4
    ec56:	4638      	mov	r0, r7
    ec58:	f7ff ff62 	bl	eb20 <ll_tx_mem_enqueue>
    ec5c:	2601      	movs	r6, #1
    ec5e:	b1d0      	cbz	r0, ec96 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
    ec60:	4620      	mov	r0, r4
    ec62:	f7ff ff57 	bl	eb14 <ll_tx_mem_release>
    ec66:	e7c1      	b.n	ebec <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
    ec68:	2b30      	cmp	r3, #48	; 0x30
    ec6a:	d1f9      	bne.n	ec60 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
    ec6c:	2208      	movs	r2, #8
    ec6e:	4641      	mov	r1, r8
    ec70:	f105 007a 	add.w	r0, r5, #122	; 0x7a
    ec74:	f7f2 ffc2 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
    ec78:	7833      	ldrb	r3, [r6, #0]
    ec7a:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
    ec7e:	7873      	ldrb	r3, [r6, #1]
    ec80:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    ec84:	7923      	ldrb	r3, [r4, #4]
    ec86:	f043 0303 	orr.w	r3, r3, #3
    ec8a:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    ec8c:	2301      	movs	r3, #1
    ec8e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
    ec90:	230a      	movs	r3, #10
    ec92:	71e3      	strb	r3, [r4, #7]
    ec94:	e7de      	b.n	ec54 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
    ec96:	2303      	movs	r3, #3
    ec98:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
    ec9c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
    eca0:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
    eca4:	3301      	adds	r3, #1
    eca6:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
    ecaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000ecb0 <radio_scan_enable>:
{
    ecb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
    ecb4:	4c68      	ldr	r4, [pc, #416]	; (ee58 <radio_scan_enable+0x1a8>)
    ecb6:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
    ecba:	b08e      	sub	sp, #56	; 0x38
    ecbc:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
    ecbe:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ecc2:	f04f 0302 	mov.w	r3, #2
{
    ecc6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ecc8:	930b      	str	r3, [sp, #44]	; 0x2c
{
    ecca:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    eccc:	d003      	beq.n	ecd6 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ecce:	200c      	movs	r0, #12
}
    ecd0:	b00e      	add	sp, #56	; 0x38
    ecd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    ecd6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
    ecda:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
    ecde:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
    ece2:	0840      	lsrs	r0, r0, #1
    ece4:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
    ece8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    ecec:	f360 0200 	bfi	r2, r0, #0, #1
    ecf0:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
    ecf4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
    ecf8:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
    ecfc:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    ed00:	2206      	movs	r2, #6
    ed02:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
    ed06:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    ed0a:	4e54      	ldr	r6, [pc, #336]	; (ee5c <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    ed0c:	f7f2 ff76 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    ed10:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    ed14:	f04f 0991 	mov.w	r9, #145	; 0x91
    ed18:	fba2 0106 	umull	r0, r1, r2, r6
    ed1c:	fb09 1102 	mla	r1, r9, r2, r1
    ed20:	a34b      	add	r3, pc, #300	; (adr r3, ee50 <radio_scan_enable+0x1a0>)
    ed22:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed26:	f7f1 fa75 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    ed2a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    ed2e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
    ed32:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    ed36:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
    ed3a:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ed3e:	b2ba      	uxth	r2, r7
    ed40:	fba2 6706 	umull	r6, r7, r2, r6
    ed44:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
    ed48:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
    ed4c:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
    ed4e:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
    ed52:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
    ed56:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
    ed5a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ed5e:	a33c      	add	r3, pc, #240	; (adr r3, ee50 <radio_scan_enable+0x1a0>)
    ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed64:	4630      	mov	r0, r6
    ed66:	4639      	mov	r1, r7
    ed68:	f7f1 fa54 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
    ed6c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
    ed70:	459a      	cmp	sl, r3
    ed72:	bf94      	ite	ls
    ed74:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
    ed78:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
    ed7c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ed80:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
    ed82:	bf38      	it	cc
    ed84:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
    ed88:	f7f8 f856 	bl	6e38 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
    ed8c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
    ed90:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
    ed92:	2b00      	cmp	r3, #0
    ed94:	d045      	beq.n	ee22 <radio_scan_enable+0x172>
		us_offset = 0;
    ed96:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    ed98:	980c      	ldr	r0, [sp, #48]	; 0x30
    ed9a:	4931      	ldr	r1, [pc, #196]	; (ee60 <radio_scan_enable+0x1b0>)
    ed9c:	a32c      	add	r3, pc, #176	; (adr r3, ee50 <radio_scan_enable+0x1a0>)
    ed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    eda2:	fba0 0101 	umull	r0, r1, r0, r1
    eda6:	f7f1 fa35 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    edaa:	ab0b      	add	r3, sp, #44	; 0x2c
    edac:	9308      	str	r3, [sp, #32]
    edae:	4b2d      	ldr	r3, [pc, #180]	; (ee64 <radio_scan_enable+0x1b4>)
    edb0:	9307      	str	r3, [sp, #28]
    edb2:	4b2d      	ldr	r3, [pc, #180]	; (ee68 <radio_scan_enable+0x1b8>)
    edb4:	9305      	str	r3, [sp, #20]
    edb6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    edba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    edbe:	4443      	add	r3, r8
    edc0:	2500      	movs	r5, #0
    edc2:	4482      	add	sl, r0
    edc4:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    edc6:	4630      	mov	r0, r6
    edc8:	a321      	add	r3, pc, #132	; (adr r3, ee50 <radio_scan_enable+0x1a0>)
    edca:	e9d3 2300 	ldrd	r2, r3, [r3]
    edce:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    edd0:	9506      	str	r5, [sp, #24]
    edd2:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    edd4:	f7f1 fa1e 	bl	214 <__aeabi_uldivmod>
    edd8:	4610      	mov	r0, r2
    edda:	4619      	mov	r1, r3
    eddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ede0:	2300      	movs	r3, #0
    ede2:	f7f1 fa17 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ede6:	e88d 0220 	stmia.w	sp, {r5, r9}
    edea:	9002      	str	r0, [sp, #8]
    edec:	4653      	mov	r3, sl
    edee:	2206      	movs	r2, #6
    edf0:	2103      	movs	r1, #3
    edf2:	4628      	mov	r0, r5
    edf4:	f7f7 feb2 	bl	6b5c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    edf8:	2802      	cmp	r0, #2
    edfa:	d023      	beq.n	ee44 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    edfc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    edfe:	2d00      	cmp	r5, #0
    ee00:	f47f af65 	bne.w	ecce <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
    ee04:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ee08:	f043 0301 	orr.w	r3, r3, #1
    ee0c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
    ee10:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    ee14:	2b00      	cmp	r3, #0
    ee16:	db02      	blt.n	ee1e <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
    ee18:	2002      	movs	r0, #2
    ee1a:	f000 fd8f 	bl	f93c <ll_adv_scan_state_cb>
	return 0;
    ee1e:	4628      	mov	r0, r5
    ee20:	e756      	b.n	ecd0 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    ee22:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
    ee26:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    ee28:	aa0d      	add	r2, sp, #52	; 0x34
    ee2a:	ab0c      	add	r3, sp, #48	; 0x30
    ee2c:	4441      	add	r1, r8
    ee2e:	2003      	movs	r0, #3
    ee30:	f7fa f962 	bl	90f8 <sched_after_mstr_free_slot_get>
		if (us_offset) {
    ee34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ee36:	2b00      	cmp	r3, #0
    ee38:	d0ae      	beq.n	ed98 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
    ee3a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    ee3e:	e7ab      	b.n	ed98 <radio_scan_enable+0xe8>
			cpu_sleep();
    ee40:	f7f9 fc42 	bl	86c8 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    ee44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ee46:	2b02      	cmp	r3, #2
    ee48:	d0fa      	beq.n	ee40 <radio_scan_enable+0x190>
    ee4a:	e7d7      	b.n	edfc <radio_scan_enable+0x14c>
    ee4c:	f3af 8000 	nop.w
    ee50:	1afd498d 	.word	0x1afd498d
    ee54:	00000007 	.word	0x00000007
    ee58:	20000668 	.word	0x20000668
    ee5c:	84e72a00 	.word	0x84e72a00
    ee60:	3b9aca00 	.word	0x3b9aca00
    ee64:	0000870d 	.word	0x0000870d
    ee68:	00009c6d 	.word	0x00009c6d

0000ee6c <radio_scan_disable>:
{
    ee6c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
    ee6e:	2104      	movs	r1, #4
    ee70:	2006      	movs	r0, #6
    ee72:	f7f9 fe25 	bl	8ac0 <role_disable>
	if (!status) {
    ee76:	4605      	mov	r5, r0
    ee78:	b9e8      	cbnz	r0, eeb6 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
    ee7a:	4c10      	ldr	r4, [pc, #64]	; (eebc <radio_scan_disable+0x50>)
    ee7c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    ee80:	f360 0200 	bfi	r2, r0, #0, #1
    ee84:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
    ee88:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
    ee8c:	2a00      	cmp	r2, #0
    ee8e:	db01      	blt.n	ee94 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
    ee90:	f000 fd54 	bl	f93c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
    ee94:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
    ee98:	b15e      	cbz	r6, eeb2 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
    ee9a:	2300      	movs	r3, #0
    ee9c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
    eea0:	4907      	ldr	r1, [pc, #28]	; (eec0 <radio_scan_disable+0x54>)
    eea2:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    eea6:	f7f6 fffe 	bl	5ea6 <mem_release>
			mem_release(conn, &_radio.conn_free);
    eeaa:	4906      	ldr	r1, [pc, #24]	; (eec4 <radio_scan_disable+0x58>)
    eeac:	4630      	mov	r0, r6
    eeae:	f7f6 fffa 	bl	5ea6 <mem_release>
}
    eeb2:	4628      	mov	r0, r5
    eeb4:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    eeb6:	250c      	movs	r5, #12
    eeb8:	e7fb      	b.n	eeb2 <radio_scan_disable+0x46>
    eeba:	bf00      	nop
    eebc:	20000668 	.word	0x20000668
    eec0:	200007b0 	.word	0x200007b0
    eec4:	20000774 	.word	0x20000774

0000eec8 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
    eec8:	4b03      	ldr	r3, [pc, #12]	; (eed8 <ll_connect_disable+0x10>)
    eeca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    eece:	b10b      	cbz	r3, eed4 <ll_connect_disable+0xc>
	status = radio_scan_disable();
    eed0:	f7ff bfcc 	b.w	ee6c <radio_scan_disable>
}
    eed4:	200c      	movs	r0, #12
    eed6:	4770      	bx	lr
    eed8:	20000668 	.word	0x20000668

0000eedc <ll_rx_dequeue>:
{
    eedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    eede:	4d34      	ldr	r5, [pc, #208]	; (efb0 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    eee0:	aa02      	add	r2, sp, #8
    eee2:	2300      	movs	r3, #0
    eee4:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    eee8:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
    eeec:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
    eef0:	f7f7 f828 	bl	5f44 <memq_dequeue>
    eef4:	462c      	mov	r4, r5
	LL_ASSERT(link);
    eef6:	b928      	cbnz	r0, ef04 <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    eef8:	4040      	eors	r0, r0
    eefa:	f380 8811 	msr	BASEPRI, r0
    eefe:	f04f 0004 	mov.w	r0, #4
    ef02:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    ef04:	f505 71a4 	add.w	r1, r5, #328	; 0x148
    ef08:	f7f6 ffcd 	bl	5ea6 <mem_release>
	switch (node_rx->hdr.type) {
    ef0c:	9a01      	ldr	r2, [sp, #4]
    ef0e:	7911      	ldrb	r1, [r2, #4]
    ef10:	290c      	cmp	r1, #12
    ef12:	d8f1      	bhi.n	eef8 <ll_rx_dequeue+0x1c>
    ef14:	2301      	movs	r3, #1
    ef16:	408b      	lsls	r3, r1
    ef18:	f641 707e 	movw	r0, #8062	; 0x1f7e
    ef1c:	4203      	tst	r3, r0
    ef1e:	d111      	bne.n	ef44 <ll_rx_dequeue+0x68>
    ef20:	0618      	lsls	r0, r3, #24
    ef22:	d5e9      	bpl.n	eef8 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    ef24:	2906      	cmp	r1, #6
    ef26:	d134      	bne.n	ef92 <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    ef28:	7ad3      	ldrb	r3, [r2, #11]
    ef2a:	2b3c      	cmp	r3, #60	; 0x3c
    ef2c:	d015      	beq.n	ef5a <ll_rx_dequeue+0x7e>
    ef2e:	7b12      	ldrb	r2, [r2, #12]
    ef30:	bb8a      	cbnz	r2, ef96 <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    ef32:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ef36:	07d9      	lsls	r1, r3, #31
    ef38:	d5de      	bpl.n	eef8 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    ef3a:	f362 0300 	bfi	r3, r2, #0, #1
    ef3e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    ef42:	e01a      	b.n	ef7a <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    ef44:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
    ef48:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    ef4c:	3801      	subs	r0, #1
    ef4e:	4283      	cmp	r3, r0
    ef50:	dad2      	bge.n	eef8 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    ef52:	3301      	adds	r3, #1
    ef54:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		break;
    ef58:	e7e4      	b.n	ef24 <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    ef5a:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    ef5c:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
    ef60:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
    ef64:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    ef68:	2b00      	cmp	r3, #0
    ef6a:	dac5      	bge.n	eef8 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    ef6c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ef70:	f36f 13c7 	bfc	r3, #7, #1
    ef74:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    ef78:	b97d      	cbnz	r5, ef9a <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    ef7a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
    ef7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    ef82:	f000 0001 	and.w	r0, r0, #1
    ef86:	0040      	lsls	r0, r0, #1
		if (!bm) {
    ef88:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    ef8c:	d101      	bne.n	ef92 <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
    ef8e:	f000 fcd5 	bl	f93c <ll_adv_scan_state_cb>
}
    ef92:	b003      	add	sp, #12
    ef94:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    ef96:	2500      	movs	r5, #0
    ef98:	e7e4      	b.n	ef64 <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    ef9a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
    ef9e:	4905      	ldr	r1, [pc, #20]	; (efb4 <ll_rx_dequeue+0xd8>)
    efa0:	f7f6 ff81 	bl	5ea6 <mem_release>
			mem_release(conn, &_radio.conn_free);
    efa4:	4904      	ldr	r1, [pc, #16]	; (efb8 <ll_rx_dequeue+0xdc>)
    efa6:	4628      	mov	r0, r5
    efa8:	f7f6 ff7d 	bl	5ea6 <mem_release>
    efac:	e7e5      	b.n	ef7a <ll_rx_dequeue+0x9e>
    efae:	bf00      	nop
    efb0:	20000668 	.word	0x20000668
    efb4:	200007b0 	.word	0x200007b0
    efb8:	20000774 	.word	0x20000774

0000efbc <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    efbc:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    efbe:	4c0b      	ldr	r4, [pc, #44]	; (efec <rtc0_nrf5_isr+0x30>)
    efc0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    efc4:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    efc8:	b122      	cbz	r2, efd4 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    efca:	2000      	movs	r0, #0
    efcc:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    efd0:	f7f7 fdb2 	bl	6b38 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    efd4:	b12d      	cbz	r5, efe2 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    efd6:	2300      	movs	r3, #0
    efd8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    efdc:	2001      	movs	r0, #1
    efde:	f7f7 fdab 	bl	6b38 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    efe2:	2000      	movs	r0, #0
}
    efe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    efe8:	f7f7 b85c 	b.w	60a4 <mayfly_run>
    efec:	4000b000 	.word	0x4000b000

0000eff0 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    eff0:	2001      	movs	r0, #1
    eff2:	f7f7 b857 	b.w	60a4 <mayfly_run>

0000eff6 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    eff6:	4668      	mov	r0, sp
    eff8:	f020 0107 	bic.w	r1, r0, #7
    effc:	468d      	mov	sp, r1
    effe:	b501      	push	{r0, lr}
	isr_radio();
    f000:	f000 ffc8 	bl	ff94 <isr_radio>
	ISR_DIRECT_PM();
    f004:	f7f2 fc74 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    f008:	f7f2 fa5e 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    f00c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    f010:	4685      	mov	sp, r0
    f012:	4770      	bx	lr

0000f014 <radio_active_callback>:
{
    f014:	4770      	bx	lr
	...

0000f018 <radio_event_callback>:
	k_sem_give(sem_recv);
    f018:	4b01      	ldr	r3, [pc, #4]	; (f020 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    f01a:	6818      	ldr	r0, [r3, #0]
    f01c:	f002 bd6d 	b.w	11afa <_impl_k_sem_give>
    f020:	20000f98 	.word	0x20000f98

0000f024 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    f024:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    f026:	4b37      	ldr	r3, [pc, #220]	; (f104 <ll_init+0xe0>)
{
    f028:	b087      	sub	sp, #28
	sem_recv = sem_rx;
    f02a:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    f02c:	4836      	ldr	r0, [pc, #216]	; (f108 <ll_init+0xe4>)
    f02e:	f002 f87d 	bl	1112c <device_get_binding>
	if (!clk_k32) {
    f032:	b918      	cbnz	r0, f03c <ll_init+0x18>
		return -ENODEV;
    f034:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    f038:	b007      	add	sp, #28
    f03a:	bd30      	pop	{r4, r5, pc}
	return api->on(dev, sys);
    f03c:	6843      	ldr	r3, [r0, #4]
    f03e:	2101      	movs	r1, #1
    f040:	681b      	ldr	r3, [r3, #0]
    f042:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    f044:	4831      	ldr	r0, [pc, #196]	; (f10c <ll_init+0xe8>)
    f046:	f002 f871 	bl	1112c <device_get_binding>
	if (!entropy) {
    f04a:	4604      	mov	r4, r0
    f04c:	2800      	cmp	r0, #0
    f04e:	d0f1      	beq.n	f034 <ll_init+0x10>
	cntr_init();
    f050:	f000 fe9a 	bl	fd88 <cntr_init>
	mayfly_init();
    f054:	f7f6 ff86 	bl	5f64 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    f058:	4b2d      	ldr	r3, [pc, #180]	; (f110 <ll_init+0xec>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    f05a:	2203      	movs	r2, #3
    f05c:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    f05e:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    f060:	4a2c      	ldr	r2, [pc, #176]	; (f114 <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    f062:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    f064:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    f066:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    f068:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    f06a:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    f06c:	9205      	str	r2, [sp, #20]
    f06e:	4a2a      	ldr	r2, [pc, #168]	; (f118 <ll_init+0xf4>)
    f070:	9204      	str	r2, [sp, #16]
    f072:	4a2a      	ldr	r2, [pc, #168]	; (f11c <ll_init+0xf8>)
    f074:	9203      	str	r2, [sp, #12]
    f076:	4a2a      	ldr	r2, [pc, #168]	; (f120 <ll_init+0xfc>)
    f078:	9202      	str	r2, [sp, #8]
    f07a:	220d      	movs	r2, #13
    f07c:	9201      	str	r2, [sp, #4]
    f07e:	9300      	str	r3, [sp, #0]
    f080:	4a28      	ldr	r2, [pc, #160]	; (f124 <ll_init+0x100>)
    f082:	2304      	movs	r3, #4
    f084:	f7f7 fd20 	bl	6ac8 <ticker_init>
	LL_ASSERT(!err);
    f088:	b128      	cbz	r0, f096 <ll_init+0x72>
    f08a:	4040      	eors	r0, r0
    f08c:	f380 8811 	msr	BASEPRI, r0
    f090:	f04f 0004 	mov.w	r0, #4
    f094:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    f096:	4824      	ldr	r0, [pc, #144]	; (f128 <ll_init+0x104>)
    f098:	f002 f848 	bl	1112c <device_get_binding>
	if (!clk_m16) {
    f09c:	2800      	cmp	r0, #0
    f09e:	d0c9      	beq.n	f034 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    f0a0:	f44f 7357 	mov.w	r3, #860	; 0x35c
    f0a4:	9305      	str	r3, [sp, #20]
    f0a6:	4b21      	ldr	r3, [pc, #132]	; (f12c <ll_init+0x108>)
    f0a8:	9304      	str	r3, [sp, #16]
    f0aa:	9501      	str	r5, [sp, #4]
    f0ac:	231b      	movs	r3, #27
    f0ae:	2501      	movs	r5, #1
    f0b0:	9303      	str	r3, [sp, #12]
    f0b2:	9302      	str	r3, [sp, #8]
    f0b4:	4622      	mov	r2, r4
    f0b6:	9500      	str	r5, [sp, #0]
    f0b8:	462b      	mov	r3, r5
    f0ba:	2107      	movs	r1, #7
    f0bc:	f7fe ffd4 	bl	e068 <radio_init>
	if (err) {
    f0c0:	4604      	mov	r4, r0
    f0c2:	b9e0      	cbnz	r0, f0fe <ll_init+0xda>
	ll_filter_reset(true);
    f0c4:	4628      	mov	r0, r5
    f0c6:	f000 fe17 	bl	fcf8 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    f0ca:	4622      	mov	r2, r4
    f0cc:	4621      	mov	r1, r4
    f0ce:	4628      	mov	r0, r5
    f0d0:	f7f2 fbf4 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    f0d4:	4622      	mov	r2, r4
    f0d6:	4621      	mov	r1, r4
    f0d8:	200b      	movs	r0, #11
    f0da:	f7f2 fbef 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    f0de:	4622      	mov	r2, r4
    f0e0:	4621      	mov	r1, r4
    f0e2:	2018      	movs	r0, #24
    f0e4:	f7f2 fbea 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    f0e8:	4628      	mov	r0, r5
    f0ea:	f7f2 fbb5 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    f0ee:	200b      	movs	r0, #11
    f0f0:	f7f2 fbb2 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    f0f4:	2018      	movs	r0, #24
    f0f6:	f7f2 fbaf 	bl	1858 <_arch_irq_enable>
	return 0;
    f0fa:	4620      	mov	r0, r4
    f0fc:	e79c      	b.n	f038 <ll_init+0x14>
		return -ENOMEM;
    f0fe:	f06f 000b 	mvn.w	r0, #11
    f102:	e799      	b.n	f038 <ll_init+0x14>
    f104:	20000f98 	.word	0x20000f98
    f108:	00012714 	.word	0x00012714
    f10c:	000126e8 	.word	0x000126e8
    f110:	20000f78 	.word	0x20000f78
    f114:	00010839 	.word	0x00010839
    f118:	000107c1 	.word	0x000107c1
    f11c:	000107a1 	.word	0x000107a1
    f120:	20000d08 	.word	0x20000d08
    f124:	20000bc8 	.word	0x20000bc8
    f128:	0001271f 	.word	0x0001271f
    f12c:	2000086c 	.word	0x2000086c

0000f130 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
    f130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f134:	4681      	mov	r9, r0
    f136:	4688      	mov	r8, r1
    f138:	4617      	mov	r7, r2
    f13a:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
    f13c:	f7ff f878 	bl	e230 <ll_scan_is_enabled>
    f140:	b988      	cbnz	r0, f166 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
    f142:	4d0a      	ldr	r5, [pc, #40]	; (f16c <ll_scan_params_set+0x3c>)
    f144:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
    f146:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
    f14a:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
    f14e:	4622      	mov	r2, r4
    f150:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
    f154:	4613      	mov	r3, r2
    f156:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
    f15a:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
    f15c:	f362 1387 	bfi	r3, r2, #6, #2
    f160:	712b      	strb	r3, [r5, #4]

	return 0;
    f162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f166:	200c      	movs	r0, #12
}
    f168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f16c:	20000f9c 	.word	0x20000f9c

0000f170 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
    f170:	b5f0      	push	{r4, r5, r6, r7, lr}
    f172:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
    f174:	b920      	cbnz	r0, f180 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
    f176:	b005      	add	sp, #20
    f178:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
    f17c:	f7ff be76 	b.w	ee6c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
    f180:	f7ff f856 	bl	e230 <ll_scan_is_enabled>
    f184:	4606      	mov	r6, r0
    f186:	bb40      	cbnz	r0, f1da <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
    f188:	4c15      	ldr	r4, [pc, #84]	; (f1e0 <ll_scan_enable+0x70>)
    f18a:	7920      	ldrb	r0, [r4, #4]
    f18c:	0980      	lsrs	r0, r0, #6
    f18e:	f000 f9ef 	bl	f570 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
    f192:	7923      	ldrb	r3, [r4, #4]
    f194:	f013 0501 	ands.w	r5, r3, #1
    f198:	d006      	beq.n	f1a8 <ll_scan_enable+0x38>
    f19a:	f013 0520 	ands.w	r5, r3, #32
    f19e:	d003      	beq.n	f1a8 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
    f1a0:	4630      	mov	r0, r6
    f1a2:	f000 fb35 	bl	f810 <ll_rl_rpa_update>
		rpa_gen = 1;
    f1a6:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    f1a8:	7926      	ldrb	r6, [r4, #4]
    f1aa:	f006 070f 	and.w	r7, r6, #15
    f1ae:	f3c6 1600 	ubfx	r6, r6, #4, #1
    f1b2:	2100      	movs	r1, #0
    f1b4:	4630      	mov	r0, r6
    f1b6:	f7f7 fe45 	bl	6e44 <ll_addr_get>
    f1ba:	22ff      	movs	r2, #255	; 0xff
    f1bc:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
    f1be:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    f1c0:	8823      	ldrh	r3, [r4, #0]
    f1c2:	9502      	str	r5, [sp, #8]
    f1c4:	0992      	lsrs	r2, r2, #6
    f1c6:	9201      	str	r2, [sp, #4]
    f1c8:	8862      	ldrh	r2, [r4, #2]
    f1ca:	9200      	str	r2, [sp, #0]
    f1cc:	4631      	mov	r1, r6
    f1ce:	4602      	mov	r2, r0
    f1d0:	4638      	mov	r0, r7
    f1d2:	f7ff fd6d 	bl	ecb0 <radio_scan_enable>
}
    f1d6:	b005      	add	sp, #20
    f1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    f1da:	2000      	movs	r0, #0
    f1dc:	e7fb      	b.n	f1d6 <ll_scan_enable+0x66>
    f1de:	bf00      	nop
    f1e0:	20000f9c 	.word	0x20000f9c

0000f1e4 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
    f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1e8:	b085      	sub	sp, #20
    f1ea:	461e      	mov	r6, r3
    f1ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    f1f0:	9303      	str	r3, [sp, #12]
    f1f2:	4680      	mov	r8, r0
    f1f4:	4689      	mov	r9, r1
    f1f6:	4615      	mov	r5, r2
    f1f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    f1fa:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
    f1fe:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
    f202:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
    f206:	f7ff f813 	bl	e230 <ll_scan_is_enabled>
    f20a:	9b03      	ldr	r3, [sp, #12]
    f20c:	bba0      	cbnz	r0, f278 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
    f20e:	9300      	str	r3, [sp, #0]
    f210:	4652      	mov	r2, sl
    f212:	465b      	mov	r3, fp
    f214:	4639      	mov	r1, r7
    f216:	4630      	mov	r0, r6
    f218:	f7ff f82e 	bl	e278 <radio_connect_enable>
				      latency, timeout);

	if (status) {
    f21c:	bb68      	cbnz	r0, f27a <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
    f21e:	4628      	mov	r0, r5
    f220:	f000 f9a6 	bl	f570 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
    f224:	b1dd      	cbz	r5, f25e <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
    f226:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    f228:	1ea3      	subs	r3, r4, #2
    f22a:	2b01      	cmp	r3, #1
    f22c:	d822      	bhi.n	f274 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
    f22e:	2000      	movs	r0, #0
    f230:	f000 faee 	bl	f810 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
    f234:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
    f238:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
    f23a:	2100      	movs	r1, #0
    f23c:	4620      	mov	r0, r4
    f23e:	f7f7 fe01 	bl	6e44 <ll_addr_get>
    f242:	4643      	mov	r3, r8
    f244:	4602      	mov	r2, r0
    f246:	4621      	mov	r1, r4
    f248:	2000      	movs	r0, #0
    f24a:	9711      	str	r7, [sp, #68]	; 0x44
    f24c:	9610      	str	r6, [sp, #64]	; 0x40
    f24e:	950f      	str	r5, [sp, #60]	; 0x3c
    f250:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
    f254:	b005      	add	sp, #20
    f256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
    f25a:	f7ff bd29 	b.w	ecb0 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
    f25e:	f000 facf 	bl	f800 <ctrl_rl_enabled>
    f262:	2800      	cmp	r0, #0
    f264:	d0df      	beq.n	f226 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
    f266:	4639      	mov	r1, r7
    f268:	462a      	mov	r2, r5
    f26a:	4630      	mov	r0, r6
    f26c:	f000 f9a2 	bl	f5b4 <ll_rl_find>
    f270:	4607      	mov	r7, r0
    f272:	e7d9      	b.n	f228 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
    f274:	2600      	movs	r6, #0
    f276:	e7e0      	b.n	f23a <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f278:	200c      	movs	r0, #12
}
    f27a:	b005      	add	sp, #20
    f27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f280 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
    f280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f284:	4688      	mov	r8, r1
	int i;

	if (free) {
    f286:	4615      	mov	r5, r2
    f288:	b10a      	cbz	r2, f28e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
    f28a:	23ff      	movs	r3, #255	; 0xff
    f28c:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    f28e:	4e14      	ldr	r6, [pc, #80]	; (f2e0 <wl_find+0x60>)
{
    f290:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    f292:	f000 0701 	and.w	r7, r0, #1
    f296:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    f29a:	07da      	lsls	r2, r3, #31
    f29c:	d51d      	bpl.n	f2da <wl_find+0x5a>
    f29e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f2a2:	42bb      	cmp	r3, r7
    f2a4:	d113      	bne.n	f2ce <wl_find+0x4e>
    f2a6:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
    f2aa:	2206      	movs	r2, #6
    f2ac:	4641      	mov	r1, r8
    f2ae:	3002      	adds	r0, #2
    f2b0:	f7f2 fc8f 	bl	1bd2 <memcmp>
    f2b4:	b910      	cbnz	r0, f2bc <wl_find+0x3c>
			return i;
    f2b6:	b2e0      	uxtb	r0, r4
    f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    f2bc:	b13d      	cbz	r5, f2ce <wl_find+0x4e>
    f2be:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    f2c2:	07db      	lsls	r3, r3, #31
    f2c4:	d403      	bmi.n	f2ce <wl_find+0x4e>
    f2c6:	782b      	ldrb	r3, [r5, #0]
    f2c8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    f2ca:	bf08      	it	eq
    f2cc:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
    f2ce:	3401      	adds	r4, #1
    f2d0:	2c08      	cmp	r4, #8
    f2d2:	d1e0      	bne.n	f296 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
    f2d4:	20ff      	movs	r0, #255	; 0xff
    f2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    f2da:	2d00      	cmp	r5, #0
    f2dc:	d1f3      	bne.n	f2c6 <wl_find+0x46>
    f2de:	e7f6      	b.n	f2ce <wl_find+0x4e>
    f2e0:	200011cf 	.word	0x200011cf

0000f2e4 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
    f2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2e8:	4d1a      	ldr	r5, [pc, #104]	; (f354 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    f2ea:	f8df 8074 	ldr.w	r8, [pc, #116]	; f360 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
    f2ee:	1eae      	subs	r6, r5, #2
{
    f2f0:	2400      	movs	r4, #0
    f2f2:	4637      	mov	r7, r6
		if (!wl[i].taken) {
    f2f4:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    f2f8:	07d9      	lsls	r1, r3, #31
    f2fa:	d524      	bpl.n	f346 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    f2fc:	f898 3000 	ldrb.w	r3, [r8]
    f300:	b15b      	cbz	r3, f31a <filter_wl_update+0x36>
		j = wl[i].rl_idx;
    f302:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    f306:	2a07      	cmp	r2, #7
    f308:	d807      	bhi.n	f31a <filter_wl_update+0x36>
    f30a:	2328      	movs	r3, #40	; 0x28
    f30c:	4353      	muls	r3, r2
    f30e:	4a12      	ldr	r2, [pc, #72]	; (f358 <filter_wl_update+0x74>)
    f310:	5cd3      	ldrb	r3, [r2, r3]
    f312:	075a      	lsls	r2, r3, #29
    f314:	d501      	bpl.n	f31a <filter_wl_update+0x36>
    f316:	06db      	lsls	r3, r3, #27
    f318:	d515      	bpl.n	f346 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
    f31a:	4810      	ldr	r0, [pc, #64]	; (f35c <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    f31c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
    f320:	2201      	movs	r2, #1
    f322:	fa02 f104 	lsl.w	r1, r2, r4
    f326:	7802      	ldrb	r2, [r0, #0]
    f328:	430a      	orrs	r2, r1
    f32a:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    f32c:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f330:	7842      	ldrb	r2, [r0, #1]
    f332:	40a3      	lsls	r3, r4
    f334:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f336:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f338:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f33a:	fb02 0004 	mla	r0, r2, r4, r0
    f33e:	4629      	mov	r1, r5
    f340:	3002      	adds	r0, #2
    f342:	f7f2 fc5b 	bl	1bfc <memcpy>
    f346:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
    f348:	2c08      	cmp	r4, #8
    f34a:	f105 0508 	add.w	r5, r5, #8
    f34e:	d1d1      	bne.n	f2f4 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
    f350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f354:	200011d1 	.word	0x200011d1
    f358:	2000105c 	.word	0x2000105c
    f35c:	2000120f 	.word	0x2000120f
    f360:	2000119c 	.word	0x2000119c

0000f364 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
    f364:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
    f366:	f7fe ff4f 	bl	e208 <ll_adv_is_enabled>
    f36a:	b928      	cbnz	r0, f378 <rl_access_check.constprop.1+0x14>
    f36c:	f7fe ff60 	bl	e230 <ll_scan_is_enabled>
    f370:	fab0 f080 	clz	r0, r0
    f374:	0940      	lsrs	r0, r0, #5
    f376:	bd08      	pop	{r3, pc}
    f378:	2000      	movs	r0, #0
}
    f37a:	bd08      	pop	{r3, pc}

0000f37c <filter_rl_update>:
{
    f37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
    f37e:	4e10      	ldr	r6, [pc, #64]	; (f3c0 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
    f380:	4d10      	ldr	r5, [pc, #64]	; (f3c4 <filter_rl_update+0x48>)
{
    f382:	2400      	movs	r4, #0
		if (rl[i].taken) {
    f384:	2728      	movs	r7, #40	; 0x28
    f386:	fb07 f104 	mul.w	r1, r7, r4
    f38a:	5c73      	ldrb	r3, [r6, r1]
    f38c:	07da      	lsls	r2, r3, #31
    f38e:	d513      	bpl.n	f3b8 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
    f390:	2201      	movs	r2, #1
    f392:	fa02 f004 	lsl.w	r0, r2, r4
    f396:	782a      	ldrb	r2, [r5, #0]
    f398:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    f39a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
    f39e:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f3a0:	786a      	ldrb	r2, [r5, #1]
    f3a2:	40a3      	lsls	r3, r4
    f3a4:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f3a6:	2206      	movs	r2, #6
    f3a8:	3101      	adds	r1, #1
    f3aa:	fb02 5004 	mla	r0, r2, r4, r5
    f3ae:	4431      	add	r1, r6
    f3b0:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f3b2:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f3b4:	f7f2 fc22 	bl	1bfc <memcpy>
    f3b8:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f3ba:	2c08      	cmp	r4, #8
    f3bc:	d1e3      	bne.n	f386 <filter_rl_update+0xa>
}
    f3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3c0:	2000105c 	.word	0x2000105c
    f3c4:	2000119d 	.word	0x2000119d

0000f3c8 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
    f3c8:	2807      	cmp	r0, #7
    f3ca:	d80c      	bhi.n	f3e6 <ctrl_lrpa_get+0x1e>
    f3cc:	2328      	movs	r3, #40	; 0x28
    f3ce:	4358      	muls	r0, r3
    f3d0:	4a06      	ldr	r2, [pc, #24]	; (f3ec <ctrl_lrpa_get+0x24>)
    f3d2:	5c13      	ldrb	r3, [r2, r0]
    f3d4:	1811      	adds	r1, r2, r0
    f3d6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    f3da:	b128      	cbz	r0, f3e8 <ctrl_lrpa_get+0x20>
    f3dc:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f3e0:	b110      	cbz	r0, f3e8 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
    f3e2:	6a48      	ldr	r0, [r1, #36]	; 0x24
    f3e4:	4770      	bx	lr
		return NULL;
    f3e6:	2000      	movs	r0, #0
}
    f3e8:	4770      	bx	lr
    f3ea:	bf00      	nop
    f3ec:	2000105c 	.word	0x2000105c

0000f3f0 <ctrl_irks_get>:
	*count = peer_irk_count;
    f3f0:	4b02      	ldr	r3, [pc, #8]	; (f3fc <ctrl_irks_get+0xc>)
    f3f2:	781b      	ldrb	r3, [r3, #0]
    f3f4:	7003      	strb	r3, [r0, #0]
}
    f3f6:	4802      	ldr	r0, [pc, #8]	; (f400 <ctrl_irks_get+0x10>)
    f3f8:	4770      	bx	lr
    f3fa:	bf00      	nop
    f3fc:	20000fd2 	.word	0x20000fd2
    f400:	20000fdb 	.word	0x20000fdb

0000f404 <ctrl_rl_idx>:
	if (whitelist) {
    f404:	b188      	cbz	r0, f42a <ctrl_rl_idx+0x26>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
    f406:	2907      	cmp	r1, #7
    f408:	d905      	bls.n	f416 <ctrl_rl_idx+0x12>
		LL_ASSERT(rl[i].taken);
    f40a:	4040      	eors	r0, r0
    f40c:	f380 8811 	msr	BASEPRI, r0
    f410:	f04f 0004 	mov.w	r0, #4
    f414:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
    f416:	4b09      	ldr	r3, [pc, #36]	; (f43c <ctrl_rl_idx+0x38>)
    f418:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
    f41c:	07d2      	lsls	r2, r2, #31
    f41e:	d5f4      	bpl.n	f40a <ctrl_rl_idx+0x6>
		i = wl[devmatch_id].rl_idx;
    f420:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    f424:	7849      	ldrb	r1, [r1, #1]
}
    f426:	4608      	mov	r0, r1
    f428:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    f42a:	2907      	cmp	r1, #7
    f42c:	d8ed      	bhi.n	f40a <ctrl_rl_idx+0x6>
		LL_ASSERT(rl[i].taken);
    f42e:	2328      	movs	r3, #40	; 0x28
    f430:	434b      	muls	r3, r1
    f432:	4a03      	ldr	r2, [pc, #12]	; (f440 <ctrl_rl_idx+0x3c>)
    f434:	5cd3      	ldrb	r3, [r2, r3]
    f436:	07db      	lsls	r3, r3, #31
    f438:	d4f5      	bmi.n	f426 <ctrl_rl_idx+0x22>
    f43a:	e7e6      	b.n	f40a <ctrl_rl_idx+0x6>
    f43c:	200011cf 	.word	0x200011cf
    f440:	2000105c 	.word	0x2000105c

0000f444 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
    f444:	4b0a      	ldr	r3, [pc, #40]	; (f470 <ctrl_rl_irk_idx+0x2c>)
    f446:	781b      	ldrb	r3, [r3, #0]
    f448:	4283      	cmp	r3, r0
    f44a:	d805      	bhi.n	f458 <ctrl_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
    f44c:	4040      	eors	r0, r0
    f44e:	f380 8811 	msr	BASEPRI, r0
    f452:	f04f 0004 	mov.w	r0, #4
    f456:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
    f458:	4b06      	ldr	r3, [pc, #24]	; (f474 <ctrl_rl_irk_idx+0x30>)
    f45a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    f45c:	2807      	cmp	r0, #7
    f45e:	d8f5      	bhi.n	f44c <ctrl_rl_irk_idx+0x8>
	LL_ASSERT(rl[i].taken);
    f460:	2328      	movs	r3, #40	; 0x28
    f462:	4343      	muls	r3, r0
    f464:	4a04      	ldr	r2, [pc, #16]	; (f478 <ctrl_rl_irk_idx+0x34>)
    f466:	5cd3      	ldrb	r3, [r2, r3]
    f468:	07db      	lsls	r3, r3, #31
    f46a:	d5ef      	bpl.n	f44c <ctrl_rl_irk_idx+0x8>
}
    f46c:	4770      	bx	lr
    f46e:	bf00      	nop
    f470:	20000fd2 	.word	0x20000fd2
    f474:	20000fd3 	.word	0x20000fd3
    f478:	2000105c 	.word	0x2000105c

0000f47c <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
    f47c:	2807      	cmp	r0, #7
    f47e:	d80e      	bhi.n	f49e <ctrl_irk_whitelisted+0x22>
	LL_ASSERT(rl[rl_idx].taken);
    f480:	2328      	movs	r3, #40	; 0x28
    f482:	4358      	muls	r0, r3
    f484:	4b07      	ldr	r3, [pc, #28]	; (f4a4 <ctrl_irk_whitelisted+0x28>)
    f486:	5c18      	ldrb	r0, [r3, r0]
    f488:	07c3      	lsls	r3, r0, #31
    f48a:	d405      	bmi.n	f498 <ctrl_irk_whitelisted+0x1c>
    f48c:	4040      	eors	r0, r0
    f48e:	f380 8811 	msr	BASEPRI, r0
    f492:	f04f 0004 	mov.w	r0, #4
    f496:	df02      	svc	2
	return rl[rl_idx].wl;
    f498:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f49c:	4770      	bx	lr
		return false;
    f49e:	2000      	movs	r0, #0
}
    f4a0:	4770      	bx	lr
    f4a2:	bf00      	nop
    f4a4:	2000105c 	.word	0x2000105c

0000f4a8 <ctrl_filter_get>:
}
    f4a8:	4b03      	ldr	r3, [pc, #12]	; (f4b8 <ctrl_filter_get+0x10>)
    f4aa:	4a04      	ldr	r2, [pc, #16]	; (f4bc <ctrl_filter_get+0x14>)
    f4ac:	2800      	cmp	r0, #0
    f4ae:	bf14      	ite	ne
    f4b0:	4610      	movne	r0, r2
    f4b2:	4618      	moveq	r0, r3
    f4b4:	4770      	bx	lr
    f4b6:	bf00      	nop
    f4b8:	2000119d 	.word	0x2000119d
    f4bc:	2000120f 	.word	0x2000120f

0000f4c0 <ll_wl_size_get>:
    f4c0:	2008      	movs	r0, #8
    f4c2:	4770      	bx	lr

0000f4c4 <ll_wl_clear>:
{
    f4c4:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f4c6:	f7fe fea7 	bl	e218 <radio_adv_filter_pol_get>
    f4ca:	4604      	mov	r4, r0
    f4cc:	b110      	cbz	r0, f4d4 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f4ce:	240c      	movs	r4, #12
}
    f4d0:	4620      	mov	r0, r4
    f4d2:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f4d4:	f7fe fec2 	bl	e25c <radio_scan_filter_pol_get>
    f4d8:	07c3      	lsls	r3, r0, #31
    f4da:	d4f8      	bmi.n	f4ce <ll_wl_clear+0xa>
		wl[i].taken = 0;
    f4dc:	4a07      	ldr	r2, [pc, #28]	; (f4fc <ll_wl_clear+0x38>)
    f4de:	4623      	mov	r3, r4
    f4e0:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    f4e4:	f36f 0100 	bfc	r1, #0, #1
    f4e8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    f4ec:	3301      	adds	r3, #1
    f4ee:	2b08      	cmp	r3, #8
    f4f0:	d1f6      	bne.n	f4e0 <ll_wl_clear+0x1c>
	wl_anon = 0;
    f4f2:	4b03      	ldr	r3, [pc, #12]	; (f500 <ll_wl_clear+0x3c>)
    f4f4:	2200      	movs	r2, #0
    f4f6:	701a      	strb	r2, [r3, #0]
	return 0;
    f4f8:	e7ea      	b.n	f4d0 <ll_wl_clear+0xc>
    f4fa:	bf00      	nop
    f4fc:	200011cf 	.word	0x200011cf
    f500:	200016c0 	.word	0x200016c0

0000f504 <ll_wl_remove>:
{
    f504:	b538      	push	{r3, r4, r5, lr}
    f506:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f508:	f7fe fe86 	bl	e218 <radio_adv_filter_pol_get>
    f50c:	4604      	mov	r4, r0
    f50e:	b110      	cbz	r0, f516 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f510:	240c      	movs	r4, #12
}
    f512:	4620      	mov	r0, r4
    f514:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f516:	f7fe fea1 	bl	e25c <radio_scan_filter_pol_get>
    f51a:	07c3      	lsls	r3, r0, #31
    f51c:	d4f8      	bmi.n	f510 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    f51e:	7828      	ldrb	r0, [r5, #0]
    f520:	28ff      	cmp	r0, #255	; 0xff
    f522:	d102      	bne.n	f52a <ll_wl_remove+0x26>
		wl_anon = 0;
    f524:	4b0f      	ldr	r3, [pc, #60]	; (f564 <ll_wl_remove+0x60>)
    f526:	701c      	strb	r4, [r3, #0]
		return 0;
    f528:	e7f3      	b.n	f512 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
    f52a:	4622      	mov	r2, r4
    f52c:	1c69      	adds	r1, r5, #1
    f52e:	f7ff fea7 	bl	f280 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    f532:	2807      	cmp	r0, #7
    f534:	d813      	bhi.n	f55e <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
    f536:	4b0c      	ldr	r3, [pc, #48]	; (f568 <ll_wl_remove+0x64>)
    f538:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    f53c:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
    f53e:	2d07      	cmp	r5, #7
    f540:	d806      	bhi.n	f550 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
    f542:	2228      	movs	r2, #40	; 0x28
    f544:	4909      	ldr	r1, [pc, #36]	; (f56c <ll_wl_remove+0x68>)
    f546:	436a      	muls	r2, r5
    f548:	5c8d      	ldrb	r5, [r1, r2]
    f54a:	f364 1545 	bfi	r5, r4, #5, #1
    f54e:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
    f550:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
    f554:	f36f 0200 	bfc	r2, #0, #1
    f558:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
    f55c:	e7d9      	b.n	f512 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f55e:	2402      	movs	r4, #2
    f560:	e7d7      	b.n	f512 <ll_wl_remove+0xe>
    f562:	bf00      	nop
    f564:	200016c0 	.word	0x200016c0
    f568:	200011cf 	.word	0x200011cf
    f56c:	2000105c 	.word	0x2000105c

0000f570 <ll_filters_scan_update>:
{
    f570:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
    f572:	4b0d      	ldr	r3, [pc, #52]	; (f5a8 <ll_filters_scan_update+0x38>)
    f574:	2200      	movs	r2, #0
    f576:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
    f578:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
    f57a:	07c3      	lsls	r3, r0, #31
    f57c:	d504      	bpl.n	f588 <ll_filters_scan_update+0x18>
    f57e:	f7fe fe4b 	bl	e218 <radio_adv_filter_pol_get>
    f582:	b908      	cbnz	r0, f588 <ll_filters_scan_update+0x18>
		filter_wl_update();
    f584:	f7ff feae 	bl	f2e4 <filter_wl_update>
	filter->enable_bitmask = 0;
    f588:	4b08      	ldr	r3, [pc, #32]	; (f5ac <ll_filters_scan_update+0x3c>)
    f58a:	2200      	movs	r2, #0
    f58c:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
    f58e:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
    f590:	4b07      	ldr	r3, [pc, #28]	; (f5b0 <ll_filters_scan_update+0x40>)
    f592:	781b      	ldrb	r3, [r3, #0]
    f594:	b133      	cbz	r3, f5a4 <ll_filters_scan_update+0x34>
    f596:	f7fe fe37 	bl	e208 <ll_adv_is_enabled>
    f59a:	b918      	cbnz	r0, f5a4 <ll_filters_scan_update+0x34>
}
    f59c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
    f5a0:	f7ff beec 	b.w	f37c <filter_rl_update>
    f5a4:	bd08      	pop	{r3, pc}
    f5a6:	bf00      	nop
    f5a8:	2000120f 	.word	0x2000120f
    f5ac:	2000119d 	.word	0x2000119d
    f5b0:	2000119c 	.word	0x2000119c

0000f5b4 <ll_rl_find>:
{
    f5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5b8:	468a      	mov	sl, r1
	if (free) {
    f5ba:	4614      	mov	r4, r2
    f5bc:	b10a      	cbz	r2, f5c2 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
    f5be:	23ff      	movs	r3, #255	; 0xff
    f5c0:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f5c2:	f8df 8054 	ldr.w	r8, [pc, #84]	; f618 <ll_rl_find+0x64>
{
    f5c6:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f5c8:	f000 0901 	and.w	r9, r0, #1
    f5cc:	2628      	movs	r6, #40	; 0x28
    f5ce:	436e      	muls	r6, r5
    f5d0:	b2ef      	uxtb	r7, r5
    f5d2:	f818 3006 	ldrb.w	r3, [r8, r6]
    f5d6:	07da      	lsls	r2, r3, #31
    f5d8:	d51a      	bpl.n	f610 <ll_rl_find+0x5c>
    f5da:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f5de:	454b      	cmp	r3, r9
    f5e0:	d10f      	bne.n	f602 <ll_rl_find+0x4e>
    f5e2:	1c70      	adds	r0, r6, #1
    f5e4:	2206      	movs	r2, #6
    f5e6:	4651      	mov	r1, sl
    f5e8:	4440      	add	r0, r8
    f5ea:	f7f2 faf2 	bl	1bd2 <memcmp>
    f5ee:	b160      	cbz	r0, f60a <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    f5f0:	b13c      	cbz	r4, f602 <ll_rl_find+0x4e>
    f5f2:	f818 3006 	ldrb.w	r3, [r8, r6]
    f5f6:	07db      	lsls	r3, r3, #31
    f5f8:	d403      	bmi.n	f602 <ll_rl_find+0x4e>
    f5fa:	7823      	ldrb	r3, [r4, #0]
    f5fc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    f5fe:	bf08      	it	eq
    f600:	7027      	strbeq	r7, [r4, #0]
    f602:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f604:	2d08      	cmp	r5, #8
    f606:	d1e1      	bne.n	f5cc <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
    f608:	27ff      	movs	r7, #255	; 0xff
}
    f60a:	4638      	mov	r0, r7
    f60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    f610:	2c00      	cmp	r4, #0
    f612:	d1f2      	bne.n	f5fa <ll_rl_find+0x46>
    f614:	e7f5      	b.n	f602 <ll_rl_find+0x4e>
    f616:	bf00      	nop
    f618:	2000105c 	.word	0x2000105c

0000f61c <ll_wl_add>:
{
    f61c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f620:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f622:	f7fe fdf9 	bl	e218 <radio_adv_filter_pol_get>
    f626:	4605      	mov	r5, r0
    f628:	b120      	cbz	r0, f634 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f62a:	250c      	movs	r5, #12
}
    f62c:	4628      	mov	r0, r5
    f62e:	b002      	add	sp, #8
    f630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f634:	f7fe fe12 	bl	e25c <radio_scan_filter_pol_get>
    f638:	07c3      	lsls	r3, r0, #31
    f63a:	d4f6      	bmi.n	f62a <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    f63c:	7838      	ldrb	r0, [r7, #0]
    f63e:	28ff      	cmp	r0, #255	; 0xff
    f640:	d103      	bne.n	f64a <ll_wl_add+0x2e>
		wl_anon = 1;
    f642:	4b1f      	ldr	r3, [pc, #124]	; (f6c0 <ll_wl_add+0xa4>)
    f644:	2201      	movs	r2, #1
    f646:	701a      	strb	r2, [r3, #0]
		return 0;
    f648:	e7f0      	b.n	f62c <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
    f64a:	f107 0801 	add.w	r8, r7, #1
    f64e:	f10d 0207 	add.w	r2, sp, #7
    f652:	4641      	mov	r1, r8
    f654:	f7ff fe14 	bl	f280 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    f658:	2807      	cmp	r0, #7
    f65a:	d92d      	bls.n	f6b8 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
    f65c:	f89d 6007 	ldrb.w	r6, [sp, #7]
    f660:	2e07      	cmp	r6, #7
    f662:	d82b      	bhi.n	f6bc <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
    f664:	4c17      	ldr	r4, [pc, #92]	; (f6c4 <ll_wl_add+0xa8>)
    f666:	783a      	ldrb	r2, [r7, #0]
    f668:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
    f66c:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
    f670:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
    f674:	4641      	mov	r1, r8
    f676:	2206      	movs	r2, #6
    f678:	3002      	adds	r0, #2
    f67a:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    f67e:	f7f2 fabd 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f682:	462a      	mov	r2, r5
    f684:	4641      	mov	r1, r8
    f686:	7838      	ldrb	r0, [r7, #0]
    f688:	f7ff ff94 	bl	f5b4 <ll_rl_find>
    f68c:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
    f68e:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
    f690:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
    f692:	d80e      	bhi.n	f6b2 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
    f694:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
    f696:	2328      	movs	r3, #40	; 0x28
    f698:	4a0b      	ldr	r2, [pc, #44]	; (f6c8 <ll_wl_add+0xac>)
    f69a:	4358      	muls	r0, r3
    f69c:	5c13      	ldrb	r3, [r2, r0]
    f69e:	f043 0320 	orr.w	r3, r3, #32
    f6a2:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
    f6a4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
    f6a8:	f043 0301 	orr.w	r3, r3, #1
    f6ac:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    f6b0:	e7bc      	b.n	f62c <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
    f6b2:	22ff      	movs	r2, #255	; 0xff
    f6b4:	705a      	strb	r2, [r3, #1]
    f6b6:	e7f5      	b.n	f6a4 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
    f6b8:	2512      	movs	r5, #18
    f6ba:	e7b7      	b.n	f62c <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    f6bc:	2507      	movs	r5, #7
	return wl_add(addr);
    f6be:	e7b5      	b.n	f62c <ll_wl_add+0x10>
    f6c0:	200016c0 	.word	0x200016c0
    f6c4:	200011cf 	.word	0x200011cf
    f6c8:	2000105c 	.word	0x2000105c

0000f6cc <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    f6cc:	4b0c      	ldr	r3, [pc, #48]	; (f700 <ctrl_rl_idx_allowed+0x34>)
    f6ce:	781b      	ldrb	r3, [r3, #0]
    f6d0:	b19b      	cbz	r3, f6fa <ctrl_rl_idx_allowed+0x2e>
    f6d2:	2907      	cmp	r1, #7
    f6d4:	d811      	bhi.n	f6fa <ctrl_rl_idx_allowed+0x2e>
    f6d6:	b980      	cbnz	r0, f6fa <ctrl_rl_idx_allowed+0x2e>
	LL_ASSERT(rl[rl_idx].taken);
    f6d8:	2328      	movs	r3, #40	; 0x28
    f6da:	4359      	muls	r1, r3
    f6dc:	4b09      	ldr	r3, [pc, #36]	; (f704 <ctrl_rl_idx_allowed+0x38>)
    f6de:	5c58      	ldrb	r0, [r3, r1]
    f6e0:	07c2      	lsls	r2, r0, #31
    f6e2:	d405      	bmi.n	f6f0 <ctrl_rl_idx_allowed+0x24>
    f6e4:	4040      	eors	r0, r0
    f6e6:	f380 8811 	msr	BASEPRI, r0
    f6ea:	f04f 0004 	mov.w	r0, #4
    f6ee:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    f6f0:	0743      	lsls	r3, r0, #29
    f6f2:	d502      	bpl.n	f6fa <ctrl_rl_idx_allowed+0x2e>
    f6f4:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f6f8:	4770      	bx	lr
		return true;
    f6fa:	2001      	movs	r0, #1
}
    f6fc:	4770      	bx	lr
    f6fe:	bf00      	nop
    f700:	2000119c 	.word	0x2000119c
    f704:	2000105c 	.word	0x2000105c

0000f708 <ll_rl_id_addr_get>:
{
    f708:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f70a:	2b07      	cmp	r3, #7
{
    f70c:	b430      	push	{r4, r5}
    f70e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f710:	d905      	bls.n	f71e <ll_rl_id_addr_get+0x16>
	LL_ASSERT(rl[rl_idx].taken);
    f712:	4040      	eors	r0, r0
    f714:	f380 8811 	msr	BASEPRI, r0
    f718:	f04f 0004 	mov.w	r0, #4
    f71c:	df02      	svc	2
    f71e:	2528      	movs	r5, #40	; 0x28
    f720:	4c08      	ldr	r4, [pc, #32]	; (f744 <ll_rl_id_addr_get+0x3c>)
    f722:	fb05 f203 	mul.w	r2, r5, r3
    f726:	5ca2      	ldrb	r2, [r4, r2]
    f728:	f012 0f01 	tst.w	r2, #1
    f72c:	d0f1      	beq.n	f712 <ll_rl_id_addr_get+0xa>
	*id_addr_type = rl[rl_idx].id_addr_type;
    f72e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    f732:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f734:	fb05 4103 	mla	r1, r5, r3, r4
    f738:	2206      	movs	r2, #6
    f73a:	3101      	adds	r1, #1
}
    f73c:	bc30      	pop	{r4, r5}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f73e:	f7f2 ba5d 	b.w	1bfc <memcpy>
    f742:	bf00      	nop
    f744:	2000105c 	.word	0x2000105c

0000f748 <ctrl_rl_addr_allowed>:
{
    f748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
    f74c:	4b1a      	ldr	r3, [pc, #104]	; (f7b8 <ctrl_rl_addr_allowed+0x70>)
    f74e:	781b      	ldrb	r3, [r3, #0]
    f750:	b37b      	cbz	r3, f7b2 <ctrl_rl_addr_allowed+0x6a>
    f752:	7813      	ldrb	r3, [r2, #0]
    f754:	2bff      	cmp	r3, #255	; 0xff
    f756:	d12c      	bne.n	f7b2 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    f758:	4e18      	ldr	r6, [pc, #96]	; (f7bc <ctrl_rl_addr_allowed+0x74>)
    f75a:	2400      	movs	r4, #0
    f75c:	f04f 0828 	mov.w	r8, #40	; 0x28
    f760:	46b6      	mov	lr, r6
    f762:	fb08 f304 	mul.w	r3, r8, r4
    f766:	fa5f fc84 	uxtb.w	ip, r4
    f76a:	5cf7      	ldrb	r7, [r6, r3]
    f76c:	f017 0f01 	tst.w	r7, #1
    f770:	eb06 0503 	add.w	r5, r6, r3
    f774:	d01a      	beq.n	f7ac <ctrl_rl_addr_allowed+0x64>
    f776:	f3c7 1780 	ubfx	r7, r7, #6, #1
    f77a:	4287      	cmp	r7, r0
    f77c:	d116      	bne.n	f7ac <ctrl_rl_addr_allowed+0x64>
    f77e:	3306      	adds	r3, #6
    f780:	1e4f      	subs	r7, r1, #1
    f782:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
    f784:	f815 af01 	ldrb.w	sl, [r5, #1]!
    f788:	f817 9f01 	ldrb.w	r9, [r7, #1]!
    f78c:	45ca      	cmp	sl, r9
    f78e:	d10d      	bne.n	f7ac <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
    f790:	429d      	cmp	r5, r3
    f792:	d1f7      	bne.n	f784 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
    f794:	2328      	movs	r3, #40	; 0x28
    f796:	435c      	muls	r4, r3
				*rl_idx = i;
    f798:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
    f79c:	f81e 0004 	ldrb.w	r0, [lr, r4]
    f7a0:	0743      	lsls	r3, r0, #29
    f7a2:	d506      	bpl.n	f7b2 <ctrl_rl_addr_allowed+0x6a>
    f7a4:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7ac:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f7ae:	2c08      	cmp	r4, #8
    f7b0:	d1d7      	bne.n	f762 <ctrl_rl_addr_allowed+0x1a>
    f7b2:	2001      	movs	r0, #1
}
    f7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7b8:	2000119c 	.word	0x2000119c
    f7bc:	2000105c 	.word	0x2000105c

0000f7c0 <ctrl_rl_addr_resolve>:
{
    f7c0:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
    f7c2:	4c0d      	ldr	r4, [pc, #52]	; (f7f8 <ctrl_rl_addr_resolve+0x38>)
    f7c4:	7824      	ldrb	r4, [r4, #0]
    f7c6:	b1a4      	cbz	r4, f7f2 <ctrl_rl_addr_resolve+0x32>
    f7c8:	2a07      	cmp	r2, #7
    f7ca:	d812      	bhi.n	f7f2 <ctrl_rl_addr_resolve+0x32>
    f7cc:	2528      	movs	r5, #40	; 0x28
    f7ce:	4c0b      	ldr	r4, [pc, #44]	; (f7fc <ctrl_rl_addr_resolve+0x3c>)
    f7d0:	fb05 f602 	mul.w	r6, r5, r2
    f7d4:	5da6      	ldrb	r6, [r4, r6]
    f7d6:	0736      	lsls	r6, r6, #28
    f7d8:	d50b      	bpl.n	f7f2 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
    f7da:	b150      	cbz	r0, f7f2 <ctrl_rl_addr_resolve+0x32>
    f7dc:	794b      	ldrb	r3, [r1, #5]
    f7de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f7e2:	2b40      	cmp	r3, #64	; 0x40
    f7e4:	d105      	bne.n	f7f2 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    f7e6:	fb05 4202 	mla	r2, r5, r2, r4
    f7ea:	1dd0      	adds	r0, r2, #7
}
    f7ec:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    f7ee:	f7f2 ba71 	b.w	1cd4 <bt_rpa_irk_matches>
}
    f7f2:	2000      	movs	r0, #0
    f7f4:	bc70      	pop	{r4, r5, r6}
    f7f6:	4770      	bx	lr
    f7f8:	2000119c 	.word	0x2000119c
    f7fc:	2000105c 	.word	0x2000105c

0000f800 <ctrl_rl_enabled>:
	return rl_enable;
    f800:	4b02      	ldr	r3, [pc, #8]	; (f80c <ctrl_rl_enabled+0xc>)
    f802:	7818      	ldrb	r0, [r3, #0]
}
    f804:	3000      	adds	r0, #0
    f806:	bf18      	it	ne
    f808:	2001      	movne	r0, #1
    f80a:	4770      	bx	lr
    f80c:	2000119c 	.word	0x2000119c

0000f810 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
    f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f814:	b087      	sub	sp, #28
    f816:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    f818:	f002 f9cc 	bl	11bb4 <_impl_k_uptime_get>
    f81c:	4680      	mov	r8, r0
    f81e:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
    f820:	2c00      	cmp	r4, #0
    f822:	d141      	bne.n	f8a8 <ll_rl_rpa_update+0x98>
    f824:	4b37      	ldr	r3, [pc, #220]	; (f904 <ll_rl_rpa_update+0xf4>)
    f826:	e9d3 2300 	ldrd	r2, r3, [r3]
    f82a:	1c5c      	adds	r4, r3, #1
    f82c:	bf08      	it	eq
    f82e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    f832:	d039      	beq.n	f8a8 <ll_rl_rpa_update+0x98>
		   (now - rpa_last_ms >= rpa_timeout_ms);
    f834:	1a82      	subs	r2, r0, r2
    f836:	eb61 0303 	sbc.w	r3, r1, r3
    f83a:	4933      	ldr	r1, [pc, #204]	; (f908 <ll_rl_rpa_update+0xf8>)
    f83c:	6808      	ldr	r0, [r1, #0]
    f83e:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
    f840:	4282      	cmp	r2, r0
    f842:	418b      	sbcs	r3, r1
    f844:	bfac      	ite	ge
    f846:	2601      	movge	r6, #1
    f848:	2600      	movlt	r6, #0
    f84a:	4d30      	ldr	r5, [pc, #192]	; (f90c <ll_rl_rpa_update+0xfc>)
    f84c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; f914 <ll_rl_rpa_update+0x104>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    f850:	f1a5 0a07 	sub.w	sl, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
    f854:	2400      	movs	r4, #0
    f856:	4657      	mov	r7, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    f858:	2328      	movs	r3, #40	; 0x28
    f85a:	4363      	muls	r3, r4
    f85c:	f81a 3003 	ldrb.w	r3, [sl, r3]
    f860:	07d8      	lsls	r0, r3, #31
    f862:	d542      	bpl.n	f8ea <ll_rl_rpa_update+0xda>
    f864:	b90e      	cbnz	r6, f86a <ll_rl_rpa_update+0x5a>
    f866:	0799      	lsls	r1, r3, #30
    f868:	d43f      	bmi.n	f8ea <ll_rl_rpa_update+0xda>

			if (rl[i].pirk) {
    f86a:	2328      	movs	r3, #40	; 0x28
    f86c:	4363      	muls	r3, r4
    f86e:	5cfb      	ldrb	r3, [r7, r3]
    f870:	075a      	lsls	r2, r3, #29
    f872:	d51b      	bpl.n	f8ac <ll_rl_rpa_update+0x9c>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
    f874:	7c2a      	ldrb	r2, [r5, #16]
    f876:	4b26      	ldr	r3, [pc, #152]	; (f910 <ll_rl_rpa_update+0x100>)
    f878:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    f87c:	f103 0210 	add.w	r2, r3, #16
    f880:	f10d 0107 	add.w	r1, sp, #7
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
    f884:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    f888:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
    f88c:	429a      	cmp	r2, r3
    f88e:	d1f9      	bne.n	f884 <ll_rl_rpa_update+0x74>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
    f890:	f105 0117 	add.w	r1, r5, #23
    f894:	a802      	add	r0, sp, #8
    f896:	f7f2 fa30 	bl	1cfa <bt_rpa_create>
				LL_ASSERT(!err);
    f89a:	b138      	cbz	r0, f8ac <ll_rl_rpa_update+0x9c>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
    f89c:	4040      	eors	r0, r0
    f89e:	f380 8811 	msr	BASEPRI, r0
    f8a2:	f04f 0004 	mov.w	r0, #4
    f8a6:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
    f8a8:	2601      	movs	r6, #1
    f8aa:	e7ce      	b.n	f84a <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
    f8ac:	2328      	movs	r3, #40	; 0x28
    f8ae:	4363      	muls	r3, r4
    f8b0:	5cfb      	ldrb	r3, [r7, r3]
    f8b2:	071b      	lsls	r3, r3, #28
    f8b4:	d513      	bpl.n	f8de <ll_rl_rpa_update+0xce>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
    f8b6:	a902      	add	r1, sp, #8
    f8b8:	4628      	mov	r0, r5
    f8ba:	f7f2 fa1e 	bl	1cfa <bt_rpa_create>
				LL_ASSERT(!err);
    f8be:	2800      	cmp	r0, #0
    f8c0:	d1ec      	bne.n	f89c <ll_rl_rpa_update+0x8c>
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
    f8c2:	ab02      	add	r3, sp, #8
    f8c4:	2206      	movs	r2, #6
    f8c6:	f8c5 301d 	str.w	r3, [r5, #29]
    f8ca:	fb02 b304 	mla	r3, r2, r4, fp
    f8ce:	4618      	mov	r0, r3
    f8d0:	a902      	add	r1, sp, #8
    f8d2:	9301      	str	r3, [sp, #4]
    f8d4:	f7f2 f992 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
    f8d8:	9b01      	ldr	r3, [sp, #4]
    f8da:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
    f8de:	2328      	movs	r3, #40	; 0x28
    f8e0:	4363      	muls	r3, r4
    f8e2:	5cfa      	ldrb	r2, [r7, r3]
    f8e4:	f042 0202 	orr.w	r2, r2, #2
    f8e8:	54fa      	strb	r2, [r7, r3]
    f8ea:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f8ec:	2c08      	cmp	r4, #8
    f8ee:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f8f2:	d1b1      	bne.n	f858 <ll_rl_rpa_update+0x48>
		}
	}

	if (all) {
    f8f4:	b116      	cbz	r6, f8fc <ll_rl_rpa_update+0xec>
		rpa_last_ms = now;
    f8f6:	4b03      	ldr	r3, [pc, #12]	; (f904 <ll_rl_rpa_update+0xf4>)
    f8f8:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
    f8fc:	b007      	add	sp, #28
    f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f902:	bf00      	nop
    f904:	200016b8 	.word	0x200016b8
    f908:	200016ec 	.word	0x200016ec
    f90c:	20001063 	.word	0x20001063
    f910:	20000fdb 	.word	0x20000fdb
    f914:	20000fa2 	.word	0x20000fa2

0000f918 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
    f918:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
    f91a:	2001      	movs	r0, #1
    f91c:	f7ff ff78 	bl	f810 <ll_rl_rpa_update>
    f920:	4b03      	ldr	r3, [pc, #12]	; (f930 <rpa_timeout+0x18>)
    f922:	4904      	ldr	r1, [pc, #16]	; (f934 <rpa_timeout+0x1c>)
    f924:	681a      	ldr	r2, [r3, #0]
    f926:	4804      	ldr	r0, [pc, #16]	; (f938 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
    f928:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f92c:	f002 bc40 	b.w	121b0 <k_delayed_work_submit_to_queue>
    f930:	200016ec 	.word	0x200016ec
    f934:	200016c4 	.word	0x200016c4
    f938:	20001730 	.word	0x20001730

0000f93c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
    f93c:	4b07      	ldr	r3, [pc, #28]	; (f95c <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
    f93e:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
    f940:	b130      	cbz	r0, f950 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
    f942:	b14b      	cbz	r3, f958 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    f944:	4b06      	ldr	r3, [pc, #24]	; (f960 <ll_adv_scan_state_cb+0x24>)
    f946:	4907      	ldr	r1, [pc, #28]	; (f964 <ll_adv_scan_state_cb+0x28>)
    f948:	681a      	ldr	r2, [r3, #0]
    f94a:	4807      	ldr	r0, [pc, #28]	; (f968 <ll_adv_scan_state_cb+0x2c>)
    f94c:	f002 bc30 	b.w	121b0 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
    f950:	b113      	cbz	r3, f958 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
    f952:	4804      	ldr	r0, [pc, #16]	; (f964 <ll_adv_scan_state_cb+0x28>)
    f954:	f002 bbc8 	b.w	120e8 <k_delayed_work_cancel>
    f958:	4770      	bx	lr
    f95a:	bf00      	nop
    f95c:	2000119c 	.word	0x2000119c
    f960:	200016ec 	.word	0x200016ec
    f964:	200016c4 	.word	0x200016c4
    f968:	20001730 	.word	0x20001730

0000f96c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
    f96c:	2008      	movs	r0, #8
    f96e:	4770      	bx	lr

0000f970 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
    f970:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
    f972:	f7ff fcf7 	bl	f364 <rl_access_check.constprop.1>
    f976:	b178      	cbz	r0, f998 <ll_rl_clear+0x28>
		rl[i].taken = 0;
    f978:	4908      	ldr	r1, [pc, #32]	; (f99c <ll_rl_clear+0x2c>)
    f97a:	2300      	movs	r3, #0
    f97c:	2428      	movs	r4, #40	; 0x28
    f97e:	fb04 f203 	mul.w	r2, r4, r3
    f982:	3301      	adds	r3, #1
    f984:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f986:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
    f988:	f36f 0000 	bfc	r0, #0, #1
    f98c:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f98e:	d1f6      	bne.n	f97e <ll_rl_clear+0xe>
	peer_irk_count = 0;
    f990:	4b03      	ldr	r3, [pc, #12]	; (f9a0 <ll_rl_clear+0x30>)
    f992:	2000      	movs	r0, #0
    f994:	7018      	strb	r0, [r3, #0]
    f996:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f998:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
    f99a:	bd10      	pop	{r4, pc}
    f99c:	2000105c 	.word	0x2000105c
    f9a0:	20000fd2 	.word	0x20000fd2

0000f9a4 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
    f9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9a8:	b085      	sub	sp, #20
    f9aa:	4607      	mov	r7, r0
    f9ac:	4689      	mov	r9, r1
    f9ae:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
    f9b0:	f7ff fcd8 	bl	f364 <rl_access_check.constprop.1>
    f9b4:	2800      	cmp	r0, #0
    f9b6:	f000 8086 	beq.w	fac6 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
    f9ba:	f107 0801 	add.w	r8, r7, #1
    f9be:	f10d 020f 	add.w	r2, sp, #15
    f9c2:	4641      	mov	r1, r8
    f9c4:	7838      	ldrb	r0, [r7, #0]
    f9c6:	f7ff fdf5 	bl	f5b4 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
    f9ca:	2807      	cmp	r0, #7
    f9cc:	d97d      	bls.n	faca <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
    f9ce:	f89d 500f 	ldrb.w	r5, [sp, #15]
    f9d2:	2d07      	cmp	r5, #7
    f9d4:	d87b      	bhi.n	face <ll_rl_add+0x12a>
    f9d6:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    f9da:	4c3e      	ldr	r4, [pc, #248]	; (fad4 <ll_rl_add+0x130>)
    f9dc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
    f9e0:	2628      	movs	r6, #40	; 0x28
    f9e2:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    f9e4:	f10b 0001 	add.w	r0, fp, #1
    f9e8:	2206      	movs	r2, #6
    f9ea:	4641      	mov	r1, r8
    f9ec:	4420      	add	r0, r4
    f9ee:	f7f2 f905 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
    f9f2:	7839      	ldrb	r1, [r7, #0]
    f9f4:	5da3      	ldrb	r3, [r4, r6]
    f9f6:	19a2      	adds	r2, r4, r6
    f9f8:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f9fc:	4648      	mov	r0, r9
    f9fe:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
    fa00:	9201      	str	r2, [sp, #4]
    fa02:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    fa04:	f7f6 fa81 	bl	5f0a <mem_nz>
    fa08:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    fa0a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    fa0c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    fa10:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    fa12:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    fa14:	f7f6 fa79 	bl	5f0a <mem_nz>
    fa18:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
    fa1a:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    fa1c:	f000 0001 	and.w	r0, r0, #1
    fa20:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
    fa24:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    fa28:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
    fa2a:	d138      	bne.n	fa9e <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
    fa2c:	b158      	cbz	r0, fa46 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
    fa2e:	f10b 0007 	add.w	r0, fp, #7
    fa32:	2210      	movs	r2, #16
    fa34:	4651      	mov	r1, sl
    fa36:	4420      	add	r0, r4
    fa38:	f7f2 f8e0 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
    fa3c:	2328      	movs	r3, #40	; 0x28
    fa3e:	fb03 4305 	mla	r3, r3, r5, r4
    fa42:	2200      	movs	r2, #0
    fa44:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
    fa46:	2628      	movs	r6, #40	; 0x28
    fa48:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
    fa4a:	f10b 0018 	add.w	r0, fp, #24
    fa4e:	2206      	movs	r2, #6
    fa50:	2100      	movs	r1, #0
    fa52:	4420      	add	r0, r4
    fa54:	f7f2 f8fe 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
    fa58:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
    fa5a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    fa5e:	f36f 1304 	bfc	r3, #4, #1
    fa62:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
    fa64:	2200      	movs	r2, #0
    fa66:	4641      	mov	r1, r8
    fa68:	7838      	ldrb	r0, [r7, #0]
    fa6a:	f7ff fc09 	bl	f280 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
    fa6e:	2807      	cmp	r0, #7
    fa70:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
    fa72:	bf9d      	ittte	ls
    fa74:	4a18      	ldrls	r2, [pc, #96]	; (fad8 <ll_rl_add+0x134>)
		rl[i].wl = 1;
    fa76:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
    fa7a:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
    fa7e:	f36f 1345 	bfchi	r3, #5, #1
    fa82:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
    fa84:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
    fa88:	bf98      	it	ls
    fa8a:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
    fa8c:	435d      	muls	r5, r3

	return 0;
    fa8e:	2000      	movs	r0, #0
	rl[i].taken = 1;
    fa90:	5d63      	ldrb	r3, [r4, r5]
    fa92:	f043 0301 	orr.w	r3, r3, #1
    fa96:	5563      	strb	r3, [r4, r5]
}
    fa98:	b005      	add	sp, #20
    fa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
    fa9e:	4b0f      	ldr	r3, [pc, #60]	; (fadc <ll_rl_add+0x138>)
    faa0:	7819      	ldrb	r1, [r3, #0]
    faa2:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
    faa4:	4a0e      	ldr	r2, [pc, #56]	; (fae0 <ll_rl_add+0x13c>)
    faa6:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
    faa8:	1c4a      	adds	r2, r1, #1
    faaa:	701a      	strb	r2, [r3, #0]
    faac:	4b0d      	ldr	r3, [pc, #52]	; (fae4 <ll_rl_add+0x140>)
    faae:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    fab2:	f109 0210 	add.w	r2, r9, #16
    fab6:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
    fab8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    fabc:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
    fac0:	454a      	cmp	r2, r9
    fac2:	d1f9      	bne.n	fab8 <ll_rl_add+0x114>
    fac4:	e7b2      	b.n	fa2c <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fac6:	200c      	movs	r0, #12
    fac8:	e7e6      	b.n	fa98 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
    faca:	2012      	movs	r0, #18
    facc:	e7e4      	b.n	fa98 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    face:	2007      	movs	r0, #7
    fad0:	e7e2      	b.n	fa98 <ll_rl_add+0xf4>
    fad2:	bf00      	nop
    fad4:	2000105c 	.word	0x2000105c
    fad8:	200011cf 	.word	0x200011cf
    fadc:	20000fd2 	.word	0x20000fd2
    fae0:	20000fd3 	.word	0x20000fd3
    fae4:	20000fdb 	.word	0x20000fdb

0000fae8 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
    fae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    faec:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
    faee:	f7ff fc39 	bl	f364 <rl_access_check.constprop.1>
    faf2:	2800      	cmp	r0, #0
    faf4:	d053      	beq.n	fb9e <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    faf6:	f109 0a01 	add.w	sl, r9, #1
    fafa:	2200      	movs	r2, #0
    fafc:	4651      	mov	r1, sl
    fafe:	f899 0000 	ldrb.w	r0, [r9]
    fb02:	f7ff fd57 	bl	f5b4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    fb06:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    fb08:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
    fb0a:	d84b      	bhi.n	fba4 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
    fb0c:	f04f 0b28 	mov.w	fp, #40	; 0x28
    fb10:	4c26      	ldr	r4, [pc, #152]	; (fbac <ll_rl_remove+0xc4>)
    fb12:	fb0b f300 	mul.w	r3, fp, r0
    fb16:	18e2      	adds	r2, r4, r3
    fb18:	5ce3      	ldrb	r3, [r4, r3]
    fb1a:	075b      	lsls	r3, r3, #29
    fb1c:	d524      	bpl.n	fb68 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    fb1e:	4e24      	ldr	r6, [pc, #144]	; (fbb0 <ll_rl_remove+0xc8>)
    fb20:	7835      	ldrb	r5, [r6, #0]
    fb22:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
    fb24:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    fb28:	d01b      	beq.n	fb62 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    fb2a:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
    fb2c:	42af      	cmp	r7, r5
    fb2e:	d018      	beq.n	fb62 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
    fb30:	4820      	ldr	r0, [pc, #128]	; (fbb4 <ll_rl_remove+0xcc>)
    fb32:	2210      	movs	r2, #16
    fb34:	eb00 1105 	add.w	r1, r0, r5, lsl #4
    fb38:	eb00 1007 	add.w	r0, r0, r7, lsl #4
    fb3c:	f7f2 f85e 	bl	1bfc <memcpy>
    fb40:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    fb42:	fb0b f103 	mul.w	r1, fp, r3
    fb46:	1862      	adds	r2, r4, r1
    fb48:	5c61      	ldrb	r1, [r4, r1]
    fb4a:	f011 0f01 	tst.w	r1, #1
    fb4e:	b2d8      	uxtb	r0, r3
    fb50:	d021      	beq.n	fb96 <ll_rl_remove+0xae>
    fb52:	0749      	lsls	r1, r1, #29
    fb54:	d51f      	bpl.n	fb96 <ll_rl_remove+0xae>
    fb56:	7dd1      	ldrb	r1, [r2, #23]
    fb58:	42a9      	cmp	r1, r5
    fb5a:	d11c      	bne.n	fb96 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
    fb5c:	4b16      	ldr	r3, [pc, #88]	; (fbb8 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
    fb5e:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
    fb60:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
    fb62:	7833      	ldrb	r3, [r6, #0]
    fb64:	3b01      	subs	r3, #1
    fb66:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
    fb68:	2200      	movs	r2, #0
    fb6a:	4651      	mov	r1, sl
    fb6c:	f899 0000 	ldrb.w	r0, [r9]
    fb70:	f7ff fb86 	bl	f280 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
    fb74:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
    fb76:	bf9f      	itttt	ls
    fb78:	4b10      	ldrls	r3, [pc, #64]	; (fbbc <ll_rl_remove+0xd4>)
    fb7a:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
    fb7e:	23ff      	movls	r3, #255	; 0xff
    fb80:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
    fb82:	2028      	movs	r0, #40	; 0x28
    fb84:	fb00 f008 	mul.w	r0, r0, r8
    fb88:	5c23      	ldrb	r3, [r4, r0]
    fb8a:	f36f 0300 	bfc	r3, #0, #1
    fb8e:	5423      	strb	r3, [r4, r0]
		return 0;
    fb90:	2000      	movs	r0, #0
    fb92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb96:	3301      	adds	r3, #1
				for (k = 0;
    fb98:	2b08      	cmp	r3, #8
    fb9a:	d1d2      	bne.n	fb42 <ll_rl_remove+0x5a>
    fb9c:	e7e1      	b.n	fb62 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fb9e:	200c      	movs	r0, #12
    fba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fba4:	2002      	movs	r0, #2
}
    fba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbaa:	bf00      	nop
    fbac:	2000105c 	.word	0x2000105c
    fbb0:	20000fd2 	.word	0x20000fd2
    fbb4:	20000fdb 	.word	0x20000fdb
    fbb8:	20000fd3 	.word	0x20000fd3
    fbbc:	200011cf 	.word	0x200011cf

0000fbc0 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
    fbc0:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
    fbc2:	795c      	ldrb	r4, [r3, #5]
    fbc4:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    fbc8:	2c40      	cmp	r4, #64	; 0x40
{
    fbca:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
    fbcc:	d117      	bne.n	fbfe <ll_rl_crpa_set+0x3e>

		if (id_addr) {
    fbce:	b119      	cbz	r1, fbd8 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
    fbd0:	2200      	movs	r2, #0
    fbd2:	f7ff fcef 	bl	f5b4 <ll_rl_find>
    fbd6:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
    fbd8:	2a07      	cmp	r2, #7
    fbda:	d810      	bhi.n	fbfe <ll_rl_crpa_set+0x3e>
    fbdc:	2128      	movs	r1, #40	; 0x28
    fbde:	4c08      	ldr	r4, [pc, #32]	; (fc00 <ll_rl_crpa_set+0x40>)
    fbe0:	fb01 f302 	mul.w	r3, r1, r2
    fbe4:	5ce3      	ldrb	r3, [r4, r3]
    fbe6:	07db      	lsls	r3, r3, #31
    fbe8:	d509      	bpl.n	fbfe <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    fbea:	2018      	movs	r0, #24
    fbec:	fb11 0002 	smlabb	r0, r1, r2, r0
    fbf0:	4420      	add	r0, r4
    fbf2:	4629      	mov	r1, r5
    fbf4:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
    fbf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    fbfa:	f7f1 bfff 	b.w	1bfc <memcpy>
    fbfe:	bd70      	pop	{r4, r5, r6, pc}
    fc00:	2000105c 	.word	0x2000105c

0000fc04 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
    fc04:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    fc06:	2200      	movs	r2, #0
{
    fc08:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    fc0a:	1c41      	adds	r1, r0, #1
    fc0c:	7800      	ldrb	r0, [r0, #0]
    fc0e:	f7ff fcd1 	bl	f5b4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
    fc12:	2807      	cmp	r0, #7
    fc14:	d901      	bls.n	fc1a <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fc16:	2002      	movs	r0, #2
    fc18:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
    fc1a:	2428      	movs	r4, #40	; 0x28
    fc1c:	2318      	movs	r3, #24
    fc1e:	fb14 3000 	smlabb	r0, r4, r0, r3
    fc22:	4c07      	ldr	r4, [pc, #28]	; (fc40 <ll_rl_crpa_get+0x3c>)
    fc24:	4404      	add	r4, r0
    fc26:	2106      	movs	r1, #6
    fc28:	4620      	mov	r0, r4
    fc2a:	f7f6 f96e 	bl	5f0a <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
    fc2e:	2800      	cmp	r0, #0
    fc30:	d0f1      	beq.n	fc16 <ll_rl_crpa_get+0x12>
    fc32:	2206      	movs	r2, #6
    fc34:	4621      	mov	r1, r4
    fc36:	4628      	mov	r0, r5
    fc38:	f7f1 ffe0 	bl	1bfc <memcpy>
			return 0;
    fc3c:	2000      	movs	r0, #0
}
    fc3e:	bd38      	pop	{r3, r4, r5, pc}
    fc40:	2000105c 	.word	0x2000105c

0000fc44 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
    fc44:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    fc46:	2200      	movs	r2, #0
{
    fc48:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    fc4a:	1c41      	adds	r1, r0, #1
    fc4c:	7800      	ldrb	r0, [r0, #0]
    fc4e:	f7ff fcb1 	bl	f5b4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    fc52:	2807      	cmp	r0, #7
    fc54:	d80a      	bhi.n	fc6c <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
    fc56:	4b06      	ldr	r3, [pc, #24]	; (fc70 <ll_rl_lrpa_get+0x2c>)
    fc58:	2228      	movs	r2, #40	; 0x28
    fc5a:	fb02 3000 	mla	r0, r2, r0, r3
    fc5e:	2206      	movs	r2, #6
    fc60:	6a41      	ldr	r1, [r0, #36]	; 0x24
    fc62:	4620      	mov	r0, r4
    fc64:	f7f1 ffca 	bl	1bfc <memcpy>
		return 0;
    fc68:	2000      	movs	r0, #0
    fc6a:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fc6c:	2002      	movs	r0, #2
}
    fc6e:	bd10      	pop	{r4, pc}
    fc70:	2000105c 	.word	0x2000105c

0000fc74 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
    fc74:	b510      	push	{r4, lr}
    fc76:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
    fc78:	f7ff fb74 	bl	f364 <rl_access_check.constprop.1>
    fc7c:	b140      	cbz	r0, fc90 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
    fc7e:	b11c      	cbz	r4, fc88 <ll_rl_enable+0x14>
    fc80:	2c01      	cmp	r4, #1
    fc82:	d001      	beq.n	fc88 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
    fc84:	2012      	movs	r0, #18
	}

	return 0;
}
    fc86:	bd10      	pop	{r4, pc}
		rl_enable = 1;
    fc88:	4b02      	ldr	r3, [pc, #8]	; (fc94 <ll_rl_enable+0x20>)
    fc8a:	701c      	strb	r4, [r3, #0]
	return 0;
    fc8c:	2000      	movs	r0, #0
		break;
    fc8e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    fc90:	200c      	movs	r0, #12
    fc92:	bd10      	pop	{r4, pc}
    fc94:	2000119c 	.word	0x2000119c

0000fc98 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
    fc98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    fc9c:	4358      	muls	r0, r3
    fc9e:	4b01      	ldr	r3, [pc, #4]	; (fca4 <ll_rl_timeout_set+0xc>)
    fca0:	6018      	str	r0, [r3, #0]
    fca2:	4770      	bx	lr
    fca4:	200016ec 	.word	0x200016ec

0000fca8 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
    fca8:	b538      	push	{r3, r4, r5, lr}
    fcaa:	4605      	mov	r5, r0
    fcac:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
    fcae:	f7ff fb59 	bl	f364 <rl_access_check.constprop.1>
    fcb2:	b1d8      	cbz	r0, fcec <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    fcb4:	2200      	movs	r2, #0
    fcb6:	1c69      	adds	r1, r5, #1
    fcb8:	7828      	ldrb	r0, [r5, #0]
    fcba:	f7ff fc7b 	bl	f5b4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    fcbe:	2807      	cmp	r0, #7
    fcc0:	d816      	bhi.n	fcf0 <ll_priv_mode_set+0x48>
		switch (mode) {
    fcc2:	b11c      	cbz	r4, fccc <ll_priv_mode_set+0x24>
    fcc4:	2c01      	cmp	r4, #1
    fcc6:	d00a      	beq.n	fcde <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
    fcc8:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
    fcca:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
    fccc:	2328      	movs	r3, #40	; 0x28
    fcce:	4a09      	ldr	r2, [pc, #36]	; (fcf4 <ll_priv_mode_set+0x4c>)
    fcd0:	4358      	muls	r0, r3
    fcd2:	5c13      	ldrb	r3, [r2, r0]
    fcd4:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
    fcd8:	5413      	strb	r3, [r2, r0]
	return 0;
    fcda:	2000      	movs	r0, #0
			break;
    fcdc:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
    fcde:	2328      	movs	r3, #40	; 0x28
    fce0:	4a04      	ldr	r2, [pc, #16]	; (fcf4 <ll_priv_mode_set+0x4c>)
    fce2:	4358      	muls	r0, r3
    fce4:	5c13      	ldrb	r3, [r2, r0]
    fce6:	f043 0310 	orr.w	r3, r3, #16
    fcea:	e7f5      	b.n	fcd8 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fcec:	200c      	movs	r0, #12
    fcee:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fcf0:	2002      	movs	r0, #2
    fcf2:	bd38      	pop	{r3, r4, r5, pc}
    fcf4:	2000105c 	.word	0x2000105c

0000fcf8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    fcf8:	4a19      	ldr	r2, [pc, #100]	; (fd60 <ll_filter_reset+0x68>)
    fcfa:	2300      	movs	r3, #0
{
    fcfc:	b430      	push	{r4, r5}
	wl_anon = 0;
    fcfe:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
    fd00:	4a18      	ldr	r2, [pc, #96]	; (fd64 <ll_filter_reset+0x6c>)
    fd02:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    fd06:	f36f 0100 	bfc	r1, #0, #1
    fd0a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    fd0e:	3301      	adds	r3, #1
    fd10:	2b08      	cmp	r3, #8
    fd12:	d1f6      	bne.n	fd02 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
    fd14:	4a14      	ldr	r2, [pc, #80]	; (fd68 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    fd16:	4915      	ldr	r1, [pc, #84]	; (fd6c <ll_filter_reset+0x74>)
	rl_enable = 0;
    fd18:	2300      	movs	r3, #0
    fd1a:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    fd1c:	4a14      	ldr	r2, [pc, #80]	; (fd70 <ll_filter_reset+0x78>)
    fd1e:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
    fd20:	4a14      	ldr	r2, [pc, #80]	; (fd74 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
    fd22:	4915      	ldr	r1, [pc, #84]	; (fd78 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
    fd24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    fd28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    fd2c:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
    fd30:	2528      	movs	r5, #40	; 0x28
    fd32:	fb05 f203 	mul.w	r2, r5, r3
    fd36:	3301      	adds	r3, #1
    fd38:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fd3a:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
    fd3c:	f36f 0400 	bfc	r4, #0, #1
    fd40:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fd42:	d1f6      	bne.n	fd32 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
    fd44:	4b0d      	ldr	r3, [pc, #52]	; (fd7c <ll_filter_reset+0x84>)
    fd46:	2200      	movs	r2, #0
    fd48:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
    fd4a:	b120      	cbz	r0, fd56 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
    fd4c:	490c      	ldr	r1, [pc, #48]	; (fd80 <ll_filter_reset+0x88>)
    fd4e:	480d      	ldr	r0, [pc, #52]	; (fd84 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    fd50:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
    fd52:	f002 b9b9 	b.w	120c8 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
    fd56:	480b      	ldr	r0, [pc, #44]	; (fd84 <ll_filter_reset+0x8c>)
}
    fd58:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
    fd5a:	f002 b9c5 	b.w	120e8 <k_delayed_work_cancel>
    fd5e:	bf00      	nop
    fd60:	200016c0 	.word	0x200016c0
    fd64:	200011cf 	.word	0x200011cf
    fd68:	2000119c 	.word	0x2000119c
    fd6c:	000dbba0 	.word	0x000dbba0
    fd70:	200016ec 	.word	0x200016ec
    fd74:	200016b8 	.word	0x200016b8
    fd78:	2000105c 	.word	0x2000105c
    fd7c:	20000fd2 	.word	0x20000fd2
    fd80:	0000f919 	.word	0x0000f919
    fd84:	200016c4 	.word	0x200016c4

0000fd88 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    fd88:	4b05      	ldr	r3, [pc, #20]	; (fda0 <cntr_init+0x18>)
    fd8a:	2200      	movs	r2, #0
    fd8c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    fd90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    fd94:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    fd98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fd9c:	4770      	bx	lr
    fd9e:	bf00      	nop
    fda0:	4000b000 	.word	0x4000b000

0000fda4 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    fda4:	4a04      	ldr	r2, [pc, #16]	; (fdb8 <cntr_start+0x14>)
    fda6:	7813      	ldrb	r3, [r2, #0]
    fda8:	1c59      	adds	r1, r3, #1
    fdaa:	7011      	strb	r1, [r2, #0]
    fdac:	2001      	movs	r0, #1
    fdae:	b913      	cbnz	r3, fdb6 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    fdb0:	4a02      	ldr	r2, [pc, #8]	; (fdbc <cntr_start+0x18>)
    fdb2:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    fdb4:	4618      	mov	r0, r3
}
    fdb6:	4770      	bx	lr
    fdb8:	20001241 	.word	0x20001241
    fdbc:	4000b000 	.word	0x4000b000

0000fdc0 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    fdc0:	4b09      	ldr	r3, [pc, #36]	; (fde8 <cntr_stop+0x28>)
    fdc2:	7818      	ldrb	r0, [r3, #0]
    fdc4:	b928      	cbnz	r0, fdd2 <cntr_stop+0x12>
    fdc6:	4040      	eors	r0, r0
    fdc8:	f380 8811 	msr	BASEPRI, r0
    fdcc:	f04f 0004 	mov.w	r0, #4
    fdd0:	df02      	svc	2

	if (--_refcount) {
    fdd2:	3801      	subs	r0, #1
    fdd4:	b2c0      	uxtb	r0, r0
    fdd6:	7018      	strb	r0, [r3, #0]
    fdd8:	2301      	movs	r3, #1
    fdda:	b910      	cbnz	r0, fde2 <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    fddc:	4a03      	ldr	r2, [pc, #12]	; (fdec <cntr_stop+0x2c>)
    fdde:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    fde0:	4770      	bx	lr
		return 1;
    fde2:	4618      	mov	r0, r3
}
    fde4:	4770      	bx	lr
    fde6:	bf00      	nop
    fde8:	20001241 	.word	0x20001241
    fdec:	4000b000 	.word	0x4000b000

0000fdf0 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    fdf0:	4b01      	ldr	r3, [pc, #4]	; (fdf8 <cntr_cnt_get+0x8>)
    fdf2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    fdf6:	4770      	bx	lr
    fdf8:	4000b000 	.word	0x4000b000

0000fdfc <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    fdfc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    fe00:	4b01      	ldr	r3, [pc, #4]	; (fe08 <cntr_cmp_set+0xc>)
    fe02:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    fe06:	4770      	bx	lr
    fe08:	4000b000 	.word	0x4000b000

0000fe0c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    fe0c:	4b11      	ldr	r3, [pc, #68]	; (fe54 <do_ecb+0x48>)
{
    fe0e:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    fe10:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    fe12:	2500      	movs	r5, #0
    fe14:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    fe16:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    fe18:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    fe1c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    fe20:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    fe24:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    fe26:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    fe2a:	b934      	cbnz	r4, fe3a <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fe2c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    fe30:	b91c      	cbnz	r4, fe3a <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    fe32:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fe36:	2c00      	cmp	r4, #0
    fe38:	d1f5      	bne.n	fe26 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    fe3a:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    fe3c:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    fe40:	2c00      	cmp	r4, #0
    fe42:	d1e8      	bne.n	fe16 <do_ecb+0xa>
    fe44:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    fe48:	2e00      	cmp	r6, #0
    fe4a:	d0e4      	beq.n	fe16 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    fe4c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    fe50:	bd70      	pop	{r4, r5, r6, pc}
    fe52:	bf00      	nop
    fe54:	4000e000 	.word	0x4000e000

0000fe58 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    fe58:	b570      	push	{r4, r5, r6, lr}
    fe5a:	b08c      	sub	sp, #48	; 0x30
    fe5c:	460e      	mov	r6, r1
    fe5e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    fe60:	4601      	mov	r1, r0
    fe62:	2210      	movs	r2, #16
    fe64:	4668      	mov	r0, sp
{
    fe66:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    fe68:	f7f6 f840 	bl	5eec <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    fe6c:	2210      	movs	r2, #16
    fe6e:	eb0d 0002 	add.w	r0, sp, r2
    fe72:	4631      	mov	r1, r6
    fe74:	f7f6 f83a 	bl	5eec <mem_rcopy>

	do_ecb(&ecb);
    fe78:	4668      	mov	r0, sp
    fe7a:	f7ff ffc7 	bl	fe0c <do_ecb>

	if (cipher_text_le) {
    fe7e:	b125      	cbz	r5, fe8a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    fe80:	2210      	movs	r2, #16
    fe82:	a908      	add	r1, sp, #32
    fe84:	4628      	mov	r0, r5
    fe86:	f7f6 f831 	bl	5eec <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    fe8a:	b124      	cbz	r4, fe96 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    fe8c:	2210      	movs	r2, #16
    fe8e:	a908      	add	r1, sp, #32
    fe90:	4620      	mov	r0, r4
    fe92:	f7f1 feb3 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    fe96:	b00c      	add	sp, #48	; 0x30
    fe98:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fe9c <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    fe9c:	4b07      	ldr	r3, [pc, #28]	; (febc <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    fe9e:	4a08      	ldr	r2, [pc, #32]	; (fec0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    fea0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    fea4:	4907      	ldr	r1, [pc, #28]	; (fec4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    fea6:	4a08      	ldr	r2, [pc, #32]	; (fec8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    fea8:	2800      	cmp	r0, #0
    feaa:	bf14      	ite	ne
    feac:	4610      	movne	r0, r2
    feae:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    feb0:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    feb2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    feb6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    feba:	4770      	bx	lr
    febc:	4001f000 	.word	0x4001f000
    fec0:	40008140 	.word	0x40008140
    fec4:	40001004 	.word	0x40001004
    fec8:	40001000 	.word	0x40001000

0000fecc <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    fecc:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fece:	4e2c      	ldr	r6, [pc, #176]	; (ff80 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    fed0:	4f2c      	ldr	r7, [pc, #176]	; (ff84 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fed2:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    fed4:	4b2c      	ldr	r3, [pc, #176]	; (ff88 <sw_switch.isra.9+0xbc>)
    fed6:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    feda:	b22b      	sxth	r3, r5
    fedc:	00dc      	lsls	r4, r3, #3
    fede:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    fee2:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    fee6:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    feea:	f105 040b 	add.w	r4, r5, #11
    feee:	b2e4      	uxtb	r4, r4
    fef0:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    fef2:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    fef6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    fefa:	3fc0      	subs	r7, #192	; 0xc0
    fefc:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    ff00:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    ff04:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    ff08:	2800      	cmp	r0, #0
    ff0a:	d034      	beq.n	ff76 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
    ff0c:	f24a 075a 	movw	r7, #41050	; 0xa05a
    ff10:	f649 4040 	movw	r0, #40000	; 0x9c40
    ff14:	2a02      	cmp	r2, #2
    ff16:	bf0c      	ite	eq
    ff18:	4602      	moveq	r2, r0
    ff1a:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
    ff1c:	f242 47b8 	movw	r7, #9400	; 0x24b8
    ff20:	f241 504a 	movw	r0, #5450	; 0x154a
    ff24:	2902      	cmp	r1, #2
    ff26:	bf18      	it	ne
    ff28:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    ff2a:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    ff2e:	4401      	add	r1, r0
    ff30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff34:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ff38:	4a14      	ldr	r2, [pc, #80]	; (ff8c <sw_switch.isra.9+0xc0>)
    ff3a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    ff3e:	009b      	lsls	r3, r3, #2
    ff40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ff44:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    ff48:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    ff4c:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ff4e:	bf8b      	itete	hi
    ff50:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    ff54:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ff56:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    ff58:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ff5c:	bf88      	it	hi
    ff5e:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    ff62:	4b08      	ldr	r3, [pc, #32]	; (ff84 <sw_switch.isra.9+0xb8>)
    ff64:	f44f 6290 	mov.w	r2, #1152	; 0x480
    ff68:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    ff6c:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    ff6e:	f003 0301 	and.w	r3, r3, #1
    ff72:	7033      	strb	r3, [r6, #0]
    ff74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ff76:	4a06      	ldr	r2, [pc, #24]	; (ff90 <sw_switch.isra.9+0xc4>)
    ff78:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    ff7c:	212d      	movs	r1, #45	; 0x2d
    ff7e:	e7de      	b.n	ff3e <sw_switch.isra.9+0x72>
    ff80:	20001464 	.word	0x20001464
    ff84:	4001f000 	.word	0x4001f000
    ff88:	4000110c 	.word	0x4000110c
    ff8c:	40001000 	.word	0x40001000
    ff90:	40001004 	.word	0x40001004

0000ff94 <isr_radio>:
	if (sfp_radio_isr) {
    ff94:	4b02      	ldr	r3, [pc, #8]	; (ffa0 <isr_radio+0xc>)
    ff96:	681b      	ldr	r3, [r3, #0]
    ff98:	b103      	cbz	r3, ff9c <isr_radio+0x8>
		sfp_radio_isr();
    ff9a:	4718      	bx	r3
    ff9c:	4770      	bx	lr
    ff9e:	bf00      	nop
    ffa0:	20001460 	.word	0x20001460

0000ffa4 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    ffa4:	4b06      	ldr	r3, [pc, #24]	; (ffc0 <radio_isr_set+0x1c>)
    ffa6:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    ffa8:	4b06      	ldr	r3, [pc, #24]	; (ffc4 <radio_isr_set+0x20>)
    ffaa:	2210      	movs	r2, #16
    ffac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ffb0:	4b05      	ldr	r3, [pc, #20]	; (ffc8 <radio_isr_set+0x24>)
    ffb2:	2202      	movs	r2, #2
    ffb4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    ffb8:	2001      	movs	r0, #1
    ffba:	f7f1 bc4d 	b.w	1858 <_arch_irq_enable>
    ffbe:	bf00      	nop
    ffc0:	20001460 	.word	0x20001460
    ffc4:	40001000 	.word	0x40001000
    ffc8:	e000e100 	.word	0xe000e100

0000ffcc <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    ffcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ffd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    ffd4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    ffd6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    ffda:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    ffde:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    ffe2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    ffe6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    ffea:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    ffee:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    fff2:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    fff6:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    fffa:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    fffe:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   10002:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   10006:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1000a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   1000e:	4770      	bx	lr

00010010 <radio_reset>:
{
   10010:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   10012:	2001      	movs	r0, #1
   10014:	f7f1 fc30 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   10018:	4b08      	ldr	r3, [pc, #32]	; (1003c <radio_reset+0x2c>)
   1001a:	2200      	movs	r2, #0
   1001c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   10020:	2201      	movs	r2, #1
   10022:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   10026:	4a06      	ldr	r2, [pc, #24]	; (10040 <radio_reset+0x30>)
   10028:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1002a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1002e:	f023 0301 	bic.w	r3, r3, #1
   10032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   10036:	6013      	str	r3, [r2, #0]
   10038:	bd08      	pop	{r3, pc}
   1003a:	bf00      	nop
   1003c:	40001000 	.word	0x40001000
   10040:	40001774 	.word	0x40001774

00010044 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   10044:	4b06      	ldr	r3, [pc, #24]	; (10060 <radio_phy_set+0x1c>)
	switch (phy) {
   10046:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   10048:	bf0c      	ite	eq
   1004a:	2204      	moveq	r2, #4
   1004c:	2203      	movne	r2, #3
   1004e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   10052:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   10056:	f042 0201 	orr.w	r2, r2, #1
   1005a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1005e:	4770      	bx	lr
   10060:	40001000 	.word	0x40001000

00010064 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   10064:	4b01      	ldr	r3, [pc, #4]	; (1006c <radio_tx_power_set+0x8>)
   10066:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1006a:	4770      	bx	lr
   1006c:	40001000 	.word	0x40001000

00010070 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   10070:	4b01      	ldr	r3, [pc, #4]	; (10078 <radio_freq_chan_set+0x8>)
   10072:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   10076:	4770      	bx	lr
   10078:	40001000 	.word	0x40001000

0001007c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1007c:	4b07      	ldr	r3, [pc, #28]	; (1009c <radio_whiten_iv_set+0x20>)
   1007e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   10082:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   10086:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1008a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1008e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   10092:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   10096:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   1009a:	4770      	bx	lr
   1009c:	40001000 	.word	0x40001000

000100a0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   100a0:	4a0a      	ldr	r2, [pc, #40]	; (100cc <radio_aa_set+0x2c>)
   100a2:	2300      	movs	r3, #0
   100a4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   100a8:	2301      	movs	r3, #1
   100aa:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   100ae:	78c3      	ldrb	r3, [r0, #3]
   100b0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   100b4:	7843      	ldrb	r3, [r0, #1]
   100b6:	7881      	ldrb	r1, [r0, #2]
   100b8:	041b      	lsls	r3, r3, #16
   100ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   100be:	7801      	ldrb	r1, [r0, #0]
   100c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   100c4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   100c8:	4770      	bx	lr
   100ca:	bf00      	nop
   100cc:	40001000 	.word	0x40001000

000100d0 <radio_pkt_configure>:
	switch (phy) {
   100d0:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   100d4:	2b02      	cmp	r3, #2
{
   100d6:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   100d8:	bf0c      	ite	eq
   100da:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   100de:	2400      	movne	r4, #0
	if (dc) {
   100e0:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   100e2:	f1c0 0308 	rsb	r3, r0, #8
   100e6:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   100ea:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   100ee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   100f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   100f6:	4a0b      	ldr	r2, [pc, #44]	; (10124 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   100f8:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   100fc:	bf48      	it	mi
   100fe:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   10102:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   10104:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   10108:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1010c:	4b06      	ldr	r3, [pc, #24]	; (10128 <radio_pkt_configure+0x58>)
   1010e:	4003      	ands	r3, r0
   10110:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   10114:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   10118:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   1011c:	4319      	orrs	r1, r3
   1011e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   10122:	bd10      	pop	{r4, pc}
   10124:	40001000 	.word	0x40001000
   10128:	fef80000 	.word	0xfef80000

0001012c <radio_pkt_rx_set>:
   1012c:	4b01      	ldr	r3, [pc, #4]	; (10134 <radio_pkt_rx_set+0x8>)
   1012e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   10132:	4770      	bx	lr
   10134:	40001000 	.word	0x40001000

00010138 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   10138:	4b01      	ldr	r3, [pc, #4]	; (10140 <radio_pkt_tx_set+0x8>)
   1013a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1013e:	4770      	bx	lr
   10140:	40001000 	.word	0x40001000

00010144 <radio_tx_ready_delay_get>:
	switch (phy) {
   10144:	2802      	cmp	r0, #2
}
   10146:	bf0c      	ite	eq
   10148:	2028      	moveq	r0, #40	; 0x28
   1014a:	2029      	movne	r0, #41	; 0x29
   1014c:	4770      	bx	lr

0001014e <radio_tx_chain_delay_get>:
}
   1014e:	2001      	movs	r0, #1
   10150:	4770      	bx	lr

00010152 <radio_rx_ready_delay_get>:
}
   10152:	2029      	movs	r0, #41	; 0x29
   10154:	4770      	bx	lr

00010156 <radio_rx_chain_delay_get>:
	switch (phy) {
   10156:	2802      	cmp	r0, #2
}
   10158:	bf0c      	ite	eq
   1015a:	2006      	moveq	r0, #6
   1015c:	200a      	movne	r0, #10
   1015e:	4770      	bx	lr

00010160 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   10160:	4b01      	ldr	r3, [pc, #4]	; (10168 <radio_rx_enable+0x8>)
   10162:	2201      	movs	r2, #1
   10164:	605a      	str	r2, [r3, #4]
   10166:	4770      	bx	lr
   10168:	40001000 	.word	0x40001000

0001016c <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   1016c:	4b01      	ldr	r3, [pc, #4]	; (10174 <radio_tx_enable+0x8>)
   1016e:	2201      	movs	r2, #1
   10170:	601a      	str	r2, [r3, #0]
   10172:	4770      	bx	lr
   10174:	40001000 	.word	0x40001000

00010178 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   10178:	4a07      	ldr	r2, [pc, #28]	; (10198 <radio_disable+0x20>)
   1017a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1017e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   10182:	2301      	movs	r3, #1
   10184:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   10186:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   10188:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1018c:	2100      	movs	r1, #0
   1018e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   10192:	6113      	str	r3, [r2, #16]
   10194:	4770      	bx	lr
   10196:	bf00      	nop
   10198:	4001f000 	.word	0x4001f000

0001019c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1019c:	4b04      	ldr	r3, [pc, #16]	; (101b0 <radio_status_reset+0x14>)
   1019e:	2200      	movs	r2, #0
   101a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   101a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   101a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   101ac:	4770      	bx	lr
   101ae:	bf00      	nop
   101b0:	40001000 	.word	0x40001000

000101b4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   101b4:	4b03      	ldr	r3, [pc, #12]	; (101c4 <radio_is_ready+0x10>)
   101b6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   101ba:	3000      	adds	r0, #0
   101bc:	bf18      	it	ne
   101be:	2001      	movne	r0, #1
   101c0:	4770      	bx	lr
   101c2:	bf00      	nop
   101c4:	40001000 	.word	0x40001000

000101c8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   101c8:	4b03      	ldr	r3, [pc, #12]	; (101d8 <radio_is_done+0x10>)
   101ca:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   101ce:	3000      	adds	r0, #0
   101d0:	bf18      	it	ne
   101d2:	2001      	movne	r0, #1
   101d4:	4770      	bx	lr
   101d6:	bf00      	nop
   101d8:	40001000 	.word	0x40001000

000101dc <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   101dc:	4b03      	ldr	r3, [pc, #12]	; (101ec <radio_is_idle+0x10>)
   101de:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   101e2:	fab0 f080 	clz	r0, r0
   101e6:	0940      	lsrs	r0, r0, #5
   101e8:	4770      	bx	lr
   101ea:	bf00      	nop
   101ec:	40001000 	.word	0x40001000

000101f0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   101f0:	4b04      	ldr	r3, [pc, #16]	; (10204 <radio_crc_configure+0x14>)
   101f2:	f240 1203 	movw	r2, #259	; 0x103
   101f6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   101fa:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   101fe:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   10202:	4770      	bx	lr
   10204:	40001000 	.word	0x40001000

00010208 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   10208:	4b03      	ldr	r3, [pc, #12]	; (10218 <radio_crc_is_valid+0x10>)
   1020a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1020e:	3000      	adds	r0, #0
   10210:	bf18      	it	ne
   10212:	2001      	movne	r0, #1
   10214:	4770      	bx	lr
   10216:	bf00      	nop
   10218:	40001000 	.word	0x40001000

0001021c <radio_pkt_empty_get>:
}
   1021c:	4800      	ldr	r0, [pc, #0]	; (10220 <radio_pkt_empty_get+0x4>)
   1021e:	4770      	bx	lr
   10220:	20001354 	.word	0x20001354

00010224 <radio_pkt_scratch_get>:
}
   10224:	4800      	ldr	r0, [pc, #0]	; (10228 <radio_pkt_scratch_get+0x4>)
   10226:	4770      	bx	lr
   10228:	20001358 	.word	0x20001358

0001022c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1022c:	4b04      	ldr	r3, [pc, #16]	; (10240 <radio_switch_complete_and_rx+0x14>)
   1022e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   10230:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   10232:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   10236:	4602      	mov	r2, r0
   10238:	4608      	mov	r0, r1
   1023a:	f7ff be47 	b.w	fecc <sw_switch.isra.9>
   1023e:	bf00      	nop
   10240:	40001000 	.word	0x40001000

00010244 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   10244:	4b03      	ldr	r3, [pc, #12]	; (10254 <radio_switch_complete_and_tx+0x10>)
   10246:	2103      	movs	r1, #3
   10248:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1024c:	4601      	mov	r1, r0
   1024e:	2001      	movs	r0, #1
   10250:	f7ff be3c 	b.w	fecc <sw_switch.isra.9>
   10254:	40001000 	.word	0x40001000

00010258 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   10258:	4b05      	ldr	r3, [pc, #20]	; (10270 <radio_switch_complete_and_disable+0x18>)
   1025a:	2203      	movs	r2, #3
   1025c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   10260:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   10264:	f44f 6290 	mov.w	r2, #1152	; 0x480
   10268:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1026c:	4770      	bx	lr
   1026e:	bf00      	nop
   10270:	40001000 	.word	0x40001000

00010274 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   10274:	4a03      	ldr	r2, [pc, #12]	; (10284 <radio_rssi_measure+0x10>)
   10276:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1027a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1027e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   10282:	4770      	bx	lr
   10284:	40001000 	.word	0x40001000

00010288 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   10288:	4b01      	ldr	r3, [pc, #4]	; (10290 <radio_rssi_get+0x8>)
   1028a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1028e:	4770      	bx	lr
   10290:	40001000 	.word	0x40001000

00010294 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   10294:	4b02      	ldr	r3, [pc, #8]	; (102a0 <radio_rssi_status_reset+0xc>)
   10296:	2200      	movs	r2, #0
   10298:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1029c:	4770      	bx	lr
   1029e:	bf00      	nop
   102a0:	40001000 	.word	0x40001000

000102a4 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   102a4:	4b03      	ldr	r3, [pc, #12]	; (102b4 <radio_rssi_is_ready+0x10>)
   102a6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   102aa:	3000      	adds	r0, #0
   102ac:	bf18      	it	ne
   102ae:	2001      	movne	r0, #1
   102b0:	4770      	bx	lr
   102b2:	bf00      	nop
   102b4:	40001000 	.word	0x40001000

000102b8 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   102b8:	b530      	push	{r4, r5, lr}
   102ba:	2400      	movs	r4, #0
   102bc:	00a3      	lsls	r3, r4, #2
   102be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   102c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   102c6:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   102c8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   102cc:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   102ce:	8895      	ldrh	r5, [r2, #4]
   102d0:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   102d4:	2c08      	cmp	r4, #8
		bdaddr += 6;
   102d6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   102da:	d1ef      	bne.n	102bc <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   102dc:	4b02      	ldr	r3, [pc, #8]	; (102e8 <radio_filter_configure+0x30>)
   102de:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   102e2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   102e6:	bd30      	pop	{r4, r5, pc}
   102e8:	40001000 	.word	0x40001000

000102ec <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   102ec:	4a03      	ldr	r2, [pc, #12]	; (102fc <radio_filter_disable+0x10>)
   102ee:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   102f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   102f6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   102fa:	4770      	bx	lr
   102fc:	40001000 	.word	0x40001000

00010300 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   10300:	4b02      	ldr	r3, [pc, #8]	; (1030c <radio_filter_status_reset+0xc>)
   10302:	2200      	movs	r2, #0
   10304:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   10308:	4770      	bx	lr
   1030a:	bf00      	nop
   1030c:	40001000 	.word	0x40001000

00010310 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   10310:	4b03      	ldr	r3, [pc, #12]	; (10320 <radio_filter_has_match+0x10>)
   10312:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   10316:	3000      	adds	r0, #0
   10318:	bf18      	it	ne
   1031a:	2001      	movne	r0, #1
   1031c:	4770      	bx	lr
   1031e:	bf00      	nop
   10320:	40001000 	.word	0x40001000

00010324 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   10324:	4b01      	ldr	r3, [pc, #4]	; (1032c <radio_filter_match_get+0x8>)
   10326:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1032a:	4770      	bx	lr
   1032c:	40001000 	.word	0x40001000

00010330 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   10330:	4b04      	ldr	r3, [pc, #16]	; (10344 <radio_bc_configure+0x14>)
   10332:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   10336:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1033a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1033e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   10342:	4770      	bx	lr
   10344:	40001000 	.word	0x40001000

00010348 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   10348:	4b05      	ldr	r3, [pc, #20]	; (10360 <radio_tmr_status_reset+0x18>)
   1034a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1034e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   10352:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   10356:	227f      	movs	r2, #127	; 0x7f
   10358:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1035c:	4770      	bx	lr
   1035e:	bf00      	nop
   10360:	4000b000 	.word	0x4000b000

00010364 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   10364:	4b03      	ldr	r3, [pc, #12]	; (10374 <radio_tmr_tifs_set+0x10>)
   10366:	4a04      	ldr	r2, [pc, #16]	; (10378 <radio_tmr_tifs_set+0x14>)
   10368:	781b      	ldrb	r3, [r3, #0]
   1036a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1036e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   10372:	4770      	bx	lr
   10374:	20001464 	.word	0x20001464
   10378:	40009000 	.word	0x40009000

0001037c <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   10380:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   10384:	4c30      	ldr	r4, [pc, #192]	; (10448 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   10386:	4d31      	ldr	r5, [pc, #196]	; (1044c <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   10388:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1038c:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   1038e:	bf88      	it	hi
   10390:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   10394:	4b2e      	ldr	r3, [pc, #184]	; (10450 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   10396:	4c2f      	ldr	r4, [pc, #188]	; (10454 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   10398:	bf82      	ittt	hi
   1039a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1039e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   103a2:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   103a6:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   103a8:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   103ac:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   103ae:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   103b0:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   103b4:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   103b6:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   103ba:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   103be:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   103c2:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   103c6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   103ca:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   103ce:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   103d2:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   103d6:	4920      	ldr	r1, [pc, #128]	; (10458 <radio_tmr_start+0xdc>)
   103d8:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   103dc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   103e0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   103e4:	f7ff fd5a 	bl	fe9c <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   103e8:	4b1c      	ldr	r3, [pc, #112]	; (1045c <radio_tmr_start+0xe0>)
   103ea:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   103ec:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   103f0:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   103f4:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   103f8:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   103fa:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   103fe:	3b74      	subs	r3, #116	; 0x74
   10400:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   10404:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   10408:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1040c:	f503 739a 	add.w	r3, r3, #308	; 0x134
   10410:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   10414:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   10418:	33c4      	adds	r3, #196	; 0xc4
   1041a:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1041e:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   10422:	3bc0      	subs	r3, #192	; 0xc0
   10424:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   10428:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1042c:	33c8      	adds	r3, #200	; 0xc8
   1042e:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   10432:	f44f 6310 	mov.w	r3, #2304	; 0x900
   10436:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1043a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1043e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   10442:	4628      	mov	r0, r5
   10444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10448:	7ff0bdbf 	.word	0x7ff0bdbf
   1044c:	000f4240 	.word	0x000f4240
   10450:	40008000 	.word	0x40008000
   10454:	4000b000 	.word	0x4000b000
   10458:	4000b148 	.word	0x4000b148
   1045c:	40009000 	.word	0x40009000

00010460 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   10460:	4a04      	ldr	r2, [pc, #16]	; (10474 <radio_tmr_stop+0x14>)
   10462:	2301      	movs	r3, #1
   10464:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   10466:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   10468:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1046c:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   1046e:	6113      	str	r3, [r2, #16]
   10470:	4770      	bx	lr
   10472:	bf00      	nop
   10474:	40008000 	.word	0x40008000

00010478 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   10478:	4b0c      	ldr	r3, [pc, #48]	; (104ac <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1047a:	4a0d      	ldr	r2, [pc, #52]	; (104b0 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   1047c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   10480:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   10484:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   10488:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1048c:	3240      	adds	r2, #64	; 0x40
   1048e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   10492:	f502 7280 	add.w	r2, r2, #256	; 0x100
   10496:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   1049a:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   1049e:	3a34      	subs	r2, #52	; 0x34
   104a0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   104a4:	2218      	movs	r2, #24
   104a6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   104aa:	4770      	bx	lr
   104ac:	40008000 	.word	0x40008000
   104b0:	40001104 	.word	0x40001104

000104b4 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   104b4:	4b0b      	ldr	r3, [pc, #44]	; (104e4 <radio_tmr_aa_capture+0x30>)
   104b6:	4a0c      	ldr	r2, [pc, #48]	; (104e8 <radio_tmr_aa_capture+0x34>)
   104b8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   104bc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   104c0:	3240      	adds	r2, #64	; 0x40
   104c2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   104c6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   104ca:	3a3c      	subs	r2, #60	; 0x3c
   104cc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   104d0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   104d4:	3240      	adds	r2, #64	; 0x40
   104d6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   104da:	220c      	movs	r2, #12
   104dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   104e0:	4770      	bx	lr
   104e2:	bf00      	nop
   104e4:	4001f000 	.word	0x4001f000
   104e8:	40001100 	.word	0x40001100

000104ec <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   104ec:	4b01      	ldr	r3, [pc, #4]	; (104f4 <radio_tmr_aa_get+0x8>)
   104ee:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   104f2:	4770      	bx	lr
   104f4:	40008000 	.word	0x40008000

000104f8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   104f8:	4b01      	ldr	r3, [pc, #4]	; (10500 <radio_tmr_aa_save+0x8>)
   104fa:	6018      	str	r0, [r3, #0]
   104fc:	4770      	bx	lr
   104fe:	bf00      	nop
   10500:	2000145c 	.word	0x2000145c

00010504 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   10504:	4b01      	ldr	r3, [pc, #4]	; (1050c <radio_tmr_aa_restore+0x8>)
   10506:	6818      	ldr	r0, [r3, #0]
   10508:	4770      	bx	lr
   1050a:	bf00      	nop
   1050c:	2000145c 	.word	0x2000145c

00010510 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   10510:	4b01      	ldr	r3, [pc, #4]	; (10518 <radio_tmr_ready_get+0x8>)
   10512:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   10516:	4770      	bx	lr
   10518:	40008000 	.word	0x40008000

0001051c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   1051c:	4b06      	ldr	r3, [pc, #24]	; (10538 <radio_tmr_end_capture+0x1c>)
   1051e:	4a07      	ldr	r2, [pc, #28]	; (1053c <radio_tmr_end_capture+0x20>)
   10520:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   10524:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   10528:	323c      	adds	r2, #60	; 0x3c
   1052a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   1052e:	2220      	movs	r2, #32
   10530:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   10534:	4770      	bx	lr
   10536:	bf00      	nop
   10538:	4001f000 	.word	0x4001f000
   1053c:	4000110c 	.word	0x4000110c

00010540 <radio_tmr_end_get>:
   10540:	4b01      	ldr	r3, [pc, #4]	; (10548 <radio_tmr_end_get+0x8>)
   10542:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   10546:	4770      	bx	lr
   10548:	40008000 	.word	0x40008000

0001054c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1054c:	4b01      	ldr	r3, [pc, #4]	; (10554 <radio_tmr_tifs_base_get+0x8>)
   1054e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   10552:	4770      	bx	lr
   10554:	40008000 	.word	0x40008000

00010558 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   10558:	4b16      	ldr	r3, [pc, #88]	; (105b4 <radio_ccm_rx_pkt_set+0x5c>)
{
   1055a:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1055c:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1055e:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   10560:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   10564:	4e14      	ldr	r6, [pc, #80]	; (105b8 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   10566:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1056a:	4d14      	ldr	r5, [pc, #80]	; (105bc <radio_ccm_rx_pkt_set+0x64>)
   1056c:	2902      	cmp	r1, #2
   1056e:	bf0c      	ite	eq
   10570:	4629      	moveq	r1, r5
   10572:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   10574:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   10578:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1057c:	4810      	ldr	r0, [pc, #64]	; (105c0 <radio_ccm_rx_pkt_set+0x68>)
   1057e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   10582:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   10586:	4a0f      	ldr	r2, [pc, #60]	; (105c4 <radio_ccm_rx_pkt_set+0x6c>)
   10588:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   1058c:	490e      	ldr	r1, [pc, #56]	; (105c8 <radio_ccm_rx_pkt_set+0x70>)
   1058e:	4a0f      	ldr	r2, [pc, #60]	; (105cc <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   10590:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   10594:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   10598:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   1059c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   105a0:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   105a4:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   105a8:	2140      	movs	r1, #64	; 0x40
   105aa:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   105ae:	2201      	movs	r2, #1
   105b0:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   105b2:	bd70      	pop	{r4, r5, r6, pc}
   105b4:	4000f000 	.word	0x4000f000
   105b8:	01000001 	.word	0x01000001
   105bc:	01010001 	.word	0x01010001
   105c0:	20001358 	.word	0x20001358
   105c4:	20001248 	.word	0x20001248
   105c8:	40001104 	.word	0x40001104
   105cc:	4001f000 	.word	0x4001f000

000105d0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   105d0:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   105d2:	4b0e      	ldr	r3, [pc, #56]	; (1060c <radio_ccm_tx_pkt_set+0x3c>)
   105d4:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   105d6:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   105d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   105dc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   105e0:	4c0b      	ldr	r4, [pc, #44]	; (10610 <radio_ccm_tx_pkt_set+0x40>)
   105e2:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   105e6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   105ea:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   105ee:	4809      	ldr	r0, [pc, #36]	; (10614 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   105f0:	4909      	ldr	r1, [pc, #36]	; (10618 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   105f2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   105f6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   105fa:	2101      	movs	r1, #1
   105fc:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   10600:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   10604:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   10608:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1060a:	bd10      	pop	{r4, pc}
   1060c:	4000f000 	.word	0x4000f000
   10610:	01010000 	.word	0x01010000
   10614:	20001358 	.word	0x20001358
   10618:	20001248 	.word	0x20001248

0001061c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   1061c:	4b0c      	ldr	r3, [pc, #48]	; (10650 <radio_ccm_is_done+0x34>)
   1061e:	2202      	movs	r2, #2
   10620:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   10624:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   10628:	b16a      	cbz	r2, 10646 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1062a:	2202      	movs	r2, #2
   1062c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   10630:	4a08      	ldr	r2, [pc, #32]	; (10654 <radio_ccm_is_done+0x38>)
   10632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10636:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1063a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1063e:	fab0 f080 	clz	r0, r0
   10642:	0940      	lsrs	r0, r0, #5
   10644:	4770      	bx	lr
		__WFE();
   10646:	bf20      	wfe
		__SEV();
   10648:	bf40      	sev
		__WFE();
   1064a:	bf20      	wfe
   1064c:	e7ea      	b.n	10624 <radio_ccm_is_done+0x8>
   1064e:	bf00      	nop
   10650:	4000f000 	.word	0x4000f000
   10654:	e000e100 	.word	0xe000e100

00010658 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   10658:	4b03      	ldr	r3, [pc, #12]	; (10668 <radio_ccm_mic_is_valid+0x10>)
   1065a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1065e:	3000      	adds	r0, #0
   10660:	bf18      	it	ne
   10662:	2001      	movne	r0, #1
   10664:	4770      	bx	lr
   10666:	bf00      	nop
   10668:	4000f000 	.word	0x4000f000

0001066c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   1066c:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1066e:	4c13      	ldr	r4, [pc, #76]	; (106bc <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   10670:	4d13      	ldr	r5, [pc, #76]	; (106c0 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   10672:	2303      	movs	r3, #3
   10674:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   10678:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   1067c:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   10680:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   10684:	3b01      	subs	r3, #1
   10686:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   1068a:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   1068c:	4b0d      	ldr	r3, [pc, #52]	; (106c4 <radio_ar_configure+0x58>)
   1068e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   10692:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   10694:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   10698:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1069c:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   106a0:	f7ff fe46 	bl	10330 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   106a4:	4b08      	ldr	r3, [pc, #32]	; (106c8 <radio_ar_configure+0x5c>)
   106a6:	4a09      	ldr	r2, [pc, #36]	; (106cc <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   106a8:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   106ac:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   106b0:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   106b2:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   106b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   106ba:	bd38      	pop	{r3, r4, r5, pc}
   106bc:	4000f000 	.word	0x4000f000
   106c0:	40001000 	.word	0x40001000
   106c4:	20001244 	.word	0x20001244
   106c8:	4001f000 	.word	0x4001f000
   106cc:	40001128 	.word	0x40001128

000106d0 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   106d0:	4b01      	ldr	r3, [pc, #4]	; (106d8 <radio_ar_match_get+0x8>)
   106d2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   106d6:	4770      	bx	lr
   106d8:	4000f000 	.word	0x4000f000

000106dc <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   106dc:	4a04      	ldr	r2, [pc, #16]	; (106f0 <radio_ar_status_reset+0x14>)
   106de:	2300      	movs	r3, #0
   106e0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   106e4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   106e8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   106ec:	4770      	bx	lr
   106ee:	bf00      	nop
   106f0:	40001000 	.word	0x40001000

000106f4 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   106f4:	4b08      	ldr	r3, [pc, #32]	; (10718 <radio_ar_has_match+0x24>)
   106f6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   106fa:	b160      	cbz	r0, 10716 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   106fc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   10700:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   10704:	b138      	cbz	r0, 10716 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   10706:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1070a:	b120      	cbz	r0, 10716 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1070c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   10710:	fab0 f080 	clz	r0, r0
   10714:	0940      	lsrs	r0, r0, #5
}
   10716:	4770      	bx	lr
   10718:	40001000 	.word	0x40001000

0001071c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1071c:	2901      	cmp	r1, #1
   1071e:	d005      	beq.n	1072c <mayfly_enable_cb+0x10>
   10720:	4040      	eors	r0, r0
   10722:	f380 8811 	msr	BASEPRI, r0
   10726:	f04f 0004 	mov.w	r0, #4
   1072a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   1072c:	2018      	movs	r0, #24
	if (enable) {
   1072e:	b10a      	cbz	r2, 10734 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
   10730:	f7f1 b892 	b.w	1858 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
   10734:	f7f1 b8a0 	b.w	1878 <_arch_irq_disable>

00010738 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   10738:	b139      	cbz	r1, 1074a <mayfly_is_enabled+0x12>
   1073a:	2901      	cmp	r1, #1
   1073c:	d008      	beq.n	10750 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   1073e:	4040      	eors	r0, r0
   10740:	f380 8811 	msr	BASEPRI, r0
   10744:	f04f 0004 	mov.w	r0, #4
   10748:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1074a:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
   1074c:	f7f1 b8a8 	b.w	18a0 <_arch_irq_is_enabled>
   10750:	2018      	movs	r0, #24
   10752:	e7fb      	b.n	1074c <mayfly_is_enabled+0x14>

00010754 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   10754:	4288      	cmp	r0, r1
   10756:	d00a      	beq.n	1076e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   10758:	b918      	cbnz	r0, 10762 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1075a:	1e4b      	subs	r3, r1, #1
   1075c:	4258      	negs	r0, r3
   1075e:	4158      	adcs	r0, r3
   10760:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   10762:	2801      	cmp	r0, #1
   10764:	d105      	bne.n	10772 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   10766:	fab1 f081 	clz	r0, r1
   1076a:	0940      	lsrs	r0, r0, #5
   1076c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1076e:	2001      	movs	r0, #1
   10770:	4770      	bx	lr
   10772:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   10774:	4770      	bx	lr
	...

00010778 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   10778:	4b08      	ldr	r3, [pc, #32]	; (1079c <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
   1077a:	b139      	cbz	r1, 1078c <mayfly_pend+0x14>
   1077c:	2901      	cmp	r1, #1
   1077e:	d00a      	beq.n	10796 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   10780:	4040      	eors	r0, r0
   10782:	f380 8811 	msr	BASEPRI, r0
   10786:	f04f 0004 	mov.w	r0, #4
   1078a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1078c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10790:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   10794:	4770      	bx	lr
   10796:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1079a:	e7f9      	b.n	10790 <mayfly_pend+0x18>
   1079c:	e000e100 	.word	0xe000e100

000107a0 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   107a0:	2803      	cmp	r0, #3
   107a2:	d905      	bls.n	107b0 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   107a4:	4040      	eors	r0, r0
   107a6:	f380 8811 	msr	BASEPRI, r0
   107aa:	f04f 0004 	mov.w	r0, #4
   107ae:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   107b0:	4b02      	ldr	r3, [pc, #8]	; (107bc <hal_ticker_instance0_caller_id_get+0x1c>)
   107b2:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   107b4:	2800      	cmp	r0, #0
   107b6:	d0f5      	beq.n	107a4 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
   107b8:	4770      	bx	lr
   107ba:	bf00      	nop
   107bc:	00012d02 	.word	0x00012d02

000107c0 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   107c0:	3802      	subs	r0, #2
{
   107c2:	b410      	push	{r4}
   107c4:	461c      	mov	r4, r3
	switch (caller_id) {
   107c6:	2803      	cmp	r0, #3
   107c8:	d816      	bhi.n	107f8 <hal_ticker_instance0_sched+0x38>
   107ca:	e8df f000 	tbb	[pc, r0]
   107ce:	0b02      	.short	0x0b02
   107d0:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   107d2:	2903      	cmp	r1, #3
   107d4:	d110      	bne.n	107f8 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   107d6:	4b13      	ldr	r3, [pc, #76]	; (10824 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   107d8:	2100      	movs	r1, #0
			m.param = instance;
   107da:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   107dc:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   107de:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   107e0:	f7f5 bc12 	b.w	6008 <mayfly_enqueue>
		switch (callee_id) {
   107e4:	2904      	cmp	r1, #4
   107e6:	d107      	bne.n	107f8 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   107e8:	4b0f      	ldr	r3, [pc, #60]	; (10828 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   107ea:	2101      	movs	r1, #1
			m.param = instance;
   107ec:	609c      	str	r4, [r3, #8]
   107ee:	e7f5      	b.n	107dc <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   107f0:	2903      	cmp	r1, #3
   107f2:	d007      	beq.n	10804 <hal_ticker_instance0_sched+0x44>
   107f4:	2904      	cmp	r1, #4
   107f6:	d00a      	beq.n	1080e <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
   107f8:	4040      	eors	r0, r0
   107fa:	f380 8811 	msr	BASEPRI, r0
   107fe:	f04f 0004 	mov.w	r0, #4
   10802:	df02      	svc	2
			m.param = instance;
   10804:	4b09      	ldr	r3, [pc, #36]	; (1082c <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   10806:	2100      	movs	r1, #0
			m.param = instance;
   10808:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1080a:	2001      	movs	r0, #1
   1080c:	e7e7      	b.n	107de <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   1080e:	4b08      	ldr	r3, [pc, #32]	; (10830 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   10810:	2101      	movs	r1, #1
			m.param = instance;
   10812:	609c      	str	r4, [r3, #8]
   10814:	e7f9      	b.n	1080a <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   10816:	2904      	cmp	r1, #4
   10818:	d1ee      	bne.n	107f8 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   1081a:	4b06      	ldr	r3, [pc, #24]	; (10834 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1081c:	2101      	movs	r1, #1
			m.param = instance;
   1081e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   10820:	2003      	movs	r0, #3
   10822:	e7dc      	b.n	107de <hal_ticker_instance0_sched+0x1e>
   10824:	20003838 	.word	0x20003838
   10828:	20003848 	.word	0x20003848
   1082c:	20003858 	.word	0x20003858
   10830:	20003868 	.word	0x20003868
   10834:	20003878 	.word	0x20003878

00010838 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   10838:	4601      	mov	r1, r0
   1083a:	2000      	movs	r0, #0
   1083c:	f7ff bade 	b.w	fdfc <cntr_cmp_set>

00010840 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   10840:	4770      	bx	lr
	...

00010844 <net_buf_pool_get>:
}
   10844:	4b01      	ldr	r3, [pc, #4]	; (1084c <net_buf_pool_get+0x8>)
   10846:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1084a:	4770      	bx	lr
   1084c:	2000394c 	.word	0x2000394c

00010850 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10850:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   10852:	4b04      	ldr	r3, [pc, #16]	; (10864 <net_buf_id+0x14>)
   10854:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   10858:	69db      	ldr	r3, [r3, #28]
   1085a:	1ac0      	subs	r0, r0, r3
}
   1085c:	4b02      	ldr	r3, [pc, #8]	; (10868 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1085e:	10c0      	asrs	r0, r0, #3
}
   10860:	4358      	muls	r0, r3
   10862:	4770      	bx	lr
   10864:	2000394c 	.word	0x2000394c
   10868:	aaaaaaab 	.word	0xaaaaaaab

0001086c <fixed_data_alloc>:
{
   1086c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1086e:	4b09      	ldr	r3, [pc, #36]	; (10894 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10870:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10872:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   10876:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10878:	699b      	ldr	r3, [r3, #24]
   1087a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   1087c:	6823      	ldr	r3, [r4, #0]
   1087e:	429a      	cmp	r2, r3
   10880:	bf94      	ite	ls
   10882:	600a      	strls	r2, [r1, #0]
   10884:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   10886:	f7ff ffe3 	bl	10850 <net_buf_id>
   1088a:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   1088e:	fb02 3000 	mla	r0, r2, r0, r3
   10892:	bd10      	pop	{r4, pc}
   10894:	2000394c 	.word	0x2000394c

00010898 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   10898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1089c:	4605      	mov	r5, r0
   1089e:	9101      	str	r1, [sp, #4]
   108a0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   108a2:	f001 f96f 	bl	11b84 <_impl_k_uptime_get_32>
   108a6:	4607      	mov	r7, r0
	__asm__ volatile(
   108a8:	f04f 0320 	mov.w	r3, #32
   108ac:	f3ef 8811 	mrs	r8, BASEPRI
   108b0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   108b4:	8a6b      	ldrh	r3, [r5, #18]
   108b6:	2b00      	cmp	r3, #0
   108b8:	d03d      	beq.n	10936 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   108ba:	8a2a      	ldrh	r2, [r5, #16]
   108bc:	429a      	cmp	r2, r3
   108be:	d92a      	bls.n	10916 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   108c0:	2100      	movs	r1, #0
   108c2:	4628      	mov	r0, r5
   108c4:	f000 fe78 	bl	115b8 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   108c8:	b328      	cbz	r0, 10916 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   108ca:	f388 8811 	msr	BASEPRI, r8
   108ce:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   108d0:	9b01      	ldr	r3, [sp, #4]
   108d2:	2b00      	cmp	r3, #0
   108d4:	d03c      	beq.n	10950 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   108d6:	1c73      	adds	r3, r6, #1
   108d8:	2b01      	cmp	r3, #1
   108da:	d906      	bls.n	108ea <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   108dc:	f001 f952 	bl	11b84 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   108e0:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   108e2:	42b0      	cmp	r0, r6
   108e4:	bf94      	ite	ls
   108e6:	1a36      	subls	r6, r6, r0
   108e8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   108ea:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   108ec:	4f1e      	ldr	r7, [pc, #120]	; (10968 <net_buf_alloc_len+0xd0>)
   108ee:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   108f2:	4632      	mov	r2, r6
   108f4:	699b      	ldr	r3, [r3, #24]
   108f6:	681b      	ldr	r3, [r3, #0]
   108f8:	a901      	add	r1, sp, #4
   108fa:	681b      	ldr	r3, [r3, #0]
   108fc:	4620      	mov	r0, r4
   108fe:	4798      	blx	r3
   10900:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   10902:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   10904:	bb28      	cbnz	r0, 10952 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   10906:	79a0      	ldrb	r0, [r4, #6]
   10908:	4621      	mov	r1, r4
   1090a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1090e:	f000 fe34 	bl	1157a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   10912:	462c      	mov	r4, r5
   10914:	e018      	b.n	10948 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   10916:	8a68      	ldrh	r0, [r5, #18]
   10918:	1e43      	subs	r3, r0, #1
   1091a:	826b      	strh	r3, [r5, #18]
   1091c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   10920:	8a2c      	ldrh	r4, [r5, #16]
   10922:	1a24      	subs	r4, r4, r0
   10924:	69e8      	ldr	r0, [r5, #28]
   10926:	2318      	movs	r3, #24
   10928:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1092c:	4b0e      	ldr	r3, [pc, #56]	; (10968 <net_buf_alloc_len+0xd0>)
   1092e:	1aed      	subs	r5, r5, r3
   10930:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   10932:	71a5      	strb	r5, [r4, #6]
		goto success;
   10934:	e7cc      	b.n	108d0 <net_buf_alloc_len+0x38>
   10936:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1093a:	4631      	mov	r1, r6
   1093c:	4628      	mov	r0, r5
   1093e:	f000 fe3b 	bl	115b8 <_impl_k_queue_get>
		return NULL;
   10942:	4604      	mov	r4, r0
	if (!buf) {
   10944:	2800      	cmp	r0, #0
   10946:	d1c3      	bne.n	108d0 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   10948:	4620      	mov	r0, r4
   1094a:	b002      	add	sp, #8
   1094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   10950:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   10952:	2301      	movs	r3, #1
   10954:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   10956:	2300      	movs	r3, #0
	buf->frags = NULL;
   10958:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   1095a:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   1095c:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   1095e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   10960:	6923      	ldr	r3, [r4, #16]
   10962:	81e2      	strh	r2, [r4, #14]
   10964:	60a3      	str	r3, [r4, #8]
	return buf;
   10966:	e7ef      	b.n	10948 <net_buf_alloc_len+0xb0>
   10968:	2000394c 	.word	0x2000394c

0001096c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1096c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1096e:	685b      	ldr	r3, [r3, #4]
   10970:	460a      	mov	r2, r1
   10972:	6819      	ldr	r1, [r3, #0]
   10974:	f7ff bf90 	b.w	10898 <net_buf_alloc_len>

00010978 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   10978:	b570      	push	{r4, r5, r6, lr}
   1097a:	4606      	mov	r6, r0
   1097c:	f000 fe1c 	bl	115b8 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   10980:	4605      	mov	r5, r0
   10982:	b128      	cbz	r0, 10990 <net_buf_get+0x18>
   10984:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   10986:	7963      	ldrb	r3, [r4, #5]
   10988:	f013 0301 	ands.w	r3, r3, #1
   1098c:	d102      	bne.n	10994 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1098e:	6023      	str	r3, [r4, #0]

	return buf;
}
   10990:	4628      	mov	r0, r5
   10992:	bd70      	pop	{r4, r5, r6, pc}
   10994:	2100      	movs	r1, #0
   10996:	4630      	mov	r0, r6
   10998:	f000 fe0e 	bl	115b8 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1099c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1099e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   109a0:	f023 0301 	bic.w	r3, r3, #1
   109a4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   109a6:	4604      	mov	r4, r0
   109a8:	e7ed      	b.n	10986 <net_buf_get+0xe>

000109aa <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   109aa:	6883      	ldr	r3, [r0, #8]
   109ac:	4419      	add	r1, r3
   109ae:	6001      	str	r1, [r0, #0]
   109b0:	4770      	bx	lr

000109b2 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   109b2:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   109b4:	460a      	mov	r2, r1
   109b6:	6814      	ldr	r4, [r2, #0]
   109b8:	b914      	cbnz	r4, 109c0 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   109ba:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   109bc:	f000 bde2 	b.w	11584 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   109c0:	7953      	ldrb	r3, [r2, #5]
   109c2:	f043 0301 	orr.w	r3, r3, #1
   109c6:	7153      	strb	r3, [r2, #5]
   109c8:	4622      	mov	r2, r4
   109ca:	e7f4      	b.n	109b6 <net_buf_put+0x4>

000109cc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   109cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109ce:	4d15      	ldr	r5, [pc, #84]	; (10a24 <net_buf_unref+0x58>)
   109d0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   109d2:	2600      	movs	r6, #0
	while (buf) {
   109d4:	b904      	cbnz	r4, 109d8 <net_buf_unref+0xc>
   109d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   109d8:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   109da:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   109dc:	3b01      	subs	r3, #1
   109de:	b2db      	uxtb	r3, r3
   109e0:	7123      	strb	r3, [r4, #4]
   109e2:	2b00      	cmp	r3, #0
   109e4:	d1f7      	bne.n	109d6 <net_buf_unref+0xa>
		if (buf->__buf) {
   109e6:	6921      	ldr	r1, [r4, #16]
   109e8:	b159      	cbz	r1, 10a02 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   109ea:	7963      	ldrb	r3, [r4, #5]
   109ec:	079b      	lsls	r3, r3, #30
   109ee:	d407      	bmi.n	10a00 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   109f0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   109f2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   109f6:	4620      	mov	r0, r4
   109f8:	699b      	ldr	r3, [r3, #24]
   109fa:	681b      	ldr	r3, [r3, #0]
   109fc:	689b      	ldr	r3, [r3, #8]
   109fe:	4798      	blx	r3
			buf->__buf = NULL;
   10a00:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   10a02:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   10a04:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   10a06:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   10a0a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   10a0c:	695b      	ldr	r3, [r3, #20]
   10a0e:	b11b      	cbz	r3, 10a18 <net_buf_unref+0x4c>
			pool->destroy(buf);
   10a10:	4620      	mov	r0, r4
   10a12:	4798      	blx	r3
{
   10a14:	463c      	mov	r4, r7
   10a16:	e7dd      	b.n	109d4 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   10a18:	4621      	mov	r1, r4
   10a1a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   10a1e:	f000 fdac 	bl	1157a <k_queue_prepend>
   10a22:	e7f7      	b.n	10a14 <net_buf_unref+0x48>
   10a24:	2000394c 	.word	0x2000394c

00010a28 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   10a28:	7903      	ldrb	r3, [r0, #4]
   10a2a:	3301      	adds	r3, #1
   10a2c:	7103      	strb	r3, [r0, #4]
	return buf;
}
   10a2e:	4770      	bx	lr

00010a30 <net_buf_simple_add>:
	return buf->data + buf->len;
   10a30:	8883      	ldrh	r3, [r0, #4]
   10a32:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   10a34:	4419      	add	r1, r3
   10a36:	8081      	strh	r1, [r0, #4]
	return tail;
}
   10a38:	18d0      	adds	r0, r2, r3
   10a3a:	4770      	bx	lr

00010a3c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   10a3c:	b430      	push	{r4, r5}
   10a3e:	8883      	ldrh	r3, [r0, #4]
   10a40:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   10a42:	189d      	adds	r5, r3, r2
   10a44:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   10a46:	18e0      	adds	r0, r4, r3
}
   10a48:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   10a4a:	f7f1 b8d7 	b.w	1bfc <memcpy>

00010a4e <net_buf_simple_add_u8>:
   10a4e:	8883      	ldrh	r3, [r0, #4]
   10a50:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   10a52:	b510      	push	{r4, lr}
	buf->len += len;
   10a54:	1c5c      	adds	r4, r3, #1
   10a56:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   10a58:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   10a5a:	18d0      	adds	r0, r2, r3
   10a5c:	bd10      	pop	{r4, pc}

00010a5e <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   10a5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10a60:	ab02      	add	r3, sp, #8
   10a62:	8884      	ldrh	r4, [r0, #4]
   10a64:	f823 1d02 	strh.w	r1, [r3, #-2]!
   10a68:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   10a6a:	1ca2      	adds	r2, r4, #2
   10a6c:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   10a6e:	4619      	mov	r1, r3
   10a70:	2202      	movs	r2, #2
   10a72:	1928      	adds	r0, r5, r4
   10a74:	f7f1 f8c2 	bl	1bfc <memcpy>
}
   10a78:	b003      	add	sp, #12
   10a7a:	bd30      	pop	{r4, r5, pc}

00010a7c <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   10a7c:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   10a7e:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   10a80:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   10a82:	4411      	add	r1, r2
	buf->data -= len;
   10a84:	6003      	str	r3, [r0, #0]
	buf->len += len;
   10a86:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   10a88:	4618      	mov	r0, r3
   10a8a:	4770      	bx	lr

00010a8c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   10a8c:	8883      	ldrh	r3, [r0, #4]
   10a8e:	1a5b      	subs	r3, r3, r1
   10a90:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   10a92:	6803      	ldr	r3, [r0, #0]
   10a94:	4419      	add	r1, r3
   10a96:	6001      	str	r1, [r0, #0]
}
   10a98:	4608      	mov	r0, r1
   10a9a:	4770      	bx	lr

00010a9c <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   10a9c:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   10a9e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   10aa0:	2101      	movs	r1, #1
	val = buf->data[0];
   10aa2:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   10aa4:	f7ff fff2 	bl	10a8c <net_buf_simple_pull>

	return val;
}
   10aa8:	4610      	mov	r0, r2
   10aaa:	bd08      	pop	{r3, pc}

00010aac <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   10aac:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   10aae:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   10ab0:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   10ab2:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   10ab4:	f7ff ffea 	bl	10a8c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   10ab8:	4610      	mov	r0, r2
   10aba:	bd08      	pop	{r3, pc}

00010abc <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   10abc:	6802      	ldr	r2, [r0, #0]
   10abe:	6880      	ldr	r0, [r0, #8]
}
   10ac0:	1a10      	subs	r0, r2, r0
   10ac2:	4770      	bx	lr

00010ac4 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   10ac4:	6802      	ldr	r2, [r0, #0]
   10ac6:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   10ac8:	88c3      	ldrh	r3, [r0, #6]
   10aca:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   10acc:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   10ace:	1a9b      	subs	r3, r3, r2
}
   10ad0:	1a18      	subs	r0, r3, r0
   10ad2:	4770      	bx	lr

00010ad4 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   10ad4:	6800      	ldr	r0, [r0, #0]
   10ad6:	6880      	ldr	r0, [r0, #8]
   10ad8:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   10ada:	b941      	cbnz	r1, 10aee <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   10adc:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   10ae0:	fa21 f202 	lsr.w	r2, r1, r2
   10ae4:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   10ae8:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   10aea:	2000      	movs	r0, #0
   10aec:	4770      	bx	lr
		*value = gpio->IN;
   10aee:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   10af2:	e7f9      	b.n	10ae8 <gpio_nrf5_read+0x14>

00010af4 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   10af4:	6800      	ldr	r0, [r0, #0]
   10af6:	6880      	ldr	r0, [r0, #8]
   10af8:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   10afa:	b949      	cbnz	r1, 10b10 <gpio_nrf5_write+0x1c>
   10afc:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   10afe:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   10b00:	b11b      	cbz	r3, 10b0a <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   10b02:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   10b06:	2000      	movs	r0, #0
   10b08:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   10b0a:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   10b0e:	e7fa      	b.n	10b06 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   10b10:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   10b14:	e7f7      	b.n	10b06 <gpio_nrf5_write+0x12>

00010b16 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   10b16:	6883      	ldr	r3, [r0, #8]
   10b18:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   10b1a:	b172      	cbz	r2, 10b3a <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   10b1c:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   10b1e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   10b20:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   10b22:	b902      	cbnz	r2, 10b26 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   10b24:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   10b26:	2000      	movs	r0, #0
   10b28:	4770      	bx	lr
	parent->next = child;
   10b2a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   10b2c:	6858      	ldr	r0, [r3, #4]
   10b2e:	4281      	cmp	r1, r0
	list->tail = node;
   10b30:	bf08      	it	eq
   10b32:	605a      	streq	r2, [r3, #4]
   10b34:	e00d      	b.n	10b52 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   10b36:	4602      	mov	r2, r0
   10b38:	6800      	ldr	r0, [r0, #0]
   10b3a:	2800      	cmp	r0, #0
   10b3c:	d0f3      	beq.n	10b26 <gpio_nrf5_manage_callback+0x10>
   10b3e:	4281      	cmp	r1, r0
   10b40:	d1f9      	bne.n	10b36 <gpio_nrf5_manage_callback+0x20>
   10b42:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   10b44:	2a00      	cmp	r2, #0
   10b46:	d1f0      	bne.n	10b2a <gpio_nrf5_manage_callback+0x14>
   10b48:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   10b4a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   10b4c:	4291      	cmp	r1, r2
   10b4e:	d100      	bne.n	10b52 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   10b50:	6058      	str	r0, [r3, #4]
	parent->next = child;
   10b52:	2300      	movs	r3, #0
   10b54:	600b      	str	r3, [r1, #0]
   10b56:	e7e6      	b.n	10b26 <gpio_nrf5_manage_callback+0x10>

00010b58 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   10b58:	4b0c      	ldr	r3, [pc, #48]	; (10b8c <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   10b5a:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   10b5c:	4d0c      	ldr	r5, [pc, #48]	; (10b90 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   10b5e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10b60:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   10b62:	fa24 f203 	lsr.w	r2, r4, r3
   10b66:	07d2      	lsls	r2, r2, #31
   10b68:	d508      	bpl.n	10b7c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   10b6a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10b6e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   10b72:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   10b76:	4282      	cmp	r2, r0
   10b78:	d100      	bne.n	10b7c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   10b7a:	b121      	cbz	r1, 10b86 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10b7c:	3301      	adds	r3, #1
   10b7e:	2b08      	cmp	r3, #8
   10b80:	d1ef      	bne.n	10b62 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   10b82:	f06f 0312 	mvn.w	r3, #18
}
   10b86:	4618      	mov	r0, r3
   10b88:	bd30      	pop	{r4, r5, pc}
   10b8a:	bf00      	nop
   10b8c:	2000149c 	.word	0x2000149c
   10b90:	40006000 	.word	0x40006000

00010b94 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   10b94:	b570      	push	{r4, r5, r6, lr}
   10b96:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   10b98:	460d      	mov	r5, r1
   10b9a:	b9c9      	cbnz	r1, 10bd0 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   10b9c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   10b9e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   10ba0:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   10ba2:	4610      	mov	r0, r2
   10ba4:	7919      	ldrb	r1, [r3, #4]
   10ba6:	f7ff ffd7 	bl	10b58 <gpiote_find_channel.isra.4>
		if (i < 0) {
   10baa:	2800      	cmp	r0, #0
   10bac:	db12      	blt.n	10bd4 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   10bae:	68b2      	ldr	r2, [r6, #8]
   10bb0:	2301      	movs	r3, #1
   10bb2:	fa03 f404 	lsl.w	r4, r3, r4
   10bb6:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   10bb8:	f100 0140 	add.w	r1, r0, #64	; 0x40
   10bbc:	4a06      	ldr	r2, [pc, #24]	; (10bd8 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   10bbe:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   10bc0:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   10bc4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   10bc8:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   10bcc:	4628      	mov	r0, r5
   10bce:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   10bd0:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   10bd4:	bd70      	pop	{r4, r5, r6, pc}
   10bd6:	bf00      	nop
   10bd8:	40006000 	.word	0x40006000

00010bdc <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   10bdc:	b570      	push	{r4, r5, r6, lr}
   10bde:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   10be0:	460d      	mov	r5, r1
   10be2:	b9b1      	cbnz	r1, 10c12 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   10be4:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   10be6:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   10be8:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   10bea:	4610      	mov	r0, r2
   10bec:	7919      	ldrb	r1, [r3, #4]
   10bee:	f7ff ffb3 	bl	10b58 <gpiote_find_channel.isra.4>
		if (i < 0) {
   10bf2:	2800      	cmp	r0, #0
   10bf4:	db0f      	blt.n	10c16 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   10bf6:	68b2      	ldr	r2, [r6, #8]
   10bf8:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   10bfa:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   10bfe:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   10c02:	4b05      	ldr	r3, [pc, #20]	; (10c18 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   10c04:	ea22 0404 	bic.w	r4, r2, r4
   10c08:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   10c0a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   10c0e:	4628      	mov	r0, r5
   10c10:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   10c12:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   10c16:	bd70      	pop	{r4, r5, r6, pc}
   10c18:	40006000 	.word	0x40006000

00010c1c <gpio_nrf5_config>:
{
   10c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   10c20:	6806      	ldr	r6, [r0, #0]
{
   10c22:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   10c24:	68b2      	ldr	r2, [r6, #8]
   10c26:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   10c28:	b119      	cbz	r1, 10c32 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   10c2a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   10c32:	f403 7240 	and.w	r2, r3, #768	; 0x300
   10c36:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   10c3a:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   10c3e:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   10c42:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   10c46:	d058      	beq.n	10cfa <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   10c48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10c4c:	bf0c      	ite	eq
   10c4e:	2204      	moveq	r2, #4
   10c50:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   10c52:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   10c56:	bf08      	it	eq
   10c58:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   10c5a:	f013 0f01 	tst.w	r3, #1
   10c5e:	ea4f 0180 	mov.w	r1, r0, lsl #2
   10c62:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 10d30 <gpio_nrf5_config+0x114>
   10c66:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   10c6a:	d04f      	beq.n	10d0c <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   10c6c:	2a0c      	cmp	r2, #12
   10c6e:	d146      	bne.n	10cfe <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   10c70:	2701      	movs	r7, #1
   10c72:	40a7      	lsls	r7, r4
   10c74:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   10c78:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   10c7a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   10c7e:	f041 0103 	orr.w	r1, r1, #3
   10c82:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   10c84:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   10c88:	f013 0002 	ands.w	r0, r3, #2
   10c8c:	d049      	beq.n	10d22 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   10c8e:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   10c90:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   10c92:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   10c96:	d5c8      	bpl.n	10c2a <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   10c98:	065a      	lsls	r2, r3, #25
   10c9a:	d43d      	bmi.n	10d18 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   10c9c:	f013 0f04 	tst.w	r3, #4
   10ca0:	bf14      	ite	ne
   10ca2:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   10ca6:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   10caa:	4e1f      	ldr	r6, [pc, #124]	; (10d28 <gpio_nrf5_config+0x10c>)
   10cac:	6837      	ldr	r7, [r6, #0]
   10cae:	4638      	mov	r0, r7
   10cb0:	f7ef fac8 	bl	244 <__popcountsi2>
   10cb4:	2808      	cmp	r0, #8
   10cb6:	d032      	beq.n	10d1e <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   10cb8:	4641      	mov	r1, r8
   10cba:	4620      	mov	r0, r4
   10cbc:	f7ff ff4c 	bl	10b58 <gpiote_find_channel.isra.4>
		if (i < 0) {
   10cc0:	2800      	cmp	r0, #0
   10cc2:	da08      	bge.n	10cd6 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   10cc4:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   10cc6:	fa93 f0a3 	rbit	r0, r3
   10cca:	2b00      	cmp	r3, #0
   10ccc:	fab0 f080 	clz	r0, r0
   10cd0:	bf08      	it	eq
   10cd2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   10cd6:	2301      	movs	r3, #1
   10cd8:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   10cda:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   10cdc:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   10cde:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   10ce2:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   10ce4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   10ce8:	4b10      	ldr	r3, [pc, #64]	; (10d2c <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   10cea:	f044 0401 	orr.w	r4, r4, #1
   10cee:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   10cf0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   10cf4:	2000      	movs	r0, #0
   10cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   10cfa:	220c      	movs	r2, #12
   10cfc:	e7a9      	b.n	10c52 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   10cfe:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   10d00:	bf02      	ittt	eq
   10d02:	2701      	moveq	r7, #1
   10d04:	40a7      	lsleq	r7, r4
   10d06:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   10d0a:	e7b5      	b.n	10c78 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   10d0c:	4461      	add	r1, ip
   10d0e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   10d12:	430a      	orrs	r2, r1
   10d14:	433a      	orrs	r2, r7
   10d16:	e7b5      	b.n	10c84 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   10d18:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   10d1c:	e7c5      	b.n	10caa <gpio_nrf5_config+0x8e>
			return -EIO;
   10d1e:	f06f 0004 	mvn.w	r0, #4
}
   10d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d26:	bf00      	nop
   10d28:	2000149c 	.word	0x2000149c
   10d2c:	40006000 	.word	0x40006000
   10d30:	00012d14 	.word	0x00012d14

00010d34 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   10d34:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   10d36:	2200      	movs	r2, #0
   10d38:	2105      	movs	r1, #5
   10d3a:	2006      	movs	r0, #6
   10d3c:	f7f0 fdbe 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   10d40:	2006      	movs	r0, #6
   10d42:	f7f0 fd89 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   10d46:	2000      	movs	r0, #0
   10d48:	bd08      	pop	{r3, pc}
	...

00010d4c <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10d4c:	2100      	movs	r1, #0
{
   10d4e:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   10d50:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   10d52:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   10d54:	2501      	movs	r5, #1
   10d56:	008b      	lsls	r3, r1, #2
   10d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10d5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   10d60:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   10d64:	b140      	cbz	r0, 10d78 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   10d66:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   10d6a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   10d6e:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   10d72:	fa05 f303 	lsl.w	r3, r5, r3
   10d76:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10d78:	3101      	adds	r1, #1
   10d7a:	2908      	cmp	r1, #8
   10d7c:	d1eb      	bne.n	10d56 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   10d7e:	4e08      	ldr	r6, [pc, #32]	; (10da0 <gpio_nrf5_port_isr+0x54>)
   10d80:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   10d82:	689d      	ldr	r5, [r3, #8]
   10d84:	681c      	ldr	r4, [r3, #0]
   10d86:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   10d88:	b14c      	cbz	r4, 10d9e <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   10d8a:	68a3      	ldr	r3, [r4, #8]
   10d8c:	421d      	tst	r5, r3
   10d8e:	d004      	beq.n	10d9a <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   10d90:	6863      	ldr	r3, [r4, #4]
   10d92:	462a      	mov	r2, r5
   10d94:	4621      	mov	r1, r4
   10d96:	4630      	mov	r0, r6
   10d98:	4798      	blx	r3
	return node->next;
   10d9a:	6824      	ldr	r4, [r4, #0]
   10d9c:	e7f4      	b.n	10d88 <gpio_nrf5_port_isr+0x3c>
   10d9e:	bd70      	pop	{r4, r5, r6, pc}
   10da0:	200038f4 	.word	0x200038f4

00010da4 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10da4:	4b03      	ldr	r3, [pc, #12]	; (10db4 <uart_nrfx_err_check+0x10>)
   10da6:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   10da8:	b118      	cbz	r0, 10db2 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   10daa:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   10dae:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   10db2:	4770      	bx	lr
   10db4:	40002124 	.word	0x40002124

00010db8 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10db8:	4b07      	ldr	r3, [pc, #28]	; (10dd8 <uart_nrfx_poll_out+0x20>)
   10dba:	2200      	movs	r2, #0
   10dbc:	601a      	str	r2, [r3, #0]
{
   10dbe:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10dc0:	681a      	ldr	r2, [r3, #0]
   10dc2:	9201      	str	r2, [sp, #4]
    (void)dummy;
   10dc4:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   10dc6:	4a05      	ldr	r2, [pc, #20]	; (10ddc <uart_nrfx_poll_out+0x24>)
   10dc8:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10dcc:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   10dce:	2a00      	cmp	r2, #0
   10dd0:	d0fc      	beq.n	10dcc <uart_nrfx_poll_out+0x14>
}
   10dd2:	4608      	mov	r0, r1
   10dd4:	b002      	add	sp, #8
   10dd6:	4770      	bx	lr
   10dd8:	4000211c 	.word	0x4000211c
   10ddc:	40002000 	.word	0x40002000

00010de0 <uart_nrfx_poll_in>:
   10de0:	4b08      	ldr	r3, [pc, #32]	; (10e04 <uart_nrfx_poll_in+0x24>)
   10de2:	681a      	ldr	r2, [r3, #0]
{
   10de4:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   10de6:	b152      	cbz	r2, 10dfe <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10de8:	2000      	movs	r0, #0
   10dea:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10dec:	681b      	ldr	r3, [r3, #0]
   10dee:	9301      	str	r3, [sp, #4]
    (void)dummy;
   10df0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   10df2:	4b05      	ldr	r3, [pc, #20]	; (10e08 <uart_nrfx_poll_in+0x28>)
   10df4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   10df8:	700b      	strb	r3, [r1, #0]
}
   10dfa:	b002      	add	sp, #8
   10dfc:	4770      	bx	lr
		return -1;
   10dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e02:	e7fa      	b.n	10dfa <uart_nrfx_poll_in+0x1a>
   10e04:	40002108 	.word	0x40002108
   10e08:	40002000 	.word	0x40002000

00010e0c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   10e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   10e0e:	4819      	ldr	r0, [pc, #100]	; (10e74 <uart_nrfx_init+0x68>)
   10e10:	f000 f98c 	bl	1112c <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   10e14:	6843      	ldr	r3, [r0, #4]
   10e16:	4604      	mov	r4, r0
   10e18:	681d      	ldr	r5, [r3, #0]
   10e1a:	2206      	movs	r2, #6
   10e1c:	f240 1301 	movw	r3, #257	; 0x101
   10e20:	2100      	movs	r1, #0
   10e22:	47a8      	blx	r5
   10e24:	6863      	ldr	r3, [r4, #4]
   10e26:	681d      	ldr	r5, [r3, #0]
   10e28:	2300      	movs	r3, #0
   10e2a:	4619      	mov	r1, r3
   10e2c:	2208      	movs	r2, #8
   10e2e:	4620      	mov	r0, r4
   10e30:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   10e32:	4b11      	ldr	r3, [pc, #68]	; (10e78 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10e34:	4911      	ldr	r1, [pc, #68]	; (10e7c <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   10e36:	2208      	movs	r2, #8
   10e38:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   10e3c:	2206      	movs	r2, #6
   10e3e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10e42:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10e44:	4a0e      	ldr	r2, [pc, #56]	; (10e80 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10e46:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   10e4a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   10e4e:	2204      	movs	r2, #4
   10e50:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10e54:	4a0b      	ldr	r2, [pc, #44]	; (10e84 <uart_nrfx_init+0x78>)
   10e56:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10e58:	6812      	ldr	r2, [r2, #0]
   10e5a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   10e5c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10e5e:	4a0a      	ldr	r2, [pc, #40]	; (10e88 <uart_nrfx_init+0x7c>)
   10e60:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10e62:	6812      	ldr	r2, [r2, #0]
   10e64:	9200      	str	r2, [sp, #0]
    (void)dummy;
   10e66:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10e68:	2201      	movs	r2, #1
   10e6a:	600a      	str	r2, [r1, #0]
   10e6c:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   10e6e:	b003      	add	sp, #12
   10e70:	bd30      	pop	{r4, r5, pc}
   10e72:	bf00      	nop
   10e74:	00012d78 	.word	0x00012d78
   10e78:	40002000 	.word	0x40002000
   10e7c:	40002008 	.word	0x40002008
   10e80:	01d7e000 	.word	0x01d7e000
   10e84:	4000211c 	.word	0x4000211c
   10e88:	40002108 	.word	0x40002108

00010e8c <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   10e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   10e90:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   10e92:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   10e94:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   10e96:	42a3      	cmp	r3, r4
	d = &rand[octets];
   10e98:	440a      	add	r2, r1
	s = &rng->rand[first];
   10e9a:	4406      	add	r6, r0
	if (first <= last) {
   10e9c:	d81f      	bhi.n	10ede <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   10e9e:	1ae4      	subs	r4, r4, r3
   10ea0:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10ea2:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   10ea4:	bf3e      	ittt	cc
   10ea6:	1a64      	subcc	r4, r4, r1
   10ea8:	b2e7      	uxtbcc	r7, r4
   10eaa:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   10eac:	4423      	add	r3, r4
		octets -= avail;
   10eae:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   10eb2:	bf28      	it	cs
   10eb4:	2700      	movcs	r7, #0
		first += avail;
   10eb6:	b2db      	uxtb	r3, r3
		octets -= avail;
   10eb8:	b2c9      	uxtb	r1, r1
   10eba:	4434      	add	r4, r6

		while (avail--) {
   10ebc:	42a6      	cmp	r6, r4
   10ebe:	d109      	bne.n	10ed4 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   10ec0:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   10ec2:	7843      	ldrb	r3, [r0, #1]
   10ec4:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   10ec6:	bf82      	ittt	hi
   10ec8:	4b20      	ldrhi	r3, [pc, #128]	; (10f4c <get+0xc0>)
   10eca:	2201      	movhi	r2, #1
   10ecc:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   10ece:	4608      	mov	r0, r1
   10ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   10ed4:	f816 5b01 	ldrb.w	r5, [r6], #1
   10ed8:	f802 5d01 	strb.w	r5, [r2, #-1]!
   10edc:	e7ee      	b.n	10ebc <get+0x30>
		avail = rng->count - first;
   10ede:	7805      	ldrb	r5, [r0, #0]
   10ee0:	1aed      	subs	r5, r5, r3
   10ee2:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   10ee4:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   10ee6:	bf3f      	itttt	cc
   10ee8:	1a67      	subcc	r7, r4, r1
   10eea:	19ed      	addcc	r5, r5, r7
   10eec:	b2ef      	uxtbcc	r7, r5
   10eee:	460d      	movcc	r5, r1
			first += avail;
   10ef0:	bf38      	it	cc
   10ef2:	185b      	addcc	r3, r3, r1
		octets -= avail;
   10ef4:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   10ef8:	bf32      	itee	cc
   10efa:	b2db      	uxtbcc	r3, r3
   10efc:	4627      	movcs	r7, r4
			first = 0;
   10efe:	2300      	movcs	r3, #0
		octets -= avail;
   10f00:	b2c9      	uxtb	r1, r1
   10f02:	4696      	mov	lr, r2
   10f04:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   10f08:	4566      	cmp	r6, ip
   10f0a:	d119      	bne.n	10f40 <get+0xb4>
   10f0c:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   10f0e:	2900      	cmp	r1, #0
   10f10:	d0d6      	beq.n	10ec0 <get+0x34>
   10f12:	2c00      	cmp	r4, #0
   10f14:	d0d4      	beq.n	10ec0 <get+0x34>
			if (octets < last) {
   10f16:	428c      	cmp	r4, r1
   10f18:	bf8a      	itet	hi
   10f1a:	460b      	movhi	r3, r1
   10f1c:	4623      	movls	r3, r4
				remaining = last - octets;
   10f1e:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   10f20:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   10f24:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   10f28:	bf8c      	ite	hi
   10f2a:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   10f2c:	2700      	movls	r7, #0
			octets -= last;
   10f2e:	b2c9      	uxtb	r1, r1
   10f30:	18f4      	adds	r4, r6, r3
			while (last--) {
   10f32:	42a6      	cmp	r6, r4
   10f34:	d0c4      	beq.n	10ec0 <get+0x34>
				*(--d) = *s++;
   10f36:	f816 5b01 	ldrb.w	r5, [r6], #1
   10f3a:	f802 5d01 	strb.w	r5, [r2, #-1]!
   10f3e:	e7f8      	b.n	10f32 <get+0xa6>
			*(--d) = *s++;
   10f40:	f816 8b01 	ldrb.w	r8, [r6], #1
   10f44:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   10f48:	e7de      	b.n	10f08 <get+0x7c>
   10f4a:	bf00      	nop
   10f4c:	4000d000 	.word	0x4000d000

00010f50 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   10f50:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   10f52:	b1d0      	cbz	r0, 10f8a <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   10f54:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   10f56:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   10f58:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   10f5a:	1c53      	adds	r3, r2, #1
   10f5c:	b2db      	uxtb	r3, r3
		last = 0;
   10f5e:	42ab      	cmp	r3, r5
   10f60:	bf08      	it	eq
   10f62:	2300      	moveq	r3, #0
	if (last == rng->first) {
   10f64:	42a3      	cmp	r3, r4
   10f66:	d010      	beq.n	10f8a <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   10f68:	b161      	cbz	r1, 10f84 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   10f6a:	490a      	ldr	r1, [pc, #40]	; (10f94 <isr+0x44>)
   10f6c:	4402      	add	r2, r0
   10f6e:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   10f72:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   10f74:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   10f76:	3301      	adds	r3, #1
   10f78:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   10f7a:	429d      	cmp	r5, r3
   10f7c:	bf08      	it	eq
   10f7e:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   10f80:	42a3      	cmp	r3, r4
   10f82:	d005      	beq.n	10f90 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   10f84:	f06f 000f 	mvn.w	r0, #15
   10f88:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   10f8a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10f8e:	bd30      	pop	{r4, r5, pc}
		return 0;
   10f90:	2000      	movs	r0, #0
}
   10f92:	bd30      	pop	{r4, r5, pc}
   10f94:	4000d000 	.word	0x4000d000

00010f98 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   10f98:	07db      	lsls	r3, r3, #31
{
   10f9a:	b570      	push	{r4, r5, r6, lr}
   10f9c:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   10f9e:	d507      	bpl.n	10fb0 <entropy_nrf5_get_entropy_isr+0x18>
   10fa0:	4613      	mov	r3, r2
   10fa2:	4a0d      	ldr	r2, [pc, #52]	; (10fd8 <entropy_nrf5_get_entropy_isr+0x40>)
   10fa4:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   10fa6:	2500      	movs	r5, #0
	while (len) {
   10fa8:	b94b      	cbnz	r3, 10fbe <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   10faa:	6050      	str	r0, [r2, #4]

	return cnt;
   10fac:	4620      	mov	r0, r4
}
   10fae:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   10fb0:	6880      	ldr	r0, [r0, #8]
   10fb2:	460a      	mov	r2, r1
   10fb4:	303c      	adds	r0, #60	; 0x3c
   10fb6:	b2e1      	uxtb	r1, r4
   10fb8:	f7ff ff68 	bl	10e8c <get>
   10fbc:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   10fbe:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   10fc2:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   10fc4:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   10fc8:	2e00      	cmp	r6, #0
   10fca:	d0fb      	beq.n	10fc4 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   10fcc:	3b01      	subs	r3, #1
   10fce:	b29b      	uxth	r3, r3
   10fd0:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   10fd4:	54ce      	strb	r6, [r1, r3]
   10fd6:	e7e7      	b.n	10fa8 <entropy_nrf5_get_entropy_isr+0x10>
   10fd8:	4000d000 	.word	0x4000d000

00010fdc <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   10fdc:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   10fde:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   10fe0:	2201      	movs	r2, #1
   10fe2:	4611      	mov	r1, r2
   10fe4:	4620      	mov	r0, r4
   10fe6:	f000 fd7f 	bl	11ae8 <_impl_k_sem_init>
   10fea:	f104 0018 	add.w	r0, r4, #24
   10fee:	2201      	movs	r2, #1
   10ff0:	2100      	movs	r1, #0
   10ff2:	f000 fd79 	bl	11ae8 <_impl_k_sem_init>
	rng->threshold = threshold;
   10ff6:	2304      	movs	r3, #4
   10ff8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   10ffc:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   10ffe:	2500      	movs	r5, #0
	rng->threshold = threshold;
   11000:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   11004:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   11006:	4b11      	ldr	r3, [pc, #68]	; (1104c <entropy_nrf5_init+0x70>)
	rng->count = len;
   11008:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   1100c:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   1100e:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   11012:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   11016:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   1101a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   1101e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   11022:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   11026:	f042 0201 	orr.w	r2, r2, #1
   1102a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1102e:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   11030:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   11034:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   11036:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   1103a:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   1103c:	462a      	mov	r2, r5
   1103e:	f7f0 fc3d 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   11042:	4630      	mov	r0, r6
   11044:	f7f0 fc08 	bl	1858 <_arch_irq_enable>

	return 0;
}
   11048:	4628      	mov	r0, r5
   1104a:	bd70      	pop	{r4, r5, r6, pc}
   1104c:	4000d000 	.word	0x4000d000

00011050 <isr_rand>:
{
   11050:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   11052:	4b12      	ldr	r3, [pc, #72]	; (1109c <isr_rand+0x4c>)
   11054:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11058:	b1fb      	cbz	r3, 1109a <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1105a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   1105c:	2101      	movs	r1, #1
   1105e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   11062:	f7ff ff75 	bl	10f50 <isr>
		if (ret != -EBUSY) {
   11066:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   1106a:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   1106c:	d00d      	beq.n	1108a <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   1106e:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   11072:	bf14      	ite	ne
   11074:	2100      	movne	r1, #0
   11076:	2101      	moveq	r1, #1
   11078:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1107c:	f7ff ff68 	bl	10f50 <isr>
   11080:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   11082:	f105 0018 	add.w	r0, r5, #24
   11086:	f000 fd38 	bl	11afa <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   1108a:	4b04      	ldr	r3, [pc, #16]	; (1109c <isr_rand+0x4c>)
   1108c:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   1108e:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   11090:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   11094:	bf1c      	itt	ne
   11096:	2201      	movne	r2, #1
   11098:	605a      	strne	r2, [r3, #4]
   1109a:	bd38      	pop	{r3, r4, r5, pc}
   1109c:	4000d000 	.word	0x4000d000

000110a0 <entropy_nrf5_get_entropy>:
{
   110a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   110a4:	6885      	ldr	r5, [r0, #8]
{
   110a6:	460f      	mov	r7, r1
   110a8:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   110aa:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   110ae:	b914      	cbnz	r4, 110b6 <entropy_nrf5_get_entropy+0x16>
}
   110b0:	4620      	mov	r0, r4
   110b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   110b6:	2cff      	cmp	r4, #255	; 0xff
   110b8:	4623      	mov	r3, r4
   110ba:	bf28      	it	cs
   110bc:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   110be:	1ae4      	subs	r4, r4, r3
   110c0:	b2de      	uxtb	r6, r3
   110c2:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   110c4:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   110c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   110cc:	4628      	mov	r0, r5
   110ce:	f000 fd3c 	bl	11b4a <_impl_k_sem_take>
   110d2:	4631      	mov	r1, r6
   110d4:	463a      	mov	r2, r7
   110d6:	4648      	mov	r0, r9
   110d8:	f7ff fed8 	bl	10e8c <get>
   110dc:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   110de:	4628      	mov	r0, r5
   110e0:	f000 fd0b 	bl	11afa <_impl_k_sem_give>
			if (len8) {
   110e4:	2e00      	cmp	r6, #0
   110e6:	d0e2      	beq.n	110ae <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   110e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   110ec:	4640      	mov	r0, r8
   110ee:	f000 fd2c 	bl	11b4a <_impl_k_sem_take>
   110f2:	e7e9      	b.n	110c8 <entropy_nrf5_get_entropy+0x28>

000110f4 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   110f4:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   110f6:	4802      	ldr	r0, [pc, #8]	; (11100 <entropy_nrf_get_entropy_isr+0xc>)
   110f8:	460a      	mov	r2, r1
   110fa:	4619      	mov	r1, r3
   110fc:	f7ff bec6 	b.w	10e8c <get>
   11100:	200014dc 	.word	0x200014dc

00011104 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   11104:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   11106:	4b08      	ldr	r3, [pc, #32]	; (11128 <_sys_device_do_config_level+0x24>)
   11108:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1110c:	3001      	adds	r0, #1
   1110e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   11112:	4620      	mov	r0, r4
   11114:	42a8      	cmp	r0, r5
   11116:	f104 040c 	add.w	r4, r4, #12
   1111a:	d300      	bcc.n	1111e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   1111c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   1111e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   11122:	685b      	ldr	r3, [r3, #4]
   11124:	4798      	blx	r3
   11126:	e7f4      	b.n	11112 <_sys_device_do_config_level+0xe>
   11128:	00012d94 	.word	0x00012d94

0001112c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1112c:	4b10      	ldr	r3, [pc, #64]	; (11170 <device_get_binding+0x44>)
{
   1112e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   11130:	4c10      	ldr	r4, [pc, #64]	; (11174 <device_get_binding+0x48>)
{
   11132:	4605      	mov	r5, r0
   11134:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   11136:	429c      	cmp	r4, r3
   11138:	d104      	bne.n	11144 <device_get_binding+0x18>
   1113a:	4c0e      	ldr	r4, [pc, #56]	; (11174 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1113c:	42b4      	cmp	r4, r6
   1113e:	d109      	bne.n	11154 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   11140:	2400      	movs	r4, #0
   11142:	e012      	b.n	1116a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   11144:	6862      	ldr	r2, [r4, #4]
   11146:	b11a      	cbz	r2, 11150 <device_get_binding+0x24>
   11148:	6822      	ldr	r2, [r4, #0]
   1114a:	6812      	ldr	r2, [r2, #0]
   1114c:	42aa      	cmp	r2, r5
   1114e:	d00c      	beq.n	1116a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   11150:	340c      	adds	r4, #12
   11152:	e7f0      	b.n	11136 <device_get_binding+0xa>
		if (!info->driver_api) {
   11154:	6863      	ldr	r3, [r4, #4]
   11156:	b90b      	cbnz	r3, 1115c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   11158:	340c      	adds	r4, #12
   1115a:	e7ef      	b.n	1113c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   1115c:	6823      	ldr	r3, [r4, #0]
   1115e:	4628      	mov	r0, r5
   11160:	6819      	ldr	r1, [r3, #0]
   11162:	f7f0 fd29 	bl	1bb8 <strcmp>
   11166:	2800      	cmp	r0, #0
   11168:	d1f6      	bne.n	11158 <device_get_binding+0x2c>
}
   1116a:	4620      	mov	r0, r4
   1116c:	bd70      	pop	{r4, r5, r6, pc}
   1116e:	bf00      	nop
   11170:	20003924 	.word	0x20003924
   11174:	20003894 	.word	0x20003894

00011178 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   11178:	1c43      	adds	r3, r0, #1
   1117a:	d003      	beq.n	11184 <_sys_power_save_idle_exit+0xc>
   1117c:	4b03      	ldr	r3, [pc, #12]	; (1118c <_sys_power_save_idle_exit+0x14>)
   1117e:	681b      	ldr	r3, [r3, #0]
   11180:	4298      	cmp	r0, r3
   11182:	db01      	blt.n	11188 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   11184:	f7f0 b930 	b.w	13e8 <_timer_idle_exit>
   11188:	4770      	bx	lr
   1118a:	bf00      	nop
   1118c:	20003888 	.word	0x20003888

00011190 <idle>:
	return list->head == list;
   11190:	4d0f      	ldr	r5, [pc, #60]	; (111d0 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   11192:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   11194:	4f0f      	ldr	r7, [pc, #60]	; (111d4 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11196:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   1119a:	f04f 0220 	mov.w	r2, #32
   1119e:	f3ef 8311 	mrs	r3, BASEPRI
   111a2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   111a6:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   111a8:	42b3      	cmp	r3, r6
   111aa:	d00a      	beq.n	111c2 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   111ac:	b14b      	cbz	r3, 111c2 <idle+0x32>
   111ae:	691c      	ldr	r4, [r3, #16]
   111b0:	1c63      	adds	r3, r4, #1
   111b2:	d008      	beq.n	111c6 <idle+0x36>
   111b4:	683b      	ldr	r3, [r7, #0]
   111b6:	42a3      	cmp	r3, r4
   111b8:	dd05      	ble.n	111c6 <idle+0x36>
	_kernel.idle = ticks;
   111ba:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   111bc:	f7f0 fbd4 	bl	1968 <k_cpu_idle>
   111c0:	e7eb      	b.n	1119a <idle+0xa>
   111c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   111c6:	4620      	mov	r0, r4
   111c8:	f7f0 f8f0 	bl	13ac <_timer_idle_enter>
   111cc:	e7f5      	b.n	111ba <idle+0x2a>
   111ce:	bf00      	nop
   111d0:	200016f0 	.word	0x200016f0
   111d4:	20003888 	.word	0x20003888

000111d8 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   111d8:	4802      	ldr	r0, [pc, #8]	; (111e4 <_bss_zero+0xc>)
   111da:	4a03      	ldr	r2, [pc, #12]	; (111e8 <_bss_zero+0x10>)
   111dc:	2100      	movs	r1, #0
   111de:	1a12      	subs	r2, r2, r0
   111e0:	f7f0 bd38 	b.w	1c54 <memset>
   111e4:	20000000 	.word	0x20000000
   111e8:	200017b0 	.word	0x200017b0

000111ec <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   111ec:	4802      	ldr	r0, [pc, #8]	; (111f8 <_data_copy+0xc>)
   111ee:	4a03      	ldr	r2, [pc, #12]	; (111fc <_data_copy+0x10>)
   111f0:	4903      	ldr	r1, [pc, #12]	; (11200 <_data_copy+0x14>)
   111f2:	1a12      	subs	r2, r2, r0
   111f4:	f7f0 bd02 	b.w	1bfc <memcpy>
   111f8:	20003440 	.word	0x20003440
   111fc:	200039cc 	.word	0x200039cc
   11200:	00012de4 	.word	0x00012de4

00011204 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   11204:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   11206:	2002      	movs	r0, #2
   11208:	f7ff ff7c 	bl	11104 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   1120c:	4807      	ldr	r0, [pc, #28]	; (1122c <bg_thread_main+0x28>)
   1120e:	f7ef febd 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   11212:	2003      	movs	r0, #3
   11214:	f7ff ff76 	bl	11104 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   11218:	f000 feaa 	bl	11f70 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1121c:	f7ef fa50 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   11220:	4a03      	ldr	r2, [pc, #12]	; (11230 <bg_thread_main+0x2c>)
   11222:	7a13      	ldrb	r3, [r2, #8]
   11224:	f023 0301 	bic.w	r3, r3, #1
   11228:	7213      	strb	r3, [r2, #8]
   1122a:	bd08      	pop	{r3, pc}
   1122c:	00012db0 	.word	0x00012db0
   11230:	20001560 	.word	0x20001560

00011234 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   11234:	b580      	push	{r7, lr}
   11236:	b086      	sub	sp, #24
   11238:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   1123a:	f7f0 f959 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1123e:	4b30      	ldr	r3, [pc, #192]	; (11300 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   11240:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11244:	4b2f      	ldr	r3, [pc, #188]	; (11304 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   11246:	4d30      	ldr	r5, [pc, #192]	; (11308 <_Cstart+0xd4>)
   11248:	4e30      	ldr	r6, [pc, #192]	; (1130c <_Cstart+0xd8>)
   1124a:	2400      	movs	r4, #0
   1124c:	22e0      	movs	r2, #224	; 0xe0
   1124e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   11252:	77dc      	strb	r4, [r3, #31]
   11254:	761c      	strb	r4, [r3, #24]
   11256:	765c      	strb	r4, [r3, #25]
   11258:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1125a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1125c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   11260:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   11262:	f7f0 faf1 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   11266:	f7f0 fb79 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1126a:	4620      	mov	r0, r4
   1126c:	f7ff ff4a 	bl	11104 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   11270:	2001      	movs	r0, #1
   11272:	f7ff ff47 	bl	11104 <_sys_device_do_config_level>
	_sched_init();
   11276:	f000 fbf9 	bl	11a6c <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   1127a:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   1127c:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   1127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11282:	9304      	str	r3, [sp, #16]
   11284:	9403      	str	r4, [sp, #12]
   11286:	9402      	str	r4, [sp, #8]
   11288:	9401      	str	r4, [sp, #4]
   1128a:	9400      	str	r4, [sp, #0]
   1128c:	4b20      	ldr	r3, [pc, #128]	; (11310 <_Cstart+0xdc>)
   1128e:	4921      	ldr	r1, [pc, #132]	; (11314 <_Cstart+0xe0>)
   11290:	4628      	mov	r0, r5
   11292:	f000 fe15 	bl	11ec0 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11296:	7a6b      	ldrb	r3, [r5, #9]
   11298:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   1129c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   112a0:	726a      	strb	r2, [r5, #9]
   112a2:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   112a4:	d102      	bne.n	112ac <_Cstart+0x78>
   112a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   112a8:	3301      	adds	r3, #1
   112aa:	d024      	beq.n	112f6 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   112ac:	2301      	movs	r3, #1
   112ae:	4e1a      	ldr	r6, [pc, #104]	; (11318 <_Cstart+0xe4>)
   112b0:	9304      	str	r3, [sp, #16]
   112b2:	230f      	movs	r3, #15
   112b4:	9303      	str	r3, [sp, #12]
   112b6:	2300      	movs	r3, #0
   112b8:	9302      	str	r3, [sp, #8]
   112ba:	9301      	str	r3, [sp, #4]
   112bc:	9300      	str	r3, [sp, #0]
   112be:	f44f 72a0 	mov.w	r2, #320	; 0x140
   112c2:	4b16      	ldr	r3, [pc, #88]	; (1131c <_Cstart+0xe8>)
   112c4:	4916      	ldr	r1, [pc, #88]	; (11320 <_Cstart+0xec>)
   112c6:	4630      	mov	r0, r6
   112c8:	f000 fdfa 	bl	11ec0 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   112cc:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   112ce:	60e6      	str	r6, [r4, #12]
   112d0:	f023 0304 	bic.w	r3, r3, #4
   112d4:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   112d6:	4b13      	ldr	r3, [pc, #76]	; (11324 <_Cstart+0xf0>)
   112d8:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   112da:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   112dc:	4b12      	ldr	r3, [pc, #72]	; (11328 <_Cstart+0xf4>)

	_current = main_thread;
   112de:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   112e0:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   112e4:	4c11      	ldr	r4, [pc, #68]	; (1132c <_Cstart+0xf8>)
   112e6:	4a0a      	ldr	r2, [pc, #40]	; (11310 <_Cstart+0xdc>)
   112e8:	f383 8809 	msr	PSP, r3
   112ec:	2100      	movs	r1, #0
   112ee:	f381 8811 	msr	BASEPRI, r1
   112f2:	4610      	mov	r0, r2
   112f4:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   112f6:	4628      	mov	r0, r5
   112f8:	f000 fab4 	bl	11864 <_add_thread_to_ready_q>
   112fc:	e7d6      	b.n	112ac <_Cstart+0x78>
   112fe:	bf00      	nop
   11300:	20003040 	.word	0x20003040
   11304:	e000ed00 	.word	0xe000ed00
   11308:	20001560 	.word	0x20001560
   1130c:	200016f0 	.word	0x200016f0
   11310:	00011205 	.word	0x00011205
   11314:	20002300 	.word	0x20002300
   11318:	200014f0 	.word	0x200014f0
   1131c:	00011191 	.word	0x00011191
   11320:	20002700 	.word	0x20002700
   11324:	20001704 	.word	0x20001704
   11328:	20002700 	.word	0x20002700
   1132c:	00000899 	.word	0x00000899

00011330 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   11330:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   11332:	4c07      	ldr	r4, [pc, #28]	; (11350 <init_static_pools+0x20>)
   11334:	4d07      	ldr	r5, [pc, #28]	; (11354 <init_static_pools+0x24>)
   11336:	42ac      	cmp	r4, r5
   11338:	d301      	bcc.n	1133e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1133a:	2000      	movs	r0, #0
   1133c:	bd38      	pop	{r3, r4, r5, pc}
   1133e:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   11342:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   11344:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   11346:	4620      	mov	r0, r4
   11348:	f7ef fae1 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1134c:	341c      	adds	r4, #28
   1134e:	e7f2      	b.n	11336 <init_static_pools+0x6>
   11350:	20003924 	.word	0x20003924
   11354:	20003924 	.word	0x20003924

00011358 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   11358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1135c:	1e1d      	subs	r5, r3, #0
{
   1135e:	b085      	sub	sp, #20
   11360:	4607      	mov	r7, r0
   11362:	460c      	mov	r4, r1
   11364:	4692      	mov	sl, r2
	if (timeout > 0) {
   11366:	dd4c      	ble.n	11402 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   11368:	f000 fc16 	bl	11b98 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1136c:	f105 0309 	add.w	r3, r5, #9
   11370:	220a      	movs	r2, #10
   11372:	fbb3 f3f2 	udiv	r3, r3, r2
   11376:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   1137a:	4b23      	ldr	r3, [pc, #140]	; (11408 <k_mem_pool_alloc+0xb0>)
   1137c:	4e23      	ldr	r6, [pc, #140]	; (1140c <k_mem_pool_alloc+0xb4>)
   1137e:	1afb      	subs	r3, r7, r3
   11380:	109b      	asrs	r3, r3, #2
   11382:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   11384:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   11386:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1138a:	9400      	str	r4, [sp, #0]
   1138c:	ab03      	add	r3, sp, #12
   1138e:	aa02      	add	r2, sp, #8
   11390:	4651      	mov	r1, sl
   11392:	4638      	mov	r0, r7
   11394:	f7ef fb06 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   11398:	f110 0f0b 	cmn.w	r0, #11
   1139c:	d10b      	bne.n	113b6 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1139e:	9400      	str	r4, [sp, #0]
   113a0:	ab03      	add	r3, sp, #12
   113a2:	aa02      	add	r2, sp, #8
   113a4:	4651      	mov	r1, sl
   113a6:	4638      	mov	r0, r7
   113a8:	f7ef fafc 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   113ac:	f110 0f0b 	cmn.w	r0, #11
   113b0:	bf08      	it	eq
   113b2:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   113b6:	7963      	ldrb	r3, [r4, #5]
   113b8:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   113ba:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   113bc:	f362 0303 	bfi	r3, r2, #0, #4
   113c0:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   113c2:	6863      	ldr	r3, [r4, #4]
   113c4:	9a03      	ldr	r2, [sp, #12]
   113c6:	f362 331f 	bfi	r3, r2, #12, #20
   113ca:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   113cc:	b1b0      	cbz	r0, 113fc <k_mem_pool_alloc+0xa4>
   113ce:	b1ad      	cbz	r5, 113fc <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   113d0:	f110 0f0c 	cmn.w	r0, #12
   113d4:	d112      	bne.n	113fc <k_mem_pool_alloc+0xa4>
   113d6:	f04f 0320 	mov.w	r3, #32
   113da:	f3ef 8011 	mrs	r0, BASEPRI
   113de:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   113e2:	462a      	mov	r2, r5
   113e4:	4659      	mov	r1, fp
   113e6:	f000 faeb 	bl	119c0 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   113ea:	1c6b      	adds	r3, r5, #1
   113ec:	d0cd      	beq.n	1138a <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   113ee:	f000 fbd3 	bl	11b98 <_tick_get>

			if (timeout < 0) {
   113f2:	ebb8 0500 	subs.w	r5, r8, r0
   113f6:	d5c8      	bpl.n	1138a <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   113f8:	f06f 000a 	mvn.w	r0, #10
}
   113fc:	b005      	add	sp, #20
   113fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   11402:	f04f 0800 	mov.w	r8, #0
   11406:	e7b8      	b.n	1137a <k_mem_pool_alloc+0x22>
   11408:	20003924 	.word	0x20003924
   1140c:	b6db6db7 	.word	0xb6db6db7

00011410 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   11410:	b570      	push	{r4, r5, r6, lr}
   11412:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   11414:	6802      	ldr	r2, [r0, #0]
   11416:	7841      	ldrb	r1, [r0, #1]
   11418:	4e13      	ldr	r6, [pc, #76]	; (11468 <k_mem_pool_free_id+0x58>)
   1141a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1141e:	00a4      	lsls	r4, r4, #2
   11420:	0b12      	lsrs	r2, r2, #12
   11422:	f001 010f 	and.w	r1, r1, #15
   11426:	1930      	adds	r0, r6, r4
   11428:	f7ef fb6e 	bl	b08 <_sys_mem_pool_block_free>
   1142c:	f04f 0320 	mov.w	r3, #32
   11430:	f3ef 8511 	mrs	r5, BASEPRI
   11434:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   11438:	f104 0014 	add.w	r0, r4, #20
   1143c:	4430      	add	r0, r6
   1143e:	f000 fb05 	bl	11a4c <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   11442:	b140      	cbz	r0, 11456 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11444:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   11448:	2b0d      	cmp	r3, #13
   1144a:	d804      	bhi.n	11456 <k_mem_pool_free_id+0x46>
   1144c:	b133      	cbz	r3, 1145c <k_mem_pool_free_id+0x4c>
   1144e:	4b07      	ldr	r3, [pc, #28]	; (1146c <k_mem_pool_free_id+0x5c>)
   11450:	685b      	ldr	r3, [r3, #4]
   11452:	051b      	lsls	r3, r3, #20
   11454:	d402      	bmi.n	1145c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11456:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1145a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   1145c:	4628      	mov	r0, r5
}
   1145e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   11462:	f000 b9a7 	b.w	117b4 <_reschedule>
   11466:	bf00      	nop
   11468:	20003924 	.word	0x20003924
   1146c:	e000ed00 	.word	0xe000ed00

00011470 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   11470:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   11472:	1d0a      	adds	r2, r1, #4
   11474:	d204      	bcs.n	11480 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   11476:	2300      	movs	r3, #0
   11478:	4669      	mov	r1, sp
   1147a:	f7ff ff6d 	bl	11358 <k_mem_pool_alloc>
   1147e:	b118      	cbz	r0, 11488 <k_mem_pool_malloc+0x18>
		return NULL;
   11480:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   11482:	b003      	add	sp, #12
   11484:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   11488:	2204      	movs	r2, #4
   1148a:	eb0d 0102 	add.w	r1, sp, r2
   1148e:	9800      	ldr	r0, [sp, #0]
   11490:	f7f0 fbb4 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   11494:	9800      	ldr	r0, [sp, #0]
   11496:	3004      	adds	r0, #4
   11498:	e7f3      	b.n	11482 <k_mem_pool_malloc+0x12>

0001149a <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   1149a:	b110      	cbz	r0, 114a2 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   1149c:	3804      	subs	r0, #4
   1149e:	f7ff bfb7 	b.w	11410 <k_mem_pool_free_id>
   114a2:	4770      	bx	lr

000114a4 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   114a4:	4b03      	ldr	r3, [pc, #12]	; (114b4 <z_thread_malloc+0x10>)
   114a6:	689b      	ldr	r3, [r3, #8]
{
   114a8:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   114aa:	6e58      	ldr	r0, [r3, #100]	; 0x64
   114ac:	b108      	cbz	r0, 114b2 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   114ae:	f7ff bfdf 	b.w	11470 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   114b2:	4770      	bx	lr
   114b4:	200016f0 	.word	0x200016f0

000114b8 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   114b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114ba:	4605      	mov	r5, r0
   114bc:	460f      	mov	r7, r1
   114be:	4614      	mov	r4, r2
	__asm__ volatile(
   114c0:	f04f 0220 	mov.w	r2, #32
   114c4:	f3ef 8611 	mrs	r6, BASEPRI
   114c8:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   114cc:	b1a3      	cbz	r3, 114f8 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   114ce:	2008      	movs	r0, #8
   114d0:	f7ff ffe8 	bl	114a4 <z_thread_malloc>
		if (!anode) {
   114d4:	2800      	cmp	r0, #0
   114d6:	d034      	beq.n	11542 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   114d8:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   114da:	6044      	str	r4, [r0, #4]
   114dc:	6003      	str	r3, [r0, #0]
   114de:	4604      	mov	r4, r0
   114e0:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   114e2:	b95f      	cbnz	r7, 114fc <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   114e4:	682a      	ldr	r2, [r5, #0]
   114e6:	f003 0303 	and.w	r3, r3, #3
   114ea:	4313      	orrs	r3, r2
   114ec:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   114ee:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   114f0:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   114f2:	b973      	cbnz	r3, 11512 <queue_insert+0x5a>
	list->tail = node;
   114f4:	606c      	str	r4, [r5, #4]
   114f6:	e00c      	b.n	11512 <queue_insert+0x5a>
	node->next_and_flags = flags;
   114f8:	6023      	str	r3, [r4, #0]
   114fa:	e7f1      	b.n	114e0 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   114fc:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   114fe:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   11502:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   11506:	d114      	bne.n	11532 <queue_insert+0x7a>
   11508:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1150a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   1150c:	b95a      	cbnz	r2, 11526 <queue_insert+0x6e>
	list->tail = node;
   1150e:	606c      	str	r4, [r5, #4]
	list->head = node;
   11510:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   11512:	2104      	movs	r1, #4
   11514:	f105 0008 	add.w	r0, r5, #8
   11518:	f000 ffb4 	bl	12484 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   1151c:	4630      	mov	r0, r6
   1151e:	f000 f949 	bl	117b4 <_reschedule>
	return 0;
   11522:	2000      	movs	r0, #0
   11524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11526:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11528:	f003 0303 	and.w	r3, r3, #3
   1152c:	4323      	orrs	r3, r4
   1152e:	6013      	str	r3, [r2, #0]
   11530:	e7e0      	b.n	114f4 <queue_insert+0x3c>
   11532:	4313      	orrs	r3, r2
   11534:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11536:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11538:	f002 0203 	and.w	r2, r2, #3
   1153c:	4314      	orrs	r4, r2
   1153e:	603c      	str	r4, [r7, #0]
   11540:	e7e7      	b.n	11512 <queue_insert+0x5a>
			return -ENOMEM;
   11542:	f06f 000b 	mvn.w	r0, #11
}
   11546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011548 <z_queue_node_peek>:
{
   11548:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   1154a:	4604      	mov	r4, r0
   1154c:	b130      	cbz	r0, 1155c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1154e:	6802      	ldr	r2, [r0, #0]
   11550:	0793      	lsls	r3, r2, #30
   11552:	d003      	beq.n	1155c <z_queue_node_peek+0x14>
		ret = anode->data;
   11554:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   11556:	b109      	cbz	r1, 1155c <z_queue_node_peek+0x14>
			k_free(anode);
   11558:	f7ff ff9f 	bl	1149a <k_free>
}
   1155c:	4620      	mov	r0, r4
   1155e:	bd10      	pop	{r4, pc}

00011560 <_impl_k_queue_init>:
	list->head = NULL;
   11560:	2300      	movs	r3, #0
   11562:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   11564:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   11566:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1156a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1156c:	60c3      	str	r3, [r0, #12]
   1156e:	4770      	bx	lr

00011570 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   11570:	460a      	mov	r2, r1
   11572:	2300      	movs	r3, #0
   11574:	6841      	ldr	r1, [r0, #4]
   11576:	f7ff bf9f 	b.w	114b8 <queue_insert>

0001157a <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   1157a:	2300      	movs	r3, #0
   1157c:	460a      	mov	r2, r1
   1157e:	4619      	mov	r1, r3
   11580:	f7ff bf9a 	b.w	114b8 <queue_insert>

00011584 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   11584:	b538      	push	{r3, r4, r5, lr}
   11586:	f04f 0320 	mov.w	r3, #32
   1158a:	f3ef 8511 	mrs	r5, BASEPRI
   1158e:	f383 8811 	msr	BASEPRI, r3
   11592:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   11594:	b953      	cbnz	r3, 115ac <k_queue_append_list+0x28>
	list->head = node;
   11596:	6001      	str	r1, [r0, #0]
	list->tail = node;
   11598:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   1159a:	2104      	movs	r1, #4
   1159c:	3008      	adds	r0, #8
   1159e:	f000 ff71 	bl	12484 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   115a2:	4628      	mov	r0, r5
}
   115a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   115a8:	f000 b904 	b.w	117b4 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   115ac:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   115ae:	f004 0403 	and.w	r4, r4, #3
   115b2:	4321      	orrs	r1, r4
   115b4:	6019      	str	r1, [r3, #0]
   115b6:	e7ef      	b.n	11598 <k_queue_append_list+0x14>

000115b8 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   115b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115bc:	4604      	mov	r4, r0
   115be:	b086      	sub	sp, #24
   115c0:	460d      	mov	r5, r1
   115c2:	f04f 0320 	mov.w	r3, #32
   115c6:	f3ef 8711 	mrs	r7, BASEPRI
   115ca:	f383 8811 	msr	BASEPRI, r3
   115ce:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   115d0:	b182      	cbz	r2, 115f4 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   115d2:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   115d4:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   115d6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   115da:	428a      	cmp	r2, r1
	list->head = node;
   115dc:	6003      	str	r3, [r0, #0]
	list->tail = node;
   115de:	bf08      	it	eq
   115e0:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   115e2:	2101      	movs	r1, #1
   115e4:	4610      	mov	r0, r2
   115e6:	f7ff ffaf 	bl	11548 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   115ea:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   115ee:	b006      	add	sp, #24
   115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   115f4:	b919      	cbnz	r1, 115fe <_impl_k_queue_get+0x46>
   115f6:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   115fa:	2000      	movs	r0, #0
   115fc:	e7f7      	b.n	115ee <_impl_k_queue_get+0x36>
   115fe:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   11602:	2104      	movs	r1, #4
   11604:	4603      	mov	r3, r0
   11606:	eb0d 0001 	add.w	r0, sp, r1
   1160a:	f000 fea4 	bl	12356 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1160e:	1c6a      	adds	r2, r5, #1
   11610:	d002      	beq.n	11618 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   11612:	f000 fab7 	bl	11b84 <_impl_k_uptime_get_32>
   11616:	4606      	mov	r6, r0
{
   11618:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1161a:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   1161e:	1bea      	subs	r2, r5, r7
   11620:	f36f 1307 	bfc	r3, #4, #4
   11624:	2101      	movs	r1, #1
   11626:	a801      	add	r0, sp, #4
   11628:	f88d 3011 	strb.w	r3, [sp, #17]
   1162c:	f000 fea6 	bl	1237c <_impl_k_poll>
		if (err && err != -EAGAIN) {
   11630:	b108      	cbz	r0, 11636 <_impl_k_queue_get+0x7e>
   11632:	300b      	adds	r0, #11
   11634:	d1e1      	bne.n	115fa <_impl_k_queue_get+0x42>
	__asm__ volatile(
   11636:	f04f 0320 	mov.w	r3, #32
   1163a:	f3ef 8811 	mrs	r8, BASEPRI
   1163e:	f383 8811 	msr	BASEPRI, r3
   11642:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   11644:	b138      	cbz	r0, 11656 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   11646:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   11648:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1164a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1164e:	4290      	cmp	r0, r2
	list->head = node;
   11650:	6023      	str	r3, [r4, #0]
	list->tail = node;
   11652:	bf08      	it	eq
   11654:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   11656:	2101      	movs	r1, #1
   11658:	f7ff ff76 	bl	11548 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1165c:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   11660:	2800      	cmp	r0, #0
   11662:	d1c4      	bne.n	115ee <_impl_k_queue_get+0x36>
   11664:	1c6b      	adds	r3, r5, #1
   11666:	d0d8      	beq.n	1161a <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   11668:	f000 fa8c 	bl	11b84 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   1166c:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1166e:	42bd      	cmp	r5, r7
   11670:	dad3      	bge.n	1161a <_impl_k_queue_get+0x62>
   11672:	e7c2      	b.n	115fa <_impl_k_queue_get+0x42>

00011674 <sys_dlist_remove>:
	node->prev->next = node->next;
   11674:	e890 000c 	ldmia.w	r0, {r2, r3}
   11678:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1167a:	6802      	ldr	r2, [r0, #0]
   1167c:	6053      	str	r3, [r2, #4]
   1167e:	4770      	bx	lr

00011680 <_abort_timeout>:
{
   11680:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11682:	6900      	ldr	r0, [r0, #16]
{
   11684:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11686:	1c43      	adds	r3, r0, #1
   11688:	d00e      	beq.n	116a8 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1168a:	4b08      	ldr	r3, [pc, #32]	; (116ac <_abort_timeout+0x2c>)
   1168c:	699b      	ldr	r3, [r3, #24]
   1168e:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   11690:	bf1f      	itttt	ne
   11692:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11694:	6913      	ldrne	r3, [r2, #16]
   11696:	18c0      	addne	r0, r0, r3
   11698:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   1169a:	4608      	mov	r0, r1
   1169c:	f7ff ffea 	bl	11674 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   116a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116a4:	610b      	str	r3, [r1, #16]
	return 0;
   116a6:	2000      	movs	r0, #0
}
   116a8:	bd08      	pop	{r3, pc}
   116aa:	bf00      	nop
   116ac:	200016f0 	.word	0x200016f0

000116b0 <k_spin_lock.isra.11>:
	__asm__ volatile(
   116b0:	f04f 0320 	mov.w	r3, #32
   116b4:	f3ef 8011 	mrs	r0, BASEPRI
   116b8:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   116bc:	4770      	bx	lr
	...

000116c0 <update_cache>:
	return list->head == list;
   116c0:	4b0d      	ldr	r3, [pc, #52]	; (116f8 <update_cache+0x38>)
   116c2:	4619      	mov	r1, r3
   116c4:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116c8:	428a      	cmp	r2, r1
   116ca:	d000      	beq.n	116ce <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   116cc:	b902      	cbnz	r2, 116d0 <update_cache+0x10>
   116ce:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   116d0:	b970      	cbnz	r0, 116f0 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   116d2:	6899      	ldr	r1, [r3, #8]
   116d4:	b161      	cbz	r1, 116f0 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   116d6:	7a48      	ldrb	r0, [r1, #9]
   116d8:	06c0      	lsls	r0, r0, #27
   116da:	d109      	bne.n	116f0 <update_cache+0x30>
   116dc:	6a48      	ldr	r0, [r1, #36]	; 0x24
   116de:	3001      	adds	r0, #1
   116e0:	d106      	bne.n	116f0 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   116e2:	8948      	ldrh	r0, [r1, #10]
   116e4:	287f      	cmp	r0, #127	; 0x7f
   116e6:	d903      	bls.n	116f0 <update_cache+0x30>
	return thread == _idle_thread;
   116e8:	4804      	ldr	r0, [pc, #16]	; (116fc <update_cache+0x3c>)
	if (_is_idle(_current)) {
   116ea:	6800      	ldr	r0, [r0, #0]
   116ec:	4281      	cmp	r1, r0
   116ee:	d101      	bne.n	116f4 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   116f0:	621a      	str	r2, [r3, #32]
   116f2:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   116f4:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   116f6:	4770      	bx	lr
   116f8:	200016f0 	.word	0x200016f0
   116fc:	00012dac 	.word	0x00012dac

00011700 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   11700:	f990 000a 	ldrsb.w	r0, [r0, #10]
   11704:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   11708:	4298      	cmp	r0, r3
   1170a:	bfac      	ite	ge
   1170c:	2000      	movge	r0, #0
   1170e:	2001      	movlt	r0, #1
   11710:	4770      	bx	lr
	...

00011714 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   11714:	b510      	push	{r4, lr}
   11716:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   11718:	f7ff ffca 	bl	116b0 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   1171c:	7a4b      	ldrb	r3, [r1, #9]
   1171e:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   11720:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   11722:	d50d      	bpl.n	11740 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   11724:	4608      	mov	r0, r1
   11726:	f7ff ffa5 	bl	11674 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   1172a:	7a4b      	ldrb	r3, [r1, #9]
   1172c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   11730:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   11732:	4b05      	ldr	r3, [pc, #20]	; (11748 <_remove_thread_from_ready_q+0x34>)
   11734:	6898      	ldr	r0, [r3, #8]
   11736:	1a43      	subs	r3, r0, r1
   11738:	4258      	negs	r0, r3
   1173a:	4158      	adcs	r0, r3
   1173c:	f7ff ffc0 	bl	116c0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11740:	f384 8811 	msr	BASEPRI, r4
   11744:	bd10      	pop	{r4, pc}
   11746:	bf00      	nop
   11748:	200016f0 	.word	0x200016f0

0001174c <_find_first_thread_to_unpend>:
{
   1174c:	b508      	push	{r3, lr}
   1174e:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   11750:	f7ff ffae 	bl	116b0 <k_spin_lock.isra.11>
	return list->head == list;
   11754:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11756:	429a      	cmp	r2, r3
   11758:	bf08      	it	eq
   1175a:	2300      	moveq	r3, #0
   1175c:	f380 8811 	msr	BASEPRI, r0
}
   11760:	4618      	mov	r0, r3
   11762:	bd08      	pop	{r3, pc}

00011764 <_unpend_thread_no_timeout>:
{
   11764:	b510      	push	{r4, lr}
   11766:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   11768:	f7ff ffa2 	bl	116b0 <k_spin_lock.isra.11>
   1176c:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1176e:	4608      	mov	r0, r1
   11770:	f7ff ff80 	bl	11674 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11774:	7a4b      	ldrb	r3, [r1, #9]
   11776:	f023 0302 	bic.w	r3, r3, #2
   1177a:	724b      	strb	r3, [r1, #9]
   1177c:	f384 8811 	msr	BASEPRI, r4
   11780:	bd10      	pop	{r4, pc}

00011782 <_unpend_first_thread>:
{
   11782:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   11784:	2100      	movs	r1, #0
   11786:	f7ff ffe1 	bl	1174c <_find_first_thread_to_unpend>

	if (thread) {
   1178a:	4604      	mov	r4, r0
   1178c:	b128      	cbz	r0, 1179a <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   1178e:	f7ff ffe9 	bl	11764 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   11792:	f104 0014 	add.w	r0, r4, #20
   11796:	f7ff ff73 	bl	11680 <_abort_timeout>
}
   1179a:	4620      	mov	r0, r4
   1179c:	bd10      	pop	{r4, pc}

0001179e <_unpend_thread>:
{
   1179e:	b510      	push	{r4, lr}
   117a0:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   117a2:	f7ff ffdf 	bl	11764 <_unpend_thread_no_timeout>
   117a6:	f104 0014 	add.w	r0, r4, #20
}
   117aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   117ae:	f7ff bf67 	b.w	11680 <_abort_timeout>
	...

000117b4 <_reschedule>:
   117b4:	f3ef 8305 	mrs	r3, IPSR
   117b8:	2b0d      	cmp	r3, #13
   117ba:	d809      	bhi.n	117d0 <_reschedule+0x1c>
   117bc:	b11b      	cbz	r3, 117c6 <_reschedule+0x12>
   117be:	4b09      	ldr	r3, [pc, #36]	; (117e4 <_reschedule+0x30>)
   117c0:	685b      	ldr	r3, [r3, #4]
   117c2:	051b      	lsls	r3, r3, #20
   117c4:	d504      	bpl.n	117d0 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   117c6:	4b08      	ldr	r3, [pc, #32]	; (117e8 <_reschedule+0x34>)
   117c8:	689a      	ldr	r2, [r3, #8]
   117ca:	6a1b      	ldr	r3, [r3, #32]
   117cc:	429a      	cmp	r2, r3
   117ce:	d103      	bne.n	117d8 <_reschedule+0x24>
   117d0:	f380 8811 	msr	BASEPRI, r0
}
   117d4:	2000      	movs	r0, #0
   117d6:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   117d8:	4b04      	ldr	r3, [pc, #16]	; (117ec <_reschedule+0x38>)
   117da:	2200      	movs	r2, #0
   117dc:	601a      	str	r2, [r3, #0]
   117de:	f7ef be93 	b.w	1508 <__swap>
   117e2:	bf00      	nop
   117e4:	e000ed00 	.word	0xe000ed00
   117e8:	200016f0 	.word	0x200016f0
   117ec:	20001724 	.word	0x20001724

000117f0 <k_sched_unlock>:
{
   117f0:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   117f2:	f7ff ff5d 	bl	116b0 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   117f6:	4b0a      	ldr	r3, [pc, #40]	; (11820 <k_sched_unlock+0x30>)
   117f8:	689a      	ldr	r2, [r3, #8]
   117fa:	7ad3      	ldrb	r3, [r2, #11]
   117fc:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   117fe:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   11800:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   11802:	2001      	movs	r0, #1
   11804:	f7ff ff5c 	bl	116c0 <update_cache>
   11808:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   1180c:	f04f 0320 	mov.w	r3, #32
   11810:	f3ef 8011 	mrs	r0, BASEPRI
   11814:	f383 8811 	msr	BASEPRI, r3
}
   11818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   1181c:	f7ff bfca 	b.w	117b4 <_reschedule>
   11820:	200016f0 	.word	0x200016f0

00011824 <_priq_dumb_add>:
{
   11824:	b510      	push	{r4, lr}
	return list->head == list;
   11826:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11828:	4298      	cmp	r0, r3
   1182a:	bf08      	it	eq
   1182c:	2300      	moveq	r3, #0
   1182e:	b193      	cbz	r3, 11856 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   11830:	f991 400a 	ldrsb.w	r4, [r1, #10]
   11834:	f993 200a 	ldrsb.w	r2, [r3, #10]
   11838:	4294      	cmp	r4, r2
   1183a:	da06      	bge.n	1184a <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   1183c:	685a      	ldr	r2, [r3, #4]
   1183e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   11840:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   11842:	685a      	ldr	r2, [r3, #4]
   11844:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   11846:	6059      	str	r1, [r3, #4]
   11848:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   1184a:	6842      	ldr	r2, [r0, #4]
   1184c:	4293      	cmp	r3, r2
   1184e:	d002      	beq.n	11856 <_priq_dumb_add+0x32>
   11850:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11852:	2b00      	cmp	r3, #0
   11854:	d1eb      	bne.n	1182e <_priq_dumb_add+0xa>
	node->next = list;
   11856:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   11858:	6843      	ldr	r3, [r0, #4]
   1185a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1185c:	6843      	ldr	r3, [r0, #4]
   1185e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   11860:	6041      	str	r1, [r0, #4]
   11862:	bd10      	pop	{r4, pc}

00011864 <_add_thread_to_ready_q>:
{
   11864:	b538      	push	{r3, r4, r5, lr}
   11866:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   11868:	f7ff ff22 	bl	116b0 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1186c:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   1186e:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   11870:	4806      	ldr	r0, [pc, #24]	; (1188c <_add_thread_to_ready_q+0x28>)
   11872:	f7ff ffd7 	bl	11824 <_priq_dumb_add>
	thread->base.thread_state |= states;
   11876:	7a63      	ldrb	r3, [r4, #9]
   11878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1187c:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1187e:	2000      	movs	r0, #0
   11880:	f7ff ff1e 	bl	116c0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11884:	f385 8811 	msr	BASEPRI, r5
   11888:	bd38      	pop	{r3, r4, r5, pc}
   1188a:	bf00      	nop
   1188c:	20001714 	.word	0x20001714

00011890 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   11890:	7a42      	ldrb	r2, [r0, #9]
   11892:	06d2      	lsls	r2, r2, #27
   11894:	d104      	bne.n	118a0 <_ready_thread+0x10>
   11896:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11898:	3301      	adds	r3, #1
   1189a:	d101      	bne.n	118a0 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   1189c:	f7ff bfe2 	b.w	11864 <_add_thread_to_ready_q>
   118a0:	4770      	bx	lr
	...

000118a4 <_add_timeout>:
{
   118a4:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   118a6:	610b      	str	r3, [r1, #16]
{
   118a8:	4604      	mov	r4, r0
   118aa:	461d      	mov	r5, r3
	timeout->thread = thread;
   118ac:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   118ae:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   118b0:	bb03      	cbnz	r3, 118f4 <_add_timeout+0x50>
	__asm__ volatile(
   118b2:	f04f 0320 	mov.w	r3, #32
   118b6:	f3ef 8611 	mrs	r6, BASEPRI
   118ba:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   118be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   118c2:	610b      	str	r3, [r1, #16]
	if (thread) {
   118c4:	b170      	cbz	r0, 118e4 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   118c6:	68cb      	ldr	r3, [r1, #12]
   118c8:	b113      	cbz	r3, 118d0 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   118ca:	f7ff ff4b 	bl	11764 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   118ce:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   118d0:	7a63      	ldrb	r3, [r4, #9]
   118d2:	f023 0304 	bic.w	r3, r3, #4
   118d6:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   118d8:	4620      	mov	r0, r4
   118da:	f7ff ffd9 	bl	11890 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   118de:	f386 8811 	msr	BASEPRI, r6
   118e2:	bd70      	pop	{r4, r5, r6, pc}
   118e4:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   118e8:	694b      	ldr	r3, [r1, #20]
   118ea:	b32b      	cbz	r3, 11938 <_add_timeout+0x94>
			timeout->func(timeout);
   118ec:	4608      	mov	r0, r1
}
   118ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   118f2:	4718      	bx	r3
	return list->head == list;
   118f4:	4a11      	ldr	r2, [pc, #68]	; (1193c <_add_timeout+0x98>)
   118f6:	4610      	mov	r0, r2
   118f8:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   118fc:	4283      	cmp	r3, r0
   118fe:	d10c      	bne.n	1191a <_add_timeout+0x76>
	node->next = list;
   11900:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   11902:	6993      	ldr	r3, [r2, #24]
   11904:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   11906:	6993      	ldr	r3, [r2, #24]
   11908:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1190a:	6191      	str	r1, [r2, #24]
   1190c:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   1190e:	1b64      	subs	r4, r4, r5
   11910:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   11912:	6994      	ldr	r4, [r2, #24]
   11914:	42a3      	cmp	r3, r4
   11916:	d0f3      	beq.n	11900 <_add_timeout+0x5c>
   11918:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1191a:	2b00      	cmp	r3, #0
   1191c:	d0f0      	beq.n	11900 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   1191e:	690c      	ldr	r4, [r1, #16]
   11920:	691d      	ldr	r5, [r3, #16]
   11922:	42ac      	cmp	r4, r5
   11924:	dcf3      	bgt.n	1190e <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   11926:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   11928:	1b2c      	subs	r4, r5, r4
   1192a:	611c      	str	r4, [r3, #16]
   1192c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1192e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   11930:	685a      	ldr	r2, [r3, #4]
   11932:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   11934:	6059      	str	r1, [r3, #4]
   11936:	bd70      	pop	{r4, r5, r6, pc}
   11938:	bd70      	pop	{r4, r5, r6, pc}
   1193a:	bf00      	nop
   1193c:	200016f0 	.word	0x200016f0

00011940 <_move_thread_to_end_of_prio_q>:
{
   11940:	b538      	push	{r3, r4, r5, lr}
   11942:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   11944:	f7ff feb4 	bl	116b0 <k_spin_lock.isra.11>
   11948:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1194a:	4620      	mov	r0, r4
   1194c:	f7ff fe92 	bl	11674 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   11950:	4621      	mov	r1, r4
   11952:	4806      	ldr	r0, [pc, #24]	; (1196c <_move_thread_to_end_of_prio_q+0x2c>)
   11954:	f7ff ff66 	bl	11824 <_priq_dumb_add>
	thread->base.thread_state |= states;
   11958:	7a63      	ldrb	r3, [r4, #9]
   1195a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1195e:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   11960:	2000      	movs	r0, #0
   11962:	f7ff fead 	bl	116c0 <update_cache>
   11966:	f385 8811 	msr	BASEPRI, r5
   1196a:	bd38      	pop	{r3, r4, r5, pc}
   1196c:	20001714 	.word	0x20001714

00011970 <pend>:
{
   11970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11972:	4605      	mov	r5, r0
   11974:	4614      	mov	r4, r2
   11976:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   11978:	f7ff fecc 	bl	11714 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1197c:	7a6b      	ldrb	r3, [r5, #9]
   1197e:	f043 0302 	orr.w	r3, r3, #2
   11982:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   11984:	1c63      	adds	r3, r4, #1
   11986:	d012      	beq.n	119ae <pend+0x3e>
	__asm__ volatile(
   11988:	f04f 0320 	mov.w	r3, #32
   1198c:	f3ef 8711 	mrs	r7, BASEPRI
   11990:	f383 8811 	msr	BASEPRI, r3
   11994:	230a      	movs	r3, #10
   11996:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   11998:	4632      	mov	r2, r6
   1199a:	fbb4 f3f3 	udiv	r3, r4, r3
   1199e:	f105 0114 	add.w	r1, r5, #20
   119a2:	3301      	adds	r3, #1
   119a4:	4628      	mov	r0, r5
   119a6:	f7ff ff7d 	bl	118a4 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   119aa:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   119ae:	b12e      	cbz	r6, 119bc <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   119b0:	4629      	mov	r1, r5
   119b2:	4630      	mov	r0, r6
}
   119b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   119b8:	f7ff bf34 	b.w	11824 <_priq_dumb_add>
   119bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000119c0 <_pend_current_thread>:
{
   119c0:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   119c2:	4b06      	ldr	r3, [pc, #24]	; (119dc <_pend_current_thread+0x1c>)
{
   119c4:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   119c6:	6898      	ldr	r0, [r3, #8]
   119c8:	f7ff ffd2 	bl	11970 <pend>
	_time_slice_elapsed = 0;
   119cc:	4b04      	ldr	r3, [pc, #16]	; (119e0 <_pend_current_thread+0x20>)
   119ce:	2200      	movs	r2, #0
   119d0:	4620      	mov	r0, r4
}
   119d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   119d6:	601a      	str	r2, [r3, #0]
   119d8:	f7ef bd96 	b.w	1508 <__swap>
   119dc:	200016f0 	.word	0x200016f0
   119e0:	20001724 	.word	0x20001724

000119e4 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   119e4:	4b13      	ldr	r3, [pc, #76]	; (11a34 <_is_thread_time_slicing+0x50>)
   119e6:	681b      	ldr	r3, [r3, #0]
   119e8:	2b00      	cmp	r3, #0
{
   119ea:	b510      	push	{r4, lr}
   119ec:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   119ee:	dd1f      	ble.n	11a30 <_is_thread_time_slicing+0x4c>
   119f0:	8943      	ldrh	r3, [r0, #10]
   119f2:	2b7f      	cmp	r3, #127	; 0x7f
   119f4:	d81c      	bhi.n	11a30 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   119f6:	4b10      	ldr	r3, [pc, #64]	; (11a38 <_is_thread_time_slicing+0x54>)
   119f8:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   119fc:	681b      	ldr	r3, [r3, #0]
   119fe:	4299      	cmp	r1, r3
   11a00:	db16      	blt.n	11a30 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   11a02:	f7ff fe55 	bl	116b0 <k_spin_lock.isra.11>
	return list->head == list;
   11a06:	490d      	ldr	r1, [pc, #52]	; (11a3c <_is_thread_time_slicing+0x58>)
   11a08:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a0c:	428b      	cmp	r3, r1
   11a0e:	4604      	mov	r4, r0
   11a10:	d00a      	beq.n	11a28 <_is_thread_time_slicing+0x44>
		if (next) {
   11a12:	b15b      	cbz	r3, 11a2c <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   11a14:	f992 000a 	ldrsb.w	r0, [r2, #10]
   11a18:	f993 300a 	ldrsb.w	r3, [r3, #10]
   11a1c:	1ac3      	subs	r3, r0, r3
   11a1e:	4258      	negs	r0, r3
   11a20:	4158      	adcs	r0, r3
   11a22:	f384 8811 	msr	BASEPRI, r4
	return ret;
   11a26:	bd10      	pop	{r4, pc}
   11a28:	2000      	movs	r0, #0
   11a2a:	e7fa      	b.n	11a22 <_is_thread_time_slicing+0x3e>
   11a2c:	4618      	mov	r0, r3
   11a2e:	e7f8      	b.n	11a22 <_is_thread_time_slicing+0x3e>
		return 0;
   11a30:	2000      	movs	r0, #0
}
   11a32:	bd10      	pop	{r4, pc}
   11a34:	200015d0 	.word	0x200015d0
   11a38:	200015d4 	.word	0x200015d4
   11a3c:	200016f0 	.word	0x200016f0

00011a40 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   11a40:	4b01      	ldr	r3, [pc, #4]	; (11a48 <_update_time_slice_before_swap+0x8>)
   11a42:	2200      	movs	r2, #0
   11a44:	601a      	str	r2, [r3, #0]
   11a46:	4770      	bx	lr
   11a48:	20001724 	.word	0x20001724

00011a4c <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   11a4c:	b538      	push	{r3, r4, r5, lr}
   11a4e:	4605      	mov	r5, r0
	int need_sched = 0;
   11a50:	2000      	movs	r0, #0
	return list->head == list;
   11a52:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a54:	42a5      	cmp	r5, r4
   11a56:	d000      	beq.n	11a5a <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   11a58:	b904      	cbnz	r4, 11a5c <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   11a5a:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   11a5c:	4620      	mov	r0, r4
   11a5e:	f7ff fe9e 	bl	1179e <_unpend_thread>
		_ready_thread(th);
   11a62:	4620      	mov	r0, r4
   11a64:	f7ff ff14 	bl	11890 <_ready_thread>
		need_sched = 1;
   11a68:	2001      	movs	r0, #1
   11a6a:	e7f2      	b.n	11a52 <_unpend_all+0x6>

00011a6c <_sched_init>:
	list->head = (sys_dnode_t *)list;
   11a6c:	4b02      	ldr	r3, [pc, #8]	; (11a78 <_sched_init+0xc>)
   11a6e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   11a72:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   11a74:	629a      	str	r2, [r3, #40]	; 0x28
   11a76:	4770      	bx	lr
   11a78:	200016f0 	.word	0x200016f0

00011a7c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   11a7c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   11a7e:	4c14      	ldr	r4, [pc, #80]	; (11ad0 <_impl_k_yield+0x54>)
   11a80:	4b14      	ldr	r3, [pc, #80]	; (11ad4 <_impl_k_yield+0x58>)
   11a82:	68a2      	ldr	r2, [r4, #8]
   11a84:	681b      	ldr	r3, [r3, #0]
   11a86:	429a      	cmp	r2, r3
   11a88:	d00f      	beq.n	11aaa <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   11a8a:	f7ff fe11 	bl	116b0 <k_spin_lock.isra.11>
   11a8e:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   11a90:	68a0      	ldr	r0, [r4, #8]
   11a92:	f7ff fdef 	bl	11674 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   11a96:	68a1      	ldr	r1, [r4, #8]
   11a98:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11a9c:	f7ff fec2 	bl	11824 <_priq_dumb_add>
			update_cache(1);
   11aa0:	2001      	movs	r0, #1
   11aa2:	f7ff fe0d 	bl	116c0 <update_cache>
   11aa6:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   11aaa:	6a22      	ldr	r2, [r4, #32]
   11aac:	68a3      	ldr	r3, [r4, #8]
   11aae:	429a      	cmp	r2, r3
   11ab0:	d00c      	beq.n	11acc <_impl_k_yield+0x50>
	__asm__ volatile(
   11ab2:	f04f 0320 	mov.w	r3, #32
   11ab6:	f3ef 8011 	mrs	r0, BASEPRI
   11aba:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   11abe:	4b06      	ldr	r3, [pc, #24]	; (11ad8 <_impl_k_yield+0x5c>)
   11ac0:	2200      	movs	r2, #0
   11ac2:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   11ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11ac8:	f7ef bd1e 	b.w	1508 <__swap>
   11acc:	bd38      	pop	{r3, r4, r5, pc}
   11ace:	bf00      	nop
   11ad0:	200016f0 	.word	0x200016f0
   11ad4:	00012dac 	.word	0x00012dac
   11ad8:	20001724 	.word	0x20001724

00011adc <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   11adc:	4b01      	ldr	r3, [pc, #4]	; (11ae4 <_impl_k_current_get+0x8>)
   11ade:	6898      	ldr	r0, [r3, #8]
   11ae0:	4770      	bx	lr
   11ae2:	bf00      	nop
   11ae4:	200016f0 	.word	0x200016f0

00011ae8 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   11ae8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   11aec:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   11aee:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   11af0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   11af2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   11af4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   11af6:	6143      	str	r3, [r0, #20]
   11af8:	4770      	bx	lr

00011afa <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   11afa:	b570      	push	{r4, r5, r6, lr}
   11afc:	4604      	mov	r4, r0
   11afe:	f04f 0320 	mov.w	r3, #32
   11b02:	f3ef 8611 	mrs	r6, BASEPRI
   11b06:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   11b0a:	f7ff fe3a 	bl	11782 <_unpend_first_thread>
	if (thread) {
   11b0e:	4605      	mov	r5, r0
   11b10:	b160      	cbz	r0, 11b2c <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   11b12:	7a43      	ldrb	r3, [r0, #9]
   11b14:	06db      	lsls	r3, r3, #27
   11b16:	d102      	bne.n	11b1e <_impl_k_sem_give+0x24>
   11b18:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11b1a:	3301      	adds	r3, #1
   11b1c:	d012      	beq.n	11b44 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   11b1e:	2300      	movs	r3, #0
   11b20:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   11b22:	4630      	mov	r0, r6
}
   11b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   11b28:	f7ff be44 	b.w	117b4 <_reschedule>
	sem->count += (sem->count != sem->limit);
   11b2c:	68a3      	ldr	r3, [r4, #8]
   11b2e:	68e2      	ldr	r2, [r4, #12]
   11b30:	429a      	cmp	r2, r3
   11b32:	bf18      	it	ne
   11b34:	3301      	addne	r3, #1
   11b36:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   11b38:	2102      	movs	r1, #2
   11b3a:	f104 0010 	add.w	r0, r4, #16
   11b3e:	f000 fca1 	bl	12484 <_handle_obj_poll_events>
   11b42:	e7ee      	b.n	11b22 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   11b44:	f7ff fe8e 	bl	11864 <_add_thread_to_ready_q>
   11b48:	e7e9      	b.n	11b1e <_impl_k_sem_give+0x24>

00011b4a <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   11b4a:	b410      	push	{r4}
   11b4c:	460a      	mov	r2, r1
   11b4e:	4604      	mov	r4, r0
   11b50:	f04f 0320 	mov.w	r3, #32
   11b54:	f3ef 8011 	mrs	r0, BASEPRI
   11b58:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   11b5c:	68a3      	ldr	r3, [r4, #8]
   11b5e:	b133      	cbz	r3, 11b6e <_impl_k_sem_take+0x24>
		sem->count--;
   11b60:	3b01      	subs	r3, #1
   11b62:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11b64:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   11b68:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   11b6a:	bc10      	pop	{r4}
   11b6c:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   11b6e:	b921      	cbnz	r1, 11b7a <_impl_k_sem_take+0x30>
   11b70:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   11b74:	f06f 000f 	mvn.w	r0, #15
   11b78:	e7f7      	b.n	11b6a <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   11b7a:	4621      	mov	r1, r4
}
   11b7c:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   11b7e:	f7ff bf1f 	b.w	119c0 <_pend_current_thread>
	...

00011b84 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   11b84:	4b03      	ldr	r3, [pc, #12]	; (11b94 <_impl_k_uptime_get_32+0x10>)
   11b86:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   11b8a:	230a      	movs	r3, #10
   11b8c:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   11b90:	4770      	bx	lr
   11b92:	bf00      	nop
   11b94:	20001728 	.word	0x20001728

00011b98 <_tick_get>:
	__asm__ volatile(
   11b98:	f04f 0220 	mov.w	r2, #32
   11b9c:	f3ef 8311 	mrs	r3, BASEPRI
   11ba0:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   11ba4:	4a02      	ldr	r2, [pc, #8]	; (11bb0 <_tick_get+0x18>)
   11ba6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11baa:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   11bae:	4770      	bx	lr
   11bb0:	20001728 	.word	0x20001728

00011bb4 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   11bb4:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   11bb6:	f7ff ffef 	bl	11b98 <_tick_get>
   11bba:	240a      	movs	r4, #10
   11bbc:	fba0 2304 	umull	r2, r3, r0, r4
   11bc0:	fb04 3301 	mla	r3, r4, r1, r3
}
   11bc4:	4610      	mov	r0, r2
   11bc6:	4619      	mov	r1, r3
   11bc8:	bd10      	pop	{r4, pc}
	...

00011bcc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   11bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bd0:	4607      	mov	r7, r0
   11bd2:	b085      	sub	sp, #20
	__asm__ volatile(
   11bd4:	f04f 0320 	mov.w	r3, #32
   11bd8:	f3ef 8011 	mrs	r0, BASEPRI
   11bdc:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   11be0:	4961      	ldr	r1, [pc, #388]	; (11d68 <_nano_sys_clock_tick_announce+0x19c>)
   11be2:	e9d1 4500 	ldrd	r4, r5, [r1]
   11be6:	19e2      	adds	r2, r4, r7
   11be8:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   11bec:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11bf0:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   11bf4:	ae02      	add	r6, sp, #8
   11bf6:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   11bf8:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   11bfa:	f04f 0320 	mov.w	r3, #32
   11bfe:	f3ef 8011 	mrs	r0, BASEPRI
   11c02:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   11c06:	4c59      	ldr	r4, [pc, #356]	; (11d6c <_nano_sys_clock_tick_announce+0x1a0>)
   11c08:	4621      	mov	r1, r4
   11c0a:	4602      	mov	r2, r0
   11c0c:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11c10:	428b      	cmp	r3, r1
   11c12:	d000      	beq.n	11c16 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   11c14:	b9fb      	cbnz	r3, 11c56 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11c16:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   11c1a:	68a0      	ldr	r0, [r4, #8]
   11c1c:	f7ff fee2 	bl	119e4 <_is_thread_time_slicing>
   11c20:	b1b0      	cbz	r0, 11c50 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   11c22:	4a53      	ldr	r2, [pc, #332]	; (11d70 <_nano_sys_clock_tick_announce+0x1a4>)
   11c24:	6811      	ldr	r1, [r2, #0]
   11c26:	230a      	movs	r3, #10
   11c28:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   11c2c:	4b51      	ldr	r3, [pc, #324]	; (11d74 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   11c2e:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   11c30:	681b      	ldr	r3, [r3, #0]
   11c32:	429f      	cmp	r7, r3
   11c34:	db0c      	blt.n	11c50 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   11c36:	2300      	movs	r3, #0
   11c38:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   11c3a:	f04f 0320 	mov.w	r3, #32
   11c3e:	f3ef 8511 	mrs	r5, BASEPRI
   11c42:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   11c46:	68a0      	ldr	r0, [r4, #8]
   11c48:	f7ff fe7a 	bl	11940 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11c4c:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   11c50:	b005      	add	sp, #20
   11c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   11c56:	4d48      	ldr	r5, [pc, #288]	; (11d78 <_nano_sys_clock_tick_announce+0x1ac>)
   11c58:	9501      	str	r5, [sp, #4]
   11c5a:	2101      	movs	r1, #1
   11c5c:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   11c5e:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   11c62:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   11c64:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   11c68:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   11c6a:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   11c6c:	bfaa      	itet	ge
   11c6e:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   11c72:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   11c76:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   11c7a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   11c7c:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   11c7e:	691d      	ldr	r5, [r3, #16]
   11c80:	4298      	cmp	r0, r3
   11c82:	bf14      	ite	ne
   11c84:	6818      	ldrne	r0, [r3, #0]
   11c86:	2000      	moveq	r0, #0
   11c88:	b9d5      	cbnz	r5, 11cc0 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   11c8a:	e893 0220 	ldmia.w	r3, {r5, r9}
   11c8e:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   11c92:	681d      	ldr	r5, [r3, #0]
   11c94:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   11c98:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   11c9a:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   11c9e:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   11ca0:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   11ca2:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   11ca4:	f8c3 c010 	str.w	ip, [r3, #16]
   11ca8:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   11cac:	f04f 0320 	mov.w	r3, #32
   11cb0:	f3ef 8211 	mrs	r2, BASEPRI
   11cb4:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   11cb8:	4603      	mov	r3, r0
   11cba:	2800      	cmp	r0, #0
   11cbc:	d1d4      	bne.n	11c68 <_nano_sys_clock_tick_announce+0x9c>
   11cbe:	e001      	b.n	11cc4 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   11cc0:	2900      	cmp	r1, #0
   11cc2:	dcf1      	bgt.n	11ca8 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11cc4:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   11cc8:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11cca:	42b0      	cmp	r0, r6
   11ccc:	d103      	bne.n	11cd6 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   11cce:	9a01      	ldr	r2, [sp, #4]
   11cd0:	2300      	movs	r3, #0
   11cd2:	6013      	str	r3, [r2, #0]
   11cd4:	e7a1      	b.n	11c1a <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   11cd6:	2800      	cmp	r0, #0
   11cd8:	d0f9      	beq.n	11cce <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   11cda:	9b03      	ldr	r3, [sp, #12]
   11cdc:	4298      	cmp	r0, r3
   11cde:	d102      	bne.n	11ce6 <_nano_sys_clock_tick_announce+0x11a>
   11ce0:	f04f 0b00 	mov.w	fp, #0
   11ce4:	e001      	b.n	11cea <_nano_sys_clock_tick_announce+0x11e>
   11ce6:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   11cea:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   11cee:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   11cf2:	e890 000c 	ldmia.w	r0, {r2, r3}
   11cf6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11cf8:	6802      	ldr	r2, [r0, #0]
   11cfa:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   11cfc:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   11cfe:	f04f 0320 	mov.w	r3, #32
   11d02:	f3ef 8811 	mrs	r8, BASEPRI
   11d06:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   11d0a:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   11d0e:	b1d6      	cbz	r6, 11d46 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   11d10:	68c3      	ldr	r3, [r0, #12]
   11d12:	b123      	cbz	r3, 11d1e <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   11d14:	4630      	mov	r0, r6
   11d16:	f7ff fd25 	bl	11764 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   11d1a:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11d1e:	7a73      	ldrb	r3, [r6, #9]
   11d20:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   11d24:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11d28:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   11d2a:	d102      	bne.n	11d32 <_nano_sys_clock_tick_announce+0x166>
   11d2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   11d2e:	3301      	adds	r3, #1
   11d30:	d015      	beq.n	11d5e <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11d32:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   11d36:	f1bb 0f00 	cmp.w	fp, #0
   11d3a:	d0c8      	beq.n	11cce <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   11d3c:	9b03      	ldr	r3, [sp, #12]
   11d3e:	455b      	cmp	r3, fp
   11d40:	d108      	bne.n	11d54 <_nano_sys_clock_tick_announce+0x188>
   11d42:	2300      	movs	r3, #0
   11d44:	e008      	b.n	11d58 <_nano_sys_clock_tick_announce+0x18c>
   11d46:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   11d4a:	6943      	ldr	r3, [r0, #20]
   11d4c:	2b00      	cmp	r3, #0
   11d4e:	d0f2      	beq.n	11d36 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   11d50:	4798      	blx	r3
   11d52:	e7f0      	b.n	11d36 <_nano_sys_clock_tick_announce+0x16a>
   11d54:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   11d58:	4658      	mov	r0, fp
   11d5a:	469b      	mov	fp, r3
   11d5c:	e7c9      	b.n	11cf2 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   11d5e:	4630      	mov	r0, r6
   11d60:	f7ff fd80 	bl	11864 <_add_thread_to_ready_q>
   11d64:	e7e5      	b.n	11d32 <_nano_sys_clock_tick_announce+0x166>
   11d66:	bf00      	nop
   11d68:	20001728 	.word	0x20001728
   11d6c:	200016f0 	.word	0x200016f0
   11d70:	20001724 	.word	0x20001724
   11d74:	200015d0 	.word	0x200015d0
   11d78:	20001720 	.word	0x20001720

00011d7c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   11d7c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   11d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d86:	4903      	ldr	r1, [pc, #12]	; (11d94 <k_sys_work_q_init+0x18>)
   11d88:	4803      	ldr	r0, [pc, #12]	; (11d98 <k_sys_work_q_init+0x1c>)
   11d8a:	f000 f983 	bl	12094 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   11d8e:	2000      	movs	r0, #0
   11d90:	bd08      	pop	{r3, pc}
   11d92:	bf00      	nop
   11d94:	20003040 	.word	0x20003040
   11d98:	20001730 	.word	0x20001730

00011d9c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11d9c:	6903      	ldr	r3, [r0, #16]
   11d9e:	1c5a      	adds	r2, r3, #1
   11da0:	d011      	beq.n	11dc6 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11da2:	4a0a      	ldr	r2, [pc, #40]	; (11dcc <_abort_timeout+0x30>)
   11da4:	6992      	ldr	r2, [r2, #24]
   11da6:	4290      	cmp	r0, r2
   11da8:	bf1f      	itttt	ne
   11daa:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11dac:	690a      	ldrne	r2, [r1, #16]
   11dae:	189b      	addne	r3, r3, r2
   11db0:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   11db2:	e890 000c 	ldmia.w	r0, {r2, r3}
   11db6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11db8:	6802      	ldr	r2, [r0, #0]
   11dba:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   11dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11dc0:	6103      	str	r3, [r0, #16]
	return 0;
   11dc2:	2000      	movs	r0, #0
   11dc4:	4770      	bx	lr
		return _INACTIVE;
   11dc6:	4618      	mov	r0, r3
}
   11dc8:	4770      	bx	lr
   11dca:	bf00      	nop
   11dcc:	200016f0 	.word	0x200016f0

00011dd0 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   11dd0:	7a42      	ldrb	r2, [r0, #9]
   11dd2:	06d2      	lsls	r2, r2, #27
   11dd4:	d104      	bne.n	11de0 <_ready_thread+0x10>
   11dd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11dd8:	3301      	adds	r3, #1
   11dda:	d101      	bne.n	11de0 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   11ddc:	f7ff bd42 	b.w	11864 <_add_thread_to_ready_q>
   11de0:	4770      	bx	lr
	...

00011de4 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   11de4:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   11de6:	f04f 0320 	mov.w	r3, #32
   11dea:	f3ef 8611 	mrs	r6, BASEPRI
   11dee:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   11df2:	4a19      	ldr	r2, [pc, #100]	; (11e58 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   11df4:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   11df6:	230a      	movs	r3, #10
   11df8:	3109      	adds	r1, #9
   11dfa:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   11dfe:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11e00:	6241      	str	r1, [r0, #36]	; 0x24
   11e02:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   11e04:	2300      	movs	r3, #0
   11e06:	6203      	str	r3, [r0, #32]
   11e08:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e0c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   11e0e:	f100 0514 	add.w	r5, r0, #20
   11e12:	d108      	bne.n	11e26 <schedule_new_thread.part.11+0x42>
	node->next = list;
   11e14:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   11e16:	6993      	ldr	r3, [r2, #24]
   11e18:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   11e1a:	6993      	ldr	r3, [r2, #24]
   11e1c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   11e1e:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11e20:	f386 8811 	msr	BASEPRI, r6
   11e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11e26:	2b00      	cmp	r3, #0
   11e28:	d0f4      	beq.n	11e14 <schedule_new_thread.part.11+0x30>
   11e2a:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   11e2e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   11e30:	691f      	ldr	r7, [r3, #16]
   11e32:	42bc      	cmp	r4, r7
   11e34:	dc08      	bgt.n	11e48 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   11e36:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   11e38:	1b3c      	subs	r4, r7, r4
   11e3a:	611c      	str	r4, [r3, #16]
   11e3c:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   11e3e:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   11e40:	685a      	ldr	r2, [r3, #4]
   11e42:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   11e44:	605d      	str	r5, [r3, #4]
   11e46:	e7eb      	b.n	11e20 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   11e48:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   11e4a:	4573      	cmp	r3, lr
   11e4c:	6244      	str	r4, [r0, #36]	; 0x24
   11e4e:	d0e1      	beq.n	11e14 <schedule_new_thread.part.11+0x30>
   11e50:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11e52:	2b00      	cmp	r3, #0
   11e54:	d1eb      	bne.n	11e2e <schedule_new_thread.part.11+0x4a>
   11e56:	e7dd      	b.n	11e14 <schedule_new_thread.part.11+0x30>
   11e58:	200016f0 	.word	0x200016f0

00011e5c <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   11e5c:	4770      	bx	lr
	...

00011e60 <k_is_in_isr>:
   11e60:	f3ef 8005 	mrs	r0, IPSR
   11e64:	280d      	cmp	r0, #13
   11e66:	d807      	bhi.n	11e78 <k_is_in_isr+0x18>
   11e68:	b138      	cbz	r0, 11e7a <k_is_in_isr+0x1a>
   11e6a:	4b04      	ldr	r3, [pc, #16]	; (11e7c <k_is_in_isr+0x1c>)
   11e6c:	6858      	ldr	r0, [r3, #4]
   11e6e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   11e72:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   11e76:	4770      	bx	lr
   11e78:	2001      	movs	r0, #1
}
   11e7a:	4770      	bx	lr
   11e7c:	e000ed00 	.word	0xe000ed00

00011e80 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   11e80:	4b02      	ldr	r3, [pc, #8]	; (11e8c <_is_thread_essential+0xc>)
   11e82:	689b      	ldr	r3, [r3, #8]
   11e84:	7a18      	ldrb	r0, [r3, #8]
}
   11e86:	f000 0001 	and.w	r0, r0, #1
   11e8a:	4770      	bx	lr
   11e8c:	200016f0 	.word	0x200016f0

00011e90 <_impl_k_thread_start>:
{
   11e90:	b510      	push	{r4, lr}
	__asm__ volatile(
   11e92:	f04f 0320 	mov.w	r3, #32
   11e96:	f3ef 8411 	mrs	r4, BASEPRI
   11e9a:	f383 8811 	msr	BASEPRI, r3
   11e9e:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   11ea0:	0759      	lsls	r1, r3, #29
   11ea2:	d402      	bmi.n	11eaa <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11ea4:	f384 8811 	msr	BASEPRI, r4
   11ea8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11eaa:	f023 0304 	bic.w	r3, r3, #4
   11eae:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   11eb0:	f7ff ff8e 	bl	11dd0 <_ready_thread>
	_reschedule(key);
   11eb4:	4620      	mov	r0, r4
}
   11eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   11eba:	f7ff bc7b 	b.w	117b4 <_reschedule>
	...

00011ec0 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   11ec0:	b530      	push	{r4, r5, lr}
   11ec2:	b087      	sub	sp, #28
   11ec4:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11ec6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   11ec8:	9504      	str	r5, [sp, #16]
   11eca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   11ecc:	9503      	str	r5, [sp, #12]
   11ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11ed0:	9502      	str	r5, [sp, #8]
   11ed2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11ed4:	9501      	str	r5, [sp, #4]
   11ed6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11ed8:	9500      	str	r5, [sp, #0]
   11eda:	f7ef fd17 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   11ede:	4b04      	ldr	r3, [pc, #16]	; (11ef0 <_setup_new_thread+0x30>)
   11ee0:	689b      	ldr	r3, [r3, #8]
   11ee2:	b913      	cbnz	r3, 11eea <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   11ee4:	6663      	str	r3, [r4, #100]	; 0x64
}
   11ee6:	b007      	add	sp, #28
   11ee8:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   11eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11eec:	e7fa      	b.n	11ee4 <_setup_new_thread+0x24>
   11eee:	bf00      	nop
   11ef0:	200016f0 	.word	0x200016f0

00011ef4 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   11ef4:	b570      	push	{r4, r5, r6, lr}
   11ef6:	b086      	sub	sp, #24
   11ef8:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11efa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   11efc:	9604      	str	r6, [sp, #16]
   11efe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11f00:	9603      	str	r6, [sp, #12]
   11f02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11f04:	9602      	str	r6, [sp, #8]
   11f06:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   11f08:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11f0a:	9601      	str	r6, [sp, #4]
   11f0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   11f0e:	9600      	str	r6, [sp, #0]
   11f10:	f7ff ffd6 	bl	11ec0 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   11f14:	1c6b      	adds	r3, r5, #1
   11f16:	d003      	beq.n	11f20 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   11f18:	b92d      	cbnz	r5, 11f26 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   11f1a:	4620      	mov	r0, r4
   11f1c:	f7ff ffb8 	bl	11e90 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   11f20:	4620      	mov	r0, r4
   11f22:	b006      	add	sp, #24
   11f24:	bd70      	pop	{r4, r5, r6, pc}
   11f26:	4629      	mov	r1, r5
   11f28:	4620      	mov	r0, r4
   11f2a:	f7ff ff5b 	bl	11de4 <schedule_new_thread.part.11>
   11f2e:	e7f7      	b.n	11f20 <_impl_k_thread_create+0x2c>

00011f30 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   11f30:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   11f32:	b510      	push	{r4, lr}
   11f34:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   11f36:	b103      	cbz	r3, 11f3a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   11f38:	4798      	blx	r3
   11f3a:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   11f3c:	06da      	lsls	r2, r3, #27
   11f3e:	d106      	bne.n	11f4e <_k_thread_single_abort+0x1e>
   11f40:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11f42:	3201      	adds	r2, #1
   11f44:	d103      	bne.n	11f4e <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   11f46:	4620      	mov	r0, r4
   11f48:	f7ff fbe4 	bl	11714 <_remove_thread_from_ready_q>
   11f4c:	e00b      	b.n	11f66 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   11f4e:	079b      	lsls	r3, r3, #30
   11f50:	d502      	bpl.n	11f58 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   11f52:	4620      	mov	r0, r4
   11f54:	f7ff fc06 	bl	11764 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   11f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11f5a:	3301      	adds	r3, #1
   11f5c:	d003      	beq.n	11f66 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   11f5e:	f104 0014 	add.w	r0, r4, #20
   11f62:	f7ff ff1b 	bl	11d9c <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   11f66:	7a63      	ldrb	r3, [r4, #9]
   11f68:	f043 0308 	orr.w	r3, r3, #8
   11f6c:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   11f6e:	bd10      	pop	{r4, pc}

00011f70 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   11f70:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   11f72:	4f21      	ldr	r7, [pc, #132]	; (11ff8 <_init_static_threads+0x88>)
   11f74:	4d21      	ldr	r5, [pc, #132]	; (11ffc <_init_static_threads+0x8c>)
{
   11f76:	b087      	sub	sp, #28
   11f78:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   11f7a:	42bd      	cmp	r5, r7
   11f7c:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   11f80:	d314      	bcc.n	11fac <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   11f82:	4b1f      	ldr	r3, [pc, #124]	; (12000 <_init_static_threads+0x90>)
   11f84:	689a      	ldr	r2, [r3, #8]
   11f86:	7ad3      	ldrb	r3, [r2, #11]
   11f88:	3b01      	subs	r3, #1
   11f8a:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   11f8c:	f04f 0320 	mov.w	r3, #32
   11f90:	f3ef 8511 	mrs	r5, BASEPRI
   11f94:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   11f98:	4c18      	ldr	r4, [pc, #96]	; (11ffc <_init_static_threads+0x8c>)
   11f9a:	42b4      	cmp	r4, r6
   11f9c:	d31f      	bcc.n	11fde <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11f9e:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   11fa2:	b007      	add	sp, #28
   11fa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   11fa8:	f7ff bc22 	b.w	117f0 <k_sched_unlock>
		_setup_new_thread(
   11fac:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   11fb0:	9304      	str	r3, [sp, #16]
   11fb2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   11fb6:	9303      	str	r3, [sp, #12]
   11fb8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   11fbc:	9302      	str	r3, [sp, #8]
   11fbe:	f854 3c18 	ldr.w	r3, [r4, #-24]
   11fc2:	9301      	str	r3, [sp, #4]
   11fc4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   11fc8:	9300      	str	r3, [sp, #0]
   11fca:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   11fce:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   11fd0:	f7ff ff76 	bl	11ec0 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   11fd4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   11fd8:	651d      	str	r5, [r3, #80]	; 0x50
   11fda:	4625      	mov	r5, r4
   11fdc:	e7cd      	b.n	11f7a <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   11fde:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11fe0:	1c4b      	adds	r3, r1, #1
   11fe2:	d003      	beq.n	11fec <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   11fe4:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   11fe6:	b919      	cbnz	r1, 11ff0 <_init_static_threads+0x80>
   11fe8:	f7ff ff52 	bl	11e90 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   11fec:	342c      	adds	r4, #44	; 0x2c
   11fee:	e7d4      	b.n	11f9a <_init_static_threads+0x2a>
   11ff0:	f7ff fef8 	bl	11de4 <schedule_new_thread.part.11>
   11ff4:	e7fa      	b.n	11fec <_init_static_threads+0x7c>
   11ff6:	bf00      	nop
   11ff8:	20003924 	.word	0x20003924
   11ffc:	20003924 	.word	0x20003924
   12000:	200016f0 	.word	0x200016f0

00012004 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   12004:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   12006:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   12008:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   1200a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   1200e:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   12010:	72c3      	strb	r3, [r0, #11]
   12012:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   12014:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   12016:	61c3      	str	r3, [r0, #28]
	t->func = func;
   12018:	6283      	str	r3, [r0, #40]	; 0x28
   1201a:	4770      	bx	lr

0001201c <k_work_submit_to_queue>:
{
   1201c:	b500      	push	{lr}
   1201e:	f101 0308 	add.w	r3, r1, #8
   12022:	f3bf 8f5b 	dmb	ish
   12026:	e853 2f00 	ldrex	r2, [r3]
   1202a:	f042 0e01 	orr.w	lr, r2, #1
   1202e:	e843 ec00 	strex	ip, lr, [r3]
   12032:	f1bc 0f00 	cmp.w	ip, #0
   12036:	d1f6      	bne.n	12026 <k_work_submit_to_queue+0xa>
   12038:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1203c:	07d3      	lsls	r3, r2, #31
   1203e:	d403      	bmi.n	12048 <k_work_submit_to_queue+0x2c>
}
   12040:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   12044:	f7ff ba94 	b.w	11570 <k_queue_append>
   12048:	f85d fb04 	ldr.w	pc, [sp], #4

0001204c <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   1204c:	f1a0 010c 	sub.w	r1, r0, #12
   12050:	6980      	ldr	r0, [r0, #24]
   12052:	f7ff bfe3 	b.w	1201c <k_work_submit_to_queue>

00012056 <work_q_main>:
{
   12056:	b510      	push	{r4, lr}
   12058:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1205a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1205e:	4620      	mov	r0, r4
   12060:	f7ff faaa 	bl	115b8 <_impl_k_queue_get>
		if (!work) {
   12064:	4603      	mov	r3, r0
   12066:	2800      	cmp	r0, #0
   12068:	d0f7      	beq.n	1205a <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1206a:	3308      	adds	r3, #8
		handler = work->handler;
   1206c:	6842      	ldr	r2, [r0, #4]
   1206e:	f3bf 8f5b 	dmb	ish
   12072:	e853 1f00 	ldrex	r1, [r3]
   12076:	f021 0e01 	bic.w	lr, r1, #1
   1207a:	e843 ec00 	strex	ip, lr, [r3]
   1207e:	f1bc 0f00 	cmp.w	ip, #0
   12082:	d1f6      	bne.n	12072 <work_q_main+0x1c>
   12084:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   12088:	07cb      	lsls	r3, r1, #31
   1208a:	d500      	bpl.n	1208e <work_q_main+0x38>
			handler(work);
   1208c:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1208e:	f7ff fcf5 	bl	11a7c <_impl_k_yield>
   12092:	e7e2      	b.n	1205a <work_q_main+0x4>

00012094 <k_work_q_start>:
{
   12094:	b5f0      	push	{r4, r5, r6, r7, lr}
   12096:	b087      	sub	sp, #28
   12098:	4604      	mov	r4, r0
   1209a:	461f      	mov	r7, r3
   1209c:	460d      	mov	r5, r1
   1209e:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   120a0:	f7ff fa5e 	bl	11560 <_impl_k_queue_init>

   120a4:	2000      	movs	r0, #0
   120a6:	9005      	str	r0, [sp, #20]
   120a8:	9004      	str	r0, [sp, #16]
   120aa:	9002      	str	r0, [sp, #8]
   120ac:	9001      	str	r0, [sp, #4]
   120ae:	9703      	str	r7, [sp, #12]
   120b0:	9400      	str	r4, [sp, #0]
   120b2:	4b04      	ldr	r3, [pc, #16]	; (120c4 <k_work_q_start+0x30>)
   120b4:	4632      	mov	r2, r6
   120b6:	4629      	mov	r1, r5
   120b8:	f104 0010 	add.w	r0, r4, #16
   120bc:	f7ff ff1a 	bl	11ef4 <_impl_k_thread_create>
}
   120c0:	b007      	add	sp, #28
   120c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120c4:	00012057 	.word	0x00012057

000120c8 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   120c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   120cc:	2300      	movs	r3, #0
   120ce:	61c2      	str	r2, [r0, #28]
	t->func = func;
   120d0:	4a04      	ldr	r2, [pc, #16]	; (120e4 <k_delayed_work_init+0x1c>)
   120d2:	6003      	str	r3, [r0, #0]
   120d4:	6041      	str	r1, [r0, #4]
   120d6:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   120d8:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   120da:	6143      	str	r3, [r0, #20]
	t->func = func;
   120dc:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   120de:	6243      	str	r3, [r0, #36]	; 0x24
   120e0:	4770      	bx	lr
   120e2:	bf00      	nop
   120e4:	0001204d 	.word	0x0001204d

000120e8 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   120e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   120ea:	f04f 0320 	mov.w	r3, #32
   120ee:	f3ef 8411 	mrs	r4, BASEPRI
   120f2:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   120f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   120f8:	b923      	cbnz	r3, 12104 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   120fa:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   120fe:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   12102:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12104:	f3bf 8f5b 	dmb	ish
   12108:	6883      	ldr	r3, [r0, #8]
   1210a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1210e:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   12110:	f100 0508 	add.w	r5, r0, #8
   12114:	d533      	bpl.n	1217e <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   12116:	6a42      	ldr	r2, [r0, #36]	; 0x24
   12118:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   1211a:	2100      	movs	r1, #0
   1211c:	2b00      	cmp	r3, #0
   1211e:	d0ec      	beq.n	120fa <k_delayed_work_cancel+0x12>
   12120:	4298      	cmp	r0, r3
   12122:	d127      	bne.n	12174 <k_delayed_work_cancel+0x8c>
   12124:	6803      	ldr	r3, [r0, #0]
   12126:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12128:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   1212c:	b9c9      	cbnz	r1, 12162 <k_delayed_work_cancel+0x7a>
   1212e:	42b8      	cmp	r0, r7
	list->head = node;
   12130:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   12132:	d100      	bne.n	12136 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   12134:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12136:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12138:	f003 0303 	and.w	r3, r3, #3
   1213c:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   1213e:	2300      	movs	r3, #0
   12140:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12142:	f3bf 8f5b 	dmb	ish
   12146:	e855 2f00 	ldrex	r2, [r5]
   1214a:	f022 0201 	bic.w	r2, r2, #1
   1214e:	e845 2100 	strex	r1, r2, [r5]
   12152:	2900      	cmp	r1, #0
   12154:	d1f7      	bne.n	12146 <k_delayed_work_cancel+0x5e>
   12156:	f3bf 8f5b 	dmb	ish
   1215a:	f384 8811 	msr	BASEPRI, r4
	return 0;
   1215e:	4618      	mov	r0, r3
   12160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12162:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12164:	f006 0603 	and.w	r6, r6, #3
   12168:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   1216a:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   1216c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1216e:	bf08      	it	eq
   12170:	6051      	streq	r1, [r2, #4]
   12172:	e7e0      	b.n	12136 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12174:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   12176:	4619      	mov	r1, r3
   12178:	f026 0303 	bic.w	r3, r6, #3
   1217c:	e7ce      	b.n	1211c <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1217e:	69c1      	ldr	r1, [r0, #28]
   12180:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   12182:	f100 020c 	add.w	r2, r0, #12
   12186:	d0da      	beq.n	1213e <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   12188:	4b08      	ldr	r3, [pc, #32]	; (121ac <k_delayed_work_cancel+0xc4>)
   1218a:	699b      	ldr	r3, [r3, #24]
   1218c:	429a      	cmp	r2, r3
   1218e:	bf1f      	itttt	ne
   12190:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   12192:	6913      	ldrne	r3, [r2, #16]
   12194:	185b      	addne	r3, r3, r1
   12196:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   12198:	6903      	ldr	r3, [r0, #16]
   1219a:	68c2      	ldr	r2, [r0, #12]
   1219c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1219e:	68c2      	ldr	r2, [r0, #12]
   121a0:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   121a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121a6:	61c3      	str	r3, [r0, #28]
   121a8:	e7c9      	b.n	1213e <k_delayed_work_cancel+0x56>
   121aa:	bf00      	nop
   121ac:	200016f0 	.word	0x200016f0

000121b0 <k_delayed_work_submit_to_queue>:
{
   121b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121b2:	4607      	mov	r7, r0
   121b4:	460c      	mov	r4, r1
   121b6:	4615      	mov	r5, r2
	__asm__ volatile(
   121b8:	f04f 0320 	mov.w	r3, #32
   121bc:	f3ef 8611 	mrs	r6, BASEPRI
   121c0:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   121c4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   121c6:	b123      	cbz	r3, 121d2 <k_delayed_work_submit_to_queue+0x22>
   121c8:	4283      	cmp	r3, r0
   121ca:	d00b      	beq.n	121e4 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   121cc:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   121d0:	e00d      	b.n	121ee <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   121d2:	b138      	cbz	r0, 121e4 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   121d4:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   121d6:	b96d      	cbnz	r5, 121f4 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   121d8:	4621      	mov	r1, r4
   121da:	4638      	mov	r0, r7
   121dc:	f7ff ff1e 	bl	1201c <k_work_submit_to_queue>
	err = 0;
   121e0:	2000      	movs	r0, #0
   121e2:	e004      	b.n	121ee <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   121e4:	4620      	mov	r0, r4
   121e6:	f7ff ff7f 	bl	120e8 <k_delayed_work_cancel>
		if (err < 0) {
   121ea:	2800      	cmp	r0, #0
   121ec:	daf2      	bge.n	121d4 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   121ee:	f386 8811 	msr	BASEPRI, r6
}
   121f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   121f4:	220a      	movs	r2, #10
   121f6:	3509      	adds	r5, #9
   121f8:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   121fc:	4a16      	ldr	r2, [pc, #88]	; (12258 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   121fe:	2300      	movs	r3, #0
   12200:	4611      	mov	r1, r2
   12202:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   12204:	61a3      	str	r3, [r4, #24]
   12206:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   1220a:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1220c:	428b      	cmp	r3, r1
   1220e:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   12212:	61e5      	str	r5, [r4, #28]
   12214:	d106      	bne.n	12224 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   12216:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   12218:	6993      	ldr	r3, [r2, #24]
   1221a:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   1221c:	6993      	ldr	r3, [r2, #24]
   1221e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   12220:	6197      	str	r7, [r2, #24]
   12222:	e7dd      	b.n	121e0 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   12224:	2b00      	cmp	r3, #0
   12226:	d0f6      	beq.n	12216 <k_delayed_work_submit_to_queue+0x66>
   12228:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1222c:	69e0      	ldr	r0, [r4, #28]
   1222e:	691d      	ldr	r5, [r3, #16]
   12230:	42a8      	cmp	r0, r5
   12232:	dc08      	bgt.n	12246 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   12234:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   12236:	1a28      	subs	r0, r5, r0
   12238:	6118      	str	r0, [r3, #16]
   1223a:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   1223c:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   1223e:	685a      	ldr	r2, [r3, #4]
   12240:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   12242:	605f      	str	r7, [r3, #4]
   12244:	e7cc      	b.n	121e0 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   12246:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   12248:	4573      	cmp	r3, lr
   1224a:	61e0      	str	r0, [r4, #28]
   1224c:	d0e3      	beq.n	12216 <k_delayed_work_submit_to_queue+0x66>
   1224e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   12250:	2b00      	cmp	r3, #0
   12252:	d1eb      	bne.n	1222c <k_delayed_work_submit_to_queue+0x7c>
   12254:	e7df      	b.n	12216 <k_delayed_work_submit_to_queue+0x66>
   12256:	bf00      	nop
   12258:	200016f0 	.word	0x200016f0

0001225c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   1225c:	2314      	movs	r3, #20
   1225e:	b530      	push	{r4, r5, lr}
   12260:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   12264:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   12266:	2900      	cmp	r1, #0
   12268:	da00      	bge.n	1226c <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   1226a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1226c:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   1226e:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   12270:	f003 030f 	and.w	r3, r3, #15
   12274:	2b02      	cmp	r3, #2
   12276:	d003      	beq.n	12280 <clear_event_registrations+0x24>
   12278:	2b04      	cmp	r3, #4
   1227a:	d001      	beq.n	12280 <clear_event_registrations+0x24>
   1227c:	2b01      	cmp	r3, #1
   1227e:	d104      	bne.n	1228a <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   12280:	6843      	ldr	r3, [r0, #4]
   12282:	6805      	ldr	r5, [r0, #0]
   12284:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   12286:	6805      	ldr	r5, [r0, #0]
   12288:	606b      	str	r3, [r5, #4]
   1228a:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   1228e:	f04f 0320 	mov.w	r3, #32
   12292:	f3ef 8211 	mrs	r2, BASEPRI
   12296:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   1229a:	3901      	subs	r1, #1
   1229c:	3814      	subs	r0, #20
   1229e:	e7e2      	b.n	12266 <clear_event_registrations+0xa>

000122a0 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   122a0:	6883      	ldr	r3, [r0, #8]
{
   122a2:	b570      	push	{r4, r5, r6, lr}
   122a4:	4605      	mov	r5, r0
   122a6:	460e      	mov	r6, r1
	if (!event->poller) {
   122a8:	b1d3      	cbz	r3, 122e0 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   122aa:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   122ac:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   122ae:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   122b0:	7a63      	ldrb	r3, [r4, #9]
   122b2:	079a      	lsls	r2, r3, #30
   122b4:	d514      	bpl.n	122e0 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   122b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   122b8:	3302      	adds	r3, #2
   122ba:	d01a      	beq.n	122f2 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   122bc:	4620      	mov	r0, r4
   122be:	f7ff fa6e 	bl	1179e <_unpend_thread>
	_set_thread_return_value(thread,
   122c2:	2e00      	cmp	r6, #0
   122c4:	bf0c      	ite	eq
   122c6:	f06f 0303 	mvneq.w	r3, #3
   122ca:	2300      	movne	r3, #0
   122cc:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   122ce:	7a63      	ldrb	r3, [r4, #9]
   122d0:	06db      	lsls	r3, r3, #27
   122d2:	d105      	bne.n	122e0 <signal_poll_event+0x40>
   122d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   122d6:	3301      	adds	r3, #1
   122d8:	d102      	bne.n	122e0 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   122da:	4620      	mov	r0, r4
   122dc:	f7ff fac2 	bl	11864 <_add_thread_to_ready_q>
	event->state |= state;
   122e0:	7b6b      	ldrb	r3, [r5, #13]
   122e2:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   122e6:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   122ea:	2000      	movs	r0, #0
	event->state |= state;
   122ec:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   122ee:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   122f0:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   122f2:	f06f 000a 	mvn.w	r0, #10
}
   122f6:	bd70      	pop	{r4, r5, r6, pc}

000122f8 <add_event>:
{
   122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   122fa:	6803      	ldr	r3, [r0, #0]
   122fc:	4298      	cmp	r0, r3
   122fe:	4604      	mov	r4, r0
   12300:	460e      	mov	r6, r1
   12302:	4617      	mov	r7, r2
   12304:	d106      	bne.n	12314 <add_event+0x1c>
	node->next = list;
   12306:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   12308:	6863      	ldr	r3, [r4, #4]
   1230a:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   1230c:	6863      	ldr	r3, [r4, #4]
   1230e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   12310:	6066      	str	r6, [r4, #4]
   12312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   12314:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   12316:	2b00      	cmp	r3, #0
   12318:	d0f5      	beq.n	12306 <add_event+0xe>
   1231a:	689b      	ldr	r3, [r3, #8]
   1231c:	6811      	ldr	r1, [r2, #0]
   1231e:	6818      	ldr	r0, [r3, #0]
   12320:	f7ff f9ee 	bl	11700 <_is_t1_higher_prio_than_t2>
   12324:	2800      	cmp	r0, #0
   12326:	d1ee      	bne.n	12306 <add_event+0xe>
	return list->head == list;
   12328:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1232a:	42ac      	cmp	r4, r5
   1232c:	d0eb      	beq.n	12306 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1232e:	2d00      	cmp	r5, #0
   12330:	d0e9      	beq.n	12306 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   12332:	68ab      	ldr	r3, [r5, #8]
   12334:	6838      	ldr	r0, [r7, #0]
   12336:	6819      	ldr	r1, [r3, #0]
   12338:	f7ff f9e2 	bl	11700 <_is_t1_higher_prio_than_t2>
   1233c:	b130      	cbz	r0, 1234c <add_event+0x54>
		node->prev = insert_point->prev;
   1233e:	686b      	ldr	r3, [r5, #4]
   12340:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   12342:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   12344:	686b      	ldr	r3, [r5, #4]
   12346:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   12348:	606e      	str	r6, [r5, #4]
   1234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1234c:	6863      	ldr	r3, [r4, #4]
   1234e:	429d      	cmp	r5, r3
   12350:	d0d9      	beq.n	12306 <add_event+0xe>
   12352:	682d      	ldr	r5, [r5, #0]
   12354:	e7eb      	b.n	1232e <add_event+0x36>

00012356 <k_poll_event_init>:
{
   12356:	b530      	push	{r4, r5, lr}
	event->type = type;
   12358:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   1235a:	6103      	str	r3, [r0, #16]
	event->type = type;
   1235c:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   12360:	7b81      	ldrb	r1, [r0, #14]
   12362:	f362 0100 	bfi	r1, r2, #0, #1
   12366:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   12368:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   1236a:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   1236c:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   12370:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   12374:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   12376:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   12378:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   1237a:	bd30      	pop	{r4, r5, pc}

0001237c <_impl_k_poll>:
{
   1237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   12380:	4b3f      	ldr	r3, [pc, #252]	; (12480 <_impl_k_poll+0x104>)
{
   12382:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   12384:	689b      	ldr	r3, [r3, #8]
   12386:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   12388:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1238a:	2301      	movs	r3, #1
{
   1238c:	4607      	mov	r7, r0
   1238e:	468a      	mov	sl, r1
   12390:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   12392:	9301      	str	r3, [sp, #4]
   12394:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   12396:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   1239a:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   1239c:	4556      	cmp	r6, sl
   1239e:	db10      	blt.n	123c2 <_impl_k_poll+0x46>
   123a0:	f04f 0320 	mov.w	r3, #32
   123a4:	f3ef 8611 	mrs	r6, BASEPRI
   123a8:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   123ac:	9c01      	ldr	r4, [sp, #4]
   123ae:	2c00      	cmp	r4, #0
   123b0:	d13f      	bne.n	12432 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   123b2:	4632      	mov	r2, r6
   123b4:	4629      	mov	r1, r5
   123b6:	4638      	mov	r0, r7
   123b8:	f7ff ff50 	bl	1225c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   123bc:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   123c0:	e040      	b.n	12444 <_impl_k_poll+0xc8>
	__asm__ volatile(
   123c2:	f04f 0320 	mov.w	r3, #32
   123c6:	f3ef 8b11 	mrs	fp, BASEPRI
   123ca:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   123ce:	7b62      	ldrb	r2, [r4, #13]
   123d0:	f002 030f 	and.w	r3, r2, #15
   123d4:	2b02      	cmp	r3, #2
   123d6:	d003      	beq.n	123e0 <_impl_k_poll+0x64>
   123d8:	2b04      	cmp	r3, #4
   123da:	d004      	beq.n	123e6 <_impl_k_poll+0x6a>
   123dc:	2b01      	cmp	r3, #1
   123de:	d106      	bne.n	123ee <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   123e0:	6921      	ldr	r1, [r4, #16]
   123e2:	6889      	ldr	r1, [r1, #8]
   123e4:	e001      	b.n	123ea <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   123e6:	6921      	ldr	r1, [r4, #16]
   123e8:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   123ea:	2900      	cmp	r1, #0
   123ec:	d13d      	bne.n	1246a <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   123ee:	f1b8 0f00 	cmp.w	r8, #0
   123f2:	d014      	beq.n	1241e <_impl_k_poll+0xa2>
   123f4:	9a01      	ldr	r2, [sp, #4]
   123f6:	b192      	cbz	r2, 1241e <_impl_k_poll+0xa2>
	switch (event->type) {
   123f8:	2b02      	cmp	r3, #2
   123fa:	d007      	beq.n	1240c <_impl_k_poll+0x90>
   123fc:	2b04      	cmp	r3, #4
   123fe:	d013      	beq.n	12428 <_impl_k_poll+0xac>
   12400:	2b01      	cmp	r3, #1
   12402:	d109      	bne.n	12418 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   12404:	466a      	mov	r2, sp
   12406:	4621      	mov	r1, r4
   12408:	6920      	ldr	r0, [r4, #16]
   1240a:	e003      	b.n	12414 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   1240c:	6920      	ldr	r0, [r4, #16]
   1240e:	466a      	mov	r2, sp
   12410:	4621      	mov	r1, r4
   12412:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   12414:	f7ff ff70 	bl	122f8 <add_event>
	event->poller = poller;
   12418:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   1241c:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1241e:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   12422:	3601      	adds	r6, #1
   12424:	3414      	adds	r4, #20
   12426:	e7b9      	b.n	1239c <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   12428:	6920      	ldr	r0, [r4, #16]
   1242a:	466a      	mov	r2, sp
   1242c:	4621      	mov	r1, r4
   1242e:	3008      	adds	r0, #8
   12430:	e7f0      	b.n	12414 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   12432:	2300      	movs	r3, #0
   12434:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   12436:	f1b8 0f00 	cmp.w	r8, #0
   1243a:	d107      	bne.n	1244c <_impl_k_poll+0xd0>
   1243c:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   12440:	f06f 040a 	mvn.w	r4, #10
}
   12444:	4620      	mov	r0, r4
   12446:	b005      	add	sp, #20
   12448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1244c:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1244e:	4642      	mov	r2, r8
   12450:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   12452:	9102      	str	r1, [sp, #8]
   12454:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   12456:	f7ff fab3 	bl	119c0 <_pend_current_thread>
   1245a:	4604      	mov	r4, r0
	__asm__ volatile(
   1245c:	f04f 0320 	mov.w	r3, #32
   12460:	f3ef 8611 	mrs	r6, BASEPRI
   12464:	f383 8811 	msr	BASEPRI, r3
   12468:	e7a3      	b.n	123b2 <_impl_k_poll+0x36>
	event->state |= state;
   1246a:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   1246e:	f363 1207 	bfi	r2, r3, #4, #4
   12472:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   12474:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   12478:	f8cd 9004 	str.w	r9, [sp, #4]
   1247c:	e7cf      	b.n	1241e <_impl_k_poll+0xa2>
   1247e:	bf00      	nop
   12480:	200016f0 	.word	0x200016f0

00012484 <_handle_obj_poll_events>:
	return list->head == list;
   12484:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   12486:	4298      	cmp	r0, r3
   12488:	d007      	beq.n	1249a <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   1248a:	e893 0005 	ldmia.w	r3, {r0, r2}
   1248e:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   12490:	6818      	ldr	r0, [r3, #0]
   12492:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   12494:	4618      	mov	r0, r3
   12496:	f7ff bf03 	b.w	122a0 <signal_poll_event>
   1249a:	4770      	bx	lr

0001249c <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   1249c:	b538      	push	{r3, r4, r5, lr}
   1249e:	f04f 0320 	mov.w	r3, #32
   124a2:	f3ef 8511 	mrs	r5, BASEPRI
   124a6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   124aa:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   124ac:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   124ae:	4298      	cmp	r0, r3
	signal->signaled = 1;
   124b0:	f04f 0101 	mov.w	r1, #1
   124b4:	6081      	str	r1, [r0, #8]
   124b6:	d00d      	beq.n	124d4 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   124b8:	e893 0005 	ldmia.w	r3, {r0, r2}
   124bc:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   124be:	6818      	ldr	r0, [r3, #0]
   124c0:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   124c2:	4618      	mov	r0, r3
   124c4:	f7ff feec 	bl	122a0 <signal_poll_event>
   124c8:	4604      	mov	r4, r0

	_reschedule(key);
   124ca:	4628      	mov	r0, r5
   124cc:	f7ff f972 	bl	117b4 <_reschedule>
	return rc;
}
   124d0:	4620      	mov	r0, r4
   124d2:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   124d4:	f385 8811 	msr	BASEPRI, r5
		return 0;
   124d8:	2400      	movs	r4, #0
   124da:	e7f9      	b.n	124d0 <_impl_k_poll_signal+0x34>

000124dc <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   124dc:	4770      	bx	lr
