
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002d28 	.word	0x20002d28

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001b01 	.word	0x00001b01
       8:	00001b55 	.word	0x00001b55
       c:	00001985 	.word	0x00001985
      10:	00001985 	.word	0x00001985
      14:	00001985 	.word	0x00001985
      18:	00001985 	.word	0x00001985
      1c:	00001985 	.word	0x00001985
      20:	00001985 	.word	0x00001985
      24:	00001985 	.word	0x00001985
      28:	00001985 	.word	0x00001985
      2c:	00001589 	.word	0x00001589
      30:	00001985 	.word	0x00001985
      34:	00001985 	.word	0x00001985
      38:	00001545 	.word	0x00001545
      3c:	00001985 	.word	0x00001985

00000040 <_irq_vector_table>:
      40:	00001ac5 00010e13 00001ac5 00001ac5     ................
      50:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      60:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      70:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      80:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      90:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      a0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      b0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      c0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      d0:	00001ac5 00001ac5 00001ac5              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001279 00000000 000018f9     ....y...........
      ec:	00000000 000018f9 00000000 000018f9     ................
      fc:	00000000 000018f9 00000000 000018f9     ................
     10c:	00000000 00012e49 00000000 000018f9     ....I...........
     11c:	00000000 000018f9 00000000 000018f9     ................
     12c:	00000000 000018f9 00000000 00010dd9     ................
     13c:	00000000 000018f9 20003f24 0001314d     ........$?. M1..
     14c:	00000000 000018f9 00000000 000018f9     ................
     15c:	00000000 000018f9 00000000 000013a1     ................
     16c:	00000000 000018f9 00000000 000018f9     ................
     17c:	00000000 000018f9 00000000 000018f9     ................
     18c:	00000000 000018f9 00000000 000018f9     ................
     19c:	00000000 00010e0d 00000000 000018f9     ................
     1ac:	00000000 000018f9 00000000 000018f9     ................
     1bc:	00000000 000018f9 00000000 000018f9     ................
     1cc:	00000000 000018f9 00000000 000018f9     ................
     1dc:	00000000 000018f9 00000000 000018f9     ................
     1ec:	00000000 000018f9 00000000 000018f9     ................
     1fc:	00000000 000018f9 00000000 000018f9     ................
     20c:	00000000 000018f9                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb26 	bl	1bb8 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	000147fd 	.word	0x000147fd
     5b0:	00014826 	.word	0x00014826
     5b4:	00014804 	.word	0x00014804
     5b8:	0001480b 	.word	0x0001480b
     5bc:	00014815 	.word	0x00014815
     5c0:	0001481f 	.word	0x0001481f

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 f826 	bl	461c <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 f8bf 	bl	477c <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00014849 	.word	0x00014849
     604:	20000000 	.word	0x20000000
     608:	00014867 	.word	0x00014867

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 ffff 	bl	461c <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 fe34 	bl	429c <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fa14 	bl	3a74 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00014892 	.word	0x00014892
     664:	000147a0 	.word	0x000147a0
     668:	00000671 	.word	0x00000671
     66c:	000148b0 	.word	0x000148b0

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fa3f 	bl	3b18 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 ffb9 	bl	4620 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	00014876 	.word	0x00014876
     6bc:	000147a6 	.word	0x000147a6

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 f966 	bl	3994 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fabc 	bl	3c5c <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 f9be 	bl	3a74 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	000148d3 	.word	0x000148d3
     70c:	000148f3 	.word	0x000148f3
     710:	20003a68 	.word	0x20003a68
     714:	000147ae 	.word	0x000147ae
     718:	00000671 	.word	0x00000671
     71c:	000148b0 	.word	0x000148b0
     720:	0001490a 	.word	0x0001490a

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a9c 	.word	0x20003a9c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 f9dc 	bl	13c60 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8e4 	bl	1a74 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003aa0 	.word	0x20003aa0

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003aa0 	.word	0x20003aa0

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr

00000fe2 <syslog_hook_default>:
 */

#include <logging/sys_log.h>

void syslog_hook_default(const char *fmt, ...)
{
     fe2:	b40f      	push	{r0, r1, r2, r3}
	(void)(fmt);  /* Prevent warning about unused argument */
}
     fe4:	b004      	add	sp, #16
     fe6:	4770      	bx	lr

00000fe8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fea:	4c11      	ldr	r4, [pc, #68]	; (1030 <sys_rand32_get+0x48>)
     fec:	f3bf 8f5b 	dmb	ish
     ff0:	6820      	ldr	r0, [r4, #0]
     ff2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff6:	b960      	cbnz	r0, 1012 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff8:	480e      	ldr	r0, [pc, #56]	; (1034 <sys_rand32_get+0x4c>)
     ffa:	f012 f915 	bl	13228 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffe:	f3bf 8f5b 	dmb	ish
    1002:	e854 3f00 	ldrex	r3, [r4]
    1006:	e844 0200 	strex	r2, r0, [r4]
    100a:	2a00      	cmp	r2, #0
    100c:	d1f9      	bne.n	1002 <sys_rand32_get+0x1a>
    100e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1012:	6843      	ldr	r3, [r0, #4]
    1014:	2204      	movs	r2, #4
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	eb0d 0102 	add.w	r1, sp, r2
    101c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101e:	2800      	cmp	r0, #0
    1020:	da02      	bge.n	1028 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1022:	f000 fa37 	bl	1494 <_timer_cycle_get_32>
    1026:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1028:	9801      	ldr	r0, [sp, #4]
    102a:	b002      	add	sp, #8
    102c:	bd10      	pop	{r4, pc}
    102e:	bf00      	nop
    1030:	20000004 	.word	0x20000004
    1034:	00014938 	.word	0x00014938

00001038 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1038:	280a      	cmp	r0, #10
{
    103a:	b538      	push	{r3, r4, r5, lr}
    103c:	4604      	mov	r4, r0
    103e:	4d07      	ldr	r5, [pc, #28]	; (105c <console_out+0x24>)
	if ('\n' == c) {
    1040:	d104      	bne.n	104c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1042:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1044:	6843      	ldr	r3, [r0, #4]
    1046:	210d      	movs	r1, #13
    1048:	685b      	ldr	r3, [r3, #4]
    104a:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    104c:	6828      	ldr	r0, [r5, #0]
    104e:	6843      	ldr	r3, [r0, #4]
    1050:	b2e1      	uxtb	r1, r4
    1052:	685b      	ldr	r3, [r3, #4]
    1054:	4798      	blx	r3

	return c;
}
    1056:	4620      	mov	r0, r4
    1058:	bd38      	pop	{r3, r4, r5, pc}
    105a:	bf00      	nop
    105c:	20000008 	.word	0x20000008

00001060 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1060:	4801      	ldr	r0, [pc, #4]	; (1068 <uart_console_hook_install+0x8>)
    1062:	f7ff be4d 	b.w	d00 <__printk_hook_install>
    1066:	bf00      	nop
    1068:	00001039 	.word	0x00001039

0000106c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    106c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106e:	4804      	ldr	r0, [pc, #16]	; (1080 <uart_console_init+0x14>)
    1070:	f012 f8da 	bl	13228 <device_get_binding>
    1074:	4b03      	ldr	r3, [pc, #12]	; (1084 <uart_console_init+0x18>)
    1076:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1078:	f7ff fff2 	bl	1060 <uart_console_hook_install>

	return 0;
}
    107c:	2000      	movs	r0, #0
    107e:	bd08      	pop	{r3, pc}
    1080:	00014942 	.word	0x00014942
    1084:	20000008 	.word	0x20000008

00001088 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1088:	b510      	push	{r4, lr}
	__asm__ volatile(
    108a:	f04f 0320 	mov.w	r3, #32
    108e:	f3ef 8211 	mrs	r2, BASEPRI
    1092:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1096:	4c11      	ldr	r4, [pc, #68]	; (10dc <_m16src_stop+0x54>)
    1098:	7823      	ldrb	r3, [r4, #0]
    109a:	b923      	cbnz	r3, 10a6 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    109c:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10a0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a4:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a6:	3b01      	subs	r3, #1
    10a8:	b2db      	uxtb	r3, r3
    10aa:	7023      	strb	r3, [r4, #0]
    10ac:	b123      	cbz	r3, 10b8 <_m16src_stop+0x30>
    10ae:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10b2:	f06f 000f 	mvn.w	r0, #15
    10b6:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b8:	4b09      	ldr	r3, [pc, #36]	; (10e0 <_m16src_stop+0x58>)
    10ba:	7818      	ldrb	r0, [r3, #0]
    10bc:	2101      	movs	r1, #1
    10be:	b128      	cbz	r0, 10cc <_m16src_stop+0x44>
		m16src_ref++;
    10c0:	7021      	strb	r1, [r4, #0]
    10c2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c6:	f06f 000a 	mvn.w	r0, #10
    10ca:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10cc:	7019      	strb	r1, [r3, #0]
    10ce:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d6:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d8:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10da:	bd10      	pop	{r4, pc}
    10dc:	2000000e 	.word	0x2000000e
    10e0:	2000000d 	.word	0x2000000d

000010e4 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e6:	2200      	movs	r2, #0
    10e8:	4610      	mov	r0, r2
    10ea:	2101      	movs	r1, #1
    10ec:	f000 fbec 	bl	18c8 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10f0:	2000      	movs	r0, #0
    10f2:	f000 fbb7 	bl	1864 <_arch_irq_enable>

	return 0;
}
    10f6:	2000      	movs	r0, #0
    10f8:	bd08      	pop	{r3, pc}
	...

000010fc <_m16src_start>:
{
    10fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fe:	f04f 0220 	mov.w	r2, #32
    1102:	f3ef 8311 	mrs	r3, BASEPRI
    1106:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    110a:	4a25      	ldr	r2, [pc, #148]	; (11a0 <_m16src_start+0xa4>)
    110c:	7810      	ldrb	r0, [r2, #0]
    110e:	1c44      	adds	r4, r0, #1
    1110:	7014      	strb	r4, [r2, #0]
    1112:	b160      	cbz	r0, 112e <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1114:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    111c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1120:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1124:	bf14      	ite	ne
    1126:	2000      	movne	r0, #0
    1128:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112e:	4d1d      	ldr	r5, [pc, #116]	; (11a4 <_m16src_start+0xa8>)
    1130:	782f      	ldrb	r7, [r5, #0]
    1132:	b12f      	cbz	r7, 1140 <_m16src_start+0x44>
		m16src_ref--;
    1134:	7010      	strb	r0, [r2, #0]
    1136:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    113a:	f06f 000a 	mvn.w	r0, #10
    113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1140:	2601      	movs	r6, #1
    1142:	702e      	strb	r6, [r5, #0]
    1144:	f383 8811 	msr	BASEPRI, r3
    1148:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    114c:	b319      	cbz	r1, 1196 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114e:	4638      	mov	r0, r7
    1150:	f000 fb98 	bl	1884 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1154:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1158:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    115c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1160:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1162:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1166:	b192      	cbz	r2, 118e <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1168:	2200      	movs	r2, #0
    116a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116e:	4a0e      	ldr	r2, [pc, #56]	; (11a8 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1170:	f013 0f01 	tst.w	r3, #1
    1174:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1178:	bf08      	it	eq
    117a:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117e:	2000      	movs	r0, #0
    1180:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1184:	f000 fb6e 	bl	1864 <_arch_irq_enable>
	m16src_grd = 0;
    1188:	2300      	movs	r3, #0
    118a:	702b      	strb	r3, [r5, #0]
    118c:	e7c4      	b.n	1118 <_m16src_start+0x1c>
			__WFE();
    118e:	bf20      	wfe
			__SEV();
    1190:	bf40      	sev
			__WFE();
    1192:	bf20      	wfe
    1194:	e7e5      	b.n	1162 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1196:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    119a:	6026      	str	r6, [r4, #0]
    119c:	e7f4      	b.n	1188 <_m16src_start+0x8c>
    119e:	bf00      	nop
    11a0:	2000000e 	.word	0x2000000e
    11a4:	2000000d 	.word	0x2000000d
    11a8:	e000e100 	.word	0xe000e100

000011ac <_k32src_start>:
{
    11ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ae:	4606      	mov	r6, r0
    11b0:	460c      	mov	r4, r1
	__asm__ volatile(
    11b2:	f04f 0220 	mov.w	r2, #32
    11b6:	f3ef 8311 	mrs	r3, BASEPRI
    11ba:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11be:	4a2c      	ldr	r2, [pc, #176]	; (1270 <_k32src_start+0xc4>)
    11c0:	7815      	ldrb	r5, [r2, #0]
    11c2:	b165      	cbz	r5, 11de <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c4:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d4:	bf0c      	ite	eq
    11d6:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11da:	2000      	movne	r0, #0
    11dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11de:	2701      	movs	r7, #1
    11e0:	7017      	strb	r7, [r2, #0]
    11e2:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e6:	4628      	mov	r0, r5
    11e8:	f000 fb4c 	bl	1884 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f0:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11f2:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fe:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1202:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1204:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1208:	b371      	cbz	r1, 1268 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    120a:	0792      	lsls	r2, r2, #30
    120c:	4f19      	ldr	r7, [pc, #100]	; (1274 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120e:	bf58      	it	pl
    1210:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1212:	f04f 0100 	mov.w	r1, #0
    1216:	f04f 0501 	mov.w	r5, #1
    121a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121e:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1222:	bf58      	it	pl
    1224:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1228:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    122c:	f000 fb1a 	bl	1864 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1234:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1236:	2218      	movs	r2, #24
    1238:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    123c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1240:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1244:	f014 0103 	ands.w	r1, r4, #3
    1248:	d1be      	bne.n	11c8 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    124a:	2010      	movs	r0, #16
    124c:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1250:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1254:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1256:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    125a:	f7ff ff4f 	bl	10fc <_m16src_start>
		if (!err) {
    125e:	2800      	cmp	r0, #0
    1260:	d1b2      	bne.n	11c8 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1262:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1266:	e7af      	b.n	11c8 <_k32src_start+0x1c>
		__WFE();
    1268:	bf20      	wfe
		__SEV();
    126a:	bf40      	sev
		__WFE();
    126c:	bf20      	wfe
    126e:	e7c9      	b.n	1204 <_k32src_start+0x58>
    1270:	2000000c 	.word	0x2000000c
    1274:	e000e100 	.word	0xe000e100

00001278 <_power_clock_isr>:
{
    1278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1280:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1284:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1288:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    128c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1290:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1294:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1298:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    129c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    12a0:	f1be 0f00 	cmp.w	lr, #0
    12a4:	d003      	beq.n	12ae <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a6:	f04f 0e00 	mov.w	lr, #0
    12aa:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12ae:	b127      	cbz	r7, 12ba <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b4:	2700      	movs	r7, #0
    12b6:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12ba:	b13a      	cbz	r2, 12cc <_power_clock_isr+0x54>
    12bc:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12be:	bf41      	itttt	mi
    12c0:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c4:	2201      	movmi	r2, #1
    12c6:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12ca:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12cc:	b120      	cbz	r0, 12d8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12d2:	2200      	movs	r2, #0
    12d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d8:	b149      	cbz	r1, 12ee <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12de:	2100      	movs	r1, #0
    12e0:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e4:	4628      	mov	r0, r5
    12e6:	f7ff fecf 	bl	1088 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12ea:	2301      	movs	r3, #1
    12ec:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ee:	b176      	cbz	r6, 130e <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f4:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f6:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12fc:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fe:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1302:	f7ff fefb 	bl	10fc <_m16src_start>
		if (!err) {
    1306:	b910      	cbnz	r0, 130e <_power_clock_isr+0x96>
    1308:	4b01      	ldr	r3, [pc, #4]	; (1310 <_power_clock_isr+0x98>)
    130a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1310:	e000e100 	.word	0xe000e100

00001314 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1314:	4b08      	ldr	r3, [pc, #32]	; (1338 <rtc_compare_set+0x24>)
    1316:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    131a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131e:	1ac0      	subs	r0, r0, r3
    1320:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1324:	4b05      	ldr	r3, [pc, #20]	; (133c <rtc_compare_set+0x28>)
    1326:	3802      	subs	r0, #2
    1328:	4298      	cmp	r0, r3
    132a:	bf82      	ittt	hi
    132c:	4b04      	ldrhi	r3, [pc, #16]	; (1340 <rtc_compare_set+0x2c>)
    132e:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1332:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1336:	4770      	bx	lr
    1338:	40011000 	.word	0x40011000
    133c:	007ffffd 	.word	0x007ffffd
    1340:	e000e100 	.word	0xe000e100

00001344 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1344:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1346:	4b11      	ldr	r3, [pc, #68]	; (138c <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1348:	4c11      	ldr	r4, [pc, #68]	; (1390 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    134a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	4d10      	ldr	r5, [pc, #64]	; (1394 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1354:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    135a:	4298      	cmp	r0, r3
    135c:	d30f      	bcc.n	137e <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135e:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1362:	490d      	ldr	r1, [pc, #52]	; (1398 <rtc_announce_set_next+0x54>)
    1364:	6809      	ldr	r1, [r1, #0]
    1366:	4288      	cmp	r0, r1
    1368:	bf28      	it	cs
    136a:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    136c:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    1370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1374:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <rtc_announce_set_next+0x58>)
    1378:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    137a:	f012 fd13 	bl	13da4 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137e:	6820      	ldr	r0, [r4, #0]
    1380:	682b      	ldr	r3, [r5, #0]
    1382:	4418      	add	r0, r3
}
    1384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1388:	f7ff bfc4 	b.w	1314 <rtc_compare_set>
    138c:	40011000 	.word	0x40011000
    1390:	20000014 	.word	0x20000014
    1394:	20003ec0 	.word	0x20003ec0
    1398:	20000010 	.word	0x20000010
    139c:	20003ebc 	.word	0x20003ebc

000013a0 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    13a0:	4b02      	ldr	r3, [pc, #8]	; (13ac <rtc1_nrf5_isr+0xc>)
    13a2:	2200      	movs	r2, #0
    13a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a8:	f7ff bfcc 	b.w	1344 <rtc_announce_set_next>
    13ac:	40011000 	.word	0x40011000

000013b0 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13b0:	1e03      	subs	r3, r0, #0
    13b2:	4a0a      	ldr	r2, [pc, #40]	; (13dc <_timer_idle_enter+0x2c>)
    13b4:	480a      	ldr	r0, [pc, #40]	; (13e0 <_timer_idle_enter+0x30>)
    13b6:	db04      	blt.n	13c2 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b8:	6811      	ldr	r1, [r2, #0]
    13ba:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13be:	428b      	cmp	r3, r1
    13c0:	dd02      	ble.n	13c8 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13c2:	6813      	ldr	r3, [r2, #0]
    13c4:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c8:	6810      	ldr	r0, [r2, #0]
    13ca:	4a06      	ldr	r2, [pc, #24]	; (13e4 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13cc:	4906      	ldr	r1, [pc, #24]	; (13e8 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13d0:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13d2:	fb00 2003 	mla	r0, r0, r3, r2
    13d6:	f7ff bf9d 	b.w	1314 <rtc_compare_set>
    13da:	bf00      	nop
    13dc:	20003ec0 	.word	0x20003ec0
    13e0:	007fffff 	.word	0x007fffff
    13e4:	20000014 	.word	0x20000014
    13e8:	20000010 	.word	0x20000010

000013ec <_timer_idle_exit>:
{
    13ec:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <_timer_idle_exit+0x20>)
    13f0:	2200      	movs	r2, #0
    13f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <_timer_idle_exit+0x24>)
    13f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1400:	f7ff ffa0 	bl	1344 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1404:	4b03      	ldr	r3, [pc, #12]	; (1414 <_timer_idle_exit+0x28>)
    1406:	2201      	movs	r2, #1
    1408:	601a      	str	r2, [r3, #0]
    140a:	bd08      	pop	{r3, pc}
    140c:	40011000 	.word	0x40011000
    1410:	e000e100 	.word	0xe000e100
    1414:	20000010 	.word	0x20000010

00001418 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1418:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    141a:	4818      	ldr	r0, [pc, #96]	; (147c <_sys_clock_driver_init+0x64>)
    141c:	f011 ff04 	bl	13228 <device_get_binding>
	if (!clock) {
    1420:	b348      	cbz	r0, 1476 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1422:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1424:	4d16      	ldr	r5, [pc, #88]	; (1480 <_sys_clock_driver_init+0x68>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	2101      	movs	r1, #1
    142a:	4798      	blx	r3
	rtc_past = 0;
    142c:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x6c>)
    142e:	2400      	movs	r4, #0
    1430:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1432:	4b15      	ldr	r3, [pc, #84]	; (1488 <_sys_clock_driver_init+0x70>)
    1434:	2601      	movs	r6, #1
    1436:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1438:	4b14      	ldr	r3, [pc, #80]	; (148c <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    143a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1448:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    144c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1452:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    145a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145e:	4631      	mov	r1, r6
    1460:	4622      	mov	r2, r4
    1462:	2011      	movs	r0, #17
    1464:	f000 fa30 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1468:	2011      	movs	r0, #17
    146a:	f000 f9fb 	bl	1864 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1470:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1472:	602e      	str	r6, [r5, #0]
	return 0;
    1474:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    147a:	bd70      	pop	{r4, r5, r6, pc}
    147c:	00014964 	.word	0x00014964
    1480:	40011000 	.word	0x40011000
    1484:	20000014 	.word	0x20000014
    1488:	20000010 	.word	0x20000010
    148c:	20003ec0 	.word	0x20003ec0
    1490:	e000e100 	.word	0xe000e100

00001494 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1494:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <_timer_cycle_get_32+0x2c>)
{
    1496:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1498:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    149c:	4d09      	ldr	r5, [pc, #36]	; (14c4 <_timer_cycle_get_32+0x30>)
    149e:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    14a2:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a6:	42a3      	cmp	r3, r4
    14a8:	d107      	bne.n	14ba <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14aa:	4a07      	ldr	r2, [pc, #28]	; (14c8 <_timer_cycle_get_32+0x34>)
    14ac:	6812      	ldr	r2, [r2, #0]
    14ae:	4350      	muls	r0, r2
    14b0:	1a1b      	subs	r3, r3, r0
    14b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b6:	4418      	add	r0, r3
    14b8:	bd30      	pop	{r4, r5, pc}
    14ba:	4623      	mov	r3, r4
    14bc:	e7ef      	b.n	149e <_timer_cycle_get_32+0xa>
    14be:	bf00      	nop
    14c0:	40011000 	.word	0x40011000
    14c4:	200019c0 	.word	0x200019c0
    14c8:	20003ec0 	.word	0x20003ec0

000014cc <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14cc:	4809      	ldr	r0, [pc, #36]	; (14f4 <_EXIT_EXC+0xc>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ce:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14d0:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14d2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d4:	d008      	beq.n	14e8 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d6:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d8:	f012 fb7a 	bl	13bd0 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14dc:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14e0:	4905      	ldr	r1, [pc, #20]	; (14f8 <_EXIT_EXC+0x10>)
    ldr r2, =_SCS_ICSR_PENDSV
    14e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e6:	600a      	str	r2, [r1, #0]

000014e8 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
    push {lr}
    14e8:	b500      	push	{lr}
    bl _check_stack_sentinel
    14ea:	f012 fdbd 	bl	14068 <_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14ee:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14f2:	4770      	bx	lr
    ldr r0, =_kernel
    14f4:	20001988 	.word	0x20001988
    ldr r1, =_SCS_ICSR
    14f8:	e000ed04 	.word	0xe000ed04

000014fc <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14fc:	4804      	ldr	r0, [pc, #16]	; (1510 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14fe:	2300      	movs	r3, #0
    1500:	2120      	movs	r1, #32
    1502:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1504:	3301      	adds	r3, #1
    1506:	2b27      	cmp	r3, #39	; 0x27
    1508:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    150c:	d1f9      	bne.n	1502 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    150e:	4770      	bx	lr
    1510:	e000e100 	.word	0xe000e100

00001514 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1514:	4a08      	ldr	r2, [pc, #32]	; (1538 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1516:	4909      	ldr	r1, [pc, #36]	; (153c <__swap+0x28>)
	_current->arch.basepri = key;
    1518:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    151a:	6809      	ldr	r1, [r1, #0]
    151c:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    151e:	4908      	ldr	r1, [pc, #32]	; (1540 <__swap+0x2c>)
	_current->arch.basepri = key;
    1520:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1522:	684b      	ldr	r3, [r1, #4]
    1524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1528:	604b      	str	r3, [r1, #4]
    152a:	2300      	movs	r3, #0
    152c:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1530:	6893      	ldr	r3, [r2, #8]
}
    1532:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1534:	4770      	bx	lr
    1536:	bf00      	nop
    1538:	20001988 	.word	0x20001988
    153c:	000180f4 	.word	0x000180f4
    1540:	e000ed00 	.word	0xe000ed00

00001544 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1544:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1546:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    154a:	490d      	ldr	r1, [pc, #52]	; (1580 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    154c:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    154e:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1550:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1552:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1556:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    155a:	4f0a      	ldr	r7, [pc, #40]	; (1584 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    155c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1560:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1562:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1564:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    1566:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1568:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    156a:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    156c:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1570:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1574:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    1578:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    157c:	4770      	bx	lr
    157e:	0000      	.short	0x0000
    ldr r1, =_kernel
    1580:	20001988 	.word	0x20001988
    ldr v4, =_SCS_ICSR
    1584:	e000ed04 	.word	0xe000ed04

00001588 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1588:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    158c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    158e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1592:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1596:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    1598:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    159c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    15a0:	2902      	cmp	r1, #2
    beq _oops
    15a2:	d0ff      	beq.n	15a4 <_oops>

000015a4 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    15a4:	b500      	push	{lr}
    blx _do_kernel_oops
    15a6:	f000 fa33 	bl	1a10 <_do_kernel_oops>
    pop {pc}
    15aa:	bd00      	pop	{pc}

000015ac <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15ac:	b510      	push	{r4, lr}
    15ae:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15b0:	f012 fb56 	bl	13c60 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b4:	6822      	ldr	r2, [r4, #0]
    15b6:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15bc:	4801      	ldr	r0, [pc, #4]	; (15c4 <_FaultThreadShow.isra.2+0x18>)
    15be:	f7ff bce5 	b.w	f8c <printk>
    15c2:	bf00      	nop
    15c4:	00014abd 	.word	0x00014abd

000015c8 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15c8:	b538      	push	{r3, r4, r5, lr}
    15ca:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15cc:	481a      	ldr	r0, [pc, #104]	; (1638 <_MpuFault+0x70>)
{
    15ce:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15d0:	f7ff fcdc 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15d4:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d8:	4c18      	ldr	r4, [pc, #96]	; (163c <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15da:	f7ff ffe7 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	06d9      	lsls	r1, r3, #27
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15e4:	4816      	ldr	r0, [pc, #88]	; (1640 <_MpuFault+0x78>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	071a      	lsls	r2, r3, #28
    15ee:	d502      	bpl.n	15f6 <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15f0:	4814      	ldr	r0, [pc, #80]	; (1644 <_MpuFault+0x7c>)
    15f2:	f7ff fccb 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15f8:	079b      	lsls	r3, r3, #30
    15fa:	d50e      	bpl.n	161a <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15fc:	4812      	ldr	r0, [pc, #72]	; (1648 <_MpuFault+0x80>)
    15fe:	f7ff fcc5 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    1602:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1606:	0618      	lsls	r0, r3, #24
    1608:	d507      	bpl.n	161a <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    160a:	4810      	ldr	r0, [pc, #64]	; (164c <_MpuFault+0x84>)
    160c:	f7ff fcbe 	bl	f8c <printk>
			if (fromHardFault) {
    1610:	b11d      	cbz	r5, 161a <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1618:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    161a:	4c08      	ldr	r4, [pc, #32]	; (163c <_MpuFault+0x74>)
    161c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    161e:	07d2      	lsls	r2, r2, #31
    1620:	d502      	bpl.n	1628 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1622:	480b      	ldr	r0, [pc, #44]	; (1650 <_MpuFault+0x88>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    162a:	069b      	lsls	r3, r3, #26
    162c:	d502      	bpl.n	1634 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    162e:	4809      	ldr	r0, [pc, #36]	; (1654 <_MpuFault+0x8c>)
    1630:	f7ff fcac 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1634:	2000      	movs	r0, #0
    1636:	bd38      	pop	{r3, r4, r5, pc}
    1638:	00014b07 	.word	0x00014b07
    163c:	e000ed00 	.word	0xe000ed00
    1640:	00014b1e 	.word	0x00014b1e
    1644:	00014b30 	.word	0x00014b30
    1648:	00014b44 	.word	0x00014b44
    164c:	00014b5d 	.word	0x00014b5d
    1650:	00014b6e 	.word	0x00014b6e
    1654:	00014b8e 	.word	0x00014b8e

00001658 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1658:	b510      	push	{r4, lr}
    165a:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    165c:	481a      	ldr	r0, [pc, #104]	; (16c8 <_UsageFault+0x70>)
    165e:	f7ff fc95 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1662:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1666:	4c19      	ldr	r4, [pc, #100]	; (16cc <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1668:	f7ff ffa0 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	019a      	lsls	r2, r3, #6
    1670:	d502      	bpl.n	1678 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1672:	4817      	ldr	r0, [pc, #92]	; (16d0 <_UsageFault+0x78>)
    1674:	f7ff fc8a 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	01db      	lsls	r3, r3, #7
    167c:	d502      	bpl.n	1684 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    167e:	4815      	ldr	r0, [pc, #84]	; (16d4 <_UsageFault+0x7c>)
    1680:	f7ff fc84 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1686:	0318      	lsls	r0, r3, #12
    1688:	d502      	bpl.n	1690 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    168a:	4813      	ldr	r0, [pc, #76]	; (16d8 <_UsageFault+0x80>)
    168c:	f7ff fc7e 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1690:	4c0e      	ldr	r4, [pc, #56]	; (16cc <_UsageFault+0x74>)
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	0359      	lsls	r1, r3, #13
    1696:	d502      	bpl.n	169e <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    1698:	4810      	ldr	r0, [pc, #64]	; (16dc <_UsageFault+0x84>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	039a      	lsls	r2, r3, #14
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    16a4:	480e      	ldr	r0, [pc, #56]	; (16e0 <_UsageFault+0x88>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    16aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16ac:	03db      	lsls	r3, r3, #15
    16ae:	d502      	bpl.n	16b6 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16b0:	480c      	ldr	r0, [pc, #48]	; (16e4 <_UsageFault+0x8c>)
    16b2:	f7ff fc6b 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16b6:	4a05      	ldr	r2, [pc, #20]	; (16cc <_UsageFault+0x74>)
    16b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ba:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16be:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16c2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16c4:	2000      	movs	r0, #0
    16c6:	bd10      	pop	{r4, pc}
    16c8:	00014bbe 	.word	0x00014bbe
    16cc:	e000ed00 	.word	0xe000ed00
    16d0:	00014bd7 	.word	0x00014bd7
    16d4:	00014beb 	.word	0x00014beb
    16d8:	00014c06 	.word	0x00014c06
    16dc:	00014c25 	.word	0x00014c25
    16e0:	00014c4b 	.word	0x00014c4b
    16e4:	00014c66 	.word	0x00014c66

000016e8 <_BusFault>:
{
    16e8:	b538      	push	{r3, r4, r5, lr}
    16ea:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16ec:	481d      	ldr	r0, [pc, #116]	; (1764 <_BusFault+0x7c>)
{
    16ee:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16f0:	f7ff fc4c 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16f4:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f8:	4c1b      	ldr	r4, [pc, #108]	; (1768 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16fa:	f7ff ff57 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1700:	04d8      	lsls	r0, r3, #19
    1702:	d504      	bpl.n	170e <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1704:	4819      	ldr	r0, [pc, #100]	; (176c <_BusFault+0x84>)
}
    1706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    170a:	f7ff bc3f 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    170e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1710:	0519      	lsls	r1, r3, #20
    1712:	d501      	bpl.n	1718 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1714:	4816      	ldr	r0, [pc, #88]	; (1770 <_BusFault+0x88>)
    1716:	e7f6      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171a:	059a      	lsls	r2, r3, #22
    171c:	d514      	bpl.n	1748 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    171e:	4815      	ldr	r0, [pc, #84]	; (1774 <_BusFault+0x8c>)
    1720:	f7ff fc34 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1724:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1728:	041b      	lsls	r3, r3, #16
    172a:	d507      	bpl.n	173c <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    172c:	4812      	ldr	r0, [pc, #72]	; (1778 <_BusFault+0x90>)
    172e:	f7ff fc2d 	bl	f8c <printk>
			if (fromHardFault) {
    1732:	b11d      	cbz	r5, 173c <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1736:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    173a:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	4b0a      	ldr	r3, [pc, #40]	; (1768 <_BusFault+0x80>)
    173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1740:	0558      	lsls	r0, r3, #21
    1742:	d50e      	bpl.n	1762 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1744:	480d      	ldr	r0, [pc, #52]	; (177c <_BusFault+0x94>)
    1746:	e7de      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174a:	0559      	lsls	r1, r3, #21
    174c:	d4fa      	bmi.n	1744 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    174e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1750:	05da      	lsls	r2, r3, #23
    1752:	d501      	bpl.n	1758 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1754:	480a      	ldr	r0, [pc, #40]	; (1780 <_BusFault+0x98>)
    1756:	e7d6      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    175a:	049b      	lsls	r3, r3, #18
    175c:	d501      	bpl.n	1762 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    175e:	4809      	ldr	r0, [pc, #36]	; (1784 <_BusFault+0x9c>)
    1760:	e7d1      	b.n	1706 <_BusFault+0x1e>
    1762:	bd38      	pop	{r3, r4, r5, pc}
    1764:	00014984 	.word	0x00014984
    1768:	e000ed00 	.word	0xe000ed00
    176c:	00014b1e 	.word	0x00014b1e
    1770:	00014b30 	.word	0x00014b30
    1774:	0001499b 	.word	0x0001499b
    1778:	00014b5d 	.word	0x00014b5d
    177c:	000149b5 	.word	0x000149b5
    1780:	000149d1 	.word	0x000149d1
    1784:	00014b8e 	.word	0x00014b8e

00001788 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    1788:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    178a:	4c27      	ldr	r4, [pc, #156]	; (1828 <_Fault+0xa0>)
    178c:	6863      	ldr	r3, [r4, #4]
    178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1792:	1eda      	subs	r2, r3, #3
{
    1794:	4605      	mov	r5, r0
	switch (fault) {
    1796:	2a09      	cmp	r2, #9
    1798:	d83b      	bhi.n	1812 <_Fault+0x8a>
    179a:	e8df f002 	tbb	[pc, r2]
    179e:	3405      	.short	0x3405
    17a0:	3a3a3036 	.word	0x3a3a3036
    17a4:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    17a8:	4820      	ldr	r0, [pc, #128]	; (182c <_Fault+0xa4>)
    17aa:	f7ff fbef 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b0:	079a      	lsls	r2, r3, #30
    17b2:	d503      	bpl.n	17bc <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17b4:	481e      	ldr	r0, [pc, #120]	; (1830 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17b6:	f7ff fbe9 	bl	f8c <printk>
    17ba:	e002      	b.n	17c2 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17be:	005b      	lsls	r3, r3, #1
    17c0:	d401      	bmi.n	17c6 <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17c2:	2000      	movs	r0, #0
    17c4:	e009      	b.n	17da <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17c6:	481b      	ldr	r0, [pc, #108]	; (1834 <_Fault+0xac>)
    17c8:	f7ff fbe0 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17cc:	4b1a      	ldr	r3, [pc, #104]	; (1838 <_Fault+0xb0>)
    17ce:	781b      	ldrb	r3, [r3, #0]
    17d0:	b143      	cbz	r3, 17e4 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17d2:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17d4:	4628      	mov	r0, r5
    17d6:	f7ff fef7 	bl	15c8 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17da:	4629      	mov	r1, r5
}
    17dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17e0:	f000 b91a 	b.w	1a18 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17e4:	4b15      	ldr	r3, [pc, #84]	; (183c <_Fault+0xb4>)
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	b123      	cbz	r3, 17f4 <_Fault+0x6c>
			_BusFault(esf, 1);
    17ea:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17ec:	4628      	mov	r0, r5
    17ee:	f7ff ff7b 	bl	16e8 <_BusFault>
    17f2:	e7e6      	b.n	17c2 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17f4:	4b12      	ldr	r3, [pc, #72]	; (1840 <_Fault+0xb8>)
    17f6:	881b      	ldrh	r3, [r3, #0]
    17f8:	b29b      	uxth	r3, r3
    17fa:	2b00      	cmp	r3, #0
    17fc:	d0e1      	beq.n	17c2 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17fe:	4628      	mov	r0, r5
    1800:	f7ff ff2a 	bl	1658 <_UsageFault>
    1804:	e7e9      	b.n	17da <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    1806:	2100      	movs	r1, #0
    1808:	e7e4      	b.n	17d4 <_Fault+0x4c>
		_BusFault(esf, 0);
    180a:	2100      	movs	r1, #0
    180c:	e7ee      	b.n	17ec <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    180e:	480d      	ldr	r0, [pc, #52]	; (1844 <_Fault+0xbc>)
    1810:	e7d1      	b.n	17b6 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1812:	480d      	ldr	r0, [pc, #52]	; (1848 <_Fault+0xc0>)
    1814:	490d      	ldr	r1, [pc, #52]	; (184c <_Fault+0xc4>)
    1816:	f1a3 0210 	sub.w	r2, r3, #16
    181a:	2b0f      	cmp	r3, #15
    181c:	bfd8      	it	le
    181e:	4601      	movle	r1, r0
    1820:	480b      	ldr	r0, [pc, #44]	; (1850 <_Fault+0xc8>)
    1822:	f7ff fbb3 	bl	f8c <printk>
    1826:	e7cc      	b.n	17c2 <_Fault+0x3a>
    1828:	e000ed00 	.word	0xe000ed00
    182c:	00014a18 	.word	0x00014a18
    1830:	00014a30 	.word	0x00014a30
    1834:	00014a52 	.word	0x00014a52
    1838:	e000ed28 	.word	0xe000ed28
    183c:	e000ed29 	.word	0xe000ed29
    1840:	e000ed2a 	.word	0xe000ed2a
    1844:	00014a72 	.word	0x00014a72
    1848:	000149ea 	.word	0x000149ea
    184c:	000149ff 	.word	0x000149ff
    1850:	00014aa9 	.word	0x00014aa9

00001854 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1854:	4a02      	ldr	r2, [pc, #8]	; (1860 <_FaultInit+0xc>)
    1856:	6953      	ldr	r3, [r2, #20]
    1858:	f043 0310 	orr.w	r3, r3, #16
    185c:	6153      	str	r3, [r2, #20]
    185e:	4770      	bx	lr
    1860:	e000ed00 	.word	0xe000ed00

00001864 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1864:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1866:	2b00      	cmp	r3, #0
    1868:	db08      	blt.n	187c <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    186a:	2201      	movs	r2, #1
    186c:	f000 001f 	and.w	r0, r0, #31
    1870:	fa02 f000 	lsl.w	r0, r2, r0
    1874:	095b      	lsrs	r3, r3, #5
    1876:	4a02      	ldr	r2, [pc, #8]	; (1880 <_arch_irq_enable+0x1c>)
    1878:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    187c:	4770      	bx	lr
    187e:	bf00      	nop
    1880:	e000e100 	.word	0xe000e100

00001884 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1884:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1886:	2b00      	cmp	r3, #0
    1888:	db0d      	blt.n	18a6 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    188a:	2201      	movs	r2, #1
    188c:	095b      	lsrs	r3, r3, #5
    188e:	f000 001f 	and.w	r0, r0, #31
    1892:	fa02 f000 	lsl.w	r0, r2, r0
    1896:	3320      	adds	r3, #32
    1898:	4a03      	ldr	r2, [pc, #12]	; (18a8 <_arch_irq_disable+0x24>)
    189a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    189e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18a2:	f3bf 8f6f 	isb	sy
    18a6:	4770      	bx	lr
    18a8:	e000e100 	.word	0xe000e100

000018ac <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18ac:	0942      	lsrs	r2, r0, #5
    18ae:	4b05      	ldr	r3, [pc, #20]	; (18c4 <_arch_irq_is_enabled+0x18>)
    18b0:	f000 001f 	and.w	r0, r0, #31
    18b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18b8:	2301      	movs	r3, #1
    18ba:	fa03 f000 	lsl.w	r0, r3, r0
}
    18be:	4010      	ands	r0, r2
    18c0:	4770      	bx	lr
    18c2:	bf00      	nop
    18c4:	e000e100 	.word	0xe000e100

000018c8 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18c8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18ca:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18cc:	bfa8      	it	ge
    18ce:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18d2:	f101 0101 	add.w	r1, r1, #1
    18d6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18da:	bfad      	iteet	ge
    18dc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f000 000f 	andlt.w	r0, r0, #15
    18e4:	4b03      	ldrlt	r3, [pc, #12]	; (18f4 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e6:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e8:	bfb6      	itet	lt
    18ea:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18ec:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18f0:	5419      	strblt	r1, [r3, r0]
    18f2:	4770      	bx	lr
    18f4:	e000ed14 	.word	0xe000ed14

000018f8 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18f8:	f000 b844 	b.w	1984 <__bus_fault>

000018fc <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18fc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18fe:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1900:	4b04      	ldr	r3, [pc, #16]	; (1914 <_arch_isr_direct_pm+0x18>)
    1902:	69d8      	ldr	r0, [r3, #28]
    1904:	b118      	cbz	r0, 190e <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1906:	2200      	movs	r2, #0
    1908:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    190a:	f011 fcb3 	bl	13274 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    190e:	b662      	cpsie	i
    1910:	bd08      	pop	{r3, pc}
    1912:	bf00      	nop
    1914:	20001988 	.word	0x20001988

00001918 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    191a:	461f      	mov	r7, r3
#ifdef CONFIG_STACK_SENTINEL
	/* Put the stack sentinel at the lowest 4 bytes of the stack area.
	 * We periodically check that it's still present and kill the thread
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
    191c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
    1920:	460c      	mov	r4, r1
    1922:	4616      	mov	r6, r2
    1924:	600b      	str	r3, [r1, #0]
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1926:	2204      	movs	r2, #4
    1928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    192a:	9909      	ldr	r1, [sp, #36]	; 0x24
    192c:	4605      	mov	r5, r0
    192e:	f012 fc6b 	bl	14208 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1932:	f1a6 0120 	sub.w	r1, r6, #32
    1936:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1938:	4a0b      	ldr	r2, [pc, #44]	; (1968 <_new_thread+0x50>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    193a:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    193c:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1940:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1942:	f022 0201 	bic.w	r2, r2, #1
    1946:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1948:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    194a:	662e      	str	r6, [r5, #96]	; 0x60
    194c:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    194e:	9a06      	ldr	r2, [sp, #24]
    1950:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1952:	9a07      	ldr	r2, [sp, #28]
    1954:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1956:	9a08      	ldr	r2, [sp, #32]
    1958:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    195a:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    195c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1960:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1962:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1964:	66ab      	str	r3, [r5, #104]	; 0x68
    1966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1968:	00000899 	.word	0x00000899

0000196c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    196c:	4901      	ldr	r1, [pc, #4]	; (1974 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    196e:	2210      	movs	r2, #16
	str r2, [r1]
    1970:	600a      	str	r2, [r1, #0]
	bx lr
    1972:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1974:	e000ed10 	.word	0xe000ed10

00001978 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1978:	4040      	eors	r0, r0
	msr BASEPRI, r0
    197a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    197e:	bf30      	wfi

	bx lr
    1980:	4770      	bx	lr
    1982:	bf00      	nop

00001984 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1984:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1986:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    198a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 19a8 <__bus_fault+0x24>
	ldr ip, [ip]
    198e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1992:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1996:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1998:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    199c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    19a0:	b500      	push	{lr}
	bl _Fault
    19a2:	f7ff fef1 	bl	1788 <_Fault>

	pop {pc}
    19a6:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    19a8:	e000ed04 	.word	0xe000ed04

000019ac <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    19ac:	b538      	push	{r3, r4, r5, lr}
	switch (reason) {
    19ae:	1e83      	subs	r3, r0, #2
{
    19b0:	4604      	mov	r4, r0
    19b2:	460d      	mov	r5, r1
	switch (reason) {
    19b4:	2b03      	cmp	r3, #3
    19b6:	d819      	bhi.n	19ec <_NanoFatalErrorHandler+0x40>
    19b8:	e8df f003 	tbb	[pc, r3]
    19bc:	16141202 	.word	0x16141202
#if defined(CONFIG_STACK_CANARIES) || defined(CONFIG_STACK_SENTINEL)
	case _NANO_ERR_STACK_CHK_FAIL:
		printk("***** Stack Check Fail! *****\n");
    19c0:	480d      	ldr	r0, [pc, #52]	; (19f8 <_NanoFatalErrorHandler+0x4c>)
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19c2:	f7ff fae3 	bl	f8c <printk>
    19c6:	f012 f94b 	bl	13c60 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19ca:	69aa      	ldr	r2, [r5, #24]
    19cc:	4601      	mov	r1, r0
    19ce:	480b      	ldr	r0, [pc, #44]	; (19fc <_NanoFatalErrorHandler+0x50>)
    19d0:	f7ff fadc 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19d4:	4629      	mov	r1, r5
    19d6:	4620      	mov	r0, r4
}
    19d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19dc:	f000 b81c 	b.w	1a18 <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    19e0:	4807      	ldr	r0, [pc, #28]	; (1a00 <_NanoFatalErrorHandler+0x54>)
    19e2:	e7ee      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    19e4:	4807      	ldr	r0, [pc, #28]	; (1a04 <_NanoFatalErrorHandler+0x58>)
    19e6:	e7ec      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    19e8:	4807      	ldr	r0, [pc, #28]	; (1a08 <_NanoFatalErrorHandler+0x5c>)
    19ea:	e7ea      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19ec:	4601      	mov	r1, r0
    19ee:	4807      	ldr	r0, [pc, #28]	; (1a0c <_NanoFatalErrorHandler+0x60>)
    19f0:	f7ff facc 	bl	f8c <printk>
		break;
    19f4:	e7e7      	b.n	19c6 <_NanoFatalErrorHandler+0x1a>
    19f6:	bf00      	nop
    19f8:	00014c92 	.word	0x00014c92
    19fc:	00014d2f 	.word	0x00014d2f
    1a00:	00014cb1 	.word	0x00014cb1
    1a04:	00014cd7 	.word	0x00014cd7
    1a08:	00014cf1 	.word	0x00014cf1
    1a0c:	00014d0c 	.word	0x00014d0c

00001a10 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1a10:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1a12:	6800      	ldr	r0, [r0, #0]
    1a14:	f7ff bfca 	b.w	19ac <_NanoFatalErrorHandler>

00001a18 <_SysFatalErrorHandler>:
{
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
    1a18:	2802      	cmp	r0, #2
{
    1a1a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
    1a1c:	d00e      	beq.n	1a3c <_SysFatalErrorHandler+0x24>
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a1e:	2805      	cmp	r0, #5
    1a20:	d00c      	beq.n	1a3c <_SysFatalErrorHandler+0x24>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f012 fb09 	bl	14038 <k_is_in_isr>
    1a26:	b160      	cbz	r0, 1a42 <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a28:	f012 fb06 	bl	14038 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a2c:	4b0c      	ldr	r3, [pc, #48]	; (1a60 <_SysFatalErrorHandler+0x48>)
    1a2e:	490d      	ldr	r1, [pc, #52]	; (1a64 <_SysFatalErrorHandler+0x4c>)
    1a30:	2800      	cmp	r0, #0
    1a32:	bf08      	it	eq
    1a34:	4619      	moveq	r1, r3
    1a36:	480c      	ldr	r0, [pc, #48]	; (1a68 <_SysFatalErrorHandler+0x50>)
    1a38:	f7ff faa8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a3c:	f7ff ff9c 	bl	1978 <k_cpu_idle>
    1a40:	e7fc      	b.n	1a3c <_SysFatalErrorHandler+0x24>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a42:	f012 fb09 	bl	14058 <_is_thread_essential>
    1a46:	2800      	cmp	r0, #0
    1a48:	d1ee      	bne.n	1a28 <_SysFatalErrorHandler+0x10>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a4a:	4c08      	ldr	r4, [pc, #32]	; (1a6c <_SysFatalErrorHandler+0x54>)
    1a4c:	4808      	ldr	r0, [pc, #32]	; (1a70 <_SysFatalErrorHandler+0x58>)
    1a4e:	68a1      	ldr	r1, [r4, #8]
    1a50:	f7ff fa9c 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a54:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a5a:	f000 b80b 	b.w	1a74 <_impl_k_thread_abort>
    1a5e:	bf00      	nop
    1a60:	00014d6f 	.word	0x00014d6f
    1a64:	00014d6b 	.word	0x00014d6b
    1a68:	00014d80 	.word	0x00014d80
    1a6c:	20001988 	.word	0x20001988
    1a70:	00014da0 	.word	0x00014da0

00001a74 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a74:	b538      	push	{r3, r4, r5, lr}
    1a76:	4605      	mov	r5, r0
	__asm__ volatile(
    1a78:	f04f 0320 	mov.w	r3, #32
    1a7c:	f3ef 8411 	mrs	r4, BASEPRI
    1a80:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a84:	f012 fb56 	bl	14134 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a88:	4b0c      	ldr	r3, [pc, #48]	; (1abc <_impl_k_thread_abort+0x48>)
    1a8a:	689b      	ldr	r3, [r3, #8]
    1a8c:	429d      	cmp	r5, r3
    1a8e:	d10f      	bne.n	1ab0 <_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a90:	4b0b      	ldr	r3, [pc, #44]	; (1ac0 <_impl_k_thread_abort+0x4c>)
    1a92:	685a      	ldr	r2, [r3, #4]
    1a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a98:	b932      	cbnz	r2, 1aa8 <_impl_k_thread_abort+0x34>

extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
    1a9a:	f012 fae5 	bl	14068 <_check_stack_sentinel>
	_update_time_slice_before_swap();
    1a9e:	f012 f897 	bl	13bd0 <_update_time_slice_before_swap>

	return __swap(key);
    1aa2:	4620      	mov	r0, r4
    1aa4:	f7ff fd36 	bl	1514 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1aa8:	685a      	ldr	r2, [r3, #4]
    1aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1aae:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1ab0:	4620      	mov	r0, r4
}
    1ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1ab6:	f011 bf4f 	b.w	13958 <_reschedule>
    1aba:	bf00      	nop
    1abc:	20001988 	.word	0x20001988
    1ac0:	e000ed00 	.word	0xe000ed00

00001ac4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1ac4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1ac6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1ac8:	4a0b      	ldr	r2, [pc, #44]	; (1af8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aca:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1acc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1ace:	bf1e      	ittt	ne
	movne	r1, #0
    1ad0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1ad2:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ad4:	f011 fbce 	blne	13274 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ad8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ada:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1ade:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ae2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ae6:	4905      	ldr	r1, [pc, #20]	; (1afc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ae8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1aea:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1aec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aee:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1af2:	f7ff bceb 	b.w	14cc <_ExcExit>
    1af6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1af8:	20001988 	.word	0x20001988
	ldr r1, =_sw_isr_table
    1afc:	000000dc 	.word	0x000000dc

00001b00 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b00:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1b02:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1b06:	4806      	ldr	r0, [pc, #24]	; (1b20 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1b0c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1b0e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1b12:	2002      	movs	r0, #2
    msr CONTROL, r0
    1b14:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1b18:	f3bf 8f6f 	isb	sy

    b _PrepC
    1b1c:	f000 b806 	b.w	1b2c <_PrepC>
    ldr r0, =_interrupt_stack
    1b20:	20002e68 	.word	0x20002e68

00001b24 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b24:	bf30      	wfi
    b _SysNmiOnReset
    1b26:	f7ff bffd 	b.w	1b24 <_SysNmiOnReset>
    1b2a:	bf00      	nop

00001b2c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b2c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b2e:	4b07      	ldr	r3, [pc, #28]	; (1b4c <_PrepC+0x20>)
    1b30:	4a07      	ldr	r2, [pc, #28]	; (1b50 <_PrepC+0x24>)
    1b32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b36:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b3c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b40:	f011 fbc8 	bl	132d4 <_bss_zero>
	_data_copy();
    1b44:	f011 fbd0 	bl	132e8 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b48:	f011 fbf2 	bl	13330 <_Cstart>
    1b4c:	00000000 	.word	0x00000000
    1b50:	e000ed00 	.word	0xe000ed00

00001b54 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b54:	b508      	push	{r3, lr}
	handler();
    1b56:	f7ff ffe5 	bl	1b24 <_SysNmiOnReset>
	_ExcExit();
}
    1b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b5e:	f7ff bcb5 	b.w	14cc <_ExcExit>
	...

00001b64 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b64:	4912      	ldr	r1, [pc, #72]	; (1bb0 <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b66:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b68:	680d      	ldr	r5, [r1, #0]
    1b6a:	2d08      	cmp	r5, #8
    1b6c:	d80d      	bhi.n	1b8a <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b6e:	4a11      	ldr	r2, [pc, #68]	; (1bb4 <arm_mpu_init+0x50>)
    1b70:	6848      	ldr	r0, [r1, #4]
    1b72:	2300      	movs	r3, #0
    1b74:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b76:	429d      	cmp	r5, r3
    1b78:	f100 000c 	add.w	r0, r0, #12
    1b7c:	d107      	bne.n	1b8e <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b7e:	2305      	movs	r3, #5
    1b80:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b86:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b8a:	2000      	movs	r0, #0
    1b8c:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b8e:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b92:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b96:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b98:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b9c:	f041 0110 	orr.w	r1, r1, #16
    1ba0:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1ba2:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1ba6:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1ba8:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1baa:	6114      	str	r4, [r2, #16]
    1bac:	e7e3      	b.n	1b76 <arm_mpu_init+0x12>
    1bae:	bf00      	nop
    1bb0:	20003a7c 	.word	0x20003a7c
    1bb4:	e000ed90 	.word	0xe000ed90

00001bb8 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1bb8:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1bba:	4603      	mov	r3, r0
    1bbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc0:	b90a      	cbnz	r2, 1bc6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1bc2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1bc4:	4770      	bx	lr
		*d = *s;
    1bc6:	f803 2b01 	strb.w	r2, [r3], #1
    1bca:	e7f7      	b.n	1bbc <strcpy+0x4>

00001bcc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1bcc:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1bce:	4603      	mov	r3, r0
    1bd0:	1a98      	subs	r0, r3, r2
    1bd2:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bd6:	2900      	cmp	r1, #0
    1bd8:	d1fa      	bne.n	1bd0 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bda:	4770      	bx	lr

00001bdc <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bdc:	3801      	subs	r0, #1
    1bde:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1be0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1be4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1be8:	4293      	cmp	r3, r2
    1bea:	d102      	bne.n	1bf2 <strcmp+0x16>
    1bec:	2b00      	cmp	r3, #0
    1bee:	d1f7      	bne.n	1be0 <strcmp+0x4>
    1bf0:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bf2:	1a98      	subs	r0, r3, r2
    1bf4:	4770      	bx	lr

00001bf6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bf6:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bf8:	b182      	cbz	r2, 1c1c <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bfa:	3a01      	subs	r2, #1
    1bfc:	460c      	mov	r4, r1
    1bfe:	4603      	mov	r3, r0
    1c00:	d103      	bne.n	1c0a <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1c02:	781a      	ldrb	r2, [r3, #0]
    1c04:	7820      	ldrb	r0, [r4, #0]
    1c06:	1a10      	subs	r0, r2, r0
    1c08:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1c0a:	781e      	ldrb	r6, [r3, #0]
    1c0c:	7825      	ldrb	r5, [r4, #0]
    1c0e:	42ae      	cmp	r6, r5
    1c10:	f100 0001 	add.w	r0, r0, #1
    1c14:	f101 0101 	add.w	r1, r1, #1
    1c18:	d0ef      	beq.n	1bfa <memcmp+0x4>
    1c1a:	e7f2      	b.n	1c02 <memcmp+0xc>
		return 0;
    1c1c:	4610      	mov	r0, r2
}
    1c1e:	bd70      	pop	{r4, r5, r6, pc}

00001c20 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c20:	ea81 0300 	eor.w	r3, r1, r0
    1c24:	f013 0f03 	tst.w	r3, #3
{
    1c28:	b570      	push	{r4, r5, r6, lr}
    1c2a:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c2c:	d00b      	beq.n	1c46 <memcpy+0x26>
    1c2e:	3b01      	subs	r3, #1
    1c30:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c32:	4291      	cmp	r1, r2
    1c34:	d11b      	bne.n	1c6e <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c36:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c38:	2a00      	cmp	r2, #0
    1c3a:	d0fc      	beq.n	1c36 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c40:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c44:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c46:	079c      	lsls	r4, r3, #30
    1c48:	d1f6      	bne.n	1c38 <memcpy+0x18>
    1c4a:	1f1e      	subs	r6, r3, #4
    1c4c:	460d      	mov	r5, r1
    1c4e:	1b54      	subs	r4, r2, r5
    1c50:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c52:	2c03      	cmp	r4, #3
    1c54:	d806      	bhi.n	1c64 <memcpy+0x44>
    1c56:	f022 0403 	bic.w	r4, r2, #3
    1c5a:	4421      	add	r1, r4
    1c5c:	4423      	add	r3, r4
    1c5e:	f002 0203 	and.w	r2, r2, #3
    1c62:	e7e4      	b.n	1c2e <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c64:	f855 4b04 	ldr.w	r4, [r5], #4
    1c68:	f846 4f04 	str.w	r4, [r6, #4]!
    1c6c:	e7ef      	b.n	1c4e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c72:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c76:	e7dc      	b.n	1c32 <memcpy+0x12>

00001c78 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c78:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c7a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c7c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c7e:	079c      	lsls	r4, r3, #30
    1c80:	d111      	bne.n	1ca6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c82:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c86:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c8a:	461e      	mov	r6, r3
    1c8c:	1b95      	subs	r5, r2, r6
    1c8e:	441d      	add	r5, r3
    1c90:	2d03      	cmp	r5, #3
    1c92:	d80e      	bhi.n	1cb2 <memset+0x3a>
    1c94:	f022 0403 	bic.w	r4, r2, #3
    1c98:	4423      	add	r3, r4
    1c9a:	f002 0203 	and.w	r2, r2, #3
    1c9e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1ca0:	4293      	cmp	r3, r2
    1ca2:	d109      	bne.n	1cb8 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1ca4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1ca6:	2a00      	cmp	r2, #0
    1ca8:	d0fc      	beq.n	1ca4 <memset+0x2c>
		*(d_byte++) = c_byte;
    1caa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1cae:	3a01      	subs	r2, #1
    1cb0:	e7e5      	b.n	1c7e <memset+0x6>
		*(d_word++) = c_word;
    1cb2:	f846 4b04 	str.w	r4, [r6], #4
    1cb6:	e7e9      	b.n	1c8c <memset+0x14>
		*(d_byte++) = c_byte;
    1cb8:	f803 1b01 	strb.w	r1, [r3], #1
    1cbc:	e7f0      	b.n	1ca0 <memset+0x28>
	...

00001cc0 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
    1cc2:	f04f 0320 	mov.w	r3, #32
    1cc6:	f3ef 8511 	mrs	r5, BASEPRI
    1cca:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1cce:	4c14      	ldr	r4, [pc, #80]	; (1d20 <bt_hex+0x60>)
    1cd0:	4e14      	ldr	r6, [pc, #80]	; (1d24 <bt_hex+0x64>)
    1cd2:	7823      	ldrb	r3, [r4, #0]
    1cd4:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cd8:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cda:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cde:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1ce0:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1ce2:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1ce6:	2940      	cmp	r1, #64	; 0x40
    1ce8:	bf28      	it	cs
    1cea:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cec:	4d0e      	ldr	r5, [pc, #56]	; (1d28 <bt_hex+0x68>)
    1cee:	3801      	subs	r0, #1
    1cf0:	4613      	mov	r3, r2
    1cf2:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cf6:	42b3      	cmp	r3, r6
    1cf8:	d104      	bne.n	1d04 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cfa:	2300      	movs	r3, #0
    1cfc:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1d00:	4610      	mov	r0, r2
    1d02:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1d04:	7844      	ldrb	r4, [r0, #1]
    1d06:	0924      	lsrs	r4, r4, #4
    1d08:	3302      	adds	r3, #2
    1d0a:	5d2c      	ldrb	r4, [r5, r4]
    1d0c:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1d10:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1d14:	f004 040f 	and.w	r4, r4, #15
    1d18:	5d2c      	ldrb	r4, [r5, r4]
    1d1a:	f803 4c01 	strb.w	r4, [r3, #-1]
    1d1e:	e7ea      	b.n	1cf6 <bt_hex+0x36>
    1d20:	20000074 	.word	0x20000074
    1d24:	20000075 	.word	0x20000075
    1d28:	00014de3 	.word	0x00014de3

00001d2c <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d2c:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d2e:	4a0f      	ldr	r2, [pc, #60]	; (1d6c <bt_addr_str+0x40>)
    1d30:	4c0f      	ldr	r4, [pc, #60]	; (1d70 <bt_addr_str+0x44>)
    1d32:	7813      	ldrb	r3, [r2, #0]
    1d34:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d38:	3301      	adds	r3, #1
{
    1d3a:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d3c:	f003 0301 	and.w	r3, r3, #1
    1d40:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d42:	7802      	ldrb	r2, [r0, #0]
    1d44:	7943      	ldrb	r3, [r0, #5]
    1d46:	9204      	str	r2, [sp, #16]
    1d48:	7842      	ldrb	r2, [r0, #1]
    1d4a:	9203      	str	r2, [sp, #12]
    1d4c:	7882      	ldrb	r2, [r0, #2]
    1d4e:	9202      	str	r2, [sp, #8]
    1d50:	78c2      	ldrb	r2, [r0, #3]
    1d52:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d54:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d58:	7902      	ldrb	r2, [r0, #4]
    1d5a:	9200      	str	r2, [sp, #0]
    1d5c:	2112      	movs	r1, #18
    1d5e:	4a05      	ldr	r2, [pc, #20]	; (1d74 <bt_addr_str+0x48>)
    1d60:	4620      	mov	r0, r4
    1d62:	f7ff f921 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d66:	4620      	mov	r0, r4
    1d68:	b006      	add	sp, #24
    1d6a:	bd10      	pop	{r4, pc}
    1d6c:	20000072 	.word	0x20000072
    1d70:	20000018 	.word	0x20000018
    1d74:	00014dc5 	.word	0x00014dc5

00001d78 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d78:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d7a:	4a1d      	ldr	r2, [pc, #116]	; (1df0 <bt_addr_le_str+0x78>)
    1d7c:	491d      	ldr	r1, [pc, #116]	; (1df4 <bt_addr_le_str+0x7c>)
    1d7e:	7813      	ldrb	r3, [r2, #0]
    1d80:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d84:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d86:	f003 0301 	and.w	r3, r3, #1
    1d8a:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d8c:	7803      	ldrb	r3, [r0, #0]
{
    1d8e:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d90:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d94:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d96:	440e      	add	r6, r1
    1d98:	ad07      	add	r5, sp, #28
    1d9a:	2b03      	cmp	r3, #3
    1d9c:	d821      	bhi.n	1de2 <bt_addr_le_str+0x6a>
    1d9e:	e8df f003 	tbb	[pc, r3]
    1da2:	1a02      	.short	0x1a02
    1da4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1da6:	4914      	ldr	r1, [pc, #80]	; (1df8 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1da8:	4628      	mov	r0, r5
    1daa:	f7ff ff05 	bl	1bb8 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1dae:	7862      	ldrb	r2, [r4, #1]
    1db0:	9204      	str	r2, [sp, #16]
    1db2:	78a2      	ldrb	r2, [r4, #2]
    1db4:	9203      	str	r2, [sp, #12]
    1db6:	78e2      	ldrb	r2, [r4, #3]
    1db8:	9202      	str	r2, [sp, #8]
    1dba:	7922      	ldrb	r2, [r4, #4]
    1dbc:	9201      	str	r2, [sp, #4]
    1dbe:	7962      	ldrb	r2, [r4, #5]
    1dc0:	9200      	str	r2, [sp, #0]
    1dc2:	79a3      	ldrb	r3, [r4, #6]
    1dc4:	9505      	str	r5, [sp, #20]
    1dc6:	4a0d      	ldr	r2, [pc, #52]	; (1dfc <bt_addr_le_str+0x84>)
    1dc8:	211b      	movs	r1, #27
    1dca:	4630      	mov	r0, r6
    1dcc:	f7ff f8ec 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dd0:	4630      	mov	r0, r6
    1dd2:	b00a      	add	sp, #40	; 0x28
    1dd4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1dd6:	490a      	ldr	r1, [pc, #40]	; (1e00 <bt_addr_le_str+0x88>)
    1dd8:	e7e6      	b.n	1da8 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1dda:	490a      	ldr	r1, [pc, #40]	; (1e04 <bt_addr_le_str+0x8c>)
    1ddc:	e7e4      	b.n	1da8 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dde:	490a      	ldr	r1, [pc, #40]	; (1e08 <bt_addr_le_str+0x90>)
    1de0:	e7e2      	b.n	1da8 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1de2:	4a0a      	ldr	r2, [pc, #40]	; (1e0c <bt_addr_le_str+0x94>)
    1de4:	210a      	movs	r1, #10
    1de6:	4628      	mov	r0, r5
    1de8:	f7ff f8de 	bl	fa8 <snprintk>
    1dec:	e7df      	b.n	1dae <bt_addr_le_str+0x36>
    1dee:	bf00      	nop
    1df0:	20000073 	.word	0x20000073
    1df4:	2000003c 	.word	0x2000003c
    1df8:	000147fd 	.word	0x000147fd
    1dfc:	00014826 	.word	0x00014826
    1e00:	00014804 	.word	0x00014804
    1e04:	0001480b 	.word	0x0001480b
    1e08:	00014815 	.word	0x00014815
    1e0c:	0001481f 	.word	0x0001481f

00001e10 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1e10:	b530      	push	{r4, r5, lr}
    1e12:	b085      	sub	sp, #20
    1e14:	4604      	mov	r4, r0
    1e16:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1e18:	4668      	mov	r0, sp
    1e1a:	2203      	movs	r2, #3
    1e1c:	f7ff ff00 	bl	1c20 <memcpy>
	memset(res + 3, 0, 13);
    1e20:	220d      	movs	r2, #13
    1e22:	2100      	movs	r1, #0
    1e24:	f10d 0003 	add.w	r0, sp, #3
    1e28:	f7ff ff26 	bl	1c78 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e2c:	4620      	mov	r0, r4
    1e2e:	466a      	mov	r2, sp
    1e30:	4669      	mov	r1, sp
    1e32:	f005 ff8d 	bl	7d50 <bt_encrypt_le>
	if (err) {
    1e36:	4604      	mov	r4, r0
    1e38:	b920      	cbnz	r0, 1e44 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e3a:	2203      	movs	r2, #3
    1e3c:	4669      	mov	r1, sp
    1e3e:	4628      	mov	r0, r5
    1e40:	f7ff feee 	bl	1c20 <memcpy>

	return 0;
}
    1e44:	4620      	mov	r0, r4
    1e46:	b005      	add	sp, #20
    1e48:	bd30      	pop	{r4, r5, pc}

00001e4a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e4a:	b513      	push	{r0, r1, r4, lr}
    1e4c:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e4e:	aa01      	add	r2, sp, #4
    1e50:	3103      	adds	r1, #3
    1e52:	f7ff ffdd 	bl	1e10 <ah>
	if (err) {
    1e56:	b948      	cbnz	r0, 1e6c <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e58:	2203      	movs	r2, #3
    1e5a:	a901      	add	r1, sp, #4
    1e5c:	4620      	mov	r0, r4
    1e5e:	f7ff feca 	bl	1bf6 <memcmp>
    1e62:	fab0 f080 	clz	r0, r0
    1e66:	0940      	lsrs	r0, r0, #5
}
    1e68:	b002      	add	sp, #8
    1e6a:	bd10      	pop	{r4, pc}
		return false;
    1e6c:	2000      	movs	r0, #0
    1e6e:	e7fb      	b.n	1e68 <bt_rpa_irk_matches+0x1e>

00001e70 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e72:	1ccd      	adds	r5, r1, #3
{
    1e74:	4606      	mov	r6, r0
    1e76:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e78:	4628      	mov	r0, r5
    1e7a:	2103      	movs	r1, #3
    1e7c:	f005 ff4c 	bl	7d18 <bt_rand>
	if (err) {
    1e80:	b960      	cbnz	r0, 1e9c <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e82:	7963      	ldrb	r3, [r4, #5]
    1e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e8c:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e8e:	4622      	mov	r2, r4
    1e90:	4629      	mov	r1, r5
    1e92:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e98:	f7ff bfba 	b.w	1e10 <ah>
}
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001ea0 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1ea0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1ea2:	7802      	ldrb	r2, [r0, #0]
    1ea4:	2a01      	cmp	r2, #1
{
    1ea6:	4604      	mov	r4, r0
    1ea8:	460b      	mov	r3, r1
	switch (src->type) {
    1eaa:	d017      	beq.n	1edc <uuid_to_uuid128+0x3c>
    1eac:	d303      	bcc.n	1eb6 <uuid_to_uuid128+0x16>
    1eae:	2a02      	cmp	r2, #2
    1eb0:	d02c      	beq.n	1f0c <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1eb2:	bcf0      	pop	{r4, r5, r6, r7}
    1eb4:	4770      	bx	lr
		*dst = uuid128_base;
    1eb6:	4a18      	ldr	r2, [pc, #96]	; (1f18 <uuid_to_uuid128+0x78>)
    1eb8:	460d      	mov	r5, r1
    1eba:	f102 0710 	add.w	r7, r2, #16
    1ebe:	6810      	ldr	r0, [r2, #0]
    1ec0:	6851      	ldr	r1, [r2, #4]
    1ec2:	462e      	mov	r6, r5
    1ec4:	c603      	stmia	r6!, {r0, r1}
    1ec6:	3208      	adds	r2, #8
    1ec8:	42ba      	cmp	r2, r7
    1eca:	4635      	mov	r5, r6
    1ecc:	d1f7      	bne.n	1ebe <uuid_to_uuid128+0x1e>
    1ece:	7812      	ldrb	r2, [r2, #0]
    1ed0:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1ed2:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1ed4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed6:	0a12      	lsrs	r2, r2, #8
    1ed8:	739a      	strb	r2, [r3, #14]
    1eda:	e7ea      	b.n	1eb2 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1edc:	4a0e      	ldr	r2, [pc, #56]	; (1f18 <uuid_to_uuid128+0x78>)
    1ede:	460d      	mov	r5, r1
    1ee0:	f102 0710 	add.w	r7, r2, #16
    1ee4:	6810      	ldr	r0, [r2, #0]
    1ee6:	6851      	ldr	r1, [r2, #4]
    1ee8:	462e      	mov	r6, r5
    1eea:	c603      	stmia	r6!, {r0, r1}
    1eec:	3208      	adds	r2, #8
    1eee:	42ba      	cmp	r2, r7
    1ef0:	4635      	mov	r5, r6
    1ef2:	d1f7      	bne.n	1ee4 <uuid_to_uuid128+0x44>
    1ef4:	7812      	ldrb	r2, [r2, #0]
    1ef6:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ef8:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1efa:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1efc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1f00:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1f02:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1f04:	0a12      	lsrs	r2, r2, #8
    1f06:	7399      	strb	r1, [r3, #14]
    1f08:	741a      	strb	r2, [r3, #16]
    1f0a:	e7d2      	b.n	1eb2 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1f0c:	4601      	mov	r1, r0
    1f0e:	2211      	movs	r2, #17
    1f10:	4618      	mov	r0, r3
}
    1f12:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1f14:	f7ff be84 	b.w	1c20 <memcpy>
    1f18:	00014df4 	.word	0x00014df4

00001f1c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1f1c:	b510      	push	{r4, lr}
    1f1e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1f20:	7801      	ldrb	r1, [r0, #0]
    1f22:	7822      	ldrb	r2, [r4, #0]
    1f24:	428a      	cmp	r2, r1
{
    1f26:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f28:	d00e      	beq.n	1f48 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f2a:	4669      	mov	r1, sp
    1f2c:	f7ff ffb8 	bl	1ea0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f30:	a905      	add	r1, sp, #20
    1f32:	4620      	mov	r0, r4
    1f34:	f7ff ffb4 	bl	1ea0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f38:	2210      	movs	r2, #16
    1f3a:	f10d 0115 	add.w	r1, sp, #21
    1f3e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f42:	f7ff fe58 	bl	1bf6 <memcmp>
    1f46:	e00a      	b.n	1f5e <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f48:	2a01      	cmp	r2, #1
    1f4a:	d00a      	beq.n	1f62 <bt_uuid_cmp+0x46>
    1f4c:	d304      	bcc.n	1f58 <bt_uuid_cmp+0x3c>
    1f4e:	2a02      	cmp	r2, #2
    1f50:	d00a      	beq.n	1f68 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f52:	f06f 0015 	mvn.w	r0, #21
    1f56:	e002      	b.n	1f5e <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f58:	8840      	ldrh	r0, [r0, #2]
    1f5a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f5c:	1ac0      	subs	r0, r0, r3
}
    1f5e:	b00a      	add	sp, #40	; 0x28
    1f60:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f62:	6840      	ldr	r0, [r0, #4]
    1f64:	6863      	ldr	r3, [r4, #4]
    1f66:	e7f9      	b.n	1f5c <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f68:	2210      	movs	r2, #16
    1f6a:	1c61      	adds	r1, r4, #1
    1f6c:	3001      	adds	r0, #1
    1f6e:	e7e8      	b.n	1f42 <bt_uuid_cmp+0x26>

00001f70 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f70:	4770      	bx	lr
	...

00001f74 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f74:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f76:	4d0b      	ldr	r5, [pc, #44]	; (1fa4 <ver_str+0x30>)
{
    1f78:	4606      	mov	r6, r0
	const char * const str[] = {
    1f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f7c:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f7e:	466c      	mov	r4, sp
    1f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f86:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f8a:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f8c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f90:	bf9b      	ittet	ls
    1f92:	ab0a      	addls	r3, sp, #40	; 0x28
    1f94:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f98:	4803      	ldrhi	r0, [pc, #12]	; (1fa8 <ver_str+0x34>)
		return str[ver];
    1f9a:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f9e:	b00a      	add	sp, #40	; 0x28
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	bf00      	nop
    1fa4:	000147b4 	.word	0x000147b4
    1fa8:	000158c0 	.word	0x000158c0

00001fac <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1fac:	2207      	movs	r2, #7
    1fae:	f7ff be37 	b.w	1c20 <memcpy>

00001fb2 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1fb2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1fb4:	f3bf 8f5b 	dmb	ish
    1fb8:	e850 3f00 	ldrex	r3, [r0]
    1fbc:	ea43 0201 	orr.w	r2, r3, r1
    1fc0:	e840 2e00 	strex	lr, r2, [r0]
    1fc4:	f1be 0f00 	cmp.w	lr, #0
    1fc8:	d1f6      	bne.n	1fb8 <atomic_or+0x6>
    1fca:	f3bf 8f5b 	dmb	ish
    1fce:	4618      	mov	r0, r3
    1fd0:	f85d fb04 	ldr.w	pc, [sp], #4

00001fd4 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fd4:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fd6:	f3bf 8f5b 	dmb	ish
    1fda:	e850 3f00 	ldrex	r3, [r0]
    1fde:	ea03 0201 	and.w	r2, r3, r1
    1fe2:	e840 2e00 	strex	lr, r2, [r0]
    1fe6:	f1be 0f00 	cmp.w	lr, #0
    1fea:	d1f6      	bne.n	1fda <atomic_and+0x6>
    1fec:	f3bf 8f5b 	dmb	ish
    1ff0:	4618      	mov	r0, r3
    1ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001ff8 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1ff8:	78c3      	ldrb	r3, [r0, #3]
    1ffa:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1ffc:	f241 3288 	movw	r2, #5000	; 0x1388
    2000:	f100 0178 	add.w	r1, r0, #120	; 0x78
    2004:	bf08      	it	eq
    2006:	2200      	moveq	r2, #0
    2008:	4801      	ldr	r0, [pc, #4]	; (2010 <update_conn_param+0x18>)
    200a:	f012 b9d3 	b.w	143b4 <k_delayed_work_submit_to_queue>
    200e:	bf00      	nop
    2010:	200019c8 	.word	0x200019c8

00002014 <hci_cmd_done>:
{
    2014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2018:	4606      	mov	r6, r0
    201a:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    201c:	7990      	ldrb	r0, [r2, #6]
    201e:	4f27      	ldr	r7, [pc, #156]	; (20bc <hci_cmd_done+0xa8>)
{
    2020:	4688      	mov	r8, r1
    2022:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2024:	f010 fc86 	bl	12934 <net_buf_pool_get>
    2028:	4287      	cmp	r7, r0
    202a:	d014      	beq.n	2056 <hci_cmd_done+0x42>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    202c:	79ac      	ldrb	r4, [r5, #6]
    202e:	4b24      	ldr	r3, [pc, #144]	; (20c0 <hci_cmd_done+0xac>)
    2030:	4620      	mov	r0, r4
    2032:	f8d3 8000 	ldr.w	r8, [r3]
    2036:	f010 fc7d 	bl	12934 <net_buf_pool_get>
    203a:	4a22      	ldr	r2, [pc, #136]	; (20c4 <hci_cmd_done+0xb0>)
    203c:	9003      	str	r0, [sp, #12]
    203e:	9205      	str	r2, [sp, #20]
    2040:	9704      	str	r7, [sp, #16]
    2042:	9402      	str	r4, [sp, #8]
    2044:	e88d 0044 	stmia.w	sp, {r2, r6}
    2048:	4b1f      	ldr	r3, [pc, #124]	; (20c8 <hci_cmd_done+0xb4>)
    204a:	4920      	ldr	r1, [pc, #128]	; (20cc <hci_cmd_done+0xb8>)
    204c:	4820      	ldr	r0, [pc, #128]	; (20d0 <hci_cmd_done+0xbc>)
    204e:	47c0      	blx	r8
}
    2050:	b006      	add	sp, #24
    2052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2056:	4628      	mov	r0, r5
    2058:	f010 fc74 	bl	12944 <net_buf_id>
    205c:	4c1d      	ldr	r4, [pc, #116]	; (20d4 <hci_cmd_done+0xc0>)
    205e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2062:	8843      	ldrh	r3, [r0, #2]
    2064:	42b3      	cmp	r3, r6
    2066:	d010      	beq.n	208a <hci_cmd_done+0x76>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2068:	4b15      	ldr	r3, [pc, #84]	; (20c0 <hci_cmd_done+0xac>)
    206a:	4628      	mov	r0, r5
    206c:	681f      	ldr	r7, [r3, #0]
    206e:	f010 fc69 	bl	12944 <net_buf_id>
    2072:	4a14      	ldr	r2, [pc, #80]	; (20c4 <hci_cmd_done+0xb0>)
    2074:	9203      	str	r2, [sp, #12]
    2076:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    207a:	4914      	ldr	r1, [pc, #80]	; (20cc <hci_cmd_done+0xb8>)
    207c:	8843      	ldrh	r3, [r0, #2]
    207e:	9302      	str	r3, [sp, #8]
    2080:	e88d 0044 	stmia.w	sp, {r2, r6}
    2084:	4b10      	ldr	r3, [pc, #64]	; (20c8 <hci_cmd_done+0xb4>)
    2086:	4814      	ldr	r0, [pc, #80]	; (20d8 <hci_cmd_done+0xc4>)
    2088:	47b8      	blx	r7
	if (cmd(buf)->sync) {
    208a:	4628      	mov	r0, r5
    208c:	f010 fc5a 	bl	12944 <net_buf_id>
    2090:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2094:	6843      	ldr	r3, [r0, #4]
    2096:	2b00      	cmp	r3, #0
    2098:	d0da      	beq.n	2050 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
    209a:	4628      	mov	r0, r5
    209c:	f010 fc52 	bl	12944 <net_buf_id>
    20a0:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    20a4:	4628      	mov	r0, r5
    20a6:	f010 fc4d 	bl	12944 <net_buf_id>
    20aa:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    20ae:	6840      	ldr	r0, [r0, #4]
}
    20b0:	b006      	add	sp, #24
    20b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    20b6:	f011 be0d 	b.w	13cd4 <_impl_k_sem_give>
    20ba:	bf00      	nop
    20bc:	20003ff0 	.word	0x20003ff0
    20c0:	20003aa4 	.word	0x20003aa4
    20c4:	00014891 	.word	0x00014891
    20c8:	00014ecd 	.word	0x00014ecd
    20cc:	00015639 	.word	0x00015639
    20d0:	0001563c 	.word	0x0001563c
    20d4:	2000027c 	.word	0x2000027c
    20d8:	00015681 	.word	0x00015681

000020dc <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20dc:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20de:	f3bf 8f5b 	dmb	ish
    20e2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20e6:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20ea:	f001 011f 	and.w	r1, r1, #31
    20ee:	4108      	asrs	r0, r1
}
    20f0:	f000 0001 	and.w	r0, r0, #1
    20f4:	4770      	bx	lr
	...

000020f8 <bt_hci_cmd_create>:
{
    20f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20fc:	4680      	mov	r8, r0
    20fe:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2100:	4813      	ldr	r0, [pc, #76]	; (2150 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    2102:	4d14      	ldr	r5, [pc, #80]	; (2154 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2108:	f010 fcb6 	bl	12a78 <net_buf_alloc_fixed>
    210c:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    210e:	f100 0608 	add.w	r6, r0, #8
    2112:	2100      	movs	r1, #0
    2114:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2116:	2700      	movs	r7, #0
    2118:	f010 fccd 	bl	12ab6 <net_buf_simple_reserve>
    211c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    211e:	4620      	mov	r0, r4
    2120:	f010 fc10 	bl	12944 <net_buf_id>
    2124:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2128:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    212c:	4620      	mov	r0, r4
    212e:	f010 fc09 	bl	12944 <net_buf_id>
    2132:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2136:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2138:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    213a:	4630      	mov	r0, r6
    213c:	f010 fd04 	bl	12b48 <net_buf_simple_add>
	hdr->param_len = param_len;
    2140:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    2144:	f8a0 8000 	strh.w	r8, [r0]
}
    2148:	4620      	mov	r0, r4
    214a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    214e:	bf00      	nop
    2150:	20003ff0 	.word	0x20003ff0
    2154:	2000027c 	.word	0x2000027c

00002158 <bt_hci_cmd_send_sync>:
{
    2158:	b5f0      	push	{r4, r5, r6, r7, lr}
    215a:	4615      	mov	r5, r2
    215c:	b089      	sub	sp, #36	; 0x24
	if (!buf) {
    215e:	460c      	mov	r4, r1
    2160:	b919      	cbnz	r1, 216a <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    2162:	f7ff ffc9 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    2166:	4604      	mov	r4, r0
    2168:	b368      	cbz	r0, 21c6 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    216a:	ae01      	add	r6, sp, #4
    216c:	2201      	movs	r2, #1
    216e:	2100      	movs	r1, #0
    2170:	4630      	mov	r0, r6
    2172:	f011 fd97 	bl	13ca4 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2176:	4620      	mov	r0, r4
    2178:	f010 fbe4 	bl	12944 <net_buf_id>
    217c:	4f13      	ldr	r7, [pc, #76]	; (21cc <bt_hci_cmd_send_sync+0x74>)
    217e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    2182:	6046      	str	r6, [r0, #4]
	net_buf_ref(buf);
    2184:	4620      	mov	r0, r4
    2186:	f010 fcdb 	bl	12b40 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    218a:	4621      	mov	r1, r4
    218c:	4810      	ldr	r0, [pc, #64]	; (21d0 <bt_hci_cmd_send_sync+0x78>)
    218e:	f010 fc96 	bl	12abe <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2192:	f242 7110 	movw	r1, #10000	; 0x2710
    2196:	4630      	mov	r0, r6
    2198:	f011 fdc4 	bl	13d24 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    219c:	4620      	mov	r0, r4
    219e:	f010 fbd1 	bl	12944 <net_buf_id>
    21a2:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    21a6:	b130      	cbz	r0, 21b6 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    21a8:	4620      	mov	r0, r4
    21aa:	f010 fc95 	bl	12ad8 <net_buf_unref>
		err = -EIO;
    21ae:	f06f 0004 	mvn.w	r0, #4
}
    21b2:	b009      	add	sp, #36	; 0x24
    21b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (rsp) {
    21b6:	b10d      	cbz	r5, 21bc <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    21b8:	602c      	str	r4, [r5, #0]
    21ba:	e7fa      	b.n	21b2 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    21bc:	4620      	mov	r0, r4
    21be:	f010 fc8b 	bl	12ad8 <net_buf_unref>
		err = 0;
    21c2:	4628      	mov	r0, r5
    21c4:	e7f5      	b.n	21b2 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    21c6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    21ca:	e7f2      	b.n	21b2 <bt_hci_cmd_send_sync+0x5a>
    21cc:	2000027c 	.word	0x2000027c
    21d0:	20003b70 	.word	0x20003b70

000021d4 <set_le_scan_enable>:
{
    21d4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21d6:	2102      	movs	r1, #2
{
    21d8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21da:	f242 000c 	movw	r0, #8204	; 0x200c
    21de:	f7ff ff8b 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    21e2:	4604      	mov	r4, r0
    21e4:	b330      	cbz	r0, 2234 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    21e6:	2102      	movs	r1, #2
    21e8:	3008      	adds	r0, #8
    21ea:	f010 fcad 	bl	12b48 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21ee:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    21f0:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21f2:	d116      	bne.n	2222 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    21f4:	210b      	movs	r1, #11
    21f6:	4811      	ldr	r0, [pc, #68]	; (223c <set_le_scan_enable+0x68>)
    21f8:	f7ff ff70 	bl	20dc <atomic_test_bit>
    21fc:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    21fe:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2200:	4621      	mov	r1, r4
    2202:	2200      	movs	r2, #0
    2204:	f242 000c 	movw	r0, #8204	; 0x200c
    2208:	f7ff ffa6 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    220c:	4604      	mov	r4, r0
    220e:	b930      	cbnz	r0, 221e <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2210:	2d01      	cmp	r5, #1
    2212:	d109      	bne.n	2228 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2214:	f44f 7180 	mov.w	r1, #256	; 0x100
    2218:	4808      	ldr	r0, [pc, #32]	; (223c <set_le_scan_enable+0x68>)
    221a:	f7ff feca 	bl	1fb2 <atomic_or>
}
    221e:	4620      	mov	r0, r4
    2220:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2222:	2300      	movs	r3, #0
    2224:	7043      	strb	r3, [r0, #1]
    2226:	e7ea      	b.n	21fe <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2228:	f46f 7180 	mvn.w	r1, #256	; 0x100
    222c:	4803      	ldr	r0, [pc, #12]	; (223c <set_le_scan_enable+0x68>)
    222e:	f7ff fed1 	bl	1fd4 <atomic_and>
    2232:	e7f4      	b.n	221e <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    2234:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2238:	e7f1      	b.n	221e <set_le_scan_enable+0x4a>
    223a:	bf00      	nop
    223c:	20003b18 	.word	0x20003b18

00002240 <set_random_address>:
{
    2240:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    2242:	4d15      	ldr	r5, [pc, #84]	; (2298 <set_random_address+0x58>)
    2244:	2206      	movs	r2, #6
    2246:	f105 0108 	add.w	r1, r5, #8
    224a:	4606      	mov	r6, r0
    224c:	f7ff fcd3 	bl	1bf6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2250:	4604      	mov	r4, r0
    2252:	b1d8      	cbz	r0, 228c <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2254:	2106      	movs	r1, #6
    2256:	f242 0005 	movw	r0, #8197	; 0x2005
    225a:	f7ff ff4d 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    225e:	4604      	mov	r4, r0
    2260:	b1b0      	cbz	r0, 2290 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2262:	2206      	movs	r2, #6
    2264:	4631      	mov	r1, r6
    2266:	3008      	adds	r0, #8
    2268:	f010 fc74 	bl	12b54 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    226c:	4621      	mov	r1, r4
    226e:	2200      	movs	r2, #0
    2270:	f242 0005 	movw	r0, #8197	; 0x2005
    2274:	f7ff ff70 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2278:	4604      	mov	r4, r0
    227a:	b938      	cbnz	r0, 228c <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    227c:	2206      	movs	r2, #6
    227e:	4631      	mov	r1, r6
    2280:	f105 0008 	add.w	r0, r5, #8
    2284:	f7ff fccc 	bl	1c20 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2288:	2301      	movs	r3, #1
    228a:	71eb      	strb	r3, [r5, #7]
}
    228c:	4620      	mov	r0, r4
    228e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2290:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2294:	e7fa      	b.n	228c <set_random_address+0x4c>
    2296:	bf00      	nop
    2298:	20003aa8 	.word	0x20003aa8

0000229c <le_set_private_addr>:
{
    229c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    229e:	2106      	movs	r1, #6
    22a0:	4668      	mov	r0, sp
    22a2:	f005 fd39 	bl	7d18 <bt_rand>
	if (err) {
    22a6:	b940      	cbnz	r0, 22ba <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    22a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22ac:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    22ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    22b2:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22b6:	f7ff ffc3 	bl	2240 <set_random_address>
}
    22ba:	b003      	add	sp, #12
    22bc:	f85d fb04 	ldr.w	pc, [sp], #4

000022c0 <set_advertise_enable>:
{
    22c0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22c2:	2101      	movs	r1, #1
{
    22c4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22c6:	f242 000a 	movw	r0, #8202	; 0x200a
    22ca:	f7ff ff15 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    22ce:	4604      	mov	r4, r0
    22d0:	b1d8      	cbz	r0, 230a <set_advertise_enable+0x4a>
    22d2:	3008      	adds	r0, #8
	if (enable) {
    22d4:	b18d      	cbz	r5, 22fa <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    22d6:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22d8:	f010 fc45 	bl	12b66 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    22dc:	4621      	mov	r1, r4
    22de:	2200      	movs	r2, #0
    22e0:	f242 000a 	movw	r0, #8202	; 0x200a
    22e4:	f7ff ff38 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    22e8:	4604      	mov	r4, r0
    22ea:	b920      	cbnz	r0, 22f6 <set_advertise_enable+0x36>
	if (enable) {
    22ec:	b13d      	cbz	r5, 22fe <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22ee:	2140      	movs	r1, #64	; 0x40
    22f0:	4807      	ldr	r0, [pc, #28]	; (2310 <set_advertise_enable+0x50>)
    22f2:	f7ff fe5e 	bl	1fb2 <atomic_or>
}
    22f6:	4620      	mov	r0, r4
    22f8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22fa:	4629      	mov	r1, r5
    22fc:	e7ec      	b.n	22d8 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22fe:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2302:	4803      	ldr	r0, [pc, #12]	; (2310 <set_advertise_enable+0x50>)
    2304:	f7ff fe66 	bl	1fd4 <atomic_and>
    2308:	e7f5      	b.n	22f6 <set_advertise_enable+0x36>
		return -ENOBUFS;
    230a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    230e:	e7f2      	b.n	22f6 <set_advertise_enable+0x36>
    2310:	20003b18 	.word	0x20003b18

00002314 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    2314:	8802      	ldrh	r2, [r0, #0]
    2316:	8843      	ldrh	r3, [r0, #2]
    2318:	429a      	cmp	r2, r3
{
    231a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    231c:	d818      	bhi.n	2350 <bt_le_conn_params_valid+0x3c>
    231e:	2a05      	cmp	r2, #5
    2320:	d916      	bls.n	2350 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    2322:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    2326:	d813      	bhi.n	2350 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2328:	8884      	ldrh	r4, [r0, #4]
    232a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    232e:	d20f      	bcs.n	2350 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2330:	88c1      	ldrh	r1, [r0, #6]
    2332:	f1a1 020a 	sub.w	r2, r1, #10
    2336:	b292      	uxth	r2, r2
    2338:	f640 4076 	movw	r0, #3190	; 0xc76
    233c:	4282      	cmp	r2, r0
    233e:	d807      	bhi.n	2350 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2340:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    2344:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2348:	bfb4      	ite	lt
    234a:	2001      	movlt	r0, #1
    234c:	2000      	movge	r0, #0
    234e:	bd10      	pop	{r4, pc}
		return false;
    2350:	2000      	movs	r0, #0
}
    2352:	bd10      	pop	{r4, pc}

00002354 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2354:	2301      	movs	r3, #1
{
    2356:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2358:	2106      	movs	r1, #6
{
    235a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    235c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2360:	f005 fcda 	bl	7d18 <bt_rand>
	if (err) {
    2364:	b918      	cbnz	r0, 236e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    2366:	79a3      	ldrb	r3, [r4, #6]
    2368:	f063 033f 	orn	r3, r3, #63	; 0x3f
    236c:	71a3      	strb	r3, [r4, #6]
}
    236e:	bd10      	pop	{r4, pc}

00002370 <bt_set_static_addr>:
{
    2370:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2372:	4c11      	ldr	r4, [pc, #68]	; (23b8 <bt_set_static_addr+0x48>)
    2374:	7823      	ldrb	r3, [r4, #0]
    2376:	2b01      	cmp	r3, #1
    2378:	d104      	bne.n	2384 <bt_set_static_addr+0x14>
    237a:	79a3      	ldrb	r3, [r4, #6]
    237c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2380:	2bc0      	cmp	r3, #192	; 0xc0
    2382:	d00d      	beq.n	23a0 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    2384:	4a0d      	ldr	r2, [pc, #52]	; (23bc <bt_set_static_addr+0x4c>)
    2386:	4b0e      	ldr	r3, [pc, #56]	; (23c0 <bt_set_static_addr+0x50>)
    2388:	9201      	str	r2, [sp, #4]
    238a:	9200      	str	r2, [sp, #0]
    238c:	681c      	ldr	r4, [r3, #0]
    238e:	490d      	ldr	r1, [pc, #52]	; (23c4 <bt_set_static_addr+0x54>)
    2390:	4b0d      	ldr	r3, [pc, #52]	; (23c8 <bt_set_static_addr+0x58>)
    2392:	480e      	ldr	r0, [pc, #56]	; (23cc <bt_set_static_addr+0x5c>)
    2394:	47a0      	blx	r4
    2396:	f06f 0515 	mvn.w	r5, #21
}
    239a:	4628      	mov	r0, r5
    239c:	b003      	add	sp, #12
    239e:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    23a0:	1c60      	adds	r0, r4, #1
    23a2:	f7ff ff4d 	bl	2240 <set_random_address>
	if (err) {
    23a6:	4605      	mov	r5, r0
    23a8:	2800      	cmp	r0, #0
    23aa:	d1f6      	bne.n	239a <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    23ac:	2104      	movs	r1, #4
    23ae:	f104 0070 	add.w	r0, r4, #112	; 0x70
    23b2:	f7ff fdfe 	bl	1fb2 <atomic_or>
	return 0;
    23b6:	e7f0      	b.n	239a <bt_set_static_addr+0x2a>
    23b8:	20003aa8 	.word	0x20003aa8
    23bc:	00014891 	.word	0x00014891
    23c0:	20003aa4 	.word	0x20003aa4
    23c4:	00015639 	.word	0x00015639
    23c8:	00014f24 	.word	0x00014f24
    23cc:	000155f8 	.word	0x000155f8

000023d0 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    23d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23d4:	4d1f      	ldr	r5, [pc, #124]	; (2454 <bt_dev_show_info+0x84>)
    23d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2470 <bt_dev_show_info+0xa0>
    23da:	4c1f      	ldr	r4, [pc, #124]	; (2458 <bt_dev_show_info+0x88>)
    23dc:	f8d8 9000 	ldr.w	r9, [r8]
    23e0:	4f1e      	ldr	r7, [pc, #120]	; (245c <bt_dev_show_info+0x8c>)
    23e2:	4e1f      	ldr	r6, [pc, #124]	; (2460 <bt_dev_show_info+0x90>)
{
    23e4:	b086      	sub	sp, #24
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23e6:	4628      	mov	r0, r5
    23e8:	f7ff fcc6 	bl	1d78 <bt_addr_le_str>
    23ec:	463b      	mov	r3, r7
    23ee:	4622      	mov	r2, r4
    23f0:	4631      	mov	r1, r6
    23f2:	9001      	str	r0, [sp, #4]
    23f4:	9402      	str	r4, [sp, #8]
    23f6:	9400      	str	r4, [sp, #0]
    23f8:	481a      	ldr	r0, [pc, #104]	; (2464 <bt_dev_show_info+0x94>)
    23fa:	47c8      	blx	r9
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    23fc:	f895 900e 	ldrb.w	r9, [r5, #14]
    2400:	f8d8 a000 	ldr.w	sl, [r8]
    2404:	4648      	mov	r0, r9
    2406:	f7ff fdb5 	bl	1f74 <ver_str>
    240a:	8aab      	ldrh	r3, [r5, #20]
    240c:	9304      	str	r3, [sp, #16]
    240e:	8a2b      	ldrh	r3, [r5, #16]
    2410:	9303      	str	r3, [sp, #12]
    2412:	4622      	mov	r2, r4
    2414:	463b      	mov	r3, r7
    2416:	4631      	mov	r1, r6
    2418:	f8cd 9008 	str.w	r9, [sp, #8]
    241c:	9001      	str	r0, [sp, #4]
    241e:	9405      	str	r4, [sp, #20]
    2420:	9400      	str	r4, [sp, #0]
    2422:	4811      	ldr	r0, [pc, #68]	; (2468 <bt_dev_show_info+0x98>)
    2424:	47d0      	blx	sl
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2426:	f8d8 9000 	ldr.w	r9, [r8]
    242a:	f895 800f 	ldrb.w	r8, [r5, #15]
    242e:	4640      	mov	r0, r8
    2430:	f7ff fda0 	bl	1f74 <ver_str>
    2434:	8a6b      	ldrh	r3, [r5, #18]
    2436:	9303      	str	r3, [sp, #12]
    2438:	9001      	str	r0, [sp, #4]
    243a:	9404      	str	r4, [sp, #16]
    243c:	f8cd 8008 	str.w	r8, [sp, #8]
    2440:	9400      	str	r4, [sp, #0]
    2442:	463b      	mov	r3, r7
    2444:	4622      	mov	r2, r4
    2446:	4631      	mov	r1, r6
    2448:	4808      	ldr	r0, [pc, #32]	; (246c <bt_dev_show_info+0x9c>)
    244a:	47c8      	blx	r9
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    244c:	b006      	add	sp, #24
    244e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2452:	bf00      	nop
    2454:	20003aa8 	.word	0x20003aa8
    2458:	00014891 	.word	0x00014891
    245c:	00014f45 	.word	0x00014f45
    2460:	00015639 	.word	0x00015639
    2464:	00014f8a 	.word	0x00014f8a
    2468:	00014fa7 	.word	0x00014fa7
    246c:	00014ff5 	.word	0x00014ff5
    2470:	20003aa4 	.word	0x20003aa4

00002474 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2474:	4b02      	ldr	r3, [pc, #8]	; (2480 <bt_send+0xc>)
    2476:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    247a:	691b      	ldr	r3, [r3, #16]
    247c:	4718      	bx	r3
    247e:	bf00      	nop
    2480:	20003aa8 	.word	0x20003aa8

00002484 <bt_hci_cmd_send>:
{
    2484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2486:	4604      	mov	r4, r0
	if (!buf) {
    2488:	460d      	mov	r5, r1
    248a:	b919      	cbnz	r1, 2494 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    248c:	f7ff fe34 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    2490:	4605      	mov	r5, r0
    2492:	b1f0      	cbz	r0, 24d2 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2494:	f640 4335 	movw	r3, #3125	; 0xc35
    2498:	429c      	cmp	r4, r3
    249a:	d114      	bne.n	24c6 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
    249c:	4628      	mov	r0, r5
    249e:	f7ff ffe9 	bl	2474 <bt_send>
		if (err) {
    24a2:	4604      	mov	r4, r0
    24a4:	b160      	cbz	r0, 24c0 <bt_hci_cmd_send+0x3c>
			BT_ERR("Unable to send to driver (err %d)", err);
    24a6:	4a0c      	ldr	r2, [pc, #48]	; (24d8 <bt_hci_cmd_send+0x54>)
    24a8:	4b0c      	ldr	r3, [pc, #48]	; (24dc <bt_hci_cmd_send+0x58>)
    24aa:	9202      	str	r2, [sp, #8]
    24ac:	e88d 0014 	stmia.w	sp, {r2, r4}
    24b0:	480b      	ldr	r0, [pc, #44]	; (24e0 <bt_hci_cmd_send+0x5c>)
    24b2:	681e      	ldr	r6, [r3, #0]
    24b4:	490b      	ldr	r1, [pc, #44]	; (24e4 <bt_hci_cmd_send+0x60>)
    24b6:	4b0c      	ldr	r3, [pc, #48]	; (24e8 <bt_hci_cmd_send+0x64>)
    24b8:	47b0      	blx	r6
			net_buf_unref(buf);
    24ba:	4628      	mov	r0, r5
    24bc:	f010 fb0c 	bl	12ad8 <net_buf_unref>
}
    24c0:	4620      	mov	r0, r4
    24c2:	b004      	add	sp, #16
    24c4:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    24c6:	4629      	mov	r1, r5
    24c8:	4808      	ldr	r0, [pc, #32]	; (24ec <bt_hci_cmd_send+0x68>)
    24ca:	f010 faf8 	bl	12abe <net_buf_put>
	return 0;
    24ce:	2400      	movs	r4, #0
    24d0:	e7f6      	b.n	24c0 <bt_hci_cmd_send+0x3c>
			return -ENOBUFS;
    24d2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24d6:	e7f3      	b.n	24c0 <bt_hci_cmd_send+0x3c>
    24d8:	00014891 	.word	0x00014891
    24dc:	20003aa4 	.word	0x20003aa4
    24e0:	00015081 	.word	0x00015081
    24e4:	00015639 	.word	0x00015639
    24e8:	00014e05 	.word	0x00014e05
    24ec:	20003b70 	.word	0x20003b70

000024f0 <start_le_scan>:
{
    24f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24f2:	4605      	mov	r5, r0
    24f4:	460e      	mov	r6, r1
    24f6:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    24f8:	2100      	movs	r1, #0
    24fa:	2207      	movs	r2, #7
    24fc:	4668      	mov	r0, sp
    24fe:	f7ff fbbb 	bl	1c78 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    2502:	4821      	ldr	r0, [pc, #132]	; (2588 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    2504:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    2508:	2300      	movs	r3, #0
    250a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    250e:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    2510:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    2512:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    2516:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    251a:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    251e:	d10a      	bne.n	2536 <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2520:	2106      	movs	r1, #6
    2522:	3070      	adds	r0, #112	; 0x70
    2524:	f7ff fdda 	bl	20dc <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2528:	b928      	cbnz	r0, 2536 <start_le_scan+0x46>
			err = le_set_private_addr();
    252a:	f7ff feb7 	bl	229c <le_set_private_addr>
			if (err) {
    252e:	4604      	mov	r4, r0
    2530:	b9f0      	cbnz	r0, 2570 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2532:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2536:	2107      	movs	r1, #7
    2538:	f242 000b 	movw	r0, #8203	; 0x200b
    253c:	f7ff fddc 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2540:	4604      	mov	r4, r0
    2542:	b1f0      	cbz	r0, 2582 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2544:	2207      	movs	r2, #7
    2546:	4669      	mov	r1, sp
    2548:	3008      	adds	r0, #8
    254a:	f010 fb03 	bl	12b54 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    254e:	4621      	mov	r1, r4
    2550:	f242 000b 	movw	r0, #8203	; 0x200b
    2554:	f7ff ff96 	bl	2484 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2558:	2001      	movs	r0, #1
    255a:	f7ff fe3b 	bl	21d4 <set_le_scan_enable>
	if (err) {
    255e:	4604      	mov	r4, r0
    2560:	b930      	cbnz	r0, 2570 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2562:	2d01      	cmp	r5, #1
    2564:	d107      	bne.n	2576 <start_le_scan+0x86>
    2566:	f44f 6180 	mov.w	r1, #1024	; 0x400
    256a:	4808      	ldr	r0, [pc, #32]	; (258c <start_le_scan+0x9c>)
    256c:	f7ff fd21 	bl	1fb2 <atomic_or>
}
    2570:	4620      	mov	r0, r4
    2572:	b002      	add	sp, #8
    2574:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2576:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    257a:	4804      	ldr	r0, [pc, #16]	; (258c <start_le_scan+0x9c>)
    257c:	f7ff fd2a 	bl	1fd4 <atomic_and>
    2580:	e7f6      	b.n	2570 <start_le_scan+0x80>
		return -ENOBUFS;
    2582:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2586:	e7f3      	b.n	2570 <start_le_scan+0x80>
    2588:	20003aa8 	.word	0x20003aa8
    258c:	20003b18 	.word	0x20003b18

00002590 <bt_le_scan_update>:
{
    2590:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2592:	2109      	movs	r1, #9
{
    2594:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2596:	4816      	ldr	r0, [pc, #88]	; (25f0 <bt_le_scan_update+0x60>)
    2598:	f7ff fda0 	bl	20dc <atomic_test_bit>
    259c:	4602      	mov	r2, r0
    259e:	b108      	cbz	r0, 25a4 <bt_le_scan_update+0x14>
		return 0;
    25a0:	2000      	movs	r0, #0
    25a2:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    25a4:	2108      	movs	r1, #8
    25a6:	4812      	ldr	r0, [pc, #72]	; (25f0 <bt_le_scan_update+0x60>)
    25a8:	f7ff fd98 	bl	20dc <atomic_test_bit>
    25ac:	b9d0      	cbnz	r0, 25e4 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    25ae:	2101      	movs	r1, #1
    25b0:	2000      	movs	r0, #0
    25b2:	f001 fe55 	bl	4260 <bt_conn_lookup_state_le>
		if (!conn) {
    25b6:	4604      	mov	r4, r0
    25b8:	2800      	cmp	r0, #0
    25ba:	d0f1      	beq.n	25a0 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    25bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    25c0:	480b      	ldr	r0, [pc, #44]	; (25f0 <bt_le_scan_update+0x60>)
    25c2:	f7ff fcf6 	bl	1fb2 <atomic_or>
		bt_conn_unref(conn);
    25c6:	4620      	mov	r0, r4
    25c8:	f001 fe68 	bl	429c <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    25cc:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25ce:	bf15      	itete	ne
    25d0:	2230      	movne	r2, #48	; 0x30
    25d2:	2212      	moveq	r2, #18
    25d4:	2160      	movne	r1, #96	; 0x60
    25d6:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    25da:	2000      	movs	r0, #0
}
    25dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25e0:	f7ff bf86 	b.w	24f0 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    25e4:	4610      	mov	r0, r2
    25e6:	f7ff fdf5 	bl	21d4 <set_le_scan_enable>
		if (err) {
    25ea:	2800      	cmp	r0, #0
    25ec:	d0df      	beq.n	25ae <bt_le_scan_update+0x1e>
    25ee:	bd38      	pop	{r3, r4, r5, pc}
    25f0:	20003b18 	.word	0x20003b18

000025f4 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    25f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    25f8:	4d4d      	ldr	r5, [pc, #308]	; (2730 <bt_init+0x13c>)
    25fa:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    25fe:	6899      	ldr	r1, [r3, #8]
    2600:	f011 0101 	ands.w	r1, r1, #1
{
    2604:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2606:	d124      	bne.n	2652 <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2608:	aa0c      	add	r2, sp, #48	; 0x30
    260a:	f640 4003 	movw	r0, #3075	; 0xc03
    260e:	f7ff fda3 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    2612:	4604      	mov	r4, r0
    2614:	2800      	cmp	r0, #0
    2616:	f040 8087 	bne.w	2728 <bt_init+0x134>
	u8_t status = buf->data[0];
    261a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    261c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    261e:	781b      	ldrb	r3, [r3, #0]
    2620:	b9a3      	cbnz	r3, 264c <bt_init+0x58>
	scan_dev_found_cb = NULL;
    2622:	4a44      	ldr	r2, [pc, #272]	; (2734 <bt_init+0x140>)
    2624:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2626:	462b      	mov	r3, r5
    2628:	f3bf 8f5b 	dmb	ish
    262c:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2630:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2634:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2638:	f3bf 8f5b 	dmb	ish
    263c:	e853 1f00 	ldrex	r1, [r3]
    2640:	e843 2000 	strex	r0, r2, [r3]
    2644:	2800      	cmp	r0, #0
    2646:	d1f9      	bne.n	263c <bt_init+0x48>
    2648:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    264c:	980c      	ldr	r0, [sp, #48]	; 0x30
    264e:	f010 fa43 	bl	12ad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2652:	aa0c      	add	r2, sp, #48	; 0x30
    2654:	2100      	movs	r1, #0
    2656:	f241 0003 	movw	r0, #4099	; 0x1003
    265a:	f7ff fd7d 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    265e:	4604      	mov	r4, r0
    2660:	2800      	cmp	r0, #0
    2662:	d161      	bne.n	2728 <bt_init+0x134>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2666:	4834      	ldr	r0, [pc, #208]	; (2738 <bt_init+0x144>)
    2668:	6899      	ldr	r1, [r3, #8]
    266a:	2208      	movs	r2, #8
    266c:	3101      	adds	r1, #1
    266e:	f7ff fad7 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2672:	980c      	ldr	r0, [sp, #48]	; 0x30
    2674:	f010 fa30 	bl	12ad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2678:	4621      	mov	r1, r4
    267a:	aa0c      	add	r2, sp, #48	; 0x30
    267c:	f241 0001 	movw	r0, #4097	; 0x1001
    2680:	f7ff fd6a 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2684:	4604      	mov	r4, r0
    2686:	2800      	cmp	r0, #0
    2688:	d14e      	bne.n	2728 <bt_init+0x134>
	read_local_ver_complete(rsp);
    268a:	980c      	ldr	r0, [sp, #48]	; 0x30
    268c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    268e:	785a      	ldrb	r2, [r3, #1]
    2690:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2692:	78d9      	ldrb	r1, [r3, #3]
    2694:	789a      	ldrb	r2, [r3, #2]
    2696:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    269a:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    269c:	791a      	ldrb	r2, [r3, #4]
    269e:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    26a0:	7a19      	ldrb	r1, [r3, #8]
    26a2:	79da      	ldrb	r2, [r3, #7]
    26a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    26a8:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    26aa:	795a      	ldrb	r2, [r3, #5]
    26ac:	799b      	ldrb	r3, [r3, #6]
    26ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    26b2:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    26b4:	f010 fa10 	bl	12ad8 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    26b8:	2103      	movs	r1, #3
    26ba:	4820      	ldr	r0, [pc, #128]	; (273c <bt_init+0x148>)
    26bc:	f7ff fd0e 	bl	20dc <atomic_test_bit>
    26c0:	4601      	mov	r1, r0
    26c2:	b988      	cbnz	r0, 26e8 <bt_init+0xf4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    26c4:	aa0c      	add	r2, sp, #48	; 0x30
    26c6:	f241 0009 	movw	r0, #4105	; 0x1009
    26ca:	f7ff fd45 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    26ce:	4604      	mov	r4, r0
    26d0:	bb50      	cbnz	r0, 2728 <bt_init+0x134>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    26d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26d4:	481a      	ldr	r0, [pc, #104]	; (2740 <bt_init+0x14c>)
    26d6:	6899      	ldr	r1, [r3, #8]
    26d8:	2206      	movs	r2, #6
    26da:	3101      	adds	r1, #1
    26dc:	f7ff faa0 	bl	1c20 <memcpy>
		net_buf_unref(rsp);
    26e0:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    26e2:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    26e4:	f010 f9f8 	bl	12ad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    26e8:	aa0c      	add	r2, sp, #48	; 0x30
    26ea:	2100      	movs	r1, #0
    26ec:	f241 0002 	movw	r0, #4098	; 0x1002
    26f0:	f7ff fd32 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    26f4:	4604      	mov	r4, r0
    26f6:	b9b8      	cbnz	r0, 2728 <bt_init+0x134>
	memcpy(bt_dev.supported_commands, rp->commands,
    26f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26fa:	4812      	ldr	r0, [pc, #72]	; (2744 <bt_init+0x150>)
    26fc:	6899      	ldr	r1, [r3, #8]
    26fe:	2240      	movs	r2, #64	; 0x40
    2700:	3101      	adds	r1, #1
    2702:	f7ff fa8d 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2706:	980c      	ldr	r0, [sp, #48]	; 0x30
    2708:	f010 f9e6 	bl	12ad8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    270c:	7eab      	ldrb	r3, [r5, #26]
    270e:	065a      	lsls	r2, r3, #25
    2710:	d424      	bmi.n	275c <bt_init+0x168>
		BT_ERR("Non-LE capable controller detected!");
    2712:	4a0d      	ldr	r2, [pc, #52]	; (2748 <bt_init+0x154>)
    2714:	4b0d      	ldr	r3, [pc, #52]	; (274c <bt_init+0x158>)
    2716:	9201      	str	r2, [sp, #4]
    2718:	9200      	str	r2, [sp, #0]
    271a:	681c      	ldr	r4, [r3, #0]
    271c:	490c      	ldr	r1, [pc, #48]	; (2750 <bt_init+0x15c>)
    271e:	4b0d      	ldr	r3, [pc, #52]	; (2754 <bt_init+0x160>)
    2720:	480d      	ldr	r0, [pc, #52]	; (2758 <bt_init+0x164>)
    2722:	47a0      	blx	r4
		return -ENODEV;
    2724:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    2728:	4620      	mov	r0, r4
    272a:	b00e      	add	sp, #56	; 0x38
    272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2730:	20003aa8 	.word	0x20003aa8
    2734:	200002d8 	.word	0x200002d8
    2738:	20003abe 	.word	0x20003abe
    273c:	20003b18 	.word	0x20003b18
    2740:	20003aa9 	.word	0x20003aa9
    2744:	20003ac6 	.word	0x20003ac6
    2748:	00014891 	.word	0x00014891
    274c:	20003aa4 	.word	0x20003aa4
    2750:	00015639 	.word	0x00015639
    2754:	00014f1c 	.word	0x00014f1c
    2758:	000150b3 	.word	0x000150b3
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    275c:	4621      	mov	r1, r4
    275e:	aa0c      	add	r2, sp, #48	; 0x30
    2760:	f242 0003 	movw	r0, #8195	; 0x2003
    2764:	f7ff fcf8 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2768:	4604      	mov	r4, r0
    276a:	2800      	cmp	r0, #0
    276c:	d1dc      	bne.n	2728 <bt_init+0x134>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    276e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2770:	489c      	ldr	r0, [pc, #624]	; (29e4 <bt_init+0x3f0>)
    2772:	6899      	ldr	r1, [r3, #8]
    2774:	2208      	movs	r2, #8
    2776:	3101      	adds	r1, #1
    2778:	f7ff fa52 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    277c:	980c      	ldr	r0, [sp, #48]	; 0x30
    277e:	f010 f9ab 	bl	12ad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2782:	4621      	mov	r1, r4
    2784:	aa0c      	add	r2, sp, #48	; 0x30
    2786:	f242 0002 	movw	r0, #8194	; 0x2002
    278a:	f7ff fce5 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    278e:	4604      	mov	r4, r0
    2790:	2800      	cmp	r0, #0
    2792:	d1c9      	bne.n	2728 <bt_init+0x134>
    2794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2796:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2798:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    279c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    27a0:	b13a      	cbz	r2, 27b2 <bt_init+0x1be>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    27a2:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    27a4:	4890      	ldr	r0, [pc, #576]	; (29e8 <bt_init+0x3f4>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    27a6:	2a02      	cmp	r2, #2
    27a8:	bf28      	it	cs
    27aa:	2202      	movcs	r2, #2
    27ac:	4611      	mov	r1, r2
    27ae:	f011 fa79 	bl	13ca4 <_impl_k_sem_init>
	net_buf_unref(rsp);
    27b2:	980c      	ldr	r0, [sp, #48]	; 0x30
    27b4:	f010 f990 	bl	12ad8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    27b8:	7eac      	ldrb	r4, [r5, #26]
    27ba:	f014 0420 	ands.w	r4, r4, #32
    27be:	f000 80c9 	beq.w	2954 <bt_init+0x360>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    27c2:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    27c6:	071b      	lsls	r3, r3, #28
    27c8:	d513      	bpl.n	27f2 <bt_init+0x1fe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    27ca:	aa0c      	add	r2, sp, #48	; 0x30
    27cc:	2100      	movs	r1, #0
    27ce:	f242 001c 	movw	r0, #8220	; 0x201c
    27d2:	f7ff fcc1 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    27d6:	4604      	mov	r4, r0
    27d8:	2800      	cmp	r0, #0
    27da:	d1a5      	bne.n	2728 <bt_init+0x134>
		le_read_supp_states_complete(rsp);
    27dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    27de:	6883      	ldr	r3, [r0, #8]
    27e0:	f853 2f01 	ldr.w	r2, [r3, #1]!
    27e4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    27e6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    27ea:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    27ee:	f010 f973 	bl	12ad8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    27f2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    27f6:	069f      	lsls	r7, r3, #26
    27f8:	f100 80c8 	bmi.w	298c <bt_init+0x398>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    27fc:	2108      	movs	r1, #8
    27fe:	f242 0001 	movw	r0, #8193	; 0x2001
    2802:	f7ff fc79 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2806:	4604      	mov	r4, r0
    2808:	2800      	cmp	r0, #0
    280a:	f000 80aa 	beq.w	2962 <bt_init+0x36e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    280e:	2108      	movs	r1, #8
    2810:	4408      	add	r0, r1
    2812:	f010 f999 	bl	12b48 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2816:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    281a:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    281c:	bf4c      	ite	mi
    281e:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2820:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2822:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2824:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2828:	bf48      	it	mi
    282a:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    282e:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2832:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    2836:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    283a:	bf18      	it	ne
    283c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2840:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2842:	bf08      	it	eq
    2844:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2848:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    284a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    284e:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2850:	2200      	movs	r2, #0
    2852:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2854:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2856:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2858:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    285a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    285c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    285e:	4621      	mov	r1, r4
    2860:	f242 0001 	movw	r0, #8193	; 0x2001
    2864:	f7ff fc78 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2868:	4604      	mov	r4, r0
    286a:	2800      	cmp	r0, #0
    286c:	f47f af5c 	bne.w	2728 <bt_init+0x134>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2870:	7eab      	ldrb	r3, [r5, #26]
    2872:	069a      	lsls	r2, r3, #26
    2874:	d421      	bmi.n	28ba <bt_init+0x2c6>
	if (bt_dev.le.mtu) {
    2876:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    287a:	b9f1      	cbnz	r1, 28ba <bt_init+0x2c6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    287c:	aa0c      	add	r2, sp, #48	; 0x30
    287e:	f241 0005 	movw	r0, #4101	; 0x1005
    2882:	f7ff fc69 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2886:	4604      	mov	r4, r0
    2888:	2800      	cmp	r0, #0
    288a:	f47f af4d 	bne.w	2728 <bt_init+0x134>
	if (bt_dev.le.mtu) {
    288e:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2892:	b97b      	cbnz	r3, 28b4 <bt_init+0x2c0>
    2894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2896:	4854      	ldr	r0, [pc, #336]	; (29e8 <bt_init+0x3f4>)
    2898:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    289a:	7899      	ldrb	r1, [r3, #2]
    289c:	785a      	ldrb	r2, [r3, #1]
    289e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    28a2:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    28a6:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    28a8:	2a02      	cmp	r2, #2
    28aa:	bf28      	it	cs
    28ac:	2202      	movcs	r2, #2
    28ae:	4611      	mov	r1, r2
    28b0:	f011 f9f8 	bl	13ca4 <_impl_k_sem_init>
	net_buf_unref(rsp);
    28b4:	980c      	ldr	r0, [sp, #48]	; 0x30
    28b6:	f010 f90f 	bl	12ad8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    28ba:	2108      	movs	r1, #8
    28bc:	f640 4001 	movw	r0, #3073	; 0xc01
    28c0:	f7ff fc1a 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    28c4:	4604      	mov	r4, r0
    28c6:	2800      	cmp	r0, #0
    28c8:	d04b      	beq.n	2962 <bt_init+0x36e>
	ev = net_buf_add(buf, sizeof(*ev));
    28ca:	2108      	movs	r1, #8
    28cc:	4408      	add	r0, r1
    28ce:	f010 f93b 	bl	12b48 <net_buf_simple_add>
	dst[0] = val;
    28d2:	2310      	movs	r3, #16
    28d4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    28d6:	2388      	movs	r3, #136	; 0x88
    28d8:	7043      	strb	r3, [r0, #1]
    28da:	2302      	movs	r3, #2
	dst[0] = val;
    28dc:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    28de:	70c3      	strb	r3, [r0, #3]
    28e0:	2320      	movs	r3, #32
	dst[0] = val;
    28e2:	7082      	strb	r2, [r0, #2]
    28e4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    28e6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    28e8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    28ea:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    28ec:	4621      	mov	r1, r4
    28ee:	f640 4001 	movw	r0, #3073	; 0xc01
    28f2:	f7ff fc31 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    28f6:	4604      	mov	r4, r0
    28f8:	2800      	cmp	r0, #0
    28fa:	f47f af15 	bne.w	2728 <bt_init+0x134>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    28fe:	4601      	mov	r1, r0
    2900:	aa0c      	add	r2, sp, #48	; 0x30
    2902:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2906:	f7ff fc27 	bl	2158 <bt_hci_cmd_send_sync>
    290a:	4e38      	ldr	r6, [pc, #224]	; (29ec <bt_init+0x3f8>)
    290c:	4f38      	ldr	r7, [pc, #224]	; (29f0 <bt_init+0x3fc>)
	if (err) {
    290e:	2800      	cmp	r0, #0
    2910:	d07c      	beq.n	2a0c <bt_init+0x418>
		BT_WARN("Vendor HCI extensions not available");
    2912:	9601      	str	r6, [sp, #4]
    2914:	9600      	str	r6, [sp, #0]
    2916:	683c      	ldr	r4, [r7, #0]
    2918:	4b36      	ldr	r3, [pc, #216]	; (29f4 <bt_init+0x400>)
    291a:	4937      	ldr	r1, [pc, #220]	; (29f8 <bt_init+0x404>)
    291c:	4837      	ldr	r0, [pc, #220]	; (29fc <bt_init+0x408>)
    291e:	4632      	mov	r2, r6
		BT_WARN("Failed to read supported vendor commands");
    2920:	47a0      	blx	r4
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2922:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2924:	2207      	movs	r2, #7
    2926:	a90c      	add	r1, sp, #48	; 0x30
    2928:	4835      	ldr	r0, [pc, #212]	; (2a00 <bt_init+0x40c>)
    292a:	930c      	str	r3, [sp, #48]	; 0x30
    292c:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2930:	f7ff f961 	bl	1bf6 <memcmp>
    2934:	2800      	cmp	r0, #0
    2936:	f040 80e8 	bne.w	2b0a <bt_init+0x516>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    293a:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    293e:	07db      	lsls	r3, r3, #31
    2940:	f100 8104 	bmi.w	2b4c <bt_init+0x558>
		BT_WARN("Read Static Addresses command not available");
    2944:	9601      	str	r6, [sp, #4]
    2946:	9600      	str	r6, [sp, #0]
    2948:	683c      	ldr	r4, [r7, #0]
    294a:	4b2e      	ldr	r3, [pc, #184]	; (2a04 <bt_init+0x410>)
    294c:	4a27      	ldr	r2, [pc, #156]	; (29ec <bt_init+0x3f8>)
    294e:	492a      	ldr	r1, [pc, #168]	; (29f8 <bt_init+0x404>)
    2950:	482d      	ldr	r0, [pc, #180]	; (2a08 <bt_init+0x414>)
    2952:	e109      	b.n	2b68 <bt_init+0x574>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2954:	2102      	movs	r1, #2
    2956:	f640 406d 	movw	r0, #3181	; 0xc6d
    295a:	f7ff fbcd 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    295e:	4606      	mov	r6, r0
    2960:	b910      	cbnz	r0, 2968 <bt_init+0x374>
		return -ENOBUFS;
    2962:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2966:	e6df      	b.n	2728 <bt_init+0x134>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2968:	2102      	movs	r1, #2
    296a:	3008      	adds	r0, #8
    296c:	f010 f8ec 	bl	12b48 <net_buf_simple_add>
		cp_le->le = 0x01;
    2970:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2972:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2974:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2976:	4622      	mov	r2, r4
    2978:	4631      	mov	r1, r6
    297a:	f640 406d 	movw	r0, #3181	; 0xc6d
    297e:	f7ff fbeb 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    2982:	4604      	mov	r4, r0
    2984:	2800      	cmp	r0, #0
    2986:	f43f af1c 	beq.w	27c2 <bt_init+0x1ce>
    298a:	e6cd      	b.n	2728 <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    298c:	aa0c      	add	r2, sp, #48	; 0x30
    298e:	2100      	movs	r1, #0
    2990:	f242 002f 	movw	r0, #8239	; 0x202f
    2994:	f7ff fbe0 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    2998:	4604      	mov	r4, r0
    299a:	2800      	cmp	r0, #0
    299c:	f47f aec4 	bne.w	2728 <bt_init+0x134>
		rp = (void *)rsp->data;
    29a0:	980c      	ldr	r0, [sp, #48]	; 0x30
    29a2:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    29a4:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    29a8:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    29ac:	f010 f894 	bl	12ad8 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29b0:	2104      	movs	r1, #4
    29b2:	f242 0024 	movw	r0, #8228	; 0x2024
    29b6:	f7ff fb9f 	bl	20f8 <bt_hci_cmd_create>
		if (!buf) {
    29ba:	4606      	mov	r6, r0
    29bc:	2800      	cmp	r0, #0
    29be:	d0d0      	beq.n	2962 <bt_init+0x36e>
		cp = net_buf_add(buf, sizeof(*cp));
    29c0:	2104      	movs	r1, #4
    29c2:	3008      	adds	r0, #8
    29c4:	f010 f8c0 	bl	12b48 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29c8:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    29ca:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    29ce:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29d0:	4631      	mov	r1, r6
    29d2:	f242 0024 	movw	r0, #8228	; 0x2024
    29d6:	f7ff fbbf 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    29da:	4604      	mov	r4, r0
    29dc:	2800      	cmp	r0, #0
    29de:	f43f af0d 	beq.w	27fc <bt_init+0x208>
    29e2:	e6a1      	b.n	2728 <bt_init+0x134>
    29e4:	20003b20 	.word	0x20003b20
    29e8:	20003b34 	.word	0x20003b34
    29ec:	00014891 	.word	0x00014891
    29f0:	20003aa4 	.word	0x20003aa4
    29f4:	00014f56 	.word	0x00014f56
    29f8:	00015639 	.word	0x00015639
    29fc:	000150e7 	.word	0x000150e7
    2a00:	20003aa8 	.word	0x20003aa8
    2a04:	00014f37 	.word	0x00014f37
    2a08:	00015284 	.word	0x00015284
	rp.info = (void *)rsp->data;
    2a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2a0e:	f8d7 8000 	ldr.w	r8, [r7]
	rp.info = (void *)rsp->data;
    2a12:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2a14:	4972      	ldr	r1, [pc, #456]	; (2be0 <bt_init+0x5ec>)
    2a16:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2a1a:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2a1c:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2a1e:	bf96      	itet	ls
    2a20:	4a70      	ldrls	r2, [pc, #448]	; (2be4 <bt_init+0x5f0>)
	return "unknown";
    2a22:	4a71      	ldrhi	r2, [pc, #452]	; (2be8 <bt_init+0x5f4>)
		return plat_str[platform];
    2a24:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2a28:	9201      	str	r2, [sp, #4]
    2a2a:	4b70      	ldr	r3, [pc, #448]	; (2bec <bt_init+0x5f8>)
    2a2c:	4a70      	ldr	r2, [pc, #448]	; (2bf0 <bt_init+0x5fc>)
    2a2e:	9603      	str	r6, [sp, #12]
    2a30:	9600      	str	r6, [sp, #0]
    2a32:	4870      	ldr	r0, [pc, #448]	; (2bf4 <bt_init+0x600>)
    2a34:	47c0      	blx	r8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a36:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a3a:	f8d7 8000 	ldr.w	r8, [r7]
    2a3e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a42:	2b02      	cmp	r3, #2
    2a44:	d13b      	bne.n	2abe <bt_init+0x4ca>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2a46:	2a02      	cmp	r2, #2
    2a48:	d839      	bhi.n	2abe <bt_init+0x4ca>
		return nordic_str[variant];
    2a4a:	4b6b      	ldr	r3, [pc, #428]	; (2bf8 <bt_init+0x604>)
    2a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a50:	9202      	str	r2, [sp, #8]
    2a52:	9301      	str	r3, [sp, #4]
    2a54:	4a66      	ldr	r2, [pc, #408]	; (2bf0 <bt_init+0x5fc>)
    2a56:	4b65      	ldr	r3, [pc, #404]	; (2bec <bt_init+0x5f8>)
    2a58:	4961      	ldr	r1, [pc, #388]	; (2be0 <bt_init+0x5ec>)
    2a5a:	4868      	ldr	r0, [pc, #416]	; (2bfc <bt_init+0x608>)
    2a5c:	9603      	str	r6, [sp, #12]
    2a5e:	9600      	str	r6, [sp, #0]
    2a60:	47c0      	blx	r8
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a62:	7963      	ldrb	r3, [r4, #5]
    2a64:	f8d7 8000 	ldr.w	r8, [r7]
    2a68:	9606      	str	r6, [sp, #24]
    2a6a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a6e:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2a70:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a72:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2a76:	bf98      	it	ls
    2a78:	4a61      	ldrls	r2, [pc, #388]	; (2c00 <bt_init+0x60c>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a7a:	9104      	str	r1, [sp, #16]
    2a7c:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2a7e:	bf94      	ite	ls
    2a80:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2a84:	4a58      	ldrhi	r2, [pc, #352]	; (2be8 <bt_init+0x5f4>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a86:	9103      	str	r1, [sp, #12]
    2a88:	9302      	str	r3, [sp, #8]
    2a8a:	4955      	ldr	r1, [pc, #340]	; (2be0 <bt_init+0x5ec>)
    2a8c:	4b57      	ldr	r3, [pc, #348]	; (2bec <bt_init+0x5f8>)
    2a8e:	9201      	str	r2, [sp, #4]
    2a90:	485c      	ldr	r0, [pc, #368]	; (2c04 <bt_init+0x610>)
    2a92:	4a57      	ldr	r2, [pc, #348]	; (2bf0 <bt_init+0x5fc>)
    2a94:	9600      	str	r6, [sp, #0]
    2a96:	47c0      	blx	r8
	net_buf_unref(rsp);
    2a98:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a9a:	f010 f81d 	bl	12ad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2a9e:	aa0c      	add	r2, sp, #48	; 0x30
    2aa0:	2100      	movs	r1, #0
    2aa2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2aa6:	f7ff fb57 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2aaa:	4604      	mov	r4, r0
    2aac:	b148      	cbz	r0, 2ac2 <bt_init+0x4ce>
		BT_WARN("Failed to read supported vendor features");
    2aae:	9601      	str	r6, [sp, #4]
    2ab0:	9600      	str	r6, [sp, #0]
    2ab2:	683c      	ldr	r4, [r7, #0]
    2ab4:	4b4d      	ldr	r3, [pc, #308]	; (2bec <bt_init+0x5f8>)
    2ab6:	4a4e      	ldr	r2, [pc, #312]	; (2bf0 <bt_init+0x5fc>)
    2ab8:	4949      	ldr	r1, [pc, #292]	; (2be0 <bt_init+0x5ec>)
    2aba:	4853      	ldr	r0, [pc, #332]	; (2c08 <bt_init+0x614>)
    2abc:	e730      	b.n	2920 <bt_init+0x32c>
		return "unknown";
    2abe:	4b4a      	ldr	r3, [pc, #296]	; (2be8 <bt_init+0x5f4>)
    2ac0:	e7c6      	b.n	2a50 <bt_init+0x45c>
	rp.cmds = (void *)rsp->data;
    2ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2ac4:	4851      	ldr	r0, [pc, #324]	; (2c0c <bt_init+0x618>)
    2ac6:	6899      	ldr	r1, [r3, #8]
    2ac8:	2202      	movs	r2, #2
    2aca:	3101      	adds	r1, #1
    2acc:	f7ff f8a8 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2ad0:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ad2:	f010 f801 	bl	12ad8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2ad6:	aa0c      	add	r2, sp, #48	; 0x30
    2ad8:	4621      	mov	r1, r4
    2ada:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2ade:	f7ff fb3b 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2ae2:	b138      	cbz	r0, 2af4 <bt_init+0x500>
		BT_WARN("Failed to read supported vendor commands");
    2ae4:	9601      	str	r6, [sp, #4]
    2ae6:	9600      	str	r6, [sp, #0]
    2ae8:	683c      	ldr	r4, [r7, #0]
    2aea:	4b40      	ldr	r3, [pc, #256]	; (2bec <bt_init+0x5f8>)
    2aec:	4a40      	ldr	r2, [pc, #256]	; (2bf0 <bt_init+0x5fc>)
    2aee:	493c      	ldr	r1, [pc, #240]	; (2be0 <bt_init+0x5ec>)
    2af0:	4847      	ldr	r0, [pc, #284]	; (2c10 <bt_init+0x61c>)
    2af2:	e715      	b.n	2920 <bt_init+0x32c>
	rp.feat = (void *)rsp->data;
    2af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2af6:	4847      	ldr	r0, [pc, #284]	; (2c14 <bt_init+0x620>)
    2af8:	6899      	ldr	r1, [r3, #8]
    2afa:	2201      	movs	r2, #1
    2afc:	4411      	add	r1, r2
    2afe:	f7ff f88f 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2b02:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b04:	f00f ffe8 	bl	12ad8 <net_buf_unref>
    2b08:	e70b      	b.n	2922 <bt_init+0x32e>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2b0a:	4b43      	ldr	r3, [pc, #268]	; (2c18 <bt_init+0x624>)
    2b0c:	6818      	ldr	r0, [r3, #0]
    2b0e:	889a      	ldrh	r2, [r3, #4]
    2b10:	900a      	str	r0, [sp, #40]	; 0x28
    2b12:	799b      	ldrb	r3, [r3, #6]
    2b14:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2b18:	a90a      	add	r1, sp, #40	; 0x28
    2b1a:	2207      	movs	r2, #7
    2b1c:	483f      	ldr	r0, [pc, #252]	; (2c1c <bt_init+0x628>)
    2b1e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2b22:	f7ff f868 	bl	1bf6 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2b26:	2800      	cmp	r0, #0
    2b28:	f43f af07 	beq.w	293a <bt_init+0x346>
		bt_dev_show_info();
    2b2c:	f7ff fc50 	bl	23d0 <bt_dev_show_info>
		err = bt_conn_init();
    2b30:	f002 f810 	bl	4b54 <bt_conn_init>
		if (err) {
    2b34:	4604      	mov	r4, r0
    2b36:	2800      	cmp	r0, #0
    2b38:	f47f adf6 	bne.w	2728 <bt_init+0x134>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2b3c:	2102      	movs	r1, #2
    2b3e:	4838      	ldr	r0, [pc, #224]	; (2c20 <bt_init+0x62c>)
    2b40:	f7ff fa37 	bl	1fb2 <atomic_or>
	bt_le_scan_update(false);
    2b44:	4620      	mov	r0, r4
    2b46:	f7ff fd23 	bl	2590 <bt_le_scan_update>
    2b4a:	e5ed      	b.n	2728 <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2b4c:	aa09      	add	r2, sp, #36	; 0x24
    2b4e:	2100      	movs	r1, #0
    2b50:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2b54:	f7ff fb00 	bl	2158 <bt_hci_cmd_send_sync>
		if (err) {
    2b58:	b140      	cbz	r0, 2b6c <bt_init+0x578>
			BT_WARN("Failed to read static addresses");
    2b5a:	9601      	str	r6, [sp, #4]
    2b5c:	9600      	str	r6, [sp, #0]
    2b5e:	683c      	ldr	r4, [r7, #0]
    2b60:	4b30      	ldr	r3, [pc, #192]	; (2c24 <bt_init+0x630>)
    2b62:	4a23      	ldr	r2, [pc, #140]	; (2bf0 <bt_init+0x5fc>)
    2b64:	491e      	ldr	r1, [pc, #120]	; (2be0 <bt_init+0x5ec>)
    2b66:	4830      	ldr	r0, [pc, #192]	; (2c28 <bt_init+0x634>)
		BT_WARN("Read Static Addresses command not available");
    2b68:	47a0      	blx	r4
    2b6a:	e026      	b.n	2bba <bt_init+0x5c6>
		rp = (void *)rsp->data;
    2b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b6e:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2b70:	784b      	ldrb	r3, [r1, #1]
    2b72:	b1bb      	cbz	r3, 2ba4 <bt_init+0x5b0>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2b74:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2b76:	2206      	movs	r2, #6
    2b78:	3102      	adds	r1, #2
    2b7a:	482c      	ldr	r0, [pc, #176]	; (2c2c <bt_init+0x638>)
    2b7c:	702b      	strb	r3, [r5, #0]
    2b7e:	f7ff f84f 	bl	1c20 <memcpy>
			net_buf_unref(rsp);
    2b82:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b84:	f00f ffa8 	bl	12ad8 <net_buf_unref>
		return bt_set_static_addr();
    2b88:	f7ff fbf2 	bl	2370 <bt_set_static_addr>
    2b8c:	4604      	mov	r4, r0
		if (err) {
    2b8e:	2800      	cmp	r0, #0
    2b90:	d0cc      	beq.n	2b2c <bt_init+0x538>
			BT_ERR("Unable to set identity address");
    2b92:	9601      	str	r6, [sp, #4]
    2b94:	9600      	str	r6, [sp, #0]
    2b96:	683d      	ldr	r5, [r7, #0]
    2b98:	4b25      	ldr	r3, [pc, #148]	; (2c30 <bt_init+0x63c>)
    2b9a:	4a15      	ldr	r2, [pc, #84]	; (2bf0 <bt_init+0x5fc>)
    2b9c:	4910      	ldr	r1, [pc, #64]	; (2be0 <bt_init+0x5ec>)
    2b9e:	4825      	ldr	r0, [pc, #148]	; (2c34 <bt_init+0x640>)
    2ba0:	47a8      	blx	r5
    2ba2:	e5c1      	b.n	2728 <bt_init+0x134>
		BT_WARN("No static addresses stored in controller");
    2ba4:	9601      	str	r6, [sp, #4]
    2ba6:	9600      	str	r6, [sp, #0]
    2ba8:	4823      	ldr	r0, [pc, #140]	; (2c38 <bt_init+0x644>)
    2baa:	683c      	ldr	r4, [r7, #0]
    2bac:	4b1d      	ldr	r3, [pc, #116]	; (2c24 <bt_init+0x630>)
    2bae:	4a10      	ldr	r2, [pc, #64]	; (2bf0 <bt_init+0x5fc>)
    2bb0:	490b      	ldr	r1, [pc, #44]	; (2be0 <bt_init+0x5ec>)
    2bb2:	47a0      	blx	r4
		net_buf_unref(rsp);
    2bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
    2bb6:	f00f ff8f 	bl	12ad8 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2bba:	4818      	ldr	r0, [pc, #96]	; (2c1c <bt_init+0x628>)
    2bbc:	f7ff fbca 	bl	2354 <bt_addr_le_create_static>
		if (err) {
    2bc0:	4604      	mov	r4, r0
    2bc2:	2800      	cmp	r0, #0
    2bc4:	d1e5      	bne.n	2b92 <bt_init+0x59e>
		BT_WARN("Using temporary static random address %s",
    2bc6:	4819      	ldr	r0, [pc, #100]	; (2c2c <bt_init+0x638>)
    2bc8:	683c      	ldr	r4, [r7, #0]
    2bca:	f7ff f8af 	bl	1d2c <bt_addr_str>
    2bce:	9602      	str	r6, [sp, #8]
    2bd0:	9001      	str	r0, [sp, #4]
    2bd2:	9600      	str	r6, [sp, #0]
    2bd4:	4b13      	ldr	r3, [pc, #76]	; (2c24 <bt_init+0x630>)
    2bd6:	4a06      	ldr	r2, [pc, #24]	; (2bf0 <bt_init+0x5fc>)
    2bd8:	4901      	ldr	r1, [pc, #4]	; (2be0 <bt_init+0x5ec>)
    2bda:	4818      	ldr	r0, [pc, #96]	; (2c3c <bt_init+0x648>)
    2bdc:	47a0      	blx	r4
    2bde:	e7d3      	b.n	2b88 <bt_init+0x594>
    2be0:	00015639 	.word	0x00015639
    2be4:	000157d0 	.word	0x000157d0
    2be8:	000158c0 	.word	0x000158c0
    2bec:	00014f56 	.word	0x00014f56
    2bf0:	00014891 	.word	0x00014891
    2bf4:	0001511b 	.word	0x0001511b
    2bf8:	000157c4 	.word	0x000157c4
    2bfc:	00015144 	.word	0x00015144
    2c00:	000158b0 	.word	0x000158b0
    2c04:	0001516c 	.word	0x0001516c
    2c08:	000151a9 	.word	0x000151a9
    2c0c:	20003b07 	.word	0x20003b07
    2c10:	000151e2 	.word	0x000151e2
    2c14:	20003b06 	.word	0x20003b06
    2c18:	000147dc 	.word	0x000147dc
    2c1c:	20003aa8 	.word	0x20003aa8
    2c20:	20003b18 	.word	0x20003b18
    2c24:	00014f37 	.word	0x00014f37
    2c28:	0001521b 	.word	0x0001521b
    2c2c:	20003aa9 	.word	0x20003aa9
    2c30:	00014f62 	.word	0x00014f62
    2c34:	000152f9 	.word	0x000152f9
    2c38:	0001524b 	.word	0x0001524b
    2c3c:	000152c0 	.word	0x000152c0

00002c40 <init_work>:

static void init_work(struct k_work *work)
{
    2c40:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2c42:	f7ff fcd7 	bl	25f4 <bt_init>
	if (ready_cb) {
    2c46:	4b03      	ldr	r3, [pc, #12]	; (2c54 <init_work+0x14>)
    2c48:	681b      	ldr	r3, [r3, #0]
    2c4a:	b113      	cbz	r3, 2c52 <init_work+0x12>
		ready_cb(err);
	}
}
    2c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2c50:	4718      	bx	r3
    2c52:	bd10      	pop	{r4, pc}
    2c54:	200002d4 	.word	0x200002d4

00002c58 <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    2c58:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c5a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2c5c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c5e:	f242 0032 	movw	r0, #8242	; 0x2032
    2c62:	f7ff fa49 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2c66:	4605      	mov	r5, r0
    2c68:	b198      	cbz	r0, 2c92 <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2c6a:	2107      	movs	r1, #7
    2c6c:	3008      	adds	r0, #8
    2c6e:	f00f ff6b 	bl	12b48 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c72:	8823      	ldrh	r3, [r4, #0]
    2c74:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2c76:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c78:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2c7a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c7c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c7e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2c80:	7144      	strb	r4, [r0, #5]
    2c82:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2c84:	4629      	mov	r1, r5
    2c86:	f242 0032 	movw	r0, #8242	; 0x2032
    2c8a:	f7ff fbfb 	bl	2484 <bt_hci_cmd_send>
	return 0;
    2c8e:	4620      	mov	r0, r4
    2c90:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2c92:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2c96:	bd38      	pop	{r3, r4, r5, pc}

00002c98 <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c9a:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2c9c:	aa01      	add	r2, sp, #4
    2c9e:	2100      	movs	r1, #0
    2ca0:	f242 002f 	movw	r0, #8239	; 0x202f
    2ca4:	f7ff fa58 	bl	2158 <bt_hci_cmd_send_sync>
	if (err) {
    2ca8:	b9d8      	cbnz	r0, 2ce2 <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    2caa:	9801      	ldr	r0, [sp, #4]
    2cac:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2cae:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2cb2:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2cb6:	f00f ff0f 	bl	12ad8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2cba:	2106      	movs	r1, #6
    2cbc:	f242 0022 	movw	r0, #8226	; 0x2022
    2cc0:	f7ff fa1a 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2cc4:	4604      	mov	r4, r0
    2cc6:	b170      	cbz	r0, 2ce6 <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2cc8:	2106      	movs	r1, #6
    2cca:	3008      	adds	r0, #8
    2ccc:	f00f ff3c 	bl	12b48 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2cd0:	883b      	ldrh	r3, [r7, #0]
    2cd2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2cd4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2cd6:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2cd8:	4621      	mov	r1, r4
    2cda:	f242 0022 	movw	r0, #8226	; 0x2022
    2cde:	f7ff fbd1 	bl	2484 <bt_hci_cmd_send>
}
    2ce2:	b003      	add	sp, #12
    2ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2ce6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2cea:	e7fa      	b.n	2ce2 <hci_le_set_data_len.isra.29+0x4a>

00002cec <le_enh_conn_complete>:
{
    2cec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2cee:	7803      	ldrb	r3, [r0, #0]
{
    2cf0:	b089      	sub	sp, #36	; 0x24
    2cf2:	4605      	mov	r5, r0
	if (evt->status) {
    2cf4:	b17b      	cbz	r3, 2d16 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2cf6:	2102      	movs	r1, #2
    2cf8:	2000      	movs	r0, #0
    2cfa:	f001 fab1 	bl	4260 <bt_conn_lookup_state_le>
		if (!conn) {
    2cfe:	4604      	mov	r4, r0
    2d00:	b138      	cbz	r0, 2d12 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2d02:	782b      	ldrb	r3, [r5, #0]
    2d04:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2d06:	2100      	movs	r1, #0
    2d08:	f001 fb84 	bl	4414 <bt_conn_set_state>
		bt_conn_unref(conn);
    2d0c:	4620      	mov	r0, r4
    2d0e:	f001 fac5 	bl	429c <bt_conn_unref>
}
    2d12:	b009      	add	sp, #36	; 0x24
    2d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2d16:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d18:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2d1c:	4621      	mov	r1, r4
    2d1e:	a806      	add	r0, sp, #24
    2d20:	f7ff f944 	bl	1fac <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d24:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2d28:	3b02      	subs	r3, #2
    2d2a:	b2db      	uxtb	r3, r3
    2d2c:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d2e:	b2b7      	uxth	r7, r6
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d30:	d829      	bhi.n	2d86 <le_enh_conn_complete+0x9a>
    2d32:	2206      	movs	r2, #6
    2d34:	f105 0111 	add.w	r1, r5, #17
    2d38:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2d3c:	f88d 3018 	strb.w	r3, [sp, #24]
    2d40:	f7fe ff6e 	bl	1c20 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2d44:	2301      	movs	r3, #1
    2d46:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d4a:	2102      	movs	r1, #2
    2d4c:	a806      	add	r0, sp, #24
    2d4e:	f001 fa87 	bl	4260 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d52:	78eb      	ldrb	r3, [r5, #3]
    2d54:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d56:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d58:	d109      	bne.n	2d6e <le_enh_conn_complete+0x82>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d5a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2d5e:	484a      	ldr	r0, [pc, #296]	; (2e88 <le_enh_conn_complete+0x19c>)
    2d60:	f7ff f938 	bl	1fd4 <atomic_and>
		if (!conn) {
    2d64:	b9a4      	cbnz	r4, 2d90 <le_enh_conn_complete+0xa4>
			conn = bt_conn_add_le(&id_addr);
    2d66:	a806      	add	r0, sp, #24
    2d68:	f001 f9ce 	bl	4108 <bt_conn_add_le>
    2d6c:	4604      	mov	r4, r0
	if (!conn) {
    2d6e:	b97c      	cbnz	r4, 2d90 <le_enh_conn_complete+0xa4>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2d70:	4a46      	ldr	r2, [pc, #280]	; (2e8c <le_enh_conn_complete+0x1a0>)
    2d72:	4b47      	ldr	r3, [pc, #284]	; (2e90 <le_enh_conn_complete+0x1a4>)
    2d74:	9202      	str	r2, [sp, #8]
    2d76:	e88d 0084 	stmia.w	sp, {r2, r7}
    2d7a:	4946      	ldr	r1, [pc, #280]	; (2e94 <le_enh_conn_complete+0x1a8>)
    2d7c:	681c      	ldr	r4, [r3, #0]
    2d7e:	4846      	ldr	r0, [pc, #280]	; (2e98 <le_enh_conn_complete+0x1ac>)
    2d80:	4b46      	ldr	r3, [pc, #280]	; (2e9c <le_enh_conn_complete+0x1b0>)
    2d82:	47a0      	blx	r4
		return;
    2d84:	e7c5      	b.n	2d12 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2d86:	4621      	mov	r1, r4
    2d88:	a804      	add	r0, sp, #16
    2d8a:	f7ff f90f 	bl	1fac <bt_addr_le_copy>
    2d8e:	e7dc      	b.n	2d4a <le_enh_conn_complete+0x5e>
	conn->handle   = handle;
    2d90:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d92:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    2d94:	f820 6b4c 	strh.w	r6, [r0], #76
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d98:	f7ff f908 	bl	1fac <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2d9c:	7e2a      	ldrb	r2, [r5, #24]
    2d9e:	7deb      	ldrb	r3, [r5, #23]
    2da0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2da4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2da8:	7eaa      	ldrb	r2, [r5, #26]
    2daa:	7e6b      	ldrb	r3, [r5, #25]
    2dac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2db0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2db4:	7eeb      	ldrb	r3, [r5, #27]
    2db6:	7f2a      	ldrb	r2, [r5, #28]
    2db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2dbc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	conn->role = evt->role;
    2dc0:	78ee      	ldrb	r6, [r5, #3]
    2dc2:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2dc4:	2e01      	cmp	r6, #1
    2dc6:	d11a      	bne.n	2dfe <le_enh_conn_complete+0x112>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2dc8:	4f35      	ldr	r7, [pc, #212]	; (2ea0 <le_enh_conn_complete+0x1b4>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2dca:	a904      	add	r1, sp, #16
    2dcc:	f104 0053 	add.w	r0, r4, #83	; 0x53
    2dd0:	f7ff f8ec 	bl	1fac <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2dd4:	4639      	mov	r1, r7
    2dd6:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    2dda:	f7ff f8e7 	bl	1fac <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2dde:	2107      	movs	r1, #7
    2de0:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2de4:	f7ff f97a 	bl	20dc <atomic_test_bit>
    2de8:	b148      	cbz	r0, 2dfe <le_enh_conn_complete+0x112>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2dea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2dee:	2200      	movs	r2, #0
    2df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2df4:	4313      	orrs	r3, r2
    2df6:	d002      	beq.n	2dfe <le_enh_conn_complete+0x112>
			set_advertise_enable(true);
    2df8:	4630      	mov	r0, r6
    2dfa:	f7ff fa61 	bl	22c0 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2dfe:	2103      	movs	r1, #3
    2e00:	4620      	mov	r0, r4
    2e02:	f001 fb07 	bl	4414 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2e06:	7a63      	ldrb	r3, [r4, #9]
    2e08:	2b03      	cmp	r3, #3
    2e0a:	d118      	bne.n	2e3e <le_enh_conn_complete+0x152>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2e0c:	78eb      	ldrb	r3, [r5, #3]
    2e0e:	b123      	cbz	r3, 2e1a <le_enh_conn_complete+0x12e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2e10:	4b23      	ldr	r3, [pc, #140]	; (2ea0 <le_enh_conn_complete+0x1b4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2e12:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2e16:	0719      	lsls	r1, r3, #28
    2e18:	d518      	bpl.n	2e4c <le_enh_conn_complete+0x160>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2e1a:	2102      	movs	r1, #2
    2e1c:	f242 0016 	movw	r0, #8214	; 0x2016
    2e20:	f7ff f96a 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2e24:	4605      	mov	r5, r0
    2e26:	b188      	cbz	r0, 2e4c <le_enh_conn_complete+0x160>
	cp = net_buf_add(buf, sizeof(*cp));
    2e28:	2102      	movs	r1, #2
    2e2a:	3008      	adds	r0, #8
    2e2c:	f00f fe8c 	bl	12b48 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e30:	8823      	ldrh	r3, [r4, #0]
    2e32:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2e34:	4629      	mov	r1, r5
    2e36:	f242 0016 	movw	r0, #8214	; 0x2016
    2e3a:	f7ff fb23 	bl	2484 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    2e3e:	4620      	mov	r0, r4
    2e40:	f001 fa2c 	bl	429c <bt_conn_unref>
	bt_le_scan_update(false);
    2e44:	2000      	movs	r0, #0
    2e46:	f7ff fba3 	bl	2590 <bt_le_scan_update>
    2e4a:	e762      	b.n	2d12 <le_enh_conn_complete+0x26>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2e4c:	4d14      	ldr	r5, [pc, #80]	; (2ea0 <le_enh_conn_complete+0x1b4>)
    2e4e:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2e52:	07d2      	lsls	r2, r2, #31
    2e54:	d508      	bpl.n	2e68 <le_enh_conn_complete+0x17c>
		err = hci_le_set_phy(conn);
    2e56:	4620      	mov	r0, r4
    2e58:	f7ff fefe 	bl	2c58 <hci_le_set_phy.isra.28>
		if (!err) {
    2e5c:	b920      	cbnz	r0, 2e68 <le_enh_conn_complete+0x17c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e5e:	2180      	movs	r1, #128	; 0x80
    2e60:	1d20      	adds	r0, r4, #4
    2e62:	f7ff f8a6 	bl	1fb2 <atomic_or>
    2e66:	e7ea      	b.n	2e3e <le_enh_conn_complete+0x152>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2e68:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2e6c:	069b      	lsls	r3, r3, #26
    2e6e:	d506      	bpl.n	2e7e <le_enh_conn_complete+0x192>
		err = hci_le_set_data_len(conn);
    2e70:	4620      	mov	r0, r4
    2e72:	f7ff ff11 	bl	2c98 <hci_le_set_data_len.isra.29>
		if (!err) {
    2e76:	b910      	cbnz	r0, 2e7e <le_enh_conn_complete+0x192>
    2e78:	f44f 7180 	mov.w	r1, #256	; 0x100
    2e7c:	e7f0      	b.n	2e60 <le_enh_conn_complete+0x174>
	update_conn_param(conn);
    2e7e:	4620      	mov	r0, r4
    2e80:	f7ff f8ba 	bl	1ff8 <update_conn_param>
    2e84:	e7db      	b.n	2e3e <le_enh_conn_complete+0x152>
    2e86:	bf00      	nop
    2e88:	20003b18 	.word	0x20003b18
    2e8c:	00014891 	.word	0x00014891
    2e90:	20003aa4 	.word	0x20003aa4
    2e94:	00015639 	.word	0x00015639
    2e98:	0001576f 	.word	0x0001576f
    2e9c:	00014e4c 	.word	0x00014e4c
    2ea0:	20003aa8 	.word	0x20003aa8

00002ea4 <le_conn_param_neg_reply>:
{
    2ea4:	b570      	push	{r4, r5, r6, lr}
    2ea6:	4606      	mov	r6, r0
    2ea8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2eaa:	f242 0021 	movw	r0, #8225	; 0x2021
    2eae:	2103      	movs	r1, #3
    2eb0:	f7ff f922 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    2eb4:	4604      	mov	r4, r0
    2eb6:	b160      	cbz	r0, 2ed2 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2eb8:	2103      	movs	r1, #3
    2eba:	3008      	adds	r0, #8
    2ebc:	f00f fe44 	bl	12b48 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2ec0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2ec2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2ec4:	4621      	mov	r1, r4
    2ec6:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2ece:	f7ff bad9 	b.w	2484 <bt_hci_cmd_send>
}
    2ed2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2ed6:	bd70      	pop	{r4, r5, r6, pc}

00002ed8 <hci_tx_thread>:
{
    2ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2edc:	f8df a158 	ldr.w	sl, [pc, #344]	; 3038 <hci_tx_thread+0x160>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2ee0:	4d54      	ldr	r5, [pc, #336]	; (3034 <hci_tx_thread+0x15c>)
{
    2ee2:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
    2ee4:	f10a 0b14 	add.w	fp, sl, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    2ee8:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2eec:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
    2eee:	f36f 1307 	bfc	r3, #4, #4
    2ef2:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2ef6:	f001 fa19 	bl	432c <bt_conn_prepare_events>
    2efa:	f100 0901 	add.w	r9, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f02:	4649      	mov	r1, r9
    2f04:	484c      	ldr	r0, [pc, #304]	; (3038 <hci_tx_thread+0x160>)
    2f06:	f011 fb3b 	bl	14580 <_impl_k_poll>
		BT_ASSERT(err == 0);
    2f0a:	b930      	cbnz	r0, 2f1a <hci_tx_thread+0x42>
    2f0c:	4e4a      	ldr	r6, [pc, #296]	; (3038 <hci_tx_thread+0x160>)
	for (; count; ev++, count--) {
    2f0e:	f1b9 0f00 	cmp.w	r9, #0
    2f12:	d111      	bne.n	2f38 <hci_tx_thread+0x60>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2f14:	f010 fe7a 	bl	13c0c <_impl_k_yield>
    2f18:	e7e6      	b.n	2ee8 <hci_tx_thread+0x10>
		BT_ASSERT(err == 0);
    2f1a:	4a46      	ldr	r2, [pc, #280]	; (3034 <hci_tx_thread+0x15c>)
    2f1c:	4b47      	ldr	r3, [pc, #284]	; (303c <hci_tx_thread+0x164>)
    2f1e:	9201      	str	r2, [sp, #4]
    2f20:	9200      	str	r2, [sp, #0]
    2f22:	681c      	ldr	r4, [r3, #0]
    2f24:	4946      	ldr	r1, [pc, #280]	; (3040 <hci_tx_thread+0x168>)
    2f26:	4b47      	ldr	r3, [pc, #284]	; (3044 <hci_tx_thread+0x16c>)
    2f28:	4847      	ldr	r0, [pc, #284]	; (3048 <hci_tx_thread+0x170>)
	BT_ASSERT(buf);
    2f2a:	47a0      	blx	r4
    2f2c:	4040      	eors	r0, r0
    2f2e:	f380 8811 	msr	BASEPRI, r0
    2f32:	f04f 0004 	mov.w	r0, #4
    2f36:	df02      	svc	2
		switch (ev->state) {
    2f38:	7b73      	ldrb	r3, [r6, #13]
    2f3a:	091b      	lsrs	r3, r3, #4
    2f3c:	2b01      	cmp	r3, #1
    2f3e:	d95c      	bls.n	2ffa <hci_tx_thread+0x122>
    2f40:	2b04      	cmp	r3, #4
    2f42:	d16c      	bne.n	301e <hci_tx_thread+0x146>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2f44:	7b37      	ldrb	r7, [r6, #12]
    2f46:	2f00      	cmp	r7, #0
    2f48:	d15b      	bne.n	3002 <hci_tx_thread+0x12a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2f4a:	4639      	mov	r1, r7
    2f4c:	483f      	ldr	r0, [pc, #252]	; (304c <hci_tx_thread+0x174>)
    2f4e:	f00f fd99 	bl	12a84 <net_buf_get>
	BT_ASSERT(buf);
    2f52:	4680      	mov	r8, r0
    2f54:	b940      	cbnz	r0, 2f68 <hci_tx_thread+0x90>
    2f56:	4a37      	ldr	r2, [pc, #220]	; (3034 <hci_tx_thread+0x15c>)
    2f58:	4b38      	ldr	r3, [pc, #224]	; (303c <hci_tx_thread+0x164>)
    2f5a:	9201      	str	r2, [sp, #4]
    2f5c:	9200      	str	r2, [sp, #0]
    2f5e:	681c      	ldr	r4, [r3, #0]
    2f60:	4937      	ldr	r1, [pc, #220]	; (3040 <hci_tx_thread+0x168>)
    2f62:	4b3b      	ldr	r3, [pc, #236]	; (3050 <hci_tx_thread+0x178>)
    2f64:	483b      	ldr	r0, [pc, #236]	; (3054 <hci_tx_thread+0x17c>)
    2f66:	e7e0      	b.n	2f2a <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f6c:	483a      	ldr	r0, [pc, #232]	; (3058 <hci_tx_thread+0x180>)
    2f6e:	f010 fed9 	bl	13d24 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2f72:	4b3a      	ldr	r3, [pc, #232]	; (305c <hci_tx_thread+0x184>)
    2f74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2f78:	b18b      	cbz	r3, 2f9e <hci_tx_thread+0xc6>
		BT_ERR("Uncleared pending sent_cmd");
    2f7a:	4b30      	ldr	r3, [pc, #192]	; (303c <hci_tx_thread+0x164>)
    2f7c:	9501      	str	r5, [sp, #4]
    2f7e:	9500      	str	r5, [sp, #0]
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	4a2c      	ldr	r2, [pc, #176]	; (3034 <hci_tx_thread+0x15c>)
    2f84:	492e      	ldr	r1, [pc, #184]	; (3040 <hci_tx_thread+0x168>)
    2f86:	4836      	ldr	r0, [pc, #216]	; (3060 <hci_tx_thread+0x188>)
    2f88:	461c      	mov	r4, r3
    2f8a:	4b31      	ldr	r3, [pc, #196]	; (3050 <hci_tx_thread+0x178>)
    2f8c:	47a0      	blx	r4
		net_buf_unref(bt_dev.sent_cmd);
    2f8e:	4b33      	ldr	r3, [pc, #204]	; (305c <hci_tx_thread+0x184>)
    2f90:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    2f94:	f00f fda0 	bl	12ad8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f98:	4b30      	ldr	r3, [pc, #192]	; (305c <hci_tx_thread+0x184>)
    2f9a:	f8c3 70c4 	str.w	r7, [r3, #196]	; 0xc4
	bt_dev.sent_cmd = net_buf_ref(buf);
    2f9e:	4640      	mov	r0, r8
    2fa0:	f00f fdce 	bl	12b40 <net_buf_ref>
    2fa4:	4b2d      	ldr	r3, [pc, #180]	; (305c <hci_tx_thread+0x184>)
    2fa6:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
	err = bt_send(buf);
    2faa:	4640      	mov	r0, r8
    2fac:	f7ff fa62 	bl	2474 <bt_send>
	if (err) {
    2fb0:	b318      	cbz	r0, 2ffa <hci_tx_thread+0x122>
		BT_ERR("Unable to send to driver (err %d)", err);
    2fb2:	4b22      	ldr	r3, [pc, #136]	; (303c <hci_tx_thread+0x164>)
    2fb4:	9001      	str	r0, [sp, #4]
    2fb6:	9502      	str	r5, [sp, #8]
    2fb8:	9500      	str	r5, [sp, #0]
    2fba:	4a1e      	ldr	r2, [pc, #120]	; (3034 <hci_tx_thread+0x15c>)
    2fbc:	4920      	ldr	r1, [pc, #128]	; (3040 <hci_tx_thread+0x168>)
    2fbe:	681f      	ldr	r7, [r3, #0]
    2fc0:	4828      	ldr	r0, [pc, #160]	; (3064 <hci_tx_thread+0x18c>)
    2fc2:	4b23      	ldr	r3, [pc, #140]	; (3050 <hci_tx_thread+0x178>)
    2fc4:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2fc6:	4824      	ldr	r0, [pc, #144]	; (3058 <hci_tx_thread+0x180>)
    2fc8:	f010 fe84 	bl	13cd4 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2fcc:	4640      	mov	r0, r8
    2fce:	f00f fcb9 	bl	12944 <net_buf_id>
    2fd2:	4b25      	ldr	r3, [pc, #148]	; (3068 <hci_tx_thread+0x190>)
    2fd4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2fd8:	2200      	movs	r2, #0
    2fda:	211f      	movs	r1, #31
    2fdc:	8840      	ldrh	r0, [r0, #2]
    2fde:	f7ff f819 	bl	2014 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2fe2:	4b1e      	ldr	r3, [pc, #120]	; (305c <hci_tx_thread+0x184>)
    2fe4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    2fe8:	f00f fd76 	bl	12ad8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2fec:	4a1b      	ldr	r2, [pc, #108]	; (305c <hci_tx_thread+0x184>)
    2fee:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2ff0:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    2ff2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		net_buf_unref(buf);
    2ff6:	f00f fd6f 	bl	12ad8 <net_buf_unref>
	for (; count; ev++, count--) {
    2ffa:	3614      	adds	r6, #20
    2ffc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    3000:	e785      	b.n	2f0e <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3002:	2f01      	cmp	r7, #1
    3004:	d104      	bne.n	3010 <hci_tx_thread+0x138>
					conn = CONTAINER_OF(ev->fifo,
    3006:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    3008:	3818      	subs	r0, #24
    300a:	f000 ff77 	bl	3efc <bt_conn_notify_tx>
    300e:	e7f4      	b.n	2ffa <hci_tx_thread+0x122>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3010:	2f02      	cmp	r7, #2
    3012:	d1f2      	bne.n	2ffa <hci_tx_thread+0x122>
					conn = CONTAINER_OF(ev->fifo,
    3014:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    3016:	382c      	subs	r0, #44	; 0x2c
    3018:	f001 fce6 	bl	49e8 <bt_conn_process_tx>
    301c:	e7ed      	b.n	2ffa <hci_tx_thread+0x122>
		switch (ev->state) {
    301e:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3020:	4b06      	ldr	r3, [pc, #24]	; (303c <hci_tx_thread+0x164>)
    3022:	9502      	str	r5, [sp, #8]
    3024:	9500      	str	r5, [sp, #0]
    3026:	681f      	ldr	r7, [r3, #0]
    3028:	4a02      	ldr	r2, [pc, #8]	; (3034 <hci_tx_thread+0x15c>)
    302a:	4b10      	ldr	r3, [pc, #64]	; (306c <hci_tx_thread+0x194>)
    302c:	4904      	ldr	r1, [pc, #16]	; (3040 <hci_tx_thread+0x168>)
    302e:	4810      	ldr	r0, [pc, #64]	; (3070 <hci_tx_thread+0x198>)
    3030:	47b8      	blx	r7
    3032:	e7e2      	b.n	2ffa <hci_tx_thread+0x122>
    3034:	00014891 	.word	0x00014891
    3038:	20003b88 	.word	0x20003b88
    303c:	20003aa4 	.word	0x20003aa4
    3040:	00015639 	.word	0x00015639
    3044:	00014f0e 	.word	0x00014f0e
    3048:	000156c4 	.word	0x000156c4
    304c:	20003b70 	.word	0x20003b70
    3050:	00014ef6 	.word	0x00014ef6
    3054:	000156ee 	.word	0x000156ee
    3058:	20003b50 	.word	0x20003b50
    305c:	20003aa8 	.word	0x20003aa8
    3060:	00015713 	.word	0x00015713
    3064:	00015081 	.word	0x00015081
    3068:	2000027c 	.word	0x2000027c
    306c:	00014eff 	.word	0x00014eff
    3070:	0001573e 	.word	0x0001573e

00003074 <bt_recv>:
{
    3074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    3078:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    307a:	2b01      	cmp	r3, #1
{
    307c:	b095      	sub	sp, #84	; 0x54
    307e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3080:	d03f      	beq.n	3102 <bt_recv+0x8e>
    3082:	2b03      	cmp	r3, #3
    3084:	f040 833f 	bne.w	3706 <bt_recv+0x692>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3088:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    308a:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    308c:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    308e:	f3c6 030b 	ubfx	r3, r6, #0, #12
    3092:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3094:	23ff      	movs	r3, #255	; 0xff
    3096:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3098:	2104      	movs	r1, #4
    309a:	3008      	adds	r0, #8
    309c:	f00f fd73 	bl	12b86 <net_buf_simple_pull>
	if (buf->len != len) {
    30a0:	89a3      	ldrh	r3, [r4, #12]
    30a2:	429d      	cmp	r5, r3
    30a4:	d00d      	beq.n	30c2 <bt_recv+0x4e>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    30a6:	4aa1      	ldr	r2, [pc, #644]	; (332c <bt_recv+0x2b8>)
    30a8:	9203      	str	r2, [sp, #12]
    30aa:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
    30ae:	4ba0      	ldr	r3, [pc, #640]	; (3330 <bt_recv+0x2bc>)
    30b0:	49a0      	ldr	r1, [pc, #640]	; (3334 <bt_recv+0x2c0>)
    30b2:	681d      	ldr	r5, [r3, #0]
    30b4:	48a0      	ldr	r0, [pc, #640]	; (3338 <bt_recv+0x2c4>)
    30b6:	4ba1      	ldr	r3, [pc, #644]	; (333c <bt_recv+0x2c8>)
    30b8:	47a8      	blx	r5
	net_buf_unref(buf);
    30ba:	4620      	mov	r0, r4
    30bc:	f00f fd0c 	bl	12ad8 <net_buf_unref>
    30c0:	e01b      	b.n	30fa <bt_recv+0x86>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    30c2:	8ae0      	ldrh	r0, [r4, #22]
    30c4:	f001 f89c 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    30c8:	4605      	mov	r5, r0
    30ca:	b958      	cbnz	r0, 30e4 <bt_recv+0x70>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    30cc:	4a97      	ldr	r2, [pc, #604]	; (332c <bt_recv+0x2b8>)
    30ce:	9202      	str	r2, [sp, #8]
    30d0:	8ae3      	ldrh	r3, [r4, #22]
    30d2:	4998      	ldr	r1, [pc, #608]	; (3334 <bt_recv+0x2c0>)
    30d4:	489a      	ldr	r0, [pc, #616]	; (3340 <bt_recv+0x2cc>)
    30d6:	e88d 000c 	stmia.w	sp, {r2, r3}
    30da:	4b95      	ldr	r3, [pc, #596]	; (3330 <bt_recv+0x2bc>)
    30dc:	681e      	ldr	r6, [r3, #0]
    30de:	4b97      	ldr	r3, [pc, #604]	; (333c <bt_recv+0x2c8>)
    30e0:	47b0      	blx	r6
    30e2:	e7ea      	b.n	30ba <bt_recv+0x46>
	acl(buf)->id = bt_conn_get_id(conn);
    30e4:	f001 fd2a 	bl	4b3c <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    30e8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    30ea:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    30ec:	4621      	mov	r1, r4
    30ee:	4628      	mov	r0, r5
    30f0:	f000 fdbc 	bl	3c6c <bt_conn_recv>
	bt_conn_unref(conn);
    30f4:	4628      	mov	r0, r5
    30f6:	f001 f8d1 	bl	429c <bt_conn_unref>
		return 0;
    30fa:	2000      	movs	r0, #0
}
    30fc:	b015      	add	sp, #84	; 0x54
    30fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3102:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    3104:	7832      	ldrb	r2, [r6, #0]
    3106:	2a13      	cmp	r2, #19
    3108:	f200 830d 	bhi.w	3726 <bt_recv+0x6b2>
    310c:	4093      	lsls	r3, r2
    310e:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3112:	f000 8308 	beq.w	3726 <bt_recv+0x6b2>
    3116:	4a85      	ldr	r2, [pc, #532]	; (332c <bt_recv+0x2b8>)
    3118:	4b85      	ldr	r3, [pc, #532]	; (3330 <bt_recv+0x2bc>)
    311a:	9201      	str	r2, [sp, #4]
    311c:	9200      	str	r2, [sp, #0]
    311e:	681c      	ldr	r4, [r3, #0]
    3120:	4984      	ldr	r1, [pc, #528]	; (3334 <bt_recv+0x2c0>)
    3122:	4b88      	ldr	r3, [pc, #544]	; (3344 <bt_recv+0x2d0>)
    3124:	4888      	ldr	r0, [pc, #544]	; (3348 <bt_recv+0x2d4>)
    3126:	47a0      	blx	r4
    3128:	4040      	eors	r0, r0
    312a:	f380 8811 	msr	BASEPRI, r0
    312e:	f04f 0004 	mov.w	r0, #4
    3132:	df02      	svc	2
    3134:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    3136:	783e      	ldrb	r6, [r7, #0]
    3138:	2e00      	cmp	r6, #0
    313a:	d1be      	bne.n	30ba <bt_recv+0x46>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    313c:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3140:	4640      	mov	r0, r8
    3142:	f001 f85d 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    3146:	4605      	mov	r5, r0
    3148:	b9c8      	cbnz	r0, 317e <bt_recv+0x10a>
		BT_ERR("Unable to look up conn with handle %u", handle);
    314a:	4a78      	ldr	r2, [pc, #480]	; (332c <bt_recv+0x2b8>)
    314c:	4b78      	ldr	r3, [pc, #480]	; (3330 <bt_recv+0x2bc>)
    314e:	9202      	str	r2, [sp, #8]
    3150:	e88d 0104 	stmia.w	sp, {r2, r8}
    3154:	4977      	ldr	r1, [pc, #476]	; (3334 <bt_recv+0x2c0>)
    3156:	681d      	ldr	r5, [r3, #0]
    3158:	487c      	ldr	r0, [pc, #496]	; (334c <bt_recv+0x2d8>)
    315a:	4b7d      	ldr	r3, [pc, #500]	; (3350 <bt_recv+0x2dc>)
    315c:	47a8      	blx	r5
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    315e:	2107      	movs	r1, #7
    3160:	487c      	ldr	r0, [pc, #496]	; (3354 <bt_recv+0x2e0>)
    3162:	f7fe ffbb 	bl	20dc <atomic_test_bit>
    3166:	2800      	cmp	r0, #0
    3168:	d0a7      	beq.n	30ba <bt_recv+0x46>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    316a:	2106      	movs	r1, #6
    316c:	4879      	ldr	r0, [pc, #484]	; (3354 <bt_recv+0x2e0>)
    316e:	f7fe ffb5 	bl	20dc <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3172:	2800      	cmp	r0, #0
    3174:	d1a1      	bne.n	30ba <bt_recv+0x46>
		set_advertise_enable(true);
    3176:	2001      	movs	r0, #1
    3178:	f7ff f8a2 	bl	22c0 <set_advertise_enable>
    317c:	e79d      	b.n	30ba <bt_recv+0x46>
	conn->err = evt->reason;
    317e:	78fb      	ldrb	r3, [r7, #3]
    3180:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3182:	4975      	ldr	r1, [pc, #468]	; (3358 <bt_recv+0x2e4>)
    3184:	4875      	ldr	r0, [pc, #468]	; (335c <bt_recv+0x2e8>)
    3186:	f010 ff55 	bl	14034 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    318a:	4631      	mov	r1, r6
    318c:	4628      	mov	r0, r5
    318e:	f001 f941 	bl	4414 <bt_conn_set_state>
	conn->handle = 0;
    3192:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    3194:	78ae      	ldrb	r6, [r5, #2]
    3196:	b10e      	cbz	r6, 319c <bt_recv+0x128>
	bt_conn_unref(conn);
    3198:	4628      	mov	r0, r5
    319a:	e088      	b.n	32ae <bt_recv+0x23a>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    319c:	4631      	mov	r1, r6
    319e:	1d28      	adds	r0, r5, #4
    31a0:	f7fe ff9c 	bl	20dc <atomic_test_bit>
    31a4:	b130      	cbz	r0, 31b4 <bt_recv+0x140>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    31a6:	4628      	mov	r0, r5
    31a8:	2101      	movs	r1, #1
    31aa:	f001 f933 	bl	4414 <bt_conn_set_state>
		bt_le_scan_update(false);
    31ae:	4630      	mov	r0, r6
    31b0:	f7ff f9ee 	bl	2590 <bt_le_scan_update>
	bt_conn_unref(conn);
    31b4:	4628      	mov	r0, r5
    31b6:	f001 f871 	bl	429c <bt_conn_unref>
    31ba:	e7d0      	b.n	315e <bt_recv+0xea>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    31bc:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    31be:	2101      	movs	r1, #1
    31c0:	4628      	mov	r0, r5
    31c2:	f00f fce0 	bl	12b86 <net_buf_simple_pull>
	switch (evt->subevent) {
    31c6:	7836      	ldrb	r6, [r6, #0]
    31c8:	1e73      	subs	r3, r6, #1
    31ca:	2b0b      	cmp	r3, #11
    31cc:	f200 8289 	bhi.w	36e2 <bt_recv+0x66e>
    31d0:	e8df f013 	tbh	[pc, r3, lsl #1]
    31d4:	01a0000c 	.word	0x01a0000c
    31d8:	00700043 	.word	0x00700043
    31dc:	00ce0287 	.word	0x00ce0287
    31e0:	0171012b 	.word	0x0171012b
    31e4:	00410191 	.word	0x00410191
    31e8:	01460287 	.word	0x01460287
    31ec:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    31ee:	780b      	ldrb	r3, [r1, #0]
    31f0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    31f4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    31f8:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    31fc:	78cb      	ldrb	r3, [r1, #3]
    31fe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    3202:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    3206:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    320a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    320e:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    3212:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    3216:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	enh.clock_accuracy = evt->clock_accuracy;
    321a:	7c4b      	ldrb	r3, [r1, #17]
    321c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    3220:	3104      	adds	r1, #4
    3222:	a80d      	add	r0, sp, #52	; 0x34
    3224:	f7fe fec2 	bl	1fac <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    3228:	2500      	movs	r5, #0
    322a:	2206      	movs	r2, #6
    322c:	a908      	add	r1, sp, #32
    322e:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    3232:	9508      	str	r5, [sp, #32]
    3234:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    3238:	f7fe fcf2 	bl	1c20 <memcpy>
    323c:	2206      	movs	r2, #6
    323e:	a90a      	add	r1, sp, #40	; 0x28
    3240:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    3244:	950a      	str	r5, [sp, #40]	; 0x28
    3246:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    324a:	f7fe fce9 	bl	1c20 <memcpy>
	le_enh_conn_complete(&enh);
    324e:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    3250:	f7ff fd4c 	bl	2cec <le_enh_conn_complete>
    3254:	e731      	b.n	30ba <bt_recv+0x46>
    3256:	68a0      	ldr	r0, [r4, #8]
    3258:	e7fa      	b.n	3250 <bt_recv+0x1dc>
    325a:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    325c:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3260:	4638      	mov	r0, r7
    3262:	f000 ffcd 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    3266:	4606      	mov	r6, r0
    3268:	b950      	cbnz	r0, 3280 <bt_recv+0x20c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    326a:	4a30      	ldr	r2, [pc, #192]	; (332c <bt_recv+0x2b8>)
    326c:	4b30      	ldr	r3, [pc, #192]	; (3330 <bt_recv+0x2bc>)
    326e:	9202      	str	r2, [sp, #8]
    3270:	e88d 0084 	stmia.w	sp, {r2, r7}
    3274:	681d      	ldr	r5, [r3, #0]
    3276:	4b3a      	ldr	r3, [pc, #232]	; (3360 <bt_recv+0x2ec>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3278:	492e      	ldr	r1, [pc, #184]	; (3334 <bt_recv+0x2c0>)
    327a:	483a      	ldr	r0, [pc, #232]	; (3364 <bt_recv+0x2f0>)
    327c:	47a8      	blx	r5
    327e:	e71c      	b.n	30ba <bt_recv+0x46>
	if (!evt->status) {
    3280:	782b      	ldrb	r3, [r5, #0]
    3282:	b99b      	cbnz	r3, 32ac <bt_recv+0x238>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3284:	792a      	ldrb	r2, [r5, #4]
    3286:	78eb      	ldrb	r3, [r5, #3]
    3288:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    328c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3290:	79aa      	ldrb	r2, [r5, #6]
    3292:	796b      	ldrb	r3, [r5, #5]
    3294:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3298:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    329c:	79eb      	ldrb	r3, [r5, #7]
    329e:	7a2a      	ldrb	r2, [r5, #8]
    32a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    32a4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		notify_le_param_updated(conn);
    32a8:	f000 fca4 	bl	3bf4 <notify_le_param_updated>
	bt_conn_unref(conn);
    32ac:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    32ae:	f000 fff5 	bl	429c <bt_conn_unref>
    32b2:	e702      	b.n	30ba <bt_recv+0x46>
    32b4:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    32b6:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    32ba:	4638      	mov	r0, r7
    32bc:	f000 ffa0 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    32c0:	4605      	mov	r5, r0
    32c2:	b938      	cbnz	r0, 32d4 <bt_recv+0x260>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    32c4:	4a19      	ldr	r2, [pc, #100]	; (332c <bt_recv+0x2b8>)
    32c6:	4b1a      	ldr	r3, [pc, #104]	; (3330 <bt_recv+0x2bc>)
    32c8:	9202      	str	r2, [sp, #8]
    32ca:	e88d 0084 	stmia.w	sp, {r2, r7}
    32ce:	681d      	ldr	r5, [r3, #0]
    32d0:	4b25      	ldr	r3, [pc, #148]	; (3368 <bt_recv+0x2f4>)
    32d2:	e7d1      	b.n	3278 <bt_recv+0x204>
	if (!evt->status) {
    32d4:	7833      	ldrb	r3, [r6, #0]
    32d6:	b923      	cbnz	r3, 32e2 <bt_recv+0x26e>
		memcpy(conn->le.features, evt->features,
    32d8:	2208      	movs	r2, #8
    32da:	1cf1      	adds	r1, r6, #3
    32dc:	306c      	adds	r0, #108	; 0x6c
    32de:	f7fe fc9f 	bl	1c20 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    32e2:	4e22      	ldr	r6, [pc, #136]	; (336c <bt_recv+0x2f8>)
    32e4:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    32e8:	07d2      	lsls	r2, r2, #31
    32ea:	d50c      	bpl.n	3306 <bt_recv+0x292>
    32ec:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
    32f0:	07db      	lsls	r3, r3, #31
    32f2:	d508      	bpl.n	3306 <bt_recv+0x292>
		err = hci_le_set_phy(conn);
    32f4:	4628      	mov	r0, r5
    32f6:	f7ff fcaf 	bl	2c58 <hci_le_set_phy.isra.28>
		if (!err) {
    32fa:	b920      	cbnz	r0, 3306 <bt_recv+0x292>
    32fc:	2180      	movs	r1, #128	; 0x80
    32fe:	1d28      	adds	r0, r5, #4
    3300:	f7fe fe57 	bl	1fb2 <atomic_or>
    3304:	e748      	b.n	3198 <bt_recv+0x124>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3306:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    330a:	069f      	lsls	r7, r3, #26
    330c:	f140 80a4 	bpl.w	3458 <bt_recv+0x3e4>
    3310:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    3314:	069e      	lsls	r6, r3, #26
    3316:	f140 809f 	bpl.w	3458 <bt_recv+0x3e4>
		err = hci_le_set_data_len(conn);
    331a:	4628      	mov	r0, r5
    331c:	f7ff fcbc 	bl	2c98 <hci_le_set_data_len.isra.29>
		if (!err) {
    3320:	2800      	cmp	r0, #0
    3322:	f040 8099 	bne.w	3458 <bt_recv+0x3e4>
    3326:	f44f 7180 	mov.w	r1, #256	; 0x100
    332a:	e7e8      	b.n	32fe <bt_recv+0x28a>
    332c:	00014891 	.word	0x00014891
    3330:	20003aa4 	.word	0x20003aa4
    3334:	00015639 	.word	0x00015639
    3338:	00015328 	.word	0x00015328
    333c:	00014e15 	.word	0x00014e15
    3340:	0001535c 	.word	0x0001535c
    3344:	00014eec 	.word	0x00014eec
    3348:	00015487 	.word	0x00015487
    334c:	0001538e 	.word	0x0001538e
    3350:	00014e37 	.word	0x00014e37
    3354:	20003b18 	.word	0x20003b18
    3358:	000153c4 	.word	0x000153c4
    335c:	00001f71 	.word	0x00001f71
    3360:	00014eb5 	.word	0x00014eb5
    3364:	000153c8 	.word	0x000153c8
    3368:	00014e61 	.word	0x00014e61
    336c:	20003aa8 	.word	0x20003aa8
    3370:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3372:	78d9      	ldrb	r1, [r3, #3]
    3374:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    3376:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3378:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    337c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3380:	7959      	ldrb	r1, [r3, #5]
    3382:	791a      	ldrb	r2, [r3, #4]
    3384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3388:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    338c:	799a      	ldrb	r2, [r3, #6]
    338e:	79d9      	ldrb	r1, [r3, #7]
    3390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3394:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3398:	7a1a      	ldrb	r2, [r3, #8]
    339a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    339c:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    339e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    33a2:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    33a4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    33a8:	f000 ff2a 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    33ac:	4680      	mov	r8, r0
    33ae:	b970      	cbnz	r0, 33ce <bt_recv+0x35a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    33b0:	4ab4      	ldr	r2, [pc, #720]	; (3684 <bt_recv+0x610>)
    33b2:	4bb5      	ldr	r3, [pc, #724]	; (3688 <bt_recv+0x614>)
    33b4:	9202      	str	r2, [sp, #8]
    33b6:	e88d 0024 	stmia.w	sp, {r2, r5}
    33ba:	49b4      	ldr	r1, [pc, #720]	; (368c <bt_recv+0x618>)
    33bc:	681e      	ldr	r6, [r3, #0]
    33be:	48b4      	ldr	r0, [pc, #720]	; (3690 <bt_recv+0x61c>)
    33c0:	4bb4      	ldr	r3, [pc, #720]	; (3694 <bt_recv+0x620>)
    33c2:	47b0      	blx	r6
		return le_conn_param_neg_reply(handle,
    33c4:	2102      	movs	r1, #2
    33c6:	4628      	mov	r0, r5
    33c8:	f7ff fd6c 	bl	2ea4 <le_conn_param_neg_reply>
    33cc:	e675      	b.n	30ba <bt_recv+0x46>
	if (!le_param_req(conn, &param)) {
    33ce:	a90c      	add	r1, sp, #48	; 0x30
    33d0:	f000 fc24 	bl	3c1c <le_param_req>
    33d4:	b928      	cbnz	r0, 33e2 <bt_recv+0x36e>
		err = le_conn_param_neg_reply(handle,
    33d6:	211e      	movs	r1, #30
    33d8:	4628      	mov	r0, r5
    33da:	f7ff fd63 	bl	2ea4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    33de:	4640      	mov	r0, r8
    33e0:	e765      	b.n	32ae <bt_recv+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    33e2:	210e      	movs	r1, #14
    33e4:	f242 0020 	movw	r0, #8224	; 0x2020
    33e8:	f7fe fe86 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    33ec:	4606      	mov	r6, r0
    33ee:	2800      	cmp	r0, #0
    33f0:	d0f5      	beq.n	33de <bt_recv+0x36a>
	cp = net_buf_add(buf, sizeof(*cp));
    33f2:	210e      	movs	r1, #14
    33f4:	3008      	adds	r0, #8
    33f6:	f00f fba7 	bl	12b48 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    33fa:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    33fc:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    33fe:	2100      	movs	r1, #0
    3400:	f7fe fc3a 	bl	1c78 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3404:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3408:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    340a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    340e:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3410:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    3414:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3416:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    341a:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    341c:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    341e:	4631      	mov	r1, r6
    3420:	f242 0020 	movw	r0, #8224	; 0x2020
    3424:	f7ff f82e 	bl	2484 <bt_hci_cmd_send>
    3428:	e7d9      	b.n	33de <bt_recv+0x36a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    342a:	68a3      	ldr	r3, [r4, #8]
    342c:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    342e:	4630      	mov	r0, r6
    3430:	f000 fee6 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    3434:	4605      	mov	r5, r0
    3436:	b938      	cbnz	r0, 3448 <bt_recv+0x3d4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3438:	4a92      	ldr	r2, [pc, #584]	; (3684 <bt_recv+0x610>)
    343a:	4b93      	ldr	r3, [pc, #588]	; (3688 <bt_recv+0x614>)
    343c:	9202      	str	r2, [sp, #8]
    343e:	e88d 0044 	stmia.w	sp, {r2, r6}
    3442:	681d      	ldr	r5, [r3, #0]
    3444:	4b94      	ldr	r3, [pc, #592]	; (3698 <bt_recv+0x624>)
    3446:	e717      	b.n	3278 <bt_recv+0x204>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3448:	f46f 7180 	mvn.w	r1, #256	; 0x100
    344c:	3004      	adds	r0, #4
    344e:	f7fe fdc1 	bl	1fd4 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3452:	05c0      	lsls	r0, r0, #23
    3454:	f57f aea0 	bpl.w	3198 <bt_recv+0x124>
	update_conn_param(conn);
    3458:	4628      	mov	r0, r5
    345a:	f7fe fdcd 	bl	1ff8 <update_conn_param>
    345e:	e69b      	b.n	3198 <bt_recv+0x124>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3460:	68a3      	ldr	r3, [r4, #8]
    3462:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    3466:	4630      	mov	r0, r6
    3468:	f000 feca 	bl	4200 <bt_conn_lookup_handle>
	if (!conn) {
    346c:	4605      	mov	r5, r0
    346e:	b938      	cbnz	r0, 3480 <bt_recv+0x40c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3470:	4a84      	ldr	r2, [pc, #528]	; (3684 <bt_recv+0x610>)
    3472:	4b85      	ldr	r3, [pc, #532]	; (3688 <bt_recv+0x614>)
    3474:	9202      	str	r2, [sp, #8]
    3476:	e88d 0044 	stmia.w	sp, {r2, r6}
    347a:	681d      	ldr	r5, [r3, #0]
    347c:	4b87      	ldr	r3, [pc, #540]	; (369c <bt_recv+0x628>)
    347e:	e6fb      	b.n	3278 <bt_recv+0x204>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3480:	1d06      	adds	r6, r0, #4
    3482:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3486:	4630      	mov	r0, r6
    3488:	f7fe fda4 	bl	1fd4 <atomic_and>
    348c:	0601      	lsls	r1, r0, #24
    348e:	f57f ae83 	bpl.w	3198 <bt_recv+0x124>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3492:	4b83      	ldr	r3, [pc, #524]	; (36a0 <bt_recv+0x62c>)
    3494:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3498:	069a      	lsls	r2, r3, #26
    349a:	d5dd      	bpl.n	3458 <bt_recv+0x3e4>
    349c:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    34a0:	069b      	lsls	r3, r3, #26
    34a2:	d5d9      	bpl.n	3458 <bt_recv+0x3e4>
		err = hci_le_set_data_len(conn);
    34a4:	4628      	mov	r0, r5
    34a6:	f7ff fbf7 	bl	2c98 <hci_le_set_data_len.isra.29>
		if (!err) {
    34aa:	2800      	cmp	r0, #0
    34ac:	d1d4      	bne.n	3458 <bt_recv+0x3e4>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    34ae:	f44f 7180 	mov.w	r1, #256	; 0x100
    34b2:	4630      	mov	r0, r6
    34b4:	e724      	b.n	3300 <bt_recv+0x28c>
    34b6:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    34b8:	487a      	ldr	r0, [pc, #488]	; (36a4 <bt_recv+0x630>)
    34ba:	f06f 0120 	mvn.w	r1, #32
    34be:	f7fe fd89 	bl	1fd4 <atomic_and>
	if (!evt->status) {
    34c2:	7833      	ldrb	r3, [r6, #0]
    34c4:	b943      	cbnz	r3, 34d8 <bt_recv+0x464>
		memcpy(pub_key, evt->key, 64);
    34c6:	1c71      	adds	r1, r6, #1
    34c8:	2240      	movs	r2, #64	; 0x40
    34ca:	4877      	ldr	r0, [pc, #476]	; (36a8 <bt_recv+0x634>)
    34cc:	f7fe fba8 	bl	1c20 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    34d0:	2110      	movs	r1, #16
    34d2:	4874      	ldr	r0, [pc, #464]	; (36a4 <bt_recv+0x630>)
    34d4:	f7fe fd6d 	bl	1fb2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    34d8:	4b74      	ldr	r3, [pc, #464]	; (36ac <bt_recv+0x638>)
    34da:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    34dc:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    34de:	2d00      	cmp	r5, #0
    34e0:	f43f adeb 	beq.w	30ba <bt_recv+0x46>
		cb->func(evt->status ? NULL : evt->key);
    34e4:	7832      	ldrb	r2, [r6, #0]
    34e6:	682b      	ldr	r3, [r5, #0]
    34e8:	2a00      	cmp	r2, #0
    34ea:	bf0c      	ite	eq
    34ec:	4638      	moveq	r0, r7
    34ee:	2000      	movne	r0, #0
    34f0:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    34f2:	686d      	ldr	r5, [r5, #4]
    34f4:	e7f3      	b.n	34de <bt_recv+0x46a>
	if (dh_key_cb) {
    34f6:	4d6e      	ldr	r5, [pc, #440]	; (36b0 <bt_recv+0x63c>)
    34f8:	68a0      	ldr	r0, [r4, #8]
    34fa:	682a      	ldr	r2, [r5, #0]
    34fc:	2a00      	cmp	r2, #0
    34fe:	f43f addc 	beq.w	30ba <bt_recv+0x46>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3502:	7803      	ldrb	r3, [r0, #0]
    3504:	b923      	cbnz	r3, 3510 <bt_recv+0x49c>
    3506:	3001      	adds	r0, #1
    3508:	4790      	blx	r2
		dh_key_cb = NULL;
    350a:	2300      	movs	r3, #0
    350c:	602b      	str	r3, [r5, #0]
    350e:	e5d4      	b.n	30ba <bt_recv+0x46>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3510:	2000      	movs	r0, #0
    3512:	e7f9      	b.n	3508 <bt_recv+0x494>
	u8_t num_reports = net_buf_pull_u8(buf);
    3514:	4628      	mov	r0, r5
    3516:	f00f fb3e 	bl	12b96 <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    351a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 36a4 <bt_recv+0x630>
	u8_t num_reports = net_buf_pull_u8(buf);
    351e:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    3520:	9b06      	ldr	r3, [sp, #24]
    3522:	2b00      	cmp	r3, #0
    3524:	f43f adc9 	beq.w	30ba <bt_recv+0x46>
		info = (void *)buf->data;
    3528:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    352a:	2109      	movs	r1, #9
    352c:	4628      	mov	r0, r5
    352e:	f00f fb2a 	bl	12b86 <net_buf_simple_pull>
		rssi = info->data[info->length];
    3532:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3534:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    3536:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    3538:	a80c      	add	r0, sp, #48	; 0x30
		rssi = info->data[info->length];
    353a:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    353e:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    3542:	3b02      	subs	r3, #2
    3544:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3546:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3548:	f200 8099 	bhi.w	367e <bt_recv+0x60a>
			bt_addr_le_copy(&id_addr, &info->addr);
    354c:	f7fe fd2e 	bl	1fac <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3550:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3554:	3b02      	subs	r3, #2
    3556:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    355a:	4b56      	ldr	r3, [pc, #344]	; (36b4 <bt_recv+0x640>)
    355c:	681b      	ldr	r3, [r3, #0]
    355e:	b1bb      	cbz	r3, 3590 <bt_recv+0x51c>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3560:	4628      	mov	r0, r5
    3562:	f00f fb28 	bl	12bb6 <net_buf_simple_headroom>
	state->len = buf->len;
    3566:	89a3      	ldrh	r3, [r4, #12]
    3568:	9307      	str	r3, [sp, #28]
			buf->len = info->length;
    356a:	7a33      	ldrb	r3, [r6, #8]
    356c:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    356e:	4b51      	ldr	r3, [pc, #324]	; (36b4 <bt_recv+0x640>)
    3570:	7832      	ldrb	r2, [r6, #0]
    3572:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    3574:	4682      	mov	sl, r0
    3576:	461f      	mov	r7, r3
    3578:	fa4f f18b 	sxtb.w	r1, fp
    357c:	462b      	mov	r3, r5
    357e:	a80c      	add	r0, sp, #48	; 0x30
    3580:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3582:	6923      	ldr	r3, [r4, #16]
    3584:	fa13 f38a 	uxtah	r3, r3, sl
    3588:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    358a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    358e:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3590:	2109      	movs	r1, #9
    3592:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3594:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3596:	f7fe fda1 	bl	20dc <atomic_test_bit>
    359a:	4682      	mov	sl, r0
    359c:	2800      	cmp	r0, #0
    359e:	d164      	bne.n	366a <bt_recv+0x5f6>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    35a0:	2a01      	cmp	r2, #1
    35a2:	d862      	bhi.n	366a <bt_recv+0x5f6>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    35a4:	2101      	movs	r1, #1
    35a6:	a80c      	add	r0, sp, #48	; 0x30
    35a8:	f000 fe5a 	bl	4260 <bt_conn_lookup_state_le>
	if (!conn) {
    35ac:	4607      	mov	r7, r0
    35ae:	2800      	cmp	r0, #0
    35b0:	d05b      	beq.n	366a <bt_recv+0x5f6>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    35b2:	2108      	movs	r1, #8
    35b4:	4648      	mov	r0, r9
    35b6:	f7fe fd91 	bl	20dc <atomic_test_bit>
    35ba:	2800      	cmp	r0, #0
    35bc:	d17e      	bne.n	36bc <bt_recv+0x648>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    35be:	2102      	movs	r1, #2
    35c0:	4648      	mov	r0, r9
    35c2:	f7fe fd8b 	bl	20dc <atomic_test_bit>
    35c6:	b110      	cbz	r0, 35ce <bt_recv+0x55a>
			set_random_address(&bt_dev.id_addr.a);
    35c8:	483b      	ldr	r0, [pc, #236]	; (36b8 <bt_recv+0x644>)
    35ca:	f7fe fe39 	bl	2240 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    35ce:	4934      	ldr	r1, [pc, #208]	; (36a0 <bt_recv+0x62c>)
    35d0:	f107 0053 	add.w	r0, r7, #83	; 0x53
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    35d4:	f107 0a5a 	add.w	sl, r7, #90	; 0x5a
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    35d8:	f7fe fce8 	bl	1fac <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    35dc:	4641      	mov	r1, r8
    35de:	4650      	mov	r0, sl
    35e0:	f7fe fce4 	bl	1fac <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    35e4:	2119      	movs	r1, #25
    35e6:	f242 000d 	movw	r0, #8205	; 0x200d
    35ea:	f7fe fd85 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    35ee:	4683      	mov	fp, r0
    35f0:	2800      	cmp	r0, #0
    35f2:	d069      	beq.n	36c8 <bt_recv+0x654>
	cp = net_buf_add(buf, sizeof(*cp));
    35f4:	2119      	movs	r1, #25
    35f6:	3008      	adds	r0, #8
    35f8:	f00f faa6 	bl	12b48 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    35fc:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    35fe:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    3600:	2100      	movs	r1, #0
    3602:	f7fe fb39 	bl	1c78 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3606:	2200      	movs	r2, #0
    3608:	2360      	movs	r3, #96	; 0x60
    360a:	f888 3000 	strb.w	r3, [r8]
    360e:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    3612:	f888 3002 	strb.w	r3, [r8, #2]
    3616:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    361a:	4651      	mov	r1, sl
    361c:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    3620:	9207      	str	r2, [sp, #28]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3622:	f7fe fcc3 	bl	1fac <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3626:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
    362a:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    362e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    3632:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3636:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    363a:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    363e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    3642:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3646:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
    364a:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    364e:	9a07      	ldr	r2, [sp, #28]
    3650:	4659      	mov	r1, fp
    3652:	f242 000d 	movw	r0, #8205	; 0x200d
    3656:	f7fe fd7f 	bl	2158 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    365a:	bba8      	cbnz	r0, 36c8 <bt_recv+0x654>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    365c:	4638      	mov	r0, r7
    365e:	2102      	movs	r1, #2
    3660:	f000 fed8 	bl	4414 <bt_conn_set_state>
	bt_conn_unref(conn);
    3664:	4638      	mov	r0, r7
    3666:	f000 fe19 	bl	429c <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    366a:	7a31      	ldrb	r1, [r6, #8]
    366c:	4628      	mov	r0, r5
    366e:	3101      	adds	r1, #1
    3670:	f00f fa89 	bl	12b86 <net_buf_simple_pull>
    3674:	9b06      	ldr	r3, [sp, #24]
    3676:	3b01      	subs	r3, #1
    3678:	b2db      	uxtb	r3, r3
    367a:	9306      	str	r3, [sp, #24]
    367c:	e750      	b.n	3520 <bt_recv+0x4ac>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    367e:	f7fe fc95 	bl	1fac <bt_addr_le_copy>
    3682:	e76a      	b.n	355a <bt_recv+0x4e6>
    3684:	00014891 	.word	0x00014891
    3688:	20003aa4 	.word	0x20003aa4
    368c:	00015639 	.word	0x00015639
    3690:	000153c8 	.word	0x000153c8
    3694:	00014ea3 	.word	0x00014ea3
    3698:	00014e79 	.word	0x00014e79
    369c:	00014e8c 	.word	0x00014e8c
    36a0:	20003aa8 	.word	0x20003aa8
    36a4:	20003b18 	.word	0x20003b18
    36a8:	20000290 	.word	0x20000290
    36ac:	200002d0 	.word	0x200002d0
    36b0:	2000028c 	.word	0x2000028c
    36b4:	200002d8 	.word	0x200002d8
    36b8:	20003aa9 	.word	0x20003aa9
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    36bc:	4650      	mov	r0, sl
    36be:	f7fe fd89 	bl	21d4 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    36c2:	2800      	cmp	r0, #0
    36c4:	f43f af7b 	beq.w	35be <bt_recv+0x54a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    36c8:	231f      	movs	r3, #31
    36ca:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    36cc:	2100      	movs	r1, #0
    36ce:	4638      	mov	r0, r7
    36d0:	f000 fea0 	bl	4414 <bt_conn_set_state>
	bt_conn_unref(conn);
    36d4:	4638      	mov	r0, r7
    36d6:	f000 fde1 	bl	429c <bt_conn_unref>
	bt_le_scan_update(false);
    36da:	2000      	movs	r0, #0
    36dc:	f7fe ff58 	bl	2590 <bt_le_scan_update>
    36e0:	e7c3      	b.n	366a <bt_recv+0x5f6>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    36e2:	89a5      	ldrh	r5, [r4, #12]
    36e4:	4b1f      	ldr	r3, [pc, #124]	; (3764 <bt_recv+0x6f0>)
    36e6:	68a0      	ldr	r0, [r4, #8]
    36e8:	681f      	ldr	r7, [r3, #0]
    36ea:	4629      	mov	r1, r5
    36ec:	f7fe fae8 	bl	1cc0 <bt_hex>
    36f0:	4a1d      	ldr	r2, [pc, #116]	; (3768 <bt_recv+0x6f4>)
    36f2:	9003      	str	r0, [sp, #12]
    36f4:	e88d 0044 	stmia.w	sp, {r2, r6}
    36f8:	4b1c      	ldr	r3, [pc, #112]	; (376c <bt_recv+0x6f8>)
    36fa:	491d      	ldr	r1, [pc, #116]	; (3770 <bt_recv+0x6fc>)
    36fc:	481d      	ldr	r0, [pc, #116]	; (3774 <bt_recv+0x700>)
    36fe:	9204      	str	r2, [sp, #16]
    3700:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3702:	47b8      	blx	r7
    3704:	e4d9      	b.n	30ba <bt_recv+0x46>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3706:	4a18      	ldr	r2, [pc, #96]	; (3768 <bt_recv+0x6f4>)
    3708:	9202      	str	r2, [sp, #8]
    370a:	e88d 000c 	stmia.w	sp, {r2, r3}
    370e:	4b15      	ldr	r3, [pc, #84]	; (3764 <bt_recv+0x6f0>)
    3710:	4917      	ldr	r1, [pc, #92]	; (3770 <bt_recv+0x6fc>)
    3712:	681d      	ldr	r5, [r3, #0]
    3714:	4818      	ldr	r0, [pc, #96]	; (3778 <bt_recv+0x704>)
    3716:	4b19      	ldr	r3, [pc, #100]	; (377c <bt_recv+0x708>)
    3718:	47a8      	blx	r5
		net_buf_unref(buf);
    371a:	4620      	mov	r0, r4
    371c:	f00f f9dc 	bl	12ad8 <net_buf_unref>
		return -EINVAL;
    3720:	f06f 0015 	mvn.w	r0, #21
    3724:	e4ea      	b.n	30fc <bt_recv+0x88>
	net_buf_pull(buf, sizeof(*hdr));
    3726:	f104 0508 	add.w	r5, r4, #8
    372a:	2102      	movs	r1, #2
    372c:	4628      	mov	r0, r5
    372e:	f00f fa2a 	bl	12b86 <net_buf_simple_pull>
	switch (hdr->evt) {
    3732:	7836      	ldrb	r6, [r6, #0]
    3734:	2e05      	cmp	r6, #5
    3736:	f43f acfd 	beq.w	3134 <bt_recv+0xc0>
    373a:	2e3e      	cmp	r6, #62	; 0x3e
    373c:	f43f ad3e 	beq.w	31bc <bt_recv+0x148>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3740:	89a5      	ldrh	r5, [r4, #12]
    3742:	4b08      	ldr	r3, [pc, #32]	; (3764 <bt_recv+0x6f0>)
    3744:	68a0      	ldr	r0, [r4, #8]
    3746:	681f      	ldr	r7, [r3, #0]
    3748:	4629      	mov	r1, r5
    374a:	f7fe fab9 	bl	1cc0 <bt_hex>
    374e:	4a06      	ldr	r2, [pc, #24]	; (3768 <bt_recv+0x6f4>)
    3750:	9003      	str	r0, [sp, #12]
    3752:	9204      	str	r2, [sp, #16]
    3754:	9502      	str	r5, [sp, #8]
    3756:	e88d 0044 	stmia.w	sp, {r2, r6}
    375a:	4b09      	ldr	r3, [pc, #36]	; (3780 <bt_recv+0x70c>)
    375c:	4904      	ldr	r1, [pc, #16]	; (3770 <bt_recv+0x6fc>)
    375e:	4809      	ldr	r0, [pc, #36]	; (3784 <bt_recv+0x710>)
    3760:	e7cf      	b.n	3702 <bt_recv+0x68e>
    3762:	bf00      	nop
    3764:	20003aa4 	.word	0x20003aa4
    3768:	00014891 	.word	0x00014891
    376c:	00014eda 	.word	0x00014eda
    3770:	00015639 	.word	0x00015639
    3774:	000153fc 	.word	0x000153fc
    3778:	00015463 	.word	0x00015463
    377c:	00014f6b 	.word	0x00014f6b
    3780:	00014eec 	.word	0x00014eec
    3784:	00015431 	.word	0x00015431

00003788 <bt_recv_prio>:
{
    3788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    378c:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    378e:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3790:	2b01      	cmp	r3, #1
{
    3792:	b087      	sub	sp, #28
    3794:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3796:	d00e      	beq.n	37b6 <bt_recv_prio+0x2e>
    3798:	4a68      	ldr	r2, [pc, #416]	; (393c <bt_recv_prio+0x1b4>)
    379a:	4b69      	ldr	r3, [pc, #420]	; (3940 <bt_recv_prio+0x1b8>)
    379c:	9201      	str	r2, [sp, #4]
    379e:	9200      	str	r2, [sp, #0]
    37a0:	681c      	ldr	r4, [r3, #0]
    37a2:	4968      	ldr	r1, [pc, #416]	; (3944 <bt_recv_prio+0x1bc>)
    37a4:	4b68      	ldr	r3, [pc, #416]	; (3948 <bt_recv_prio+0x1c0>)
    37a6:	4869      	ldr	r0, [pc, #420]	; (394c <bt_recv_prio+0x1c4>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    37a8:	47a0      	blx	r4
    37aa:	4040      	eors	r0, r0
    37ac:	f380 8811 	msr	BASEPRI, r0
    37b0:	f04f 0004 	mov.w	r0, #4
    37b4:	df02      	svc	2
    37b6:	8982      	ldrh	r2, [r0, #12]
    37b8:	2a01      	cmp	r2, #1
    37ba:	d808      	bhi.n	37ce <bt_recv_prio+0x46>
    37bc:	4a5f      	ldr	r2, [pc, #380]	; (393c <bt_recv_prio+0x1b4>)
    37be:	4b60      	ldr	r3, [pc, #384]	; (3940 <bt_recv_prio+0x1b8>)
    37c0:	9201      	str	r2, [sp, #4]
    37c2:	9200      	str	r2, [sp, #0]
    37c4:	681c      	ldr	r4, [r3, #0]
    37c6:	495f      	ldr	r1, [pc, #380]	; (3944 <bt_recv_prio+0x1bc>)
    37c8:	4b5f      	ldr	r3, [pc, #380]	; (3948 <bt_recv_prio+0x1c0>)
    37ca:	4861      	ldr	r0, [pc, #388]	; (3950 <bt_recv_prio+0x1c8>)
    37cc:	e7ec      	b.n	37a8 <bt_recv_prio+0x20>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    37ce:	7832      	ldrb	r2, [r6, #0]
    37d0:	2a13      	cmp	r2, #19
    37d2:	f200 80aa 	bhi.w	392a <bt_recv_prio+0x1a2>
    37d6:	4093      	lsls	r3, r2
    37d8:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    37dc:	f000 80a5 	beq.w	392a <bt_recv_prio+0x1a2>
	net_buf_pull(buf, sizeof(*hdr));
    37e0:	f100 0508 	add.w	r5, r0, #8
    37e4:	2102      	movs	r1, #2
    37e6:	4628      	mov	r0, r5
    37e8:	f00f f9cd 	bl	12b86 <net_buf_simple_pull>
	switch (hdr->evt) {
    37ec:	7833      	ldrb	r3, [r6, #0]
    37ee:	2b0f      	cmp	r3, #15
    37f0:	d01d      	beq.n	382e <bt_recv_prio+0xa6>
    37f2:	2b13      	cmp	r3, #19
    37f4:	d02b      	beq.n	384e <bt_recv_prio+0xc6>
    37f6:	2b0e      	cmp	r3, #14
    37f8:	f040 808b 	bne.w	3912 <bt_recv_prio+0x18a>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    37fc:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    37fe:	2103      	movs	r1, #3
    3800:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3802:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3806:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    3808:	f00f f9bd 	bl	12b86 <net_buf_simple_pull>
	status = buf->data[0];
    380c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    380e:	4622      	mov	r2, r4
    3810:	7819      	ldrb	r1, [r3, #0]
    3812:	4638      	mov	r0, r7
    3814:	f7fe fbfe 	bl	2014 <hci_cmd_done>
	if (ncmd) {
    3818:	b116      	cbz	r6, 3820 <bt_recv_prio+0x98>
    381a:	484e      	ldr	r0, [pc, #312]	; (3954 <bt_recv_prio+0x1cc>)
    381c:	f010 fa5a 	bl	13cd4 <_impl_k_sem_give>
	net_buf_unref(buf);
    3820:	4620      	mov	r0, r4
    3822:	f00f f959 	bl	12ad8 <net_buf_unref>
}
    3826:	2000      	movs	r0, #0
    3828:	b007      	add	sp, #28
    382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    382e:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3830:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    3834:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    3836:	2104      	movs	r1, #4
    3838:	4628      	mov	r0, r5
    383a:	f00f f9a4 	bl	12b86 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    383e:	4622      	mov	r2, r4
    3840:	7831      	ldrb	r1, [r6, #0]
    3842:	4640      	mov	r0, r8
    3844:	f7fe fbe6 	bl	2014 <hci_cmd_done>
	if (ncmd) {
    3848:	2f00      	cmp	r7, #0
    384a:	d0e9      	beq.n	3820 <bt_recv_prio+0x98>
    384c:	e7e5      	b.n	381a <bt_recv_prio+0x92>
    384e:	f8d4 b008 	ldr.w	fp, [r4, #8]
				BT_ERR("packets count mismatch");
    3852:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 393c <bt_recv_prio+0x1b4>
    3856:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 3940 <bt_recv_prio+0x1b8>
	for (i = 0; i < evt->num_handles; i++) {
    385a:	2600      	movs	r6, #0
    385c:	f89b 3000 	ldrb.w	r3, [fp]
    3860:	429e      	cmp	r6, r3
    3862:	dadd      	bge.n	3820 <bt_recv_prio+0x98>
    3864:	eb0b 0386 	add.w	r3, fp, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3868:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    386c:	f8b3 a003 	ldrh.w	sl, [r3, #3]
	__asm__ volatile(
    3870:	f04f 0120 	mov.w	r1, #32
    3874:	f3ef 8711 	mrs	r7, BASEPRI
    3878:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    387c:	4610      	mov	r0, r2
    387e:	9205      	str	r2, [sp, #20]
    3880:	f000 fcbe 	bl	4200 <bt_conn_lookup_handle>
		if (!conn) {
    3884:	9a05      	ldr	r2, [sp, #20]
    3886:	4605      	mov	r5, r0
    3888:	b978      	cbnz	r0, 38aa <bt_recv_prio+0x122>
			BT_ERR("No connection for handle %u", handle);
    388a:	9201      	str	r2, [sp, #4]
    388c:	f8cd 8008 	str.w	r8, [sp, #8]
    3890:	f8cd 8000 	str.w	r8, [sp]
    3894:	f8d9 5000 	ldr.w	r5, [r9]
    3898:	4b2f      	ldr	r3, [pc, #188]	; (3958 <bt_recv_prio+0x1d0>)
    389a:	4a28      	ldr	r2, [pc, #160]	; (393c <bt_recv_prio+0x1b4>)
    389c:	4929      	ldr	r1, [pc, #164]	; (3944 <bt_recv_prio+0x1bc>)
    389e:	482f      	ldr	r0, [pc, #188]	; (395c <bt_recv_prio+0x1d4>)
    38a0:	47a8      	blx	r5
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    38a2:	f387 8811 	msr	BASEPRI, r7
	for (i = 0; i < evt->num_handles; i++) {
    38a6:	3601      	adds	r6, #1
    38a8:	e7d8      	b.n	385c <bt_recv_prio+0xd4>
    38aa:	f387 8811 	msr	BASEPRI, r7
			k_fifo_put(&conn->tx_notify, node);
    38ae:	f100 0718 	add.w	r7, r0, #24
		while (count--) {
    38b2:	f1ba 0f00 	cmp.w	sl, #0
    38b6:	d01f      	beq.n	38f8 <bt_recv_prio+0x170>
	__asm__ volatile(
    38b8:	f04f 0220 	mov.w	r2, #32
    38bc:	f3ef 8e11 	mrs	lr, BASEPRI
    38c0:	f382 8811 	msr	BASEPRI, r2
    38c4:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    38c6:	b129      	cbz	r1, 38d4 <bt_recv_prio+0x14c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    38c8:	696a      	ldr	r2, [r5, #20]
	return node->next;
    38ca:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    38cc:	6128      	str	r0, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    38ce:	4291      	cmp	r1, r2
	list->tail = node;
    38d0:	bf08      	it	eq
    38d2:	6168      	streq	r0, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    38d4:	f38e 8811 	msr	BASEPRI, lr
    38d8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    38dc:	fa1f fa83 	uxth.w	sl, r3
			if (!node) {
    38e0:	b971      	cbnz	r1, 3900 <bt_recv_prio+0x178>
				BT_ERR("packets count mismatch");
    38e2:	f8cd 8004 	str.w	r8, [sp, #4]
    38e6:	f8cd 8000 	str.w	r8, [sp]
    38ea:	f8d9 7000 	ldr.w	r7, [r9]
    38ee:	4b1a      	ldr	r3, [pc, #104]	; (3958 <bt_recv_prio+0x1d0>)
    38f0:	4a12      	ldr	r2, [pc, #72]	; (393c <bt_recv_prio+0x1b4>)
    38f2:	4914      	ldr	r1, [pc, #80]	; (3944 <bt_recv_prio+0x1bc>)
    38f4:	481a      	ldr	r0, [pc, #104]	; (3960 <bt_recv_prio+0x1d8>)
    38f6:	47b8      	blx	r7
		bt_conn_unref(conn);
    38f8:	4628      	mov	r0, r5
    38fa:	f000 fccf 	bl	429c <bt_conn_unref>
    38fe:	e7d2      	b.n	38a6 <bt_recv_prio+0x11e>
			k_fifo_put(&conn->tx_notify, node);
    3900:	4638      	mov	r0, r7
    3902:	f00f fef9 	bl	136f8 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3906:	4628      	mov	r0, r5
    3908:	f000 f970 	bl	3bec <bt_conn_get_pkts>
    390c:	f010 f9e2 	bl	13cd4 <_impl_k_sem_give>
    3910:	e7cf      	b.n	38b2 <bt_recv_prio+0x12a>
		net_buf_unref(buf);
    3912:	4620      	mov	r0, r4
    3914:	f00f f8e0 	bl	12ad8 <net_buf_unref>
		BT_ASSERT(0);
    3918:	4a08      	ldr	r2, [pc, #32]	; (393c <bt_recv_prio+0x1b4>)
    391a:	4b09      	ldr	r3, [pc, #36]	; (3940 <bt_recv_prio+0x1b8>)
    391c:	9201      	str	r2, [sp, #4]
    391e:	9200      	str	r2, [sp, #0]
    3920:	681c      	ldr	r4, [r3, #0]
    3922:	4908      	ldr	r1, [pc, #32]	; (3944 <bt_recv_prio+0x1bc>)
    3924:	4b08      	ldr	r3, [pc, #32]	; (3948 <bt_recv_prio+0x1c0>)
    3926:	480f      	ldr	r0, [pc, #60]	; (3964 <bt_recv_prio+0x1dc>)
    3928:	e73e      	b.n	37a8 <bt_recv_prio+0x20>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    392a:	4a04      	ldr	r2, [pc, #16]	; (393c <bt_recv_prio+0x1b4>)
    392c:	4b04      	ldr	r3, [pc, #16]	; (3940 <bt_recv_prio+0x1b8>)
    392e:	9201      	str	r2, [sp, #4]
    3930:	9200      	str	r2, [sp, #0]
    3932:	681c      	ldr	r4, [r3, #0]
    3934:	4903      	ldr	r1, [pc, #12]	; (3944 <bt_recv_prio+0x1bc>)
    3936:	4b04      	ldr	r3, [pc, #16]	; (3948 <bt_recv_prio+0x1c0>)
    3938:	480b      	ldr	r0, [pc, #44]	; (3968 <bt_recv_prio+0x1e0>)
    393a:	e735      	b.n	37a8 <bt_recv_prio+0x20>
    393c:	00014891 	.word	0x00014891
    3940:	20003aa4 	.word	0x20003aa4
    3944:	00015639 	.word	0x00015639
    3948:	00014f73 	.word	0x00014f73
    394c:	000154c6 	.word	0x000154c6
    3950:	0001550a 	.word	0x0001550a
    3954:	20003b50 	.word	0x20003b50
    3958:	00014e1d 	.word	0x00014e1d
    395c:	00015544 	.word	0x00015544
    3960:	00015570 	.word	0x00015570
    3964:	00015597 	.word	0x00015597
    3968:	000155ba 	.word	0x000155ba

0000396c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    396c:	4a08      	ldr	r2, [pc, #32]	; (3990 <bt_hci_driver_register+0x24>)
    396e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    3972:	b93b      	cbnz	r3, 3984 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    3974:	68c1      	ldr	r1, [r0, #12]
    3976:	b141      	cbz	r1, 398a <bt_hci_driver_register+0x1e>
    3978:	6901      	ldr	r1, [r0, #16]
    397a:	b131      	cbz	r1, 398a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    397c:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
	return 0;
    3980:	4618      	mov	r0, r3
    3982:	4770      	bx	lr
		return -EALREADY;
    3984:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3988:	4770      	bx	lr
		return -EINVAL;
    398a:	f06f 0015 	mvn.w	r0, #21
}
    398e:	4770      	bx	lr
    3990:	20003aa8 	.word	0x20003aa8

00003994 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3994:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3996:	4d2a      	ldr	r5, [pc, #168]	; (3a40 <bt_enable+0xac>)
    3998:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
{
    399c:	b086      	sub	sp, #24
    399e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    39a0:	b96b      	cbnz	r3, 39be <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    39a2:	4a28      	ldr	r2, [pc, #160]	; (3a44 <bt_enable+0xb0>)
    39a4:	4b28      	ldr	r3, [pc, #160]	; (3a48 <bt_enable+0xb4>)
    39a6:	9201      	str	r2, [sp, #4]
    39a8:	9200      	str	r2, [sp, #0]
    39aa:	681c      	ldr	r4, [r3, #0]
    39ac:	4927      	ldr	r1, [pc, #156]	; (3a4c <bt_enable+0xb8>)
    39ae:	4b28      	ldr	r3, [pc, #160]	; (3a50 <bt_enable+0xbc>)
    39b0:	4828      	ldr	r0, [pc, #160]	; (3a54 <bt_enable+0xc0>)
    39b2:	47a0      	blx	r4
		return -ENODEV;
    39b4:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    39b8:	4620      	mov	r0, r4
    39ba:	b006      	add	sp, #24
    39bc:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    39be:	2101      	movs	r1, #1
    39c0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    39c4:	f7fe faf5 	bl	1fb2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    39c8:	f010 0001 	ands.w	r0, r0, #1
    39cc:	d134      	bne.n	3a38 <bt_enable+0xa4>
	ready_cb = cb;
    39ce:	4b22      	ldr	r3, [pc, #136]	; (3a58 <bt_enable+0xc4>)

    39d0:	4922      	ldr	r1, [pc, #136]	; (3a5c <bt_enable+0xc8>)
    39d2:	601e      	str	r6, [r3, #0]
    39d4:	f06f 0308 	mvn.w	r3, #8
    39d8:	9005      	str	r0, [sp, #20]
    39da:	9004      	str	r0, [sp, #16]
    39dc:	9303      	str	r3, [sp, #12]
    39de:	9002      	str	r0, [sp, #8]
    39e0:	9001      	str	r0, [sp, #4]
    39e2:	9000      	str	r0, [sp, #0]
    39e4:	4b1e      	ldr	r3, [pc, #120]	; (3a60 <bt_enable+0xcc>)
    39e6:	481f      	ldr	r0, [pc, #124]	; (3a64 <bt_enable+0xd0>)
    39e8:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    39ec:	f010 fb84 	bl	140f8 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    39f0:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    39f4:	68db      	ldr	r3, [r3, #12]
    39f6:	4798      	blx	r3
	if (err) {
    39f8:	4604      	mov	r4, r0
    39fa:	b150      	cbz	r0, 3a12 <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    39fc:	4a11      	ldr	r2, [pc, #68]	; (3a44 <bt_enable+0xb0>)
    39fe:	4b12      	ldr	r3, [pc, #72]	; (3a48 <bt_enable+0xb4>)
    3a00:	9202      	str	r2, [sp, #8]
    3a02:	e88d 0014 	stmia.w	sp, {r2, r4}
    3a06:	4911      	ldr	r1, [pc, #68]	; (3a4c <bt_enable+0xb8>)
    3a08:	681d      	ldr	r5, [r3, #0]
    3a0a:	4817      	ldr	r0, [pc, #92]	; (3a68 <bt_enable+0xd4>)
    3a0c:	4b10      	ldr	r3, [pc, #64]	; (3a50 <bt_enable+0xbc>)
    3a0e:	47a8      	blx	r5
		return err;
    3a10:	e7d2      	b.n	39b8 <bt_enable+0x24>
	if (!cb) {
    3a12:	b926      	cbnz	r6, 3a1e <bt_enable+0x8a>
}
    3a14:	b006      	add	sp, #24
    3a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    3a1a:	f7fe bdeb 	b.w	25f4 <bt_init>
    3a1e:	2101      	movs	r1, #1
    3a20:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3a24:	f7fe fac5 	bl	1fb2 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3a28:	07c3      	lsls	r3, r0, #31
    3a2a:	d4c5      	bmi.n	39b8 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    3a2c:	f105 0164 	add.w	r1, r5, #100	; 0x64
    3a30:	480e      	ldr	r0, [pc, #56]	; (3a6c <bt_enable+0xd8>)
    3a32:	f00f fe61 	bl	136f8 <k_queue_append>
    3a36:	e7bf      	b.n	39b8 <bt_enable+0x24>
		return -EALREADY;
    3a38:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3a3c:	e7bc      	b.n	39b8 <bt_enable+0x24>
    3a3e:	bf00      	nop
    3a40:	20003aa8 	.word	0x20003aa8
    3a44:	00014891 	.word	0x00014891
    3a48:	20003aa4 	.word	0x20003aa4
    3a4c:	00015639 	.word	0x00015639
    3a50:	00014f80 	.word	0x00014f80
    3a54:	0001502c 	.word	0x0001502c
    3a58:	200002d4 	.word	0x200002d4
    3a5c:	20001a50 	.word	0x20001a50
    3a60:	00002ed9 	.word	0x00002ed9
    3a64:	200002dc 	.word	0x200002dc
    3a68:	00015055 	.word	0x00015055
    3a6c:	200019c8 	.word	0x200019c8

00003a70 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    3a70:	2000      	movs	r0, #0
    3a72:	4770      	bx	lr

00003a74 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    3a74:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3a76:	7803      	ldrb	r3, [r0, #0]
    3a78:	2b01      	cmp	r3, #1
{
    3a7a:	4605      	mov	r5, r0
    3a7c:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3a7e:	d810      	bhi.n	3aa2 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    3a80:	7843      	ldrb	r3, [r0, #1]
    3a82:	2b01      	cmp	r3, #1
    3a84:	d80d      	bhi.n	3aa2 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    3a86:	8841      	ldrh	r1, [r0, #2]
    3a88:	1f0b      	subs	r3, r1, #4
    3a8a:	b29b      	uxth	r3, r3
    3a8c:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    3a90:	4283      	cmp	r3, r0
    3a92:	d806      	bhi.n	3aa2 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3a94:	88aa      	ldrh	r2, [r5, #4]
    3a96:	1f13      	subs	r3, r2, #4
    3a98:	b29b      	uxth	r3, r3
    3a9a:	4283      	cmp	r3, r0
    3a9c:	d801      	bhi.n	3aa2 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3a9e:	4291      	cmp	r1, r2
    3aa0:	d22b      	bcs.n	3afa <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3aa2:	f06f 0415 	mvn.w	r4, #21
    3aa6:	e00e      	b.n	3ac6 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3aa8:	2108      	movs	r1, #8
    3aaa:	4819      	ldr	r0, [pc, #100]	; (3b10 <bt_le_scan_start+0x9c>)
    3aac:	f7fe fb16 	bl	20dc <atomic_test_bit>
    3ab0:	b158      	cbz	r0, 3aca <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3ab2:	4610      	mov	r0, r2
    3ab4:	f7fe fb8e 	bl	21d4 <set_le_scan_enable>
		if (err) {
    3ab8:	4604      	mov	r4, r0
    3aba:	b130      	cbz	r0, 3aca <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3abc:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3ac0:	4813      	ldr	r0, [pc, #76]	; (3b10 <bt_le_scan_start+0x9c>)
    3ac2:	f7fe fa87 	bl	1fd4 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3ac6:	4620      	mov	r0, r4
    3ac8:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3aca:	786b      	ldrb	r3, [r5, #1]
    3acc:	b17b      	cbz	r3, 3aee <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3ad2:	480f      	ldr	r0, [pc, #60]	; (3b10 <bt_le_scan_start+0x9c>)
    3ad4:	f7fe fa6d 	bl	1fb2 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3ad8:	88aa      	ldrh	r2, [r5, #4]
    3ada:	8869      	ldrh	r1, [r5, #2]
    3adc:	7828      	ldrb	r0, [r5, #0]
    3ade:	f7fe fd07 	bl	24f0 <start_le_scan>
	if (err) {
    3ae2:	4604      	mov	r4, r0
    3ae4:	2800      	cmp	r0, #0
    3ae6:	d1e9      	bne.n	3abc <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3ae8:	4b0a      	ldr	r3, [pc, #40]	; (3b14 <bt_le_scan_start+0xa0>)
    3aea:	601e      	str	r6, [r3, #0]
	return 0;
    3aec:	e7eb      	b.n	3ac6 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3aee:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3af2:	4807      	ldr	r0, [pc, #28]	; (3b10 <bt_le_scan_start+0x9c>)
    3af4:	f7fe fa6e 	bl	1fd4 <atomic_and>
    3af8:	e7ee      	b.n	3ad8 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3afa:	f44f 7100 	mov.w	r1, #512	; 0x200
    3afe:	4804      	ldr	r0, [pc, #16]	; (3b10 <bt_le_scan_start+0x9c>)
    3b00:	f7fe fa57 	bl	1fb2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b04:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3b08:	d0ce      	beq.n	3aa8 <bt_le_scan_start+0x34>
		return -EALREADY;
    3b0a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3b0e:	e7da      	b.n	3ac6 <bt_le_scan_start+0x52>
    3b10:	20003b18 	.word	0x20003b18
    3b14:	200002d8 	.word	0x200002d8

00003b18 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3b18:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3b1a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3b1e:	4807      	ldr	r0, [pc, #28]	; (3b3c <bt_le_scan_stop+0x24>)
    3b20:	f7fe fa58 	bl	1fd4 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b24:	0583      	lsls	r3, r0, #22
    3b26:	d506      	bpl.n	3b36 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3b28:	4b05      	ldr	r3, [pc, #20]	; (3b40 <bt_le_scan_stop+0x28>)
    3b2a:	2000      	movs	r0, #0
    3b2c:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3b32:	f7fe bd2d 	b.w	2590 <bt_le_scan_update>
}
    3b36:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3b3a:	bd08      	pop	{r3, pc}
    3b3c:	20003b18 	.word	0x20003b18
    3b40:	200002d8 	.word	0x200002d8

00003b44 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3b44:	b538      	push	{r3, r4, r5, lr}
    3b46:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3b48:	4805      	ldr	r0, [pc, #20]	; (3b60 <bt_buf_get_rx+0x1c>)
    3b4a:	f00e ff95 	bl	12a78 <net_buf_alloc_fixed>
#endif

	if (buf) {
    3b4e:	4604      	mov	r4, r0
    3b50:	b120      	cbz	r0, 3b5c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b52:	2100      	movs	r1, #0
    3b54:	3008      	adds	r0, #8
    3b56:	f00e ffae 	bl	12ab6 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3b5a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3b5c:	4620      	mov	r0, r4
    3b5e:	bd38      	pop	{r3, r4, r5, pc}
    3b60:	20004014 	.word	0x20004014

00003b64 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3b64:	b510      	push	{r4, lr}
    3b66:	4601      	mov	r1, r0
	__asm__ volatile(
    3b68:	f04f 0320 	mov.w	r3, #32
    3b6c:	f3ef 8011 	mrs	r0, BASEPRI
    3b70:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3b74:	4a0b      	ldr	r2, [pc, #44]	; (3ba4 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3b76:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3b78:	f8d2 40c4 	ldr.w	r4, [r2, #196]	; 0xc4
	bt_dev.sent_cmd = NULL;
    3b7c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3b80:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3b84:	b924      	cbnz	r4, 3b90 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b86:	2001      	movs	r0, #1
}
    3b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b8c:	f7ff bfda 	b.w	3b44 <bt_buf_get_rx>
    3b90:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b92:	f104 0008 	add.w	r0, r4, #8
    3b96:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3b98:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b9a:	4619      	mov	r1, r3
    3b9c:	f00e ff8b 	bl	12ab6 <net_buf_simple_reserve>
}
    3ba0:	4620      	mov	r0, r4
    3ba2:	bd10      	pop	{r4, pc}
    3ba4:	20003aa8 	.word	0x20003aa8

00003ba8 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3ba8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3baa:	4b06      	ldr	r3, [pc, #24]	; (3bc4 <notify_connected+0x1c>)
    3bac:	681c      	ldr	r4, [r3, #0]
{
    3bae:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3bb0:	b904      	cbnz	r4, 3bb4 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3bb2:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3bb4:	6823      	ldr	r3, [r4, #0]
    3bb6:	b113      	cbz	r3, 3bbe <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3bb8:	7a29      	ldrb	r1, [r5, #8]
    3bba:	4628      	mov	r0, r5
    3bbc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3bbe:	6924      	ldr	r4, [r4, #16]
    3bc0:	e7f6      	b.n	3bb0 <notify_connected+0x8>
    3bc2:	bf00      	nop
    3bc4:	2000034c 	.word	0x2000034c

00003bc8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3bc8:	f3bf 8f5b 	dmb	ish
    3bcc:	6800      	ldr	r0, [r0, #0]
    3bce:	f3bf 8f5b 	dmb	ish
}
    3bd2:	4770      	bx	lr

00003bd4 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3bd4:	8943      	ldrh	r3, [r0, #10]
{
    3bd6:	b510      	push	{r4, lr}
    3bd8:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3bda:	b12b      	cbz	r3, 3be8 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3bdc:	68c0      	ldr	r0, [r0, #12]
    3bde:	f00e ff7b 	bl	12ad8 <net_buf_unref>
	conn->rx = NULL;
    3be2:	2300      	movs	r3, #0
    3be4:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3be6:	8163      	strh	r3, [r4, #10]
    3be8:	bd10      	pop	{r4, pc}
	...

00003bec <bt_conn_get_pkts>:
}
    3bec:	4800      	ldr	r0, [pc, #0]	; (3bf0 <bt_conn_get_pkts+0x4>)
    3bee:	4770      	bx	lr
    3bf0:	20003b34 	.word	0x20003b34

00003bf4 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3bf4:	4b08      	ldr	r3, [pc, #32]	; (3c18 <notify_le_param_updated+0x24>)
{
    3bf6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3bf8:	681c      	ldr	r4, [r3, #0]
{
    3bfa:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3bfc:	b904      	cbnz	r4, 3c00 <notify_le_param_updated+0xc>
}
    3bfe:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3c00:	68e6      	ldr	r6, [r4, #12]
    3c02:	b13e      	cbz	r6, 3c14 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3c04:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
    3c08:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    3c0c:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
    3c10:	4628      	mov	r0, r5
    3c12:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3c14:	6924      	ldr	r4, [r4, #16]
    3c16:	e7f1      	b.n	3bfc <notify_le_param_updated+0x8>
    3c18:	2000034c 	.word	0x2000034c

00003c1c <le_param_req>:
{
    3c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c1e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3c20:	4608      	mov	r0, r1
{
    3c22:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3c24:	f7fe fb76 	bl	2314 <bt_le_conn_params_valid>
    3c28:	4605      	mov	r5, r0
    3c2a:	b910      	cbnz	r0, 3c32 <le_param_req+0x16>
		return false;
    3c2c:	2500      	movs	r5, #0
}
    3c2e:	4628      	mov	r0, r5
    3c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3c32:	4b09      	ldr	r3, [pc, #36]	; (3c58 <le_param_req+0x3c>)
    3c34:	681c      	ldr	r4, [r3, #0]
    3c36:	2c00      	cmp	r4, #0
    3c38:	d0f9      	beq.n	3c2e <le_param_req+0x12>
		if (!cb->le_param_req) {
    3c3a:	68a3      	ldr	r3, [r4, #8]
    3c3c:	b90b      	cbnz	r3, 3c42 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3c3e:	6924      	ldr	r4, [r4, #16]
    3c40:	e7f9      	b.n	3c36 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3c42:	4631      	mov	r1, r6
    3c44:	4638      	mov	r0, r7
    3c46:	4798      	blx	r3
    3c48:	2800      	cmp	r0, #0
    3c4a:	d0ef      	beq.n	3c2c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3c4c:	4630      	mov	r0, r6
    3c4e:	f7fe fb61 	bl	2314 <bt_le_conn_params_valid>
    3c52:	2800      	cmp	r0, #0
    3c54:	d1f3      	bne.n	3c3e <le_param_req+0x22>
    3c56:	e7e9      	b.n	3c2c <le_param_req+0x10>
    3c58:	2000034c 	.word	0x2000034c

00003c5c <bt_conn_cb_register>:
	cb->_next = callback_list;
    3c5c:	4b02      	ldr	r3, [pc, #8]	; (3c68 <bt_conn_cb_register+0xc>)
    3c5e:	681a      	ldr	r2, [r3, #0]
    3c60:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    3c62:	6018      	str	r0, [r3, #0]
    3c64:	4770      	bx	lr
    3c66:	bf00      	nop
    3c68:	2000034c 	.word	0x2000034c

00003c6c <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    3c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3c70:	f8df 8200 	ldr.w	r8, [pc, #512]	; 3e74 <bt_conn_recv+0x208>
    3c74:	4e71      	ldr	r6, [pc, #452]	; (3e3c <bt_conn_recv+0x1d0>)
    3c76:	f8d8 7000 	ldr.w	r7, [r8]
{
    3c7a:	b086      	sub	sp, #24
    3c7c:	4692      	mov	sl, r2
    3c7e:	460d      	mov	r5, r1
    3c80:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3c82:	f00f ffed 	bl	13c60 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3c86:	9605      	str	r6, [sp, #20]
    3c88:	f8cd a010 	str.w	sl, [sp, #16]
    3c8c:	89ab      	ldrh	r3, [r5, #12]
    3c8e:	9303      	str	r3, [sp, #12]
    3c90:	8823      	ldrh	r3, [r4, #0]
    3c92:	9302      	str	r3, [sp, #8]
    3c94:	9001      	str	r0, [sp, #4]
    3c96:	9600      	str	r6, [sp, #0]
    3c98:	4b69      	ldr	r3, [pc, #420]	; (3e40 <bt_conn_recv+0x1d4>)
    3c9a:	496a      	ldr	r1, [pc, #424]	; (3e44 <bt_conn_recv+0x1d8>)
    3c9c:	486a      	ldr	r0, [pc, #424]	; (3e48 <bt_conn_recv+0x1dc>)
    3c9e:	4632      	mov	r2, r6
    3ca0:	47b8      	blx	r7

	/* Check packet boundary flags */
	switch (flags) {
    3ca2:	f1ba 0f01 	cmp.w	sl, #1
    3ca6:	46c1      	mov	r9, r8
    3ca8:	4637      	mov	r7, r6
    3caa:	d040      	beq.n	3d2e <bt_conn_recv+0xc2>
    3cac:	f1ba 0f02 	cmp.w	sl, #2
    3cb0:	f040 80a3 	bne.w	3dfa <bt_conn_recv+0x18e>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3cb4:	68ab      	ldr	r3, [r5, #8]

		BT_DBG("First, len %u final %u", buf->len, len);
    3cb6:	f8d9 6000 	ldr.w	r6, [r9]
		len = sys_le16_to_cpu(hdr->len);
    3cba:	f8b3 8000 	ldrh.w	r8, [r3]
    3cbe:	f00f ffcf 	bl	13c60 <_impl_k_current_get>
		BT_DBG("First, len %u final %u", buf->len, len);
    3cc2:	9704      	str	r7, [sp, #16]
    3cc4:	f8cd 800c 	str.w	r8, [sp, #12]
    3cc8:	89ab      	ldrh	r3, [r5, #12]
    3cca:	9302      	str	r3, [sp, #8]
    3ccc:	9001      	str	r0, [sp, #4]
    3cce:	4b5c      	ldr	r3, [pc, #368]	; (3e40 <bt_conn_recv+0x1d4>)
    3cd0:	9700      	str	r7, [sp, #0]
    3cd2:	463a      	mov	r2, r7
    3cd4:	495b      	ldr	r1, [pc, #364]	; (3e44 <bt_conn_recv+0x1d8>)
    3cd6:	485d      	ldr	r0, [pc, #372]	; (3e4c <bt_conn_recv+0x1e0>)
    3cd8:	47b0      	blx	r6

		if (conn->rx_len) {
    3cda:	8963      	ldrh	r3, [r4, #10]
    3cdc:	b15b      	cbz	r3, 3cf6 <bt_conn_recv+0x8a>
			BT_ERR("Unexpected first L2CAP frame");
    3cde:	9701      	str	r7, [sp, #4]
    3ce0:	9700      	str	r7, [sp, #0]
    3ce2:	485b      	ldr	r0, [pc, #364]	; (3e50 <bt_conn_recv+0x1e4>)
    3ce4:	f8d9 6000 	ldr.w	r6, [r9]
    3ce8:	4b55      	ldr	r3, [pc, #340]	; (3e40 <bt_conn_recv+0x1d4>)
    3cea:	4956      	ldr	r1, [pc, #344]	; (3e44 <bt_conn_recv+0x1d8>)
    3cec:	463a      	mov	r2, r7
    3cee:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    3cf0:	4620      	mov	r0, r4
    3cf2:	f7ff ff6f 	bl	3bd4 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3cf6:	89ab      	ldrh	r3, [r5, #12]
		BT_DBG("rx_len %u", conn->rx_len);
    3cf8:	f8d9 6000 	ldr.w	r6, [r9]
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3cfc:	eba8 0803 	sub.w	r8, r8, r3
    3d00:	f108 0804 	add.w	r8, r8, #4
    3d04:	f8a4 800a 	strh.w	r8, [r4, #10]
    3d08:	f00f ffaa 	bl	13c60 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    3d0c:	9703      	str	r7, [sp, #12]
    3d0e:	8963      	ldrh	r3, [r4, #10]
    3d10:	9302      	str	r3, [sp, #8]
    3d12:	9001      	str	r0, [sp, #4]
    3d14:	4b4a      	ldr	r3, [pc, #296]	; (3e40 <bt_conn_recv+0x1d4>)
    3d16:	9700      	str	r7, [sp, #0]
    3d18:	4a48      	ldr	r2, [pc, #288]	; (3e3c <bt_conn_recv+0x1d0>)
    3d1a:	494a      	ldr	r1, [pc, #296]	; (3e44 <bt_conn_recv+0x1d8>)
    3d1c:	484d      	ldr	r0, [pc, #308]	; (3e54 <bt_conn_recv+0x1e8>)
    3d1e:	47b0      	blx	r6
		if (conn->rx_len) {
    3d20:	8963      	ldrh	r3, [r4, #10]
    3d22:	2b00      	cmp	r3, #0
    3d24:	d057      	beq.n	3dd6 <bt_conn_recv+0x16a>
			conn->rx = buf;
    3d26:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3d28:	b006      	add	sp, #24
    3d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->rx_len) {
    3d2e:	8963      	ldrh	r3, [r4, #10]
    3d30:	b98b      	cbnz	r3, 3d56 <bt_conn_recv+0xea>
			BT_ERR("Unexpected L2CAP continuation");
    3d32:	9601      	str	r6, [sp, #4]
    3d34:	9600      	str	r6, [sp, #0]
    3d36:	f8d8 7000 	ldr.w	r7, [r8]
    3d3a:	4b41      	ldr	r3, [pc, #260]	; (3e40 <bt_conn_recv+0x1d4>)
    3d3c:	4941      	ldr	r1, [pc, #260]	; (3e44 <bt_conn_recv+0x1d8>)
    3d3e:	4846      	ldr	r0, [pc, #280]	; (3e58 <bt_conn_recv+0x1ec>)
    3d40:	4632      	mov	r2, r6
			BT_ERR("L2CAP data overflow");
    3d42:	47b8      	blx	r7
			bt_conn_reset_rx_state(conn);
    3d44:	4620      	mov	r0, r4
    3d46:	f7ff ff45 	bl	3bd4 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    3d4a:	4628      	mov	r0, r5
}
    3d4c:	b006      	add	sp, #24
    3d4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			net_buf_unref(buf);
    3d52:	f00e bec1 	b.w	12ad8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3d56:	89aa      	ldrh	r2, [r5, #12]
    3d58:	429a      	cmp	r2, r3
    3d5a:	d908      	bls.n	3d6e <bt_conn_recv+0x102>
			BT_ERR("L2CAP data overflow");
    3d5c:	9601      	str	r6, [sp, #4]
    3d5e:	9600      	str	r6, [sp, #0]
    3d60:	f8d8 7000 	ldr.w	r7, [r8]
    3d64:	4b36      	ldr	r3, [pc, #216]	; (3e40 <bt_conn_recv+0x1d4>)
    3d66:	4937      	ldr	r1, [pc, #220]	; (3e44 <bt_conn_recv+0x1d8>)
    3d68:	483c      	ldr	r0, [pc, #240]	; (3e5c <bt_conn_recv+0x1f0>)
    3d6a:	4632      	mov	r2, r6
    3d6c:	e7e9      	b.n	3d42 <bt_conn_recv+0xd6>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    3d6e:	f8d8 a000 	ldr.w	sl, [r8]
    3d72:	f00f ff75 	bl	13c60 <_impl_k_current_get>
    3d76:	9604      	str	r6, [sp, #16]
    3d78:	8963      	ldrh	r3, [r4, #10]
    3d7a:	9303      	str	r3, [sp, #12]
    3d7c:	89ab      	ldrh	r3, [r5, #12]
    3d7e:	9302      	str	r3, [sp, #8]
    3d80:	9001      	str	r0, [sp, #4]
    3d82:	4b2f      	ldr	r3, [pc, #188]	; (3e40 <bt_conn_recv+0x1d4>)
    3d84:	492f      	ldr	r1, [pc, #188]	; (3e44 <bt_conn_recv+0x1d8>)
    3d86:	4836      	ldr	r0, [pc, #216]	; (3e60 <bt_conn_recv+0x1f4>)
    3d88:	9600      	str	r6, [sp, #0]
    3d8a:	4632      	mov	r2, r6
    3d8c:	47d0      	blx	sl
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3d8e:	68e0      	ldr	r0, [r4, #12]
    3d90:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
    3d94:	3008      	adds	r0, #8
    3d96:	f00e ff12 	bl	12bbe <net_buf_simple_tailroom>
    3d9a:	4582      	cmp	sl, r0
    3d9c:	d908      	bls.n	3db0 <bt_conn_recv+0x144>
			BT_ERR("Not enough buffer space for L2CAP data");
    3d9e:	9601      	str	r6, [sp, #4]
    3da0:	9600      	str	r6, [sp, #0]
    3da2:	f8d8 7000 	ldr.w	r7, [r8]
    3da6:	4b26      	ldr	r3, [pc, #152]	; (3e40 <bt_conn_recv+0x1d4>)
    3da8:	4926      	ldr	r1, [pc, #152]	; (3e44 <bt_conn_recv+0x1d8>)
    3daa:	482e      	ldr	r0, [pc, #184]	; (3e64 <bt_conn_recv+0x1f8>)
    3dac:	4632      	mov	r2, r6
    3dae:	e7c8      	b.n	3d42 <bt_conn_recv+0xd6>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3db0:	68e0      	ldr	r0, [r4, #12]
    3db2:	89aa      	ldrh	r2, [r5, #12]
    3db4:	68a9      	ldr	r1, [r5, #8]
    3db6:	3008      	adds	r0, #8
    3db8:	f00e fecc 	bl	12b54 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3dbc:	8963      	ldrh	r3, [r4, #10]
    3dbe:	89aa      	ldrh	r2, [r5, #12]
    3dc0:	1a9b      	subs	r3, r3, r2
    3dc2:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    3dc4:	4628      	mov	r0, r5
    3dc6:	f00e fe87 	bl	12ad8 <net_buf_unref>
		if (conn->rx_len) {
    3dca:	8963      	ldrh	r3, [r4, #10]
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d1ab      	bne.n	3d28 <bt_conn_recv+0xbc>
		buf = conn->rx;
    3dd0:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    3dd2:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    3dd4:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    3dd6:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3dd8:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3dda:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    3ddc:	1d19      	adds	r1, r3, #4
    3dde:	4291      	cmp	r1, r2
    3de0:	d016      	beq.n	3e10 <bt_conn_recv+0x1a4>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    3de2:	9202      	str	r2, [sp, #8]
    3de4:	9301      	str	r3, [sp, #4]
    3de6:	9703      	str	r7, [sp, #12]
    3de8:	9700      	str	r7, [sp, #0]
    3dea:	f8d9 4000 	ldr.w	r4, [r9]
    3dee:	4b14      	ldr	r3, [pc, #80]	; (3e40 <bt_conn_recv+0x1d4>)
    3df0:	4a12      	ldr	r2, [pc, #72]	; (3e3c <bt_conn_recv+0x1d0>)
    3df2:	4914      	ldr	r1, [pc, #80]	; (3e44 <bt_conn_recv+0x1d8>)
    3df4:	481c      	ldr	r0, [pc, #112]	; (3e68 <bt_conn_recv+0x1fc>)
    3df6:	47a0      	blx	r4
    3df8:	e7a7      	b.n	3d4a <bt_conn_recv+0xde>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3dfa:	e88d 0440 	stmia.w	sp, {r6, sl}
    3dfe:	9602      	str	r6, [sp, #8]
    3e00:	f8d8 7000 	ldr.w	r7, [r8]
    3e04:	4b0e      	ldr	r3, [pc, #56]	; (3e40 <bt_conn_recv+0x1d4>)
    3e06:	490f      	ldr	r1, [pc, #60]	; (3e44 <bt_conn_recv+0x1d8>)
    3e08:	4818      	ldr	r0, [pc, #96]	; (3e6c <bt_conn_recv+0x200>)
    3e0a:	4632      	mov	r2, r6
    3e0c:	47b8      	blx	r7
    3e0e:	e799      	b.n	3d44 <bt_conn_recv+0xd8>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    3e10:	f8d9 6000 	ldr.w	r6, [r9]
    3e14:	f00f ff24 	bl	13c60 <_impl_k_current_get>
    3e18:	9703      	str	r7, [sp, #12]
    3e1a:	89ab      	ldrh	r3, [r5, #12]
    3e1c:	9302      	str	r3, [sp, #8]
    3e1e:	9001      	str	r0, [sp, #4]
    3e20:	9700      	str	r7, [sp, #0]
    3e22:	4b07      	ldr	r3, [pc, #28]	; (3e40 <bt_conn_recv+0x1d4>)
    3e24:	4a05      	ldr	r2, [pc, #20]	; (3e3c <bt_conn_recv+0x1d0>)
    3e26:	4907      	ldr	r1, [pc, #28]	; (3e44 <bt_conn_recv+0x1d8>)
    3e28:	4811      	ldr	r0, [pc, #68]	; (3e70 <bt_conn_recv+0x204>)
    3e2a:	47b0      	blx	r6
	bt_l2cap_recv(conn, buf);
    3e2c:	4629      	mov	r1, r5
    3e2e:	4620      	mov	r0, r4
}
    3e30:	b006      	add	sp, #24
    3e32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_l2cap_recv(conn, buf);
    3e36:	f001 b8c5 	b.w	4fc4 <bt_l2cap_recv>
    3e3a:	bf00      	nop
    3e3c:	00014891 	.word	0x00014891
    3e40:	000158dc 	.word	0x000158dc
    3e44:	00015639 	.word	0x00015639
    3e48:	00015aa6 	.word	0x00015aa6
    3e4c:	00015ad7 	.word	0x00015ad7
    3e50:	00015b03 	.word	0x00015b03
    3e54:	00015b30 	.word	0x00015b30
    3e58:	00015b4f 	.word	0x00015b4f
    3e5c:	00015b7d 	.word	0x00015b7d
    3e60:	00015ba1 	.word	0x00015ba1
    3e64:	00015bcd 	.word	0x00015bcd
    3e68:	00015c32 	.word	0x00015c32
    3e6c:	00015c04 	.word	0x00015c04
    3e70:	00015c5e 	.word	0x00015c5e
    3e74:	20003aa4 	.word	0x20003aa4

00003e78 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    3e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e7c:	460d      	mov	r5, r1
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    3e7e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3ef8 <bt_conn_send_cb+0x80>
    3e82:	4c18      	ldr	r4, [pc, #96]	; (3ee4 <bt_conn_send_cb+0x6c>)
    3e84:	f8d8 9000 	ldr.w	r9, [r8]
{
    3e88:	b087      	sub	sp, #28
    3e8a:	4606      	mov	r6, r0
    3e8c:	4617      	mov	r7, r2
    3e8e:	f00f fee7 	bl	13c60 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    3e92:	89ab      	ldrh	r3, [r5, #12]
    3e94:	9405      	str	r4, [sp, #20]
    3e96:	9704      	str	r7, [sp, #16]
    3e98:	9303      	str	r3, [sp, #12]
    3e9a:	8833      	ldrh	r3, [r6, #0]
    3e9c:	9302      	str	r3, [sp, #8]
    3e9e:	9001      	str	r0, [sp, #4]
    3ea0:	4b11      	ldr	r3, [pc, #68]	; (3ee8 <bt_conn_send_cb+0x70>)
    3ea2:	9400      	str	r4, [sp, #0]
    3ea4:	4622      	mov	r2, r4
    3ea6:	4911      	ldr	r1, [pc, #68]	; (3eec <bt_conn_send_cb+0x74>)
    3ea8:	4811      	ldr	r0, [pc, #68]	; (3ef0 <bt_conn_send_cb+0x78>)
    3eaa:	47c8      	blx	r9

	if (conn->state != BT_CONN_CONNECTED) {
    3eac:	7a73      	ldrb	r3, [r6, #9]
    3eae:	2b03      	cmp	r3, #3
    3eb0:	d010      	beq.n	3ed4 <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    3eb2:	4b0d      	ldr	r3, [pc, #52]	; (3ee8 <bt_conn_send_cb+0x70>)
    3eb4:	490d      	ldr	r1, [pc, #52]	; (3eec <bt_conn_send_cb+0x74>)
    3eb6:	480f      	ldr	r0, [pc, #60]	; (3ef4 <bt_conn_send_cb+0x7c>)
    3eb8:	9401      	str	r4, [sp, #4]
    3eba:	4622      	mov	r2, r4
    3ebc:	9400      	str	r4, [sp, #0]
    3ebe:	f8d8 6000 	ldr.w	r6, [r8]
    3ec2:	47b0      	blx	r6
		net_buf_unref(buf);
    3ec4:	4628      	mov	r0, r5
    3ec6:	f00e fe07 	bl	12ad8 <net_buf_unref>
		return -ENOTCONN;
    3eca:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    3ece:	b007      	add	sp, #28
    3ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_put(&conn->tx_queue, buf);
    3ed4:	f106 002c 	add.w	r0, r6, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    3ed8:	616f      	str	r7, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    3eda:	4629      	mov	r1, r5
    3edc:	f00e fdef 	bl	12abe <net_buf_put>
	return 0;
    3ee0:	2000      	movs	r0, #0
    3ee2:	e7f4      	b.n	3ece <bt_conn_send_cb+0x56>
    3ee4:	00014891 	.word	0x00014891
    3ee8:	000158e9 	.word	0x000158e9
    3eec:	00015639 	.word	0x00015639
    3ef0:	00015cc2 	.word	0x00015cc2
    3ef4:	00015cf7 	.word	0x00015cf7
    3ef8:	20003aa4 	.word	0x20003aa4

00003efc <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3efc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    3f00:	4b14      	ldr	r3, [pc, #80]	; (3f54 <bt_conn_notify_tx+0x58>)
    3f02:	4d15      	ldr	r5, [pc, #84]	; (3f58 <bt_conn_notify_tx+0x5c>)
    3f04:	681c      	ldr	r4, [r3, #0]
{
    3f06:	4606      	mov	r6, r0
    3f08:	f00f feaa 	bl	13c60 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    3f0c:	4a13      	ldr	r2, [pc, #76]	; (3f5c <bt_conn_notify_tx+0x60>)
    3f0e:	9001      	str	r0, [sp, #4]
    3f10:	9203      	str	r2, [sp, #12]
    3f12:	9602      	str	r6, [sp, #8]
    3f14:	9200      	str	r2, [sp, #0]
    3f16:	4b12      	ldr	r3, [pc, #72]	; (3f60 <bt_conn_notify_tx+0x64>)
    3f18:	4912      	ldr	r1, [pc, #72]	; (3f64 <bt_conn_notify_tx+0x68>)
    3f1a:	4813      	ldr	r0, [pc, #76]	; (3f68 <bt_conn_notify_tx+0x6c>)
    3f1c:	47a0      	blx	r4

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3f1e:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3f22:	f04f 0800 	mov.w	r8, #0
    3f26:	2100      	movs	r1, #0
    3f28:	4638      	mov	r0, r7
    3f2a:	f00f fc09 	bl	13740 <_impl_k_queue_get>
    3f2e:	4604      	mov	r4, r0
    3f30:	b910      	cbnz	r0, 3f38 <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3f32:	b004      	add	sp, #16
    3f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3f38:	6863      	ldr	r3, [r4, #4]
    3f3a:	b10b      	cbz	r3, 3f40 <bt_conn_notify_tx+0x44>
			tx->cb(conn);
    3f3c:	4630      	mov	r0, r6
    3f3e:	4798      	blx	r3
    3f40:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    3f42:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3f44:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3f46:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3f4a:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d1ea      	bne.n	3f26 <bt_conn_notify_tx+0x2a>
	list->tail = node;
    3f50:	606c      	str	r4, [r5, #4]
    3f52:	e7e6      	b.n	3f22 <bt_conn_notify_tx+0x26>
    3f54:	20003aa4 	.word	0x20003aa4
    3f58:	20000400 	.word	0x20000400
    3f5c:	00014891 	.word	0x00014891
    3f60:	000158f9 	.word	0x000158f9
    3f64:	00015639 	.word	0x00015639
    3f68:	000159dd 	.word	0x000159dd

00003f6c <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    3f70:	4e5a      	ldr	r6, [pc, #360]	; (40dc <send_frag+0x170>)
    3f72:	4f5b      	ldr	r7, [pc, #364]	; (40e0 <send_frag+0x174>)
    3f74:	f8d6 9000 	ldr.w	r9, [r6]
{
    3f78:	b089      	sub	sp, #36	; 0x24
    3f7a:	4688      	mov	r8, r1
    3f7c:	4614      	mov	r4, r2
    3f7e:	4605      	mov	r5, r0
    3f80:	469a      	mov	sl, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3f82:	f00f fe6d 	bl	13c60 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    3f86:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    3f8a:	9304      	str	r3, [sp, #16]
    3f8c:	463a      	mov	r2, r7
    3f8e:	4b55      	ldr	r3, [pc, #340]	; (40e4 <send_frag+0x178>)
    3f90:	9001      	str	r0, [sp, #4]
    3f92:	4955      	ldr	r1, [pc, #340]	; (40e8 <send_frag+0x17c>)
    3f94:	4855      	ldr	r0, [pc, #340]	; (40ec <send_frag+0x180>)
    3f96:	9706      	str	r7, [sp, #24]
    3f98:	9405      	str	r4, [sp, #20]
    3f9a:	f8cd 800c 	str.w	r8, [sp, #12]
    3f9e:	9502      	str	r5, [sp, #8]
    3fa0:	9700      	str	r7, [sp, #0]
    3fa2:	47c8      	blx	r9
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3fa8:	4851      	ldr	r0, [pc, #324]	; (40f0 <send_frag+0x184>)
    3faa:	f00f febb 	bl	13d24 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    3fae:	4b51      	ldr	r3, [pc, #324]	; (40f4 <send_frag+0x188>)
    3fb0:	f103 0048 	add.w	r0, r3, #72	; 0x48
    3fb4:	f7ff fe08 	bl	3bc8 <atomic_get>
    3fb8:	46b1      	mov	r9, r6
    3fba:	b130      	cbz	r0, 3fca <send_frag+0x5e>
		if (conns[i].state == BT_CONN_CONNECTED ||
    3fbc:	7a5a      	ldrb	r2, [r3, #9]
    3fbe:	3a03      	subs	r2, #3
    3fc0:	2a01      	cmp	r2, #1
    3fc2:	d802      	bhi.n	3fca <send_frag+0x5e>
			bt_conn_notify_tx(&conns[i]);
    3fc4:	4618      	mov	r0, r3
    3fc6:	f7ff ff99 	bl	3efc <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3fca:	7a6b      	ldrb	r3, [r5, #9]
    3fcc:	2b03      	cmp	r3, #3
    3fce:	d166      	bne.n	409e <send_frag+0x132>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    3fd0:	2104      	movs	r1, #4
    3fd2:	f108 0008 	add.w	r0, r8, #8
    3fd6:	f00e fdce 	bl	12b76 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3fda:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    3fdc:	f8d8 b014 	ldr.w	fp, [r8, #20]
    3fe0:	4e45      	ldr	r6, [pc, #276]	; (40f8 <send_frag+0x18c>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3fe2:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3fe6:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3fe8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
	BT_DBG("conn %p cb %p", conn, cb);
    3fec:	f8d9 4000 	ldr.w	r4, [r9]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3ff0:	3b04      	subs	r3, #4
    3ff2:	8043      	strh	r3, [r0, #2]
    3ff4:	2302      	movs	r3, #2
    3ff6:	f888 3014 	strb.w	r3, [r8, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3ffa:	f00f fe31 	bl	13c60 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    3ffe:	9704      	str	r7, [sp, #16]
    4000:	9001      	str	r0, [sp, #4]
    4002:	f8cd b00c 	str.w	fp, [sp, #12]
    4006:	9502      	str	r5, [sp, #8]
    4008:	9700      	str	r7, [sp, #0]
    400a:	4b3c      	ldr	r3, [pc, #240]	; (40fc <send_frag+0x190>)
    400c:	4a34      	ldr	r2, [pc, #208]	; (40e0 <send_frag+0x174>)
    400e:	4936      	ldr	r1, [pc, #216]	; (40e8 <send_frag+0x17c>)
    4010:	483b      	ldr	r0, [pc, #236]	; (4100 <send_frag+0x194>)
    4012:	47a0      	blx	r4
    4014:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4016:	6872      	ldr	r2, [r6, #4]
	return node->next;
    4018:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    401a:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    401c:	4294      	cmp	r4, r2
	list->tail = node;
    401e:	bf08      	it	eq
    4020:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    4022:	f8c4 b004 	str.w	fp, [r4, #4]
	__asm__ volatile(
    4026:	f04f 0320 	mov.w	r3, #32
    402a:	f3ef 8211 	mrs	r2, BASEPRI
    402e:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    4032:	2300      	movs	r3, #0
    4034:	6023      	str	r3, [r4, #0]
    4036:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    4038:	2b00      	cmp	r3, #0
    403a:	d13f      	bne.n	40bc <send_frag+0x150>
	list->tail = node;
    403c:	616c      	str	r4, [r5, #20]
	list->head = node;
    403e:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4040:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    4044:	4640      	mov	r0, r8
    4046:	f7fe fa15 	bl	2474 <bt_send>
	if (err) {
    404a:	2800      	cmp	r0, #0
    404c:	d042      	beq.n	40d4 <send_frag+0x168>
		BT_ERR("Unable to send to driver (err %d)", err);
    404e:	9001      	str	r0, [sp, #4]
    4050:	9702      	str	r7, [sp, #8]
    4052:	9700      	str	r7, [sp, #0]
    4054:	f8d9 7000 	ldr.w	r7, [r9]
    4058:	4b22      	ldr	r3, [pc, #136]	; (40e4 <send_frag+0x178>)
    405a:	4a21      	ldr	r2, [pc, #132]	; (40e0 <send_frag+0x174>)
    405c:	4922      	ldr	r1, [pc, #136]	; (40e8 <send_frag+0x17c>)
    405e:	4829      	ldr	r0, [pc, #164]	; (4104 <send_frag+0x198>)
    4060:	47b8      	blx	r7
	__asm__ volatile(
    4062:	f04f 0320 	mov.w	r3, #32
    4066:	f3ef 8111 	mrs	r1, BASEPRI
    406a:	f383 8811 	msr	BASEPRI, r3
    406e:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4070:	2200      	movs	r2, #0
    4072:	b153      	cbz	r3, 408a <send_frag+0x11e>
    4074:	429c      	cmp	r4, r3
    4076:	d12a      	bne.n	40ce <send_frag+0x162>
    4078:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    407a:	bb12      	cbnz	r2, 40c2 <send_frag+0x156>
    407c:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    407e:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4080:	4294      	cmp	r4, r2
    4082:	d100      	bne.n	4086 <send_frag+0x11a>
	list->tail = node;
    4084:	616b      	str	r3, [r5, #20]
	parent->next = child;
    4086:	2300      	movs	r3, #0
    4088:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    408a:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    408e:	2300      	movs	r3, #0
    4090:	6063      	str	r3, [r4, #4]
    4092:	6833      	ldr	r3, [r6, #0]
    4094:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4096:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    4098:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    409a:	b903      	cbnz	r3, 409e <send_frag+0x132>
	list->tail = node;
    409c:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    409e:	4814      	ldr	r0, [pc, #80]	; (40f0 <send_frag+0x184>)
    40a0:	f00f fe18 	bl	13cd4 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    40a4:	f1ba 0f00 	cmp.w	sl, #0
    40a8:	d004      	beq.n	40b4 <send_frag+0x148>
		net_buf_unref(buf);
    40aa:	4640      	mov	r0, r8
    40ac:	f00e fd14 	bl	12ad8 <net_buf_unref>
	}
	return false;
    40b0:	f04f 0a00 	mov.w	sl, #0
}
    40b4:	4650      	mov	r0, sl
    40b6:	b009      	add	sp, #36	; 0x24
    40b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
    40bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    40be:	616c      	str	r4, [r5, #20]
    40c0:	e7be      	b.n	4040 <send_frag+0xd4>
	parent->next = child;
    40c2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    40c4:	696b      	ldr	r3, [r5, #20]
    40c6:	429c      	cmp	r4, r3
	list->tail = node;
    40c8:	bf08      	it	eq
    40ca:	616a      	streq	r2, [r5, #20]
    40cc:	e7db      	b.n	4086 <send_frag+0x11a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    40ce:	461a      	mov	r2, r3
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	e7ce      	b.n	4072 <send_frag+0x106>
	return true;
    40d4:	f04f 0a01 	mov.w	sl, #1
    40d8:	e7ec      	b.n	40b4 <send_frag+0x148>
    40da:	bf00      	nop
    40dc:	20003aa4 	.word	0x20003aa4
    40e0:	00014891 	.word	0x00014891
    40e4:	0001591a 	.word	0x0001591a
    40e8:	00015639 	.word	0x00015639
    40ec:	00015da8 	.word	0x00015da8
    40f0:	20003b34 	.word	0x20003b34
    40f4:	20000360 	.word	0x20000360
    40f8:	20000400 	.word	0x20000400
    40fc:	0001590b 	.word	0x0001590b
    4100:	00015de0 	.word	0x00015de0
    4104:	00015081 	.word	0x00015081

00004108 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    410a:	4c17      	ldr	r4, [pc, #92]	; (4168 <bt_conn_add_le+0x60>)
    410c:	f104 0648 	add.w	r6, r4, #72	; 0x48
{
    4110:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    4112:	4630      	mov	r0, r6
    4114:	f7ff fd58 	bl	3bc8 <atomic_get>
    4118:	4605      	mov	r5, r0
    411a:	b108      	cbz	r0, 4120 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    411c:	2000      	movs	r0, #0
    411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    4120:	4601      	mov	r1, r0
    4122:	22a0      	movs	r2, #160	; 0xa0
    4124:	4620      	mov	r0, r4
    4126:	f7fd fda7 	bl	1c78 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    412a:	f3bf 8f5b 	dmb	ish
    412e:	2301      	movs	r3, #1
    4130:	e856 2f00 	ldrex	r2, [r6]
    4134:	e846 3100 	strex	r1, r3, [r6]
    4138:	2900      	cmp	r1, #0
    413a:	d1f9      	bne.n	4130 <bt_conn_add_le+0x28>
    413c:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    4140:	2207      	movs	r2, #7
    4142:	4639      	mov	r1, r7
    4144:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    4148:	f7fd fd6a 	bl	1c20 <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    414c:	2318      	movs	r3, #24
    414e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4152:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4154:	f104 0078 	add.w	r0, r4, #120	; 0x78
	conn->type = BT_CONN_TYPE_LE;
    4158:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    415a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    415e:	4903      	ldr	r1, [pc, #12]	; (416c <bt_conn_add_le+0x64>)
    4160:	f010 f8b4 	bl	142cc <k_delayed_work_init>
			conn = &conns[i];
    4164:	4620      	mov	r0, r4

	return conn;
}
    4166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4168:	20000360 	.word	0x20000360
    416c:	00004911 	.word	0x00004911

00004170 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4170:	b538      	push	{r3, r4, r5, lr}
    4172:	460d      	mov	r5, r1
    4174:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    4176:	f100 014c 	add.w	r1, r0, #76	; 0x4c
    417a:	2207      	movs	r2, #7
    417c:	4628      	mov	r0, r5
    417e:	f7fd fd3a 	bl	1bf6 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4182:	b160      	cbz	r0, 419e <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4184:	78e3      	ldrb	r3, [r4, #3]
    4186:	2207      	movs	r2, #7
    4188:	b933      	cbnz	r3, 4198 <bt_conn_addr_le_cmp+0x28>
    418a:	f104 015a 	add.w	r1, r4, #90	; 0x5a
    418e:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    4190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4194:	f7fd bd2f 	b.w	1bf6 <memcmp>
    4198:	f104 0153 	add.w	r1, r4, #83	; 0x53
    419c:	e7f7      	b.n	418e <bt_conn_addr_le_cmp+0x1e>
    419e:	bd38      	pop	{r3, r4, r5, pc}

000041a0 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    41a0:	b570      	push	{r4, r5, r6, lr}
    41a2:	4604      	mov	r4, r0
    41a4:	b086      	sub	sp, #24
	atomic_inc(&conn->ref);
    41a6:	f100 0548 	add.w	r5, r0, #72	; 0x48
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    41aa:	f3bf 8f5b 	dmb	ish
    41ae:	e855 3f00 	ldrex	r3, [r5]
    41b2:	3301      	adds	r3, #1
    41b4:	e845 3200 	strex	r2, r3, [r5]
    41b8:	2a00      	cmp	r2, #0
    41ba:	d1f8      	bne.n	41ae <bt_conn_ref+0xe>
    41bc:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    41c0:	4b0a      	ldr	r3, [pc, #40]	; (41ec <bt_conn_ref+0x4c>)
    41c2:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    41c4:	f00f fd4c 	bl	13c60 <_impl_k_current_get>
    41c8:	4603      	mov	r3, r0
    41ca:	4628      	mov	r0, r5
    41cc:	8821      	ldrh	r1, [r4, #0]
    41ce:	f7ff fcfb 	bl	3bc8 <atomic_get>
    41d2:	4a07      	ldr	r2, [pc, #28]	; (41f0 <bt_conn_ref+0x50>)
    41d4:	9003      	str	r0, [sp, #12]
    41d6:	9102      	str	r1, [sp, #8]
    41d8:	e88d 000c 	stmia.w	sp, {r2, r3}
    41dc:	9204      	str	r2, [sp, #16]
    41de:	4b05      	ldr	r3, [pc, #20]	; (41f4 <bt_conn_ref+0x54>)
    41e0:	4905      	ldr	r1, [pc, #20]	; (41f8 <bt_conn_ref+0x58>)
    41e2:	4806      	ldr	r0, [pc, #24]	; (41fc <bt_conn_ref+0x5c>)
    41e4:	47b0      	blx	r6

	return conn;
}
    41e6:	4620      	mov	r0, r4
    41e8:	b006      	add	sp, #24
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	20003aa4 	.word	0x20003aa4
    41f0:	00014891 	.word	0x00014891
    41f4:	00015969 	.word	0x00015969
    41f8:	00015639 	.word	0x00015639
    41fc:	00015c9c 	.word	0x00015c9c

00004200 <bt_conn_lookup_handle>:
{
    4200:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    4202:	4b0a      	ldr	r3, [pc, #40]	; (422c <bt_conn_lookup_handle+0x2c>)
{
    4204:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4206:	f103 0048 	add.w	r0, r3, #72	; 0x48
    420a:	f7ff fcdd 	bl	3bc8 <atomic_get>
    420e:	b158      	cbz	r0, 4228 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4210:	7a5a      	ldrb	r2, [r3, #9]
    4212:	3a03      	subs	r2, #3
    4214:	2a01      	cmp	r2, #1
    4216:	d807      	bhi.n	4228 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    4218:	881a      	ldrh	r2, [r3, #0]
    421a:	428a      	cmp	r2, r1
    421c:	d104      	bne.n	4228 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    421e:	4618      	mov	r0, r3
}
    4220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    4224:	f7ff bfbc 	b.w	41a0 <bt_conn_ref>
}
    4228:	2000      	movs	r0, #0
    422a:	bd08      	pop	{r3, pc}
    422c:	20000360 	.word	0x20000360

00004230 <bt_conn_lookup_addr_le>:
{
    4230:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4232:	4c0a      	ldr	r4, [pc, #40]	; (425c <bt_conn_lookup_addr_le+0x2c>)
{
    4234:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4236:	f104 0048 	add.w	r0, r4, #72	; 0x48
    423a:	f7ff fcc5 	bl	3bc8 <atomic_get>
    423e:	b150      	cbz	r0, 4256 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4240:	78a3      	ldrb	r3, [r4, #2]
    4242:	b943      	cbnz	r3, 4256 <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4244:	4620      	mov	r0, r4
    4246:	f7ff ff93 	bl	4170 <bt_conn_addr_le_cmp>
    424a:	b920      	cbnz	r0, 4256 <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    424c:	4620      	mov	r0, r4
}
    424e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    4252:	f7ff bfa5 	b.w	41a0 <bt_conn_ref>
}
    4256:	2000      	movs	r0, #0
    4258:	bd10      	pop	{r4, pc}
    425a:	bf00      	nop
    425c:	20000360 	.word	0x20000360

00004260 <bt_conn_lookup_state_le>:
{
    4260:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    4262:	4c0d      	ldr	r4, [pc, #52]	; (4298 <bt_conn_lookup_state_le+0x38>)
{
    4264:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    4266:	f104 0048 	add.w	r0, r4, #72	; 0x48
{
    426a:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    426c:	f7ff fcac 	bl	3bc8 <atomic_get>
    4270:	b180      	cbz	r0, 4294 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4272:	78a2      	ldrb	r2, [r4, #2]
    4274:	b972      	cbnz	r2, 4294 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4276:	b93b      	cbnz	r3, 4288 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4278:	7a63      	ldrb	r3, [r4, #9]
    427a:	42ab      	cmp	r3, r5
    427c:	d10a      	bne.n	4294 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    427e:	4806      	ldr	r0, [pc, #24]	; (4298 <bt_conn_lookup_state_le+0x38>)
}
    4280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    4284:	f7ff bf8c 	b.w	41a0 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4288:	4619      	mov	r1, r3
    428a:	4620      	mov	r0, r4
    428c:	f7ff ff70 	bl	4170 <bt_conn_addr_le_cmp>
    4290:	2800      	cmp	r0, #0
    4292:	d0f1      	beq.n	4278 <bt_conn_lookup_state_le+0x18>
}
    4294:	2000      	movs	r0, #0
    4296:	bd38      	pop	{r3, r4, r5, pc}
    4298:	20000360 	.word	0x20000360

0000429c <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    429c:	b570      	push	{r4, r5, r6, lr}
    429e:	4605      	mov	r5, r0
    42a0:	b086      	sub	sp, #24
	atomic_dec(&conn->ref);
    42a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    42a6:	f3bf 8f5b 	dmb	ish
    42aa:	e854 3f00 	ldrex	r3, [r4]
    42ae:	3b01      	subs	r3, #1
    42b0:	e844 3200 	strex	r2, r3, [r4]
    42b4:	2a00      	cmp	r2, #0
    42b6:	d1f8      	bne.n	42aa <bt_conn_unref+0xe>
    42b8:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    42bc:	4b0a      	ldr	r3, [pc, #40]	; (42e8 <bt_conn_unref+0x4c>)
    42be:	681e      	ldr	r6, [r3, #0]
    42c0:	f00f fcce 	bl	13c60 <_impl_k_current_get>
    42c4:	4603      	mov	r3, r0
    42c6:	4620      	mov	r0, r4
    42c8:	8829      	ldrh	r1, [r5, #0]
    42ca:	f7ff fc7d 	bl	3bc8 <atomic_get>
    42ce:	4a07      	ldr	r2, [pc, #28]	; (42ec <bt_conn_unref+0x50>)
    42d0:	9003      	str	r0, [sp, #12]
    42d2:	9102      	str	r1, [sp, #8]
    42d4:	e88d 000c 	stmia.w	sp, {r2, r3}
    42d8:	9204      	str	r2, [sp, #16]
    42da:	4b05      	ldr	r3, [pc, #20]	; (42f0 <bt_conn_unref+0x54>)
    42dc:	4905      	ldr	r1, [pc, #20]	; (42f4 <bt_conn_unref+0x58>)
    42de:	4806      	ldr	r0, [pc, #24]	; (42f8 <bt_conn_unref+0x5c>)
    42e0:	47b0      	blx	r6
}
    42e2:	b006      	add	sp, #24
    42e4:	bd70      	pop	{r4, r5, r6, pc}
    42e6:	bf00      	nop
    42e8:	20003aa4 	.word	0x20003aa4
    42ec:	00014891 	.word	0x00014891
    42f0:	00015975 	.word	0x00015975
    42f4:	00015639 	.word	0x00015639
    42f8:	00015c9c 	.word	0x00015c9c

000042fc <conn_cleanup>:
{
    42fc:	b538      	push	{r3, r4, r5, lr}
    42fe:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4300:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    4304:	2100      	movs	r1, #0
    4306:	4628      	mov	r0, r5
    4308:	f00e fbbc 	bl	12a84 <net_buf_get>
    430c:	b950      	cbnz	r0, 4324 <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    430e:	4620      	mov	r0, r4
    4310:	f7ff fdf4 	bl	3efc <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    4314:	4620      	mov	r0, r4
    4316:	f7ff fc5d 	bl	3bd4 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    431a:	4620      	mov	r0, r4
}
    431c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4320:	f7ff bfbc 	b.w	429c <bt_conn_unref>
		net_buf_unref(buf);
    4324:	f00e fbd8 	bl	12ad8 <net_buf_unref>
    4328:	e7ec      	b.n	4304 <conn_cleanup+0x8>
	...

0000432c <bt_conn_prepare_events>:
{
    432c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	BT_DBG("");
    4330:	4d2e      	ldr	r5, [pc, #184]	; (43ec <bt_conn_prepare_events+0xc0>)
    4332:	4c2f      	ldr	r4, [pc, #188]	; (43f0 <bt_conn_prepare_events+0xc4>)
    4334:	682f      	ldr	r7, [r5, #0]
{
    4336:	4606      	mov	r6, r0
    4338:	f00f fc92 	bl	13c60 <_impl_k_current_get>
	BT_DBG("");
    433c:	4b2d      	ldr	r3, [pc, #180]	; (43f4 <bt_conn_prepare_events+0xc8>)
    433e:	9001      	str	r0, [sp, #4]
    4340:	4622      	mov	r2, r4
    4342:	492d      	ldr	r1, [pc, #180]	; (43f8 <bt_conn_prepare_events+0xcc>)
    4344:	482d      	ldr	r0, [pc, #180]	; (43fc <bt_conn_prepare_events+0xd0>)
    4346:	9402      	str	r4, [sp, #8]
    4348:	9400      	str	r4, [sp, #0]
    434a:	47b8      	blx	r7
	conn_change.signaled = 0;
    434c:	4b2c      	ldr	r3, [pc, #176]	; (4400 <bt_conn_prepare_events+0xd4>)
    434e:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4350:	2101      	movs	r1, #1
    4352:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    4354:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4356:	f010 f900 	bl	1455a <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    435a:	4b2a      	ldr	r3, [pc, #168]	; (4404 <bt_conn_prepare_events+0xd8>)
    435c:	f103 0048 	add.w	r0, r3, #72	; 0x48
    4360:	f7ff fc32 	bl	3bc8 <atomic_get>
    4364:	462a      	mov	r2, r5
    4366:	461f      	mov	r7, r3
    4368:	b918      	cbnz	r0, 4372 <bt_conn_prepare_events+0x46>
			continue;
    436a:	2001      	movs	r0, #1
}
    436c:	b004      	add	sp, #16
    436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4372:	7a59      	ldrb	r1, [r3, #9]
    4374:	b999      	cbnz	r1, 439e <bt_conn_prepare_events+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4376:	f3bf 8f5b 	dmb	ish
    437a:	1d19      	adds	r1, r3, #4
    437c:	e851 0f00 	ldrex	r0, [r1]
    4380:	f020 0540 	bic.w	r5, r0, #64	; 0x40
    4384:	e841 5e00 	strex	lr, r5, [r1]
    4388:	f1be 0f00 	cmp.w	lr, #0
    438c:	d1f6      	bne.n	437c <bt_conn_prepare_events+0x50>
    438e:	f3bf 8f5b 	dmb	ish
    4392:	0641      	lsls	r1, r0, #25
    4394:	d503      	bpl.n	439e <bt_conn_prepare_events+0x72>
			conn_cleanup(conn);
    4396:	4618      	mov	r0, r3
    4398:	f7ff ffb0 	bl	42fc <conn_cleanup>
    439c:	e7e5      	b.n	436a <bt_conn_prepare_events+0x3e>
		if (conn->state != BT_CONN_CONNECTED) {
    439e:	7a7d      	ldrb	r5, [r7, #9]
    43a0:	2d03      	cmp	r5, #3
    43a2:	d1e2      	bne.n	436a <bt_conn_prepare_events+0x3e>
		BT_DBG("Adding conn %p to poll list", conn);
    43a4:	f8d2 8000 	ldr.w	r8, [r2]
    43a8:	f00f fc5a 	bl	13c60 <_impl_k_current_get>
    43ac:	4b11      	ldr	r3, [pc, #68]	; (43f4 <bt_conn_prepare_events+0xc8>)
    43ae:	9001      	str	r0, [sp, #4]
    43b0:	4a0f      	ldr	r2, [pc, #60]	; (43f0 <bt_conn_prepare_events+0xc4>)
    43b2:	4911      	ldr	r1, [pc, #68]	; (43f8 <bt_conn_prepare_events+0xcc>)
    43b4:	4814      	ldr	r0, [pc, #80]	; (4408 <bt_conn_prepare_events+0xdc>)
    43b6:	9403      	str	r4, [sp, #12]
    43b8:	9702      	str	r7, [sp, #8]
    43ba:	9400      	str	r4, [sp, #0]
    43bc:	47c0      	blx	r8
		k_poll_event_init(&events[ev_count],
    43be:	4b13      	ldr	r3, [pc, #76]	; (440c <bt_conn_prepare_events+0xe0>)
    43c0:	2200      	movs	r2, #0
    43c2:	2104      	movs	r1, #4
    43c4:	f106 0014 	add.w	r0, r6, #20
    43c8:	f010 f8c7 	bl	1455a <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    43cc:	2301      	movs	r3, #1
    43ce:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    43d2:	f106 0028 	add.w	r0, r6, #40	; 0x28
    43d6:	4b0e      	ldr	r3, [pc, #56]	; (4410 <bt_conn_prepare_events+0xe4>)
    43d8:	2200      	movs	r2, #0
    43da:	2104      	movs	r1, #4
    43dc:	f010 f8bd 	bl	1455a <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    43e0:	2302      	movs	r3, #2
    43e2:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    43e6:	4628      	mov	r0, r5
	return ev_count;
    43e8:	e7c0      	b.n	436c <bt_conn_prepare_events+0x40>
    43ea:	bf00      	nop
    43ec:	20003aa4 	.word	0x20003aa4
    43f0:	00014891 	.word	0x00014891
    43f4:	0001592d 	.word	0x0001592d
    43f8:	00015639 	.word	0x00015639
    43fc:	000159fa 	.word	0x000159fa
    4400:	20003bd8 	.word	0x20003bd8
    4404:	20000360 	.word	0x20000360
    4408:	00015a10 	.word	0x00015a10
    440c:	20000378 	.word	0x20000378
    4410:	2000038c 	.word	0x2000038c

00004414 <bt_conn_set_state>:
{
    4414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4418:	4604      	mov	r4, r0
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    441a:	4f72      	ldr	r7, [pc, #456]	; (45e4 <bt_conn_set_state+0x1d0>)
    441c:	4d72      	ldr	r5, [pc, #456]	; (45e8 <bt_conn_set_state+0x1d4>)
    441e:	683e      	ldr	r6, [r7, #0]
{
    4420:	b087      	sub	sp, #28
    4422:	4688      	mov	r8, r1
    4424:	f00f fc1c 	bl	13c60 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4428:	7a63      	ldrb	r3, [r4, #9]
    442a:	4970      	ldr	r1, [pc, #448]	; (45ec <bt_conn_set_state+0x1d8>)
    442c:	9001      	str	r0, [sp, #4]
    442e:	2b04      	cmp	r3, #4
    4430:	bf96      	itet	ls
    4432:	4a6f      	ldrls	r2, [pc, #444]	; (45f0 <bt_conn_set_state+0x1dc>)
    4434:	4b6f      	ldrhi	r3, [pc, #444]	; (45f4 <bt_conn_set_state+0x1e0>)
    4436:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    443a:	9302      	str	r3, [sp, #8]
    443c:	f1b8 0f04 	cmp.w	r8, #4
    4440:	bf96      	itet	ls
    4442:	4a6b      	ldrls	r2, [pc, #428]	; (45f0 <bt_conn_set_state+0x1dc>)
    4444:	4a6b      	ldrhi	r2, [pc, #428]	; (45f4 <bt_conn_set_state+0x1e0>)
    4446:	f852 2028 	ldrls.w	r2, [r2, r8, lsl #2]
    444a:	9203      	str	r2, [sp, #12]
    444c:	9504      	str	r5, [sp, #16]
    444e:	9500      	str	r5, [sp, #0]
    4450:	4b69      	ldr	r3, [pc, #420]	; (45f8 <bt_conn_set_state+0x1e4>)
    4452:	486a      	ldr	r0, [pc, #424]	; (45fc <bt_conn_set_state+0x1e8>)
    4454:	462a      	mov	r2, r5
    4456:	47b0      	blx	r6
	if (conn->state == state) {
    4458:	7a66      	ldrb	r6, [r4, #9]
    445a:	45b0      	cmp	r8, r6
    445c:	46a9      	mov	r9, r5
    445e:	d10a      	bne.n	4476 <bt_conn_set_state+0x62>
		BT_WARN("no transition");
    4460:	9501      	str	r5, [sp, #4]
    4462:	9500      	str	r5, [sp, #0]
    4464:	683c      	ldr	r4, [r7, #0]
    4466:	4b64      	ldr	r3, [pc, #400]	; (45f8 <bt_conn_set_state+0x1e4>)
    4468:	4960      	ldr	r1, [pc, #384]	; (45ec <bt_conn_set_state+0x1d8>)
    446a:	4865      	ldr	r0, [pc, #404]	; (4600 <bt_conn_set_state+0x1ec>)
    446c:	462a      	mov	r2, r5
    446e:	47a0      	blx	r4
}
    4470:	b007      	add	sp, #28
    4472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->state = state;
    4476:	f884 8009 	strb.w	r8, [r4, #9]
	switch (old_state) {
    447a:	b19e      	cbz	r6, 44a4 <bt_conn_set_state+0x90>
    447c:	2e02      	cmp	r6, #2
    447e:	d015      	beq.n	44ac <bt_conn_set_state+0x98>
	switch (conn->state) {
    4480:	7a63      	ldrb	r3, [r4, #9]
    4482:	2b04      	cmp	r3, #4
    4484:	f200 80a1 	bhi.w	45ca <bt_conn_set_state+0x1b6>
    4488:	a201      	add	r2, pc, #4	; (adr r2, 4490 <bt_conn_set_state+0x7c>)
    448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    448e:	bf00      	nop
    4490:	000044f3 	.word	0x000044f3
    4494:	00004471 	.word	0x00004471
    4498:	000045af 	.word	0x000045af
    449c:	000044bd 	.word	0x000044bd
    44a0:	00004471 	.word	0x00004471
		bt_conn_ref(conn);
    44a4:	4620      	mov	r0, r4
    44a6:	f7ff fe7b 	bl	41a0 <bt_conn_ref>
		break;
    44aa:	e7e9      	b.n	4480 <bt_conn_set_state+0x6c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    44ac:	78a3      	ldrb	r3, [r4, #2]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d1e6      	bne.n	4480 <bt_conn_set_state+0x6c>
			k_delayed_work_cancel(&conn->le.update_work);
    44b2:	f104 0078 	add.w	r0, r4, #120	; 0x78
    44b6:	f00f ff19 	bl	142ec <k_delayed_work_cancel>
    44ba:	e7e1      	b.n	4480 <bt_conn_set_state+0x6c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    44bc:	78a3      	ldrb	r3, [r4, #2]
    44be:	2b02      	cmp	r3, #2
    44c0:	d0d6      	beq.n	4470 <bt_conn_set_state+0x5c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    44c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    44c6:	f00f f901 	bl	136cc <_impl_k_queue_init>
    44ca:	f104 0018 	add.w	r0, r4, #24
    44ce:	f00f f8fd 	bl	136cc <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    44d2:	2100      	movs	r1, #0
    44d4:	484b      	ldr	r0, [pc, #300]	; (4604 <bt_conn_set_state+0x1f0>)
    44d6:	f010 f8e3 	bl	146a0 <_impl_k_poll_signal>
	list->head = NULL;
    44da:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    44dc:	4620      	mov	r0, r4
    44de:	6423      	str	r3, [r4, #64]	; 0x40
	list->tail = NULL;
    44e0:	6463      	str	r3, [r4, #68]	; 0x44
    44e2:	f000 fc0d 	bl	4d00 <bt_l2cap_connected>
		notify_connected(conn);
    44e6:	4620      	mov	r0, r4
}
    44e8:	b007      	add	sp, #28
    44ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		notify_connected(conn);
    44ee:	f7ff bb5b 	b.w	3ba8 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    44f2:	78a3      	ldrb	r3, [r4, #2]
    44f4:	2b02      	cmp	r3, #2
    44f6:	d105      	bne.n	4504 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
    44f8:	4620      	mov	r0, r4
}
    44fa:	b007      	add	sp, #28
    44fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			bt_conn_unref(conn);
    4500:	f7ff becc 	b.w	429c <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4504:	1ef3      	subs	r3, r6, #3
    4506:	2b01      	cmp	r3, #1
    4508:	d844      	bhi.n	4594 <bt_conn_set_state+0x180>
			bt_l2cap_disconnected(conn);
    450a:	4620      	mov	r0, r4
    450c:	f000 fc32 	bl	4d74 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4510:	4b3d      	ldr	r3, [pc, #244]	; (4608 <bt_conn_set_state+0x1f4>)
    4512:	681d      	ldr	r5, [r3, #0]
    4514:	b9ed      	cbnz	r5, 4552 <bt_conn_set_state+0x13e>
    4516:	4e3d      	ldr	r6, [pc, #244]	; (460c <bt_conn_set_state+0x1f8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4518:	4f3d      	ldr	r7, [pc, #244]	; (4610 <bt_conn_set_state+0x1fc>)
	__asm__ volatile(
    451a:	f04f 0320 	mov.w	r3, #32
    451e:	f3ef 8111 	mrs	r1, BASEPRI
    4522:	f383 8811 	msr	BASEPRI, r3
    4526:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4528:	b12b      	cbz	r3, 4536 <bt_conn_set_state+0x122>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    452a:	6960      	ldr	r0, [r4, #20]
	return node->next;
    452c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    452e:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4530:	4283      	cmp	r3, r0
	list->tail = node;
    4532:	bf08      	it	eq
    4534:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4536:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    453a:	b18b      	cbz	r3, 4560 <bt_conn_set_state+0x14c>
    453c:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    453e:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4540:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    4542:	605d      	str	r5, [r3, #4]
	list->head = node;
    4544:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4546:	b902      	cbnz	r2, 454a <bt_conn_set_state+0x136>
	list->tail = node;
    4548:	6073      	str	r3, [r6, #4]
    454a:	4638      	mov	r0, r7
    454c:	f00f fbc2 	bl	13cd4 <_impl_k_sem_give>
    4550:	e7e3      	b.n	451a <bt_conn_set_state+0x106>
		if (cb->disconnected) {
    4552:	686b      	ldr	r3, [r5, #4]
    4554:	b113      	cbz	r3, 455c <bt_conn_set_state+0x148>
			cb->disconnected(conn, conn->err);
    4556:	7a21      	ldrb	r1, [r4, #8]
    4558:	4620      	mov	r0, r4
    455a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    455c:	692d      	ldr	r5, [r5, #16]
    455e:	e7d9      	b.n	4514 <bt_conn_set_state+0x100>
			if (conn->type == BT_CONN_TYPE_LE) {
    4560:	78a3      	ldrb	r3, [r4, #2]
    4562:	b91b      	cbnz	r3, 456c <bt_conn_set_state+0x158>
				k_delayed_work_cancel(&conn->le.update_work);
    4564:	f104 0078 	add.w	r0, r4, #120	; 0x78
    4568:	f00f fec0 	bl	142ec <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    456c:	f3bf 8f5b 	dmb	ish
    4570:	3404      	adds	r4, #4
    4572:	e854 3f00 	ldrex	r3, [r4]
    4576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    457a:	e844 3200 	strex	r2, r3, [r4]
    457e:	2a00      	cmp	r2, #0
    4580:	d1f7      	bne.n	4572 <bt_conn_set_state+0x15e>
    4582:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4586:	481f      	ldr	r0, [pc, #124]	; (4604 <bt_conn_set_state+0x1f0>)
    4588:	2100      	movs	r1, #0
}
    458a:	b007      	add	sp, #28
    458c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4590:	f010 b886 	b.w	146a0 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4594:	2e02      	cmp	r6, #2
    4596:	d103      	bne.n	45a0 <bt_conn_set_state+0x18c>
			notify_connected(conn);
    4598:	4620      	mov	r0, r4
    459a:	f7ff fb05 	bl	3ba8 <notify_connected>
    459e:	e7ab      	b.n	44f8 <bt_conn_set_state+0xe4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    45a0:	2e01      	cmp	r6, #1
    45a2:	f47f af65 	bne.w	4470 <bt_conn_set_state+0x5c>
			if (conn->err) {
    45a6:	7a23      	ldrb	r3, [r4, #8]
    45a8:	2b00      	cmp	r3, #0
    45aa:	d0a5      	beq.n	44f8 <bt_conn_set_state+0xe4>
    45ac:	e7f4      	b.n	4598 <bt_conn_set_state+0x184>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    45ae:	78a3      	ldrb	r3, [r4, #2]
    45b0:	2b00      	cmp	r3, #0
    45b2:	f47f af5d 	bne.w	4470 <bt_conn_set_state+0x5c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    45b6:	4817      	ldr	r0, [pc, #92]	; (4614 <bt_conn_set_state+0x200>)
    45b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
    45bc:	f104 0178 	add.w	r1, r4, #120	; 0x78
}
    45c0:	b007      	add	sp, #28
    45c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    45c6:	f00f bef5 	b.w	143b4 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    45ca:	f8cd 9008 	str.w	r9, [sp, #8]
    45ce:	f8cd 8004 	str.w	r8, [sp, #4]
    45d2:	f8cd 9000 	str.w	r9, [sp]
    45d6:	683c      	ldr	r4, [r7, #0]
    45d8:	4b07      	ldr	r3, [pc, #28]	; (45f8 <bt_conn_set_state+0x1e4>)
    45da:	4a03      	ldr	r2, [pc, #12]	; (45e8 <bt_conn_set_state+0x1d4>)
    45dc:	4903      	ldr	r1, [pc, #12]	; (45ec <bt_conn_set_state+0x1d8>)
    45de:	480e      	ldr	r0, [pc, #56]	; (4618 <bt_conn_set_state+0x204>)
    45e0:	47a0      	blx	r4
		break;
    45e2:	e745      	b.n	4470 <bt_conn_set_state+0x5c>
    45e4:	20003aa4 	.word	0x20003aa4
    45e8:	00014891 	.word	0x00014891
    45ec:	00015639 	.word	0x00015639
    45f0:	000158c8 	.word	0x000158c8
    45f4:	00015d16 	.word	0x00015d16
    45f8:	00015957 	.word	0x00015957
    45fc:	00015d20 	.word	0x00015d20
    4600:	00015d3e 	.word	0x00015d3e
    4604:	20003bd8 	.word	0x20003bd8
    4608:	2000034c 	.word	0x2000034c
    460c:	20000400 	.word	0x20000400
    4610:	20003b34 	.word	0x20003b34
    4614:	200019c8 	.word	0x200019c8
    4618:	00015d5c 	.word	0x00015d5c

0000461c <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    461c:	304c      	adds	r0, #76	; 0x4c
    461e:	4770      	bx	lr

00004620 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4620:	b570      	push	{r4, r5, r6, lr}
    4622:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4624:	4608      	mov	r0, r1
{
    4626:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4628:	f7fd fe74 	bl	2314 <bt_le_conn_params_valid>
    462c:	b908      	cbnz	r0, 4632 <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    462e:	2400      	movs	r4, #0
    4630:	e01c      	b.n	466c <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4632:	481d      	ldr	r0, [pc, #116]	; (46a8 <bt_conn_create_le+0x88>)
    4634:	f7ff fac8 	bl	3bc8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4638:	0583      	lsls	r3, r0, #22
    463a:	d4f8      	bmi.n	462e <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    463c:	4630      	mov	r0, r6
    463e:	f7ff fdf7 	bl	4230 <bt_conn_lookup_addr_le>
	if (conn) {
    4642:	4604      	mov	r4, r0
    4644:	b1a0      	cbz	r0, 4670 <bt_conn_create_le+0x50>
		switch (conn->state) {
    4646:	7a43      	ldrb	r3, [r0, #9]
    4648:	2b01      	cmp	r3, #1
    464a:	d006      	beq.n	465a <bt_conn_create_le+0x3a>
    464c:	d301      	bcc.n	4652 <bt_conn_create_le+0x32>
    464e:	2b03      	cmp	r3, #3
    4650:	d90c      	bls.n	466c <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    4652:	4620      	mov	r0, r4
    4654:	f7ff fe22 	bl	429c <bt_conn_unref>
    4658:	e7e9      	b.n	462e <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    465a:	886b      	ldrh	r3, [r5, #2]
    465c:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	conn->le.latency = param->latency;
    4660:	88ab      	ldrh	r3, [r5, #4]
    4662:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	conn->le.timeout = param->timeout;
    4666:	88eb      	ldrh	r3, [r5, #6]
    4668:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    466c:	4620      	mov	r0, r4
    466e:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4670:	4630      	mov	r0, r6
    4672:	f7ff fd49 	bl	4108 <bt_conn_add_le>
	if (!conn) {
    4676:	4604      	mov	r4, r0
    4678:	2800      	cmp	r0, #0
    467a:	d0f7      	beq.n	466c <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    467c:	2207      	movs	r2, #7
    467e:	4631      	mov	r1, r6
    4680:	305a      	adds	r0, #90	; 0x5a
    4682:	f7fd facd 	bl	1c20 <memcpy>
	conn->le.interval_max = param->interval_max;
    4686:	886b      	ldrh	r3, [r5, #2]
    4688:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->le.latency = param->latency;
    468c:	88ab      	ldrh	r3, [r5, #4]
    468e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	conn->le.timeout = param->timeout;
    4692:	88eb      	ldrh	r3, [r5, #6]
    4694:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4698:	4620      	mov	r0, r4
    469a:	2101      	movs	r1, #1
    469c:	f7ff feba 	bl	4414 <bt_conn_set_state>
	bt_le_scan_update(true);
    46a0:	2001      	movs	r0, #1
    46a2:	f7fd ff75 	bl	2590 <bt_le_scan_update>
	return conn;
    46a6:	e7e1      	b.n	466c <bt_conn_create_le+0x4c>
    46a8:	20003b18 	.word	0x20003b18

000046ac <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    46ac:	b570      	push	{r4, r5, r6, lr}
    46ae:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    46b0:	460d      	mov	r5, r1
    46b2:	2900      	cmp	r1, #0
    46b4:	d13b      	bne.n	472e <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    46b6:	4630      	mov	r0, r6
    46b8:	f7ff fdba 	bl	4230 <bt_conn_lookup_addr_le>
	if (!conn) {
    46bc:	4604      	mov	r4, r0
    46be:	b928      	cbnz	r0, 46cc <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    46c0:	4630      	mov	r0, r6
    46c2:	f7ff fd21 	bl	4108 <bt_conn_add_le>
		if (!conn) {
    46c6:	4604      	mov	r4, r0
    46c8:	2800      	cmp	r0, #0
    46ca:	d051      	beq.n	4770 <bt_le_set_auto_conn+0xc4>
    46cc:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    46ce:	2d00      	cmp	r5, #0
    46d0:	d035      	beq.n	473e <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    46d2:	886a      	ldrh	r2, [r5, #2]
    46d4:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->le.latency = param->latency;
    46d8:	88aa      	ldrh	r2, [r5, #4]
    46da:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
	conn->le.timeout = param->timeout;
    46de:	88ea      	ldrh	r2, [r5, #6]
    46e0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46e4:	f3bf 8f5b 	dmb	ish
    46e8:	e853 2f00 	ldrex	r2, [r3]
    46ec:	f042 0101 	orr.w	r1, r2, #1
    46f0:	e843 1000 	strex	r0, r1, [r3]
    46f4:	2800      	cmp	r0, #0
    46f6:	d1f7      	bne.n	46e8 <bt_le_set_auto_conn+0x3c>
    46f8:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    46fc:	07d1      	lsls	r1, r2, #31
    46fe:	d402      	bmi.n	4706 <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4700:	4620      	mov	r0, r4
    4702:	f7ff fd4d 	bl	41a0 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4706:	7a63      	ldrb	r3, [r4, #9]
    4708:	b963      	cbnz	r3, 4724 <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    470a:	481b      	ldr	r0, [pc, #108]	; (4778 <bt_le_set_auto_conn+0xcc>)
    470c:	f7ff fa5c 	bl	3bc8 <atomic_get>
    4710:	0783      	lsls	r3, r0, #30
    4712:	d507      	bpl.n	4724 <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4714:	b11d      	cbz	r5, 471e <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4716:	2101      	movs	r1, #1
    4718:	4620      	mov	r0, r4
    471a:	f7ff fe7b 	bl	4414 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    471e:	2000      	movs	r0, #0
    4720:	f7fd ff36 	bl	2590 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    4724:	4620      	mov	r0, r4
    4726:	f7ff fdb9 	bl	429c <bt_conn_unref>

	return 0;
    472a:	2000      	movs	r0, #0
    472c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    472e:	4608      	mov	r0, r1
    4730:	f7fd fdf0 	bl	2314 <bt_le_conn_params_valid>
    4734:	2800      	cmp	r0, #0
    4736:	d1be      	bne.n	46b6 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4738:	f06f 0015 	mvn.w	r0, #21
    473c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    473e:	f3bf 8f5b 	dmb	ish
    4742:	e853 2f00 	ldrex	r2, [r3]
    4746:	f022 0101 	bic.w	r1, r2, #1
    474a:	e843 1000 	strex	r0, r1, [r3]
    474e:	2800      	cmp	r0, #0
    4750:	d1f7      	bne.n	4742 <bt_le_set_auto_conn+0x96>
    4752:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    4756:	07d2      	lsls	r2, r2, #31
    4758:	d5d5      	bpl.n	4706 <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    475a:	4620      	mov	r0, r4
    475c:	f7ff fd9e 	bl	429c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4760:	7a63      	ldrb	r3, [r4, #9]
    4762:	2b01      	cmp	r3, #1
    4764:	d1cf      	bne.n	4706 <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4766:	4629      	mov	r1, r5
    4768:	4620      	mov	r0, r4
    476a:	f7ff fe53 	bl	4414 <bt_conn_set_state>
    476e:	e7ca      	b.n	4706 <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4770:	f06f 000b 	mvn.w	r0, #11
}
    4774:	bd70      	pop	{r4, r5, r6, pc}
    4776:	bf00      	nop
    4778:	20003b18 	.word	0x20003b18

0000477c <bt_conn_disconnect>:
{
    477c:	b570      	push	{r4, r5, r6, lr}
    477e:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4780:	7881      	ldrb	r1, [r0, #2]
{
    4782:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4784:	b911      	cbnz	r1, 478c <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    4786:	304c      	adds	r0, #76	; 0x4c
    4788:	f7ff ff90 	bl	46ac <bt_le_set_auto_conn>
	switch (conn->state) {
    478c:	7a63      	ldrb	r3, [r4, #9]
    478e:	3b01      	subs	r3, #1
    4790:	2b03      	cmp	r3, #3
    4792:	d803      	bhi.n	479c <bt_conn_disconnect+0x20>
    4794:	e8df f003 	tbb	[pc, r3]
    4798:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    479c:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    47a0:	4628      	mov	r0, r5
    47a2:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    47a4:	4620      	mov	r0, r4
		conn->err = reason;
    47a6:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    47a8:	2100      	movs	r1, #0
    47aa:	f7ff fe33 	bl	4414 <bt_conn_set_state>
		bt_le_scan_update(false);
    47ae:	2000      	movs	r0, #0
    47b0:	f7fd feee 	bl	2590 <bt_le_scan_update>
		return 0;
    47b4:	2500      	movs	r5, #0
    47b6:	e7f3      	b.n	47a0 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    47b8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    47bc:	f00f fd96 	bl	142ec <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    47c0:	2100      	movs	r1, #0
    47c2:	f242 000e 	movw	r0, #8206	; 0x200e
}
    47c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    47ca:	f7fd be5b 	b.w	2484 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    47ce:	2103      	movs	r1, #3
    47d0:	f240 4006 	movw	r0, #1030	; 0x406
    47d4:	f7fd fc90 	bl	20f8 <bt_hci_cmd_create>
	if (!buf) {
    47d8:	4605      	mov	r5, r0
    47da:	b198      	cbz	r0, 4804 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    47dc:	2103      	movs	r1, #3
    47de:	3008      	adds	r0, #8
    47e0:	f00e f9b2 	bl	12b48 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    47e4:	8823      	ldrh	r3, [r4, #0]
    47e6:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    47e8:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    47ea:	4629      	mov	r1, r5
    47ec:	f240 4006 	movw	r0, #1030	; 0x406
    47f0:	f7fd fe48 	bl	2484 <bt_hci_cmd_send>
	if (err) {
    47f4:	4605      	mov	r5, r0
    47f6:	2800      	cmp	r0, #0
    47f8:	d1d2      	bne.n	47a0 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    47fa:	2104      	movs	r1, #4
    47fc:	4620      	mov	r0, r4
    47fe:	f7ff fe09 	bl	4414 <bt_conn_set_state>
    4802:	e7cd      	b.n	47a0 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    4804:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4808:	e7ca      	b.n	47a0 <bt_conn_disconnect+0x24>

0000480a <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    480a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    480c:	4607      	mov	r7, r0
    480e:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4810:	f242 0013 	movw	r0, #8211	; 0x2013
    4814:	210e      	movs	r1, #14
    4816:	f7fd fc6f 	bl	20f8 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    481a:	4606      	mov	r6, r0
    481c:	b1c8      	cbz	r0, 4852 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    481e:	210e      	movs	r1, #14
    4820:	3008      	adds	r0, #8
    4822:	f00e f991 	bl	12b48 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    4826:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4828:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    482a:	220e      	movs	r2, #14
    482c:	f7fd fa24 	bl	1c78 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4830:	883b      	ldrh	r3, [r7, #0]
    4832:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4834:	882b      	ldrh	r3, [r5, #0]
    4836:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4838:	886b      	ldrh	r3, [r5, #2]
    483a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    483c:	88ab      	ldrh	r3, [r5, #4]
    483e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4840:	88eb      	ldrh	r3, [r5, #6]
    4842:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4844:	4631      	mov	r1, r6
    4846:	f242 0013 	movw	r0, #8211	; 0x2013
}
    484a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    484e:	f7fd be19 	b.w	2484 <bt_hci_cmd_send>
}
    4852:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004858 <bt_conn_le_param_update>:
{
    4858:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    485a:	4b27      	ldr	r3, [pc, #156]	; (48f8 <bt_conn_le_param_update+0xa0>)
{
    485c:	460d      	mov	r5, r1
    485e:	b08a      	sub	sp, #40	; 0x28
    4860:	4604      	mov	r4, r0
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4862:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4864:	f00f f9fc 	bl	13c60 <_impl_k_current_get>
    4868:	88eb      	ldrh	r3, [r5, #6]
    486a:	9307      	str	r3, [sp, #28]
    486c:	88ab      	ldrh	r3, [r5, #4]
    486e:	9306      	str	r3, [sp, #24]
    4870:	886b      	ldrh	r3, [r5, #2]
    4872:	9305      	str	r3, [sp, #20]
    4874:	882b      	ldrh	r3, [r5, #0]
    4876:	4a21      	ldr	r2, [pc, #132]	; (48fc <bt_conn_le_param_update+0xa4>)
    4878:	9304      	str	r3, [sp, #16]
    487a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    487e:	9208      	str	r2, [sp, #32]
    4880:	9303      	str	r3, [sp, #12]
    4882:	9001      	str	r0, [sp, #4]
    4884:	9200      	str	r2, [sp, #0]
    4886:	4b1e      	ldr	r3, [pc, #120]	; (4900 <bt_conn_le_param_update+0xa8>)
    4888:	9402      	str	r4, [sp, #8]
    488a:	491e      	ldr	r1, [pc, #120]	; (4904 <bt_conn_le_param_update+0xac>)
    488c:	481e      	ldr	r0, [pc, #120]	; (4908 <bt_conn_le_param_update+0xb0>)
    488e:	47b0      	blx	r6
	if (conn->le.interval >= param->interval_min &&
    4890:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    4894:	882a      	ldrh	r2, [r5, #0]
    4896:	429a      	cmp	r2, r3
    4898:	d80c      	bhi.n	48b4 <bt_conn_le_param_update+0x5c>
    489a:	886a      	ldrh	r2, [r5, #2]
    489c:	429a      	cmp	r2, r3
    489e:	d309      	bcc.n	48b4 <bt_conn_le_param_update+0x5c>
	    conn->le.interval <= param->interval_max &&
    48a0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    48a4:	88ab      	ldrh	r3, [r5, #4]
    48a6:	429a      	cmp	r2, r3
    48a8:	d104      	bne.n	48b4 <bt_conn_le_param_update+0x5c>
	    conn->le.latency == param->latency &&
    48aa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
    48ae:	88eb      	ldrh	r3, [r5, #6]
    48b0:	429a      	cmp	r2, r3
    48b2:	d01c      	beq.n	48ee <bt_conn_le_param_update+0x96>
	k_delayed_work_cancel(&conn->le.update_work);
    48b4:	f104 0078 	add.w	r0, r4, #120	; 0x78
    48b8:	f00f fd18 	bl	142ec <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    48bc:	4b13      	ldr	r3, [pc, #76]	; (490c <bt_conn_le_param_update+0xb4>)
    48be:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    48c2:	079a      	lsls	r2, r3, #30
    48c4:	d503      	bpl.n	48ce <bt_conn_le_param_update+0x76>
    48c6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    48ca:	079b      	lsls	r3, r3, #30
    48cc:	d401      	bmi.n	48d2 <bt_conn_le_param_update+0x7a>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    48ce:	78e3      	ldrb	r3, [r4, #3]
    48d0:	b933      	cbnz	r3, 48e0 <bt_conn_le_param_update+0x88>
		return bt_conn_le_conn_update(conn, param);
    48d2:	4629      	mov	r1, r5
    48d4:	4620      	mov	r0, r4
}
    48d6:	b00a      	add	sp, #40	; 0x28
    48d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_conn_le_conn_update(conn, param);
    48dc:	f7ff bf95 	b.w	480a <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    48e0:	4629      	mov	r1, r5
    48e2:	4620      	mov	r0, r4
}
    48e4:	b00a      	add	sp, #40	; 0x28
    48e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_l2cap_update_conn_param(conn, param);
    48ea:	f000 bba9 	b.w	5040 <bt_l2cap_update_conn_param>
}
    48ee:	f06f 0044 	mvn.w	r0, #68	; 0x44
    48f2:	b00a      	add	sp, #40	; 0x28
    48f4:	bd70      	pop	{r4, r5, r6, pc}
    48f6:	bf00      	nop
    48f8:	20003aa4 	.word	0x20003aa4
    48fc:	00014891 	.word	0x00014891
    4900:	00015983 	.word	0x00015983
    4904:	00015639 	.word	0x00015639
    4908:	0001599b 	.word	0x0001599b
    490c:	20003aa8 	.word	0x20003aa8

00004910 <le_conn_update>:
{
    4910:	4603      	mov	r3, r0
    4912:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4914:	f813 2c6f 	ldrb.w	r2, [r3, #-111]
    4918:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    491a:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    491e:	d105      	bne.n	492c <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    4920:	2113      	movs	r1, #19
    4922:	f7ff ff2b 	bl	477c <bt_conn_disconnect>
}
    4926:	b003      	add	sp, #12
    4928:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    492c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    4930:	f8ad 2000 	strh.w	r2, [sp]
    4934:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    4938:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    493c:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    493e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    4942:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    4946:	f8ad 2004 	strh.w	r2, [sp, #4]
    494a:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    494e:	f7ff ff83 	bl	4858 <bt_conn_le_param_update>
    4952:	e7e8      	b.n	4926 <le_conn_update+0x16>

00004954 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4954:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4956:	4b08      	ldr	r3, [pc, #32]	; (4978 <bt_conn_create_pdu+0x24>)
{
    4958:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    495a:	2800      	cmp	r0, #0
    495c:	bf08      	it	eq
    495e:	4618      	moveq	r0, r3
    4960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4964:	f00e f888 	bl	12a78 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4968:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    496a:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    496c:	3008      	adds	r0, #8
    496e:	f00e f8a2 	bl	12ab6 <net_buf_simple_reserve>

	return buf;
}
    4972:	4620      	mov	r0, r4
    4974:	bd38      	pop	{r3, r4, r5, pc}
    4976:	bf00      	nop
    4978:	20003fa8 	.word	0x20003fa8

0000497c <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4980:	4606      	mov	r6, r0
    4982:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4984:	4816      	ldr	r0, [pc, #88]	; (49e0 <create_frag.isra.8+0x64>)
    4986:	2100      	movs	r1, #0
    4988:	f7ff ffe4 	bl	4954 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    498c:	7833      	ldrb	r3, [r6, #0]
    498e:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4990:	4605      	mov	r5, r0
    4992:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    4996:	d005      	beq.n	49a4 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    4998:	f00e f89e 	bl	12ad8 <net_buf_unref>
		return NULL;
    499c:	4635      	mov	r5, r6
}
    499e:	4628      	mov	r0, r5
    49a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    49a4:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    49a6:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    49aa:	4e0e      	ldr	r6, [pc, #56]	; (49e4 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    49ac:	4638      	mov	r0, r7
    49ae:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    49b2:	f00e f904 	bl	12bbe <net_buf_simple_tailroom>
    49b6:	4580      	cmp	r8, r0
    49b8:	d20c      	bcs.n	49d4 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    49ba:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    49be:	f854 1f08 	ldr.w	r1, [r4, #8]!
    49c2:	4632      	mov	r2, r6
    49c4:	4638      	mov	r0, r7
    49c6:	f00e f8c5 	bl	12b54 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    49ca:	4631      	mov	r1, r6
    49cc:	4620      	mov	r0, r4
    49ce:	f00e f8da 	bl	12b86 <net_buf_simple_pull>
    49d2:	e7e4      	b.n	499e <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    49d4:	4638      	mov	r0, r7
    49d6:	f00e f8f2 	bl	12bbe <net_buf_simple_tailroom>
    49da:	b286      	uxth	r6, r0
    49dc:	e7ef      	b.n	49be <create_frag.isra.8+0x42>
    49de:	bf00      	nop
    49e0:	20003fcc 	.word	0x20003fcc
    49e4:	20003aa8 	.word	0x20003aa8

000049e8 <bt_conn_process_tx>:
{
    49e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("conn %p", conn);
    49ec:	4f49      	ldr	r7, [pc, #292]	; (4b14 <bt_conn_process_tx+0x12c>)
    49ee:	4d4a      	ldr	r5, [pc, #296]	; (4b18 <bt_conn_process_tx+0x130>)
    49f0:	683e      	ldr	r6, [r7, #0]
{
    49f2:	b086      	sub	sp, #24
    49f4:	4604      	mov	r4, r0
    49f6:	f00f f933 	bl	13c60 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    49fa:	4b48      	ldr	r3, [pc, #288]	; (4b1c <bt_conn_process_tx+0x134>)
    49fc:	9001      	str	r0, [sp, #4]
    49fe:	9503      	str	r5, [sp, #12]
    4a00:	9402      	str	r4, [sp, #8]
    4a02:	9500      	str	r5, [sp, #0]
    4a04:	462a      	mov	r2, r5
    4a06:	4946      	ldr	r1, [pc, #280]	; (4b20 <bt_conn_process_tx+0x138>)
    4a08:	4846      	ldr	r0, [pc, #280]	; (4b24 <bt_conn_process_tx+0x13c>)
    4a0a:	47b0      	blx	r6
	if (conn->state == BT_CONN_DISCONNECTED &&
    4a0c:	7a63      	ldrb	r3, [r4, #9]
    4a0e:	46b8      	mov	r8, r7
    4a10:	462e      	mov	r6, r5
    4a12:	bb0b      	cbnz	r3, 4a58 <bt_conn_process_tx+0x70>
    4a14:	f3bf 8f5b 	dmb	ish
    4a18:	1d23      	adds	r3, r4, #4
    4a1a:	e853 2f00 	ldrex	r2, [r3]
    4a1e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4a22:	e843 1000 	strex	r0, r1, [r3]
    4a26:	2800      	cmp	r0, #0
    4a28:	d1f7      	bne.n	4a1a <bt_conn_process_tx+0x32>
    4a2a:	f3bf 8f5b 	dmb	ish
    4a2e:	0653      	lsls	r3, r2, #25
    4a30:	d512      	bpl.n	4a58 <bt_conn_process_tx+0x70>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    4a32:	683e      	ldr	r6, [r7, #0]
    4a34:	f00f f914 	bl	13c60 <_impl_k_current_get>
    4a38:	9503      	str	r5, [sp, #12]
    4a3a:	8823      	ldrh	r3, [r4, #0]
    4a3c:	9302      	str	r3, [sp, #8]
    4a3e:	9001      	str	r0, [sp, #4]
    4a40:	9500      	str	r5, [sp, #0]
    4a42:	4b36      	ldr	r3, [pc, #216]	; (4b1c <bt_conn_process_tx+0x134>)
    4a44:	4936      	ldr	r1, [pc, #216]	; (4b20 <bt_conn_process_tx+0x138>)
    4a46:	4838      	ldr	r0, [pc, #224]	; (4b28 <bt_conn_process_tx+0x140>)
    4a48:	462a      	mov	r2, r5
    4a4a:	47b0      	blx	r6
		conn_cleanup(conn);
    4a4c:	4620      	mov	r0, r4
}
    4a4e:	b006      	add	sp, #24
    4a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn);
    4a54:	f7ff bc52 	b.w	42fc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4a58:	2100      	movs	r1, #0
    4a5a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4a5e:	f00e f811 	bl	12a84 <net_buf_get>
	BT_ASSERT(buf);
    4a62:	4605      	mov	r5, r0
    4a64:	b970      	cbnz	r0, 4a84 <bt_conn_process_tx+0x9c>
    4a66:	9601      	str	r6, [sp, #4]
    4a68:	9600      	str	r6, [sp, #0]
    4a6a:	f8d8 4000 	ldr.w	r4, [r8]
    4a6e:	4b2b      	ldr	r3, [pc, #172]	; (4b1c <bt_conn_process_tx+0x134>)
    4a70:	4a29      	ldr	r2, [pc, #164]	; (4b18 <bt_conn_process_tx+0x130>)
    4a72:	492b      	ldr	r1, [pc, #172]	; (4b20 <bt_conn_process_tx+0x138>)
    4a74:	482d      	ldr	r0, [pc, #180]	; (4b2c <bt_conn_process_tx+0x144>)
    4a76:	47a0      	blx	r4
    4a78:	4040      	eors	r0, r0
    4a7a:	f380 8811 	msr	BASEPRI, r0
    4a7e:	f04f 0004 	mov.w	r0, #4
    4a82:	df02      	svc	2
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4a84:	f8d8 7000 	ldr.w	r7, [r8]
    4a88:	f00f f8ea 	bl	13c60 <_impl_k_current_get>
    4a8c:	9605      	str	r6, [sp, #20]
    4a8e:	89ab      	ldrh	r3, [r5, #12]
    4a90:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    4a92:	4e27      	ldr	r6, [pc, #156]	; (4b30 <bt_conn_process_tx+0x148>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4a94:	9304      	str	r3, [sp, #16]
    4a96:	9001      	str	r0, [sp, #4]
    4a98:	4a1f      	ldr	r2, [pc, #124]	; (4b18 <bt_conn_process_tx+0x130>)
    4a9a:	4921      	ldr	r1, [pc, #132]	; (4b20 <bt_conn_process_tx+0x138>)
    4a9c:	9503      	str	r5, [sp, #12]
    4a9e:	9402      	str	r4, [sp, #8]
    4aa0:	4b24      	ldr	r3, [pc, #144]	; (4b34 <bt_conn_process_tx+0x14c>)
    4aa2:	4825      	ldr	r0, [pc, #148]	; (4b38 <bt_conn_process_tx+0x150>)
    4aa4:	47b8      	blx	r7
	if (buf->len <= conn_mtu(conn)) {
    4aa6:	89a9      	ldrh	r1, [r5, #12]
    4aa8:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    4aac:	4291      	cmp	r1, r2
    4aae:	d809      	bhi.n	4ac4 <bt_conn_process_tx+0xdc>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4ab0:	2300      	movs	r3, #0
    4ab2:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4ab4:	4629      	mov	r1, r5
    4ab6:	4620      	mov	r0, r4
    4ab8:	f7ff fa58 	bl	3f6c <send_frag>
	if (!send_buf(conn, buf)) {
    4abc:	b150      	cbz	r0, 4ad4 <bt_conn_process_tx+0xec>
}
    4abe:	b006      	add	sp, #24
    4ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ac4:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    4ac8:	4629      	mov	r1, r5
    4aca:	4638      	mov	r0, r7
    4acc:	f7ff ff56 	bl	497c <create_frag.isra.8>
	if (!frag) {
    4ad0:	4601      	mov	r1, r0
    4ad2:	b928      	cbnz	r0, 4ae0 <bt_conn_process_tx+0xf8>
		net_buf_unref(buf);
    4ad4:	4628      	mov	r0, r5
}
    4ad6:	b006      	add	sp, #24
    4ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4adc:	f00d bffc 	b.w	12ad8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4ae0:	2301      	movs	r3, #1
    4ae2:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4ae4:	4620      	mov	r0, r4
    4ae6:	f7ff fa41 	bl	3f6c <send_frag>
    4aea:	2800      	cmp	r0, #0
    4aec:	d0f2      	beq.n	4ad4 <bt_conn_process_tx+0xec>
	while (buf->len > conn_mtu(conn)) {
    4aee:	89aa      	ldrh	r2, [r5, #12]
    4af0:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4af4:	429a      	cmp	r2, r3
    4af6:	d802      	bhi.n	4afe <bt_conn_process_tx+0x116>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4af8:	2300      	movs	r3, #0
    4afa:	2201      	movs	r2, #1
    4afc:	e7da      	b.n	4ab4 <bt_conn_process_tx+0xcc>
		frag = create_frag(conn, buf);
    4afe:	4629      	mov	r1, r5
    4b00:	4638      	mov	r0, r7
    4b02:	f7ff ff3b 	bl	497c <create_frag.isra.8>
		if (!frag) {
    4b06:	4601      	mov	r1, r0
    4b08:	2800      	cmp	r0, #0
    4b0a:	d0e3      	beq.n	4ad4 <bt_conn_process_tx+0xec>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4b0c:	2301      	movs	r3, #1
    4b0e:	461a      	mov	r2, r3
    4b10:	e7e8      	b.n	4ae4 <bt_conn_process_tx+0xfc>
    4b12:	bf00      	nop
    4b14:	20003aa4 	.word	0x20003aa4
    4b18:	00014891 	.word	0x00014891
    4b1c:	00015944 	.word	0x00015944
    4b20:	00015639 	.word	0x00015639
    4b24:	000159dd 	.word	0x000159dd
    4b28:	00015a41 	.word	0x00015a41
    4b2c:	000156ee 	.word	0x000156ee
    4b30:	20003aa8 	.word	0x20003aa8
    4b34:	00015924 	.word	0x00015924
    4b38:	00015a7b 	.word	0x00015a7b

00004b3c <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4b3c:	4b03      	ldr	r3, [pc, #12]	; (4b4c <bt_conn_get_id+0x10>)
    4b3e:	1ac0      	subs	r0, r0, r3
    4b40:	4b03      	ldr	r3, [pc, #12]	; (4b50 <bt_conn_get_id+0x14>)
    4b42:	1140      	asrs	r0, r0, #5
    4b44:	4358      	muls	r0, r3
}
    4b46:	b2c0      	uxtb	r0, r0
    4b48:	4770      	bx	lr
    4b4a:	bf00      	nop
    4b4c:	20000360 	.word	0x20000360
    4b50:	cccccccd 	.word	0xcccccccd

00004b54 <bt_conn_init>:
	parent->next = child;
    4b54:	4b12      	ldr	r3, [pc, #72]	; (4ba0 <bt_conn_init+0x4c>)
    4b56:	4a13      	ldr	r2, [pc, #76]	; (4ba4 <bt_conn_init+0x50>)
    4b58:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4b5a:	b510      	push	{r4, lr}
    4b5c:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4b5e:	6859      	ldr	r1, [r3, #4]
    4b60:	b901      	cbnz	r1, 4b64 <bt_conn_init+0x10>
	list->tail = node;
    4b62:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4b64:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    4b66:	6092      	str	r2, [r2, #8]
	list->head = node;
    4b68:	4a0f      	ldr	r2, [pc, #60]	; (4ba8 <bt_conn_init+0x54>)
    4b6a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4b6c:	b901      	cbnz	r1, 4b70 <bt_conn_init+0x1c>
	list->tail = node;
    4b6e:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4b70:	f001 fb54 	bl	621c <bt_att_init>

	err = bt_smp_init();
    4b74:	f002 f86a 	bl	6c4c <bt_smp_init>
	if (err) {
    4b78:	4604      	mov	r4, r0
    4b7a:	b970      	cbnz	r0, 4b9a <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4b7c:	f000 fa88 	bl	5090 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4b80:	480a      	ldr	r0, [pc, #40]	; (4bac <bt_conn_init+0x58>)
    4b82:	f7ff f821 	bl	3bc8 <atomic_get>
    4b86:	b140      	cbz	r0, 4b9a <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4b88:	4809      	ldr	r0, [pc, #36]	; (4bb0 <bt_conn_init+0x5c>)
    4b8a:	f7ff f81d 	bl	3bc8 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4b8e:	07c3      	lsls	r3, r0, #31
    4b90:	d503      	bpl.n	4b9a <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4b92:	2101      	movs	r1, #1
    4b94:	4807      	ldr	r0, [pc, #28]	; (4bb4 <bt_conn_init+0x60>)
    4b96:	f7ff fc3d 	bl	4414 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4b9a:	4620      	mov	r0, r4
    4b9c:	bd10      	pop	{r4, pc}
    4b9e:	bf00      	nop
    4ba0:	20000400 	.word	0x20000400
    4ba4:	20000350 	.word	0x20000350
    4ba8:	20000358 	.word	0x20000358
    4bac:	200003a8 	.word	0x200003a8
    4bb0:	20000364 	.word	0x20000364
    4bb4:	20000360 	.word	0x20000360

00004bb8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4bb8:	4770      	bx	lr
	...

00004bbc <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4bbe:	4a0b      	ldr	r2, [pc, #44]	; (4bec <l2cap_accept+0x30>)
    4bc0:	6813      	ldr	r3, [r2, #0]
    4bc2:	b92b      	cbnz	r3, 4bd0 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4bc4:	480a      	ldr	r0, [pc, #40]	; (4bf0 <l2cap_accept+0x34>)
    4bc6:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4bc8:	600a      	str	r2, [r1, #0]

		return 0;
    4bca:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    4bcc:	b004      	add	sp, #16
    4bce:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    4bd0:	4a08      	ldr	r2, [pc, #32]	; (4bf4 <l2cap_accept+0x38>)
    4bd2:	4b09      	ldr	r3, [pc, #36]	; (4bf8 <l2cap_accept+0x3c>)
    4bd4:	9001      	str	r0, [sp, #4]
    4bd6:	9202      	str	r2, [sp, #8]
    4bd8:	9200      	str	r2, [sp, #0]
    4bda:	681c      	ldr	r4, [r3, #0]
    4bdc:	4807      	ldr	r0, [pc, #28]	; (4bfc <l2cap_accept+0x40>)
    4bde:	4b08      	ldr	r3, [pc, #32]	; (4c00 <l2cap_accept+0x44>)
    4be0:	4908      	ldr	r1, [pc, #32]	; (4c04 <l2cap_accept+0x48>)
    4be2:	47a0      	blx	r4
	return -ENOMEM;
    4be4:	f06f 000b 	mvn.w	r0, #11
    4be8:	e7f0      	b.n	4bcc <l2cap_accept+0x10>
    4bea:	bf00      	nop
    4bec:	20000408 	.word	0x20000408
    4bf0:	20003bf4 	.word	0x20003bf4
    4bf4:	00014891 	.word	0x00014891
    4bf8:	20003aa4 	.word	0x20003aa4
    4bfc:	00015eed 	.word	0x00015eed
    4c00:	00015e7e 	.word	0x00015e7e
    4c04:	00015639 	.word	0x00015639

00004c08 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c0a:	4607      	mov	r7, r0
    4c0c:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c0e:	2000      	movs	r0, #0
    4c10:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4c12:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c14:	f7ff fe9e 	bl	4954 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4c18:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c1a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4c1c:	3008      	adds	r0, #8
    4c1e:	f00d ff93 	bl	12b48 <net_buf_simple_add>
	hdr->code = code;
    4c22:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    4c24:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4c26:	8045      	strh	r5, [r0, #2]
}
    4c28:	4620      	mov	r0, r4
    4c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004c2c <l2cap_connected>:
    4c2c:	4770      	bx	lr
	...

00004c30 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4c30:	2300      	movs	r3, #0
    4c32:	6083      	str	r3, [r0, #8]
    4c34:	4b05      	ldr	r3, [pc, #20]	; (4c4c <bt_l2cap_le_fixed_chan_register+0x1c>)
    4c36:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    4c38:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    4c3c:	b911      	cbnz	r1, 4c44 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    4c3e:	605a      	str	r2, [r3, #4]
	list->head = node;
    4c40:	601a      	str	r2, [r3, #0]
    4c42:	4770      	bx	lr
	parent->next = child;
    4c44:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4c46:	605a      	str	r2, [r3, #4]
    4c48:	4770      	bx	lr
    4c4a:	bf00      	nop
    4c4c:	200004ac 	.word	0x200004ac

00004c50 <bt_l2cap_chan_remove>:
{
    4c50:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4c52:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4c54:	b113      	cbz	r3, 4c5c <bt_l2cap_chan_remove+0xc>
    4c56:	3b08      	subs	r3, #8
    4c58:	2200      	movs	r2, #0
    4c5a:	b903      	cbnz	r3, 4c5e <bt_l2cap_chan_remove+0xe>
    4c5c:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    4c5e:	428b      	cmp	r3, r1
    4c60:	f103 0408 	add.w	r4, r3, #8
    4c64:	d10f      	bne.n	4c86 <bt_l2cap_chan_remove+0x36>
    4c66:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    4c68:	b93a      	cbnz	r2, 4c7a <bt_l2cap_chan_remove+0x2a>
    4c6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
	list->head = node;
    4c6c:	6401      	str	r1, [r0, #64]	; 0x40
Z_GENLIST_REMOVE(slist, snode);
    4c6e:	4294      	cmp	r4, r2
    4c70:	d100      	bne.n	4c74 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    4c72:	6441      	str	r1, [r0, #68]	; 0x44
	parent->next = child;
    4c74:	2200      	movs	r2, #0
    4c76:	609a      	str	r2, [r3, #8]
    4c78:	bd10      	pop	{r4, pc}
    4c7a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4c7c:	6c41      	ldr	r1, [r0, #68]	; 0x44
    4c7e:	428c      	cmp	r4, r1
	list->tail = node;
    4c80:	bf08      	it	eq
    4c82:	6442      	streq	r2, [r0, #68]	; 0x44
    4c84:	e7f6      	b.n	4c74 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    4c86:	4622      	mov	r2, r4
    4c88:	2c00      	cmp	r4, #0
    4c8a:	d0e7      	beq.n	4c5c <bt_l2cap_chan_remove+0xc>
	return node->next;
    4c8c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d0e4      	beq.n	4c5c <bt_l2cap_chan_remove+0xc>
    4c92:	3b08      	subs	r3, #8
    4c94:	e7e1      	b.n	4c5a <bt_l2cap_chan_remove+0xa>

00004c96 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    4c96:	6803      	ldr	r3, [r0, #0]
{
    4c98:	b510      	push	{r4, lr}
    4c9a:	4604      	mov	r4, r0
	if (!chan->conn) {
    4c9c:	b12b      	cbz	r3, 4caa <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    4c9e:	6843      	ldr	r3, [r0, #4]
    4ca0:	685b      	ldr	r3, [r3, #4]
    4ca2:	b103      	cbz	r3, 4ca6 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    4ca4:	4798      	blx	r3
	chan->conn = NULL;
    4ca6:	2300      	movs	r3, #0
    4ca8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    4caa:	68e3      	ldr	r3, [r4, #12]
    4cac:	b11b      	cbz	r3, 4cb6 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    4cae:	4620      	mov	r0, r4
}
    4cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    4cb4:	4718      	bx	r3
    4cb6:	bd10      	pop	{r4, pc}

00004cb8 <l2cap_rtx_timeout>:
{
    4cb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_ERR("chan %p timeout", chan);
    4cba:	4a0c      	ldr	r2, [pc, #48]	; (4cec <l2cap_rtx_timeout+0x34>)
    4cbc:	4b0c      	ldr	r3, [pc, #48]	; (4cf0 <l2cap_rtx_timeout+0x38>)
    4cbe:	9202      	str	r2, [sp, #8]
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    4cc0:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    4cc4:	e88d 0014 	stmia.w	sp, {r2, r4}
{
    4cc8:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    4cca:	681e      	ldr	r6, [r3, #0]
    4ccc:	4909      	ldr	r1, [pc, #36]	; (4cf4 <l2cap_rtx_timeout+0x3c>)
    4cce:	4b0a      	ldr	r3, [pc, #40]	; (4cf8 <l2cap_rtx_timeout+0x40>)
    4cd0:	480a      	ldr	r0, [pc, #40]	; (4cfc <l2cap_rtx_timeout+0x44>)
    4cd2:	47b0      	blx	r6
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    4cd4:	f855 0c10 	ldr.w	r0, [r5, #-16]
    4cd8:	4621      	mov	r1, r4
    4cda:	f7ff ffb9 	bl	4c50 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    4cde:	4620      	mov	r0, r4
}
    4ce0:	b004      	add	sp, #16
    4ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_chan_del(&chan->chan);
    4ce6:	f7ff bfd6 	b.w	4c96 <bt_l2cap_chan_del>
    4cea:	bf00      	nop
    4cec:	00014891 	.word	0x00014891
    4cf0:	20003aa4 	.word	0x20003aa4
    4cf4:	00015639 	.word	0x00015639
    4cf8:	00015e28 	.word	0x00015e28
    4cfc:	00016041 	.word	0x00016041

00004d00 <bt_l2cap_connected>:
{
    4d00:	4b1a      	ldr	r3, [pc, #104]	; (4d6c <bt_l2cap_connected+0x6c>)
    4d02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4d06:	681c      	ldr	r4, [r3, #0]
    4d08:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4d0a:	b12c      	cbz	r4, 4d18 <bt_l2cap_connected+0x18>
	parent->next = child;
    4d0c:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4d0e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4d70 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4d12:	3c08      	subs	r4, #8
    4d14:	46b9      	mov	r9, r7
    4d16:	b914      	cbnz	r4, 4d1e <bt_l2cap_connected+0x1e>
}
    4d18:	b003      	add	sp, #12
    4d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4d1e:	6863      	ldr	r3, [r4, #4]
    4d20:	a901      	add	r1, sp, #4
    4d22:	4630      	mov	r0, r6
    4d24:	4798      	blx	r3
    4d26:	2800      	cmp	r0, #0
    4d28:	db18      	blt.n	4d5c <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    4d2a:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4d2c:	8823      	ldrh	r3, [r4, #0]
    4d2e:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4d30:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4d34:	4641      	mov	r1, r8
    4d36:	f105 0010 	add.w	r0, r5, #16
    4d3a:	f00f fac7 	bl	142cc <k_delayed_work_init>
    4d3e:	60af      	str	r7, [r5, #8]
    4d40:	6c72      	ldr	r2, [r6, #68]	; 0x44
	sys_slist_append(&conn->channels, &chan->node);
    4d42:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    4d46:	b972      	cbnz	r2, 4d66 <bt_l2cap_connected+0x66>
	list->tail = node;
    4d48:	6473      	str	r3, [r6, #68]	; 0x44
	list->head = node;
    4d4a:	6433      	str	r3, [r6, #64]	; 0x40
		if (chan->ops->connected) {
    4d4c:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4d4e:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4d50:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    4d52:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	b103      	cbz	r3, 4d5c <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    4d5a:	4798      	blx	r3
	return node->next;
    4d5c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4d5e:	2c00      	cmp	r4, #0
    4d60:	d0da      	beq.n	4d18 <bt_l2cap_connected+0x18>
    4d62:	3c08      	subs	r4, #8
    4d64:	e7d7      	b.n	4d16 <bt_l2cap_connected+0x16>
	parent->next = child;
    4d66:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4d68:	6473      	str	r3, [r6, #68]	; 0x44
    4d6a:	e7ef      	b.n	4d4c <bt_l2cap_connected+0x4c>
    4d6c:	200004ac 	.word	0x200004ac
    4d70:	00004cb9 	.word	0x00004cb9

00004d74 <bt_l2cap_disconnected>:
{
    4d74:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4d76:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4d78:	b1a3      	cbz	r3, 4da4 <bt_l2cap_disconnected+0x30>
    4d7a:	f1b3 0008 	subs.w	r0, r3, #8
    4d7e:	d10a      	bne.n	4d96 <bt_l2cap_disconnected+0x22>
    4d80:	bd10      	pop	{r4, pc}
    4d82:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    4d84:	f7ff ff87 	bl	4c96 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4d88:	b164      	cbz	r4, 4da4 <bt_l2cap_disconnected+0x30>
	return node->next;
    4d8a:	68a3      	ldr	r3, [r4, #8]
    4d8c:	b103      	cbz	r3, 4d90 <bt_l2cap_disconnected+0x1c>
    4d8e:	3b08      	subs	r3, #8
{
    4d90:	4620      	mov	r0, r4
    4d92:	461c      	mov	r4, r3
    4d94:	e7f6      	b.n	4d84 <bt_l2cap_disconnected+0x10>
    4d96:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4d98:	2c00      	cmp	r4, #0
    4d9a:	d1f2      	bne.n	4d82 <bt_l2cap_disconnected+0xe>
}
    4d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    4da0:	f7ff bf79 	b.w	4c96 <bt_l2cap_chan_del>
    4da4:	bd10      	pop	{r4, pc}

00004da6 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4da6:	3104      	adds	r1, #4
    4da8:	f7ff bdd4 	b.w	4954 <bt_conn_create_pdu>

00004dac <bt_l2cap_send_cb>:
{
    4dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dae:	4614      	mov	r4, r2
    4db0:	4605      	mov	r5, r0
    4db2:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    4db4:	f102 0008 	add.w	r0, r2, #8
    4db8:	2104      	movs	r1, #4
{
    4dba:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    4dbc:	f00d fedb 	bl	12b76 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4dc0:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    4dc2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4dc4:	3904      	subs	r1, #4
    4dc6:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    4dc8:	4632      	mov	r2, r6
    4dca:	4621      	mov	r1, r4
    4dcc:	4628      	mov	r0, r5
}
    4dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    4dd2:	f7ff b851 	b.w	3e78 <bt_conn_send_cb>
	...

00004dd8 <l2cap_recv>:
{
    4dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    4dda:	898b      	ldrh	r3, [r1, #12]
    4ddc:	2b03      	cmp	r3, #3
{
    4dde:	b087      	sub	sp, #28
    4de0:	4607      	mov	r7, r0
    4de2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4de4:	d809      	bhi.n	4dfa <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    4de6:	4a5b      	ldr	r2, [pc, #364]	; (4f54 <l2cap_recv+0x17c>)
    4de8:	4b5b      	ldr	r3, [pc, #364]	; (4f58 <l2cap_recv+0x180>)
    4dea:	9201      	str	r2, [sp, #4]
    4dec:	9200      	str	r2, [sp, #0]
    4dee:	681c      	ldr	r4, [r3, #0]
    4df0:	495a      	ldr	r1, [pc, #360]	; (4f5c <l2cap_recv+0x184>)
    4df2:	4b5b      	ldr	r3, [pc, #364]	; (4f60 <l2cap_recv+0x188>)
    4df4:	485b      	ldr	r0, [pc, #364]	; (4f64 <l2cap_recv+0x18c>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    4df6:	47a0      	blx	r4
		return;
    4df8:	e013      	b.n	4e22 <l2cap_recv+0x4a>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4dfa:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4dfc:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4dfe:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    4e02:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4e04:	f00d febf 	bl	12b86 <net_buf_simple_pull>
	if (buf->len != len) {
    4e08:	89ab      	ldrh	r3, [r5, #12]
    4e0a:	429e      	cmp	r6, r3
    4e0c:	d00b      	beq.n	4e26 <l2cap_recv+0x4e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4e0e:	4a51      	ldr	r2, [pc, #324]	; (4f54 <l2cap_recv+0x17c>)
    4e10:	9203      	str	r2, [sp, #12]
    4e12:	e88d 004c 	stmia.w	sp, {r2, r3, r6}
    4e16:	4b50      	ldr	r3, [pc, #320]	; (4f58 <l2cap_recv+0x180>)
    4e18:	4950      	ldr	r1, [pc, #320]	; (4f5c <l2cap_recv+0x184>)
    4e1a:	681c      	ldr	r4, [r3, #0]
    4e1c:	4852      	ldr	r0, [pc, #328]	; (4f68 <l2cap_recv+0x190>)
    4e1e:	4b50      	ldr	r3, [pc, #320]	; (4f60 <l2cap_recv+0x188>)
    4e20:	47a0      	blx	r4
}
    4e22:	b007      	add	sp, #28
    4e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    4e26:	7861      	ldrb	r1, [r4, #1]
    4e28:	b941      	cbnz	r1, 4e3c <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4e2a:	4a4a      	ldr	r2, [pc, #296]	; (4f54 <l2cap_recv+0x17c>)
    4e2c:	4b4a      	ldr	r3, [pc, #296]	; (4f58 <l2cap_recv+0x180>)
    4e2e:	9201      	str	r2, [sp, #4]
    4e30:	9200      	str	r2, [sp, #0]
    4e32:	681c      	ldr	r4, [r3, #0]
    4e34:	4949      	ldr	r1, [pc, #292]	; (4f5c <l2cap_recv+0x184>)
    4e36:	4b4a      	ldr	r3, [pc, #296]	; (4f60 <l2cap_recv+0x188>)
    4e38:	484c      	ldr	r0, [pc, #304]	; (4f6c <l2cap_recv+0x194>)
    4e3a:	e7dc      	b.n	4df6 <l2cap_recv+0x1e>
	switch (hdr->code) {
    4e3c:	7823      	ldrb	r3, [r4, #0]
    4e3e:	2b12      	cmp	r3, #18
    4e40:	d02a      	beq.n	4e98 <l2cap_recv+0xc0>
    4e42:	2b13      	cmp	r3, #19
    4e44:	d01d      	beq.n	4e82 <l2cap_recv+0xaa>
    4e46:	2b01      	cmp	r3, #1
    4e48:	d0eb      	beq.n	4e22 <l2cap_recv+0x4a>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4e4a:	4a42      	ldr	r2, [pc, #264]	; (4f54 <l2cap_recv+0x17c>)
    4e4c:	9202      	str	r2, [sp, #8]
    4e4e:	e88d 000c 	stmia.w	sp, {r2, r3}
    4e52:	4b41      	ldr	r3, [pc, #260]	; (4f58 <l2cap_recv+0x180>)
    4e54:	4941      	ldr	r1, [pc, #260]	; (4f5c <l2cap_recv+0x184>)
    4e56:	681d      	ldr	r5, [r3, #0]
    4e58:	4845      	ldr	r0, [pc, #276]	; (4f70 <l2cap_recv+0x198>)
    4e5a:	4b41      	ldr	r3, [pc, #260]	; (4f60 <l2cap_recv+0x188>)
    4e5c:	47a8      	blx	r5
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4e5e:	2202      	movs	r2, #2
    4e60:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    4e62:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4e64:	2001      	movs	r0, #1
    4e66:	f7ff fecf 	bl	4c08 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4e6a:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4e6c:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4e6e:	3008      	adds	r0, #8
    4e70:	f00d fe6a 	bl	12b48 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4e74:	2300      	movs	r3, #0
    4e76:	7003      	strb	r3, [r0, #0]
    4e78:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4e7a:	4622      	mov	r2, r4
    4e7c:	2105      	movs	r1, #5
    4e7e:	4628      	mov	r0, r5
    4e80:	e027      	b.n	4ed2 <l2cap_recv+0xfa>
	if (buf->len < sizeof(*rsp)) {
    4e82:	2e01      	cmp	r6, #1
    4e84:	d8cd      	bhi.n	4e22 <l2cap_recv+0x4a>
		BT_ERR("Too small LE conn param rsp");
    4e86:	4a33      	ldr	r2, [pc, #204]	; (4f54 <l2cap_recv+0x17c>)
    4e88:	4b33      	ldr	r3, [pc, #204]	; (4f58 <l2cap_recv+0x180>)
    4e8a:	9201      	str	r2, [sp, #4]
    4e8c:	9200      	str	r2, [sp, #0]
    4e8e:	681c      	ldr	r4, [r3, #0]
    4e90:	4932      	ldr	r1, [pc, #200]	; (4f5c <l2cap_recv+0x184>)
    4e92:	4b38      	ldr	r3, [pc, #224]	; (4f74 <l2cap_recv+0x19c>)
    4e94:	4838      	ldr	r0, [pc, #224]	; (4f78 <l2cap_recv+0x1a0>)
    4e96:	e7ae      	b.n	4df6 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
    4e98:	2e07      	cmp	r6, #7
    4e9a:	d808      	bhi.n	4eae <l2cap_recv+0xd6>
		BT_ERR("Too small LE conn update param req");
    4e9c:	4a2d      	ldr	r2, [pc, #180]	; (4f54 <l2cap_recv+0x17c>)
    4e9e:	4b2e      	ldr	r3, [pc, #184]	; (4f58 <l2cap_recv+0x180>)
    4ea0:	9201      	str	r2, [sp, #4]
    4ea2:	9200      	str	r2, [sp, #0]
    4ea4:	681c      	ldr	r4, [r3, #0]
    4ea6:	492d      	ldr	r1, [pc, #180]	; (4f5c <l2cap_recv+0x184>)
    4ea8:	4b34      	ldr	r3, [pc, #208]	; (4f7c <l2cap_recv+0x1a4>)
    4eaa:	4835      	ldr	r0, [pc, #212]	; (4f80 <l2cap_recv+0x1a8>)
    4eac:	e7a3      	b.n	4df6 <l2cap_recv+0x1e>
    4eae:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    4eb0:	78e6      	ldrb	r6, [r4, #3]
    4eb2:	b18e      	cbz	r6, 4ed8 <l2cap_recv+0x100>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4eb4:	2202      	movs	r2, #2
    4eb6:	2001      	movs	r0, #1
    4eb8:	f7ff fea6 	bl	4c08 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4ebc:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4ebe:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4ec0:	3008      	adds	r0, #8
    4ec2:	f00d fe41 	bl	12b48 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4ec6:	2300      	movs	r3, #0
    4ec8:	7003      	strb	r3, [r0, #0]
    4eca:	7043      	strb	r3, [r0, #1]
    4ecc:	462a      	mov	r2, r5
    4ece:	2105      	movs	r1, #5
    4ed0:	4620      	mov	r0, r4
    4ed2:	f7ff ff6b 	bl	4dac <bt_l2cap_send_cb>
    4ed6:	e7a4      	b.n	4e22 <l2cap_recv+0x4a>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    4ed8:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4eda:	7858      	ldrb	r0, [r3, #1]
    4edc:	781a      	ldrb	r2, [r3, #0]
    4ede:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4ee2:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    4ee6:	78d8      	ldrb	r0, [r3, #3]
    4ee8:	789a      	ldrb	r2, [r3, #2]
    4eea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4eee:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    4ef2:	7958      	ldrb	r0, [r3, #5]
    4ef4:	791a      	ldrb	r2, [r3, #4]
    4ef6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4efa:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    4efe:	799a      	ldrb	r2, [r3, #6]
    4f00:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4f02:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    4f04:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4f08:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4f0a:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4f0e:	f7ff fe7b 	bl	4c08 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    4f12:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4f14:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    4f16:	4620      	mov	r0, r4
    4f18:	f7fe fe80 	bl	3c1c <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4f1c:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4f1e:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    4f20:	f107 0008 	add.w	r0, r7, #8
    4f24:	f00d fe10 	bl	12b48 <net_buf_simple_add>
	if (accepted) {
    4f28:	b17d      	cbz	r5, 4f4a <l2cap_recv+0x172>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    4f2a:	7006      	strb	r6, [r0, #0]
    4f2c:	7046      	strb	r6, [r0, #1]
    4f2e:	2300      	movs	r3, #0
    4f30:	463a      	mov	r2, r7
    4f32:	2105      	movs	r1, #5
    4f34:	4620      	mov	r0, r4
    4f36:	f7ff ff39 	bl	4dac <bt_l2cap_send_cb>
	if (accepted) {
    4f3a:	2d00      	cmp	r5, #0
    4f3c:	f43f af71 	beq.w	4e22 <l2cap_recv+0x4a>
		bt_conn_le_conn_update(conn, &param);
    4f40:	a904      	add	r1, sp, #16
    4f42:	4620      	mov	r0, r4
    4f44:	f7ff fc61 	bl	480a <bt_conn_le_conn_update>
    4f48:	e76b      	b.n	4e22 <l2cap_recv+0x4a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    4f4a:	2301      	movs	r3, #1
    4f4c:	7003      	strb	r3, [r0, #0]
    4f4e:	7045      	strb	r5, [r0, #1]
    4f50:	e7ed      	b.n	4f2e <l2cap_recv+0x156>
    4f52:	bf00      	nop
    4f54:	00014891 	.word	0x00014891
    4f58:	20003aa4 	.word	0x20003aa4
    4f5c:	00015639 	.word	0x00015639
    4f60:	00015e65 	.word	0x00015e65
    4f64:	00015f24 	.word	0x00015f24
    4f68:	00015f52 	.word	0x00015f52
    4f6c:	00015f83 	.word	0x00015f83
    4f70:	00016013 	.word	0x00016013
    4f74:	00015e3a 	.word	0x00015e3a
    4f78:	00015fb4 	.word	0x00015fb4
    4f7c:	00015e4c 	.word	0x00015e4c
    4f80:	00015fe0 	.word	0x00015fe0

00004f84 <bt_l2cap_le_lookup_tx_cid>:
{
    4f84:	6c00      	ldr	r0, [r0, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f86:	b100      	cbz	r0, 4f8a <bt_l2cap_le_lookup_tx_cid+0x6>
    4f88:	3808      	subs	r0, #8
    4f8a:	b900      	cbnz	r0, 4f8e <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4f8c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4f8e:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    4f92:	428b      	cmp	r3, r1
    4f94:	d0fa      	beq.n	4f8c <bt_l2cap_le_lookup_tx_cid+0x8>
    4f96:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f98:	2000      	movs	r0, #0
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d0f6      	beq.n	4f8c <bt_l2cap_le_lookup_tx_cid+0x8>
    4f9e:	f1a3 0008 	sub.w	r0, r3, #8
    4fa2:	e7f2      	b.n	4f8a <bt_l2cap_le_lookup_tx_cid+0x6>

00004fa4 <bt_l2cap_le_lookup_rx_cid>:
{
    4fa4:	6c00      	ldr	r0, [r0, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4fa6:	b100      	cbz	r0, 4faa <bt_l2cap_le_lookup_rx_cid+0x6>
    4fa8:	3808      	subs	r0, #8
    4faa:	b900      	cbnz	r0, 4fae <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4fac:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4fae:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4fb0:	428b      	cmp	r3, r1
    4fb2:	d0fb      	beq.n	4fac <bt_l2cap_le_lookup_rx_cid+0x8>
    4fb4:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4fb6:	2000      	movs	r0, #0
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d0f7      	beq.n	4fac <bt_l2cap_le_lookup_rx_cid+0x8>
    4fbc:	f1a3 0008 	sub.w	r0, r3, #8
    4fc0:	e7f3      	b.n	4faa <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00004fc4 <bt_l2cap_recv>:
{
    4fc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    4fc6:	898b      	ldrh	r3, [r1, #12]
    4fc8:	2b03      	cmp	r3, #3
{
    4fca:	4606      	mov	r6, r0
    4fcc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    4fce:	d80e      	bhi.n	4fee <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    4fd0:	4a15      	ldr	r2, [pc, #84]	; (5028 <bt_l2cap_recv+0x64>)
    4fd2:	4b16      	ldr	r3, [pc, #88]	; (502c <bt_l2cap_recv+0x68>)
    4fd4:	9201      	str	r2, [sp, #4]
    4fd6:	9200      	str	r2, [sp, #0]
    4fd8:	681d      	ldr	r5, [r3, #0]
    4fda:	4915      	ldr	r1, [pc, #84]	; (5030 <bt_l2cap_recv+0x6c>)
    4fdc:	4b15      	ldr	r3, [pc, #84]	; (5034 <bt_l2cap_recv+0x70>)
    4fde:	4816      	ldr	r0, [pc, #88]	; (5038 <bt_l2cap_recv+0x74>)
    4fe0:	47a8      	blx	r5
	net_buf_unref(buf);
    4fe2:	4620      	mov	r0, r4
}
    4fe4:	b004      	add	sp, #16
    4fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    4fea:	f00d bd75 	b.w	12ad8 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    4fee:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4ff0:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    4ff2:	f850 3f08 	ldr.w	r3, [r0, #8]!
    4ff6:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4ff8:	f00d fdc5 	bl	12b86 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    4ffc:	4629      	mov	r1, r5
    4ffe:	4630      	mov	r0, r6
    5000:	f7ff ffd0 	bl	4fa4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5004:	b950      	cbnz	r0, 501c <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    5006:	4a08      	ldr	r2, [pc, #32]	; (5028 <bt_l2cap_recv+0x64>)
    5008:	4b08      	ldr	r3, [pc, #32]	; (502c <bt_l2cap_recv+0x68>)
    500a:	9202      	str	r2, [sp, #8]
    500c:	e88d 0024 	stmia.w	sp, {r2, r5}
    5010:	4907      	ldr	r1, [pc, #28]	; (5030 <bt_l2cap_recv+0x6c>)
    5012:	681d      	ldr	r5, [r3, #0]
    5014:	4809      	ldr	r0, [pc, #36]	; (503c <bt_l2cap_recv+0x78>)
    5016:	4b07      	ldr	r3, [pc, #28]	; (5034 <bt_l2cap_recv+0x70>)
    5018:	47a8      	blx	r5
    501a:	e7e2      	b.n	4fe2 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    501c:	6843      	ldr	r3, [r0, #4]
    501e:	4621      	mov	r1, r4
    5020:	691b      	ldr	r3, [r3, #16]
    5022:	4798      	blx	r3
    5024:	e7dd      	b.n	4fe2 <bt_l2cap_recv+0x1e>
    5026:	bf00      	nop
    5028:	00014891 	.word	0x00014891
    502c:	20003aa4 	.word	0x20003aa4
    5030:	00015639 	.word	0x00015639
    5034:	00015e70 	.word	0x00015e70
    5038:	00015e8b 	.word	0x00015e8b
    503c:	00015eb8 	.word	0x00015eb8

00005040 <bt_l2cap_update_conn_param>:
{
    5040:	b570      	push	{r4, r5, r6, lr}
	ident++;
    5042:	4b12      	ldr	r3, [pc, #72]	; (508c <bt_l2cap_update_conn_param+0x4c>)
    5044:	781a      	ldrb	r2, [r3, #0]
    5046:	3201      	adds	r2, #1
	if (!ident) {
    5048:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    504c:	bf08      	it	eq
    504e:	2201      	moveq	r2, #1
    5050:	701a      	strb	r2, [r3, #0]
{
    5052:	460c      	mov	r4, r1
    5054:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5056:	7819      	ldrb	r1, [r3, #0]
    5058:	2208      	movs	r2, #8
    505a:	2012      	movs	r0, #18
    505c:	f7ff fdd4 	bl	4c08 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5060:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5062:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5064:	4408      	add	r0, r1
    5066:	f00d fd6f 	bl	12b48 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    506a:	8823      	ldrh	r3, [r4, #0]
    506c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    506e:	8863      	ldrh	r3, [r4, #2]
    5070:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    5072:	88a3      	ldrh	r3, [r4, #4]
    5074:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5076:	88e3      	ldrh	r3, [r4, #6]
    5078:	80c3      	strh	r3, [r0, #6]
    507a:	4632      	mov	r2, r6
    507c:	4628      	mov	r0, r5
    507e:	2300      	movs	r3, #0
    5080:	2105      	movs	r1, #5
    5082:	f7ff fe93 	bl	4dac <bt_l2cap_send_cb>
}
    5086:	2000      	movs	r0, #0
    5088:	bd70      	pop	{r4, r5, r6, pc}
    508a:	bf00      	nop
    508c:	200004a8 	.word	0x200004a8

00005090 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5090:	4801      	ldr	r0, [pc, #4]	; (5098 <bt_l2cap_init+0x8>)
    5092:	f7ff bdcd 	b.w	4c30 <bt_l2cap_le_fixed_chan_register>
    5096:	bf00      	nop
    5098:	20003be8 	.word	0x20003be8

0000509c <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    509c:	2006      	movs	r0, #6
    509e:	4770      	bx	lr

000050a0 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    50a0:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    50a2:	4a0a      	ldr	r2, [pc, #40]	; (50cc <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    50a4:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    50a6:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    50aa:	4284      	cmp	r4, r0
    50ac:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    50b0:	d102      	bne.n	50b8 <att_op_get_type+0x18>
			return handlers[i].type;
    50b2:	440a      	add	r2, r1
    50b4:	7890      	ldrb	r0, [r2, #2]
    50b6:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    50b8:	3301      	adds	r3, #1
    50ba:	2b1b      	cmp	r3, #27
    50bc:	d1f3      	bne.n	50a6 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    50be:	f010 0f40 	tst.w	r0, #64	; 0x40
    50c2:	bf14      	ite	ne
    50c4:	2000      	movne	r0, #0
    50c6:	2006      	moveq	r0, #6
}
    50c8:	bd10      	pop	{r4, pc}
    50ca:	bf00      	nop
    50cc:	00016338 	.word	0x00016338

000050d0 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    50d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    50d2:	4d11      	ldr	r5, [pc, #68]	; (5118 <bt_att_accept+0x48>)
    50d4:	682c      	ldr	r4, [r5, #0]
{
    50d6:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    50d8:	b984      	cbnz	r4, 50fc <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    50da:	22f4      	movs	r2, #244	; 0xf4
    50dc:	4621      	mov	r1, r4
    50de:	4628      	mov	r0, r5
    50e0:	f7fc fdca 	bl	1c78 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    50e4:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    50e6:	4b0d      	ldr	r3, [pc, #52]	; (511c <bt_att_accept+0x4c>)
    50e8:	606b      	str	r3, [r5, #4]
    50ea:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    50ee:	4611      	mov	r1, r2
    50f0:	f00e fdd8 	bl	13ca4 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    50f4:	6035      	str	r5, [r6, #0]

		return 0;
    50f6:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    50f8:	b004      	add	sp, #16
    50fa:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    50fc:	4a08      	ldr	r2, [pc, #32]	; (5120 <bt_att_accept+0x50>)
    50fe:	4b09      	ldr	r3, [pc, #36]	; (5124 <bt_att_accept+0x54>)
    5100:	9001      	str	r0, [sp, #4]
    5102:	9202      	str	r2, [sp, #8]
    5104:	9200      	str	r2, [sp, #0]
    5106:	681c      	ldr	r4, [r3, #0]
    5108:	4807      	ldr	r0, [pc, #28]	; (5128 <bt_att_accept+0x58>)
    510a:	4b08      	ldr	r3, [pc, #32]	; (512c <bt_att_accept+0x5c>)
    510c:	4908      	ldr	r1, [pc, #32]	; (5130 <bt_att_accept+0x60>)
    510e:	47a0      	blx	r4
	return -ENOMEM;
    5110:	f06f 000b 	mvn.w	r0, #11
    5114:	e7f0      	b.n	50f8 <bt_att_accept+0x28>
    5116:	bf00      	nop
    5118:	200004b4 	.word	0x200004b4
    511c:	20003c14 	.word	0x20003c14
    5120:	00014891 	.word	0x00014891
    5124:	20003aa4 	.word	0x20003aa4
    5128:	000161f0 	.word	0x000161f0
    512c:	000160e0 	.word	0x000160e0
    5130:	00015639 	.word	0x00015639

00005134 <att_req_destroy>:
{
    5134:	b510      	push	{r4, lr}
    5136:	4604      	mov	r4, r0
	if (req->buf) {
    5138:	6900      	ldr	r0, [r0, #16]
    513a:	b108      	cbz	r0, 5140 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    513c:	f00d fccc 	bl	12ad8 <net_buf_unref>
	if (req->destroy) {
    5140:	68a3      	ldr	r3, [r4, #8]
    5142:	b10b      	cbz	r3, 5148 <att_req_destroy+0x14>
		req->destroy(req);
    5144:	4620      	mov	r0, r4
    5146:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5148:	4620      	mov	r0, r4
    514a:	2214      	movs	r2, #20
    514c:	2100      	movs	r1, #0
}
    514e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5152:	f7fc bd91 	b.w	1c78 <memset>

00005156 <att_notify>:
{
    5156:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    5158:	f101 0008 	add.w	r0, r1, #8
    515c:	f00d fd23 	bl	12ba6 <net_buf_simple_pull_le16>
}
    5160:	2000      	movs	r0, #0
    5162:	bd08      	pop	{r3, pc}

00005164 <read_group_cb>:
{
    5164:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5168:	680d      	ldr	r5, [r1, #0]
{
    516a:	4606      	mov	r6, r0
    516c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    516e:	f04f 0800 	mov.w	r8, #0
    5172:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5176:	a902      	add	r1, sp, #8
    5178:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    517a:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    517c:	f88d 8008 	strb.w	r8, [sp, #8]
    5180:	f8ad 300a 	strh.w	r3, [sp, #10]
    5184:	f7fc feca 	bl	1f1c <bt_uuid_cmp>
    5188:	b198      	cbz	r0, 51b2 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    518a:	f642 0301 	movw	r3, #10241	; 0x2801
    518e:	a903      	add	r1, sp, #12
    5190:	6830      	ldr	r0, [r6, #0]
    5192:	f88d 800c 	strb.w	r8, [sp, #12]
    5196:	f8ad 300e 	strh.w	r3, [sp, #14]
    519a:	f7fc febf 	bl	1f1c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    519e:	b140      	cbz	r0, 51b2 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    51a0:	6923      	ldr	r3, [r4, #16]
    51a2:	b123      	cbz	r3, 51ae <read_group_cb+0x4a>
    51a4:	8a32      	ldrh	r2, [r6, #16]
    51a6:	8859      	ldrh	r1, [r3, #2]
    51a8:	4291      	cmp	r1, r2
    51aa:	d200      	bcs.n	51ae <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    51ac:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    51ae:	2001      	movs	r0, #1
    51b0:	e012      	b.n	51d8 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    51b2:	6861      	ldr	r1, [r4, #4]
    51b4:	6830      	ldr	r0, [r6, #0]
    51b6:	f7fc feb1 	bl	1f1c <bt_uuid_cmp>
    51ba:	b110      	cbz	r0, 51c2 <read_group_cb+0x5e>
		data->group = NULL;
    51bc:	2300      	movs	r3, #0
    51be:	6123      	str	r3, [r4, #16]
    51c0:	e7f5      	b.n	51ae <read_group_cb+0x4a>
	if (data->rsp->len &&
    51c2:	68e3      	ldr	r3, [r4, #12]
    51c4:	68a0      	ldr	r0, [r4, #8]
    51c6:	781a      	ldrb	r2, [r3, #0]
    51c8:	b14a      	cbz	r2, 51de <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    51ca:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
    51ce:	8981      	ldrh	r1, [r0, #12]
    51d0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    51d2:	4293      	cmp	r3, r2
    51d4:	da03      	bge.n	51de <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    51d6:	2000      	movs	r0, #0
}
    51d8:	b004      	add	sp, #16
    51da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    51de:	2104      	movs	r1, #4
    51e0:	3008      	adds	r0, #8
    51e2:	f00d fcb1 	bl	12b48 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    51e6:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    51e8:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    51ea:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    51ec:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    51ee:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    51f0:	898a      	ldrh	r2, [r1, #12]
    51f2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
    51f6:	6889      	ldr	r1, [r1, #8]
    51f8:	f8d6 8004 	ldr.w	r8, [r6, #4]
    51fc:	1a9b      	subs	r3, r3, r2
    51fe:	2500      	movs	r5, #0
    5200:	440a      	add	r2, r1
    5202:	9500      	str	r5, [sp, #0]
    5204:	4631      	mov	r1, r6
    5206:	b29b      	uxth	r3, r3
    5208:	4638      	mov	r0, r7
    520a:	47c0      	blx	r8
	if (read < 0) {
    520c:	1e01      	subs	r1, r0, #0
    520e:	dbe2      	blt.n	51d6 <read_group_cb+0x72>
	if (!data->rsp->len) {
    5210:	68e0      	ldr	r0, [r4, #12]
    5212:	7802      	ldrb	r2, [r0, #0]
    5214:	1d0b      	adds	r3, r1, #4
    5216:	b92a      	cbnz	r2, 5224 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5218:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    521a:	68a0      	ldr	r0, [r4, #8]
    521c:	3008      	adds	r0, #8
    521e:	f00d fc93 	bl	12b48 <net_buf_simple_add>
    5222:	e7c4      	b.n	51ae <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5224:	429a      	cmp	r2, r3
    5226:	d0f8      	beq.n	521a <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5228:	68a2      	ldr	r2, [r4, #8]
    522a:	8993      	ldrh	r3, [r2, #12]
    522c:	3b04      	subs	r3, #4
    522e:	8193      	strh	r3, [r2, #12]
    5230:	e7d1      	b.n	51d6 <read_group_cb+0x72>

00005232 <find_info_cb>:
	if (!data->rsp) {
    5232:	688b      	ldr	r3, [r1, #8]
{
    5234:	b570      	push	{r4, r5, r6, lr}
    5236:	4605      	mov	r5, r0
    5238:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    523a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    523c:	b963      	cbnz	r3, 5258 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    523e:	6848      	ldr	r0, [r1, #4]
    5240:	2101      	movs	r1, #1
    5242:	3008      	adds	r0, #8
    5244:	f00d fc80 	bl	12b48 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5248:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    524a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    524c:	781b      	ldrb	r3, [r3, #0]
    524e:	2b00      	cmp	r3, #0
    5250:	bf0c      	ite	eq
    5252:	2301      	moveq	r3, #1
    5254:	2302      	movne	r3, #2
    5256:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5258:	68a3      	ldr	r3, [r4, #8]
    525a:	781b      	ldrb	r3, [r3, #0]
    525c:	2b01      	cmp	r3, #1
    525e:	d003      	beq.n	5268 <find_info_cb+0x36>
    5260:	2b02      	cmp	r3, #2
    5262:	d01a      	beq.n	529a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5264:	2000      	movs	r0, #0
}
    5266:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5268:	682b      	ldr	r3, [r5, #0]
    526a:	781b      	ldrb	r3, [r3, #0]
    526c:	2b00      	cmp	r3, #0
    526e:	d1f9      	bne.n	5264 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5270:	6860      	ldr	r0, [r4, #4]
    5272:	2104      	movs	r1, #4
    5274:	3008      	adds	r0, #8
    5276:	f00d fc67 	bl	12b48 <net_buf_simple_add>
    527a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    527c:	8a2b      	ldrh	r3, [r5, #16]
    527e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5280:	682b      	ldr	r3, [r5, #0]
    5282:	885b      	ldrh	r3, [r3, #2]
    5284:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5286:	6863      	ldr	r3, [r4, #4]
    5288:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
    528c:	899b      	ldrh	r3, [r3, #12]
    528e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5290:	2804      	cmp	r0, #4
    5292:	bf94      	ite	ls
    5294:	2000      	movls	r0, #0
    5296:	2001      	movhi	r0, #1
    5298:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    529a:	682b      	ldr	r3, [r5, #0]
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	2b02      	cmp	r3, #2
    52a0:	d1e0      	bne.n	5264 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    52a2:	6860      	ldr	r0, [r4, #4]
    52a4:	2112      	movs	r1, #18
    52a6:	3008      	adds	r0, #8
    52a8:	f00d fc4e 	bl	12b48 <net_buf_simple_add>
    52ac:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    52ae:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    52b0:	8a2b      	ldrh	r3, [r5, #16]
    52b2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    52b6:	2210      	movs	r2, #16
    52b8:	3101      	adds	r1, #1
    52ba:	f7fc fcb1 	bl	1c20 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    52be:	6863      	ldr	r3, [r4, #4]
    52c0:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
    52c4:	899b      	ldrh	r3, [r3, #12]
    52c6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    52c8:	2812      	cmp	r0, #18
    52ca:	e7e2      	b.n	5292 <find_info_cb+0x60>

000052cc <find_type_cb>:
{
    52cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    52d0:	680e      	ldr	r6, [r1, #0]
{
    52d2:	b088      	sub	sp, #32
    52d4:	4605      	mov	r5, r0
    52d6:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    52d8:	2700      	movs	r7, #0
    52da:	f642 0301 	movw	r3, #10241	; 0x2801
    52de:	a902      	add	r1, sp, #8
    52e0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    52e2:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    52e6:	f88d 7008 	strb.w	r7, [sp, #8]
    52ea:	f8ad 300a 	strh.w	r3, [sp, #10]
    52ee:	f7fc fe15 	bl	1f1c <bt_uuid_cmp>
    52f2:	b928      	cbnz	r0, 5300 <find_type_cb+0x34>
		data->group = NULL;
    52f4:	2300      	movs	r3, #0
    52f6:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    52f8:	2001      	movs	r0, #1
}
    52fa:	b008      	add	sp, #32
    52fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5300:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5304:	a903      	add	r1, sp, #12
    5306:	6828      	ldr	r0, [r5, #0]
    5308:	f88d 700c 	strb.w	r7, [sp, #12]
    530c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5310:	f7fc fe04 	bl	1f1c <bt_uuid_cmp>
    5314:	b140      	cbz	r0, 5328 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    5316:	68a3      	ldr	r3, [r4, #8]
    5318:	2b00      	cmp	r3, #0
    531a:	d0ed      	beq.n	52f8 <find_type_cb+0x2c>
    531c:	8a2a      	ldrh	r2, [r5, #16]
    531e:	8859      	ldrh	r1, [r3, #2]
    5320:	4291      	cmp	r1, r2
    5322:	d2e9      	bcs.n	52f8 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5324:	805a      	strh	r2, [r3, #2]
    5326:	e7e7      	b.n	52f8 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5328:	6862      	ldr	r2, [r4, #4]
    532a:	f8b6 305e 	ldrh.w	r3, [r6, #94]	; 0x5e
    532e:	8992      	ldrh	r2, [r2, #12]
    5330:	1a9b      	subs	r3, r3, r2
    5332:	2b03      	cmp	r3, #3
    5334:	d9e1      	bls.n	52fa <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5336:	2310      	movs	r3, #16
    5338:	9000      	str	r0, [sp, #0]
    533a:	eb0d 0203 	add.w	r2, sp, r3
    533e:	686e      	ldr	r6, [r5, #4]
    5340:	4629      	mov	r1, r5
    5342:	4640      	mov	r0, r8
    5344:	47b0      	blx	r6
	if (read < 0) {
    5346:	1e02      	subs	r2, r0, #0
    5348:	dbd4      	blt.n	52f4 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    534a:	7c23      	ldrb	r3, [r4, #16]
    534c:	429a      	cmp	r2, r3
    534e:	d1d1      	bne.n	52f4 <find_type_cb+0x28>
    5350:	a904      	add	r1, sp, #16
    5352:	68e0      	ldr	r0, [r4, #12]
    5354:	f7fc fc4f 	bl	1bf6 <memcmp>
    5358:	2800      	cmp	r0, #0
    535a:	d1cb      	bne.n	52f4 <find_type_cb+0x28>
	data->err = 0x00;
    535c:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    535e:	6860      	ldr	r0, [r4, #4]
    5360:	2104      	movs	r1, #4
    5362:	3008      	adds	r0, #8
    5364:	f00d fbf0 	bl	12b48 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5368:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    536a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    536c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    536e:	8043      	strh	r3, [r0, #2]
    5370:	e7c2      	b.n	52f8 <find_type_cb+0x2c>
	...

00005374 <bt_att_connected>:
{
    5374:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5376:	2317      	movs	r3, #23
{
    5378:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    537a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    537e:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5380:	4906      	ldr	r1, [pc, #24]	; (539c <bt_att_connected+0x28>)
    5382:	30b0      	adds	r0, #176	; 0xb0
    5384:	f00e ffa2 	bl	142cc <k_delayed_work_init>
	list->head = NULL;
    5388:	2300      	movs	r3, #0
    538a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	list->tail = NULL;
    538e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	bt_gatt_connected(ch->chan.conn);
    5392:	6820      	ldr	r0, [r4, #0]
}
    5394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5398:	f001 bbfe 	b.w	6b98 <bt_gatt_connected>
    539c:	000058c1 	.word	0x000058c1

000053a0 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    53a0:	f011 0f01 	tst.w	r1, #1
    53a4:	7c83      	ldrb	r3, [r0, #18]
    53a6:	d004      	beq.n	53b2 <check_perm.isra.5+0x12>
    53a8:	f013 0f15 	tst.w	r3, #21
    53ac:	d012      	beq.n	53d4 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    53ae:	6842      	ldr	r2, [r0, #4]
    53b0:	b182      	cbz	r2, 53d4 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    53b2:	078a      	lsls	r2, r1, #30
    53b4:	d504      	bpl.n	53c0 <check_perm.isra.5+0x20>
    53b6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    53ba:	d00d      	beq.n	53d8 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    53bc:	6882      	ldr	r2, [r0, #8]
    53be:	b15a      	cbz	r2, 53d8 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    53c0:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    53c2:	f011 0f30 	tst.w	r1, #48	; 0x30
    53c6:	d109      	bne.n	53dc <check_perm.isra.5+0x3c>
	return 0;
    53c8:	f011 0f0c 	tst.w	r1, #12
    53cc:	bf14      	ite	ne
    53ce:	200f      	movne	r0, #15
    53d0:	2000      	moveq	r0, #0
    53d2:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    53d4:	2002      	movs	r0, #2
    53d6:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    53d8:	2003      	movs	r0, #3
    53da:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    53dc:	2005      	movs	r0, #5
}
    53de:	4770      	bx	lr

000053e0 <read_type_cb>:
{
    53e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    53e4:	680f      	ldr	r7, [r1, #0]
{
    53e6:	4606      	mov	r6, r0
    53e8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    53ea:	6800      	ldr	r0, [r0, #0]
    53ec:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    53ee:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    53f2:	f7fc fd93 	bl	1f1c <bt_uuid_cmp>
    53f6:	4680      	mov	r8, r0
    53f8:	2800      	cmp	r0, #0
    53fa:	d14d      	bne.n	5498 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    53fc:	2115      	movs	r1, #21
    53fe:	4630      	mov	r0, r6
    5400:	f7ff ffce 	bl	53a0 <check_perm.isra.5>
    5404:	4605      	mov	r5, r0
    5406:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5408:	b148      	cbz	r0, 541e <read_type_cb+0x3e>
		if (data->rsp->len) {
    540a:	68e3      	ldr	r3, [r4, #12]
    540c:	781d      	ldrb	r5, [r3, #0]
    540e:	b115      	cbz	r5, 5416 <read_type_cb+0x36>
			data->err = 0x00;
    5410:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5414:	4645      	mov	r5, r8
}
    5416:	4628      	mov	r0, r5
    5418:	b003      	add	sp, #12
    541a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    541e:	68a0      	ldr	r0, [r4, #8]
    5420:	2102      	movs	r1, #2
    5422:	3008      	adds	r0, #8
    5424:	f00d fb90 	bl	12b48 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5428:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    542a:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    542c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    542e:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5430:	898a      	ldrh	r2, [r1, #12]
    5432:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    5436:	6889      	ldr	r1, [r1, #8]
    5438:	f8d6 8004 	ldr.w	r8, [r6, #4]
    543c:	9500      	str	r5, [sp, #0]
    543e:	1a9b      	subs	r3, r3, r2
    5440:	b29b      	uxth	r3, r3
    5442:	440a      	add	r2, r1
    5444:	4648      	mov	r0, r9
    5446:	4631      	mov	r1, r6
    5448:	47c0      	blx	r8
	if (read < 0) {
    544a:	1e01      	subs	r1, r0, #0
    544c:	da08      	bge.n	5460 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    544e:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5452:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5454:	bf9a      	itte	ls
    5456:	4249      	negls	r1, r1
    5458:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    545a:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    545c:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    545e:	e7da      	b.n	5416 <read_type_cb+0x36>
	if (!data->rsp->len) {
    5460:	68e0      	ldr	r0, [r4, #12]
    5462:	7802      	ldrb	r2, [r0, #0]
    5464:	1c8b      	adds	r3, r1, #2
    5466:	b982      	cbnz	r2, 548a <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5468:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    546a:	68a0      	ldr	r0, [r4, #8]
    546c:	3008      	adds	r0, #8
    546e:	f00d fb6b 	bl	12b48 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5472:	68a3      	ldr	r3, [r4, #8]
    5474:	f8b7 505e 	ldrh.w	r5, [r7, #94]	; 0x5e
    5478:	899b      	ldrh	r3, [r3, #12]
    547a:	1aed      	subs	r5, r5, r3
    547c:	68e3      	ldr	r3, [r4, #12]
    547e:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5480:	429d      	cmp	r5, r3
    5482:	bfd4      	ite	le
    5484:	2500      	movle	r5, #0
    5486:	2501      	movgt	r5, #1
    5488:	e7c5      	b.n	5416 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    548a:	429a      	cmp	r2, r3
    548c:	d0ed      	beq.n	546a <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    548e:	68a2      	ldr	r2, [r4, #8]
    5490:	8993      	ldrh	r3, [r2, #12]
    5492:	3b02      	subs	r3, #2
    5494:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5496:	e7be      	b.n	5416 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5498:	2501      	movs	r5, #1
    549a:	e7bc      	b.n	5416 <read_type_cb+0x36>

0000549c <uuid_create>:
{
    549c:	b510      	push	{r4, lr}
	switch (buf->len) {
    549e:	898a      	ldrh	r2, [r1, #12]
    54a0:	2a02      	cmp	r2, #2
{
    54a2:	4604      	mov	r4, r0
	switch (buf->len) {
    54a4:	d003      	beq.n	54ae <uuid_create+0x12>
    54a6:	2a10      	cmp	r2, #16
    54a8:	d00a      	beq.n	54c0 <uuid_create+0x24>
	return false;
    54aa:	2000      	movs	r0, #0
}
    54ac:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    54ae:	2300      	movs	r3, #0
    54b0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    54b2:	f101 0008 	add.w	r0, r1, #8
    54b6:	f00d fb76 	bl	12ba6 <net_buf_simple_pull_le16>
    54ba:	8060      	strh	r0, [r4, #2]
		return true;
    54bc:	2001      	movs	r0, #1
    54be:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    54c0:	2302      	movs	r3, #2
    54c2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    54c6:	6889      	ldr	r1, [r1, #8]
    54c8:	f7fc fbaa 	bl	1c20 <memcpy>
    54cc:	e7f6      	b.n	54bc <uuid_create+0x20>
	...

000054d0 <att_req_sent>:
{
    54d0:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    54d2:	2104      	movs	r1, #4
    54d4:	f7ff fd56 	bl	4f84 <bt_l2cap_le_lookup_tx_cid>
    54d8:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    54da:	30d8      	adds	r0, #216	; 0xd8
    54dc:	f00e fbfa 	bl	13cd4 <_impl_k_sem_give>
	if (att->req) {
    54e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    54e4:	b143      	cbz	r3, 54f8 <att_req_sent+0x28>
    54e6:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
    54ea:	f247 5230 	movw	r2, #30000	; 0x7530
    54ee:	4803      	ldr	r0, [pc, #12]	; (54fc <att_req_sent+0x2c>)
}
    54f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54f4:	f00e bf5e 	b.w	143b4 <k_delayed_work_submit_to_queue>
    54f8:	bd10      	pop	{r4, pc}
    54fa:	bf00      	nop
    54fc:	200019c8 	.word	0x200019c8

00005500 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5500:	6803      	ldr	r3, [r0, #0]
    5502:	7a5b      	ldrb	r3, [r3, #9]
    5504:	2b03      	cmp	r3, #3
    5506:	d10a      	bne.n	551e <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5508:	f3bf 8f5b 	dmb	ish
    550c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    5510:	f3bf 8f5b 	dmb	ish
    5514:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5518:	f000 0001 	and.w	r0, r0, #1
    551c:	4770      	bx	lr
    551e:	2001      	movs	r0, #1
}
    5520:	4770      	bx	lr

00005522 <att_prepare_write_req>:
    5522:	2006      	movs	r0, #6
    5524:	4770      	bx	lr

00005526 <att_pdu_sent>:
{
    5526:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5528:	2104      	movs	r1, #4
    552a:	f7ff fd2b 	bl	4f84 <bt_l2cap_le_lookup_tx_cid>
}
    552e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5532:	30d8      	adds	r0, #216	; 0xd8
    5534:	f00e bbce 	b.w	13cd4 <_impl_k_sem_give>

00005538 <att_rsp_sent>:
{
    5538:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    553a:	2104      	movs	r1, #4
    553c:	f7ff fd22 	bl	4f84 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5540:	f3bf 8f5b 	dmb	ish
    5544:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    5548:	e853 2f00 	ldrex	r2, [r3]
    554c:	f022 0201 	bic.w	r2, r2, #1
    5550:	e843 2100 	strex	r1, r2, [r3]
    5554:	2900      	cmp	r1, #0
    5556:	d1f7      	bne.n	5548 <att_rsp_sent+0x10>
    5558:	f3bf 8f5b 	dmb	ish
    555c:	30d8      	adds	r0, #216	; 0xd8
}
    555e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5562:	f00e bbb7 	b.w	13cd4 <_impl_k_sem_give>

00005566 <att_cfm_sent>:
{
    5566:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5568:	2104      	movs	r1, #4
    556a:	f7ff fd0b 	bl	4f84 <bt_l2cap_le_lookup_tx_cid>
    556e:	f3bf 8f5b 	dmb	ish
    5572:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    5576:	e853 2f00 	ldrex	r2, [r3]
    557a:	f022 0202 	bic.w	r2, r2, #2
    557e:	e843 2100 	strex	r1, r2, [r3]
    5582:	2900      	cmp	r1, #0
    5584:	d1f7      	bne.n	5576 <att_cfm_sent+0x10>
    5586:	f3bf 8f5b 	dmb	ish
    558a:	30d8      	adds	r0, #216	; 0xd8
}
    558c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5590:	f00e bba0 	b.w	13cd4 <_impl_k_sem_give>

00005594 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5594:	7a43      	ldrb	r3, [r0, #9]
    5596:	2b03      	cmp	r3, #3
{
    5598:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    559a:	d00b      	beq.n	55b4 <att_chan_get+0x20>
		BT_WARN("Not connected");
    559c:	4a16      	ldr	r2, [pc, #88]	; (55f8 <att_chan_get+0x64>)
    559e:	4b17      	ldr	r3, [pc, #92]	; (55fc <att_chan_get+0x68>)
    55a0:	9201      	str	r2, [sp, #4]
    55a2:	9200      	str	r2, [sp, #0]
    55a4:	681c      	ldr	r4, [r3, #0]
    55a6:	4916      	ldr	r1, [pc, #88]	; (5600 <att_chan_get+0x6c>)
    55a8:	4b16      	ldr	r3, [pc, #88]	; (5604 <att_chan_get+0x70>)
    55aa:	4817      	ldr	r0, [pc, #92]	; (5608 <att_chan_get+0x74>)
		BT_WARN("ATT context flagged as disconnected");
    55ac:	47a0      	blx	r4
		return NULL;
    55ae:	2000      	movs	r0, #0
}
    55b0:	b003      	add	sp, #12
    55b2:	bd30      	pop	{r4, r5, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    55b4:	2104      	movs	r1, #4
    55b6:	f7ff fcf5 	bl	4fa4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    55ba:	4604      	mov	r4, r0
    55bc:	b950      	cbnz	r0, 55d4 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    55be:	4a0e      	ldr	r2, [pc, #56]	; (55f8 <att_chan_get+0x64>)
    55c0:	4b0e      	ldr	r3, [pc, #56]	; (55fc <att_chan_get+0x68>)
    55c2:	9201      	str	r2, [sp, #4]
    55c4:	9200      	str	r2, [sp, #0]
    55c6:	681d      	ldr	r5, [r3, #0]
    55c8:	490d      	ldr	r1, [pc, #52]	; (5600 <att_chan_get+0x6c>)
    55ca:	4b0e      	ldr	r3, [pc, #56]	; (5604 <att_chan_get+0x70>)
    55cc:	480f      	ldr	r0, [pc, #60]	; (560c <att_chan_get+0x78>)
    55ce:	47a8      	blx	r5
    55d0:	4620      	mov	r0, r4
    55d2:	e7ed      	b.n	55b0 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    55d4:	f3bf 8f5b 	dmb	ish
    55d8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    55dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    55e0:	075b      	lsls	r3, r3, #29
    55e2:	d5f5      	bpl.n	55d0 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    55e4:	4a04      	ldr	r2, [pc, #16]	; (55f8 <att_chan_get+0x64>)
    55e6:	4b05      	ldr	r3, [pc, #20]	; (55fc <att_chan_get+0x68>)
    55e8:	9201      	str	r2, [sp, #4]
    55ea:	9200      	str	r2, [sp, #0]
    55ec:	681c      	ldr	r4, [r3, #0]
    55ee:	4904      	ldr	r1, [pc, #16]	; (5600 <att_chan_get+0x6c>)
    55f0:	4b04      	ldr	r3, [pc, #16]	; (5604 <att_chan_get+0x70>)
    55f2:	4807      	ldr	r0, [pc, #28]	; (5610 <att_chan_get+0x7c>)
    55f4:	e7da      	b.n	55ac <att_chan_get+0x18>
    55f6:	bf00      	nop
    55f8:	00014891 	.word	0x00014891
    55fc:	20003aa4 	.word	0x20003aa4
    5600:	00015639 	.word	0x00015639
    5604:	000160b5 	.word	0x000160b5
    5608:	000160ee 	.word	0x000160ee
    560c:	0001610c 	.word	0x0001610c
    5610:	00016137 	.word	0x00016137

00005614 <write_cb>:
{
    5614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5618:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    561a:	f8d1 8000 	ldr.w	r8, [r1]
    561e:	212a      	movs	r1, #42	; 0x2a
{
    5620:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5622:	f7ff febd 	bl	53a0 <check_perm.isra.5>
    5626:	4605      	mov	r5, r0
    5628:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    562a:	b9e0      	cbnz	r0, 5666 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    562c:	8a62      	ldrh	r2, [r4, #18]
    562e:	9001      	str	r0, [sp, #4]
    5630:	9200      	str	r2, [sp, #0]
    5632:	7c23      	ldrb	r3, [r4, #16]
    5634:	68b7      	ldr	r7, [r6, #8]
    5636:	68e2      	ldr	r2, [r4, #12]
    5638:	4631      	mov	r1, r6
    563a:	4640      	mov	r0, r8
    563c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    563e:	2800      	cmp	r0, #0
    5640:	db02      	blt.n	5648 <write_cb+0x34>
    5642:	7c23      	ldrb	r3, [r4, #16]
    5644:	4298      	cmp	r0, r3
    5646:	d00b      	beq.n	5660 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5648:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    564c:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    564e:	bf9a      	itte	ls
    5650:	4240      	negls	r0, r0
    5652:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5654:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5656:	7520      	strb	r0, [r4, #20]
}
    5658:	4628      	mov	r0, r5
    565a:	b002      	add	sp, #8
    565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5660:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5662:	2501      	movs	r5, #1
    5664:	e7f8      	b.n	5658 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5666:	2500      	movs	r5, #0
    5668:	e7f6      	b.n	5658 <write_cb+0x44>
	...

0000566c <att_send_req>:
{
    566c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    566e:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    5670:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
	att->req = req;
    5674:	f8c5 10a4 	str.w	r1, [r5, #164]	; 0xa4
{
    5678:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    567a:	4630      	mov	r0, r6
    567c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5680:	f00e fb50 	bl	13d24 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5684:	4628      	mov	r0, r5
    5686:	f7ff ff3b 	bl	5500 <att_is_connected>
    568a:	b978      	cbnz	r0, 56ac <att_send_req+0x40>
		BT_WARN("Disconnected");
    568c:	4a18      	ldr	r2, [pc, #96]	; (56f0 <att_send_req+0x84>)
    568e:	4b19      	ldr	r3, [pc, #100]	; (56f4 <att_send_req+0x88>)
    5690:	9201      	str	r2, [sp, #4]
    5692:	9200      	str	r2, [sp, #0]
    5694:	681c      	ldr	r4, [r3, #0]
    5696:	4918      	ldr	r1, [pc, #96]	; (56f8 <att_send_req+0x8c>)
    5698:	4b18      	ldr	r3, [pc, #96]	; (56fc <att_send_req+0x90>)
    569a:	4819      	ldr	r0, [pc, #100]	; (5700 <att_send_req+0x94>)
    569c:	47a0      	blx	r4
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    569e:	4630      	mov	r0, r6
    56a0:	f00e fb18 	bl	13cd4 <_impl_k_sem_give>
		return -ENOTCONN;
    56a4:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    56a8:	b002      	add	sp, #8
    56aa:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    56ac:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    56ae:	f106 0008 	add.w	r0, r6, #8
    56b2:	f00d fa80 	bl	12bb6 <net_buf_simple_headroom>
	state->len = buf->len;
    56b6:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    56b8:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    56ba:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    56bc:	6920      	ldr	r0, [r4, #16]
    56be:	682d      	ldr	r5, [r5, #0]
    56c0:	f00d fa3e 	bl	12b40 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    56c4:	6923      	ldr	r3, [r4, #16]
    56c6:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    56c8:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    56ca:	7818      	ldrb	r0, [r3, #0]
    56cc:	f7ff fce8 	bl	50a0 <att_op_get_type>
    56d0:	3801      	subs	r0, #1
    56d2:	b2c0      	uxtb	r0, r0
    56d4:	2804      	cmp	r0, #4
    56d6:	bf96      	itet	ls
    56d8:	4b0a      	ldrls	r3, [pc, #40]	; (5704 <att_send_req+0x98>)
    56da:	4b0b      	ldrhi	r3, [pc, #44]	; (5708 <att_send_req+0x9c>)
    56dc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    56e0:	4632      	mov	r2, r6
    56e2:	4628      	mov	r0, r5
    56e4:	2104      	movs	r1, #4
    56e6:	f7ff fb61 	bl	4dac <bt_l2cap_send_cb>
	return 0;
    56ea:	2000      	movs	r0, #0
    56ec:	e7dc      	b.n	56a8 <att_send_req+0x3c>
    56ee:	bf00      	nop
    56f0:	00014891 	.word	0x00014891
    56f4:	20003aa4 	.word	0x20003aa4
    56f8:	00015639 	.word	0x00015639
    56fc:	00016078 	.word	0x00016078
    5700:	00016192 	.word	0x00016192
    5704:	00016064 	.word	0x00016064
    5708:	00005527 	.word	0x00005527

0000570c <att_handle_rsp>:
{
    570c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5710:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5712:	30b0      	adds	r0, #176	; 0xb0
{
    5714:	461e      	mov	r6, r3
    5716:	460f      	mov	r7, r1
    5718:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    571a:	f00e fde7 	bl	142ec <k_delayed_work_cancel>
	if (!att->req) {
    571e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5722:	b9db      	cbnz	r3, 575c <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    5724:	4a1c      	ldr	r2, [pc, #112]	; (5798 <att_handle_rsp+0x8c>)
    5726:	4b1d      	ldr	r3, [pc, #116]	; (579c <att_handle_rsp+0x90>)
    5728:	9201      	str	r2, [sp, #4]
    572a:	9200      	str	r2, [sp, #0]
    572c:	681d      	ldr	r5, [r3, #0]
    572e:	491c      	ldr	r1, [pc, #112]	; (57a0 <att_handle_rsp+0x94>)
    5730:	4b1c      	ldr	r3, [pc, #112]	; (57a4 <att_handle_rsp+0x98>)
    5732:	481d      	ldr	r0, [pc, #116]	; (57a8 <att_handle_rsp+0x9c>)
    5734:	47a8      	blx	r5
    5736:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
Z_GENLIST_GET(slist, snode);
    573a:	b159      	cbz	r1, 5754 <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    573c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
	return node->next;
    5740:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5742:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5746:	4291      	cmp	r1, r2
	list->tail = node;
    5748:	bf08      	it	eq
    574a:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
	att_send_req(att, ATT_REQ(node));
    574e:	4620      	mov	r0, r4
    5750:	f7ff ff8c 	bl	566c <att_send_req>
}
    5754:	2000      	movs	r0, #0
    5756:	b003      	add	sp, #12
    5758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    575c:	6918      	ldr	r0, [r3, #16]
    575e:	b128      	cbz	r0, 576c <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    5760:	f00d f9ba 	bl	12ad8 <net_buf_unref>
		att->req->buf = NULL;
    5764:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5768:	2200      	movs	r2, #0
    576a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    576c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5770:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    5772:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5776:	2500      	movs	r5, #0
    5778:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    577a:	463a      	mov	r2, r7
    577c:	9300      	str	r3, [sp, #0]
    577e:	4631      	mov	r1, r6
    5780:	4643      	mov	r3, r8
    5782:	47c8      	blx	r9
	if (!att->req->func) {
    5784:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    5788:	6843      	ldr	r3, [r0, #4]
    578a:	b90b      	cbnz	r3, 5790 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    578c:	f7ff fcd2 	bl	5134 <att_req_destroy>
	att->req = NULL;
    5790:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    5794:	e7cf      	b.n	5736 <att_handle_rsp+0x2a>
    5796:	bf00      	nop
    5798:	00014891 	.word	0x00014891
    579c:	20003aa4 	.word	0x20003aa4
    57a0:	00015639 	.word	0x00015639
    57a4:	00016085 	.word	0x00016085
    57a8:	0001616b 	.word	0x0001616b

000057ac <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    57ac:	898a      	ldrh	r2, [r1, #12]
    57ae:	6889      	ldr	r1, [r1, #8]
    57b0:	2300      	movs	r3, #0
    57b2:	f7ff bfab 	b.w	570c <att_handle_rsp>

000057b6 <att_handle_exec_write_rsp>:
    57b6:	f7ff bff9 	b.w	57ac <att_confirm>

000057ba <att_handle_prepare_write_rsp>:
    57ba:	f7ff bff7 	b.w	57ac <att_confirm>

000057be <att_handle_write_rsp>:
    57be:	f7ff bff5 	b.w	57ac <att_confirm>

000057c2 <att_handle_read_mult_rsp>:
    57c2:	f7ff bff3 	b.w	57ac <att_confirm>

000057c6 <att_handle_read_blob_rsp>:
    57c6:	f7ff bff1 	b.w	57ac <att_confirm>

000057ca <att_handle_read_rsp>:
    57ca:	f7ff bfef 	b.w	57ac <att_confirm>

000057ce <att_handle_read_type_rsp>:
    57ce:	f7ff bfed 	b.w	57ac <att_confirm>

000057d2 <att_handle_find_type_rsp>:
    57d2:	f7ff bfeb 	b.w	57ac <att_confirm>

000057d6 <att_handle_find_info_rsp>:
    57d6:	f7ff bfe9 	b.w	57ac <att_confirm>

000057da <att_mtu_rsp>:
{
    57da:	b410      	push	{r4}
    57dc:	460a      	mov	r2, r1
	if (!att) {
    57de:	4603      	mov	r3, r0
    57e0:	b180      	cbz	r0, 5804 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    57e2:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    57e4:	880c      	ldrh	r4, [r1, #0]
    57e6:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    57e8:	bf83      	ittte	hi
    57ea:	2417      	movhi	r4, #23
    57ec:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    57ee:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    57f2:	2200      	movls	r2, #0
    57f4:	bf99      	ittee	ls
    57f6:	2304      	movls	r3, #4
    57f8:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    57fa:	2300      	movhi	r3, #0
    57fc:	8992      	ldrhhi	r2, [r2, #12]
}
    57fe:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5800:	f7ff bf84 	b.w	570c <att_handle_rsp>
}
    5804:	bc10      	pop	{r4}
    5806:	4770      	bx	lr

00005808 <att_error_rsp>:
{
    5808:	b430      	push	{r4, r5}
	if (!att->req) {
    580a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
	rsp = (void *)buf->data;
    580e:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5810:	b16a      	cbz	r2, 582e <att_error_rsp+0x26>
	if (att->req->buf) {
    5812:	6913      	ldr	r3, [r2, #16]
    5814:	b12b      	cbz	r3, 5822 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    5816:	8995      	ldrh	r5, [r2, #12]
    5818:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    581a:	89d2      	ldrh	r2, [r2, #14]
    581c:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    581e:	4429      	add	r1, r5
    5820:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5822:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5824:	2200      	movs	r2, #0
    5826:	4611      	mov	r1, r2
}
    5828:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    582a:	f7ff bf6f 	b.w	570c <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    582e:	230e      	movs	r3, #14
    5830:	e7f8      	b.n	5824 <att_error_rsp+0x1c>

00005832 <att_reset>:
{
    5832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5834:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    5838:	4605      	mov	r5, r0
    583a:	f3bf 8f5b 	dmb	ish
    583e:	e853 2f00 	ldrex	r2, [r3]
    5842:	f042 0204 	orr.w	r2, r2, #4
    5846:	e843 2100 	strex	r1, r2, [r3]
    584a:	2900      	cmp	r1, #0
    584c:	d1f7      	bne.n	583e <att_reset+0xc>
    584e:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5852:	f105 04d8 	add.w	r4, r5, #216	; 0xd8
    5856:	4620      	mov	r0, r4
    5858:	f00e fa3c 	bl	13cd4 <_impl_k_sem_give>
    585c:	4620      	mov	r0, r4
    585e:	f00e fa39 	bl	13cd4 <_impl_k_sem_give>
    5862:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5866:	b98c      	cbnz	r4, 588c <att_reset+0x5a>
	if (!att->req) {
    5868:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	list->head = NULL;
    586c:	2200      	movs	r2, #0
    586e:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
	list->tail = NULL;
    5872:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
    5876:	b90b      	cbnz	r3, 587c <att_reset+0x4a>
}
    5878:	b003      	add	sp, #12
    587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    587c:	230e      	movs	r3, #14
    587e:	4611      	mov	r1, r2
    5880:	4628      	mov	r0, r5
}
    5882:	b003      	add	sp, #12
    5884:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5888:	f7ff bf40 	b.w	570c <att_handle_rsp>
	return node->next;
    588c:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    588e:	6867      	ldr	r7, [r4, #4]
    5890:	b12f      	cbz	r7, 589e <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5892:	2300      	movs	r3, #0
    5894:	9400      	str	r4, [sp, #0]
    5896:	461a      	mov	r2, r3
    5898:	210e      	movs	r1, #14
    589a:	4618      	mov	r0, r3
    589c:	47b8      	blx	r7
		att_req_destroy(req);
    589e:	4620      	mov	r0, r4
    58a0:	f7ff fc48 	bl	5134 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    58a4:	2e00      	cmp	r6, #0
    58a6:	d0df      	beq.n	5868 <att_reset+0x36>
    58a8:	4634      	mov	r4, r6
    58aa:	6836      	ldr	r6, [r6, #0]
    58ac:	e7ef      	b.n	588e <att_reset+0x5c>

000058ae <bt_att_disconnected>:
{
    58ae:	b510      	push	{r4, lr}
    58b0:	4604      	mov	r4, r0
	att_reset(att);
    58b2:	f7ff ffbe 	bl	5832 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    58b6:	6820      	ldr	r0, [r4, #0]
}
    58b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    58bc:	f001 b976 	b.w	6bac <bt_gatt_disconnected>

000058c0 <att_timeout>:
{
    58c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("ATT Timeout");
    58c2:	4b0b      	ldr	r3, [pc, #44]	; (58f0 <att_timeout+0x30>)
    58c4:	4a0b      	ldr	r2, [pc, #44]	; (58f4 <att_timeout+0x34>)
    58c6:	9201      	str	r2, [sp, #4]
    58c8:	9200      	str	r2, [sp, #0]
{
    58ca:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    58cc:	490a      	ldr	r1, [pc, #40]	; (58f8 <att_timeout+0x38>)
    58ce:	681d      	ldr	r5, [r3, #0]
    58d0:	480a      	ldr	r0, [pc, #40]	; (58fc <att_timeout+0x3c>)
    58d2:	4b0b      	ldr	r3, [pc, #44]	; (5900 <att_timeout+0x40>)
    58d4:	47a8      	blx	r5
	att_reset(att);
    58d6:	f1a4 00b0 	sub.w	r0, r4, #176	; 0xb0
    58da:	f7ff ffaa 	bl	5832 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    58de:	f854 0cb0 	ldr.w	r0, [r4, #-176]
    58e2:	f001 f963 	bl	6bac <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    58e6:	2300      	movs	r3, #0
    58e8:	f844 3cb0 	str.w	r3, [r4, #-176]
}
    58ec:	b003      	add	sp, #12
    58ee:	bd30      	pop	{r4, r5, pc}
    58f0:	20003aa4 	.word	0x20003aa4
    58f4:	00014891 	.word	0x00014891
    58f8:	00015639 	.word	0x00015639
    58fc:	000161d4 	.word	0x000161d4
    5900:	000160d4 	.word	0x000160d4

00005904 <read_cb>:
{
    5904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5908:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    590a:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    590c:	f8d1 9000 	ldr.w	r9, [r1]
{
    5910:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5912:	3008      	adds	r0, #8
    5914:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    5916:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    591a:	f00d f915 	bl	12b48 <net_buf_simple_add>
	data->err = 0x00;
    591e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5920:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    5922:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5924:	2115      	movs	r1, #21
    5926:	4630      	mov	r0, r6
    5928:	f7ff fd3a 	bl	53a0 <check_perm.isra.5>
    592c:	4605      	mov	r5, r0
    592e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5930:	bb08      	cbnz	r0, 5976 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5932:	68a1      	ldr	r1, [r4, #8]
    5934:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    5938:	898a      	ldrh	r2, [r1, #12]
    593a:	6889      	ldr	r1, [r1, #8]
    593c:	88a0      	ldrh	r0, [r4, #4]
    593e:	9000      	str	r0, [sp, #0]
    5940:	1a9b      	subs	r3, r3, r2
    5942:	6877      	ldr	r7, [r6, #4]
    5944:	440a      	add	r2, r1
    5946:	b29b      	uxth	r3, r3
    5948:	4631      	mov	r1, r6
    594a:	4640      	mov	r0, r8
    594c:	47b8      	blx	r7
	if (read < 0) {
    594e:	1e01      	subs	r1, r0, #0
    5950:	da0b      	bge.n	596a <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    5952:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5956:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5958:	bf9a      	itte	ls
    595a:	4249      	negls	r1, r1
    595c:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    595e:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5960:	7421      	strb	r1, [r4, #16]
}
    5962:	4628      	mov	r0, r5
    5964:	b003      	add	sp, #12
    5966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    596a:	68a0      	ldr	r0, [r4, #8]
    596c:	3008      	adds	r0, #8
    596e:	f00d f8eb 	bl	12b48 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    5972:	2501      	movs	r5, #1
    5974:	e7f5      	b.n	5962 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5976:	463d      	mov	r5, r7
    5978:	e7f3      	b.n	5962 <read_cb+0x5e>
	...

0000597c <bt_att_create_pdu>:
{
    597c:	b530      	push	{r4, r5, lr}
    597e:	b085      	sub	sp, #20
    5980:	460d      	mov	r5, r1
    5982:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5984:	f7ff fe06 	bl	5594 <att_chan_get>
	if (!att) {
    5988:	b1f0      	cbz	r0, 59c8 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    598a:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    598e:	3401      	adds	r4, #1
    5990:	428c      	cmp	r4, r1
    5992:	d90e      	bls.n	59b2 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5994:	4a0d      	ldr	r2, [pc, #52]	; (59cc <bt_att_create_pdu+0x50>)
    5996:	4b0e      	ldr	r3, [pc, #56]	; (59d0 <bt_att_create_pdu+0x54>)
    5998:	9101      	str	r1, [sp, #4]
    599a:	9203      	str	r2, [sp, #12]
    599c:	9402      	str	r4, [sp, #8]
    599e:	9200      	str	r2, [sp, #0]
    59a0:	681c      	ldr	r4, [r3, #0]
    59a2:	490c      	ldr	r1, [pc, #48]	; (59d4 <bt_att_create_pdu+0x58>)
    59a4:	4b0c      	ldr	r3, [pc, #48]	; (59d8 <bt_att_create_pdu+0x5c>)
    59a6:	480d      	ldr	r0, [pc, #52]	; (59dc <bt_att_create_pdu+0x60>)
    59a8:	47a0      	blx	r4
		return NULL;
    59aa:	2400      	movs	r4, #0
}
    59ac:	4620      	mov	r0, r4
    59ae:	b005      	add	sp, #20
    59b0:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    59b2:	2100      	movs	r1, #0
    59b4:	4608      	mov	r0, r1
    59b6:	f7ff f9f6 	bl	4da6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    59ba:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    59bc:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    59be:	3008      	adds	r0, #8
    59c0:	f00d f8c2 	bl	12b48 <net_buf_simple_add>
	hdr->code = op;
    59c4:	7005      	strb	r5, [r0, #0]
	return buf;
    59c6:	e7f1      	b.n	59ac <bt_att_create_pdu+0x30>
		return NULL;
    59c8:	4604      	mov	r4, r0
    59ca:	e7ef      	b.n	59ac <bt_att_create_pdu+0x30>
    59cc:	00014891 	.word	0x00014891
    59d0:	20003aa4 	.word	0x20003aa4
    59d4:	00015639 	.word	0x00015639
    59d8:	000160c2 	.word	0x000160c2
    59dc:	00016225 	.word	0x00016225

000059e0 <att_indicate>:
{
    59e0:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    59e2:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    59e4:	f101 0008 	add.w	r0, r1, #8
    59e8:	f00d f8dd 	bl	12ba6 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    59ec:	2200      	movs	r2, #0
    59ee:	211e      	movs	r1, #30
    59f0:	4620      	mov	r0, r4
    59f2:	f7ff ffc3 	bl	597c <bt_att_create_pdu>
	if (!buf) {
    59f6:	4602      	mov	r2, r0
    59f8:	b120      	cbz	r0, 5a04 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    59fa:	4b03      	ldr	r3, [pc, #12]	; (5a08 <att_indicate+0x28>)
    59fc:	2104      	movs	r1, #4
    59fe:	4620      	mov	r0, r4
    5a00:	f7ff f9d4 	bl	4dac <bt_l2cap_send_cb>
}
    5a04:	2000      	movs	r0, #0
    5a06:	bd10      	pop	{r4, pc}
    5a08:	00005567 	.word	0x00005567

00005a0c <att_mtu_req>:
{
    5a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5a10:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5a12:	881b      	ldrh	r3, [r3, #0]
    5a14:	2b16      	cmp	r3, #22
{
    5a16:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5a18:	d91c      	bls.n	5a54 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    5a1a:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5a1e:	2202      	movs	r2, #2
    5a20:	2103      	movs	r1, #3
    5a22:	4640      	mov	r0, r8
    5a24:	f7ff ffaa 	bl	597c <bt_att_create_pdu>
	if (!pdu) {
    5a28:	4607      	mov	r7, r0
    5a2a:	b1b0      	cbz	r0, 5a5a <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5a2c:	2102      	movs	r1, #2
    5a2e:	3008      	adds	r0, #8
    5a30:	f00d f88a 	bl	12b48 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5a34:	2617      	movs	r6, #23
    5a36:	2400      	movs	r4, #0
    5a38:	7006      	strb	r6, [r0, #0]
    5a3a:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5a3c:	4b08      	ldr	r3, [pc, #32]	; (5a60 <att_mtu_req+0x54>)
    5a3e:	4640      	mov	r0, r8
    5a40:	463a      	mov	r2, r7
    5a42:	2104      	movs	r1, #4
    5a44:	f7ff f9b2 	bl	4dac <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5a48:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5a4a:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    5a4e:	4620      	mov	r0, r4
    5a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5a54:	2004      	movs	r0, #4
    5a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    5a5a:	200e      	movs	r0, #14
}
    5a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a60:	00005539 	.word	0x00005539

00005a64 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a68:	4688      	mov	r8, r1
    5a6a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5a6c:	2101      	movs	r1, #1
    5a6e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5a70:	4605      	mov	r5, r0
    5a72:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5a74:	f7ff ff82 	bl	597c <bt_att_create_pdu>
	if (!buf) {
    5a78:	4604      	mov	r4, r0
    5a7a:	b180      	cbz	r0, 5a9e <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5a7c:	2104      	movs	r1, #4
    5a7e:	3008      	adds	r0, #8
    5a80:	f00d f862 	bl	12b48 <net_buf_simple_add>
	rsp->request = req;
    5a84:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    5a88:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    5a8a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5a8e:	4622      	mov	r2, r4
    5a90:	4628      	mov	r0, r5
    5a92:	4b04      	ldr	r3, [pc, #16]	; (5aa4 <send_err_rsp.part.11+0x40>)
    5a94:	2104      	movs	r1, #4
}
    5a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5a9a:	f7ff b987 	b.w	4dac <bt_l2cap_send_cb>
    5a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5aa2:	bf00      	nop
    5aa4:	00005539 	.word	0x00005539

00005aa8 <bt_att_recv>:
{
    5aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5aaa:	898b      	ldrh	r3, [r1, #12]
{
    5aac:	b085      	sub	sp, #20
    5aae:	4604      	mov	r4, r0
    5ab0:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    5ab2:	b953      	cbnz	r3, 5aca <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    5ab4:	4a4c      	ldr	r2, [pc, #304]	; (5be8 <bt_att_recv+0x140>)
    5ab6:	4b4d      	ldr	r3, [pc, #308]	; (5bec <bt_att_recv+0x144>)
    5ab8:	9201      	str	r2, [sp, #4]
    5aba:	9200      	str	r2, [sp, #0]
    5abc:	681c      	ldr	r4, [r3, #0]
    5abe:	494c      	ldr	r1, [pc, #304]	; (5bf0 <bt_att_recv+0x148>)
    5ac0:	4b4c      	ldr	r3, [pc, #304]	; (5bf4 <bt_att_recv+0x14c>)
    5ac2:	484d      	ldr	r0, [pc, #308]	; (5bf8 <bt_att_recv+0x150>)
			BT_WARN("Ignoring unexpected request");
    5ac4:	47a0      	blx	r4
}
    5ac6:	b005      	add	sp, #20
    5ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    5aca:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5acc:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5ace:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    5ad2:	f00d f858 	bl	12b86 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    5ad6:	4a49      	ldr	r2, [pc, #292]	; (5bfc <bt_att_recv+0x154>)
    5ad8:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5ada:	2300      	movs	r3, #0
    5adc:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5ade:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    5ae2:	4286      	cmp	r6, r0
    5ae4:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5ae8:	d11d      	bne.n	5b26 <bt_att_recv+0x7e>
		if (handler->type == ATT_REQUEST &&
    5aea:	4472      	add	r2, lr
    5aec:	7896      	ldrb	r6, [r2, #2]
    5aee:	2e01      	cmp	r6, #1
    5af0:	d137      	bne.n	5b62 <bt_att_recv+0xba>
    5af2:	f3bf 8f5b 	dmb	ish
    5af6:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    5afa:	e852 3f00 	ldrex	r3, [r2]
    5afe:	f043 0001 	orr.w	r0, r3, #1
    5b02:	e842 0c00 	strex	ip, r0, [r2]
    5b06:	f1bc 0f00 	cmp.w	ip, #0
    5b0a:	d1f6      	bne.n	5afa <bt_att_recv+0x52>
    5b0c:	f3bf 8f5b 	dmb	ish
    5b10:	07da      	lsls	r2, r3, #31
    5b12:	d542      	bpl.n	5b9a <bt_att_recv+0xf2>
			BT_WARN("Ignoring unexpected request");
    5b14:	4a34      	ldr	r2, [pc, #208]	; (5be8 <bt_att_recv+0x140>)
    5b16:	4b35      	ldr	r3, [pc, #212]	; (5bec <bt_att_recv+0x144>)
    5b18:	9201      	str	r2, [sp, #4]
    5b1a:	9200      	str	r2, [sp, #0]
    5b1c:	681c      	ldr	r4, [r3, #0]
    5b1e:	4934      	ldr	r1, [pc, #208]	; (5bf0 <bt_att_recv+0x148>)
    5b20:	4b34      	ldr	r3, [pc, #208]	; (5bf4 <bt_att_recv+0x14c>)
    5b22:	4837      	ldr	r0, [pc, #220]	; (5c00 <bt_att_recv+0x158>)
    5b24:	e7ce      	b.n	5ac4 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5b26:	3301      	adds	r3, #1
    5b28:	2b1b      	cmp	r3, #27
    5b2a:	d1d8      	bne.n	5ade <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5b2c:	4a2e      	ldr	r2, [pc, #184]	; (5be8 <bt_att_recv+0x140>)
    5b2e:	4b2f      	ldr	r3, [pc, #188]	; (5bec <bt_att_recv+0x144>)
    5b30:	9001      	str	r0, [sp, #4]
    5b32:	9202      	str	r2, [sp, #8]
    5b34:	9200      	str	r2, [sp, #0]
    5b36:	681e      	ldr	r6, [r3, #0]
    5b38:	4832      	ldr	r0, [pc, #200]	; (5c04 <bt_att_recv+0x15c>)
    5b3a:	4b2e      	ldr	r3, [pc, #184]	; (5bf4 <bt_att_recv+0x14c>)
    5b3c:	492c      	ldr	r1, [pc, #176]	; (5bf0 <bt_att_recv+0x148>)
    5b3e:	47b0      	blx	r6
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5b40:	782d      	ldrb	r5, [r5, #0]
    5b42:	4628      	mov	r0, r5
    5b44:	f7ff faac 	bl	50a0 <att_op_get_type>
    5b48:	2800      	cmp	r0, #0
    5b4a:	d0bc      	beq.n	5ac6 <bt_att_recv+0x1e>
	if (!req) {
    5b4c:	2d00      	cmp	r5, #0
    5b4e:	d0ba      	beq.n	5ac6 <bt_att_recv+0x1e>
    5b50:	2306      	movs	r3, #6
    5b52:	2200      	movs	r2, #0
    5b54:	4629      	mov	r1, r5
    5b56:	6820      	ldr	r0, [r4, #0]
}
    5b58:	b005      	add	sp, #20
    5b5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5b5e:	f7ff bf81 	b.w	5a64 <send_err_rsp.part.11>
		} else if (handler->type == ATT_INDICATION &&
    5b62:	2e05      	cmp	r6, #5
    5b64:	d119      	bne.n	5b9a <bt_att_recv+0xf2>
    5b66:	f3bf 8f5b 	dmb	ish
    5b6a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    5b6e:	e852 3f00 	ldrex	r3, [r2]
    5b72:	f043 0002 	orr.w	r0, r3, #2
    5b76:	e842 0c00 	strex	ip, r0, [r2]
    5b7a:	f1bc 0f00 	cmp.w	ip, #0
    5b7e:	d1f6      	bne.n	5b6e <bt_att_recv+0xc6>
    5b80:	f3bf 8f5b 	dmb	ish
    5b84:	079b      	lsls	r3, r3, #30
    5b86:	d508      	bpl.n	5b9a <bt_att_recv+0xf2>
			BT_WARN("Ignoring unexpected indication");
    5b88:	4a17      	ldr	r2, [pc, #92]	; (5be8 <bt_att_recv+0x140>)
    5b8a:	4b18      	ldr	r3, [pc, #96]	; (5bec <bt_att_recv+0x144>)
    5b8c:	9201      	str	r2, [sp, #4]
    5b8e:	9200      	str	r2, [sp, #0]
    5b90:	681c      	ldr	r4, [r3, #0]
    5b92:	4917      	ldr	r1, [pc, #92]	; (5bf0 <bt_att_recv+0x148>)
    5b94:	4b17      	ldr	r3, [pc, #92]	; (5bf4 <bt_att_recv+0x14c>)
    5b96:	481c      	ldr	r0, [pc, #112]	; (5c08 <bt_att_recv+0x160>)
    5b98:	e794      	b.n	5ac4 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    5b9a:	eb01 030e 	add.w	r3, r1, lr
    5b9e:	89b8      	ldrh	r0, [r7, #12]
    5ba0:	785a      	ldrb	r2, [r3, #1]
    5ba2:	4282      	cmp	r2, r0
    5ba4:	d90f      	bls.n	5bc6 <bt_att_recv+0x11e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5ba6:	4a10      	ldr	r2, [pc, #64]	; (5be8 <bt_att_recv+0x140>)
    5ba8:	9203      	str	r2, [sp, #12]
    5baa:	782b      	ldrb	r3, [r5, #0]
    5bac:	9302      	str	r3, [sp, #8]
    5bae:	4b0f      	ldr	r3, [pc, #60]	; (5bec <bt_att_recv+0x144>)
    5bb0:	9001      	str	r0, [sp, #4]
    5bb2:	9200      	str	r2, [sp, #0]
    5bb4:	681f      	ldr	r7, [r3, #0]
    5bb6:	490e      	ldr	r1, [pc, #56]	; (5bf0 <bt_att_recv+0x148>)
    5bb8:	4b0e      	ldr	r3, [pc, #56]	; (5bf4 <bt_att_recv+0x14c>)
    5bba:	4814      	ldr	r0, [pc, #80]	; (5c0c <bt_att_recv+0x164>)
    5bbc:	47b8      	blx	r7
	if (handler->type == ATT_REQUEST && err) {
    5bbe:	2e01      	cmp	r6, #1
    5bc0:	d181      	bne.n	5ac6 <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    5bc2:	2304      	movs	r3, #4
    5bc4:	e00a      	b.n	5bdc <bt_att_recv+0x134>
		err = handler->func(att, buf);
    5bc6:	685b      	ldr	r3, [r3, #4]
    5bc8:	4639      	mov	r1, r7
    5bca:	4620      	mov	r0, r4
    5bcc:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5bce:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    5bd0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5bd2:	f47f af78 	bne.w	5ac6 <bt_att_recv+0x1e>
    5bd6:	2800      	cmp	r0, #0
    5bd8:	f43f af75 	beq.w	5ac6 <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5bdc:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    5bde:	2900      	cmp	r1, #0
    5be0:	f43f af71 	beq.w	5ac6 <bt_att_recv+0x1e>
    5be4:	2200      	movs	r2, #0
    5be6:	e7b6      	b.n	5b56 <bt_att_recv+0xae>
    5be8:	00014891 	.word	0x00014891
    5bec:	20003aa4 	.word	0x20003aa4
    5bf0:	00015639 	.word	0x00015639
    5bf4:	000160a9 	.word	0x000160a9
    5bf8:	0001625a 	.word	0x0001625a
    5bfc:	00016338 	.word	0x00016338
    5c00:	00016285 	.word	0x00016285
    5c04:	0001630f 	.word	0x0001630f
    5c08:	000162b1 	.word	0x000162b1
    5c0c:	000162e0 	.word	0x000162e0

00005c10 <att_read_group_req>:
{
    5c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5c14:	898b      	ldrh	r3, [r1, #12]
    5c16:	2b06      	cmp	r3, #6
{
    5c18:	b08d      	sub	sp, #52	; 0x34
    5c1a:	4680      	mov	r8, r0
    5c1c:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5c1e:	d001      	beq.n	5c24 <att_read_group_req+0x14>
    5c20:	2b14      	cmp	r3, #20
    5c22:	d168      	bne.n	5cf6 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    5c24:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    5c26:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5c28:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5c2c:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5c30:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5c32:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5c34:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    5c36:	f00c ffa6 	bl	12b86 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5c3a:	4621      	mov	r1, r4
    5c3c:	4638      	mov	r0, r7
    5c3e:	f7ff fc2d 	bl	549c <uuid_create>
    5c42:	2800      	cmp	r0, #0
    5c44:	d059      	beq.n	5cfa <att_read_group_req+0xea>
	if (!start || !end) {
    5c46:	2d00      	cmp	r5, #0
    5c48:	d05a      	beq.n	5d00 <att_read_group_req+0xf0>
    5c4a:	2400      	movs	r4, #0
    5c4c:	2e00      	cmp	r6, #0
    5c4e:	d056      	beq.n	5cfe <att_read_group_req+0xee>
	if (start > end) {
    5c50:	42b5      	cmp	r5, r6
    5c52:	d855      	bhi.n	5d00 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5c54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5c58:	4669      	mov	r1, sp
    5c5a:	4638      	mov	r0, r7
    5c5c:	f88d 4000 	strb.w	r4, [sp]
    5c60:	f8ad 3002 	strh.w	r3, [sp, #2]
    5c64:	f7fc f95a 	bl	1f1c <bt_uuid_cmp>
    5c68:	bb38      	cbnz	r0, 5cba <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    5c6a:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    5c6e:	2214      	movs	r2, #20
    5c70:	2100      	movs	r1, #0
    5c72:	a807      	add	r0, sp, #28
    5c74:	f7fc f800 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5c78:	2201      	movs	r2, #1
    5c7a:	2111      	movs	r1, #17
    5c7c:	4648      	mov	r0, r9
    5c7e:	f7ff fe7d 	bl	597c <bt_att_create_pdu>
    5c82:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    5c84:	2800      	cmp	r0, #0
    5c86:	d038      	beq.n	5cfa <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c88:	2101      	movs	r1, #1
    5c8a:	3008      	adds	r0, #8
	data.uuid = uuid;
    5c8c:	9708      	str	r7, [sp, #32]
	data.att = att;
    5c8e:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c92:	f00c ff59 	bl	12b48 <net_buf_simple_add>
	data.rsp->len = 0;
    5c96:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c98:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5c9a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    5c9c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5c9e:	4a1c      	ldr	r2, [pc, #112]	; (5d10 <att_read_group_req+0x100>)
	data.group = NULL;
    5ca0:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5ca2:	4631      	mov	r1, r6
    5ca4:	4628      	mov	r0, r5
    5ca6:	f000 fe8f 	bl	69c8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    5caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cac:	781c      	ldrb	r4, [r3, #0]
    5cae:	b9d4      	cbnz	r4, 5ce6 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    5cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    5cb2:	f00c ff11 	bl	12ad8 <net_buf_unref>
    5cb6:	230a      	movs	r3, #10
    5cb8:	e00c      	b.n	5cd4 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5cba:	f642 0301 	movw	r3, #10241	; 0x2801
    5cbe:	a901      	add	r1, sp, #4
    5cc0:	4638      	mov	r0, r7
    5cc2:	f88d 4004 	strb.w	r4, [sp, #4]
    5cc6:	f8ad 3006 	strh.w	r3, [sp, #6]
    5cca:	f7fc f927 	bl	1f1c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5cce:	2800      	cmp	r0, #0
    5cd0:	d0cb      	beq.n	5c6a <att_read_group_req+0x5a>
    5cd2:	2310      	movs	r3, #16
    5cd4:	462a      	mov	r2, r5
    5cd6:	2110      	movs	r1, #16
    5cd8:	4648      	mov	r0, r9
    5cda:	f7ff fec3 	bl	5a64 <send_err_rsp.part.11>
}
    5cde:	4620      	mov	r0, r4
    5ce0:	b00d      	add	sp, #52	; 0x34
    5ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5ce6:	4b0b      	ldr	r3, [pc, #44]	; (5d14 <att_read_group_req+0x104>)
    5ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5cea:	2104      	movs	r1, #4
    5cec:	4648      	mov	r0, r9
    5cee:	f7ff f85d 	bl	4dac <bt_l2cap_send_cb>
		return 0;
    5cf2:	2400      	movs	r4, #0
    5cf4:	e7f3      	b.n	5cde <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    5cf6:	2404      	movs	r4, #4
    5cf8:	e7f1      	b.n	5cde <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    5cfa:	240e      	movs	r4, #14
    5cfc:	e7ef      	b.n	5cde <att_read_group_req+0xce>
			*err = 0;
    5cfe:	4635      	mov	r5, r6
    5d00:	2301      	movs	r3, #1
    5d02:	462a      	mov	r2, r5
    5d04:	2110      	movs	r1, #16
    5d06:	4648      	mov	r0, r9
    5d08:	f7ff feac 	bl	5a64 <send_err_rsp.part.11>
    5d0c:	e7f1      	b.n	5cf2 <att_read_group_req+0xe2>
    5d0e:	bf00      	nop
    5d10:	00005165 	.word	0x00005165
    5d14:	00005539 	.word	0x00005539

00005d18 <att_read_mult_req>:
{
    5d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5d1c:	6804      	ldr	r4, [r0, #0]
{
    5d1e:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    5d20:	2214      	movs	r2, #20
{
    5d22:	4606      	mov	r6, r0
    5d24:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    5d26:	a801      	add	r0, sp, #4
    5d28:	2100      	movs	r1, #0
    5d2a:	f7fb ffa5 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5d2e:	2200      	movs	r2, #0
    5d30:	210f      	movs	r1, #15
    5d32:	4620      	mov	r0, r4
    5d34:	f7ff fe22 	bl	597c <bt_att_create_pdu>
    5d38:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5d3a:	b368      	cbz	r0, 5d98 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d3c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5da0 <att_read_mult_req+0x88>
	data.att = att;
    5d40:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    5d42:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5d46:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    5d4a:	89ab      	ldrh	r3, [r5, #12]
    5d4c:	2b01      	cmp	r3, #1
    5d4e:	d806      	bhi.n	5d5e <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5d50:	4b12      	ldr	r3, [pc, #72]	; (5d9c <att_read_mult_req+0x84>)
    5d52:	9a03      	ldr	r2, [sp, #12]
    5d54:	2104      	movs	r1, #4
    5d56:	4620      	mov	r0, r4
    5d58:	f7ff f828 	bl	4dac <bt_l2cap_send_cb>
    5d5c:	e018      	b.n	5d90 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    5d5e:	4638      	mov	r0, r7
    5d60:	f00c ff21 	bl	12ba6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d64:	ab01      	add	r3, sp, #4
    5d66:	464a      	mov	r2, r9
    5d68:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    5d6a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5d6c:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d70:	f000 fe2a 	bl	69c8 <bt_gatt_foreach_attr>
		if (data.err) {
    5d74:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d0e6      	beq.n	5d4a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    5d7c:	9803      	ldr	r0, [sp, #12]
    5d7e:	f00c feab 	bl	12ad8 <net_buf_unref>
    5d82:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d86:	4632      	mov	r2, r6
    5d88:	210e      	movs	r1, #14
    5d8a:	4620      	mov	r0, r4
    5d8c:	f7ff fe6a 	bl	5a64 <send_err_rsp.part.11>
	return 0;
    5d90:	2000      	movs	r0, #0
}
    5d92:	b007      	add	sp, #28
    5d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    5d98:	200e      	movs	r0, #14
    5d9a:	e7fa      	b.n	5d92 <att_read_mult_req+0x7a>
    5d9c:	00005539 	.word	0x00005539
    5da0:	00005905 	.word	0x00005905

00005da4 <att_read_rsp>:
{
    5da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5da8:	4607      	mov	r7, r0
    5daa:	b086      	sub	sp, #24
    5dac:	460c      	mov	r4, r1
    5dae:	4690      	mov	r8, r2
	if (!handle) {
    5db0:	461d      	mov	r5, r3
    5db2:	b3a3      	cbz	r3, 5e1e <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    5db4:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    5db6:	2214      	movs	r2, #20
    5db8:	2100      	movs	r1, #0
    5dba:	a801      	add	r0, sp, #4
    5dbc:	f7fb ff5c 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    5dc0:	2200      	movs	r2, #0
    5dc2:	4641      	mov	r1, r8
    5dc4:	4630      	mov	r0, r6
    5dc6:	f7ff fdd9 	bl	597c <bt_att_create_pdu>
    5dca:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5dcc:	b348      	cbz	r0, 5e22 <att_read_rsp+0x7e>
	data.offset = offset;
    5dce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5dd2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5dd6:	2301      	movs	r3, #1
    5dd8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5ddc:	4a12      	ldr	r2, [pc, #72]	; (5e28 <att_read_rsp+0x84>)
	data.att = att;
    5dde:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5de0:	ab01      	add	r3, sp, #4
    5de2:	4629      	mov	r1, r5
    5de4:	4628      	mov	r0, r5
    5de6:	f000 fdef 	bl	69c8 <bt_gatt_foreach_attr>
	if (data.err) {
    5dea:	f89d 7014 	ldrb.w	r7, [sp, #20]
    5dee:	b17f      	cbz	r7, 5e10 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    5df0:	9803      	ldr	r0, [sp, #12]
    5df2:	f00c fe71 	bl	12ad8 <net_buf_unref>
	if (!req) {
    5df6:	b13c      	cbz	r4, 5e08 <att_read_rsp+0x64>
    5df8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5dfc:	462a      	mov	r2, r5
    5dfe:	4621      	mov	r1, r4
    5e00:	4630      	mov	r0, r6
    5e02:	f7ff fe2f 	bl	5a64 <send_err_rsp.part.11>
		return 0;
    5e06:	2400      	movs	r4, #0
}
    5e08:	4620      	mov	r0, r4
    5e0a:	b006      	add	sp, #24
    5e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5e10:	4b06      	ldr	r3, [pc, #24]	; (5e2c <att_read_rsp+0x88>)
    5e12:	9a03      	ldr	r2, [sp, #12]
    5e14:	2104      	movs	r1, #4
    5e16:	4630      	mov	r0, r6
    5e18:	f7fe ffc8 	bl	4dac <bt_l2cap_send_cb>
    5e1c:	e7f3      	b.n	5e06 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    5e1e:	2401      	movs	r4, #1
    5e20:	e7f2      	b.n	5e08 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    5e22:	240e      	movs	r4, #14
    5e24:	e7f0      	b.n	5e08 <att_read_rsp+0x64>
    5e26:	bf00      	nop
    5e28:	00005905 	.word	0x00005905
    5e2c:	00005539 	.word	0x00005539

00005e30 <att_read_blob_req>:
{
    5e30:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    5e32:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5e34:	8813      	ldrh	r3, [r2, #0]
    5e36:	8852      	ldrh	r2, [r2, #2]
    5e38:	9200      	str	r2, [sp, #0]
    5e3a:	210c      	movs	r1, #12
    5e3c:	220d      	movs	r2, #13
    5e3e:	f7ff ffb1 	bl	5da4 <att_read_rsp>
}
    5e42:	b003      	add	sp, #12
    5e44:	f85d fb04 	ldr.w	pc, [sp], #4

00005e48 <att_read_req>:
{
    5e48:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    5e4a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5e4c:	2200      	movs	r2, #0
    5e4e:	881b      	ldrh	r3, [r3, #0]
    5e50:	9200      	str	r2, [sp, #0]
    5e52:	210a      	movs	r1, #10
    5e54:	220b      	movs	r2, #11
    5e56:	f7ff ffa5 	bl	5da4 <att_read_rsp>
}
    5e5a:	b003      	add	sp, #12
    5e5c:	f85d fb04 	ldr.w	pc, [sp], #4

00005e60 <att_read_type_req>:
{
    5e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5e64:	898b      	ldrh	r3, [r1, #12]
    5e66:	2b06      	cmp	r3, #6
{
    5e68:	b08d      	sub	sp, #52	; 0x34
    5e6a:	4607      	mov	r7, r0
    5e6c:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5e6e:	d001      	beq.n	5e74 <att_read_type_req+0x14>
    5e70:	2b14      	cmp	r3, #20
    5e72:	d152      	bne.n	5f1a <att_read_type_req+0xba>
	req = (void *)buf->data;
    5e74:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    5e76:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5e78:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5e7c:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5e80:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5e82:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5e84:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    5e88:	f00c fe7d 	bl	12b86 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5e8c:	4631      	mov	r1, r6
    5e8e:	4640      	mov	r0, r8
    5e90:	f7ff fb04 	bl	549c <uuid_create>
    5e94:	b198      	cbz	r0, 5ebe <att_read_type_req+0x5e>
	if (!start || !end) {
    5e96:	2d00      	cmp	r5, #0
    5e98:	d042      	beq.n	5f20 <att_read_type_req+0xc0>
    5e9a:	2c00      	cmp	r4, #0
    5e9c:	d03f      	beq.n	5f1e <att_read_type_req+0xbe>
	if (start > end) {
    5e9e:	42a5      	cmp	r5, r4
    5ea0:	d83e      	bhi.n	5f20 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    5ea2:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    5ea4:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    5ea6:	2100      	movs	r1, #0
    5ea8:	eb0d 0002 	add.w	r0, sp, r2
    5eac:	f7fb fee4 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5eb0:	2201      	movs	r2, #1
    5eb2:	2109      	movs	r1, #9
    5eb4:	4630      	mov	r0, r6
    5eb6:	f7ff fd61 	bl	597c <bt_att_create_pdu>
    5eba:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    5ebc:	b908      	cbnz	r0, 5ec2 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    5ebe:	240e      	movs	r4, #14
    5ec0:	e027      	b.n	5f12 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ec2:	2101      	movs	r1, #1
    5ec4:	3008      	adds	r0, #8
	data.att = att;
    5ec6:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    5ec8:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ecc:	f00c fe3c 	bl	12b48 <net_buf_simple_add>
	data.rsp->len = 0;
    5ed0:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5ed2:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ed4:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5ed6:	4621      	mov	r1, r4
	data.rsp->len = 0;
    5ed8:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5eda:	4a14      	ldr	r2, [pc, #80]	; (5f2c <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5edc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5ee0:	4628      	mov	r0, r5
    5ee2:	ab06      	add	r3, sp, #24
    5ee4:	f000 fd70 	bl	69c8 <bt_gatt_foreach_attr>
	if (data.err) {
    5ee8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    5eec:	b15c      	cbz	r4, 5f06 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    5eee:	9808      	ldr	r0, [sp, #32]
    5ef0:	f00c fdf2 	bl	12ad8 <net_buf_unref>
    5ef4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5ef8:	462a      	mov	r2, r5
    5efa:	2108      	movs	r1, #8
    5efc:	4630      	mov	r0, r6
    5efe:	f7ff fdb1 	bl	5a64 <send_err_rsp.part.11>
		return 0;
    5f02:	2400      	movs	r4, #0
    5f04:	e005      	b.n	5f12 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5f06:	4b0a      	ldr	r3, [pc, #40]	; (5f30 <att_read_type_req+0xd0>)
    5f08:	9a08      	ldr	r2, [sp, #32]
    5f0a:	2104      	movs	r1, #4
    5f0c:	4630      	mov	r0, r6
    5f0e:	f7fe ff4d 	bl	4dac <bt_l2cap_send_cb>
}
    5f12:	4620      	mov	r0, r4
    5f14:	b00d      	add	sp, #52	; 0x34
    5f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5f1a:	2404      	movs	r4, #4
    5f1c:	e7f9      	b.n	5f12 <att_read_type_req+0xb2>
			*err = 0;
    5f1e:	4625      	mov	r5, r4
    5f20:	2301      	movs	r3, #1
    5f22:	462a      	mov	r2, r5
    5f24:	2108      	movs	r1, #8
    5f26:	4648      	mov	r0, r9
    5f28:	e7e9      	b.n	5efe <att_read_type_req+0x9e>
    5f2a:	bf00      	nop
    5f2c:	000053e1 	.word	0x000053e1
    5f30:	00005539 	.word	0x00005539

00005f34 <att_find_type_req>:
{
    5f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5f38:	f8d0 9000 	ldr.w	r9, [r0]
{
    5f3c:	4680      	mov	r8, r0
	req = (void *)buf->data;
    5f3e:	4608      	mov	r0, r1
{
    5f40:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    5f42:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    5f46:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    5f48:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    5f4a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5f4c:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    5f4e:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    5f50:	f00c fe19 	bl	12b86 <net_buf_simple_pull>
    5f54:	4682      	mov	sl, r0
	if (!start || !end) {
    5f56:	2d00      	cmp	r5, #0
    5f58:	d057      	beq.n	600a <att_find_type_req+0xd6>
    5f5a:	2400      	movs	r4, #0
    5f5c:	2f00      	cmp	r7, #0
    5f5e:	d053      	beq.n	6008 <att_find_type_req+0xd4>
	if (start > end) {
    5f60:	42bd      	cmp	r5, r7
    5f62:	d852      	bhi.n	600a <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    5f64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5f68:	a902      	add	r1, sp, #8
    5f6a:	a801      	add	r0, sp, #4
    5f6c:	f8ad 6006 	strh.w	r6, [sp, #6]
    5f70:	f88d 4004 	strb.w	r4, [sp, #4]
    5f74:	f88d 4008 	strb.w	r4, [sp, #8]
    5f78:	f8ad 300a 	strh.w	r3, [sp, #10]
    5f7c:	f7fb ffce 	bl	1f1c <bt_uuid_cmp>
    5f80:	4606      	mov	r6, r0
    5f82:	b148      	cbz	r0, 5f98 <att_find_type_req+0x64>
    5f84:	230a      	movs	r3, #10
    5f86:	462a      	mov	r2, r5
    5f88:	2106      	movs	r1, #6
    5f8a:	4648      	mov	r0, r9
    5f8c:	f7ff fd6a 	bl	5a64 <send_err_rsp.part.11>
}
    5f90:	4620      	mov	r0, r4
    5f92:	b009      	add	sp, #36	; 0x24
    5f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    5f98:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    5f9c:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    5fa0:	2214      	movs	r2, #20
    5fa2:	4631      	mov	r1, r6
    5fa4:	a803      	add	r0, sp, #12
    5fa6:	f7fb fe67 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5faa:	4632      	mov	r2, r6
    5fac:	2107      	movs	r1, #7
    5fae:	4648      	mov	r0, r9
    5fb0:	f7ff fce4 	bl	597c <bt_att_create_pdu>
    5fb4:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    5fb6:	b328      	cbz	r0, 6004 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5fb8:	230a      	movs	r3, #10
    5fba:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5fbe:	4a14      	ldr	r2, [pc, #80]	; (6010 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5fc0:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5fc4:	ab03      	add	r3, sp, #12
    5fc6:	4639      	mov	r1, r7
    5fc8:	4628      	mov	r0, r5
	data.att = att;
    5fca:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    5fce:	9605      	str	r6, [sp, #20]
	data.value = value;
    5fd0:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5fd4:	f000 fcf8 	bl	69c8 <bt_gatt_foreach_attr>
	if (data.err) {
    5fd8:	f89d 401d 	ldrb.w	r4, [sp, #29]
    5fdc:	b15c      	cbz	r4, 5ff6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    5fde:	9804      	ldr	r0, [sp, #16]
    5fe0:	f00c fd7a 	bl	12ad8 <net_buf_unref>
    5fe4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    5fe8:	462a      	mov	r2, r5
    5fea:	2106      	movs	r1, #6
    5fec:	4648      	mov	r0, r9
    5fee:	f7ff fd39 	bl	5a64 <send_err_rsp.part.11>
		return 0;
    5ff2:	2400      	movs	r4, #0
    5ff4:	e7cc      	b.n	5f90 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5ff6:	4b07      	ldr	r3, [pc, #28]	; (6014 <att_find_type_req+0xe0>)
    5ff8:	9a04      	ldr	r2, [sp, #16]
    5ffa:	2104      	movs	r1, #4
    5ffc:	4648      	mov	r0, r9
    5ffe:	f7fe fed5 	bl	4dac <bt_l2cap_send_cb>
    6002:	e7c5      	b.n	5f90 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    6004:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6006:	e7c3      	b.n	5f90 <att_find_type_req+0x5c>
			*err = 0;
    6008:	463d      	mov	r5, r7
    600a:	2301      	movs	r3, #1
    600c:	e7ec      	b.n	5fe8 <att_find_type_req+0xb4>
    600e:	bf00      	nop
    6010:	000052cd 	.word	0x000052cd
    6014:	00005539 	.word	0x00005539

00006018 <att_find_info_req>:
{
    6018:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    601a:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    601c:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    601e:	881d      	ldrh	r5, [r3, #0]
{
    6020:	b085      	sub	sp, #20
    6022:	4607      	mov	r7, r0
	if (!start || !end) {
    6024:	b375      	cbz	r5, 6084 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6026:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6028:	b35c      	cbz	r4, 6082 <att_find_info_req+0x6a>
	if (start > end) {
    602a:	42a5      	cmp	r5, r4
    602c:	d82a      	bhi.n	6084 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    602e:	2210      	movs	r2, #16
    6030:	2100      	movs	r1, #0
    6032:	4668      	mov	r0, sp
    6034:	f7fb fe20 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6038:	2200      	movs	r2, #0
    603a:	2105      	movs	r1, #5
    603c:	4630      	mov	r0, r6
    603e:	f7ff fc9d 	bl	597c <bt_att_create_pdu>
    6042:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6044:	b910      	cbnz	r0, 604c <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    6046:	200e      	movs	r0, #14
}
    6048:	b005      	add	sp, #20
    604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    604c:	4621      	mov	r1, r4
    604e:	466b      	mov	r3, sp
    6050:	4a0d      	ldr	r2, [pc, #52]	; (6088 <att_find_info_req+0x70>)
	data.att = att;
    6052:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6054:	4628      	mov	r0, r5
    6056:	f000 fcb7 	bl	69c8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    605a:	9c02      	ldr	r4, [sp, #8]
    605c:	b94c      	cbnz	r4, 6072 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    605e:	9801      	ldr	r0, [sp, #4]
    6060:	f00c fd3a 	bl	12ad8 <net_buf_unref>
    6064:	230a      	movs	r3, #10
    6066:	462a      	mov	r2, r5
    6068:	2104      	movs	r1, #4
    606a:	4630      	mov	r0, r6
    606c:	f7ff fcfa 	bl	5a64 <send_err_rsp.part.11>
    6070:	e005      	b.n	607e <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6072:	4b06      	ldr	r3, [pc, #24]	; (608c <att_find_info_req+0x74>)
    6074:	9a01      	ldr	r2, [sp, #4]
    6076:	2104      	movs	r1, #4
    6078:	4630      	mov	r0, r6
    607a:	f7fe fe97 	bl	4dac <bt_l2cap_send_cb>
		return 0;
    607e:	2000      	movs	r0, #0
    6080:	e7e2      	b.n	6048 <att_find_info_req+0x30>
			*err = 0;
    6082:	4625      	mov	r5, r4
    6084:	2301      	movs	r3, #1
    6086:	e7ee      	b.n	6066 <att_find_info_req+0x4e>
    6088:	00005233 	.word	0x00005233
    608c:	00005539 	.word	0x00005539

00006090 <att_write_rsp.part.12.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6094:	b086      	sub	sp, #24
    6096:	4690      	mov	r8, r2
    6098:	4605      	mov	r5, r0
    609a:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    609c:	2218      	movs	r2, #24
    609e:	2100      	movs	r1, #0
    60a0:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    60a2:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    60a4:	f7fb fde8 	bl	1c78 <memset>
	if (rsp) {
    60a8:	f1b8 0f00 	cmp.w	r8, #0
    60ac:	d11f      	bne.n	60ee <att_write_rsp.part.12.constprop.17+0x5e>
	data.offset = offset;
    60ae:	2300      	movs	r3, #0
    60b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    60b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60b6:	9303      	str	r3, [sp, #12]
	data.len = len;
    60b8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    60bc:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    60c0:	2301      	movs	r3, #1
    60c2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    60c6:	4a1b      	ldr	r2, [pc, #108]	; (6134 <att_write_rsp.part.12.constprop.17+0xa4>)
	data.conn = conn;
    60c8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    60ca:	466b      	mov	r3, sp
    60cc:	4639      	mov	r1, r7
    60ce:	4638      	mov	r0, r7
	data.op = op;
    60d0:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    60d4:	f000 fc78 	bl	69c8 <bt_gatt_foreach_attr>
	if (data.err) {
    60d8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    60dc:	b98c      	cbnz	r4, 6102 <att_write_rsp.part.12.constprop.17+0x72>
	if (data.buf) {
    60de:	9a01      	ldr	r2, [sp, #4]
    60e0:	b1b2      	cbz	r2, 6110 <att_write_rsp.part.12.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    60e2:	4b15      	ldr	r3, [pc, #84]	; (6138 <att_write_rsp.part.12.constprop.17+0xa8>)
    60e4:	2104      	movs	r1, #4
    60e6:	4628      	mov	r0, r5
    60e8:	f7fe fe60 	bl	4dac <bt_l2cap_send_cb>
    60ec:	e011      	b.n	6112 <att_write_rsp.part.12.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    60ee:	2200      	movs	r2, #0
    60f0:	4641      	mov	r1, r8
    60f2:	4628      	mov	r0, r5
    60f4:	f7ff fc42 	bl	597c <bt_att_create_pdu>
    60f8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    60fa:	2800      	cmp	r0, #0
    60fc:	d1d7      	bne.n	60ae <att_write_rsp.part.12.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    60fe:	240e      	movs	r4, #14
    6100:	e007      	b.n	6112 <att_write_rsp.part.12.constprop.17+0x82>
		if (rsp) {
    6102:	f1b8 0f00 	cmp.w	r8, #0
    6106:	d00f      	beq.n	6128 <att_write_rsp.part.12.constprop.17+0x98>
			net_buf_unref(data.buf);
    6108:	9801      	ldr	r0, [sp, #4]
    610a:	f00c fce5 	bl	12ad8 <net_buf_unref>
	if (!req) {
    610e:	b926      	cbnz	r6, 611a <att_write_rsp.part.12.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6110:	2400      	movs	r4, #0
}
    6112:	4620      	mov	r0, r4
    6114:	b006      	add	sp, #24
    6116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    611a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    611e:	463a      	mov	r2, r7
    6120:	4631      	mov	r1, r6
    6122:	4628      	mov	r0, r5
    6124:	f7ff fc9e 	bl	5a64 <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6128:	2e18      	cmp	r6, #24
    612a:	d1f1      	bne.n	6110 <att_write_rsp.part.12.constprop.17+0x80>
    612c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6130:	e7ef      	b.n	6112 <att_write_rsp.part.12.constprop.17+0x82>
    6132:	bf00      	nop
    6134:	00005615 	.word	0x00005615
    6138:	00005539 	.word	0x00005539

0000613c <att_signed_write_cmd>:
{
    613c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6140:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    6142:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    6144:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6148:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    614a:	4620      	mov	r0, r4
    614c:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    614e:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6152:	f00c fd10 	bl	12b76 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    6156:	4629      	mov	r1, r5
    6158:	4630      	mov	r0, r6
    615a:	f000 fd74 	bl	6c46 <bt_smp_sign_verify>
	if (err) {
    615e:	4607      	mov	r7, r0
    6160:	b160      	cbz	r0, 617c <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    6162:	4a13      	ldr	r2, [pc, #76]	; (61b0 <att_signed_write_cmd+0x74>)
    6164:	4b13      	ldr	r3, [pc, #76]	; (61b4 <att_signed_write_cmd+0x78>)
    6166:	9201      	str	r2, [sp, #4]
    6168:	9200      	str	r2, [sp, #0]
    616a:	681c      	ldr	r4, [r3, #0]
    616c:	4812      	ldr	r0, [pc, #72]	; (61b8 <att_signed_write_cmd+0x7c>)
    616e:	4b13      	ldr	r3, [pc, #76]	; (61bc <att_signed_write_cmd+0x80>)
    6170:	4913      	ldr	r1, [pc, #76]	; (61c0 <att_signed_write_cmd+0x84>)
    6172:	47a0      	blx	r4
    6174:	2000      	movs	r0, #0
}
    6176:	b002      	add	sp, #8
    6178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    617c:	2101      	movs	r1, #1
    617e:	4620      	mov	r0, r4
    6180:	f00c fd01 	bl	12b86 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6184:	2102      	movs	r1, #2
    6186:	4620      	mov	r0, r4
    6188:	f00c fcfd 	bl	12b86 <net_buf_simple_pull>
	if (!handle) {
    618c:	f1b8 0f00 	cmp.w	r8, #0
    6190:	d00c      	beq.n	61ac <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6192:	7b2b      	ldrb	r3, [r5, #12]
    6194:	3b0c      	subs	r3, #12
    6196:	b2db      	uxtb	r3, r3
    6198:	9301      	str	r3, [sp, #4]
    619a:	68ab      	ldr	r3, [r5, #8]
    619c:	9300      	str	r3, [sp, #0]
    619e:	463a      	mov	r2, r7
    61a0:	4643      	mov	r3, r8
    61a2:	4639      	mov	r1, r7
    61a4:	4630      	mov	r0, r6
    61a6:	f7ff ff73 	bl	6090 <att_write_rsp.part.12.constprop.17>
    61aa:	e7e4      	b.n	6176 <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    61ac:	2001      	movs	r0, #1
    61ae:	e7e2      	b.n	6176 <att_signed_write_cmd+0x3a>
    61b0:	00014891 	.word	0x00014891
    61b4:	20003aa4 	.word	0x20003aa4
    61b8:	000161af 	.word	0x000161af
    61bc:	00016094 	.word	0x00016094
    61c0:	00015639 	.word	0x00015639

000061c4 <att_write_cmd>:
{
    61c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    61c6:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    61c8:	f101 0008 	add.w	r0, r1, #8
{
    61cc:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    61ce:	f00c fcea 	bl	12ba6 <net_buf_simple_pull_le16>
	if (!handle) {
    61d2:	4603      	mov	r3, r0
    61d4:	b150      	cbz	r0, 61ec <att_write_cmd+0x28>
    61d6:	7b22      	ldrb	r2, [r4, #12]
    61d8:	9201      	str	r2, [sp, #4]
    61da:	68a2      	ldr	r2, [r4, #8]
    61dc:	9200      	str	r2, [sp, #0]
    61de:	2200      	movs	r2, #0
    61e0:	4611      	mov	r1, r2
    61e2:	4628      	mov	r0, r5
    61e4:	f7ff ff54 	bl	6090 <att_write_rsp.part.12.constprop.17>
}
    61e8:	b003      	add	sp, #12
    61ea:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    61ec:	2001      	movs	r0, #1
    61ee:	e7fb      	b.n	61e8 <att_write_cmd+0x24>

000061f0 <att_write_req>:
{
    61f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    61f2:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    61f4:	f101 0008 	add.w	r0, r1, #8
{
    61f8:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    61fa:	f00c fcd4 	bl	12ba6 <net_buf_simple_pull_le16>
	if (!handle) {
    61fe:	4603      	mov	r3, r0
    6200:	b150      	cbz	r0, 6218 <att_write_req+0x28>
    6202:	7b22      	ldrb	r2, [r4, #12]
    6204:	9201      	str	r2, [sp, #4]
    6206:	68a2      	ldr	r2, [r4, #8]
    6208:	9200      	str	r2, [sp, #0]
    620a:	2112      	movs	r1, #18
    620c:	2213      	movs	r2, #19
    620e:	4628      	mov	r0, r5
    6210:	f7ff ff3e 	bl	6090 <att_write_rsp.part.12.constprop.17>
}
    6214:	b003      	add	sp, #12
    6216:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6218:	2001      	movs	r0, #1
    621a:	e7fb      	b.n	6214 <att_write_req+0x24>

0000621c <bt_att_init>:

void bt_att_init(void)
{
    621c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    621e:	4803      	ldr	r0, [pc, #12]	; (622c <bt_att_init+0x10>)
    6220:	f7fe fd06 	bl	4c30 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6228:	f000 bbb8 	b.w	699c <bt_gatt_init>
    622c:	20003c08 	.word	0x20003c08

00006230 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6230:	b510      	push	{r4, lr}
    6232:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6234:	b1d8      	cbz	r0, 626e <bt_att_req_send+0x3e>
    6236:	b1d1      	cbz	r1, 626e <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6238:	f7ff f9ac 	bl	5594 <att_chan_get>
	if (!att) {
    623c:	4603      	mov	r3, r0
    623e:	b1c8      	cbz	r0, 6274 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6240:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    6244:	b172      	cbz	r2, 6264 <bt_att_req_send+0x34>
	parent->next = child;
    6246:	2000      	movs	r0, #0
    6248:	6020      	str	r0, [r4, #0]
    624a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
Z_GENLIST_APPEND(slist, snode);
    624e:	b92a      	cbnz	r2, 625c <bt_att_req_send+0x2c>
	list->tail = node;
    6250:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	list->head = node;
    6254:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6258:	4610      	mov	r0, r2
    625a:	bd10      	pop	{r4, pc}
	parent->next = child;
    625c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    625e:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
    6262:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6264:	4621      	mov	r1, r4
}
    6266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    626a:	f7ff b9ff 	b.w	566c <att_send_req>
		return -EINVAL;
    626e:	f06f 0015 	mvn.w	r0, #21
    6272:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6274:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6278:	bd10      	pop	{r4, pc}

0000627a <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    627a:	4770      	bx	lr

0000627c <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    627c:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    627e:	2000      	movs	r0, #0
    6280:	4770      	bx	lr

00006282 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6282:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6284:	2300      	movs	r3, #0
    6286:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    6288:	461a      	mov	r2, r3
    628a:	42aa      	cmp	r2, r5
    628c:	d107      	bne.n	629e <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    628e:	890a      	ldrh	r2, [r1, #8]
    6290:	429a      	cmp	r2, r3
    6292:	d00d      	beq.n	62b0 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6294:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6296:	68ca      	ldr	r2, [r1, #12]
	}
}
    6298:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    629a:	4619      	mov	r1, r3
    629c:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    629e:	680c      	ldr	r4, [r1, #0]
    62a0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    62a4:	3201      	adds	r2, #1
    62a6:	8924      	ldrh	r4, [r4, #8]
    62a8:	42a3      	cmp	r3, r4
    62aa:	bf38      	it	cc
    62ac:	4623      	movcc	r3, r4
    62ae:	e7ec      	b.n	628a <gatt_ccc_changed+0x8>
}
    62b0:	bc30      	pop	{r4, r5}
    62b2:	4770      	bx	lr

000062b4 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    62b4:	b410      	push	{r4}
    62b6:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    62b8:	699c      	ldr	r4, [r3, #24]
    62ba:	460a      	mov	r2, r1
    62bc:	6959      	ldr	r1, [r3, #20]
    62be:	4623      	mov	r3, r4
}
    62c0:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    62c2:	4718      	bx	r3

000062c4 <gatt_register>:
{
    62c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    62c6:	4a1e      	ldr	r2, [pc, #120]	; (6340 <gatt_register+0x7c>)
    62c8:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    62ca:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    62ce:	b14b      	cbz	r3, 62e4 <gatt_register+0x20>
    62d0:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    62d2:	2b00      	cmp	r3, #0
    62d4:	d032      	beq.n	633c <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    62d6:	e913 0018 	ldmdb	r3, {r3, r4}
    62da:	2614      	movs	r6, #20
    62dc:	fb06 3304 	mla	r3, r6, r4, r3
    62e0:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    62e4:	b2ad      	uxth	r5, r5
    62e6:	2414      	movs	r4, #20
    62e8:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    62ec:	b109      	cbz	r1, 62f2 <gatt_register+0x2e>
    62ee:	42a9      	cmp	r1, r5
    62f0:	d108      	bne.n	6304 <gatt_register+0x40>
	parent->next = child;
    62f2:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    62f4:	f100 0108 	add.w	r1, r0, #8
    62f8:	6083      	str	r3, [r0, #8]
    62fa:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    62fc:	b9d0      	cbnz	r0, 6334 <gatt_register+0x70>
	list->tail = node;
    62fe:	6051      	str	r1, [r2, #4]
	list->head = node;
    6300:	6011      	str	r1, [r2, #0]
    6302:	e015      	b.n	6330 <gatt_register+0x6c>
		if (!attrs->handle) {
    6304:	8a0c      	ldrh	r4, [r1, #16]
    6306:	b92c      	cbnz	r4, 6314 <gatt_register+0x50>
			attrs->handle = ++handle;
    6308:	3301      	adds	r3, #1
    630a:	b29c      	uxth	r4, r3
    630c:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    630e:	3114      	adds	r1, #20
    6310:	4623      	mov	r3, r4
    6312:	e7eb      	b.n	62ec <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6314:	42a3      	cmp	r3, r4
    6316:	d3fa      	bcc.n	630e <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6318:	4a0a      	ldr	r2, [pc, #40]	; (6344 <gatt_register+0x80>)
    631a:	4b0b      	ldr	r3, [pc, #44]	; (6348 <gatt_register+0x84>)
    631c:	9202      	str	r2, [sp, #8]
    631e:	e88d 0014 	stmia.w	sp, {r2, r4}
    6322:	480a      	ldr	r0, [pc, #40]	; (634c <gatt_register+0x88>)
    6324:	681c      	ldr	r4, [r3, #0]
    6326:	490a      	ldr	r1, [pc, #40]	; (6350 <gatt_register+0x8c>)
    6328:	4b0a      	ldr	r3, [pc, #40]	; (6354 <gatt_register+0x90>)
    632a:	47a0      	blx	r4
			return -EINVAL;
    632c:	f06f 0015 	mvn.w	r0, #21
}
    6330:	b004      	add	sp, #16
    6332:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    6334:	6001      	str	r1, [r0, #0]
	list->tail = node;
    6336:	6051      	str	r1, [r2, #4]
	return 0;
    6338:	4618      	mov	r0, r3
    633a:	e7f9      	b.n	6330 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    633c:	681b      	ldr	r3, [r3, #0]
    633e:	deff      	udf	#255	; 0xff
    6340:	200005a8 	.word	0x200005a8
    6344:	00014891 	.word	0x00014891
    6348:	20003aa4 	.word	0x20003aa4
    634c:	0001656a 	.word	0x0001656a
    6350:	00015639 	.word	0x00015639
    6354:	00016410 	.word	0x00016410

00006358 <gatt_notify>:
{
    6358:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    635c:	468a      	mov	sl, r1
    635e:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6360:	211b      	movs	r1, #27
    6362:	1c9a      	adds	r2, r3, #2
{
    6364:	4680      	mov	r8, r0
    6366:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6368:	f7ff fb08 	bl	597c <bt_att_create_pdu>
	if (!buf) {
    636c:	4604      	mov	r4, r0
    636e:	b968      	cbnz	r0, 638c <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    6370:	4a13      	ldr	r2, [pc, #76]	; (63c0 <gatt_notify+0x68>)
    6372:	4b14      	ldr	r3, [pc, #80]	; (63c4 <gatt_notify+0x6c>)
    6374:	9201      	str	r2, [sp, #4]
    6376:	9200      	str	r2, [sp, #0]
    6378:	681c      	ldr	r4, [r3, #0]
    637a:	4813      	ldr	r0, [pc, #76]	; (63c8 <gatt_notify+0x70>)
    637c:	4b13      	ldr	r3, [pc, #76]	; (63cc <gatt_notify+0x74>)
    637e:	4914      	ldr	r1, [pc, #80]	; (63d0 <gatt_notify+0x78>)
    6380:	47a0      	blx	r4
    6382:	f06f 000b 	mvn.w	r0, #11
}
    6386:	b002      	add	sp, #8
    6388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    638c:	f100 0708 	add.w	r7, r0, #8
    6390:	2102      	movs	r1, #2
    6392:	4638      	mov	r0, r7
    6394:	f00c fbd8 	bl	12b48 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6398:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    639a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    639c:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    63a0:	4638      	mov	r0, r7
    63a2:	f00c fbd1 	bl	12b48 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    63a6:	4632      	mov	r2, r6
    63a8:	4649      	mov	r1, r9
    63aa:	4628      	mov	r0, r5
    63ac:	f7fb fc38 	bl	1c20 <memcpy>
    63b0:	4640      	mov	r0, r8
    63b2:	2300      	movs	r3, #0
    63b4:	4622      	mov	r2, r4
    63b6:	2104      	movs	r1, #4
    63b8:	f7fe fcf8 	bl	4dac <bt_l2cap_send_cb>
	return 0;
    63bc:	2000      	movs	r0, #0
    63be:	e7e2      	b.n	6386 <gatt_notify+0x2e>
    63c0:	00014891 	.word	0x00014891
    63c4:	20003aa4 	.word	0x20003aa4
    63c8:	00016531 	.word	0x00016531
    63cc:	0001644c 	.word	0x0001644c
    63d0:	00015639 	.word	0x00015639

000063d4 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    63d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    63d8:	694b      	ldr	r3, [r1, #20]
{
    63da:	b087      	sub	sp, #28
    63dc:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    63de:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    63e0:	6818      	ldr	r0, [r3, #0]
    63e2:	2300      	movs	r3, #0
{
    63e4:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    63e6:	f88d 3014 	strb.w	r3, [sp, #20]
    63ea:	a905      	add	r1, sp, #20
    63ec:	f642 0303 	movw	r3, #10243	; 0x2803
    63f0:	f8ad 3016 	strh.w	r3, [sp, #22]
    63f4:	f7fb fd92 	bl	1f1c <bt_uuid_cmp>
    63f8:	b930      	cbnz	r0, 6408 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    63fa:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    63fc:	68db      	ldr	r3, [r3, #12]
    63fe:	791b      	ldrb	r3, [r3, #4]
    6400:	069b      	lsls	r3, r3, #26
    6402:	d544      	bpl.n	648e <gatt_indicate+0xba>
			return -EINVAL;
		}

		value_handle += 1;
    6404:	3501      	adds	r5, #1
    6406:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    6408:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    640a:	211d      	movs	r1, #29
    640c:	3202      	adds	r2, #2
    640e:	4648      	mov	r0, r9
    6410:	f7ff fab4 	bl	597c <bt_att_create_pdu>
	if (!buf) {
    6414:	4606      	mov	r6, r0
    6416:	b970      	cbnz	r0, 6436 <gatt_indicate+0x62>
		BT_WARN("No buffer available to send indication");
    6418:	4a1e      	ldr	r2, [pc, #120]	; (6494 <gatt_indicate+0xc0>)
    641a:	4b1f      	ldr	r3, [pc, #124]	; (6498 <gatt_indicate+0xc4>)
    641c:	9201      	str	r2, [sp, #4]
    641e:	9200      	str	r2, [sp, #0]
    6420:	681c      	ldr	r4, [r3, #0]
    6422:	491e      	ldr	r1, [pc, #120]	; (649c <gatt_indicate+0xc8>)
    6424:	4b1e      	ldr	r3, [pc, #120]	; (64a0 <gatt_indicate+0xcc>)
    6426:	481f      	ldr	r0, [pc, #124]	; (64a4 <gatt_indicate+0xd0>)
    6428:	47a0      	blx	r4
		return -ENOMEM;
    642a:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    642e:	4620      	mov	r0, r4
    6430:	b007      	add	sp, #28
    6432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    6436:	f100 0708 	add.w	r7, r0, #8
    643a:	2102      	movs	r1, #2
    643c:	4638      	mov	r0, r7
    643e:	f00c fb83 	bl	12b48 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6442:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    6444:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    6446:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    644a:	4638      	mov	r0, r7
    644c:	f00c fb7c 	bl	12b48 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6450:	8c22      	ldrh	r2, [r4, #32]
    6452:	69e1      	ldr	r1, [r4, #28]
    6454:	4640      	mov	r0, r8
    6456:	f7fb fbe3 	bl	1c20 <memcpy>
		req->func = func;
    645a:	4b13      	ldr	r3, [pc, #76]	; (64a8 <gatt_indicate+0xd4>)
    645c:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    645e:	2300      	movs	r3, #0
		req->buf = buf;
    6460:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    6462:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    6464:	4621      	mov	r1, r4
    6466:	4648      	mov	r0, r9
    6468:	f7ff fee2 	bl	6230 <bt_att_req_send>
	if (err) {
    646c:	4604      	mov	r4, r0
    646e:	2800      	cmp	r0, #0
    6470:	d0dd      	beq.n	642e <gatt_indicate+0x5a>
		BT_ERR("Error sending ATT PDU: %d", err);
    6472:	4a08      	ldr	r2, [pc, #32]	; (6494 <gatt_indicate+0xc0>)
    6474:	4b08      	ldr	r3, [pc, #32]	; (6498 <gatt_indicate+0xc4>)
    6476:	9202      	str	r2, [sp, #8]
    6478:	e88d 0014 	stmia.w	sp, {r2, r4}
    647c:	4907      	ldr	r1, [pc, #28]	; (649c <gatt_indicate+0xc8>)
    647e:	681d      	ldr	r5, [r3, #0]
    6480:	480a      	ldr	r0, [pc, #40]	; (64ac <gatt_indicate+0xd8>)
    6482:	4b0b      	ldr	r3, [pc, #44]	; (64b0 <gatt_indicate+0xdc>)
    6484:	47a8      	blx	r5
		net_buf_unref(buf);
    6486:	4630      	mov	r0, r6
    6488:	f00c fb26 	bl	12ad8 <net_buf_unref>
    648c:	e7cf      	b.n	642e <gatt_indicate+0x5a>
			return -EINVAL;
    648e:	f06f 0415 	mvn.w	r4, #21
    6492:	e7cc      	b.n	642e <gatt_indicate+0x5a>
    6494:	00014891 	.word	0x00014891
    6498:	20003aa4 	.word	0x20003aa4
    649c:	00015639 	.word	0x00015639
    64a0:	00016462 	.word	0x00016462
    64a4:	000164d0 	.word	0x000164d0
    64a8:	000062b5 	.word	0x000062b5
    64ac:	00016507 	.word	0x00016507
    64b0:	00016458 	.word	0x00016458

000064b4 <sc_indicate.constprop.19>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    64b4:	b510      	push	{r4, lr}
    64b6:	4b17      	ldr	r3, [pc, #92]	; (6514 <sc_indicate.constprop.19+0x60>)
    64b8:	f3bf 8f5b 	dmb	ish
    64bc:	f103 0250 	add.w	r2, r3, #80	; 0x50
    64c0:	e852 4f00 	ldrex	r4, [r2]
    64c4:	f044 0e01 	orr.w	lr, r4, #1
    64c8:	e842 ec00 	strex	ip, lr, [r2]
    64cc:	f1bc 0f00 	cmp.w	ip, #0
    64d0:	d1f6      	bne.n	64c0 <sc_indicate.constprop.19+0xc>
    64d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    64d6:	07e2      	lsls	r2, r4, #31
    64d8:	d402      	bmi.n	64e0 <sc_indicate.constprop.19+0x2c>
		sc->start = start;
    64da:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    64dc:	84d9      	strh	r1, [r3, #38]	; 0x26
    64de:	e00a      	b.n	64f6 <sc_indicate.constprop.19+0x42>
	if (new_start >= *start && new_end <= *end) {
    64e0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    64e2:	4282      	cmp	r2, r0
    64e4:	d803      	bhi.n	64ee <sc_indicate.constprop.19+0x3a>
    64e6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    64e8:	428a      	cmp	r2, r1
    64ea:	d301      	bcc.n	64f0 <sc_indicate.constprop.19+0x3c>
    64ec:	bd10      	pop	{r4, pc}
		*start = new_start;
    64ee:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    64f0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    64f2:	428a      	cmp	r2, r1
    64f4:	d3f2      	bcc.n	64dc <sc_indicate.constprop.19+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    64f6:	f3bf 8f5b 	dmb	ish
    64fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    64fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    6500:	079b      	lsls	r3, r3, #30
    6502:	d406      	bmi.n	6512 <sc_indicate.constprop.19+0x5e>
    6504:	220a      	movs	r2, #10
    6506:	4904      	ldr	r1, [pc, #16]	; (6518 <sc_indicate.constprop.19+0x64>)
    6508:	4804      	ldr	r0, [pc, #16]	; (651c <sc_indicate.constprop.19+0x68>)
}
    650a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    650e:	f00d bf51 	b.w	143b4 <k_delayed_work_submit_to_queue>
    6512:	bd10      	pop	{r4, pc}
    6514:	200005b0 	.word	0x200005b0
    6518:	200005d8 	.word	0x200005d8
    651c:	200019c8 	.word	0x200019c8

00006520 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6520:	6882      	ldr	r2, [r0, #8]
    6522:	4b19      	ldr	r3, [pc, #100]	; (6588 <connected_cb+0x68>)
    6524:	429a      	cmp	r2, r3
{
    6526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    652a:	4607      	mov	r7, r0
    652c:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    652e:	d125      	bne.n	657c <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6530:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    6532:	2600      	movs	r6, #0
    6534:	686b      	ldr	r3, [r5, #4]
    6536:	429e      	cmp	r6, r3
    6538:	d220      	bcs.n	657c <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    653a:	6829      	ldr	r1, [r5, #0]
    653c:	ea4f 1806 	mov.w	r8, r6, lsl #4
    6540:	4441      	add	r1, r8
    6542:	4620      	mov	r0, r4
    6544:	f7fd fe14 	bl	4170 <bt_conn_addr_le_cmp>
    6548:	b9d8      	cbnz	r0, 6582 <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    654a:	682b      	ldr	r3, [r5, #0]
    654c:	4443      	add	r3, r8
    654e:	891b      	ldrh	r3, [r3, #8]
    6550:	b1bb      	cbz	r3, 6582 <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    6552:	4629      	mov	r1, r5
    6554:	4638      	mov	r0, r7
    6556:	f7ff fe94 	bl	6282 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    655a:	682c      	ldr	r4, [r5, #0]
    655c:	4b0b      	ldr	r3, [pc, #44]	; (658c <connected_cb+0x6c>)
    655e:	429c      	cmp	r4, r3
    6560:	d10c      	bne.n	657c <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    6562:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    6564:	89a0      	ldrh	r0, [r4, #12]
    6566:	89e1      	ldrh	r1, [r4, #14]
    6568:	b900      	cbnz	r0, 656c <connected_cb+0x4c>
    656a:	b139      	cbz	r1, 657c <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    656c:	f7ff ffa2 	bl	64b4 <sc_indicate.constprop.19>
	memset(cfg->data, 0, sizeof(cfg->data));
    6570:	2204      	movs	r2, #4
    6572:	2100      	movs	r1, #0
    6574:	f104 000c 	add.w	r0, r4, #12
    6578:	f7fb fb7e 	bl	1c78 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    657c:	2001      	movs	r0, #1
    657e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    6582:	3601      	adds	r6, #1
    6584:	e7d6      	b.n	6534 <connected_cb+0x14>
    6586:	bf00      	nop
    6588:	000067ad 	.word	0x000067ad
    658c:	20000604 	.word	0x20000604

00006590 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6590:	490d      	ldr	r1, [pc, #52]	; (65c8 <sc_indicate_rsp+0x38>)
    6592:	f3bf 8f5b 	dmb	ish
    6596:	f101 0350 	add.w	r3, r1, #80	; 0x50
    659a:	e853 2f00 	ldrex	r2, [r3]
    659e:	f022 0202 	bic.w	r2, r2, #2
    65a2:	e843 2000 	strex	r0, r2, [r3]
    65a6:	2800      	cmp	r0, #0
    65a8:	d1f7      	bne.n	659a <sc_indicate_rsp+0xa>
    65aa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65ae:	f3bf 8f5b 	dmb	ish
    65b2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    65b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    65b8:	07db      	lsls	r3, r3, #31
    65ba:	d504      	bpl.n	65c6 <sc_indicate_rsp+0x36>
    65bc:	2200      	movs	r2, #0
    65be:	3128      	adds	r1, #40	; 0x28
    65c0:	4802      	ldr	r0, [pc, #8]	; (65cc <sc_indicate_rsp+0x3c>)
    65c2:	f00d bef7 	b.w	143b4 <k_delayed_work_submit_to_queue>
    65c6:	4770      	bx	lr
    65c8:	200005b0 	.word	0x200005b0
    65cc:	200019c8 	.word	0x200019c8

000065d0 <read_appearance>:
{
    65d0:	b513      	push	{r0, r1, r4, lr}
    65d2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    65d6:	4610      	mov	r0, r2
	if (offset > value_len) {
    65d8:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    65da:	f04f 0200 	mov.w	r2, #0
    65de:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    65e2:	d80d      	bhi.n	6600 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    65e4:	f1c1 0402 	rsb	r4, r1, #2
    65e8:	429c      	cmp	r4, r3
    65ea:	bfa8      	it	ge
    65ec:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    65ee:	f10d 0306 	add.w	r3, sp, #6
    65f2:	4622      	mov	r2, r4
    65f4:	4419      	add	r1, r3
    65f6:	f7fb fb13 	bl	1c20 <memcpy>
}
    65fa:	4620      	mov	r0, r4
    65fc:	b002      	add	sp, #8
    65fe:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6600:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6604:	e7f9      	b.n	65fa <read_appearance+0x2a>
	...

00006608 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6608:	6882      	ldr	r2, [r0, #8]
    660a:	4b27      	ldr	r3, [pc, #156]	; (66a8 <disconnected_cb+0xa0>)
    660c:	429a      	cmp	r2, r3
{
    660e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6612:	4680      	mov	r8, r0
    6614:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6616:	d127      	bne.n	6668 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6618:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    661a:	8923      	ldrh	r3, [r4, #8]
    661c:	b323      	cbz	r3, 6668 <disconnected_cb+0x60>
    661e:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6620:	f101 0a4c 	add.w	sl, r1, #76	; 0x4c
	for (i = 0; i < ccc->cfg_len; i++) {
    6624:	6863      	ldr	r3, [r4, #4]
    6626:	429e      	cmp	r6, r3
    6628:	d30b      	bcc.n	6642 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    662a:	2202      	movs	r2, #2
    662c:	2100      	movs	r1, #0
    662e:	f104 0008 	add.w	r0, r4, #8
    6632:	f7fb fb21 	bl	1c78 <memset>
	if (ccc->cfg_changed) {
    6636:	68e3      	ldr	r3, [r4, #12]
    6638:	b1b3      	cbz	r3, 6668 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    663a:	8921      	ldrh	r1, [r4, #8]
    663c:	4640      	mov	r0, r8
    663e:	4798      	blx	r3
    6640:	e012      	b.n	6668 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    6642:	6821      	ldr	r1, [r4, #0]
    6644:	0135      	lsls	r5, r6, #4
    6646:	4429      	add	r1, r5
    6648:	890b      	ldrh	r3, [r1, #8]
    664a:	b19b      	cbz	r3, 6674 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    664c:	4648      	mov	r0, r9
    664e:	f7fd fd8f 	bl	4170 <bt_conn_addr_le_cmp>
    6652:	b188      	cbz	r0, 6678 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6654:	6820      	ldr	r0, [r4, #0]
    6656:	4428      	add	r0, r5
    6658:	f7fd fdea 	bl	4230 <bt_conn_lookup_addr_le>
			if (tmp) {
    665c:	b150      	cbz	r0, 6674 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    665e:	7a43      	ldrb	r3, [r0, #9]
    6660:	2b03      	cmp	r3, #3
    6662:	d105      	bne.n	6670 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    6664:	f7fd fe1a 	bl	429c <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    6668:	2001      	movs	r0, #1
    666a:	b002      	add	sp, #8
    666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6670:	f7fd fe14 	bl	429c <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    6674:	3601      	adds	r6, #1
    6676:	e7d5      	b.n	6624 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6678:	4650      	mov	r0, sl
    667a:	f7fd f9f9 	bl	3a70 <bt_addr_le_is_bonded>
    667e:	4607      	mov	r7, r0
    6680:	6820      	ldr	r0, [r4, #0]
    6682:	b95f      	cbnz	r7, 669c <disconnected_cb+0x94>
    6684:	4428      	add	r0, r5
    6686:	2207      	movs	r2, #7
    6688:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    668a:	9700      	str	r7, [sp, #0]
    668c:	f8cd 7003 	str.w	r7, [sp, #3]
    6690:	f7fb fac6 	bl	1c20 <memcpy>
				ccc->cfg[i].value = 0;
    6694:	6823      	ldr	r3, [r4, #0]
    6696:	441d      	add	r5, r3
    6698:	812f      	strh	r7, [r5, #8]
    669a:	e7eb      	b.n	6674 <disconnected_cb+0x6c>
    669c:	2207      	movs	r2, #7
    669e:	4651      	mov	r1, sl
    66a0:	4428      	add	r0, r5
    66a2:	f7fb fabd 	bl	1c20 <memcpy>
    66a6:	e7e5      	b.n	6674 <disconnected_cb+0x6c>
    66a8:	000067ad 	.word	0x000067ad

000066ac <read_name>:
{
    66ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    66b0:	4e0d      	ldr	r6, [pc, #52]	; (66e8 <read_name+0x3c>)
{
    66b2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    66b6:	4630      	mov	r0, r6
{
    66b8:	4698      	mov	r8, r3
    66ba:	4617      	mov	r7, r2
				 strlen(gap_name));
    66bc:	f7fb fa86 	bl	1bcc <strlen>
	if (offset > value_len) {
    66c0:	b283      	uxth	r3, r0
    66c2:	42ab      	cmp	r3, r5
    66c4:	d30d      	bcc.n	66e2 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    66c6:	1b5c      	subs	r4, r3, r5
    66c8:	4544      	cmp	r4, r8
    66ca:	4623      	mov	r3, r4
    66cc:	bfa8      	it	ge
    66ce:	4643      	movge	r3, r8
    66d0:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    66d2:	4622      	mov	r2, r4
    66d4:	1971      	adds	r1, r6, r5
    66d6:	4638      	mov	r0, r7
    66d8:	f7fb faa2 	bl	1c20 <memcpy>
}
    66dc:	4620      	mov	r0, r4
    66de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    66e2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    66e6:	e7f9      	b.n	66dc <read_name+0x30>
    66e8:	0001659b 	.word	0x0001659b

000066ec <bt_gatt_attr_read_ccc>:
{
    66ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    66f0:	68ce      	ldr	r6, [r1, #12]
{
    66f2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    66f6:	4604      	mov	r4, r0
    66f8:	4690      	mov	r8, r2
    66fa:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    66fc:	2500      	movs	r5, #0
    66fe:	6873      	ldr	r3, [r6, #4]
    6700:	429d      	cmp	r5, r3
    6702:	d20e      	bcs.n	6722 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6704:	6831      	ldr	r1, [r6, #0]
    6706:	ea4f 1905 	mov.w	r9, r5, lsl #4
    670a:	4449      	add	r1, r9
    670c:	4620      	mov	r0, r4
    670e:	f7fd fd2f 	bl	4170 <bt_conn_addr_le_cmp>
    6712:	b108      	cbz	r0, 6718 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    6714:	3501      	adds	r5, #1
    6716:	e7f2      	b.n	66fe <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6718:	6832      	ldr	r2, [r6, #0]
    671a:	444a      	add	r2, r9
    671c:	8913      	ldrh	r3, [r2, #8]
    671e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    6722:	6873      	ldr	r3, [r6, #4]
    6724:	429d      	cmp	r5, r3
		value = 0x0000;
    6726:	bf04      	itt	eq
    6728:	2300      	moveq	r3, #0
    672a:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    672e:	2f02      	cmp	r7, #2
    6730:	d80f      	bhi.n	6752 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    6732:	f1c7 0402 	rsb	r4, r7, #2
    6736:	4554      	cmp	r4, sl
    6738:	bfa8      	it	ge
    673a:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    673c:	f10d 0306 	add.w	r3, sp, #6
    6740:	4622      	mov	r2, r4
    6742:	19d9      	adds	r1, r3, r7
    6744:	4640      	mov	r0, r8
    6746:	f7fb fa6b 	bl	1c20 <memcpy>
}
    674a:	4620      	mov	r0, r4
    674c:	b002      	add	sp, #8
    674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6752:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6756:	e7f8      	b.n	674a <bt_gatt_attr_read_ccc+0x5e>

00006758 <bt_gatt_attr_read_service>:
{
    6758:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    675a:	68c9      	ldr	r1, [r1, #12]
{
    675c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    6760:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    6762:	780a      	ldrb	r2, [r1, #0]
    6764:	b992      	cbnz	r2, 678c <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    6766:	884a      	ldrh	r2, [r1, #2]
    6768:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    676c:	2d02      	cmp	r5, #2
    676e:	d819      	bhi.n	67a4 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6770:	f1c5 0402 	rsb	r4, r5, #2
    6774:	429c      	cmp	r4, r3
    6776:	bfa8      	it	ge
    6778:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    677a:	f10d 0306 	add.w	r3, sp, #6
    677e:	4622      	mov	r2, r4
    6780:	1959      	adds	r1, r3, r5
    6782:	f7fb fa4d 	bl	1c20 <memcpy>
}
    6786:	4620      	mov	r0, r4
    6788:	b003      	add	sp, #12
    678a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    678c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    678e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    6792:	d807      	bhi.n	67a4 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6794:	f1c5 0410 	rsb	r4, r5, #16
    6798:	429c      	cmp	r4, r3
    679a:	bfa8      	it	ge
    679c:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    679e:	4622      	mov	r2, r4
    67a0:	4429      	add	r1, r5
    67a2:	e7ee      	b.n	6782 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    67a4:	f06f 0406 	mvn.w	r4, #6
    67a8:	e7ed      	b.n	6786 <bt_gatt_attr_read_service+0x2e>
	...

000067ac <bt_gatt_attr_write_ccc>:
{
    67ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67b0:	b087      	sub	sp, #28
    67b2:	4688      	mov	r8, r1
    67b4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    67b8:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    67bc:	2902      	cmp	r1, #2
{
    67be:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    67c0:	d85f      	bhi.n	6882 <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    67c2:	4419      	add	r1, r3
    67c4:	2902      	cmp	r1, #2
    67c6:	461f      	mov	r7, r3
    67c8:	dc5e      	bgt.n	6888 <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    67ca:	7853      	ldrb	r3, [r2, #1]
    67cc:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    67ce:	2400      	movs	r4, #0
    67d0:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    67d4:	686b      	ldr	r3, [r5, #4]
    67d6:	429c      	cmp	r4, r3
    67d8:	d206      	bcs.n	67e8 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    67da:	6829      	ldr	r1, [r5, #0]
    67dc:	4648      	mov	r0, r9
    67de:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    67e2:	f7fd fcc5 	bl	4170 <bt_conn_addr_le_cmp>
    67e6:	b9b8      	cbnz	r0, 6818 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    67e8:	686b      	ldr	r3, [r5, #4]
    67ea:	429c      	cmp	r4, r3
    67ec:	d12f      	bne.n	684e <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    67ee:	b356      	cbz	r6, 6846 <bt_gatt_attr_write_ccc+0x9a>
    67f0:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    67f2:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    67f4:	686b      	ldr	r3, [r5, #4]
    67f6:	429c      	cmp	r4, r3
    67f8:	d217      	bcs.n	682a <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    67fa:	6828      	ldr	r0, [r5, #0]
    67fc:	f8cd a008 	str.w	sl, [sp, #8]
    6800:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    6804:	2207      	movs	r2, #7
    6806:	a902      	add	r1, sp, #8
    6808:	4458      	add	r0, fp
    680a:	f8cd a00b 	str.w	sl, [sp, #11]
    680e:	f7fb f9f2 	bl	1bf6 <memcmp>
    6812:	b118      	cbz	r0, 681c <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    6814:	3401      	adds	r4, #1
    6816:	e7ed      	b.n	67f4 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    6818:	3401      	adds	r4, #1
    681a:	e7db      	b.n	67d4 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    681c:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    681e:	2207      	movs	r2, #7
    6820:	f109 014c 	add.w	r1, r9, #76	; 0x4c
    6824:	4458      	add	r0, fp
    6826:	f7fb f9fb 	bl	1c20 <memcpy>
		if (i == ccc->cfg_len) {
    682a:	686b      	ldr	r3, [r5, #4]
    682c:	429c      	cmp	r4, r3
    682e:	d10e      	bne.n	684e <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    6830:	4a17      	ldr	r2, [pc, #92]	; (6890 <bt_gatt_attr_write_ccc+0xe4>)
    6832:	4b18      	ldr	r3, [pc, #96]	; (6894 <bt_gatt_attr_write_ccc+0xe8>)
    6834:	9201      	str	r2, [sp, #4]
    6836:	9200      	str	r2, [sp, #0]
    6838:	681c      	ldr	r4, [r3, #0]
    683a:	4917      	ldr	r1, [pc, #92]	; (6898 <bt_gatt_attr_write_ccc+0xec>)
    683c:	4b17      	ldr	r3, [pc, #92]	; (689c <bt_gatt_attr_write_ccc+0xf0>)
    683e:	4818      	ldr	r0, [pc, #96]	; (68a0 <bt_gatt_attr_write_ccc+0xf4>)
    6840:	47a0      	blx	r4
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6842:	f06f 0710 	mvn.w	r7, #16
}
    6846:	4638      	mov	r0, r7
    6848:	b007      	add	sp, #28
    684a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    684e:	682b      	ldr	r3, [r5, #0]
    6850:	0124      	lsls	r4, r4, #4
    6852:	4423      	add	r3, r4
    6854:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    6856:	892b      	ldrh	r3, [r5, #8]
    6858:	42b3      	cmp	r3, r6
    685a:	d003      	beq.n	6864 <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    685c:	4629      	mov	r1, r5
    685e:	4640      	mov	r0, r8
    6860:	f7ff fd0f 	bl	6282 <gatt_ccc_changed>
	if (!value) {
    6864:	2e00      	cmp	r6, #0
    6866:	d1ee      	bne.n	6846 <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    6868:	6828      	ldr	r0, [r5, #0]
    686a:	9604      	str	r6, [sp, #16]
    686c:	4420      	add	r0, r4
    686e:	2207      	movs	r2, #7
    6870:	a904      	add	r1, sp, #16
    6872:	f8cd 6013 	str.w	r6, [sp, #19]
    6876:	f7fb f9d3 	bl	1c20 <memcpy>
		ccc->cfg[i].value = 0;
    687a:	682b      	ldr	r3, [r5, #0]
    687c:	441c      	add	r4, r3
    687e:	8126      	strh	r6, [r4, #8]
    6880:	e7e1      	b.n	6846 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6882:	f06f 0706 	mvn.w	r7, #6
    6886:	e7de      	b.n	6846 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6888:	f06f 070c 	mvn.w	r7, #12
    688c:	e7db      	b.n	6846 <bt_gatt_attr_write_ccc+0x9a>
    688e:	bf00      	nop
    6890:	00014891 	.word	0x00014891
    6894:	20003aa4 	.word	0x20003aa4
    6898:	00015639 	.word	0x00015639
    689c:	00016435 	.word	0x00016435
    68a0:	000164a6 	.word	0x000164a6

000068a4 <notify_cb>:
{
    68a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    68a8:	f642 1302 	movw	r3, #10498	; 0x2902
{
    68ac:	4605      	mov	r5, r0
    68ae:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    68b0:	2400      	movs	r4, #0
    68b2:	4669      	mov	r1, sp
    68b4:	6800      	ldr	r0, [r0, #0]
    68b6:	f88d 4000 	strb.w	r4, [sp]
    68ba:	f8ad 3002 	strh.w	r3, [sp, #2]
    68be:	f7fb fb2d 	bl	1f1c <bt_uuid_cmp>
    68c2:	b178      	cbz	r0, 68e4 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    68c4:	f642 0303 	movw	r3, #10243	; 0x2803
    68c8:	6828      	ldr	r0, [r5, #0]
    68ca:	f88d 4004 	strb.w	r4, [sp, #4]
    68ce:	a901      	add	r1, sp, #4
    68d0:	f8ad 3006 	strh.w	r3, [sp, #6]
    68d4:	f7fb fb22 	bl	1f1c <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    68d8:	1b00      	subs	r0, r0, r4
    68da:	bf18      	it	ne
    68dc:	2001      	movne	r0, #1
}
    68de:	b003      	add	sp, #12
    68e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    68e4:	68aa      	ldr	r2, [r5, #8]
    68e6:	4b2b      	ldr	r3, [pc, #172]	; (6994 <notify_cb+0xf0>)
    68e8:	429a      	cmp	r2, r3
    68ea:	d001      	beq.n	68f0 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    68ec:	2001      	movs	r0, #1
    68ee:	e7f6      	b.n	68de <notify_cb+0x3a>
	ccc = attr->user_data;
    68f0:	68ef      	ldr	r7, [r5, #12]
    68f2:	4d29      	ldr	r5, [pc, #164]	; (6998 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    68f4:	4604      	mov	r4, r0
    68f6:	46a8      	mov	r8, r5
    68f8:	4681      	mov	r9, r0
    68fa:	687b      	ldr	r3, [r7, #4]
    68fc:	429c      	cmp	r4, r3
    68fe:	d2f5      	bcs.n	68ec <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    6900:	6838      	ldr	r0, [r7, #0]
    6902:	88b3      	ldrh	r3, [r6, #4]
    6904:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6908:	8902      	ldrh	r2, [r0, #8]
    690a:	429a      	cmp	r2, r3
    690c:	d114      	bne.n	6938 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    690e:	f7fd fc8f 	bl	4230 <bt_conn_lookup_addr_le>
		if (!conn) {
    6912:	4683      	mov	fp, r0
    6914:	b9f8      	cbnz	r0, 6956 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    6916:	683b      	ldr	r3, [r7, #0]
    6918:	4543      	cmp	r3, r8
    691a:	d10d      	bne.n	6938 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    691c:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    691e:	a801      	add	r0, sp, #4
    6920:	8c1a      	ldrh	r2, [r3, #32]
    6922:	69d9      	ldr	r1, [r3, #28]
    6924:	f7fb f97c 	bl	1c20 <memcpy>
	if (!stored->start && !stored->end) {
    6928:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    692a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    692e:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    6930:	b928      	cbnz	r0, 693e <notify_cb+0x9a>
    6932:	b942      	cbnz	r2, 6946 <notify_cb+0xa2>
		*stored = data;
    6934:	9801      	ldr	r0, [sp, #4]
    6936:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6938:	3401      	adds	r4, #1
    693a:	3510      	adds	r5, #16
    693c:	e7dd      	b.n	68fa <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    693e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    6942:	4281      	cmp	r1, r0
    6944:	d305      	bcc.n	6952 <notify_cb+0xae>
    6946:	429a      	cmp	r2, r3
    6948:	d2f6      	bcs.n	6938 <notify_cb+0x94>
	if (*end < new_end) {
    694a:	429a      	cmp	r2, r3
    694c:	d2f4      	bcs.n	6938 <notify_cb+0x94>
		*end = new_end;
    694e:	81eb      	strh	r3, [r5, #14]
    6950:	e7f2      	b.n	6938 <notify_cb+0x94>
		*start = new_start;
    6952:	81a9      	strh	r1, [r5, #12]
    6954:	e7f9      	b.n	694a <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6956:	7a43      	ldrb	r3, [r0, #9]
    6958:	2b03      	cmp	r3, #3
    695a:	d002      	beq.n	6962 <notify_cb+0xbe>
			bt_conn_unref(conn);
    695c:	f7fd fc9e 	bl	429c <bt_conn_unref>
    6960:	e7ea      	b.n	6938 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6962:	88b3      	ldrh	r3, [r6, #4]
    6964:	2b02      	cmp	r3, #2
    6966:	d10c      	bne.n	6982 <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    6968:	6971      	ldr	r1, [r6, #20]
    696a:	f7ff fd33 	bl	63d4 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    696e:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    6970:	4658      	mov	r0, fp
    6972:	f7fd fc93 	bl	429c <bt_conn_unref>
		if (err < 0) {
    6976:	f1ba 0f00 	cmp.w	sl, #0
    697a:	db09      	blt.n	6990 <notify_cb+0xec>
		data->err = 0;
    697c:	f8c6 9000 	str.w	r9, [r6]
    6980:	e7da      	b.n	6938 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    6982:	68b1      	ldr	r1, [r6, #8]
    6984:	8a33      	ldrh	r3, [r6, #16]
    6986:	68f2      	ldr	r2, [r6, #12]
    6988:	8a09      	ldrh	r1, [r1, #16]
    698a:	f7ff fce5 	bl	6358 <gatt_notify>
    698e:	e7ee      	b.n	696e <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6990:	2000      	movs	r0, #0
    6992:	e7a4      	b.n	68de <notify_cb+0x3a>
    6994:	000067ad 	.word	0x000067ad
    6998:	20000604 	.word	0x20000604

0000699c <bt_gatt_init>:
{
    699c:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    699e:	4806      	ldr	r0, [pc, #24]	; (69b8 <bt_gatt_init+0x1c>)
    69a0:	f7ff fc90 	bl	62c4 <gatt_register>
	gatt_register(&gatt_svc);
    69a4:	4805      	ldr	r0, [pc, #20]	; (69bc <bt_gatt_init+0x20>)
    69a6:	f7ff fc8d 	bl	62c4 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    69aa:	4905      	ldr	r1, [pc, #20]	; (69c0 <bt_gatt_init+0x24>)
    69ac:	4805      	ldr	r0, [pc, #20]	; (69c4 <bt_gatt_init+0x28>)
}
    69ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    69b2:	f00d bc8b 	b.w	142cc <k_delayed_work_init>
    69b6:	bf00      	nop
    69b8:	20003cec 	.word	0x20003cec
    69bc:	20003d48 	.word	0x20003d48
    69c0:	00006a49 	.word	0x00006a49
    69c4:	200005d8 	.word	0x200005d8

000069c8 <bt_gatt_foreach_attr>:
{
    69c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69cc:	4699      	mov	r9, r3
    69ce:	4b12      	ldr	r3, [pc, #72]	; (6a18 <bt_gatt_foreach_attr+0x50>)
    69d0:	681c      	ldr	r4, [r3, #0]
    69d2:	4606      	mov	r6, r0
    69d4:	460f      	mov	r7, r1
    69d6:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    69d8:	b1dc      	cbz	r4, 6a12 <bt_gatt_foreach_attr+0x4a>
    69da:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    69dc:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    69e0:	b1bc      	cbz	r4, 6a12 <bt_gatt_foreach_attr+0x4a>
    69e2:	2500      	movs	r5, #0
    69e4:	e006      	b.n	69f4 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    69e6:	6820      	ldr	r0, [r4, #0]
    69e8:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    69ec:	8a03      	ldrh	r3, [r0, #16]
    69ee:	42b3      	cmp	r3, r6
    69f0:	d207      	bcs.n	6a02 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    69f2:	3501      	adds	r5, #1
    69f4:	6863      	ldr	r3, [r4, #4]
    69f6:	42ab      	cmp	r3, r5
    69f8:	d8f5      	bhi.n	69e6 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    69fa:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    69fc:	b14c      	cbz	r4, 6a12 <bt_gatt_foreach_attr+0x4a>
    69fe:	3c08      	subs	r4, #8
    6a00:	e7ee      	b.n	69e0 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    6a02:	42bb      	cmp	r3, r7
    6a04:	d8f5      	bhi.n	69f2 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6a06:	4649      	mov	r1, r9
    6a08:	47c0      	blx	r8
    6a0a:	2800      	cmp	r0, #0
    6a0c:	d1f1      	bne.n	69f2 <bt_gatt_foreach_attr+0x2a>
    6a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a16:	bf00      	nop
    6a18:	200005a8 	.word	0x200005a8

00006a1c <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    6a1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    6a1e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    6a22:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6a24:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    6a26:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6a28:	2302      	movs	r3, #2
    6a2a:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6a2e:	4a05      	ldr	r2, [pc, #20]	; (6a44 <bt_gatt_indicate.part.10+0x28>)
    6a30:	8a00      	ldrh	r0, [r0, #16]
    6a32:	466b      	mov	r3, sp
    6a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6a38:	f7ff ffc6 	bl	69c8 <bt_gatt_foreach_attr>
}
    6a3c:	9800      	ldr	r0, [sp, #0]
    6a3e:	b007      	add	sp, #28
    6a40:	f85d fb04 	ldr.w	pc, [sp], #4
    6a44:	000068a5 	.word	0x000068a5

00006a48 <sc_process>:
{
    6a48:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    6a4a:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    6a4e:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    6a52:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6a54:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    6a58:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6a5c:	3828      	subs	r0, #40	; 0x28
    6a5e:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a62:	f3bf 8f5b 	dmb	ish
    6a66:	e854 2f00 	ldrex	r2, [r4]
    6a6a:	f022 0201 	bic.w	r2, r2, #1
    6a6e:	e844 2100 	strex	r1, r2, [r4]
    6a72:	2900      	cmp	r1, #0
    6a74:	d1f7      	bne.n	6a66 <sc_process+0x1e>
    6a76:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    6a7a:	2200      	movs	r2, #0
    6a7c:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    6a80:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    6a84:	4a0e      	ldr	r2, [pc, #56]	; (6ac0 <sc_process+0x78>)
    6a86:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    6a8a:	4a0e      	ldr	r2, [pc, #56]	; (6ac4 <sc_process+0x7c>)
    6a8c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    6a90:	aa01      	add	r2, sp, #4
    6a92:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    6a96:	2204      	movs	r2, #4
    6a98:	f823 2c08 	strh.w	r2, [r3, #-8]
    6a9c:	f7ff ffbe 	bl	6a1c <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6aa0:	b958      	cbnz	r0, 6aba <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6aa2:	f3bf 8f5b 	dmb	ish
    6aa6:	e854 3f00 	ldrex	r3, [r4]
    6aaa:	f043 0302 	orr.w	r3, r3, #2
    6aae:	e844 3200 	strex	r2, r3, [r4]
    6ab2:	2a00      	cmp	r2, #0
    6ab4:	d1f7      	bne.n	6aa6 <sc_process+0x5e>
    6ab6:	f3bf 8f5b 	dmb	ish
}
    6aba:	b002      	add	sp, #8
    6abc:	bd10      	pop	{r4, pc}
    6abe:	bf00      	nop
    6ac0:	20003d20 	.word	0x20003d20
    6ac4:	00006591 	.word	0x00006591

00006ac8 <bt_gatt_attr_next>:
{
    6ac8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6aca:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6acc:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6ace:	3101      	adds	r1, #1
    6ad0:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6ad2:	2200      	movs	r2, #0
    6ad4:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6ad8:	4608      	mov	r0, r1
    6ada:	4a03      	ldr	r2, [pc, #12]	; (6ae8 <bt_gatt_attr_next+0x20>)
    6adc:	f7ff ff74 	bl	69c8 <bt_gatt_foreach_attr>
}
    6ae0:	9801      	ldr	r0, [sp, #4]
    6ae2:	b003      	add	sp, #12
    6ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    6ae8:	0000627d 	.word	0x0000627d

00006aec <bt_gatt_attr_read_chrc>:
{
    6aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6af0:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6af4:	b08b      	sub	sp, #44	; 0x2c
    6af6:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6af8:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6afa:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    6afe:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    6b02:	f88d 3014 	strb.w	r3, [sp, #20]
{
    6b06:	4688      	mov	r8, r1
    6b08:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6b0a:	f7ff ffdd 	bl	6ac8 <bt_gatt_attr_next>
	if (!next) {
    6b0e:	4605      	mov	r5, r0
    6b10:	bb48      	cbnz	r0, 6b66 <bt_gatt_attr_read_chrc+0x7a>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6b12:	4a1c      	ldr	r2, [pc, #112]	; (6b84 <bt_gatt_attr_read_chrc+0x98>)
    6b14:	9202      	str	r2, [sp, #8]
    6b16:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    6b1a:	491b      	ldr	r1, [pc, #108]	; (6b88 <bt_gatt_attr_read_chrc+0x9c>)
    6b1c:	481b      	ldr	r0, [pc, #108]	; (6b8c <bt_gatt_attr_read_chrc+0xa0>)
    6b1e:	e88d 000c 	stmia.w	sp, {r2, r3}
    6b22:	4b1b      	ldr	r3, [pc, #108]	; (6b90 <bt_gatt_attr_read_chrc+0xa4>)
    6b24:	f8d3 8000 	ldr.w	r8, [r3]
    6b28:	4b1a      	ldr	r3, [pc, #104]	; (6b94 <bt_gatt_attr_read_chrc+0xa8>)
    6b2a:	47c0      	blx	r8
		pdu.value_handle = 0x0000;
    6b2c:	f88d 5015 	strb.w	r5, [sp, #21]
    6b30:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6b34:	f8d9 1000 	ldr.w	r1, [r9]
    6b38:	780b      	ldrb	r3, [r1, #0]
    6b3a:	b9c3      	cbnz	r3, 6b6e <bt_gatt_attr_read_chrc+0x82>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6b3c:	884b      	ldrh	r3, [r1, #2]
    6b3e:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    6b42:	2305      	movs	r3, #5
	if (offset > value_len) {
    6b44:	42b3      	cmp	r3, r6
    6b46:	d31a      	bcc.n	6b7e <bt_gatt_attr_read_chrc+0x92>
	len = min(buf_len, value_len - offset);
    6b48:	1b9b      	subs	r3, r3, r6
    6b4a:	42a3      	cmp	r3, r4
    6b4c:	bfa8      	it	ge
    6b4e:	4623      	movge	r3, r4
    6b50:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6b52:	ab05      	add	r3, sp, #20
    6b54:	4622      	mov	r2, r4
    6b56:	1999      	adds	r1, r3, r6
    6b58:	4638      	mov	r0, r7
    6b5a:	f7fb f861 	bl	1c20 <memcpy>
}
    6b5e:	4620      	mov	r0, r4
    6b60:	b00b      	add	sp, #44	; 0x2c
    6b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6b66:	8a03      	ldrh	r3, [r0, #16]
    6b68:	f8ad 3015 	strh.w	r3, [sp, #21]
    6b6c:	e7e2      	b.n	6b34 <bt_gatt_attr_read_chrc+0x48>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6b6e:	2210      	movs	r2, #16
    6b70:	3101      	adds	r1, #1
    6b72:	f10d 0017 	add.w	r0, sp, #23
    6b76:	f7fb f853 	bl	1c20 <memcpy>
		value_len += 16;
    6b7a:	2313      	movs	r3, #19
    6b7c:	e7e2      	b.n	6b44 <bt_gatt_attr_read_chrc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6b7e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6b82:	e7ec      	b.n	6b5e <bt_gatt_attr_read_chrc+0x72>
    6b84:	00014891 	.word	0x00014891
    6b88:	00015639 	.word	0x00015639
    6b8c:	00016470 	.word	0x00016470
    6b90:	20003aa4 	.word	0x20003aa4
    6b94:	0001641e 	.word	0x0001641e

00006b98 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6b98:	4603      	mov	r3, r0
    6b9a:	4a03      	ldr	r2, [pc, #12]	; (6ba8 <bt_gatt_connected+0x10>)
    6b9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6ba0:	2001      	movs	r0, #1
    6ba2:	f7ff bf11 	b.w	69c8 <bt_gatt_foreach_attr>
    6ba6:	bf00      	nop
    6ba8:	00006521 	.word	0x00006521

00006bac <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6bac:	4603      	mov	r3, r0
    6bae:	4a03      	ldr	r2, [pc, #12]	; (6bbc <bt_gatt_disconnected+0x10>)
    6bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6bb4:	2001      	movs	r0, #1
    6bb6:	f7ff bf07 	b.w	69c8 <bt_gatt_foreach_attr>
    6bba:	bf00      	nop
    6bbc:	00006609 	.word	0x00006609

00006bc0 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6bc2:	4a0b      	ldr	r2, [pc, #44]	; (6bf0 <bt_smp_accept+0x30>)
    6bc4:	6813      	ldr	r3, [r2, #0]
    6bc6:	b92b      	cbnz	r3, 6bd4 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.ops = &ops;
    6bc8:	480a      	ldr	r0, [pc, #40]	; (6bf4 <bt_smp_accept+0x34>)
    6bca:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    6bcc:	600a      	str	r2, [r1, #0]

		return 0;
    6bce:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    6bd0:	b004      	add	sp, #16
    6bd2:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    6bd4:	4a08      	ldr	r2, [pc, #32]	; (6bf8 <bt_smp_accept+0x38>)
    6bd6:	4b09      	ldr	r3, [pc, #36]	; (6bfc <bt_smp_accept+0x3c>)
    6bd8:	9001      	str	r0, [sp, #4]
    6bda:	9202      	str	r2, [sp, #8]
    6bdc:	9200      	str	r2, [sp, #0]
    6bde:	681c      	ldr	r4, [r3, #0]
    6be0:	4807      	ldr	r0, [pc, #28]	; (6c00 <bt_smp_accept+0x40>)
    6be2:	4b08      	ldr	r3, [pc, #32]	; (6c04 <bt_smp_accept+0x44>)
    6be4:	4908      	ldr	r1, [pc, #32]	; (6c08 <bt_smp_accept+0x48>)
    6be6:	47a0      	blx	r4
	return -ENOMEM;
    6be8:	f06f 000b 	mvn.w	r0, #11
    6bec:	e7f0      	b.n	6bd0 <bt_smp_accept+0x10>
    6bee:	bf00      	nop
    6bf0:	20000614 	.word	0x20000614
    6bf4:	20003d60 	.word	0x20003d60
    6bf8:	00014891 	.word	0x00014891
    6bfc:	20003aa4 	.word	0x20003aa4
    6c00:	000165b0 	.word	0x000165b0
    6c04:	000165a2 	.word	0x000165a2
    6c08:	00015639 	.word	0x00015639

00006c0c <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    6c0c:	2100      	movs	r1, #0
{
    6c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    6c12:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    6c14:	4608      	mov	r0, r1
    6c16:	f7fe f8c6 	bl	4da6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6c1a:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    6c1e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6c20:	2101      	movs	r1, #1
    6c22:	4630      	mov	r0, r6
    6c24:	f00b ff90 	bl	12b48 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    6c28:	2505      	movs	r5, #5
    6c2a:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    6c2c:	2101      	movs	r1, #1
    6c2e:	4630      	mov	r0, r6
    6c30:	f00b ff8a 	bl	12b48 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    6c34:	7005      	strb	r5, [r0, #0]
    6c36:	4622      	mov	r2, r4
    6c38:	4638      	mov	r0, r7
    6c3a:	2300      	movs	r3, #0
    6c3c:	2106      	movs	r1, #6
}
    6c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c42:	f7fe b8b3 	b.w	4dac <bt_l2cap_send_cb>

00006c46 <bt_smp_sign_verify>:
    6c46:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6c4a:	4770      	bx	lr

00006c4c <bt_smp_init>:

int bt_smp_init(void)
{
    6c4c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6c4e:	4802      	ldr	r0, [pc, #8]	; (6c58 <bt_smp_init+0xc>)
    6c50:	f7fd ffee 	bl	4c30 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    6c54:	2000      	movs	r0, #0
    6c56:	bd08      	pop	{r3, pc}
    6c58:	20003d54 	.word	0x20003d54

00006c5c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    6c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    6c5e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c60:	1dc3      	adds	r3, r0, #7
{
    6c62:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c64:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c68:	1e50      	subs	r0, r2, #1
{
    6c6a:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c6c:	b280      	uxth	r0, r0
{
    6c6e:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c70:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c72:	2100      	movs	r1, #0
    6c74:	2204      	movs	r2, #4
    6c76:	fb06 5000 	mla	r0, r6, r0, r5
    6c7a:	f7fa fffd 	bl	1c78 <memset>
    6c7e:	3c02      	subs	r4, #2
    6c80:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    6c82:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6c86:	42bc      	cmp	r4, r7
    6c88:	d101      	bne.n	6c8e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    6c8a:	b003      	add	sp, #12
    6c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    6c8e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    6c92:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6c94:	2204      	movs	r2, #4
    6c96:	1b80      	subs	r0, r0, r6
    6c98:	eb0d 0102 	add.w	r1, sp, r2
    6c9c:	4428      	add	r0, r5
    6c9e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    6ca0:	9301      	str	r3, [sp, #4]
    6ca2:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6ca4:	f7fa ffbc 	bl	1c20 <memcpy>
    6ca8:	e7ed      	b.n	6c86 <mem_init+0x2a>

00006caa <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    6caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    6cac:	6805      	ldr	r5, [r0, #0]
{
    6cae:	4606      	mov	r6, r0
	if (*mem_head) {
    6cb0:	b195      	cbz	r5, 6cd8 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6cb2:	1deb      	adds	r3, r5, #7
    6cb4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    6cb8:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6cba:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    6cbc:	4629      	mov	r1, r5
    6cbe:	eb0d 0002 	add.w	r0, sp, r2
    6cc2:	f7fa ffad 	bl	1c20 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6cc6:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    6cc8:	3c01      	subs	r4, #1
    6cca:	b2a4      	uxth	r4, r4
		if (head) {
    6ccc:	b11b      	cbz	r3, 6cd6 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    6cce:	1dda      	adds	r2, r3, #7
    6cd0:	f022 0203 	bic.w	r2, r2, #3
    6cd4:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    6cd6:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    6cd8:	4628      	mov	r0, r5
    6cda:	b002      	add	sp, #8
    6cdc:	bd70      	pop	{r4, r5, r6, pc}

00006cde <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    6cde:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6ce0:	680c      	ldr	r4, [r1, #0]
{
    6ce2:	4606      	mov	r6, r0
    6ce4:	460d      	mov	r5, r1
	if (*mem_head) {
    6ce6:	b11c      	cbz	r4, 6cf0 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6ce8:	1de3      	adds	r3, r4, #7
    6cea:	f023 0303 	bic.w	r3, r3, #3
    6cee:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    6cf0:	2204      	movs	r2, #4
    6cf2:	4629      	mov	r1, r5
    6cf4:	4630      	mov	r0, r6
    6cf6:	f7fa ff93 	bl	1c20 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6cfa:	1df2      	adds	r2, r6, #7
    6cfc:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    6d00:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6d02:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    6d04:	602e      	str	r6, [r5, #0]
    6d06:	bd70      	pop	{r4, r5, r6, pc}

00006d08 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    6d08:	b118      	cbz	r0, 6d12 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    6d0a:	3007      	adds	r0, #7
    6d0c:	f020 0003 	bic.w	r0, r0, #3
    6d10:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    6d12:	4770      	bx	lr

00006d14 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    6d14:	fb02 0001 	mla	r0, r2, r1, r0
    6d18:	4770      	bx	lr

00006d1a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    6d1a:	1a40      	subs	r0, r0, r1
    6d1c:	b280      	uxth	r0, r0
}
    6d1e:	fbb0 f0f2 	udiv	r0, r0, r2
    6d22:	4770      	bx	lr

00006d24 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    6d24:	b510      	push	{r4, lr}
	src += len;
    6d26:	4411      	add	r1, r2
    6d28:	3801      	subs	r0, #1
	while (len--) {
    6d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6d2e:	3a01      	subs	r2, #1
    6d30:	b292      	uxth	r2, r2
    6d32:	429a      	cmp	r2, r3
    6d34:	d100      	bne.n	6d38 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    6d36:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    6d38:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    6d3c:	f800 4f01 	strb.w	r4, [r0, #1]!
    6d40:	e7f5      	b.n	6d2e <mem_rcopy+0xa>

00006d42 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    6d42:	4401      	add	r1, r0
	while (len--) {
    6d44:	4288      	cmp	r0, r1
    6d46:	d101      	bne.n	6d4c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    6d48:	2000      	movs	r0, #0
    6d4a:	4770      	bx	lr
		if (*src++) {
    6d4c:	f810 3b01 	ldrb.w	r3, [r0], #1
    6d50:	2b00      	cmp	r3, #0
    6d52:	d0f7      	beq.n	6d44 <mem_nz+0x2>
			return 1;
    6d54:	2001      	movs	r0, #1
}
    6d56:	4770      	bx	lr

00006d58 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    6d58:	6010      	str	r0, [r2, #0]
    6d5a:	6008      	str	r0, [r1, #0]

	return link;
}
    6d5c:	4770      	bx	lr

00006d5e <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    6d5e:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    6d60:	6814      	ldr	r4, [r2, #0]
    6d62:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    6d64:	6814      	ldr	r4, [r2, #0]
    6d66:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    6d68:	6010      	str	r0, [r2, #0]

	return link;
}
    6d6a:	bd10      	pop	{r4, pc}

00006d6c <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    6d6c:	4288      	cmp	r0, r1
    6d6e:	d003      	beq.n	6d78 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    6d70:	b11a      	cbz	r2, 6d7a <memq_peek+0xe>
		*mem = head->mem;
    6d72:	6843      	ldr	r3, [r0, #4]
    6d74:	6013      	str	r3, [r2, #0]
    6d76:	4770      	bx	lr
		return NULL;
    6d78:	2000      	movs	r0, #0
	}

	return head;
}
    6d7a:	4770      	bx	lr

00006d7c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    6d7c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    6d7e:	4283      	cmp	r3, r0
    6d80:	d009      	beq.n	6d96 <memq_dequeue+0x1a>
	if (mem) {
    6d82:	b122      	cbz	r2, 6d8e <memq_dequeue+0x12>
		*mem = head->mem;
    6d84:	6858      	ldr	r0, [r3, #4]
    6d86:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    6d88:	681a      	ldr	r2, [r3, #0]
    6d8a:	600a      	str	r2, [r1, #0]

	return link;
    6d8c:	e001      	b.n	6d92 <memq_dequeue+0x16>
	if (!link) {
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d1fa      	bne.n	6d88 <memq_dequeue+0xc>
}
    6d92:	4618      	mov	r0, r3
    6d94:	4770      	bx	lr
		return NULL;
    6d96:	2300      	movs	r3, #0
    6d98:	e7fb      	b.n	6d92 <memq_dequeue+0x16>
	...

00006d9c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    6d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    6da0:	4f11      	ldr	r7, [pc, #68]	; (6de8 <mayfly_init+0x4c>)
    6da2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 6dec <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    6da6:	2604      	movs	r6, #4
	while (callee_id--) {
    6da8:	3e01      	subs	r6, #1
    6daa:	b2f6      	uxtb	r6, r6
    6dac:	2eff      	cmp	r6, #255	; 0xff
    6dae:	d019      	beq.n	6de4 <mayfly_init+0x48>
    6db0:	b233      	sxth	r3, r6
    6db2:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6db6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6dba:	011d      	lsls	r5, r3, #4
    6dbc:	2404      	movs	r4, #4
    6dbe:	f04f 0a0c 	mov.w	sl, #12
    6dc2:	e00a      	b.n	6dda <mayfly_init+0x3e>
    6dc4:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    6dc8:	1d0a      	adds	r2, r1, #4
    6dca:	eb04 0008 	add.w	r0, r4, r8
    6dce:	443a      	add	r2, r7
    6dd0:	4439      	add	r1, r7
    6dd2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    6dd6:	f7ff ffbf 	bl	6d58 <memq_init>
		while (caller_id--) {
    6dda:	3c01      	subs	r4, #1
    6ddc:	b2e4      	uxtb	r4, r4
    6dde:	2cff      	cmp	r4, #255	; 0xff
    6de0:	d1f0      	bne.n	6dc4 <mayfly_init+0x28>
    6de2:	e7e1      	b.n	6da8 <mayfly_init+0xc>
    6de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6de8:	20000734 	.word	0x20000734
    6dec:	200006b4 	.word	0x200006b4

00006df0 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    6df0:	b4f0      	push	{r4, r5, r6, r7}
    6df2:	4b12      	ldr	r3, [pc, #72]	; (6e3c <mayfly_enable+0x4c>)
    6df4:	4605      	mov	r5, r0
    6df6:	460f      	mov	r7, r1
    6df8:	260c      	movs	r6, #12
    6dfa:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    6dfc:	b172      	cbz	r2, 6e1c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    6dfe:	4361      	muls	r1, r4
    6e00:	fb06 1400 	mla	r4, r6, r0, r1
    6e04:	4423      	add	r3, r4
    6e06:	7a59      	ldrb	r1, [r3, #9]
    6e08:	7a18      	ldrb	r0, [r3, #8]
    6e0a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    6e0c:	bf04      	itt	eq
    6e0e:	3101      	addeq	r1, #1
    6e10:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    6e12:	4628      	mov	r0, r5
    6e14:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    6e16:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    6e18:	f00b bc7c 	b.w	12714 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    6e1c:	434c      	muls	r4, r1
    6e1e:	fb06 4400 	mla	r4, r6, r0, r4
    6e22:	4423      	add	r3, r4
    6e24:	7a9c      	ldrb	r4, [r3, #10]
    6e26:	7ada      	ldrb	r2, [r3, #11]
    6e28:	42a2      	cmp	r2, r4
    6e2a:	d104      	bne.n	6e36 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    6e2c:	3201      	adds	r2, #1
    6e2e:	729a      	strb	r2, [r3, #10]
}
    6e30:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    6e32:	f00b bccf 	b.w	127d4 <mayfly_pend>
}
    6e36:	bcf0      	pop	{r4, r5, r6, r7}
    6e38:	4770      	bx	lr
    6e3a:	bf00      	nop
    6e3c:	20000734 	.word	0x20000734

00006e40 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    6e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e42:	4605      	mov	r5, r0
    6e44:	460e      	mov	r6, r1
    6e46:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e48:	b18a      	cbz	r2, 6e6e <mayfly_enqueue+0x2e>
    6e4a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    6e4c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6e4e:	7820      	ldrb	r0, [r4, #0]
    6e50:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    6e52:	f010 0703 	ands.w	r7, r0, #3
    6e56:	d029      	beq.n	6eac <mayfly_enqueue+0x6c>
		if (chain) {
    6e58:	b303      	cbz	r3, 6e9c <mayfly_enqueue+0x5c>
			if (state != 1) {
    6e5a:	2f01      	cmp	r7, #1
    6e5c:	d039      	beq.n	6ed2 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6e5e:	3201      	adds	r2, #1
    6e60:	b2d2      	uxtb	r2, r2
    6e62:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    6e64:	4631      	mov	r1, r6
    6e66:	4628      	mov	r0, r5
    6e68:	f00b fcb4 	bl	127d4 <mayfly_pend>
    6e6c:	e01c      	b.n	6ea8 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6e6e:	f00b fc9f 	bl	127b0 <mayfly_prio_is_equal>
    6e72:	2800      	cmp	r0, #0
    6e74:	d0e9      	beq.n	6e4a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e76:	4631      	mov	r1, r6
    6e78:	4628      	mov	r0, r5
    6e7a:	f00b fc73 	bl	12764 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6e7e:	2800      	cmp	r0, #0
    6e80:	d0e3      	beq.n	6e4a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    6e82:	2330      	movs	r3, #48	; 0x30
    6e84:	220c      	movs	r2, #12
    6e86:	4373      	muls	r3, r6
    6e88:	fb02 3305 	mla	r3, r2, r5, r3
    6e8c:	4a12      	ldr	r2, [pc, #72]	; (6ed8 <mayfly_enqueue+0x98>)
    6e8e:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e90:	7a93      	ldrb	r3, [r2, #10]
    6e92:	7ad2      	ldrb	r2, [r2, #11]
    6e94:	1a9b      	subs	r3, r3, r2
    6e96:	bf18      	it	ne
    6e98:	2301      	movne	r3, #1
    6e9a:	e7d7      	b.n	6e4c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    6e9c:	3202      	adds	r2, #2
    6e9e:	b2d2      	uxtb	r2, r2
    6ea0:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    6ea2:	68e3      	ldr	r3, [r4, #12]
    6ea4:	68a0      	ldr	r0, [r4, #8]
    6ea6:	4798      	blx	r3
		return 0;
    6ea8:	2000      	movs	r0, #0
    6eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    6eac:	2b00      	cmp	r3, #0
    6eae:	d0f8      	beq.n	6ea2 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    6eb0:	3201      	adds	r2, #1
    6eb2:	b2d2      	uxtb	r2, r2
    6eb4:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6eb6:	2304      	movs	r3, #4
    6eb8:	2230      	movs	r2, #48	; 0x30
    6eba:	fb12 3206 	smlabb	r2, r2, r6, r3
    6ebe:	230c      	movs	r3, #12
    6ec0:	fb13 2305 	smlabb	r3, r3, r5, r2
    6ec4:	4a04      	ldr	r2, [pc, #16]	; (6ed8 <mayfly_enqueue+0x98>)
    6ec6:	6860      	ldr	r0, [r4, #4]
    6ec8:	441a      	add	r2, r3
    6eca:	4621      	mov	r1, r4
    6ecc:	f7ff ff47 	bl	6d5e <memq_enqueue>
    6ed0:	e7c8      	b.n	6e64 <mayfly_enqueue+0x24>
			return 1;
    6ed2:	4638      	mov	r0, r7

	return 0;
}
    6ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ed6:	bf00      	nop
    6ed8:	20000734 	.word	0x20000734

00006edc <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    6edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ee0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6ee4:	b089      	sub	sp, #36	; 0x24
    6ee6:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    6ee8:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    6eec:	4e43      	ldr	r6, [pc, #268]	; (6ffc <mayfly_run+0x120>)
    6eee:	9304      	str	r3, [sp, #16]
{
    6ef0:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    6ef2:	2404      	movs	r4, #4
	u8_t disable = 0;
    6ef4:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    6ef8:	3c01      	subs	r4, #1
    6efa:	b2e4      	uxtb	r4, r4
    6efc:	2cff      	cmp	r4, #255	; 0xff
    6efe:	d10b      	bne.n	6f18 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    6f00:	9b01      	ldr	r3, [sp, #4]
    6f02:	2b00      	cmp	r3, #0
    6f04:	d076      	beq.n	6ff4 <mayfly_run+0x118>
    6f06:	f1b8 0f00 	cmp.w	r8, #0
    6f0a:	d173      	bne.n	6ff4 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    6f0c:	4642      	mov	r2, r8
    6f0e:	4629      	mov	r1, r5
    6f10:	4628      	mov	r0, r5
    6f12:	f00b fbff 	bl	12714 <mayfly_enable_cb>
    6f16:	e06d      	b.n	6ff4 <mayfly_run+0x118>
		struct mayfly *m = 0;
    6f18:	f10d 0b20 	add.w	fp, sp, #32
    6f1c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    6f1e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    6f20:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    6f24:	f04f 0930 	mov.w	r9, #48	; 0x30
    6f28:	fb07 f304 	mul.w	r3, r7, r4
    6f2c:	fb09 3005 	mla	r0, r9, r5, r3
    6f30:	1831      	adds	r1, r6, r0
    6f32:	465a      	mov	r2, fp
    6f34:	6849      	ldr	r1, [r1, #4]
    6f36:	5830      	ldr	r0, [r6, r0]
    6f38:	9302      	str	r3, [sp, #8]
    6f3a:	f7ff ff17 	bl	6d6c <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6f3e:	9b04      	ldr	r3, [sp, #16]
    6f40:	fb17 3704 	smlabb	r7, r7, r4, r3
    6f44:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    6f46:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    6f48:	9303      	str	r3, [sp, #12]
		while (link) {
    6f4a:	f1ba 0f00 	cmp.w	sl, #0
    6f4e:	d119      	bne.n	6f84 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    6f50:	2230      	movs	r2, #48	; 0x30
    6f52:	230c      	movs	r3, #12
    6f54:	436a      	muls	r2, r5
    6f56:	fb03 2204 	mla	r2, r3, r4, r2
    6f5a:	4432      	add	r2, r6
    6f5c:	7a91      	ldrb	r1, [r2, #10]
    6f5e:	7ad0      	ldrb	r0, [r2, #11]
    6f60:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    6f62:	bf1e      	ittt	ne
    6f64:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    6f66:	2201      	movne	r2, #1
    6f68:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    6f6a:	2230      	movs	r2, #48	; 0x30
    6f6c:	436a      	muls	r2, r5
    6f6e:	fb03 2304 	mla	r3, r3, r4, r2
    6f72:	4433      	add	r3, r6
    6f74:	7a1a      	ldrb	r2, [r3, #8]
    6f76:	7a59      	ldrb	r1, [r3, #9]
    6f78:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    6f7a:	bf1c      	itt	ne
    6f7c:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    6f7e:	f04f 0801 	movne.w	r8, #1
    6f82:	e7b9      	b.n	6ef8 <mayfly_run+0x1c>
			req = m->_req;
    6f84:	9b07      	ldr	r3, [sp, #28]
    6f86:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    6f88:	785a      	ldrb	r2, [r3, #1]
    6f8a:	1abf      	subs	r7, r7, r2
    6f8c:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    6f90:	2f01      	cmp	r7, #1
    6f92:	d104      	bne.n	6f9e <mayfly_run+0xc2>
				m->_ack--;
    6f94:	3a01      	subs	r2, #1
    6f96:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    6f98:	6898      	ldr	r0, [r3, #8]
    6f9a:	68da      	ldr	r2, [r3, #12]
    6f9c:	4790      	blx	r2
			req = m->_req;
    6f9e:	9a07      	ldr	r2, [sp, #28]
    6fa0:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    6fa2:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    6fa4:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    6fa6:	1a9a      	subs	r2, r3, r2
    6fa8:	f002 0203 	and.w	r2, r2, #3
    6fac:	2a01      	cmp	r2, #1
    6fae:	9305      	str	r3, [sp, #20]
    6fb0:	d00d      	beq.n	6fce <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6fb2:	9b02      	ldr	r3, [sp, #8]
    6fb4:	9903      	ldr	r1, [sp, #12]
    6fb6:	fb09 3005 	mla	r0, r9, r5, r3
    6fba:	4430      	add	r0, r6
    6fbc:	2200      	movs	r2, #0
    6fbe:	6840      	ldr	r0, [r0, #4]
    6fc0:	f7ff fedc 	bl	6d7c <memq_dequeue>
				m->_link = link;
    6fc4:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    6fc6:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    6fc8:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    6fcc:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    6fce:	9b02      	ldr	r3, [sp, #8]
    6fd0:	fb09 3305 	mla	r3, r9, r5, r3
    6fd4:	18f1      	adds	r1, r6, r3
    6fd6:	465a      	mov	r2, fp
    6fd8:	6849      	ldr	r1, [r1, #4]
    6fda:	58f0      	ldr	r0, [r6, r3]
    6fdc:	f7ff fec6 	bl	6d6c <memq_peek>
			if (state == 1) {
    6fe0:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    6fe2:	4682      	mov	sl, r0
			if (state == 1) {
    6fe4:	d1b1      	bne.n	6f4a <mayfly_run+0x6e>
				if (caller_id || link) {
    6fe6:	b90c      	cbnz	r4, 6fec <mayfly_run+0x110>
    6fe8:	2800      	cmp	r0, #0
    6fea:	d0b1      	beq.n	6f50 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    6fec:	4629      	mov	r1, r5
    6fee:	4628      	mov	r0, r5
    6ff0:	f00b fbf0 	bl	127d4 <mayfly_pend>
	}
}
    6ff4:	b009      	add	sp, #36	; 0x24
    6ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ffa:	bf00      	nop
    6ffc:	20000734 	.word	0x20000734

00007000 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7000:	b510      	push	{r4, lr}
    7002:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    7004:	2000      	movs	r0, #0

	while (octets_len--) {
    7006:	3901      	subs	r1, #1
    7008:	b2c9      	uxtb	r1, r1
    700a:	29ff      	cmp	r1, #255	; 0xff
    700c:	d100      	bne.n	7010 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    700e:	bd10      	pop	{r4, pc}
		bite = *octets;
    7010:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7014:	2b00      	cmp	r3, #0
    7016:	d0f6      	beq.n	7006 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7018:	1e5c      	subs	r4, r3, #1
			one_count++;
    701a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    701c:	4023      	ands	r3, r4
			one_count++;
    701e:	b2c0      	uxtb	r0, r0
    7020:	e7f8      	b.n	7014 <util_ones_count_get+0x14>

00007022 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7022:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7024:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7026:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7028:	461a      	mov	r2, r3
	total = 0;
    702a:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    702c:	2aff      	cmp	r2, #255	; 0xff
    702e:	d101      	bne.n	7034 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7030:	2000      	movs	r0, #0
    7032:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7034:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7038:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    703a:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    703e:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7042:	d004      	beq.n	704e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7044:	68b3      	ldr	r3, [r6, #8]
    7046:	441c      	add	r4, r3
		current = ticker_current->next;
    7048:	4613      	mov	r3, r2
    704a:	463a      	mov	r2, r7
    704c:	e7ee      	b.n	702c <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    704e:	4293      	cmp	r3, r2
    7050:	d100      	bne.n	7054 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7052:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7054:	b21b      	sxth	r3, r3
    7056:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    705a:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    705c:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    705e:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7062:	7833      	ldrb	r3, [r6, #0]
    7064:	2bff      	cmp	r3, #255	; 0xff
    7066:	d006      	beq.n	7076 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    706c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7070:	689a      	ldr	r2, [r3, #8]
    7072:	4402      	add	r2, r0
    7074:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7076:	4420      	add	r0, r4
    7078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000707a <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    707a:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    707c:	1a55      	subs	r5, r2, r1
    707e:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7082:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7084:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7086:	d109      	bne.n	709c <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7088:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    708c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    708e:	42a2      	cmp	r2, r4
    7090:	d90e      	bls.n	70b0 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7092:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7094:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7096:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7098:	6144      	str	r4, [r0, #20]
    709a:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    709c:	1a8a      	subs	r2, r1, r2
    709e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    70a2:	4293      	cmp	r3, r2
    70a4:	d901      	bls.n	70aa <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    70a6:	1a9a      	subs	r2, r3, r2
    70a8:	e7f1      	b.n	708e <ticks_to_expire_prep+0x14>
    70aa:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    70ac:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    70ae:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    70b0:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    70b2:	2200      	movs	r2, #0
    70b4:	e7ef      	b.n	7096 <ticks_to_expire_prep+0x1c>

000070b6 <ticker_job_op_cb>:
{
    70b6:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    70b8:	2200      	movs	r2, #0
    70ba:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    70bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    70be:	6259      	str	r1, [r3, #36]	; 0x24
{
    70c0:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    70c2:	b10a      	cbz	r2, 70c8 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    70c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    70c6:	4710      	bx	r2
    70c8:	4770      	bx	lr

000070ca <ticker_worker>:
{
    70ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    70ce:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    70d0:	2301      	movs	r3, #1
{
    70d2:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    70d4:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    70d6:	2d00      	cmp	r5, #0
    70d8:	d14c      	bne.n	7174 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    70da:	7f43      	ldrb	r3, [r0, #29]
    70dc:	2bff      	cmp	r3, #255	; 0xff
    70de:	d102      	bne.n	70e6 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    70e0:	77c5      	strb	r5, [r0, #31]
		return;
    70e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    70e6:	f00a fe7f 	bl	11de8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    70ea:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    70ec:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    70ee:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    70f2:	1bc7      	subs	r7, r0, r7
    70f4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    70f8:	2eff      	cmp	r6, #255	; 0xff
    70fa:	d006      	beq.n	710a <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    70fc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7100:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7104:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7106:	429f      	cmp	r7, r3
    7108:	d218      	bcs.n	713c <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    710a:	7aa2      	ldrb	r2, [r4, #10]
    710c:	7ae3      	ldrb	r3, [r4, #11]
    710e:	4293      	cmp	r3, r2
    7110:	d105      	bne.n	711e <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    7112:	3301      	adds	r3, #1
    7114:	b2db      	uxtb	r3, r3
			last = 0;
    7116:	2b02      	cmp	r3, #2
    7118:	bf08      	it	eq
    711a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    711c:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    711e:	7ae3      	ldrb	r3, [r4, #11]
    7120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7124:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7126:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7128:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    712a:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    712c:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    712e:	46ac      	mov	ip, r5
    7130:	4623      	mov	r3, r4
    7132:	2104      	movs	r1, #4
    7134:	2003      	movs	r0, #3
}
    7136:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    713a:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    713c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    713e:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7140:	788a      	ldrb	r2, [r1, #2]
    7142:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7144:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7148:	1a9b      	subs	r3, r3, r2
    714a:	b2db      	uxtb	r3, r3
    714c:	2b01      	cmp	r3, #1
    714e:	d1d3      	bne.n	70f8 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7150:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7154:	3a01      	subs	r2, #1
    7156:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7158:	f1b9 0f00 	cmp.w	r9, #0
    715c:	d0cc      	beq.n	70f8 <ticker_worker+0x2e>
					   ticks_expired -
    715e:	6948      	ldr	r0, [r1, #20]
    7160:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7162:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7164:	1a28      	subs	r0, r5, r0
    7166:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7168:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    716c:	690b      	ldr	r3, [r1, #16]
    716e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7170:	47c8      	blx	r9
    7172:	e7c1      	b.n	70f8 <ticker_worker+0x2e>
    7174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007178 <ticker_job>:
{
    7178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    717c:	7fc2      	ldrb	r2, [r0, #31]
{
    717e:	b095      	sub	sp, #84	; 0x54
    7180:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7182:	2a00      	cmp	r2, #0
    7184:	f040 83be 	bne.w	7904 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    7188:	6943      	ldr	r3, [r0, #20]
    718a:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    718c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    718e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7190:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7192:	7ac0      	ldrb	r0, [r0, #11]
    7194:	4298      	cmp	r0, r3
    7196:	f000 808f 	beq.w	72b8 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    719a:	440b      	add	r3, r1
    719c:	b2db      	uxtb	r3, r3
			first = 0;
    719e:	2b02      	cmp	r3, #2
    71a0:	bf08      	it	eq
    71a2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    71a4:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    71a8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    71ac:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    71ae:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    71b2:	9b07      	ldr	r3, [sp, #28]
    71b4:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    71b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    71ba:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    71be:	f89b 301d 	ldrb.w	r3, [fp, #29]
    71c2:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    71c4:	f8db 3000 	ldr.w	r3, [fp]
    71c8:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    71ca:	f8db 3004 	ldr.w	r3, [fp, #4]
    71ce:	930d      	str	r3, [sp, #52]	; 0x34
    71d0:	f89b 3009 	ldrb.w	r3, [fp, #9]
    71d4:	3b01      	subs	r3, #1
    71d6:	b2db      	uxtb	r3, r3
    71d8:	9304      	str	r3, [sp, #16]
	pending = 0;
    71da:	2300      	movs	r3, #0
    71dc:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    71de:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    71e2:	9b04      	ldr	r3, [sp, #16]
    71e4:	2bff      	cmp	r3, #255	; 0xff
    71e6:	d16a      	bne.n	72be <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    71e8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    71ec:	9a05      	ldr	r2, [sp, #20]
    71ee:	1a9b      	subs	r3, r3, r2
    71f0:	bf18      	it	ne
    71f2:	2301      	movne	r3, #1
    71f4:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    71f6:	9b03      	ldr	r3, [sp, #12]
    71f8:	b1e3      	cbz	r3, 7234 <ticker_job+0xbc>
	node = &instance->node[0];
    71fa:	f8db 3000 	ldr.w	r3, [fp]
    71fe:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    7200:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    7204:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7208:	2eff      	cmp	r6, #255	; 0xff
    720a:	d00c      	beq.n	7226 <ticker_job+0xae>
		ticker = &node[id_expired];
    720c:	b237      	sxth	r7, r6
    720e:	9b06      	ldr	r3, [sp, #24]
    7210:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7214:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7218:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    721a:	4545      	cmp	r5, r8
    721c:	f240 8136 	bls.w	748c <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    7220:	eba5 0508 	sub.w	r5, r5, r8
    7224:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7226:	9b04      	ldr	r3, [sp, #16]
    7228:	9a03      	ldr	r2, [sp, #12]
    722a:	9905      	ldr	r1, [sp, #20]
    722c:	42b1      	cmp	r1, r6
    722e:	bf18      	it	ne
    7230:	4613      	movne	r3, r2
    7232:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    7234:	f8db 3000 	ldr.w	r3, [fp]
    7238:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    723a:	f8db 3004 	ldr.w	r3, [fp, #4]
    723e:	9312      	str	r3, [sp, #72]	; 0x48
    7240:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7244:	3b01      	subs	r3, #1
    7246:	b2db      	uxtb	r3, r3
    7248:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    724a:	9b03      	ldr	r3, [sp, #12]
    724c:	2bff      	cmp	r3, #255	; 0xff
    724e:	f040 8170 	bne.w	7532 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7252:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7256:	9a05      	ldr	r2, [sp, #20]
    7258:	4293      	cmp	r3, r2
	if (!pending) {
    725a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    725c:	f040 8349 	bne.w	78f2 <ticker_job+0x77a>
	if (!pending) {
    7260:	b95b      	cbnz	r3, 727a <ticker_job+0x102>
    7262:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7266:	f8db 3004 	ldr.w	r3, [fp, #4]
    726a:	9303      	str	r3, [sp, #12]
    726c:	3c01      	subs	r4, #1
    726e:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7270:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7274:	2cff      	cmp	r4, #255	; 0xff
    7276:	f040 82a0 	bne.w	77ba <ticker_job+0x642>
	instance->job_guard = 0;
    727a:	2300      	movs	r3, #0
    727c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7280:	9b04      	ldr	r3, [sp, #16]
    7282:	b14b      	cbz	r3, 7298 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7284:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7288:	2bff      	cmp	r3, #255	; 0xff
    728a:	f040 82e9 	bne.w	7860 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    728e:	f00a fd7f 	bl	11d90 <cntr_stop>
    7292:	b908      	cbnz	r0, 7298 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7294:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7298:	f89b 301f 	ldrb.w	r3, [fp, #31]
    729c:	2b00      	cmp	r3, #0
    729e:	f000 8331 	beq.w	7904 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    72a2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    72a6:	465b      	mov	r3, fp
    72a8:	2201      	movs	r2, #1
    72aa:	2103      	movs	r1, #3
    72ac:	2004      	movs	r0, #4
    72ae:	46a4      	mov	ip, r4
}
    72b0:	b015      	add	sp, #84	; 0x54
    72b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    72b6:	4760      	bx	ip
		flag_elapsed = 0;
    72b8:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    72ba:	4690      	mov	r8, r2
    72bc:	e77f      	b.n	71be <ticker_job+0x46>
		user = &users[count_user];
    72be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    72c0:	9a04      	ldr	r2, [sp, #16]
    72c2:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    72c6:	687b      	ldr	r3, [r7, #4]
    72c8:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    72ca:	78f9      	ldrb	r1, [r7, #3]
    72cc:	78be      	ldrb	r6, [r7, #2]
    72ce:	428e      	cmp	r6, r1
    72d0:	f000 80d7 	beq.w	7482 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    72d4:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    72d6:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    72d8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    72dc:	0112      	lsls	r2, r2, #4
    72de:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    72e0:	1c73      	adds	r3, r6, #1
    72e2:	b2db      	uxtb	r3, r3
				middle = 0;
    72e4:	4298      	cmp	r0, r3
    72e6:	bf08      	it	eq
    72e8:	2300      	moveq	r3, #0
			user->middle = middle;
    72ea:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    72ec:	9b08      	ldr	r3, [sp, #32]
    72ee:	5c9a      	ldrb	r2, [r3, r2]
    72f0:	2a03      	cmp	r2, #3
    72f2:	d9eb      	bls.n	72cc <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    72f4:	2a05      	cmp	r2, #5
    72f6:	d817      	bhi.n	7328 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    72f8:	7869      	ldrb	r1, [r5, #1]
    72fa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    72fe:	930c      	str	r3, [sp, #48]	; 0x30
    7300:	980c      	ldr	r0, [sp, #48]	; 0x30
    7302:	9b06      	ldr	r3, [sp, #24]
    7304:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    7308:	7863      	ldrb	r3, [r4, #1]
    730a:	78a0      	ldrb	r0, [r4, #2]
    730c:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    730e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7312:	d009      	beq.n	7328 <ticker_job+0x1b0>
			    (state == 0) ||
    7314:	2a04      	cmp	r2, #4
    7316:	d10c      	bne.n	7332 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7318:	686a      	ldr	r2, [r5, #4]
    731a:	b952      	cbnz	r2, 7332 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    731c:	68aa      	ldr	r2, [r5, #8]
    731e:	b942      	cbnz	r2, 7332 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    7320:	68ea      	ldr	r2, [r5, #12]
    7322:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    7326:	d104      	bne.n	7332 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7328:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    732a:	4628      	mov	r0, r5
    732c:	f7ff fec3 	bl	70b6 <ticker_job_op_cb>
    7330:	e7cb      	b.n	72ca <ticker_job+0x152>
			if (state == 1) {
    7332:	2b01      	cmp	r3, #1
    7334:	f040 809b 	bne.w	746e <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7338:	4658      	mov	r0, fp
    733a:	f7ff fe72 	bl	7022 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    733e:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7340:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7342:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7344:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7346:	f040 8084 	bne.w	7452 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    734a:	f8db 3014 	ldr.w	r3, [fp, #20]
    734e:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7350:	f00a fd4a 	bl	11de8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7356:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7358:	1ac3      	subs	r3, r0, r3
    735a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    735e:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7360:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7362:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7364:	bf9e      	ittt	ls
    7366:	6962      	ldrls	r2, [r4, #20]
    7368:	1b92      	subls	r2, r2, r6
    736a:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    736c:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    736e:	bf96      	itet	ls
    7370:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    7372:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    7374:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    7376:	b18a      	cbz	r2, 739c <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7378:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    737a:	b179      	cbz	r1, 739c <ticker_job+0x224>
		user_op->params.update.lazy--;
    737c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7380:	fa1f fe8e 	uxth.w	lr, lr
    7384:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7388:	429a      	cmp	r2, r3
    738a:	d32b      	bcc.n	73e4 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    738c:	f8df 9324 	ldr.w	r9, [pc, #804]	; 76b4 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7390:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7394:	45e6      	cmp	lr, ip
    7396:	d847      	bhi.n	7428 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7398:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    739c:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    739e:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    73a0:	4413      	add	r3, r2
    73a2:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    73a4:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    73a6:	6963      	ldr	r3, [r4, #20]
    73a8:	4413      	add	r3, r2
    73aa:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    73ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    73ae:	4620      	mov	r0, r4
    73b0:	f7ff fe63 	bl	707a <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    73b4:	69a2      	ldr	r2, [r4, #24]
    73b6:	892b      	ldrh	r3, [r5, #8]
    73b8:	4413      	add	r3, r2
    73ba:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    73bc:	896a      	ldrh	r2, [r5, #10]
    73be:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    73c0:	bf8c      	ite	hi
    73c2:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    73c4:	2300      	movls	r3, #0
    73c6:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    73c8:	7bab      	ldrb	r3, [r5, #14]
    73ca:	b103      	cbz	r3, 73ce <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    73cc:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    73ce:	9b06      	ldr	r3, [sp, #24]
    73d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    73d2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    73d6:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    73d8:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    73dc:	3301      	adds	r3, #1
    73de:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    73e0:	2100      	movs	r1, #0
    73e2:	e7a2      	b.n	732a <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    73e4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    73e8:	45e6      	cmp	lr, ip
    73ea:	d2cf      	bcs.n	738c <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    73ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
    73ee:	4eaf      	ldr	r6, [pc, #700]	; (76ac <ticker_job+0x534>)
    73f0:	48af      	ldr	r0, [pc, #700]	; (76b0 <ticker_job+0x538>)
    73f2:	198e      	adds	r6, r1, r6
    73f4:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    73f6:	bf81      	itttt	hi
    73f8:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    73fc:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    7400:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    7404:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    7406:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7408:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    740a:	bf8c      	ite	hi
    740c:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    7410:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    7414:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    7416:	4491      	add	r9, r2
			ticker->lazy_current--;
    7418:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    741c:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    741e:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    7422:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7426:	e7af      	b.n	7388 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7428:	6a66      	ldr	r6, [r4, #36]	; 0x24
    742a:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    742c:	48a0      	ldr	r0, [pc, #640]	; (76b0 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    742e:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7430:	499e      	ldr	r1, [pc, #632]	; (76ac <ticker_job+0x534>)
    7432:	1871      	adds	r1, r6, r1
    7434:	4281      	cmp	r1, r0
	return 0;
    7436:	bf8e      	itee	hi
    7438:	2100      	movhi	r1, #0
		return 1;
    743a:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    743c:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    743e:	4411      	add	r1, r2
			ticker->lazy_current++;
    7440:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7444:	bf8c      	ite	hi
    7446:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7448:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    744a:	440b      	add	r3, r1
			ticker->lazy_current++;
    744c:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7450:	e79e      	b.n	7390 <ticker_job+0x218>
		ticker->req = ticker->ack;
    7452:	78a3      	ldrb	r3, [r4, #2]
    7454:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7456:	786b      	ldrb	r3, [r5, #1]
    7458:	f89b 201c 	ldrb.w	r2, [fp, #28]
    745c:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    745e:	bf01      	itttt	eq
    7460:	23ff      	moveq	r3, #255	; 0xff
    7462:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7466:	2300      	moveq	r3, #0
    7468:	f8cb 3018 	streq.w	r3, [fp, #24]
    746c:	e7b8      	b.n	73e0 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    746e:	2104      	movs	r1, #4
    7470:	465b      	mov	r3, fp
    7472:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7476:	2201      	movs	r2, #1
    7478:	4608      	mov	r0, r1
    747a:	47a0      	blx	r4
				pending = 1;
    747c:	2301      	movs	r3, #1
				user->middle = prev;
    747e:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7480:	9309      	str	r3, [sp, #36]	; 0x24
    7482:	9b04      	ldr	r3, [sp, #16]
    7484:	3b01      	subs	r3, #1
    7486:	b2db      	uxtb	r3, r3
    7488:	9304      	str	r3, [sp, #16]
    748a:	e6aa      	b.n	71e2 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    748c:	f8db 3018 	ldr.w	r3, [fp, #24]
    7490:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7492:	bf29      	itett	cs
    7494:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    7496:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7498:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    749c:	2300      	movcs	r3, #0
    749e:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    74a2:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    74a4:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    74a6:	b11b      	cbz	r3, 74b0 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    74a8:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    74ac:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    74b0:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    74b2:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    74b4:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    74b6:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    74ba:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    74be:	f8d4 e004 	ldr.w	lr, [r4, #4]
    74c2:	f1be 0f00 	cmp.w	lr, #0
    74c6:	d030      	beq.n	752a <ticker_job+0x3b2>
    74c8:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    74ca:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 76b0 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    74ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    74d0:	6a21      	ldr	r1, [r4, #32]
    74d2:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    74d4:	4975      	ldr	r1, [pc, #468]	; (76ac <ticker_job+0x534>)
    74d6:	1859      	adds	r1, r3, r1
    74d8:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    74da:	bf9f      	itttt	ls
    74dc:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    74e0:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    74e4:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    74e8:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    74ea:	bf92      	itee	ls
    74ec:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    74ee:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    74f0:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    74f2:	4473      	add	r3, lr
			while (count--) {
    74f4:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    74f8:	441a      	add	r2, r3
			while (count--) {
    74fa:	d2e8      	bcs.n	74ce <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    74fc:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    74fe:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7500:	f8db 1014 	ldr.w	r1, [fp, #20]
    7504:	eb03 0209 	add.w	r2, r3, r9
    7508:	4620      	mov	r0, r4
    750a:	f7ff fdb6 	bl	707a <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    750e:	8ba3      	ldrh	r3, [r4, #28]
    7510:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    7512:	2300      	movs	r3, #0
    7514:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7516:	9b06      	ldr	r3, [sp, #24]
    7518:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    751c:	7863      	ldrb	r3, [r4, #1]
    751e:	3301      	adds	r3, #1
    7520:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    7522:	eba8 0805 	sub.w	r8, r8, r5
    7526:	46b2      	mov	sl, r6
    7528:	e66c      	b.n	7204 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    752a:	78a3      	ldrb	r3, [r4, #2]
    752c:	7063      	strb	r3, [r4, #1]
    752e:	4656      	mov	r6, sl
    7530:	e7f7      	b.n	7522 <ticker_job+0x3aa>
		user = &users[count_user];
    7532:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7534:	9a03      	ldr	r2, [sp, #12]
    7536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    753a:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    753c:	685b      	ldr	r3, [r3, #4]
    753e:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    7540:	9b06      	ldr	r3, [sp, #24]
    7542:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7546:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    754a:	f000 808e 	beq.w	766a <ticker_job+0x4f2>
				ticker = &node[id_insert];
    754e:	fa0f f38a 	sxth.w	r3, sl
    7552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7558:	46d0      	mov	r8, sl
    755a:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    755e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    7562:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    7564:	f8db 3000 	ldr.w	r3, [fp]
    7568:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    756a:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    756c:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    756e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7570:	8be3      	ldrh	r3, [r4, #30]
    7572:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    7574:	bf86      	itte	hi
    7576:	1a9b      	subhi	r3, r3, r2
    7578:	b29b      	uxthhi	r3, r3
		skip = 0;
    757a:	2300      	movls	r3, #0
    757c:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    757e:	fa0f f388 	sxth.w	r3, r8
    7582:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7586:	00db      	lsls	r3, r3, #3
    7588:	9313      	str	r3, [sp, #76]	; 0x4c
    758a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    758c:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7590:	f8db 0018 	ldr.w	r0, [fp, #24]
    7594:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    7596:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    759a:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    759c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    75a0:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    75a4:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    75a6:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    75a8:	2bff      	cmp	r3, #255	; 0xff
    75aa:	d007      	beq.n	75bc <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    75ac:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    75b0:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    75b4:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    75b6:	4281      	cmp	r1, r0
    75b8:	f200 80a9 	bhi.w	770e <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    75bc:	f8de 0018 	ldr.w	r0, [lr, #24]
    75c0:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    75c2:	eb01 0c00 	add.w	ip, r1, r0
    75c6:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    75c8:	2eff      	cmp	r6, #255	; 0xff
    75ca:	f040 80ae 	bne.w	772a <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    75ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
    75d0:	b130      	cbz	r0, 75e0 <ticker_job+0x468>
    75d2:	9807      	ldr	r0, [sp, #28]
    75d4:	4281      	cmp	r1, r0
    75d6:	f0c0 80bf 	bcc.w	7758 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    75da:	2eff      	cmp	r6, #255	; 0xff
    75dc:	f040 818e 	bne.w	78fc <ticker_job+0x784>
		if (previous == current) {
    75e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    75e2:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    75e6:	4283      	cmp	r3, r0
			node[previous].next = id;
    75e8:	bf18      	it	ne
    75ea:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    75ee:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    75f2:	bf16      	itet	ne
    75f4:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    75f8:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    75fc:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    7600:	2bff      	cmp	r3, #255	; 0xff
    7602:	d006      	beq.n	7612 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    7604:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    760c:	689a      	ldr	r2, [r3, #8]
    760e:	1a51      	subs	r1, r2, r1
    7610:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    7612:	78a3      	ldrb	r3, [r4, #2]
    7614:	3301      	adds	r3, #1
    7616:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    7618:	2100      	movs	r1, #0
			if (user_op) {
    761a:	2d00      	cmp	r5, #0
    761c:	d093      	beq.n	7546 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    761e:	4628      	mov	r0, r5
    7620:	f7ff fd49 	bl	70b6 <ticker_job_op_cb>
    7624:	e78f      	b.n	7546 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    7626:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    762a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    762c:	011b      	lsls	r3, r3, #4
    762e:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    7630:	f109 0201 	add.w	r2, r9, #1
    7634:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7638:	9a06      	ldr	r2, [sp, #24]
    763a:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    763c:	454a      	cmp	r2, r9
    763e:	bf08      	it	eq
    7640:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7646:	5cd3      	ldrb	r3, [r2, r3]
    7648:	2b03      	cmp	r3, #3
    764a:	d10e      	bne.n	766a <ticker_job+0x4f2>
				id_insert = user_op->id;
    764c:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    7650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7652:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    7656:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    765a:	7862      	ldrb	r2, [r4, #1]
    765c:	78a3      	ldrb	r3, [r4, #2]
    765e:	429a      	cmp	r2, r3
    7660:	d009      	beq.n	7676 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    7662:	2101      	movs	r1, #1
    7664:	4628      	mov	r0, r5
    7666:	f7ff fd26 	bl	70b6 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    766a:	9b06      	ldr	r3, [sp, #24]
    766c:	789b      	ldrb	r3, [r3, #2]
    766e:	454b      	cmp	r3, r9
    7670:	d1d9      	bne.n	7626 <ticker_job+0x4ae>
    7672:	9b03      	ldr	r3, [sp, #12]
    7674:	e5e6      	b.n	7244 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    7676:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    7678:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    767c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    767e:	692b      	ldr	r3, [r5, #16]
    7680:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    7682:	8aab      	ldrh	r3, [r5, #20]
    7684:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    7686:	69ab      	ldr	r3, [r5, #24]
    7688:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    768a:	69eb      	ldr	r3, [r5, #28]
    768c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    768e:	6a2b      	ldr	r3, [r5, #32]
    7690:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    7692:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    7694:	68ab      	ldr	r3, [r5, #8]
    7696:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    7698:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    769a:	686a      	ldr	r2, [r5, #4]
    769c:	4620      	mov	r0, r4
    769e:	f7ff fcec 	bl	707a <ticks_to_expire_prep>
	ticker->force = 1;
    76a2:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    76a4:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    76a6:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    76a8:	70e3      	strb	r3, [r4, #3]
    76aa:	e75b      	b.n	7564 <ticker_job+0x3ec>
    76ac:	ff172b5a 	.word	0xff172b5a
    76b0:	7f172b59 	.word	0x7f172b59
    76b4:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    76b8:	6860      	ldr	r0, [r4, #4]
    76ba:	2800      	cmp	r0, #0
    76bc:	d07b      	beq.n	77b6 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    76be:	6a62      	ldr	r2, [r4, #36]	; 0x24
    76c0:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    76c2:	4b92      	ldr	r3, [pc, #584]	; (790c <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    76c4:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    76c6:	4992      	ldr	r1, [pc, #584]	; (7910 <ticker_job+0x798>)
    76c8:	18d3      	adds	r3, r2, r3
    76ca:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    76cc:	bf9c      	itt	ls
    76ce:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    76d2:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76d6:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    76d8:	bf8b      	itete	hi
    76da:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    76dc:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    76e0:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    76e2:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76e4:	4403      	add	r3, r0
		return 1;
    76e6:	bf98      	it	ls
    76e8:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76ea:	4413      	add	r3, r2
			ticker->lazy_current++;
    76ec:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76ee:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    76f0:	3201      	adds	r2, #1
    76f2:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    76f4:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    76f6:	4293      	cmp	r3, r2
    76f8:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    76fc:	bf89      	itett	hi
    76fe:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    7700:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    7702:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    7704:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    7706:	bf9c      	itt	ls
    7708:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    770a:	60a1      	strls	r1, [r4, #8]
    770c:	e73d      	b.n	758a <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    770e:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    7710:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    7712:	b946      	cbnz	r6, 7726 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    7714:	9f07      	ldr	r7, [sp, #28]
    7716:	42b8      	cmp	r0, r7
    7718:	d200      	bcs.n	771c <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    771a:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    771c:	930b      	str	r3, [sp, #44]	; 0x2c
    771e:	9607      	str	r6, [sp, #28]
    7720:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    7724:	e740      	b.n	75a8 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    7726:	9308      	str	r3, [sp, #32]
    7728:	e7f8      	b.n	771c <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    772a:	b230      	sxth	r0, r6
    772c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7730:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    7734:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    7736:	68bf      	ldr	r7, [r7, #8]
    7738:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    773a:	4567      	cmp	r7, ip
    773c:	d20a      	bcs.n	7754 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    773e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7740:	69bf      	ldr	r7, [r7, #24]
    7742:	2f00      	cmp	r7, #0
    7744:	f47f af43 	bne.w	75ce <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    7748:	9e11      	ldr	r6, [sp, #68]	; 0x44
    774a:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    774e:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    7752:	e739      	b.n	75c8 <ticker_job+0x450>
			return TICKER_NULL;
    7754:	26ff      	movs	r6, #255	; 0xff
    7756:	e73a      	b.n	75ce <ticker_job+0x456>
	while (id_insert !=
    7758:	9b08      	ldr	r3, [sp, #32]
    775a:	4598      	cmp	r8, r3
    775c:	f43f af59 	beq.w	7612 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    7760:	9b08      	ldr	r3, [sp, #32]
    7762:	2bff      	cmp	r3, #255	; 0xff
    7764:	d0a8      	beq.n	76b8 <ticker_job+0x540>
    7766:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    7768:	b233      	sxth	r3, r6
    776a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    776e:	9307      	str	r3, [sp, #28]
    7770:	9a07      	ldr	r2, [sp, #28]
    7772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7774:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    7778:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    777a:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    777c:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    777e:	bf88      	it	hi
    7780:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    7782:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    7784:	bf8c      	ite	hi
    7786:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    7788:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    778a:	2a00      	cmp	r2, #0
    778c:	d094      	beq.n	76b8 <ticker_job+0x540>
    778e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7790:	4293      	cmp	r3, r2
    7792:	d891      	bhi.n	76b8 <ticker_job+0x540>
			    skip_collide <= skip &&
    7794:	78fa      	ldrb	r2, [r7, #3]
    7796:	78e3      	ldrb	r3, [r4, #3]
    7798:	429a      	cmp	r2, r3
    779a:	d28d      	bcs.n	76b8 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    779c:	4631      	mov	r1, r6
    779e:	4658      	mov	r0, fp
    77a0:	f7ff fc3f 	bl	7022 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    77a4:	78bb      	ldrb	r3, [r7, #2]
    77a6:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    77a8:	9a07      	ldr	r2, [sp, #28]
    77aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    77ac:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    77ae:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    77b2:	46b2      	mov	sl, r6
    77b4:	e6e9      	b.n	758a <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    77b6:	2101      	movs	r1, #1
    77b8:	e72f      	b.n	761a <ticker_job+0x4a2>
		user = &users[count_user];
    77ba:	9b03      	ldr	r3, [sp, #12]
    77bc:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    77c0:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    77c2:	786b      	ldrb	r3, [r5, #1]
    77c4:	78ea      	ldrb	r2, [r5, #3]
    77c6:	429a      	cmp	r2, r3
    77c8:	d102      	bne.n	77d0 <ticker_job+0x658>
    77ca:	3c01      	subs	r4, #1
    77cc:	b2e4      	uxtb	r4, r4
    77ce:	e551      	b.n	7274 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    77d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    77d4:	011b      	lsls	r3, r3, #4
    77d6:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    77d8:	5cf3      	ldrb	r3, [r6, r3]
    77da:	2b01      	cmp	r3, #1
    77dc:	d025      	beq.n	782a <ticker_job+0x6b2>
    77de:	2b02      	cmp	r3, #2
    77e0:	d12a      	bne.n	7838 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    77e2:	f8d2 c004 	ldr.w	ip, [r2, #4]
    77e6:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    77e8:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    77ec:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    77f0:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    77f4:	28ff      	cmp	r0, #255	; 0xff
    77f6:	d004      	beq.n	7802 <ticker_job+0x68a>
    77f8:	6819      	ldr	r1, [r3, #0]
    77fa:	f8db 7014 	ldr.w	r7, [fp, #20]
    77fe:	42b9      	cmp	r1, r7
    7800:	d023      	beq.n	784a <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    7802:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    7806:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    780a:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    780c:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    780e:	29ff      	cmp	r1, #255	; 0xff
    7810:	d007      	beq.n	7822 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    7812:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    7816:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    781a:	6987      	ldr	r7, [r0, #24]
    781c:	6880      	ldr	r0, [r0, #8]
    781e:	b1df      	cbz	r7, 7858 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    7820:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    7822:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7826:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    782a:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    782c:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    7830:	b113      	cbz	r3, 7838 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    7832:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7834:	2000      	movs	r0, #0
    7836:	4798      	blx	r3
			first = user->first + 1;
    7838:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    783a:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    783c:	3301      	adds	r3, #1
    783e:	b2db      	uxtb	r3, r3
				first = 0;
    7840:	429a      	cmp	r2, r3
    7842:	bf08      	it	eq
    7844:	2300      	moveq	r3, #0
			user->first = first;
    7846:	706b      	strb	r3, [r5, #1]
    7848:	e7bb      	b.n	77c2 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    784a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    784e:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    7852:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    7856:	e7da      	b.n	780e <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    7858:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    785a:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    785e:	e7d6      	b.n	780e <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    7860:	9b05      	ldr	r3, [sp, #20]
    7862:	2bff      	cmp	r3, #255	; 0xff
    7864:	d107      	bne.n	7876 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    7866:	f00a fabf 	bl	11de8 <cntr_cnt_get>
    786a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    786c:	f00a fa82 	bl	11d74 <cntr_start>
    7870:	b908      	cbnz	r0, 7876 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    7872:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    7876:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    787a:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    787e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    7882:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7886:	260a      	movs	r6, #10
    7888:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    788a:	f00a faad 	bl	11de8 <cntr_cnt_get>
		cc = instance->ticks_current;
    788e:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7892:	1b03      	subs	r3, r0, r4
    7894:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    7898:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    789a:	42ab      	cmp	r3, r5
    789c:	bf2c      	ite	cs
    789e:	18e4      	addcs	r4, r4, r3
    78a0:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    78a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    78a6:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    78a8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    78ac:	4620      	mov	r0, r4
    78ae:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    78b0:	f00a fa9a 	bl	11de8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    78b4:	1bc0      	subs	r0, r0, r7
    78b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    78ba:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    78bc:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    78be:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    78c2:	42a0      	cmp	r0, r4
    78c4:	f67f ace8 	bls.w	7298 <ticker_job+0x120>
		LL_ASSERT(i);
    78c8:	3e01      	subs	r6, #1
    78ca:	d1de      	bne.n	788a <ticker_job+0x712>
    78cc:	4a11      	ldr	r2, [pc, #68]	; (7914 <ticker_job+0x79c>)
    78ce:	4b12      	ldr	r3, [pc, #72]	; (7918 <ticker_job+0x7a0>)
    78d0:	9201      	str	r2, [sp, #4]
    78d2:	9200      	str	r2, [sp, #0]
    78d4:	681c      	ldr	r4, [r3, #0]
    78d6:	4911      	ldr	r1, [pc, #68]	; (791c <ticker_job+0x7a4>)
    78d8:	4b11      	ldr	r3, [pc, #68]	; (7920 <ticker_job+0x7a8>)
    78da:	4812      	ldr	r0, [pc, #72]	; (7924 <ticker_job+0x7ac>)
    78dc:	47a0      	blx	r4
    78de:	4040      	eors	r0, r0
    78e0:	f380 8811 	msr	BASEPRI, r0
    78e4:	f04f 0004 	mov.w	r0, #4
    78e8:	df02      	svc	2
	instance->job_guard = 0;
    78ea:	2300      	movs	r3, #0
    78ec:	f88b 301e 	strb.w	r3, [fp, #30]
    78f0:	e4c8      	b.n	7284 <ticker_job+0x10c>
	if (!pending) {
    78f2:	2b00      	cmp	r3, #0
    78f4:	d1f9      	bne.n	78ea <ticker_job+0x772>
		flag_compare_update = 1;
    78f6:	2301      	movs	r3, #1
    78f8:	9304      	str	r3, [sp, #16]
    78fa:	e4b2      	b.n	7262 <ticker_job+0xea>
	while (id_insert !=
    78fc:	45b0      	cmp	r8, r6
    78fe:	f47f af33 	bne.w	7768 <ticker_job+0x5f0>
    7902:	e686      	b.n	7612 <ticker_job+0x49a>
}
    7904:	b015      	add	sp, #84	; 0x54
    7906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    790a:	bf00      	nop
    790c:	ff172b5a 	.word	0xff172b5a
    7910:	7f172b59 	.word	0x7f172b59
    7914:	00014891 	.word	0x00014891
    7918:	20003aa4 	.word	0x20003aa4
    791c:	00015639 	.word	0x00015639
    7920:	000165e5 	.word	0x000165e5
    7924:	000165ff 	.word	0x000165ff

00007928 <ticker_init>:
{
    7928:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    792a:	4d1a      	ldr	r5, [pc, #104]	; (7994 <ticker_init+0x6c>)
{
    792c:	9f05      	ldr	r7, [sp, #20]
    792e:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    7932:	262c      	movs	r6, #44	; 0x2c
    7934:	4346      	muls	r6, r0
    7936:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    793a:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    793c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    7940:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    7942:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7946:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    794a:	3b01      	subs	r3, #1
    794c:	b2db      	uxtb	r3, r3
    794e:	2bff      	cmp	r3, #255	; 0xff
    7950:	d111      	bne.n	7976 <ticker_init+0x4e>
	if (count_op) {
    7952:	b9ec      	cbnz	r4, 7990 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7954:	222c      	movs	r2, #44	; 0x2c
    7956:	fb02 5200 	mla	r2, r2, r0, r5
    795a:	9908      	ldr	r1, [sp, #32]
    795c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    795e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7960:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7962:	990a      	ldr	r1, [sp, #40]	; 0x28
    7964:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7966:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7968:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    796a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    796c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    796e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    7970:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    7972:	4620      	mov	r0, r4
    7974:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    7976:	b21a      	sxth	r2, r3
    7978:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    797c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    797e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    7982:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    7986:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7988:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    798c:	b2e4      	uxtb	r4, r4
    798e:	e7dc      	b.n	794a <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7990:	2001      	movs	r0, #1
}
    7992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7994:	200007f4 	.word	0x200007f4

00007998 <ticker_trigger>:
	instance = &_instance[instance_index];
    7998:	4a07      	ldr	r2, [pc, #28]	; (79b8 <ticker_trigger+0x20>)
    799a:	212c      	movs	r1, #44	; 0x2c
    799c:	fb00 2301 	mla	r3, r0, r1, r2
{
    79a0:	b410      	push	{r4}
	if (instance->sched_cb) {
    79a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    79a4:	b12c      	cbz	r4, 79b2 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    79a6:	46a4      	mov	ip, r4
    79a8:	2201      	movs	r2, #1
    79aa:	2103      	movs	r1, #3
    79ac:	2002      	movs	r0, #2
}
    79ae:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    79b0:	4760      	bx	ip
}
    79b2:	bc10      	pop	{r4}
    79b4:	4770      	bx	lr
    79b6:	bf00      	nop
    79b8:	200007f4 	.word	0x200007f4

000079bc <ticker_start>:
{
    79bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    79c0:	4f25      	ldr	r7, [pc, #148]	; (7a58 <ticker_start+0x9c>)
    79c2:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    79c6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    79c8:	fb08 7000 	mla	r0, r8, r0, r7
    79cc:	fa0f fc81 	sxth.w	ip, r1
    79d0:	f8d0 e004 	ldr.w	lr, [r0, #4]
    79d4:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    79d8:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    79dc:	78f4      	ldrb	r4, [r6, #3]
    79de:	1c65      	adds	r5, r4, #1
    79e0:	b2ed      	uxtb	r5, r5
		last = 0;
    79e2:	45ae      	cmp	lr, r5
    79e4:	bf98      	it	ls
    79e6:	2500      	movls	r5, #0
	if (last == user->first) {
    79e8:	f896 e001 	ldrb.w	lr, [r6, #1]
    79ec:	45ae      	cmp	lr, r5
    79ee:	d02f      	beq.n	7a50 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    79f0:	f8d6 c004 	ldr.w	ip, [r6, #4]
    79f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    79f8:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    79fc:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    7a00:	f04f 0a03 	mov.w	sl, #3
    7a04:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7a08:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7a0a:	9b08      	ldr	r3, [sp, #32]
    7a0c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a10:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7a14:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a18:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    7a1a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7a1e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a22:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7a26:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7a28:	2302      	movs	r3, #2
    7a2a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7a2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7a2e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    7a32:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7a34:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7a36:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7a38:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7a3a:	6a03      	ldr	r3, [r0, #32]
    7a3c:	4608      	mov	r0, r1
    7a3e:	4798      	blx	r3
    7a40:	fb09 7308 	mla	r3, r9, r8, r7
    7a44:	2200      	movs	r2, #0
    7a46:	2104      	movs	r1, #4
    7a48:	47a8      	blx	r5
	return user_op->status;
    7a4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7a50:	2001      	movs	r0, #1
}
    7a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a56:	bf00      	nop
    7a58:	200007f4 	.word	0x200007f4

00007a5c <ticker_update>:
{
    7a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7a60:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7af4 <ticker_update+0x98>
    7a64:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7a68:	fb0a 8e00 	mla	lr, sl, r0, r8
    7a6c:	b20f      	sxth	r7, r1
    7a6e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    7a72:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7a74:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    7a78:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    7a7c:	78c4      	ldrb	r4, [r0, #3]
    7a7e:	1c66      	adds	r6, r4, #1
    7a80:	b2f6      	uxtb	r6, r6
		last = 0;
    7a82:	42b5      	cmp	r5, r6
    7a84:	bf98      	it	ls
    7a86:	2600      	movls	r6, #0
	if (last == user->first) {
    7a88:	7845      	ldrb	r5, [r0, #1]
    7a8a:	42b5      	cmp	r5, r6
    7a8c:	d02f      	beq.n	7aee <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    7a8e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7a92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7a96:	0125      	lsls	r5, r4, #4
    7a98:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7a9c:	2704      	movs	r7, #4
    7a9e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7aa2:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7aa4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7aa8:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7aaa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7aae:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7ab0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7ab4:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    7ab6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7aba:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    7abc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    7ac0:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    7ac2:	2302      	movs	r3, #2
    7ac4:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7ac8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7acc:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7ace:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7ad0:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7ad2:	f8de 3020 	ldr.w	r3, [lr, #32]
    7ad6:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7ada:	4608      	mov	r0, r1
    7adc:	4798      	blx	r3
    7ade:	fb09 830a 	mla	r3, r9, sl, r8
    7ae2:	2200      	movs	r2, #0
    7ae4:	4639      	mov	r1, r7
    7ae6:	47a8      	blx	r5
	return user_op->status;
    7ae8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7aee:	2001      	movs	r0, #1
}
    7af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7af4:	200007f4 	.word	0x200007f4

00007af8 <ticker_stop>:
{
    7af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7afc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7b6c <ticker_stop+0x74>
    7b00:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7b04:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7b08:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7b0a:	f8de 0004 	ldr.w	r0, [lr, #4]
    7b0e:	b20e      	sxth	r6, r1
    7b10:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7b14:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7b18:	78fc      	ldrb	r4, [r7, #3]
    7b1a:	1c65      	adds	r5, r4, #1
    7b1c:	b2ed      	uxtb	r5, r5
		last = 0;
    7b1e:	42a8      	cmp	r0, r5
    7b20:	bf98      	it	ls
    7b22:	2500      	movls	r5, #0
	if (last == user->first) {
    7b24:	7878      	ldrb	r0, [r7, #1]
    7b26:	42a8      	cmp	r0, r5
    7b28:	d01d      	beq.n	7b66 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    7b2a:	6878      	ldr	r0, [r7, #4]
    7b2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7b30:	0124      	lsls	r4, r4, #4
    7b32:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7b34:	f04f 0c05 	mov.w	ip, #5
    7b38:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    7b3c:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    7b3e:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    7b40:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    7b42:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7b44:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    7b46:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7b48:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7b4a:	f8de 3020 	ldr.w	r3, [lr, #32]
    7b4e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7b52:	4608      	mov	r0, r1
    7b54:	4798      	blx	r3
    7b56:	fb08 930a 	mla	r3, r8, sl, r9
    7b5a:	2200      	movs	r2, #0
    7b5c:	2104      	movs	r1, #4
    7b5e:	47a0      	blx	r4
	return user_op->status;
    7b60:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7b66:	2001      	movs	r0, #1
}
    7b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b6c:	200007f4 	.word	0x200007f4

00007b70 <ticker_next_slot_get>:
{
    7b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7b74:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7bf0 <ticker_next_slot_get+0x80>
    7b78:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    7b7c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7b7e:	fb0a 8000 	mla	r0, sl, r0, r8
    7b82:	fa0f fe81 	sxth.w	lr, r1
    7b86:	6845      	ldr	r5, [r0, #4]
    7b88:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    7b8c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    7b90:	78fc      	ldrb	r4, [r7, #3]
    7b92:	1c66      	adds	r6, r4, #1
    7b94:	b2f6      	uxtb	r6, r6
		last = 0;
    7b96:	42b5      	cmp	r5, r6
    7b98:	bf98      	it	ls
    7b9a:	2600      	movls	r6, #0
	if (last == user->first) {
    7b9c:	787d      	ldrb	r5, [r7, #1]
    7b9e:	42b5      	cmp	r5, r6
    7ba0:	d023      	beq.n	7bea <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    7ba2:	f8d7 c004 	ldr.w	ip, [r7, #4]
    7ba6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7baa:	0125      	lsls	r5, r4, #4
    7bac:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7bb0:	f04f 0e02 	mov.w	lr, #2
    7bb4:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    7bb8:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7bba:	9b08      	ldr	r3, [sp, #32]
    7bbc:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    7bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bc0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    7bc2:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    7bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    7bc6:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    7bc8:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7bca:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7bce:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7bd0:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7bd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7bd4:	6a03      	ldr	r3, [r0, #32]
    7bd6:	4608      	mov	r0, r1
    7bd8:	4798      	blx	r3
    7bda:	fb09 830a 	mla	r3, r9, sl, r8
    7bde:	2200      	movs	r2, #0
    7be0:	2104      	movs	r1, #4
    7be2:	47a8      	blx	r5
	return user_op->status;
    7be4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7bea:	2001      	movs	r0, #1
}
    7bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bf0:	200007f4 	.word	0x200007f4

00007bf4 <ticker_job_idle_get>:
{
    7bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7bf8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7c68 <ticker_job_idle_get+0x74>
    7bfc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7c00:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7c04:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7c06:	f8de 0004 	ldr.w	r0, [lr, #4]
    7c0a:	b20e      	sxth	r6, r1
    7c0c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7c10:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7c14:	78fc      	ldrb	r4, [r7, #3]
    7c16:	1c65      	adds	r5, r4, #1
    7c18:	b2ed      	uxtb	r5, r5
		last = 0;
    7c1a:	42a8      	cmp	r0, r5
    7c1c:	bf98      	it	ls
    7c1e:	2500      	movls	r5, #0
	if (last == user->first) {
    7c20:	7878      	ldrb	r0, [r7, #1]
    7c22:	42a8      	cmp	r0, r5
    7c24:	d01d      	beq.n	7c62 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    7c26:	6878      	ldr	r0, [r7, #4]
    7c28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7c2c:	0124      	lsls	r4, r4, #4
    7c2e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    7c30:	f04f 0c01 	mov.w	ip, #1
    7c34:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    7c38:	20ff      	movs	r0, #255	; 0xff
    7c3a:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7c3c:	2002      	movs	r0, #2
    7c3e:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7c40:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    7c42:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7c44:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c46:	f8de 3020 	ldr.w	r3, [lr, #32]
    7c4a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7c4e:	4608      	mov	r0, r1
    7c50:	4798      	blx	r3
    7c52:	fb08 930a 	mla	r3, r8, sl, r9
    7c56:	2200      	movs	r2, #0
    7c58:	2104      	movs	r1, #4
    7c5a:	47a0      	blx	r4
	return user_op->status;
    7c5c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7c62:	2001      	movs	r0, #1
}
    7c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c68:	200007f4 	.word	0x200007f4

00007c6c <ticker_job_sched>:
{
    7c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c70:	4c08      	ldr	r4, [pc, #32]	; (7c94 <ticker_job_sched+0x28>)
    7c72:	252c      	movs	r5, #44	; 0x2c
    7c74:	fb05 4300 	mla	r3, r5, r0, r4
{
    7c78:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c7a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    7c7c:	6a1b      	ldr	r3, [r3, #32]
    7c7e:	4608      	mov	r0, r1
    7c80:	4798      	blx	r3
    7c82:	fb06 4305 	mla	r3, r6, r5, r4
    7c86:	46bc      	mov	ip, r7
    7c88:	2200      	movs	r2, #0
    7c8a:	2104      	movs	r1, #4
}
    7c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c90:	4760      	bx	ip
    7c92:	bf00      	nop
    7c94:	200007f4 	.word	0x200007f4

00007c98 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    7c98:	f00a b8a6 	b.w	11de8 <cntr_cnt_get>

00007c9c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7c9c:	1a40      	subs	r0, r0, r1
}
    7c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7ca2:	4770      	bx	lr

00007ca4 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    7ca4:	b508      	push	{r3, lr}
    7ca6:	4603      	mov	r3, r0
	if (addr_type > 1) {
    7ca8:	2b01      	cmp	r3, #1
{
    7caa:	4608      	mov	r0, r1
	if (addr_type > 1) {
    7cac:	d80e      	bhi.n	7ccc <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    7cae:	b133      	cbz	r3, 7cbe <ll_addr_get+0x1a>
		if (bdaddr) {
    7cb0:	b119      	cbz	r1, 7cba <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    7cb2:	2206      	movs	r2, #6
    7cb4:	4906      	ldr	r1, [pc, #24]	; (7cd0 <ll_addr_get+0x2c>)
    7cb6:	f7f9 ffb3 	bl	1c20 <memcpy>
		}

		return rnd_addr;
    7cba:	4805      	ldr	r0, [pc, #20]	; (7cd0 <ll_addr_get+0x2c>)
    7cbc:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    7cbe:	b119      	cbz	r1, 7cc8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    7cc0:	2206      	movs	r2, #6
    7cc2:	4904      	ldr	r1, [pc, #16]	; (7cd4 <ll_addr_get+0x30>)
    7cc4:	f7f9 ffac 	bl	1c20 <memcpy>
	}

	return pub_addr;
    7cc8:	4802      	ldr	r0, [pc, #8]	; (7cd4 <ll_addr_get+0x30>)
}
    7cca:	bd08      	pop	{r3, pc}
		return NULL;
    7ccc:	2000      	movs	r0, #0
    7cce:	bd08      	pop	{r3, pc}
    7cd0:	20000852 	.word	0x20000852
    7cd4:	2000084c 	.word	0x2000084c

00007cd8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    7cd8:	b570      	push	{r4, r5, r6, lr}
    7cda:	4606      	mov	r6, r0
    7cdc:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    7cde:	f008 f919 	bl	ff14 <ll_adv_is_enabled>
    7ce2:	4604      	mov	r4, r0
    7ce4:	b110      	cbz	r0, 7cec <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    7ce6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    7ce8:	4620      	mov	r0, r4
    7cea:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    7cec:	f008 f926 	bl	ff3c <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    7cf0:	f010 0f06 	tst.w	r0, #6
    7cf4:	d1f7      	bne.n	7ce6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7cf6:	2206      	movs	r2, #6
    7cf8:	4629      	mov	r1, r5
	if (addr_type) {
    7cfa:	b11e      	cbz	r6, 7d04 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7cfc:	4802      	ldr	r0, [pc, #8]	; (7d08 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7cfe:	f7f9 ff8f 	bl	1c20 <memcpy>
    7d02:	e7f1      	b.n	7ce8 <ll_addr_set+0x10>
    7d04:	4801      	ldr	r0, [pc, #4]	; (7d0c <ll_addr_set+0x34>)
    7d06:	e7fa      	b.n	7cfe <ll_addr_set+0x26>
    7d08:	20000852 	.word	0x20000852
    7d0c:	2000084c 	.word	0x2000084c

00007d10 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    7d10:	2300      	movs	r3, #0
    7d12:	7003      	strb	r3, [r0, #0]
	*max = 0;
    7d14:	700b      	strb	r3, [r1, #0]
    7d16:	4770      	bx	lr

00007d18 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    7d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d1a:	4607      	mov	r7, r0
    7d1c:	460e      	mov	r6, r1
	while (len) {
    7d1e:	460c      	mov	r4, r1
    7d20:	1b35      	subs	r5, r6, r4
    7d22:	443d      	add	r5, r7
    7d24:	b18c      	cbz	r4, 7d4a <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    7d26:	f7f9 f95f 	bl	fe8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    7d2a:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    7d2c:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    7d2e:	d907      	bls.n	7d40 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    7d30:	2204      	movs	r2, #4
    7d32:	eb0d 0102 	add.w	r1, sp, r2
    7d36:	4628      	mov	r0, r5
    7d38:	f7f9 ff72 	bl	1c20 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    7d3c:	3c04      	subs	r4, #4
    7d3e:	e7ef      	b.n	7d20 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    7d40:	4622      	mov	r2, r4
    7d42:	a901      	add	r1, sp, #4
    7d44:	4628      	mov	r0, r5
    7d46:	f7f9 ff6b 	bl	1c20 <memcpy>
			break;
		}
	}

	return 0;
}
    7d4a:	2000      	movs	r0, #0
    7d4c:	b003      	add	sp, #12
    7d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007d50 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    7d50:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    7d52:	2300      	movs	r3, #0
    7d54:	f00a f87c 	bl	11e50 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    7d58:	2000      	movs	r0, #0
    7d5a:	bd08      	pop	{r3, pc}

00007d5c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    7d5c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    7d5e:	4802      	ldr	r0, [pc, #8]	; (7d68 <_hci_driver_init+0xc>)
    7d60:	f7fb fe04 	bl	396c <bt_hci_driver_register>

	return 0;
}
    7d64:	2000      	movs	r0, #0
    7d66:	bd08      	pop	{r3, pc}
    7d68:	00016650 	.word	0x00016650

00007d6c <recv_thread>:
{
    7d6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    7d6e:	4d28      	ldr	r5, [pc, #160]	; (7e10 <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7d70:	2600      	movs	r6, #0
    7d72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7d76:	4628      	mov	r0, r5
    7d78:	f00b fce2 	bl	13740 <_impl_k_queue_get>
		if (node_rx && !buf) {
    7d7c:	4604      	mov	r4, r0
    7d7e:	2800      	cmp	r0, #0
    7d80:	d036      	beq.n	7df0 <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    7d82:	f001 fd13 	bl	97ac <hci_get_class>
	switch (class) {
    7d86:	1e03      	subs	r3, r0, #0
    7d88:	9403      	str	r4, [sp, #12]
    7d8a:	db03      	blt.n	7d94 <recv_thread+0x28>
    7d8c:	2b02      	cmp	r3, #2
    7d8e:	dd10      	ble.n	7db2 <recv_thread+0x46>
    7d90:	2b03      	cmp	r3, #3
    7d92:	d030      	beq.n	7df6 <recv_thread+0x8a>
		LL_ASSERT(0);
    7d94:	4a1f      	ldr	r2, [pc, #124]	; (7e14 <recv_thread+0xa8>)
    7d96:	4b20      	ldr	r3, [pc, #128]	; (7e18 <recv_thread+0xac>)
    7d98:	9201      	str	r2, [sp, #4]
    7d9a:	9200      	str	r2, [sp, #0]
    7d9c:	681c      	ldr	r4, [r3, #0]
    7d9e:	491f      	ldr	r1, [pc, #124]	; (7e1c <recv_thread+0xb0>)
    7da0:	4b1f      	ldr	r3, [pc, #124]	; (7e20 <recv_thread+0xb4>)
    7da2:	4820      	ldr	r0, [pc, #128]	; (7e24 <recv_thread+0xb8>)
    7da4:	47a0      	blx	r4
    7da6:	4040      	eors	r0, r0
    7da8:	f380 8811 	msr	BASEPRI, r0
    7dac:	f04f 0004 	mov.w	r0, #4
    7db0:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    7db2:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    7db4:	bf0e      	itee	eq
    7db6:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7db8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7dbc:	2001      	movne	r0, #1
    7dbe:	f7fb fec1 	bl	3b44 <bt_buf_get_rx>
    7dc2:	4604      	mov	r4, r0
		if (buf) {
    7dc4:	b118      	cbz	r0, 7dce <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    7dc6:	4601      	mov	r1, r0
    7dc8:	9803      	ldr	r0, [sp, #12]
    7dca:	f001 f93b 	bl	9044 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7dce:	9b03      	ldr	r3, [sp, #12]
    7dd0:	2100      	movs	r1, #0
    7dd2:	88d8      	ldrh	r0, [r3, #6]
    7dd4:	f008 fd1e 	bl	10814 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    7dd8:	a804      	add	r0, sp, #16
    7dda:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    7dde:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    7de0:	f008 fca2 	bl	10728 <ll_rx_mem_release>
		if (buf) {
    7de4:	b124      	cbz	r4, 7df0 <recv_thread+0x84>
			if (buf->len) {
    7de6:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    7de8:	4620      	mov	r0, r4
			if (buf->len) {
    7dea:	b173      	cbz	r3, 7e0a <recv_thread+0x9e>
				bt_recv(buf);
    7dec:	f7fb f942 	bl	3074 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7df0:	f00b ff0c 	bl	13c0c <_impl_k_yield>
    7df4:	e7bd      	b.n	7d72 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    7df6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7dfa:	f7fb fea3 	bl	3b44 <bt_buf_get_rx>
    7dfe:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    7e00:	4601      	mov	r1, r0
    7e02:	9803      	ldr	r0, [sp, #12]
    7e04:	f001 f8de 	bl	8fc4 <hci_acl_encode>
    7e08:	e7e1      	b.n	7dce <recv_thread+0x62>
				net_buf_unref(buf);
    7e0a:	f00a fe65 	bl	12ad8 <net_buf_unref>
    7e0e:	e7ef      	b.n	7df0 <recv_thread+0x84>
    7e10:	20003f94 	.word	0x20003f94
    7e14:	00014891 	.word	0x00014891
    7e18:	20003aa4 	.word	0x20003aa4
    7e1c:	00015639 	.word	0x00015639
    7e20:	00016622 	.word	0x00016622
    7e24:	00015597 	.word	0x00015597

00007e28 <hci_driver_send>:
{
    7e28:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    7e2a:	8983      	ldrh	r3, [r0, #12]
{
    7e2c:	b087      	sub	sp, #28
    7e2e:	4605      	mov	r5, r0
	if (!buf->len) {
    7e30:	b96b      	cbnz	r3, 7e4e <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    7e32:	4a20      	ldr	r2, [pc, #128]	; (7eb4 <hci_driver_send+0x8c>)
    7e34:	4b20      	ldr	r3, [pc, #128]	; (7eb8 <hci_driver_send+0x90>)
    7e36:	9201      	str	r2, [sp, #4]
    7e38:	9200      	str	r2, [sp, #0]
    7e3a:	681c      	ldr	r4, [r3, #0]
    7e3c:	491f      	ldr	r1, [pc, #124]	; (7ebc <hci_driver_send+0x94>)
    7e3e:	4b20      	ldr	r3, [pc, #128]	; (7ec0 <hci_driver_send+0x98>)
    7e40:	4820      	ldr	r0, [pc, #128]	; (7ec4 <hci_driver_send+0x9c>)
    7e42:	47a0      	blx	r4
		return -EINVAL;
    7e44:	f06f 0415 	mvn.w	r4, #21
}
    7e48:	4620      	mov	r0, r4
    7e4a:	b007      	add	sp, #28
    7e4c:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7e4e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    7e50:	b183      	cbz	r3, 7e74 <hci_driver_send+0x4c>
    7e52:	2b02      	cmp	r3, #2
    7e54:	d11f      	bne.n	7e96 <hci_driver_send+0x6e>
	err = hci_acl_handle(buf, &evt);
    7e56:	a905      	add	r1, sp, #20
    7e58:	f001 f822 	bl	8ea0 <hci_acl_handle>
    7e5c:	4604      	mov	r4, r0
	if (evt) {
    7e5e:	9805      	ldr	r0, [sp, #20]
    7e60:	b108      	cbz	r0, 7e66 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    7e62:	f7fb fc91 	bl	3788 <bt_recv_prio>
	if (!err) {
    7e66:	2c00      	cmp	r4, #0
    7e68:	d1ee      	bne.n	7e48 <hci_driver_send+0x20>
		net_buf_unref(buf);
    7e6a:	4628      	mov	r0, r5
    7e6c:	f00a fe34 	bl	12ad8 <net_buf_unref>
    7e70:	2400      	movs	r4, #0
    7e72:	e7e9      	b.n	7e48 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    7e74:	f000 faac 	bl	83d0 <hci_cmd_handle>
	if (evt) {
    7e78:	4602      	mov	r2, r0
    7e7a:	2800      	cmp	r0, #0
    7e7c:	d0f5      	beq.n	7e6a <hci_driver_send+0x42>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    7e7e:	6883      	ldr	r3, [r0, #8]
    7e80:	7819      	ldrb	r1, [r3, #0]
    7e82:	2913      	cmp	r1, #19
    7e84:	d812      	bhi.n	7eac <hci_driver_send+0x84>
    7e86:	2301      	movs	r3, #1
    7e88:	408b      	lsls	r3, r1
    7e8a:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    7e8e:	d00d      	beq.n	7eac <hci_driver_send+0x84>
			bt_recv_prio(evt);
    7e90:	f7fb fc7a 	bl	3788 <bt_recv_prio>
    7e94:	e7e9      	b.n	7e6a <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    7e96:	4a07      	ldr	r2, [pc, #28]	; (7eb4 <hci_driver_send+0x8c>)
    7e98:	9202      	str	r2, [sp, #8]
    7e9a:	e88d 000c 	stmia.w	sp, {r2, r3}
    7e9e:	4b06      	ldr	r3, [pc, #24]	; (7eb8 <hci_driver_send+0x90>)
    7ea0:	4906      	ldr	r1, [pc, #24]	; (7ebc <hci_driver_send+0x94>)
    7ea2:	681c      	ldr	r4, [r3, #0]
    7ea4:	4808      	ldr	r0, [pc, #32]	; (7ec8 <hci_driver_send+0xa0>)
    7ea6:	4b06      	ldr	r3, [pc, #24]	; (7ec0 <hci_driver_send+0x98>)
    7ea8:	47a0      	blx	r4
    7eaa:	e7cb      	b.n	7e44 <hci_driver_send+0x1c>
			bt_recv(evt);
    7eac:	4610      	mov	r0, r2
    7eae:	f7fb f8e1 	bl	3074 <bt_recv>
    7eb2:	e7da      	b.n	7e6a <hci_driver_send+0x42>
    7eb4:	00014891 	.word	0x00014891
    7eb8:	20003aa4 	.word	0x20003aa4
    7ebc:	00015639 	.word	0x00015639
    7ec0:	0001662e 	.word	0x0001662e
    7ec4:	00016691 	.word	0x00016691
    7ec8:	000166b2 	.word	0x000166b2

00007ecc <prio_recv_thread>:
{
    7ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7ece:	4d14      	ldr	r5, [pc, #80]	; (7f20 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    7ed0:	4e14      	ldr	r6, [pc, #80]	; (7f24 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    7ed2:	f10d 0102 	add.w	r1, sp, #2
    7ed6:	a801      	add	r0, sp, #4
    7ed8:	f008 fbee 	bl	106b8 <ll_rx_get>
    7edc:	4604      	mov	r4, r0
    7ede:	b940      	cbnz	r0, 7ef2 <prio_recv_thread+0x26>
		if (node_rx) {
    7ee0:	9b01      	ldr	r3, [sp, #4]
    7ee2:	b1bb      	cbz	r3, 7f14 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    7ee4:	f008 feca 	bl	10c7c <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    7ee8:	9901      	ldr	r1, [sp, #4]
    7eea:	4630      	mov	r0, r6
    7eec:	f00b fc04 	bl	136f8 <k_queue_append>
    7ef0:	e7ef      	b.n	7ed2 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7ef6:	2001      	movs	r0, #1
    7ef8:	f7fb fe24 	bl	3b44 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7efc:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7efe:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7f00:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7f04:	f001 fc3e 	bl	9784 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    7f08:	4638      	mov	r0, r7
    7f0a:	f7fb fc3d 	bl	3788 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7f0e:	f00b fe7d 	bl	13c0c <_impl_k_yield>
    7f12:	e7de      	b.n	7ed2 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7f18:	4628      	mov	r0, r5
    7f1a:	f00b ff03 	bl	13d24 <_impl_k_sem_take>
    7f1e:	e7d8      	b.n	7ed2 <prio_recv_thread+0x6>
    7f20:	20003f78 	.word	0x20003f78
    7f24:	20003f94 	.word	0x20003f94

00007f28 <hci_driver_open>:
{
    7f28:	b530      	push	{r4, r5, lr}
	err = ll_init(&sem_prio_recv);
    7f2a:	481a      	ldr	r0, [pc, #104]	; (7f94 <hci_driver_open+0x6c>)
{
    7f2c:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    7f2e:	f008 ff87 	bl	10e40 <ll_init>
	if (err) {
    7f32:	4604      	mov	r4, r0
    7f34:	b160      	cbz	r0, 7f50 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    7f36:	4a18      	ldr	r2, [pc, #96]	; (7f98 <hci_driver_open+0x70>)
    7f38:	4b18      	ldr	r3, [pc, #96]	; (7f9c <hci_driver_open+0x74>)
    7f3a:	9202      	str	r2, [sp, #8]
    7f3c:	e88d 0014 	stmia.w	sp, {r2, r4}
    7f40:	4917      	ldr	r1, [pc, #92]	; (7fa0 <hci_driver_open+0x78>)
    7f42:	681d      	ldr	r5, [r3, #0]
    7f44:	4817      	ldr	r0, [pc, #92]	; (7fa4 <hci_driver_open+0x7c>)
    7f46:	4b18      	ldr	r3, [pc, #96]	; (7fa8 <hci_driver_open+0x80>)
    7f48:	47a8      	blx	r5
}
    7f4a:	4620      	mov	r0, r4
    7f4c:	b007      	add	sp, #28
    7f4e:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    7f50:	f001 fc44 	bl	97dc <hci_init>

    7f54:	f06f 0309 	mvn.w	r3, #9
    7f58:	9303      	str	r3, [sp, #12]
    7f5a:	9405      	str	r4, [sp, #20]
    7f5c:	9404      	str	r4, [sp, #16]
    7f5e:	9402      	str	r4, [sp, #8]
    7f60:	9401      	str	r4, [sp, #4]
    7f62:	9400      	str	r4, [sp, #0]
    7f64:	4b11      	ldr	r3, [pc, #68]	; (7fac <hci_driver_open+0x84>)
    7f66:	4912      	ldr	r1, [pc, #72]	; (7fb0 <hci_driver_open+0x88>)
    7f68:	4812      	ldr	r0, [pc, #72]	; (7fb4 <hci_driver_open+0x8c>)
    7f6a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    7f6e:	f00c f8c3 	bl	140f8 <_impl_k_thread_create>
    7f72:	f06f 0307 	mvn.w	r3, #7
    7f76:	9303      	str	r3, [sp, #12]
    7f78:	9405      	str	r4, [sp, #20]
    7f7a:	9404      	str	r4, [sp, #16]
    7f7c:	9402      	str	r4, [sp, #8]
    7f7e:	9401      	str	r4, [sp, #4]
    7f80:	9400      	str	r4, [sp, #0]
    7f82:	4b0d      	ldr	r3, [pc, #52]	; (7fb8 <hci_driver_open+0x90>)
    7f84:	490d      	ldr	r1, [pc, #52]	; (7fbc <hci_driver_open+0x94>)
    7f86:	480e      	ldr	r0, [pc, #56]	; (7fc0 <hci_driver_open+0x98>)
    7f88:	f240 522c 	movw	r2, #1324	; 0x52c
    7f8c:	f00c f8b4 	bl	140f8 <_impl_k_thread_create>
    7f90:	e7db      	b.n	7f4a <hci_driver_open+0x22>
    7f92:	bf00      	nop
    7f94:	20003f78 	.word	0x20003f78
    7f98:	00014891 	.word	0x00014891
    7f9c:	20003aa4 	.word	0x20003aa4
    7fa0:	00015639 	.word	0x00015639
    7fa4:	00016664 	.word	0x00016664
    7fa8:	0001663e 	.word	0x0001663e
    7fac:	00007ecd 	.word	0x00007ecd
    7fb0:	20002108 	.word	0x20002108
    7fb4:	200018d8 	.word	0x200018d8
    7fb8:	00007d6d 	.word	0x00007d6d
    7fbc:	200023f8 	.word	0x200023f8
    7fc0:	20001868 	.word	0x20001868

00007fc4 <sys_put_le32>:
	dst[1] = val >> 8;
    7fc4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    7fc8:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    7fca:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    7fcc:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    7fce:	0a00      	lsrs	r0, r0, #8
    7fd0:	704b      	strb	r3, [r1, #1]
    7fd2:	70c8      	strb	r0, [r1, #3]
    7fd4:	4770      	bx	lr

00007fd6 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    7fd6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    7fd8:	3008      	adds	r0, #8
{
    7fda:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    7fdc:	2102      	movs	r1, #2
{
    7fde:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    7fe0:	f00a fdb2 	bl	12b48 <net_buf_simple_add>
	hdr->evt = evt;
    7fe4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    7fe6:	7044      	strb	r4, [r0, #1]
    7fe8:	bd38      	pop	{r3, r4, r5, pc}
	...

00007fec <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    7fec:	b538      	push	{r3, r4, r5, lr}
    7fee:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ff4:	f7fb fdb6 	bl	3b64 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7ff8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7ffa:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7ffc:	210f      	movs	r1, #15
    7ffe:	f7ff ffea 	bl	7fd6 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8002:	2104      	movs	r1, #4
    8004:	f104 0008 	add.w	r0, r4, #8
    8008:	f00a fd9e 	bl	12b48 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    800c:	2301      	movs	r3, #1
    800e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8010:	4b02      	ldr	r3, [pc, #8]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
	cs->status = status;
    8012:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8014:	881b      	ldrh	r3, [r3, #0]
    8016:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8018:	4620      	mov	r0, r4
    801a:	bd38      	pop	{r3, r4, r5, pc}
    801c:	20000858 	.word	0x20000858

00008020 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8020:	b570      	push	{r4, r5, r6, lr}
    8022:	4604      	mov	r4, r0
    8024:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8026:	3201      	adds	r2, #1
{
    8028:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    802a:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    802c:	b2d2      	uxtb	r2, r2
    802e:	213e      	movs	r1, #62	; 0x3e
    8030:	f7ff ffd1 	bl	7fd6 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8034:	2101      	movs	r1, #1
    8036:	4620      	mov	r0, r4
    8038:	f00a fd86 	bl	12b48 <net_buf_simple_add>
	me->subevent = subevt;
    803c:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    803e:	4629      	mov	r1, r5
    8040:	4620      	mov	r0, r4
}
    8042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8046:	f00a bd7f 	b.w	12b48 <net_buf_simple_add>
	...

0000804c <cmd_complete>:
{
    804c:	b538      	push	{r3, r4, r5, lr}
    804e:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8054:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8056:	f7fb fd85 	bl	3b64 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    805a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    805c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    805e:	b2d2      	uxtb	r2, r2
    8060:	210e      	movs	r1, #14
    8062:	f7ff ffb8 	bl	7fd6 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8066:	6820      	ldr	r0, [r4, #0]
    8068:	2103      	movs	r1, #3
    806a:	3008      	adds	r0, #8
    806c:	f00a fd6c 	bl	12b48 <net_buf_simple_add>
	cc->ncmd = 1;
    8070:	2301      	movs	r3, #1
    8072:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8074:	4b05      	ldr	r3, [pc, #20]	; (808c <cmd_complete+0x40>)
    8076:	881b      	ldrh	r3, [r3, #0]
    8078:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    807c:	6820      	ldr	r0, [r4, #0]
    807e:	4629      	mov	r1, r5
    8080:	3008      	adds	r0, #8
}
    8082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    8086:	f00a bd5f 	b.w	12b48 <net_buf_simple_add>
    808a:	bf00      	nop
    808c:	20000858 	.word	0x20000858

00008090 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8090:	4b0e      	ldr	r3, [pc, #56]	; (80cc <encrypt_change+0x3c>)
{
    8092:	b570      	push	{r4, r5, r6, lr}
    8094:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8096:	e9d3 2300 	ldrd	r2, r3, [r3]
    809a:	2300      	movs	r3, #0
    809c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    80a0:	4313      	orrs	r3, r2
{
    80a2:	4604      	mov	r4, r0
    80a4:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    80a6:	d010      	beq.n	80ca <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    80a8:	2204      	movs	r2, #4
    80aa:	2108      	movs	r1, #8
    80ac:	4628      	mov	r0, r5
    80ae:	f7ff ff92 	bl	7fd6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    80b2:	2104      	movs	r1, #4
    80b4:	f105 0008 	add.w	r0, r5, #8
    80b8:	f00a fd46 	bl	12b48 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    80bc:	fab4 f384 	clz	r3, r4
    80c0:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    80c2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    80c4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    80c8:	70c3      	strb	r3, [r0, #3]
    80ca:	bd70      	pop	{r4, r5, r6, pc}
    80cc:	20003d78 	.word	0x20003d78

000080d0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    80d0:	b570      	push	{r4, r5, r6, lr}
    80d2:	4604      	mov	r4, r0
    80d4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80d6:	4b13      	ldr	r3, [pc, #76]	; (8124 <le_remote_feat_complete+0x54>)
{
    80d8:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80da:	e9d3 2300 	ldrd	r2, r3, [r3]
    80de:	2200      	movs	r2, #0
    80e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    80e4:	4313      	orrs	r3, r2
{
    80e6:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80e8:	d01b      	beq.n	8122 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    80ea:	4b0f      	ldr	r3, [pc, #60]	; (8128 <le_remote_feat_complete+0x58>)
    80ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    80f0:	2300      	movs	r3, #0
    80f2:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80f6:	4313      	orrs	r3, r2
    80f8:	d013      	beq.n	8122 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    80fa:	220b      	movs	r2, #11
    80fc:	2104      	movs	r1, #4
    80fe:	f7ff ff8f 	bl	8020 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8102:	2208      	movs	r2, #8
	sep->status = status;
    8104:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8106:	f8a0 6001 	strh.w	r6, [r0, #1]
    810a:	3003      	adds	r0, #3
	if (!status) {
    810c:	b924      	cbnz	r4, 8118 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    810e:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    8114:	f7f9 bd84 	b.w	1c20 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8118:	2100      	movs	r1, #0
}
    811a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    811e:	f7f9 bdab 	b.w	1c78 <memset>
    8122:	bd70      	pop	{r4, r5, r6, pc}
    8124:	20003d78 	.word	0x20003d78
    8128:	20003d80 	.word	0x20003d80

0000812c <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    812c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8130:	4605      	mov	r5, r0
    8132:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8134:	4b46      	ldr	r3, [pc, #280]	; (8250 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8136:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8138:	e9d3 2300 	ldrd	r2, r3, [r3]
    813c:	f240 2801 	movw	r8, #513	; 0x201
    8140:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8144:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8148:	ea03 0309 	and.w	r3, r3, r9
    814c:	ea02 0208 	and.w	r2, r2, r8
    8150:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8152:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8154:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8158:	d077      	beq.n	824a <le_conn_complete.part.39+0x11e>
	if (!status) {
    815a:	2d00      	cmp	r5, #0
    815c:	d150      	bne.n	8200 <le_conn_complete.part.39+0xd4>
		conn_count++;
    815e:	4a3d      	ldr	r2, [pc, #244]	; (8254 <le_conn_complete.part.39+0x128>)
    8160:	6813      	ldr	r3, [r2, #0]
    8162:	3301      	adds	r3, #1
    8164:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8166:	ea5a 030b 	orrs.w	r3, sl, fp
    816a:	f101 0803 	add.w	r8, r1, #3
    816e:	d151      	bne.n	8214 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8170:	2212      	movs	r2, #18
    8172:	2101      	movs	r1, #1
    8174:	f7ff ff54 	bl	8020 <meta_evt>
	lecc->status = 0x00;
    8178:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    817a:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    817e:	7863      	ldrb	r3, [r4, #1]
    8180:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    8182:	78a3      	ldrb	r3, [r4, #2]
    8184:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8186:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    8188:	2206      	movs	r2, #6
    818a:	4641      	mov	r1, r8
    818c:	3005      	adds	r0, #5
    818e:	f7f9 fd47 	bl	1c20 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8192:	8ae3      	ldrh	r3, [r4, #22]
    8194:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8198:	8b23      	ldrh	r3, [r4, #24]
    819a:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    819e:	8b63      	ldrh	r3, [r4, #26]
    81a0:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    81a4:	7f23      	ldrb	r3, [r4, #28]
    81a6:	747b      	strb	r3, [r7, #17]
    81a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    81ac:	221e      	movs	r2, #30
    81ae:	210a      	movs	r1, #10
    81b0:	f7ff ff36 	bl	8020 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    81b4:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    81b6:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    81b8:	2100      	movs	r1, #0
    81ba:	f7f9 fd5d 	bl	1c78 <memset>
		lecc->status = status;
    81be:	7025      	strb	r5, [r4, #0]
    81c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    81c4:	7d63      	ldrb	r3, [r4, #21]
    81c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    81ca:	2b40      	cmp	r3, #64	; 0x40
    81cc:	d138      	bne.n	8240 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    81ce:	2206      	movs	r2, #6
    81d0:	f104 0110 	add.w	r1, r4, #16
    81d4:	f7f9 fd24 	bl	1c20 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    81d8:	2206      	movs	r2, #6
    81da:	f104 0109 	add.w	r1, r4, #9
    81de:	f107 0011 	add.w	r0, r7, #17
    81e2:	f7f9 fd1d 	bl	1c20 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    81e6:	8ae3      	ldrh	r3, [r4, #22]
    81e8:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    81ec:	8b23      	ldrh	r3, [r4, #24]
    81ee:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    81f2:	8b63      	ldrh	r3, [r4, #26]
    81f4:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    81f8:	7f23      	ldrb	r3, [r4, #28]
    81fa:	777b      	strb	r3, [r7, #29]
    81fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8200:	ea5a 030b 	orrs.w	r3, sl, fp
    8204:	d1d2      	bne.n	81ac <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8206:	2212      	movs	r2, #18
    8208:	2101      	movs	r1, #1
    820a:	f7ff ff09 	bl	8020 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    820e:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8210:	4604      	mov	r4, r0
    8212:	e7d1      	b.n	81b8 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8214:	221e      	movs	r2, #30
    8216:	210a      	movs	r1, #10
    8218:	f7ff ff02 	bl	8020 <meta_evt>
		leecc->status = 0x00;
    821c:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    821e:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    8222:	7863      	ldrb	r3, [r4, #1]
    8224:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    8226:	78a3      	ldrb	r3, [r4, #2]
    8228:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    822a:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    822c:	2206      	movs	r2, #6
    822e:	4641      	mov	r1, r8
    8230:	3005      	adds	r0, #5
    8232:	f7f9 fcf5 	bl	1c20 <memcpy>
		if ((radio_cc->own_addr_type) &&
    8236:	7be3      	ldrb	r3, [r4, #15]
    8238:	f107 000b 	add.w	r0, r7, #11
    823c:	2b00      	cmp	r3, #0
    823e:	d1c1      	bne.n	81c4 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    8240:	2206      	movs	r2, #6
    8242:	2100      	movs	r1, #0
    8244:	f7f9 fd18 	bl	1c78 <memset>
    8248:	e7c6      	b.n	81d8 <le_conn_complete.part.39+0xac>
    824a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    824e:	bf00      	nop
    8250:	20003d80 	.word	0x20003d80
    8254:	2000085c 	.word	0x2000085c

00008258 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8258:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    825a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    825c:	b08a      	sub	sp, #40	; 0x28
    825e:	4604      	mov	r4, r0
    8260:	460e      	mov	r6, r1
    8262:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    8264:	2b03      	cmp	r3, #3
    8266:	d820      	bhi.n	82aa <bt_addr_le_to_str.constprop.70+0x52>
    8268:	e8df f003 	tbb	[pc, r3]
    826c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    8270:	4911      	ldr	r1, [pc, #68]	; (82b8 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    8272:	4628      	mov	r0, r5
    8274:	f7f9 fca0 	bl	1bb8 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8278:	7862      	ldrb	r2, [r4, #1]
    827a:	9204      	str	r2, [sp, #16]
    827c:	78a2      	ldrb	r2, [r4, #2]
    827e:	9203      	str	r2, [sp, #12]
    8280:	78e2      	ldrb	r2, [r4, #3]
    8282:	9202      	str	r2, [sp, #8]
    8284:	7922      	ldrb	r2, [r4, #4]
    8286:	9201      	str	r2, [sp, #4]
    8288:	7962      	ldrb	r2, [r4, #5]
    828a:	9200      	str	r2, [sp, #0]
    828c:	79a3      	ldrb	r3, [r4, #6]
    828e:	9505      	str	r5, [sp, #20]
    8290:	4a0a      	ldr	r2, [pc, #40]	; (82bc <bt_addr_le_to_str.constprop.70+0x64>)
    8292:	211b      	movs	r1, #27
    8294:	4630      	mov	r0, r6
    8296:	f7f8 fe87 	bl	fa8 <snprintk>
}
    829a:	b00a      	add	sp, #40	; 0x28
    829c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    829e:	4908      	ldr	r1, [pc, #32]	; (82c0 <bt_addr_le_to_str.constprop.70+0x68>)
    82a0:	e7e7      	b.n	8272 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    82a2:	4908      	ldr	r1, [pc, #32]	; (82c4 <bt_addr_le_to_str.constprop.70+0x6c>)
    82a4:	e7e5      	b.n	8272 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    82a6:	4908      	ldr	r1, [pc, #32]	; (82c8 <bt_addr_le_to_str.constprop.70+0x70>)
    82a8:	e7e3      	b.n	8272 <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    82aa:	4a08      	ldr	r2, [pc, #32]	; (82cc <bt_addr_le_to_str.constprop.70+0x74>)
    82ac:	210a      	movs	r1, #10
    82ae:	4628      	mov	r0, r5
    82b0:	f7f8 fe7a 	bl	fa8 <snprintk>
    82b4:	e7e0      	b.n	8278 <bt_addr_le_to_str.constprop.70+0x20>
    82b6:	bf00      	nop
    82b8:	000147fd 	.word	0x000147fd
    82bc:	00014826 	.word	0x00014826
    82c0:	00014804 	.word	0x00014804
    82c4:	0001480b 	.word	0x0001480b
    82c8:	00014815 	.word	0x00014815
    82cc:	0001481f 	.word	0x0001481f

000082d0 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    82d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    82d4:	4605      	mov	r5, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    82d6:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    82d8:	4c33      	ldr	r4, [pc, #204]	; (83a8 <le_adv_ext_report.isra.66+0xd8>)
    82da:	4e34      	ldr	r6, [pc, #208]	; (83ac <le_adv_ext_report.isra.66+0xdc>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    82dc:	b093      	sub	sp, #76	; 0x4c
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    82de:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    82e0:	9407      	str	r4, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    82e2:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    82e4:	6837      	ldr	r7, [r6, #0]
    82e6:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    82e8:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    82ea:	b25b      	sxtb	r3, r3
    82ec:	9306      	str	r3, [sp, #24]
    82ee:	782b      	ldrb	r3, [r5, #0]
    82f0:	9201      	str	r2, [sp, #4]
    82f2:	09d9      	lsrs	r1, r3, #7
    82f4:	9105      	str	r1, [sp, #20]
    82f6:	f3c3 1180 	ubfx	r1, r3, #6, #1
    82fa:	f003 030f 	and.w	r3, r3, #15
    82fe:	9104      	str	r1, [sp, #16]
    8300:	9302      	str	r3, [sp, #8]
    8302:	9400      	str	r4, [sp, #0]
    8304:	4b2a      	ldr	r3, [pc, #168]	; (83b0 <le_adv_ext_report.isra.66+0xe0>)
    8306:	492b      	ldr	r1, [pc, #172]	; (83b4 <le_adv_ext_report.isra.66+0xe4>)
    8308:	482b      	ldr	r0, [pc, #172]	; (83b8 <le_adv_ext_report.isra.66+0xe8>)
    830a:	4622      	mov	r2, r4
    830c:	47b8      	blx	r7
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    830e:	782b      	ldrb	r3, [r5, #0]
    8310:	f003 030f 	and.w	r3, r3, #15
    8314:	2b07      	cmp	r3, #7
    8316:	d143      	bne.n	83a0 <le_adv_ext_report.isra.66+0xd0>
    8318:	786b      	ldrb	r3, [r5, #1]
    831a:	2b00      	cmp	r3, #0
    831c:	d040      	beq.n	83a0 <le_adv_ext_report.isra.66+0xd0>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    831e:	78ab      	ldrb	r3, [r5, #2]
    8320:	4924      	ldr	r1, [pc, #144]	; (83b4 <le_adv_ext_report.isra.66+0xe4>)
    8322:	9403      	str	r4, [sp, #12]
    8324:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8328:	099b      	lsrs	r3, r3, #6
    832a:	9202      	str	r2, [sp, #8]
    832c:	9301      	str	r3, [sp, #4]
    832e:	9400      	str	r4, [sp, #0]
    8330:	4b1f      	ldr	r3, [pc, #124]	; (83b0 <le_adv_ext_report.isra.66+0xe0>)
    8332:	6837      	ldr	r7, [r6, #0]
    8334:	4821      	ldr	r0, [pc, #132]	; (83bc <le_adv_ext_report.isra.66+0xec>)
    8336:	4622      	mov	r2, r4
    8338:	47b8      	blx	r7
		if (!p->ext_hdr_len) {
    833a:	78ab      	ldrb	r3, [r5, #2]
    833c:	0699      	lsls	r1, r3, #26
    833e:	d02f      	beq.n	83a0 <le_adv_ext_report.isra.66+0xd0>
		if (h->adv_addr) {
    8340:	78eb      	ldrb	r3, [r5, #3]
    8342:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    8344:	f105 0804 	add.w	r8, r5, #4
		if (h->adv_addr) {
    8348:	d51c      	bpl.n	8384 <le_adv_ext_report.isra.66+0xb4>
			addr.type = adv->tx_addr;
    834a:	782b      	ldrb	r3, [r5, #0]
    834c:	af12      	add	r7, sp, #72	; 0x48
    834e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8352:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8356:	2206      	movs	r2, #6
    8358:	4641      	mov	r1, r8
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    835a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    835e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    8362:	f7f9 fc5d 	bl	1c20 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8366:	4649      	mov	r1, r9
    8368:	4638      	mov	r0, r7
    836a:	f7ff ff75 	bl	8258 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    836e:	9402      	str	r4, [sp, #8]
    8370:	e88d 0210 	stmia.w	sp, {r4, r9}
    8374:	6837      	ldr	r7, [r6, #0]
    8376:	4b0e      	ldr	r3, [pc, #56]	; (83b0 <le_adv_ext_report.isra.66+0xe0>)
    8378:	490e      	ldr	r1, [pc, #56]	; (83b4 <le_adv_ext_report.isra.66+0xe4>)
    837a:	4811      	ldr	r0, [pc, #68]	; (83c0 <le_adv_ext_report.isra.66+0xf0>)
    837c:	4622      	mov	r2, r4
			ptr += BDADDR_SIZE;
    837e:	f105 080a 	add.w	r8, r5, #10
			BT_WARN("AdvA: %s", addr_str);
    8382:	47b8      	blx	r7
		if (h->tx_pwr) {
    8384:	78eb      	ldrb	r3, [r5, #3]
    8386:	065b      	lsls	r3, r3, #25
    8388:	d50a      	bpl.n	83a0 <le_adv_ext_report.isra.66+0xd0>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    838a:	9402      	str	r4, [sp, #8]
    838c:	f998 3000 	ldrsb.w	r3, [r8]
    8390:	9301      	str	r3, [sp, #4]
    8392:	9400      	str	r4, [sp, #0]
    8394:	4b06      	ldr	r3, [pc, #24]	; (83b0 <le_adv_ext_report.isra.66+0xe0>)
    8396:	6834      	ldr	r4, [r6, #0]
    8398:	4a03      	ldr	r2, [pc, #12]	; (83a8 <le_adv_ext_report.isra.66+0xd8>)
    839a:	4906      	ldr	r1, [pc, #24]	; (83b4 <le_adv_ext_report.isra.66+0xe4>)
    839c:	4809      	ldr	r0, [pc, #36]	; (83c4 <le_adv_ext_report.isra.66+0xf4>)
    839e:	47a0      	blx	r4
}
    83a0:	b013      	add	sp, #76	; 0x4c
    83a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    83a6:	bf00      	nop
    83a8:	00014891 	.word	0x00014891
    83ac:	20003aa4 	.word	0x20003aa4
    83b0:	00016720 	.word	0x00016720
    83b4:	00015639 	.word	0x00015639
    83b8:	0001697d 	.word	0x0001697d
    83bc:	000169ca 	.word	0x000169ca
    83c0:	000169fb 	.word	0x000169fb
    83c4:	00016a14 	.word	0x00016a14

000083c8 <sys_get_le64>:
{
    83c8:	4603      	mov	r3, r0
}
    83ca:	6800      	ldr	r0, [r0, #0]
    83cc:	6859      	ldr	r1, [r3, #4]
    83ce:	4770      	bx	lr

000083d0 <hci_cmd_handle>:
{
    83d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    83d2:	8981      	ldrh	r1, [r0, #12]
{
    83d4:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    83d6:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    83d8:	2902      	cmp	r1, #2
{
    83da:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    83dc:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    83de:	d80b      	bhi.n	83f8 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    83e0:	4abf      	ldr	r2, [pc, #764]	; (86e0 <hci_cmd_handle+0x310>)
    83e2:	4bc0      	ldr	r3, [pc, #768]	; (86e4 <hci_cmd_handle+0x314>)
    83e4:	9201      	str	r2, [sp, #4]
    83e6:	9200      	str	r2, [sp, #0]
    83e8:	681c      	ldr	r4, [r3, #0]
    83ea:	49bf      	ldr	r1, [pc, #764]	; (86e8 <hci_cmd_handle+0x318>)
    83ec:	4bbf      	ldr	r3, [pc, #764]	; (86ec <hci_cmd_handle+0x31c>)
    83ee:	48c0      	ldr	r0, [pc, #768]	; (86f0 <hci_cmd_handle+0x320>)
		BT_ERR("Invalid HCI CMD packet length");
    83f0:	47a0      	blx	r4
		return NULL;
    83f2:	4628      	mov	r0, r5
}
    83f4:	b013      	add	sp, #76	; 0x4c
    83f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    83f8:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    83fa:	4ebe      	ldr	r6, [pc, #760]	; (86f4 <hci_cmd_handle+0x324>)
    83fc:	781a      	ldrb	r2, [r3, #0]
    83fe:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    8400:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8402:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    8406:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8408:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    840a:	d908      	bls.n	841e <hci_cmd_handle+0x4e>
		BT_ERR("Invalid HCI CMD packet length");
    840c:	4ab4      	ldr	r2, [pc, #720]	; (86e0 <hci_cmd_handle+0x310>)
    840e:	4bb5      	ldr	r3, [pc, #724]	; (86e4 <hci_cmd_handle+0x314>)
    8410:	9201      	str	r2, [sp, #4]
    8412:	9200      	str	r2, [sp, #0]
    8414:	681c      	ldr	r4, [r3, #0]
    8416:	49b4      	ldr	r1, [pc, #720]	; (86e8 <hci_cmd_handle+0x318>)
    8418:	4bb4      	ldr	r3, [pc, #720]	; (86ec <hci_cmd_handle+0x31c>)
    841a:	48b7      	ldr	r0, [pc, #732]	; (86f8 <hci_cmd_handle+0x328>)
    841c:	e7e8      	b.n	83f0 <hci_cmd_handle+0x20>
	net_buf_pull(cmd, sizeof(*chdr));
    841e:	2103      	movs	r1, #3
    8420:	f104 0008 	add.w	r0, r4, #8
    8424:	f00a fbaf 	bl	12b86 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    8428:	8833      	ldrh	r3, [r6, #0]
    842a:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    842e:	0a9b      	lsrs	r3, r3, #10
    8430:	2b04      	cmp	r3, #4
    8432:	f000 80bd 	beq.w	85b0 <hci_cmd_handle+0x1e0>
    8436:	d809      	bhi.n	844c <hci_cmd_handle+0x7c>
    8438:	2b01      	cmp	r3, #1
    843a:	d027      	beq.n	848c <hci_cmd_handle+0xbc>
    843c:	2b03      	cmp	r3, #3
    843e:	d03c      	beq.n	84ba <hci_cmd_handle+0xea>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    8440:	2101      	movs	r1, #1
    8442:	a807      	add	r0, sp, #28
    8444:	f7ff fe02 	bl	804c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8448:	2301      	movs	r3, #1
    844a:	e299      	b.n	8980 <hci_cmd_handle+0x5b0>
	switch (BT_OGF(_opcode)) {
    844c:	2b08      	cmp	r3, #8
    844e:	f000 8169 	beq.w	8724 <hci_cmd_handle+0x354>
    8452:	2b3f      	cmp	r3, #63	; 0x3f
    8454:	d1f4      	bne.n	8440 <hci_cmd_handle+0x70>
	switch (ocf) {
    8456:	3a01      	subs	r2, #1
    8458:	2a09      	cmp	r2, #9
    845a:	d8f1      	bhi.n	8440 <hci_cmd_handle+0x70>
    845c:	a301      	add	r3, pc, #4	; (adr r3, 8464 <hci_cmd_handle+0x94>)
    845e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8462:	bf00      	nop
    8464:	00008cb9 	.word	0x00008cb9
    8468:	00008ce9 	.word	0x00008ce9
    846c:	00008d13 	.word	0x00008d13
    8470:	00008441 	.word	0x00008441
    8474:	00008441 	.word	0x00008441
    8478:	00008d59 	.word	0x00008d59
    847c:	00008441 	.word	0x00008441
    8480:	00008d2b 	.word	0x00008d2b
    8484:	00008d65 	.word	0x00008d65
    8488:	00008dd3 	.word	0x00008dd3
	switch (ocf) {
    848c:	2a06      	cmp	r2, #6
    848e:	d006      	beq.n	849e <hci_cmd_handle+0xce>
    8490:	2a1d      	cmp	r2, #29
    8492:	d1d5      	bne.n	8440 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
    8494:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    8496:	8818      	ldrh	r0, [r3, #0]
    8498:	f008 f823 	bl	104e2 <ll_version_ind_send>
    849c:	e004      	b.n	84a8 <hci_cmd_handle+0xd8>
    849e:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    84a0:	7899      	ldrb	r1, [r3, #2]
    84a2:	8818      	ldrh	r0, [r3, #0]
    84a4:	f008 f831 	bl	1050a <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    84a8:	2800      	cmp	r0, #0
    84aa:	bf14      	ite	ne
    84ac:	200c      	movne	r0, #12
    84ae:	2000      	moveq	r0, #0
    84b0:	f7ff fd9c 	bl	7fec <cmd_status>
    84b4:	9007      	str	r0, [sp, #28]
	return evt;
    84b6:	9807      	ldr	r0, [sp, #28]
    84b8:	e79c      	b.n	83f4 <hci_cmd_handle+0x24>
	switch (ocf) {
    84ba:	2a2d      	cmp	r2, #45	; 0x2d
    84bc:	d03a      	beq.n	8534 <hci_cmd_handle+0x164>
    84be:	d820      	bhi.n	8502 <hci_cmd_handle+0x132>
    84c0:	2a01      	cmp	r2, #1
    84c2:	d02b      	beq.n	851c <hci_cmd_handle+0x14c>
    84c4:	2a03      	cmp	r2, #3
    84c6:	d1bb      	bne.n	8440 <hci_cmd_handle+0x70>
	dup_count = -1;
    84c8:	4b8c      	ldr	r3, [pc, #560]	; (86fc <hci_cmd_handle+0x32c>)
    84ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    84ce:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    84d0:	4b8b      	ldr	r3, [pc, #556]	; (8700 <hci_cmd_handle+0x330>)
    84d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    84d6:	f641 71ff 	movw	r1, #8191	; 0x1fff
    84da:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    84de:	4b89      	ldr	r3, [pc, #548]	; (8704 <hci_cmd_handle+0x334>)
    84e0:	2000      	movs	r0, #0
    84e2:	2100      	movs	r1, #0
    84e4:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    84e8:	4b87      	ldr	r3, [pc, #540]	; (8708 <hci_cmd_handle+0x338>)
    84ea:	201f      	movs	r0, #31
    84ec:	2100      	movs	r1, #0
    84ee:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    84f2:	f007 fcbf 	bl	fe74 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    84f6:	2101      	movs	r1, #1
    84f8:	a807      	add	r0, sp, #28
    84fa:	f7ff fda7 	bl	804c <cmd_complete>
	ccst->status = 0x00;
    84fe:	2300      	movs	r3, #0
    8500:	e23e      	b.n	8980 <hci_cmd_handle+0x5b0>
	switch (ocf) {
    8502:	2a7b      	cmp	r2, #123	; 0x7b
    8504:	d02c      	beq.n	8560 <hci_cmd_handle+0x190>
    8506:	2a7c      	cmp	r2, #124	; 0x7c
    8508:	d041      	beq.n	858e <hci_cmd_handle+0x1be>
    850a:	2a63      	cmp	r2, #99	; 0x63
    850c:	d198      	bne.n	8440 <hci_cmd_handle+0x70>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    850e:	68a0      	ldr	r0, [r4, #8]
    8510:	f7ff ff5a 	bl	83c8 <sys_get_le64>
    8514:	4b7b      	ldr	r3, [pc, #492]	; (8704 <hci_cmd_handle+0x334>)
	le_event_mask = sys_get_le64(cmd->events);
    8516:	e9c3 0100 	strd	r0, r1, [r3]
    851a:	e7ec      	b.n	84f6 <hci_cmd_handle+0x126>
	event_mask = sys_get_le64(cmd->events);
    851c:	68a0      	ldr	r0, [r4, #8]
    851e:	f7ff ff53 	bl	83c8 <sys_get_le64>
    8522:	4b77      	ldr	r3, [pc, #476]	; (8700 <hci_cmd_handle+0x330>)
    8524:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8528:	4611      	mov	r1, r2
    852a:	a807      	add	r0, sp, #28
    852c:	f7ff fd8e 	bl	804c <cmd_complete>
	ccst->status = 0x00;
    8530:	7005      	strb	r5, [r0, #0]
    8532:	e7c0      	b.n	84b6 <hci_cmd_handle+0xe6>
    8534:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8536:	2104      	movs	r1, #4
    8538:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    853a:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    853c:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    853e:	f7ff fd85 	bl	804c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8542:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8544:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    8546:	1cc2      	adds	r2, r0, #3
    8548:	4639      	mov	r1, r7
    854a:	4630      	mov	r0, r6
    854c:	f007 fff1 	bl	10532 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8550:	2800      	cmp	r0, #0
    8552:	bf14      	ite	ne
    8554:	2302      	movne	r3, #2
    8556:	2300      	moveq	r3, #0
    8558:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    855a:	f8a4 5001 	strh.w	r5, [r4, #1]
    855e:	e7aa      	b.n	84b6 <hci_cmd_handle+0xe6>
	handle = sys_le16_to_cpu(cmd->handle);
    8560:	68a3      	ldr	r3, [r4, #8]
    8562:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8564:	a908      	add	r1, sp, #32
    8566:	b2a0      	uxth	r0, r4
    8568:	f007 ffed 	bl	10546 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    856c:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    856e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8570:	a807      	add	r0, sp, #28
    8572:	f7ff fd6b 	bl	804c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8576:	2d00      	cmp	r5, #0
    8578:	bf14      	ite	ne
    857a:	230c      	movne	r3, #12
    857c:	2300      	moveq	r3, #0
    857e:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8580:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8584:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8588:	f8a0 3003 	strh.w	r3, [r0, #3]
    858c:	e793      	b.n	84b6 <hci_cmd_handle+0xe6>
    858e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8590:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    8592:	8859      	ldrh	r1, [r3, #2]
    8594:	b2a0      	uxth	r0, r4
    8596:	f007 ffea 	bl	1056e <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    859a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    859c:	2103      	movs	r1, #3
    859e:	a807      	add	r0, sp, #28
    85a0:	f7ff fd54 	bl	804c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    85a4:	2d00      	cmp	r5, #0
    85a6:	bf14      	ite	ne
    85a8:	230c      	movne	r3, #12
    85aa:	2300      	moveq	r3, #0
    85ac:	7003      	strb	r3, [r0, #0]
    85ae:	e27d      	b.n	8aac <hci_cmd_handle+0x6dc>
	switch (ocf) {
    85b0:	3a01      	subs	r2, #1
    85b2:	2a08      	cmp	r2, #8
    85b4:	f63f af44 	bhi.w	8440 <hci_cmd_handle+0x70>
    85b8:	a301      	add	r3, pc, #4	; (adr r3, 85c0 <hci_cmd_handle+0x1f0>)
    85ba:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    85be:	bf00      	nop
    85c0:	000085e5 	.word	0x000085e5
    85c4:	0000860f 	.word	0x0000860f
    85c8:	000086c3 	.word	0x000086c3
    85cc:	00008441 	.word	0x00008441
    85d0:	00008441 	.word	0x00008441
    85d4:	00008441 	.word	0x00008441
    85d8:	00008441 	.word	0x00008441
    85dc:	00008441 	.word	0x00008441
    85e0:	0000870d 	.word	0x0000870d
	rp = cmd_complete(evt, sizeof(*rp));
    85e4:	2109      	movs	r1, #9
    85e6:	a807      	add	r0, sp, #28
    85e8:	f7ff fd30 	bl	804c <cmd_complete>
	rp->status = 0x00;
    85ec:	2300      	movs	r3, #0
    85ee:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    85f0:	7083      	strb	r3, [r0, #2]
    85f2:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    85f4:	f06f 030e 	mvn.w	r3, #14
    85f8:	7143      	strb	r3, [r0, #5]
    85fa:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    85fc:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    85fe:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    8604:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    8606:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8608:	71c3      	strb	r3, [r0, #7]
    860a:	7203      	strb	r3, [r0, #8]
    860c:	e753      	b.n	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    860e:	2141      	movs	r1, #65	; 0x41
    8610:	a807      	add	r0, sp, #28
    8612:	f7ff fd1b 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8616:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8618:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    861a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    861c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8620:	f7f9 fb2a 	bl	1c78 <memset>
	rp->commands[2] |= BIT(7);
    8624:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    8626:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    8628:	f063 037f 	orn	r3, r3, #127	; 0x7f
    862c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    862e:	79a3      	ldrb	r3, [r4, #6]
    8630:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8634:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    8636:	7ae3      	ldrb	r3, [r4, #11]
    8638:	f043 0304 	orr.w	r3, r3, #4
    863c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    863e:	7be3      	ldrb	r3, [r4, #15]
    8640:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    8644:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    8646:	7c23      	ldrb	r3, [r4, #16]
    8648:	f043 0302 	orr.w	r3, r3, #2
    864c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    864e:	7de3      	ldrb	r3, [r4, #23]
    8650:	f043 0304 	orr.w	r3, r3, #4
    8654:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    8656:	7ea3      	ldrb	r3, [r4, #26]
    8658:	f043 0317 	orr.w	r3, r3, #23
    865c:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    865e:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    8660:	f043 0309 	orr.w	r3, r3, #9
    8664:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    8666:	7863      	ldrb	r3, [r4, #1]
    8668:	f043 0320 	orr.w	r3, r3, #32
    866c:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    866e:	23ff      	movs	r3, #255	; 0xff
    8670:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    8672:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    8676:	f063 030f 	orn	r3, r3, #15
    867a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    867e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    8682:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8686:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    868a:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    868c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    8690:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8694:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    8698:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    869c:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    86a0:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    86a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    86a8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    86ac:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    86b0:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    86b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    86b8:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    86bc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    86c0:	e6f9      	b.n	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    86c2:	2109      	movs	r1, #9
    86c4:	a807      	add	r0, sp, #28
    86c6:	f7ff fcc1 	bl	804c <cmd_complete>
	rp->status = 0x00;
    86ca:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    86cc:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    86ce:	2208      	movs	r2, #8
	rp->status = 0x00;
    86d0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    86d4:	f7f9 fad0 	bl	1c78 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    86d8:	2360      	movs	r3, #96	; 0x60
    86da:	7163      	strb	r3, [r4, #5]
    86dc:	e6eb      	b.n	84b6 <hci_cmd_handle+0xe6>
    86de:	bf00      	nop
    86e0:	00014891 	.word	0x00014891
    86e4:	20003aa4 	.word	0x20003aa4
    86e8:	00015639 	.word	0x00015639
    86ec:	000166ec 	.word	0x000166ec
    86f0:	0001682f 	.word	0x0001682f
    86f4:	20000858 	.word	0x20000858
    86f8:	00016855 	.word	0x00016855
    86fc:	20000860 	.word	0x20000860
    8700:	20003d78 	.word	0x20003d78
    8704:	200008e8 	.word	0x200008e8
    8708:	20003d80 	.word	0x20003d80
	rp = cmd_complete(evt, sizeof(*rp));
    870c:	2107      	movs	r1, #7
    870e:	a807      	add	r0, sp, #28
    8710:	f7ff fc9c 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8714:	4601      	mov	r1, r0
    8716:	2300      	movs	r3, #0
    8718:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    871c:	4618      	mov	r0, r3
    871e:	f7ff fac1 	bl	7ca4 <ll_addr_get>
    8722:	e6c8      	b.n	84b6 <hci_cmd_handle+0xe6>
	switch (ocf) {
    8724:	3a01      	subs	r2, #1
    8726:	2a4d      	cmp	r2, #77	; 0x4d
    8728:	f63f ae8a 	bhi.w	8440 <hci_cmd_handle+0x70>
    872c:	a301      	add	r3, pc, #4	; (adr r3, 8734 <hci_cmd_handle+0x364>)
    872e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8732:	bf00      	nop
    8734:	0000886d 	.word	0x0000886d
    8738:	00008877 	.word	0x00008877
    873c:	0000888f 	.word	0x0000888f
    8740:	00008441 	.word	0x00008441
    8744:	000088b3 	.word	0x000088b3
    8748:	00008441 	.word	0x00008441
    874c:	00008441 	.word	0x00008441
    8750:	00008441 	.word	0x00008441
    8754:	00008441 	.word	0x00008441
    8758:	00008441 	.word	0x00008441
    875c:	00008957 	.word	0x00008957
    8760:	00008985 	.word	0x00008985
    8764:	000089a5 	.word	0x000089a5
    8768:	000089cf 	.word	0x000089cf
    876c:	000088bf 	.word	0x000088bf
    8770:	000088d5 	.word	0x000088d5
    8774:	000088e7 	.word	0x000088e7
    8778:	000088ef 	.word	0x000088ef
    877c:	00008a6f 	.word	0x00008a6f
    8780:	00008a2f 	.word	0x00008a2f
    8784:	00008a4b 	.word	0x00008a4b
    8788:	00008a65 	.word	0x00008a65
    878c:	000088f7 	.word	0x000088f7
    8790:	0000891d 	.word	0x0000891d
    8794:	00008a37 	.word	0x00008a37
    8798:	00008441 	.word	0x00008441
    879c:	00008441 	.word	0x00008441
    87a0:	00008933 	.word	0x00008933
    87a4:	00008441 	.word	0x00008441
    87a8:	00008441 	.word	0x00008441
    87ac:	00008441 	.word	0x00008441
    87b0:	00008a89 	.word	0x00008a89
    87b4:	00008ab3 	.word	0x00008ab3
    87b8:	00008ac1 	.word	0x00008ac1
    87bc:	00008ad1 	.word	0x00008ad1
    87c0:	00008ae9 	.word	0x00008ae9
    87c4:	00008441 	.word	0x00008441
    87c8:	00008441 	.word	0x00008441
    87cc:	00008c01 	.word	0x00008c01
    87d0:	00008c0f 	.word	0x00008c0f
    87d4:	00008c17 	.word	0x00008c17
    87d8:	00008c27 	.word	0x00008c27
    87dc:	00008c39 	.word	0x00008c39
    87e0:	00008c57 	.word	0x00008c57
    87e4:	00008c75 	.word	0x00008c75
    87e8:	00008c8b 	.word	0x00008c8b
    87ec:	00008b05 	.word	0x00008b05
    87f0:	00008b31 	.word	0x00008b31
    87f4:	00008b87 	.word	0x00008b87
    87f8:	00008ba5 	.word	0x00008ba5
    87fc:	00008441 	.word	0x00008441
    8800:	00008441 	.word	0x00008441
    8804:	00008441 	.word	0x00008441
    8808:	00008441 	.word	0x00008441
    880c:	00008441 	.word	0x00008441
    8810:	00008441 	.word	0x00008441
    8814:	00008441 	.word	0x00008441
    8818:	00008441 	.word	0x00008441
    881c:	00008441 	.word	0x00008441
    8820:	00008441 	.word	0x00008441
    8824:	00008441 	.word	0x00008441
    8828:	00008441 	.word	0x00008441
    882c:	00008441 	.word	0x00008441
    8830:	00008441 	.word	0x00008441
    8834:	00008441 	.word	0x00008441
    8838:	00008441 	.word	0x00008441
    883c:	00008441 	.word	0x00008441
    8840:	00008441 	.word	0x00008441
    8844:	00008441 	.word	0x00008441
    8848:	00008441 	.word	0x00008441
    884c:	00008441 	.word	0x00008441
    8850:	00008441 	.word	0x00008441
    8854:	00008441 	.word	0x00008441
    8858:	00008441 	.word	0x00008441
    885c:	00008c9f 	.word	0x00008c9f
    8860:	00008441 	.word	0x00008441
    8864:	00008441 	.word	0x00008441
    8868:	00008c95 	.word	0x00008c95
	le_event_mask = sys_get_le64(cmd->events);
    886c:	68a0      	ldr	r0, [r4, #8]
    886e:	f7ff fdab 	bl	83c8 <sys_get_le64>
    8872:	4baa      	ldr	r3, [pc, #680]	; (8b1c <hci_cmd_handle+0x74c>)
    8874:	e64f      	b.n	8516 <hci_cmd_handle+0x146>
	rp = cmd_complete(evt, sizeof(*rp));
    8876:	2104      	movs	r1, #4
    8878:	a807      	add	r0, sp, #28
    887a:	f7ff fbe7 	bl	804c <cmd_complete>
	rp->status = 0x00;
    887e:	2300      	movs	r3, #0
    8880:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8882:	221b      	movs	r2, #27
    8884:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8886:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8888:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    888a:	70c3      	strb	r3, [r0, #3]
    888c:	e613      	b.n	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    888e:	2109      	movs	r1, #9
    8890:	a807      	add	r0, sp, #28
    8892:	f7ff fbdb 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8896:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8898:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    889a:	2208      	movs	r2, #8
	rp->status = 0x00;
    889c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    88a0:	f7f9 f9ea 	bl	1c78 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    88a4:	23ff      	movs	r3, #255	; 0xff
    88a6:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    88a8:	2341      	movs	r3, #65	; 0x41
    88aa:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    88ac:	2301      	movs	r3, #1
    88ae:	70e3      	strb	r3, [r4, #3]
    88b0:	e601      	b.n	84b6 <hci_cmd_handle+0xe6>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    88b2:	68a1      	ldr	r1, [r4, #8]
    88b4:	2001      	movs	r0, #1
    88b6:	f7ff fa0f 	bl	7cd8 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    88ba:	4604      	mov	r4, r0
    88bc:	e0af      	b.n	8a1e <hci_cmd_handle+0x64e>
	rp = cmd_complete(evt, sizeof(*rp));
    88be:	2102      	movs	r1, #2
    88c0:	a807      	add	r0, sp, #28
    88c2:	f7ff fbc3 	bl	804c <cmd_complete>
	rp->status = 0x00;
    88c6:	2300      	movs	r3, #0
    88c8:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    88ca:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    88cc:	f008 fd9a 	bl	11404 <ll_wl_size_get>
    88d0:	7060      	strb	r0, [r4, #1]
    88d2:	e5f0      	b.n	84b6 <hci_cmd_handle+0xe6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    88d4:	2101      	movs	r1, #1
    88d6:	a807      	add	r0, sp, #28
    88d8:	f7ff fbb8 	bl	804c <cmd_complete>
    88dc:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    88de:	f008 fd93 	bl	11408 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    88e2:	7020      	strb	r0, [r4, #0]
    88e4:	e5e7      	b.n	84b6 <hci_cmd_handle+0xe6>
	status = ll_wl_add(&cmd->addr);
    88e6:	68a0      	ldr	r0, [r4, #8]
    88e8:	f008 fe3a 	bl	11560 <ll_wl_add>
    88ec:	e7e5      	b.n	88ba <hci_cmd_handle+0x4ea>
	status = ll_wl_remove(&cmd->addr);
    88ee:	68a0      	ldr	r0, [r4, #8]
    88f0:	f008 fdaa 	bl	11448 <ll_wl_remove>
    88f4:	e7e1      	b.n	88ba <hci_cmd_handle+0x4ea>
    88f6:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    88f8:	2300      	movs	r3, #0
    88fa:	aa08      	add	r2, sp, #32
    88fc:	f100 0110 	add.w	r1, r0, #16
    8900:	f009 faa6 	bl	11e50 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8904:	2111      	movs	r1, #17
    8906:	a807      	add	r0, sp, #28
    8908:	f7ff fba0 	bl	804c <cmd_complete>
	rp->status = 0x00;
    890c:	2300      	movs	r3, #0
    890e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8912:	2210      	movs	r2, #16
    8914:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    8916:	f7f9 f983 	bl	1c20 <memcpy>
    891a:	e5cc      	b.n	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    891c:	2109      	movs	r1, #9
    891e:	a807      	add	r0, sp, #28
    8920:	f7ff fb94 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8924:	2300      	movs	r3, #0
    8926:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    892a:	2108      	movs	r1, #8
    892c:	f7ff f9f4 	bl	7d18 <bt_rand>
    8930:	e5c1      	b.n	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    8932:	2109      	movs	r1, #9
    8934:	a807      	add	r0, sp, #28
    8936:	f7ff fb89 	bl	804c <cmd_complete>
	rp->status = 0x00;
    893a:	4601      	mov	r1, r0
    893c:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    893e:	4602      	mov	r2, r0
	rp->status = 0x00;
    8940:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    8944:	4876      	ldr	r0, [pc, #472]	; (8b20 <hci_cmd_handle+0x750>)
    8946:	f7ff fb3d 	bl	7fc4 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    894a:	f240 203f 	movw	r0, #575	; 0x23f
    894e:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8950:	f7ff fb38 	bl	7fc4 <sys_put_le32>
    8954:	e5af      	b.n	84b6 <hci_cmd_handle+0xe6>
    8956:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    8958:	7963      	ldrb	r3, [r4, #5]
    895a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    895e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    8962:	7820      	ldrb	r0, [r4, #0]
    8964:	79a4      	ldrb	r4, [r4, #6]
    8966:	9400      	str	r4, [sp, #0]
    8968:	f008 fb10 	bl	10f8c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    896c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    896e:	2101      	movs	r1, #1
    8970:	a807      	add	r0, sp, #28
    8972:	f7ff fb6b 	bl	804c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8976:	2c00      	cmp	r4, #0
    8978:	bf18      	it	ne
    897a:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    897c:	bf08      	it	eq
    897e:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8980:	7003      	strb	r3, [r0, #0]
    8982:	e598      	b.n	84b6 <hci_cmd_handle+0xe6>
    8984:	68a2      	ldr	r2, [r4, #8]
    8986:	4b67      	ldr	r3, [pc, #412]	; (8b24 <hci_cmd_handle+0x754>)
	if (cmd->enable && cmd->filter_dup) {
    8988:	7810      	ldrb	r0, [r2, #0]
    898a:	b140      	cbz	r0, 899e <hci_cmd_handle+0x5ce>
    898c:	7852      	ldrb	r2, [r2, #1]
    898e:	b132      	cbz	r2, 899e <hci_cmd_handle+0x5ce>
		dup_count = 0;
    8990:	2200      	movs	r2, #0
    8992:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    8994:	4b64      	ldr	r3, [pc, #400]	; (8b28 <hci_cmd_handle+0x758>)
		dup_count = -1;
    8996:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8998:	f008 fb18 	bl	10fcc <ll_scan_enable>
    899c:	e7e6      	b.n	896c <hci_cmd_handle+0x59c>
		dup_count = -1;
    899e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    89a2:	e7f8      	b.n	8996 <hci_cmd_handle+0x5c6>
    89a4:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    89a6:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    89aa:	7963      	ldrb	r3, [r4, #5]
    89ac:	7922      	ldrb	r2, [r4, #4]
    89ae:	8861      	ldrh	r1, [r4, #2]
    89b0:	8820      	ldrh	r0, [r4, #0]
    89b2:	9504      	str	r5, [sp, #16]
    89b4:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    89b8:	9503      	str	r5, [sp, #12]
    89ba:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    89be:	9502      	str	r5, [sp, #8]
    89c0:	7b25      	ldrb	r5, [r4, #12]
    89c2:	9501      	str	r5, [sp, #4]
    89c4:	3406      	adds	r4, #6
    89c6:	9400      	str	r4, [sp, #0]
    89c8:	f008 fb3a 	bl	11040 <ll_create_connection>
    89cc:	e56c      	b.n	84a8 <hci_cmd_handle+0xd8>
	status = ll_connect_disable();
    89ce:	f008 f94b 	bl	10c68 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    89d2:	4606      	mov	r6, r0
    89d4:	bb48      	cbnz	r0, 8a2a <hci_cmd_handle+0x65a>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    89d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    89da:	2001      	movs	r0, #1
    89dc:	f7fb f8b2 	bl	3b44 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89e0:	4a52      	ldr	r2, [pc, #328]	; (8b2c <hci_cmd_handle+0x75c>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    89e2:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89e4:	e9d2 4500 	ldrd	r4, r5, [r2]
    89e8:	2400      	movs	r4, #0
    89ea:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    89ee:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    89f2:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89f4:	d004      	beq.n	8a00 <hci_cmd_handle+0x630>
    89f6:	4632      	mov	r2, r6
    89f8:	4631      	mov	r1, r6
    89fa:	2002      	movs	r0, #2
    89fc:	f7ff fb96 	bl	812c <le_conn_complete.part.39>
		if ((*evt)->len) {
    8a00:	9807      	ldr	r0, [sp, #28]
    8a02:	8984      	ldrh	r4, [r0, #12]
    8a04:	b14c      	cbz	r4, 8a1a <hci_cmd_handle+0x64a>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    8a06:	2101      	movs	r1, #1
    8a08:	a808      	add	r0, sp, #32
    8a0a:	f7ff fb1f 	bl	804c <cmd_complete>
			ccst->status = cmd_status;
    8a0e:	2300      	movs	r3, #0
    8a10:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8a12:	9808      	ldr	r0, [sp, #32]
    8a14:	f7fa feb8 	bl	3788 <bt_recv_prio>
    8a18:	e54d      	b.n	84b6 <hci_cmd_handle+0xe6>
			net_buf_unref(*evt);
    8a1a:	f00a f85d 	bl	12ad8 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8a1e:	2101      	movs	r1, #1
    8a20:	a807      	add	r0, sp, #28
    8a22:	f7ff fb13 	bl	804c <cmd_complete>
	ccst->status = status;
    8a26:	7004      	strb	r4, [r0, #0]
    8a28:	e545      	b.n	84b6 <hci_cmd_handle+0xe6>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8a2a:	240c      	movs	r4, #12
    8a2c:	e7f7      	b.n	8a1e <hci_cmd_handle+0x64e>
	status = ll_chm_update(&cmd->ch_map[0]);
    8a2e:	68a0      	ldr	r0, [r4, #8]
    8a30:	f007 fcec 	bl	1040c <ll_chm_update>
    8a34:	e79a      	b.n	896c <hci_cmd_handle+0x59c>
    8a36:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    8a38:	f100 030c 	add.w	r3, r0, #12
    8a3c:	f100 020a 	add.w	r2, r0, #10
    8a40:	1c81      	adds	r1, r0, #2
    8a42:	8800      	ldrh	r0, [r0, #0]
    8a44:	f007 ff96 	bl	10974 <ll_enc_req_send>
    8a48:	e52e      	b.n	84a8 <hci_cmd_handle+0xd8>
	handle = sys_le16_to_cpu(cmd->handle);
    8a4a:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8a4c:	2108      	movs	r1, #8
    8a4e:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8a50:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8a52:	f7ff fafb 	bl	804c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8a56:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8a58:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    8a5a:	1cc1      	adds	r1, r0, #3
    8a5c:	4630      	mov	r0, r6
    8a5e:	f007 fd17 	bl	10490 <ll_chm_get>
    8a62:	e575      	b.n	8550 <hci_cmd_handle+0x180>
	handle = sys_le16_to_cpu(cmd->handle);
    8a64:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8a66:	8818      	ldrh	r0, [r3, #0]
    8a68:	f007 fd27 	bl	104ba <ll_feature_req_send>
    8a6c:	e51c      	b.n	84a8 <hci_cmd_handle+0xd8>
    8a6e:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8a70:	8911      	ldrh	r1, [r2, #8]
    8a72:	8893      	ldrh	r3, [r2, #4]
    8a74:	8810      	ldrh	r0, [r2, #0]
    8a76:	9101      	str	r1, [sp, #4]
    8a78:	88d2      	ldrh	r2, [r2, #6]
    8a7a:	9200      	str	r2, [sp, #0]
    8a7c:	2200      	movs	r2, #0
    8a7e:	4611      	mov	r1, r2
    8a80:	f007 fc4c 	bl	1031c <ll_conn_update>
	*evt = cmd_status(status);
    8a84:	b2c0      	uxtb	r0, r0
    8a86:	e513      	b.n	84b0 <hci_cmd_handle+0xe0>
    8a88:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8a8a:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8a8c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8a8e:	8893      	ldrh	r3, [r2, #4]
    8a90:	9101      	str	r1, [sp, #4]
    8a92:	88d2      	ldrh	r2, [r2, #6]
    8a94:	9200      	str	r2, [sp, #0]
    8a96:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8a98:	2102      	movs	r1, #2
    8a9a:	b2a0      	uxth	r0, r4
    8a9c:	f007 fc3e 	bl	1031c <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8aa0:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8aa2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8aa4:	a807      	add	r0, sp, #28
    8aa6:	f7ff fad1 	bl	804c <cmd_complete>
	rp->status = status;
    8aaa:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8aac:	f8a0 4001 	strh.w	r4, [r0, #1]
    8ab0:	e501      	b.n	84b6 <hci_cmd_handle+0xe6>
    8ab2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8ab4:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8ab6:	789a      	ldrb	r2, [r3, #2]
    8ab8:	2300      	movs	r3, #0
    8aba:	9301      	str	r3, [sp, #4]
    8abc:	9300      	str	r3, [sp, #0]
    8abe:	e7eb      	b.n	8a98 <hci_cmd_handle+0x6c8>
    8ac0:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8ac2:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8ac4:	889a      	ldrh	r2, [r3, #4]
    8ac6:	8859      	ldrh	r1, [r3, #2]
    8ac8:	b2a0      	uxth	r0, r4
    8aca:	f007 fd66 	bl	1059a <ll_length_req_send>
    8ace:	e564      	b.n	859a <hci_cmd_handle+0x1ca>
	rp = cmd_complete(evt, sizeof(*rp));
    8ad0:	2105      	movs	r1, #5
    8ad2:	a807      	add	r0, sp, #28
    8ad4:	f7ff faba 	bl	804c <cmd_complete>
    8ad8:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    8ada:	1cc1      	adds	r1, r0, #3
    8adc:	3001      	adds	r0, #1
    8ade:	f007 fd7f 	bl	105e0 <ll_length_default_get>
	rp->status = 0x00;
    8ae2:	2300      	movs	r3, #0
    8ae4:	7023      	strb	r3, [r4, #0]
    8ae6:	e4e6      	b.n	84b6 <hci_cmd_handle+0xe6>
    8ae8:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    8aea:	8859      	ldrh	r1, [r3, #2]
    8aec:	8818      	ldrh	r0, [r3, #0]
    8aee:	f007 fd81 	bl	105f4 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8af2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8af4:	2101      	movs	r1, #1
    8af6:	a807      	add	r0, sp, #28
    8af8:	f7ff faa8 	bl	804c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8afc:	2c00      	cmp	r4, #0
    8afe:	bf18      	it	ne
    8b00:	231e      	movne	r3, #30
    8b02:	e73b      	b.n	897c <hci_cmd_handle+0x5ac>
	rp = cmd_complete(evt, sizeof(*rp));
    8b04:	2109      	movs	r1, #9
    8b06:	a807      	add	r0, sp, #28
    8b08:	f7ff faa0 	bl	804c <cmd_complete>
    8b0c:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8b0e:	1dc3      	adds	r3, r0, #7
    8b10:	1d42      	adds	r2, r0, #5
    8b12:	1cc1      	adds	r1, r0, #3
    8b14:	3001      	adds	r0, #1
    8b16:	f007 fd77 	bl	10608 <ll_length_max_get>
    8b1a:	e7e2      	b.n	8ae2 <hci_cmd_handle+0x712>
    8b1c:	20003d80 	.word	0x20003d80
    8b20:	130f3370 	.word	0x130f3370
    8b24:	20000860 	.word	0x20000860
    8b28:	20000864 	.word	0x20000864
    8b2c:	20003d78 	.word	0x20003d78
	handle = sys_le16_to_cpu(cmd->handle);
    8b30:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8b32:	2105      	movs	r1, #5
    8b34:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8b36:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8b38:	f7ff fa88 	bl	804c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8b3c:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8b3e:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8b40:	1d02      	adds	r2, r0, #4
    8b42:	1cc1      	adds	r1, r0, #3
    8b44:	4630      	mov	r0, r6
    8b46:	f007 fd68 	bl	1061a <ll_phy_get>
	return __builtin_ffs(op);
    8b4a:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    8b4c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8b50:	2800      	cmp	r0, #0
    8b52:	bf14      	ite	ne
    8b54:	230c      	movne	r3, #12
    8b56:	2300      	moveq	r3, #0
    8b58:	7023      	strb	r3, [r4, #0]
    8b5a:	2a00      	cmp	r2, #0
    8b5c:	fa92 f3a2 	rbit	r3, r2
    8b60:	fab3 f383 	clz	r3, r3
    8b64:	7922      	ldrb	r2, [r4, #4]
    8b66:	bf08      	it	eq
    8b68:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8b6c:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8b6e:	70e3      	strb	r3, [r4, #3]
    8b70:	2a00      	cmp	r2, #0
    8b72:	fa92 f3a2 	rbit	r3, r2
    8b76:	fab3 f383 	clz	r3, r3
    8b7a:	bf08      	it	eq
    8b7c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8b80:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8b82:	7123      	strb	r3, [r4, #4]
    8b84:	e497      	b.n	84b6 <hci_cmd_handle+0xe6>
    8b86:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b88:	781a      	ldrb	r2, [r3, #0]
    8b8a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    8b8c:	bf44      	itt	mi
    8b8e:	2107      	movmi	r1, #7
    8b90:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8b92:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8b94:	bf44      	itt	mi
    8b96:	2207      	movmi	r2, #7
    8b98:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8b9a:	7899      	ldrb	r1, [r3, #2]
    8b9c:	7858      	ldrb	r0, [r3, #1]
    8b9e:	f007 fd51 	bl	10644 <ll_phy_default_set>
    8ba2:	e7a6      	b.n	8af2 <hci_cmd_handle+0x722>
    8ba4:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8ba6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    8ba8:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8baa:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8bae:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    8bb0:	bf44      	itt	mi
    8bb2:	2103      	movmi	r1, #3
    8bb4:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    8bb6:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8bb8:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    8bba:	bf44      	itt	mi
    8bbc:	2203      	movmi	r2, #3
    8bbe:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8bc0:	074d      	lsls	r5, r1, #29
    8bc2:	d002      	beq.n	8bca <hci_cmd_handle+0x7fa>
	    !(cmd->rx_phys & 0x07)) {
    8bc4:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8bc6:	075a      	lsls	r2, r3, #29
    8bc8:	d105      	bne.n	8bd6 <hci_cmd_handle+0x806>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8bca:	2101      	movs	r1, #1
    8bcc:	a807      	add	r0, sp, #28
    8bce:	f7ff fa3d 	bl	804c <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    8bd2:	2312      	movs	r3, #18
    8bd4:	e6d4      	b.n	8980 <hci_cmd_handle+0x5b0>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    8bd6:	ea41 0203 	orr.w	r2, r1, r3
    8bda:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    8bde:	d005      	beq.n	8bec <hci_cmd_handle+0x81c>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8be0:	2101      	movs	r1, #1
    8be2:	a807      	add	r0, sp, #28
    8be4:	f7ff fa32 	bl	804c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    8be8:	2311      	movs	r3, #17
    8bea:	e6c9      	b.n	8980 <hci_cmd_handle+0x5b0>
	if (phy_opts & 0x03) {
    8bec:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    8bf0:	bf1c      	itt	ne
    8bf2:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    8bf6:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8bfa:	f007 fd2d 	bl	10658 <ll_phy_req_send>
    8bfe:	e453      	b.n	84a8 <hci_cmd_handle+0xd8>
    8c00:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8c02:	f100 0217 	add.w	r2, r0, #23
    8c06:	1dc1      	adds	r1, r0, #7
    8c08:	f008 feb4 	bl	11974 <ll_rl_add>
    8c0c:	e655      	b.n	88ba <hci_cmd_handle+0x4ea>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8c0e:	68a0      	ldr	r0, [r4, #8]
    8c10:	f008 ff52 	bl	11ab8 <ll_rl_remove>
    8c14:	e651      	b.n	88ba <hci_cmd_handle+0x4ea>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8c16:	2101      	movs	r1, #1
    8c18:	a807      	add	r0, sp, #28
    8c1a:	f7ff fa17 	bl	804c <cmd_complete>
    8c1e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    8c20:	f008 fe8e 	bl	11940 <ll_rl_clear>
    8c24:	e65d      	b.n	88e2 <hci_cmd_handle+0x512>
	rp = cmd_complete(evt, sizeof(*rp));
    8c26:	2102      	movs	r1, #2
    8c28:	a807      	add	r0, sp, #28
    8c2a:	f7ff fa0f 	bl	804c <cmd_complete>
    8c2e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8c30:	f008 fe84 	bl	1193c <ll_rl_size_get>
    8c34:	7060      	strb	r0, [r4, #1]
    8c36:	e754      	b.n	8ae2 <hci_cmd_handle+0x712>
    8c38:	2207      	movs	r2, #7
    8c3a:	68a1      	ldr	r1, [r4, #8]
    8c3c:	a808      	add	r0, sp, #32
    8c3e:	f7f8 ffef 	bl	1c20 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8c42:	2107      	movs	r1, #7
    8c44:	a807      	add	r0, sp, #28
    8c46:	f7ff fa01 	bl	804c <cmd_complete>
    8c4a:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    8c4c:	1c41      	adds	r1, r0, #1
    8c4e:	a808      	add	r0, sp, #32
    8c50:	f008 ffc0 	bl	11bd4 <ll_rl_crpa_get>
    8c54:	e645      	b.n	88e2 <hci_cmd_handle+0x512>
    8c56:	2207      	movs	r2, #7
    8c58:	68a1      	ldr	r1, [r4, #8]
    8c5a:	a808      	add	r0, sp, #32
    8c5c:	f7f8 ffe0 	bl	1c20 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8c60:	2107      	movs	r1, #7
    8c62:	a807      	add	r0, sp, #28
    8c64:	f7ff f9f2 	bl	804c <cmd_complete>
    8c68:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    8c6a:	1c41      	adds	r1, r0, #1
    8c6c:	a808      	add	r0, sp, #32
    8c6e:	f008 ffd1 	bl	11c14 <ll_rl_lrpa_get>
    8c72:	e636      	b.n	88e2 <hci_cmd_handle+0x512>
	u8_t enable = cmd->enable;
    8c74:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8c76:	2101      	movs	r1, #1
    8c78:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    8c7a:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8c7c:	f7ff f9e6 	bl	804c <cmd_complete>
    8c80:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    8c82:	4628      	mov	r0, r5
    8c84:	f008 ffde 	bl	11c44 <ll_rl_enable>
    8c88:	e62b      	b.n	88e2 <hci_cmd_handle+0x512>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    8c8a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    8c8c:	8818      	ldrh	r0, [r3, #0]
    8c8e:	f008 ffeb 	bl	11c68 <ll_rl_timeout_set>
    8c92:	e430      	b.n	84f6 <hci_cmd_handle+0x126>
    8c94:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8c96:	79c1      	ldrb	r1, [r0, #7]
    8c98:	f008 ffee 	bl	11c78 <ll_priv_mode_set>
    8c9c:	e60d      	b.n	88ba <hci_cmd_handle+0x4ea>
	rp = cmd_complete(evt, sizeof(*rp));
    8c9e:	2103      	movs	r1, #3
    8ca0:	a807      	add	r0, sp, #28
    8ca2:	f7ff f9d3 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8ca6:	4601      	mov	r1, r0
    8ca8:	2300      	movs	r3, #0
    8caa:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    8cae:	3001      	adds	r0, #1
    8cb0:	f7ff f82e 	bl	7d10 <ll_tx_pwr_get>
    8cb4:	f7ff bbff 	b.w	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    8cb8:	210d      	movs	r1, #13
    8cba:	a807      	add	r0, sp, #28
    8cbc:	f7ff f9c6 	bl	804c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8cc0:	2202      	movs	r2, #2
    8cc2:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8cc4:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    8cc6:	2201      	movs	r2, #1
    8cc8:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8cca:	220c      	movs	r2, #12
	rp->status = 0x00;
    8ccc:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8cce:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8cd0:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    8cd2:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8cd4:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8cd6:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    8cd8:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8cda:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8cdc:	7242      	strb	r2, [r0, #9]
    8cde:	7283      	strb	r3, [r0, #10]
    8ce0:	72c3      	strb	r3, [r0, #11]
    8ce2:	7303      	strb	r3, [r0, #12]
    8ce4:	f7ff bbe7 	b.w	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    8ce8:	2141      	movs	r1, #65	; 0x41
    8cea:	a807      	add	r0, sp, #28
    8cec:	f7ff f9ae 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8cf0:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8cf2:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8cf4:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8cf6:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8cfa:	f7f8 ffbd 	bl	1c78 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    8cfe:	7863      	ldrb	r3, [r4, #1]
    8d00:	f063 0358 	orn	r3, r3, #88	; 0x58
    8d04:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    8d06:	78a3      	ldrb	r3, [r4, #2]
    8d08:	f043 0303 	orr.w	r3, r3, #3
    8d0c:	70a3      	strb	r3, [r4, #2]
    8d0e:	f7ff bbd2 	b.w	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    8d12:	2109      	movs	r1, #9
    8d14:	a807      	add	r0, sp, #28
    8d16:	f7ff f999 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8d1a:	2100      	movs	r1, #0
    8d1c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8d20:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    8d22:	f7f8 ffa9 	bl	1c78 <memset>
    8d26:	f7ff bbc6 	b.w	84b6 <hci_cmd_handle+0xe6>
	const char build_info[] = HCI_VS_BUILD_INFO;
    8d2a:	4b5c      	ldr	r3, [pc, #368]	; (8e9c <hci_cmd_handle+0xacc>)
    8d2c:	aa08      	add	r2, sp, #32
    8d2e:	f103 0628 	add.w	r6, r3, #40	; 0x28
    8d32:	4615      	mov	r5, r2
    8d34:	6818      	ldr	r0, [r3, #0]
    8d36:	6859      	ldr	r1, [r3, #4]
    8d38:	4614      	mov	r4, r2
    8d3a:	c403      	stmia	r4!, {r0, r1}
    8d3c:	3308      	adds	r3, #8
    8d3e:	42b3      	cmp	r3, r6
    8d40:	4622      	mov	r2, r4
    8d42:	d1f7      	bne.n	8d34 <hci_cmd_handle+0x964>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    8d44:	2129      	movs	r1, #41	; 0x29
    8d46:	a807      	add	r0, sp, #28
    8d48:	f7ff f980 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8d4c:	2300      	movs	r3, #0
    8d4e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    8d52:	2228      	movs	r2, #40	; 0x28
    8d54:	4629      	mov	r1, r5
    8d56:	e5de      	b.n	8916 <hci_cmd_handle+0x546>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    8d58:	68a1      	ldr	r1, [r4, #8]
    8d5a:	2000      	movs	r0, #0
    8d5c:	f7fe ffbc 	bl	7cd8 <ll_addr_set>
    8d60:	f7ff bbc9 	b.w	84f6 <hci_cmd_handle+0x126>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8d64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d68:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    8d6c:	3201      	adds	r2, #1
    8d6e:	d106      	bne.n	8d7e <hci_cmd_handle+0x9ae>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8d70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8d78:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8d7a:	4293      	cmp	r3, r2
    8d7c:	d020      	beq.n	8dc0 <hci_cmd_handle+0x9f0>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    8d7e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8d82:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8d86:	07db      	lsls	r3, r3, #31
    8d88:	d51a      	bpl.n	8dc0 <hci_cmd_handle+0x9f0>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    8d8a:	2118      	movs	r1, #24
    8d8c:	a807      	add	r0, sp, #28
    8d8e:	f7ff f95d 	bl	804c <cmd_complete>
		rp->status = 0x00;
    8d92:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    8d94:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    8d96:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    8d98:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    8d9a:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    8d9c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    8da0:	1ca1      	adds	r1, r4, #2
    8da2:	f7ff f90f 	bl	7fc4 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    8da6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    8daa:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    8dac:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    8db0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8db4:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    8db6:	2210      	movs	r2, #16
    8db8:	4631      	mov	r1, r6
    8dba:	f104 0008 	add.w	r0, r4, #8
    8dbe:	e7b0      	b.n	8d22 <hci_cmd_handle+0x952>
	rp = cmd_complete(evt, sizeof(*rp));
    8dc0:	2102      	movs	r1, #2
    8dc2:	a807      	add	r0, sp, #28
    8dc4:	f7ff f942 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8dc8:	2300      	movs	r3, #0
    8dca:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    8dcc:	7043      	strb	r3, [r0, #1]
    8dce:	f7ff bb72 	b.w	84b6 <hci_cmd_handle+0xe6>
	rp = cmd_complete(evt, sizeof(*rp));
    8dd2:	2121      	movs	r1, #33	; 0x21
    8dd4:	a807      	add	r0, sp, #28
    8dd6:	f7ff f939 	bl	804c <cmd_complete>
	rp->status = 0x00;
    8dda:	4603      	mov	r3, r0
    8ddc:	2200      	movs	r2, #0
    8dde:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    8de6:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8de8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    8dec:	3101      	adds	r1, #1
    8dee:	d04b      	beq.n	8e88 <hci_cmd_handle+0xab8>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8df0:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8df4:	3101      	adds	r1, #1
    8df6:	d047      	beq.n	8e88 <hci_cmd_handle+0xab8>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8df8:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8dfc:	3101      	adds	r1, #1
    8dfe:	d043      	beq.n	8e88 <hci_cmd_handle+0xab8>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    8e00:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8e04:	3101      	adds	r1, #1
    8e06:	d03f      	beq.n	8e88 <hci_cmd_handle+0xab8>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    8e08:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    8e0c:	4619      	mov	r1, r3
    8e0e:	f7ff f8d9 	bl	7fc4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    8e12:	1d61      	adds	r1, r4, #5
    8e14:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    8e18:	f7ff f8d4 	bl	7fc4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    8e1c:	f104 0109 	add.w	r1, r4, #9
    8e20:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    8e24:	f7ff f8ce 	bl	7fc4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    8e28:	f104 010d 	add.w	r1, r4, #13
    8e2c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    8e30:	f7ff f8c8 	bl	7fc4 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8e38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8e3c:	3301      	adds	r3, #1
    8e3e:	f104 0311 	add.w	r3, r4, #17
    8e42:	d027      	beq.n	8e94 <hci_cmd_handle+0xac4>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8e44:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8e48:	3101      	adds	r1, #1
    8e4a:	d023      	beq.n	8e94 <hci_cmd_handle+0xac4>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8e4c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8e50:	3101      	adds	r1, #1
    8e52:	d01f      	beq.n	8e94 <hci_cmd_handle+0xac4>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    8e54:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8e58:	3101      	adds	r1, #1
    8e5a:	d01b      	beq.n	8e94 <hci_cmd_handle+0xac4>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    8e5c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    8e60:	4619      	mov	r1, r3
    8e62:	f7ff f8af 	bl	7fc4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    8e66:	f104 0115 	add.w	r1, r4, #21
    8e6a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    8e6e:	f7ff f8a9 	bl	7fc4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    8e72:	f104 0119 	add.w	r1, r4, #25
    8e76:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    8e7a:	f7ff f8a3 	bl	7fc4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8e7e:	f104 011d 	add.w	r1, r4, #29
    8e82:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    8e86:	e563      	b.n	8950 <hci_cmd_handle+0x580>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    8e88:	2210      	movs	r2, #16
    8e8a:	2100      	movs	r1, #0
    8e8c:	4618      	mov	r0, r3
    8e8e:	f7f8 fef3 	bl	1c78 <memset>
    8e92:	e7cf      	b.n	8e34 <hci_cmd_handle+0xa64>
		memset(rp->er, 0x00, sizeof(rp->er));
    8e94:	2210      	movs	r2, #16
    8e96:	2100      	movs	r1, #0
    8e98:	4618      	mov	r0, r3
    8e9a:	e742      	b.n	8d22 <hci_cmd_handle+0x952>
    8e9c:	00016883 	.word	0x00016883

00008ea0 <hci_acl_handle>:
{
    8ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    8ea4:	2300      	movs	r3, #0
    8ea6:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    8ea8:	8983      	ldrh	r3, [r0, #12]
    8eaa:	2b03      	cmp	r3, #3
{
    8eac:	4606      	mov	r6, r0
    8eae:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    8eb0:	d80d      	bhi.n	8ece <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    8eb2:	4a3b      	ldr	r2, [pc, #236]	; (8fa0 <hci_acl_handle+0x100>)
    8eb4:	4b3b      	ldr	r3, [pc, #236]	; (8fa4 <hci_acl_handle+0x104>)
    8eb6:	9201      	str	r2, [sp, #4]
    8eb8:	9200      	str	r2, [sp, #0]
    8eba:	681c      	ldr	r4, [r3, #0]
    8ebc:	493a      	ldr	r1, [pc, #232]	; (8fa8 <hci_acl_handle+0x108>)
    8ebe:	4b3b      	ldr	r3, [pc, #236]	; (8fac <hci_acl_handle+0x10c>)
    8ec0:	483b      	ldr	r0, [pc, #236]	; (8fb0 <hci_acl_handle+0x110>)
		BT_ERR("Invalid HCI ACL packet length");
    8ec2:	47a0      	blx	r4
		return -EINVAL;
    8ec4:	f06f 0015 	mvn.w	r0, #21
}
    8ec8:	b003      	add	sp, #12
    8eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    8ece:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    8ed2:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    8ed4:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    8ed6:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    8ed8:	f009 fe55 	bl	12b86 <net_buf_simple_pull>
	if (buf->len < len) {
    8edc:	89b3      	ldrh	r3, [r6, #12]
    8ede:	42bb      	cmp	r3, r7
    8ee0:	d208      	bcs.n	8ef4 <hci_acl_handle+0x54>
		BT_ERR("Invalid HCI ACL packet length");
    8ee2:	4a2f      	ldr	r2, [pc, #188]	; (8fa0 <hci_acl_handle+0x100>)
    8ee4:	4b2f      	ldr	r3, [pc, #188]	; (8fa4 <hci_acl_handle+0x104>)
    8ee6:	9201      	str	r2, [sp, #4]
    8ee8:	9200      	str	r2, [sp, #0]
    8eea:	681c      	ldr	r4, [r3, #0]
    8eec:	492e      	ldr	r1, [pc, #184]	; (8fa8 <hci_acl_handle+0x108>)
    8eee:	4b2f      	ldr	r3, [pc, #188]	; (8fac <hci_acl_handle+0x10c>)
    8ef0:	4830      	ldr	r0, [pc, #192]	; (8fb4 <hci_acl_handle+0x114>)
    8ef2:	e7e6      	b.n	8ec2 <hci_acl_handle+0x22>
	node_tx = ll_tx_mem_acquire();
    8ef4:	f007 fcba 	bl	1086c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    8ef8:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    8efc:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    8efe:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    8f02:	bb30      	cbnz	r0, 8f52 <hci_acl_handle+0xb2>
		BT_ERR("Tx Buffer Overflow");
    8f04:	4a26      	ldr	r2, [pc, #152]	; (8fa0 <hci_acl_handle+0x100>)
    8f06:	4b27      	ldr	r3, [pc, #156]	; (8fa4 <hci_acl_handle+0x104>)
    8f08:	9201      	str	r2, [sp, #4]
    8f0a:	9200      	str	r2, [sp, #0]
    8f0c:	681c      	ldr	r4, [r3, #0]
    8f0e:	4926      	ldr	r1, [pc, #152]	; (8fa8 <hci_acl_handle+0x108>)
    8f10:	4b26      	ldr	r3, [pc, #152]	; (8fac <hci_acl_handle+0x10c>)
    8f12:	4829      	ldr	r0, [pc, #164]	; (8fb8 <hci_acl_handle+0x118>)
    8f14:	47a0      	blx	r4
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    8f16:	4b29      	ldr	r3, [pc, #164]	; (8fbc <hci_acl_handle+0x11c>)
    8f18:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f1c:	2300      	movs	r3, #0
    8f1e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    8f22:	4313      	orrs	r3, r2
    8f24:	d012      	beq.n	8f4c <hci_acl_handle+0xac>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f2a:	2001      	movs	r0, #1
    8f2c:	f7fa fe0a 	bl	3b44 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    8f30:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f32:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    8f36:	211a      	movs	r1, #26
    8f38:	f7ff f84d 	bl	7fd6 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    8f3c:	f8d8 0000 	ldr.w	r0, [r8]
    8f40:	2101      	movs	r1, #1
    8f42:	3008      	adds	r0, #8
    8f44:	f009 fe00 	bl	12b48 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    8f48:	2301      	movs	r3, #1
    8f4a:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    8f4c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8f50:	e7ba      	b.n	8ec8 <hci_acl_handle+0x28>
    8f52:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    8f54:	f1b9 0f00 	cmp.w	r9, #0
    8f58:	d002      	beq.n	8f60 <hci_acl_handle+0xc0>
    8f5a:	f1b9 0f02 	cmp.w	r9, #2
    8f5e:	d11c      	bne.n	8f9a <hci_acl_handle+0xfa>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    8f60:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8f62:	f362 0301 	bfi	r3, r2, #0, #2
    8f66:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    8f68:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    8f6a:	68b1      	ldr	r1, [r6, #8]
    8f6c:	463a      	mov	r2, r7
    8f6e:	1de0      	adds	r0, r4, #7
    8f70:	f7f8 fe56 	bl	1c20 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    8f74:	4621      	mov	r1, r4
    8f76:	4628      	mov	r0, r5
    8f78:	f007 fc84 	bl	10884 <ll_tx_mem_enqueue>
    8f7c:	2800      	cmp	r0, #0
    8f7e:	d0a3      	beq.n	8ec8 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    8f80:	4a07      	ldr	r2, [pc, #28]	; (8fa0 <hci_acl_handle+0x100>)
    8f82:	4b08      	ldr	r3, [pc, #32]	; (8fa4 <hci_acl_handle+0x104>)
    8f84:	9201      	str	r2, [sp, #4]
    8f86:	9200      	str	r2, [sp, #0]
    8f88:	681d      	ldr	r5, [r3, #0]
    8f8a:	4907      	ldr	r1, [pc, #28]	; (8fa8 <hci_acl_handle+0x108>)
    8f8c:	4b07      	ldr	r3, [pc, #28]	; (8fac <hci_acl_handle+0x10c>)
    8f8e:	480c      	ldr	r0, [pc, #48]	; (8fc0 <hci_acl_handle+0x120>)
    8f90:	47a8      	blx	r5
		ll_tx_mem_release(node_tx);
    8f92:	4620      	mov	r0, r4
    8f94:	f007 fc70 	bl	10878 <ll_tx_mem_release>
    8f98:	e794      	b.n	8ec4 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8f9a:	2201      	movs	r2, #1
    8f9c:	e7e1      	b.n	8f62 <hci_acl_handle+0xc2>
    8f9e:	bf00      	nop
    8fa0:	00014891 	.word	0x00014891
    8fa4:	20003aa4 	.word	0x20003aa4
    8fa8:	00015639 	.word	0x00015639
    8fac:	000166fb 	.word	0x000166fb
    8fb0:	00016799 	.word	0x00016799
    8fb4:	000167bb 	.word	0x000167bb
    8fb8:	000167e9 	.word	0x000167e9
    8fbc:	20003d78 	.word	0x20003d78
    8fc0:	0001680c 	.word	0x0001680c

00008fc4 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    8fc4:	7a03      	ldrb	r3, [r0, #8]
    8fc6:	f003 0303 	and.w	r3, r3, #3
    8fca:	3b01      	subs	r3, #1
    8fcc:	2b01      	cmp	r3, #1
{
    8fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8fd0:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    8fd2:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    8fd4:	d81c      	bhi.n	9010 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    8fd6:	f101 0608 	add.w	r6, r1, #8
    8fda:	4630      	mov	r0, r6
    8fdc:	2104      	movs	r1, #4
    8fde:	f009 fdb3 	bl	12b48 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8fe2:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    8fe4:	7a61      	ldrb	r1, [r4, #9]
    8fe6:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8fe8:	f003 0303 	and.w	r3, r3, #3
    8fec:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    8fee:	bf0c      	ite	eq
    8ff0:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    8ff4:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    8ff8:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    8ffa:	4630      	mov	r0, r6
    8ffc:	f009 fda4 	bl	12b48 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9000:	7a62      	ldrb	r2, [r4, #9]
    9002:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    9006:	b002      	add	sp, #8
    9008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    900c:	f7f8 be08 	b.w	1c20 <memcpy>
		LL_ASSERT(0);
    9010:	4a07      	ldr	r2, [pc, #28]	; (9030 <hci_acl_encode+0x6c>)
    9012:	4b08      	ldr	r3, [pc, #32]	; (9034 <hci_acl_encode+0x70>)
    9014:	9201      	str	r2, [sp, #4]
    9016:	9200      	str	r2, [sp, #0]
    9018:	681c      	ldr	r4, [r3, #0]
    901a:	4907      	ldr	r1, [pc, #28]	; (9038 <hci_acl_encode+0x74>)
    901c:	4b07      	ldr	r3, [pc, #28]	; (903c <hci_acl_encode+0x78>)
    901e:	4808      	ldr	r0, [pc, #32]	; (9040 <hci_acl_encode+0x7c>)
    9020:	47a0      	blx	r4
    9022:	4040      	eors	r0, r0
    9024:	f380 8811 	msr	BASEPRI, r0
    9028:	f04f 0004 	mov.w	r0, #4
    902c:	df02      	svc	2
    902e:	bf00      	nop
    9030:	00014891 	.word	0x00014891
    9034:	20003aa4 	.word	0x20003aa4
    9038:	00015639 	.word	0x00015639
    903c:	0001678a 	.word	0x0001678a
    9040:	00015597 	.word	0x00015597

00009044 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9048:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    904a:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    904c:	2b01      	cmp	r3, #1
{
    904e:	b093      	sub	sp, #76	; 0x4c
    9050:	4604      	mov	r4, r0
    9052:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9054:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9058:	f000 82a5 	beq.w	95a6 <hci_evt_encode+0x562>
	switch (node_rx->hdr.type) {
    905c:	3b02      	subs	r3, #2
    905e:	2b0a      	cmp	r3, #10
    9060:	f200 8298 	bhi.w	9594 <hci_evt_encode+0x550>
    9064:	e8df f013 	tbh	[pc, r3, lsl #1]
    9068:	0134000b 	.word	0x0134000b
    906c:	013c013a 	.word	0x013c013a
    9070:	01b80183 	.word	0x01b80183
    9074:	01fb01d6 	.word	0x01fb01d6
    9078:	02280213 	.word	0x02280213
    907c:	0243      	.short	0x0243
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    907e:	2301      	movs	r3, #1
    9080:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9084:	2303      	movs	r3, #3
    9086:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    908a:	23ff      	movs	r3, #255	; 0xff
    908c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9090:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9094:	2302      	movs	r3, #2
    9096:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    909a:	7a43      	ldrb	r3, [r0, #9]
    909c:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    909e:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    90a0:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    90a4:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    90a6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    90aa:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    90ac:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    90ae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    90b2:	d505      	bpl.n	90c0 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    90b4:	f104 030a 	add.w	r3, r4, #10
    90b8:	464a      	mov	r2, r9
    90ba:	4608      	mov	r0, r1
    90bc:	f008 fd68 	bl	11b90 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    90c0:	4bb8      	ldr	r3, [pc, #736]	; (93a4 <hci_evt_encode+0x360>)
    90c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    90c6:	2200      	movs	r2, #0
    90c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    90cc:	4313      	orrs	r3, r2
    90ce:	f000 80b9 	beq.w	9244 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    90d2:	7a63      	ldrb	r3, [r4, #9]
    90d4:	4423      	add	r3, r4
    90d6:	f893 a00c 	ldrb.w	sl, [r3, #12]
    90da:	4bb3      	ldr	r3, [pc, #716]	; (93a8 <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    90dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    90e0:	f1ba 0f00 	cmp.w	sl, #0
    90e4:	d13d      	bne.n	9162 <hci_evt_encode+0x11e>
    90e6:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    90ea:	2300      	movs	r3, #0
    90ec:	4313      	orrs	r3, r2
    90ee:	f000 80a9 	beq.w	9244 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    90f2:	4bae      	ldr	r3, [pc, #696]	; (93ac <hci_evt_encode+0x368>)
    90f4:	681a      	ldr	r2, [r3, #0]
    90f6:	2a00      	cmp	r2, #0
    90f8:	4698      	mov	r8, r3
    90fa:	db54      	blt.n	91a6 <hci_evt_encode+0x162>
    90fc:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 93d4 <hci_evt_encode+0x390>
    9100:	2600      	movs	r6, #0
    9102:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    9106:	f8d8 2000 	ldr.w	r2, [r8]
    910a:	4296      	cmp	r6, r2
    910c:	db2c      	blt.n	9168 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    910e:	4ea8      	ldr	r6, [pc, #672]	; (93b0 <hci_evt_encode+0x36c>)
    9110:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 93b4 <hci_evt_encode+0x370>
    9114:	6830      	ldr	r0, [r6, #0]
    9116:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    911a:	4619      	mov	r1, r3
    911c:	2206      	movs	r2, #6
    911e:	3002      	adds	r0, #2
    9120:	f7f8 fd7e 	bl	1c20 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    9124:	6832      	ldr	r2, [r6, #0]
    9126:	7a23      	ldrb	r3, [r4, #8]
    9128:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    912c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9130:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    9132:	7a23      	ldrb	r3, [r4, #8]
    9134:	f003 010f 	and.w	r1, r3, #15
    9138:	2301      	movs	r3, #1
    913a:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    913c:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    9140:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9144:	290f      	cmp	r1, #15
			dup_count++;
    9146:	bfd5      	itete	le
    9148:	3101      	addle	r1, #1
			dup_curr++;
    914a:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    914c:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    914e:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9150:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    9152:	bfd8      	it	le
    9154:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9158:	2a10      	cmp	r2, #16
    915a:	d124      	bne.n	91a6 <hci_evt_encode+0x162>
			dup_curr = 0;
    915c:	2200      	movs	r2, #0
    915e:	6032      	str	r2, [r6, #0]
    9160:	e021      	b.n	91a6 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9162:	f002 020b 	and.w	r2, r2, #11
    9166:	e7c0      	b.n	90ea <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    9168:	4618      	mov	r0, r3
    916a:	2206      	movs	r2, #6
    916c:	4659      	mov	r1, fp
    916e:	9307      	str	r3, [sp, #28]
    9170:	f7f8 fd41 	bl	1bf6 <memcmp>
    9174:	9b07      	ldr	r3, [sp, #28]
    9176:	bb00      	cbnz	r0, 91ba <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    9178:	7a21      	ldrb	r1, [r4, #8]
    917a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    917e:	460a      	mov	r2, r1
    9180:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9184:	4281      	cmp	r1, r0
    9186:	d118      	bne.n	91ba <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    9188:	488a      	ldr	r0, [pc, #552]	; (93b4 <hci_evt_encode+0x370>)
    918a:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    918e:	f002 020f 	and.w	r2, r2, #15
    9192:	fa23 f102 	lsr.w	r1, r3, r2
    9196:	07c9      	lsls	r1, r1, #31
    9198:	d454      	bmi.n	9244 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    919a:	2101      	movs	r1, #1
    919c:	fa01 f202 	lsl.w	r2, r1, r2
    91a0:	4313      	orrs	r3, r2
    91a2:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    91a6:	f894 b008 	ldrb.w	fp, [r4, #8]
    91aa:	7a63      	ldrb	r3, [r4, #9]
    91ac:	f00b 0b0f 	and.w	fp, fp, #15
    91b0:	f1bb 0f01 	cmp.w	fp, #1
    91b4:	d105      	bne.n	91c2 <hci_evt_encode+0x17e>
		data_len = 0;
    91b6:	2600      	movs	r6, #0
    91b8:	e005      	b.n	91c6 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    91ba:	3601      	adds	r6, #1
    91bc:	f10b 0b08 	add.w	fp, fp, #8
    91c0:	e7a1      	b.n	9106 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    91c2:	1f9e      	subs	r6, r3, #6
    91c4:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    91c6:	4423      	add	r3, r4
    91c8:	f893 800a 	ldrb.w	r8, [r3, #10]
    91cc:	f1c8 0800 	rsb	r8, r8, #0
    91d0:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    91d4:	f1ba 0f00 	cmp.w	sl, #0
    91d8:	d041      	beq.n	925e <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    91da:	f1bb 0f01 	cmp.w	fp, #1
    91de:	d00e      	beq.n	91fe <hci_evt_encode+0x1ba>
    91e0:	4a75      	ldr	r2, [pc, #468]	; (93b8 <hci_evt_encode+0x374>)
    91e2:	4b76      	ldr	r3, [pc, #472]	; (93bc <hci_evt_encode+0x378>)
    91e4:	9201      	str	r2, [sp, #4]
    91e6:	9200      	str	r2, [sp, #0]
    91e8:	681c      	ldr	r4, [r3, #0]
    91ea:	4975      	ldr	r1, [pc, #468]	; (93c0 <hci_evt_encode+0x37c>)
    91ec:	4b75      	ldr	r3, [pc, #468]	; (93c4 <hci_evt_encode+0x380>)
    91ee:	4876      	ldr	r0, [pc, #472]	; (93c8 <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    91f0:	47a0      	blx	r4
    91f2:	4040      	eors	r0, r0
    91f4:	f380 8811 	msr	BASEPRI, r0
    91f8:	f04f 0004 	mov.w	r0, #4
    91fc:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    91fe:	2211      	movs	r2, #17
    9200:	210b      	movs	r1, #11
    9202:	4628      	mov	r0, r5
    9204:	f7fe ff0c 	bl	8020 <meta_evt>
		drp->num_reports = 1;
    9208:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    920c:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    9210:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    9212:	f008 fb93 	bl	1193c <ll_rl_size_get>
    9216:	4581      	cmp	r9, r0
    9218:	f105 0003 	add.w	r0, r5, #3
    921c:	d215      	bcs.n	924a <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    921e:	4602      	mov	r2, r0
    9220:	1ca9      	adds	r1, r5, #2
    9222:	4648      	mov	r0, r9
    9224:	f008 fa26 	bl	11674 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    9228:	78ab      	ldrb	r3, [r5, #2]
    922a:	3302      	adds	r3, #2
    922c:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    922e:	2301      	movs	r3, #1
    9230:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    9232:	2206      	movs	r2, #6
    9234:	f107 0108 	add.w	r1, r7, #8
    9238:	f105 000a 	add.w	r0, r5, #10
    923c:	f7f8 fcf0 	bl	1c20 <memcpy>
		dir_info->rssi = rssi;
    9240:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9244:	b013      	add	sp, #76	; 0x4c
    9246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    924a:	7a23      	ldrb	r3, [r4, #8]
    924c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9250:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    9252:	2206      	movs	r2, #6
    9254:	f104 010a 	add.w	r1, r4, #10
    9258:	f7f8 fce2 	bl	1c20 <memcpy>
    925c:	e7e7      	b.n	922e <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    925e:	f106 020b 	add.w	r2, r6, #11
    9262:	b2d2      	uxtb	r2, r2
    9264:	2102      	movs	r1, #2
    9266:	4628      	mov	r0, r5
    9268:	f7fe feda 	bl	8020 <meta_evt>
	sep->num_reports = 1;
    926c:	2301      	movs	r3, #1
    926e:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    9270:	7a23      	ldrb	r3, [r4, #8]
    9272:	aa12      	add	r2, sp, #72	; 0x48
    9274:	f003 030f 	and.w	r3, r3, #15
    9278:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    927a:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    927c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    9280:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9282:	7a63      	ldrb	r3, [r4, #9]
    9284:	4423      	add	r3, r4
    9286:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    928a:	f008 fb57 	bl	1193c <ll_rl_size_get>
    928e:	4581      	cmp	r9, r0
    9290:	f105 0003 	add.w	r0, r5, #3
    9294:	d212      	bcs.n	92bc <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    9296:	4602      	mov	r2, r0
    9298:	1ca9      	adds	r1, r5, #2
    929a:	4648      	mov	r0, r9
    929c:	f008 f9ea 	bl	11674 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    92a0:	78ab      	ldrb	r3, [r5, #2]
    92a2:	3302      	adds	r3, #2
    92a4:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    92a6:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    92a8:	350a      	adds	r5, #10
    92aa:	4632      	mov	r2, r6
    92ac:	f107 0108 	add.w	r1, r7, #8
    92b0:	4628      	mov	r0, r5
    92b2:	f7f8 fcb5 	bl	1c20 <memcpy>
	*prssi = rssi;
    92b6:	f805 8006 	strb.w	r8, [r5, r6]
    92ba:	e7c3      	b.n	9244 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    92bc:	7a23      	ldrb	r3, [r4, #8]
    92be:	f3c3 1380 	ubfx	r3, r3, #6, #1
    92c2:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    92c4:	2206      	movs	r2, #6
    92c6:	f104 010a 	add.w	r1, r4, #10
    92ca:	f7f8 fca9 	bl	1c20 <memcpy>
    92ce:	e7ea      	b.n	92a6 <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    92d0:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    92d2:	4621      	mov	r1, r4
    92d4:	4638      	mov	r0, r7
    92d6:	f7fe fffb 	bl	82d0 <le_adv_ext_report.isra.66>
    92da:	e7b3      	b.n	9244 <hci_evt_encode+0x200>
    92dc:	2204      	movs	r2, #4
    92de:	e7f8      	b.n	92d2 <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    92e0:	4b30      	ldr	r3, [pc, #192]	; (93a4 <hci_evt_encode+0x360>)
    92e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    92e6:	2200      	movs	r2, #0
    92e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    92ec:	4313      	orrs	r3, r2
    92ee:	f100 060a 	add.w	r6, r0, #10
    92f2:	d007      	beq.n	9304 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    92f4:	4b2c      	ldr	r3, [pc, #176]	; (93a8 <hci_evt_encode+0x364>)
    92f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    92fa:	2300      	movs	r3, #0
    92fc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9300:	4313      	orrs	r3, r2
    9302:	d123      	bne.n	934c <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    9304:	7a23      	ldrb	r3, [r4, #8]
    9306:	ad12      	add	r5, sp, #72	; 0x48
    9308:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    930c:	2206      	movs	r2, #6
    930e:	4631      	mov	r1, r6
    9310:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    9314:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9318:	f7f8 fc82 	bl	1c20 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    931c:	7a63      	ldrb	r3, [r4, #9]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    931e:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9320:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9322:	4631      	mov	r1, r6
    9324:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9326:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9328:	f7fe ff96 	bl	8258 <bt_addr_le_to_str.constprop.70>
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    932c:	4a22      	ldr	r2, [pc, #136]	; (93b8 <hci_evt_encode+0x374>)
    932e:	9204      	str	r2, [sp, #16]
    9330:	2300      	movs	r3, #0
    9332:	e88d 000c 	stmia.w	sp, {r2, r3}
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9336:	4264      	negs	r4, r4
    9338:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    933a:	4b20      	ldr	r3, [pc, #128]	; (93bc <hci_evt_encode+0x378>)
    933c:	9403      	str	r4, [sp, #12]
    933e:	9602      	str	r6, [sp, #8]
    9340:	681c      	ldr	r4, [r3, #0]
    9342:	491f      	ldr	r1, [pc, #124]	; (93c0 <hci_evt_encode+0x37c>)
    9344:	4b21      	ldr	r3, [pc, #132]	; (93cc <hci_evt_encode+0x388>)
    9346:	4822      	ldr	r0, [pc, #136]	; (93d0 <hci_evt_encode+0x38c>)
    9348:	47a0      	blx	r4
    934a:	e77b      	b.n	9244 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    934c:	2208      	movs	r2, #8
    934e:	2113      	movs	r1, #19
    9350:	4628      	mov	r0, r5
    9352:	f7fe fe65 	bl	8020 <meta_evt>
	sep->handle = 0;
    9356:	2300      	movs	r3, #0
    9358:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    935a:	7a23      	ldrb	r3, [r4, #8]
    935c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9360:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    9362:	2206      	movs	r2, #6
    9364:	4631      	mov	r1, r6
    9366:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9368:	f7f8 fc5a 	bl	1c20 <memcpy>
    936c:	e76a      	b.n	9244 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    936e:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    9370:	b93f      	cbnz	r7, 9382 <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    9372:	f100 0314 	add.w	r3, r0, #20
    9376:	f100 010e 	add.w	r1, r0, #14
    937a:	22ff      	movs	r2, #255	; 0xff
    937c:	7b40      	ldrb	r0, [r0, #13]
    937e:	f008 fc07 	bl	11b90 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9382:	4b08      	ldr	r3, [pc, #32]	; (93a4 <hci_evt_encode+0x360>)
    9384:	e9d3 2300 	ldrd	r2, r3, [r3]
    9388:	2200      	movs	r2, #0
    938a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    938e:	4313      	orrs	r3, r2
    9390:	f43f af58 	beq.w	9244 <hci_evt_encode+0x200>
    9394:	462b      	mov	r3, r5
    9396:	4632      	mov	r2, r6
    9398:	f104 010b 	add.w	r1, r4, #11
    939c:	4638      	mov	r0, r7
    939e:	f7fe fec5 	bl	812c <le_conn_complete.part.39>
    93a2:	e74f      	b.n	9244 <hci_evt_encode+0x200>
    93a4:	20003d78 	.word	0x20003d78
    93a8:	20003d80 	.word	0x20003d80
    93ac:	20000860 	.word	0x20000860
    93b0:	20000864 	.word	0x20000864
    93b4:	20000868 	.word	0x20000868
    93b8:	00014891 	.word	0x00014891
    93bc:	20003aa4 	.word	0x20003aa4
    93c0:	00015639 	.word	0x00015639
    93c4:	0001670a 	.word	0x0001670a
    93c8:	000168ab 	.word	0x000168ab
    93cc:	00016732 	.word	0x00016732
    93d0:	000168f1 	.word	0x000168f1
    93d4:	2000086a 	.word	0x2000086a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    93d8:	4bb2      	ldr	r3, [pc, #712]	; (96a4 <hci_evt_encode+0x660>)
    93da:	e9d3 2300 	ldrd	r2, r3, [r3]
    93de:	2300      	movs	r3, #0
    93e0:	f002 0210 	and.w	r2, r2, #16
    93e4:	4313      	orrs	r3, r2
    93e6:	f43f af2d 	beq.w	9244 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    93ea:	2204      	movs	r2, #4
    93ec:	2105      	movs	r1, #5
    93ee:	4628      	mov	r0, r5
    93f0:	f7fe fdf1 	bl	7fd6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    93f4:	2104      	movs	r1, #4
    93f6:	f105 0008 	add.w	r0, r5, #8
    93fa:	f009 fba5 	bl	12b48 <net_buf_simple_add>
	ep->status = 0x00;
    93fe:	2300      	movs	r3, #0
	conn_count--;
    9400:	4aa9      	ldr	r2, [pc, #676]	; (96a8 <hci_evt_encode+0x664>)
	ep->status = 0x00;
    9402:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9404:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    9408:	7a23      	ldrb	r3, [r4, #8]
    940a:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    940c:	6813      	ldr	r3, [r2, #0]
    940e:	3b01      	subs	r3, #1
    9410:	6013      	str	r3, [r2, #0]
    9412:	e717      	b.n	9244 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9414:	4ba3      	ldr	r3, [pc, #652]	; (96a4 <hci_evt_encode+0x660>)
    9416:	e9d3 2300 	ldrd	r2, r3, [r3]
    941a:	2200      	movs	r2, #0
    941c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9420:	4313      	orrs	r3, r2
    9422:	f43f af0f 	beq.w	9244 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    9426:	4ba1      	ldr	r3, [pc, #644]	; (96ac <hci_evt_encode+0x668>)
    9428:	e9d3 2300 	ldrd	r2, r3, [r3]
    942c:	2300      	movs	r3, #0
    942e:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9432:	4313      	orrs	r3, r2
    9434:	f43f af06 	beq.w	9244 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    9438:	2209      	movs	r2, #9
    943a:	2103      	movs	r1, #3
    943c:	4628      	mov	r0, r5
    943e:	f7fe fdef 	bl	8020 <meta_evt>
	sep->status = radio_cu->status;
    9442:	7ae3      	ldrb	r3, [r4, #11]
    9444:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9446:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9448:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    944c:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9450:	89e3      	ldrh	r3, [r4, #14]
    9452:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    9456:	8a23      	ldrh	r3, [r4, #16]
    9458:	f8a0 3007 	strh.w	r3, [r0, #7]
    945c:	e6f2      	b.n	9244 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    945e:	4b91      	ldr	r3, [pc, #580]	; (96a4 <hci_evt_encode+0x660>)
    9460:	e9d3 2300 	ldrd	r2, r3, [r3]
    9464:	2200      	movs	r2, #0
    9466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    946a:	4313      	orrs	r3, r2
    946c:	f43f aeea 	beq.w	9244 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    9470:	2203      	movs	r2, #3
    9472:	2130      	movs	r1, #48	; 0x30
    9474:	4628      	mov	r0, r5
    9476:	f7fe fdae 	bl	7fd6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    947a:	2103      	movs	r1, #3
    947c:	f105 0008 	add.w	r0, r5, #8
    9480:	f009 fb62 	bl	12b48 <net_buf_simple_add>
	ep->status = 0x00;
    9484:	2300      	movs	r3, #0
    9486:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9488:	f8a0 6001 	strh.w	r6, [r0, #1]
    948c:	e6da      	b.n	9244 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    948e:	4b88      	ldr	r3, [pc, #544]	; (96b0 <hci_evt_encode+0x66c>)
    9490:	e9d3 2300 	ldrd	r2, r3, [r3]
    9494:	2300      	movs	r3, #0
    9496:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    949a:	4313      	orrs	r3, r2
    949c:	f43f aed2 	beq.w	9244 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    94a0:	2202      	movs	r2, #2
    94a2:	2157      	movs	r1, #87	; 0x57
    94a4:	4628      	mov	r0, r5
    94a6:	f7fe fd96 	bl	7fd6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    94aa:	2102      	movs	r1, #2
    94ac:	f105 0008 	add.w	r0, r5, #8
    94b0:	f009 fb4a 	bl	12b48 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    94b4:	8006      	strh	r6, [r0, #0]
    94b6:	e6c5      	b.n	9244 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94b8:	4b7a      	ldr	r3, [pc, #488]	; (96a4 <hci_evt_encode+0x660>)
    94ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    94be:	2200      	movs	r2, #0
    94c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    94c4:	4313      	orrs	r3, r2
    94c6:	f43f aebd 	beq.w	9244 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    94ca:	4b78      	ldr	r3, [pc, #480]	; (96ac <hci_evt_encode+0x668>)
    94cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    94d0:	2300      	movs	r3, #0
    94d2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94d6:	4313      	orrs	r3, r2
    94d8:	f43f aeb4 	beq.w	9244 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    94dc:	2203      	movs	r2, #3
    94de:	2114      	movs	r1, #20
    94e0:	4628      	mov	r0, r5
    94e2:	f7fe fd9d 	bl	8020 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    94e6:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    94e8:	7ae3      	ldrb	r3, [r4, #11]
    94ea:	7083      	strb	r3, [r0, #2]
    94ec:	e6aa      	b.n	9244 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94ee:	4b6d      	ldr	r3, [pc, #436]	; (96a4 <hci_evt_encode+0x660>)
    94f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    94f4:	2200      	movs	r2, #0
    94f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    94fa:	4313      	orrs	r3, r2
    94fc:	d007      	beq.n	950e <hci_evt_encode+0x4ca>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    94fe:	4b6b      	ldr	r3, [pc, #428]	; (96ac <hci_evt_encode+0x668>)
    9500:	e9d3 2300 	ldrd	r2, r3, [r3]
    9504:	2300      	movs	r3, #0
    9506:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    950a:	4313      	orrs	r3, r2
    950c:	d122      	bne.n	9554 <hci_evt_encode+0x510>
    950e:	7b22      	ldrb	r2, [r4, #12]
    9510:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    9512:	4868      	ldr	r0, [pc, #416]	; (96b4 <hci_evt_encode+0x670>)
    9514:	2a00      	cmp	r2, #0
    9516:	fa92 f3a2 	rbit	r3, r2
    951a:	fab3 f383 	clz	r3, r3
    951e:	fa91 f2a1 	rbit	r2, r1
    9522:	bf08      	it	eq
    9524:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9528:	2900      	cmp	r1, #0
    952a:	fab2 f282 	clz	r2, r2
    952e:	bf08      	it	eq
    9530:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    9534:	1c51      	adds	r1, r2, #1
    9536:	3301      	adds	r3, #1
    9538:	4a5f      	ldr	r2, [pc, #380]	; (96b8 <hci_evt_encode+0x674>)
    953a:	9104      	str	r1, [sp, #16]
    953c:	9205      	str	r2, [sp, #20]
    953e:	9303      	str	r3, [sp, #12]
    9540:	7ae3      	ldrb	r3, [r4, #11]
    9542:	9302      	str	r3, [sp, #8]
    9544:	e88d 0044 	stmia.w	sp, {r2, r6}
    9548:	4b5c      	ldr	r3, [pc, #368]	; (96bc <hci_evt_encode+0x678>)
    954a:	495d      	ldr	r1, [pc, #372]	; (96c0 <hci_evt_encode+0x67c>)
    954c:	681c      	ldr	r4, [r3, #0]
    954e:	4b5d      	ldr	r3, [pc, #372]	; (96c4 <hci_evt_encode+0x680>)
    9550:	47a0      	blx	r4
    9552:	e677      	b.n	9244 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    9554:	2205      	movs	r2, #5
    9556:	210c      	movs	r1, #12
    9558:	4628      	mov	r0, r5
    955a:	f7fe fd61 	bl	8020 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    955e:	7ae3      	ldrb	r3, [r4, #11]
    9560:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9562:	f8a0 6001 	strh.w	r6, [r0, #1]
    9566:	7b22      	ldrb	r2, [r4, #12]
    9568:	2a00      	cmp	r2, #0
    956a:	fa92 f3a2 	rbit	r3, r2
    956e:	fab3 f383 	clz	r3, r3
    9572:	bf08      	it	eq
    9574:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9578:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    957a:	70c3      	strb	r3, [r0, #3]
    957c:	7b62      	ldrb	r2, [r4, #13]
    957e:	fa92 f3a2 	rbit	r3, r2
    9582:	2a00      	cmp	r2, #0
    9584:	fab3 f383 	clz	r3, r3
    9588:	bf08      	it	eq
    958a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    958e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9590:	7103      	strb	r3, [r0, #4]
    9592:	e657      	b.n	9244 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9594:	4a48      	ldr	r2, [pc, #288]	; (96b8 <hci_evt_encode+0x674>)
    9596:	4b49      	ldr	r3, [pc, #292]	; (96bc <hci_evt_encode+0x678>)
    9598:	9201      	str	r2, [sp, #4]
    959a:	9200      	str	r2, [sp, #0]
    959c:	681c      	ldr	r4, [r3, #0]
    959e:	4b4a      	ldr	r3, [pc, #296]	; (96c8 <hci_evt_encode+0x684>)
    95a0:	4947      	ldr	r1, [pc, #284]	; (96c0 <hci_evt_encode+0x67c>)
    95a2:	484a      	ldr	r0, [pc, #296]	; (96cc <hci_evt_encode+0x688>)
    95a4:	e624      	b.n	91f0 <hci_evt_encode+0x1ac>
	switch (pdu_data->llctrl.opcode) {
    95a6:	7ac3      	ldrb	r3, [r0, #11]
    95a8:	3b03      	subs	r3, #3
    95aa:	2b12      	cmp	r3, #18
    95ac:	f200 80d2 	bhi.w	9754 <hci_evt_encode+0x710>
    95b0:	e8df f003 	tbb	[pc, r3]
    95b4:	2fd0d00a 	.word	0x2fd0d00a
    95b8:	d035d0bd 	.word	0xd035d0bd
    95bc:	d05b3cd0 	.word	0xd05b3cd0
    95c0:	d0d0d05f 	.word	0xd0d0d05f
    95c4:	9dd0      	.short	0x9dd0
    95c6:	9d          	.byte	0x9d
    95c7:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95c8:	4b36      	ldr	r3, [pc, #216]	; (96a4 <hci_evt_encode+0x660>)
    95ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    95ce:	2200      	movs	r2, #0
    95d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    95d4:	4313      	orrs	r3, r2
    95d6:	f43f ae35 	beq.w	9244 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    95da:	4b34      	ldr	r3, [pc, #208]	; (96ac <hci_evt_encode+0x668>)
    95dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    95e0:	2300      	movs	r3, #0
    95e2:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95e6:	4313      	orrs	r3, r2
    95e8:	f43f ae2c 	beq.w	9244 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    95ec:	220c      	movs	r2, #12
    95ee:	2105      	movs	r1, #5
    95f0:	4628      	mov	r0, r5
    95f2:	f7fe fd15 	bl	8020 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    95f6:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    95f8:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    95fa:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    95fe:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9602:	f7f8 fb0d 	bl	1c20 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9606:	2202      	movs	r2, #2
    9608:	f104 0114 	add.w	r1, r4, #20
    960c:	f105 000a 	add.w	r0, r5, #10
    9610:	e6aa      	b.n	9368 <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    9612:	460a      	mov	r2, r1
    9614:	2000      	movs	r0, #0
    9616:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9618:	f7fe fd3a 	bl	8090 <encrypt_change>
    961c:	e612      	b.n	9244 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    961e:	460b      	mov	r3, r1
    9620:	4632      	mov	r2, r6
    9622:	4639      	mov	r1, r7
    9624:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9626:	f7fe fd53 	bl	80d0 <le_remote_feat_complete>
    962a:	e60b      	b.n	9244 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    962c:	4b1d      	ldr	r3, [pc, #116]	; (96a4 <hci_evt_encode+0x660>)
    962e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9632:	2300      	movs	r3, #0
    9634:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    9638:	4313      	orrs	r3, r2
    963a:	f43f ae03 	beq.w	9244 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    963e:	2208      	movs	r2, #8
    9640:	210c      	movs	r1, #12
    9642:	4628      	mov	r0, r5
    9644:	f7fe fcc7 	bl	7fd6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9648:	2108      	movs	r1, #8
    964a:	1868      	adds	r0, r5, r1
    964c:	f009 fa7c 	bl	12b48 <net_buf_simple_add>
	ep->status = 0x00;
    9650:	2300      	movs	r3, #0
    9652:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9654:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    9658:	7b23      	ldrb	r3, [r4, #12]
    965a:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    965c:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9660:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9662:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9666:	80c3      	strh	r3, [r0, #6]
    9668:	e5ec      	b.n	9244 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    966a:	460a      	mov	r2, r1
    966c:	7b00      	ldrb	r0, [r0, #12]
    966e:	4631      	mov	r1, r6
    9670:	e7d2      	b.n	9618 <hci_evt_encode+0x5d4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9672:	4b0c      	ldr	r3, [pc, #48]	; (96a4 <hci_evt_encode+0x660>)
    9674:	e9d3 2300 	ldrd	r2, r3, [r3]
    9678:	2200      	movs	r2, #0
    967a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    967e:	4313      	orrs	r3, r2
    9680:	d007      	beq.n	9692 <hci_evt_encode+0x64e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9682:	4b0a      	ldr	r3, [pc, #40]	; (96ac <hci_evt_encode+0x668>)
    9684:	e9d3 2300 	ldrd	r2, r3, [r3]
    9688:	2300      	movs	r3, #0
    968a:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    968e:	4313      	orrs	r3, r2
    9690:	d11e      	bne.n	96d0 <hci_evt_encode+0x68c>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9692:	2300      	movs	r3, #0
    9694:	9301      	str	r3, [sp, #4]
    9696:	9300      	str	r3, [sp, #0]
    9698:	221a      	movs	r2, #26
    969a:	2102      	movs	r1, #2
    969c:	4630      	mov	r0, r6
    969e:	f006 fe3d 	bl	1031c <ll_conn_update>
    96a2:	e5cf      	b.n	9244 <hci_evt_encode+0x200>
    96a4:	20003d78 	.word	0x20003d78
    96a8:	2000085c 	.word	0x2000085c
    96ac:	20003d80 	.word	0x20003d80
    96b0:	200008e8 	.word	0x200008e8
    96b4:	00016924 	.word	0x00016924
    96b8:	00014891 	.word	0x00014891
    96bc:	20003aa4 	.word	0x20003aa4
    96c0:	00015639 	.word	0x00015639
    96c4:	00016747 	.word	0x00016747
    96c8:	0001675b 	.word	0x0001675b
    96cc:	00015597 	.word	0x00015597
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    96d0:	220a      	movs	r2, #10
    96d2:	2106      	movs	r1, #6
    96d4:	4628      	mov	r0, r5
    96d6:	f7fe fca3 	bl	8020 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    96da:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    96dc:	89a3      	ldrh	r3, [r4, #12]
    96de:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    96e0:	89e3      	ldrh	r3, [r4, #14]
    96e2:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    96e4:	8a23      	ldrh	r3, [r4, #16]
    96e6:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    96e8:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    96ea:	8103      	strh	r3, [r0, #8]
    96ec:	e5aa      	b.n	9244 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96ee:	4b1d      	ldr	r3, [pc, #116]	; (9764 <hci_evt_encode+0x720>)
    96f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    96f4:	2200      	movs	r2, #0
    96f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    96fa:	4313      	orrs	r3, r2
    96fc:	f43f ada2 	beq.w	9244 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    9700:	4b19      	ldr	r3, [pc, #100]	; (9768 <hci_evt_encode+0x724>)
    9702:	e9d3 2300 	ldrd	r2, r3, [r3]
    9706:	2300      	movs	r3, #0
    9708:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    970c:	4313      	orrs	r3, r2
    970e:	f43f ad99 	beq.w	9244 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    9712:	220a      	movs	r2, #10
    9714:	2107      	movs	r1, #7
    9716:	4628      	mov	r0, r5
    9718:	f7fe fc82 	bl	8020 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    971c:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    971e:	8a23      	ldrh	r3, [r4, #16]
    9720:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    9722:	8a63      	ldrh	r3, [r4, #18]
    9724:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    9726:	89a3      	ldrh	r3, [r4, #12]
    9728:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    972a:	89e3      	ldrh	r3, [r4, #14]
    972c:	e7dd      	b.n	96ea <hci_evt_encode+0x6a6>
    972e:	7b03      	ldrb	r3, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9730:	2b0e      	cmp	r3, #14
    9732:	d104      	bne.n	973e <hci_evt_encode+0x6fa>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9734:	460b      	mov	r3, r1
    9736:	4632      	mov	r2, r6
    9738:	2100      	movs	r1, #0
    973a:	201a      	movs	r0, #26
    973c:	e773      	b.n	9626 <hci_evt_encode+0x5e2>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    973e:	4a0b      	ldr	r2, [pc, #44]	; (976c <hci_evt_encode+0x728>)
    9740:	9202      	str	r2, [sp, #8]
    9742:	e88d 000c 	stmia.w	sp, {r2, r3}
    9746:	4b0a      	ldr	r3, [pc, #40]	; (9770 <hci_evt_encode+0x72c>)
    9748:	490a      	ldr	r1, [pc, #40]	; (9774 <hci_evt_encode+0x730>)
    974a:	681c      	ldr	r4, [r3, #0]
    974c:	480a      	ldr	r0, [pc, #40]	; (9778 <hci_evt_encode+0x734>)
    974e:	4b0b      	ldr	r3, [pc, #44]	; (977c <hci_evt_encode+0x738>)
    9750:	47a0      	blx	r4
    9752:	e577      	b.n	9244 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9754:	4a05      	ldr	r2, [pc, #20]	; (976c <hci_evt_encode+0x728>)
    9756:	4b06      	ldr	r3, [pc, #24]	; (9770 <hci_evt_encode+0x72c>)
    9758:	9201      	str	r2, [sp, #4]
    975a:	9200      	str	r2, [sp, #0]
    975c:	681c      	ldr	r4, [r3, #0]
    975e:	4b08      	ldr	r3, [pc, #32]	; (9780 <hci_evt_encode+0x73c>)
    9760:	e71e      	b.n	95a0 <hci_evt_encode+0x55c>
    9762:	bf00      	nop
    9764:	20003d78 	.word	0x20003d78
    9768:	20003d80 	.word	0x20003d80
    976c:	00014891 	.word	0x00014891
    9770:	20003aa4 	.word	0x20003aa4
    9774:	00015639 	.word	0x00015639
    9778:	00016960 	.word	0x00016960
    977c:	0001676a 	.word	0x0001676a
    9780:	00016779 	.word	0x00016779

00009784 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9784:	b570      	push	{r4, r5, r6, lr}
    9786:	4606      	mov	r6, r0
    9788:	460d      	mov	r5, r1
    978a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    978c:	2113      	movs	r1, #19
    978e:	2205      	movs	r2, #5
    9790:	f7fe fc21 	bl	7fd6 <evt_create>

	ep = net_buf_add(buf, len);
    9794:	2105      	movs	r1, #5
    9796:	f106 0008 	add.w	r0, r6, #8
    979a:	f009 f9d5 	bl	12b48 <net_buf_simple_add>
	ep->num_handles = num_handles;
    979e:	2301      	movs	r3, #1
    97a0:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    97a2:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    97a6:	f8a0 4003 	strh.w	r4, [r0, #3]
    97aa:	bd70      	pop	{r4, r5, r6, pc}

000097ac <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    97ac:	7903      	ldrb	r3, [r0, #4]
    97ae:	2b01      	cmp	r3, #1
    97b0:	d006      	beq.n	97c0 <hci_get_class+0x14>
    97b2:	3b02      	subs	r3, #2
    97b4:	b2db      	uxtb	r3, r3
    97b6:	2b0a      	cmp	r3, #10
    97b8:	d80a      	bhi.n	97d0 <hci_get_class+0x24>
    97ba:	4a07      	ldr	r2, [pc, #28]	; (97d8 <hci_get_class+0x2c>)
    97bc:	56d0      	ldrsb	r0, [r2, r3]
    97be:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    97c0:	7a03      	ldrb	r3, [r0, #8]
    97c2:	f003 0303 	and.w	r3, r3, #3
    97c6:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    97c8:	bf0c      	ite	eq
    97ca:	2002      	moveq	r0, #2
    97cc:	2003      	movne	r0, #3
    97ce:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    97d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    97d4:	4770      	bx	lr
    97d6:	bf00      	nop
    97d8:	000166e1 	.word	0x000166e1

000097dc <hci_init>:
	dup_count = -1;
    97dc:	4b0a      	ldr	r3, [pc, #40]	; (9808 <hci_init+0x2c>)
    97de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    97e2:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    97e4:	4b09      	ldr	r3, [pc, #36]	; (980c <hci_init+0x30>)
    97e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    97ea:	f641 71ff 	movw	r1, #8191	; 0x1fff
    97ee:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    97f2:	4b07      	ldr	r3, [pc, #28]	; (9810 <hci_init+0x34>)
    97f4:	2000      	movs	r0, #0
    97f6:	2100      	movs	r1, #0
    97f8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    97fc:	4b05      	ldr	r3, [pc, #20]	; (9814 <hci_init+0x38>)
    97fe:	201f      	movs	r0, #31
    9800:	2100      	movs	r1, #0
    9802:	e9c3 0100 	strd	r0, r1, [r3]
    9806:	4770      	bx	lr
    9808:	20000860 	.word	0x20000860
    980c:	20003d78 	.word	0x20003d78
    9810:	200008e8 	.word	0x200008e8
    9814:	20003d80 	.word	0x20003d80

00009818 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    9818:	bf20      	wfe
	__SEV();
    981a:	bf40      	sev
	__WFE();
    981c:	bf20      	wfe
    981e:	4770      	bx	lr

00009820 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    9820:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    9822:	4b0d      	ldr	r3, [pc, #52]	; (9858 <pdu_len_cmp+0x38>)
{
    9824:	b089      	sub	sp, #36	; 0x24
    9826:	4605      	mov	r5, r0
    9828:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    982a:	aa01      	add	r2, sp, #4
    982c:	f103 0718 	add.w	r7, r3, #24
    9830:	6818      	ldr	r0, [r3, #0]
    9832:	6859      	ldr	r1, [r3, #4]
    9834:	4614      	mov	r4, r2
    9836:	c403      	stmia	r4!, {r0, r1}
    9838:	3308      	adds	r3, #8
    983a:	42bb      	cmp	r3, r7
    983c:	4622      	mov	r2, r4
    983e:	d1f7      	bne.n	9830 <pdu_len_cmp+0x10>
    9840:	881b      	ldrh	r3, [r3, #0]
    9842:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9844:	ab08      	add	r3, sp, #32
    9846:	441d      	add	r5, r3
    9848:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    984c:	1b83      	subs	r3, r0, r6
    984e:	4258      	negs	r0, r3
    9850:	4158      	adcs	r0, r3
    9852:	b009      	add	sp, #36	; 0x24
    9854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9856:	bf00      	nop
    9858:	000147e3 	.word	0x000147e3

0000985c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    985c:	6008      	str	r0, [r1, #0]
    985e:	4770      	bx	lr

00009860 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9860:	b918      	cbnz	r0, 986a <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9862:	680b      	ldr	r3, [r1, #0]
    9864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9868:	600b      	str	r3, [r1, #0]
    986a:	4770      	bx	lr

0000986c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    986c:	b918      	cbnz	r0, 9876 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    986e:	680b      	ldr	r3, [r1, #0]
    9870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9874:	600b      	str	r3, [r1, #0]
    9876:	4770      	bx	lr

00009878 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9878:	b570      	push	{r4, r5, r6, lr}
    987a:	1d03      	adds	r3, r0, #4
    987c:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    987e:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9880:	429d      	cmp	r5, r3
    9882:	d101      	bne.n	9888 <chan_sel_remap+0x10>
    9884:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9886:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9888:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    988c:	2200      	movs	r2, #0
    988e:	18a0      	adds	r0, r4, r2
    9890:	2a08      	cmp	r2, #8
    9892:	b2c0      	uxtb	r0, r0
    9894:	d101      	bne.n	989a <chan_sel_remap+0x22>
    9896:	4604      	mov	r4, r0
    9898:	e7f2      	b.n	9880 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    989a:	f016 0f01 	tst.w	r6, #1
    989e:	d003      	beq.n	98a8 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    98a0:	2900      	cmp	r1, #0
    98a2:	d0f0      	beq.n	9886 <chan_sel_remap+0xe>
				chan_index--;
    98a4:	3901      	subs	r1, #1
    98a6:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    98a8:	0876      	lsrs	r6, r6, #1
    98aa:	3201      	adds	r2, #1
    98ac:	e7ef      	b.n	988e <chan_sel_remap+0x16>
	...

000098b0 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    98b0:	4b09      	ldr	r3, [pc, #36]	; (98d8 <packet_rx_acquired_count_get+0x28>)
    98b2:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    98b6:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    98ba:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    98bc:	bf3b      	ittet	cc
    98be:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    98c2:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    98c6:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    98ca:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    98cc:	bf2c      	ite	cs
    98ce:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    98d0:	1a80      	subcc	r0, r0, r2
    98d2:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    98d4:	4770      	bx	lr
    98d6:	bf00      	nop
    98d8:	200008f0 	.word	0x200008f0

000098dc <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    98dc:	b508      	push	{r3, lr}
    98de:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    98e0:	f7ff ffe6 	bl	98b0 <packet_rx_acquired_count_get>
    98e4:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    98e6:	bf21      	itttt	cs
    98e8:	4b04      	ldrcs	r3, [pc, #16]	; (98fc <packet_rx_reserve_get+0x20>)
    98ea:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    98ee:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    98f2:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    98f6:	bf38      	it	cc
    98f8:	2000      	movcc	r0, #0
}
    98fa:	bd08      	pop	{r3, pc}
    98fc:	200008f0 	.word	0x200008f0

00009900 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9900:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9902:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    9906:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    990a:	429c      	cmp	r4, r3
    990c:	d15a      	bne.n	99c4 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    990e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9912:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9916:	428b      	cmp	r3, r1
    9918:	d154      	bne.n	99c4 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    991a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    991e:	2b00      	cmp	r3, #0
    9920:	db25      	blt.n	996e <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    9922:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9924:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    9926:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    992a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    992c:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9930:	4351      	muls	r1, r2
					      conn->supervision_reload *
    9932:	227d      	movs	r2, #125	; 0x7d
    9934:	434a      	muls	r2, r1
					      125 / 1000;
    9936:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    993a:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    993e:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9942:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    9946:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9948:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    994c:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    994e:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9950:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    9954:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    9956:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    995a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    995e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    9962:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    9966:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    996a:	4618      	mov	r0, r3
    996c:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    996e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9972:	06dc      	lsls	r4, r3, #27
    9974:	d428      	bmi.n	99c8 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    9976:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    997a:	069a      	lsls	r2, r3, #26
    997c:	d503      	bpl.n	9986 <conn_update_req+0x86>
		    (conn->llcp_features &
    997e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    9982:	079b      	lsls	r3, r3, #30
    9984:	d520      	bpl.n	99c8 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    9986:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9988:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    998a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    998e:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9990:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9994:	4354      	muls	r4, r2
						conn->supervision_reload *
    9996:	227d      	movs	r2, #125	; 0x7d
    9998:	4362      	muls	r2, r4
						125 / 1000;
    999a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    999e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    99a2:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    99a6:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    99aa:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    99ac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    99b0:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    99b4:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    99b6:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    99ba:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    99be:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    99c2:	e7d2      	b.n	996a <conn_update_req+0x6a>
		return 1;
    99c4:	2001      	movs	r0, #1
    99c6:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    99c8:	2002      	movs	r0, #2
}
    99ca:	bd30      	pop	{r4, r5, pc}

000099cc <packet_rx_allocate>:
{
    99cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    99d0:	4d22      	ldr	r5, [pc, #136]	; (9a5c <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    99d2:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    99d6:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    99da:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    99de:	3401      	adds	r4, #1
    99e0:	4581      	cmp	r9, r0
    99e2:	b2e4      	uxtb	r4, r4
    99e4:	bf28      	it	cs
    99e6:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    99e8:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    99ec:	42a3      	cmp	r3, r4
    99ee:	bf08      	it	eq
    99f0:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    99f2:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    99f6:	f1b9 0f00 	cmp.w	r9, #0
    99fa:	d003      	beq.n	9a04 <packet_rx_allocate+0x38>
    99fc:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9a00:	429c      	cmp	r4, r3
    9a02:	d101      	bne.n	9a08 <packet_rx_allocate+0x3c>
    9a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    9a08:	4638      	mov	r0, r7
    9a0a:	f7fd f94e 	bl	6caa <mem_acquire>
		if (!link) {
    9a0e:	4606      	mov	r6, r0
    9a10:	2800      	cmp	r0, #0
    9a12:	d0f7      	beq.n	9a04 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9a14:	4640      	mov	r0, r8
    9a16:	f7fd f948 	bl	6caa <mem_acquire>
		if (!node_rx) {
    9a1a:	b928      	cbnz	r0, 9a28 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9a1c:	4630      	mov	r0, r6
    9a1e:	4910      	ldr	r1, [pc, #64]	; (9a60 <packet_rx_allocate+0x94>)
}
    9a20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    9a24:	f7fd b95b 	b.w	6cde <mem_release>
		node_rx->hdr.onion.link = link;
    9a28:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    9a2a:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    9a2e:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    9a32:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    9a36:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    9a3a:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    9a3e:	3401      	adds	r4, #1
    9a40:	b2e4      	uxtb	r4, r4
			acquire = 0;
    9a42:	42a3      	cmp	r3, r4
    9a44:	bf08      	it	eq
    9a46:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    9a48:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9a4c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9a50:	3b01      	subs	r3, #1
    9a52:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    9a56:	fa5f f989 	uxtb.w	r9, r9
    9a5a:	e7cc      	b.n	99f6 <packet_rx_allocate+0x2a>
    9a5c:	200008f0 	.word	0x200008f0
    9a60:	20000a38 	.word	0x20000a38

00009a64 <common_init>:
{
    9a64:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    9a66:	4c39      	ldr	r4, [pc, #228]	; (9b4c <common_init+0xe8>)
    9a68:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9a6c:	2a00      	cmp	r2, #0
    9a6e:	d040      	beq.n	9af2 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9a70:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    9a74:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9a78:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9a7c:	f7fd f8ee 	bl	6c5c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9a80:	4b33      	ldr	r3, [pc, #204]	; (9b50 <common_init+0xec>)
    9a82:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9a86:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9a8a:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9a8e:	f7fd f8e5 	bl	6c5c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9a92:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    9a96:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    9a9a:	4b2e      	ldr	r3, [pc, #184]	; (9b54 <common_init+0xf0>)
    9a9c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9aa0:	440a      	add	r2, r1
    9aa2:	2108      	movs	r1, #8
    9aa4:	f7fd f8da 	bl	6c5c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    9aa8:	4b2b      	ldr	r3, [pc, #172]	; (9b58 <common_init+0xf4>)
    9aaa:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    9aae:	2202      	movs	r2, #2
    9ab0:	2124      	movs	r1, #36	; 0x24
    9ab2:	f7fd f8d3 	bl	6c5c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    9ab6:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    9aba:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9abe:	4b27      	ldr	r3, [pc, #156]	; (9b5c <common_init+0xf8>)
    9ac0:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    9ac4:	3a01      	subs	r2, #1
    9ac6:	b292      	uxth	r2, r2
    9ac8:	f7fd f8c8 	bl	6c5c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9acc:	4821      	ldr	r0, [pc, #132]	; (9b54 <common_init+0xf0>)
    9ace:	f7fd f8ec 	bl	6caa <mem_acquire>
	LL_ASSERT(link);
    9ad2:	b988      	cbnz	r0, 9af8 <common_init+0x94>
    9ad4:	4a22      	ldr	r2, [pc, #136]	; (9b60 <common_init+0xfc>)
    9ad6:	4b23      	ldr	r3, [pc, #140]	; (9b64 <common_init+0x100>)
    9ad8:	9201      	str	r2, [sp, #4]
    9ada:	9200      	str	r2, [sp, #0]
    9adc:	681c      	ldr	r4, [r3, #0]
    9ade:	4922      	ldr	r1, [pc, #136]	; (9b68 <common_init+0x104>)
    9ae0:	4b22      	ldr	r3, [pc, #136]	; (9b6c <common_init+0x108>)
    9ae2:	4823      	ldr	r0, [pc, #140]	; (9b70 <common_init+0x10c>)
    9ae4:	47a0      	blx	r4
    9ae6:	4040      	eors	r0, r0
    9ae8:	f380 8811 	msr	BASEPRI, r0
    9aec:	f04f 0004 	mov.w	r0, #4
    9af0:	df02      	svc	2
		_radio.conn_free = NULL;
    9af2:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    9af6:	e7c3      	b.n	9a80 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9af8:	4a1e      	ldr	r2, [pc, #120]	; (9b74 <common_init+0x110>)
    9afa:	1f11      	subs	r1, r2, #4
    9afc:	f7fd f92c 	bl	6d58 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9b00:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9b04:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9b08:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9b0c:	231f      	movs	r3, #31
    9b0e:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9b12:	2325      	movs	r3, #37	; 0x25
    9b14:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9b18:	231b      	movs	r3, #27
    9b1a:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9b1e:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9b22:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9b24:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    9b28:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    9b2a:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9b2e:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9b32:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    9b36:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    9b3a:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9b3e:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9b42:	b002      	add	sp, #8
    9b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    9b48:	f7ff bf40 	b.w	99cc <packet_rx_allocate>
    9b4c:	200008f0 	.word	0x200008f0
    9b50:	20000a20 	.word	0x20000a20
    9b54:	20000a38 	.word	0x20000a38
    9b58:	20000a4c 	.word	0x20000a4c
    9b5c:	20000a54 	.word	0x20000a54
    9b60:	00014891 	.word	0x00014891
    9b64:	20003aa4 	.word	0x20003aa4
    9b68:	00015639 	.word	0x00015639
    9b6c:	00016a32 	.word	0x00016a32
    9b70:	00016eaf 	.word	0x00016eaf
    9b74:	20000a40 	.word	0x20000a40

00009b78 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9b7c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    9b7e:	4294      	cmp	r4, r2
{
    9b80:	4681      	mov	r9, r0
    9b82:	460f      	mov	r7, r1
    9b84:	4690      	mov	r8, r2
	if (_first == last) {
    9b86:	d03d      	beq.n	9c04 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    9b88:	4e1f      	ldr	r6, [pc, #124]	; (9c08 <tx_cmplt_get+0x90>)
    9b8a:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    9b8e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    9b92:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    9b94:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    9b96:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9b9a:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    9b9e:	b222      	sxth	r2, r4
    9ba0:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    9ba4:	f8b9 e000 	ldrh.w	lr, [r9]
    9ba8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9bac:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    9bb0:	4596      	cmp	lr, r2
    9bb2:	d120      	bne.n	9bf6 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    9bb4:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    9bb6:	2801      	cmp	r0, #1
    9bb8:	f020 0303 	bic.w	r3, r0, #3
    9bbc:	d90a      	bls.n	9bd4 <tx_cmplt_get+0x5c>
    9bbe:	b1f3      	cbz	r3, 9bfe <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    9bc0:	1d02      	adds	r2, r0, #4
    9bc2:	d01c      	beq.n	9bfe <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9bc4:	7942      	ldrb	r2, [r0, #5]
    9bc6:	b1d2      	cbz	r2, 9bfe <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    9bc8:	7902      	ldrb	r2, [r0, #4]
    9bca:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9bce:	3a01      	subs	r2, #1
    9bd0:	2a01      	cmp	r2, #1
    9bd2:	d814      	bhi.n	9bfe <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    9bd4:	2201      	movs	r2, #1
			cmplt++;
    9bd6:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    9bd8:	604a      	str	r2, [r1, #4]
			cmplt++;
    9bda:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    9bdc:	b113      	cbz	r3, 9be4 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9bde:	4651      	mov	r1, sl
    9be0:	f7fd f87d 	bl	6cde <mem_release>
		}

		_first = _first + 1;
    9be4:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    9be6:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    9bea:	b2e4      	uxtb	r4, r4
			_first = 0;
    9bec:	42a2      	cmp	r2, r4
    9bee:	bf08      	it	eq
    9bf0:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    9bf2:	4544      	cmp	r4, r8
    9bf4:	d1d3      	bne.n	9b9e <tx_cmplt_get+0x26>

	*first = _first;
    9bf6:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    9bf8:	4628      	mov	r0, r5
    9bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    9bfe:	f8c1 b004 	str.w	fp, [r1, #4]
    9c02:	e7eb      	b.n	9bdc <tx_cmplt_get+0x64>
		return 0;
    9c04:	2500      	movs	r5, #0
    9c06:	e7f7      	b.n	9bf8 <tx_cmplt_get+0x80>
    9c08:	200008f0 	.word	0x200008f0

00009c0c <connection_get>:
{
    9c0c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    9c0e:	4b09      	ldr	r3, [pc, #36]	; (9c34 <connection_get+0x28>)
    9c10:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    9c14:	4282      	cmp	r2, r0
{
    9c16:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    9c18:	d90a      	bls.n	9c30 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    9c1a:	4602      	mov	r2, r0
    9c1c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9c20:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9c24:	f7fd f876 	bl	6d14 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    9c28:	b110      	cbz	r0, 9c30 <connection_get+0x24>
    9c2a:	8c03      	ldrh	r3, [r0, #32]
    9c2c:	42a3      	cmp	r3, r4
    9c2e:	d000      	beq.n	9c32 <connection_get+0x26>
	return 0;
    9c30:	2000      	movs	r0, #0
}
    9c32:	bd10      	pop	{r4, pc}
    9c34:	200008f0 	.word	0x200008f0

00009c38 <role_disable>:
{
    9c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c3c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9c3e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    9c40:	2805      	cmp	r0, #5
{
    9c42:	4605      	mov	r5, r0
    9c44:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9c46:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    9c48:	d00c      	beq.n	9c64 <role_disable+0x2c>
    9c4a:	2806      	cmp	r0, #6
    9c4c:	d041      	beq.n	9cd2 <role_disable+0x9a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9c4e:	d946      	bls.n	9cde <role_disable+0xa6>
			conn_handle = ticker_id_primary -
    9c50:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    9c52:	b280      	uxth	r0, r0
    9c54:	f7ff ffda 	bl	9c0c <connection_get>
			if (!conn) {
    9c58:	2800      	cmp	r0, #0
    9c5a:	f000 812d 	beq.w	9eb8 <role_disable+0x280>
			ticks_active_to_start =
    9c5e:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    9c62:	e00f      	b.n	9c84 <role_disable+0x4c>
		ticks_xtal_to_start =
    9c64:	4b95      	ldr	r3, [pc, #596]	; (9ebc <role_disable+0x284>)
    9c66:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    9c68:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9c6c:	ab02      	add	r3, sp, #8
    9c6e:	9300      	str	r3, [sp, #0]
    9c70:	460a      	mov	r2, r1
    9c72:	4b93      	ldr	r3, [pc, #588]	; (9ec0 <role_disable+0x288>)
    9c74:	2103      	movs	r1, #3
    9c76:	2000      	movs	r0, #0
    9c78:	f7fd ff3e 	bl	7af8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9c7c:	2802      	cmp	r0, #2
    9c7e:	d012      	beq.n	9ca6 <role_disable+0x6e>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9c80:	9b02      	ldr	r3, [sp, #8]
    9c82:	b9a3      	cbnz	r3, 9cae <role_disable+0x76>
	LL_ASSERT(!_radio.ticker_id_stop);
    9c84:	4c8d      	ldr	r4, [pc, #564]	; (9ebc <role_disable+0x284>)
    9c86:	7ca3      	ldrb	r3, [r4, #18]
    9c88:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9c8c:	2b00      	cmp	r3, #0
    9c8e:	d02f      	beq.n	9cf0 <role_disable+0xb8>
    9c90:	4a8c      	ldr	r2, [pc, #560]	; (9ec4 <role_disable+0x28c>)
    9c92:	4b8d      	ldr	r3, [pc, #564]	; (9ec8 <role_disable+0x290>)
    9c94:	9201      	str	r2, [sp, #4]
    9c96:	9200      	str	r2, [sp, #0]
    9c98:	681c      	ldr	r4, [r3, #0]
    9c9a:	498c      	ldr	r1, [pc, #560]	; (9ecc <role_disable+0x294>)
    9c9c:	4b8c      	ldr	r3, [pc, #560]	; (9ed0 <role_disable+0x298>)
    9c9e:	488d      	ldr	r0, [pc, #564]	; (9ed4 <role_disable+0x29c>)
    9ca0:	e010      	b.n	9cc4 <role_disable+0x8c>
				cpu_sleep();
    9ca2:	f7ff fdb9 	bl	9818 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9ca6:	9b02      	ldr	r3, [sp, #8]
    9ca8:	2b02      	cmp	r3, #2
    9caa:	d0fa      	beq.n	9ca2 <role_disable+0x6a>
    9cac:	e7e8      	b.n	9c80 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9cae:	9b02      	ldr	r3, [sp, #8]
    9cb0:	2b01      	cmp	r3, #1
    9cb2:	d0e7      	beq.n	9c84 <role_disable+0x4c>
    9cb4:	4a83      	ldr	r2, [pc, #524]	; (9ec4 <role_disable+0x28c>)
    9cb6:	4b84      	ldr	r3, [pc, #528]	; (9ec8 <role_disable+0x290>)
    9cb8:	9201      	str	r2, [sp, #4]
    9cba:	9200      	str	r2, [sp, #0]
    9cbc:	681c      	ldr	r4, [r3, #0]
    9cbe:	4983      	ldr	r1, [pc, #524]	; (9ecc <role_disable+0x294>)
    9cc0:	4b83      	ldr	r3, [pc, #524]	; (9ed0 <role_disable+0x298>)
    9cc2:	4885      	ldr	r0, [pc, #532]	; (9ed8 <role_disable+0x2a0>)
			LL_ASSERT(0);
    9cc4:	47a0      	blx	r4
    9cc6:	4040      	eors	r0, r0
    9cc8:	f380 8811 	msr	BASEPRI, r0
    9ccc:	f04f 0004 	mov.w	r0, #4
    9cd0:	df02      	svc	2
		ticks_xtal_to_start =
    9cd2:	4b7a      	ldr	r3, [pc, #488]	; (9ebc <role_disable+0x284>)
    9cd4:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    9cd8:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    9cdc:	e7d2      	b.n	9c84 <role_disable+0x4c>
			LL_ASSERT(0);
    9cde:	4a79      	ldr	r2, [pc, #484]	; (9ec4 <role_disable+0x28c>)
    9ce0:	4b79      	ldr	r3, [pc, #484]	; (9ec8 <role_disable+0x290>)
    9ce2:	9201      	str	r2, [sp, #4]
    9ce4:	9200      	str	r2, [sp, #0]
    9ce6:	681c      	ldr	r4, [r3, #0]
    9ce8:	4b79      	ldr	r3, [pc, #484]	; (9ed0 <role_disable+0x298>)
    9cea:	4978      	ldr	r1, [pc, #480]	; (9ecc <role_disable+0x294>)
    9cec:	487b      	ldr	r0, [pc, #492]	; (9edc <role_disable+0x2a4>)
    9cee:	e7e9      	b.n	9cc4 <role_disable+0x8c>
	ret_cb = TICKER_STATUS_BUSY;
    9cf0:	ab06      	add	r3, sp, #24
    9cf2:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    9cf4:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    9cf6:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9cfa:	2103      	movs	r1, #3
    9cfc:	9300      	str	r3, [sp, #0]
    9cfe:	462a      	mov	r2, r5
    9d00:	4b6f      	ldr	r3, [pc, #444]	; (9ec0 <role_disable+0x288>)
    9d02:	f7fd fef9 	bl	7af8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9d06:	2802      	cmp	r0, #2
    9d08:	d026      	beq.n	9d58 <role_disable+0x120>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    9d0a:	9b02      	ldr	r3, [sp, #8]
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	d16c      	bne.n	9dea <role_disable+0x1b2>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    9d10:	7c23      	ldrb	r3, [r4, #16]
    9d12:	429d      	cmp	r5, r3
    9d14:	d002      	beq.n	9d1c <role_disable+0xe4>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    9d16:	7c63      	ldrb	r3, [r4, #17]
    9d18:	429d      	cmp	r5, r3
    9d1a:	d162      	bne.n	9de2 <role_disable+0x1aa>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    9d1c:	ab06      	add	r3, sp, #24
    9d1e:	2202      	movs	r2, #2
    9d20:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d24:	2200      	movs	r2, #0
    9d26:	9300      	str	r3, [sp, #0]
    9d28:	2103      	movs	r1, #3
    9d2a:	4b65      	ldr	r3, [pc, #404]	; (9ec0 <role_disable+0x288>)
    9d2c:	4610      	mov	r0, r2
    9d2e:	f7fd fee3 	bl	7af8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9d32:	2802      	cmp	r0, #2
    9d34:	d11e      	bne.n	9d74 <role_disable+0x13c>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9d36:	2201      	movs	r2, #1
    9d38:	4611      	mov	r1, r2
    9d3a:	2003      	movs	r0, #3
    9d3c:	f7fd f858 	bl	6df0 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    9d40:	9b03      	ldr	r3, [sp, #12]
    9d42:	2b02      	cmp	r3, #2
    9d44:	d116      	bne.n	9d74 <role_disable+0x13c>
    9d46:	4a5f      	ldr	r2, [pc, #380]	; (9ec4 <role_disable+0x28c>)
    9d48:	4b5f      	ldr	r3, [pc, #380]	; (9ec8 <role_disable+0x290>)
    9d4a:	9201      	str	r2, [sp, #4]
    9d4c:	9200      	str	r2, [sp, #0]
    9d4e:	681c      	ldr	r4, [r3, #0]
    9d50:	495e      	ldr	r1, [pc, #376]	; (9ecc <role_disable+0x294>)
    9d52:	4b63      	ldr	r3, [pc, #396]	; (9ee0 <role_disable+0x2a8>)
    9d54:	4863      	ldr	r0, [pc, #396]	; (9ee4 <role_disable+0x2ac>)
    9d56:	e7b5      	b.n	9cc4 <role_disable+0x8c>
		if (_radio.ticker_id_event == ticker_id_primary) {
    9d58:	7c63      	ldrb	r3, [r4, #17]
    9d5a:	429d      	cmp	r5, r3
    9d5c:	d104      	bne.n	9d68 <role_disable+0x130>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9d5e:	2201      	movs	r2, #1
    9d60:	4611      	mov	r1, r2
    9d62:	2003      	movs	r0, #3
    9d64:	f7fd f844 	bl	6df0 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    9d68:	9b02      	ldr	r3, [sp, #8]
    9d6a:	2b02      	cmp	r3, #2
    9d6c:	d1cd      	bne.n	9d0a <role_disable+0xd2>
			cpu_sleep();
    9d6e:	f7ff fd53 	bl	9818 <cpu_sleep>
    9d72:	e7f9      	b.n	9d68 <role_disable+0x130>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    9d74:	9803      	ldr	r0, [sp, #12]
    9d76:	2800      	cmp	r0, #0
    9d78:	d153      	bne.n	9e22 <role_disable+0x1ea>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    9d7a:	2302      	movs	r3, #2
    9d7c:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    9d7e:	7c23      	ldrb	r3, [r4, #16]
    9d80:	b943      	cbnz	r3, 9d94 <role_disable+0x15c>
    9d82:	4a50      	ldr	r2, [pc, #320]	; (9ec4 <role_disable+0x28c>)
    9d84:	4b50      	ldr	r3, [pc, #320]	; (9ec8 <role_disable+0x290>)
    9d86:	9201      	str	r2, [sp, #4]
    9d88:	9200      	str	r2, [sp, #0]
    9d8a:	681c      	ldr	r4, [r3, #0]
    9d8c:	494f      	ldr	r1, [pc, #316]	; (9ecc <role_disable+0x294>)
    9d8e:	4b54      	ldr	r3, [pc, #336]	; (9ee0 <role_disable+0x2a8>)
    9d90:	4855      	ldr	r0, [pc, #340]	; (9ee8 <role_disable+0x2b0>)
    9d92:	e797      	b.n	9cc4 <role_disable+0x8c>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d94:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
    9d96:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d98:	2201      	movs	r2, #1
    9d9a:	9300      	str	r3, [sp, #0]
    9d9c:	2103      	movs	r1, #3
    9d9e:	4b48      	ldr	r3, [pc, #288]	; (9ec0 <role_disable+0x288>)
    9da0:	f7fd feaa 	bl	7af8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9da4:	2802      	cmp	r0, #2
    9da6:	d110      	bne.n	9dca <role_disable+0x192>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9da8:	2201      	movs	r2, #1
    9daa:	4611      	mov	r1, r2
    9dac:	2003      	movs	r0, #3
    9dae:	f7fd f81f 	bl	6df0 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    9db2:	9b04      	ldr	r3, [sp, #16]
    9db4:	2b02      	cmp	r3, #2
    9db6:	d108      	bne.n	9dca <role_disable+0x192>
    9db8:	4a42      	ldr	r2, [pc, #264]	; (9ec4 <role_disable+0x28c>)
    9dba:	4b43      	ldr	r3, [pc, #268]	; (9ec8 <role_disable+0x290>)
    9dbc:	9201      	str	r2, [sp, #4]
    9dbe:	9200      	str	r2, [sp, #0]
    9dc0:	681c      	ldr	r4, [r3, #0]
    9dc2:	4942      	ldr	r1, [pc, #264]	; (9ecc <role_disable+0x294>)
    9dc4:	4b46      	ldr	r3, [pc, #280]	; (9ee0 <role_disable+0x2a8>)
    9dc6:	4849      	ldr	r0, [pc, #292]	; (9eec <role_disable+0x2b4>)
    9dc8:	e77c      	b.n	9cc4 <role_disable+0x8c>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    9dca:	9a04      	ldr	r2, [sp, #16]
    9dcc:	b99a      	cbnz	r2, 9df6 <role_disable+0x1be>
			ticks_xtal_to_start &= ~XON_BITMASK;
    9dce:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    9dd2:	45b0      	cmp	r8, r6
    9dd4:	d923      	bls.n	9e1e <role_disable+0x1e6>
				ret = mayfly_enqueue(
    9dd6:	4b46      	ldr	r3, [pc, #280]	; (9ef0 <role_disable+0x2b8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9dd8:	4611      	mov	r1, r2
    9dda:	2003      	movs	r0, #3
    9ddc:	f7fd f830 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9de0:	b9a0      	cbnz	r0, 9e0c <role_disable+0x1d4>
	if (!_radio.ticker_id_stop) {
    9de2:	7ca3      	ldrb	r3, [r4, #18]
    9de4:	b90b      	cbnz	r3, 9dea <role_disable+0x1b2>
		ret_cb = TICKER_STATUS_FAILURE;
    9de6:	2301      	movs	r3, #1
    9de8:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    9dea:	2300      	movs	r3, #0
    9dec:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    9dee:	9802      	ldr	r0, [sp, #8]
}
    9df0:	b006      	add	sp, #24
    9df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    9df6:	9b04      	ldr	r3, [sp, #16]
    9df8:	2b01      	cmp	r3, #1
    9dfa:	d156      	bne.n	9eaa <role_disable+0x272>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9dfc:	2200      	movs	r2, #0
    9dfe:	4611      	mov	r1, r2
    9e00:	4b3b      	ldr	r3, [pc, #236]	; (9ef0 <role_disable+0x2b8>)
    9e02:	2003      	movs	r0, #3
    9e04:	f7fd f81c 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9e08:	4602      	mov	r2, r0
    9e0a:	b140      	cbz	r0, 9e1e <role_disable+0x1e6>
			LL_ASSERT(!ret);
    9e0c:	4a2d      	ldr	r2, [pc, #180]	; (9ec4 <role_disable+0x28c>)
    9e0e:	4b2e      	ldr	r3, [pc, #184]	; (9ec8 <role_disable+0x290>)
    9e10:	9201      	str	r2, [sp, #4]
    9e12:	9200      	str	r2, [sp, #0]
    9e14:	681c      	ldr	r4, [r3, #0]
    9e16:	492d      	ldr	r1, [pc, #180]	; (9ecc <role_disable+0x294>)
    9e18:	4b31      	ldr	r3, [pc, #196]	; (9ee0 <role_disable+0x2a8>)
    9e1a:	4836      	ldr	r0, [pc, #216]	; (9ef4 <role_disable+0x2bc>)
    9e1c:	e752      	b.n	9cc4 <role_disable+0x8c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9e1e:	4b36      	ldr	r3, [pc, #216]	; (9ef8 <role_disable+0x2c0>)
    9e20:	e7da      	b.n	9dd8 <role_disable+0x1a0>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    9e22:	9d03      	ldr	r5, [sp, #12]
    9e24:	2d01      	cmp	r5, #1
    9e26:	d140      	bne.n	9eaa <role_disable+0x272>
		if (ticker_id_stop != TICKER_NULL) {
    9e28:	2fff      	cmp	r7, #255	; 0xff
    9e2a:	d02b      	beq.n	9e84 <role_disable+0x24c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    9e2c:	ab06      	add	r3, sp, #24
    9e2e:	2202      	movs	r2, #2
    9e30:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9e34:	2103      	movs	r1, #3
    9e36:	9300      	str	r3, [sp, #0]
    9e38:	463a      	mov	r2, r7
    9e3a:	4b21      	ldr	r3, [pc, #132]	; (9ec0 <role_disable+0x288>)
    9e3c:	2000      	movs	r0, #0
    9e3e:	f7fd fe5b 	bl	7af8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    9e42:	2802      	cmp	r0, #2
    9e44:	d110      	bne.n	9e68 <role_disable+0x230>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9e46:	462a      	mov	r2, r5
    9e48:	4629      	mov	r1, r5
    9e4a:	2003      	movs	r0, #3
    9e4c:	f7fc ffd0 	bl	6df0 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    9e50:	9b05      	ldr	r3, [sp, #20]
    9e52:	2b02      	cmp	r3, #2
    9e54:	d108      	bne.n	9e68 <role_disable+0x230>
    9e56:	4a1b      	ldr	r2, [pc, #108]	; (9ec4 <role_disable+0x28c>)
    9e58:	4b1b      	ldr	r3, [pc, #108]	; (9ec8 <role_disable+0x290>)
    9e5a:	9201      	str	r2, [sp, #4]
    9e5c:	9200      	str	r2, [sp, #0]
    9e5e:	681c      	ldr	r4, [r3, #0]
    9e60:	491a      	ldr	r1, [pc, #104]	; (9ecc <role_disable+0x294>)
    9e62:	4b1f      	ldr	r3, [pc, #124]	; (9ee0 <role_disable+0x2a8>)
    9e64:	4825      	ldr	r0, [pc, #148]	; (9efc <role_disable+0x2c4>)
    9e66:	e72d      	b.n	9cc4 <role_disable+0x8c>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    9e68:	9b05      	ldr	r3, [sp, #20]
    9e6a:	b15b      	cbz	r3, 9e84 <role_disable+0x24c>
    9e6c:	9b05      	ldr	r3, [sp, #20]
    9e6e:	2b01      	cmp	r3, #1
    9e70:	d008      	beq.n	9e84 <role_disable+0x24c>
    9e72:	4a14      	ldr	r2, [pc, #80]	; (9ec4 <role_disable+0x28c>)
    9e74:	4b14      	ldr	r3, [pc, #80]	; (9ec8 <role_disable+0x290>)
    9e76:	9201      	str	r2, [sp, #4]
    9e78:	9200      	str	r2, [sp, #0]
    9e7a:	681c      	ldr	r4, [r3, #0]
    9e7c:	4913      	ldr	r1, [pc, #76]	; (9ecc <role_disable+0x294>)
    9e7e:	4b18      	ldr	r3, [pc, #96]	; (9ee0 <role_disable+0x2a8>)
    9e80:	481f      	ldr	r0, [pc, #124]	; (9f00 <role_disable+0x2c8>)
    9e82:	e71f      	b.n	9cc4 <role_disable+0x8c>
		if (_radio.role != ROLE_NONE) {
    9e84:	7ce3      	ldrb	r3, [r4, #19]
    9e86:	2b00      	cmp	r3, #0
    9e88:	d0ab      	beq.n	9de2 <role_disable+0x1aa>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    9e8a:	4b1e      	ldr	r3, [pc, #120]	; (9f04 <role_disable+0x2cc>)
    9e8c:	2204      	movs	r2, #4
    9e8e:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9e90:	2200      	movs	r2, #0
    9e92:	4611      	mov	r1, r2
    9e94:	2003      	movs	r0, #3
    9e96:	f7fc ffd3 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9e9a:	2800      	cmp	r0, #0
    9e9c:	d1b6      	bne.n	9e0c <role_disable+0x1d4>
			while (_radio.role != ROLE_NONE) {
    9e9e:	7ce3      	ldrb	r3, [r4, #19]
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	d09e      	beq.n	9de2 <role_disable+0x1aa>
				cpu_sleep();
    9ea4:	f7ff fcb8 	bl	9818 <cpu_sleep>
    9ea8:	e7f9      	b.n	9e9e <role_disable+0x266>
		LL_ASSERT(0);
    9eaa:	4a06      	ldr	r2, [pc, #24]	; (9ec4 <role_disable+0x28c>)
    9eac:	4b06      	ldr	r3, [pc, #24]	; (9ec8 <role_disable+0x290>)
    9eae:	9201      	str	r2, [sp, #4]
    9eb0:	9200      	str	r2, [sp, #0]
    9eb2:	681c      	ldr	r4, [r3, #0]
    9eb4:	4b0a      	ldr	r3, [pc, #40]	; (9ee0 <role_disable+0x2a8>)
    9eb6:	e718      	b.n	9cea <role_disable+0xb2>
				return 1;
    9eb8:	2001      	movs	r0, #1
    9eba:	e799      	b.n	9df0 <role_disable+0x1b8>
    9ebc:	200008f0 	.word	0x200008f0
    9ec0:	0000985d 	.word	0x0000985d
    9ec4:	00014891 	.word	0x00014891
    9ec8:	20003aa4 	.word	0x20003aa4
    9ecc:	00015639 	.word	0x00015639
    9ed0:	00016e54 	.word	0x00016e54
    9ed4:	000177c6 	.word	0x000177c6
    9ed8:	00017786 	.word	0x00017786
    9edc:	00015597 	.word	0x00015597
    9ee0:	00016e40 	.word	0x00016e40
    9ee4:	000177fe 	.word	0x000177fe
    9ee8:	0001782f 	.word	0x0001782f
    9eec:	00017869 	.word	0x00017869
    9ef0:	20003da8 	.word	0x20003da8
    9ef4:	00017899 	.word	0x00017899
    9ef8:	20003e48 	.word	0x20003e48
    9efc:	000178bf 	.word	0x000178bf
    9f00:	000178f1 	.word	0x000178f1
    9f04:	20003dc8 	.word	0x20003dc8

00009f08 <mayfly_xtal_retain>:
{
    9f08:	b513      	push	{r0, r1, r4, lr}
    9f0a:	4b1e      	ldr	r3, [pc, #120]	; (9f84 <mayfly_xtal_retain+0x7c>)
    9f0c:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    9f0e:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    9f10:	b309      	cbz	r1, 9f56 <mayfly_xtal_retain+0x4e>
		if (!s_xtal_retained) {
    9f12:	2a00      	cmp	r2, #0
    9f14:	d134      	bne.n	9f80 <mayfly_xtal_retain+0x78>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    9f16:	2801      	cmp	r0, #1
    9f18:	d00e      	beq.n	9f38 <mayfly_xtal_retain+0x30>
    9f1a:	4a1b      	ldr	r2, [pc, #108]	; (9f88 <mayfly_xtal_retain+0x80>)
    9f1c:	4b1b      	ldr	r3, [pc, #108]	; (9f8c <mayfly_xtal_retain+0x84>)
    9f1e:	9201      	str	r2, [sp, #4]
    9f20:	9200      	str	r2, [sp, #0]
    9f22:	681c      	ldr	r4, [r3, #0]
    9f24:	491a      	ldr	r1, [pc, #104]	; (9f90 <mayfly_xtal_retain+0x88>)
    9f26:	4b1b      	ldr	r3, [pc, #108]	; (9f94 <mayfly_xtal_retain+0x8c>)
    9f28:	481b      	ldr	r0, [pc, #108]	; (9f98 <mayfly_xtal_retain+0x90>)
			LL_ASSERT(!retval);
    9f2a:	47a0      	blx	r4
    9f2c:	4040      	eors	r0, r0
    9f2e:	f380 8811 	msr	BASEPRI, r0
    9f32:	f04f 0004 	mov.w	r0, #4
    9f36:	df02      	svc	2
			s_xtal_retained = 1;
    9f38:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    9f3a:	4b18      	ldr	r3, [pc, #96]	; (9f9c <mayfly_xtal_retain+0x94>)
    9f3c:	4611      	mov	r1, r2
    9f3e:	f7fc ff7f 	bl	6e40 <mayfly_enqueue>
			LL_ASSERT(!retval);
    9f42:	b1e8      	cbz	r0, 9f80 <mayfly_xtal_retain+0x78>
    9f44:	4a10      	ldr	r2, [pc, #64]	; (9f88 <mayfly_xtal_retain+0x80>)
    9f46:	4b11      	ldr	r3, [pc, #68]	; (9f8c <mayfly_xtal_retain+0x84>)
    9f48:	9201      	str	r2, [sp, #4]
    9f4a:	9200      	str	r2, [sp, #0]
    9f4c:	681c      	ldr	r4, [r3, #0]
    9f4e:	4910      	ldr	r1, [pc, #64]	; (9f90 <mayfly_xtal_retain+0x88>)
    9f50:	4b10      	ldr	r3, [pc, #64]	; (9f94 <mayfly_xtal_retain+0x8c>)
    9f52:	4813      	ldr	r0, [pc, #76]	; (9fa0 <mayfly_xtal_retain+0x98>)
    9f54:	e7e9      	b.n	9f2a <mayfly_xtal_retain+0x22>
		if (s_xtal_retained) {
    9f56:	b19a      	cbz	r2, 9f80 <mayfly_xtal_retain+0x78>
			s_xtal_retained = 0;
    9f58:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    9f5a:	b178      	cbz	r0, 9f7c <mayfly_xtal_retain+0x74>
    9f5c:	2801      	cmp	r0, #1
    9f5e:	d104      	bne.n	9f6a <mayfly_xtal_retain+0x62>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    9f60:	4b10      	ldr	r3, [pc, #64]	; (9fa4 <mayfly_xtal_retain+0x9c>)
			retval = mayfly_enqueue(caller_id,
    9f62:	2200      	movs	r2, #0
    9f64:	4611      	mov	r1, r2
    9f66:	4620      	mov	r0, r4
    9f68:	e7e9      	b.n	9f3e <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    9f6a:	4a07      	ldr	r2, [pc, #28]	; (9f88 <mayfly_xtal_retain+0x80>)
    9f6c:	4b07      	ldr	r3, [pc, #28]	; (9f8c <mayfly_xtal_retain+0x84>)
    9f6e:	9201      	str	r2, [sp, #4]
    9f70:	9200      	str	r2, [sp, #0]
    9f72:	681c      	ldr	r4, [r3, #0]
    9f74:	4906      	ldr	r1, [pc, #24]	; (9f90 <mayfly_xtal_retain+0x88>)
    9f76:	4b07      	ldr	r3, [pc, #28]	; (9f94 <mayfly_xtal_retain+0x8c>)
    9f78:	480b      	ldr	r0, [pc, #44]	; (9fa8 <mayfly_xtal_retain+0xa0>)
    9f7a:	e7d6      	b.n	9f2a <mayfly_xtal_retain+0x22>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    9f7c:	4b0b      	ldr	r3, [pc, #44]	; (9fac <mayfly_xtal_retain+0xa4>)
    9f7e:	e7f0      	b.n	9f62 <mayfly_xtal_retain+0x5a>
}
    9f80:	b002      	add	sp, #8
    9f82:	bd10      	pop	{r4, pc}
    9f84:	20000af0 	.word	0x20000af0
    9f88:	00014891 	.word	0x00014891
    9f8c:	20003aa4 	.word	0x20003aa4
    9f90:	00015639 	.word	0x00015639
    9f94:	00016bf9 	.word	0x00016bf9
    9f98:	000175df 	.word	0x000175df
    9f9c:	20003e18 	.word	0x20003e18
    9fa0:	0001760f 	.word	0x0001760f
    9fa4:	20003e38 	.word	0x20003e38
    9fa8:	00015597 	.word	0x00015597
    9fac:	20003e28 	.word	0x20003e28

00009fb0 <rx_packet_set>:
{
    9fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    9fb2:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    9fb6:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    9fb8:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    9fba:	f004 0407 	and.w	r4, r4, #7
{
    9fbe:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    9fc0:	4620      	mov	r0, r4
    9fc2:	2100      	movs	r1, #0
    9fc4:	f008 f83a 	bl	1203c <radio_phy_set>
	if (conn->enc_rx) {
    9fc8:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    9fcc:	f013 0f10 	tst.w	r3, #16
    9fd0:	ea4f 0244 	mov.w	r2, r4, lsl #1
    9fd4:	d010      	beq.n	9ff8 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    9fd6:	1d29      	adds	r1, r5, #4
    9fd8:	f042 0201 	orr.w	r2, r2, #1
    9fdc:	b2c9      	uxtb	r1, r1
    9fde:	2008      	movs	r0, #8
    9fe0:	f008 f872 	bl	120c8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    9fe4:	463a      	mov	r2, r7
    9fe6:	4621      	mov	r1, r4
    9fe8:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    9fec:	f008 fab0 	bl	12550 <radio_ccm_rx_pkt_set>
}
    9ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    9ff4:	f008 b896 	b.w	12124 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    9ff8:	2008      	movs	r0, #8
    9ffa:	f042 0201 	orr.w	r2, r2, #1
    9ffe:	b2e9      	uxtb	r1, r5
    a000:	f008 f862 	bl	120c8 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    a004:	4638      	mov	r0, r7
    a006:	e7f3      	b.n	9ff0 <rx_packet_set+0x40>

0000a008 <tx_packet_set>:
{
    a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a00a:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    a00c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    a010:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    a012:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    a016:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    a018:	09c9      	lsrs	r1, r1, #7
    a01a:	4620      	mov	r0, r4
    a01c:	f008 f80e 	bl	1203c <radio_phy_set>
	if (conn->enc_tx) {
    a020:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a024:	f013 0f20 	tst.w	r3, #32
    a028:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a02c:	d00f      	beq.n	a04e <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    a02e:	1d29      	adds	r1, r5, #4
    a030:	b2c9      	uxtb	r1, r1
    a032:	2008      	movs	r0, #8
    a034:	f042 0201 	orr.w	r2, r2, #1
    a038:	f008 f846 	bl	120c8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    a03c:	4639      	mov	r1, r7
    a03e:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    a042:	f008 fac1 	bl	125c8 <radio_ccm_tx_pkt_set>
}
    a046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    a04a:	f008 b871 	b.w	12130 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    a04e:	2008      	movs	r0, #8
    a050:	f042 0201 	orr.w	r2, r2, #1
    a054:	b2e9      	uxtb	r1, r5
    a056:	f008 f837 	bl	120c8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    a05a:	4638      	mov	r0, r7
    a05c:	e7f3      	b.n	a046 <tx_packet_set+0x3e>
	...

0000a060 <sched_free_win_offset_calc>:
{
    a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a064:	b08f      	sub	sp, #60	; 0x3c
    a066:	4692      	mov	sl, r2
    a068:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a06a:	6803      	ldr	r3, [r0, #0]
{
    a06c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a06e:	2b00      	cmp	r3, #0
{
    a070:	4680      	mov	r8, r0
    a072:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a074:	da3a      	bge.n	a0ec <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    a076:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    a078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    a07c:	4291      	cmp	r1, r2
    a07e:	bf2c      	ite	cs
    a080:	1a5a      	subcs	r2, r3, r1
    a082:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    a084:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a086:	f8d8 200c 	ldr.w	r2, [r8, #12]
    a08a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a08c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a08e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a090:	18d3      	adds	r3, r2, r3
    a092:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a094:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a098:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a09c:	940c      	str	r4, [sp, #48]	; 0x30
    a09e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a0a0:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a0a2:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a0a4:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a0a6:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a0a8:	2302      	movs	r3, #2
    a0aa:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0ac:	ab0d      	add	r3, sp, #52	; 0x34
    a0ae:	9302      	str	r3, [sp, #8]
    a0b0:	4b81      	ldr	r3, [pc, #516]	; (a2b8 <sched_free_win_offset_calc+0x258>)
    a0b2:	9301      	str	r3, [sp, #4]
    a0b4:	ab0b      	add	r3, sp, #44	; 0x2c
    a0b6:	9300      	str	r3, [sp, #0]
    a0b8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a0bc:	ab0c      	add	r3, sp, #48	; 0x30
    a0be:	2101      	movs	r1, #1
    a0c0:	2000      	movs	r0, #0
    a0c2:	f7fd fd55 	bl	7b70 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a0c6:	2802      	cmp	r0, #2
    a0c8:	d019      	beq.n	a0fe <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a0cc:	b1db      	cbz	r3, a106 <sched_free_win_offset_calc+0xa6>
    a0ce:	4a7b      	ldr	r2, [pc, #492]	; (a2bc <sched_free_win_offset_calc+0x25c>)
    a0d0:	4b7b      	ldr	r3, [pc, #492]	; (a2c0 <sched_free_win_offset_calc+0x260>)
    a0d2:	9201      	str	r2, [sp, #4]
    a0d4:	9200      	str	r2, [sp, #0]
    a0d6:	681c      	ldr	r4, [r3, #0]
    a0d8:	497a      	ldr	r1, [pc, #488]	; (a2c4 <sched_free_win_offset_calc+0x264>)
    a0da:	4b7b      	ldr	r3, [pc, #492]	; (a2c8 <sched_free_win_offset_calc+0x268>)
    a0dc:	487b      	ldr	r0, [pc, #492]	; (a2cc <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    a0de:	47a0      	blx	r4
    a0e0:	4040      	eors	r0, r0
    a0e2:	f380 8811 	msr	BASEPRI, r0
    a0e6:	f04f 0004 	mov.w	r0, #4
    a0ea:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a0ec:	4293      	cmp	r3, r2
    a0ee:	bf38      	it	cc
    a0f0:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a0f2:	2200      	movs	r2, #0
    a0f4:	e7c6      	b.n	a084 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0f6:	2101      	movs	r1, #1
    a0f8:	2000      	movs	r0, #0
    a0fa:	f7fd fdb7 	bl	7c6c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a0fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a100:	2b02      	cmp	r3, #2
    a102:	d0f8      	beq.n	a0f6 <sched_free_win_offset_calc+0x96>
    a104:	e7e1      	b.n	a0ca <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a106:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a10a:	2aff      	cmp	r2, #255	; 0xff
    a10c:	d066      	beq.n	a1dc <sched_free_win_offset_calc+0x17c>
		if ((ticker_id_prev != 0xff) &&
    a10e:	2fff      	cmp	r7, #255	; 0xff
    a110:	d00b      	beq.n	a12a <sched_free_win_offset_calc+0xca>
    a112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a114:	4599      	cmp	r9, r3
    a116:	d008      	beq.n	a12a <sched_free_win_offset_calc+0xca>
			LL_ASSERT(0);
    a118:	4a68      	ldr	r2, [pc, #416]	; (a2bc <sched_free_win_offset_calc+0x25c>)
    a11a:	4b69      	ldr	r3, [pc, #420]	; (a2c0 <sched_free_win_offset_calc+0x260>)
    a11c:	9201      	str	r2, [sp, #4]
    a11e:	9200      	str	r2, [sp, #0]
    a120:	681c      	ldr	r4, [r3, #0]
    a122:	4968      	ldr	r1, [pc, #416]	; (a2c4 <sched_free_win_offset_calc+0x264>)
    a124:	4b68      	ldr	r3, [pc, #416]	; (a2c8 <sched_free_win_offset_calc+0x268>)
    a126:	486a      	ldr	r0, [pc, #424]	; (a2d0 <sched_free_win_offset_calc+0x270>)
    a128:	e7d9      	b.n	a0de <sched_free_win_offset_calc+0x7e>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a12a:	2a05      	cmp	r2, #5
    a12c:	d951      	bls.n	a1d2 <sched_free_win_offset_calc+0x172>
				  _radio.connection_count)) {
    a12e:	4869      	ldr	r0, [pc, #420]	; (a2d4 <sched_free_win_offset_calc+0x274>)
    a130:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a134:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a136:	429a      	cmp	r2, r3
    a138:	da4b      	bge.n	a1d2 <sched_free_win_offset_calc+0x172>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a13a:	2a06      	cmp	r2, #6
    a13c:	f000 8092 	beq.w	a264 <sched_free_win_offset_calc+0x204>
		if (ticker_id_other != 0xFF) {
    a140:	9b06      	ldr	r3, [sp, #24]
    a142:	2bff      	cmp	r3, #255	; 0xff
    a144:	d14a      	bne.n	a1dc <sched_free_win_offset_calc+0x17c>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a146:	3a07      	subs	r2, #7
    a148:	b292      	uxth	r2, r2
    a14a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a14e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a152:	f7fc fddf 	bl	6d14 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a156:	4580      	cmp	r8, r0
    a158:	d03b      	beq.n	a1d2 <sched_free_win_offset_calc+0x172>
    a15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a15c:	b91b      	cbnz	r3, a166 <sched_free_win_offset_calc+0x106>
    a15e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a162:	2b00      	cmp	r3, #0
    a164:	db35      	blt.n	a1d2 <sched_free_win_offset_calc+0x172>
			u32_t ticks_to_expire_normal =
    a166:	9b05      	ldr	r3, [sp, #20]
    a168:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a16a:	6841      	ldr	r1, [r0, #4]
    a16c:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a16e:	6803      	ldr	r3, [r0, #0]
    a170:	2b00      	cmp	r3, #0
    a172:	da4e      	bge.n	a212 <sched_free_win_offset_calc+0x1b2>
				u32_t ticks_prepare_to_start =
    a174:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a17a:	428a      	cmp	r2, r1
    a17c:	bf2c      	ite	cs
    a17e:	18b6      	addcs	r6, r6, r2
    a180:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a182:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a184:	68c2      	ldr	r2, [r0, #12]
    a186:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a18a:	444b      	add	r3, r9
    a18c:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a18e:	f8da 3000 	ldr.w	r3, [sl]
    a192:	429e      	cmp	r6, r3
    a194:	d916      	bls.n	a1c4 <sched_free_win_offset_calc+0x164>
    a196:	429d      	cmp	r5, r3
    a198:	bf38      	it	cc
    a19a:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a19c:	9b07      	ldr	r3, [sp, #28]
    a19e:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a1a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a1a4:	781b      	ldrb	r3, [r3, #0]
    a1a6:	42a3      	cmp	r3, r4
    a1a8:	d905      	bls.n	a1b6 <sched_free_win_offset_calc+0x156>
				       (ticker_ticks_diff_get(
    a1aa:	4629      	mov	r1, r5
    a1ac:	4630      	mov	r0, r6
    a1ae:	f7fd fd75 	bl	7c9c <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a1b2:	42b8      	cmp	r0, r7
    a1b4:	d231      	bcs.n	a21a <sched_free_win_offset_calc+0x1ba>
				if (_win_offset >= conn_interval) {
    a1b6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a1ba:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a1bc:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a1c0:	4293      	cmp	r3, r2
    a1c2:	d20b      	bcs.n	a1dc <sched_free_win_offset_calc+0x17c>
			ticks_anchor_prev = ticks_anchor;
    a1c4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a1c8:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a1cc:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a1d0:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a1d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a1d4:	781b      	ldrb	r3, [r3, #0]
    a1d6:	42a3      	cmp	r3, r4
    a1d8:	f63f af66 	bhi.w	a0a8 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a1dc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a1e0:	2bff      	cmp	r3, #255	; 0xff
    a1e2:	d111      	bne.n	a208 <sched_free_win_offset_calc+0x1a8>
    a1e4:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a1e8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; a2d8 <sched_free_win_offset_calc+0x278>
    a1ec:	a730      	add	r7, pc, #192	; (adr r7, a2b0 <sched_free_win_offset_calc+0x250>)
    a1ee:	e9d7 6700 	ldrd	r6, r7, [r7]
    a1f2:	429d      	cmp	r5, r3
    a1f4:	bf38      	it	cc
    a1f6:	461d      	movcc	r5, r3
    a1f8:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a1fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a1fe:	781b      	ldrb	r3, [r3, #0]
    a200:	42a3      	cmp	r3, r4
    a202:	d831      	bhi.n	a268 <sched_free_win_offset_calc+0x208>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a204:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a208:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a20a:	701c      	strb	r4, [r3, #0]
}
    a20c:	b00f      	add	sp, #60	; 0x3c
    a20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a212:	428b      	cmp	r3, r1
    a214:	bf38      	it	cc
    a216:	460b      	movcc	r3, r1
    a218:	e7b4      	b.n	a184 <sched_free_win_offset_calc+0x124>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a21a:	4a2f      	ldr	r2, [pc, #188]	; (a2d8 <sched_free_win_offset_calc+0x278>)
    a21c:	eb05 030b 	add.w	r3, r5, fp
    a220:	fba3 0102 	umull	r0, r1, r3, r2
    a224:	2207      	movs	r2, #7
    a226:	fb02 1103 	mla	r1, r2, r3, r1
    a22a:	a321      	add	r3, pc, #132	; (adr r3, a2b0 <sched_free_win_offset_calc+0x250>)
    a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a230:	f7f5 fff0 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a234:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a238:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a23c:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a23e:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a240:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a242:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a246:	d20b      	bcs.n	a260 <sched_free_win_offset_calc+0x200>
					memcpy(win_offset +
    a248:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a24a:	2202      	movs	r2, #2
    a24c:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a250:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a254:	3401      	adds	r4, #1
					memcpy(win_offset +
    a256:	f7f7 fce3 	bl	1c20 <memcpy>
					offset_index++;
    a25a:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a25c:	3528      	adds	r5, #40	; 0x28
    a25e:	e7a0      	b.n	a1a2 <sched_free_win_offset_calc+0x142>
						ticks_to_expire_prev = 0;
    a260:	2500      	movs	r5, #0
    a262:	e7a8      	b.n	a1b6 <sched_free_win_offset_calc+0x156>
    a264:	9206      	str	r2, [sp, #24]
    a266:	e7b4      	b.n	a1d2 <sched_free_win_offset_calc+0x172>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a268:	eb05 030b 	add.w	r3, r5, fp
    a26c:	fba3 0108 	umull	r0, r1, r3, r8
    a270:	fb09 1103 	mla	r1, r9, r3, r1
    a274:	4632      	mov	r2, r6
    a276:	463b      	mov	r3, r7
    a278:	f7f5 ffcc 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a27c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a280:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a284:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a286:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a288:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a28a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a28e:	d90b      	bls.n	a2a8 <sched_free_win_offset_calc+0x248>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a290:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a292:	2202      	movs	r2, #2
    a294:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a298:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a29c:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a29e:	f7f7 fcbf 	bl	1c20 <memcpy>
			offset_index++;
    a2a2:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a2a4:	3528      	adds	r5, #40	; 0x28
    a2a6:	e7a9      	b.n	a1fc <sched_free_win_offset_calc+0x19c>
				ticks_to_expire_prev = 0;
    a2a8:	2500      	movs	r5, #0
    a2aa:	e7ab      	b.n	a204 <sched_free_win_offset_calc+0x1a4>
    a2ac:	f3af 8000 	nop.w
    a2b0:	3b9aca00 	.word	0x3b9aca00
    a2b4:	00000000 	.word	0x00000000
    a2b8:	0000985d 	.word	0x0000985d
    a2bc:	00014891 	.word	0x00014891
    a2c0:	20003aa4 	.word	0x20003aa4
    a2c4:	00015639 	.word	0x00015639
    a2c8:	00016c75 	.word	0x00016c75
    a2cc:	00017994 	.word	0x00017994
    a2d0:	00015597 	.word	0x00015597
    a2d4:	200008f0 	.word	0x200008f0
    a2d8:	1afd498d 	.word	0x1afd498d

0000a2dc <mayfly_sched_free_win_offset_calc>:
{
    a2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a2de:	2300      	movs	r3, #0
    a2e0:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a2e2:	2306      	movs	r3, #6
    a2e4:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a2e8:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a2ec:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a2f0:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a2f2:	bfbe      	ittt	lt
    a2f4:	4602      	movlt	r2, r0
    a2f6:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a2f8:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a2fc:	9101      	str	r1, [sp, #4]
    a2fe:	f10d 010b 	add.w	r1, sp, #11
    a302:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a304:	bfa8      	it	ge
    a306:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a308:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a30c:	2100      	movs	r1, #0
    a30e:	f7ff fea7 	bl	a060 <sched_free_win_offset_calc>
}
    a312:	b005      	add	sp, #20
    a314:	f85d fb04 	ldr.w	pc, [sp], #4

0000a318 <mayfly_sched_win_offset_select>:
{
    a318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a31c:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a320:	b089      	sub	sp, #36	; 0x24
    a322:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a324:	4840      	ldr	r0, [pc, #256]	; (a428 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a326:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a328:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a32a:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a32e:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a332:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a336:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a338:	fb03 1102 	mla	r1, r3, r2, r1
    a33c:	a338      	add	r3, pc, #224	; (adr r3, a420 <mayfly_sched_win_offset_select+0x108>)
    a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a342:	9505      	str	r5, [sp, #20]
    a344:	6075      	str	r5, [r6, #4]
    a346:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a348:	f7f5 ff64 	bl	214 <__aeabi_uldivmod>
    a34c:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a34e:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a352:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a356:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a35a:	9100      	str	r1, [sp, #0]
    a35c:	9601      	str	r6, [sp, #4]
    a35e:	2101      	movs	r1, #1
    a360:	4620      	mov	r0, r4
    a362:	f7ff fe7d 	bl	a060 <sched_free_win_offset_calc>
    a366:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a36a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a36e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a372:	2202      	movs	r2, #2
    a374:	4639      	mov	r1, r7
    a376:	f10d 000e 	add.w	r0, sp, #14
    a37a:	f7f7 fc51 	bl	1c20 <memcpy>
		while (offset_index_m < offset_m_max) {
    a37e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a382:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a386:	2300      	movs	r3, #0
    a388:	b2d9      	uxtb	r1, r3
    a38a:	4288      	cmp	r0, r1
    a38c:	d811      	bhi.n	a3b2 <mayfly_sched_win_offset_select+0x9a>
    a38e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a390:	4547      	cmp	r7, r8
    a392:	d1ee      	bne.n	a372 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a394:	b9b5      	cbnz	r5, a3c4 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a396:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a39a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a39e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a3a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a3a4:	2202      	movs	r2, #2
    a3a6:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a3a8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a3ac:	f7f7 fc38 	bl	1c20 <memcpy>
    a3b0:	e027      	b.n	a402 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a3b2:	454a      	cmp	r2, r9
    a3b4:	d004      	beq.n	a3c0 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a3b6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a3ba:	4291      	cmp	r1, r2
    a3bc:	d024      	beq.n	a408 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a3be:	2501      	movs	r5, #1
    a3c0:	3301      	adds	r3, #1
    a3c2:	e7e1      	b.n	a388 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a3c4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a3c8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a3cc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a3d0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a3d4:	4b15      	ldr	r3, [pc, #84]	; (a42c <mayfly_sched_win_offset_select+0x114>)
    a3d6:	2200      	movs	r2, #0
    a3d8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a3dc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a3e0:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a3e4:	f042 0203 	orr.w	r2, r2, #3
    a3e8:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a3ec:	2203      	movs	r2, #3
    a3ee:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a3f2:	2211      	movs	r2, #17
    a3f4:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a3f8:	220f      	movs	r2, #15
    a3fa:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a3fe:	2220      	movs	r2, #32
    a400:	701a      	strb	r2, [r3, #0]
}
    a402:	b009      	add	sp, #36	; 0x24
    a404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a408:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a40c:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a40e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a412:	2202      	movs	r2, #2
    a414:	f10d 010e 	add.w	r1, sp, #14
    a418:	e7c6      	b.n	a3a8 <mayfly_sched_win_offset_select+0x90>
    a41a:	bf00      	nop
    a41c:	f3af 8000 	nop.w
    a420:	1afd498d 	.word	0x1afd498d
    a424:	00000007 	.word	0x00000007
    a428:	09ce5400 	.word	0x09ce5400
    a42c:	200008f0 	.word	0x200008f0

0000a430 <sched_after_mstr_free_slot_get>:
{
    a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a434:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a436:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a438:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a43a:	f8df 9140 	ldr.w	r9, [pc, #320]	; a57c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    a43e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a442:	4680      	mov	r8, r0
    a444:	4693      	mov	fp, r2
    a446:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a448:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a44c:	601c      	str	r4, [r3, #0]
    a44e:	9408      	str	r4, [sp, #32]
    a450:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a452:	2302      	movs	r3, #2
    a454:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a456:	ab09      	add	r3, sp, #36	; 0x24
    a458:	9302      	str	r3, [sp, #8]
    a45a:	4b41      	ldr	r3, [pc, #260]	; (a560 <sched_after_mstr_free_slot_get+0x130>)
    a45c:	9301      	str	r3, [sp, #4]
    a45e:	ab08      	add	r3, sp, #32
    a460:	9300      	str	r3, [sp, #0]
    a462:	f10d 021f 	add.w	r2, sp, #31
    a466:	465b      	mov	r3, fp
    a468:	4641      	mov	r1, r8
    a46a:	2000      	movs	r0, #0
    a46c:	f7fd fb80 	bl	7b70 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a470:	2802      	cmp	r0, #2
    a472:	d014      	beq.n	a49e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a476:	b1b3      	cbz	r3, a4a6 <sched_after_mstr_free_slot_get+0x76>
    a478:	4a3a      	ldr	r2, [pc, #232]	; (a564 <sched_after_mstr_free_slot_get+0x134>)
    a47a:	4b3b      	ldr	r3, [pc, #236]	; (a568 <sched_after_mstr_free_slot_get+0x138>)
    a47c:	9201      	str	r2, [sp, #4]
    a47e:	9200      	str	r2, [sp, #0]
    a480:	681c      	ldr	r4, [r3, #0]
    a482:	493a      	ldr	r1, [pc, #232]	; (a56c <sched_after_mstr_free_slot_get+0x13c>)
    a484:	4b3a      	ldr	r3, [pc, #232]	; (a570 <sched_after_mstr_free_slot_get+0x140>)
    a486:	483b      	ldr	r0, [pc, #236]	; (a574 <sched_after_mstr_free_slot_get+0x144>)
    a488:	47a0      	blx	r4
    a48a:	4040      	eors	r0, r0
    a48c:	f380 8811 	msr	BASEPRI, r0
    a490:	f04f 0004 	mov.w	r0, #4
    a494:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a496:	4641      	mov	r1, r8
    a498:	2000      	movs	r0, #0
    a49a:	f7fd fbe7 	bl	7c6c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4a0:	2b02      	cmp	r3, #2
    a4a2:	d0f8      	beq.n	a496 <sched_after_mstr_free_slot_get+0x66>
    a4a4:	e7e6      	b.n	a474 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a4a6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a4aa:	2aff      	cmp	r2, #255	; 0xff
    a4ac:	d04e      	beq.n	a54c <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a4ae:	2a06      	cmp	r2, #6
    a4b0:	d9cf      	bls.n	a452 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a4b2:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a4b6:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a4b8:	429a      	cmp	r2, r3
    a4ba:	daca      	bge.n	a452 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a4bc:	3a07      	subs	r2, #7
    a4be:	b292      	uxth	r2, r2
    a4c0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a4c4:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a4c8:	f7fc fc24 	bl	6d14 <mem_get>
		if (conn && !conn->role) {
    a4cc:	2800      	cmp	r0, #0
    a4ce:	d0c0      	beq.n	a452 <sched_after_mstr_free_slot_get+0x22>
    a4d0:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a4d4:	2b00      	cmp	r3, #0
    a4d6:	dbbc      	blt.n	a452 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a4d8:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a4da:	9a08      	ldr	r2, [sp, #32]
    a4dc:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	da12      	bge.n	a50a <sched_after_mstr_free_slot_get+0xda>
    a4e4:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a4e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a4ea:	4571      	cmp	r1, lr
    a4ec:	bf2c      	ite	cs
    a4ee:	1852      	addcs	r2, r2, r1
    a4f0:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a4f2:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a4f4:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a4f6:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a4f8:	f101 0104 	add.w	r1, r1, #4
    a4fc:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a4fe:	d108      	bne.n	a512 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    a500:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a504:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a506:	4616      	mov	r6, r2
    a508:	e7a3      	b.n	a452 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a50a:	4573      	cmp	r3, lr
    a50c:	bf38      	it	cc
    a50e:	4673      	movcc	r3, lr
    a510:	e7f0      	b.n	a4f4 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a512:	4631      	mov	r1, r6
    a514:	4610      	mov	r0, r2
    a516:	9305      	str	r3, [sp, #20]
    a518:	9204      	str	r2, [sp, #16]
    a51a:	f7fd fbbf 	bl	7c9c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a51e:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a522:	4288      	cmp	r0, r1
    a524:	9a04      	ldr	r2, [sp, #16]
    a526:	9b05      	ldr	r3, [sp, #20]
    a528:	d9ea      	bls.n	a500 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a52a:	4813      	ldr	r0, [pc, #76]	; (a578 <sched_after_mstr_free_slot_get+0x148>)
    a52c:	4434      	add	r4, r6
    a52e:	fba4 0100 	umull	r0, r1, r4, r0
    a532:	2307      	movs	r3, #7
    a534:	fb03 1104 	mla	r1, r3, r4, r1
    a538:	a307      	add	r3, pc, #28	; (adr r3, a558 <sched_after_mstr_free_slot_get+0x128>)
    a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a53e:	f7f5 fe69 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a542:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a544:	6038      	str	r0, [r7, #0]
}
    a546:	b00b      	add	sp, #44	; 0x2c
    a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a54c:	2dff      	cmp	r5, #255	; 0xff
    a54e:	d1ec      	bne.n	a52a <sched_after_mstr_free_slot_get+0xfa>
    a550:	e7f9      	b.n	a546 <sched_after_mstr_free_slot_get+0x116>
    a552:	bf00      	nop
    a554:	f3af 8000 	nop.w
    a558:	3b9aca00 	.word	0x3b9aca00
    a55c:	00000000 	.word	0x00000000
    a560:	0000985d 	.word	0x0000985d
    a564:	00014891 	.word	0x00014891
    a568:	20003aa4 	.word	0x20003aa4
    a56c:	00015639 	.word	0x00015639
    a570:	00016c35 	.word	0x00016c35
    a574:	00017994 	.word	0x00017994
    a578:	1afd498d 	.word	0x1afd498d
    a57c:	200008f0 	.word	0x200008f0

0000a580 <isr_adv_ci_adva_check>:
{
    a580:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a582:	7804      	ldrb	r4, [r0, #0]
    a584:	780a      	ldrb	r2, [r1, #0]
    a586:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a58a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a58e:	d119      	bne.n	a5c4 <isr_adv_ci_adva_check+0x44>
    a590:	f004 040f 	and.w	r4, r4, #15
    a594:	2c01      	cmp	r4, #1
    a596:	f101 0608 	add.w	r6, r1, #8
    a59a:	f100 0502 	add.w	r5, r0, #2
    a59e:	d008      	beq.n	a5b2 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a5a0:	2206      	movs	r2, #6
    a5a2:	4631      	mov	r1, r6
    a5a4:	4628      	mov	r0, r5
    a5a6:	f7f7 fb26 	bl	1bf6 <memcmp>
			 BDADDR_SIZE)) ||
    a5aa:	fab0 f080 	clz	r0, r0
    a5ae:	0940      	lsrs	r0, r0, #5
    a5b0:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a5b2:	2206      	movs	r2, #6
    a5b4:	4631      	mov	r1, r6
    a5b6:	4628      	mov	r0, r5
    a5b8:	f7f7 fb1d 	bl	1bf6 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a5bc:	2800      	cmp	r0, #0
    a5be:	d1ef      	bne.n	a5a0 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a5c0:	4620      	mov	r0, r4
    a5c2:	bd70      	pop	{r4, r5, r6, pc}
    a5c4:	2000      	movs	r0, #0
}
    a5c6:	bd70      	pop	{r4, r5, r6, pc}

0000a5c8 <packet_rx_enqueue>:
{
    a5c8:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    a5ca:	4a1f      	ldr	r2, [pc, #124]	; (a648 <packet_rx_enqueue+0x80>)
    a5cc:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    a5d0:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    a5d4:	4299      	cmp	r1, r3
    a5d6:	d10e      	bne.n	a5f6 <packet_rx_enqueue+0x2e>
    a5d8:	4a1c      	ldr	r2, [pc, #112]	; (a64c <packet_rx_enqueue+0x84>)
    a5da:	4b1d      	ldr	r3, [pc, #116]	; (a650 <packet_rx_enqueue+0x88>)
    a5dc:	9201      	str	r2, [sp, #4]
    a5de:	9200      	str	r2, [sp, #0]
    a5e0:	681c      	ldr	r4, [r3, #0]
    a5e2:	491c      	ldr	r1, [pc, #112]	; (a654 <packet_rx_enqueue+0x8c>)
    a5e4:	4b1c      	ldr	r3, [pc, #112]	; (a658 <packet_rx_enqueue+0x90>)
    a5e6:	481d      	ldr	r0, [pc, #116]	; (a65c <packet_rx_enqueue+0x94>)
	LL_ASSERT(link);
    a5e8:	47a0      	blx	r4
    a5ea:	4040      	eors	r0, r0
    a5ec:	f380 8811 	msr	BASEPRI, r0
    a5f0:	f04f 0004 	mov.w	r0, #4
    a5f4:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    a5f6:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    a5fa:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    a5fe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a602:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    a606:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a608:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    a60a:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    a60e:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    a612:	3301      	adds	r3, #1
    a614:	b2db      	uxtb	r3, r3
		last = 0;
    a616:	429c      	cmp	r4, r3
    a618:	bf08      	it	eq
    a61a:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    a61c:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    a620:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    a624:	f7fc fb9b 	bl	6d5e <memq_enqueue>
	LL_ASSERT(link);
    a628:	b940      	cbnz	r0, a63c <packet_rx_enqueue+0x74>
    a62a:	4a08      	ldr	r2, [pc, #32]	; (a64c <packet_rx_enqueue+0x84>)
    a62c:	4b08      	ldr	r3, [pc, #32]	; (a650 <packet_rx_enqueue+0x88>)
    a62e:	9201      	str	r2, [sp, #4]
    a630:	9200      	str	r2, [sp, #0]
    a632:	681c      	ldr	r4, [r3, #0]
    a634:	4907      	ldr	r1, [pc, #28]	; (a654 <packet_rx_enqueue+0x8c>)
    a636:	4b08      	ldr	r3, [pc, #32]	; (a658 <packet_rx_enqueue+0x90>)
    a638:	4809      	ldr	r0, [pc, #36]	; (a660 <packet_rx_enqueue+0x98>)
    a63a:	e7d5      	b.n	a5e8 <packet_rx_enqueue+0x20>
}
    a63c:	b002      	add	sp, #8
    a63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    a642:	f006 bbf7 	b.w	10e34 <radio_event_callback>
    a646:	bf00      	nop
    a648:	200008f0 	.word	0x200008f0
    a64c:	00014891 	.word	0x00014891
    a650:	20003aa4 	.word	0x20003aa4
    a654:	00015639 	.word	0x00015639
    a658:	00016dc6 	.word	0x00016dc6
    a65c:	0001768c 	.word	0x0001768c
    a660:	00016eaf 	.word	0x00016eaf

0000a664 <isr_scan_tgta_check>:
{
    a664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a668:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a66a:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    a66c:	f101 0808 	add.w	r8, r1, #8
{
    a670:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a672:	09c0      	lsrs	r0, r0, #7
    a674:	4641      	mov	r1, r8
{
    a676:	4691      	mov	r9, r2
    a678:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a67a:	f007 f877 	bl	1176c <ctrl_rl_addr_resolve>
    a67e:	4604      	mov	r4, r0
    a680:	b9d8      	cbnz	r0, a6ba <isr_scan_tgta_check+0x56>
    a682:	4f1c      	ldr	r7, [pc, #112]	; (a6f4 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a684:	f1ba 0f00 	cmp.w	sl, #0
    a688:	d10e      	bne.n	a6a8 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a68a:	782b      	ldrb	r3, [r5, #0]
    a68c:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    a690:	09db      	lsrs	r3, r3, #7
    a692:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a696:	d113      	bne.n	a6c0 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    a698:	2206      	movs	r2, #6
    a69a:	4641      	mov	r1, r8
    a69c:	4816      	ldr	r0, [pc, #88]	; (a6f8 <isr_scan_tgta_check+0x94>)
    a69e:	f7f7 faaa 	bl	1bf6 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a6a2:	b968      	cbnz	r0, a6c0 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    a6a4:	2001      	movs	r0, #1
    a6a6:	e012      	b.n	a6ce <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a6a8:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    a6ac:	07db      	lsls	r3, r3, #31
    a6ae:	d5ec      	bpl.n	a68a <isr_scan_tgta_check+0x26>
    a6b0:	4648      	mov	r0, r9
    a6b2:	f006 fdb7 	bl	11224 <ctrl_lrpa_get>
    a6b6:	2800      	cmp	r0, #0
    a6b8:	d0e7      	beq.n	a68a <isr_scan_tgta_check+0x26>
}
    a6ba:	4620      	mov	r0, r4
    a6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a6c0:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    a6c4:	f3c0 1001 	ubfx	r0, r0, #4, #2
    a6c8:	f010 0002 	ands.w	r0, r0, #2
    a6cc:	d101      	bne.n	a6d2 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    a6ce:	4604      	mov	r4, r0
    a6d0:	e7f3      	b.n	a6ba <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a6d2:	f995 3000 	ldrsb.w	r3, [r5]
    a6d6:	2b00      	cmp	r3, #0
    a6d8:	da09      	bge.n	a6ee <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    a6da:	7b6b      	ldrb	r3, [r5, #13]
    a6dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a6e0:	2b40      	cmp	r3, #64	; 0x40
    a6e2:	d104      	bne.n	a6ee <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    a6e4:	2e00      	cmp	r6, #0
    a6e6:	d0dd      	beq.n	a6a4 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    a6e8:	2001      	movs	r0, #1
    a6ea:	7030      	strb	r0, [r6, #0]
    a6ec:	e7ef      	b.n	a6ce <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    a6ee:	2000      	movs	r0, #0
    a6f0:	e7ed      	b.n	a6ce <isr_scan_tgta_check+0x6a>
    a6f2:	bf00      	nop
    a6f4:	200008f0 	.word	0x200008f0
    a6f8:	200009d4 	.word	0x200009d4

0000a6fc <isr_rx_scan_report>:
{
    a6fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a700:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    a702:	2003      	movs	r0, #3
{
    a704:	460f      	mov	r7, r1
    a706:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    a708:	f7ff f8e8 	bl	98dc <packet_rx_reserve_get>
	if (node_rx == 0) {
    a70c:	4604      	mov	r4, r0
    a70e:	2800      	cmp	r0, #0
    a710:	d03e      	beq.n	a790 <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    a712:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a716:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    a718:	4b1e      	ldr	r3, [pc, #120]	; (a794 <isr_rx_scan_report+0x98>)
    a71a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    a71e:	075a      	lsls	r2, r3, #29
    a720:	d032      	beq.n	a788 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    a722:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a726:	b2da      	uxtb	r2, r3
    a728:	2a01      	cmp	r2, #1
    a72a:	d010      	beq.n	a74e <isr_rx_scan_report+0x52>
    a72c:	2a04      	cmp	r2, #4
    a72e:	d00f      	beq.n	a750 <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    a730:	4a19      	ldr	r2, [pc, #100]	; (a798 <isr_rx_scan_report+0x9c>)
    a732:	4b1a      	ldr	r3, [pc, #104]	; (a79c <isr_rx_scan_report+0xa0>)
    a734:	9201      	str	r2, [sp, #4]
    a736:	9200      	str	r2, [sp, #0]
    a738:	681c      	ldr	r4, [r3, #0]
    a73a:	4919      	ldr	r1, [pc, #100]	; (a7a0 <isr_rx_scan_report+0xa4>)
    a73c:	4b19      	ldr	r3, [pc, #100]	; (a7a4 <isr_rx_scan_report+0xa8>)
    a73e:	481a      	ldr	r0, [pc, #104]	; (a7a8 <isr_rx_scan_report+0xac>)
    a740:	47a0      	blx	r4
    a742:	4040      	eors	r0, r0
    a744:	f380 8811 	msr	BASEPRI, r0
    a748:	f04f 0004 	mov.w	r0, #4
    a74c:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    a74e:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    a750:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a754:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    a756:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a75a:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    a75e:	f1b9 0f00 	cmp.w	r9, #0
    a762:	d013      	beq.n	a78c <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    a764:	f007 fd8c 	bl	12280 <radio_rssi_get>
			     pdu_adv_rx->len] =
    a768:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    a76c:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a770:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    a772:	442b      	add	r3, r5
    a774:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a776:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    a778:	441d      	add	r5, r3
    a77a:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    a77c:	f7ff ff24 	bl	a5c8 <packet_rx_enqueue>
	return 0;
    a780:	2000      	movs	r0, #0
}
    a782:	b003      	add	sp, #12
    a784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a788:	2302      	movs	r3, #2
    a78a:	e7e1      	b.n	a750 <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    a78c:	207f      	movs	r0, #127	; 0x7f
    a78e:	e7ed      	b.n	a76c <isr_rx_scan_report+0x70>
		return 1;
    a790:	2001      	movs	r0, #1
    a792:	e7f6      	b.n	a782 <isr_rx_scan_report+0x86>
    a794:	200008f0 	.word	0x200008f0
    a798:	00014891 	.word	0x00014891
    a79c:	20003aa4 	.word	0x20003aa4
    a7a0:	00015639 	.word	0x00015639
    a7a4:	00016a5c 	.word	0x00016a5c
    a7a8:	00015597 	.word	0x00015597

0000a7ac <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    a7ac:	4a0b      	ldr	r2, [pc, #44]	; (a7dc <rx_fc_lock+0x30>)
    a7ae:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a7b2:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    a7b6:	4299      	cmp	r1, r3
    a7b8:	d10e      	bne.n	a7d8 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    a7ba:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a7be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a7c2:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    a7c6:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a7ca:	3301      	adds	r3, #1
    a7cc:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    a7ce:	2b03      	cmp	r3, #3
    a7d0:	bf08      	it	eq
    a7d2:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    a7d4:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    a7d8:	4770      	bx	lr
    a7da:	bf00      	nop
    a7dc:	200008f0 	.word	0x200008f0

0000a7e0 <ticker_success_assert>:
{
    a7e0:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a7e2:	b170      	cbz	r0, a802 <ticker_success_assert+0x22>
    a7e4:	4a08      	ldr	r2, [pc, #32]	; (a808 <ticker_success_assert+0x28>)
    a7e6:	4b09      	ldr	r3, [pc, #36]	; (a80c <ticker_success_assert+0x2c>)
    a7e8:	9201      	str	r2, [sp, #4]
    a7ea:	9200      	str	r2, [sp, #0]
    a7ec:	681c      	ldr	r4, [r3, #0]
    a7ee:	4908      	ldr	r1, [pc, #32]	; (a810 <ticker_success_assert+0x30>)
    a7f0:	4b08      	ldr	r3, [pc, #32]	; (a814 <ticker_success_assert+0x34>)
    a7f2:	4809      	ldr	r0, [pc, #36]	; (a818 <ticker_success_assert+0x38>)
    a7f4:	47a0      	blx	r4
    a7f6:	4040      	eors	r0, r0
    a7f8:	f380 8811 	msr	BASEPRI, r0
    a7fc:	f04f 0004 	mov.w	r0, #4
    a800:	df02      	svc	2
}
    a802:	b002      	add	sp, #8
    a804:	bd10      	pop	{r4, pc}
    a806:	bf00      	nop
    a808:	00014891 	.word	0x00014891
    a80c:	20003aa4 	.word	0x20003aa4
    a810:	00015639 	.word	0x00015639
    a814:	00016b45 	.word	0x00016b45
    a818:	00017aac 	.word	0x00017aac

0000a81c <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a81c:	2801      	cmp	r0, #1
{
    a81e:	b513      	push	{r0, r1, r4, lr}
    a820:	4b11      	ldr	r3, [pc, #68]	; (a868 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    a822:	d115      	bne.n	a850 <ticker_stop_adv_assert+0x34>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    a824:	7c9a      	ldrb	r2, [r3, #18]
    a826:	2a05      	cmp	r2, #5
    a828:	d103      	bne.n	a832 <ticker_stop_adv_assert+0x16>
			_radio.ticker_id_stop = 0;
    a82a:	2200      	movs	r2, #0
    a82c:	749a      	strb	r2, [r3, #18]
}
    a82e:	b002      	add	sp, #8
    a830:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    a832:	4a0e      	ldr	r2, [pc, #56]	; (a86c <ticker_stop_adv_assert+0x50>)
    a834:	4b0e      	ldr	r3, [pc, #56]	; (a870 <ticker_stop_adv_assert+0x54>)
    a836:	9201      	str	r2, [sp, #4]
    a838:	9200      	str	r2, [sp, #0]
    a83a:	681c      	ldr	r4, [r3, #0]
    a83c:	490d      	ldr	r1, [pc, #52]	; (a874 <ticker_stop_adv_assert+0x58>)
    a83e:	4b0e      	ldr	r3, [pc, #56]	; (a878 <ticker_stop_adv_assert+0x5c>)
    a840:	480e      	ldr	r0, [pc, #56]	; (a87c <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    a842:	47a0      	blx	r4
    a844:	4040      	eors	r0, r0
    a846:	f380 8811 	msr	BASEPRI, r0
    a84a:	f04f 0004 	mov.w	r0, #4
    a84e:	df02      	svc	2
    a850:	7c1b      	ldrb	r3, [r3, #16]
    a852:	2b05      	cmp	r3, #5
    a854:	d1eb      	bne.n	a82e <ticker_stop_adv_assert+0x12>
    a856:	4a05      	ldr	r2, [pc, #20]	; (a86c <ticker_stop_adv_assert+0x50>)
    a858:	4b05      	ldr	r3, [pc, #20]	; (a870 <ticker_stop_adv_assert+0x54>)
    a85a:	9201      	str	r2, [sp, #4]
    a85c:	9200      	str	r2, [sp, #0]
    a85e:	681c      	ldr	r4, [r3, #0]
    a860:	4904      	ldr	r1, [pc, #16]	; (a874 <ticker_stop_adv_assert+0x58>)
    a862:	4b05      	ldr	r3, [pc, #20]	; (a878 <ticker_stop_adv_assert+0x5c>)
    a864:	4806      	ldr	r0, [pc, #24]	; (a880 <ticker_stop_adv_assert+0x64>)
    a866:	e7ec      	b.n	a842 <ticker_stop_adv_assert+0x26>
    a868:	200008f0 	.word	0x200008f0
    a86c:	00014891 	.word	0x00014891
    a870:	20003aa4 	.word	0x20003aa4
    a874:	00015639 	.word	0x00015639
    a878:	00016b5b 	.word	0x00016b5b
    a87c:	00015597 	.word	0x00015597
    a880:	00017a2e 	.word	0x00017a2e

0000a884 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a884:	2801      	cmp	r0, #1
{
    a886:	b513      	push	{r0, r1, r4, lr}
    a888:	4b11      	ldr	r3, [pc, #68]	; (a8d0 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    a88a:	d115      	bne.n	a8b8 <ticker_stop_scan_assert+0x34>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    a88c:	7c9a      	ldrb	r2, [r3, #18]
    a88e:	2a06      	cmp	r2, #6
    a890:	d103      	bne.n	a89a <ticker_stop_scan_assert+0x16>
			_radio.ticker_id_stop = 0;
    a892:	2200      	movs	r2, #0
    a894:	749a      	strb	r2, [r3, #18]
}
    a896:	b002      	add	sp, #8
    a898:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    a89a:	4a0e      	ldr	r2, [pc, #56]	; (a8d4 <ticker_stop_scan_assert+0x50>)
    a89c:	4b0e      	ldr	r3, [pc, #56]	; (a8d8 <ticker_stop_scan_assert+0x54>)
    a89e:	9201      	str	r2, [sp, #4]
    a8a0:	9200      	str	r2, [sp, #0]
    a8a2:	681c      	ldr	r4, [r3, #0]
    a8a4:	490d      	ldr	r1, [pc, #52]	; (a8dc <ticker_stop_scan_assert+0x58>)
    a8a6:	4b0e      	ldr	r3, [pc, #56]	; (a8e0 <ticker_stop_scan_assert+0x5c>)
    a8a8:	480e      	ldr	r0, [pc, #56]	; (a8e4 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    a8aa:	47a0      	blx	r4
    a8ac:	4040      	eors	r0, r0
    a8ae:	f380 8811 	msr	BASEPRI, r0
    a8b2:	f04f 0004 	mov.w	r0, #4
    a8b6:	df02      	svc	2
    a8b8:	7c1b      	ldrb	r3, [r3, #16]
    a8ba:	2b06      	cmp	r3, #6
    a8bc:	d1eb      	bne.n	a896 <ticker_stop_scan_assert+0x12>
    a8be:	4a05      	ldr	r2, [pc, #20]	; (a8d4 <ticker_stop_scan_assert+0x50>)
    a8c0:	4b05      	ldr	r3, [pc, #20]	; (a8d8 <ticker_stop_scan_assert+0x54>)
    a8c2:	9201      	str	r2, [sp, #4]
    a8c4:	9200      	str	r2, [sp, #0]
    a8c6:	681c      	ldr	r4, [r3, #0]
    a8c8:	4904      	ldr	r1, [pc, #16]	; (a8dc <ticker_stop_scan_assert+0x58>)
    a8ca:	4b05      	ldr	r3, [pc, #20]	; (a8e0 <ticker_stop_scan_assert+0x5c>)
    a8cc:	4806      	ldr	r0, [pc, #24]	; (a8e8 <ticker_stop_scan_assert+0x64>)
    a8ce:	e7ec      	b.n	a8aa <ticker_stop_scan_assert+0x26>
    a8d0:	200008f0 	.word	0x200008f0
    a8d4:	00014891 	.word	0x00014891
    a8d8:	20003aa4 	.word	0x20003aa4
    a8dc:	00015639 	.word	0x00015639
    a8e0:	00016b72 	.word	0x00016b72
    a8e4:	00015597 	.word	0x00015597
    a8e8:	00017a6d 	.word	0x00017a6d

0000a8ec <ticker_update_adv_assert>:
{
    a8ec:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    a8ee:	b190      	cbz	r0, a916 <ticker_update_adv_assert+0x2a>
    a8f0:	4b0a      	ldr	r3, [pc, #40]	; (a91c <ticker_update_adv_assert+0x30>)
    a8f2:	7c9b      	ldrb	r3, [r3, #18]
    a8f4:	2b05      	cmp	r3, #5
    a8f6:	d00e      	beq.n	a916 <ticker_update_adv_assert+0x2a>
    a8f8:	4a09      	ldr	r2, [pc, #36]	; (a920 <ticker_update_adv_assert+0x34>)
    a8fa:	4b0a      	ldr	r3, [pc, #40]	; (a924 <ticker_update_adv_assert+0x38>)
    a8fc:	9201      	str	r2, [sp, #4]
    a8fe:	9200      	str	r2, [sp, #0]
    a900:	681c      	ldr	r4, [r3, #0]
    a902:	4909      	ldr	r1, [pc, #36]	; (a928 <ticker_update_adv_assert+0x3c>)
    a904:	4b09      	ldr	r3, [pc, #36]	; (a92c <ticker_update_adv_assert+0x40>)
    a906:	480a      	ldr	r0, [pc, #40]	; (a930 <ticker_update_adv_assert+0x44>)
    a908:	47a0      	blx	r4
    a90a:	4040      	eors	r0, r0
    a90c:	f380 8811 	msr	BASEPRI, r0
    a910:	f04f 0004 	mov.w	r0, #4
    a914:	df02      	svc	2
}
    a916:	b002      	add	sp, #8
    a918:	bd10      	pop	{r4, pc}
    a91a:	bf00      	nop
    a91c:	200008f0 	.word	0x200008f0
    a920:	00014891 	.word	0x00014891
    a924:	20003aa4 	.word	0x20003aa4
    a928:	00015639 	.word	0x00015639
    a92c:	00016b8a 	.word	0x00016b8a
    a930:	00017ad9 	.word	0x00017ad9

0000a934 <ticker_update_slave_assert>:
{
    a934:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    a936:	b198      	cbz	r0, a960 <ticker_update_slave_assert+0x2c>
    a938:	4b0a      	ldr	r3, [pc, #40]	; (a964 <ticker_update_slave_assert+0x30>)
    a93a:	7c9b      	ldrb	r3, [r3, #18]
    a93c:	b2c9      	uxtb	r1, r1
    a93e:	4299      	cmp	r1, r3
    a940:	d00e      	beq.n	a960 <ticker_update_slave_assert+0x2c>
    a942:	4a09      	ldr	r2, [pc, #36]	; (a968 <ticker_update_slave_assert+0x34>)
    a944:	4b09      	ldr	r3, [pc, #36]	; (a96c <ticker_update_slave_assert+0x38>)
    a946:	9201      	str	r2, [sp, #4]
    a948:	9200      	str	r2, [sp, #0]
    a94a:	681c      	ldr	r4, [r3, #0]
    a94c:	4908      	ldr	r1, [pc, #32]	; (a970 <ticker_update_slave_assert+0x3c>)
    a94e:	4b09      	ldr	r3, [pc, #36]	; (a974 <ticker_update_slave_assert+0x40>)
    a950:	4809      	ldr	r0, [pc, #36]	; (a978 <ticker_update_slave_assert+0x44>)
    a952:	47a0      	blx	r4
    a954:	4040      	eors	r0, r0
    a956:	f380 8811 	msr	BASEPRI, r0
    a95a:	f04f 0004 	mov.w	r0, #4
    a95e:	df02      	svc	2
}
    a960:	b002      	add	sp, #8
    a962:	bd10      	pop	{r4, pc}
    a964:	200008f0 	.word	0x200008f0
    a968:	00014891 	.word	0x00014891
    a96c:	20003aa4 	.word	0x20003aa4
    a970:	00015639 	.word	0x00015639
    a974:	00016ba3 	.word	0x00016ba3
    a978:	00017b28 	.word	0x00017b28

0000a97c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    a97c:	b513      	push	{r0, r1, r4, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    a97e:	b170      	cbz	r0, a99e <ticker_op_latency_cancelled+0x22>
    a980:	4a0b      	ldr	r2, [pc, #44]	; (a9b0 <ticker_op_latency_cancelled+0x34>)
    a982:	4b0c      	ldr	r3, [pc, #48]	; (a9b4 <ticker_op_latency_cancelled+0x38>)
    a984:	9201      	str	r2, [sp, #4]
    a986:	9200      	str	r2, [sp, #0]
    a988:	681c      	ldr	r4, [r3, #0]
    a98a:	490b      	ldr	r1, [pc, #44]	; (a9b8 <ticker_op_latency_cancelled+0x3c>)
    a98c:	4b0b      	ldr	r3, [pc, #44]	; (a9bc <ticker_op_latency_cancelled+0x40>)
    a98e:	480c      	ldr	r0, [pc, #48]	; (a9c0 <ticker_op_latency_cancelled+0x44>)
    a990:	47a0      	blx	r4
    a992:	4040      	eors	r0, r0
    a994:	f380 8811 	msr	BASEPRI, r0
    a998:	f04f 0004 	mov.w	r0, #4
    a99c:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    a99e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    a9a2:	f360 0341 	bfi	r3, r0, #1, #1
    a9a6:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    a9aa:	b002      	add	sp, #8
    a9ac:	bd10      	pop	{r4, pc}
    a9ae:	bf00      	nop
    a9b0:	00014891 	.word	0x00014891
    a9b4:	20003aa4 	.word	0x20003aa4
    a9b8:	00015639 	.word	0x00015639
    a9bc:	00016e81 	.word	0x00016e81
    a9c0:	000179fa 	.word	0x000179fa

0000a9c4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    a9c4:	4b04      	ldr	r3, [pc, #16]	; (a9d8 <ticker_job_disable+0x14>)
    a9c6:	7d1b      	ldrb	r3, [r3, #20]
    a9c8:	b123      	cbz	r3, a9d4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    a9ca:	2101      	movs	r1, #1
    a9cc:	2200      	movs	r2, #0
    a9ce:	4608      	mov	r0, r1
    a9d0:	f7fc ba0e 	b.w	6df0 <mayfly_enable>
    a9d4:	4770      	bx	lr
    a9d6:	bf00      	nop
    a9d8:	200008f0 	.word	0x200008f0

0000a9dc <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a9dc:	2806      	cmp	r0, #6
{
    a9de:	b510      	push	{r4, lr}
    a9e0:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a9e2:	d90a      	bls.n	a9fa <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a9e4:	4b09      	ldr	r3, [pc, #36]	; (aa0c <hdr_conn_get+0x30>)
    a9e6:	1fc2      	subs	r2, r0, #7
    a9e8:	b292      	uxth	r2, r2
    a9ea:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a9ee:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    a9f2:	f7fc f98f 	bl	6d14 <mem_get>
    a9f6:	6020      	str	r0, [r4, #0]
    a9f8:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    a9fa:	2805      	cmp	r0, #5
    a9fc:	d004      	beq.n	aa08 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    a9fe:	2806      	cmp	r0, #6
	return NULL;
    aa00:	4803      	ldr	r0, [pc, #12]	; (aa10 <hdr_conn_get+0x34>)
    aa02:	bf18      	it	ne
    aa04:	2000      	movne	r0, #0
    aa06:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    aa08:	4802      	ldr	r0, [pc, #8]	; (aa14 <hdr_conn_get+0x38>)
}
    aa0a:	bd10      	pop	{r4, pc}
    aa0c:	200008f0 	.word	0x200008f0
    aa10:	200009c0 	.word	0x200009c0
    aa14:	20000908 	.word	0x20000908

0000aa18 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    aa18:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    aa1a:	4b07      	ldr	r3, [pc, #28]	; (aa38 <event_stop.part.10+0x20>)
    aa1c:	4a07      	ldr	r2, [pc, #28]	; (aa3c <event_stop.part.10+0x24>)
    aa1e:	9201      	str	r2, [sp, #4]
    aa20:	9200      	str	r2, [sp, #0]
    aa22:	681c      	ldr	r4, [r3, #0]
    aa24:	4906      	ldr	r1, [pc, #24]	; (aa40 <event_stop.part.10+0x28>)
    aa26:	4b07      	ldr	r3, [pc, #28]	; (aa44 <event_stop.part.10+0x2c>)
    aa28:	4807      	ldr	r0, [pc, #28]	; (aa48 <event_stop.part.10+0x30>)
    aa2a:	47a0      	blx	r4
    aa2c:	4040      	eors	r0, r0
    aa2e:	f380 8811 	msr	BASEPRI, r0
    aa32:	f04f 0004 	mov.w	r0, #4
    aa36:	df02      	svc	2
    aa38:	20003aa4 	.word	0x20003aa4
    aa3c:	00014891 	.word	0x00014891
    aa40:	00015639 	.word	0x00015639
    aa44:	00016ca2 	.word	0x00016ca2
    aa48:	0001760f 	.word	0x0001760f

0000aa4c <event_stop>:
	s_mfy_radio_stop.param = context;
    aa4c:	4a06      	ldr	r2, [pc, #24]	; (aa68 <event_stop+0x1c>)
{
    aa4e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    aa50:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    aa52:	4613      	mov	r3, r2
    aa54:	2200      	movs	r2, #0
    aa56:	4611      	mov	r1, r2
    aa58:	4610      	mov	r0, r2
    aa5a:	f7fc f9f1 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    aa5e:	b108      	cbz	r0, aa64 <event_stop+0x18>
    aa60:	f7ff ffda 	bl	aa18 <event_stop.part.10>
    aa64:	bd08      	pop	{r3, pc}
    aa66:	bf00      	nop
    aa68:	20003db8 	.word	0x20003db8

0000aa6c <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    aa6c:	2200      	movs	r2, #0
{
    aa6e:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    aa70:	4b0b      	ldr	r3, [pc, #44]	; (aaa0 <event_active+0x34>)
    aa72:	4611      	mov	r1, r2
    aa74:	4610      	mov	r0, r2
    aa76:	f7fc f9e3 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    aa7a:	b170      	cbz	r0, aa9a <event_active+0x2e>
    aa7c:	4a09      	ldr	r2, [pc, #36]	; (aaa4 <event_active+0x38>)
    aa7e:	4b0a      	ldr	r3, [pc, #40]	; (aaa8 <event_active+0x3c>)
    aa80:	9201      	str	r2, [sp, #4]
    aa82:	9200      	str	r2, [sp, #0]
    aa84:	681c      	ldr	r4, [r3, #0]
    aa86:	4909      	ldr	r1, [pc, #36]	; (aaac <event_active+0x40>)
    aa88:	4b09      	ldr	r3, [pc, #36]	; (aab0 <event_active+0x44>)
    aa8a:	480a      	ldr	r0, [pc, #40]	; (aab4 <event_active+0x48>)
    aa8c:	47a0      	blx	r4
    aa8e:	4040      	eors	r0, r0
    aa90:	f380 8811 	msr	BASEPRI, r0
    aa94:	f04f 0004 	mov.w	r0, #4
    aa98:	df02      	svc	2
}
    aa9a:	b002      	add	sp, #8
    aa9c:	bd10      	pop	{r4, pc}
    aa9e:	bf00      	nop
    aaa0:	20003d88 	.word	0x20003d88
    aaa4:	00014891 	.word	0x00014891
    aaa8:	20003aa4 	.word	0x20003aa4
    aaac:	00015639 	.word	0x00015639
    aab0:	00016bd2 	.word	0x00016bd2
    aab4:	0001760f 	.word	0x0001760f

0000aab8 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    aab8:	2200      	movs	r2, #0
{
    aaba:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    aabc:	4b0b      	ldr	r3, [pc, #44]	; (aaec <event_xtal+0x34>)
    aabe:	4611      	mov	r1, r2
    aac0:	4610      	mov	r0, r2
    aac2:	f7fc f9bd 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    aac6:	b170      	cbz	r0, aae6 <event_xtal+0x2e>
    aac8:	4a09      	ldr	r2, [pc, #36]	; (aaf0 <event_xtal+0x38>)
    aaca:	4b0a      	ldr	r3, [pc, #40]	; (aaf4 <event_xtal+0x3c>)
    aacc:	9201      	str	r2, [sp, #4]
    aace:	9200      	str	r2, [sp, #0]
    aad0:	681c      	ldr	r4, [r3, #0]
    aad2:	4909      	ldr	r1, [pc, #36]	; (aaf8 <event_xtal+0x40>)
    aad4:	4b09      	ldr	r3, [pc, #36]	; (aafc <event_xtal+0x44>)
    aad6:	480a      	ldr	r0, [pc, #40]	; (ab00 <event_xtal+0x48>)
    aad8:	47a0      	blx	r4
    aada:	4040      	eors	r0, r0
    aadc:	f380 8811 	msr	BASEPRI, r0
    aae0:	f04f 0004 	mov.w	r0, #4
    aae4:	df02      	svc	2
}
    aae6:	b002      	add	sp, #8
    aae8:	bd10      	pop	{r4, pc}
    aaea:	bf00      	nop
    aaec:	20003e08 	.word	0x20003e08
    aaf0:	00014891 	.word	0x00014891
    aaf4:	20003aa4 	.word	0x20003aa4
    aaf8:	00015639 	.word	0x00015639
    aafc:	00016bee 	.word	0x00016bee
    ab00:	0001760f 	.word	0x0001760f

0000ab04 <mayfly_radio_active>:
{
    ab04:	b513      	push	{r0, r1, r4, lr}
    ab06:	4a11      	ldr	r2, [pc, #68]	; (ab4c <mayfly_radio_active+0x48>)
		if (s_active++) {
    ab08:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    ab0a:	b140      	cbz	r0, ab1e <mayfly_radio_active+0x1a>
		if (s_active++) {
    ab0c:	1c59      	adds	r1, r3, #1
    ab0e:	7011      	strb	r1, [r2, #0]
    ab10:	b9d3      	cbnz	r3, ab48 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    ab12:	2001      	movs	r0, #1
}
    ab14:	b002      	add	sp, #8
    ab16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_active_callback(0);
    ab1a:	f006 b989 	b.w	10e30 <radio_active_callback>
		LL_ASSERT(s_active);
    ab1e:	b973      	cbnz	r3, ab3e <mayfly_radio_active+0x3a>
    ab20:	4a0b      	ldr	r2, [pc, #44]	; (ab50 <mayfly_radio_active+0x4c>)
    ab22:	4b0c      	ldr	r3, [pc, #48]	; (ab54 <mayfly_radio_active+0x50>)
    ab24:	9201      	str	r2, [sp, #4]
    ab26:	9200      	str	r2, [sp, #0]
    ab28:	681c      	ldr	r4, [r3, #0]
    ab2a:	490b      	ldr	r1, [pc, #44]	; (ab58 <mayfly_radio_active+0x54>)
    ab2c:	4b0b      	ldr	r3, [pc, #44]	; (ab5c <mayfly_radio_active+0x58>)
    ab2e:	480c      	ldr	r0, [pc, #48]	; (ab60 <mayfly_radio_active+0x5c>)
    ab30:	47a0      	blx	r4
    ab32:	4040      	eors	r0, r0
    ab34:	f380 8811 	msr	BASEPRI, r0
    ab38:	f04f 0004 	mov.w	r0, #4
    ab3c:	df02      	svc	2
		if (--s_active) {
    ab3e:	3b01      	subs	r3, #1
    ab40:	b2db      	uxtb	r3, r3
    ab42:	7013      	strb	r3, [r2, #0]
    ab44:	2b00      	cmp	r3, #0
    ab46:	d0e5      	beq.n	ab14 <mayfly_radio_active+0x10>
}
    ab48:	b002      	add	sp, #8
    ab4a:	bd10      	pop	{r4, pc}
    ab4c:	20000a94 	.word	0x20000a94
    ab50:	00014891 	.word	0x00014891
    ab54:	20003aa4 	.word	0x20003aa4
    ab58:	00015639 	.word	0x00015639
    ab5c:	00016bbe 	.word	0x00016bbe
    ab60:	00017564 	.word	0x00017564

0000ab64 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    ab64:	2000      	movs	r0, #0
    ab66:	f7ff bfcd 	b.w	ab04 <mayfly_radio_active>
	...

0000ab6c <mayfly_radio_stop>:
{
    ab6c:	b513      	push	{r0, r1, r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    ab6e:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    ab70:	1f03      	subs	r3, r0, #4
    ab72:	2b01      	cmp	r3, #1
    ab74:	d90e      	bls.n	ab94 <mayfly_radio_stop+0x28>
    ab76:	4a10      	ldr	r2, [pc, #64]	; (abb8 <mayfly_radio_stop+0x4c>)
    ab78:	4b10      	ldr	r3, [pc, #64]	; (abbc <mayfly_radio_stop+0x50>)
    ab7a:	9201      	str	r2, [sp, #4]
    ab7c:	9200      	str	r2, [sp, #0]
    ab7e:	681c      	ldr	r4, [r3, #0]
    ab80:	490f      	ldr	r1, [pc, #60]	; (abc0 <mayfly_radio_stop+0x54>)
    ab82:	4b10      	ldr	r3, [pc, #64]	; (abc4 <mayfly_radio_stop+0x58>)
    ab84:	4810      	ldr	r0, [pc, #64]	; (abc8 <mayfly_radio_stop+0x5c>)
    ab86:	47a0      	blx	r4
    ab88:	4040      	eors	r0, r0
    ab8a:	f380 8811 	msr	BASEPRI, r0
    ab8e:	f04f 0004 	mov.w	r0, #4
    ab92:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    ab94:	4a0d      	ldr	r2, [pc, #52]	; (abcc <mayfly_radio_stop+0x60>)
    ab96:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    ab98:	b143      	cbz	r3, abac <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    ab9a:	3b04      	subs	r3, #4
    ab9c:	2b01      	cmp	r3, #1
    ab9e:	d905      	bls.n	abac <mayfly_radio_stop+0x40>
			_radio.state = state;
    aba0:	7510      	strb	r0, [r2, #20]
}
    aba2:	b002      	add	sp, #8
    aba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    aba8:	f007 bae2 	b.w	12170 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    abac:	f007 fb12 	bl	121d4 <radio_is_idle>
    abb0:	2800      	cmp	r0, #0
    abb2:	d0f6      	beq.n	aba2 <mayfly_radio_stop+0x36>
}
    abb4:	b002      	add	sp, #8
    abb6:	bd10      	pop	{r4, pc}
    abb8:	00014891 	.word	0x00014891
    abbc:	20003aa4 	.word	0x20003aa4
    abc0:	00015639 	.word	0x00015639
    abc4:	00016c90 	.word	0x00016c90
    abc8:	0001758e 	.word	0x0001758e
    abcc:	200008f0 	.word	0x200008f0

0000abd0 <pdu_node_tx_release>:
{
    abd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    abd2:	4a17      	ldr	r2, [pc, #92]	; (ac30 <pdu_node_tx_release+0x60>)
    abd4:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    abd8:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    abdc:	3301      	adds	r3, #1
    abde:	b2db      	uxtb	r3, r3
		last = 0;
    abe0:	429c      	cmp	r4, r3
    abe2:	bf08      	it	eq
    abe4:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    abe6:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    abea:	429c      	cmp	r4, r3
    abec:	d10e      	bne.n	ac0c <pdu_node_tx_release+0x3c>
    abee:	4a11      	ldr	r2, [pc, #68]	; (ac34 <pdu_node_tx_release+0x64>)
    abf0:	4b11      	ldr	r3, [pc, #68]	; (ac38 <pdu_node_tx_release+0x68>)
    abf2:	9201      	str	r2, [sp, #4]
    abf4:	9200      	str	r2, [sp, #0]
    abf6:	681c      	ldr	r4, [r3, #0]
    abf8:	4910      	ldr	r1, [pc, #64]	; (ac3c <pdu_node_tx_release+0x6c>)
    abfa:	4b11      	ldr	r3, [pc, #68]	; (ac40 <pdu_node_tx_release+0x70>)
    abfc:	4811      	ldr	r0, [pc, #68]	; (ac44 <pdu_node_tx_release+0x74>)
    abfe:	47a0      	blx	r4
    ac00:	4040      	eors	r0, r0
    ac02:	f380 8811 	msr	BASEPRI, r0
    ac06:	f04f 0004 	mov.w	r0, #4
    ac0a:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    ac0c:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    ac10:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    ac14:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    ac18:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    ac1c:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    ac20:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    ac22:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    ac26:	b003      	add	sp, #12
    ac28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    ac2c:	f006 b902 	b.w	10e34 <radio_event_callback>
    ac30:	200008f0 	.word	0x200008f0
    ac34:	00014891 	.word	0x00014891
    ac38:	20003aa4 	.word	0x20003aa4
    ac3c:	00015639 	.word	0x00015639
    ac40:	00016dd8 	.word	0x00016dd8
    ac44:	000176df 	.word	0x000176df

0000ac48 <packet_tx_enqueue>:
{
    ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    ac4c:	4c24      	ldr	r4, [pc, #144]	; (ace0 <packet_tx_enqueue+0x98>)
{
    ac4e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    ac50:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    ac52:	b12e      	cbz	r6, ac60 <packet_tx_enqueue+0x18>
    ac54:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    ac58:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    ac5c:	429a      	cmp	r2, r3
    ac5e:	d101      	bne.n	ac64 <packet_tx_enqueue+0x1c>
    ac60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ac64:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    ac68:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ac6c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    ac70:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ac74:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ac78:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    ac7c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    ac7e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ac80:	f7fc f848 	bl	6d14 <mem_get>
    ac84:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    ac86:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    ac8a:	8c1a      	ldrh	r2, [r3, #32]
    ac8c:	4282      	cmp	r2, r0
    ac8e:	d11f      	bne.n	acd0 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    ac90:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    ac94:	b942      	cbnz	r2, aca8 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    ac96:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    ac9a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    ac9e:	b91a      	cbnz	r2, aca8 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    aca0:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    aca4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    aca8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    acac:	b102      	cbz	r2, acb0 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    acae:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    acb0:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    acb4:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    acb8:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    acbc:	3301      	adds	r3, #1
    acbe:	b2db      	uxtb	r3, r3
			first = 0;
    acc0:	429a      	cmp	r2, r3
    acc2:	bf08      	it	eq
    acc4:	2300      	moveq	r3, #0
    acc6:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    acc8:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    accc:	b2f6      	uxtb	r6, r6
    acce:	e7c0      	b.n	ac52 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    acd0:	792b      	ldrb	r3, [r5, #4]
    acd2:	f367 0301 	bfi	r3, r7, #0, #2
    acd6:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    acd8:	4629      	mov	r1, r5
    acda:	f7ff ff79 	bl	abd0 <pdu_node_tx_release>
    acde:	e7e9      	b.n	acb4 <packet_tx_enqueue+0x6c>
    ace0:	200008f0 	.word	0x200008f0

0000ace4 <connection_release>:
{
    ace4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ace6:	2201      	movs	r2, #1
{
    ace8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    acea:	4611      	mov	r1, r2
    acec:	2000      	movs	r0, #0
    acee:	f7fc f87f 	bl	6df0 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    acf2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    acf6:	2100      	movs	r1, #0
    acf8:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    acfc:	3207      	adds	r2, #7
	ticker_status =
    acfe:	9300      	str	r3, [sp, #0]
    ad00:	4608      	mov	r0, r1
    ad02:	4b3e      	ldr	r3, [pc, #248]	; (adfc <connection_release+0x118>)
    ad04:	b2d2      	uxtb	r2, r2
    ad06:	f7fc fef7 	bl	7af8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ad0a:	f030 0102 	bics.w	r1, r0, #2
    ad0e:	d00e      	beq.n	ad2e <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ad10:	4a3b      	ldr	r2, [pc, #236]	; (ae00 <connection_release+0x11c>)
    ad12:	4b3c      	ldr	r3, [pc, #240]	; (ae04 <connection_release+0x120>)
    ad14:	9201      	str	r2, [sp, #4]
    ad16:	9200      	str	r2, [sp, #0]
    ad18:	681c      	ldr	r4, [r3, #0]
    ad1a:	493b      	ldr	r1, [pc, #236]	; (ae08 <connection_release+0x124>)
    ad1c:	4b3b      	ldr	r3, [pc, #236]	; (ae0c <connection_release+0x128>)
    ad1e:	483c      	ldr	r0, [pc, #240]	; (ae10 <connection_release+0x12c>)
    ad20:	47a0      	blx	r4
    ad22:	4040      	eors	r0, r0
    ad24:	f380 8811 	msr	BASEPRI, r0
    ad28:	f04f 0004 	mov.w	r0, #4
    ad2c:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    ad2e:	4b39      	ldr	r3, [pc, #228]	; (ae14 <connection_release+0x130>)
    ad30:	7d1a      	ldrb	r2, [r3, #20]
    ad32:	2a05      	cmp	r2, #5
    ad34:	461d      	mov	r5, r3
    ad36:	d11b      	bne.n	ad70 <connection_release+0x8c>
					  conn->handle))) {
    ad38:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    ad3a:	7c18      	ldrb	r0, [r3, #16]
    ad3c:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    ad3e:	4290      	cmp	r0, r2
    ad40:	d116      	bne.n	ad70 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    ad42:	7419      	strb	r1, [r3, #16]
		ticker_status =
    ad44:	f242 23fb 	movw	r3, #8955	; 0x22fb
    ad48:	9300      	str	r3, [sp, #0]
    ad4a:	2201      	movs	r2, #1
    ad4c:	4b2b      	ldr	r3, [pc, #172]	; (adfc <connection_release+0x118>)
    ad4e:	4608      	mov	r0, r1
    ad50:	f7fc fed2 	bl	7af8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ad54:	f030 0202 	bics.w	r2, r0, #2
    ad58:	d1da      	bne.n	ad10 <connection_release+0x2c>
		ticker_status =
    ad5a:	f242 3302 	movw	r3, #8962	; 0x2302
    ad5e:	9300      	str	r3, [sp, #0]
    ad60:	4611      	mov	r1, r2
    ad62:	4b26      	ldr	r3, [pc, #152]	; (adfc <connection_release+0x118>)
    ad64:	4610      	mov	r0, r2
    ad66:	f7fc fec7 	bl	7af8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ad6a:	f030 0302 	bics.w	r3, r0, #2
    ad6e:	d1cf      	bne.n	ad10 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ad70:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ad74:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ad78:	4299      	cmp	r1, r3
    ad7a:	d003      	beq.n	ad84 <connection_release+0xa0>
    ad7c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ad80:	4299      	cmp	r1, r3
    ad82:	d101      	bne.n	ad88 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ad84:	4e24      	ldr	r6, [pc, #144]	; (ae18 <connection_release+0x134>)
    ad86:	e012      	b.n	adae <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ad88:	790b      	ldrb	r3, [r1, #4]
    ad8a:	f36f 0301 	bfc	r3, #0, #2
    ad8e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ad90:	680b      	ldr	r3, [r1, #0]
    ad92:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ad96:	8c20      	ldrh	r0, [r4, #32]
    ad98:	f7ff ff1a 	bl	abd0 <pdu_node_tx_release>
    ad9c:	e7e8      	b.n	ad70 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ad9e:	6803      	ldr	r3, [r0, #0]
    ada0:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ada4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ada8:	4631      	mov	r1, r6
    adaa:	f7fb ff98 	bl	6cde <mem_release>
	while ((conn->pkt_tx_head) &&
    adae:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    adb2:	b118      	cbz	r0, adbc <connection_release+0xd8>
    adb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    adb8:	4298      	cmp	r0, r3
    adba:	d1f0      	bne.n	ad9e <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    adbc:	2300      	movs	r3, #0
    adbe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    adc2:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    adc6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    adca:	b951      	cbnz	r1, ade2 <connection_release+0xfe>
	conn->handle = 0xffff;
    adcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    add0:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    add2:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    add6:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    add8:	bf08      	it	eq
    adda:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    adde:	b002      	add	sp, #8
    ade0:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ade2:	790b      	ldrb	r3, [r1, #4]
    ade4:	f36f 0301 	bfc	r3, #0, #2
    ade8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    adea:	680b      	ldr	r3, [r1, #0]
    adec:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    adf0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    adf4:	8c20      	ldrh	r0, [r4, #32]
    adf6:	f7ff feeb 	bl	abd0 <pdu_node_tx_release>
    adfa:	e7e4      	b.n	adc6 <connection_release+0xe2>
    adfc:	0000a7e1 	.word	0x0000a7e1
    ae00:	00014891 	.word	0x00014891
    ae04:	20003aa4 	.word	0x20003aa4
    ae08:	00015639 	.word	0x00015639
    ae0c:	00016dec 	.word	0x00016dec
    ae10:	00016ed5 	.word	0x00016ed5
    ae14:	200008f0 	.word	0x200008f0
    ae18:	20000a4c 	.word	0x20000a4c

0000ae1c <chan_set>:
	switch (chan) {
    ae1c:	2826      	cmp	r0, #38	; 0x26
{
    ae1e:	b513      	push	{r0, r1, r4, lr}
    ae20:	4604      	mov	r4, r0
	switch (chan) {
    ae22:	d00c      	beq.n	ae3e <chan_set+0x22>
    ae24:	2827      	cmp	r0, #39	; 0x27
    ae26:	d00c      	beq.n	ae42 <chan_set+0x26>
    ae28:	2825      	cmp	r0, #37	; 0x25
    ae2a:	d10c      	bne.n	ae46 <chan_set+0x2a>
		radio_freq_chan_set(2);
    ae2c:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    ae2e:	f007 f91b 	bl	12068 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    ae32:	4620      	mov	r0, r4
}
    ae34:	b002      	add	sp, #8
    ae36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    ae3a:	f007 b91b 	b.w	12074 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    ae3e:	201a      	movs	r0, #26
    ae40:	e7f5      	b.n	ae2e <chan_set+0x12>
		radio_freq_chan_set(80);
    ae42:	2050      	movs	r0, #80	; 0x50
    ae44:	e7f3      	b.n	ae2e <chan_set+0x12>
		if (chan < 11) {
    ae46:	280a      	cmp	r0, #10
    ae48:	d802      	bhi.n	ae50 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    ae4a:	3002      	adds	r0, #2
    ae4c:	0040      	lsls	r0, r0, #1
    ae4e:	e7ee      	b.n	ae2e <chan_set+0x12>
		} else if (chan < 40) {
    ae50:	2827      	cmp	r0, #39	; 0x27
    ae52:	d801      	bhi.n	ae58 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    ae54:	3003      	adds	r0, #3
    ae56:	e7f9      	b.n	ae4c <chan_set+0x30>
			LL_ASSERT(0);
    ae58:	4a07      	ldr	r2, [pc, #28]	; (ae78 <chan_set+0x5c>)
    ae5a:	4b08      	ldr	r3, [pc, #32]	; (ae7c <chan_set+0x60>)
    ae5c:	9201      	str	r2, [sp, #4]
    ae5e:	9200      	str	r2, [sp, #0]
    ae60:	681c      	ldr	r4, [r3, #0]
    ae62:	4907      	ldr	r1, [pc, #28]	; (ae80 <chan_set+0x64>)
    ae64:	4b07      	ldr	r3, [pc, #28]	; (ae84 <chan_set+0x68>)
    ae66:	4808      	ldr	r0, [pc, #32]	; (ae88 <chan_set+0x6c>)
    ae68:	47a0      	blx	r4
    ae6a:	4040      	eors	r0, r0
    ae6c:	f380 8811 	msr	BASEPRI, r0
    ae70:	f04f 0004 	mov.w	r0, #4
    ae74:	df02      	svc	2
    ae76:	bf00      	nop
    ae78:	00014891 	.word	0x00014891
    ae7c:	20003aa4 	.word	0x20003aa4
    ae80:	00015639 	.word	0x00015639
    ae84:	00016cc2 	.word	0x00016cc2
    ae88:	00015597 	.word	0x00015597

0000ae8c <adv_setup>:
{
    ae8c:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    ae8e:	4c31      	ldr	r4, [pc, #196]	; (af54 <adv_setup+0xc8>)
    ae90:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    ae94:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    ae98:	429a      	cmp	r2, r3
    ae9a:	d051      	beq.n	af40 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    ae9c:	3301      	adds	r3, #1
    ae9e:	b2db      	uxtb	r3, r3
			first = 0;
    aea0:	2b02      	cmp	r3, #2
    aea2:	bf08      	it	eq
    aea4:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    aea6:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    aeaa:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    aeac:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    aeb0:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    aeb4:	4299      	cmp	r1, r3
    aeb6:	d007      	beq.n	aec8 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    aeb8:	3301      	adds	r3, #1
    aeba:	b2db      	uxtb	r3, r3
			first = 0;
    aebc:	2b02      	cmp	r3, #2
    aebe:	bf08      	it	eq
    aec0:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    aec2:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    aec6:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    aec8:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    aecc:	2327      	movs	r3, #39	; 0x27
    aece:	212b      	movs	r1, #43	; 0x2b
    aed0:	fb13 1505 	smlabb	r5, r3, r5, r1
    aed4:	1966      	adds	r6, r4, r5
	if (upd) {
    aed6:	b142      	cbz	r2, aeea <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    aed8:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    aedc:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    aee0:	2206      	movs	r2, #6
    aee2:	1cb1      	adds	r1, r6, #2
    aee4:	307d      	adds	r0, #125	; 0x7d
    aee6:	f7f6 fe9b 	bl	1c20 <memcpy>
	radio_pkt_tx_set(pdu);
    aeea:	4630      	mov	r0, r6
    aeec:	f007 f920 	bl	12130 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    aef0:	5d63      	ldrb	r3, [r4, r5]
    aef2:	f003 030f 	and.w	r3, r3, #15
    aef6:	2b02      	cmp	r3, #2
    aef8:	d024      	beq.n	af44 <adv_setup+0xb8>
    aefa:	2b07      	cmp	r3, #7
    aefc:	d022      	beq.n	af44 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    aefe:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    af00:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    af02:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    af04:	f007 fa2a 	bl	1235c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    af08:	2000      	movs	r0, #0
    af0a:	f007 f98b 	bl	12224 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    af0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    af12:	f3c3 0202 	ubfx	r2, r3, #0, #3
    af16:	b2d3      	uxtb	r3, r2
    af18:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    af1a:	2000      	movs	r0, #0
    af1c:	07ce      	lsls	r6, r1, #31
    af1e:	f100 0501 	add.w	r5, r0, #1
    af22:	d514      	bpl.n	af4e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    af24:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    af26:	4013      	ands	r3, r2
    af28:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    af2c:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    af2e:	f363 0202 	bfi	r2, r3, #0, #3
    af32:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    af36:	3025      	adds	r0, #37	; 0x25
}
    af38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    af3c:	f7ff bf6e 	b.w	ae1c <chan_set>
	u8_t upd = 0;
    af40:	2200      	movs	r2, #0
    af42:	e7b3      	b.n	aeac <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    af44:	2303      	movs	r3, #3
    af46:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    af48:	f007 f982 	bl	12250 <radio_switch_complete_and_disable>
    af4c:	e7df      	b.n	af0e <adv_setup+0x82>
		bitmap >>= 1;
    af4e:	0849      	lsrs	r1, r1, #1
    af50:	4628      	mov	r0, r5
    af52:	e7e3      	b.n	af1c <adv_setup+0x90>
    af54:	200008f0 	.word	0x200008f0

0000af58 <sched_after_mstr_free_offset_get>:
{
    af58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    af5a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    af5c:	aa04      	add	r2, sp, #16
{
    af5e:	461c      	mov	r4, r3
    af60:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    af62:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    af66:	3127      	adds	r1, #39	; 0x27
    af68:	2001      	movs	r0, #1
    af6a:	f7ff fa61 	bl	a430 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    af6e:	6823      	ldr	r3, [r4, #0]
    af70:	2b00      	cmp	r3, #0
    af72:	d02c      	beq.n	afce <sched_after_mstr_free_offset_get+0x76>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    af74:	9803      	ldr	r0, [sp, #12]
    af76:	1b83      	subs	r3, r0, r6
    af78:	021b      	lsls	r3, r3, #8
    af7a:	d50e      	bpl.n	af9a <sched_after_mstr_free_offset_get+0x42>
    af7c:	4a18      	ldr	r2, [pc, #96]	; (afe0 <sched_after_mstr_free_offset_get+0x88>)
    af7e:	4b19      	ldr	r3, [pc, #100]	; (afe4 <sched_after_mstr_free_offset_get+0x8c>)
    af80:	9201      	str	r2, [sp, #4]
    af82:	9200      	str	r2, [sp, #0]
    af84:	681c      	ldr	r4, [r3, #0]
    af86:	4918      	ldr	r1, [pc, #96]	; (afe8 <sched_after_mstr_free_offset_get+0x90>)
    af88:	4b18      	ldr	r3, [pc, #96]	; (afec <sched_after_mstr_free_offset_get+0x94>)
    af8a:	4819      	ldr	r0, [pc, #100]	; (aff0 <sched_after_mstr_free_offset_get+0x98>)
    af8c:	47a0      	blx	r4
    af8e:	4040      	eors	r0, r0
    af90:	f380 8811 	msr	BASEPRI, r0
    af94:	f04f 0004 	mov.w	r0, #4
    af98:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    af9a:	4631      	mov	r1, r6
    af9c:	f7fc fe7e 	bl	7c9c <ticker_ticks_diff_get>
    afa0:	4602      	mov	r2, r0
    afa2:	4814      	ldr	r0, [pc, #80]	; (aff4 <sched_after_mstr_free_offset_get+0x9c>)
    afa4:	2307      	movs	r3, #7
    afa6:	fba2 0100 	umull	r0, r1, r2, r0
    afaa:	fb03 1102 	mla	r1, r3, r2, r1
    afae:	a30a      	add	r3, pc, #40	; (adr r3, afd8 <sched_after_mstr_free_offset_get+0x80>)
    afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    afb4:	f7f5 f92e 	bl	214 <__aeabi_uldivmod>
    afb8:	6823      	ldr	r3, [r4, #0]
    afba:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    afbc:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    afbe:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    afc0:	db05      	blt.n	afce <sched_after_mstr_free_offset_get+0x76>
		u32_t conn_interval_us = conn_interval * 1250;
    afc2:	f240 40e2 	movw	r0, #1250	; 0x4e2
    afc6:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    afc8:	6823      	ldr	r3, [r4, #0]
    afca:	4298      	cmp	r0, r3
    afcc:	d301      	bcc.n	afd2 <sched_after_mstr_free_offset_get+0x7a>
}
    afce:	b004      	add	sp, #16
    afd0:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    afd2:	1a1b      	subs	r3, r3, r0
    afd4:	6023      	str	r3, [r4, #0]
    afd6:	e7f7      	b.n	afc8 <sched_after_mstr_free_offset_get+0x70>
    afd8:	3b9aca00 	.word	0x3b9aca00
    afdc:	00000000 	.word	0x00000000
    afe0:	00014891 	.word	0x00014891
    afe4:	20003aa4 	.word	0x20003aa4
    afe8:	00015639 	.word	0x00015639
    afec:	00016c54 	.word	0x00016c54
    aff0:	0001793b 	.word	0x0001793b
    aff4:	1afd498d 	.word	0x1afd498d

0000aff8 <mayfly_sched_win_offset_use>:
{
    aff8:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    affa:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    affe:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b000:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    b004:	68c1      	ldr	r1, [r0, #12]
    b006:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    b008:	f7ff ffa6 	bl	af58 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b00c:	a902      	add	r1, sp, #8
    b00e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b012:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b016:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b01a:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b01e:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b020:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b024:	f7f6 fdfc 	bl	1c20 <memcpy>
}
    b028:	b002      	add	sp, #8
    b02a:	bd10      	pop	{r4, pc}

0000b02c <mayfly_sched_after_mstr_free_offset_get>:
{
    b02c:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b02e:	4c05      	ldr	r4, [pc, #20]	; (b044 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    b030:	4602      	mov	r2, r0
    b032:	f504 7382 	add.w	r3, r4, #260	; 0x104
    b036:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    b03a:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    b03e:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b040:	f7ff bf8a 	b.w	af58 <sched_after_mstr_free_offset_get>
    b044:	200008f0 	.word	0x200008f0

0000b048 <terminate_ind_rx_enqueue>:
{
    b048:	b513      	push	{r0, r1, r4, lr}
    b04a:	4603      	mov	r3, r0
    b04c:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    b04e:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    b052:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    b056:	b970      	cbnz	r0, b076 <terminate_ind_rx_enqueue+0x2e>
    b058:	4a17      	ldr	r2, [pc, #92]	; (b0b8 <terminate_ind_rx_enqueue+0x70>)
    b05a:	4b18      	ldr	r3, [pc, #96]	; (b0bc <terminate_ind_rx_enqueue+0x74>)
    b05c:	9201      	str	r2, [sp, #4]
    b05e:	9200      	str	r2, [sp, #0]
    b060:	681c      	ldr	r4, [r3, #0]
    b062:	4917      	ldr	r1, [pc, #92]	; (b0c0 <terminate_ind_rx_enqueue+0x78>)
    b064:	4b17      	ldr	r3, [pc, #92]	; (b0c4 <terminate_ind_rx_enqueue+0x7c>)
    b066:	4818      	ldr	r0, [pc, #96]	; (b0c8 <terminate_ind_rx_enqueue+0x80>)
	LL_ASSERT(link);
    b068:	47a0      	blx	r4
    b06a:	4040      	eors	r0, r0
    b06c:	f380 8811 	msr	BASEPRI, r0
    b070:	f04f 0004 	mov.w	r0, #4
    b074:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    b076:	8c1c      	ldrh	r4, [r3, #32]
    b078:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    b07c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b080:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b082:	4a12      	ldr	r2, [pc, #72]	; (b0cc <terminate_ind_rx_enqueue+0x84>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b084:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b088:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    b08c:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b090:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b094:	f7fb fe63 	bl	6d5e <memq_enqueue>
	LL_ASSERT(link);
    b098:	b940      	cbnz	r0, b0ac <terminate_ind_rx_enqueue+0x64>
    b09a:	4a07      	ldr	r2, [pc, #28]	; (b0b8 <terminate_ind_rx_enqueue+0x70>)
    b09c:	4b07      	ldr	r3, [pc, #28]	; (b0bc <terminate_ind_rx_enqueue+0x74>)
    b09e:	9201      	str	r2, [sp, #4]
    b0a0:	9200      	str	r2, [sp, #0]
    b0a2:	681c      	ldr	r4, [r3, #0]
    b0a4:	4906      	ldr	r1, [pc, #24]	; (b0c0 <terminate_ind_rx_enqueue+0x78>)
    b0a6:	4b07      	ldr	r3, [pc, #28]	; (b0c4 <terminate_ind_rx_enqueue+0x7c>)
    b0a8:	4809      	ldr	r0, [pc, #36]	; (b0d0 <terminate_ind_rx_enqueue+0x88>)
    b0aa:	e7dd      	b.n	b068 <terminate_ind_rx_enqueue+0x20>
}
    b0ac:	b002      	add	sp, #8
    b0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b0b2:	f005 bebf 	b.w	10e34 <radio_event_callback>
    b0b6:	bf00      	nop
    b0b8:	00014891 	.word	0x00014891
    b0bc:	20003aa4 	.word	0x20003aa4
    b0c0:	00015639 	.word	0x00015639
    b0c4:	00016dff 	.word	0x00016dff
    b0c8:	000179c1 	.word	0x000179c1
    b0cc:	200008f0 	.word	0x200008f0
    b0d0:	00016eaf 	.word	0x00016eaf

0000b0d4 <prepare_normal_set>:
{
    b0d4:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b0d6:	6804      	ldr	r4, [r0, #0]
    b0d8:	2c00      	cmp	r4, #0
{
    b0da:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b0dc:	da26      	bge.n	b12c <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    b0de:	6843      	ldr	r3, [r0, #4]
    b0e0:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b0e2:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b0e4:	429d      	cmp	r5, r3
    b0e6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b0ea:	bf34      	ite	cc
    b0ec:	1ae4      	subcc	r4, r4, r3
    b0ee:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b0f0:	4b0f      	ldr	r3, [pc, #60]	; (b130 <prepare_normal_set+0x5c>)
    b0f2:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b0f4:	b2a4      	uxth	r4, r4
		ticker_status =
    b0f6:	2300      	movs	r3, #0
    b0f8:	9304      	str	r3, [sp, #16]
    b0fa:	9303      	str	r3, [sp, #12]
    b0fc:	9302      	str	r3, [sp, #8]
    b0fe:	4618      	mov	r0, r3
    b100:	9401      	str	r4, [sp, #4]
    b102:	9400      	str	r4, [sp, #0]
    b104:	f7fc fcaa 	bl	7a5c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b108:	f030 0302 	bics.w	r3, r0, #2
    b10c:	d00e      	beq.n	b12c <prepare_normal_set+0x58>
    b10e:	4a09      	ldr	r2, [pc, #36]	; (b134 <prepare_normal_set+0x60>)
    b110:	4b09      	ldr	r3, [pc, #36]	; (b138 <prepare_normal_set+0x64>)
    b112:	9201      	str	r2, [sp, #4]
    b114:	9200      	str	r2, [sp, #0]
    b116:	681c      	ldr	r4, [r3, #0]
    b118:	4908      	ldr	r1, [pc, #32]	; (b13c <prepare_normal_set+0x68>)
    b11a:	4b09      	ldr	r3, [pc, #36]	; (b140 <prepare_normal_set+0x6c>)
    b11c:	4809      	ldr	r0, [pc, #36]	; (b144 <prepare_normal_set+0x70>)
    b11e:	47a0      	blx	r4
    b120:	4040      	eors	r0, r0
    b122:	f380 8811 	msr	BASEPRI, r0
    b126:	f04f 0004 	mov.w	r0, #4
    b12a:	df02      	svc	2
}
    b12c:	b009      	add	sp, #36	; 0x24
    b12e:	bd30      	pop	{r4, r5, pc}
    b130:	0000986d 	.word	0x0000986d
    b134:	00014891 	.word	0x00014891
    b138:	20003aa4 	.word	0x20003aa4
    b13c:	00015639 	.word	0x00015639
    b140:	00016c0c 	.word	0x00016c0c
    b144:	00016ed5 	.word	0x00016ed5

0000b148 <mayfly_xtal_stop_calc>:
{
    b148:	b570      	push	{r4, r5, r6, lr}
    b14a:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b14c:	2302      	movs	r3, #2
    b14e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b150:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b152:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b154:	4e80      	ldr	r6, [pc, #512]	; (b358 <mayfly_xtal_stop_calc+0x210>)
				    _radio.connection_count));
    b156:	4d81      	ldr	r5, [pc, #516]	; (b35c <mayfly_xtal_stop_calc+0x214>)
	struct connection *conn_curr = NULL;
    b158:	930a      	str	r3, [sp, #40]	; 0x28
{
    b15a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b15c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b15e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b162:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b164:	ab09      	add	r3, sp, #36	; 0x24
    b166:	9302      	str	r3, [sp, #8]
    b168:	ab0c      	add	r3, sp, #48	; 0x30
    b16a:	9300      	str	r3, [sp, #0]
    b16c:	9601      	str	r6, [sp, #4]
    b16e:	ab0d      	add	r3, sp, #52	; 0x34
    b170:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b174:	2101      	movs	r1, #1
    b176:	2000      	movs	r0, #0
    b178:	f7fc fcfa 	bl	7b70 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b17c:	2802      	cmp	r0, #2
    b17e:	d014      	beq.n	b1aa <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b180:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b182:	b1b3      	cbz	r3, b1b2 <mayfly_xtal_stop_calc+0x6a>
    b184:	4a76      	ldr	r2, [pc, #472]	; (b360 <mayfly_xtal_stop_calc+0x218>)
    b186:	4b77      	ldr	r3, [pc, #476]	; (b364 <mayfly_xtal_stop_calc+0x21c>)
    b188:	9201      	str	r2, [sp, #4]
    b18a:	9200      	str	r2, [sp, #0]
    b18c:	681c      	ldr	r4, [r3, #0]
    b18e:	4976      	ldr	r1, [pc, #472]	; (b368 <mayfly_xtal_stop_calc+0x220>)
    b190:	4b76      	ldr	r3, [pc, #472]	; (b36c <mayfly_xtal_stop_calc+0x224>)
    b192:	4877      	ldr	r0, [pc, #476]	; (b370 <mayfly_xtal_stop_calc+0x228>)
	LL_ASSERT(hdr_curr);
    b194:	47a0      	blx	r4
    b196:	4040      	eors	r0, r0
    b198:	f380 8811 	msr	BASEPRI, r0
    b19c:	f04f 0004 	mov.w	r0, #4
    b1a0:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b1a2:	2101      	movs	r1, #1
    b1a4:	2000      	movs	r0, #0
    b1a6:	f7fc fd61 	bl	7c6c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b1ac:	2b02      	cmp	r3, #2
    b1ae:	d0f8      	beq.n	b1a2 <mayfly_xtal_stop_calc+0x5a>
    b1b0:	e7e6      	b.n	b180 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b1b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b1b6:	2bff      	cmp	r3, #255	; 0xff
    b1b8:	d004      	beq.n	b1c4 <mayfly_xtal_stop_calc+0x7c>
    b1ba:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b1be:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b1c0:	4293      	cmp	r3, r2
    b1c2:	dacf      	bge.n	b164 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b1c4:	1f5a      	subs	r2, r3, #5
    b1c6:	b2d2      	uxtb	r2, r2
    b1c8:	2af9      	cmp	r2, #249	; 0xf9
    b1ca:	d805      	bhi.n	b1d8 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    b1cc:	4a63      	ldr	r2, [pc, #396]	; (b35c <mayfly_xtal_stop_calc+0x214>)
    b1ce:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b1d2:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b1d4:	4293      	cmp	r3, r2
    b1d6:	db05      	blt.n	b1e4 <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b1d8:	2100      	movs	r1, #0
    b1da:	2001      	movs	r0, #1
    b1dc:	f7fe fe94 	bl	9f08 <mayfly_xtal_retain>
}
    b1e0:	b00e      	add	sp, #56	; 0x38
    b1e2:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b1e4:	a90a      	add	r1, sp, #40	; 0x28
    b1e6:	b2e0      	uxtb	r0, r4
    b1e8:	f7ff fbf8 	bl	a9dc <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b1ec:	b940      	cbnz	r0, b200 <mayfly_xtal_stop_calc+0xb8>
    b1ee:	4a5c      	ldr	r2, [pc, #368]	; (b360 <mayfly_xtal_stop_calc+0x218>)
    b1f0:	4b5c      	ldr	r3, [pc, #368]	; (b364 <mayfly_xtal_stop_calc+0x21c>)
    b1f2:	9201      	str	r2, [sp, #4]
    b1f4:	9200      	str	r2, [sp, #0]
    b1f6:	681c      	ldr	r4, [r3, #0]
    b1f8:	495b      	ldr	r1, [pc, #364]	; (b368 <mayfly_xtal_stop_calc+0x220>)
    b1fa:	4b5c      	ldr	r3, [pc, #368]	; (b36c <mayfly_xtal_stop_calc+0x224>)
    b1fc:	485d      	ldr	r0, [pc, #372]	; (b374 <mayfly_xtal_stop_calc+0x22c>)
    b1fe:	e7c9      	b.n	b194 <mayfly_xtal_stop_calc+0x4c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b200:	6803      	ldr	r3, [r0, #0]
    b202:	6844      	ldr	r4, [r0, #4]
    b204:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b206:	bfb8      	it	lt
    b208:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b20a:	429c      	cmp	r4, r3
    b20c:	bf38      	it	cc
    b20e:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b210:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b212:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b216:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b218:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b21a:	f7ff fbdf 	bl	a9dc <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b21e:	4605      	mov	r5, r0
    b220:	b940      	cbnz	r0, b234 <mayfly_xtal_stop_calc+0xec>
    b222:	4a4f      	ldr	r2, [pc, #316]	; (b360 <mayfly_xtal_stop_calc+0x218>)
    b224:	4b4f      	ldr	r3, [pc, #316]	; (b364 <mayfly_xtal_stop_calc+0x21c>)
    b226:	9201      	str	r2, [sp, #4]
    b228:	9200      	str	r2, [sp, #0]
    b22a:	681c      	ldr	r4, [r3, #0]
    b22c:	494e      	ldr	r1, [pc, #312]	; (b368 <mayfly_xtal_stop_calc+0x220>)
    b22e:	4b4f      	ldr	r3, [pc, #316]	; (b36c <mayfly_xtal_stop_calc+0x224>)
    b230:	4851      	ldr	r0, [pc, #324]	; (b378 <mayfly_xtal_stop_calc+0x230>)
    b232:	e7af      	b.n	b194 <mayfly_xtal_stop_calc+0x4c>
	ticks_prepare_to_start_next =
    b234:	6886      	ldr	r6, [r0, #8]
    b236:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b238:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b23a:	429e      	cmp	r6, r3
    b23c:	bf38      	it	cc
    b23e:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b240:	2a00      	cmp	r2, #0
    b242:	da05      	bge.n	b250 <mayfly_xtal_stop_calc+0x108>
		ticks_to_expire -=
    b244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b24a:	4433      	add	r3, r6
    b24c:	1a9b      	subs	r3, r3, r2
    b24e:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b252:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b256:	4293      	cmp	r3, r2
    b258:	d20a      	bcs.n	b270 <mayfly_xtal_stop_calc+0x128>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b25a:	2100      	movs	r1, #0
    b25c:	2001      	movs	r0, #1
    b25e:	f7fe fe53 	bl	9f08 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b262:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b266:	2101      	movs	r1, #1
    b268:	4628      	mov	r0, r5
    b26a:	f7ff ff33 	bl	b0d4 <prepare_normal_set>
    b26e:	e7b7      	b.n	b1e0 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    b270:	2101      	movs	r1, #1
    b272:	4608      	mov	r0, r1
    b274:	f7fe fe48 	bl	9f08 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b278:	682b      	ldr	r3, [r5, #0]
    b27a:	2b00      	cmp	r3, #0
    b27c:	db1d      	blt.n	b2ba <mayfly_xtal_stop_calc+0x172>
    b27e:	429e      	cmp	r6, r3
    b280:	d21b      	bcs.n	b2ba <mayfly_xtal_stop_calc+0x172>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b282:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b284:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b286:	b29b      	uxth	r3, r3
			ticker_status =
    b288:	493c      	ldr	r1, [pc, #240]	; (b37c <mayfly_xtal_stop_calc+0x234>)
    b28a:	9105      	str	r1, [sp, #20]
    b28c:	9302      	str	r3, [sp, #8]
    b28e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b292:	9506      	str	r5, [sp, #24]
    b294:	9004      	str	r0, [sp, #16]
    b296:	9003      	str	r0, [sp, #12]
    b298:	9001      	str	r0, [sp, #4]
    b29a:	9000      	str	r0, [sp, #0]
    b29c:	2101      	movs	r1, #1
    b29e:	f7fc fbdd 	bl	7a5c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b2a2:	f030 0302 	bics.w	r3, r0, #2
    b2a6:	d008      	beq.n	b2ba <mayfly_xtal_stop_calc+0x172>
    b2a8:	4a2d      	ldr	r2, [pc, #180]	; (b360 <mayfly_xtal_stop_calc+0x218>)
    b2aa:	4b2e      	ldr	r3, [pc, #184]	; (b364 <mayfly_xtal_stop_calc+0x21c>)
    b2ac:	9201      	str	r2, [sp, #4]
    b2ae:	9200      	str	r2, [sp, #0]
    b2b0:	681c      	ldr	r4, [r3, #0]
    b2b2:	492d      	ldr	r1, [pc, #180]	; (b368 <mayfly_xtal_stop_calc+0x220>)
    b2b4:	4b2d      	ldr	r3, [pc, #180]	; (b36c <mayfly_xtal_stop_calc+0x224>)
    b2b6:	4832      	ldr	r0, [pc, #200]	; (b380 <mayfly_xtal_stop_calc+0x238>)
    b2b8:	e76c      	b.n	b194 <mayfly_xtal_stop_calc+0x4c>
		if (!conn_curr || !conn_next) {
    b2ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b2bc:	2e00      	cmp	r6, #0
    b2be:	d08f      	beq.n	b1e0 <mayfly_xtal_stop_calc+0x98>
    b2c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b2c2:	2d00      	cmp	r5, #0
    b2c4:	d08c      	beq.n	b1e0 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b2c6:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b2c8:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b2ca:	429a      	cmp	r2, r3
    b2cc:	d188      	bne.n	b1e0 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b2ce:	482d      	ldr	r0, [pc, #180]	; (b384 <mayfly_xtal_stop_calc+0x23c>)
    b2d0:	b292      	uxth	r2, r2
    b2d2:	fba2 0100 	umull	r0, r1, r2, r0
    b2d6:	f240 1323 	movw	r3, #291	; 0x123
    b2da:	fb03 1102 	mla	r1, r3, r2, r1
    b2de:	a31c      	add	r3, pc, #112	; (adr r3, b350 <mayfly_xtal_stop_calc+0x208>)
    b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2e4:	f7f4 ff96 	bl	214 <__aeabi_uldivmod>
    b2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b2ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b2ee:	2200      	movs	r2, #0
    b2f0:	4298      	cmp	r0, r3
    b2f2:	d318      	bcc.n	b326 <mayfly_xtal_stop_calc+0x1de>
    b2f4:	b102      	cbz	r2, b2f8 <mayfly_xtal_stop_calc+0x1b0>
    b2f6:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b2f8:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b2fc:	2a00      	cmp	r2, #0
    b2fe:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b302:	da13      	bge.n	b32c <mayfly_xtal_stop_calc+0x1e4>
    b304:	2a00      	cmp	r2, #0
    b306:	f6ff af6b 	blt.w	b1e0 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    b30a:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b30c:	429c      	cmp	r4, r3
    b30e:	f67f af67 	bls.w	b1e0 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    b312:	4630      	mov	r0, r6
    b314:	f7fe faf4 	bl	9900 <conn_update_req>
				if (status == 2) {
    b318:	2802      	cmp	r0, #2
    b31a:	f47f af61 	bne.w	b1e0 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    b31e:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b320:	f7fe faee 	bl	9900 <conn_update_req>
    b324:	e75c      	b.n	b1e0 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    b326:	1a1b      	subs	r3, r3, r0
    b328:	2201      	movs	r2, #1
    b32a:	e7e1      	b.n	b2f0 <mayfly_xtal_stop_calc+0x1a8>
			} else if (!conn_curr->role && conn_next->role &&
    b32c:	2a00      	cmp	r2, #0
    b32e:	f6bf af57 	bge.w	b1e0 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    b332:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b334:	429c      	cmp	r4, r3
    b336:	f67f af53 	bls.w	b1e0 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    b33a:	4628      	mov	r0, r5
    b33c:	f7fe fae0 	bl	9900 <conn_update_req>
				if (status == 2) {
    b340:	2802      	cmp	r0, #2
    b342:	f47f af4d 	bne.w	b1e0 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    b346:	980a      	ldr	r0, [sp, #40]	; 0x28
    b348:	e7ea      	b.n	b320 <mayfly_xtal_stop_calc+0x1d8>
    b34a:	bf00      	nop
    b34c:	f3af 8000 	nop.w
    b350:	1afd498d 	.word	0x1afd498d
    b354:	00000007 	.word	0x00000007
    b358:	0000985d 	.word	0x0000985d
    b35c:	200008f0 	.word	0x200008f0
    b360:	00014891 	.word	0x00014891
    b364:	20003aa4 	.word	0x20003aa4
    b368:	00015639 	.word	0x00015639
    b36c:	00016c1f 	.word	0x00016c1f
    b370:	00017994 	.word	0x00017994
    b374:	00017638 	.word	0x00017638
    b378:	00017662 	.word	0x00017662
    b37c:	00009861 	.word	0x00009861
    b380:	00016ed5 	.word	0x00016ed5
    b384:	09ce5400 	.word	0x09ce5400

0000b388 <preempt_calc>:
{
    b388:	b570      	push	{r4, r5, r6, lr}
    b38a:	4614      	mov	r4, r2
    b38c:	460e      	mov	r6, r1
    b38e:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b390:	f7fc fc82 	bl	7c98 <ticker_ticks_now_get>
	u32_t diff =
    b394:	4621      	mov	r1, r4
    b396:	f7fc fc81 	bl	7c9c <ticker_ticks_diff_get>
	diff += 3;
    b39a:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b39c:	2c09      	cmp	r4, #9
    b39e:	d90f      	bls.n	b3c0 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    b3a0:	2100      	movs	r1, #0
    b3a2:	4608      	mov	r0, r1
    b3a4:	f7fe fdb0 	bl	9f08 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b3a8:	4632      	mov	r2, r6
    b3aa:	2100      	movs	r1, #0
    b3ac:	4628      	mov	r0, r5
    b3ae:	f7ff fe91 	bl	b0d4 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b3b2:	68ab      	ldr	r3, [r5, #8]
    b3b4:	441c      	add	r4, r3
		if (diff <
    b3b6:	2c26      	cmp	r4, #38	; 0x26
    b3b8:	d800      	bhi.n	b3bc <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    b3ba:	60ac      	str	r4, [r5, #8]
		return 1;
    b3bc:	2001      	movs	r0, #1
}
    b3be:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    b3c0:	2000      	movs	r0, #0
    b3c2:	bd70      	pop	{r4, r5, r6, pc}

0000b3c4 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b3c6:	ad02      	add	r5, sp, #8
    b3c8:	4b10      	ldr	r3, [pc, #64]	; (b40c <adv_scan_configure.constprop.30+0x48>)
    b3ca:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b3ce:	4604      	mov	r4, r0
	radio_reset();
    b3d0:	f006 fe1a 	bl	12008 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b3d4:	2000      	movs	r0, #0
    b3d6:	f006 fe41 	bl	1205c <radio_tx_power_set>
	radio_isr_set(isr);
    b3da:	480d      	ldr	r0, [pc, #52]	; (b410 <adv_scan_configure.constprop.30+0x4c>)
    b3dc:	f006 fdde 	bl	11f9c <radio_isr_set>
	radio_phy_set(phy, flags);
    b3e0:	2101      	movs	r1, #1
    b3e2:	4620      	mov	r0, r4
    b3e4:	f006 fe2a 	bl	1203c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b3e8:	4628      	mov	r0, r5
    b3ea:	f006 fe55 	bl	12098 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b3ee:	0062      	lsls	r2, r4, #1
    b3f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b3f4:	2125      	movs	r1, #37	; 0x25
    b3f6:	2008      	movs	r0, #8
    b3f8:	f006 fe66 	bl	120c8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b3fc:	4905      	ldr	r1, [pc, #20]	; (b414 <adv_scan_configure.constprop.30+0x50>)
    b3fe:	f240 605b 	movw	r0, #1627	; 0x65b
    b402:	f006 fef1 	bl	121e8 <radio_crc_configure>
}
    b406:	b003      	add	sp, #12
    b408:	bd30      	pop	{r4, r5, pc}
    b40a:	bf00      	nop
    b40c:	8e89bed6 	.word	0x8e89bed6
    b410:	0000e3d9 	.word	0x0000e3d9
    b414:	00555555 	.word	0x00555555

0000b418 <event_scan>:
{
    b418:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b41a:	4b63      	ldr	r3, [pc, #396]	; (b5a8 <event_scan+0x190>)
    b41c:	7cda      	ldrb	r2, [r3, #19]
{
    b41e:	b08d      	sub	sp, #52	; 0x34
    b420:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b422:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b426:	461c      	mov	r4, r3
    b428:	b172      	cbz	r2, b448 <event_scan+0x30>
    b42a:	4a60      	ldr	r2, [pc, #384]	; (b5ac <event_scan+0x194>)
    b42c:	4b60      	ldr	r3, [pc, #384]	; (b5b0 <event_scan+0x198>)
    b42e:	9201      	str	r2, [sp, #4]
    b430:	9200      	str	r2, [sp, #0]
    b432:	681c      	ldr	r4, [r3, #0]
    b434:	495f      	ldr	r1, [pc, #380]	; (b5b4 <event_scan+0x19c>)
    b436:	4b60      	ldr	r3, [pc, #384]	; (b5b8 <event_scan+0x1a0>)
    b438:	4860      	ldr	r0, [pc, #384]	; (b5bc <event_scan+0x1a4>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b43a:	47a0      	blx	r4
    b43c:	4040      	eors	r0, r0
    b43e:	f380 8811 	msr	BASEPRI, r0
    b442:	f04f 0004 	mov.w	r0, #4
    b446:	df02      	svc	2
    b448:	7c1b      	ldrb	r3, [r3, #16]
    b44a:	b2db      	uxtb	r3, r3
    b44c:	2b06      	cmp	r3, #6
    b44e:	d008      	beq.n	b462 <event_scan+0x4a>
    b450:	4a56      	ldr	r2, [pc, #344]	; (b5ac <event_scan+0x194>)
    b452:	4b57      	ldr	r3, [pc, #348]	; (b5b0 <event_scan+0x198>)
    b454:	9201      	str	r2, [sp, #4]
    b456:	9200      	str	r2, [sp, #0]
    b458:	681c      	ldr	r4, [r3, #0]
    b45a:	4956      	ldr	r1, [pc, #344]	; (b5b4 <event_scan+0x19c>)
    b45c:	4b56      	ldr	r3, [pc, #344]	; (b5b8 <event_scan+0x1a0>)
    b45e:	4858      	ldr	r0, [pc, #352]	; (b5c0 <event_scan+0x1a8>)
    b460:	e7eb      	b.n	b43a <event_scan+0x22>
	_radio.role = ROLE_SCAN;
    b462:	2202      	movs	r2, #2
    b464:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b466:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b468:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b46a:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b46e:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b470:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b474:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b476:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b47a:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b47e:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b480:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b484:	f7ff ff9e 	bl	b3c4 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    b488:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b48c:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b490:	1c42      	adds	r2, r0, #1
    b492:	f362 0383 	bfi	r3, r2, #2, #2
    b496:	3025      	adds	r0, #37	; 0x25
    b498:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b49c:	f7ff fcbe 	bl	ae1c <chan_set>
	if (_radio.scanner.chan == 3) {
    b4a0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b4a4:	f003 020c 	and.w	r2, r3, #12
    b4a8:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b4aa:	bf08      	it	eq
    b4ac:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b4b0:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b4b4:	bf08      	it	eq
    b4b6:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b4ba:	f006 ff4f 	bl	1235c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b4be:	2300      	movs	r3, #0
    b4c0:	4619      	mov	r1, r3
    b4c2:	461a      	mov	r2, r3
    b4c4:	4618      	mov	r0, r3
    b4c6:	f006 feb9 	bl	1223c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b4ca:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b4ce:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b4d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b4d6:	3008      	adds	r0, #8
    b4d8:	f006 fe24 	bl	12124 <radio_pkt_rx_set>
	radio_rssi_measure();
    b4dc:	f006 fec6 	bl	1226c <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b4e0:	f006 f964 	bl	117ac <ctrl_rl_enabled>
    b4e4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b4e8:	b340      	cbz	r0, b53c <event_scan+0x124>
		struct ll_filter *filter =
    b4ea:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b4ee:	f005 ff7d 	bl	113ec <ctrl_filter_get>
    b4f2:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b4f4:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b4f8:	f005 fea8 	bl	1124c <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b4fc:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b4fe:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b500:	1cb2      	adds	r2, r6, #2
    b502:	7830      	ldrb	r0, [r6, #0]
    b504:	f006 fed4 	bl	122b0 <radio_filter_configure>
		radio_ar_configure(count, irks);
    b508:	4639      	mov	r1, r7
    b50a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b50e:	f007 f8a9 	bl	12664 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b512:	68e2      	ldr	r2, [r4, #12]
    b514:	f105 0109 	add.w	r1, r5, #9
    b518:	2000      	movs	r0, #0
    b51a:	f006 ff2b 	bl	12374 <radio_tmr_start>
	radio_tmr_end_capture();
    b51e:	f006 fff9 	bl	12514 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b522:	2106      	movs	r1, #6
    b524:	462a      	mov	r2, r5
    b526:	4827      	ldr	r0, [pc, #156]	; (b5c4 <event_scan+0x1ac>)
    b528:	f7ff ff2e 	bl	b388 <preempt_calc>
    b52c:	4601      	mov	r1, r0
    b52e:	b188      	cbz	r0, b554 <event_scan+0x13c>
		_radio.state = STATE_STOP;
    b530:	2304      	movs	r3, #4
    b532:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b534:	f006 fe1c 	bl	12170 <radio_disable>
}
    b538:	b00d      	add	sp, #52	; 0x34
    b53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b53c:	f013 0f30 	tst.w	r3, #48	; 0x30
    b540:	d0e7      	beq.n	b512 <event_scan+0xfa>
		struct ll_filter *wl = ctrl_filter_get(true);
    b542:	2001      	movs	r0, #1
    b544:	f005 ff52 	bl	113ec <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b548:	1c82      	adds	r2, r0, #2
    b54a:	7841      	ldrb	r1, [r0, #1]
    b54c:	7800      	ldrb	r0, [r0, #0]
    b54e:	f006 feaf 	bl	122b0 <radio_filter_configure>
    b552:	e7de      	b.n	b512 <event_scan+0xfa>
		ret = ticker_start(
    b554:	f641 1336 	movw	r3, #6454	; 0x1936
    b558:	9308      	str	r3, [sp, #32]
    b55a:	4b1b      	ldr	r3, [pc, #108]	; (b5c8 <event_scan+0x1b0>)
    b55c:	9307      	str	r3, [sp, #28]
    b55e:	2204      	movs	r2, #4
    b560:	4b1a      	ldr	r3, [pc, #104]	; (b5cc <event_scan+0x1b4>)
    b562:	9206      	str	r2, [sp, #24]
    b564:	9305      	str	r3, [sp, #20]
    b566:	9004      	str	r0, [sp, #16]
    b568:	9003      	str	r0, [sp, #12]
    b56a:	9002      	str	r0, [sp, #8]
    b56c:	9001      	str	r0, [sp, #4]
    b56e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    b572:	3309      	adds	r3, #9
    b574:	9300      	str	r3, [sp, #0]
    b576:	462b      	mov	r3, r5
    b578:	f7fc fa20 	bl	79bc <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b57c:	f030 0302 	bics.w	r3, r0, #2
    b580:	d008      	beq.n	b594 <event_scan+0x17c>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b582:	4a0a      	ldr	r2, [pc, #40]	; (b5ac <event_scan+0x194>)
    b584:	4b0a      	ldr	r3, [pc, #40]	; (b5b0 <event_scan+0x198>)
    b586:	9201      	str	r2, [sp, #4]
    b588:	9200      	str	r2, [sp, #0]
    b58a:	681c      	ldr	r4, [r3, #0]
    b58c:	4909      	ldr	r1, [pc, #36]	; (b5b4 <event_scan+0x19c>)
    b58e:	4b0a      	ldr	r3, [pc, #40]	; (b5b8 <event_scan+0x1a0>)
    b590:	480f      	ldr	r0, [pc, #60]	; (b5d0 <event_scan+0x1b8>)
    b592:	e752      	b.n	b43a <event_scan+0x22>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b594:	4619      	mov	r1, r3
    b596:	4618      	mov	r0, r3
    b598:	4a0e      	ldr	r2, [pc, #56]	; (b5d4 <event_scan+0x1bc>)
    b59a:	f7fc fb2b 	bl	7bf4 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b59e:	f030 0302 	bics.w	r3, r0, #2
    b5a2:	d1ee      	bne.n	b582 <event_scan+0x16a>
    b5a4:	e7c8      	b.n	b538 <event_scan+0x120>
    b5a6:	bf00      	nop
    b5a8:	200008f0 	.word	0x200008f0
    b5ac:	00014891 	.word	0x00014891
    b5b0:	20003aa4 	.word	0x20003aa4
    b5b4:	00015639 	.word	0x00015639
    b5b8:	00016cee 	.word	0x00016cee
    b5bc:	00016ff1 	.word	0x00016ff1
    b5c0:	0001702b 	.word	0x0001702b
    b5c4:	200009c0 	.word	0x200009c0
    b5c8:	0000a7e1 	.word	0x0000a7e1
    b5cc:	0000aa4d 	.word	0x0000aa4d
    b5d0:	0001706a 	.word	0x0001706a
    b5d4:	0000a9c5 	.word	0x0000a9c5

0000b5d8 <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b5d8:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b5da:	4b05      	ldr	r3, [pc, #20]	; (b5f0 <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b5dc:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b5de:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b5e0:	4611      	mov	r1, r2
    b5e2:	4610      	mov	r0, r2
    b5e4:	f7fb fc2c 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b5e8:	b108      	cbz	r0, b5ee <event_stop.constprop.31+0x16>
    b5ea:	f7ff fa15 	bl	aa18 <event_stop.part.10>
    b5ee:	bd08      	pop	{r3, pc}
    b5f0:	20003db8 	.word	0x20003db8

0000b5f4 <event_common_prepare>:
{
    b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b5f8:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b5fa:	681d      	ldr	r5, [r3, #0]
{
    b5fc:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b5fe:	2c00      	cmp	r4, #0
{
    b600:	4681      	mov	r9, r0
    b602:	910b      	str	r1, [sp, #44]	; 0x2c
    b604:	4690      	mov	r8, r2
    b606:	469b      	mov	fp, r3
    b608:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b60c:	da03      	bge.n	b616 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    b60e:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b610:	42ac      	cmp	r4, r5
    b612:	bf38      	it	cc
    b614:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b616:	42ac      	cmp	r4, r5
    b618:	4f56      	ldr	r7, [pc, #344]	; (b774 <event_common_prepare+0x180>)
    b61a:	d924      	bls.n	b666 <event_common_prepare+0x72>
		ticker_status =
    b61c:	f241 5374 	movw	r3, #5492	; 0x1574
    b620:	9308      	str	r3, [sp, #32]
    b622:	4b55      	ldr	r3, [pc, #340]	; (b778 <event_common_prepare+0x184>)
    b624:	9305      	str	r3, [sp, #20]
    b626:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b628:	1b63      	subs	r3, r4, r5
		ticker_status =
    b62a:	9300      	str	r3, [sp, #0]
    b62c:	9707      	str	r7, [sp, #28]
    b62e:	464b      	mov	r3, r9
    b630:	9106      	str	r1, [sp, #24]
    b632:	9104      	str	r1, [sp, #16]
    b634:	9103      	str	r1, [sp, #12]
    b636:	9102      	str	r1, [sp, #8]
    b638:	9101      	str	r1, [sp, #4]
    b63a:	2201      	movs	r2, #1
    b63c:	4608      	mov	r0, r1
    b63e:	f7fc f9bd 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b642:	f030 0302 	bics.w	r3, r0, #2
    b646:	d034      	beq.n	b6b2 <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b648:	4a4c      	ldr	r2, [pc, #304]	; (b77c <event_common_prepare+0x188>)
    b64a:	4b4d      	ldr	r3, [pc, #308]	; (b780 <event_common_prepare+0x18c>)
    b64c:	9201      	str	r2, [sp, #4]
    b64e:	9200      	str	r2, [sp, #0]
    b650:	681c      	ldr	r4, [r3, #0]
    b652:	494c      	ldr	r1, [pc, #304]	; (b784 <event_common_prepare+0x190>)
    b654:	4b4c      	ldr	r3, [pc, #304]	; (b788 <event_common_prepare+0x194>)
    b656:	484d      	ldr	r0, [pc, #308]	; (b78c <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    b658:	47a0      	blx	r4
    b65a:	4040      	eors	r0, r0
    b65c:	f380 8811 	msr	BASEPRI, r0
    b660:	f04f 0004 	mov.w	r0, #4
    b664:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    b666:	d21d      	bcs.n	b6a4 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    b668:	2300      	movs	r3, #0
    b66a:	461a      	mov	r2, r3
    b66c:	4619      	mov	r1, r3
    b66e:	4618      	mov	r0, r3
    b670:	f7ff f9fc 	bl	aa6c <event_active>
		ticker_status =
    b674:	f241 5389 	movw	r3, #5513	; 0x1589
    b678:	2100      	movs	r1, #0
    b67a:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    b67c:	1b2c      	subs	r4, r5, r4
		ticker_status =
    b67e:	4b44      	ldr	r3, [pc, #272]	; (b790 <event_common_prepare+0x19c>)
    b680:	9305      	str	r3, [sp, #20]
    b682:	9707      	str	r7, [sp, #28]
    b684:	464b      	mov	r3, r9
    b686:	9106      	str	r1, [sp, #24]
    b688:	9104      	str	r1, [sp, #16]
    b68a:	9103      	str	r1, [sp, #12]
    b68c:	9102      	str	r1, [sp, #8]
    b68e:	9101      	str	r1, [sp, #4]
    b690:	9400      	str	r4, [sp, #0]
    b692:	2201      	movs	r2, #1
    b694:	4608      	mov	r0, r1
    b696:	f7fc f991 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b69a:	f030 0302 	bics.w	r3, r0, #2
    b69e:	d1d3      	bne.n	b648 <event_common_prepare+0x54>
    b6a0:	462c      	mov	r4, r5
    b6a2:	e00b      	b.n	b6bc <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    b6a4:	2300      	movs	r3, #0
    b6a6:	461a      	mov	r2, r3
    b6a8:	4619      	mov	r1, r3
    b6aa:	4618      	mov	r0, r3
    b6ac:	f7ff f9de 	bl	aa6c <event_active>
		event_xtal(0, 0, 0, NULL);
    b6b0:	2300      	movs	r3, #0
    b6b2:	461a      	mov	r2, r3
    b6b4:	4619      	mov	r1, r3
    b6b6:	4618      	mov	r0, r3
    b6b8:	f7ff f9fe 	bl	aab8 <event_xtal>
	_radio.remainder_anchor = remainder;
    b6bc:	4e35      	ldr	r6, [pc, #212]	; (b794 <event_common_prepare+0x1a0>)
    b6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6c0:	60f3      	str	r3, [r6, #12]
	ticker_status =
    b6c2:	f241 53a1 	movw	r3, #5537	; 0x15a1
    b6c6:	9308      	str	r3, [sp, #32]
    b6c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b6ca:	9306      	str	r3, [sp, #24]
    b6cc:	2200      	movs	r2, #0
    b6ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b6d0:	9305      	str	r3, [sp, #20]
    b6d2:	9707      	str	r7, [sp, #28]
    b6d4:	464b      	mov	r3, r9
    b6d6:	9204      	str	r2, [sp, #16]
    b6d8:	9203      	str	r2, [sp, #12]
    b6da:	9202      	str	r2, [sp, #8]
    b6dc:	9201      	str	r2, [sp, #4]
    b6de:	9400      	str	r4, [sp, #0]
    b6e0:	4611      	mov	r1, r2
    b6e2:	4610      	mov	r0, r2
    b6e4:	f7fc f96a 	bl	79bc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b6e8:	f030 0302 	bics.w	r3, r0, #2
    b6ec:	d1ac      	bne.n	b648 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b6ee:	2005      	movs	r0, #5
    b6f0:	f7ff ff72 	bl	b5d8 <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    b6f4:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    b6f8:	429d      	cmp	r5, r3
    b6fa:	d023      	beq.n	b744 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    b6fc:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b700:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    b704:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b706:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    b708:	bfbc      	itt	lt
    b70a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b70e:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    b712:	f8d8 2000 	ldr.w	r2, [r8]
    b716:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    b71a:	428a      	cmp	r2, r1
    b71c:	bf38      	it	cc
    b71e:	460a      	movcc	r2, r1
		ticker_status =
    b720:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b724:	b2a3      	uxth	r3, r4
    b726:	b292      	uxth	r2, r2
		ticker_status =
    b728:	9106      	str	r1, [sp, #24]
    b72a:	2100      	movs	r1, #0
    b72c:	9302      	str	r3, [sp, #8]
    b72e:	9201      	str	r2, [sp, #4]
    b730:	9200      	str	r2, [sp, #0]
    b732:	9104      	str	r1, [sp, #16]
    b734:	9103      	str	r1, [sp, #12]
    b736:	4652      	mov	r2, sl
    b738:	4608      	mov	r0, r1
    b73a:	f7fc f98f 	bl	7a5c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b73e:	f030 0302 	bics.w	r3, r0, #2
    b742:	d181      	bne.n	b648 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    b744:	20ff      	movs	r0, #255	; 0xff
    b746:	f7ff fa7f 	bl	ac48 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b74a:	4b13      	ldr	r3, [pc, #76]	; (b798 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b74c:	2201      	movs	r2, #1
    b74e:	4611      	mov	r1, r2
    b750:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b752:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b756:	f7fb fb73 	bl	6e40 <mayfly_enqueue>
		LL_ASSERT(!retval);
    b75a:	b140      	cbz	r0, b76e <event_common_prepare+0x17a>
    b75c:	4a07      	ldr	r2, [pc, #28]	; (b77c <event_common_prepare+0x188>)
    b75e:	4b08      	ldr	r3, [pc, #32]	; (b780 <event_common_prepare+0x18c>)
    b760:	9201      	str	r2, [sp, #4]
    b762:	9200      	str	r2, [sp, #0]
    b764:	681c      	ldr	r4, [r3, #0]
    b766:	4907      	ldr	r1, [pc, #28]	; (b784 <event_common_prepare+0x190>)
    b768:	4b07      	ldr	r3, [pc, #28]	; (b788 <event_common_prepare+0x194>)
    b76a:	480c      	ldr	r0, [pc, #48]	; (b79c <event_common_prepare+0x1a8>)
    b76c:	e774      	b.n	b658 <event_common_prepare+0x64>
}
    b76e:	b00d      	add	sp, #52	; 0x34
    b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b774:	0000a7e1 	.word	0x0000a7e1
    b778:	0000aa6d 	.word	0x0000aa6d
    b77c:	00014891 	.word	0x00014891
    b780:	20003aa4 	.word	0x20003aa4
    b784:	00015639 	.word	0x00015639
    b788:	00016cad 	.word	0x00016cad
    b78c:	00016ed5 	.word	0x00016ed5
    b790:	0000aab9 	.word	0x0000aab9
    b794:	200008f0 	.word	0x200008f0
    b798:	20003e58 	.word	0x20003e58
    b79c:	0001760f 	.word	0x0001760f

0000b7a0 <event_scan_prepare>:
{
    b7a0:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b7a2:	4c26      	ldr	r4, [pc, #152]	; (b83c <event_scan_prepare+0x9c>)
    b7a4:	7c23      	ldrb	r3, [r4, #16]
{
    b7a6:	b085      	sub	sp, #20
    b7a8:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    b7aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    b7ae:	b173      	cbz	r3, b7ce <event_scan_prepare+0x2e>
    b7b0:	4a23      	ldr	r2, [pc, #140]	; (b840 <event_scan_prepare+0xa0>)
    b7b2:	4b24      	ldr	r3, [pc, #144]	; (b844 <event_scan_prepare+0xa4>)
    b7b4:	9201      	str	r2, [sp, #4]
    b7b6:	9200      	str	r2, [sp, #0]
    b7b8:	681c      	ldr	r4, [r3, #0]
    b7ba:	4923      	ldr	r1, [pc, #140]	; (b848 <event_scan_prepare+0xa8>)
    b7bc:	4b23      	ldr	r3, [pc, #140]	; (b84c <event_scan_prepare+0xac>)
    b7be:	4824      	ldr	r0, [pc, #144]	; (b850 <event_scan_prepare+0xb0>)
		LL_ASSERT(!retval);
    b7c0:	47a0      	blx	r4
    b7c2:	4040      	eors	r0, r0
    b7c4:	f380 8811 	msr	BASEPRI, r0
    b7c8:	f04f 0004 	mov.w	r0, #4
    b7cc:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    b7ce:	2306      	movs	r3, #6
    b7d0:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    b7d2:	9203      	str	r2, [sp, #12]
    b7d4:	4a1f      	ldr	r2, [pc, #124]	; (b854 <event_scan_prepare+0xb4>)
    b7d6:	9202      	str	r2, [sp, #8]
    b7d8:	9301      	str	r3, [sp, #4]
    b7da:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    b7de:	9300      	str	r3, [sp, #0]
    b7e0:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    b7e4:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    b7e8:	f7ff ff04 	bl	b5f4 <event_common_prepare>
	if (_radio.scanner.conn) {
    b7ec:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    b7f0:	b30b      	cbz	r3, b836 <event_scan_prepare+0x96>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    b7f2:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	da0c      	bge.n	b814 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    b7fa:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    b7fe:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    b802:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    b806:	4291      	cmp	r1, r2
    b808:	bf2c      	ite	cs
    b80a:	ebc3 0301 	rsbcs	r3, r3, r1
    b80e:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    b812:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    b814:	4b10      	ldr	r3, [pc, #64]	; (b858 <event_scan_prepare+0xb8>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b816:	2201      	movs	r2, #1
    b818:	4611      	mov	r1, r2
    b81a:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    b81c:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b81e:	f7fb fb0f 	bl	6e40 <mayfly_enqueue>
		LL_ASSERT(!retval);
    b822:	b140      	cbz	r0, b836 <event_scan_prepare+0x96>
    b824:	4a06      	ldr	r2, [pc, #24]	; (b840 <event_scan_prepare+0xa0>)
    b826:	4b07      	ldr	r3, [pc, #28]	; (b844 <event_scan_prepare+0xa4>)
    b828:	9201      	str	r2, [sp, #4]
    b82a:	9200      	str	r2, [sp, #0]
    b82c:	681c      	ldr	r4, [r3, #0]
    b82e:	4906      	ldr	r1, [pc, #24]	; (b848 <event_scan_prepare+0xa8>)
    b830:	4b06      	ldr	r3, [pc, #24]	; (b84c <event_scan_prepare+0xac>)
    b832:	480a      	ldr	r0, [pc, #40]	; (b85c <event_scan_prepare+0xbc>)
    b834:	e7c4      	b.n	b7c0 <event_scan_prepare+0x20>
}
    b836:	b005      	add	sp, #20
    b838:	bd30      	pop	{r4, r5, pc}
    b83a:	bf00      	nop
    b83c:	200008f0 	.word	0x200008f0
    b840:	00014891 	.word	0x00014891
    b844:	20003aa4 	.word	0x20003aa4
    b848:	00015639 	.word	0x00015639
    b84c:	00016cdb 	.word	0x00016cdb
    b850:	0001774b 	.word	0x0001774b
    b854:	0000b419 	.word	0x0000b419
    b858:	20003dd8 	.word	0x20003dd8
    b85c:	0001760f 	.word	0x0001760f

0000b860 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    b860:	4b02      	ldr	r3, [pc, #8]	; (b86c <mayfly_xtal_start+0xc>)
    b862:	6818      	ldr	r0, [r3, #0]
    b864:	6843      	ldr	r3, [r0, #4]
    b866:	2100      	movs	r1, #0
    b868:	681b      	ldr	r3, [r3, #0]
    b86a:	4718      	bx	r3
    b86c:	200008f0 	.word	0x200008f0

0000b870 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    b870:	4b02      	ldr	r3, [pc, #8]	; (b87c <mayfly_xtal_stop+0xc>)
    b872:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    b874:	6843      	ldr	r3, [r0, #4]
    b876:	2100      	movs	r1, #0
    b878:	685b      	ldr	r3, [r3, #4]
    b87a:	4718      	bx	r3
    b87c:	200008f0 	.word	0x200008f0

0000b880 <chan_sel_2>:
{
    b880:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    b882:	4048      	eors	r0, r1
    b884:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b886:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    b88a:	2608      	movs	r6, #8
	o = 0;
    b88c:	2400      	movs	r4, #0
		o |= (i & 1);
    b88e:	f00e 0501 	and.w	r5, lr, #1
    b892:	3e01      	subs	r6, #1
    b894:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    b898:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    b89c:	b2ec      	uxtb	r4, r5
		i >>= 1;
    b89e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b8a2:	d1f4      	bne.n	b88e <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b8a4:	0225      	lsls	r5, r4, #8
    b8a6:	b22d      	sxth	r5, r5
    b8a8:	b2c0      	uxtb	r0, r0
    b8aa:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    b8ae:	4634      	mov	r4, r6
		o |= (i & 1);
    b8b0:	f000 0601 	and.w	r6, r0, #1
    b8b4:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    b8b8:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    b8bc:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    b8c0:	b2e4      	uxtb	r4, r4
		i >>= 1;
    b8c2:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b8c6:	d1f3      	bne.n	b8b0 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b8c8:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b8ca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    b8ce:	3f01      	subs	r7, #1
    b8d0:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    b8d2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b8d6:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    b8d8:	d1d5      	bne.n	b886 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    b8da:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    b8dc:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    b8de:	fbb1 f0f4 	udiv	r0, r1, r4
    b8e2:	fb04 1010 	mls	r0, r4, r0, r1
    b8e6:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b8e8:	08c4      	lsrs	r4, r0, #3
    b8ea:	f000 0507 	and.w	r5, r0, #7
    b8ee:	5d14      	ldrb	r4, [r2, r4]
    b8f0:	412c      	asrs	r4, r5
    b8f2:	07e4      	lsls	r4, r4, #31
    b8f4:	d407      	bmi.n	b906 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    b8f6:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    b8f8:	f3c1 4107 	ubfx	r1, r1, #16, #8
    b8fc:	4610      	mov	r0, r2
}
    b8fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    b902:	f7fd bfb9 	b.w	9878 <chan_sel_remap>
}
    b906:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b908 <ctrl_tx_enqueue>:
{
    b908:	b510      	push	{r4, lr}
	    !conn->empty &&
    b90a:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b90e:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    b912:	f014 0f80 	tst.w	r4, #128	; 0x80
    b916:	d118      	bne.n	b94a <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b918:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    b91c:	b1ab      	cbz	r3, b94a <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b91e:	0724      	lsls	r4, r4, #28
    b920:	d413      	bmi.n	b94a <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    b922:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    b926:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    b928:	bf04      	itt	eq
    b92a:	681c      	ldreq	r4, [r3, #0]
    b92c:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    b930:	b992      	cbnz	r2, b958 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    b932:	681a      	ldr	r2, [r3, #0]
    b934:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    b936:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    b938:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    b93c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    b940:	680b      	ldr	r3, [r1, #0]
    b942:	b90b      	cbnz	r3, b948 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    b944:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    b948:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    b94a:	b92a      	cbnz	r2, b958 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    b94c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    b950:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    b952:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    b956:	e7ef      	b.n	b938 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    b958:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b95c:	681a      	ldr	r2, [r3, #0]
    b95e:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    b960:	6019      	str	r1, [r3, #0]
    b962:	e7eb      	b.n	b93c <ctrl_tx_enqueue+0x34>

0000b964 <ctrl_tx_sec_enqueue>:
{
    b964:	b410      	push	{r4}
	if (conn->pause_tx) {
    b966:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b96a:	0724      	lsls	r4, r4, #28
{
    b96c:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    b96e:	d50f      	bpl.n	b990 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    b970:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    b974:	b931      	cbnz	r1, b984 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    b976:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    b97a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    b97c:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    b980:	bc10      	pop	{r4}
    b982:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    b984:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b988:	6819      	ldr	r1, [r3, #0]
    b98a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    b98c:	601a      	str	r2, [r3, #0]
    b98e:	e7f7      	b.n	b980 <ctrl_tx_sec_enqueue+0x1c>
}
    b990:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    b992:	f7ff bfb9 	b.w	b908 <ctrl_tx_enqueue>
	...

0000b998 <feature_rsp_send>:
{
    b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b99a:	4f21      	ldr	r7, [pc, #132]	; (ba20 <feature_rsp_send+0x88>)
{
    b99c:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b99e:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    b9a2:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b9a4:	f7fb f981 	bl	6caa <mem_acquire>
	if (!node_tx) {
    b9a8:	4604      	mov	r4, r0
    b9aa:	b3b0      	cbz	r0, ba1a <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b9ac:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    b9ae:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b9b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b9b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b9b8:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    b9bc:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    b9c0:	f043 0310 	orr.w	r3, r3, #16
    b9c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    b9c8:	79b1      	ldrb	r1, [r6, #6]
    b9ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b9ce:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    b9d2:	f3c1 0110 	ubfx	r1, r1, #0, #17
    b9d6:	400b      	ands	r3, r1
    b9d8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    b9dc:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    b9e0:	f043 0320 	orr.w	r3, r3, #32
    b9e4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b9e8:	7903      	ldrb	r3, [r0, #4]
    b9ea:	f043 0303 	orr.w	r3, r3, #3
    b9ee:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b9f0:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    b9f2:	2309      	movs	r3, #9
    b9f4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    b9f6:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b9f8:	2100      	movs	r1, #0
    b9fa:	4410      	add	r0, r2
    b9fc:	f7f6 f93c 	bl	1c78 <memset>
		conn->llcp_features & 0xFF;
    ba00:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    ba04:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    ba06:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    ba08:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    ba0a:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    ba0c:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    ba0e:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    ba10:	4621      	mov	r1, r4
    ba12:	f7ff ffa7 	bl	b964 <ctrl_tx_sec_enqueue>
	return 0;
    ba16:	2000      	movs	r0, #0
    ba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    ba1a:	2001      	movs	r0, #1
}
    ba1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba1e:	bf00      	nop
    ba20:	200008f0 	.word	0x200008f0

0000ba24 <start_enc_rsp_send>:
{
    ba24:	b510      	push	{r4, lr}
    ba26:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    ba28:	b9c9      	cbnz	r1, ba5e <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ba2a:	480f      	ldr	r0, [pc, #60]	; (ba68 <start_enc_rsp_send+0x44>)
    ba2c:	f7fb f93d 	bl	6caa <mem_acquire>
		if (!node_tx) {
    ba30:	b1b8      	cbz	r0, ba62 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    ba32:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    ba34:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ba38:	f043 0320 	orr.w	r3, r3, #32
    ba3c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ba40:	780b      	ldrb	r3, [r1, #0]
    ba42:	f043 0303 	orr.w	r3, r3, #3
    ba46:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ba48:	2301      	movs	r3, #1
    ba4a:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    ba4c:	2306      	movs	r3, #6
    ba4e:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    ba50:	b140      	cbz	r0, ba64 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    ba52:	4601      	mov	r1, r0
    ba54:	4620      	mov	r0, r4
    ba56:	f7ff ff57 	bl	b908 <ctrl_tx_enqueue>
	return 0;
    ba5a:	2000      	movs	r0, #0
    ba5c:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    ba5e:	2000      	movs	r0, #0
    ba60:	e7e8      	b.n	ba34 <start_enc_rsp_send+0x10>
			return 1;
    ba62:	2001      	movs	r0, #1
}
    ba64:	bd10      	pop	{r4, pc}
    ba66:	bf00      	nop
    ba68:	20000a4c 	.word	0x20000a4c

0000ba6c <reject_ext_ind_send>:
{
    ba6c:	b570      	push	{r4, r5, r6, lr}
    ba6e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ba70:	480b      	ldr	r0, [pc, #44]	; (baa0 <reject_ext_ind_send+0x34>)
{
    ba72:	460e      	mov	r6, r1
    ba74:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ba76:	f7fb f918 	bl	6caa <mem_acquire>
	if (!node_tx) {
    ba7a:	b178      	cbz	r0, ba9c <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ba7c:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    ba7e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ba80:	f043 0303 	orr.w	r3, r3, #3
    ba84:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    ba86:	2303      	movs	r3, #3
    ba88:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    ba8a:	2311      	movs	r3, #17
    ba8c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    ba8e:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    ba90:	4601      	mov	r1, r0
    ba92:	4620      	mov	r0, r4
    ba94:	f7ff ff38 	bl	b908 <ctrl_tx_enqueue>
	return 0;
    ba98:	2000      	movs	r0, #0
    ba9a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    ba9c:	2001      	movs	r0, #1
}
    ba9e:	bd70      	pop	{r4, r5, r6, pc}
    baa0:	20000a4c 	.word	0x20000a4c
    baa4:	00000000 	.word	0x00000000

0000baa8 <event_connection_prepare>:
{
    baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    baac:	4db8      	ldr	r5, [pc, #736]	; (bd90 <event_connection_prepare+0x2e8>)
{
    baae:	b08f      	sub	sp, #60	; 0x3c
    bab0:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    bab2:	7c2b      	ldrb	r3, [r5, #16]
{
    bab4:	910c      	str	r1, [sp, #48]	; 0x30
    bab6:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    bab8:	b173      	cbz	r3, bad8 <event_connection_prepare+0x30>
    baba:	4ab6      	ldr	r2, [pc, #728]	; (bd94 <event_connection_prepare+0x2ec>)
    babc:	4bb6      	ldr	r3, [pc, #728]	; (bd98 <event_connection_prepare+0x2f0>)
    babe:	9201      	str	r2, [sp, #4]
    bac0:	9200      	str	r2, [sp, #0]
    bac2:	681c      	ldr	r4, [r3, #0]
    bac4:	49b5      	ldr	r1, [pc, #724]	; (bd9c <event_connection_prepare+0x2f4>)
    bac6:	4bb6      	ldr	r3, [pc, #728]	; (bda0 <event_connection_prepare+0x2f8>)
    bac8:	48b6      	ldr	r0, [pc, #728]	; (bda4 <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    baca:	47a0      	blx	r4
    bacc:	4040      	eors	r0, r0
    bace:	f380 8811 	msr	BASEPRI, r0
    bad2:	f04f 0004 	mov.w	r0, #4
    bad6:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    bad8:	f894 3020 	ldrb.w	r3, [r4, #32]
    badc:	3307      	adds	r3, #7
    bade:	b2db      	uxtb	r3, r3
    bae0:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    bae2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bae6:	2b00      	cmp	r3, #0
    bae8:	da09      	bge.n	bafe <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    baea:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    baec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    baee:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    baf2:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    baf4:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    baf6:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    baf8:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    bafa:	bf88      	it	hi
    bafc:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    bafe:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bb00:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    bb04:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    bb06:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    bb08:	b292      	uxth	r2, r2
    bb0a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    bb0c:	4432      	add	r2, r6
    bb0e:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bb10:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    bb14:	429a      	cmp	r2, r3
    bb16:	f040 81bb 	bne.w	be90 <event_connection_prepare+0x3e8>
    bb1a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bb1e:	075f      	lsls	r7, r3, #29
    bb20:	f100 84b3 	bmi.w	c48a <event_connection_prepare+0x9e2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    bb24:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bb28:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bb2c:	429a      	cmp	r2, r3
    bb2e:	f000 8097 	beq.w	bc60 <event_connection_prepare+0x1b8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bb32:	2005      	movs	r0, #5
    bb34:	f7ff fd50 	bl	b5d8 <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    bb38:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    bb3c:	b113      	cbz	r3, bb44 <event_connection_prepare+0x9c>
    bb3e:	429c      	cmp	r4, r3
    bb40:	f040 808e 	bne.w	bc60 <event_connection_prepare+0x1b8>
	switch (conn->llcp_conn_param.state) {
    bb44:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bb48:	f003 0307 	and.w	r3, r3, #7
    bb4c:	2b05      	cmp	r3, #5
    bb4e:	f200 815d 	bhi.w	be0c <event_connection_prepare+0x364>
    bb52:	e8df f013 	tbh	[pc, r3, lsl #1]
    bb56:	0006      	.short	0x0006
    bb58:	01310066 	.word	0x01310066
    bb5c:	00850085 	.word	0x00850085
    bb60:	0085      	.short	0x0085
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb62:	4891      	ldr	r0, [pc, #580]	; (bda8 <event_connection_prepare+0x300>)
    bb64:	f7fb f8a1 	bl	6caa <mem_acquire>
	if (!node_tx) {
    bb68:	4607      	mov	r7, r0
    bb6a:	2800      	cmp	r0, #0
    bb6c:	d078      	beq.n	bc60 <event_connection_prepare+0x1b8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    bb6e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bb72:	2204      	movs	r2, #4
    bb74:	f362 0302 	bfi	r3, r2, #0, #3
    bb78:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb7c:	7903      	ldrb	r3, [r0, #4]
    bb7e:	f043 0303 	orr.w	r3, r3, #3
    bb82:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bb84:	2318      	movs	r3, #24
    bb86:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bb88:	230f      	movs	r3, #15
    bb8a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    bb8c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bb90:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    bb92:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    bb94:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bb98:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    bb9a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bb9e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    bba0:	2300      	movs	r3, #0
    bba2:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    bba4:	74c3      	strb	r3, [r0, #19]
    bba6:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    bba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbac:	7543      	strb	r3, [r0, #21]
    bbae:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    bbb0:	75c3      	strb	r3, [r0, #23]
    bbb2:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    bbb4:	7643      	strb	r3, [r0, #25]
    bbb6:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    bbb8:	76c3      	strb	r3, [r0, #27]
    bbba:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    bbbc:	7743      	strb	r3, [r0, #29]
    bbbe:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    bbc0:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    bbc4:	4601      	mov	r1, r0
    bbc6:	4620      	mov	r0, r4
    bbc8:	f7ff fe9e 	bl	b908 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bbcc:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    bbce:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    bbd2:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bbd6:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    bbd8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    bbdc:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bbe0:	da0b      	bge.n	bbfa <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    bbe2:	68a3      	ldr	r3, [r4, #8]
    bbe4:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bbe6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    bbea:	428b      	cmp	r3, r1
    bbec:	bf2c      	ite	cs
    bbee:	4443      	addcs	r3, r8
    bbf0:	eb08 0301 	addcc.w	r3, r8, r1
    bbf4:	1a9b      	subs	r3, r3, r2
    bbf6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bbfa:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    bbfc:	4b6b      	ldr	r3, [pc, #428]	; (bdac <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bbfe:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bc02:	2201      	movs	r2, #1
    bc04:	4611      	mov	r1, r2
    bc06:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    bc08:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bc0a:	f7fb f919 	bl	6e40 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bc0e:	b338      	cbz	r0, bc60 <event_connection_prepare+0x1b8>
    bc10:	4a60      	ldr	r2, [pc, #384]	; (bd94 <event_connection_prepare+0x2ec>)
    bc12:	4b61      	ldr	r3, [pc, #388]	; (bd98 <event_connection_prepare+0x2f0>)
    bc14:	9201      	str	r2, [sp, #4]
    bc16:	9200      	str	r2, [sp, #0]
    bc18:	681c      	ldr	r4, [r3, #0]
    bc1a:	4b65      	ldr	r3, [pc, #404]	; (bdb0 <event_connection_prepare+0x308>)
    bc1c:	495f      	ldr	r1, [pc, #380]	; (bd9c <event_connection_prepare+0x2f4>)
    bc1e:	4865      	ldr	r0, [pc, #404]	; (bdb4 <event_connection_prepare+0x30c>)
    bc20:	e753      	b.n	baca <event_connection_prepare+0x22>
	if (conn->llcp_conn_param.status) {
    bc22:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    bc26:	b397      	cbz	r7, bc8e <event_connection_prepare+0x1e6>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc28:	485f      	ldr	r0, [pc, #380]	; (bda8 <event_connection_prepare+0x300>)
    bc2a:	f7fb f83e 	bl	6caa <mem_acquire>
		if (!node_tx) {
    bc2e:	4601      	mov	r1, r0
    bc30:	b1b0      	cbz	r0, bc60 <event_connection_prepare+0x1b8>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    bc32:	7903      	ldrb	r3, [r0, #4]
    bc34:	f043 0303 	orr.w	r3, r3, #3
    bc38:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bc3a:	2311      	movs	r3, #17
    bc3c:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bc3e:	2303      	movs	r3, #3
    bc40:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bc42:	230f      	movs	r3, #15
    bc44:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    bc46:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bc4a:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    bc4c:	4620      	mov	r0, r4
    bc4e:	f7ff fe5b 	bl	b908 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bc52:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bc56:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    bc5a:	2300      	movs	r3, #0
    bc5c:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    bc60:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    bc64:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    bc68:	429a      	cmp	r2, r3
    bc6a:	f000 810a 	beq.w	be82 <event_connection_prepare+0x3da>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bc6e:	2005      	movs	r0, #5
    bc70:	f7ff fcb2 	bl	b5d8 <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    bc74:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bc78:	f003 0203 	and.w	r2, r3, #3
    bc7c:	2a03      	cmp	r2, #3
    bc7e:	f200 8179 	bhi.w	bf74 <event_connection_prepare+0x4cc>
    bc82:	e8df f012 	tbh	[pc, r2, lsl #1]
    bc86:	00cc      	.short	0x00cc
    bc88:	00fe00fe 	.word	0x00fe00fe
    bc8c:	0118      	.short	0x0118
	if (!conn->role) {
    bc8e:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bc92:	2b00      	cmp	r3, #0
    bc94:	db3b      	blt.n	bd0e <event_connection_prepare+0x266>
		if (conn->llcp_req != conn->llcp_ack) {
    bc96:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    bc9a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bc9e:	428b      	cmp	r3, r1
    bca0:	d1de      	bne.n	bc60 <event_connection_prepare+0x1b8>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bca2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    bca6:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bcaa:	2205      	movs	r2, #5
    bcac:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    bcb0:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bcb4:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    bcb8:	2301      	movs	r3, #1
    bcba:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    bcbe:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    bcc2:	b122      	cbz	r2, bcce <event_connection_prepare+0x226>
				((conn->llcp_conn_param.interval /
    bcc4:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    bcc8:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    bcca:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    bcce:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    bcd2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bcd6:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    bcda:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bcde:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    bce2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bce6:	2202      	movs	r2, #2
    bce8:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    bcec:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    bcf0:	f082 0208 	eor.w	r2, r2, #8
    bcf4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bcf8:	f362 0382 	bfi	r3, r2, #2, #1
    bcfc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    bd00:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    bd02:	2301      	movs	r3, #1
    bd04:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bd08:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    bd0c:	e7a8      	b.n	bc60 <event_connection_prepare+0x1b8>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd0e:	4826      	ldr	r0, [pc, #152]	; (bda8 <event_connection_prepare+0x300>)
    bd10:	f7fa ffcb 	bl	6caa <mem_acquire>
	if (!node_tx) {
    bd14:	4601      	mov	r1, r0
    bd16:	2800      	cmp	r0, #0
    bd18:	d0a2      	beq.n	bc60 <event_connection_prepare+0x1b8>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bd1a:	7903      	ldrb	r3, [r0, #4]
    bd1c:	f043 0303 	orr.w	r3, r3, #3
    bd20:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    bd22:	2318      	movs	r3, #24
    bd24:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    bd26:	2310      	movs	r3, #16
    bd28:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    bd2a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bd2e:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    bd30:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    bd32:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bd36:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    bd38:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bd3c:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    bd3e:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    bd42:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    bd44:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    bd48:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    bd4c:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    bd50:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    bd54:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    bd58:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    bd5c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    bd60:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    bd64:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    bd68:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    bd6c:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    bd70:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    bd74:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    bd78:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    bd7c:	4620      	mov	r0, r4
    bd7e:	f7ff fdc3 	bl	b908 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bd82:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bd86:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    bd8a:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    bd8e:	e767      	b.n	bc60 <event_connection_prepare+0x1b8>
    bd90:	200008f0 	.word	0x200008f0
    bd94:	00014891 	.word	0x00014891
    bd98:	20003aa4 	.word	0x20003aa4
    bd9c:	00015639 	.word	0x00015639
    bda0:	00016d94 	.word	0x00016d94
    bda4:	0001774b 	.word	0x0001774b
    bda8:	20000a4c 	.word	0x20000a4c
    bdac:	20003df8 	.word	0x20003df8
    bdb0:	00016d30 	.word	0x00016d30
    bdb4:	0001760f 	.word	0x0001760f
	if (conn->pause_tx) {
    bdb8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bdbc:	0718      	lsls	r0, r3, #28
    bdbe:	f53f af4f 	bmi.w	bc60 <event_connection_prepare+0x1b8>
	node_rx = packet_rx_reserve_get(2);
    bdc2:	2002      	movs	r0, #2
    bdc4:	f7fd fd8a 	bl	98dc <packet_rx_reserve_get>
	if (!node_rx) {
    bdc8:	2800      	cmp	r0, #0
    bdca:	f43f af49 	beq.w	bc60 <event_connection_prepare+0x1b8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    bdce:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bdd2:	2203      	movs	r2, #3
    bdd4:	f362 0302 	bfi	r3, r2, #0, #3
    bdd8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    bddc:	8c23      	ldrh	r3, [r4, #32]
    bdde:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bde0:	2301      	movs	r3, #1
    bde2:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bde4:	7a03      	ldrb	r3, [r0, #8]
    bde6:	4313      	orrs	r3, r2
    bde8:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bdea:	2318      	movs	r3, #24
    bdec:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bdee:	230f      	movs	r3, #15
    bdf0:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    bdf2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bdf6:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    bdf8:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    bdfa:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bdfe:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    be00:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    be04:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    be06:	f7fe fbdf 	bl	a5c8 <packet_rx_enqueue>
    be0a:	e729      	b.n	bc60 <event_connection_prepare+0x1b8>
		LL_ASSERT(0);
    be0c:	4abd      	ldr	r2, [pc, #756]	; (c104 <event_connection_prepare+0x65c>)
    be0e:	4bbe      	ldr	r3, [pc, #760]	; (c108 <event_connection_prepare+0x660>)
    be10:	9201      	str	r2, [sp, #4]
    be12:	9200      	str	r2, [sp, #0]
    be14:	681c      	ldr	r4, [r3, #0]
    be16:	4bbd      	ldr	r3, [pc, #756]	; (c10c <event_connection_prepare+0x664>)
		LL_ASSERT(0);
    be18:	49bd      	ldr	r1, [pc, #756]	; (c110 <event_connection_prepare+0x668>)
    be1a:	48be      	ldr	r0, [pc, #760]	; (c114 <event_connection_prepare+0x66c>)
    be1c:	e655      	b.n	baca <event_connection_prepare+0x22>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be1e:	48be      	ldr	r0, [pc, #760]	; (c118 <event_connection_prepare+0x670>)
    be20:	f7fa ff43 	bl	6caa <mem_acquire>
		if (!node_tx) {
    be24:	4601      	mov	r1, r0
    be26:	b360      	cbz	r0, be82 <event_connection_prepare+0x3da>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    be28:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    be2c:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    be30:	2201      	movs	r2, #1
    be32:	f362 0301 	bfi	r3, r2, #0, #2
    be36:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    be3a:	b2db      	uxtb	r3, r3
    be3c:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    be40:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    be44:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    be48:	f363 07c5 	bfi	r7, r3, #3, #3
    be4c:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    be50:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    be54:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    be58:	f367 1286 	bfi	r2, r7, #6, #1
    be5c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be60:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    be62:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be64:	f042 0203 	orr.w	r2, r2, #3
    be68:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    be6a:	2203      	movs	r2, #3
    be6c:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    be6e:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    be70:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    be72:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    be74:	4620      	mov	r0, r4
    be76:	f7ff fd47 	bl	b908 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    be7a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    be7e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    be82:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    be86:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    be8a:	429a      	cmp	r2, r3
    be8c:	f000 82fd 	beq.w	c48a <event_connection_prepare+0x9e2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    be90:	2005      	movs	r0, #5
    be92:	f7ff fba1 	bl	b5d8 <event_stop.constprop.31>
		switch (conn->llcp_type) {
    be96:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    be9a:	3b01      	subs	r3, #1
    be9c:	2b07      	cmp	r3, #7
    be9e:	f200 85b5 	bhi.w	ca0c <event_connection_prepare+0xf64>
    bea2:	e8df f013 	tbh	[pc, r3, lsl #1]
    bea6:	006e      	.short	0x006e
    bea8:	034a02cb 	.word	0x034a02cb
    beac:	04950465 	.word	0x04950465
    beb0:	04f105b3 	.word	0x04f105b3
    beb4:	0505      	.short	0x0505
		conn->llcp_phy.ack = conn->llcp_phy.req;
    beb6:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    beba:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    bebe:	f3c3 0282 	ubfx	r2, r3, #2, #3
    bec2:	0791      	lsls	r1, r2, #30
    bec4:	d544      	bpl.n	bf50 <event_connection_prepare+0x4a8>
			conn->llcp_phy.tx = BIT(1);
    bec6:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    bec8:	f362 0384 	bfi	r3, r2, #2, #3
    becc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    bed0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bed4:	095a      	lsrs	r2, r3, #5
    bed6:	0790      	lsls	r0, r2, #30
    bed8:	d543      	bpl.n	bf62 <event_connection_prepare+0x4ba>
			conn->llcp_phy.rx = BIT(1);
    beda:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    bedc:	f362 1347 	bfi	r3, r2, #5, #3
    bee0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    bee4:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    bee8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    beec:	f3c2 0182 	ubfx	r1, r2, #2, #3
    bef0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    bef4:	428b      	cmp	r3, r1
    bef6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    befa:	bf14      	ite	ne
    befc:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    bf00:	f36f 0384 	bfceq	r3, #2, #3
    bf04:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    bf08:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    bf0c:	0952      	lsrs	r2, r2, #5
    bf0e:	f003 0307 	and.w	r3, r3, #7
    bf12:	4293      	cmp	r3, r2
    bf14:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    bf18:	bf14      	ite	ne
    bf1a:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    bf1e:	f36f 1347 	bfceq	r3, #5, #3
    bf22:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    bf26:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    bf2a:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    bf2e:	f043 0301 	orr.w	r3, r3, #1
    bf32:	f3c2 0240 	ubfx	r2, r2, #1, #1
    bf36:	f362 0341 	bfi	r3, r2, #1, #1
    bf3a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    bf3e:	2308      	movs	r3, #8
    bf40:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bf44:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bf48:	3b01      	subs	r3, #1
    bf4a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    bf4e:	e798      	b.n	be82 <event_connection_prepare+0x3da>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    bf50:	07d7      	lsls	r7, r2, #31
    bf52:	d501      	bpl.n	bf58 <event_connection_prepare+0x4b0>
			conn->llcp_phy.tx = BIT(0);
    bf54:	2201      	movs	r2, #1
    bf56:	e7b7      	b.n	bec8 <event_connection_prepare+0x420>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    bf58:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    bf5c:	bf18      	it	ne
    bf5e:	2204      	movne	r2, #4
    bf60:	e7b2      	b.n	bec8 <event_connection_prepare+0x420>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    bf62:	07d1      	lsls	r1, r2, #31
    bf64:	d501      	bpl.n	bf6a <event_connection_prepare+0x4c2>
			conn->llcp_phy.rx = BIT(0);
    bf66:	2201      	movs	r2, #1
    bf68:	e7b8      	b.n	bedc <event_connection_prepare+0x434>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    bf6a:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    bf6e:	bf18      	it	ne
    bf70:	2204      	movne	r2, #4
    bf72:	e7b3      	b.n	bedc <event_connection_prepare+0x434>
		LL_ASSERT(0);
    bf74:	4a63      	ldr	r2, [pc, #396]	; (c104 <event_connection_prepare+0x65c>)
    bf76:	4b64      	ldr	r3, [pc, #400]	; (c108 <event_connection_prepare+0x660>)
    bf78:	9201      	str	r2, [sp, #4]
    bf7a:	9200      	str	r2, [sp, #0]
    bf7c:	681c      	ldr	r4, [r3, #0]
    bf7e:	4b67      	ldr	r3, [pc, #412]	; (c11c <event_connection_prepare+0x674>)
    bf80:	e74a      	b.n	be18 <event_connection_prepare+0x370>
	if (!conn_upd) {
    bf82:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    bf86:	b90b      	cbnz	r3, bf8c <event_connection_prepare+0x4e4>
		_radio.conn_upd = conn;
    bf88:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    bf8c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bf90:	f013 0303 	ands.w	r3, r3, #3
    bf94:	d06c      	beq.n	c070 <event_connection_prepare+0x5c8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bf96:	4860      	ldr	r0, [pc, #384]	; (c118 <event_connection_prepare+0x670>)
    bf98:	f7fa fe87 	bl	6caa <mem_acquire>
		if (!node_tx) {
    bf9c:	4607      	mov	r7, r0
    bf9e:	2800      	cmp	r0, #0
    bfa0:	f000 8273 	beq.w	c48a <event_connection_prepare+0x9e2>
		switch (conn->llcp.conn_upd.state) {
    bfa4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bfa8:	f003 0303 	and.w	r3, r3, #3
    bfac:	2b01      	cmp	r3, #1
    bfae:	d05d      	beq.n	c06c <event_connection_prepare+0x5c4>
    bfb0:	2b02      	cmp	r3, #2
    bfb2:	d154      	bne.n	c05e <event_connection_prepare+0x5b6>
			fp_mayfly_select_or_use =
    bfb4:	4a5a      	ldr	r2, [pc, #360]	; (c120 <event_connection_prepare+0x678>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    bfb6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bfba:	f36f 0301 	bfc	r3, #0, #2
    bfbe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    bfc2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    bfc4:	3306      	adds	r3, #6
    bfc6:	4433      	add	r3, r6
    bfc8:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    bfca:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bfce:	7939      	ldrb	r1, [r7, #4]
    bfd0:	f041 0103 	orr.w	r1, r1, #3
    bfd4:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    bfd6:	210c      	movs	r1, #12
    bfd8:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    bfda:	2100      	movs	r1, #0
    bfdc:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    bfde:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    bfe2:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bfe4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    bfe8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    bfec:	fbb1 f1f0 	udiv	r1, r1, r0
    bff0:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    bff4:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    bff8:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    bffc:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c000:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    c004:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    c008:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    c00c:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c010:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    c012:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c016:	2900      	cmp	r1, #0
    c018:	da0b      	bge.n	c032 <event_connection_prepare+0x58a>
			u32_t ticks_prepare_to_start =
    c01a:	68a3      	ldr	r3, [r4, #8]
    c01c:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c01e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    c022:	4283      	cmp	r3, r0
    c024:	bf2c      	ite	cs
    c026:	4443      	addcs	r3, r8
    c028:	eb08 0300 	addcc.w	r3, r8, r0
    c02c:	1a5b      	subs	r3, r3, r1
    c02e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    c032:	f107 0309 	add.w	r3, r7, #9
    c036:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    c03a:	4b3a      	ldr	r3, [pc, #232]	; (c124 <event_connection_prepare+0x67c>)
    c03c:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c03e:	2201      	movs	r2, #1
    c040:	4611      	mov	r1, r2
    c042:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    c044:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c046:	f7fa fefb 	bl	6e40 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c04a:	2800      	cmp	r0, #0
    c04c:	f000 8219 	beq.w	c482 <event_connection_prepare+0x9da>
    c050:	4a2c      	ldr	r2, [pc, #176]	; (c104 <event_connection_prepare+0x65c>)
    c052:	4b2d      	ldr	r3, [pc, #180]	; (c108 <event_connection_prepare+0x660>)
    c054:	9201      	str	r2, [sp, #4]
    c056:	9200      	str	r2, [sp, #0]
    c058:	681c      	ldr	r4, [r3, #0]
    c05a:	4b33      	ldr	r3, [pc, #204]	; (c128 <event_connection_prepare+0x680>)
    c05c:	e5de      	b.n	bc1c <event_connection_prepare+0x174>
			LL_ASSERT(0);
    c05e:	4a29      	ldr	r2, [pc, #164]	; (c104 <event_connection_prepare+0x65c>)
    c060:	4b29      	ldr	r3, [pc, #164]	; (c108 <event_connection_prepare+0x660>)
    c062:	9201      	str	r2, [sp, #4]
    c064:	9200      	str	r2, [sp, #0]
    c066:	681c      	ldr	r4, [r3, #0]
    c068:	4b30      	ldr	r3, [pc, #192]	; (c12c <event_connection_prepare+0x684>)
    c06a:	e6d5      	b.n	be18 <event_connection_prepare+0x370>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    c06c:	4a30      	ldr	r2, [pc, #192]	; (c130 <event_connection_prepare+0x688>)
    c06e:	e7a2      	b.n	bfb6 <event_connection_prepare+0x50e>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    c070:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    c074:	1bf7      	subs	r7, r6, r7
    c076:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    c078:	043a      	lsls	r2, r7, #16
    c07a:	f100 8206 	bmi.w	c48a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    c07e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c082:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c086:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c08a:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c08e:	428a      	cmp	r2, r1
    c090:	d009      	beq.n	c0a6 <event_connection_prepare+0x5fe>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    c092:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c096:	f002 0207 	and.w	r2, r2, #7
    c09a:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c09c:	bf04      	itt	eq
    c09e:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    c0a2:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    c0a6:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c0aa:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    c0ac:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c0ae:	bf08      	it	eq
    c0b0:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c0b4:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c0b6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c0b8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c0bc:	429a      	cmp	r2, r3
    c0be:	d114      	bne.n	c0ea <event_connection_prepare+0x642>
		     conn->conn_interval) ||
    c0c0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c0c4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c0c6:	4299      	cmp	r1, r3
    c0c8:	d10f      	bne.n	c0ea <event_connection_prepare+0x642>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c0ca:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c0ce:	435a      	muls	r2, r3
    c0d0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c0d4:	f242 7110 	movw	r1, #10000	; 0x2710
    c0d8:	fb01 2303 	mla	r3, r1, r3, r2
    c0dc:	3b01      	subs	r3, #1
    c0de:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c0e2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c0e4:	b29b      	uxth	r3, r3
    c0e6:	429a      	cmp	r2, r3
    c0e8:	d037      	beq.n	c15a <event_connection_prepare+0x6b2>
			node_rx = packet_rx_reserve_get(2);
    c0ea:	2002      	movs	r0, #2
    c0ec:	f7fd fbf6 	bl	98dc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c0f0:	bb10      	cbnz	r0, c138 <event_connection_prepare+0x690>
    c0f2:	4a04      	ldr	r2, [pc, #16]	; (c104 <event_connection_prepare+0x65c>)
    c0f4:	4b04      	ldr	r3, [pc, #16]	; (c108 <event_connection_prepare+0x660>)
    c0f6:	9201      	str	r2, [sp, #4]
    c0f8:	9200      	str	r2, [sp, #0]
    c0fa:	681c      	ldr	r4, [r3, #0]
    c0fc:	4b0b      	ldr	r3, [pc, #44]	; (c12c <event_connection_prepare+0x684>)
		LL_ASSERT(node_rx);
    c0fe:	4904      	ldr	r1, [pc, #16]	; (c110 <event_connection_prepare+0x668>)
    c100:	480c      	ldr	r0, [pc, #48]	; (c134 <event_connection_prepare+0x68c>)
    c102:	e4e2      	b.n	baca <event_connection_prepare+0x22>
    c104:	00014891 	.word	0x00014891
    c108:	20003aa4 	.word	0x20003aa4
    c10c:	00016d45 	.word	0x00016d45
    c110:	00015639 	.word	0x00015639
    c114:	00015597 	.word	0x00015597
    c118:	20000a4c 	.word	0x20000a4c
    c11c:	00016d6a 	.word	0x00016d6a
    c120:	0000a319 	.word	0x0000a319
    c124:	20003de8 	.word	0x20003de8
    c128:	00016cf9 	.word	0x00016cf9
    c12c:	00016d0d 	.word	0x00016d0d
    c130:	0000aff9 	.word	0x0000aff9
    c134:	0001753b 	.word	0x0001753b
			node_rx->hdr.handle = conn->handle;
    c138:	8c23      	ldrh	r3, [r4, #32]
    c13a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c13c:	2308      	movs	r3, #8
    c13e:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c140:	2300      	movs	r3, #0
    c142:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c144:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c148:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c14a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c14e:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c150:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c154:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c156:	f7fe fa37 	bl	a5c8 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c15a:	6823      	ldr	r3, [r4, #0]
    c15c:	6866      	ldr	r6, [r4, #4]
    c15e:	2b00      	cmp	r3, #0
    c160:	da09      	bge.n	c176 <event_connection_prepare+0x6ce>
			u32_t ticks_prepare_to_start =
    c162:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c168:	42b0      	cmp	r0, r6
    c16a:	bf2c      	ite	cs
    c16c:	4480      	addcs	r8, r0
    c16e:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c170:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c172:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c176:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c178:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c17c:	49a0      	ldr	r1, [pc, #640]	; (c400 <event_connection_prepare+0x958>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c17e:	fb13 f307 	smulbb	r3, r3, r7
    c182:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c184:	fbb3 f2fa 	udiv	r2, r3, sl
    c188:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c18c:	fb1a f009 	smulbb	r0, sl, r9
    c190:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c192:	4283      	cmp	r3, r0
    c194:	f080 80c0 	bcs.w	c318 <event_connection_prepare+0x870>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c198:	1ac0      	subs	r0, r0, r3
    c19a:	f240 1223 	movw	r2, #291	; 0x123
    c19e:	4342      	muls	r2, r0
    c1a0:	17c3      	asrs	r3, r0, #31
    c1a2:	fb01 2303 	mla	r3, r1, r3, r2
    c1a6:	fba0 0101 	umull	r0, r1, r0, r1
    c1aa:	4419      	add	r1, r3
    c1ac:	a392      	add	r3, pc, #584	; (adr r3, c3f8 <event_connection_prepare+0x950>)
    c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1b2:	f7f4 f82f 	bl	214 <__aeabi_uldivmod>
    c1b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c1ba:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c1be:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c1c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c1c2:	f8df b274 	ldr.w	fp, [pc, #628]	; c438 <event_connection_prepare+0x990>
    c1c6:	1bdb      	subs	r3, r3, r7
    c1c8:	444b      	add	r3, r9
    c1ca:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c1cc:	6823      	ldr	r3, [r4, #0]
    c1ce:	42b3      	cmp	r3, r6
    c1d0:	bf38      	it	cc
    c1d2:	4633      	movcc	r3, r6
    c1d4:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c1d6:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c1da:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c1de:	2b00      	cmp	r3, #0
    c1e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c1e4:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c1e6:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c1ea:	f280 80a6 	bge.w	c33a <event_connection_prepare+0x892>
				conn->slave.window_widening_periodic_us *
    c1ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c1f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c1f2:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c1f6:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c1fa:	4a82      	ldr	r2, [pc, #520]	; (c404 <event_connection_prepare+0x95c>)
    c1fc:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c200:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c204:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c20c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c210:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c212:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c214:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c218:	4b7b      	ldr	r3, [pc, #492]	; (c408 <event_connection_prepare+0x960>)
				conn->llcp.conn_upd.win_size * 1250;
    c21a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c21e:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c222:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c226:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c228:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c22c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c22e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c230:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c232:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c234:	429f      	cmp	r7, r3
    c236:	bf94      	ite	ls
    c238:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c23a:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c23c:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c23e:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c240:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c242:	fba0 010b 	umull	r0, r1, r0, fp
    c246:	a36c      	add	r3, pc, #432	; (adr r3, c3f8 <event_connection_prepare+0x950>)
    c248:	e9d3 2300 	ldrd	r2, r3, [r3]
    c24c:	f7f3 ffe2 	bl	214 <__aeabi_uldivmod>
    c250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c252:	1a1b      	subs	r3, r3, r0
    c254:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c258:	fbb3 f0f8 	udiv	r0, r3, r8
    c25c:	fb08 f000 	mul.w	r0, r8, r0
    c260:	a365      	add	r3, pc, #404	; (adr r3, c3f8 <event_connection_prepare+0x950>)
    c262:	e9d3 2300 	ldrd	r2, r3, [r3]
    c266:	fba0 010b 	umull	r0, r1, r0, fp
    c26a:	f7f3 ffd3 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c26e:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c270:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c274:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c278:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c27c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c27e:	f242 7110 	movw	r1, #10000	; 0x2710
    c282:	fb01 6303 	mla	r3, r1, r3, r6
    c286:	3b01      	subs	r3, #1
    c288:	fbb3 f3f6 	udiv	r3, r3, r6
    c28c:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c28e:	4b5f      	ldr	r3, [pc, #380]	; (c40c <event_connection_prepare+0x964>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c290:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c294:	4433      	add	r3, r6
    c296:	fbb3 f3f6 	udiv	r3, r3, r6
    c29a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c29e:	4b5c      	ldr	r3, [pc, #368]	; (c410 <event_connection_prepare+0x968>)
    c2a0:	4433      	add	r3, r6
    c2a2:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c2a6:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c2a8:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c2aa:	4299      	cmp	r1, r3
    c2ac:	bfc4      	itt	gt
    c2ae:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c2b2:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c2b4:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c2b8:	bfc8      	it	gt
    c2ba:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c2bc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c2c0:	bfc8      	it	gt
    c2c2:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c2c4:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c2c8:	bf08      	it	eq
    c2ca:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c2ce:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c2d2:	2000      	movs	r0, #0
    c2d4:	2101      	movs	r1, #1
    c2d6:	f006 fa45 	bl	12764 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c2da:	2200      	movs	r2, #0
    c2dc:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c2de:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c2e0:	4610      	mov	r0, r2
    c2e2:	f7fa fd85 	bl	6df0 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2e6:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c2ea:	f641 2385 	movw	r3, #6789	; 0x1a85
    c2ee:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2f0:	3207      	adds	r2, #7
		ticker_status =
    c2f2:	9300      	str	r3, [sp, #0]
    c2f4:	b2d2      	uxtb	r2, r2
    c2f6:	4b47      	ldr	r3, [pc, #284]	; (c414 <event_connection_prepare+0x96c>)
    c2f8:	4608      	mov	r0, r1
    c2fa:	f7fb fbfd 	bl	7af8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c2fe:	f030 0802 	bics.w	r8, r0, #2
    c302:	d027      	beq.n	c354 <event_connection_prepare+0x8ac>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c304:	4a44      	ldr	r2, [pc, #272]	; (c418 <event_connection_prepare+0x970>)
    c306:	4b45      	ldr	r3, [pc, #276]	; (c41c <event_connection_prepare+0x974>)
    c308:	9201      	str	r2, [sp, #4]
    c30a:	9200      	str	r2, [sp, #0]
    c30c:	681c      	ldr	r4, [r3, #0]
    c30e:	4944      	ldr	r1, [pc, #272]	; (c420 <event_connection_prepare+0x978>)
    c310:	4b44      	ldr	r3, [pc, #272]	; (c424 <event_connection_prepare+0x97c>)
    c312:	4845      	ldr	r0, [pc, #276]	; (c428 <event_connection_prepare+0x980>)
    c314:	f7ff bbd9 	b.w	baca <event_connection_prepare+0x22>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c318:	fb0a 3212 	mls	r2, sl, r2, r3
    c31c:	b292      	uxth	r2, r2
    c31e:	fba2 0101 	umull	r0, r1, r2, r1
    c322:	f240 1323 	movw	r3, #291	; 0x123
    c326:	fb03 1102 	mla	r1, r3, r2, r1
    c32a:	a333      	add	r3, pc, #204	; (adr r3, c3f8 <event_connection_prepare+0x950>)
    c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c330:	f7f3 ff70 	bl	214 <__aeabi_uldivmod>
    c334:	eba8 0300 	sub.w	r3, r8, r0
    c338:	e741      	b.n	c1be <event_connection_prepare+0x716>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c33a:	990c      	ldr	r1, [sp, #48]	; 0x30
    c33c:	a32e      	add	r3, pc, #184	; (adr r3, c3f8 <event_connection_prepare+0x950>)
    c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c342:	fba1 010b 	umull	r0, r1, r1, fp
    c346:	f7f3 ff65 	bl	214 <__aeabi_uldivmod>
    c34a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c34e:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c350:	4635      	mov	r5, r6
    c352:	e78f      	b.n	c274 <event_connection_prepare+0x7cc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c354:	fba5 ab0b 	umull	sl, fp, r5, fp
    c358:	a327      	add	r3, pc, #156	; (adr r3, c3f8 <event_connection_prepare+0x950>)
    c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c35e:	4650      	mov	r0, sl
    c360:	4659      	mov	r1, fp
    c362:	f7f3 ff57 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c366:	4a31      	ldr	r2, [pc, #196]	; (c42c <event_connection_prepare+0x984>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c368:	f894 6020 	ldrb.w	r6, [r4, #32]
    c36c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c370:	2307      	movs	r3, #7
    c372:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c376:	2100      	movs	r1, #0
    c378:	4343      	muls	r3, r0
    c37a:	fb02 3301 	mla	r3, r2, r1, r3
    c37e:	fba0 0102 	umull	r0, r1, r0, r2
    c382:	ebba 0000 	subs.w	r0, sl, r0
    c386:	4419      	add	r1, r3
    c388:	eb6b 0101 	sbc.w	r1, fp, r1
    c38c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c390:	2300      	movs	r3, #0
    c392:	f7f3 ff3f 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c396:	68e3      	ldr	r3, [r4, #12]
    c398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c39a:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    c39e:	4924      	ldr	r1, [pc, #144]	; (c430 <event_connection_prepare+0x988>)
		ticker_status =
    c3a0:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c3a2:	441a      	add	r2, r3
    c3a4:	4613      	mov	r3, r2
    c3a6:	4a23      	ldr	r2, [pc, #140]	; (c434 <event_connection_prepare+0x98c>)
		ticker_status =
    c3a8:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c3aa:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    c3ae:	bf38      	it	cc
    c3b0:	460a      	movcc	r2, r1
    c3b2:	3607      	adds	r6, #7
		ticker_status =
    c3b4:	f641 2195 	movw	r1, #6805	; 0x1a95
    c3b8:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c3ba:	b2f6      	uxtb	r6, r6
		ticker_status =
    c3bc:	4915      	ldr	r1, [pc, #84]	; (c414 <event_connection_prepare+0x96c>)
    c3be:	9107      	str	r1, [sp, #28]
    c3c0:	9205      	str	r2, [sp, #20]
    c3c2:	9406      	str	r4, [sp, #24]
    c3c4:	f8cd 800c 	str.w	r8, [sp, #12]
    c3c8:	9501      	str	r5, [sp, #4]
    c3ca:	9700      	str	r7, [sp, #0]
    c3cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c3ce:	4632      	mov	r2, r6
    c3d0:	4641      	mov	r1, r8
    c3d2:	4640      	mov	r0, r8
    c3d4:	f7fb faf2 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c3d8:	f030 0002 	bics.w	r0, r0, #2
    c3dc:	d192      	bne.n	c304 <event_connection_prepare+0x85c>
		if (mayfly_was_enabled) {
    c3de:	f1b9 0f00 	cmp.w	r9, #0
    c3e2:	f000 838c 	beq.w	cafe <event_connection_prepare+0x1056>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c3e6:	2201      	movs	r2, #1
    c3e8:	4611      	mov	r1, r2
}
    c3ea:	b00f      	add	sp, #60	; 0x3c
    c3ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c3f0:	f7fa bcfe 	b.w	6df0 <mayfly_enable>
    c3f4:	f3af 8000 	nop.w
    c3f8:	1afd498d 	.word	0x1afd498d
    c3fc:	00000007 	.word	0x00000007
    c400:	09ce5400 	.word	0x09ce5400
    c404:	000170f4 	.word	0x000170f4
    c408:	000f4240 	.word	0x000f4240
    c40c:	026259ff 	.word	0x026259ff
    c410:	01c9c37f 	.word	0x01c9c37f
    c414:	0000a7e1 	.word	0x0000a7e1
    c418:	00014891 	.word	0x00014891
    c41c:	20003aa4 	.word	0x20003aa4
    c420:	00015639 	.word	0x00015639
    c424:	00016d0d 	.word	0x00016d0d
    c428:	00016ed5 	.word	0x00016ed5
    c42c:	1afd498d 	.word	0x1afd498d
    c430:	0000ccb9 	.word	0x0000ccb9
    c434:	0000ccbd 	.word	0x0000ccbd
    c438:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    c43c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c440:	2b00      	cmp	r3, #0
    c442:	d05e      	beq.n	c502 <event_connection_prepare+0xa5a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c444:	48c9      	ldr	r0, [pc, #804]	; (c76c <event_connection_prepare+0xcc4>)
    c446:	f7fa fc30 	bl	6caa <mem_acquire>
		if (node_tx) {
    c44a:	4607      	mov	r7, r0
    c44c:	b1e8      	cbz	r0, c48a <event_connection_prepare+0x9e2>
			conn->llcp.chan_map.initiate = 0;
    c44e:	2300      	movs	r3, #0
    c450:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c454:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c456:	3306      	adds	r3, #6
    c458:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c45a:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c45e:	7903      	ldrb	r3, [r0, #4]
    c460:	f043 0303 	orr.w	r3, r3, #3
    c464:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c466:	2308      	movs	r3, #8
    c468:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c46a:	2301      	movs	r3, #1
    c46c:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c46e:	2205      	movs	r2, #5
    c470:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c474:	3008      	adds	r0, #8
    c476:	f7f5 fbd3 	bl	1c20 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c47a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c47e:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c482:	4639      	mov	r1, r7
    c484:	4620      	mov	r0, r4
    c486:	f7ff fa3f 	bl	b908 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c48a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    c48e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c492:	429a      	cmp	r2, r3
    c494:	d01e      	beq.n	c4d4 <event_connection_prepare+0xa2c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c496:	2005      	movs	r0, #5
    c498:	f7ff f89e 	bl	b5d8 <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c49c:	48b3      	ldr	r0, [pc, #716]	; (c76c <event_connection_prepare+0xcc4>)
    c49e:	f7fa fc04 	bl	6caa <mem_acquire>
		if (node_tx) {
    c4a2:	4601      	mov	r1, r0
    c4a4:	b1b0      	cbz	r0, c4d4 <event_connection_prepare+0xa2c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c4a6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c4aa:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4ae:	7903      	ldrb	r3, [r0, #4]
    c4b0:	f043 0303 	orr.w	r3, r3, #3
    c4b4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c4b6:	2302      	movs	r3, #2
    c4b8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c4ba:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    c4bc:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c4c0:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    c4c2:	4620      	mov	r0, r4
    c4c4:	f7ff fa20 	bl	b908 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    c4c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    c4ca:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    c4cc:	bf98      	it	ls
    c4ce:	3301      	addls	r3, #1
    c4d0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c4d4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c4d8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c4dc:	429a      	cmp	r2, r3
    c4de:	f000 82f5 	beq.w	cacc <event_connection_prepare+0x1024>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c4e2:	2005      	movs	r0, #5
    c4e4:	f7ff f878 	bl	b5d8 <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    c4e8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c4ec:	f003 0303 	and.w	r3, r3, #3
    c4f0:	2b03      	cmp	r3, #3
    c4f2:	f200 8316 	bhi.w	cb22 <event_connection_prepare+0x107a>
    c4f6:	e8df f013 	tbh	[pc, r3, lsl #1]
    c4fa:	0291      	.short	0x0291
    c4fc:	02e902e9 	.word	0x02e902e9
    c500:	0305      	.short	0x0305
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c502:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c506:	1af3      	subs	r3, r6, r3
    c508:	041f      	lsls	r7, r3, #16
    c50a:	d4be      	bmi.n	c48a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    c50c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c510:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c514:	f104 0717 	add.w	r7, r4, #23
    c518:	2205      	movs	r2, #5
    c51a:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c51e:	4638      	mov	r0, r7
    c520:	f7f5 fb7e 	bl	1c20 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c524:	2105      	movs	r1, #5
    c526:	4638      	mov	r0, r7
    c528:	f7fa fd6a 	bl	7000 <util_ones_count_get>
		conn->data_chan_count =
    c52c:	7f63      	ldrb	r3, [r4, #29]
    c52e:	f360 0305 	bfi	r3, r0, #0, #6
    c532:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c534:	2301      	movs	r3, #1
    c536:	7723      	strb	r3, [r4, #28]
    c538:	e7a7      	b.n	c48a <event_connection_prepare+0x9e2>
	if (conn->llcp.encryption.initiate) {
    c53a:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c53e:	f1b9 0f00 	cmp.w	r9, #0
    c542:	d1a2      	bne.n	c48a <event_connection_prepare+0x9e2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c544:	4889      	ldr	r0, [pc, #548]	; (c76c <event_connection_prepare+0xcc4>)
    c546:	f7fa fbb0 	bl	6caa <mem_acquire>
	if (!node_tx) {
    c54a:	4607      	mov	r7, r0
    c54c:	2800      	cmp	r0, #0
    c54e:	d09c      	beq.n	c48a <event_connection_prepare+0x9e2>
	if (!conn->role) {
    c550:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c554:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c556:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c55a:	db4d      	blt.n	c5f8 <event_connection_prepare+0xb50>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c55c:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c560:	465b      	mov	r3, fp
    c562:	464a      	mov	r2, r9
    c564:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c568:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c56c:	f005 fc70 	bl	11e50 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c570:	2210      	movs	r2, #16
    c572:	4659      	mov	r1, fp
    c574:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c578:	f7f5 fb52 	bl	1c20 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c57c:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c580:	2208      	movs	r2, #8
    c582:	f204 1033 	addw	r0, r4, #307	; 0x133
    c586:	f7f5 fb4b 	bl	1c20 <memcpy>
		conn->ccm_rx.direction = 0;
    c58a:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c58e:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c592:	f369 0300 	bfi	r3, r9, #0, #1
    c596:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c59a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c59e:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c5a2:	f043 0301 	orr.w	r3, r3, #1
    c5a6:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c5aa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c5ae:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c5b2:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c5b6:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c5ba:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c5be:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c5c2:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c5c6:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c5ca:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c5ce:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c5d2:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c5d6:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c5da:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c5de:	4651      	mov	r1, sl
    c5e0:	4620      	mov	r0, r4
    c5e2:	f7ff fa1f 	bl	ba24 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c5e6:	4639      	mov	r1, r7
    c5e8:	4620      	mov	r0, r4
    c5ea:	f7ff f98d 	bl	b908 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c5ee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c5f2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c5f6:	e748      	b.n	c48a <event_connection_prepare+0x9e2>
	else if (!conn->pause_tx || conn->refresh) {
    c5f8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c5fc:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c600:	2b08      	cmp	r3, #8
    c602:	f000 80a2 	beq.w	c74a <event_connection_prepare+0xca2>
		if (conn->llcp.encryption.error_code) {
    c606:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c60a:	f1b9 0f00 	cmp.w	r9, #0
    c60e:	d020      	beq.n	c652 <event_connection_prepare+0xbaa>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c610:	7903      	ldrb	r3, [r0, #4]
    c612:	f043 0303 	orr.w	r3, r3, #3
    c616:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c618:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c61c:	0698      	lsls	r0, r3, #26
    c61e:	d512      	bpl.n	c646 <event_connection_prepare+0xb9e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c620:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c624:	0759      	lsls	r1, r3, #29
    c626:	d50e      	bpl.n	c646 <event_connection_prepare+0xb9e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c628:	2311      	movs	r3, #17
    c62a:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c62c:	2303      	movs	r3, #3
    c62e:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c630:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c634:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c636:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c638:	797b      	ldrb	r3, [r7, #5]
    c63a:	3301      	adds	r3, #1
    c63c:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c63e:	2300      	movs	r3, #0
    c640:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c644:	e7cf      	b.n	c5e6 <event_connection_prepare+0xb3e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c646:	230d      	movs	r3, #13
    c648:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c64a:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c64e:	2301      	movs	r3, #1
    c650:	e7f1      	b.n	c636 <event_connection_prepare+0xb8e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c652:	4846      	ldr	r0, [pc, #280]	; (c76c <event_connection_prepare+0xcc4>)
    c654:	f7fa fb29 	bl	6caa <mem_acquire>
	if (!node_tx) {
    c658:	4682      	mov	sl, r0
    c65a:	2800      	cmp	r0, #0
    c65c:	f000 8310 	beq.w	cc80 <event_connection_prepare+0x11d8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c660:	7903      	ldrb	r3, [r0, #4]
    c662:	f043 0303 	orr.w	r3, r3, #3
    c666:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c668:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    c66c:	230d      	movs	r3, #13
    c66e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c670:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    c674:	f100 0308 	add.w	r3, r0, #8
    c678:	4619      	mov	r1, r3
    c67a:	2208      	movs	r2, #8
    c67c:	6868      	ldr	r0, [r5, #4]
    c67e:	930d      	str	r3, [sp, #52]	; 0x34
    c680:	f006 fdb6 	bl	131f0 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    c684:	f10a 0310 	add.w	r3, sl, #16
    c688:	4619      	mov	r1, r3
    c68a:	465a      	mov	r2, fp
    c68c:	6868      	ldr	r0, [r5, #4]
    c68e:	930b      	str	r3, [sp, #44]	; 0x2c
    c690:	f006 fdae 	bl	131f0 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    c694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c696:	2208      	movs	r2, #8
    c698:	4619      	mov	r1, r3
    c69a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    c69e:	f7f5 fabf 	bl	1c20 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    c6a2:	465a      	mov	r2, fp
    c6a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c6a6:	f504 708b 	add.w	r0, r4, #278	; 0x116
    c6aa:	f7f5 fab9 	bl	1c20 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    c6ae:	4651      	mov	r1, sl
    c6b0:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c6b2:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    c6b6:	f7ff f927 	bl	b908 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c6ba:	4653      	mov	r3, sl
    c6bc:	464a      	mov	r2, r9
    c6be:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c6c2:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c6c6:	f005 fbc3 	bl	11e50 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    c6ca:	2210      	movs	r2, #16
    c6cc:	4651      	mov	r1, sl
    c6ce:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c6d2:	f7f5 faa5 	bl	1c20 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c6d6:	2208      	movs	r2, #8
    c6d8:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c6dc:	f204 1033 	addw	r0, r4, #307	; 0x133
    c6e0:	f7f5 fa9e 	bl	1c20 <memcpy>
			conn->ccm_rx.direction = 1;
    c6e4:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    c6e8:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    c6ec:	f043 0301 	orr.w	r3, r3, #1
    c6f0:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    c6f4:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    c6f8:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    c6fc:	f369 0300 	bfi	r3, r9, #0, #1
    c700:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    c704:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    c708:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    c70c:	f043 0310 	orr.w	r3, r3, #16
    c710:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c714:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    c716:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c71a:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    c71e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c722:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c726:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c72a:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    c72e:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c732:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c736:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c73a:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c73e:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c740:	2301      	movs	r3, #1
    c742:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c744:	2305      	movs	r3, #5
    c746:	71fb      	strb	r3, [r7, #7]
    c748:	e74d      	b.n	c5e6 <event_connection_prepare+0xb3e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    c74a:	4651      	mov	r1, sl
    c74c:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    c750:	f7ff f968 	bl	ba24 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    c754:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    c758:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    c75c:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    c760:	f369 03c3 	bfi	r3, r9, #3, #1
    c764:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    c768:	e73d      	b.n	c5e6 <event_connection_prepare+0xb3e>
    c76a:	bf00      	nop
    c76c:	20000a4c 	.word	0x20000a4c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c770:	48b5      	ldr	r0, [pc, #724]	; (ca48 <event_connection_prepare+0xfa0>)
    c772:	f7fa fa9a 	bl	6caa <mem_acquire>
	if (node_tx) {
    c776:	4607      	mov	r7, r0
    c778:	2800      	cmp	r0, #0
    c77a:	f43f ae86 	beq.w	c48a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    c77e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c782:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    c786:	4bb1      	ldr	r3, [pc, #708]	; (ca4c <event_connection_prepare+0xfa4>)
    c788:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c78c:	7903      	ldrb	r3, [r0, #4]
    c78e:	f043 0303 	orr.w	r3, r3, #3
    c792:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    c794:	2309      	movs	r3, #9
    c796:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    c798:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c79c:	2b00      	cmp	r3, #0
    c79e:	bfac      	ite	ge
    c7a0:	2308      	movge	r3, #8
    c7a2:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c7a4:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    c7a6:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c7a8:	2100      	movs	r1, #0
    c7aa:	4410      	add	r0, r2
    c7ac:	f7f5 fa64 	bl	1c78 <memset>
			conn->llcp_features & 0xFF;
    c7b0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c7b4:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    c7b6:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    c7b8:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c7ba:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c7bc:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    c7be:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    c7c0:	4620      	mov	r0, r4
    c7c2:	f7ff f8a1 	bl	b908 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c7c6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c7ca:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    c7ce:	e65c      	b.n	c48a <event_connection_prepare+0x9e2>
	if (conn->llcp_version.tx == 0) {
    c7d0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c7d4:	07da      	lsls	r2, r3, #31
    c7d6:	d424      	bmi.n	c822 <event_connection_prepare+0xd7a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c7d8:	489b      	ldr	r0, [pc, #620]	; (ca48 <event_connection_prepare+0xfa0>)
    c7da:	f7fa fa66 	bl	6caa <mem_acquire>
		if (node_tx) {
    c7de:	4601      	mov	r1, r0
    c7e0:	2800      	cmp	r0, #0
    c7e2:	f43f ae52 	beq.w	c48a <event_connection_prepare+0x9e2>
			conn->llcp_ack = conn->llcp_req;
    c7e6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c7ea:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    c7ee:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c7f2:	f043 0301 	orr.w	r3, r3, #1
    c7f6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7fa:	7903      	ldrb	r3, [r0, #4]
    c7fc:	f043 0303 	orr.w	r3, r3, #3
    c800:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    c802:	2306      	movs	r3, #6
    c804:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c806:	230c      	movs	r3, #12
    c808:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    c80a:	2309      	movs	r3, #9
    c80c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    c80e:	f06f 030e 	mvn.w	r3, #14
    c812:	7243      	strb	r3, [r0, #9]
    c814:	2305      	movs	r3, #5
    c816:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    c818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c81c:	72c3      	strb	r3, [r0, #11]
    c81e:	7303      	strb	r3, [r0, #12]
    c820:	e7ce      	b.n	c7c0 <event_connection_prepare+0xd18>
	} else if (conn->llcp_version.rx != 0) {
    c822:	079b      	lsls	r3, r3, #30
    c824:	d528      	bpl.n	c878 <event_connection_prepare+0xdd0>
		conn->llcp_ack = conn->llcp_req;
    c826:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c82a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    c82e:	2002      	movs	r0, #2
    c830:	f7fd f854 	bl	98dc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c834:	b930      	cbnz	r0, c844 <event_connection_prepare+0xd9c>
    c836:	4a86      	ldr	r2, [pc, #536]	; (ca50 <event_connection_prepare+0xfa8>)
    c838:	4b86      	ldr	r3, [pc, #536]	; (ca54 <event_connection_prepare+0xfac>)
    c83a:	9201      	str	r2, [sp, #4]
    c83c:	9200      	str	r2, [sp, #0]
    c83e:	681c      	ldr	r4, [r3, #0]
    c840:	4b85      	ldr	r3, [pc, #532]	; (ca58 <event_connection_prepare+0xfb0>)
    c842:	e45c      	b.n	c0fe <event_connection_prepare+0x656>
		node_rx->hdr.handle = conn->handle;
    c844:	8c23      	ldrh	r3, [r4, #32]
    c846:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c848:	2301      	movs	r3, #1
    c84a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c84c:	7a03      	ldrb	r3, [r0, #8]
    c84e:	f043 0303 	orr.w	r3, r3, #3
    c852:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    c854:	2306      	movs	r3, #6
    c856:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    c858:	230c      	movs	r3, #12
    c85a:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    c85c:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    c860:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    c862:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    c866:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    c86a:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    c86e:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    c872:	f7fd fea9 	bl	a5c8 <packet_rx_enqueue>
    c876:	e608      	b.n	c48a <event_connection_prepare+0x9e2>
		LL_ASSERT(0);
    c878:	4a75      	ldr	r2, [pc, #468]	; (ca50 <event_connection_prepare+0xfa8>)
    c87a:	4b76      	ldr	r3, [pc, #472]	; (ca54 <event_connection_prepare+0xfac>)
    c87c:	9201      	str	r2, [sp, #4]
    c87e:	9200      	str	r2, [sp, #0]
    c880:	681c      	ldr	r4, [r3, #0]
    c882:	4b75      	ldr	r3, [pc, #468]	; (ca58 <event_connection_prepare+0xfb0>)
    c884:	f7ff bac8 	b.w	be18 <event_connection_prepare+0x370>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c888:	486f      	ldr	r0, [pc, #444]	; (ca48 <event_connection_prepare+0xfa0>)
    c88a:	f7fa fa0e 	bl	6caa <mem_acquire>
	if (node_tx) {
    c88e:	4601      	mov	r1, r0
    c890:	2800      	cmp	r0, #0
    c892:	f43f adfa 	beq.w	c48a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    c896:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c89a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c89e:	7903      	ldrb	r3, [r0, #4]
    c8a0:	f043 0303 	orr.w	r3, r3, #3
    c8a4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    c8a6:	2301      	movs	r3, #1
    c8a8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    c8aa:	2312      	movs	r3, #18
    c8ac:	71c3      	strb	r3, [r0, #7]
    c8ae:	e787      	b.n	c7c0 <event_connection_prepare+0xd18>
	if (conn->llcp.phy_upd_ind.initiate) {
    c8b0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    c8b4:	07d7      	lsls	r7, r2, #31
    c8b6:	d554      	bpl.n	c962 <event_connection_prepare+0xeba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c8b8:	4863      	ldr	r0, [pc, #396]	; (ca48 <event_connection_prepare+0xfa0>)
    c8ba:	f7fa f9f6 	bl	6caa <mem_acquire>
		if (node_tx) {
    c8be:	4607      	mov	r7, r0
    c8c0:	2800      	cmp	r0, #0
    c8c2:	f43f ade2 	beq.w	c48a <event_connection_prepare+0x9e2>
			conn->llcp.phy_upd_ind.initiate = 0;
    c8c6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c8ca:	f36f 0300 	bfc	r3, #0, #1
    c8ce:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    c8d2:	b2db      	uxtb	r3, r3
    c8d4:	f3c3 0982 	ubfx	r9, r3, #2, #3
    c8d8:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    c8dc:	d13b      	bne.n	c956 <event_connection_prepare+0xeae>
				conn->llcp_ack = conn->llcp_req;
    c8de:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c8e2:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    c8e6:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    c8e8:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    c8ec:	d51d      	bpl.n	c92a <event_connection_prepare+0xe82>
					node_rx = packet_rx_reserve_get(2);
    c8ee:	2002      	movs	r0, #2
    c8f0:	f7fc fff4 	bl	98dc <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    c8f4:	b938      	cbnz	r0, c906 <event_connection_prepare+0xe5e>
		LL_ASSERT(node_rx);
    c8f6:	4a56      	ldr	r2, [pc, #344]	; (ca50 <event_connection_prepare+0xfa8>)
    c8f8:	4b56      	ldr	r3, [pc, #344]	; (ca54 <event_connection_prepare+0xfac>)
    c8fa:	9201      	str	r2, [sp, #4]
    c8fc:	9200      	str	r2, [sp, #0]
    c8fe:	681c      	ldr	r4, [r3, #0]
    c900:	4b56      	ldr	r3, [pc, #344]	; (ca5c <event_connection_prepare+0xfb4>)
    c902:	f7ff bbfc 	b.w	c0fe <event_connection_prepare+0x656>
					node_rx->hdr.handle = conn->handle;
    c906:	8c23      	ldrh	r3, [r4, #32]
    c908:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    c90a:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    c90e:	230c      	movs	r3, #12
    c910:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    c912:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c916:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c91a:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    c91c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c920:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c924:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    c926:	f7fd fe4f 	bl	a5c8 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c92a:	793b      	ldrb	r3, [r7, #4]
    c92c:	f043 0303 	orr.w	r3, r3, #3
    c930:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    c932:	2305      	movs	r3, #5
    c934:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c936:	2318      	movs	r3, #24
    c938:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    c93a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c93e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c942:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    c944:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c948:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c94c:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    c94e:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c952:	817b      	strh	r3, [r7, #10]
    c954:	e595      	b.n	c482 <event_connection_prepare+0x9da>
								 conn->latency +
    c956:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c958:	3306      	adds	r3, #6
    c95a:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    c95c:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    c960:	e7e3      	b.n	c92a <event_connection_prepare+0xe82>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    c962:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c966:	1af3      	subs	r3, r6, r3
    c968:	0419      	lsls	r1, r3, #16
    c96a:	f53f ad8e 	bmi.w	c48a <event_connection_prepare+0x9e2>
		conn->llcp_ack = conn->llcp_req;
    c96e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c972:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    c976:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    c97a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    c97e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c982:	bf18      	it	ne
    c984:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    c988:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c98c:	bf1c      	itt	ne
    c98e:	f367 03c5 	bfine	r3, r7, #3, #3
    c992:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    c996:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    c99a:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    c99e:	d008      	beq.n	c9b2 <event_connection_prepare+0xf0a>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    c9a0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c9a4:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    c9a8:	095b      	lsrs	r3, r3, #5
    c9aa:	f363 0702 	bfi	r7, r3, #0, #3
    c9ae:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    c9b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c9b6:	461f      	mov	r7, r3
    c9b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c9bc:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c9c0:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    c9c2:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c9c6:	d40b      	bmi.n	c9e0 <event_connection_prepare+0xf38>
    c9c8:	b2fb      	uxtb	r3, r7
    c9ca:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c9ce:	4283      	cmp	r3, r0
    c9d0:	d106      	bne.n	c9e0 <event_connection_prepare+0xf38>
		    (conn->phy_rx == old_rx)) {
    c9d2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c9d6:	f003 0307 	and.w	r3, r3, #7
    c9da:	428b      	cmp	r3, r1
    c9dc:	f43f ad55 	beq.w	c48a <event_connection_prepare+0x9e2>
		node_rx = packet_rx_reserve_get(2);
    c9e0:	2002      	movs	r0, #2
    c9e2:	f7fc ff7b 	bl	98dc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c9e6:	2800      	cmp	r0, #0
    c9e8:	d085      	beq.n	c8f6 <event_connection_prepare+0xe4e>
		node_rx->hdr.handle = conn->handle;
    c9ea:	8c23      	ldrh	r3, [r4, #32]
    c9ec:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c9ee:	230c      	movs	r3, #12
    c9f0:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    c9f2:	2300      	movs	r3, #0
    c9f4:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    c9f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c9fa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c9fe:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    ca00:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ca04:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ca08:	7343      	strb	r3, [r0, #13]
    ca0a:	e732      	b.n	c872 <event_connection_prepare+0xdca>
			LL_ASSERT(0);
    ca0c:	4a10      	ldr	r2, [pc, #64]	; (ca50 <event_connection_prepare+0xfa8>)
    ca0e:	4b11      	ldr	r3, [pc, #68]	; (ca54 <event_connection_prepare+0xfac>)
    ca10:	9201      	str	r2, [sp, #4]
    ca12:	9200      	str	r2, [sp, #0]
    ca14:	681c      	ldr	r4, [r3, #0]
    ca16:	4b12      	ldr	r3, [pc, #72]	; (ca60 <event_connection_prepare+0xfb8>)
    ca18:	f7ff b9fe 	b.w	be18 <event_connection_prepare+0x370>
		free_count_rx = packet_rx_acquired_count_get() +
    ca1c:	f7fc ff48 	bl	98b0 <packet_rx_acquired_count_get>
    ca20:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ca22:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ca26:	f7fa f96f 	bl	6d08 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ca2a:	4438      	add	r0, r7
    ca2c:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    ca2e:	28ff      	cmp	r0, #255	; 0xff
    ca30:	d91e      	bls.n	ca70 <event_connection_prepare+0xfc8>
		LL_ASSERT(free_count_rx <= 0xFF);
    ca32:	4a07      	ldr	r2, [pc, #28]	; (ca50 <event_connection_prepare+0xfa8>)
    ca34:	4b07      	ldr	r3, [pc, #28]	; (ca54 <event_connection_prepare+0xfac>)
    ca36:	9201      	str	r2, [sp, #4]
    ca38:	9200      	str	r2, [sp, #0]
    ca3a:	681c      	ldr	r4, [r3, #0]
    ca3c:	4909      	ldr	r1, [pc, #36]	; (ca64 <event_connection_prepare+0xfbc>)
    ca3e:	4b0a      	ldr	r3, [pc, #40]	; (ca68 <event_connection_prepare+0xfc0>)
    ca40:	480a      	ldr	r0, [pc, #40]	; (ca6c <event_connection_prepare+0xfc4>)
    ca42:	f7ff b842 	b.w	baca <event_connection_prepare+0x22>
    ca46:	bf00      	nop
    ca48:	20000a4c 	.word	0x20000a4c
    ca4c:	000141ff 	.word	0x000141ff
    ca50:	00014891 	.word	0x00014891
    ca54:	20003aa4 	.word	0x20003aa4
    ca58:	00016d21 	.word	0x00016d21
    ca5c:	00016d7d 	.word	0x00016d7d
    ca60:	00016d94 	.word	0x00016d94
    ca64:	00015639 	.word	0x00015639
    ca68:	00016d5b 	.word	0x00016d5b
    ca6c:	00016f23 	.word	0x00016f23
		if (_radio.packet_rx_data_count != free_count_rx) {
    ca70:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    ca74:	4283      	cmp	r3, r0
    ca76:	d129      	bne.n	cacc <event_connection_prepare+0x1024>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ca78:	4884      	ldr	r0, [pc, #528]	; (cc8c <event_connection_prepare+0x11e4>)
    ca7a:	f7fa f916 	bl	6caa <mem_acquire>
		if (!node_tx) {
    ca7e:	4601      	mov	r1, r0
    ca80:	b320      	cbz	r0, cacc <event_connection_prepare+0x1024>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ca82:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    ca86:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ca8a:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    ca8e:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ca90:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ca92:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ca94:	f365 0301 	bfi	r3, r5, #0, #2
    ca98:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca9c:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    ca9e:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    caa0:	f043 0303 	orr.w	r3, r3, #3
    caa4:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    caa6:	2309      	movs	r3, #9
    caa8:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    caaa:	2314      	movs	r3, #20
    caac:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    caae:	231b      	movs	r3, #27
    cab0:	720b      	strb	r3, [r1, #8]
    cab2:	2300      	movs	r3, #0
    cab4:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    cab6:	2348      	movs	r3, #72	; 0x48
    cab8:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    caba:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    cabc:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    cabe:	4620      	mov	r0, r4
    cac0:	f7fe ff22 	bl	b908 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    cac4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    cac8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    cacc:	f894 3020 	ldrb.w	r3, [r4, #32]
    cad0:	f994 501d 	ldrsb.w	r5, [r4, #29]
    cad4:	486e      	ldr	r0, [pc, #440]	; (cc90 <event_connection_prepare+0x11e8>)
    cad6:	496f      	ldr	r1, [pc, #444]	; (cc94 <event_connection_prepare+0x11ec>)
    cad8:	68a2      	ldr	r2, [r4, #8]
    cada:	9403      	str	r4, [sp, #12]
    cadc:	3307      	adds	r3, #7
    cade:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    cae2:	bf38      	it	cc
    cae4:	4601      	movcc	r1, r0
    cae6:	b2db      	uxtb	r3, r3
    cae8:	e88d 000c 	stmia.w	sp, {r2, r3}
    caec:	9102      	str	r1, [sp, #8]
    caee:	1d23      	adds	r3, r4, #4
    caf0:	4622      	mov	r2, r4
    caf2:	990c      	ldr	r1, [sp, #48]	; 0x30
    caf4:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    caf6:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    caf8:	f7fe fd7c 	bl	b5f4 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    cafc:	8466      	strh	r6, [r4, #34]	; 0x22
}
    cafe:	b00f      	add	sp, #60	; 0x3c
    cb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    cb04:	f7fc fed4 	bl	98b0 <packet_rx_acquired_count_get>
    cb08:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    cb0a:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    cb0e:	f7fa f8fb 	bl	6d08 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    cb12:	4438      	add	r0, r7
    cb14:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    cb16:	28ff      	cmp	r0, #255	; 0xff
    cb18:	d88b      	bhi.n	ca32 <event_connection_prepare+0xf8a>
		if (_radio.packet_rx_data_count != free_count_rx) {
    cb1a:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cb1e:	4283      	cmp	r3, r0
    cb20:	d007      	beq.n	cb32 <event_connection_prepare+0x108a>
		LL_ASSERT(0);
    cb22:	4a5d      	ldr	r2, [pc, #372]	; (cc98 <event_connection_prepare+0x11f0>)
    cb24:	4b5d      	ldr	r3, [pc, #372]	; (cc9c <event_connection_prepare+0x11f4>)
    cb26:	9201      	str	r2, [sp, #4]
    cb28:	9200      	str	r2, [sp, #0]
    cb2a:	681c      	ldr	r4, [r3, #0]
    cb2c:	4b5c      	ldr	r3, [pc, #368]	; (cca0 <event_connection_prepare+0x11f8>)
    cb2e:	f7ff b973 	b.w	be18 <event_connection_prepare+0x370>
		conn->llcp_length.ack = conn->llcp_length.req;
    cb32:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    cb36:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    cb3a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    cb3e:	2100      	movs	r1, #0
    cb40:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    cb44:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    cb48:	f361 02c3 	bfi	r2, r1, #3, #1
    cb4c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    cb50:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    cb54:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    cb56:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    cb5a:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    cb5c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    cb60:	f7fa f8d2 	bl	6d08 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    cb64:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    cb68:	b10b      	cbz	r3, cb6e <event_connection_prepare+0x10c6>
			free_count_conn++;
    cb6a:	3001      	adds	r0, #1
    cb6c:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    cb6e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    cb72:	b10b      	cbz	r3, cb78 <event_connection_prepare+0x10d0>
			free_count_conn++;
    cb74:	3001      	adds	r0, #1
    cb76:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cb78:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cb7a:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cb7e:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cb80:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cb82:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cb86:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cb88:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cb8a:	d056      	beq.n	cc3a <event_connection_prepare+0x1192>
    cb8c:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    cb90:	42bb      	cmp	r3, r7
    cb92:	d352      	bcc.n	cc3a <event_connection_prepare+0x1192>
		node_rx = packet_rx_reserve_get(2);
    cb94:	2002      	movs	r0, #2
    cb96:	f7fc fea1 	bl	98dc <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cb9a:	2800      	cmp	r0, #0
    cb9c:	d159      	bne.n	cc52 <event_connection_prepare+0x11aa>
    cb9e:	4a3e      	ldr	r2, [pc, #248]	; (cc98 <event_connection_prepare+0x11f0>)
    cba0:	4b3e      	ldr	r3, [pc, #248]	; (cc9c <event_connection_prepare+0x11f4>)
    cba2:	9201      	str	r2, [sp, #4]
    cba4:	9200      	str	r2, [sp, #0]
    cba6:	681c      	ldr	r4, [r3, #0]
    cba8:	4b3d      	ldr	r3, [pc, #244]	; (cca0 <event_connection_prepare+0x11f8>)
    cbaa:	f7ff baa8 	b.w	c0fe <event_connection_prepare+0x656>
				if (_radio.packet_rx_acquire == 0) {
    cbae:	b90b      	cbnz	r3, cbb4 <event_connection_prepare+0x110c>
						_radio.packet_rx_count - 1;
    cbb0:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    cbb4:	3b01      	subs	r3, #1
    cbb6:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    cbba:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    cbbe:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    cbc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cbc6:	4649      	mov	r1, r9
    cbc8:	6818      	ldr	r0, [r3, #0]
    cbca:	f7fa f888 	bl	6cde <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    cbce:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    cbd2:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    cbd6:	3a01      	subs	r2, #1
    cbd8:	4293      	cmp	r3, r2
    cbda:	db09      	blt.n	cbf0 <event_connection_prepare+0x1148>
    cbdc:	4a2e      	ldr	r2, [pc, #184]	; (cc98 <event_connection_prepare+0x11f0>)
    cbde:	4b2f      	ldr	r3, [pc, #188]	; (cc9c <event_connection_prepare+0x11f4>)
    cbe0:	9201      	str	r2, [sp, #4]
    cbe2:	9200      	str	r2, [sp, #0]
    cbe4:	681c      	ldr	r4, [r3, #0]
    cbe6:	492f      	ldr	r1, [pc, #188]	; (cca4 <event_connection_prepare+0x11fc>)
    cbe8:	4b2d      	ldr	r3, [pc, #180]	; (cca0 <event_connection_prepare+0x11f8>)
    cbea:	482f      	ldr	r0, [pc, #188]	; (cca8 <event_connection_prepare+0x1200>)
    cbec:	f7fe bf6d 	b.w	baca <event_connection_prepare+0x22>
				_radio.link_rx_data_quota++;
    cbf0:	3301      	adds	r3, #1
    cbf2:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    cbf6:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    cbfa:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    cbfe:	4293      	cmp	r3, r2
    cc00:	d1d5      	bne.n	cbae <event_connection_prepare+0x1106>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cc02:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    cc04:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cc08:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    cc0a:	bf9a      	itte	ls
    cc0c:	2334      	movls	r3, #52	; 0x34
    cc0e:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    cc12:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    cc16:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    cc1a:	fbb2 f2f1 	udiv	r2, r2, r1
    cc1e:	b2d2      	uxtb	r2, r2
    cc20:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    cc24:	b962      	cbnz	r2, cc40 <event_connection_prepare+0x1198>
    cc26:	4a1c      	ldr	r2, [pc, #112]	; (cc98 <event_connection_prepare+0x11f0>)
    cc28:	4b1c      	ldr	r3, [pc, #112]	; (cc9c <event_connection_prepare+0x11f4>)
    cc2a:	9201      	str	r2, [sp, #4]
    cc2c:	9200      	str	r2, [sp, #0]
    cc2e:	681c      	ldr	r4, [r3, #0]
    cc30:	491c      	ldr	r1, [pc, #112]	; (cca4 <event_connection_prepare+0x11fc>)
    cc32:	4b1b      	ldr	r3, [pc, #108]	; (cca0 <event_connection_prepare+0x11f8>)
    cc34:	481d      	ldr	r0, [pc, #116]	; (ccac <event_connection_prepare+0x1204>)
    cc36:	f7fe bf48 	b.w	baca <event_connection_prepare+0x22>
				mem_release(node_rx->hdr.onion.link,
    cc3a:	f8df 9078 	ldr.w	r9, [pc, #120]	; ccb4 <event_connection_prepare+0x120c>
    cc3e:	e7da      	b.n	cbf6 <event_connection_prepare+0x114e>
			mem_init(_radio.pkt_rx_data_pool,
    cc40:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    cc44:	4b1a      	ldr	r3, [pc, #104]	; (ccb0 <event_connection_prepare+0x1208>)
    cc46:	f7fa f809 	bl	6c5c <mem_init>
			packet_rx_allocate(4);
    cc4a:	2004      	movs	r0, #4
    cc4c:	f7fc febe 	bl	99cc <packet_rx_allocate>
    cc50:	e7a0      	b.n	cb94 <event_connection_prepare+0x10ec>
		node_rx->hdr.handle = conn->handle;
    cc52:	8c23      	ldrh	r3, [r4, #32]
    cc54:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cc56:	2301      	movs	r3, #1
    cc58:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cc5a:	7a03      	ldrb	r3, [r0, #8]
    cc5c:	f043 0303 	orr.w	r3, r3, #3
    cc60:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cc62:	2309      	movs	r3, #9
    cc64:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    cc66:	2315      	movs	r3, #21
    cc68:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    cc6a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cc6c:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    cc6e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    cc70:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    cc72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    cc74:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    cc76:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cc78:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    cc7a:	f7fd fca5 	bl	a5c8 <packet_rx_enqueue>
    cc7e:	e725      	b.n	cacc <event_connection_prepare+0x1024>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    cc80:	4902      	ldr	r1, [pc, #8]	; (cc8c <event_connection_prepare+0x11e4>)
    cc82:	4638      	mov	r0, r7
    cc84:	f7fa f82b 	bl	6cde <mem_release>
    cc88:	f7ff bbff 	b.w	c48a <event_connection_prepare+0x9e2>
    cc8c:	20000a4c 	.word	0x20000a4c
    cc90:	0000cfe9 	.word	0x0000cfe9
    cc94:	0000ccfd 	.word	0x0000ccfd
    cc98:	00014891 	.word	0x00014891
    cc9c:	20003aa4 	.word	0x20003aa4
    cca0:	00016d5b 	.word	0x00016d5b
    cca4:	00015639 	.word	0x00015639
    cca8:	00016f5a 	.word	0x00016f5a
    ccac:	00016fb4 	.word	0x00016fb4
    ccb0:	20000a20 	.word	0x20000a20
    ccb4:	20000a38 	.word	0x20000a38

0000ccb8 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    ccb8:	f7fe bef6 	b.w	baa8 <event_connection_prepare>

0000ccbc <event_slave_prepare>:
    ccbc:	f7fe bef4 	b.w	baa8 <event_connection_prepare>

0000ccc0 <connection_configure>:
{
    ccc0:	b510      	push	{r4, lr}
    ccc2:	4604      	mov	r4, r0
	radio_reset();
    ccc4:	f005 f9a0 	bl	12008 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    ccc8:	2000      	movs	r0, #0
    ccca:	f005 f9c7 	bl	1205c <radio_tx_power_set>
	radio_isr_set(isr);
    ccce:	480a      	ldr	r0, [pc, #40]	; (ccf8 <connection_configure+0x38>)
    ccd0:	f005 f964 	bl	11f9c <radio_isr_set>
	radio_aa_set(conn->access_addr);
    ccd4:	f104 0010 	add.w	r0, r4, #16
    ccd8:	f005 f9de 	bl	12098 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    ccdc:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    ccde:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    cce0:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    cce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    cce6:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cce8:	f240 605b 	movw	r0, #1627	; 0x65b
    ccec:	4319      	orrs	r1, r3
}
    ccee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    ccf2:	f005 ba79 	b.w	121e8 <radio_crc_configure>
    ccf6:	bf00      	nop
    ccf8:	0000e3d9 	.word	0x0000e3d9

0000ccfc <event_slave>:
{
    ccfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cd00:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cd02:	4b72      	ldr	r3, [pc, #456]	; (cecc <event_slave+0x1d0>)
    cd04:	7cda      	ldrb	r2, [r3, #19]
{
    cd06:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cd08:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    cd0c:	461d      	mov	r5, r3
    cd0e:	b172      	cbz	r2, cd2e <event_slave+0x32>
    cd10:	4a6f      	ldr	r2, [pc, #444]	; (ced0 <event_slave+0x1d4>)
    cd12:	4b70      	ldr	r3, [pc, #448]	; (ced4 <event_slave+0x1d8>)
    cd14:	9201      	str	r2, [sp, #4]
    cd16:	9200      	str	r2, [sp, #0]
    cd18:	681c      	ldr	r4, [r3, #0]
    cd1a:	496f      	ldr	r1, [pc, #444]	; (ced8 <event_slave+0x1dc>)
    cd1c:	4b6f      	ldr	r3, [pc, #444]	; (cedc <event_slave+0x1e0>)
    cd1e:	4870      	ldr	r0, [pc, #448]	; (cee0 <event_slave+0x1e4>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cd20:	47a0      	blx	r4
    cd22:	4040      	eors	r0, r0
    cd24:	f380 8811 	msr	BASEPRI, r0
    cd28:	f04f 0004 	mov.w	r0, #4
    cd2c:	df02      	svc	2
    cd2e:	7c1b      	ldrb	r3, [r3, #16]
    cd30:	8c22      	ldrh	r2, [r4, #32]
    cd32:	b2db      	uxtb	r3, r3
    cd34:	3207      	adds	r2, #7
    cd36:	4293      	cmp	r3, r2
    cd38:	d008      	beq.n	cd4c <event_slave+0x50>
    cd3a:	4a65      	ldr	r2, [pc, #404]	; (ced0 <event_slave+0x1d4>)
    cd3c:	4b65      	ldr	r3, [pc, #404]	; (ced4 <event_slave+0x1d8>)
    cd3e:	9201      	str	r2, [sp, #4]
    cd40:	9200      	str	r2, [sp, #0]
    cd42:	681c      	ldr	r4, [r3, #0]
    cd44:	4964      	ldr	r1, [pc, #400]	; (ced8 <event_slave+0x1dc>)
    cd46:	4b65      	ldr	r3, [pc, #404]	; (cedc <event_slave+0x1e0>)
    cd48:	4866      	ldr	r0, [pc, #408]	; (cee4 <event_slave+0x1e8>)
    cd4a:	e7e9      	b.n	cd20 <event_slave+0x24>
	_radio.packet_counter = 0;
    cd4c:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    cd50:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    cd54:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    cd56:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    cd58:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    cd5a:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    cd5c:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    cd5e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    cd60:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    cd64:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    cd66:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    cd68:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    cd6a:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    cd6c:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    cd6e:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    cd70:	f7ff ffa6 	bl	ccc0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    cd74:	2096      	movs	r0, #150	; 0x96
    cd76:	f005 faf1 	bl	1235c <radio_tmr_tifs_set>
				     conn->phy_flags);
    cd7a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    cd7e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cd82:	09d3      	lsrs	r3, r2, #7
    cd84:	4631      	mov	r1, r6
    cd86:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    cd8a:	f000 0007 	and.w	r0, r0, #7
    cd8e:	f005 fa55 	bl	1223c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    cd92:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    cd96:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    cd9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    cd9e:	4620      	mov	r0, r4
    cda0:	3108      	adds	r1, #8
    cda2:	f7fd f905 	bl	9fb0 <rx_packet_set>
	if (conn->data_chan_sel) {
    cda6:	7f63      	ldrb	r3, [r4, #29]
    cda8:	f013 0f40 	tst.w	r3, #64	; 0x40
    cdac:	f104 0217 	add.w	r2, r4, #23
    cdb0:	d05a      	beq.n	ce68 <event_slave+0x16c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    cdb2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    cdb4:	8be1      	ldrh	r1, [r4, #30]
    cdb6:	3801      	subs	r0, #1
    cdb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cdbc:	b280      	uxth	r0, r0
    cdbe:	f7fe fd5f 	bl	b880 <chan_sel_2>
	chan_set(data_chan_use);
    cdc2:	f7fe f82b 	bl	ae1c <chan_set>
	conn->slave.window_widening_event_us +=
    cdc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    cdc8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    cdca:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    cdcc:	2200      	movs	r2, #0
    cdce:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    cdd0:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    cdd2:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    cdd4:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    cdd6:	bf88      	it	hi
    cdd8:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    cdda:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cddc:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    cdde:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    cde0:	4413      	add	r3, r2
    cde2:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cde4:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    cde6:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cde8:	f107 0109 	add.w	r1, r7, #9
    cdec:	4630      	mov	r0, r6
    cdee:	f005 fac1 	bl	12374 <radio_tmr_start>
    cdf2:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    cdf4:	f005 fb5a 	bl	124ac <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    cdf8:	4630      	mov	r0, r6
    cdfa:	f005 fb79 	bl	124f0 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cdfe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    ce00:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    ce02:	f103 0650 	add.w	r6, r3, #80	; 0x50
    ce06:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    ce0a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    ce0e:	2101      	movs	r1, #1
    ce10:	f000 0007 	and.w	r0, r0, #7
    ce14:	f005 f999 	bl	1214a <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    ce18:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    ce1a:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    ce1c:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    ce20:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    ce24:	2802      	cmp	r0, #2
    ce26:	d03f      	beq.n	cea8 <event_slave+0x1ac>
		return 40;
    ce28:	2804      	cmp	r0, #4
    ce2a:	bf0c      	ite	eq
    ce2c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    ce30:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    ce32:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    ce34:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    ce36:	f005 f98a 	bl	1214e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    ce3a:	4430      	add	r0, r6
    ce3c:	f005 fb18 	bl	12470 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    ce40:	f894 1020 	ldrb.w	r1, [r4, #32]
    ce44:	3107      	adds	r1, #7
    ce46:	463a      	mov	r2, r7
    ce48:	b2c9      	uxtb	r1, r1
    ce4a:	4620      	mov	r0, r4
    ce4c:	f7fe fa9c 	bl	b388 <preempt_calc>
    ce50:	4603      	mov	r3, r0
    ce52:	b358      	cbz	r0, ceac <event_slave+0x1b0>
		_radio.state = STATE_STOP;
    ce54:	2304      	movs	r3, #4
    ce56:	752b      	strb	r3, [r5, #20]
		radio_disable();
    ce58:	f005 f98a 	bl	12170 <radio_disable>
	packet_tx_enqueue(2);
    ce5c:	2002      	movs	r0, #2
}
    ce5e:	b002      	add	sp, #8
    ce60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    ce64:	f7fd bef0 	b.w	ac48 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    ce68:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    ce6a:	7fa6      	ldrb	r6, [r4, #30]
    ce6c:	fb01 6606 	mla	r6, r1, r6, r6
    ce70:	7fe1      	ldrb	r1, [r4, #31]
    ce72:	2025      	movs	r0, #37	; 0x25
    ce74:	440e      	add	r6, r1
    ce76:	fb96 f1f0 	sdiv	r1, r6, r0
    ce7a:	fb00 6611 	mls	r6, r0, r1, r6
    ce7e:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ce80:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    ce82:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ce84:	5c51      	ldrb	r1, [r2, r1]
    ce86:	f006 0607 	and.w	r6, r6, #7
    ce8a:	fa41 f606 	asr.w	r6, r1, r6
    ce8e:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    ce90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ce94:	d495      	bmi.n	cdc2 <event_slave+0xc6>
		chan_index = chan_next % chan_count;
    ce96:	fbb0 f1f3 	udiv	r1, r0, r3
    ce9a:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    ce9e:	b2c9      	uxtb	r1, r1
    cea0:	4610      	mov	r0, r2
    cea2:	f7fc fce9 	bl	9878 <chan_sel_remap>
    cea6:	e78c      	b.n	cdc2 <event_slave+0xc6>
		return 24;
    cea8:	2318      	movs	r3, #24
    ceaa:	e7c2      	b.n	ce32 <event_slave+0x136>
		ticker_status =
    ceac:	4a0e      	ldr	r2, [pc, #56]	; (cee8 <event_slave+0x1ec>)
    ceae:	4601      	mov	r1, r0
    ceb0:	f7fa fea0 	bl	7bf4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ceb4:	f030 0302 	bics.w	r3, r0, #2
    ceb8:	d0d0      	beq.n	ce5c <event_slave+0x160>
    ceba:	4a05      	ldr	r2, [pc, #20]	; (ced0 <event_slave+0x1d4>)
    cebc:	4b05      	ldr	r3, [pc, #20]	; (ced4 <event_slave+0x1d8>)
    cebe:	9201      	str	r2, [sp, #4]
    cec0:	9200      	str	r2, [sp, #0]
    cec2:	681c      	ldr	r4, [r3, #0]
    cec4:	4904      	ldr	r1, [pc, #16]	; (ced8 <event_slave+0x1dc>)
    cec6:	4b05      	ldr	r3, [pc, #20]	; (cedc <event_slave+0x1e0>)
    cec8:	4808      	ldr	r0, [pc, #32]	; (ceec <event_slave+0x1f0>)
    ceca:	e729      	b.n	cd20 <event_slave+0x24>
    cecc:	200008f0 	.word	0x200008f0
    ced0:	00014891 	.word	0x00014891
    ced4:	20003aa4 	.word	0x20003aa4
    ced8:	00015639 	.word	0x00015639
    cedc:	00016dad 	.word	0x00016dad
    cee0:	00016ff1 	.word	0x00016ff1
    cee4:	000170a4 	.word	0x000170a4
    cee8:	0000a9c5 	.word	0x0000a9c5
    ceec:	00016ed5 	.word	0x00016ed5

0000cef0 <prepare_pdu_data_tx>:
	    conn->empty ||
    cef0:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    cef4:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    cef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cefa:	4604      	mov	r4, r0
    cefc:	460e      	mov	r6, r1
	if (/* empty packet */
    cefe:	d109      	bne.n	cf14 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    cf00:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    cf04:	b131      	cbz	r1, cf14 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    cf06:	f01c 0f08 	tst.w	ip, #8
    cf0a:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    cf0e:	d022      	beq.n	cf56 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    cf10:	4571      	cmp	r1, lr
    cf12:	d020      	beq.n	cf56 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    cf14:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cf18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cf1c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    cf20:	f005 f978 	bl	12214 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf24:	7803      	ldrb	r3, [r0, #0]
    cf26:	2201      	movs	r2, #1
    cf28:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    cf2c:	2200      	movs	r2, #0
    cf2e:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    cf30:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf34:	7003      	strb	r3, [r0, #0]
    cf36:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    cf38:	b152      	cbz	r2, cf50 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    cf3a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    cf3e:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    cf40:	7803      	ldrb	r3, [r0, #0]
    cf42:	f36f 1347 	bfc	r3, #5, #3
    cf46:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    cf48:	2300      	movs	r3, #0
    cf4a:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    cf4c:	6030      	str	r0, [r6, #0]
    cf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    cf50:	f362 1304 	bfi	r3, r2, #4, #1
    cf54:	e7f3      	b.n	cf3e <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    cf56:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    cf5a:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    cf5e:	1d0d      	adds	r5, r1, #4
    cf60:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    cf62:	b913      	cbnz	r3, cf6a <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    cf64:	7843      	ldrb	r3, [r0, #1]
    cf66:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    cf6a:	b122      	cbz	r2, cf76 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf6c:	5cab      	ldrb	r3, [r5, r2]
    cf6e:	2701      	movs	r7, #1
    cf70:	f367 0301 	bfi	r3, r7, #0, #2
    cf74:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    cf76:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    cf7a:	1abf      	subs	r7, r7, r2
    cf7c:	b2ff      	uxtb	r7, r7
    cf7e:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    cf80:	5cab      	ldrb	r3, [r5, r2]
    cf82:	f36f 1304 	bfc	r3, #4, #1
    cf86:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    cf88:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    cf8c:	f003 0307 	and.w	r3, r3, #7
    cf90:	2b02      	cmp	r3, #2
    cf92:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cf94:	bf15      	itete	ne
    cf96:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cf98:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cf9a:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cf9c:	3b0b      	subeq	r3, #11
    cf9e:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    cfa0:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    cfa4:	bf18      	it	ne
    cfa6:	3b04      	subne	r3, #4
    cfa8:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    cfac:	bf18      	it	ne
    cfae:	b29b      	uxthne	r3, r3
    cfb0:	4563      	cmp	r3, ip
    cfb2:	bf28      	it	cs
    cfb4:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    cfb6:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    cfb8:	bf81      	itttt	hi
    cfba:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    cfbc:	5cab      	ldrbhi	r3, [r5, r2]
    cfbe:	f043 0310 	orrhi.w	r3, r3, #16
    cfc2:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    cfc4:	680b      	ldr	r3, [r1, #0]
    cfc6:	b11b      	cbz	r3, cfd0 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    cfc8:	5cab      	ldrb	r3, [r5, r2]
    cfca:	f043 0310 	orr.w	r3, r3, #16
    cfce:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    cfd0:	f1be 0f00 	cmp.w	lr, #0
    cfd4:	d1b4      	bne.n	cf40 <prepare_pdu_data_tx+0x50>
    cfd6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    cfda:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    cfdc:	bf1c      	itt	ne
    cfde:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    cfe2:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    cfe6:	e7ab      	b.n	cf40 <prepare_pdu_data_tx+0x50>

0000cfe8 <event_master>:
{
    cfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfea:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cfec:	4b57      	ldr	r3, [pc, #348]	; (d14c <event_master+0x164>)
    cfee:	7cd9      	ldrb	r1, [r3, #19]
{
    cff0:	b085      	sub	sp, #20
    cff2:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cff4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    cff8:	461d      	mov	r5, r3
    cffa:	b171      	cbz	r1, d01a <event_master+0x32>
    cffc:	4a54      	ldr	r2, [pc, #336]	; (d150 <event_master+0x168>)
    cffe:	4b55      	ldr	r3, [pc, #340]	; (d154 <event_master+0x16c>)
    d000:	9201      	str	r2, [sp, #4]
    d002:	9200      	str	r2, [sp, #0]
    d004:	681c      	ldr	r4, [r3, #0]
    d006:	4954      	ldr	r1, [pc, #336]	; (d158 <event_master+0x170>)
    d008:	4b54      	ldr	r3, [pc, #336]	; (d15c <event_master+0x174>)
    d00a:	4855      	ldr	r0, [pc, #340]	; (d160 <event_master+0x178>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d00c:	47a0      	blx	r4
    d00e:	4040      	eors	r0, r0
    d010:	f380 8811 	msr	BASEPRI, r0
    d014:	f04f 0004 	mov.w	r0, #4
    d018:	df02      	svc	2
    d01a:	7c1b      	ldrb	r3, [r3, #16]
    d01c:	8c21      	ldrh	r1, [r4, #32]
    d01e:	b2db      	uxtb	r3, r3
    d020:	3107      	adds	r1, #7
    d022:	428b      	cmp	r3, r1
    d024:	d008      	beq.n	d038 <event_master+0x50>
    d026:	4a4a      	ldr	r2, [pc, #296]	; (d150 <event_master+0x168>)
    d028:	4b4a      	ldr	r3, [pc, #296]	; (d154 <event_master+0x16c>)
    d02a:	9201      	str	r2, [sp, #4]
    d02c:	9200      	str	r2, [sp, #0]
    d02e:	681c      	ldr	r4, [r3, #0]
    d030:	4949      	ldr	r1, [pc, #292]	; (d158 <event_master+0x170>)
    d032:	4b4a      	ldr	r3, [pc, #296]	; (d15c <event_master+0x174>)
    d034:	484b      	ldr	r0, [pc, #300]	; (d164 <event_master+0x17c>)
    d036:	e7e9      	b.n	d00c <event_master+0x24>
	_radio.packet_counter = 0;
    d038:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d03c:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    d040:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d042:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    d044:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d046:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    d048:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d04a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d04c:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    d050:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    d052:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    d054:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    d056:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    d058:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    d05a:	f7fd fdf5 	bl	ac48 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    d05e:	a903      	add	r1, sp, #12
    d060:	4620      	mov	r0, r4
    d062:	f7ff ff45 	bl	cef0 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    d066:	9903      	ldr	r1, [sp, #12]
    d068:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    d06c:	780b      	ldrb	r3, [r1, #0]
    d06e:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    d072:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d076:	f362 0382 	bfi	r3, r2, #2, #1
    d07a:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    d07c:	4620      	mov	r0, r4
    d07e:	f7ff fe1f 	bl	ccc0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d082:	2096      	movs	r0, #150	; 0x96
    d084:	f005 f96a 	bl	1235c <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    d088:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d08c:	f000 0007 	and.w	r0, r0, #7
    d090:	f005 f8c8 	bl	12224 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    d094:	9903      	ldr	r1, [sp, #12]
    d096:	4620      	mov	r0, r4
    d098:	f7fc ffb6 	bl	a008 <tx_packet_set>
	if (conn->data_chan_sel) {
    d09c:	7f63      	ldrb	r3, [r4, #29]
    d09e:	f013 0f40 	tst.w	r3, #64	; 0x40
    d0a2:	f104 0217 	add.w	r2, r4, #23
    d0a6:	d021      	beq.n	d0ec <event_master+0x104>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d0a8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d0aa:	8be1      	ldrh	r1, [r4, #30]
    d0ac:	3801      	subs	r0, #1
    d0ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d0b2:	b280      	uxth	r0, r0
    d0b4:	f7fe fbe4 	bl	b880 <chan_sel_2>
	chan_set(data_chan_use);
    d0b8:	f7fd feb0 	bl	ae1c <chan_set>
		remainder_us = radio_tmr_start(1,
    d0bc:	68ea      	ldr	r2, [r5, #12]
    d0be:	f107 0109 	add.w	r1, r7, #9
    d0c2:	2001      	movs	r0, #1
    d0c4:	f005 f956 	bl	12374 <radio_tmr_start>
		radio_tmr_end_capture();
    d0c8:	f005 fa24 	bl	12514 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d0cc:	f894 1020 	ldrb.w	r1, [r4, #32]
    d0d0:	3107      	adds	r1, #7
    d0d2:	463a      	mov	r2, r7
    d0d4:	b2c9      	uxtb	r1, r1
    d0d6:	4620      	mov	r0, r4
    d0d8:	f7fe f956 	bl	b388 <preempt_calc>
	if (0 !=
    d0dc:	4603      	mov	r3, r0
    d0de:	b328      	cbz	r0, d12c <event_master+0x144>
		_radio.state = STATE_STOP;
    d0e0:	2304      	movs	r3, #4
    d0e2:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d0e4:	f005 f844 	bl	12170 <radio_disable>
}
    d0e8:	b005      	add	sp, #20
    d0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d0ec:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d0ee:	7fa6      	ldrb	r6, [r4, #30]
    d0f0:	fb01 6606 	mla	r6, r1, r6, r6
    d0f4:	7fe1      	ldrb	r1, [r4, #31]
    d0f6:	2025      	movs	r0, #37	; 0x25
    d0f8:	440e      	add	r6, r1
    d0fa:	fb96 f1f0 	sdiv	r1, r6, r0
    d0fe:	fb00 6611 	mls	r6, r0, r1, r6
    d102:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d104:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d106:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d108:	5c51      	ldrb	r1, [r2, r1]
    d10a:	f006 0607 	and.w	r6, r6, #7
    d10e:	fa41 f606 	asr.w	r6, r1, r6
    d112:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d118:	d4ce      	bmi.n	d0b8 <event_master+0xd0>
		chan_index = chan_next % chan_count;
    d11a:	fbb0 f1f3 	udiv	r1, r0, r3
    d11e:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d122:	b2c9      	uxtb	r1, r1
    d124:	4610      	mov	r0, r2
    d126:	f7fc fba7 	bl	9878 <chan_sel_remap>
    d12a:	e7c5      	b.n	d0b8 <event_master+0xd0>
		ticker_status =
    d12c:	4a0e      	ldr	r2, [pc, #56]	; (d168 <event_master+0x180>)
    d12e:	4601      	mov	r1, r0
    d130:	f7fa fd60 	bl	7bf4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d134:	f030 0302 	bics.w	r3, r0, #2
    d138:	d0d6      	beq.n	d0e8 <event_master+0x100>
    d13a:	4a05      	ldr	r2, [pc, #20]	; (d150 <event_master+0x168>)
    d13c:	4b05      	ldr	r3, [pc, #20]	; (d154 <event_master+0x16c>)
    d13e:	9201      	str	r2, [sp, #4]
    d140:	9200      	str	r2, [sp, #0]
    d142:	681c      	ldr	r4, [r3, #0]
    d144:	4904      	ldr	r1, [pc, #16]	; (d158 <event_master+0x170>)
    d146:	4b05      	ldr	r3, [pc, #20]	; (d15c <event_master+0x174>)
    d148:	4808      	ldr	r0, [pc, #32]	; (d16c <event_master+0x184>)
    d14a:	e75f      	b.n	d00c <event_master+0x24>
    d14c:	200008f0 	.word	0x200008f0
    d150:	00014891 	.word	0x00014891
    d154:	20003aa4 	.word	0x20003aa4
    d158:	00015639 	.word	0x00015639
    d15c:	00016db9 	.word	0x00016db9
    d160:	00016ff1 	.word	0x00016ff1
    d164:	000170a4 	.word	0x000170a4
    d168:	0000a9c5 	.word	0x0000a9c5
    d16c:	00016ed5 	.word	0x00016ed5

0000d170 <isr_rx_conn_pkt_ctrl>:
{
    d170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d174:	7ac7      	ldrb	r7, [r0, #11]
{
    d176:	4604      	mov	r4, r0
    d178:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d17a:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d17e:	2f19      	cmp	r7, #25
    d180:	f201 80ef 	bhi.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
    d184:	e8df f017 	tbh	[pc, r7, lsl #1]
    d188:	0082001a 	.word	0x0082001a
    d18c:	00cf00c0 	.word	0x00cf00c0
    d190:	012500fd 	.word	0x012500fd
    d194:	059c0157 	.word	0x059c0157
    d198:	01c60193 	.word	0x01c60193
    d19c:	021e01f4 	.word	0x021e01f4
    d1a0:	02b8024f 	.word	0x02b8024f
    d1a4:	02d001a9 	.word	0x02d001a9
    d1a8:	04a70424 	.word	0x04a70424
    d1ac:	05800566 	.word	0x05800566
    d1b0:	06530653 	.word	0x06530653
    d1b4:	07f7072a 	.word	0x07f7072a
    d1b8:	08ba082e 	.word	0x08ba082e
		if (!_radio.conn_curr->role ||
    d1bc:	4ecc      	ldr	r6, [pc, #816]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d1be:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d1c2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d1c6:	2b00      	cmp	r3, #0
    d1c8:	f281 80cb 	bge.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d1cc:	7a41      	ldrb	r1, [r0, #9]
    d1ce:	2000      	movs	r0, #0
    d1d0:	f7fc fb26 	bl	9820 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d1d4:	2800      	cmp	r0, #0
    d1d6:	f001 80c4 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d1da:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d1de:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d1e0:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d1e2:	041b      	lsls	r3, r3, #16
    d1e4:	f101 80d3 	bmi.w	e38e <isr_rx_conn_pkt_ctrl+0x121e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d1e8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d1ec:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d1f0:	429a      	cmp	r2, r3
    d1f2:	d008      	beq.n	d206 <isr_rx_conn_pkt_ctrl+0x96>
    d1f4:	4abf      	ldr	r2, [pc, #764]	; (d4f4 <isr_rx_conn_pkt_ctrl+0x384>)
    d1f6:	4bc0      	ldr	r3, [pc, #768]	; (d4f8 <isr_rx_conn_pkt_ctrl+0x388>)
    d1f8:	9201      	str	r2, [sp, #4]
    d1fa:	9200      	str	r2, [sp, #0]
    d1fc:	681c      	ldr	r4, [r3, #0]
    d1fe:	4bbf      	ldr	r3, [pc, #764]	; (d4fc <isr_rx_conn_pkt_ctrl+0x38c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d200:	49bf      	ldr	r1, [pc, #764]	; (d500 <isr_rx_conn_pkt_ctrl+0x390>)
    d202:	48c0      	ldr	r0, [pc, #768]	; (d504 <isr_rx_conn_pkt_ctrl+0x394>)
    d204:	e0fa      	b.n	d3fc <isr_rx_conn_pkt_ctrl+0x28c>
	if (_radio.conn_upd == 0) {
    d206:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d20a:	b90a      	cbnz	r2, d210 <isr_rx_conn_pkt_ctrl+0xa0>
		_radio.conn_upd = conn;
    d20c:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d210:	7b22      	ldrb	r2, [r4, #12]
    d212:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d216:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d21a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d21e:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d220:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d224:	7c20      	ldrb	r0, [r4, #16]
    d226:	7be2      	ldrb	r2, [r4, #15]
    d228:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d22c:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d230:	7ca0      	ldrb	r0, [r4, #18]
    d232:	7c62      	ldrb	r2, [r4, #17]
    d234:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d238:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d23c:	7ce2      	ldrb	r2, [r4, #19]
    d23e:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d240:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d244:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d248:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d24c:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d250:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d254:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d258:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d25a:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d25e:	2201      	movs	r2, #1
    d260:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d264:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d268:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d26c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d270:	4293      	cmp	r3, r2
    d272:	d007      	beq.n	d284 <isr_rx_conn_pkt_ctrl+0x114>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d274:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d278:	f003 0307 	and.w	r3, r3, #7
    d27c:	2b04      	cmp	r3, #4
    d27e:	d101      	bne.n	d284 <isr_rx_conn_pkt_ctrl+0x114>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d280:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d284:	2000      	movs	r0, #0
    d286:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d28a:	e03a      	b.n	d302 <isr_rx_conn_pkt_ctrl+0x192>
		if (!_radio.conn_curr->role ||
    d28c:	4b98      	ldr	r3, [pc, #608]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d28e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d292:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d296:	2b00      	cmp	r3, #0
    d298:	f281 8063 	bge.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d29c:	7a41      	ldrb	r1, [r0, #9]
    d29e:	2001      	movs	r0, #1
    d2a0:	f7fc fabe 	bl	9820 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d2a4:	2800      	cmp	r0, #0
    d2a6:	f001 805c 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d2aa:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d2ae:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d2b0:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d2b2:	041f      	lsls	r7, r3, #16
    d2b4:	f101 806b 	bmi.w	e38e <isr_rx_conn_pkt_ctrl+0x121e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d2b8:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d2bc:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d2c0:	429a      	cmp	r2, r3
    d2c2:	d006      	beq.n	d2d2 <isr_rx_conn_pkt_ctrl+0x162>
    d2c4:	4a8b      	ldr	r2, [pc, #556]	; (d4f4 <isr_rx_conn_pkt_ctrl+0x384>)
    d2c6:	4b8c      	ldr	r3, [pc, #560]	; (d4f8 <isr_rx_conn_pkt_ctrl+0x388>)
    d2c8:	9201      	str	r2, [sp, #4]
    d2ca:	9200      	str	r2, [sp, #0]
    d2cc:	681c      	ldr	r4, [r3, #0]
    d2ce:	4b8e      	ldr	r3, [pc, #568]	; (d508 <isr_rx_conn_pkt_ctrl+0x398>)
    d2d0:	e796      	b.n	d200 <isr_rx_conn_pkt_ctrl+0x90>
	memcpy(&conn->llcp.chan_map.chm[0],
    d2d2:	2205      	movs	r2, #5
    d2d4:	f104 010c 	add.w	r1, r4, #12
    d2d8:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d2dc:	f7f4 fca0 	bl	1c20 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d2e0:	7c63      	ldrb	r3, [r4, #17]
    d2e2:	7ca2      	ldrb	r2, [r4, #18]
    d2e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d2e8:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d2ec:	2302      	movs	r3, #2
    d2ee:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d2f2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d2f6:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d2f8:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d2fa:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d2fe:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d302:	b003      	add	sp, #12
    d304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d308:	7a41      	ldrb	r1, [r0, #9]
    d30a:	2002      	movs	r0, #2
    d30c:	f7fc fa88 	bl	9820 <pdu_len_cmp>
    d310:	2800      	cmp	r0, #0
    d312:	f001 8026 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d316:	4b76      	ldr	r3, [pc, #472]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d318:	7b22      	ldrb	r2, [r4, #12]
    d31a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d31e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d322:	2000      	movs	r0, #0
	return nack;
    d324:	e7ed      	b.n	d302 <isr_rx_conn_pkt_ctrl+0x192>
		if (!_radio.conn_curr->role ||
    d326:	4e72      	ldr	r6, [pc, #456]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d328:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d32c:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d330:	2b00      	cmp	r3, #0
    d332:	f281 8016 	bge.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d336:	7a41      	ldrb	r1, [r0, #9]
    d338:	2003      	movs	r0, #3
    d33a:	f7fc fa71 	bl	9820 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d33e:	2800      	cmp	r0, #0
    d340:	f001 800f 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d344:	2208      	movs	r2, #8
    d346:	f104 0116 	add.w	r1, r4, #22
    d34a:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d34e:	f7f4 fc67 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d352:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d356:	2204      	movs	r2, #4
    d358:	f104 011e 	add.w	r1, r4, #30
    d35c:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d360:	f7f4 fc5e 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d364:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    d368:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d36c:	f042 0204 	orr.w	r2, r2, #4
    d370:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d374:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d378:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    d37c:	2301      	movs	r3, #1
    d37e:	702b      	strb	r3, [r5, #0]
    d380:	e7cf      	b.n	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (_radio.conn_curr->role ||
    d382:	4d5b      	ldr	r5, [pc, #364]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d384:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    d388:	f996 301d 	ldrsb.w	r3, [r6, #29]
    d38c:	2b00      	cmp	r3, #0
    d38e:	f2c0 87e8 	blt.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    d392:	7a41      	ldrb	r1, [r0, #9]
    d394:	2004      	movs	r0, #4
    d396:	f7fc fa43 	bl	9820 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d39a:	2800      	cmp	r0, #0
    d39c:	f000 87e1 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d3a0:	2208      	movs	r2, #8
    d3a2:	f104 010c 	add.w	r1, r4, #12
    d3a6:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    d3aa:	f7f4 fc39 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d3ae:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d3b2:	2204      	movs	r2, #4
    d3b4:	f104 0114 	add.w	r1, r4, #20
    d3b8:	f500 708b 	add.w	r0, r0, #278	; 0x116
    d3bc:	f7f4 fc30 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d3c0:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d3c4:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d3c8:	f043 0304 	orr.w	r3, r3, #4
    d3cc:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d3d0:	e7a7      	b.n	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    d3d2:	4b47      	ldr	r3, [pc, #284]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d3d4:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d3d8:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    d3dc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d3e0:	42b3      	cmp	r3, r6
    d3e2:	d012      	beq.n	d40a <isr_rx_conn_pkt_ctrl+0x29a>
    d3e4:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    d3e8:	2b03      	cmp	r3, #3
    d3ea:	d00e      	beq.n	d40a <isr_rx_conn_pkt_ctrl+0x29a>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d3ec:	4a41      	ldr	r2, [pc, #260]	; (d4f4 <isr_rx_conn_pkt_ctrl+0x384>)
    d3ee:	4b42      	ldr	r3, [pc, #264]	; (d4f8 <isr_rx_conn_pkt_ctrl+0x388>)
    d3f0:	9201      	str	r2, [sp, #4]
    d3f2:	9200      	str	r2, [sp, #0]
    d3f4:	681c      	ldr	r4, [r3, #0]
    d3f6:	4942      	ldr	r1, [pc, #264]	; (d500 <isr_rx_conn_pkt_ctrl+0x390>)
    d3f8:	4b44      	ldr	r3, [pc, #272]	; (d50c <isr_rx_conn_pkt_ctrl+0x39c>)
    d3fa:	4845      	ldr	r0, [pc, #276]	; (d510 <isr_rx_conn_pkt_ctrl+0x3a0>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d3fc:	47a0      	blx	r4
    d3fe:	4040      	eors	r0, r0
    d400:	f380 8811 	msr	BASEPRI, r0
    d404:	f04f 0004 	mov.w	r0, #4
    d408:	df02      	svc	2
		if (_radio.conn_curr->role ||
    d40a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d40e:	2b00      	cmp	r3, #0
    d410:	f2c0 87a7 	blt.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    d414:	7a61      	ldrb	r1, [r4, #9]
    d416:	2005      	movs	r0, #5
    d418:	f7fc fa02 	bl	9820 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d41c:	2800      	cmp	r0, #0
    d41e:	f000 87a0 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d422:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d424:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    d426:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d428:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d42c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    d430:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    d434:	e765      	b.n	d302 <isr_rx_conn_pkt_ctrl+0x192>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d436:	7a41      	ldrb	r1, [r0, #9]
    d438:	2006      	movs	r0, #6
    d43a:	f7fc f9f1 	bl	9820 <pdu_len_cmp>
    d43e:	2800      	cmp	r0, #0
    d440:	f000 878f 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		if (_radio.role == ROLE_SLAVE) {
    d444:	4b2a      	ldr	r3, [pc, #168]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d446:	7cda      	ldrb	r2, [r3, #19]
    d448:	2a03      	cmp	r2, #3
    d44a:	4619      	mov	r1, r3
    d44c:	d124      	bne.n	d498 <isr_rx_conn_pkt_ctrl+0x328>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d44e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d452:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d456:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    d45a:	4290      	cmp	r0, r2
    d45c:	d003      	beq.n	d466 <isr_rx_conn_pkt_ctrl+0x2f6>
    d45e:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    d462:	2803      	cmp	r0, #3
    d464:	d1c2      	bne.n	d3ec <isr_rx_conn_pkt_ctrl+0x27c>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d466:	2000      	movs	r0, #0
    d468:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d46c:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d46e:	2003      	movs	r0, #3
    d470:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d474:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d478:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    d47c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d480:	065e      	lsls	r6, r3, #25
    d482:	d505      	bpl.n	d490 <isr_rx_conn_pkt_ctrl+0x320>
			_radio.conn_curr->refresh = 0;
    d484:	f36f 1386 	bfc	r3, #6, #1
    d488:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d48c:	2309      	movs	r3, #9
    d48e:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d490:	2301      	movs	r3, #1
    d492:	702b      	strb	r3, [r5, #0]
				break;
    d494:	f000 bcc7 	b.w	de26 <isr_rx_conn_pkt_ctrl+0xcb6>
			_radio.conn_curr->pause_rx = 0;
    d498:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d49c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d4a0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d4a4:	f36f 03c3 	bfc	r3, #3, #1
    d4a8:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d4ac:	e7e4      	b.n	d478 <isr_rx_conn_pkt_ctrl+0x308>
		if (!_radio.conn_curr->role ||
    d4ae:	4b10      	ldr	r3, [pc, #64]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d4b0:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d4b4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d4b8:	2b00      	cmp	r3, #0
    d4ba:	f280 8752 	bge.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d4be:	7a41      	ldrb	r1, [r0, #9]
    d4c0:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d4c2:	f7fc f9ad 	bl	9820 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d4c6:	2800      	cmp	r0, #0
    d4c8:	f000 874b 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d4cc:	4631      	mov	r1, r6
    d4ce:	4628      	mov	r0, r5
}
    d4d0:	b003      	add	sp, #12
    d4d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d4d6:	f7fe ba5f 	b.w	b998 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d4da:	4b05      	ldr	r3, [pc, #20]	; (d4f0 <isr_rx_conn_pkt_ctrl+0x380>)
    d4dc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d4e0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	f2c0 873c 	blt.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d4ea:	7a41      	ldrb	r1, [r0, #9]
    d4ec:	200e      	movs	r0, #14
    d4ee:	e7e8      	b.n	d4c2 <isr_rx_conn_pkt_ctrl+0x352>
    d4f0:	200008f0 	.word	0x200008f0
    d4f4:	00014891 	.word	0x00014891
    d4f8:	20003aa4 	.word	0x20003aa4
    d4fc:	00016e18 	.word	0x00016e18
    d500:	00015639 	.word	0x00015639
    d504:	000172a0 	.word	0x000172a0
    d508:	00016e24 	.word	0x00016e24
    d50c:	00016aca 	.word	0x00016aca
    d510:	000172e2 	.word	0x000172e2
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d514:	7a41      	ldrb	r1, [r0, #9]
    d516:	2009      	movs	r0, #9
    d518:	f7fc f982 	bl	9820 <pdu_len_cmp>
    d51c:	2800      	cmp	r0, #0
    d51e:	f000 8720 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d522:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d524:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d526:	48b2      	ldr	r0, [pc, #712]	; (d7f0 <isr_rx_conn_pkt_ctrl+0x680>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d52c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d530:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d534:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d538:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d53c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d540:	7ba1      	ldrb	r1, [r4, #14]
    d542:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d546:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d54a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d54e:	400b      	ands	r3, r1
    d550:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d554:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d558:	f043 0320 	orr.w	r3, r3, #32
    d55c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d560:	2301      	movs	r3, #1
    d562:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d564:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    d568:	2000      	movs	r0, #0
    d56a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d56e:	e6c8      	b.n	d302 <isr_rx_conn_pkt_ctrl+0x192>
		if (!_radio.conn_curr->role ||
    d570:	4e9f      	ldr	r6, [pc, #636]	; (d7f0 <isr_rx_conn_pkt_ctrl+0x680>)
    d572:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d576:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d57a:	2b00      	cmp	r3, #0
    d57c:	f280 86f1 	bge.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d580:	7a41      	ldrb	r1, [r0, #9]
    d582:	200a      	movs	r0, #10
    d584:	f7fc f94c 	bl	9820 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d588:	2800      	cmp	r0, #0
    d58a:	f000 86ea 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d58e:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    d592:	f7f9 fb8a 	bl	6caa <mem_acquire>
		if (!node_tx) {
    d596:	4601      	mov	r1, r0
    d598:	b908      	cbnz	r0, d59e <isr_rx_conn_pkt_ctrl+0x42e>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d59a:	2001      	movs	r0, #1
    d59c:	e6b1      	b.n	d302 <isr_rx_conn_pkt_ctrl+0x192>
		conn->refresh = 1;
    d59e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d5a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d5a6:	f36f 1304 	bfc	r3, #4, #1
    d5aa:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5ae:	7903      	ldrb	r3, [r0, #4]
    d5b0:	f043 0303 	orr.w	r3, r3, #3
    d5b4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d5b6:	2301      	movs	r3, #1
    d5b8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d5ba:	230b      	movs	r3, #11
    d5bc:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d5be:	4628      	mov	r0, r5
    d5c0:	f000 bce7 	b.w	df92 <isr_rx_conn_pkt_ctrl+0xe22>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d5c4:	7a41      	ldrb	r1, [r0, #9]
    d5c6:	200b      	movs	r0, #11
    d5c8:	f7fc f92a 	bl	9820 <pdu_len_cmp>
    d5cc:	2800      	cmp	r0, #0
    d5ce:	f000 86c8 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d5d2:	4887      	ldr	r0, [pc, #540]	; (d7f0 <isr_rx_conn_pkt_ctrl+0x680>)
    d5d4:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    d5d8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d5dc:	2b00      	cmp	r3, #0
    d5de:	db1b      	blt.n	d618 <isr_rx_conn_pkt_ctrl+0x4a8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d5e0:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d5e4:	f7f9 fb61 	bl	6caa <mem_acquire>
		if (!node_tx) {
    d5e8:	4601      	mov	r1, r0
    d5ea:	2800      	cmp	r0, #0
    d5ec:	d0d5      	beq.n	d59a <isr_rx_conn_pkt_ctrl+0x42a>
		conn->enc_tx = 0;
    d5ee:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d5f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d5f6:	f043 0304 	orr.w	r3, r3, #4
    d5fa:	f36f 1304 	bfc	r3, #4, #1
    d5fe:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d602:	7903      	ldrb	r3, [r0, #4]
    d604:	f043 0303 	orr.w	r3, r3, #3
    d608:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d60a:	2301      	movs	r3, #1
    d60c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d60e:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d610:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d612:	4620      	mov	r0, r4
    d614:	f000 bcbd 	b.w	df92 <isr_rx_conn_pkt_ctrl+0xe22>
		conn->enc_tx = 0;
    d618:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d61c:	f36f 1345 	bfc	r3, #5, #1
    d620:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d624:	e67d      	b.n	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d626:	7a41      	ldrb	r1, [r0, #9]
    d628:	200c      	movs	r0, #12
    d62a:	f7fc f8f9 	bl	9820 <pdu_len_cmp>
    d62e:	2800      	cmp	r0, #0
    d630:	f000 8697 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d634:	486e      	ldr	r0, [pc, #440]	; (d7f0 <isr_rx_conn_pkt_ctrl+0x680>)
    d636:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    d63a:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d63e:	f013 0701 	ands.w	r7, r3, #1
    d642:	d150      	bne.n	d6e6 <isr_rx_conn_pkt_ctrl+0x576>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d644:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d648:	f7f9 fb2f 	bl	6caa <mem_acquire>
		if (!node_tx) {
    d64c:	4601      	mov	r1, r0
    d64e:	2800      	cmp	r0, #0
    d650:	d0a3      	beq.n	d59a <isr_rx_conn_pkt_ctrl+0x42a>
		conn->llcp_version.tx = 1;
    d652:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d656:	f043 0301 	orr.w	r3, r3, #1
    d65a:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d65e:	7903      	ldrb	r3, [r0, #4]
    d660:	f043 0303 	orr.w	r3, r3, #3
    d664:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d666:	2306      	movs	r3, #6
    d668:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d66a:	230c      	movs	r3, #12
    d66c:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d66e:	2309      	movs	r3, #9
    d670:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d672:	f06f 030e 	mvn.w	r3, #14
    d676:	7243      	strb	r3, [r0, #9]
    d678:	2305      	movs	r3, #5
    d67a:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d67c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d680:	72c3      	strb	r3, [r0, #11]
    d682:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d684:	4630      	mov	r0, r6
    d686:	f7fe f96d 	bl	b964 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d68a:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d692:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d696:	f004 fdbd 	bl	12214 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d69a:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    d69c:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d69e:	2201      	movs	r2, #1
    d6a0:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    d6a4:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d6a8:	7003      	strb	r3, [r0, #0]
    d6aa:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d6ac:	b1c2      	cbz	r2, d6e0 <isr_rx_conn_pkt_ctrl+0x570>
		pdu_data_tx->md = 1;
    d6ae:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d6b2:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    d6b4:	7b23      	ldrb	r3, [r4, #12]
    d6b6:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    d6ba:	7ba2      	ldrb	r2, [r4, #14]
    d6bc:	7b63      	ldrb	r3, [r4, #13]
    d6be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d6c2:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    d6c6:	7be3      	ldrb	r3, [r4, #15]
    d6c8:	7c22      	ldrb	r2, [r4, #16]
    d6ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d6ce:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    d6d2:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d6d6:	f043 0302 	orr.w	r3, r3, #2
    d6da:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    d6de:	e620      	b.n	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		pdu_data_tx->md = 0;
    d6e0:	f362 1304 	bfi	r3, r2, #4, #1
    d6e4:	e7e5      	b.n	d6b2 <isr_rx_conn_pkt_ctrl+0x542>
	} else if (!conn->llcp_version.rx) {
    d6e6:	f013 0302 	ands.w	r3, r3, #2
    d6ea:	f47f ae1a 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		conn->procedure_expire = 0;
    d6ee:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    d6f2:	2301      	movs	r3, #1
    d6f4:	702b      	strb	r3, [r5, #0]
    d6f6:	e7dd      	b.n	d6b4 <isr_rx_conn_pkt_ctrl+0x544>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    d6f8:	7a41      	ldrb	r1, [r0, #9]
    d6fa:	200d      	movs	r0, #13
    d6fc:	f7fc f890 	bl	9820 <pdu_len_cmp>
    d700:	2800      	cmp	r0, #0
    d702:	f000 862e 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		_radio.conn_curr->pause_rx = 0;
    d706:	4b3a      	ldr	r3, [pc, #232]	; (d7f0 <isr_rx_conn_pkt_ctrl+0x680>)
    d708:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d70c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d710:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d714:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    d718:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    d71a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d71e:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    d722:	2301      	movs	r3, #1
    d724:	702b      	strb	r3, [r5, #0]
    d726:	e5ec      	b.n	d302 <isr_rx_conn_pkt_ctrl+0x192>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    d728:	7a41      	ldrb	r1, [r0, #9]
    d72a:	200f      	movs	r0, #15
    d72c:	f7fc f878 	bl	9820 <pdu_len_cmp>
    d730:	2800      	cmp	r0, #0
    d732:	f000 8616 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    d736:	4b2e      	ldr	r3, [pc, #184]	; (d7f0 <isr_rx_conn_pkt_ctrl+0x680>)
    d738:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    d73c:	461a      	mov	r2, r3
    d73e:	b151      	cbz	r1, d756 <isr_rx_conn_pkt_ctrl+0x5e6>
    d740:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    d744:	4281      	cmp	r1, r0
    d746:	d006      	beq.n	d756 <isr_rx_conn_pkt_ctrl+0x5e6>
			nack = reject_ext_ind_send(_radio.conn_curr,
    d748:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    d74a:	210f      	movs	r1, #15
}
    d74c:	b003      	add	sp, #12
    d74e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    d752:	f7fe b98b 	b.w	ba6c <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    d756:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    d75a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d75e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d762:	2b00      	cmp	r3, #0
    d764:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d768:	f2c0 80a7 	blt.w	d8ba <isr_rx_conn_pkt_ctrl+0x74a>
			if ((conn->llcp_conn_param.req !=
    d76c:	4299      	cmp	r1, r3
    d76e:	d009      	beq.n	d784 <isr_rx_conn_pkt_ctrl+0x614>
			    ((conn->llcp_conn_param.state ==
    d770:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    d774:	f013 0307 	ands.w	r3, r3, #7
    d778:	d002      	beq.n	d780 <isr_rx_conn_pkt_ctrl+0x610>
			      LLCP_CPR_STATE_REQ) ||
    d77a:	3b04      	subs	r3, #4
    d77c:	2b01      	cmp	r3, #1
    d77e:	d801      	bhi.n	d784 <isr_rx_conn_pkt_ctrl+0x614>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d780:	2223      	movs	r2, #35	; 0x23
    d782:	e7e2      	b.n	d74a <isr_rx_conn_pkt_ctrl+0x5da>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    d784:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    d788:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    d78c:	4299      	cmp	r1, r3
    d78e:	d003      	beq.n	d798 <isr_rx_conn_pkt_ctrl+0x628>
    d790:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    d794:	2b03      	cmp	r3, #3
    d796:	d105      	bne.n	d7a4 <isr_rx_conn_pkt_ctrl+0x634>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    d798:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    d79c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    d7a0:	4299      	cmp	r1, r3
    d7a2:	d001      	beq.n	d7a8 <isr_rx_conn_pkt_ctrl+0x638>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d7a4:	222a      	movs	r2, #42	; 0x2a
    d7a6:	e7d0      	b.n	d74a <isr_rx_conn_pkt_ctrl+0x5da>
				if ((cpr->interval_min < 6) ||
    d7a8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d7ac:	4643      	mov	r3, r8
    d7ae:	2b05      	cmp	r3, #5
    d7b0:	d91b      	bls.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->interval_max > 3200) ||
    d7b2:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    d7b4:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d7b8:	d817      	bhi.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->interval_max > 3200) ||
    d7ba:	45b8      	cmp	r8, r7
    d7bc:	d815      	bhi.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->latency > 499) ||
    d7be:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    d7c2:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d7c6:	d210      	bcs.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->timeout < 10) ||
    d7c8:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    d7cc:	f1ae 060a 	sub.w	r6, lr, #10
    d7d0:	b2b6      	uxth	r6, r6
    d7d2:	f640 4976 	movw	r9, #3190	; 0xc76
    d7d6:	454e      	cmp	r6, r9
    d7d8:	d807      	bhi.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
				     ((cpr->latency + 1) *
    d7da:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    d7de:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d7e2:	da02      	bge.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
				    (cpr->preferred_periodicity >
    d7e4:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    d7e6:	428f      	cmp	r7, r1
    d7e8:	d204      	bcs.n	d7f4 <isr_rx_conn_pkt_ctrl+0x684>
				nack = reject_ext_ind_send(conn,
    d7ea:	221e      	movs	r2, #30
    d7ec:	e7ad      	b.n	d74a <isr_rx_conn_pkt_ctrl+0x5da>
    d7ee:	bf00      	nop
    d7f0:	200008f0 	.word	0x200008f0
				conn->llcp_conn_param.interval = cpr->interval_min;
    d7f4:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    d7f8:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    d7fc:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    d800:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    d804:	7da6      	ldrb	r6, [r4, #22]
    d806:	7d61      	ldrb	r1, [r4, #21]
    d808:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    d80c:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    d810:	7e26      	ldrb	r6, [r4, #24]
    d812:	7de1      	ldrb	r1, [r4, #23]
    d814:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d818:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    d81c:	7ea6      	ldrb	r6, [r4, #26]
    d81e:	7e61      	ldrb	r1, [r4, #25]
    d820:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d824:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    d828:	7f26      	ldrb	r6, [r4, #28]
    d82a:	7ee1      	ldrb	r1, [r4, #27]
    d82c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d830:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    d834:	7fa6      	ldrb	r6, [r4, #30]
    d836:	7f61      	ldrb	r1, [r4, #29]
    d838:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d83c:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    d840:	7fe1      	ldrb	r1, [r4, #31]
    d842:	f894 6020 	ldrb.w	r6, [r4, #32]
    d846:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d84a:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    d84e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d852:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d856:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d85a:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    d85e:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d862:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d864:	428c      	cmp	r4, r1
    d866:	d10f      	bne.n	d888 <isr_rx_conn_pkt_ctrl+0x718>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d868:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d86a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d86e:	4361      	muls	r1, r4
    d870:	f242 7410 	movw	r4, #10000	; 0x2710
    d874:	fb04 130e 	mla	r3, r4, lr, r1
    d878:	3b01      	subs	r3, #1
    d87a:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    d87e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d880:	b29b      	uxth	r3, r3
    d882:	4299      	cmp	r1, r3
    d884:	f000 8092 	beq.w	d9ac <isr_rx_conn_pkt_ctrl+0x83c>
					if (conn->pause_tx) {
    d888:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    d88c:	071c      	lsls	r4, r3, #28
    d88e:	f140 8087 	bpl.w	d9a0 <isr_rx_conn_pkt_ctrl+0x830>
						conn->llcp_conn_param.state =
    d892:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d896:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    d898:	f361 0302 	bfi	r3, r1, #0, #3
    d89c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    d8a0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d8a4:	3b01      	subs	r3, #1
    d8a6:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    d8aa:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    d8ae:	2b00      	cmp	r3, #0
    d8b0:	f47f ad37 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
				_radio.conn_upd = conn;
    d8b4:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    d8b8:	e533      	b.n	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    d8ba:	4299      	cmp	r1, r3
    d8bc:	d003      	beq.n	d8c6 <isr_rx_conn_pkt_ctrl+0x756>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    d8be:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d8c2:	0799      	lsls	r1, r3, #30
    d8c4:	d17b      	bne.n	d9be <isr_rx_conn_pkt_ctrl+0x84e>
			if ((cpr->interval_min < 6) ||
    d8c6:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d8ca:	4643      	mov	r3, r8
    d8cc:	2b05      	cmp	r3, #5
    d8ce:	d98c      	bls.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->interval_max > 3200) ||
    d8d0:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d8d2:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d8d6:	d888      	bhi.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->interval_max > 3200) ||
    d8d8:	45b8      	cmp	r8, r7
    d8da:	d886      	bhi.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->latency > 499) ||
    d8dc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    d8e0:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d8e4:	d281      	bcs.n	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d8e6:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    d8ea:	f1ae 060a 	sub.w	r6, lr, #10
    d8ee:	b2b6      	uxth	r6, r6
    d8f0:	f640 4976 	movw	r9, #3190	; 0xc76
    d8f4:	454e      	cmp	r6, r9
    d8f6:	f63f af78 	bhi.w	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d8fa:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d8fe:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d902:	f6bf af72 	bge.w	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d906:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    d908:	428f      	cmp	r7, r1
    d90a:	f4ff af6e 	bcc.w	d7ea <isr_rx_conn_pkt_ctrl+0x67a>
			conn->llcp_conn_param.interval = cpr->interval_min;
    d90e:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d912:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d916:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d91a:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    d91e:	7da6      	ldrb	r6, [r4, #22]
    d920:	7d61      	ldrb	r1, [r4, #21]
    d922:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d926:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d92a:	7e26      	ldrb	r6, [r4, #24]
    d92c:	7de1      	ldrb	r1, [r4, #23]
    d92e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d932:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d936:	7ea6      	ldrb	r6, [r4, #26]
    d938:	7e61      	ldrb	r1, [r4, #25]
    d93a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d93e:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d942:	7f26      	ldrb	r6, [r4, #28]
    d944:	7ee1      	ldrb	r1, [r4, #27]
    d946:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d94a:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d94e:	7fa6      	ldrb	r6, [r4, #30]
    d950:	7f61      	ldrb	r1, [r4, #29]
    d952:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d956:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d95a:	7fe1      	ldrb	r1, [r4, #31]
    d95c:	f894 6020 	ldrb.w	r6, [r4, #32]
    d960:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d964:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d968:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d96c:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d970:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d974:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    d978:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d97c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d97e:	428c      	cmp	r4, r1
    d980:	d10e      	bne.n	d9a0 <isr_rx_conn_pkt_ctrl+0x830>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d982:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d984:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d988:	4361      	muls	r1, r4
    d98a:	f242 7410 	movw	r4, #10000	; 0x2710
    d98e:	fb04 130e 	mla	r3, r4, lr, r1
    d992:	3b01      	subs	r3, #1
    d994:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    d998:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d99a:	b29b      	uxth	r3, r3
    d99c:	4299      	cmp	r1, r3
    d99e:	d005      	beq.n	d9ac <isr_rx_conn_pkt_ctrl+0x83c>
				*rx_enqueue = 1;
    d9a0:	2301      	movs	r3, #1
    d9a2:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    d9a4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d9a8:	2103      	movs	r1, #3
    d9aa:	e775      	b.n	d898 <isr_rx_conn_pkt_ctrl+0x728>
				conn->llcp_conn_param.status = 0;
    d9ac:	2300      	movs	r3, #0
    d9ae:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    d9b2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    d9b6:	2101      	movs	r1, #1
    d9b8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d9bc:	e76c      	b.n	d898 <isr_rx_conn_pkt_ctrl+0x728>
			LL_ASSERT(0);
    d9be:	4ab8      	ldr	r2, [pc, #736]	; (dca0 <isr_rx_conn_pkt_ctrl+0xb30>)
    d9c0:	4bb8      	ldr	r3, [pc, #736]	; (dca4 <isr_rx_conn_pkt_ctrl+0xb34>)
    d9c2:	9201      	str	r2, [sp, #4]
    d9c4:	9200      	str	r2, [sp, #0]
    d9c6:	681c      	ldr	r4, [r3, #0]
    d9c8:	49b7      	ldr	r1, [pc, #732]	; (dca8 <isr_rx_conn_pkt_ctrl+0xb38>)
    d9ca:	4bb8      	ldr	r3, [pc, #736]	; (dcac <isr_rx_conn_pkt_ctrl+0xb3c>)
    d9cc:	48b8      	ldr	r0, [pc, #736]	; (dcb0 <isr_rx_conn_pkt_ctrl+0xb40>)
    d9ce:	e515      	b.n	d3fc <isr_rx_conn_pkt_ctrl+0x28c>
		if (_radio.conn_curr->role ||
    d9d0:	4bb8      	ldr	r3, [pc, #736]	; (dcb4 <isr_rx_conn_pkt_ctrl+0xb44>)
    d9d2:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d9d6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d9da:	2b00      	cmp	r3, #0
    d9dc:	f2c0 84c1 	blt.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    d9e0:	7a41      	ldrb	r1, [r0, #9]
    d9e2:	2010      	movs	r0, #16
    d9e4:	f7fb ff1c 	bl	9820 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d9e8:	2800      	cmp	r0, #0
    d9ea:	f000 84ba 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		if (!_radio.conn_curr->role &&
    d9ee:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d9f2:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d9f6:	429a      	cmp	r2, r3
    d9f8:	f43f ac93 	beq.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		    (_radio.conn_curr->llcp_conn_param.state ==
    d9fc:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    da00:	f003 0307 	and.w	r3, r3, #7
    da04:	2b04      	cmp	r3, #4
    da06:	f47f ac8c 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
			if ((cpr->interval_min < 6) ||
    da0a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    da0e:	fa1f f28e 	uxth.w	r2, lr
    da12:	2a05      	cmp	r2, #5
    da14:	d91b      	bls.n	da4e <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->interval_max > 3200) ||
    da16:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    da18:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    da1c:	d817      	bhi.n	da4e <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->interval_max > 3200) ||
    da1e:	429a      	cmp	r2, r3
    da20:	d815      	bhi.n	da4e <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->latency > 499) ||
    da22:	8a27      	ldrh	r7, [r4, #16]
    da24:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    da26:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    da2a:	d210      	bcs.n	da4e <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    da2c:	8a66      	ldrh	r6, [r4, #18]
    da2e:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    da30:	f1a0 010a 	sub.w	r1, r0, #10
    da34:	b289      	uxth	r1, r1
    da36:	f640 4c76 	movw	ip, #3190	; 0xc76
    da3a:	4561      	cmp	r1, ip
    da3c:	d807      	bhi.n	da4e <isr_rx_conn_pkt_ctrl+0x8de>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    da3e:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    da42:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    da46:	da02      	bge.n	da4e <isr_rx_conn_pkt_ctrl+0x8de>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    da48:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    da4a:	4293      	cmp	r3, r2
    da4c:	d203      	bcs.n	da56 <isr_rx_conn_pkt_ctrl+0x8e6>
				nack = reject_ext_ind_send(conn,
    da4e:	221e      	movs	r2, #30
    da50:	2110      	movs	r1, #16
    da52:	4628      	mov	r0, r5
    da54:	e67a      	b.n	d74c <isr_rx_conn_pkt_ctrl+0x5dc>
			_radio.conn_curr->procedure_expire = 0;
    da56:	2000      	movs	r0, #0
    da58:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    da5c:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    da60:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    da64:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    da68:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    da6c:	7da2      	ldrb	r2, [r4, #22]
    da6e:	7d63      	ldrb	r3, [r4, #21]
    da70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    da74:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    da78:	7e22      	ldrb	r2, [r4, #24]
    da7a:	7de3      	ldrb	r3, [r4, #23]
    da7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da80:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    da84:	7ea2      	ldrb	r2, [r4, #26]
    da86:	7e63      	ldrb	r3, [r4, #25]
    da88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da8c:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    da90:	7f22      	ldrb	r2, [r4, #28]
    da92:	7ee3      	ldrb	r3, [r4, #27]
    da94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da98:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    da9c:	7fa2      	ldrb	r2, [r4, #30]
    da9e:	7f63      	ldrb	r3, [r4, #29]
    daa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    daa4:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    daa8:	f894 2020 	ldrb.w	r2, [r4, #32]
    daac:	7fe3      	ldrb	r3, [r4, #31]
    daae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dab2:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    dab6:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    daba:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    dabe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dac2:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    dac6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    daca:	2201      	movs	r2, #1
    dacc:	f362 0302 	bfi	r3, r2, #0, #3
    dad0:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    dad4:	e415      	b.n	d302 <isr_rx_conn_pkt_ctrl+0x192>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    dad6:	7a41      	ldrb	r1, [r0, #9]
    dad8:	2011      	movs	r0, #17
    dada:	f7fb fea1 	bl	9820 <pdu_len_cmp>
    dade:	2800      	cmp	r0, #0
    dae0:	f000 843f 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    dae4:	4a73      	ldr	r2, [pc, #460]	; (dcb4 <isr_rx_conn_pkt_ctrl+0xb44>)
    dae6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    daea:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    daee:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    daf2:	4281      	cmp	r1, r0
    daf4:	7b21      	ldrb	r1, [r4, #12]
    daf6:	d027      	beq.n	db48 <isr_rx_conn_pkt_ctrl+0x9d8>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    daf8:	2916      	cmp	r1, #22
    dafa:	f47f ac12 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (rej_ext_ind->error_code != 0x23) {
    dafe:	7b61      	ldrb	r1, [r4, #13]
    db00:	2923      	cmp	r1, #35	; 0x23
    db02:	d00e      	beq.n	db22 <isr_rx_conn_pkt_ctrl+0x9b2>
				_radio.conn_curr->phy_tx;
    db04:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    db08:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    db0c:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    db10:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    db14:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    db18:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    db1a:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    db1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    db22:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    db26:	0792      	lsls	r2, r2, #30
    db28:	f57f abfb 	bpl.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    db2c:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    db2e:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    db30:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    db32:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    db36:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    db3a:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    db3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    db40:	f3c3 0302 	ubfx	r3, r3, #0, #3
    db44:	7363      	strb	r3, [r4, #13]
    db46:	e419      	b.n	d37c <isr_rx_conn_pkt_ctrl+0x20c>
		   _radio.conn_curr->llcp_conn_param.req) {
    db48:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    db4c:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    db50:	42b8      	cmp	r0, r7
    db52:	d04b      	beq.n	dbec <isr_rx_conn_pkt_ctrl+0xa7c>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    db54:	290f      	cmp	r1, #15
    db56:	f47f abe4 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
    db5a:	f993 001d 	ldrsb.w	r0, [r3, #29]
    db5e:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    db60:	2800      	cmp	r0, #0
    db62:	db10      	blt.n	db86 <isr_rx_conn_pkt_ctrl+0xa16>
    db64:	291a      	cmp	r1, #26
    db66:	d10e      	bne.n	db86 <isr_rx_conn_pkt_ctrl+0xa16>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    db68:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    db6c:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    db70:	4294      	cmp	r4, r2
    db72:	f000 80ce 	beq.w	dd12 <isr_rx_conn_pkt_ctrl+0xba2>
    db76:	4a4a      	ldr	r2, [pc, #296]	; (dca0 <isr_rx_conn_pkt_ctrl+0xb30>)
    db78:	4b4a      	ldr	r3, [pc, #296]	; (dca4 <isr_rx_conn_pkt_ctrl+0xb34>)
    db7a:	9201      	str	r2, [sp, #4]
    db7c:	9200      	str	r2, [sp, #0]
    db7e:	681c      	ldr	r4, [r3, #0]
    db80:	4b4d      	ldr	r3, [pc, #308]	; (dcb8 <isr_rx_conn_pkt_ctrl+0xb48>)
    db82:	f7ff bb3d 	b.w	d200 <isr_rx_conn_pkt_ctrl+0x90>
	else if (rej_ext_ind->error_code != 0x23) {
    db86:	2923      	cmp	r1, #35	; 0x23
    db88:	d019      	beq.n	dbbe <isr_rx_conn_pkt_ctrl+0xa4e>
		LL_ASSERT(_radio.conn_upd == conn);
    db8a:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    db8e:	42b3      	cmp	r3, r6
    db90:	d008      	beq.n	dba4 <isr_rx_conn_pkt_ctrl+0xa34>
    db92:	4a43      	ldr	r2, [pc, #268]	; (dca0 <isr_rx_conn_pkt_ctrl+0xb30>)
    db94:	4b43      	ldr	r3, [pc, #268]	; (dca4 <isr_rx_conn_pkt_ctrl+0xb34>)
    db96:	9201      	str	r2, [sp, #4]
    db98:	9200      	str	r2, [sp, #0]
    db9a:	681c      	ldr	r4, [r3, #0]
    db9c:	4b46      	ldr	r3, [pc, #280]	; (dcb8 <isr_rx_conn_pkt_ctrl+0xb48>)
			LL_ASSERT(_radio.conn_upd == conn);
    db9e:	4942      	ldr	r1, [pc, #264]	; (dca8 <isr_rx_conn_pkt_ctrl+0xb38>)
    dba0:	4846      	ldr	r0, [pc, #280]	; (dcbc <isr_rx_conn_pkt_ctrl+0xb4c>)
    dba2:	e42b      	b.n	d3fc <isr_rx_conn_pkt_ctrl+0x28c>
		_radio.conn_upd = NULL;
    dba4:	2600      	movs	r6, #0
		if (conn->role) {
    dba6:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    dba8:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    dbac:	bfb8      	it	lt
    dbae:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    dbb2:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    dbb6:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    dbba:	bfb8      	it	lt
    dbbc:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    dbbe:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    dbc2:	0717      	lsls	r7, r2, #28
    dbc4:	f57f abad 	bpl.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
	cp->status = rej_ext_ind->error_code;
    dbc8:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dbca:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    dbcc:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dbce:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    dbd0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    dbd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    dbd4:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    dbd6:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    dbd8:	237d      	movs	r3, #125	; 0x7d
    dbda:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    dbdc:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    dbde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dbe2:	fb93 f3f2 	sdiv	r3, r3, r2
    dbe6:	8223      	strh	r3, [r4, #16]
    dbe8:	f7ff bbc8 	b.w	d37c <isr_rx_conn_pkt_ctrl+0x20c>
		   _radio.conn_curr->llcp_length.req) {
    dbec:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    dbf0:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    dbf4:	4290      	cmp	r0, r2
    dbf6:	d01a      	beq.n	dc2e <isr_rx_conn_pkt_ctrl+0xabe>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    dbf8:	2914      	cmp	r1, #20
    dbfa:	f47f ab92 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		conn->llcp_length.ack = conn->llcp_length.req;
    dbfe:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    dc02:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    dc06:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    dc08:	f360 02c3 	bfi	r2, r0, #3, #1
    dc0c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    dc10:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    dc12:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    dc16:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dc18:	2215      	movs	r2, #21
    dc1a:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    dc1c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    dc1e:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    dc20:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    dc22:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    dc24:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    dc26:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    dc28:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    dc2a:	8263      	strh	r3, [r4, #18]
    dc2c:	e579      	b.n	d722 <isr_rx_conn_pkt_ctrl+0x5b2>
		switch (rej_ext_ind->reject_opcode) {
    dc2e:	2903      	cmp	r1, #3
    dc30:	f47f ab77 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
			_radio.conn_curr->pause_rx = 0;
    dc34:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    dc38:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    dc3c:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    dc40:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    dc42:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    dc46:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    dc4a:	230d      	movs	r3, #13
    dc4c:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    dc4e:	7b63      	ldrb	r3, [r4, #13]
    dc50:	7323      	strb	r3, [r4, #12]
    dc52:	e566      	b.n	d722 <isr_rx_conn_pkt_ctrl+0x5b2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    dc54:	7a41      	ldrb	r1, [r0, #9]
    dc56:	2012      	movs	r0, #18
    dc58:	f7fb fde2 	bl	9820 <pdu_len_cmp>
    dc5c:	2800      	cmp	r0, #0
    dc5e:	f000 8380 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		nack = ping_resp_send(_radio.conn_curr);
    dc62:	4814      	ldr	r0, [pc, #80]	; (dcb4 <isr_rx_conn_pkt_ctrl+0xb44>)
    dc64:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc68:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dc6c:	f7f9 f81d 	bl	6caa <mem_acquire>
	if (!node_tx) {
    dc70:	4601      	mov	r1, r0
    dc72:	2800      	cmp	r0, #0
    dc74:	f43f ac91 	beq.w	d59a <isr_rx_conn_pkt_ctrl+0x42a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc78:	7903      	ldrb	r3, [r0, #4]
    dc7a:	f043 0303 	orr.w	r3, r3, #3
    dc7e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    dc80:	2301      	movs	r3, #1
    dc82:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    dc84:	2313      	movs	r3, #19
    dc86:	e4c3      	b.n	d610 <isr_rx_conn_pkt_ctrl+0x4a0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    dc88:	7a41      	ldrb	r1, [r0, #9]
    dc8a:	2013      	movs	r0, #19
    dc8c:	f7fb fdc8 	bl	9820 <pdu_len_cmp>
    dc90:	2800      	cmp	r0, #0
    dc92:	f000 8366 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		_radio.conn_curr->procedure_expire = 0;
    dc96:	4b07      	ldr	r3, [pc, #28]	; (dcb4 <isr_rx_conn_pkt_ctrl+0xb44>)
    dc98:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    dc9c:	e464      	b.n	d568 <isr_rx_conn_pkt_ctrl+0x3f8>
    dc9e:	bf00      	nop
    dca0:	00014891 	.word	0x00014891
    dca4:	20003aa4 	.word	0x20003aa4
    dca8:	00015639 	.word	0x00015639
    dcac:	00016aca 	.word	0x00016aca
    dcb0:	00015597 	.word	0x00015597
    dcb4:	200008f0 	.word	0x200008f0
    dcb8:	00016a8f 	.word	0x00016a8f
    dcbc:	00017372 	.word	0x00017372
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    dcc0:	7a41      	ldrb	r1, [r0, #9]
    dcc2:	2007      	movs	r0, #7
    dcc4:	f7fb fdac 	bl	9820 <pdu_len_cmp>
    dcc8:	2800      	cmp	r0, #0
    dcca:	f000 834a 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dcce:	4ad2      	ldr	r2, [pc, #840]	; (e018 <isr_rx_conn_pkt_ctrl+0xea8>)
    dcd0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    dcd4:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    dcd8:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dcdc:	42b1      	cmp	r1, r6
    dcde:	4611      	mov	r1, r2
    dce0:	d06b      	beq.n	ddba <isr_rx_conn_pkt_ctrl+0xc4a>
			conn->llcp_conn_param.disabled = 1;
    dce2:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    dce6:	f040 0010 	orr.w	r0, r0, #16
    dcea:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    dcee:	f993 001d 	ldrsb.w	r0, [r3, #29]
    dcf2:	2800      	cmp	r0, #0
    dcf4:	db39      	blt.n	dd6a <isr_rx_conn_pkt_ctrl+0xbfa>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dcf6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    dcfa:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    dcfe:	4294      	cmp	r4, r2
    dd00:	d007      	beq.n	dd12 <isr_rx_conn_pkt_ctrl+0xba2>
    dd02:	4ac6      	ldr	r2, [pc, #792]	; (e01c <isr_rx_conn_pkt_ctrl+0xeac>)
    dd04:	4bc6      	ldr	r3, [pc, #792]	; (e020 <isr_rx_conn_pkt_ctrl+0xeb0>)
    dd06:	9201      	str	r2, [sp, #4]
    dd08:	9200      	str	r2, [sp, #0]
    dd0a:	681c      	ldr	r4, [r3, #0]
    dd0c:	4bc5      	ldr	r3, [pc, #788]	; (e024 <isr_rx_conn_pkt_ctrl+0xeb4>)
    dd0e:	f7ff ba77 	b.w	d200 <isr_rx_conn_pkt_ctrl+0x90>
				conn->llcp_conn_param.state =
    dd12:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    dd16:	2105      	movs	r1, #5
    dd18:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    dd1c:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    dd20:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    dd24:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    dd28:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    dd2c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    dd30:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dd34:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    dd38:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    dd3c:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    dd3e:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dd42:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    dd46:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    dd4a:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    dd4c:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    dd50:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    dd52:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    dd56:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    dd5a:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    dd5e:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    dd62:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    dd66:	f7ff bacc 	b.w	d302 <isr_rx_conn_pkt_ctrl+0x192>
			LL_ASSERT(_radio.conn_upd == conn);
    dd6a:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    dd6e:	4293      	cmp	r3, r2
    dd70:	d006      	beq.n	dd80 <isr_rx_conn_pkt_ctrl+0xc10>
    dd72:	4aaa      	ldr	r2, [pc, #680]	; (e01c <isr_rx_conn_pkt_ctrl+0xeac>)
    dd74:	4baa      	ldr	r3, [pc, #680]	; (e020 <isr_rx_conn_pkt_ctrl+0xeb0>)
    dd76:	9201      	str	r2, [sp, #4]
    dd78:	9200      	str	r2, [sp, #0]
    dd7a:	681c      	ldr	r4, [r3, #0]
    dd7c:	4ba9      	ldr	r3, [pc, #676]	; (e024 <isr_rx_conn_pkt_ctrl+0xeb4>)
    dd7e:	e70e      	b.n	db9e <isr_rx_conn_pkt_ctrl+0xa2e>
			_radio.conn_upd = NULL;
    dd80:	2200      	movs	r2, #0
    dd82:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    dd86:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    dd8a:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    dd8e:	0716      	lsls	r6, r2, #28
    dd90:	f57f aac7 	bpl.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dd94:	2208      	movs	r2, #8
    dd96:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    dd98:	221a      	movs	r2, #26
    dd9a:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    dd9c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    dd9e:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    dda0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    dda2:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    dda4:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    dda6:	237d      	movs	r3, #125	; 0x7d
    dda8:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    ddaa:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    ddac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ddb0:	fb93 f3f2 	sdiv	r3, r3, r2
    ddb4:	8223      	strh	r3, [r4, #16]
    ddb6:	f7ff bb6b 	b.w	d490 <isr_rx_conn_pkt_ctrl+0x320>
		} else if (_radio.conn_curr->llcp_length.req !=
    ddba:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    ddbe:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    ddc2:	4290      	cmp	r0, r2
    ddc4:	d009      	beq.n	ddda <isr_rx_conn_pkt_ctrl+0xc6a>
			_radio.conn_curr->llcp_length.ack =
    ddc6:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    ddca:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ddce:	f36f 02c3 	bfc	r2, #3, #1
    ddd2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    ddd6:	f7ff bb5b 	b.w	d490 <isr_rx_conn_pkt_ctrl+0x320>
		} else if (_radio.conn_curr->llcp_phy.req !=
    ddda:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    ddde:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    dde2:	4290      	cmp	r0, r2
    dde4:	d01b      	beq.n	de1e <isr_rx_conn_pkt_ctrl+0xcae>
			_radio.conn_curr->llcp_phy.ack =
    dde6:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    ddea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    ddee:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    ddf2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    ddf6:	f362 0002 	bfi	r0, r2, #0, #3
    ddfa:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    ddfe:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    de02:	0780      	lsls	r0, r0, #30
    de04:	d50f      	bpl.n	de26 <isr_rx_conn_pkt_ctrl+0xcb6>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    de06:	200c      	movs	r0, #12
    de08:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    de0a:	2000      	movs	r0, #0
    de0c:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    de0e:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    de10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    de14:	f3c3 0302 	ubfx	r3, r3, #0, #3
    de18:	7363      	strb	r3, [r4, #13]
    de1a:	f7ff bb39 	b.w	d490 <isr_rx_conn_pkt_ctrl+0x320>
			switch (llctrl->unknown_rsp.type) {
    de1e:	7b23      	ldrb	r3, [r4, #12]
    de20:	2b12      	cmp	r3, #18
    de22:	f47f ab35 	bne.w	d490 <isr_rx_conn_pkt_ctrl+0x320>
		_radio.conn_curr->procedure_expire = 0;
    de26:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    de2a:	f7ff bb9d 	b.w	d568 <isr_rx_conn_pkt_ctrl+0x3f8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    de2e:	7a41      	ldrb	r1, [r0, #9]
    de30:	2014      	movs	r0, #20
    de32:	f7fb fcf5 	bl	9820 <pdu_len_cmp>
    de36:	2800      	cmp	r0, #0
    de38:	f000 8293 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    de3c:	2f14      	cmp	r7, #20
    de3e:	d128      	bne.n	de92 <isr_rx_conn_pkt_ctrl+0xd22>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    de40:	4879      	ldr	r0, [pc, #484]	; (e028 <isr_rx_conn_pkt_ctrl+0xeb8>)
    de42:	f7f8 ff32 	bl	6caa <mem_acquire>
		if (!node_tx) {
    de46:	4606      	mov	r6, r0
    de48:	2800      	cmp	r0, #0
    de4a:	f43f aba6 	beq.w	d59a <isr_rx_conn_pkt_ctrl+0x42a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    de4e:	4f72      	ldr	r7, [pc, #456]	; (e018 <isr_rx_conn_pkt_ctrl+0xea8>)
    de50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    de54:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    de58:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    de5c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    de5e:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    de60:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    de62:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    de66:	45e0      	cmp	r8, ip
    de68:	46b9      	mov	r9, r7
    de6a:	f894 800b 	ldrb.w	r8, [r4, #11]
    de6e:	d112      	bne.n	de96 <isr_rx_conn_pkt_ctrl+0xd26>
	      _radio.conn_curr->llcp_length.ack) &&
    de70:	f1b8 0f14 	cmp.w	r8, #20
    de74:	d01b      	beq.n	deae <isr_rx_conn_pkt_ctrl+0xd3e>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    de76:	f1b8 0f15 	cmp.w	r8, #21
    de7a:	f000 8296 	beq.w	e3aa <isr_rx_conn_pkt_ctrl+0x123a>
    de7e:	4a67      	ldr	r2, [pc, #412]	; (e01c <isr_rx_conn_pkt_ctrl+0xeac>)
    de80:	4b67      	ldr	r3, [pc, #412]	; (e020 <isr_rx_conn_pkt_ctrl+0xeb0>)
    de82:	9201      	str	r2, [sp, #4]
    de84:	9200      	str	r2, [sp, #0]
    de86:	681c      	ldr	r4, [r3, #0]
    de88:	4968      	ldr	r1, [pc, #416]	; (e02c <isr_rx_conn_pkt_ctrl+0xebc>)
    de8a:	4b69      	ldr	r3, [pc, #420]	; (e030 <isr_rx_conn_pkt_ctrl+0xec0>)
    de8c:	4869      	ldr	r0, [pc, #420]	; (e034 <isr_rx_conn_pkt_ctrl+0xec4>)
    de8e:	f7ff bab5 	b.w	d3fc <isr_rx_conn_pkt_ctrl+0x28c>
	struct radio_pdu_node_tx *node_tx = NULL;
    de92:	2600      	movs	r6, #0
    de94:	e7db      	b.n	de4e <isr_rx_conn_pkt_ctrl+0xcde>
		 LLCP_LENGTH_STATE_REQ) ||
    de96:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    de9a:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    de9e:	2f01      	cmp	r7, #1
    dea0:	d9e6      	bls.n	de70 <isr_rx_conn_pkt_ctrl+0xd00>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    dea2:	2f02      	cmp	r7, #2
    dea4:	d1e7      	bne.n	de76 <isr_rx_conn_pkt_ctrl+0xd06>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    dea6:	f1a8 0714 	sub.w	r7, r8, #20
    deaa:	2f01      	cmp	r7, #1
    deac:	d8e3      	bhi.n	de76 <isr_rx_conn_pkt_ctrl+0xd06>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    deae:	89a7      	ldrh	r7, [r4, #12]
    deb0:	2f1a      	cmp	r7, #26
    deb2:	d935      	bls.n	df20 <isr_rx_conn_pkt_ctrl+0xdb0>
			eff_tx_octets = min(lr->max_rx_octets,
    deb4:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    deb8:	4547      	cmp	r7, r8
    deba:	bf28      	it	cs
    debc:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    debe:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    dec2:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    dec6:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    deca:	bf34      	ite	cc
    decc:	4693      	movcc	fp, r2
    dece:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    ded2:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    ded6:	d325      	bcc.n	df24 <isr_rx_conn_pkt_ctrl+0xdb4>
			eff_tx_time = min(lr->max_rx_time,
    ded8:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    dedc:	45d0      	cmp	r8, sl
    dede:	bf28      	it	cs
    dee0:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    dee2:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    dee6:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    deea:	bf34      	ite	cc
    deec:	4682      	movcc	sl, r0
    deee:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    def2:	455a      	cmp	r2, fp
    def4:	d051      	beq.n	df9a <isr_rx_conn_pkt_ctrl+0xe2a>
			free_count_rx = packet_rx_acquired_count_get() +
    def6:	f7fb fcdb 	bl	98b0 <packet_rx_acquired_count_get>
    defa:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    defc:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    df00:	f7f8 ff02 	bl	6d08 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    df04:	4420      	add	r0, r4
    df06:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    df08:	28ff      	cmp	r0, #255	; 0xff
    df0a:	d90d      	bls.n	df28 <isr_rx_conn_pkt_ctrl+0xdb8>
    df0c:	4a43      	ldr	r2, [pc, #268]	; (e01c <isr_rx_conn_pkt_ctrl+0xeac>)
    df0e:	4b44      	ldr	r3, [pc, #272]	; (e020 <isr_rx_conn_pkt_ctrl+0xeb0>)
    df10:	9201      	str	r2, [sp, #4]
    df12:	9200      	str	r2, [sp, #0]
    df14:	681c      	ldr	r4, [r3, #0]
    df16:	4945      	ldr	r1, [pc, #276]	; (e02c <isr_rx_conn_pkt_ctrl+0xebc>)
    df18:	4b45      	ldr	r3, [pc, #276]	; (e030 <isr_rx_conn_pkt_ctrl+0xec0>)
    df1a:	4847      	ldr	r0, [pc, #284]	; (e038 <isr_rx_conn_pkt_ctrl+0xec8>)
    df1c:	f7ff ba6e 	b.w	d3fc <isr_rx_conn_pkt_ctrl+0x28c>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    df20:	460f      	mov	r7, r1
    df22:	e7cc      	b.n	debe <isr_rx_conn_pkt_ctrl+0xd4e>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    df24:	46f0      	mov	r8, lr
    df26:	e7dc      	b.n	dee2 <isr_rx_conn_pkt_ctrl+0xd72>
			if (_radio.packet_rx_data_count == free_count_rx) {
    df28:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    df2c:	4283      	cmp	r3, r0
    df2e:	f040 8233 	bne.w	e398 <isr_rx_conn_pkt_ctrl+0x1228>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    df32:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    df36:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    df3a:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    df3c:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    df3e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    df42:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    df46:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    df4a:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    df4e:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    df52:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    df56:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    df5a:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    df5e:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    df62:	2303      	movs	r3, #3
    df64:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    df68:	2e00      	cmp	r6, #0
    df6a:	f43f a9da 	beq.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df6e:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    df70:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    df74:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df78:	f043 0303 	orr.w	r3, r3, #3
    df7c:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    df7e:	2309      	movs	r3, #9
    df80:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    df82:	2315      	movs	r3, #21
    df84:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    df86:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    df88:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    df8c:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    df90:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    df92:	f7fd fcb9 	bl	b908 <ctrl_tx_enqueue>
    df96:	f7ff b9c4 	b.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
			_radio.conn_curr->pause_tx = 0;
    df9a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    df9e:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    dfa2:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    dfa6:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    dfaa:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    dfac:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    dfb0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    dfb4:	d103      	bne.n	dfbe <isr_rx_conn_pkt_ctrl+0xe4e>
    dfb6:	45c6      	cmp	lr, r8
    dfb8:	d101      	bne.n	dfbe <isr_rx_conn_pkt_ctrl+0xe4e>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    dfba:	4550      	cmp	r0, sl
    dfbc:	d0d4      	beq.n	df68 <isr_rx_conn_pkt_ctrl+0xdf8>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    dfbe:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    dfc0:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    dfc4:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    dfc8:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    dfca:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    dfce:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    dfd0:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    dfd4:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    dfd8:	702b      	strb	r3, [r5, #0]
    dfda:	e7c5      	b.n	df68 <isr_rx_conn_pkt_ctrl+0xdf8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    dfdc:	7a41      	ldrb	r1, [r0, #9]
    dfde:	2016      	movs	r0, #22
    dfe0:	f7fb fc1e 	bl	9820 <pdu_len_cmp>
    dfe4:	2800      	cmp	r0, #0
    dfe6:	f000 81bc 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		if (_radio.role == ROLE_MASTER) {
    dfea:	480b      	ldr	r0, [pc, #44]	; (e018 <isr_rx_conn_pkt_ctrl+0xea8>)
    dfec:	7cc3      	ldrb	r3, [r0, #19]
    dfee:	2b04      	cmp	r3, #4
    dff0:	d169      	bne.n	e0c6 <isr_rx_conn_pkt_ctrl+0xf56>
			if ((_radio.conn_curr->llcp_phy.ack !=
    dff2:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    dff6:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    dffa:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    dffe:	428b      	cmp	r3, r1
    e000:	d01c      	beq.n	e03c <isr_rx_conn_pkt_ctrl+0xecc>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    e002:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    e006:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    e00a:	3a01      	subs	r2, #1
    e00c:	2a02      	cmp	r2, #2
    e00e:	d815      	bhi.n	e03c <isr_rx_conn_pkt_ctrl+0xecc>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e010:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    e012:	2116      	movs	r1, #22
    e014:	f7ff bb9a 	b.w	d74c <isr_rx_conn_pkt_ctrl+0x5dc>
    e018:	200008f0 	.word	0x200008f0
    e01c:	00014891 	.word	0x00014891
    e020:	20003aa4 	.word	0x20003aa4
    e024:	00016aca 	.word	0x00016aca
    e028:	20000a4c 	.word	0x20000a4c
    e02c:	00015639 	.word	0x00015639
    e030:	00016ab1 	.word	0x00016ab1
    e034:	000173ab 	.word	0x000173ab
    e038:	00016f23 	.word	0x00016f23
			} else if (((_radio.conn_curr->llcp_req !=
    e03c:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    e040:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e044:	4295      	cmp	r5, r2
    e046:	d003      	beq.n	e050 <isr_rx_conn_pkt_ctrl+0xee0>
				     _radio.conn_curr->llcp_ack) &&
    e048:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    e04c:	2a03      	cmp	r2, #3
    e04e:	d105      	bne.n	e05c <isr_rx_conn_pkt_ctrl+0xeec>
				     LLCP_ENCRYPTION)) ||
    e050:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    e054:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    e058:	4295      	cmp	r5, r2
    e05a:	d001      	beq.n	e060 <isr_rx_conn_pkt_ctrl+0xef0>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e05c:	222a      	movs	r2, #42	; 0x2a
    e05e:	e7d8      	b.n	e012 <isr_rx_conn_pkt_ctrl+0xea2>
				_radio.conn_curr->llcp_phy.state =
    e060:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e064:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    e066:	f042 0203 	orr.w	r2, r2, #3
    e06a:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e06e:	d116      	bne.n	e09e <isr_rx_conn_pkt_ctrl+0xf2e>
					_radio.conn_curr->llcp_phy.ack--;
    e070:	3b01      	subs	r3, #1
    e072:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    e076:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    e07a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    e07e:	f36f 0341 	bfc	r3, #1, #1
    e082:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    e086:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e08a:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    e08e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    e092:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e096:	f362 1347 	bfi	r3, r2, #5, #3
    e09a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e09e:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e0a2:	7b62      	ldrb	r2, [r4, #13]
    e0a4:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e0a8:	400a      	ands	r2, r1
    e0aa:	f362 0384 	bfi	r3, r2, #2, #3
    e0ae:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e0b2:	7b22      	ldrb	r2, [r4, #12]
    e0b4:	b2db      	uxtb	r3, r3
    e0b6:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e0ba:	f362 1347 	bfi	r3, r2, #5, #3
    e0be:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    e0c2:	f7ff b92e 	b.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    e0c6:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e0ca:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e0ce:	f7f8 fdec 	bl	6caa <mem_acquire>
	if (!node_tx) {
    e0d2:	4601      	mov	r1, r0
    e0d4:	2800      	cmp	r0, #0
    e0d6:	f43f aa60 	beq.w	d59a <isr_rx_conn_pkt_ctrl+0x42a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e0da:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e0de:	2202      	movs	r2, #2
    e0e0:	f362 0301 	bfi	r3, r2, #0, #2
    e0e4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    e0e8:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e0ec:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e0f0:	4293      	cmp	r3, r2
    e0f2:	d11a      	bne.n	e12a <isr_rx_conn_pkt_ctrl+0xfba>
		conn->llcp_phy.ack--;
    e0f4:	3b01      	subs	r3, #1
    e0f6:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e0fa:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e0fe:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e102:	f36f 0341 	bfc	r3, #1, #1
    e106:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e10a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e10e:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e112:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e116:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e11a:	f362 1347 	bfi	r3, r2, #5, #3
    e11e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e122:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e126:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e12a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e12e:	7b62      	ldrb	r2, [r4, #13]
    e130:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e134:	4002      	ands	r2, r0
    e136:	f362 0384 	bfi	r3, r2, #2, #3
    e13a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e13e:	7b22      	ldrb	r2, [r4, #12]
    e140:	b2db      	uxtb	r3, r3
    e142:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e146:	f362 1347 	bfi	r3, r2, #5, #3
    e14a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e14e:	790b      	ldrb	r3, [r1, #4]
    e150:	f043 0303 	orr.w	r3, r3, #3
    e154:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e156:	2303      	movs	r3, #3
    e158:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e15a:	2317      	movs	r3, #23
    e15c:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e15e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e162:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e166:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e168:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e16c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e170:	724b      	strb	r3, [r1, #9]
    e172:	f7ff ba24 	b.w	d5be <isr_rx_conn_pkt_ctrl+0x44e>
		if (_radio.conn_curr->role ||
    e176:	4e92      	ldr	r6, [pc, #584]	; (e3c0 <isr_rx_conn_pkt_ctrl+0x1250>)
    e178:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e17c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e180:	2b00      	cmp	r3, #0
    e182:	f2c0 80ee 	blt.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e186:	7a41      	ldrb	r1, [r0, #9]
    e188:	2017      	movs	r0, #23
    e18a:	f7fb fb49 	bl	9820 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e18e:	2800      	cmp	r0, #0
    e190:	f000 80e7 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		if ((_radio.role == ROLE_MASTER) &&
    e194:	7cf3      	ldrb	r3, [r6, #19]
    e196:	2b04      	cmp	r3, #4
    e198:	f47f a8c3 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
    e19c:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e1a0:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e1a4:	429a      	cmp	r2, r3
    e1a6:	f43f a8bc 	beq.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		    (_radio.conn_curr->llcp_phy.state ==
    e1aa:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e1ae:	f003 0203 	and.w	r2, r3, #3
    e1b2:	2a02      	cmp	r2, #2
    e1b4:	f47f a8b5 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e1b8:	f043 0303 	orr.w	r3, r3, #3
    e1bc:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e1c0:	7b62      	ldrb	r2, [r4, #13]
    e1c2:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e1c6:	400a      	ands	r2, r1
    e1c8:	f362 0384 	bfi	r3, r2, #2, #3
    e1cc:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e1d0:	7b22      	ldrb	r2, [r4, #12]
    e1d2:	b2db      	uxtb	r3, r3
    e1d4:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e1d8:	f362 1347 	bfi	r3, r2, #5, #3
    e1dc:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e1e0:	f7ff b850 	b.w	d284 <isr_rx_conn_pkt_ctrl+0x114>
		if (!_radio.conn_curr->role ||
    e1e4:	4b76      	ldr	r3, [pc, #472]	; (e3c0 <isr_rx_conn_pkt_ctrl+0x1250>)
    e1e6:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e1ea:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	f280 80b7 	bge.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e1f4:	7a41      	ldrb	r1, [r0, #9]
    e1f6:	2018      	movs	r0, #24
    e1f8:	f7fb fb12 	bl	9820 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e1fc:	2800      	cmp	r0, #0
    e1fe:	f000 80b0 	beq.w	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e202:	7b27      	ldrb	r7, [r4, #12]
    e204:	7b62      	ldrb	r2, [r4, #13]
    e206:	ea47 0002 	orr.w	r0, r7, r2
    e20a:	f010 0007 	ands.w	r0, r0, #7
    e20e:	d125      	bne.n	e25c <isr_rx_conn_pkt_ctrl+0x10ec>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e210:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e214:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e218:	4293      	cmp	r3, r2
    e21a:	f43f a882 	beq.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e21e:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e222:	f003 0303 	and.w	r3, r3, #3
    e226:	2b02      	cmp	r3, #2
    e228:	f47f a87b 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (!conn->llcp_phy.cmd) {
    e22c:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e230:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e234:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e236:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e23a:	f57f a872 	bpl.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e23e:	230c      	movs	r3, #12
		upd->status = 0;
    e240:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e242:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e244:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e248:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e24c:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e24e:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e252:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e256:	7363      	strb	r3, [r4, #13]
    e258:	f7ff ba63 	b.w	d722 <isr_rx_conn_pkt_ctrl+0x5b2>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e25c:	89e0      	ldrh	r0, [r4, #14]
    e25e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e260:	1ac3      	subs	r3, r0, r3
    e262:	041b      	lsls	r3, r3, #16
    e264:	f100 80a6 	bmi.w	e3b4 <isr_rx_conn_pkt_ctrl+0x1244>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e268:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e26c:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e270:	428b      	cmp	r3, r1
    e272:	d007      	beq.n	e284 <isr_rx_conn_pkt_ctrl+0x1114>
    e274:	4a53      	ldr	r2, [pc, #332]	; (e3c4 <isr_rx_conn_pkt_ctrl+0x1254>)
    e276:	4b54      	ldr	r3, [pc, #336]	; (e3c8 <isr_rx_conn_pkt_ctrl+0x1258>)
    e278:	9201      	str	r2, [sp, #4]
    e27a:	9200      	str	r2, [sp, #0]
    e27c:	681c      	ldr	r4, [r3, #0]
    e27e:	4b53      	ldr	r3, [pc, #332]	; (e3cc <isr_rx_conn_pkt_ctrl+0x125c>)
    e280:	f7fe bfbe 	b.w	d200 <isr_rx_conn_pkt_ctrl+0x90>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e284:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e288:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e28c:	42a3      	cmp	r3, r4
    e28e:	d014      	beq.n	e2ba <isr_rx_conn_pkt_ctrl+0x114a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e290:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e294:	f003 0303 	and.w	r3, r3, #3
    e298:	2b02      	cmp	r3, #2
    e29a:	d10e      	bne.n	e2ba <isr_rx_conn_pkt_ctrl+0x114a>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e29c:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e2a0:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e2a4:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e2a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e2ac:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e2b0:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e2b2:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e2b6:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e2ba:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e2be:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e2c2:	f002 0207 	and.w	r2, r2, #7
    e2c6:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e2ca:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e2ce:	f36f 0300 	bfc	r3, #0, #1
    e2d2:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e2d6:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e2d8:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e2da:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e2de:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e2e2:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e2e6:	2b00      	cmp	r3, #0
    e2e8:	f43f a81b 	beq.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e2ec:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e2f0:	f362 0302 	bfi	r3, r2, #0, #3
    e2f4:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e2f8:	f7ff b813 	b.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		if (_radio.conn_curr->role ||
    e2fc:	4e30      	ldr	r6, [pc, #192]	; (e3c0 <isr_rx_conn_pkt_ctrl+0x1250>)
    e2fe:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e302:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e306:	2b00      	cmp	r3, #0
    e308:	db2b      	blt.n	e362 <isr_rx_conn_pkt_ctrl+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e30a:	7a41      	ldrb	r1, [r0, #9]
    e30c:	2019      	movs	r0, #25
    e30e:	f7fb fa87 	bl	9820 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e312:	b330      	cbz	r0, e362 <isr_rx_conn_pkt_ctrl+0x11f2>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e314:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e318:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e31c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e320:	7b22      	ldrb	r2, [r4, #12]
    e322:	f003 0307 	and.w	r3, r3, #7
    e326:	4213      	tst	r3, r2
    e328:	f43e affb 	beq.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
			if (conn->llcp_req != conn->llcp_ack) {
    e32c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e330:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e334:	429a      	cmp	r2, r3
    e336:	f47e aff4 	bne.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
			memcpy(&conn->llcp.chan_map.chm[0],
    e33a:	2205      	movs	r2, #5
    e33c:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e340:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e344:	f7f3 fc6c 	bl	1c20 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e348:	2301      	movs	r3, #1
    e34a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e34e:	2302      	movs	r3, #2
    e350:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e354:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e358:	3b01      	subs	r3, #1
    e35a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e35e:	f7fe bfe0 	b.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
		nack = unknown_rsp_send(_radio.conn_curr,
    e362:	4817      	ldr	r0, [pc, #92]	; (e3c0 <isr_rx_conn_pkt_ctrl+0x1250>)
    e364:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e368:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e36c:	f7f8 fc9d 	bl	6caa <mem_acquire>
	if (!node_tx) {
    e370:	4601      	mov	r1, r0
    e372:	2800      	cmp	r0, #0
    e374:	f43f a911 	beq.w	d59a <isr_rx_conn_pkt_ctrl+0x42a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e378:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    e37a:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e37c:	f043 0303 	orr.w	r3, r3, #3
    e380:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e382:	2302      	movs	r3, #2
    e384:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e386:	2307      	movs	r3, #7
    e388:	71c3      	strb	r3, [r0, #7]
    e38a:	f7ff b942 	b.w	d612 <isr_rx_conn_pkt_ctrl+0x4a2>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e38e:	2328      	movs	r3, #40	; 0x28
    e390:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    e394:	f7fe bfc5 	b.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
	if (node_tx) {
    e398:	2e00      	cmp	r6, #0
    e39a:	f43f a8fe 	beq.w	d59a <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e39e:	490c      	ldr	r1, [pc, #48]	; (e3d0 <isr_rx_conn_pkt_ctrl+0x1260>)
    e3a0:	4630      	mov	r0, r6
    e3a2:	f7f8 fc9c 	bl	6cde <mem_release>
    e3a6:	f7ff b8f8 	b.w	d59a <isr_rx_conn_pkt_ctrl+0x42a>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e3aa:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e3ac:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e3ae:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e3b0:	4693      	mov	fp, r2
    e3b2:	e5d9      	b.n	df68 <isr_rx_conn_pkt_ctrl+0xdf8>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e3b4:	2328      	movs	r3, #40	; 0x28
    e3b6:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    e3ba:	f7fe bfb2 	b.w	d322 <isr_rx_conn_pkt_ctrl+0x1b2>
    e3be:	bf00      	nop
    e3c0:	200008f0 	.word	0x200008f0
    e3c4:	00014891 	.word	0x00014891
    e3c8:	20003aa4 	.word	0x20003aa4
    e3cc:	00016e34 	.word	0x00016e34
    e3d0:	20000a4c 	.word	0x20000a4c
    e3d4:	00000000 	.word	0x00000000

0000e3d8 <isr>:
{
    e3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3dc:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    e3de:	f003 feef 	bl	121c0 <radio_is_done>
    e3e2:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    e3e4:	b366      	cbz	r6, e440 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    e3e6:	f003 ff0b 	bl	12200 <radio_crc_is_valid>
    e3ea:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    e3ec:	f003 ff8c 	bl	12308 <radio_filter_has_match>
    e3f0:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    e3f4:	f003 ff92 	bl	1231c <radio_filter_match_get>
    e3f8:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    e3fc:	f004 f976 	bl	126ec <radio_ar_has_match>
    e400:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    e404:	f004 f960 	bl	126c8 <radio_ar_match_get>
    e408:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    e40c:	f003 ff46 	bl	1229c <radio_rssi_is_ready>
    e410:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    e412:	4cb6      	ldr	r4, [pc, #728]	; (e6ec <isr+0x314>)
	radio_status_reset();
    e414:	f003 febe 	bl	12194 <radio_status_reset>
	radio_tmr_status_reset();
    e418:	f003 ff92 	bl	12340 <radio_tmr_status_reset>
	radio_filter_status_reset();
    e41c:	f003 ff6c 	bl	122f8 <radio_filter_status_reset>
	radio_ar_status_reset();
    e420:	f004 f958 	bl	126d4 <radio_ar_status_reset>
	radio_rssi_status_reset();
    e424:	f003 ff32 	bl	1228c <radio_rssi_status_reset>
	switch (_radio.state) {
    e428:	7d23      	ldrb	r3, [r4, #20]
    e42a:	2b05      	cmp	r3, #5
    e42c:	f201 848d 	bhi.w	fd4a <isr+0x1972>
    e430:	e8df f013 	tbh	[pc, r3, lsl #1]
    e434:	00cf007d 	.word	0x00cf007d
    e438:	0a32000e 	.word	0x0a32000e
    e43c:	0a320a32 	.word	0x0a320a32
		devmatch_id = irkmatch_id = 0xFF;
    e440:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e444:	4635      	mov	r5, r6
    e446:	46b2      	mov	sl, r6
    e448:	46b1      	mov	r9, r6
    e44a:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e44c:	46d8      	mov	r8, fp
    e44e:	e7e0      	b.n	e412 <isr+0x3a>
	_radio.state = STATE_RX;
    e450:	2301      	movs	r3, #1
    e452:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    e454:	f004 f876 	bl	12544 <radio_tmr_tifs_base_get>
    e458:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e45a:	2096      	movs	r0, #150	; 0x96
    e45c:	f003 ff7e 	bl	1235c <radio_tmr_tifs_set>
	switch (_radio.role) {
    e460:	7ce3      	ldrb	r3, [r4, #19]
    e462:	3b01      	subs	r3, #1
    e464:	2b03      	cmp	r3, #3
    e466:	f200 80ab 	bhi.w	e5c0 <isr+0x1e8>
    e46a:	e8df f003 	tbb	[pc, r3]
    e46e:	3302      	.short	0x3302
    e470:	6363      	.short	0x6363
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e472:	2300      	movs	r3, #0
    e474:	461a      	mov	r2, r3
    e476:	4619      	mov	r1, r3
    e478:	4618      	mov	r0, r3
    e47a:	f003 fedf 	bl	1223c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e47e:	f003 fecd 	bl	1221c <radio_pkt_scratch_get>
    e482:	f003 fe4f 	bl	12124 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e486:	f003 fe91 	bl	121ac <radio_is_ready>
    e48a:	b140      	cbz	r0, e49e <isr+0xc6>
		LL_ASSERT(!radio_is_ready());
    e48c:	4a98      	ldr	r2, [pc, #608]	; (e6f0 <isr+0x318>)
    e48e:	4b99      	ldr	r3, [pc, #612]	; (e6f4 <isr+0x31c>)
    e490:	9201      	str	r2, [sp, #4]
    e492:	9200      	str	r2, [sp, #0]
    e494:	681c      	ldr	r4, [r3, #0]
    e496:	4b98      	ldr	r3, [pc, #608]	; (e6f8 <isr+0x320>)
	LL_ASSERT(!radio_is_ready());
    e498:	4998      	ldr	r1, [pc, #608]	; (e6fc <isr+0x324>)
    e49a:	4899      	ldr	r0, [pc, #612]	; (e700 <isr+0x328>)
    e49c:	e34f      	b.n	eb3e <isr+0x766>
		if (ctrl_rl_enabled()) {
    e49e:	f003 f985 	bl	117ac <ctrl_rl_enabled>
    e4a2:	b138      	cbz	r0, e4b4 <isr+0xdc>
			u8_t count, *irks = ctrl_irks_get(&count);
    e4a4:	a810      	add	r0, sp, #64	; 0x40
    e4a6:	f002 fed1 	bl	1124c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e4aa:	4601      	mov	r1, r0
    e4ac:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e4b0:	f004 f8d8 	bl	12664 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e4b4:	2100      	movs	r1, #0
    e4b6:	4608      	mov	r0, r1
    e4b8:	f003 fe49 	bl	1214e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e4bc:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e4be:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e4c0:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e4c2:	4608      	mov	r0, r1
    e4c4:	f003 fe3f 	bl	12146 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e4c8:	1a28      	subs	r0, r5, r0
    e4ca:	f003 ffd1 	bl	12470 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e4ce:	f004 f821 	bl	12514 <radio_tmr_end_capture>
    e4d2:	e02c      	b.n	e52e <isr+0x156>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e4d4:	2300      	movs	r3, #0
    e4d6:	461a      	mov	r2, r3
    e4d8:	4619      	mov	r1, r3
    e4da:	4618      	mov	r0, r3
    e4dc:	f003 feae 	bl	1223c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e4e0:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e4e4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    e4e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e4ec:	3008      	adds	r0, #8
    e4ee:	f003 fe19 	bl	12124 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e4f2:	f003 fe5b 	bl	121ac <radio_is_ready>
    e4f6:	2800      	cmp	r0, #0
    e4f8:	d1c8      	bne.n	e48c <isr+0xb4>
		if (ctrl_rl_enabled()) {
    e4fa:	f003 f957 	bl	117ac <ctrl_rl_enabled>
    e4fe:	b138      	cbz	r0, e510 <isr+0x138>
			u8_t count, *irks = ctrl_irks_get(&count);
    e500:	a810      	add	r0, sp, #64	; 0x40
    e502:	f002 fea3 	bl	1124c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e506:	4601      	mov	r1, r0
    e508:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e50c:	f004 f8aa 	bl	12664 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e510:	2100      	movs	r1, #0
    e512:	4608      	mov	r0, r1
    e514:	f003 fe1b 	bl	1214e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e518:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e51a:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e51c:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e51e:	4608      	mov	r0, r1
    e520:	f003 fe11 	bl	12146 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e524:	1a28      	subs	r0, r5, r0
    e526:	f003 ffa3 	bl	12470 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e52a:	f003 fe9f 	bl	1226c <radio_rssi_measure>
}
    e52e:	b013      	add	sp, #76	; 0x4c
    e530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e534:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    e538:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e53c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e540:	2100      	movs	r1, #0
    e542:	09d3      	lsrs	r3, r2, #7
    e544:	f000 0007 	and.w	r0, r0, #7
    e548:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e54c:	f003 fe76 	bl	1223c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e550:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e554:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    e558:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e55c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e560:	3108      	adds	r1, #8
    e562:	f7fb fd25 	bl	9fb0 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e566:	f003 fe21 	bl	121ac <radio_is_ready>
    e56a:	2800      	cmp	r0, #0
    e56c:	d18e      	bne.n	e48c <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e56e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e572:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e576:	2101      	movs	r1, #1
    e578:	f000 0007 	and.w	r0, r0, #7
    e57c:	f003 fde7 	bl	1214e <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e580:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    e584:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e588:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    e58c:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    e58e:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e590:	4405      	add	r5, r0
	switch (phy) {
    e592:	d013      	beq.n	e5bc <isr+0x1e4>
		return 40;
    e594:	2b04      	cmp	r3, #4
    e596:	bf0c      	ite	eq
    e598:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e59c:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e59e:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e5a0:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e5a4:	09c1      	lsrs	r1, r0, #7
    e5a6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e5aa:	f003 fdcc 	bl	12146 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e5ae:	1a28      	subs	r0, r5, r0
    e5b0:	f003 ff5e 	bl	12470 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e5b4:	2001      	movs	r0, #1
    e5b6:	f7fc fb47 	bl	ac48 <packet_tx_enqueue>
    e5ba:	e7b8      	b.n	e52e <isr+0x156>
		return 24;
    e5bc:	2018      	movs	r0, #24
    e5be:	e7ee      	b.n	e59e <isr+0x1c6>
		LL_ASSERT(0);
    e5c0:	4a4b      	ldr	r2, [pc, #300]	; (e6f0 <isr+0x318>)
    e5c2:	4b4c      	ldr	r3, [pc, #304]	; (e6f4 <isr+0x31c>)
    e5c4:	9201      	str	r2, [sp, #4]
    e5c6:	9200      	str	r2, [sp, #0]
    e5c8:	681c      	ldr	r4, [r3, #0]
    e5ca:	4b4b      	ldr	r3, [pc, #300]	; (e6f8 <isr+0x320>)
		LL_ASSERT(0);
    e5cc:	494b      	ldr	r1, [pc, #300]	; (e6fc <isr+0x324>)
    e5ce:	484d      	ldr	r0, [pc, #308]	; (e704 <isr+0x32c>)
    e5d0:	e2b5      	b.n	eb3e <isr+0x766>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e5d2:	b926      	cbnz	r6, e5de <isr+0x206>
		_radio.state = STATE_CLOSE;
    e5d4:	2303      	movs	r3, #3
    e5d6:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e5d8:	f003 fdca 	bl	12170 <radio_disable>
    e5dc:	e7a7      	b.n	e52e <isr+0x156>
	switch (_radio.role) {
    e5de:	7ce3      	ldrb	r3, [r4, #19]
    e5e0:	3b01      	subs	r3, #1
    e5e2:	2b03      	cmp	r3, #3
    e5e4:	f201 8150 	bhi.w	f888 <isr+0x14b0>
    e5e8:	e8df f013 	tbh	[pc, r3, lsl #1]
    e5ec:	02b00004 	.word	0x02b00004
    e5f0:	05eb05eb 	.word	0x05eb05eb
		if (crc_ok) {
    e5f4:	2f00      	cmp	r7, #0
    e5f6:	d0ed      	beq.n	e5d4 <isr+0x1fc>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e5f8:	f1ba 0f00 	cmp.w	sl, #0
    e5fc:	d039      	beq.n	e672 <isr+0x29a>
    e5fe:	4658      	mov	r0, fp
    e600:	f002 fe84 	bl	1130c <ctrl_rl_irk_idx>
    e604:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e608:	f003 fe08 	bl	1221c <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e60c:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    e610:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e612:	232b      	movs	r3, #43	; 0x2b
    e614:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e616:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e618:	fb11 3302 	smlabb	r3, r1, r2, r3
    e61c:	930a      	str	r3, [sp, #40]	; 0x28
    e61e:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e620:	f000 030f 	and.w	r3, r0, #15
    e624:	2b03      	cmp	r3, #3
    e626:	d10a      	bne.n	e63e <isr+0x266>
    e628:	7873      	ldrb	r3, [r6, #1]
    e62a:	2b0c      	cmp	r3, #12
    e62c:	d107      	bne.n	e63e <isr+0x266>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e62e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e632:	065f      	lsls	r7, r3, #25
    e634:	d51f      	bpl.n	e676 <isr+0x29e>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e636:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e63a:	0658      	lsls	r0, r3, #25
    e63c:	d44b      	bmi.n	e6d6 <isr+0x2fe>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e63e:	7830      	ldrb	r0, [r6, #0]
    e640:	f000 030f 	and.w	r3, r0, #15
    e644:	2b05      	cmp	r3, #5
    e646:	d1c5      	bne.n	e5d4 <isr+0x1fc>
    e648:	7873      	ldrb	r3, [r6, #1]
    e64a:	2b22      	cmp	r3, #34	; 0x22
    e64c:	d1c2      	bne.n	e5d4 <isr+0x1fc>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e650:	5ce3      	ldrb	r3, [r4, r3]
    e652:	f003 030f 	and.w	r3, r3, #15
    e656:	2b01      	cmp	r3, #1
    e658:	f040 8152 	bne.w	e900 <isr+0x528>
					    ci->connect_ind.init_addr,
    e65c:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e65e:	aa10      	add	r2, sp, #64	; 0x40
    e660:	4639      	mov	r1, r7
    e662:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e666:	f003 f845 	bl	116f4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e66a:	2800      	cmp	r0, #0
    e66c:	d14e      	bne.n	e70c <isr+0x334>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e66e:	2000      	movs	r0, #0
    e670:	e05c      	b.n	e72c <isr+0x354>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e672:	20ff      	movs	r0, #255	; 0xff
    e674:	e7c6      	b.n	e604 <isr+0x22c>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e676:	aa10      	add	r2, sp, #64	; 0x40
    e678:	1cb1      	adds	r1, r6, #2
    e67a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e67e:	f003 f839 	bl	116f4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e682:	2800      	cmp	r0, #0
    e684:	d0d7      	beq.n	e636 <isr+0x25e>
	return (adv->tx_addr == sr->rx_addr) &&
    e686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e688:	7832      	ldrb	r2, [r6, #0]
    e68a:	5ce3      	ldrb	r3, [r4, r3]
    e68c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e690:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e694:	d1d3      	bne.n	e63e <isr+0x266>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e696:	2206      	movs	r2, #6
    e698:	f106 0108 	add.w	r1, r6, #8
    e69c:	1ca8      	adds	r0, r5, #2
    e69e:	f7f3 faaa 	bl	1bf6 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e6a2:	2800      	cmp	r0, #0
    e6a4:	d1cb      	bne.n	e63e <isr+0x266>
		_radio.state = STATE_CLOSE;
    e6a6:	2303      	movs	r3, #3
    e6a8:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    e6aa:	f003 fdd1 	bl	12250 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e6ae:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    e6b2:	2327      	movs	r3, #39	; 0x27
    e6b4:	fb03 4000 	mla	r0, r3, r0, r4
    e6b8:	307b      	adds	r0, #123	; 0x7b
    e6ba:	f003 fd39 	bl	12130 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e6be:	f003 fd75 	bl	121ac <radio_is_ready>
    e6c2:	2800      	cmp	r0, #0
    e6c4:	f43f af33 	beq.w	e52e <isr+0x156>
    e6c8:	4a09      	ldr	r2, [pc, #36]	; (e6f0 <isr+0x318>)
    e6ca:	4b0a      	ldr	r3, [pc, #40]	; (e6f4 <isr+0x31c>)
    e6cc:	9201      	str	r2, [sp, #4]
    e6ce:	9200      	str	r2, [sp, #0]
    e6d0:	681c      	ldr	r4, [r3, #0]
    e6d2:	4b0d      	ldr	r3, [pc, #52]	; (e708 <isr+0x330>)
    e6d4:	e6e0      	b.n	e498 <isr+0xc0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e6d6:	f1b9 0f00 	cmp.w	r9, #0
    e6da:	d1d4      	bne.n	e686 <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e6dc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e6e0:	f002 fe5a 	bl	11398 <ctrl_irk_whitelisted>
    e6e4:	2800      	cmp	r0, #0
    e6e6:	d1ce      	bne.n	e686 <isr+0x2ae>
    e6e8:	e7a9      	b.n	e63e <isr+0x266>
    e6ea:	bf00      	nop
    e6ec:	200008f0 	.word	0x200008f0
    e6f0:	00014891 	.word	0x00014891
    e6f4:	20003aa4 	.word	0x20003aa4
    e6f8:	00016a3e 	.word	0x00016a3e
    e6fc:	00015639 	.word	0x00015639
    e700:	00017104 	.word	0x00017104
    e704:	00015597 	.word	0x00015597
    e708:	00016a51 	.word	0x00016a51
		       isr_adv_ci_adva_check(adv, ci) &&
    e70c:	4631      	mov	r1, r6
    e70e:	4628      	mov	r0, r5
    e710:	f7fb ff36 	bl	a580 <isr_adv_ci_adva_check>
					    rl_idx) &&
    e714:	2800      	cmp	r0, #0
    e716:	d0aa      	beq.n	e66e <isr+0x296>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    e718:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    e71c:	2bff      	cmp	r3, #255	; 0xff
    e71e:	f000 80dc 	beq.w	e8da <isr+0x502>
		return rl_idx == _radio.advertiser.rl_idx;
    e722:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    e726:	1ac1      	subs	r1, r0, r3
    e728:	4248      	negs	r0, r1
    e72a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e72c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    e730:	2800      	cmp	r0, #0
    e732:	f43f af4f 	beq.w	e5d4 <isr+0x1fc>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    e736:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    e73a:	b133      	cbz	r3, e74a <isr+0x372>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e73c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    e740:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    e744:	429a      	cmp	r2, r3
    e746:	f47f af45 	bne.w	e5d4 <isr+0x1fc>
    e74a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    e74e:	2b00      	cmp	r3, #0
    e750:	f43f af40 	beq.w	e5d4 <isr+0x1fc>
			node_rx = packet_rx_reserve_get(4);
    e754:	2004      	movs	r0, #4
    e756:	f7fb f8c1 	bl	98dc <packet_rx_reserve_get>
		if (!node_rx) {
    e75a:	4607      	mov	r7, r0
    e75c:	2800      	cmp	r0, #0
    e75e:	f43f af39 	beq.w	e5d4 <isr+0x1fc>
		_radio.state = STATE_STOP;
    e762:	f04f 0904 	mov.w	r9, #4
    e766:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    e76a:	f003 fd01 	bl	12170 <radio_disable>
		conn = _radio.advertiser.conn;
    e76e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e772:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    e776:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e778:	f44f 72aa 	mov.w	r2, #340	; 0x154
    e77c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    e77e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e782:	f7f8 faca 	bl	6d1a <mem_index_get>
		memcpy(&conn->access_addr[0],
    e786:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e78a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    e78c:	2203      	movs	r2, #3
    e78e:	f106 0112 	add.w	r1, r6, #18
    e792:	f105 0014 	add.w	r0, r5, #20
    e796:	f7f3 fa43 	bl	1c20 <memcpy>
		memcpy(&conn->data_chan_map[0],
    e79a:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    e79e:	464a      	mov	r2, r9
    e7a0:	f106 010e 	add.w	r1, r6, #14
    e7a4:	4650      	mov	r0, sl
    e7a6:	f7f3 fa3b 	bl	1c20 <memcpy>
		memcpy(&conn->data_chan_map[0],
    e7aa:	2205      	movs	r2, #5
    e7ac:	f106 011e 	add.w	r1, r6, #30
    e7b0:	4640      	mov	r0, r8
    e7b2:	f7f3 fa35 	bl	1c20 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    e7b6:	2105      	movs	r1, #5
    e7b8:	4640      	mov	r0, r8
    e7ba:	f7f8 fc21 	bl	7000 <util_ones_count_get>
		conn->data_chan_count =
    e7be:	7f6b      	ldrb	r3, [r5, #29]
    e7c0:	f360 0305 	bfi	r3, r0, #0, #6
    e7c4:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    e7c6:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e7ca:	f3c3 0304 	ubfx	r3, r3, #0, #5
    e7ce:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    e7d0:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    e7d2:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    e7d4:	f240 48e2 	movw	r8, #1250	; 0x4e2
    e7d8:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    e7dc:	7ef2      	ldrb	r2, [r6, #27]
    e7de:	7eb3      	ldrb	r3, [r6, #26]
    e7e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e7e4:	4651      	mov	r1, sl
    e7e6:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    e7e8:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e7ea:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    e7ee:	f7f3 fa17 	bl	1c20 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e7f2:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e7f4:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e7f6:	f242 7210 	movw	r2, #10000	; 0x2710
    e7fa:	fb02 8303 	mla	r3, r2, r3, r8
    e7fe:	3b01      	subs	r3, #1
    e800:	fbb3 f3f8 	udiv	r3, r3, r8
    e804:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    e806:	4b54      	ldr	r3, [pc, #336]	; (e958 <isr+0x580>)
    e808:	4443      	add	r3, r8
    e80a:	fbb3 f3f8 	udiv	r3, r3, r8
    e80e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e812:	4b52      	ldr	r3, [pc, #328]	; (e95c <isr+0x584>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e814:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e816:	4443      	add	r3, r8
    e818:	fbb3 f3f8 	udiv	r3, r3, r8
    e81c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e81e:	4282      	cmp	r2, r0
    e820:	4613      	mov	r3, r2
    e822:	bfc4      	itt	gt
    e824:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    e828:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e82a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e82e:	bfc4      	itt	gt
    e830:	18d2      	addgt	r2, r2, r3
    e832:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    e834:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e836:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e83a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    e83c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    e83e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    e840:	2300      	movs	r3, #0
    e842:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    e844:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e846:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    e84a:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e84c:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e850:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    e854:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e856:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    e85a:	464a      	mov	r2, r9
    e85c:	f107 001b 	add.w	r0, r7, #27
    e860:	f7f3 f9de 	bl	1c20 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    e864:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e868:	f107 030e 	add.w	r3, r7, #14
    e86c:	28ff      	cmp	r0, #255	; 0xff
    e86e:	930b      	str	r3, [sp, #44]	; 0x2c
    e870:	f106 0a02 	add.w	sl, r6, #2
    e874:	f107 0b14 	add.w	fp, r7, #20
    e878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e87a:	d060      	beq.n	e93e <isr+0x566>
			ll_rl_id_addr_get(rl_idx,
    e87c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e87e:	f107 010d 	add.w	r1, r7, #13
    e882:	f002 fef7 	bl	11674 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    e886:	7b7b      	ldrb	r3, [r7, #13]
    e888:	3302      	adds	r3, #2
    e88a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    e88c:	464a      	mov	r2, r9
    e88e:	4651      	mov	r1, sl
    e890:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e892:	f7f3 f9c5 	bl	1c20 <memcpy>
			pdu_adv->connect_ind.interval;
    e896:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    e898:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    e89c:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    e89e:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    e8a2:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    e8a4:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    e8a8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e8ac:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    e8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    e8b4:	8c28      	ldrh	r0, [r5, #32]
    e8b6:	f7fb ff79 	bl	a7ac <rx_fc_lock>
		packet_rx_enqueue();
    e8ba:	f7fb fe85 	bl	a5c8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    e8be:	2003      	movs	r0, #3
    e8c0:	f7fb f80c 	bl	98dc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    e8c4:	2800      	cmp	r0, #0
    e8c6:	d155      	bne.n	e974 <isr+0x59c>
    e8c8:	4a25      	ldr	r2, [pc, #148]	; (e960 <isr+0x588>)
    e8ca:	4b26      	ldr	r3, [pc, #152]	; (e964 <isr+0x58c>)
    e8cc:	9201      	str	r2, [sp, #4]
    e8ce:	9200      	str	r2, [sp, #0]
    e8d0:	681c      	ldr	r4, [r3, #0]
    e8d2:	4b25      	ldr	r3, [pc, #148]	; (e968 <isr+0x590>)
			LL_ASSERT(node_rx);
    e8d4:	4925      	ldr	r1, [pc, #148]	; (e96c <isr+0x594>)
    e8d6:	4826      	ldr	r0, [pc, #152]	; (e970 <isr+0x598>)
    e8d8:	e131      	b.n	eb3e <isr+0x766>
	return (adv->rx_addr == ci->tx_addr) &&
    e8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e8dc:	5ce2      	ldrb	r2, [r4, r3]
    e8de:	7833      	ldrb	r3, [r6, #0]
    e8e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e8e4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e8e8:	f47f aec1 	bne.w	e66e <isr+0x296>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    e8ec:	2206      	movs	r2, #6
    e8ee:	4639      	mov	r1, r7
    e8f0:	f105 0008 	add.w	r0, r5, #8
    e8f4:	f7f3 f97f 	bl	1bf6 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    e8f8:	fab0 f080 	clz	r0, r0
    e8fc:	0940      	lsrs	r0, r0, #5
    e8fe:	e715      	b.n	e72c <isr+0x354>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e900:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e904:	09db      	lsrs	r3, r3, #7
    e906:	d00d      	beq.n	e924 <isr+0x54c>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e908:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e90c:	09db      	lsrs	r3, r3, #7
    e90e:	f43f aeae 	beq.w	e66e <isr+0x296>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e912:	f1b9 0f00 	cmp.w	r9, #0
    e916:	d10d      	bne.n	e934 <isr+0x55c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e918:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e91c:	f002 fd3c 	bl	11398 <ctrl_irk_whitelisted>
    e920:	b940      	cbnz	r0, e934 <isr+0x55c>
    e922:	e6a4      	b.n	e66e <isr+0x296>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    e924:	aa10      	add	r2, sp, #64	; 0x40
    e926:	1cb1      	adds	r1, r6, #2
    e928:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e92c:	f002 fee2 	bl	116f4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e930:	2800      	cmp	r0, #0
    e932:	d0e9      	beq.n	e908 <isr+0x530>
	       isr_adv_ci_adva_check(adv, ci);
    e934:	4631      	mov	r1, r6
    e936:	4628      	mov	r0, r5
    e938:	f7fb fe22 	bl	a580 <isr_adv_ci_adva_check>
    e93c:	e6f6      	b.n	e72c <isr+0x354>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    e93e:	4619      	mov	r1, r3
    e940:	464a      	mov	r2, r9
    e942:	4658      	mov	r0, fp
    e944:	f7f3 f998 	bl	1c78 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e948:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e94a:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e94c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e950:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e952:	464a      	mov	r2, r9
    e954:	4651      	mov	r1, sl
    e956:	e79c      	b.n	e892 <isr+0x4ba>
    e958:	026259ff 	.word	0x026259ff
    e95c:	01c9c37f 	.word	0x01c9c37f
    e960:	00014891 	.word	0x00014891
    e964:	20003aa4 	.word	0x20003aa4
    e968:	00016a51 	.word	0x00016a51
    e96c:	00015639 	.word	0x00015639
    e970:	0001753b 	.word	0x0001753b
			node_rx->hdr.handle = conn->handle;
    e974:	8c2b      	ldrh	r3, [r5, #32]
    e976:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    e978:	230b      	movs	r3, #11
    e97a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    e97c:	7833      	ldrb	r3, [r6, #0]
    e97e:	f013 0320 	ands.w	r3, r3, #32
    e982:	d00e      	beq.n	e9a2 <isr+0x5ca>
					((u16_t)conn->access_addr[1] << 8) |
    e984:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    e986:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    e988:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    e98a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    e98e:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    e990:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    e994:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    e996:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    e998:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    e99c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    e99e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    e9a0:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    e9a2:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    e9a4:	f7fb fe10 	bl	a5c8 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e9a8:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    e9ac:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e9b0:	497d      	ldr	r1, [pc, #500]	; (eba8 <isr+0x7d0>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e9b2:	0952      	lsrs	r2, r2, #5
    e9b4:	f362 0384 	bfi	r3, r2, #2, #3
    e9b8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e9bc:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    e9c0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    e9c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e9c8:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    e9ca:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    e9ce:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    e9d2:	4a76      	ldr	r2, [pc, #472]	; (ebac <isr+0x7d4>)
    e9d4:	f203 233f 	addw	r3, r3, #575	; 0x23f
    e9d8:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    e9dc:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    e9de:	ea4f 0358 	mov.w	r3, r8, lsr #1
    e9e2:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    e9e4:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    e9e6:	7d73      	ldrb	r3, [r6, #21]
    e9e8:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    e9ec:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    e9ee:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    e9f2:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e9f4:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    e9f6:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e9f8:	4638      	mov	r0, r7
    e9fa:	f003 fba6 	bl	1214a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e9fe:	496c      	ldr	r1, [pc, #432]	; (ebb0 <isr+0x7d8>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ea00:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ea02:	f200 4052 	addw	r0, r0, #1106	; 0x452
    ea06:	a366      	add	r3, pc, #408	; (adr r3, eba0 <isr+0x7c8>)
    ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea0c:	fba0 0101 	umull	r0, r1, r0, r1
    ea10:	f7f1 fc00 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ea14:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    ea18:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    ea1a:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ea1c:	4293      	cmp	r3, r2
    ea1e:	bf38      	it	cc
    ea20:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ea22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ea26:	469a      	mov	sl, r3
		conn_interval_us -=
    ea28:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    ea2a:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    ea2c:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    ea2e:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    ea30:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    ea34:	f003 fd80 	bl	12538 <radio_tmr_end_get>
    ea38:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    ea3a:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ea3c:	4639      	mov	r1, r7
		conn_offset_us +=
    ea3e:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ea42:	4638      	mov	r0, r7
    ea44:	f003 fb7f 	bl	12146 <radio_tx_chain_delay_get>
    ea48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ea4a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    ea4e:	4499      	add	r9, r3
    ea50:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    ea54:	eba9 030b 	sub.w	r3, r9, fp
    ea58:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea5a:	f240 4383 	movw	r3, #1155	; 0x483
    ea5e:	9300      	str	r3, [sp, #0]
    ea60:	2205      	movs	r2, #5
    ea62:	4b54      	ldr	r3, [pc, #336]	; (ebb4 <isr+0x7dc>)
    ea64:	f8df b148 	ldr.w	fp, [pc, #328]	; ebb0 <isr+0x7d8>
    ea68:	4639      	mov	r1, r7
    ea6a:	4638      	mov	r0, r7
    ea6c:	f7f9 f844 	bl	7af8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    ea70:	f240 4184 	movw	r1, #1156	; 0x484
    ea74:	f7fb fed2 	bl	a81c <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    ea78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ea7a:	5ce3      	ldrb	r3, [r4, r3]
    ea7c:	f003 030f 	and.w	r3, r3, #15
    ea80:	2b01      	cmp	r3, #1
    ea82:	d106      	bne.n	ea92 <isr+0x6ba>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea84:	9700      	str	r7, [sp, #0]
    ea86:	463b      	mov	r3, r7
    ea88:	2203      	movs	r2, #3
    ea8a:	4639      	mov	r1, r7
    ea8c:	4638      	mov	r0, r7
    ea8e:	f7f9 f833 	bl	7af8 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ea92:	fba8 890b 	umull	r8, r9, r8, fp
    ea96:	a342      	add	r3, pc, #264	; (adr r3, eba0 <isr+0x7c8>)
    ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea9c:	4640      	mov	r0, r8
    ea9e:	4649      	mov	r1, r9
    eaa0:	f7f1 fbb8 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaa4:	f895 3020 	ldrb.w	r3, [r5, #32]
    eaa8:	68a4      	ldr	r4, [r4, #8]
    eaaa:	9506      	str	r5, [sp, #24]
    eaac:	3307      	adds	r3, #7
    eaae:	b2db      	uxtb	r3, r3
    eab0:	930a      	str	r3, [sp, #40]	; 0x28
    eab2:	f240 439b 	movw	r3, #1179	; 0x49b
    eab6:	9308      	str	r3, [sp, #32]
    eab8:	4b3f      	ldr	r3, [pc, #252]	; (ebb8 <isr+0x7e0>)
    eaba:	9307      	str	r3, [sp, #28]
    eabc:	4b3f      	ldr	r3, [pc, #252]	; (ebbc <isr+0x7e4>)
    eabe:	9305      	str	r3, [sp, #20]
    eac0:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    eac2:	4a3f      	ldr	r2, [pc, #252]	; (ebc0 <isr+0x7e8>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eac4:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    eac6:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eac8:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    eaca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eace:	2307      	movs	r3, #7
    ead0:	2100      	movs	r1, #0
    ead2:	4343      	muls	r3, r0
    ead4:	fb02 3301 	mla	r3, r2, r1, r3
    ead8:	fba0 1202 	umull	r1, r2, r0, r2
    eadc:	441a      	add	r2, r3
    eade:	4608      	mov	r0, r1
    eae0:	ebb8 0000 	subs.w	r0, r8, r0
    eae4:	4611      	mov	r1, r2
    eae6:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaea:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    eaec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eaf0:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaf2:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    eaf4:	f7f1 fb8e 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    eaf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eafa:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    eafc:	a328      	add	r3, pc, #160	; (adr r3, eba0 <isr+0x7c8>)
    eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb02:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    eb06:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb0a:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    eb0c:	f7f1 fb82 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb10:	eba4 040a 	sub.w	r4, r4, sl
    eb14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eb18:	9000      	str	r0, [sp, #0]
    eb1a:	4623      	mov	r3, r4
    eb1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb1e:	4629      	mov	r1, r5
    eb20:	4628      	mov	r0, r5
    eb22:	f7f8 ff4b 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    eb26:	f030 0302 	bics.w	r3, r0, #2
    eb2a:	f43f ad00 	beq.w	e52e <isr+0x156>
    eb2e:	4a25      	ldr	r2, [pc, #148]	; (ebc4 <isr+0x7ec>)
    eb30:	4b25      	ldr	r3, [pc, #148]	; (ebc8 <isr+0x7f0>)
    eb32:	9201      	str	r2, [sp, #4]
    eb34:	9200      	str	r2, [sp, #0]
    eb36:	681c      	ldr	r4, [r3, #0]
    eb38:	4b24      	ldr	r3, [pc, #144]	; (ebcc <isr+0x7f4>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    eb3a:	4925      	ldr	r1, [pc, #148]	; (ebd0 <isr+0x7f8>)
    eb3c:	4825      	ldr	r0, [pc, #148]	; (ebd4 <isr+0x7fc>)
		LL_ASSERT(0);
    eb3e:	47a0      	blx	r4
    eb40:	4040      	eors	r0, r0
    eb42:	f380 8811 	msr	BASEPRI, r0
    eb46:	f04f 0004 	mov.w	r0, #4
    eb4a:	df02      	svc	2
		rl_idx = devmatch_ok ?
    eb4c:	f1b9 0f00 	cmp.w	r9, #0
    eb50:	d01c      	beq.n	eb8c <isr+0x7b4>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    eb52:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    eb56:	4641      	mov	r1, r8
    eb58:	f3c0 1000 	ubfx	r0, r0, #4, #1
    eb5c:	f002 fb80 	bl	11260 <ctrl_rl_idx>
    eb60:	4680      	mov	r8, r0
		if (crc_ok &&
    eb62:	b147      	cbz	r7, eb76 <isr+0x79e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    eb64:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    eb68:	06da      	lsls	r2, r3, #27
    eb6a:	d535      	bpl.n	ebd8 <isr+0x800>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    eb6c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    eb70:	06db      	lsls	r3, r3, #27
    eb72:	f100 811f 	bmi.w	edb4 <isr+0x9dc>
			_radio.state = STATE_CLOSE;
    eb76:	2303      	movs	r3, #3
    eb78:	7523      	strb	r3, [r4, #20]
			radio_disable();
    eb7a:	f003 faf9 	bl	12170 <radio_disable>
			_radio.scanner.state = 0;
    eb7e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    eb82:	f36f 0341 	bfc	r3, #1, #1
    eb86:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    eb8a:	e4d0      	b.n	e52e <isr+0x156>
		rl_idx = devmatch_ok ?
    eb8c:	f1ba 0f00 	cmp.w	sl, #0
    eb90:	d003      	beq.n	eb9a <isr+0x7c2>
    eb92:	4658      	mov	r0, fp
    eb94:	f002 fbba 	bl	1130c <ctrl_rl_irk_idx>
    eb98:	e7e2      	b.n	eb60 <isr+0x788>
    eb9a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    eb9e:	e7e0      	b.n	eb62 <isr+0x78a>
    eba0:	1afd498d 	.word	0x1afd498d
    eba4:	00000007 	.word	0x00000007
    eba8:	000170f4 	.word	0x000170f4
    ebac:	000f4240 	.word	0x000f4240
    ebb0:	3b9aca00 	.word	0x3b9aca00
    ebb4:	0000a81d 	.word	0x0000a81d
    ebb8:	0000a7e1 	.word	0x0000a7e1
    ebbc:	0000ccbd 	.word	0x0000ccbd
    ebc0:	1afd498d 	.word	0x1afd498d
    ebc4:	00014891 	.word	0x00014891
    ebc8:	20003aa4 	.word	0x20003aa4
    ebcc:	00016a51 	.word	0x00016a51
    ebd0:	00015639 	.word	0x00015639
    ebd4:	00016ed5 	.word	0x00016ed5
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ebd8:	f1b9 0f00 	cmp.w	r9, #0
    ebdc:	d005      	beq.n	ebea <isr+0x812>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ebde:	4641      	mov	r1, r8
    ebe0:	4650      	mov	r0, sl
    ebe2:	f002 fd15 	bl	11610 <ctrl_rl_idx_allowed>
    ebe6:	2800      	cmp	r0, #0
    ebe8:	d0c0      	beq.n	eb6c <isr+0x794>
	bool dir_report = false;
    ebea:	2300      	movs	r3, #0
    ebec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ebf0:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ebf4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    ebf8:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ebfc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ec00:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ec04:	2b00      	cmp	r3, #0
    ec06:	f000 80ee 	beq.w	ede6 <isr+0xa0e>
    ec0a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    ec0e:	b133      	cbz	r3, ec1e <isr+0x846>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ec10:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ec14:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    ec18:	429a      	cmp	r2, r3
    ec1a:	f040 80e4 	bne.w	ede6 <isr+0xa0e>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ec1e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ec22:	f3c3 1000 	ubfx	r0, r3, #4, #1
    ec26:	2800      	cmp	r0, #0
    ec28:	f000 80cf 	beq.w	edca <isr+0x9f2>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    ec2c:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ec30:	f010 000f 	ands.w	r0, r0, #15
    ec34:	f040 814e 	bne.w	eed4 <isr+0xafc>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ec38:	f003 fc7e 	bl	12538 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ec3c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ec40:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ec44:	48b8      	ldr	r0, [pc, #736]	; (ef28 <isr+0xb50>)
    ec46:	2207      	movs	r2, #7
    ec48:	fba3 0100 	umull	r0, r1, r3, r0
    ec4c:	fb02 1103 	mla	r1, r2, r3, r1
    ec50:	a3b3      	add	r3, pc, #716	; (adr r3, ef20 <isr+0xb48>)
    ec52:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec56:	f7f1 fadd 	bl	214 <__aeabi_uldivmod>
    ec5a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    ec5e:	4287      	cmp	r7, r0
    ec60:	f080 80c1 	bcs.w	ede6 <isr+0xa0e>
			node_rx = packet_rx_reserve_get(4);
    ec64:	2004      	movs	r0, #4
    ec66:	f7fa fe39 	bl	98dc <packet_rx_reserve_get>
		if (node_rx == 0) {
    ec6a:	4607      	mov	r7, r0
    ec6c:	2800      	cmp	r0, #0
    ec6e:	d082      	beq.n	eb76 <isr+0x79e>
		_radio.state = STATE_STOP;
    ec70:	2304      	movs	r3, #4
    ec72:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    ec74:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    ec76:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    ec7a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ec7e:	f003 facd 	bl	1221c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    ec82:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    ec84:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    ec88:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    ec8c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ec8e:	f899 3008 	ldrb.w	r3, [r9, #8]
    ec92:	7802      	ldrb	r2, [r0, #0]
    ec94:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ec98:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    ec9c:	2322      	movs	r3, #34	; 0x22
    ec9e:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    eca0:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    eca2:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    eca4:	4640      	mov	r0, r8
    eca6:	f002 fabd 	bl	11224 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ecaa:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    ecae:	4601      	mov	r1, r0
    ecb0:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ecb2:	f013 0f01 	tst.w	r3, #1
    ecb6:	f810 3b02 	ldrb.w	r3, [r0], #2
    ecba:	f000 8116 	beq.w	eeea <isr+0xb12>
    ecbe:	2900      	cmp	r1, #0
    ecc0:	f000 8113 	beq.w	eeea <isr+0xb12>
			pdu_adv_tx->tx_addr = 1;
    ecc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ecc8:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ecca:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    eccc:	f7f2 ffa8 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    ecd0:	f105 0308 	add.w	r3, r5, #8
    ecd4:	4618      	mov	r0, r3
    ecd6:	2206      	movs	r2, #6
    ecd8:	f109 010a 	add.w	r1, r9, #10
    ecdc:	930a      	str	r3, [sp, #40]	; 0x28
    ecde:	f7f2 ff9f 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    ece2:	2204      	movs	r2, #4
    ece4:	f106 0110 	add.w	r1, r6, #16
    ece8:	f105 000e 	add.w	r0, r5, #14
    ecec:	f7f2 ff98 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    ecf0:	2203      	movs	r2, #3
    ecf2:	f106 0114 	add.w	r1, r6, #20
    ecf6:	f105 0012 	add.w	r0, r5, #18
    ecfa:	f7f2 ff91 	bl	1c20 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    ecfe:	2301      	movs	r3, #1
    ed00:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    ed02:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    ed06:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ed0a:	4353      	muls	r3, r2
    ed0c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ed0e:	f003 fc13 	bl	12538 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    ed12:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    ed14:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    ed18:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ed1a:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    ed1e:	bfd8      	it	le
    ed20:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    ed24:	f1bb 0f00 	cmp.w	fp, #0
    ed28:	f040 80ea 	bne.w	ef00 <isr+0xb28>
			pdu_adv_tx->connect_ind.win_offset = 0;
    ed2c:	f885 b016 	strb.w	fp, [r5, #22]
    ed30:	f885 b017 	strb.w	fp, [r5, #23]
    ed34:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ed36:	2100      	movs	r1, #0
    ed38:	4608      	mov	r0, r1
    ed3a:	f003 f9ff 	bl	1213c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ed3e:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ed40:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ed44:	4608      	mov	r0, r1
    ed46:	f003 f9fe 	bl	12146 <radio_tx_chain_delay_get>
    ed4a:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    ed4e:	f100 031e 	add.w	r3, r0, #30
    ed52:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    ed54:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    ed58:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    ed5a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    ed5e:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    ed60:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    ed64:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    ed66:	f106 0117 	add.w	r1, r6, #23
    ed6a:	2205      	movs	r2, #5
    ed6c:	f105 001e 	add.w	r0, r5, #30
    ed70:	f7f2 ff56 	bl	1c20 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    ed74:	7fb2      	ldrb	r2, [r6, #30]
    ed76:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ed7a:	f362 0304 	bfi	r3, r2, #0, #5
    ed7e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    ed82:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    ed86:	f362 1347 	bfi	r3, r2, #5, #3
    ed8a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    ed8e:	f003 fa5f 	bl	12250 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    ed92:	4628      	mov	r0, r5
    ed94:	f003 f9cc 	bl	12130 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    ed98:	f003 fa08 	bl	121ac <radio_is_ready>
    ed9c:	4683      	mov	fp, r0
    ed9e:	2800      	cmp	r0, #0
    eda0:	f000 80ce 	beq.w	ef40 <isr+0xb68>
		LL_ASSERT(!radio_is_ready());
    eda4:	4a61      	ldr	r2, [pc, #388]	; (ef2c <isr+0xb54>)
    eda6:	4b62      	ldr	r3, [pc, #392]	; (ef30 <isr+0xb58>)
    eda8:	9201      	str	r2, [sp, #4]
    edaa:	9200      	str	r2, [sp, #0]
    edac:	681c      	ldr	r4, [r3, #0]
    edae:	4b61      	ldr	r3, [pc, #388]	; (ef34 <isr+0xb5c>)
    edb0:	f7ff bb72 	b.w	e498 <isr+0xc0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    edb4:	f1b9 0f00 	cmp.w	r9, #0
    edb8:	f47f af17 	bne.w	ebea <isr+0x812>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    edbc:	4640      	mov	r0, r8
    edbe:	f002 faeb 	bl	11398 <ctrl_irk_whitelisted>
		if (crc_ok &&
    edc2:	2800      	cmp	r0, #0
    edc4:	f43f aed7 	beq.w	eb76 <isr+0x79e>
    edc8:	e70f      	b.n	ebea <isr+0x812>
	if (rl_idx != FILTER_IDX_NONE) {
    edca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    edce:	d06f      	beq.n	eeb0 <isr+0xad8>
		return (rl_idx == _radio.scanner.rl_idx);
    edd0:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    edd4:	eba0 0e08 	sub.w	lr, r0, r8
    edd8:	f1de 0000 	rsbs	r0, lr, #0
    eddc:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ede0:	2800      	cmp	r0, #0
    ede2:	f47f af23 	bne.w	ec2c <isr+0x854>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ede6:	f899 0008 	ldrb.w	r0, [r9, #8]
    edea:	f010 000f 	ands.w	r0, r0, #15
    edee:	d002      	beq.n	edf6 <isr+0xa1e>
    edf0:	2806      	cmp	r0, #6
    edf2:	f040 81b0 	bne.w	f156 <isr+0xd7e>
		 (_radio.scanner.type != 0) &&
    edf6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    edfa:	071f      	lsls	r7, r3, #28
    edfc:	f140 8195 	bpl.w	f12a <isr+0xd52>
		 (_radio.scanner.type != 0) &&
    ee00:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    ee04:	2a00      	cmp	r2, #0
    ee06:	f040 8190 	bne.w	f12a <isr+0xd52>
		err = isr_rx_scan_report(rssi_ready,
    ee0a:	f1ba 0f00 	cmp.w	sl, #0
    ee0e:	bf14      	ite	ne
    ee10:	4641      	movne	r1, r8
    ee12:	21ff      	moveq	r1, #255	; 0xff
    ee14:	4628      	mov	r0, r5
    ee16:	f7fb fc71 	bl	a6fc <isr_rx_scan_report>
		if (err) {
    ee1a:	2800      	cmp	r0, #0
    ee1c:	f47f aeab 	bne.w	eb76 <isr+0x79e>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ee20:	f003 f9fc 	bl	1221c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    ee24:	7803      	ldrb	r3, [r0, #0]
    ee26:	2203      	movs	r2, #3
    ee28:	f362 0303 	bfi	r3, r2, #0, #4
    ee2c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ee2e:	f899 3008 	ldrb.w	r3, [r9, #8]
    ee32:	7802      	ldrb	r2, [r0, #0]
    ee34:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ee38:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    ee3c:	230c      	movs	r3, #12
    ee3e:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ee40:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ee42:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    ee44:	4640      	mov	r0, r8
    ee46:	f002 f9ed 	bl	11224 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ee4a:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    ee4e:	4601      	mov	r1, r0
    ee50:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ee52:	f013 0f01 	tst.w	r3, #1
    ee56:	f810 3b02 	ldrb.w	r3, [r0], #2
    ee5a:	f000 815d 	beq.w	f118 <isr+0xd40>
    ee5e:	2900      	cmp	r1, #0
    ee60:	f000 815a 	beq.w	f118 <isr+0xd40>
			pdu_adv_tx->tx_addr = 1;
    ee64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ee68:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ee6a:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ee6c:	f7f2 fed8 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    ee70:	2206      	movs	r2, #6
    ee72:	f109 010a 	add.w	r1, r9, #10
    ee76:	f105 0008 	add.w	r0, r5, #8
    ee7a:	f7f2 fed1 	bl	1c20 <memcpy>
		_radio.scanner.state = 1;
    ee7e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ee82:	f043 0302 	orr.w	r3, r3, #2
    ee86:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    ee8a:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    ee8c:	2302      	movs	r3, #2
    ee8e:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    ee90:	f003 fa64 	bl	1235c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    ee94:	2000      	movs	r0, #0
    ee96:	f003 f9c5 	bl	12224 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    ee9a:	4628      	mov	r0, r5
    ee9c:	f003 f948 	bl	12130 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    eea0:	f003 fb38 	bl	12514 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    eea4:	f003 f982 	bl	121ac <radio_is_ready>
    eea8:	2800      	cmp	r0, #0
    eeaa:	f43f ab40 	beq.w	e52e <isr+0x156>
    eeae:	e779      	b.n	eda4 <isr+0x9cc>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    eeb0:	f899 2008 	ldrb.w	r2, [r9, #8]
    eeb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eeb8:	f3c2 1280 	ubfx	r2, r2, #6, #1
    eebc:	4293      	cmp	r3, r2
    eebe:	d18f      	bne.n	ede0 <isr+0xa08>
		(memcmp(&_radio.scanner.adv_addr[0],
    eec0:	2206      	movs	r2, #6
    eec2:	f109 010a 	add.w	r1, r9, #10
    eec6:	481c      	ldr	r0, [pc, #112]	; (ef38 <isr+0xb60>)
    eec8:	f7f2 fe95 	bl	1bf6 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    eecc:	fab0 f080 	clz	r0, r0
    eed0:	0940      	lsrs	r0, r0, #5
    eed2:	e785      	b.n	ede0 <isr+0xa08>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    eed4:	2801      	cmp	r0, #1
    eed6:	d18b      	bne.n	edf0 <isr+0xa18>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    eed8:	2300      	movs	r3, #0
    eeda:	4642      	mov	r2, r8
    eedc:	4631      	mov	r1, r6
    eede:	f7fb fbc1 	bl	a664 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    eee2:	2800      	cmp	r0, #0
    eee4:	f43f af7f 	beq.w	ede6 <isr+0xa0e>
    eee8:	e6a6      	b.n	ec38 <isr+0x860>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    eeea:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    eeee:	4913      	ldr	r1, [pc, #76]	; (ef3c <isr+0xb64>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    eef0:	09d2      	lsrs	r2, r2, #7
    eef2:	f362 1386 	bfi	r3, r2, #6, #1
    eef6:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    eef8:	2206      	movs	r2, #6
    eefa:	e6e7      	b.n	eccc <isr+0x8f4>
				conn_space_us += conn_interval_us;
    eefc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eefe:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    ef00:	f1bb 0f00 	cmp.w	fp, #0
    ef04:	dbfa      	blt.n	eefc <isr+0xb24>
    ef06:	459b      	cmp	fp, r3
    ef08:	d3f8      	bcc.n	eefc <isr+0xb24>
				(conn_space_us - conn_offset_us) / 1250;
    ef0a:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    ef0e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ef12:	fbb3 f3f2 	udiv	r3, r3, r2
    ef16:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    ef18:	7d6b      	ldrb	r3, [r5, #21]
    ef1a:	3301      	adds	r3, #1
    ef1c:	756b      	strb	r3, [r5, #21]
    ef1e:	e70a      	b.n	ed36 <isr+0x95e>
    ef20:	3b9aca00 	.word	0x3b9aca00
    ef24:	00000000 	.word	0x00000000
    ef28:	1afd498d 	.word	0x1afd498d
    ef2c:	00014891 	.word	0x00014891
    ef30:	20003aa4 	.word	0x20003aa4
    ef34:	00016a6f 	.word	0x00016a6f
    ef38:	200009da 	.word	0x200009da
    ef3c:	200009d4 	.word	0x200009d4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ef40:	f44f 72aa 	mov.w	r2, #340	; 0x154
    ef44:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    ef48:	4630      	mov	r0, r6
    ef4a:	f7f7 fee6 	bl	6d1a <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ef4e:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ef50:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ef52:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    ef56:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    ef5a:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ef5e:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ef60:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    ef64:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ef66:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ef6a:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ef6c:	2206      	movs	r2, #6
    ef6e:	f107 001b 	add.w	r0, r7, #27
    ef72:	f7f2 fe55 	bl	1c20 <memcpy>
    ef76:	f107 0b0e 	add.w	fp, r7, #14
    ef7a:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    ef7e:	f1ba 0f00 	cmp.w	sl, #0
    ef82:	d034      	beq.n	efee <isr+0xc16>
    ef84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    ef88:	d031      	beq.n	efee <isr+0xc16>
			ll_rl_id_addr_get(rl_idx,
    ef8a:	465a      	mov	r2, fp
    ef8c:	f107 010d 	add.w	r1, r7, #13
    ef90:	4640      	mov	r0, r8
    ef92:	930d      	str	r3, [sp, #52]	; 0x34
    ef94:	f002 fb6e 	bl	11674 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ef98:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ef9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ef9c:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    ef9e:	3202      	adds	r2, #2
    efa0:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    efa2:	4618      	mov	r0, r3
    efa4:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    efa6:	f7f2 fe3b 	bl	1c20 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    efaa:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    efae:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    efb2:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    efb6:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    efba:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    efbe:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    efc2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    efc6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    efca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    efce:	8c30      	ldrh	r0, [r6, #32]
    efd0:	f7fb fbec 	bl	a7ac <rx_fc_lock>
		packet_rx_enqueue();
    efd4:	f7fb faf8 	bl	a5c8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    efd8:	2003      	movs	r0, #3
    efda:	f7fa fc7f 	bl	98dc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    efde:	b998      	cbnz	r0, f008 <isr+0xc30>
    efe0:	4abd      	ldr	r2, [pc, #756]	; (f2d8 <isr+0xf00>)
    efe2:	4bbe      	ldr	r3, [pc, #760]	; (f2dc <isr+0xf04>)
    efe4:	9201      	str	r2, [sp, #4]
    efe6:	9200      	str	r2, [sp, #0]
    efe8:	681c      	ldr	r4, [r3, #0]
    efea:	4bbd      	ldr	r3, [pc, #756]	; (f2e0 <isr+0xf08>)
    efec:	e472      	b.n	e8d4 <isr+0x4fc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    efee:	2206      	movs	r2, #6
    eff0:	2100      	movs	r1, #0
    eff2:	4618      	mov	r0, r3
    eff4:	f7f2 fe40 	bl	1c78 <memset>
				pdu_adv_tx->rx_addr;
    eff8:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    effa:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    effc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    f000:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f002:	2206      	movs	r2, #6
    f004:	4658      	mov	r0, fp
    f006:	e7ce      	b.n	efa6 <isr+0xbce>
			node_rx->hdr.handle = conn->handle;
    f008:	8c33      	ldrh	r3, [r6, #32]
    f00a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f00c:	230b      	movs	r3, #11
    f00e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    f010:	f899 3008 	ldrb.w	r3, [r9, #8]
    f014:	f013 0320 	ands.w	r3, r3, #32
    f018:	d00e      	beq.n	f038 <isr+0xc60>
					((u16_t)conn->access_addr[1] << 8) |
    f01a:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    f01c:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f01e:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    f020:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f024:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    f026:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f02a:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f02c:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f02e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f032:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    f034:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f036:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f038:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f03a:	f7fb fac5 	bl	a5c8 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f03e:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f040:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f044:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    f046:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    f04a:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f04c:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f04e:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f052:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f054:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f056:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f05a:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f05c:	4629      	mov	r1, r5
    f05e:	9300      	str	r3, [sp, #0]
    f060:	4628      	mov	r0, r5
    f062:	4ba0      	ldr	r3, [pc, #640]	; (f2e4 <isr+0xf0c>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f064:	f8df a290 	ldr.w	sl, [pc, #656]	; f2f8 <isr+0xf20>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f068:	bf38      	it	cc
    f06a:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f06c:	f7f8 fd44 	bl	7af8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    f070:	f240 6139 	movw	r1, #1593	; 0x639
    f074:	f7fb fc06 	bl	a884 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f078:	462b      	mov	r3, r5
    f07a:	2204      	movs	r2, #4
    f07c:	4629      	mov	r1, r5
    f07e:	9500      	str	r5, [sp, #0]
    f080:	4628      	mov	r0, r5
    f082:	f7f8 fd39 	bl	7af8 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f088:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f08c:	68a3      	ldr	r3, [r4, #8]
    f08e:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    f092:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f094:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    f098:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    f09c:	9308      	str	r3, [sp, #32]
    f09e:	4b92      	ldr	r3, [pc, #584]	; (f2e8 <isr+0xf10>)
    f0a0:	9307      	str	r3, [sp, #28]
    f0a2:	4b92      	ldr	r3, [pc, #584]	; (f2ec <isr+0xf14>)
    f0a4:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f0a6:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    f0a8:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f0aa:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f0ac:	4640      	mov	r0, r8
    f0ae:	a388      	add	r3, pc, #544	; (adr r3, f2d0 <isr+0xef8>)
    f0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0b4:	4649      	mov	r1, r9
		ticker_status =
    f0b6:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f0b8:	f7f1 f8ac 	bl	214 <__aeabi_uldivmod>
    f0bc:	4610      	mov	r0, r2
    f0be:	4619      	mov	r1, r3
    f0c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f0c4:	2300      	movs	r3, #0
    f0c6:	f7f1 f8a5 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f0ca:	a381      	add	r3, pc, #516	; (adr r3, f2d0 <isr+0xef8>)
    f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f0d0:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f0d2:	4649      	mov	r1, r9
    f0d4:	4640      	mov	r0, r8
    f0d6:	f7f1 f89d 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f0da:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f0dc:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f0de:	a37c      	add	r3, pc, #496	; (adr r3, f2d0 <isr+0xef8>)
    f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0e4:	fba1 010a 	umull	r0, r1, r1, sl
    f0e8:	f7f1 f894 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f0ec:	3407      	adds	r4, #7
    f0ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    f0f2:	b2e4      	uxtb	r4, r4
    f0f4:	9000      	str	r0, [sp, #0]
    f0f6:	465b      	mov	r3, fp
    f0f8:	4622      	mov	r2, r4
    f0fa:	4629      	mov	r1, r5
    f0fc:	4628      	mov	r0, r5
    f0fe:	f7f8 fc5d 	bl	79bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f102:	f030 0302 	bics.w	r3, r0, #2
    f106:	f43f aa12 	beq.w	e52e <isr+0x156>
    f10a:	4a73      	ldr	r2, [pc, #460]	; (f2d8 <isr+0xf00>)
    f10c:	4b73      	ldr	r3, [pc, #460]	; (f2dc <isr+0xf04>)
    f10e:	9201      	str	r2, [sp, #4]
    f110:	9200      	str	r2, [sp, #0]
    f112:	681c      	ldr	r4, [r3, #0]
    f114:	4b72      	ldr	r3, [pc, #456]	; (f2e0 <isr+0xf08>)
    f116:	e510      	b.n	eb3a <isr+0x762>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f118:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f11c:	4974      	ldr	r1, [pc, #464]	; (f2f0 <isr+0xf18>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f11e:	09d2      	lsrs	r2, r2, #7
    f120:	f362 1386 	bfi	r3, r2, #6, #1
    f124:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f126:	2206      	movs	r2, #6
    f128:	e6a0      	b.n	ee6c <isr+0xa94>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f12a:	b9a0      	cbnz	r0, f156 <isr+0xd7e>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    f12c:	f899 3009 	ldrb.w	r3, [r9, #9]
    f130:	2b00      	cmp	r3, #0
    f132:	f43f ad20 	beq.w	eb76 <isr+0x79e>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    f136:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f13a:	2b00      	cmp	r3, #0
    f13c:	f47f ad1b 	bne.w	eb76 <isr+0x79e>
		err = isr_rx_scan_report(rssi_ready,
    f140:	f1ba 0f00 	cmp.w	sl, #0
    f144:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f148:	bf14      	ite	ne
    f14a:	4641      	movne	r1, r8
    f14c:	21ff      	moveq	r1, #255	; 0xff
    f14e:	4628      	mov	r0, r5
    f150:	f7fb fad4 	bl	a6fc <isr_rx_scan_report>
    f154:	e50f      	b.n	eb76 <isr+0x79e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f156:	2801      	cmp	r0, #1
    f158:	d00e      	beq.n	f178 <isr+0xda0>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f15a:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f15e:	f003 020b 	and.w	r2, r3, #11
    f162:	2a02      	cmp	r2, #2
    f164:	d0e2      	beq.n	f12c <isr+0xd54>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f166:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f16a:	2b07      	cmp	r3, #7
    f16c:	d10d      	bne.n	f18a <isr+0xdb2>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f16e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f172:	0758      	lsls	r0, r3, #29
    f174:	d1da      	bne.n	f12c <isr+0xd54>
    f176:	e4fe      	b.n	eb76 <isr+0x79e>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f178:	ab10      	add	r3, sp, #64	; 0x40
    f17a:	4642      	mov	r2, r8
    f17c:	4631      	mov	r1, r6
    f17e:	2000      	movs	r0, #0
    f180:	f7fb fa70 	bl	a664 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f184:	2800      	cmp	r0, #0
    f186:	d1d1      	bne.n	f12c <isr+0xd54>
    f188:	e7e7      	b.n	f15a <isr+0xd82>
		   (_radio.scanner.phy)) ||
    f18a:	2b04      	cmp	r3, #4
    f18c:	f47f acf3 	bne.w	eb76 <isr+0x79e>
		   (_radio.scanner.state != 0) &&
    f190:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f194:	0799      	lsls	r1, r3, #30
    f196:	f57f acee 	bpl.w	eb76 <isr+0x79e>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f19a:	f003 f83f 	bl	1221c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f19e:	f899 3008 	ldrb.w	r3, [r9, #8]
    f1a2:	7802      	ldrb	r2, [r0, #0]
    f1a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f1a8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f1ac:	f47f ace3 	bne.w	eb76 <isr+0x79e>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f1b0:	2206      	movs	r2, #6
    f1b2:	f109 010a 	add.w	r1, r9, #10
    f1b6:	3008      	adds	r0, #8
    f1b8:	f7f2 fd1d 	bl	1bf6 <memcmp>
		   (_radio.scanner.state != 0) &&
    f1bc:	2800      	cmp	r0, #0
    f1be:	d0b5      	beq.n	f12c <isr+0xd54>
    f1c0:	e4d9      	b.n	eb76 <isr+0x79e>
	_radio.packet_counter++;
    f1c2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f1c6:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f1ca:	3301      	adds	r3, #1
    f1cc:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f1d0:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f1d2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f1d6:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f1da:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f1de:	2301      	movs	r3, #1
    f1e0:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f1e4:	2f00      	cmp	r7, #0
    f1e6:	f000 82da 	beq.w	f79e <isr+0x13c6>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f1ea:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f1ee:	f898 1008 	ldrb.w	r1, [r8, #8]
    f1f2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f1f6:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f1fa:	f003 0201 	and.w	r2, r3, #1
    f1fe:	4291      	cmp	r1, r2
    f200:	f000 81a2 	beq.w	f548 <isr+0x1170>
		_radio.conn_curr->sn++;
    f204:	f082 0201 	eor.w	r2, r2, #1
    f208:	f362 0300 	bfi	r3, r2, #0, #1
    f20c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f210:	7ce3      	ldrb	r3, [r4, #19]
    f212:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f214:	bf02      	ittt	eq
    f216:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f21a:	f043 0301 	orreq.w	r3, r3, #1
    f21e:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f222:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f226:	061a      	lsls	r2, r3, #24
    f228:	f100 8189 	bmi.w	f53e <isr+0x1166>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f22c:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f230:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f234:	1d30      	adds	r0, r6, #4
    f236:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f23a:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f23e:	f1b9 0f00 	cmp.w	r9, #0
    f242:	f000 80af 	beq.w	f3a4 <isr+0xfcc>
				if (_radio.conn_curr->enc_tx) {
    f246:	069b      	lsls	r3, r3, #26
    f248:	d50b      	bpl.n	f262 <isr+0xe8a>
					_radio.conn_curr->ccm_tx.counter++;
    f24a:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f24e:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f252:	f11b 0201 	adds.w	r2, fp, #1
    f256:	f14c 0300 	adc.w	r3, ip, #0
    f25a:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f25e:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f262:	5c43      	ldrb	r3, [r0, r1]
    f264:	f003 0303 	and.w	r3, r3, #3
    f268:	2b03      	cmp	r3, #3
    f26a:	f040 809b 	bne.w	f3a4 <isr+0xfcc>
	switch (pdu_data_tx->llctrl.opcode) {
    f26e:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f272:	3b02      	subs	r3, #2
    f274:	2b16      	cmp	r3, #22
    f276:	f200 8095 	bhi.w	f3a4 <isr+0xfcc>
    f27a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f27e:	0017      	.short	0x0017
    f280:	00c90077 	.word	0x00c90077
    f284:	00930093 	.word	0x00930093
    f288:	00930093 	.word	0x00930093
    f28c:	00950093 	.word	0x00950093
    f290:	009300a0 	.word	0x009300a0
    f294:	009300d0 	.word	0x009300d0
    f298:	00930093 	.word	0x00930093
    f29c:	00930093 	.word	0x00930093
    f2a0:	00da0093 	.word	0x00da0093
    f2a4:	00f20093 	.word	0x00f20093
    f2a8:	012400f9 	.word	0x012400f9
		_radio.state = STATE_CLOSE;
    f2ac:	2303      	movs	r3, #3
    f2ae:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f2b0:	f002 ff5e 	bl	12170 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f2b4:	f002 ff7a 	bl	121ac <radio_is_ready>
    f2b8:	b300      	cbz	r0, f2fc <isr+0xf24>
    f2ba:	4a07      	ldr	r2, [pc, #28]	; (f2d8 <isr+0xf00>)
    f2bc:	4b07      	ldr	r3, [pc, #28]	; (f2dc <isr+0xf04>)
    f2be:	9201      	str	r2, [sp, #4]
    f2c0:	9200      	str	r2, [sp, #0]
    f2c2:	681c      	ldr	r4, [r3, #0]
    f2c4:	4b0b      	ldr	r3, [pc, #44]	; (f2f4 <isr+0xf1c>)
    f2c6:	f7ff b8e7 	b.w	e498 <isr+0xc0>
    f2ca:	bf00      	nop
    f2cc:	f3af 8000 	nop.w
    f2d0:	1afd498d 	.word	0x1afd498d
    f2d4:	00000007 	.word	0x00000007
    f2d8:	00014891 	.word	0x00014891
    f2dc:	20003aa4 	.word	0x20003aa4
    f2e0:	00016a6f 	.word	0x00016a6f
    f2e4:	0000a885 	.word	0x0000a885
    f2e8:	0000a7e1 	.word	0x0000a7e1
    f2ec:	0000ccb9 	.word	0x0000ccb9
    f2f0:	200009d4 	.word	0x200009d4
    f2f4:	00016a7b 	.word	0x00016a7b
    f2f8:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f2fc:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f300:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f304:	2913      	cmp	r1, #19
    f306:	bf08      	it	eq
    f308:	2116      	moveq	r1, #22
    f30a:	f7fb fe9d 	bl	b048 <terminate_ind_rx_enqueue>
		terminate = 1;
    f30e:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f310:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f314:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f318:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f31a:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f31e:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f322:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f324:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f328:	d11e      	bne.n	f368 <isr+0xf90>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f32a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f32e:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f332:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f334:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f336:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f33a:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f33e:	f040 80c9 	bne.w	f4d4 <isr+0x10fc>
		if (node_tx) {
    f342:	b18e      	cbz	r6, f368 <isr+0xf90>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f344:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f348:	f8d3 e000 	ldr.w	lr, [r3]
    f34c:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f350:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f352:	bf06      	itte	eq
    f354:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f358:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f35c:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f360:	49cf      	ldr	r1, [pc, #828]	; (f6a0 <isr+0x12c8>)
    f362:	4630      	mov	r0, r6
    f364:	f7f7 fcbb 	bl	6cde <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f368:	2600      	movs	r6, #0
    f36a:	e0bc      	b.n	f4e6 <isr+0x110e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f36c:	2208      	movs	r2, #8
    f36e:	f10a 010e 	add.w	r1, sl, #14
    f372:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f376:	f7f2 fc53 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f37a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f37e:	2204      	movs	r2, #4
    f380:	f10a 0116 	add.w	r1, sl, #22
    f384:	f500 7089 	add.w	r0, r0, #274	; 0x112
    f388:	f7f2 fc4a 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    f38c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f390:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f394:	f042 0208 	orr.w	r2, r2, #8
    f398:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f39c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    f3a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    f3a4:	2500      	movs	r5, #0
    f3a6:	e7b3      	b.n	f310 <isr+0xf38>
		_radio.conn_curr->pause_tx = 1;
    f3a8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    f3ac:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    f3b0:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f3b4:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    f3b8:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    f3bc:	e7f2      	b.n	f3a4 <isr+0xfcc>
		if (_radio.role == ROLE_MASTER) {
    f3be:	f894 a013 	ldrb.w	sl, [r4, #19]
    f3c2:	fa5f fa8a 	uxtb.w	sl, sl
    f3c6:	f1ba 0f04 	cmp.w	sl, #4
    f3ca:	d121      	bne.n	f410 <isr+0x1038>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f3cc:	7933      	ldrb	r3, [r6, #4]
    f3ce:	f043 0303 	orr.w	r3, r3, #3
    f3d2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f3d4:	2317      	movs	r3, #23
    f3d6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f3d8:	2303      	movs	r3, #3
    f3da:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    f3dc:	2208      	movs	r2, #8
    f3de:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    f3e2:	3004      	adds	r0, #4
    f3e4:	f7f2 fc1c 	bl	1c20 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    f3e8:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f3ec:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    f3ee:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    f3f2:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    f3f4:	f106 0112 	add.w	r1, r6, #18
    f3f8:	2208      	movs	r2, #8
    f3fa:	6860      	ldr	r0, [r4, #4]
    f3fc:	f003 fef8 	bl	131f0 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    f400:	f106 011a 	add.w	r1, r6, #26
    f404:	4652      	mov	r2, sl
    f406:	6860      	ldr	r0, [r4, #4]
    f408:	f003 fef2 	bl	131f0 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    f40c:	2600      	movs	r6, #0
    f40e:	e7c9      	b.n	f3a4 <isr+0xfcc>
			_radio.conn_curr->pause_tx = 1;
    f410:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f414:	f043 0308 	orr.w	r3, r3, #8
    f418:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f41c:	e7c2      	b.n	f3a4 <isr+0xfcc>
		_radio.conn_curr->pause_rx = 0;
    f41e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    f422:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f426:	f36f 03c3 	bfc	r3, #3, #1
    f42a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    f42e:	2300      	movs	r3, #0
    f430:	e7c2      	b.n	f3b8 <isr+0xfe0>
		if ((_radio.conn_curr->llcp_length.req !=
    f432:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    f436:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    f43a:	429a      	cmp	r2, r3
    f43c:	d0b2      	beq.n	f3a4 <isr+0xfcc>
		    (_radio.conn_curr->llcp_length.state ==
    f43e:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    f442:	f003 0203 	and.w	r2, r3, #3
    f446:	2a01      	cmp	r2, #1
    f448:	d1ac      	bne.n	f3a4 <isr+0xfcc>
			_radio.conn_curr->pause_tx = 1;
    f44a:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    f44e:	f042 0208 	orr.w	r2, r2, #8
    f452:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    f456:	2202      	movs	r2, #2
    f458:	f362 0301 	bfi	r3, r2, #0, #2
    f45c:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    f460:	e7a0      	b.n	f3a4 <isr+0xfcc>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f462:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f466:	2202      	movs	r2, #2
    f468:	f362 0301 	bfi	r3, r2, #0, #2
    f46c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f470:	7ce3      	ldrb	r3, [r4, #19]
    f472:	2b03      	cmp	r3, #3
    f474:	d196      	bne.n	f3a4 <isr+0xfcc>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f476:	2301      	movs	r3, #1
    f478:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f47c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f480:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f484:	2202      	movs	r2, #2
    f486:	2304      	movs	r3, #4
    f488:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f48c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f490:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f494:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f498:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f49c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f4a0:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f4a4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f4a8:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f4ac:	f003 0307 	and.w	r3, r3, #7
    f4b0:	aa12      	add	r2, sp, #72	; 0x48
    f4b2:	4413      	add	r3, r2
    f4b4:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f4b8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f4bc:	f363 0202 	bfi	r2, r3, #0, #3
    f4c0:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f4c4:	e76e      	b.n	f3a4 <isr+0xfcc>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f4c6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f4ca:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f4ce:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f4d2:	e7f3      	b.n	f4bc <isr+0x10e4>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f4d4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f4d8:	4293      	cmp	r3, r2
    f4da:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f4dc:	bf08      	it	eq
    f4de:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f4e2:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f4e6:	b37d      	cbz	r5, f548 <isr+0x1170>
		connection_release(_radio.conn_curr);
    f4e8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f4ec:	f7fb fbfa 	bl	ace4 <connection_release>
		_radio.conn_curr = NULL;
    f4f0:	2300      	movs	r3, #0
    f4f2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    f4f6:	f003 f801 	bl	124fc <radio_tmr_aa_restore>
    f4fa:	b918      	cbnz	r0, f504 <isr+0x112c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f4fc:	f002 fff2 	bl	124e4 <radio_tmr_aa_get>
    f500:	f002 fff6 	bl	124f0 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f504:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f508:	2b00      	cmp	r3, #0
    f50a:	f43f a810 	beq.w	e52e <isr+0x156>
	if (tx_release) {
    f50e:	b11e      	cbz	r6, f518 <isr+0x1140>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f510:	4631      	mov	r1, r6
    f512:	8c18      	ldrh	r0, [r3, #32]
    f514:	f7fb fb5c 	bl	abd0 <pdu_node_tx_release>
	if (rx_enqueue) {
    f518:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f51c:	2b00      	cmp	r3, #0
    f51e:	f43f a806 	beq.w	e52e <isr+0x156>
		rx_fc_lock(_radio.conn_curr->handle);
    f522:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f526:	8c18      	ldrh	r0, [r3, #32]
    f528:	f7fb f940 	bl	a7ac <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f52c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f530:	8c1b      	ldrh	r3, [r3, #32]
    f532:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f536:	f7fb f847 	bl	a5c8 <packet_rx_enqueue>
    f53a:	f7fe bff8 	b.w	e52e <isr+0x156>
			_radio.conn_curr->empty = 0;
    f53e:	f36f 13c7 	bfc	r3, #7, #1
    f542:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f546:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f548:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f54c:	f898 2008 	ldrb.w	r2, [r8, #8]
    f550:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f554:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f558:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f55c:	429a      	cmp	r2, r3
    f55e:	f040 80ed 	bne.w	f73c <isr+0x1364>
	    (packet_rx_reserve_get(3) != 0) &&
    f562:	2003      	movs	r0, #3
    f564:	f7fa f9ba 	bl	98dc <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f568:	2800      	cmp	r0, #0
    f56a:	f000 80e7 	beq.w	f73c <isr+0x1364>
	    (packet_rx_reserve_get(3) != 0) &&
    f56e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f572:	b393      	cbz	r3, f5da <isr+0x1202>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f574:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    f578:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    f57c:	4293      	cmp	r3, r2
    f57e:	d105      	bne.n	f58c <isr+0x11b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f580:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f584:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    f588:	4291      	cmp	r1, r2
    f58a:	d026      	beq.n	f5da <isr+0x1202>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f58c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    f590:	4293      	cmp	r3, r2
    f592:	f000 80d3 	beq.w	f73c <isr+0x1364>
	      (_radio.fc_req != _radio.fc_ack) &&
    f596:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f59a:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f59e:	429a      	cmp	r2, r3
    f5a0:	f000 80cc 	beq.w	f73c <isr+0x1364>
		(((_radio.fc_req == 0) &&
    f5a4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    f5a8:	b933      	cbnz	r3, f5b8 <isr+0x11e0>
		   _radio.conn_curr->handle)) ||
    f5aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    f5ae:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    f5b2:	8c1b      	ldrh	r3, [r3, #32]
    f5b4:	429a      	cmp	r2, r3
    f5b6:	d010      	beq.n	f5da <isr+0x1202>
		 ((_radio.fc_req != 0) &&
    f5b8:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    f5bc:	2b00      	cmp	r3, #0
    f5be:	f000 80bd 	beq.w	f73c <isr+0x1364>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f5c2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    f5c6:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f5ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f5ce:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    f5d2:	8c0b      	ldrh	r3, [r1, #32]
    f5d4:	429a      	cmp	r2, r3
    f5d6:	f040 80b1 	bne.w	f73c <isr+0x1364>
		if (pdu_data_rx->len != 0) {
    f5da:	f898 5009 	ldrb.w	r5, [r8, #9]
    f5de:	2d00      	cmp	r5, #0
    f5e0:	f000 80b5 	beq.w	f74e <isr+0x1376>
			if (_radio.conn_curr->enc_rx) {
    f5e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f5e8:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f5ec:	f015 0510 	ands.w	r5, r5, #16
    f5f0:	d00d      	beq.n	f60e <isr+0x1236>
				done = radio_ccm_is_done();
    f5f2:	f003 f80f 	bl	12614 <radio_ccm_is_done>
				LL_ASSERT(done);
    f5f6:	b948      	cbnz	r0, f60c <isr+0x1234>
    f5f8:	4a2a      	ldr	r2, [pc, #168]	; (f6a4 <isr+0x12cc>)
    f5fa:	4b2b      	ldr	r3, [pc, #172]	; (f6a8 <isr+0x12d0>)
    f5fc:	9201      	str	r2, [sp, #4]
    f5fe:	9200      	str	r2, [sp, #0]
    f600:	681c      	ldr	r4, [r3, #0]
    f602:	492a      	ldr	r1, [pc, #168]	; (f6ac <isr+0x12d4>)
    f604:	4b2a      	ldr	r3, [pc, #168]	; (f6b0 <isr+0x12d8>)
    f606:	482b      	ldr	r0, [pc, #172]	; (f6b4 <isr+0x12dc>)
    f608:	f7ff ba99 	b.w	eb3e <isr+0x766>
				ccm_rx_increment = 1;
    f60c:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f60e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f612:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f616:	06d9      	lsls	r1, r3, #27
    f618:	d42c      	bmi.n	f674 <isr+0x129c>
			    (_radio.conn_curr->pause_rx &&
    f61a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f61e:	f898 3008 	ldrb.w	r3, [r8, #8]
    f622:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f626:	f012 0f04 	tst.w	r2, #4
    f62a:	d145      	bne.n	f6b8 <isr+0x12e0>
			_radio.conn_curr->appto_expire = 0;
    f62c:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f62e:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f632:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f636:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f63a:	d004      	beq.n	f646 <isr+0x126e>
    f63c:	2b02      	cmp	r3, #2
    f63e:	d876      	bhi.n	f72e <isr+0x1356>
				*rx_enqueue = 1;
    f640:	2301      	movs	r3, #1
    f642:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f646:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f64a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f64e:	f082 0202 	eor.w	r2, r2, #2
    f652:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f656:	2d00      	cmp	r5, #0
    f658:	d070      	beq.n	f73c <isr+0x1364>
				_radio.conn_curr->ccm_rx.counter++;
    f65a:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f65e:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f662:	f119 0001 	adds.w	r0, r9, #1
    f666:	f14a 0100 	adc.w	r1, sl, #0
    f66a:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f66e:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f672:	e063      	b.n	f73c <isr+0x1364>
			     !radio_ccm_mic_is_valid()) ||
    f674:	f002 ffec 	bl	12650 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f678:	2800      	cmp	r0, #0
    f67a:	d1ce      	bne.n	f61a <isr+0x1242>
				_radio.state = STATE_CLOSE;
    f67c:	2303      	movs	r3, #3
    f67e:	7523      	strb	r3, [r4, #20]
				radio_disable();
    f680:	f002 fd76 	bl	12170 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f684:	f002 fd92 	bl	121ac <radio_is_ready>
    f688:	4605      	mov	r5, r0
    f68a:	2800      	cmp	r0, #0
    f68c:	d043      	beq.n	f716 <isr+0x133e>
    f68e:	4a05      	ldr	r2, [pc, #20]	; (f6a4 <isr+0x12cc>)
    f690:	4b05      	ldr	r3, [pc, #20]	; (f6a8 <isr+0x12d0>)
    f692:	9201      	str	r2, [sp, #4]
    f694:	9200      	str	r2, [sp, #0]
    f696:	681c      	ldr	r4, [r3, #0]
    f698:	4b05      	ldr	r3, [pc, #20]	; (f6b0 <isr+0x12d8>)
    f69a:	f7fe befd 	b.w	e498 <isr+0xc0>
    f69e:	bf00      	nop
    f6a0:	20000a4c 	.word	0x20000a4c
    f6a4:	00014891 	.word	0x00014891
    f6a8:	20003aa4 	.word	0x20003aa4
    f6ac:	00015639 	.word	0x00015639
    f6b0:	00016adf 	.word	0x00016adf
    f6b4:	00017137 	.word	0x00017137
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f6b8:	f003 0103 	and.w	r1, r3, #3
    f6bc:	2903      	cmp	r1, #3
    f6be:	d1dd      	bne.n	f67c <isr+0x12a4>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f6c0:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f6c4:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f6c8:	f1be 0f00 	cmp.w	lr, #0
    f6cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f6d0:	db15      	blt.n	f6fe <isr+0x1326>
	       (!conn->role &&
    f6d2:	b922      	cbnz	r2, f6de <isr+0x1306>
		((!conn->refresh &&
    f6d4:	2902      	cmp	r1, #2
    f6d6:	d0a9      	beq.n	f62c <isr+0x1254>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f6d8:	2911      	cmp	r1, #17
    f6da:	d8cf      	bhi.n	f67c <isr+0x12a4>
    f6dc:	e009      	b.n	f6f2 <isr+0x131a>
		 (conn->refresh &&
    f6de:	1e8a      	subs	r2, r1, #2
    f6e0:	b2d2      	uxtb	r2, r2
    f6e2:	2a09      	cmp	r2, #9
    f6e4:	d8f8      	bhi.n	f6d8 <isr+0x1300>
    f6e6:	f240 2e05 	movw	lr, #517	; 0x205
    f6ea:	fa2e f202 	lsr.w	r2, lr, r2
    f6ee:	07d2      	lsls	r2, r2, #31
    f6f0:	d49c      	bmi.n	f62c <isr+0x1254>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f6f2:	4aaf      	ldr	r2, [pc, #700]	; (f9b0 <isr+0x15d8>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f6f4:	fa22 f101 	lsr.w	r1, r2, r1
    f6f8:	07ca      	lsls	r2, r1, #31
    f6fa:	d5bf      	bpl.n	f67c <isr+0x12a4>
    f6fc:	e796      	b.n	f62c <isr+0x1254>
	       (conn->role &&
    f6fe:	b92a      	cbnz	r2, f70c <isr+0x1334>
		((!conn->refresh &&
    f700:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f702:	d093      	beq.n	f62c <isr+0x1254>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f704:	2911      	cmp	r1, #17
    f706:	d8b9      	bhi.n	f67c <isr+0x12a4>
    f708:	4aaa      	ldr	r2, [pc, #680]	; (f9b4 <isr+0x15dc>)
    f70a:	e7f3      	b.n	f6f4 <isr+0x131c>
		 (conn->refresh &&
    f70c:	1e8a      	subs	r2, r1, #2
    f70e:	2a01      	cmp	r2, #1
    f710:	d98c      	bls.n	f62c <isr+0x1254>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f712:	290b      	cmp	r1, #11
    f714:	e7f5      	b.n	f702 <isr+0x132a>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    f716:	213d      	movs	r1, #61	; 0x3d
    f718:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f71c:	f7fb fc94 	bl	b048 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    f720:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f724:	f7fb fade 	bl	ace4 <connection_release>
				_radio.conn_curr = NULL;
    f728:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    f72c:	e6e3      	b.n	f4f6 <isr+0x111e>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    f72e:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    f732:	4640      	mov	r0, r8
    f734:	f7fd fd1c 	bl	d170 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    f738:	2800      	cmp	r0, #0
    f73a:	d084      	beq.n	f646 <isr+0x126e>
		_radio.conn_curr->supervision_expire = 0;
    f73c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    f740:	2300      	movs	r3, #0
    f742:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    f746:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    f748:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    f74c:	e03e      	b.n	f7cc <isr+0x13f4>
		} else if ((_radio.conn_curr->enc_rx) ||
    f74e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f752:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    f756:	f013 0f14 	tst.w	r3, #20
    f75a:	f43f af74 	beq.w	f646 <isr+0x126e>
					    (conn->latency + 6)) ?
    f75e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    f760:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    f764:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    f766:	4299      	cmp	r1, r3
    f768:	bfc4      	itt	gt
    f76a:	1f8b      	subgt	r3, r1, #6
    f76c:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    f76e:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    f772:	bfcc      	ite	gt
    f774:	b29b      	uxthgt	r3, r3
    f776:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    f778:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    f77a:	bf1e      	ittt	ne
    f77c:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    f780:	2300      	movne	r3, #0
    f782:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    f786:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f78a:	2b00      	cmp	r3, #0
    f78c:	f47f af5b 	bne.w	f646 <isr+0x126e>
				conn->appto_expire = conn->appto_reload;
    f790:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    f794:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    f798:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    f79c:	e753      	b.n	f646 <isr+0x126e>
		if (_radio.crc_expire == 0) {
    f79e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    f7a2:	b913      	cbnz	r3, f7aa <isr+0x13d2>
			_radio.crc_expire = 2;
    f7a4:	2302      	movs	r3, #2
    f7a6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    f7aa:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f7ae:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    f7b2:	3b01      	subs	r3, #1
    f7b4:	b2db      	uxtb	r3, r3
    f7b6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f7ba:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    f7be:	fab3 f583 	clz	r5, r3
    f7c2:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    f7c4:	bb86      	cbnz	r6, f828 <isr+0x1450>
			_radio.conn_curr->supervision_expire =
    f7c6:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    f7c8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f7cc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f7d0:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f7d2:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f7d6:	f7fd fb8b 	bl	cef0 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f7da:	7d23      	ldrb	r3, [r4, #20]
    f7dc:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f7de:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f7e2:	d010      	beq.n	f806 <isr+0x142e>
    f7e4:	bb15      	cbnz	r5, f82c <isr+0x1454>
    f7e6:	b137      	cbz	r7, f7f6 <isr+0x141e>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f7e8:	f898 3008 	ldrb.w	r3, [r8, #8]
    f7ec:	06d8      	lsls	r0, r3, #27
    f7ee:	d402      	bmi.n	f7f6 <isr+0x141e>
			 (pdu_data_tx->len == 0)) ||
    f7f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f7f2:	785b      	ldrb	r3, [r3, #1]
    f7f4:	b1d3      	cbz	r3, f82c <isr+0x1454>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    f7f6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    f7fa:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f7fe:	2b00      	cmp	r3, #0
    f800:	bf0c      	ite	eq
    f802:	2302      	moveq	r3, #2
    f804:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    f806:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f808:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    f80a:	d12f      	bne.n	f86c <isr+0x1494>
		if (_radio.role == ROLE_MASTER) {
    f80c:	7ce3      	ldrb	r3, [r4, #19]
    f80e:	2b04      	cmp	r3, #4
    f810:	d10e      	bne.n	f830 <isr+0x1458>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    f812:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f816:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f81a:	f369 12c7 	bfi	r2, r9, #7, #1
    f81e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    f822:	f002 fca5 	bl	12170 <radio_disable>
    f826:	e666      	b.n	f4f6 <isr+0x111e>
	struct radio_pdu_node_tx *tx_release = NULL;
    f828:	2600      	movs	r6, #0
    f82a:	e7cf      	b.n	f7cc <isr+0x13f4>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f82c:	2303      	movs	r3, #3
    f82e:	e7ea      	b.n	f806 <isr+0x142e>
			radio_switch_complete_and_disable();
    f830:	f002 fd0e 	bl	12250 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    f834:	9910      	ldr	r1, [sp, #64]	; 0x40
    f836:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f83a:	780b      	ldrb	r3, [r1, #0]
    f83c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    f840:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    f844:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f848:	f362 0382 	bfi	r3, r2, #2, #1
    f84c:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    f84e:	f7fa fbdb 	bl	a008 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    f852:	f002 fcab 	bl	121ac <radio_is_ready>
    f856:	2800      	cmp	r0, #0
    f858:	f43f ae4d 	beq.w	f4f6 <isr+0x111e>
    f85c:	4a56      	ldr	r2, [pc, #344]	; (f9b8 <isr+0x15e0>)
    f85e:	4b57      	ldr	r3, [pc, #348]	; (f9bc <isr+0x15e4>)
    f860:	9201      	str	r2, [sp, #4]
    f862:	9200      	str	r2, [sp, #0]
    f864:	681c      	ldr	r4, [r3, #0]
    f866:	4b56      	ldr	r3, [pc, #344]	; (f9c0 <isr+0x15e8>)
    f868:	f7fe be16 	b.w	e498 <isr+0xc0>
		radio_tmr_tifs_set(RADIO_TIFS);
    f86c:	2096      	movs	r0, #150	; 0x96
    f86e:	f002 fd75 	bl	1235c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    f872:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f876:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f87a:	f000 0007 	and.w	r0, r0, #7
    f87e:	f002 fcd1 	bl	12224 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    f882:	f002 fe47 	bl	12514 <radio_tmr_end_capture>
    f886:	e7d5      	b.n	f834 <isr+0x145c>
		LL_ASSERT(0);
    f888:	4a4b      	ldr	r2, [pc, #300]	; (f9b8 <isr+0x15e0>)
    f88a:	4b4c      	ldr	r3, [pc, #304]	; (f9bc <isr+0x15e4>)
    f88c:	9201      	str	r2, [sp, #4]
    f88e:	9200      	str	r2, [sp, #0]
    f890:	681c      	ldr	r4, [r3, #0]
    f892:	4b4c      	ldr	r3, [pc, #304]	; (f9c4 <isr+0x15ec>)
    f894:	f7fe be9a 	b.w	e5cc <isr+0x1f4>
	switch (_radio.role) {
    f898:	7ce2      	ldrb	r2, [r4, #19]
    f89a:	2a04      	cmp	r2, #4
    f89c:	f200 8241 	bhi.w	fd22 <isr+0x194a>
    f8a0:	e8df f012 	tbh	[pc, r2, lsl #1]
    f8a4:	0005022e 	.word	0x0005022e
    f8a8:	00c20059 	.word	0x00c20059
    f8ac:	00c2      	.short	0x00c2
	if ((_radio.state == STATE_CLOSE) &&
    f8ae:	2b03      	cmp	r3, #3
    f8b0:	d109      	bne.n	f8c6 <isr+0x14ee>
	    (_radio.advertiser.chan_map_current != 0)) {
    f8b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    f8b6:	0759      	lsls	r1, r3, #29
    f8b8:	d005      	beq.n	f8c6 <isr+0x14ee>
		adv_setup();
    f8ba:	f7fb fae7 	bl	ae8c <adv_setup>
		radio_tx_enable();
    f8be:	f002 fc51 	bl	12164 <radio_tx_enable>
    f8c2:	f7fe be04 	b.w	e4ce <isr+0xf6>
		radio_filter_disable();
    f8c6:	f002 fd0d 	bl	122e4 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    f8ca:	7d23      	ldrb	r3, [r4, #20]
    f8cc:	2b03      	cmp	r3, #3
    f8ce:	f040 8091 	bne.w	f9f4 <isr+0x161c>
		    (!_radio.advertiser.is_hdcd)) {
    f8d2:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    f8d6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    f8da:	f040 808b 	bne.w	f9f4 <isr+0x161c>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    f8de:	2201      	movs	r2, #1
    f8e0:	a910      	add	r1, sp, #64	; 0x40
    f8e2:	6860      	ldr	r0, [r4, #4]
    f8e4:	f003 fc84 	bl	131f0 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    f8e8:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f8ec:	4836      	ldr	r0, [pc, #216]	; (f9c8 <isr+0x15f0>)
			random_delay %= 10;
    f8ee:	230a      	movs	r3, #10
    f8f0:	fbb1 f2f3 	udiv	r2, r1, r3
    f8f4:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    f8f8:	3201      	adds	r2, #1
    f8fa:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    f8fc:	b2d6      	uxtb	r6, r2
    f8fe:	fba6 0100 	umull	r0, r1, r6, r0
    f902:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    f904:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f908:	fb03 1106 	mla	r1, r3, r6, r1
    f90c:	a326      	add	r3, pc, #152	; (adr r3, f9a8 <isr+0x15d0>)
    f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f912:	f7f0 fc7f 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    f916:	f640 734b 	movw	r3, #3915	; 0xf4b
    f91a:	9306      	str	r3, [sp, #24]
    f91c:	4b2b      	ldr	r3, [pc, #172]	; (f9cc <isr+0x15f4>)
    f91e:	9305      	str	r3, [sp, #20]
    f920:	9504      	str	r5, [sp, #16]
    f922:	b283      	uxth	r3, r0
    f924:	9503      	str	r5, [sp, #12]
    f926:	9502      	str	r5, [sp, #8]
    f928:	9501      	str	r5, [sp, #4]
    f92a:	9500      	str	r5, [sp, #0]
    f92c:	2205      	movs	r2, #5
    f92e:	4629      	mov	r1, r5
    f930:	4628      	mov	r0, r5
    f932:	f7f8 f893 	bl	7a5c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f936:	f030 0302 	bics.w	r3, r0, #2
    f93a:	d05b      	beq.n	f9f4 <isr+0x161c>
    f93c:	7ca3      	ldrb	r3, [r4, #18]
    f93e:	2b05      	cmp	r3, #5
    f940:	d058      	beq.n	f9f4 <isr+0x161c>
    f942:	4a1d      	ldr	r2, [pc, #116]	; (f9b8 <isr+0x15e0>)
    f944:	4b1d      	ldr	r3, [pc, #116]	; (f9bc <isr+0x15e4>)
    f946:	9201      	str	r2, [sp, #4]
    f948:	9200      	str	r2, [sp, #0]
    f94a:	681c      	ldr	r4, [r3, #0]
    f94c:	4920      	ldr	r1, [pc, #128]	; (f9d0 <isr+0x15f8>)
    f94e:	4b21      	ldr	r3, [pc, #132]	; (f9d4 <isr+0x15fc>)
    f950:	4821      	ldr	r0, [pc, #132]	; (f9d8 <isr+0x1600>)
    f952:	f7ff b8f4 	b.w	eb3e <isr+0x766>
	if (_radio.state == STATE_CLOSE) {
    f956:	2b03      	cmp	r3, #3
    f958:	d140      	bne.n	f9dc <isr+0x1604>
		radio_tmr_tifs_set(RADIO_TIFS);
    f95a:	2096      	movs	r0, #150	; 0x96
    f95c:	f002 fcfe 	bl	1235c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f960:	2300      	movs	r3, #0
    f962:	4619      	mov	r1, r3
    f964:	461a      	mov	r2, r3
    f966:	4618      	mov	r0, r3
    f968:	f002 fc68 	bl	1223c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f96c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f970:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f974:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f978:	3008      	adds	r0, #8
    f97a:	f002 fbd3 	bl	12124 <radio_pkt_rx_set>
		radio_rssi_measure();
    f97e:	f002 fc75 	bl	1226c <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f982:	f001 ff13 	bl	117ac <ctrl_rl_enabled>
    f986:	b138      	cbz	r0, f998 <isr+0x15c0>
			u8_t count, *irks = ctrl_irks_get(&count);
    f988:	a810      	add	r0, sp, #64	; 0x40
    f98a:	f001 fc5f 	bl	1124c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f98e:	4601      	mov	r1, r0
    f990:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f994:	f002 fe66 	bl	12664 <radio_ar_configure>
		_radio.state = STATE_RX;
    f998:	2301      	movs	r3, #1
    f99a:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    f99c:	f002 fbdc 	bl	12158 <radio_rx_enable>
    f9a0:	f7fe bd95 	b.w	e4ce <isr+0xf6>
    f9a4:	f3af 8000 	nop.w
    f9a8:	1afd498d 	.word	0x1afd498d
    f9ac:	00000007 	.word	0x00000007
    f9b0:	00022060 	.word	0x00022060
    f9b4:	00022040 	.word	0x00022040
    f9b8:	00014891 	.word	0x00014891
    f9bc:	20003aa4 	.word	0x20003aa4
    f9c0:	00016aef 	.word	0x00016aef
    f9c4:	00016afb 	.word	0x00016afb
    f9c8:	d4a51000 	.word	0xd4a51000
    f9cc:	0000a8ed 	.word	0x0000a8ed
    f9d0:	00015639 	.word	0x00015639
    f9d4:	00016b0e 	.word	0x00016b0e
    f9d8:	0001715d 	.word	0x0001715d
		radio_filter_disable();
    f9dc:	f002 fc82 	bl	122e4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f9e0:	7d23      	ldrb	r3, [r4, #20]
    f9e2:	2b05      	cmp	r3, #5
    f9e4:	d106      	bne.n	f9f4 <isr+0x161c>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f9e6:	2300      	movs	r3, #0
    f9e8:	9300      	str	r3, [sp, #0]
    f9ea:	2204      	movs	r2, #4
    f9ec:	4619      	mov	r1, r3
    f9ee:	4618      	mov	r0, r3
    f9f0:	f7f8 f882 	bl	7af8 <ticker_stop>
	_radio.role = ROLE_NONE;
    f9f4:	2500      	movs	r5, #0
    f9f6:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    f9f8:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    f9fa:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    f9fc:	f002 fd2c 	bl	12458 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fa00:	462a      	mov	r2, r5
    fa02:	4629      	mov	r1, r5
    fa04:	4628      	mov	r0, r5
    fa06:	4baa      	ldr	r3, [pc, #680]	; (fcb0 <isr+0x18d8>)
    fa08:	f7f7 fa1a 	bl	6e40 <mayfly_enqueue>
	LL_ASSERT(!retval);
    fa0c:	4605      	mov	r5, r0
    fa0e:	2800      	cmp	r0, #0
    fa10:	f000 818f 	beq.w	fd32 <isr+0x195a>
    fa14:	4aa7      	ldr	r2, [pc, #668]	; (fcb4 <isr+0x18dc>)
    fa16:	4ba8      	ldr	r3, [pc, #672]	; (fcb8 <isr+0x18e0>)
    fa18:	9201      	str	r2, [sp, #4]
    fa1a:	9200      	str	r2, [sp, #0]
    fa1c:	681c      	ldr	r4, [r3, #0]
    fa1e:	49a7      	ldr	r1, [pc, #668]	; (fcbc <isr+0x18e4>)
    fa20:	4ba7      	ldr	r3, [pc, #668]	; (fcc0 <isr+0x18e8>)
    fa22:	48a8      	ldr	r0, [pc, #672]	; (fcc4 <isr+0x18ec>)
    fa24:	f7ff b88b 	b.w	eb3e <isr+0x766>
	if (_radio.conn_curr == 0) {
    fa28:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa2c:	2800      	cmp	r0, #0
    fa2e:	d0e1      	beq.n	f9f4 <isr+0x161c>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    fa30:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    fa34:	b181      	cbz	r1, fa58 <isr+0x1680>
    fa36:	7ce3      	ldrb	r3, [r4, #19]
    fa38:	2b03      	cmp	r3, #3
    fa3a:	d003      	beq.n	fa44 <isr+0x166c>
    fa3c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fa40:	07da      	lsls	r2, r3, #31
    fa42:	d509      	bpl.n	fa58 <isr+0x1680>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fa44:	f7fb fb00 	bl	b048 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fa48:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa4c:	f7fb f94a 	bl	ace4 <connection_release>
			_radio.conn_curr = NULL;
    fa50:	2300      	movs	r3, #0
    fa52:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fa56:	e7cd      	b.n	f9f4 <isr+0x161c>
	latency_event = _radio.conn_curr->latency_event;
    fa58:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    fa5c:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    fa60:	f10b 0601 	add.w	r6, fp, #1
    fa64:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    fa66:	2f00      	cmp	r7, #0
    fa68:	f000 8084 	beq.w	fb74 <isr+0x179c>
		if (_radio.role == ROLE_SLAVE) {
    fa6c:	7ce3      	ldrb	r3, [r4, #19]
    fa6e:	2b03      	cmp	r3, #3
    fa70:	d173      	bne.n	fb5a <isr+0x1782>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    fa72:	f002 fd43 	bl	124fc <radio_tmr_aa_restore>
    fa76:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    fa78:	f002 fd46 	bl	12508 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    fa7c:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    fa80:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    fa84:	f003 0307 	and.w	r3, r3, #7
    fa88:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    fa8a:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    fa8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    fa90:	d052      	beq.n	fb38 <isr+0x1760>
		return 40;
    fa92:	2b04      	cmp	r3, #4
    fa94:	bf0c      	ite	eq
    fa96:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    fa9a:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    fa9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    faa2:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    faa4:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    faa6:	930a      	str	r3, [sp, #40]	; 0x28
    faa8:	f8df a228 	ldr.w	sl, [pc, #552]	; fcd4 <isr+0x18fc>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    faac:	a37e      	add	r3, pc, #504	; (adr r3, fca8 <isr+0x18d0>)
    faae:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    fab2:	d844      	bhi.n	fb3e <isr+0x1766>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fab4:	fba0 010a 	umull	r0, r1, r0, sl
    fab8:	f7f0 fbac 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fabe:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fac0:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fac4:	a378      	add	r3, pc, #480	; (adr r3, fca8 <isr+0x18d0>)
    fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
    faca:	fba0 010a 	umull	r0, r1, r0, sl
    face:	f7f0 fba1 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    fad2:	2300      	movs	r3, #0
    fad4:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    fad6:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    fad8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fadc:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    fae0:	b3ab      	cbz	r3, fb4e <isr+0x1776>
				if (pdu_data_tx->len ||
    fae2:	795b      	ldrb	r3, [r3, #5]
    fae4:	b913      	cbnz	r3, faec <isr+0x1714>
    fae6:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    faea:	b10b      	cbz	r3, faf0 <isr+0x1718>
					_radio.conn_curr->latency_event = 0;
    faec:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    faee:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    faf0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    faf4:	2200      	movs	r2, #0
    faf6:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    faf8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fafc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    fb00:	b1c3      	cbz	r3, fb34 <isr+0x175c>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    fb02:	429e      	cmp	r6, r3
    fb04:	f080 80b1 	bcs.w	fc6a <isr+0x1892>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fb08:	1b9b      	subs	r3, r3, r6
    fb0a:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    fb0c:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    fb0e:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fb10:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    fb14:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    fb16:	f240 80aa 	bls.w	fc6e <isr+0x1896>
			else if (_radio.role == ROLE_SLAVE) {
    fb1a:	7ce3      	ldrb	r3, [r4, #19]
    fb1c:	2b03      	cmp	r3, #3
    fb1e:	d109      	bne.n	fb34 <isr+0x175c>
				if (latency_event != 0) {
    fb20:	f1bb 0f00 	cmp.w	fp, #0
    fb24:	f040 80a3 	bne.w	fc6e <isr+0x1896>
					force = _radio.conn_curr->slave.force & 0x01;
    fb28:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    fb2a:	087b      	lsrs	r3, r7, #1
					if (force) {
    fb2c:	f017 0701 	ands.w	r7, r7, #1
    fb30:	d13d      	bne.n	fbae <isr+0x17d6>
					_radio.conn_curr->slave.force >>= 1;
    fb32:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    fb34:	2700      	movs	r7, #0
    fb36:	e03d      	b.n	fbb4 <isr+0x17dc>
		return 24;
    fb38:	f04f 0818 	mov.w	r8, #24
    fb3c:	e7af      	b.n	fa9e <isr+0x16c6>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fb3e:	fba9 010a 	umull	r0, r1, r9, sl
    fb42:	f7f0 fb67 	bl	214 <__aeabi_uldivmod>
    fb46:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fb48:	f108 0030 	add.w	r0, r8, #48	; 0x30
    fb4c:	e7ba      	b.n	fac4 <isr+0x16ec>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    fb4e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    fb52:	07db      	lsls	r3, r3, #31
    fb54:	d5cc      	bpl.n	faf0 <isr+0x1718>
				_radio.conn_curr->latency_event =
    fb56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    fb58:	e7c9      	b.n	faee <isr+0x1716>
		} else if (reason_peer) {
    fb5a:	b149      	cbz	r1, fb70 <isr+0x1798>
			_radio.conn_curr->master.terminate_ack = 1;
    fb5c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fb60:	f043 0301 	orr.w	r3, r3, #1
    fb64:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    fb68:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    fb6c:	4645      	mov	r5, r8
    fb6e:	e7bf      	b.n	faf0 <isr+0x1718>
	ticks_drift_minus = 0;
    fb70:	4688      	mov	r8, r1
    fb72:	e7fb      	b.n	fb6c <isr+0x1794>
	else if (_radio.conn_curr->connect_expire) {
    fb74:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    fb76:	b185      	cbz	r5, fb9a <isr+0x17c2>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    fb78:	42ae      	cmp	r6, r5
    fb7a:	d204      	bcs.n	fb86 <isr+0x17ae>
			_radio.conn_curr->connect_expire -= elapsed_event;
    fb7c:	1bad      	subs	r5, r5, r6
    fb7e:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    fb80:	463d      	mov	r5, r7
    fb82:	46a8      	mov	r8, r5
    fb84:	e7b8      	b.n	faf8 <isr+0x1720>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    fb86:	213e      	movs	r1, #62	; 0x3e
    fb88:	f7fb fa5e 	bl	b048 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fb8c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fb90:	f7fb f8a8 	bl	ace4 <connection_release>
			_radio.conn_curr = NULL;
    fb94:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    fb98:	e72c      	b.n	f9f4 <isr+0x161c>
		if (!_radio.conn_curr->supervision_expire) {
    fb9a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    fb9e:	f1b8 0f00 	cmp.w	r8, #0
    fba2:	d1ee      	bne.n	fb82 <isr+0x17aa>
			_radio.conn_curr->supervision_expire =
    fba4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    fba6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    fbaa:	4645      	mov	r5, r8
    fbac:	e7a4      	b.n	faf8 <isr+0x1720>
						_radio.conn_curr->slave.force |=
    fbae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fbb2:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    fbb4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    fbb8:	b123      	cbz	r3, fbc4 <isr+0x17ec>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    fbba:	429e      	cmp	r6, r3
    fbbc:	d259      	bcs.n	fc72 <isr+0x189a>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fbbe:	1b9b      	subs	r3, r3, r6
    fbc0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    fbc4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    fbc8:	b123      	cbz	r3, fbd4 <isr+0x17fc>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    fbca:	429e      	cmp	r6, r3
    fbcc:	d253      	bcs.n	fc76 <isr+0x189e>
			_radio.conn_curr->apto_expire -= elapsed_event;
    fbce:	1b9b      	subs	r3, r3, r6
    fbd0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    fbd4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fbd8:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    fbdc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    fbe0:	b123      	cbz	r3, fbec <isr+0x1814>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    fbe2:	429e      	cmp	r6, r3
    fbe4:	d278      	bcs.n	fcd8 <isr+0x1900>
			_radio.conn_curr->appto_expire -= elapsed_event;
    fbe6:	1b9e      	subs	r6, r3, r6
    fbe8:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fbec:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fbf0:	428b      	cmp	r3, r1
    fbf2:	d006      	beq.n	fc02 <isr+0x182a>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    fbf4:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fbf8:	3b01      	subs	r3, #1
    fbfa:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    fbfc:	bf9c      	itt	ls
    fbfe:	2300      	movls	r3, #0
    fc00:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    fc02:	b917      	cbnz	r7, fc0a <isr+0x1832>
    fc04:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fc06:	455b      	cmp	r3, fp
    fc08:	d078      	beq.n	fcfc <isr+0x1924>
		lazy = _radio.conn_curr->latency_event + 1;
    fc0a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fc0c:	3301      	adds	r3, #1
    fc0e:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    fc10:	b935      	cbnz	r5, fc20 <isr+0x1848>
    fc12:	f1b8 0f00 	cmp.w	r8, #0
    fc16:	d103      	bne.n	fc20 <isr+0x1848>
    fc18:	b913      	cbnz	r3, fc20 <isr+0x1848>
	    (lazy != 0) || (force != 0)) {
    fc1a:	2f00      	cmp	r7, #0
    fc1c:	f43f aeea 	beq.w	f9f4 <isr+0x161c>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fc20:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    fc24:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fc26:	3207      	adds	r2, #7
		ticker_status =
    fc28:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fc2a:	b2d6      	uxtb	r6, r2
		ticker_status =
    fc2c:	4a26      	ldr	r2, [pc, #152]	; (fcc8 <isr+0x18f0>)
    fc2e:	9205      	str	r2, [sp, #20]
    fc30:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    fc32:	9606      	str	r6, [sp, #24]
		ticker_status =
    fc34:	9704      	str	r7, [sp, #16]
    fc36:	9102      	str	r1, [sp, #8]
    fc38:	9101      	str	r1, [sp, #4]
    fc3a:	f8cd 8000 	str.w	r8, [sp]
    fc3e:	4632      	mov	r2, r6
    fc40:	4608      	mov	r0, r1
    fc42:	f7f7 ff0b 	bl	7a5c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fc46:	f030 0302 	bics.w	r3, r0, #2
    fc4a:	f43f aed3 	beq.w	f9f4 <isr+0x161c>
    fc4e:	7ca3      	ldrb	r3, [r4, #18]
    fc50:	429e      	cmp	r6, r3
    fc52:	f43f aecf 	beq.w	f9f4 <isr+0x161c>
    fc56:	4a17      	ldr	r2, [pc, #92]	; (fcb4 <isr+0x18dc>)
    fc58:	4b17      	ldr	r3, [pc, #92]	; (fcb8 <isr+0x18e0>)
    fc5a:	9201      	str	r2, [sp, #4]
    fc5c:	9200      	str	r2, [sp, #0]
    fc5e:	681c      	ldr	r4, [r3, #0]
    fc60:	4916      	ldr	r1, [pc, #88]	; (fcbc <isr+0x18e4>)
    fc62:	4b1a      	ldr	r3, [pc, #104]	; (fccc <isr+0x18f4>)
    fc64:	481a      	ldr	r0, [pc, #104]	; (fcd0 <isr+0x18f8>)
    fc66:	f7fe bf6a 	b.w	eb3e <isr+0x766>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fc6a:	2108      	movs	r1, #8
    fc6c:	e6ea      	b.n	fa44 <isr+0x166c>
				force = 1;
    fc6e:	2701      	movs	r7, #1
    fc70:	e7a0      	b.n	fbb4 <isr+0x17dc>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    fc72:	2122      	movs	r1, #34	; 0x22
    fc74:	e6e6      	b.n	fa44 <isr+0x166c>
			_radio.conn_curr->apto_expire = 0;
    fc76:	2300      	movs	r3, #0
    fc78:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    fc7c:	2002      	movs	r0, #2
    fc7e:	f7f9 fe2d 	bl	98dc <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fc82:	b938      	cbnz	r0, fc94 <isr+0x18bc>
    fc84:	4a0b      	ldr	r2, [pc, #44]	; (fcb4 <isr+0x18dc>)
    fc86:	4b0c      	ldr	r3, [pc, #48]	; (fcb8 <isr+0x18e0>)
    fc88:	9201      	str	r2, [sp, #4]
    fc8a:	9200      	str	r2, [sp, #0]
    fc8c:	681c      	ldr	r4, [r3, #0]
    fc8e:	4b0f      	ldr	r3, [pc, #60]	; (fccc <isr+0x18f4>)
    fc90:	f7fe be20 	b.w	e8d4 <isr+0x4fc>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    fc94:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fc98:	8c1b      	ldrh	r3, [r3, #32]
    fc9a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    fc9c:	230a      	movs	r3, #10
    fc9e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    fca0:	f7fa fc92 	bl	a5c8 <packet_rx_enqueue>
    fca4:	e796      	b.n	fbd4 <isr+0x17fc>
    fca6:	bf00      	nop
    fca8:	1afd498d 	.word	0x1afd498d
    fcac:	00000007 	.word	0x00000007
    fcb0:	20003d98 	.word	0x20003d98
    fcb4:	00014891 	.word	0x00014891
    fcb8:	20003aa4 	.word	0x20003aa4
    fcbc:	00015639 	.word	0x00015639
    fcc0:	00016bdf 	.word	0x00016bdf
    fcc4:	0001760f 	.word	0x0001760f
    fcc8:	0000a935 	.word	0x0000a935
    fccc:	00016b1c 	.word	0x00016b1c
    fcd0:	000171cb 	.word	0x000171cb
    fcd4:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->appto_expire = 0;
    fcd8:	2300      	movs	r3, #0
    fcda:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    fcde:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    fce2:	2b00      	cmp	r3, #0
    fce4:	d182      	bne.n	fbec <isr+0x1814>
    fce6:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fcea:	428b      	cmp	r3, r1
    fcec:	d182      	bne.n	fbf4 <isr+0x181c>
				_radio.conn_curr->llcp_type = LLCP_PING;
    fcee:	2307      	movs	r3, #7
    fcf0:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    fcf4:	1e4b      	subs	r3, r1, #1
    fcf6:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    fcfa:	e777      	b.n	fbec <isr+0x1814>
	lazy = 0;
    fcfc:	463b      	mov	r3, r7
    fcfe:	e787      	b.n	fc10 <isr+0x1838>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fd00:	3b04      	subs	r3, #4
    fd02:	2b01      	cmp	r3, #1
    fd04:	d909      	bls.n	fd1a <isr+0x1942>
    fd06:	4a15      	ldr	r2, [pc, #84]	; (fd5c <isr+0x1984>)
    fd08:	4b15      	ldr	r3, [pc, #84]	; (fd60 <isr+0x1988>)
    fd0a:	9201      	str	r2, [sp, #4]
    fd0c:	9200      	str	r2, [sp, #0]
    fd0e:	681c      	ldr	r4, [r3, #0]
    fd10:	4914      	ldr	r1, [pc, #80]	; (fd64 <isr+0x198c>)
    fd12:	4b15      	ldr	r3, [pc, #84]	; (fd68 <isr+0x1990>)
    fd14:	4815      	ldr	r0, [pc, #84]	; (fd6c <isr+0x1994>)
    fd16:	f7fe bf12 	b.w	eb3e <isr+0x766>
		_radio.state = STATE_NONE;
    fd1a:	2300      	movs	r3, #0
    fd1c:	7523      	strb	r3, [r4, #20]
    fd1e:	f7fe bc06 	b.w	e52e <isr+0x156>
		LL_ASSERT(0);
    fd22:	4a0e      	ldr	r2, [pc, #56]	; (fd5c <isr+0x1984>)
    fd24:	4b0e      	ldr	r3, [pc, #56]	; (fd60 <isr+0x1988>)
    fd26:	9201      	str	r2, [sp, #4]
    fd28:	9200      	str	r2, [sp, #0]
    fd2a:	681c      	ldr	r4, [r3, #0]
    fd2c:	4b0e      	ldr	r3, [pc, #56]	; (fd68 <isr+0x1990>)
    fd2e:	f7fe bc4d 	b.w	e5cc <isr+0x1f4>
	clock_control_off(_radio.hf_clock, NULL);
    fd32:	6820      	ldr	r0, [r4, #0]
    fd34:	6843      	ldr	r3, [r0, #4]
    fd36:	4629      	mov	r1, r5
    fd38:	685b      	ldr	r3, [r3, #4]
    fd3a:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fd3c:	2201      	movs	r2, #1
    fd3e:	4611      	mov	r1, r2
    fd40:	4628      	mov	r0, r5
    fd42:	f7f7 f855 	bl	6df0 <mayfly_enable>
    fd46:	f7fe bbf2 	b.w	e52e <isr+0x156>
		LL_ASSERT(0);
    fd4a:	4a04      	ldr	r2, [pc, #16]	; (fd5c <isr+0x1984>)
    fd4c:	4b04      	ldr	r3, [pc, #16]	; (fd60 <isr+0x1988>)
    fd4e:	9201      	str	r2, [sp, #4]
    fd50:	9200      	str	r2, [sp, #0]
    fd52:	681c      	ldr	r4, [r3, #0]
    fd54:	4b06      	ldr	r3, [pc, #24]	; (fd70 <isr+0x1998>)
    fd56:	f7fe bc39 	b.w	e5cc <isr+0x1f4>
    fd5a:	bf00      	nop
    fd5c:	00014891 	.word	0x00014891
    fd60:	20003aa4 	.word	0x20003aa4
    fd64:	00015639 	.word	0x00015639
    fd68:	00016b2b 	.word	0x00016b2b
    fd6c:	00017241 	.word	0x00017241
    fd70:	00016b41 	.word	0x00016b41

0000fd74 <radio_init>:
{
    fd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    fd78:	4e3d      	ldr	r6, [pc, #244]	; (fe70 <radio_init+0xfc>)
{
    fd7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fd7c:	f89d c01c 	ldrb.w	ip, [sp, #28]
    fd80:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    fd84:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    fd88:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    fd8c:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    fd8e:	f44f 70aa 	mov.w	r0, #340	; 0x154
    fd92:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    fd96:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    fd9a:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    fd9e:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    fda0:	f10c 0401 	add.w	r4, ip, #1
    fda4:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    fda6:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    fda8:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    fdac:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    fdb0:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    fdb2:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fdb4:	bf98      	it	ls
    fdb6:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    fdba:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    fdbe:	bf88      	it	hi
    fdc0:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    fdc4:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    fdc8:	bf8c      	ite	hi
    fdca:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fdce:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fdd2:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    fdd6:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fdda:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    fdde:	bf8c      	ite	hi
    fde0:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fde4:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    fde6:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    fdea:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
    fdee:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
    fdf2:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fdf6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    fdfa:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fdfe:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
    fe02:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fe06:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fe08:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
    fe0a:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fe0e:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fe10:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    fe14:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fe18:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    fe1c:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fe1e:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    fe22:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fe26:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fe2a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    fe2e:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fe32:	340a      	adds	r4, #10
    fe34:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    fe38:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fe3a:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    fe3c:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    fe40:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    fe44:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    fe46:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    fe4a:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fe4e:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    fe52:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
    fe56:	d003      	beq.n	fe60 <radio_init+0xec>
		return (retcode + mem_size);
    fe58:	442c      	add	r4, r5
}
    fe5a:	4620      	mov	r0, r4
    fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    fe60:	2301      	movs	r3, #1
    fe62:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
    fe66:	f7f9 fdfd 	bl	9a64 <common_init>
	radio_setup();
    fe6a:	f002 f8ab 	bl	11fc4 <radio_setup>
	return retcode;
    fe6e:	e7f4      	b.n	fe5a <radio_init+0xe6>
    fe70:	200008f0 	.word	0x200008f0

0000fe74 <ll_reset>:
{
    fe74:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    fe76:	2103      	movs	r1, #3
    fe78:	2005      	movs	r0, #5
    fe7a:	f7f9 fedd 	bl	9c38 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    fe7e:	2104      	movs	r1, #4
    fe80:	2006      	movs	r0, #6
    fe82:	f7f9 fed9 	bl	9c38 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    fe86:	4c22      	ldr	r4, [pc, #136]	; (ff10 <ll_reset+0x9c>)
    fe88:	2500      	movs	r5, #0
    fe8a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    fe8e:	b2ab      	uxth	r3, r5
    fe90:	429a      	cmp	r2, r3
    fe92:	f105 0501 	add.w	r5, r5, #1
    fe96:	d834      	bhi.n	ff02 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    fe98:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fe9c:	f36f 13c7 	bfc	r3, #7, #1
    fea0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    fea4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    fea8:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    feaa:	f360 0300 	bfi	r3, r0, #0, #1
    feae:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    feb2:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    feb4:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    feb8:	fbb3 f3f2 	udiv	r3, r3, r2
    febc:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fec0:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
    fec4:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fec8:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    feca:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
    fece:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fed2:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    fed6:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    feda:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    fede:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fee2:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
    fee6:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
    feea:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
    feee:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
    fef2:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
    fef6:	f001 fee7 	bl	11cc8 <ll_filter_reset>
}
    fefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    fefe:	f7f9 bdb1 	b.w	9a64 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    ff02:	1da8      	adds	r0, r5, #6
    ff04:	21ff      	movs	r1, #255	; 0xff
    ff06:	b2c0      	uxtb	r0, r0
    ff08:	f7f9 fe96 	bl	9c38 <role_disable>
    ff0c:	e7bd      	b.n	fe8a <ll_reset+0x16>
    ff0e:	bf00      	nop
    ff10:	200008f0 	.word	0x200008f0

0000ff14 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    ff14:	4b02      	ldr	r3, [pc, #8]	; (ff20 <ll_adv_is_enabled+0xc>)
    ff16:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    ff1a:	09c0      	lsrs	r0, r0, #7
    ff1c:	4770      	bx	lr
    ff1e:	bf00      	nop
    ff20:	200008f0 	.word	0x200008f0

0000ff24 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    ff24:	4b04      	ldr	r3, [pc, #16]	; (ff38 <radio_adv_filter_pol_get+0x14>)
    ff26:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    ff2a:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    ff2c:	bfba      	itte	lt
    ff2e:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    ff32:	0980      	lsrlt	r0, r0, #6
    ff34:	2000      	movge	r0, #0
}
    ff36:	4770      	bx	lr
    ff38:	200008f0 	.word	0x200008f0

0000ff3c <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    ff3c:	4a09      	ldr	r2, [pc, #36]	; (ff64 <ll_scan_is_enabled+0x28>)
    ff3e:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    ff42:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    ff46:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    ff4a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    ff4e:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    ff50:	f003 0301 	and.w	r3, r3, #1
    ff54:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    ff58:	bf14      	ite	ne
    ff5a:	2004      	movne	r0, #4
    ff5c:	2000      	moveq	r0, #0
}
    ff5e:	4318      	orrs	r0, r3
    ff60:	4770      	bx	lr
    ff62:	bf00      	nop
    ff64:	200008f0 	.word	0x200008f0

0000ff68 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    ff68:	4b05      	ldr	r3, [pc, #20]	; (ff80 <radio_scan_filter_pol_get+0x18>)
    ff6a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    ff6e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    ff72:	bf1c      	itt	ne
    ff74:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    ff78:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    ff7c:	4770      	bx	lr
    ff7e:	bf00      	nop
    ff80:	200008f0 	.word	0x200008f0
    ff84:	00000000 	.word	0x00000000

0000ff88 <radio_connect_enable>:
{
    ff88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    ff8c:	f8df 8384 	ldr.w	r8, [pc, #900]	; 10314 <__kernel_ram_size+0x314>
{
    ff90:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
    ff92:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
    ff96:	9303      	str	r3, [sp, #12]
    ff98:	4683      	mov	fp, r0
    ff9a:	468a      	mov	sl, r1
    ff9c:	4691      	mov	r9, r2
    ff9e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
    ffa0:	2e00      	cmp	r6, #0
    ffa2:	f040 819c 	bne.w	102de <__kernel_ram_size+0x2de>
	link = mem_acquire(&_radio.link_rx_free);
    ffa6:	f508 70a4 	add.w	r0, r8, #328	; 0x148
    ffaa:	f7f6 fe7e 	bl	6caa <mem_acquire>
	if (!link) {
    ffae:	4607      	mov	r7, r0
    ffb0:	b150      	cbz	r0, ffc8 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
    ffb2:	f508 7086 	add.w	r0, r8, #268	; 0x10c
    ffb6:	f7f6 fe78 	bl	6caa <mem_acquire>
	if (!conn) {
    ffba:	4604      	mov	r4, r0
    ffbc:	b930      	cbnz	r0, ffcc <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
    ffbe:	f508 71a4 	add.w	r1, r8, #328	; 0x148
    ffc2:	4638      	mov	r0, r7
    ffc4:	f7f6 fe8b 	bl	6cde <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    ffc8:	2007      	movs	r0, #7
    ffca:	e15c      	b.n	10286 <__kernel_ram_size+0x286>
	_radio.scanner.adv_addr_type = adv_addr_type;
    ffcc:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
    ffd0:	f36b 1386 	bfi	r3, fp, #6, #1
    ffd4:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    ffd8:	2206      	movs	r2, #6
    ffda:	4651      	mov	r1, sl
    ffdc:	f108 00ea 	add.w	r0, r8, #234	; 0xea
    ffe0:	f7f1 fe1e 	bl	1c20 <memcpy>
	_radio.scanner.conn_latency = latency;
    ffe4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ffe8:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    ffec:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    ffee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
    fff2:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fff6:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    fff8:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fffc:	f002 f89e 	bl	1213c <radio_tx_ready_delay_get>
   10000:	49bb      	ldr	r1, [pc, #748]	; (102f0 <__kernel_ram_size+0x2f0>)
   10002:	f200 4052 	addw	r0, r0, #1106	; 0x452
   10006:	a3b8      	add	r3, pc, #736	; (adr r3, 102e8 <__kernel_ram_size+0x2e8>)
   10008:	e9d3 2300 	ldrd	r2, r3, [r3]
   1000c:	fba0 0101 	umull	r0, r1, r0, r1
   10010:	f7f0 f900 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   10014:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10018:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1001c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   10020:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10022:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 10318 <__kernel_ram_size+0x318>
	conn->llcp_features = RADIO_BLE_FEAT;
   10026:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   1002a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   1002e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   10030:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   10034:	2104      	movs	r1, #4
   10036:	a805      	add	r0, sp, #20
   10038:	f7f7 fe6e 	bl	7d18 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   1003c:	f8dd c014 	ldr.w	ip, [sp, #20]
   10040:	2000      	movs	r0, #0
   10042:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   10046:	231f      	movs	r3, #31
	transitions = 0;
   10048:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   1004a:	2101      	movs	r1, #1
	while (bit_idx--) {
   1004c:	3b01      	subs	r3, #1
   1004e:	b2db      	uxtb	r3, r3
   10050:	2bff      	cmp	r3, #255	; 0xff
   10052:	d103      	bne.n	1005c <__kernel_ram_size+0x5c>
   10054:	b3d0      	cbz	r0, 100cc <__kernel_ram_size+0xcc>
   10056:	f8cd c014 	str.w	ip, [sp, #20]
   1005a:	e037      	b.n	100cc <__kernel_ram_size+0xcc>
		bit = (access_addr >> bit_idx) & 0x01;
   1005c:	fa2c fe03 	lsr.w	lr, ip, r3
   10060:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   10064:	45d6      	cmp	lr, sl
   10066:	d11a      	bne.n	1009e <__kernel_ram_size+0x9e>
			consecutive_cnt++;
   10068:	3101      	adds	r1, #1
   1006a:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   1006c:	2906      	cmp	r1, #6
   1006e:	d807      	bhi.n	10080 <__kernel_ram_size+0x80>
   10070:	2b1b      	cmp	r3, #27
   10072:	d81a      	bhi.n	100aa <__kernel_ram_size+0xaa>
		    ((bit_idx < 28) && (transitions < 1)) ||
   10074:	b122      	cbz	r2, 10080 <__kernel_ram_size+0x80>
   10076:	2b1b      	cmp	r3, #27
   10078:	d017      	beq.n	100aa <__kernel_ram_size+0xaa>
		    ((bit_idx < 27) && (transitions < 2))) {
   1007a:	2a01      	cmp	r2, #1
   1007c:	d815      	bhi.n	100aa <__kernel_ram_size+0xaa>
   1007e:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   10080:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   10084:	f1be 0f00 	cmp.w	lr, #0
   10088:	f000 8100 	beq.w	1028c <__kernel_ram_size+0x28c>
				access_addr &= ~BIT(bit_idx);
   1008c:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   10090:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   10094:	3201      	adds	r2, #1
   10096:	2001      	movs	r0, #1
   10098:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1009a:	4601      	mov	r1, r0
   1009c:	e005      	b.n	100aa <__kernel_ram_size+0xaa>
			transitions++;
   1009e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   100a0:	2b1b      	cmp	r3, #27
			transitions++;
   100a2:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   100a4:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   100a8:	d9e5      	bls.n	10076 <__kernel_ram_size+0x76>
		if (transitions > 24) {
   100aa:	2a18      	cmp	r2, #24
   100ac:	f240 80f6 	bls.w	1029c <__kernel_ram_size+0x29c>
   100b0:	b108      	cbz	r0, 100b6 <__kernel_ram_size+0xb6>
   100b2:	f8cd c014 	str.w	ip, [sp, #20]
   100b6:	3301      	adds	r3, #1
   100b8:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   100ba:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   100be:	f1be 0f00 	cmp.w	lr, #0
   100c2:	f000 80e8 	beq.w	10296 <__kernel_ram_size+0x296>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   100c6:	425b      	negs	r3, r3
   100c8:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   100ca:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   100cc:	9b05      	ldr	r3, [sp, #20]
   100ce:	a806      	add	r0, sp, #24
   100d0:	ea83 0308 	eor.w	r3, r3, r8
   100d4:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   100d8:	2104      	movs	r1, #4
   100da:	f7f6 ff91 	bl	7000 <util_ones_count_get>
   100de:	2801      	cmp	r0, #1
   100e0:	f240 80e3 	bls.w	102aa <__kernel_ram_size+0x2aa>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   100e4:	9b05      	ldr	r3, [sp, #20]
   100e6:	b29a      	uxth	r2, r3
   100e8:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   100ec:	f000 80d8 	beq.w	102a0 <__kernel_ram_size+0x2a0>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   100f0:	2204      	movs	r2, #4
   100f2:	a905      	add	r1, sp, #20
   100f4:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   100f8:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   100fa:	f7f1 fd91 	bl	1c20 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   100fe:	2103      	movs	r1, #3
   10100:	f104 0014 	add.w	r0, r4, #20
   10104:	f7f7 fe08 	bl	7d18 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   10108:	2205      	movs	r2, #5
   1010a:	497a      	ldr	r1, [pc, #488]	; (102f4 <__kernel_ram_size+0x2f4>)
   1010c:	f104 0017 	add.w	r0, r4, #23
   10110:	f7f1 fd86 	bl	1c20 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   10114:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10118:	7f63      	ldrb	r3, [r4, #29]
   1011a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   1011e:	f36f 1386 	bfc	r3, #6, #1
   10122:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   10124:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   10126:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10128:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   1012a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   1012c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10130:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   10134:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10138:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1013a:	211b      	movs	r1, #27
   1013c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1013e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10140:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   10144:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10146:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   1014a:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1014e:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10150:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   10152:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   10156:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10158:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   1015c:	2601      	movs	r6, #1
   1015e:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   10162:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   10166:	f363 11c7 	bfi	r1, r3, #7, #1
   1016a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1016e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   10172:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   10176:	f366 0102 	bfi	r1, r6, #0, #3
   1017a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   1017e:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   10182:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   10184:	b2c9      	uxtb	r1, r1
   10186:	f36c 01c5 	bfi	r1, ip, #3, #3
   1018a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   1018e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   10192:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   10194:	f366 0102 	bfi	r1, r6, #0, #3
   10198:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   1019c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   1019e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   101a0:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   101a4:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   101a6:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   101a8:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   101ac:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   101b0:	f363 0100 	bfi	r1, r3, #0, #1
   101b4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   101b8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   101bc:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   101c0:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   101c4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   101c8:	1e56      	subs	r6, r2, #1
   101ca:	f242 7e10 	movw	lr, #10000	; 0x2710
   101ce:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   101d2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   101d6:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   101da:	4b47      	ldr	r3, [pc, #284]	; (102f8 <__kernel_ram_size+0x2f8>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   101dc:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   101de:	4947      	ldr	r1, [pc, #284]	; (102fc <__kernel_ram_size+0x2fc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   101e0:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   101e2:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   101e4:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   101e8:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   101ec:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   101ee:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   101f2:	1d81      	adds	r1, r0, #6
   101f4:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   101f6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   101fa:	dc6a      	bgt.n	102d2 <__kernel_ram_size+0x2d2>
	conn->llcp_version.tx = 0;
   101fc:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10200:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   10204:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   10206:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1020a:	f360 0341 	bfi	r3, r0, #1, #1
   1020e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   10212:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   10216:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   1021a:	f360 1304 	bfi	r3, r0, #4, #1
   1021e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   10222:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   10226:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   1022a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1022e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   10232:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   10236:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   1023a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1023e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   10242:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   10246:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1024a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1024e:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   10252:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   10256:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1025a:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1025e:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   10262:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   10266:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   1026a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1026e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   10272:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   10276:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   1027a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1027e:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   10282:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   10286:	b007      	add	sp, #28
   10288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   1028c:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10290:	f04f 0e01 	mov.w	lr, #1
   10294:	e6fe      	b.n	10094 <__kernel_ram_size+0x94>
				access_addr |= (BIT(bit_idx + 1) - 1);
   10296:	3b01      	subs	r3, #1
   10298:	4313      	orrs	r3, r2
   1029a:	e716      	b.n	100ca <__kernel_ram_size+0xca>
		if (transitions > 24) {
   1029c:	46f2      	mov	sl, lr
   1029e:	e6d5      	b.n	1004c <__kernel_ram_size+0x4c>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   102a0:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   102a2:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   102a6:	f47f af23 	bne.w	100f0 <__kernel_ram_size+0xf0>
   102aa:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   102ac:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   102b0:	f47f aec0 	bne.w	10034 <__kernel_ram_size+0x34>
   102b4:	4a12      	ldr	r2, [pc, #72]	; (10300 <__kernel_ram_size+0x300>)
   102b6:	4b13      	ldr	r3, [pc, #76]	; (10304 <__kernel_ram_size+0x304>)
   102b8:	9201      	str	r2, [sp, #4]
   102ba:	9200      	str	r2, [sp, #0]
   102bc:	681c      	ldr	r4, [r3, #0]
   102be:	4912      	ldr	r1, [pc, #72]	; (10308 <__kernel_ram_size+0x308>)
   102c0:	4b12      	ldr	r3, [pc, #72]	; (1030c <__kernel_ram_size+0x30c>)
   102c2:	4813      	ldr	r0, [pc, #76]	; (10310 <__kernel_ram_size+0x310>)
   102c4:	47a0      	blx	r4
   102c6:	4040      	eors	r0, r0
   102c8:	f380 8811 	msr	BASEPRI, r0
   102cc:	f04f 0004 	mov.w	r0, #4
   102d0:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   102d2:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   102d6:	33fa      	adds	r3, #250	; 0xfa
   102d8:	441a      	add	r2, r3
   102da:	b292      	uxth	r2, r2
   102dc:	e78e      	b.n	101fc <__kernel_ram_size+0x1fc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   102de:	200c      	movs	r0, #12
   102e0:	e7d1      	b.n	10286 <__kernel_ram_size+0x286>
   102e2:	bf00      	nop
   102e4:	f3af 8000 	nop.w
   102e8:	1afd498d 	.word	0x1afd498d
   102ec:	00000007 	.word	0x00000007
   102f0:	3b9aca00 	.word	0x3b9aca00
   102f4:	20000a0a 	.word	0x20000a0a
   102f8:	01c9c37f 	.word	0x01c9c37f
   102fc:	026259ff 	.word	0x026259ff
   10300:	00014891 	.word	0x00014891
   10304:	20003aa4 	.word	0x20003aa4
   10308:	00015639 	.word	0x00015639
   1030c:	00016ccb 	.word	0x00016ccb
   10310:	00017724 	.word	0x00017724
   10314:	200008f0 	.word	0x200008f0
   10318:	8e89bed6 	.word	0x8e89bed6

0001031c <ll_conn_update>:
{
   1031c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10320:	460c      	mov	r4, r1
   10322:	4690      	mov	r8, r2
   10324:	461d      	mov	r5, r3
   10326:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1032a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   1032e:	f7f9 fc6d 	bl	9c0c <connection_get>
	if (!conn) {
   10332:	b330      	cbz	r0, 10382 <ll_conn_update+0x66>
	if (!cmd) {
   10334:	2c00      	cmp	r4, #0
   10336:	d14a      	bne.n	103ce <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   10338:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1033c:	06d9      	lsls	r1, r3, #27
   1033e:	d407      	bmi.n	10350 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10340:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   10344:	069a      	lsls	r2, r3, #26
   10346:	d541      	bpl.n	103cc <ll_conn_update+0xb0>
		     (conn->llcp_features &
   10348:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   1034c:	079b      	lsls	r3, r3, #30
   1034e:	d43d      	bmi.n	103cc <ll_conn_update+0xb0>
		} else if (conn->role) {
   10350:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10354:	2b00      	cmp	r3, #0
   10356:	da17      	bge.n	10388 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10358:	201a      	movs	r0, #26
   1035a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   1035e:	428b      	cmp	r3, r1
   10360:	d00f      	beq.n	10382 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   10362:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   10366:	f003 0207 	and.w	r2, r3, #7
   1036a:	2a03      	cmp	r2, #3
   1036c:	d109      	bne.n	10382 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1036e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10372:	b2db      	uxtb	r3, r3
   10374:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10378:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   1037c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10380:	e021      	b.n	103c6 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10382:	200c      	movs	r0, #12
   10384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   10388:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1038c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10390:	429a      	cmp	r2, r3
   10392:	d1f6      	bne.n	10382 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10394:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   10398:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   1039c:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   1039e:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   103a0:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   103a4:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   103a8:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   103aa:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   103ae:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   103b2:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   103b6:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   103ba:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   103be:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   103c2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   103c6:	2000      	movs	r0, #0
   103c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   103cc:	2401      	movs	r4, #1
		cmd--;
   103ce:	3c01      	subs	r4, #1
		if (cmd) {
   103d0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   103d4:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   103d8:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   103dc:	d1bf      	bne.n	1035e <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   103de:	4299      	cmp	r1, r3
   103e0:	d1cf      	bne.n	10382 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   103e2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   103e6:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   103ea:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   103ee:	b2db      	uxtb	r3, r3
   103f0:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   103f4:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   103f6:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   103fa:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   103fe:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   10402:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   10406:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   1040a:	e7dc      	b.n	103c6 <ll_conn_update+0xaa>

0001040c <ll_chm_update>:
{
   1040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10410:	4c1e      	ldr	r4, [pc, #120]	; (1048c <ll_chm_update+0x80>)
   10412:	4601      	mov	r1, r0
   10414:	2205      	movs	r2, #5
{
   10416:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   10418:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1041c:	f7f1 fc00 	bl	1c20 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   10420:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10424:	2105      	movs	r1, #5
   10426:	f7f6 fdeb 	bl	7000 <util_ones_count_get>
	_radio.data_chan_count =
   1042a:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   1042e:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   10432:	3c01      	subs	r4, #1
   10434:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   10436:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10438:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   1043c:	2cff      	cmp	r4, #255	; 0xff
   1043e:	d102      	bne.n	10446 <ll_chm_update+0x3a>
	return 0;
   10440:	2000      	movs	r0, #0
   10442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   10446:	4620      	mov	r0, r4
   10448:	f7f9 fbe0 	bl	9c0c <connection_get>
		if (!conn || conn->role) {
   1044c:	4606      	mov	r6, r0
   1044e:	b1b8      	cbz	r0, 10480 <ll_chm_update+0x74>
   10450:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10454:	2b00      	cmp	r3, #0
   10456:	db13      	blt.n	10480 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   10458:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1045c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10460:	429a      	cmp	r2, r3
   10462:	d110      	bne.n	10486 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   10464:	2205      	movs	r2, #5
   10466:	4629      	mov	r1, r5
   10468:	3079      	adds	r0, #121	; 0x79
   1046a:	f7f1 fbd9 	bl	1c20 <memcpy>
		conn->llcp_req++;
   1046e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   10472:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   10476:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10478:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   1047c:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   10480:	3c01      	subs	r4, #1
   10482:	b2e4      	uxtb	r4, r4
   10484:	e7da      	b.n	1043c <ll_chm_update+0x30>
			return 1;
   10486:	2001      	movs	r0, #1
}
   10488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1048c:	200008f0 	.word	0x200008f0

00010490 <ll_chm_get>:
{
   10490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10492:	460d      	mov	r5, r1
	conn = connection_get(handle);
   10494:	f7f9 fbba 	bl	9c0c <connection_get>
	if (!conn) {
   10498:	4604      	mov	r4, r0
   1049a:	b160      	cbz	r0, 104b6 <ll_chm_get+0x26>
		conn->chm_update = 0;
   1049c:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1049e:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   104a2:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   104a4:	2205      	movs	r2, #5
   104a6:	4631      	mov	r1, r6
   104a8:	4628      	mov	r0, r5
   104aa:	f7f1 fbb9 	bl	1c20 <memcpy>
	} while (conn->chm_update);
   104ae:	7f20      	ldrb	r0, [r4, #28]
   104b0:	2800      	cmp	r0, #0
   104b2:	d1f6      	bne.n	104a2 <ll_chm_get+0x12>
   104b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   104b6:	2001      	movs	r0, #1
}
   104b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000104ba <ll_feature_req_send>:
{
   104ba:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   104bc:	f7f9 fba6 	bl	9c0c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   104c0:	b168      	cbz	r0, 104de <ll_feature_req_send+0x24>
   104c2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   104c6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   104ca:	4293      	cmp	r3, r2
   104cc:	d107      	bne.n	104de <ll_feature_req_send+0x24>
	conn->llcp_req++;
   104ce:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   104d0:	2204      	movs	r2, #4
	conn->llcp_req++;
   104d2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   104d6:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   104da:	2000      	movs	r0, #0
   104dc:	bd08      	pop	{r3, pc}
		return 1;
   104de:	2001      	movs	r0, #1
}
   104e0:	bd08      	pop	{r3, pc}

000104e2 <ll_version_ind_send>:
{
   104e2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   104e4:	f7f9 fb92 	bl	9c0c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   104e8:	b168      	cbz	r0, 10506 <ll_version_ind_send+0x24>
   104ea:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   104ee:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   104f2:	4293      	cmp	r3, r2
   104f4:	d107      	bne.n	10506 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   104f6:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   104f8:	2205      	movs	r2, #5
	conn->llcp_req++;
   104fa:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   104fe:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10502:	2000      	movs	r0, #0
   10504:	bd08      	pop	{r3, pc}
		return 1;
   10506:	2001      	movs	r0, #1
}
   10508:	bd08      	pop	{r3, pc}

0001050a <ll_terminate_ind_send>:
{
   1050a:	b510      	push	{r4, lr}
   1050c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1050e:	f7f9 fb7d 	bl	9c0c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   10512:	b160      	cbz	r0, 1052e <ll_terminate_ind_send+0x24>
   10514:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   10518:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   1051c:	4293      	cmp	r3, r2
   1051e:	d106      	bne.n	1052e <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   10520:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   10522:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   10526:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1052a:	2000      	movs	r0, #0
   1052c:	bd10      	pop	{r4, pc}
		return 1;
   1052e:	2001      	movs	r0, #1
}
   10530:	bd10      	pop	{r4, pc}

00010532 <ll_tx_pwr_lvl_get>:
{
   10532:	b510      	push	{r4, lr}
   10534:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10536:	f7f9 fb69 	bl	9c0c <connection_get>
	if (!conn) {
   1053a:	b110      	cbz	r0, 10542 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   1053c:	2000      	movs	r0, #0
   1053e:	7020      	strb	r0, [r4, #0]
	return 0;
   10540:	bd10      	pop	{r4, pc}
		return 1;
   10542:	2001      	movs	r0, #1
}
   10544:	bd10      	pop	{r4, pc}

00010546 <ll_apto_get>:
{
   10546:	b510      	push	{r4, lr}
   10548:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1054a:	f7f9 fb5f 	bl	9c0c <connection_get>
	if (!conn) {
   1054e:	b160      	cbz	r0, 1056a <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10550:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   10552:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   10556:	435a      	muls	r2, r3
   10558:	237d      	movs	r3, #125	; 0x7d
   1055a:	4353      	muls	r3, r2
	return 0;
   1055c:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1055e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10562:	fb93 f3f2 	sdiv	r3, r3, r2
   10566:	8023      	strh	r3, [r4, #0]
	return 0;
   10568:	bd10      	pop	{r4, pc}
		return 1;
   1056a:	2001      	movs	r0, #1
}
   1056c:	bd10      	pop	{r4, pc}

0001056e <ll_apto_set>:
{
   1056e:	b510      	push	{r4, lr}
   10570:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10572:	f7f9 fb4b 	bl	9c0c <connection_get>
	if (!conn) {
   10576:	b170      	cbz	r0, 10596 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   10578:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1057a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1057e:	4353      	muls	r3, r2
   10580:	f242 7110 	movw	r1, #10000	; 0x2710
   10584:	fb01 3404 	mla	r4, r1, r4, r3
   10588:	3c01      	subs	r4, #1
   1058a:	fb94 f4f3 	sdiv	r4, r4, r3
   1058e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   10592:	2000      	movs	r0, #0
   10594:	bd10      	pop	{r4, pc}
		return 1;
   10596:	2001      	movs	r0, #1
}
   10598:	bd10      	pop	{r4, pc}

0001059a <ll_length_req_send>:
{
   1059a:	b570      	push	{r4, r5, r6, lr}
   1059c:	460e      	mov	r6, r1
   1059e:	4615      	mov	r5, r2
	conn = connection_get(handle);
   105a0:	f7f9 fb34 	bl	9c0c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   105a4:	b1d0      	cbz	r0, 105dc <ll_length_req_send+0x42>
   105a6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   105aa:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   105ae:	429a      	cmp	r2, r3
   105b0:	d114      	bne.n	105dc <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   105b2:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   105b6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   105ba:	4293      	cmp	r3, r2
   105bc:	d10e      	bne.n	105dc <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   105be:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   105c2:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   105c6:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   105c8:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   105cc:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   105d0:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   105d4:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   105d8:	2000      	movs	r0, #0
   105da:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   105dc:	2001      	movs	r0, #1
}
   105de:	bd70      	pop	{r4, r5, r6, pc}

000105e0 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   105e0:	4b03      	ldr	r3, [pc, #12]	; (105f0 <ll_length_default_get+0x10>)
   105e2:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   105e6:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   105e8:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   105ec:	800b      	strh	r3, [r1, #0]
   105ee:	4770      	bx	lr
   105f0:	200008f0 	.word	0x200008f0

000105f4 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   105f4:	4b03      	ldr	r3, [pc, #12]	; (10604 <ll_length_default_set+0x10>)
   105f6:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   105fa:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   105fe:	2000      	movs	r0, #0
   10600:	4770      	bx	lr
   10602:	bf00      	nop
   10604:	200008f0 	.word	0x200008f0

00010608 <ll_length_max_get>:
{
   10608:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1060a:	241b      	movs	r4, #27
   1060c:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1060e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10612:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10614:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10616:	8018      	strh	r0, [r3, #0]
   10618:	bd10      	pop	{r4, pc}

0001061a <ll_phy_get>:
{
   1061a:	b538      	push	{r3, r4, r5, lr}
   1061c:	460d      	mov	r5, r1
   1061e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10620:	f7f9 faf4 	bl	9c0c <connection_get>
	if (!conn) {
   10624:	b158      	cbz	r0, 1063e <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   10626:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1062a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1062e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10630:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   10634:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10638:	7023      	strb	r3, [r4, #0]
	return 0;
   1063a:	2000      	movs	r0, #0
   1063c:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1063e:	2001      	movs	r0, #1
}
   10640:	bd38      	pop	{r3, r4, r5, pc}
	...

00010644 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   10644:	4b03      	ldr	r3, [pc, #12]	; (10654 <ll_phy_default_set+0x10>)
   10646:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   1064a:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   1064e:	2000      	movs	r0, #0
   10650:	4770      	bx	lr
   10652:	bf00      	nop
   10654:	200008f0 	.word	0x200008f0

00010658 <ll_phy_req_send>:
{
   10658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1065c:	4689      	mov	r9, r1
   1065e:	4690      	mov	r8, r2
   10660:	461f      	mov	r7, r3
	conn = connection_get(handle);
   10662:	f7f9 fad3 	bl	9c0c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10666:	b320      	cbz	r0, 106b2 <ll_phy_req_send+0x5a>
   10668:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1066c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10670:	429a      	cmp	r2, r3
   10672:	d11e      	bne.n	106b2 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   10674:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10678:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   1067c:	429d      	cmp	r5, r3
   1067e:	d118      	bne.n	106b2 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10680:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   10684:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   10688:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   1068c:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   10690:	f046 0102 	orr.w	r1, r6, #2
   10694:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   10698:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   1069a:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   1069c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   106a0:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   106a4:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   106a8:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   106ac:	2000      	movs	r0, #0
   106ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   106b2:	2001      	movs	r0, #1
}
   106b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000106b8 <ll_rx_get>:
{
   106b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   106bc:	4605      	mov	r5, r0
   106be:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   106c0:	4918      	ldr	r1, [pc, #96]	; (10724 <ll_rx_get+0x6c>)
   106c2:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   106c6:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   106ca:	4293      	cmp	r3, r2
   106cc:	460f      	mov	r7, r1
   106ce:	d01f      	beq.n	10710 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   106d0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   106d4:	f201 1177 	addw	r1, r1, #375	; 0x177
   106d8:	f898 2000 	ldrb.w	r2, [r8]
   106dc:	f7f9 fa4c 	bl	9b78 <tx_cmplt_get>
		if (!cmplt) {
   106e0:	4604      	mov	r4, r0
   106e2:	b9e0      	cbnz	r0, 1071e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   106e4:	ae02      	add	r6, sp, #8
   106e6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   106ea:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   106ee:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   106f2:	4631      	mov	r1, r6
   106f4:	f10d 0006 	add.w	r0, sp, #6
   106f8:	f7f9 fa3e 	bl	9b78 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   106fc:	b934      	cbnz	r4, 1070c <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   106fe:	b928      	cbnz	r0, 1070c <ll_rx_get+0x54>
			*node_rx = _node_rx;
   10700:	f8c5 8000 	str.w	r8, [r5]
}
   10704:	4620      	mov	r0, r4
   10706:	b002      	add	sp, #8
   10708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1070c:	4604      	mov	r4, r0
   1070e:	e7ee      	b.n	106ee <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10710:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   10714:	f201 1177 	addw	r1, r1, #375	; 0x177
   10718:	f7f9 fa2e 	bl	9b78 <tx_cmplt_get>
   1071c:	4604      	mov	r4, r0
		*node_rx = NULL;
   1071e:	2300      	movs	r3, #0
   10720:	602b      	str	r3, [r5, #0]
   10722:	e7ef      	b.n	10704 <ll_rx_get+0x4c>
   10724:	200008f0 	.word	0x200008f0

00010728 <ll_rx_mem_release>:
{
   10728:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   1072c:	4c1c      	ldr	r4, [pc, #112]	; (107a0 <ll_rx_mem_release+0x78>)
{
   1072e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10730:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10732:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   10736:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   1073a:	b930      	cbnz	r0, 1074a <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   1073c:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   1073e:	20ff      	movs	r0, #255	; 0xff
}
   10740:	b002      	add	sp, #8
   10742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   10746:	f7f9 b941 	b.w	99cc <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   1074a:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   1074c:	f8d0 8000 	ldr.w	r8, [r0]
   10750:	2a0c      	cmp	r2, #12
   10752:	d807      	bhi.n	10764 <ll_rx_mem_release+0x3c>
   10754:	2301      	movs	r3, #1
   10756:	4093      	lsls	r3, r2
   10758:	f641 727e 	movw	r2, #8062	; 0x1f7e
   1075c:	4213      	tst	r3, r2
   1075e:	d110      	bne.n	10782 <ll_rx_mem_release+0x5a>
   10760:	061b      	lsls	r3, r3, #24
   10762:	d413      	bmi.n	1078c <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   10764:	4a0f      	ldr	r2, [pc, #60]	; (107a4 <ll_rx_mem_release+0x7c>)
   10766:	4b10      	ldr	r3, [pc, #64]	; (107a8 <ll_rx_mem_release+0x80>)
   10768:	9201      	str	r2, [sp, #4]
   1076a:	9200      	str	r2, [sp, #0]
   1076c:	681c      	ldr	r4, [r3, #0]
   1076e:	490f      	ldr	r1, [pc, #60]	; (107ac <ll_rx_mem_release+0x84>)
   10770:	4b0f      	ldr	r3, [pc, #60]	; (107b0 <ll_rx_mem_release+0x88>)
   10772:	4810      	ldr	r0, [pc, #64]	; (107b4 <ll_rx_mem_release+0x8c>)
   10774:	47a0      	blx	r4
   10776:	4040      	eors	r0, r0
   10778:	f380 8811 	msr	BASEPRI, r0
   1077c:	f04f 0004 	mov.w	r0, #4
   10780:	df02      	svc	2
			mem_release(_node_rx_free,
   10782:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   10784:	f7f6 faab 	bl	6cde <mem_release>
{
   10788:	4640      	mov	r0, r8
   1078a:	e7d6      	b.n	1073a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1078c:	88c2      	ldrh	r2, [r0, #6]
   1078e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   10792:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10796:	f7f6 fabd 	bl	6d14 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1079a:	4639      	mov	r1, r7
   1079c:	e7f2      	b.n	10784 <ll_rx_mem_release+0x5c>
   1079e:	bf00      	nop
   107a0:	20000a20 	.word	0x20000a20
   107a4:	00014891 	.word	0x00014891
   107a8:	20003aa4 	.word	0x20003aa4
   107ac:	00015639 	.word	0x00015639
   107b0:	00016e6f 	.word	0x00016e6f
   107b4:	00015597 	.word	0x00015597

000107b8 <do_radio_rx_fc_set>:
	if (req == ack) {
   107b8:	4291      	cmp	r1, r2
{
   107ba:	b510      	push	{r4, lr}
   107bc:	4b14      	ldr	r3, [pc, #80]	; (10810 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   107be:	d119      	bne.n	107f4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   107c0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   107c4:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   107c8:	4294      	cmp	r4, r2
   107ca:	d111      	bne.n	107f0 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   107cc:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   107ce:	bf14      	ite	ne
   107d0:	460a      	movne	r2, r1
   107d2:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   107d4:	3a01      	subs	r2, #1
   107d6:	b2d2      	uxtb	r2, r2
   107d8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   107dc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   107e0:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   107e4:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   107e8:	4291      	cmp	r1, r2
   107ea:	d00f      	beq.n	1080c <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   107ec:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   107f0:	2001      	movs	r0, #1
   107f2:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   107f4:	b929      	cbnz	r1, 10802 <do_radio_rx_fc_set+0x4a>
   107f6:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   107fa:	1a18      	subs	r0, r3, r0
   107fc:	bf18      	it	ne
   107fe:	2001      	movne	r0, #1
   10800:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   10802:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   10806:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   1080a:	e7f6      	b.n	107fa <do_radio_rx_fc_set+0x42>
	return 0;
   1080c:	2000      	movs	r0, #0
}
   1080e:	bd10      	pop	{r4, pc}
   10810:	200008f0 	.word	0x200008f0

00010814 <radio_rx_fc_set>:
{
   10814:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   10816:	4b14      	ldr	r3, [pc, #80]	; (10868 <radio_rx_fc_set+0x54>)
   10818:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   1081c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   1081e:	b302      	cbz	r2, 10862 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   10820:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   10824:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   10826:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   1082a:	b135      	cbz	r5, 1083a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   1082c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10830:	4298      	cmp	r0, r3
   10832:	d016      	beq.n	10862 <radio_rx_fc_set+0x4e>
}
   10834:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   10836:	f7ff bfbf 	b.w	107b8 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1083a:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   1083e:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   10842:	42a0      	cmp	r0, r4
   10844:	d10d      	bne.n	10862 <radio_rx_fc_set+0x4e>
   10846:	4291      	cmp	r1, r2
   10848:	d00b      	beq.n	10862 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1084a:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   1084e:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10852:	42a0      	cmp	r0, r4
   10854:	d005      	beq.n	10862 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10856:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1085a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   1085c:	bf08      	it	eq
   1085e:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   10862:	2000      	movs	r0, #0
   10864:	bc30      	pop	{r4, r5}
   10866:	4770      	bx	lr
   10868:	200008f0 	.word	0x200008f0

0001086c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   1086c:	4801      	ldr	r0, [pc, #4]	; (10874 <ll_tx_mem_acquire+0x8>)
   1086e:	f7f6 ba1c 	b.w	6caa <mem_acquire>
   10872:	bf00      	nop
   10874:	20000a54 	.word	0x20000a54

00010878 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10878:	4901      	ldr	r1, [pc, #4]	; (10880 <ll_tx_mem_release+0x8>)
   1087a:	f7f6 ba30 	b.w	6cde <mem_release>
   1087e:	bf00      	nop
   10880:	20000a54 	.word	0x20000a54

00010884 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10884:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10886:	4d33      	ldr	r5, [pc, #204]	; (10954 <ll_tx_mem_enqueue+0xd0>)
   10888:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   1088c:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10890:	3401      	adds	r4, #1
{
   10892:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10894:	b2e4      	uxtb	r4, r4
{
   10896:	4607      	mov	r7, r0
   10898:	460e      	mov	r6, r1
		last = 0;
   1089a:	42a3      	cmp	r3, r4
   1089c:	bf08      	it	eq
   1089e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   108a0:	f7f9 f9b4 	bl	9c0c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   108a4:	2800      	cmp	r0, #0
   108a6:	d053      	beq.n	10950 <ll_tx_mem_enqueue+0xcc>
   108a8:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   108ac:	429c      	cmp	r4, r3
   108ae:	d04f      	beq.n	10950 <ll_tx_mem_enqueue+0xcc>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   108b0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   108b4:	7972      	ldrb	r2, [r6, #5]
   108b6:	3b07      	subs	r3, #7
   108b8:	429a      	cmp	r2, r3
   108ba:	d90e      	bls.n	108da <ll_tx_mem_enqueue+0x56>
   108bc:	4a26      	ldr	r2, [pc, #152]	; (10958 <ll_tx_mem_enqueue+0xd4>)
   108be:	4b27      	ldr	r3, [pc, #156]	; (1095c <ll_tx_mem_enqueue+0xd8>)
   108c0:	9201      	str	r2, [sp, #4]
   108c2:	9200      	str	r2, [sp, #0]
   108c4:	681c      	ldr	r4, [r3, #0]
   108c6:	4926      	ldr	r1, [pc, #152]	; (10960 <ll_tx_mem_enqueue+0xdc>)
   108c8:	4b26      	ldr	r3, [pc, #152]	; (10964 <ll_tx_mem_enqueue+0xe0>)
   108ca:	4827      	ldr	r0, [pc, #156]	; (10968 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   108cc:	47a0      	blx	r4
   108ce:	4040      	eors	r0, r0
   108d0:	f380 8811 	msr	BASEPRI, r0
   108d4:	f04f 0004 	mov.w	r0, #4
   108d8:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   108da:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   108de:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   108e2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   108e6:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   108ea:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   108ec:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   108f0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   108f4:	2b00      	cmp	r3, #0
   108f6:	db02      	blt.n	108fe <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   108f8:	2000      	movs	r0, #0
}
   108fa:	b009      	add	sp, #36	; 0x24
   108fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   108fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   10900:	2b00      	cmp	r3, #0
   10902:	d0f9      	beq.n	108f8 <ll_tx_mem_enqueue+0x74>
   10904:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   10908:	f012 0302 	ands.w	r3, r2, #2
   1090c:	d1f4      	bne.n	108f8 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   1090e:	f042 0202 	orr.w	r2, r2, #2
   10912:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10916:	f890 2020 	ldrb.w	r2, [r0, #32]
   1091a:	4914      	ldr	r1, [pc, #80]	; (1096c <ll_tx_mem_enqueue+0xe8>)
   1091c:	9105      	str	r1, [sp, #20]
   1091e:	3207      	adds	r2, #7
   10920:	2101      	movs	r1, #1
   10922:	9006      	str	r0, [sp, #24]
   10924:	9304      	str	r3, [sp, #16]
   10926:	9103      	str	r1, [sp, #12]
   10928:	9302      	str	r3, [sp, #8]
   1092a:	9301      	str	r3, [sp, #4]
   1092c:	9300      	str	r3, [sp, #0]
   1092e:	4618      	mov	r0, r3
   10930:	b2d2      	uxtb	r2, r2
   10932:	2103      	movs	r1, #3
   10934:	f7f7 f892 	bl	7a5c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10938:	f030 0302 	bics.w	r3, r0, #2
   1093c:	d0dc      	beq.n	108f8 <ll_tx_mem_enqueue+0x74>
   1093e:	4a06      	ldr	r2, [pc, #24]	; (10958 <ll_tx_mem_enqueue+0xd4>)
   10940:	4b06      	ldr	r3, [pc, #24]	; (1095c <ll_tx_mem_enqueue+0xd8>)
   10942:	9201      	str	r2, [sp, #4]
   10944:	9200      	str	r2, [sp, #0]
   10946:	681c      	ldr	r4, [r3, #0]
   10948:	4905      	ldr	r1, [pc, #20]	; (10960 <ll_tx_mem_enqueue+0xdc>)
   1094a:	4b06      	ldr	r3, [pc, #24]	; (10964 <ll_tx_mem_enqueue+0xe0>)
   1094c:	4808      	ldr	r0, [pc, #32]	; (10970 <ll_tx_mem_enqueue+0xec>)
   1094e:	e7bd      	b.n	108cc <ll_tx_mem_enqueue+0x48>
		return 1;
   10950:	2001      	movs	r0, #1
   10952:	e7d2      	b.n	108fa <ll_tx_mem_enqueue+0x76>
   10954:	200008f0 	.word	0x200008f0
   10958:	00014891 	.word	0x00014891
   1095c:	20003aa4 	.word	0x20003aa4
   10960:	00015639 	.word	0x00015639
   10964:	00016e9d 	.word	0x00016e9d
   10968:	00017483 	.word	0x00017483
   1096c:	0000a97d 	.word	0x0000a97d
   10970:	00016ed5 	.word	0x00016ed5

00010974 <ll_enc_req_send>:
{
   10974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10978:	4607      	mov	r7, r0
   1097a:	4688      	mov	r8, r1
   1097c:	4616      	mov	r6, r2
   1097e:	4699      	mov	r9, r3
	conn = connection_get(handle);
   10980:	f7f9 f944 	bl	9c0c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10984:	4605      	mov	r5, r0
   10986:	b910      	cbnz	r0, 1098e <ll_enc_req_send+0x1a>
			return 1;
   10988:	2001      	movs	r0, #1
   1098a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1098e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10992:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10996:	429a      	cmp	r2, r3
   10998:	d1f6      	bne.n	10988 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1099a:	f7ff ff67 	bl	1086c <ll_tx_mem_acquire>
	if (node_tx) {
   1099e:	4604      	mov	r4, r0
   109a0:	2800      	cmp	r0, #0
   109a2:	d0f1      	beq.n	10988 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   109a4:	2210      	movs	r2, #16
   109a6:	4649      	mov	r1, r9
   109a8:	f105 0084 	add.w	r0, r5, #132	; 0x84
   109ac:	f7f1 f938 	bl	1c20 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   109b0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   109b4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   109b8:	d124      	bne.n	10a04 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   109ba:	7923      	ldrb	r3, [r4, #4]
   109bc:	f043 0303 	orr.w	r3, r3, #3
   109c0:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   109c2:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   109c4:	2208      	movs	r2, #8
			pdu_data_tx->len =
   109c6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   109c8:	2303      	movs	r3, #3
   109ca:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   109cc:	4641      	mov	r1, r8
   109ce:	18a0      	adds	r0, r4, r2
   109d0:	f7f1 f926 	bl	1c20 <memcpy>
			enc_req->ediv[0] = ediv[0];
   109d4:	7833      	ldrb	r3, [r6, #0]
   109d6:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   109d8:	7873      	ldrb	r3, [r6, #1]
   109da:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   109dc:	2108      	movs	r1, #8
   109de:	f104 0012 	add.w	r0, r4, #18
   109e2:	f7f7 f999 	bl	7d18 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   109e6:	2104      	movs	r1, #4
   109e8:	f104 001a 	add.w	r0, r4, #26
   109ec:	f7f7 f994 	bl	7d18 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   109f0:	4621      	mov	r1, r4
   109f2:	4638      	mov	r0, r7
   109f4:	f7ff ff46 	bl	10884 <ll_tx_mem_enqueue>
   109f8:	2601      	movs	r6, #1
   109fa:	b1d0      	cbz	r0, 10a32 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   109fc:	4620      	mov	r0, r4
   109fe:	f7ff ff3b 	bl	10878 <ll_tx_mem_release>
   10a02:	e7c1      	b.n	10988 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   10a04:	2b30      	cmp	r3, #48	; 0x30
   10a06:	d1f9      	bne.n	109fc <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   10a08:	2208      	movs	r2, #8
   10a0a:	4641      	mov	r1, r8
   10a0c:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   10a10:	f7f1 f906 	bl	1c20 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   10a14:	7833      	ldrb	r3, [r6, #0]
   10a16:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   10a1a:	7873      	ldrb	r3, [r6, #1]
   10a1c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10a20:	7923      	ldrb	r3, [r4, #4]
   10a22:	f043 0303 	orr.w	r3, r3, #3
   10a26:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   10a28:	2301      	movs	r3, #1
   10a2a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10a2c:	230a      	movs	r3, #10
   10a2e:	71e3      	strb	r3, [r4, #7]
   10a30:	e7de      	b.n	109f0 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   10a32:	2303      	movs	r3, #3
   10a34:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   10a38:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   10a3c:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   10a40:	3301      	adds	r3, #1
   10a42:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   10a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10a4a:	0000      	movs	r0, r0
   10a4c:	0000      	movs	r0, r0
	...

00010a50 <radio_scan_enable>:
{
   10a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   10a54:	4c68      	ldr	r4, [pc, #416]	; (10bf8 <radio_scan_enable+0x1a8>)
   10a56:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   10a5a:	b08e      	sub	sp, #56	; 0x38
   10a5c:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   10a5e:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10a62:	f04f 0302 	mov.w	r3, #2
{
   10a66:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10a68:	930b      	str	r3, [sp, #44]	; 0x2c
{
   10a6a:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   10a6c:	d003      	beq.n	10a76 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10a6e:	200c      	movs	r0, #12
}
   10a70:	b00e      	add	sp, #56	; 0x38
   10a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   10a76:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   10a7a:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   10a7e:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   10a82:	0840      	lsrs	r0, r0, #1
   10a84:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   10a88:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10a8c:	f360 0200 	bfi	r2, r0, #0, #1
   10a90:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   10a94:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   10a98:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   10a9c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10aa0:	2206      	movs	r2, #6
   10aa2:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   10aa6:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10aaa:	4e54      	ldr	r6, [pc, #336]	; (10bfc <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10aac:	f7f1 f8b8 	bl	1c20 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10ab0:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   10ab4:	f04f 0991 	mov.w	r9, #145	; 0x91
   10ab8:	fba2 0106 	umull	r0, r1, r2, r6
   10abc:	fb09 1102 	mla	r1, r9, r2, r1
   10ac0:	a34b      	add	r3, pc, #300	; (adr r3, 10bf0 <radio_scan_enable+0x1a0>)
   10ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ac6:	f7ef fba5 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   10aca:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10ace:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   10ad2:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10ad6:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   10ada:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10ade:	b2ba      	uxth	r2, r7
   10ae0:	fba2 6706 	umull	r6, r7, r2, r6
   10ae4:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   10ae8:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   10aec:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   10aee:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   10af2:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   10af6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   10afa:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10afe:	a33c      	add	r3, pc, #240	; (adr r3, 10bf0 <radio_scan_enable+0x1a0>)
   10b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b04:	4630      	mov	r0, r6
   10b06:	4639      	mov	r1, r7
   10b08:	f7ef fb84 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   10b0c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   10b10:	459a      	cmp	sl, r3
   10b12:	bf94      	ite	ls
   10b14:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   10b18:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10b1c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10b20:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10b22:	bf38      	it	cc
   10b24:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   10b28:	f7f7 f8b6 	bl	7c98 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   10b2c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   10b30:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   10b32:	2b00      	cmp	r3, #0
   10b34:	d045      	beq.n	10bc2 <radio_scan_enable+0x172>
		us_offset = 0;
   10b36:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10b38:	980c      	ldr	r0, [sp, #48]	; 0x30
   10b3a:	4931      	ldr	r1, [pc, #196]	; (10c00 <radio_scan_enable+0x1b0>)
   10b3c:	a32c      	add	r3, pc, #176	; (adr r3, 10bf0 <radio_scan_enable+0x1a0>)
   10b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b42:	fba0 0101 	umull	r0, r1, r0, r1
   10b46:	f7ef fb65 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10b4a:	ab0b      	add	r3, sp, #44	; 0x2c
   10b4c:	9308      	str	r3, [sp, #32]
   10b4e:	4b2d      	ldr	r3, [pc, #180]	; (10c04 <radio_scan_enable+0x1b4>)
   10b50:	9307      	str	r3, [sp, #28]
   10b52:	4b2d      	ldr	r3, [pc, #180]	; (10c08 <radio_scan_enable+0x1b8>)
   10b54:	9305      	str	r3, [sp, #20]
   10b56:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10b5e:	4443      	add	r3, r8
   10b60:	2500      	movs	r5, #0
   10b62:	4482      	add	sl, r0
   10b64:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10b66:	4630      	mov	r0, r6
   10b68:	a321      	add	r3, pc, #132	; (adr r3, 10bf0 <radio_scan_enable+0x1a0>)
   10b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b6e:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10b70:	9506      	str	r5, [sp, #24]
   10b72:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10b74:	f7ef fb4e 	bl	214 <__aeabi_uldivmod>
   10b78:	4610      	mov	r0, r2
   10b7a:	4619      	mov	r1, r3
   10b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10b80:	2300      	movs	r3, #0
   10b82:	f7ef fb47 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10b86:	e88d 0220 	stmia.w	sp, {r5, r9}
   10b8a:	9002      	str	r0, [sp, #8]
   10b8c:	4653      	mov	r3, sl
   10b8e:	2206      	movs	r2, #6
   10b90:	2103      	movs	r1, #3
   10b92:	4628      	mov	r0, r5
   10b94:	f7f6 ff12 	bl	79bc <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10b98:	2802      	cmp	r0, #2
   10b9a:	d023      	beq.n	10be4 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   10b9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10b9e:	2d00      	cmp	r5, #0
   10ba0:	f47f af65 	bne.w	10a6e <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   10ba4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10ba8:	f043 0301 	orr.w	r3, r3, #1
   10bac:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   10bb0:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10bb4:	2b00      	cmp	r3, #0
   10bb6:	db02      	blt.n	10bbe <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   10bb8:	2002      	movs	r0, #2
   10bba:	f000 fea7 	bl	1190c <ll_adv_scan_state_cb>
	return 0;
   10bbe:	4628      	mov	r0, r5
   10bc0:	e756      	b.n	10a70 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10bc2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   10bc6:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10bc8:	aa0d      	add	r2, sp, #52	; 0x34
   10bca:	ab0c      	add	r3, sp, #48	; 0x30
   10bcc:	4441      	add	r1, r8
   10bce:	2003      	movs	r0, #3
   10bd0:	f7f9 fc2e 	bl	a430 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   10bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10bd6:	2b00      	cmp	r3, #0
   10bd8:	d0ae      	beq.n	10b38 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   10bda:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   10bde:	e7ab      	b.n	10b38 <radio_scan_enable+0xe8>
			cpu_sleep();
   10be0:	f7f8 fe1a 	bl	9818 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   10be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10be6:	2b02      	cmp	r3, #2
   10be8:	d0fa      	beq.n	10be0 <radio_scan_enable+0x190>
   10bea:	e7d7      	b.n	10b9c <radio_scan_enable+0x14c>
   10bec:	f3af 8000 	nop.w
   10bf0:	1afd498d 	.word	0x1afd498d
   10bf4:	00000007 	.word	0x00000007
   10bf8:	200008f0 	.word	0x200008f0
   10bfc:	84e72a00 	.word	0x84e72a00
   10c00:	3b9aca00 	.word	0x3b9aca00
   10c04:	0000985d 	.word	0x0000985d
   10c08:	0000b7a1 	.word	0x0000b7a1

00010c0c <radio_scan_disable>:
{
   10c0c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   10c0e:	2104      	movs	r1, #4
   10c10:	2006      	movs	r0, #6
   10c12:	f7f9 f811 	bl	9c38 <role_disable>
	if (!status) {
   10c16:	4605      	mov	r5, r0
   10c18:	b9e8      	cbnz	r0, 10c56 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   10c1a:	4c10      	ldr	r4, [pc, #64]	; (10c5c <radio_scan_disable+0x50>)
   10c1c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   10c20:	f360 0200 	bfi	r2, r0, #0, #1
   10c24:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   10c28:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   10c2c:	2a00      	cmp	r2, #0
   10c2e:	db01      	blt.n	10c34 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   10c30:	f000 fe6c 	bl	1190c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   10c34:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   10c38:	b15e      	cbz	r6, 10c52 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   10c3a:	2300      	movs	r3, #0
   10c3c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   10c40:	4907      	ldr	r1, [pc, #28]	; (10c60 <radio_scan_disable+0x54>)
   10c42:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   10c46:	f7f6 f84a 	bl	6cde <mem_release>
			mem_release(conn, &_radio.conn_free);
   10c4a:	4906      	ldr	r1, [pc, #24]	; (10c64 <radio_scan_disable+0x58>)
   10c4c:	4630      	mov	r0, r6
   10c4e:	f7f6 f846 	bl	6cde <mem_release>
}
   10c52:	4628      	mov	r0, r5
   10c54:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   10c56:	250c      	movs	r5, #12
   10c58:	e7fb      	b.n	10c52 <radio_scan_disable+0x46>
   10c5a:	bf00      	nop
   10c5c:	200008f0 	.word	0x200008f0
   10c60:	20000a38 	.word	0x20000a38
   10c64:	200009fc 	.word	0x200009fc

00010c68 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   10c68:	4b03      	ldr	r3, [pc, #12]	; (10c78 <ll_connect_disable+0x10>)
   10c6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10c6e:	b10b      	cbz	r3, 10c74 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   10c70:	f7ff bfcc 	b.w	10c0c <radio_scan_disable>
}
   10c74:	200c      	movs	r0, #12
   10c76:	4770      	bx	lr
   10c78:	200008f0 	.word	0x200008f0

00010c7c <ll_rx_dequeue>:
{
   10c7c:	b530      	push	{r4, r5, lr}
   10c7e:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10c80:	4d49      	ldr	r5, [pc, #292]	; (10da8 <ll_rx_dequeue+0x12c>)
	struct radio_pdu_node_rx *node_rx = NULL;
   10c82:	aa04      	add	r2, sp, #16
   10c84:	2300      	movs	r3, #0
   10c86:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10c8a:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   10c8e:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   10c92:	f7f6 f873 	bl	6d7c <memq_dequeue>
   10c96:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10c98:	b970      	cbnz	r0, 10cb8 <ll_rx_dequeue+0x3c>
   10c9a:	4a44      	ldr	r2, [pc, #272]	; (10dac <ll_rx_dequeue+0x130>)
   10c9c:	4b44      	ldr	r3, [pc, #272]	; (10db0 <ll_rx_dequeue+0x134>)
   10c9e:	9201      	str	r2, [sp, #4]
   10ca0:	9200      	str	r2, [sp, #0]
   10ca2:	681c      	ldr	r4, [r3, #0]
   10ca4:	4943      	ldr	r1, [pc, #268]	; (10db4 <ll_rx_dequeue+0x138>)
   10ca6:	4b44      	ldr	r3, [pc, #272]	; (10db8 <ll_rx_dequeue+0x13c>)
   10ca8:	4844      	ldr	r0, [pc, #272]	; (10dbc <ll_rx_dequeue+0x140>)
		LL_ASSERT(_radio.link_rx_data_quota <
   10caa:	47a0      	blx	r4
   10cac:	4040      	eors	r0, r0
   10cae:	f380 8811 	msr	BASEPRI, r0
   10cb2:	f04f 0004 	mov.w	r0, #4
   10cb6:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   10cb8:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   10cbc:	f7f6 f80f 	bl	6cde <mem_release>
	switch (node_rx->hdr.type) {
   10cc0:	9a03      	ldr	r2, [sp, #12]
   10cc2:	7911      	ldrb	r1, [r2, #4]
   10cc4:	290c      	cmp	r1, #12
   10cc6:	d807      	bhi.n	10cd8 <ll_rx_dequeue+0x5c>
   10cc8:	2301      	movs	r3, #1
   10cca:	408b      	lsls	r3, r1
   10ccc:	f641 707e 	movw	r0, #8062	; 0x1f7e
   10cd0:	4203      	tst	r3, r0
   10cd2:	d10a      	bne.n	10cea <ll_rx_dequeue+0x6e>
   10cd4:	0618      	lsls	r0, r3, #24
   10cd6:	d41b      	bmi.n	10d10 <ll_rx_dequeue+0x94>
		LL_ASSERT(0);
   10cd8:	4a34      	ldr	r2, [pc, #208]	; (10dac <ll_rx_dequeue+0x130>)
   10cda:	4b35      	ldr	r3, [pc, #212]	; (10db0 <ll_rx_dequeue+0x134>)
   10cdc:	9201      	str	r2, [sp, #4]
   10cde:	9200      	str	r2, [sp, #0]
   10ce0:	681c      	ldr	r4, [r3, #0]
   10ce2:	4934      	ldr	r1, [pc, #208]	; (10db4 <ll_rx_dequeue+0x138>)
   10ce4:	4b34      	ldr	r3, [pc, #208]	; (10db8 <ll_rx_dequeue+0x13c>)
   10ce6:	4836      	ldr	r0, [pc, #216]	; (10dc0 <ll_rx_dequeue+0x144>)
   10ce8:	e7df      	b.n	10caa <ll_rx_dequeue+0x2e>
		LL_ASSERT(_radio.link_rx_data_quota <
   10cea:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   10cee:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   10cf2:	3801      	subs	r0, #1
   10cf4:	4283      	cmp	r3, r0
   10cf6:	db08      	blt.n	10d0a <ll_rx_dequeue+0x8e>
   10cf8:	4a2c      	ldr	r2, [pc, #176]	; (10dac <ll_rx_dequeue+0x130>)
   10cfa:	4b2d      	ldr	r3, [pc, #180]	; (10db0 <ll_rx_dequeue+0x134>)
   10cfc:	9201      	str	r2, [sp, #4]
   10cfe:	9200      	str	r2, [sp, #0]
   10d00:	681c      	ldr	r4, [r3, #0]
   10d02:	492c      	ldr	r1, [pc, #176]	; (10db4 <ll_rx_dequeue+0x138>)
   10d04:	4b2c      	ldr	r3, [pc, #176]	; (10db8 <ll_rx_dequeue+0x13c>)
   10d06:	482f      	ldr	r0, [pc, #188]	; (10dc4 <ll_rx_dequeue+0x148>)
   10d08:	e7cf      	b.n	10caa <ll_rx_dequeue+0x2e>
		_radio.link_rx_data_quota++;
   10d0a:	3301      	adds	r3, #1
   10d0c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   10d10:	2906      	cmp	r1, #6
   10d12:	d138      	bne.n	10d86 <ll_rx_dequeue+0x10a>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   10d14:	7ad3      	ldrb	r3, [r2, #11]
   10d16:	2b3c      	cmp	r3, #60	; 0x3c
   10d18:	d00e      	beq.n	10d38 <ll_rx_dequeue+0xbc>
   10d1a:	7b12      	ldrb	r2, [r2, #12]
   10d1c:	b9f2      	cbnz	r2, 10d5c <ll_rx_dequeue+0xe0>
			LL_ASSERT(_radio.scanner.is_enabled);
   10d1e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10d22:	07d9      	lsls	r1, r3, #31
   10d24:	d431      	bmi.n	10d8a <ll_rx_dequeue+0x10e>
   10d26:	4a21      	ldr	r2, [pc, #132]	; (10dac <ll_rx_dequeue+0x130>)
   10d28:	4b21      	ldr	r3, [pc, #132]	; (10db0 <ll_rx_dequeue+0x134>)
   10d2a:	9201      	str	r2, [sp, #4]
   10d2c:	9200      	str	r2, [sp, #0]
   10d2e:	681c      	ldr	r4, [r3, #0]
   10d30:	4920      	ldr	r1, [pc, #128]	; (10db4 <ll_rx_dequeue+0x138>)
   10d32:	4b21      	ldr	r3, [pc, #132]	; (10db8 <ll_rx_dequeue+0x13c>)
   10d34:	4824      	ldr	r0, [pc, #144]	; (10dc8 <ll_rx_dequeue+0x14c>)
   10d36:	e7b8      	b.n	10caa <ll_rx_dequeue+0x2e>
				_radio.advertiser.conn = NULL;
   10d38:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   10d3a:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   10d3e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   10d42:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10d46:	2b00      	cmp	r3, #0
   10d48:	db0a      	blt.n	10d60 <ll_rx_dequeue+0xe4>
   10d4a:	4a18      	ldr	r2, [pc, #96]	; (10dac <ll_rx_dequeue+0x130>)
   10d4c:	4b18      	ldr	r3, [pc, #96]	; (10db0 <ll_rx_dequeue+0x134>)
   10d4e:	9201      	str	r2, [sp, #4]
   10d50:	9200      	str	r2, [sp, #0]
   10d52:	681c      	ldr	r4, [r3, #0]
   10d54:	4917      	ldr	r1, [pc, #92]	; (10db4 <ll_rx_dequeue+0x138>)
   10d56:	4b18      	ldr	r3, [pc, #96]	; (10db8 <ll_rx_dequeue+0x13c>)
   10d58:	481c      	ldr	r0, [pc, #112]	; (10dcc <ll_rx_dequeue+0x150>)
   10d5a:	e7a6      	b.n	10caa <ll_rx_dequeue+0x2e>
		struct connection *conn = NULL;
   10d5c:	2500      	movs	r5, #0
   10d5e:	e7f0      	b.n	10d42 <ll_rx_dequeue+0xc6>
			_radio.advertiser.is_enabled = 0;
   10d60:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10d64:	f36f 13c7 	bfc	r3, #7, #1
   10d68:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   10d6c:	b995      	cbnz	r5, 10d94 <ll_rx_dequeue+0x118>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10d6e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   10d72:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10d76:	f000 0001 	and.w	r0, r0, #1
   10d7a:	0040      	lsls	r0, r0, #1
		if (!bm) {
   10d7c:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   10d80:	d101      	bne.n	10d86 <ll_rx_dequeue+0x10a>
			ll_adv_scan_state_cb(0);
   10d82:	f000 fdc3 	bl	1190c <ll_adv_scan_state_cb>
}
   10d86:	b005      	add	sp, #20
   10d88:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   10d8a:	f362 0300 	bfi	r3, r2, #0, #1
   10d8e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   10d92:	e7ec      	b.n	10d6e <ll_rx_dequeue+0xf2>
			mem_release(node_rx->hdr.onion.link,
   10d94:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   10d98:	490d      	ldr	r1, [pc, #52]	; (10dd0 <ll_rx_dequeue+0x154>)
   10d9a:	f7f5 ffa0 	bl	6cde <mem_release>
			mem_release(conn, &_radio.conn_free);
   10d9e:	490d      	ldr	r1, [pc, #52]	; (10dd4 <ll_rx_dequeue+0x158>)
   10da0:	4628      	mov	r0, r5
   10da2:	f7f5 ff9c 	bl	6cde <mem_release>
   10da6:	e7e2      	b.n	10d6e <ll_rx_dequeue+0xf2>
   10da8:	200008f0 	.word	0x200008f0
   10dac:	00014891 	.word	0x00014891
   10db0:	20003aa4 	.word	0x20003aa4
   10db4:	00015639 	.word	0x00015639
   10db8:	00016e61 	.word	0x00016e61
   10dbc:	00016eaf 	.word	0x00016eaf
   10dc0:	00015597 	.word	0x00015597
   10dc4:	00016f5a 	.word	0x00016f5a
   10dc8:	00017448 	.word	0x00017448
   10dcc:	0001740a 	.word	0x0001740a
   10dd0:	20000a38 	.word	0x20000a38
   10dd4:	200009fc 	.word	0x200009fc

00010dd8 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   10dd8:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   10dda:	4c0b      	ldr	r4, [pc, #44]	; (10e08 <rtc0_nrf5_isr+0x30>)
   10ddc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   10de0:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   10de4:	b122      	cbz	r2, 10df0 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   10de6:	2000      	movs	r0, #0
   10de8:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   10dec:	f7f6 fdd4 	bl	7998 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   10df0:	b12d      	cbz	r5, 10dfe <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   10df2:	2300      	movs	r3, #0
   10df4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   10df8:	2001      	movs	r0, #1
   10dfa:	f7f6 fdcd 	bl	7998 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   10dfe:	2000      	movs	r0, #0
}
   10e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   10e04:	f7f6 b86a 	b.w	6edc <mayfly_run>
   10e08:	4000b000 	.word	0x4000b000

00010e0c <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   10e0c:	2001      	movs	r0, #1
   10e0e:	f7f6 b865 	b.w	6edc <mayfly_run>

00010e12 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10e12:	4668      	mov	r0, sp
   10e14:	f020 0107 	bic.w	r1, r0, #7
   10e18:	468d      	mov	sp, r1
   10e1a:	b501      	push	{r0, lr}
	isr_radio();
   10e1c:	f001 f8b6 	bl	11f8c <isr_radio>
	ISR_DIRECT_PM();
   10e20:	f7f0 fd6c 	bl	18fc <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   10e24:	f7f0 fb52 	bl	14cc <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10e28:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   10e2c:	4685      	mov	sp, r0
   10e2e:	4770      	bx	lr

00010e30 <radio_active_callback>:
{
   10e30:	4770      	bx	lr
	...

00010e34 <radio_event_callback>:
	k_sem_give(sem_recv);
   10e34:	4b01      	ldr	r3, [pc, #4]	; (10e3c <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10e36:	6818      	ldr	r0, [r3, #0]
   10e38:	f002 bf4c 	b.w	13cd4 <_impl_k_sem_give>
   10e3c:	20001220 	.word	0x20001220

00010e40 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   10e40:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   10e42:	4b41      	ldr	r3, [pc, #260]	; (10f48 <ll_init+0x108>)
{
   10e44:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   10e46:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   10e48:	4840      	ldr	r0, [pc, #256]	; (10f4c <ll_init+0x10c>)
   10e4a:	f002 f9ed 	bl	13228 <device_get_binding>
	if (!clk_k32) {
   10e4e:	b918      	cbnz	r0, 10e58 <ll_init+0x18>
		return -ENODEV;
   10e50:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   10e54:	b006      	add	sp, #24
   10e56:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   10e58:	6843      	ldr	r3, [r0, #4]
   10e5a:	2101      	movs	r1, #1
   10e5c:	681b      	ldr	r3, [r3, #0]
   10e5e:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   10e60:	483b      	ldr	r0, [pc, #236]	; (10f50 <ll_init+0x110>)
   10e62:	f002 f9e1 	bl	13228 <device_get_binding>
	if (!entropy) {
   10e66:	4604      	mov	r4, r0
   10e68:	2800      	cmp	r0, #0
   10e6a:	d0f1      	beq.n	10e50 <ll_init+0x10>
	cntr_init();
   10e6c:	f000 ff74 	bl	11d58 <cntr_init>
	mayfly_init();
   10e70:	f7f5 ff94 	bl	6d9c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10e74:	4b37      	ldr	r3, [pc, #220]	; (10f54 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   10e76:	2203      	movs	r2, #3
   10e78:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10e7a:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e7c:	4a36      	ldr	r2, [pc, #216]	; (10f58 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10e7e:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10e80:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10e82:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10e84:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10e86:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e88:	9205      	str	r2, [sp, #20]
   10e8a:	4a34      	ldr	r2, [pc, #208]	; (10f5c <ll_init+0x11c>)
   10e8c:	9204      	str	r2, [sp, #16]
   10e8e:	4a34      	ldr	r2, [pc, #208]	; (10f60 <ll_init+0x120>)
   10e90:	9203      	str	r2, [sp, #12]
   10e92:	4a34      	ldr	r2, [pc, #208]	; (10f64 <ll_init+0x124>)
   10e94:	9202      	str	r2, [sp, #8]
   10e96:	220d      	movs	r2, #13
   10e98:	9201      	str	r2, [sp, #4]
   10e9a:	9300      	str	r3, [sp, #0]
   10e9c:	4a32      	ldr	r2, [pc, #200]	; (10f68 <ll_init+0x128>)
   10e9e:	2304      	movs	r3, #4
   10ea0:	f7f6 fd42 	bl	7928 <ticker_init>
	LL_ASSERT(!err);
   10ea4:	b170      	cbz	r0, 10ec4 <ll_init+0x84>
   10ea6:	4a31      	ldr	r2, [pc, #196]	; (10f6c <ll_init+0x12c>)
   10ea8:	4b31      	ldr	r3, [pc, #196]	; (10f70 <ll_init+0x130>)
   10eaa:	9201      	str	r2, [sp, #4]
   10eac:	9200      	str	r2, [sp, #0]
   10eae:	681c      	ldr	r4, [r3, #0]
   10eb0:	4930      	ldr	r1, [pc, #192]	; (10f74 <ll_init+0x134>)
   10eb2:	4b31      	ldr	r3, [pc, #196]	; (10f78 <ll_init+0x138>)
   10eb4:	4831      	ldr	r0, [pc, #196]	; (10f7c <ll_init+0x13c>)
   10eb6:	47a0      	blx	r4
   10eb8:	4040      	eors	r0, r0
   10eba:	f380 8811 	msr	BASEPRI, r0
   10ebe:	f04f 0004 	mov.w	r0, #4
   10ec2:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   10ec4:	482e      	ldr	r0, [pc, #184]	; (10f80 <ll_init+0x140>)
   10ec6:	f002 f9af 	bl	13228 <device_get_binding>
	if (!clk_m16) {
   10eca:	2800      	cmp	r0, #0
   10ecc:	d0c0      	beq.n	10e50 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   10ece:	4b2d      	ldr	r3, [pc, #180]	; (10f84 <ll_init+0x144>)
   10ed0:	9304      	str	r3, [sp, #16]
   10ed2:	9501      	str	r5, [sp, #4]
   10ed4:	231b      	movs	r3, #27
   10ed6:	2501      	movs	r5, #1
   10ed8:	f44f 7657 	mov.w	r6, #860	; 0x35c
   10edc:	9303      	str	r3, [sp, #12]
   10ede:	9302      	str	r3, [sp, #8]
   10ee0:	4622      	mov	r2, r4
   10ee2:	9605      	str	r6, [sp, #20]
   10ee4:	9500      	str	r5, [sp, #0]
   10ee6:	462b      	mov	r3, r5
   10ee8:	2107      	movs	r1, #7
   10eea:	f7fe ff43 	bl	fd74 <radio_init>
	if (err) {
   10eee:	4604      	mov	r4, r0
   10ef0:	b160      	cbz	r0, 10f0c <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   10ef2:	4a1e      	ldr	r2, [pc, #120]	; (10f6c <ll_init+0x12c>)
   10ef4:	4b1e      	ldr	r3, [pc, #120]	; (10f70 <ll_init+0x130>)
   10ef6:	9203      	str	r2, [sp, #12]
   10ef8:	e88d 0054 	stmia.w	sp, {r2, r4, r6}
   10efc:	4822      	ldr	r0, [pc, #136]	; (10f88 <ll_init+0x148>)
   10efe:	681c      	ldr	r4, [r3, #0]
   10f00:	491c      	ldr	r1, [pc, #112]	; (10f74 <ll_init+0x134>)
   10f02:	4b1d      	ldr	r3, [pc, #116]	; (10f78 <ll_init+0x138>)
   10f04:	47a0      	blx	r4
		return -ENOMEM;
   10f06:	f06f 000b 	mvn.w	r0, #11
   10f0a:	e7a3      	b.n	10e54 <ll_init+0x14>
	ll_filter_reset(true);
   10f0c:	4628      	mov	r0, r5
   10f0e:	f000 fedb 	bl	11cc8 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10f12:	4622      	mov	r2, r4
   10f14:	4621      	mov	r1, r4
   10f16:	4628      	mov	r0, r5
   10f18:	f7f0 fcd6 	bl	18c8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10f1c:	4622      	mov	r2, r4
   10f1e:	4621      	mov	r1, r4
   10f20:	200b      	movs	r0, #11
   10f22:	f7f0 fcd1 	bl	18c8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   10f26:	4622      	mov	r2, r4
   10f28:	4621      	mov	r1, r4
   10f2a:	2018      	movs	r0, #24
   10f2c:	f7f0 fccc 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   10f30:	4628      	mov	r0, r5
   10f32:	f7f0 fc97 	bl	1864 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   10f36:	200b      	movs	r0, #11
   10f38:	f7f0 fc94 	bl	1864 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   10f3c:	2018      	movs	r0, #24
   10f3e:	f7f0 fc91 	bl	1864 <_arch_irq_enable>
	return 0;
   10f42:	4620      	mov	r0, r4
   10f44:	e786      	b.n	10e54 <ll_init+0x14>
   10f46:	bf00      	nop
   10f48:	20001220 	.word	0x20001220
   10f4c:	00014964 	.word	0x00014964
   10f50:	00014938 	.word	0x00014938
   10f54:	20001200 	.word	0x20001200
   10f58:	00012929 	.word	0x00012929
   10f5c:	00012885 	.word	0x00012885
   10f60:	00012829 	.word	0x00012829
   10f64:	20000f90 	.word	0x20000f90
   10f68:	20000e50 	.word	0x20000e50
   10f6c:	00014891 	.word	0x00014891
   10f70:	20003aa4 	.word	0x20003aa4
   10f74:	00015639 	.word	0x00015639
   10f78:	00017b7f 	.word	0x00017b7f
   10f7c:	00017b87 	.word	0x00017b87
   10f80:	0001496f 	.word	0x0001496f
   10f84:	20000af4 	.word	0x20000af4
   10f88:	00017bad 	.word	0x00017bad

00010f8c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   10f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f90:	4681      	mov	r9, r0
   10f92:	4688      	mov	r8, r1
   10f94:	4617      	mov	r7, r2
   10f96:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   10f98:	f7fe ffd0 	bl	ff3c <ll_scan_is_enabled>
   10f9c:	b988      	cbnz	r0, 10fc2 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   10f9e:	4d0a      	ldr	r5, [pc, #40]	; (10fc8 <ll_scan_params_set+0x3c>)
   10fa0:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   10fa2:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   10fa6:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   10faa:	4622      	mov	r2, r4
   10fac:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   10fb0:	4613      	mov	r3, r2
   10fb2:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   10fb6:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   10fb8:	f362 1387 	bfi	r3, r2, #6, #2
   10fbc:	712b      	strb	r3, [r5, #4]

	return 0;
   10fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10fc2:	200c      	movs	r0, #12
}
   10fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10fc8:	20001224 	.word	0x20001224

00010fcc <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   10fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fce:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   10fd0:	b920      	cbnz	r0, 10fdc <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   10fd2:	b005      	add	sp, #20
   10fd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   10fd8:	f7ff be18 	b.w	10c0c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   10fdc:	f7fe ffae 	bl	ff3c <ll_scan_is_enabled>
   10fe0:	4606      	mov	r6, r0
   10fe2:	bb40      	cbnz	r0, 11036 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   10fe4:	4c15      	ldr	r4, [pc, #84]	; (1103c <ll_scan_enable+0x70>)
   10fe6:	7920      	ldrb	r0, [r4, #4]
   10fe8:	0980      	lsrs	r0, r0, #6
   10fea:	f000 fa63 	bl	114b4 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   10fee:	7923      	ldrb	r3, [r4, #4]
   10ff0:	f013 0501 	ands.w	r5, r3, #1
   10ff4:	d006      	beq.n	11004 <ll_scan_enable+0x38>
   10ff6:	f013 0520 	ands.w	r5, r3, #32
   10ffa:	d003      	beq.n	11004 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   10ffc:	4630      	mov	r0, r6
   10ffe:	f000 fbdd 	bl	117bc <ll_rl_rpa_update>
		rpa_gen = 1;
   11002:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11004:	7926      	ldrb	r6, [r4, #4]
   11006:	f006 070f 	and.w	r7, r6, #15
   1100a:	f3c6 1600 	ubfx	r6, r6, #4, #1
   1100e:	2100      	movs	r1, #0
   11010:	4630      	mov	r0, r6
   11012:	f7f6 fe47 	bl	7ca4 <ll_addr_get>
   11016:	22ff      	movs	r2, #255	; 0xff
   11018:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   1101a:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1101c:	8823      	ldrh	r3, [r4, #0]
   1101e:	9502      	str	r5, [sp, #8]
   11020:	0992      	lsrs	r2, r2, #6
   11022:	9201      	str	r2, [sp, #4]
   11024:	8862      	ldrh	r2, [r4, #2]
   11026:	9200      	str	r2, [sp, #0]
   11028:	4631      	mov	r1, r6
   1102a:	4602      	mov	r2, r0
   1102c:	4638      	mov	r0, r7
   1102e:	f7ff fd0f 	bl	10a50 <radio_scan_enable>
}
   11032:	b005      	add	sp, #20
   11034:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   11036:	2000      	movs	r0, #0
   11038:	e7fb      	b.n	11032 <ll_scan_enable+0x66>
   1103a:	bf00      	nop
   1103c:	20001224 	.word	0x20001224

00011040 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   11040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11044:	b085      	sub	sp, #20
   11046:	461e      	mov	r6, r3
   11048:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1104c:	9303      	str	r3, [sp, #12]
   1104e:	4680      	mov	r8, r0
   11050:	4689      	mov	r9, r1
   11052:	4615      	mov	r5, r2
   11054:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11056:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   1105a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   1105e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   11062:	f7fe ff6b 	bl	ff3c <ll_scan_is_enabled>
   11066:	9b03      	ldr	r3, [sp, #12]
   11068:	bba0      	cbnz	r0, 110d4 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1106a:	9300      	str	r3, [sp, #0]
   1106c:	4652      	mov	r2, sl
   1106e:	465b      	mov	r3, fp
   11070:	4639      	mov	r1, r7
   11072:	4630      	mov	r0, r6
   11074:	f7fe ff88 	bl	ff88 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   11078:	bb68      	cbnz	r0, 110d6 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   1107a:	4628      	mov	r0, r5
   1107c:	f000 fa1a 	bl	114b4 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   11080:	b1dd      	cbz	r5, 110ba <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   11082:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11084:	1ea3      	subs	r3, r4, #2
   11086:	2b01      	cmp	r3, #1
   11088:	d822      	bhi.n	110d0 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   1108a:	2000      	movs	r0, #0
   1108c:	f000 fb96 	bl	117bc <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   11090:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   11094:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   11096:	2100      	movs	r1, #0
   11098:	4620      	mov	r0, r4
   1109a:	f7f6 fe03 	bl	7ca4 <ll_addr_get>
   1109e:	4643      	mov	r3, r8
   110a0:	4602      	mov	r2, r0
   110a2:	4621      	mov	r1, r4
   110a4:	2000      	movs	r0, #0
   110a6:	9711      	str	r7, [sp, #68]	; 0x44
   110a8:	9610      	str	r6, [sp, #64]	; 0x40
   110aa:	950f      	str	r5, [sp, #60]	; 0x3c
   110ac:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   110b0:	b005      	add	sp, #20
   110b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   110b6:	f7ff bccb 	b.w	10a50 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   110ba:	f000 fb77 	bl	117ac <ctrl_rl_enabled>
   110be:	2800      	cmp	r0, #0
   110c0:	d0df      	beq.n	11082 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   110c2:	4639      	mov	r1, r7
   110c4:	462a      	mov	r2, r5
   110c6:	4630      	mov	r0, r6
   110c8:	f000 fa16 	bl	114f8 <ll_rl_find>
   110cc:	4607      	mov	r7, r0
   110ce:	e7d9      	b.n	11084 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   110d0:	2600      	movs	r6, #0
   110d2:	e7e0      	b.n	11096 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   110d4:	200c      	movs	r0, #12
}
   110d6:	b005      	add	sp, #20
   110d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000110dc <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   110dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110e0:	4688      	mov	r8, r1
	int i;

	if (free) {
   110e2:	4615      	mov	r5, r2
   110e4:	b10a      	cbz	r2, 110ea <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   110e6:	23ff      	movs	r3, #255	; 0xff
   110e8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   110ea:	4e14      	ldr	r6, [pc, #80]	; (1113c <wl_find+0x60>)
{
   110ec:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   110ee:	f000 0701 	and.w	r7, r0, #1
   110f2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   110f6:	07da      	lsls	r2, r3, #31
   110f8:	d51d      	bpl.n	11136 <wl_find+0x5a>
   110fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
   110fe:	42bb      	cmp	r3, r7
   11100:	d113      	bne.n	1112a <wl_find+0x4e>
   11102:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   11106:	2206      	movs	r2, #6
   11108:	4641      	mov	r1, r8
   1110a:	3002      	adds	r0, #2
   1110c:	f7f0 fd73 	bl	1bf6 <memcmp>
   11110:	b910      	cbnz	r0, 11118 <wl_find+0x3c>
			return i;
   11112:	b2e0      	uxtb	r0, r4
   11114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11118:	b13d      	cbz	r5, 1112a <wl_find+0x4e>
   1111a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1111e:	07db      	lsls	r3, r3, #31
   11120:	d403      	bmi.n	1112a <wl_find+0x4e>
   11122:	782b      	ldrb	r3, [r5, #0]
   11124:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11126:	bf08      	it	eq
   11128:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1112a:	3401      	adds	r4, #1
   1112c:	2c08      	cmp	r4, #8
   1112e:	d1e0      	bne.n	110f2 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11130:	20ff      	movs	r0, #255	; 0xff
   11132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11136:	2d00      	cmp	r5, #0
   11138:	d1f3      	bne.n	11122 <wl_find+0x46>
   1113a:	e7f6      	b.n	1112a <wl_find+0x4e>
   1113c:	20001457 	.word	0x20001457

00011140 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   11140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11144:	4d1a      	ldr	r5, [pc, #104]	; (111b0 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11146:	f8df 8074 	ldr.w	r8, [pc, #116]	; 111bc <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   1114a:	1eae      	subs	r6, r5, #2
{
   1114c:	2400      	movs	r4, #0
   1114e:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11150:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11154:	07d9      	lsls	r1, r3, #31
   11156:	d524      	bpl.n	111a2 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11158:	f898 3000 	ldrb.w	r3, [r8]
   1115c:	b15b      	cbz	r3, 11176 <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   1115e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11162:	2a07      	cmp	r2, #7
   11164:	d807      	bhi.n	11176 <filter_wl_update+0x36>
   11166:	2328      	movs	r3, #40	; 0x28
   11168:	4353      	muls	r3, r2
   1116a:	4a12      	ldr	r2, [pc, #72]	; (111b4 <filter_wl_update+0x74>)
   1116c:	5cd3      	ldrb	r3, [r2, r3]
   1116e:	075a      	lsls	r2, r3, #29
   11170:	d501      	bpl.n	11176 <filter_wl_update+0x36>
   11172:	06db      	lsls	r3, r3, #27
   11174:	d515      	bpl.n	111a2 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   11176:	4810      	ldr	r0, [pc, #64]	; (111b8 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11178:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1117c:	2201      	movs	r2, #1
   1117e:	fa02 f104 	lsl.w	r1, r2, r4
   11182:	7802      	ldrb	r2, [r0, #0]
   11184:	430a      	orrs	r2, r1
   11186:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11188:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1118c:	7842      	ldrb	r2, [r0, #1]
   1118e:	40a3      	lsls	r3, r4
   11190:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11192:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11194:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11196:	fb02 0004 	mla	r0, r2, r4, r0
   1119a:	4629      	mov	r1, r5
   1119c:	3002      	adds	r0, #2
   1119e:	f7f0 fd3f 	bl	1c20 <memcpy>
   111a2:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   111a4:	2c08      	cmp	r4, #8
   111a6:	f105 0508 	add.w	r5, r5, #8
   111aa:	d1d1      	bne.n	11150 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   111ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111b0:	20001459 	.word	0x20001459
   111b4:	200012e4 	.word	0x200012e4
   111b8:	20001497 	.word	0x20001497
   111bc:	20001424 	.word	0x20001424

000111c0 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   111c0:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   111c2:	f7fe fea7 	bl	ff14 <ll_adv_is_enabled>
   111c6:	b928      	cbnz	r0, 111d4 <rl_access_check.constprop.1+0x14>
   111c8:	f7fe feb8 	bl	ff3c <ll_scan_is_enabled>
   111cc:	fab0 f080 	clz	r0, r0
   111d0:	0940      	lsrs	r0, r0, #5
   111d2:	bd08      	pop	{r3, pc}
   111d4:	2000      	movs	r0, #0
}
   111d6:	bd08      	pop	{r3, pc}

000111d8 <filter_rl_update>:
{
   111d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   111da:	4e10      	ldr	r6, [pc, #64]	; (1121c <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   111dc:	4d10      	ldr	r5, [pc, #64]	; (11220 <filter_rl_update+0x48>)
{
   111de:	2400      	movs	r4, #0
		if (rl[i].taken) {
   111e0:	2728      	movs	r7, #40	; 0x28
   111e2:	fb07 f104 	mul.w	r1, r7, r4
   111e6:	5c73      	ldrb	r3, [r6, r1]
   111e8:	07da      	lsls	r2, r3, #31
   111ea:	d513      	bpl.n	11214 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   111ec:	2201      	movs	r2, #1
   111ee:	fa02 f004 	lsl.w	r0, r2, r4
   111f2:	782a      	ldrb	r2, [r5, #0]
   111f4:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   111f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   111fa:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   111fc:	786a      	ldrb	r2, [r5, #1]
   111fe:	40a3      	lsls	r3, r4
   11200:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11202:	2206      	movs	r2, #6
   11204:	3101      	adds	r1, #1
   11206:	fb02 5004 	mla	r0, r2, r4, r5
   1120a:	4431      	add	r1, r6
   1120c:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1120e:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11210:	f7f0 fd06 	bl	1c20 <memcpy>
   11214:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11216:	2c08      	cmp	r4, #8
   11218:	d1e3      	bne.n	111e2 <filter_rl_update+0xa>
}
   1121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1121c:	200012e4 	.word	0x200012e4
   11220:	20001425 	.word	0x20001425

00011224 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   11224:	2807      	cmp	r0, #7
   11226:	d80c      	bhi.n	11242 <ctrl_lrpa_get+0x1e>
   11228:	2328      	movs	r3, #40	; 0x28
   1122a:	4358      	muls	r0, r3
   1122c:	4a06      	ldr	r2, [pc, #24]	; (11248 <ctrl_lrpa_get+0x24>)
   1122e:	5c13      	ldrb	r3, [r2, r0]
   11230:	1811      	adds	r1, r2, r0
   11232:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   11236:	b128      	cbz	r0, 11244 <ctrl_lrpa_get+0x20>
   11238:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1123c:	b110      	cbz	r0, 11244 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1123e:	6a48      	ldr	r0, [r1, #36]	; 0x24
   11240:	4770      	bx	lr
		return NULL;
   11242:	2000      	movs	r0, #0
}
   11244:	4770      	bx	lr
   11246:	bf00      	nop
   11248:	200012e4 	.word	0x200012e4

0001124c <ctrl_irks_get>:
	*count = peer_irk_count;
   1124c:	4b02      	ldr	r3, [pc, #8]	; (11258 <ctrl_irks_get+0xc>)
   1124e:	781b      	ldrb	r3, [r3, #0]
   11250:	7003      	strb	r3, [r0, #0]
}
   11252:	4802      	ldr	r0, [pc, #8]	; (1125c <ctrl_irks_get+0x10>)
   11254:	4770      	bx	lr
   11256:	bf00      	nop
   11258:	2000125a 	.word	0x2000125a
   1125c:	20001263 	.word	0x20001263

00011260 <ctrl_rl_idx>:
{
   11260:	b513      	push	{r0, r1, r4, lr}
	if (whitelist) {
   11262:	b320      	cbz	r0, 112ae <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   11264:	2907      	cmp	r1, #7
   11266:	d90e      	bls.n	11286 <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   11268:	4a1e      	ldr	r2, [pc, #120]	; (112e4 <ctrl_rl_idx+0x84>)
   1126a:	4b1f      	ldr	r3, [pc, #124]	; (112e8 <ctrl_rl_idx+0x88>)
   1126c:	9201      	str	r2, [sp, #4]
   1126e:	9200      	str	r2, [sp, #0]
   11270:	681c      	ldr	r4, [r3, #0]
   11272:	491e      	ldr	r1, [pc, #120]	; (112ec <ctrl_rl_idx+0x8c>)
   11274:	4b1e      	ldr	r3, [pc, #120]	; (112f0 <ctrl_rl_idx+0x90>)
   11276:	481f      	ldr	r0, [pc, #124]	; (112f4 <ctrl_rl_idx+0x94>)
   11278:	47a0      	blx	r4
   1127a:	4040      	eors	r0, r0
   1127c:	f380 8811 	msr	BASEPRI, r0
   11280:	f04f 0004 	mov.w	r0, #4
   11284:	df02      	svc	2
   11286:	4b1c      	ldr	r3, [pc, #112]	; (112f8 <ctrl_rl_idx+0x98>)
   11288:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   1128c:	07d2      	lsls	r2, r2, #31
   1128e:	d408      	bmi.n	112a2 <ctrl_rl_idx+0x42>
   11290:	4a14      	ldr	r2, [pc, #80]	; (112e4 <ctrl_rl_idx+0x84>)
   11292:	4b15      	ldr	r3, [pc, #84]	; (112e8 <ctrl_rl_idx+0x88>)
   11294:	9201      	str	r2, [sp, #4]
   11296:	9200      	str	r2, [sp, #0]
   11298:	681c      	ldr	r4, [r3, #0]
   1129a:	4914      	ldr	r1, [pc, #80]	; (112ec <ctrl_rl_idx+0x8c>)
   1129c:	4b14      	ldr	r3, [pc, #80]	; (112f0 <ctrl_rl_idx+0x90>)
   1129e:	4817      	ldr	r0, [pc, #92]	; (112fc <ctrl_rl_idx+0x9c>)
   112a0:	e7ea      	b.n	11278 <ctrl_rl_idx+0x18>
		i = wl[devmatch_id].rl_idx;
   112a2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   112a6:	7849      	ldrb	r1, [r1, #1]
}
   112a8:	4608      	mov	r0, r1
   112aa:	b002      	add	sp, #8
   112ac:	bd10      	pop	{r4, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   112ae:	2907      	cmp	r1, #7
   112b0:	d908      	bls.n	112c4 <ctrl_rl_idx+0x64>
   112b2:	4a0c      	ldr	r2, [pc, #48]	; (112e4 <ctrl_rl_idx+0x84>)
   112b4:	4b0c      	ldr	r3, [pc, #48]	; (112e8 <ctrl_rl_idx+0x88>)
   112b6:	9201      	str	r2, [sp, #4]
   112b8:	9200      	str	r2, [sp, #0]
   112ba:	681c      	ldr	r4, [r3, #0]
   112bc:	490b      	ldr	r1, [pc, #44]	; (112ec <ctrl_rl_idx+0x8c>)
   112be:	4b0c      	ldr	r3, [pc, #48]	; (112f0 <ctrl_rl_idx+0x90>)
   112c0:	480f      	ldr	r0, [pc, #60]	; (11300 <ctrl_rl_idx+0xa0>)
   112c2:	e7d9      	b.n	11278 <ctrl_rl_idx+0x18>
		LL_ASSERT(rl[i].taken);
   112c4:	2328      	movs	r3, #40	; 0x28
   112c6:	434b      	muls	r3, r1
   112c8:	4a0e      	ldr	r2, [pc, #56]	; (11304 <ctrl_rl_idx+0xa4>)
   112ca:	5cd3      	ldrb	r3, [r2, r3]
   112cc:	07db      	lsls	r3, r3, #31
   112ce:	d4eb      	bmi.n	112a8 <ctrl_rl_idx+0x48>
   112d0:	4a04      	ldr	r2, [pc, #16]	; (112e4 <ctrl_rl_idx+0x84>)
   112d2:	4b05      	ldr	r3, [pc, #20]	; (112e8 <ctrl_rl_idx+0x88>)
   112d4:	9201      	str	r2, [sp, #4]
   112d6:	9200      	str	r2, [sp, #0]
   112d8:	681c      	ldr	r4, [r3, #0]
   112da:	4904      	ldr	r1, [pc, #16]	; (112ec <ctrl_rl_idx+0x8c>)
   112dc:	4b04      	ldr	r3, [pc, #16]	; (112f0 <ctrl_rl_idx+0x90>)
   112de:	480a      	ldr	r0, [pc, #40]	; (11308 <ctrl_rl_idx+0xa8>)
   112e0:	e7ca      	b.n	11278 <ctrl_rl_idx+0x18>
   112e2:	bf00      	nop
   112e4:	00014891 	.word	0x00014891
   112e8:	20003aa4 	.word	0x20003aa4
   112ec:	00015639 	.word	0x00015639
   112f0:	00017be2 	.word	0x00017be2
   112f4:	00017c7c 	.word	0x00017c7c
   112f8:	20001457 	.word	0x20001457
   112fc:	00017d49 	.word	0x00017d49
   11300:	00017d80 	.word	0x00017d80
   11304:	200012e4 	.word	0x200012e4
   11308:	00017e4d 	.word	0x00017e4d

0001130c <ctrl_rl_irk_idx>:
{
   1130c:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1130e:	4b18      	ldr	r3, [pc, #96]	; (11370 <ctrl_rl_irk_idx+0x64>)
   11310:	781b      	ldrb	r3, [r3, #0]
   11312:	4283      	cmp	r3, r0
   11314:	d80e      	bhi.n	11334 <ctrl_rl_irk_idx+0x28>
   11316:	4a17      	ldr	r2, [pc, #92]	; (11374 <ctrl_rl_irk_idx+0x68>)
   11318:	4b17      	ldr	r3, [pc, #92]	; (11378 <ctrl_rl_irk_idx+0x6c>)
   1131a:	9201      	str	r2, [sp, #4]
   1131c:	9200      	str	r2, [sp, #0]
   1131e:	681c      	ldr	r4, [r3, #0]
   11320:	4916      	ldr	r1, [pc, #88]	; (1137c <ctrl_rl_irk_idx+0x70>)
   11322:	4b17      	ldr	r3, [pc, #92]	; (11380 <ctrl_rl_irk_idx+0x74>)
   11324:	4817      	ldr	r0, [pc, #92]	; (11384 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11326:	47a0      	blx	r4
   11328:	4040      	eors	r0, r0
   1132a:	f380 8811 	msr	BASEPRI, r0
   1132e:	f04f 0004 	mov.w	r0, #4
   11332:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11334:	4b14      	ldr	r3, [pc, #80]	; (11388 <ctrl_rl_irk_idx+0x7c>)
   11336:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11338:	2807      	cmp	r0, #7
   1133a:	d908      	bls.n	1134e <ctrl_rl_irk_idx+0x42>
   1133c:	4a0d      	ldr	r2, [pc, #52]	; (11374 <ctrl_rl_irk_idx+0x68>)
   1133e:	4b0e      	ldr	r3, [pc, #56]	; (11378 <ctrl_rl_irk_idx+0x6c>)
   11340:	9201      	str	r2, [sp, #4]
   11342:	9200      	str	r2, [sp, #0]
   11344:	681c      	ldr	r4, [r3, #0]
   11346:	490d      	ldr	r1, [pc, #52]	; (1137c <ctrl_rl_irk_idx+0x70>)
   11348:	4b0d      	ldr	r3, [pc, #52]	; (11380 <ctrl_rl_irk_idx+0x74>)
   1134a:	4810      	ldr	r0, [pc, #64]	; (1138c <ctrl_rl_irk_idx+0x80>)
   1134c:	e7eb      	b.n	11326 <ctrl_rl_irk_idx+0x1a>
	LL_ASSERT(rl[i].taken);
   1134e:	2328      	movs	r3, #40	; 0x28
   11350:	4343      	muls	r3, r0
   11352:	4a0f      	ldr	r2, [pc, #60]	; (11390 <ctrl_rl_irk_idx+0x84>)
   11354:	5cd3      	ldrb	r3, [r2, r3]
   11356:	07db      	lsls	r3, r3, #31
   11358:	d408      	bmi.n	1136c <ctrl_rl_irk_idx+0x60>
   1135a:	4a06      	ldr	r2, [pc, #24]	; (11374 <ctrl_rl_irk_idx+0x68>)
   1135c:	4b06      	ldr	r3, [pc, #24]	; (11378 <ctrl_rl_irk_idx+0x6c>)
   1135e:	9201      	str	r2, [sp, #4]
   11360:	9200      	str	r2, [sp, #0]
   11362:	681c      	ldr	r4, [r3, #0]
   11364:	4905      	ldr	r1, [pc, #20]	; (1137c <ctrl_rl_irk_idx+0x70>)
   11366:	4b06      	ldr	r3, [pc, #24]	; (11380 <ctrl_rl_irk_idx+0x74>)
   11368:	480a      	ldr	r0, [pc, #40]	; (11394 <ctrl_rl_irk_idx+0x88>)
   1136a:	e7dc      	b.n	11326 <ctrl_rl_irk_idx+0x1a>
}
   1136c:	b002      	add	sp, #8
   1136e:	bd10      	pop	{r4, pc}
   11370:	2000125a 	.word	0x2000125a
   11374:	00014891 	.word	0x00014891
   11378:	20003aa4 	.word	0x20003aa4
   1137c:	00015639 	.word	0x00015639
   11380:	00017bee 	.word	0x00017bee
   11384:	00017e7a 	.word	0x00017e7a
   11388:	2000125b 	.word	0x2000125b
   1138c:	00017eb8 	.word	0x00017eb8
   11390:	200012e4 	.word	0x200012e4
   11394:	00017e4d 	.word	0x00017e4d

00011398 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11398:	2807      	cmp	r0, #7
{
   1139a:	b513      	push	{r0, r1, r4, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1139c:	d818      	bhi.n	113d0 <ctrl_irk_whitelisted+0x38>
	LL_ASSERT(rl[rl_idx].taken);
   1139e:	2328      	movs	r3, #40	; 0x28
   113a0:	4358      	muls	r0, r3
   113a2:	4b0c      	ldr	r3, [pc, #48]	; (113d4 <ctrl_irk_whitelisted+0x3c>)
   113a4:	5c18      	ldrb	r0, [r3, r0]
   113a6:	07c3      	lsls	r3, r0, #31
   113a8:	d40e      	bmi.n	113c8 <ctrl_irk_whitelisted+0x30>
   113aa:	4a0b      	ldr	r2, [pc, #44]	; (113d8 <ctrl_irk_whitelisted+0x40>)
   113ac:	4b0b      	ldr	r3, [pc, #44]	; (113dc <ctrl_irk_whitelisted+0x44>)
   113ae:	9201      	str	r2, [sp, #4]
   113b0:	9200      	str	r2, [sp, #0]
   113b2:	681c      	ldr	r4, [r3, #0]
   113b4:	490a      	ldr	r1, [pc, #40]	; (113e0 <ctrl_irk_whitelisted+0x48>)
   113b6:	4b0b      	ldr	r3, [pc, #44]	; (113e4 <ctrl_irk_whitelisted+0x4c>)
   113b8:	480b      	ldr	r0, [pc, #44]	; (113e8 <ctrl_irk_whitelisted+0x50>)
   113ba:	47a0      	blx	r4
   113bc:	4040      	eors	r0, r0
   113be:	f380 8811 	msr	BASEPRI, r0
   113c2:	f04f 0004 	mov.w	r0, #4
   113c6:	df02      	svc	2
	return rl[rl_idx].wl;
   113c8:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   113cc:	b002      	add	sp, #8
   113ce:	bd10      	pop	{r4, pc}
		return false;
   113d0:	2000      	movs	r0, #0
   113d2:	e7fb      	b.n	113cc <ctrl_irk_whitelisted+0x34>
   113d4:	200012e4 	.word	0x200012e4
   113d8:	00014891 	.word	0x00014891
   113dc:	20003aa4 	.word	0x20003aa4
   113e0:	00015639 	.word	0x00015639
   113e4:	00017bfe 	.word	0x00017bfe
   113e8:	00017c4a 	.word	0x00017c4a

000113ec <ctrl_filter_get>:
}
   113ec:	4b03      	ldr	r3, [pc, #12]	; (113fc <ctrl_filter_get+0x10>)
   113ee:	4a04      	ldr	r2, [pc, #16]	; (11400 <ctrl_filter_get+0x14>)
   113f0:	2800      	cmp	r0, #0
   113f2:	bf14      	ite	ne
   113f4:	4610      	movne	r0, r2
   113f6:	4618      	moveq	r0, r3
   113f8:	4770      	bx	lr
   113fa:	bf00      	nop
   113fc:	20001425 	.word	0x20001425
   11400:	20001497 	.word	0x20001497

00011404 <ll_wl_size_get>:
   11404:	2008      	movs	r0, #8
   11406:	4770      	bx	lr

00011408 <ll_wl_clear>:
{
   11408:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1140a:	f7fe fd8b 	bl	ff24 <radio_adv_filter_pol_get>
   1140e:	4604      	mov	r4, r0
   11410:	b110      	cbz	r0, 11418 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11412:	240c      	movs	r4, #12
}
   11414:	4620      	mov	r0, r4
   11416:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11418:	f7fe fda6 	bl	ff68 <radio_scan_filter_pol_get>
   1141c:	07c3      	lsls	r3, r0, #31
   1141e:	d4f8      	bmi.n	11412 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   11420:	4a07      	ldr	r2, [pc, #28]	; (11440 <ll_wl_clear+0x38>)
   11422:	4623      	mov	r3, r4
   11424:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11428:	f36f 0100 	bfc	r1, #0, #1
   1142c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11430:	3301      	adds	r3, #1
   11432:	2b08      	cmp	r3, #8
   11434:	d1f6      	bne.n	11424 <ll_wl_clear+0x1c>
	wl_anon = 0;
   11436:	4b03      	ldr	r3, [pc, #12]	; (11444 <ll_wl_clear+0x3c>)
   11438:	2200      	movs	r2, #0
   1143a:	701a      	strb	r2, [r3, #0]
	return 0;
   1143c:	e7ea      	b.n	11414 <ll_wl_clear+0xc>
   1143e:	bf00      	nop
   11440:	20001457 	.word	0x20001457
   11444:	20001950 	.word	0x20001950

00011448 <ll_wl_remove>:
{
   11448:	b538      	push	{r3, r4, r5, lr}
   1144a:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1144c:	f7fe fd6a 	bl	ff24 <radio_adv_filter_pol_get>
   11450:	4604      	mov	r4, r0
   11452:	b110      	cbz	r0, 1145a <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11454:	240c      	movs	r4, #12
}
   11456:	4620      	mov	r0, r4
   11458:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1145a:	f7fe fd85 	bl	ff68 <radio_scan_filter_pol_get>
   1145e:	07c3      	lsls	r3, r0, #31
   11460:	d4f8      	bmi.n	11454 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   11462:	7828      	ldrb	r0, [r5, #0]
   11464:	28ff      	cmp	r0, #255	; 0xff
   11466:	d102      	bne.n	1146e <ll_wl_remove+0x26>
		wl_anon = 0;
   11468:	4b0f      	ldr	r3, [pc, #60]	; (114a8 <ll_wl_remove+0x60>)
   1146a:	701c      	strb	r4, [r3, #0]
		return 0;
   1146c:	e7f3      	b.n	11456 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1146e:	4622      	mov	r2, r4
   11470:	1c69      	adds	r1, r5, #1
   11472:	f7ff fe33 	bl	110dc <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11476:	2807      	cmp	r0, #7
   11478:	d813      	bhi.n	114a2 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1147a:	4b0c      	ldr	r3, [pc, #48]	; (114ac <ll_wl_remove+0x64>)
   1147c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   11480:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   11482:	2d07      	cmp	r5, #7
   11484:	d806      	bhi.n	11494 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   11486:	2228      	movs	r2, #40	; 0x28
   11488:	4909      	ldr	r1, [pc, #36]	; (114b0 <ll_wl_remove+0x68>)
   1148a:	436a      	muls	r2, r5
   1148c:	5c8d      	ldrb	r5, [r1, r2]
   1148e:	f364 1545 	bfi	r5, r4, #5, #1
   11492:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   11494:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11498:	f36f 0200 	bfc	r2, #0, #1
   1149c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   114a0:	e7d9      	b.n	11456 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   114a2:	2402      	movs	r4, #2
   114a4:	e7d7      	b.n	11456 <ll_wl_remove+0xe>
   114a6:	bf00      	nop
   114a8:	20001950 	.word	0x20001950
   114ac:	20001457 	.word	0x20001457
   114b0:	200012e4 	.word	0x200012e4

000114b4 <ll_filters_scan_update>:
{
   114b4:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   114b6:	4b0d      	ldr	r3, [pc, #52]	; (114ec <ll_filters_scan_update+0x38>)
   114b8:	2200      	movs	r2, #0
   114ba:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   114bc:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   114be:	07c3      	lsls	r3, r0, #31
   114c0:	d504      	bpl.n	114cc <ll_filters_scan_update+0x18>
   114c2:	f7fe fd2f 	bl	ff24 <radio_adv_filter_pol_get>
   114c6:	b908      	cbnz	r0, 114cc <ll_filters_scan_update+0x18>
		filter_wl_update();
   114c8:	f7ff fe3a 	bl	11140 <filter_wl_update>
	filter->enable_bitmask = 0;
   114cc:	4b08      	ldr	r3, [pc, #32]	; (114f0 <ll_filters_scan_update+0x3c>)
   114ce:	2200      	movs	r2, #0
   114d0:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   114d2:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   114d4:	4b07      	ldr	r3, [pc, #28]	; (114f4 <ll_filters_scan_update+0x40>)
   114d6:	781b      	ldrb	r3, [r3, #0]
   114d8:	b133      	cbz	r3, 114e8 <ll_filters_scan_update+0x34>
   114da:	f7fe fd1b 	bl	ff14 <ll_adv_is_enabled>
   114de:	b918      	cbnz	r0, 114e8 <ll_filters_scan_update+0x34>
}
   114e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   114e4:	f7ff be78 	b.w	111d8 <filter_rl_update>
   114e8:	bd08      	pop	{r3, pc}
   114ea:	bf00      	nop
   114ec:	20001497 	.word	0x20001497
   114f0:	20001425 	.word	0x20001425
   114f4:	20001424 	.word	0x20001424

000114f8 <ll_rl_find>:
{
   114f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   114fc:	468a      	mov	sl, r1
	if (free) {
   114fe:	4614      	mov	r4, r2
   11500:	b10a      	cbz	r2, 11506 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   11502:	23ff      	movs	r3, #255	; 0xff
   11504:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11506:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1155c <ll_rl_find+0x64>
{
   1150a:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1150c:	f000 0901 	and.w	r9, r0, #1
   11510:	2628      	movs	r6, #40	; 0x28
   11512:	436e      	muls	r6, r5
   11514:	b2ef      	uxtb	r7, r5
   11516:	f818 3006 	ldrb.w	r3, [r8, r6]
   1151a:	07da      	lsls	r2, r3, #31
   1151c:	d51a      	bpl.n	11554 <ll_rl_find+0x5c>
   1151e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11522:	454b      	cmp	r3, r9
   11524:	d10f      	bne.n	11546 <ll_rl_find+0x4e>
   11526:	1c70      	adds	r0, r6, #1
   11528:	2206      	movs	r2, #6
   1152a:	4651      	mov	r1, sl
   1152c:	4440      	add	r0, r8
   1152e:	f7f0 fb62 	bl	1bf6 <memcmp>
   11532:	b160      	cbz	r0, 1154e <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11534:	b13c      	cbz	r4, 11546 <ll_rl_find+0x4e>
   11536:	f818 3006 	ldrb.w	r3, [r8, r6]
   1153a:	07db      	lsls	r3, r3, #31
   1153c:	d403      	bmi.n	11546 <ll_rl_find+0x4e>
   1153e:	7823      	ldrb	r3, [r4, #0]
   11540:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11542:	bf08      	it	eq
   11544:	7027      	strbeq	r7, [r4, #0]
   11546:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11548:	2d08      	cmp	r5, #8
   1154a:	d1e1      	bne.n	11510 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   1154c:	27ff      	movs	r7, #255	; 0xff
}
   1154e:	4638      	mov	r0, r7
   11550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11554:	2c00      	cmp	r4, #0
   11556:	d1f2      	bne.n	1153e <ll_rl_find+0x46>
   11558:	e7f5      	b.n	11546 <ll_rl_find+0x4e>
   1155a:	bf00      	nop
   1155c:	200012e4 	.word	0x200012e4

00011560 <ll_wl_add>:
{
   11560:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11564:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11566:	f7fe fcdd 	bl	ff24 <radio_adv_filter_pol_get>
   1156a:	4605      	mov	r5, r0
   1156c:	b120      	cbz	r0, 11578 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1156e:	250c      	movs	r5, #12
}
   11570:	4628      	mov	r0, r5
   11572:	b002      	add	sp, #8
   11574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11578:	f7fe fcf6 	bl	ff68 <radio_scan_filter_pol_get>
   1157c:	07c3      	lsls	r3, r0, #31
   1157e:	d4f6      	bmi.n	1156e <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   11580:	7838      	ldrb	r0, [r7, #0]
   11582:	28ff      	cmp	r0, #255	; 0xff
   11584:	d103      	bne.n	1158e <ll_wl_add+0x2e>
		wl_anon = 1;
   11586:	4b1f      	ldr	r3, [pc, #124]	; (11604 <ll_wl_add+0xa4>)
   11588:	2201      	movs	r2, #1
   1158a:	701a      	strb	r2, [r3, #0]
		return 0;
   1158c:	e7f0      	b.n	11570 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1158e:	f107 0801 	add.w	r8, r7, #1
   11592:	f10d 0207 	add.w	r2, sp, #7
   11596:	4641      	mov	r1, r8
   11598:	f7ff fda0 	bl	110dc <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1159c:	2807      	cmp	r0, #7
   1159e:	d92d      	bls.n	115fc <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   115a0:	f89d 6007 	ldrb.w	r6, [sp, #7]
   115a4:	2e07      	cmp	r6, #7
   115a6:	d82b      	bhi.n	11600 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   115a8:	4c17      	ldr	r4, [pc, #92]	; (11608 <ll_wl_add+0xa8>)
   115aa:	783a      	ldrb	r2, [r7, #0]
   115ac:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   115b0:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   115b4:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   115b8:	4641      	mov	r1, r8
   115ba:	2206      	movs	r2, #6
   115bc:	3002      	adds	r0, #2
   115be:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   115c2:	f7f0 fb2d 	bl	1c20 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   115c6:	462a      	mov	r2, r5
   115c8:	4641      	mov	r1, r8
   115ca:	7838      	ldrb	r0, [r7, #0]
   115cc:	f7ff ff94 	bl	114f8 <ll_rl_find>
   115d0:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   115d2:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   115d4:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   115d6:	d80e      	bhi.n	115f6 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   115d8:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   115da:	2328      	movs	r3, #40	; 0x28
   115dc:	4a0b      	ldr	r2, [pc, #44]	; (1160c <ll_wl_add+0xac>)
   115de:	4358      	muls	r0, r3
   115e0:	5c13      	ldrb	r3, [r2, r0]
   115e2:	f043 0320 	orr.w	r3, r3, #32
   115e6:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   115e8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   115ec:	f043 0301 	orr.w	r3, r3, #1
   115f0:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   115f4:	e7bc      	b.n	11570 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   115f6:	22ff      	movs	r2, #255	; 0xff
   115f8:	705a      	strb	r2, [r3, #1]
   115fa:	e7f5      	b.n	115e8 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   115fc:	2512      	movs	r5, #18
   115fe:	e7b7      	b.n	11570 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11600:	2507      	movs	r5, #7
	return wl_add(addr);
   11602:	e7b5      	b.n	11570 <ll_wl_add+0x10>
   11604:	20001950 	.word	0x20001950
   11608:	20001457 	.word	0x20001457
   1160c:	200012e4 	.word	0x200012e4

00011610 <ctrl_rl_idx_allowed>:
{
   11610:	b513      	push	{r0, r1, r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   11612:	4b11      	ldr	r3, [pc, #68]	; (11658 <ctrl_rl_idx_allowed+0x48>)
   11614:	781b      	ldrb	r3, [r3, #0]
   11616:	b1eb      	cbz	r3, 11654 <ctrl_rl_idx_allowed+0x44>
   11618:	2907      	cmp	r1, #7
   1161a:	d81b      	bhi.n	11654 <ctrl_rl_idx_allowed+0x44>
   1161c:	b9d0      	cbnz	r0, 11654 <ctrl_rl_idx_allowed+0x44>
	LL_ASSERT(rl[rl_idx].taken);
   1161e:	2328      	movs	r3, #40	; 0x28
   11620:	4359      	muls	r1, r3
   11622:	4b0e      	ldr	r3, [pc, #56]	; (1165c <ctrl_rl_idx_allowed+0x4c>)
   11624:	5c58      	ldrb	r0, [r3, r1]
   11626:	07c2      	lsls	r2, r0, #31
   11628:	d40e      	bmi.n	11648 <ctrl_rl_idx_allowed+0x38>
   1162a:	4a0d      	ldr	r2, [pc, #52]	; (11660 <ctrl_rl_idx_allowed+0x50>)
   1162c:	4b0d      	ldr	r3, [pc, #52]	; (11664 <ctrl_rl_idx_allowed+0x54>)
   1162e:	9201      	str	r2, [sp, #4]
   11630:	9200      	str	r2, [sp, #0]
   11632:	681c      	ldr	r4, [r3, #0]
   11634:	490c      	ldr	r1, [pc, #48]	; (11668 <ctrl_rl_idx_allowed+0x58>)
   11636:	4b0d      	ldr	r3, [pc, #52]	; (1166c <ctrl_rl_idx_allowed+0x5c>)
   11638:	480d      	ldr	r0, [pc, #52]	; (11670 <ctrl_rl_idx_allowed+0x60>)
   1163a:	47a0      	blx	r4
   1163c:	4040      	eors	r0, r0
   1163e:	f380 8811 	msr	BASEPRI, r0
   11642:	f04f 0004 	mov.w	r0, #4
   11646:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   11648:	0743      	lsls	r3, r0, #29
   1164a:	d503      	bpl.n	11654 <ctrl_rl_idx_allowed+0x44>
   1164c:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   11650:	b002      	add	sp, #8
   11652:	bd10      	pop	{r4, pc}
		return true;
   11654:	2001      	movs	r0, #1
   11656:	e7fb      	b.n	11650 <ctrl_rl_idx_allowed+0x40>
   11658:	20001424 	.word	0x20001424
   1165c:	200012e4 	.word	0x200012e4
   11660:	00014891 	.word	0x00014891
   11664:	20003aa4 	.word	0x20003aa4
   11668:	00015639 	.word	0x00015639
   1166c:	00017c13 	.word	0x00017c13
   11670:	00017c4a 	.word	0x00017c4a

00011674 <ll_rl_id_addr_get>:
{
   11674:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11676:	2b07      	cmp	r3, #7
{
   11678:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1167a:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1167c:	d90e      	bls.n	1169c <ll_rl_id_addr_get+0x28>
   1167e:	4a16      	ldr	r2, [pc, #88]	; (116d8 <ll_rl_id_addr_get+0x64>)
   11680:	4b16      	ldr	r3, [pc, #88]	; (116dc <ll_rl_id_addr_get+0x68>)
   11682:	9201      	str	r2, [sp, #4]
   11684:	9200      	str	r2, [sp, #0]
   11686:	681c      	ldr	r4, [r3, #0]
   11688:	4915      	ldr	r1, [pc, #84]	; (116e0 <ll_rl_id_addr_get+0x6c>)
   1168a:	4b16      	ldr	r3, [pc, #88]	; (116e4 <ll_rl_id_addr_get+0x70>)
   1168c:	4816      	ldr	r0, [pc, #88]	; (116e8 <ll_rl_id_addr_get+0x74>)
	LL_ASSERT(rl[rl_idx].taken);
   1168e:	47a0      	blx	r4
   11690:	4040      	eors	r0, r0
   11692:	f380 8811 	msr	BASEPRI, r0
   11696:	f04f 0004 	mov.w	r0, #4
   1169a:	df02      	svc	2
   1169c:	2528      	movs	r5, #40	; 0x28
   1169e:	4c13      	ldr	r4, [pc, #76]	; (116ec <ll_rl_id_addr_get+0x78>)
   116a0:	fb05 f203 	mul.w	r2, r5, r3
   116a4:	5ca2      	ldrb	r2, [r4, r2]
   116a6:	f012 0f01 	tst.w	r2, #1
   116aa:	d108      	bne.n	116be <ll_rl_id_addr_get+0x4a>
   116ac:	4a0a      	ldr	r2, [pc, #40]	; (116d8 <ll_rl_id_addr_get+0x64>)
   116ae:	4b0b      	ldr	r3, [pc, #44]	; (116dc <ll_rl_id_addr_get+0x68>)
   116b0:	9201      	str	r2, [sp, #4]
   116b2:	9200      	str	r2, [sp, #0]
   116b4:	681c      	ldr	r4, [r3, #0]
   116b6:	490a      	ldr	r1, [pc, #40]	; (116e0 <ll_rl_id_addr_get+0x6c>)
   116b8:	4b0a      	ldr	r3, [pc, #40]	; (116e4 <ll_rl_id_addr_get+0x70>)
   116ba:	480d      	ldr	r0, [pc, #52]	; (116f0 <ll_rl_id_addr_get+0x7c>)
   116bc:	e7e7      	b.n	1168e <ll_rl_id_addr_get+0x1a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   116be:	f3c2 1280 	ubfx	r2, r2, #6, #1
   116c2:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   116c4:	fb05 4103 	mla	r1, r5, r3, r4
   116c8:	2206      	movs	r2, #6
   116ca:	3101      	adds	r1, #1
}
   116cc:	b003      	add	sp, #12
   116ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   116d2:	f7f0 baa5 	b.w	1c20 <memcpy>
   116d6:	bf00      	nop
   116d8:	00014891 	.word	0x00014891
   116dc:	20003aa4 	.word	0x20003aa4
   116e0:	00015639 	.word	0x00015639
   116e4:	00017c27 	.word	0x00017c27
   116e8:	00017edf 	.word	0x00017edf
   116ec:	200012e4 	.word	0x200012e4
   116f0:	00017c4a 	.word	0x00017c4a

000116f4 <ctrl_rl_addr_allowed>:
{
   116f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   116f8:	4b1a      	ldr	r3, [pc, #104]	; (11764 <ctrl_rl_addr_allowed+0x70>)
   116fa:	781b      	ldrb	r3, [r3, #0]
   116fc:	b37b      	cbz	r3, 1175e <ctrl_rl_addr_allowed+0x6a>
   116fe:	7813      	ldrb	r3, [r2, #0]
   11700:	2bff      	cmp	r3, #255	; 0xff
   11702:	d12c      	bne.n	1175e <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11704:	4e18      	ldr	r6, [pc, #96]	; (11768 <ctrl_rl_addr_allowed+0x74>)
   11706:	2400      	movs	r4, #0
   11708:	f04f 0828 	mov.w	r8, #40	; 0x28
   1170c:	46b6      	mov	lr, r6
   1170e:	fb08 f304 	mul.w	r3, r8, r4
   11712:	fa5f fc84 	uxtb.w	ip, r4
   11716:	5cf7      	ldrb	r7, [r6, r3]
   11718:	f017 0f01 	tst.w	r7, #1
   1171c:	eb06 0503 	add.w	r5, r6, r3
   11720:	d01a      	beq.n	11758 <ctrl_rl_addr_allowed+0x64>
   11722:	f3c7 1780 	ubfx	r7, r7, #6, #1
   11726:	4287      	cmp	r7, r0
   11728:	d116      	bne.n	11758 <ctrl_rl_addr_allowed+0x64>
   1172a:	3306      	adds	r3, #6
   1172c:	1e4f      	subs	r7, r1, #1
   1172e:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   11730:	f815 af01 	ldrb.w	sl, [r5, #1]!
   11734:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   11738:	45ca      	cmp	sl, r9
   1173a:	d10d      	bne.n	11758 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   1173c:	429d      	cmp	r5, r3
   1173e:	d1f7      	bne.n	11730 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   11740:	2328      	movs	r3, #40	; 0x28
   11742:	435c      	muls	r4, r3
				*rl_idx = i;
   11744:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   11748:	f81e 0004 	ldrb.w	r0, [lr, r4]
   1174c:	0743      	lsls	r3, r0, #29
   1174e:	d506      	bpl.n	1175e <ctrl_rl_addr_allowed+0x6a>
   11750:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11758:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1175a:	2c08      	cmp	r4, #8
   1175c:	d1d7      	bne.n	1170e <ctrl_rl_addr_allowed+0x1a>
   1175e:	2001      	movs	r0, #1
}
   11760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11764:	20001424 	.word	0x20001424
   11768:	200012e4 	.word	0x200012e4

0001176c <ctrl_rl_addr_resolve>:
{
   1176c:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1176e:	4c0d      	ldr	r4, [pc, #52]	; (117a4 <ctrl_rl_addr_resolve+0x38>)
   11770:	7824      	ldrb	r4, [r4, #0]
   11772:	b1a4      	cbz	r4, 1179e <ctrl_rl_addr_resolve+0x32>
   11774:	2a07      	cmp	r2, #7
   11776:	d812      	bhi.n	1179e <ctrl_rl_addr_resolve+0x32>
   11778:	2528      	movs	r5, #40	; 0x28
   1177a:	4c0b      	ldr	r4, [pc, #44]	; (117a8 <ctrl_rl_addr_resolve+0x3c>)
   1177c:	fb05 f602 	mul.w	r6, r5, r2
   11780:	5da6      	ldrb	r6, [r4, r6]
   11782:	0736      	lsls	r6, r6, #28
   11784:	d50b      	bpl.n	1179e <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   11786:	b150      	cbz	r0, 1179e <ctrl_rl_addr_resolve+0x32>
   11788:	794b      	ldrb	r3, [r1, #5]
   1178a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1178e:	2b40      	cmp	r3, #64	; 0x40
   11790:	d105      	bne.n	1179e <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11792:	fb05 4202 	mla	r2, r5, r2, r4
   11796:	1dd0      	adds	r0, r2, #7
}
   11798:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1179a:	f7f0 bb56 	b.w	1e4a <bt_rpa_irk_matches>
}
   1179e:	2000      	movs	r0, #0
   117a0:	bc70      	pop	{r4, r5, r6}
   117a2:	4770      	bx	lr
   117a4:	20001424 	.word	0x20001424
   117a8:	200012e4 	.word	0x200012e4

000117ac <ctrl_rl_enabled>:
	return rl_enable;
   117ac:	4b02      	ldr	r3, [pc, #8]	; (117b8 <ctrl_rl_enabled+0xc>)
   117ae:	7818      	ldrb	r0, [r3, #0]
}
   117b0:	3000      	adds	r0, #0
   117b2:	bf18      	it	ne
   117b4:	2001      	movne	r0, #1
   117b6:	4770      	bx	lr
   117b8:	20001424 	.word	0x20001424

000117bc <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   117bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117c0:	b089      	sub	sp, #36	; 0x24
   117c2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   117c4:	f002 fae2 	bl	13d8c <_impl_k_uptime_get>
   117c8:	4680      	mov	r8, r0
   117ca:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   117cc:	2c00      	cmp	r4, #0
   117ce:	d148      	bne.n	11862 <ll_rl_rpa_update+0xa6>
   117d0:	4b3b      	ldr	r3, [pc, #236]	; (118c0 <ll_rl_rpa_update+0x104>)
   117d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   117d6:	1c5c      	adds	r4, r3, #1
   117d8:	bf08      	it	eq
   117da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   117de:	d040      	beq.n	11862 <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   117e0:	1a82      	subs	r2, r0, r2
   117e2:	eb61 0303 	sbc.w	r3, r1, r3
   117e6:	4937      	ldr	r1, [pc, #220]	; (118c4 <ll_rl_rpa_update+0x108>)
   117e8:	6808      	ldr	r0, [r1, #0]
   117ea:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   117ec:	4282      	cmp	r2, r0
   117ee:	418b      	sbcs	r3, r1
   117f0:	bfac      	ite	ge
   117f2:	2601      	movge	r6, #1
   117f4:	2600      	movlt	r6, #0
   117f6:	4d34      	ldr	r5, [pc, #208]	; (118c8 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   117f8:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   117fc:	2400      	movs	r4, #0
   117fe:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11800:	2328      	movs	r3, #40	; 0x28
   11802:	4363      	muls	r3, r4
   11804:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11808:	07d8      	lsls	r0, r3, #31
   1180a:	d54d      	bpl.n	118a8 <ll_rl_rpa_update+0xec>
   1180c:	b90e      	cbnz	r6, 11812 <ll_rl_rpa_update+0x56>
   1180e:	0799      	lsls	r1, r3, #30
   11810:	d44a      	bmi.n	118a8 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   11812:	2328      	movs	r3, #40	; 0x28
   11814:	4363      	muls	r3, r4
   11816:	5cfb      	ldrb	r3, [r7, r3]
   11818:	075a      	lsls	r2, r3, #29
   1181a:	d524      	bpl.n	11866 <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1181c:	7c2a      	ldrb	r2, [r5, #16]
   1181e:	4b2b      	ldr	r3, [pc, #172]	; (118cc <ll_rl_rpa_update+0x110>)
   11820:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   11824:	f103 0210 	add.w	r2, r3, #16
   11828:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   1182c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   11830:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   11834:	429a      	cmp	r2, r3
   11836:	d1f9      	bne.n	1182c <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   11838:	f105 0117 	add.w	r1, r5, #23
   1183c:	a804      	add	r0, sp, #16
   1183e:	f7f0 fb17 	bl	1e70 <bt_rpa_create>
				LL_ASSERT(!err);
   11842:	b180      	cbz	r0, 11866 <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   11844:	4a22      	ldr	r2, [pc, #136]	; (118d0 <ll_rl_rpa_update+0x114>)
   11846:	4b23      	ldr	r3, [pc, #140]	; (118d4 <ll_rl_rpa_update+0x118>)
   11848:	9201      	str	r2, [sp, #4]
   1184a:	9200      	str	r2, [sp, #0]
   1184c:	681c      	ldr	r4, [r3, #0]
   1184e:	4922      	ldr	r1, [pc, #136]	; (118d8 <ll_rl_rpa_update+0x11c>)
   11850:	4b22      	ldr	r3, [pc, #136]	; (118dc <ll_rl_rpa_update+0x120>)
   11852:	4823      	ldr	r0, [pc, #140]	; (118e0 <ll_rl_rpa_update+0x124>)
   11854:	47a0      	blx	r4
   11856:	4040      	eors	r0, r0
   11858:	f380 8811 	msr	BASEPRI, r0
   1185c:	f04f 0004 	mov.w	r0, #4
   11860:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   11862:	2601      	movs	r6, #1
   11864:	e7c7      	b.n	117f6 <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   11866:	2328      	movs	r3, #40	; 0x28
   11868:	4363      	muls	r3, r4
   1186a:	5cfb      	ldrb	r3, [r7, r3]
   1186c:	071b      	lsls	r3, r3, #28
   1186e:	d515      	bpl.n	1189c <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11870:	f10d 0a10 	add.w	sl, sp, #16
   11874:	4651      	mov	r1, sl
   11876:	4628      	mov	r0, r5
   11878:	f7f0 fafa 	bl	1e70 <bt_rpa_create>
				LL_ASSERT(!err);
   1187c:	2800      	cmp	r0, #0
   1187e:	d1e1      	bne.n	11844 <ll_rl_rpa_update+0x88>
   11880:	4b18      	ldr	r3, [pc, #96]	; (118e4 <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   11882:	f8c5 a01d 	str.w	sl, [r5, #29]
   11886:	2206      	movs	r2, #6
   11888:	fb02 3304 	mla	r3, r2, r4, r3
   1188c:	4618      	mov	r0, r3
   1188e:	4651      	mov	r1, sl
   11890:	9303      	str	r3, [sp, #12]
   11892:	f7f0 f9c5 	bl	1c20 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   11896:	9b03      	ldr	r3, [sp, #12]
   11898:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   1189c:	2328      	movs	r3, #40	; 0x28
   1189e:	4363      	muls	r3, r4
   118a0:	5cfa      	ldrb	r2, [r7, r3]
   118a2:	f042 0202 	orr.w	r2, r2, #2
   118a6:	54fa      	strb	r2, [r7, r3]
   118a8:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   118aa:	2c08      	cmp	r4, #8
   118ac:	f105 0528 	add.w	r5, r5, #40	; 0x28
   118b0:	d1a6      	bne.n	11800 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   118b2:	b116      	cbz	r6, 118ba <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   118b4:	4b02      	ldr	r3, [pc, #8]	; (118c0 <ll_rl_rpa_update+0x104>)
   118b6:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   118ba:	b009      	add	sp, #36	; 0x24
   118bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118c0:	20001948 	.word	0x20001948
   118c4:	2000197c 	.word	0x2000197c
   118c8:	200012eb 	.word	0x200012eb
   118cc:	20001263 	.word	0x20001263
   118d0:	00014891 	.word	0x00014891
   118d4:	20003aa4 	.word	0x20003aa4
   118d8:	00015639 	.word	0x00015639
   118dc:	00017c39 	.word	0x00017c39
   118e0:	00017b87 	.word	0x00017b87
   118e4:	2000122a 	.word	0x2000122a

000118e8 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   118e8:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   118ea:	2001      	movs	r0, #1
   118ec:	f7ff ff66 	bl	117bc <ll_rl_rpa_update>
   118f0:	4b03      	ldr	r3, [pc, #12]	; (11900 <rpa_timeout+0x18>)
   118f2:	4904      	ldr	r1, [pc, #16]	; (11904 <rpa_timeout+0x1c>)
   118f4:	681a      	ldr	r2, [r3, #0]
   118f6:	4804      	ldr	r0, [pc, #16]	; (11908 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   118f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   118fc:	f002 bd5a 	b.w	143b4 <k_delayed_work_submit_to_queue>
   11900:	2000197c 	.word	0x2000197c
   11904:	20001954 	.word	0x20001954
   11908:	200019c8 	.word	0x200019c8

0001190c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1190c:	4b07      	ldr	r3, [pc, #28]	; (1192c <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   1190e:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   11910:	b130      	cbz	r0, 11920 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   11912:	b14b      	cbz	r3, 11928 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   11914:	4b06      	ldr	r3, [pc, #24]	; (11930 <ll_adv_scan_state_cb+0x24>)
   11916:	4907      	ldr	r1, [pc, #28]	; (11934 <ll_adv_scan_state_cb+0x28>)
   11918:	681a      	ldr	r2, [r3, #0]
   1191a:	4807      	ldr	r0, [pc, #28]	; (11938 <ll_adv_scan_state_cb+0x2c>)
   1191c:	f002 bd4a 	b.w	143b4 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   11920:	b113      	cbz	r3, 11928 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   11922:	4804      	ldr	r0, [pc, #16]	; (11934 <ll_adv_scan_state_cb+0x28>)
   11924:	f002 bce2 	b.w	142ec <k_delayed_work_cancel>
   11928:	4770      	bx	lr
   1192a:	bf00      	nop
   1192c:	20001424 	.word	0x20001424
   11930:	2000197c 	.word	0x2000197c
   11934:	20001954 	.word	0x20001954
   11938:	200019c8 	.word	0x200019c8

0001193c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   1193c:	2008      	movs	r0, #8
   1193e:	4770      	bx	lr

00011940 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   11940:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   11942:	f7ff fc3d 	bl	111c0 <rl_access_check.constprop.1>
   11946:	b178      	cbz	r0, 11968 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   11948:	4908      	ldr	r1, [pc, #32]	; (1196c <ll_rl_clear+0x2c>)
   1194a:	2300      	movs	r3, #0
   1194c:	2428      	movs	r4, #40	; 0x28
   1194e:	fb04 f203 	mul.w	r2, r4, r3
   11952:	3301      	adds	r3, #1
   11954:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11956:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11958:	f36f 0000 	bfc	r0, #0, #1
   1195c:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1195e:	d1f6      	bne.n	1194e <ll_rl_clear+0xe>
	peer_irk_count = 0;
   11960:	4b03      	ldr	r3, [pc, #12]	; (11970 <ll_rl_clear+0x30>)
   11962:	2000      	movs	r0, #0
   11964:	7018      	strb	r0, [r3, #0]
   11966:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11968:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   1196a:	bd10      	pop	{r4, pc}
   1196c:	200012e4 	.word	0x200012e4
   11970:	2000125a 	.word	0x2000125a

00011974 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   11974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11978:	b085      	sub	sp, #20
   1197a:	4607      	mov	r7, r0
   1197c:	4689      	mov	r9, r1
   1197e:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   11980:	f7ff fc1e 	bl	111c0 <rl_access_check.constprop.1>
   11984:	2800      	cmp	r0, #0
   11986:	f000 8086 	beq.w	11a96 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1198a:	f107 0801 	add.w	r8, r7, #1
   1198e:	f10d 020f 	add.w	r2, sp, #15
   11992:	4641      	mov	r1, r8
   11994:	7838      	ldrb	r0, [r7, #0]
   11996:	f7ff fdaf 	bl	114f8 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   1199a:	2807      	cmp	r0, #7
   1199c:	d97d      	bls.n	11a9a <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   1199e:	f89d 500f 	ldrb.w	r5, [sp, #15]
   119a2:	2d07      	cmp	r5, #7
   119a4:	d87b      	bhi.n	11a9e <ll_rl_add+0x12a>
   119a6:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   119aa:	4c3e      	ldr	r4, [pc, #248]	; (11aa4 <ll_rl_add+0x130>)
   119ac:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   119b0:	2628      	movs	r6, #40	; 0x28
   119b2:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   119b4:	f10b 0001 	add.w	r0, fp, #1
   119b8:	2206      	movs	r2, #6
   119ba:	4641      	mov	r1, r8
   119bc:	4420      	add	r0, r4
   119be:	f7f0 f92f 	bl	1c20 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   119c2:	7839      	ldrb	r1, [r7, #0]
   119c4:	5da3      	ldrb	r3, [r4, r6]
   119c6:	19a2      	adds	r2, r4, r6
   119c8:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   119cc:	4648      	mov	r0, r9
   119ce:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   119d0:	9201      	str	r2, [sp, #4]
   119d2:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   119d4:	f7f5 f9b5 	bl	6d42 <mem_nz>
   119d8:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   119da:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   119dc:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   119e0:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   119e2:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   119e4:	f7f5 f9ad 	bl	6d42 <mem_nz>
   119e8:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   119ea:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   119ec:	f000 0001 	and.w	r0, r0, #1
   119f0:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   119f4:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   119f8:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   119fa:	d138      	bne.n	11a6e <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   119fc:	b158      	cbz	r0, 11a16 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   119fe:	f10b 0007 	add.w	r0, fp, #7
   11a02:	2210      	movs	r2, #16
   11a04:	4651      	mov	r1, sl
   11a06:	4420      	add	r0, r4
   11a08:	f7f0 f90a 	bl	1c20 <memcpy>
		rl[i].local_rpa = NULL;
   11a0c:	2328      	movs	r3, #40	; 0x28
   11a0e:	fb03 4305 	mla	r3, r3, r5, r4
   11a12:	2200      	movs	r2, #0
   11a14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   11a16:	2628      	movs	r6, #40	; 0x28
   11a18:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   11a1a:	f10b 0018 	add.w	r0, fp, #24
   11a1e:	2206      	movs	r2, #6
   11a20:	2100      	movs	r1, #0
   11a22:	4420      	add	r0, r4
   11a24:	f7f0 f928 	bl	1c78 <memset>
	rl[i].rpas_ready = 0;
   11a28:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   11a2a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   11a2e:	f36f 1304 	bfc	r3, #4, #1
   11a32:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11a34:	2200      	movs	r2, #0
   11a36:	4641      	mov	r1, r8
   11a38:	7838      	ldrb	r0, [r7, #0]
   11a3a:	f7ff fb4f 	bl	110dc <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   11a3e:	2807      	cmp	r0, #7
   11a40:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   11a42:	bf9d      	ittte	ls
   11a44:	4a18      	ldrls	r2, [pc, #96]	; (11aa8 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   11a46:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   11a4a:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   11a4e:	f36f 1345 	bfchi	r3, #5, #1
   11a52:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   11a54:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   11a58:	bf98      	it	ls
   11a5a:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   11a5c:	435d      	muls	r5, r3

	return 0;
   11a5e:	2000      	movs	r0, #0
	rl[i].taken = 1;
   11a60:	5d63      	ldrb	r3, [r4, r5]
   11a62:	f043 0301 	orr.w	r3, r3, #1
   11a66:	5563      	strb	r3, [r4, r5]
}
   11a68:	b005      	add	sp, #20
   11a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   11a6e:	4b0f      	ldr	r3, [pc, #60]	; (11aac <ll_rl_add+0x138>)
   11a70:	7819      	ldrb	r1, [r3, #0]
   11a72:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   11a74:	4a0e      	ldr	r2, [pc, #56]	; (11ab0 <ll_rl_add+0x13c>)
   11a76:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   11a78:	1c4a      	adds	r2, r1, #1
   11a7a:	701a      	strb	r2, [r3, #0]
   11a7c:	4b0d      	ldr	r3, [pc, #52]	; (11ab4 <ll_rl_add+0x140>)
   11a7e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   11a82:	f109 0210 	add.w	r2, r9, #16
   11a86:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   11a88:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   11a8c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   11a90:	454a      	cmp	r2, r9
   11a92:	d1f9      	bne.n	11a88 <ll_rl_add+0x114>
   11a94:	e7b2      	b.n	119fc <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11a96:	200c      	movs	r0, #12
   11a98:	e7e6      	b.n	11a68 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   11a9a:	2012      	movs	r0, #18
   11a9c:	e7e4      	b.n	11a68 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11a9e:	2007      	movs	r0, #7
   11aa0:	e7e2      	b.n	11a68 <ll_rl_add+0xf4>
   11aa2:	bf00      	nop
   11aa4:	200012e4 	.word	0x200012e4
   11aa8:	20001457 	.word	0x20001457
   11aac:	2000125a 	.word	0x2000125a
   11ab0:	2000125b 	.word	0x2000125b
   11ab4:	20001263 	.word	0x20001263

00011ab8 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   11ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11abc:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   11abe:	f7ff fb7f 	bl	111c0 <rl_access_check.constprop.1>
   11ac2:	2800      	cmp	r0, #0
   11ac4:	d053      	beq.n	11b6e <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11ac6:	f109 0a01 	add.w	sl, r9, #1
   11aca:	2200      	movs	r2, #0
   11acc:	4651      	mov	r1, sl
   11ace:	f899 0000 	ldrb.w	r0, [r9]
   11ad2:	f7ff fd11 	bl	114f8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11ad6:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11ad8:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   11ada:	d84b      	bhi.n	11b74 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   11adc:	f04f 0b28 	mov.w	fp, #40	; 0x28
   11ae0:	4c26      	ldr	r4, [pc, #152]	; (11b7c <ll_rl_remove+0xc4>)
   11ae2:	fb0b f300 	mul.w	r3, fp, r0
   11ae6:	18e2      	adds	r2, r4, r3
   11ae8:	5ce3      	ldrb	r3, [r4, r3]
   11aea:	075b      	lsls	r3, r3, #29
   11aec:	d524      	bpl.n	11b38 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11aee:	4e24      	ldr	r6, [pc, #144]	; (11b80 <ll_rl_remove+0xc8>)
   11af0:	7835      	ldrb	r5, [r6, #0]
   11af2:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   11af4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11af8:	d01b      	beq.n	11b32 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11afa:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   11afc:	42af      	cmp	r7, r5
   11afe:	d018      	beq.n	11b32 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   11b00:	4820      	ldr	r0, [pc, #128]	; (11b84 <ll_rl_remove+0xcc>)
   11b02:	2210      	movs	r2, #16
   11b04:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   11b08:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   11b0c:	f7f0 f888 	bl	1c20 <memcpy>
   11b10:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   11b12:	fb0b f103 	mul.w	r1, fp, r3
   11b16:	1862      	adds	r2, r4, r1
   11b18:	5c61      	ldrb	r1, [r4, r1]
   11b1a:	f011 0f01 	tst.w	r1, #1
   11b1e:	b2d8      	uxtb	r0, r3
   11b20:	d021      	beq.n	11b66 <ll_rl_remove+0xae>
   11b22:	0749      	lsls	r1, r1, #29
   11b24:	d51f      	bpl.n	11b66 <ll_rl_remove+0xae>
   11b26:	7dd1      	ldrb	r1, [r2, #23]
   11b28:	42a9      	cmp	r1, r5
   11b2a:	d11c      	bne.n	11b66 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   11b2c:	4b16      	ldr	r3, [pc, #88]	; (11b88 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   11b2e:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   11b30:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   11b32:	7833      	ldrb	r3, [r6, #0]
   11b34:	3b01      	subs	r3, #1
   11b36:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11b38:	2200      	movs	r2, #0
   11b3a:	4651      	mov	r1, sl
   11b3c:	f899 0000 	ldrb.w	r0, [r9]
   11b40:	f7ff facc 	bl	110dc <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   11b44:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   11b46:	bf9f      	itttt	ls
   11b48:	4b10      	ldrls	r3, [pc, #64]	; (11b8c <ll_rl_remove+0xd4>)
   11b4a:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   11b4e:	23ff      	movls	r3, #255	; 0xff
   11b50:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   11b52:	2028      	movs	r0, #40	; 0x28
   11b54:	fb00 f008 	mul.w	r0, r0, r8
   11b58:	5c23      	ldrb	r3, [r4, r0]
   11b5a:	f36f 0300 	bfc	r3, #0, #1
   11b5e:	5423      	strb	r3, [r4, r0]
		return 0;
   11b60:	2000      	movs	r0, #0
   11b62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b66:	3301      	adds	r3, #1
				for (k = 0;
   11b68:	2b08      	cmp	r3, #8
   11b6a:	d1d2      	bne.n	11b12 <ll_rl_remove+0x5a>
   11b6c:	e7e1      	b.n	11b32 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b6e:	200c      	movs	r0, #12
   11b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11b74:	2002      	movs	r0, #2
}
   11b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b7a:	bf00      	nop
   11b7c:	200012e4 	.word	0x200012e4
   11b80:	2000125a 	.word	0x2000125a
   11b84:	20001263 	.word	0x20001263
   11b88:	2000125b 	.word	0x2000125b
   11b8c:	20001457 	.word	0x20001457

00011b90 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   11b90:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   11b92:	795c      	ldrb	r4, [r3, #5]
   11b94:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   11b98:	2c40      	cmp	r4, #64	; 0x40
{
   11b9a:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   11b9c:	d117      	bne.n	11bce <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   11b9e:	b119      	cbz	r1, 11ba8 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   11ba0:	2200      	movs	r2, #0
   11ba2:	f7ff fca9 	bl	114f8 <ll_rl_find>
   11ba6:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   11ba8:	2a07      	cmp	r2, #7
   11baa:	d810      	bhi.n	11bce <ll_rl_crpa_set+0x3e>
   11bac:	2128      	movs	r1, #40	; 0x28
   11bae:	4c08      	ldr	r4, [pc, #32]	; (11bd0 <ll_rl_crpa_set+0x40>)
   11bb0:	fb01 f302 	mul.w	r3, r1, r2
   11bb4:	5ce3      	ldrb	r3, [r4, r3]
   11bb6:	07db      	lsls	r3, r3, #31
   11bb8:	d509      	bpl.n	11bce <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11bba:	2018      	movs	r0, #24
   11bbc:	fb11 0002 	smlabb	r0, r1, r2, r0
   11bc0:	4420      	add	r0, r4
   11bc2:	4629      	mov	r1, r5
   11bc4:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   11bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11bca:	f7f0 b829 	b.w	1c20 <memcpy>
   11bce:	bd70      	pop	{r4, r5, r6, pc}
   11bd0:	200012e4 	.word	0x200012e4

00011bd4 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   11bd4:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11bd6:	2200      	movs	r2, #0
{
   11bd8:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11bda:	1c41      	adds	r1, r0, #1
   11bdc:	7800      	ldrb	r0, [r0, #0]
   11bde:	f7ff fc8b 	bl	114f8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   11be2:	2807      	cmp	r0, #7
   11be4:	d901      	bls.n	11bea <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11be6:	2002      	movs	r0, #2
   11be8:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11bea:	2428      	movs	r4, #40	; 0x28
   11bec:	2318      	movs	r3, #24
   11bee:	fb14 3000 	smlabb	r0, r4, r0, r3
   11bf2:	4c07      	ldr	r4, [pc, #28]	; (11c10 <ll_rl_crpa_get+0x3c>)
   11bf4:	4404      	add	r4, r0
   11bf6:	2106      	movs	r1, #6
   11bf8:	4620      	mov	r0, r4
   11bfa:	f7f5 f8a2 	bl	6d42 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   11bfe:	2800      	cmp	r0, #0
   11c00:	d0f1      	beq.n	11be6 <ll_rl_crpa_get+0x12>
   11c02:	2206      	movs	r2, #6
   11c04:	4621      	mov	r1, r4
   11c06:	4628      	mov	r0, r5
   11c08:	f7f0 f80a 	bl	1c20 <memcpy>
			return 0;
   11c0c:	2000      	movs	r0, #0
}
   11c0e:	bd38      	pop	{r3, r4, r5, pc}
   11c10:	200012e4 	.word	0x200012e4

00011c14 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   11c14:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11c16:	2200      	movs	r2, #0
{
   11c18:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11c1a:	1c41      	adds	r1, r0, #1
   11c1c:	7800      	ldrb	r0, [r0, #0]
   11c1e:	f7ff fc6b 	bl	114f8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11c22:	2807      	cmp	r0, #7
   11c24:	d80a      	bhi.n	11c3c <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   11c26:	4b06      	ldr	r3, [pc, #24]	; (11c40 <ll_rl_lrpa_get+0x2c>)
   11c28:	2228      	movs	r2, #40	; 0x28
   11c2a:	fb02 3000 	mla	r0, r2, r0, r3
   11c2e:	2206      	movs	r2, #6
   11c30:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11c32:	4620      	mov	r0, r4
   11c34:	f7ef fff4 	bl	1c20 <memcpy>
		return 0;
   11c38:	2000      	movs	r0, #0
   11c3a:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11c3c:	2002      	movs	r0, #2
}
   11c3e:	bd10      	pop	{r4, pc}
   11c40:	200012e4 	.word	0x200012e4

00011c44 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   11c44:	b510      	push	{r4, lr}
   11c46:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   11c48:	f7ff faba 	bl	111c0 <rl_access_check.constprop.1>
   11c4c:	b140      	cbz	r0, 11c60 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   11c4e:	b11c      	cbz	r4, 11c58 <ll_rl_enable+0x14>
   11c50:	2c01      	cmp	r4, #1
   11c52:	d001      	beq.n	11c58 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   11c54:	2012      	movs	r0, #18
	}

	return 0;
}
   11c56:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   11c58:	4b02      	ldr	r3, [pc, #8]	; (11c64 <ll_rl_enable+0x20>)
   11c5a:	701c      	strb	r4, [r3, #0]
	return 0;
   11c5c:	2000      	movs	r0, #0
		break;
   11c5e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11c60:	200c      	movs	r0, #12
   11c62:	bd10      	pop	{r4, pc}
   11c64:	20001424 	.word	0x20001424

00011c68 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   11c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11c6c:	4358      	muls	r0, r3
   11c6e:	4b01      	ldr	r3, [pc, #4]	; (11c74 <ll_rl_timeout_set+0xc>)
   11c70:	6018      	str	r0, [r3, #0]
   11c72:	4770      	bx	lr
   11c74:	2000197c 	.word	0x2000197c

00011c78 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   11c78:	b538      	push	{r3, r4, r5, lr}
   11c7a:	4605      	mov	r5, r0
   11c7c:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   11c7e:	f7ff fa9f 	bl	111c0 <rl_access_check.constprop.1>
   11c82:	b1d8      	cbz	r0, 11cbc <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11c84:	2200      	movs	r2, #0
   11c86:	1c69      	adds	r1, r5, #1
   11c88:	7828      	ldrb	r0, [r5, #0]
   11c8a:	f7ff fc35 	bl	114f8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11c8e:	2807      	cmp	r0, #7
   11c90:	d816      	bhi.n	11cc0 <ll_priv_mode_set+0x48>
		switch (mode) {
   11c92:	b11c      	cbz	r4, 11c9c <ll_priv_mode_set+0x24>
   11c94:	2c01      	cmp	r4, #1
   11c96:	d00a      	beq.n	11cae <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   11c98:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   11c9a:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   11c9c:	2328      	movs	r3, #40	; 0x28
   11c9e:	4a09      	ldr	r2, [pc, #36]	; (11cc4 <ll_priv_mode_set+0x4c>)
   11ca0:	4358      	muls	r0, r3
   11ca2:	5c13      	ldrb	r3, [r2, r0]
   11ca4:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   11ca8:	5413      	strb	r3, [r2, r0]
	return 0;
   11caa:	2000      	movs	r0, #0
			break;
   11cac:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   11cae:	2328      	movs	r3, #40	; 0x28
   11cb0:	4a04      	ldr	r2, [pc, #16]	; (11cc4 <ll_priv_mode_set+0x4c>)
   11cb2:	4358      	muls	r0, r3
   11cb4:	5c13      	ldrb	r3, [r2, r0]
   11cb6:	f043 0310 	orr.w	r3, r3, #16
   11cba:	e7f5      	b.n	11ca8 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11cbc:	200c      	movs	r0, #12
   11cbe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11cc0:	2002      	movs	r0, #2
   11cc2:	bd38      	pop	{r3, r4, r5, pc}
   11cc4:	200012e4 	.word	0x200012e4

00011cc8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   11cc8:	4a19      	ldr	r2, [pc, #100]	; (11d30 <ll_filter_reset+0x68>)
   11cca:	2300      	movs	r3, #0
{
   11ccc:	b430      	push	{r4, r5}
	wl_anon = 0;
   11cce:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   11cd0:	4a18      	ldr	r2, [pc, #96]	; (11d34 <ll_filter_reset+0x6c>)
   11cd2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11cd6:	f36f 0100 	bfc	r1, #0, #1
   11cda:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11cde:	3301      	adds	r3, #1
   11ce0:	2b08      	cmp	r3, #8
   11ce2:	d1f6      	bne.n	11cd2 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   11ce4:	4a14      	ldr	r2, [pc, #80]	; (11d38 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11ce6:	4915      	ldr	r1, [pc, #84]	; (11d3c <ll_filter_reset+0x74>)
	rl_enable = 0;
   11ce8:	2300      	movs	r3, #0
   11cea:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11cec:	4a14      	ldr	r2, [pc, #80]	; (11d40 <ll_filter_reset+0x78>)
   11cee:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   11cf0:	4a14      	ldr	r2, [pc, #80]	; (11d44 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   11cf2:	4915      	ldr	r1, [pc, #84]	; (11d48 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   11cf4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11cf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11cfc:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   11d00:	2528      	movs	r5, #40	; 0x28
   11d02:	fb05 f203 	mul.w	r2, r5, r3
   11d06:	3301      	adds	r3, #1
   11d08:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11d0a:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11d0c:	f36f 0400 	bfc	r4, #0, #1
   11d10:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11d12:	d1f6      	bne.n	11d02 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   11d14:	4b0d      	ldr	r3, [pc, #52]	; (11d4c <ll_filter_reset+0x84>)
   11d16:	2200      	movs	r2, #0
   11d18:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   11d1a:	b120      	cbz	r0, 11d26 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11d1c:	490c      	ldr	r1, [pc, #48]	; (11d50 <ll_filter_reset+0x88>)
   11d1e:	480d      	ldr	r0, [pc, #52]	; (11d54 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   11d20:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11d22:	f002 bad3 	b.w	142cc <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   11d26:	480b      	ldr	r0, [pc, #44]	; (11d54 <ll_filter_reset+0x8c>)
}
   11d28:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   11d2a:	f002 badf 	b.w	142ec <k_delayed_work_cancel>
   11d2e:	bf00      	nop
   11d30:	20001950 	.word	0x20001950
   11d34:	20001457 	.word	0x20001457
   11d38:	20001424 	.word	0x20001424
   11d3c:	000dbba0 	.word	0x000dbba0
   11d40:	2000197c 	.word	0x2000197c
   11d44:	20001948 	.word	0x20001948
   11d48:	200012e4 	.word	0x200012e4
   11d4c:	2000125a 	.word	0x2000125a
   11d50:	000118e9 	.word	0x000118e9
   11d54:	20001954 	.word	0x20001954

00011d58 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   11d58:	4b05      	ldr	r3, [pc, #20]	; (11d70 <cntr_init+0x18>)
   11d5a:	2200      	movs	r2, #0
   11d5c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   11d60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   11d64:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   11d68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   11d6c:	4770      	bx	lr
   11d6e:	bf00      	nop
   11d70:	4000b000 	.word	0x4000b000

00011d74 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   11d74:	4a04      	ldr	r2, [pc, #16]	; (11d88 <cntr_start+0x14>)
   11d76:	7813      	ldrb	r3, [r2, #0]
   11d78:	1c59      	adds	r1, r3, #1
   11d7a:	7011      	strb	r1, [r2, #0]
   11d7c:	2001      	movs	r0, #1
   11d7e:	b913      	cbnz	r3, 11d86 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   11d80:	4a02      	ldr	r2, [pc, #8]	; (11d8c <cntr_start+0x18>)
   11d82:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   11d84:	4618      	mov	r0, r3
}
   11d86:	4770      	bx	lr
   11d88:	200014c9 	.word	0x200014c9
   11d8c:	4000b000 	.word	0x4000b000

00011d90 <cntr_stop>:

u32_t cntr_stop(void)
{
   11d90:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_refcount);
   11d92:	4b0e      	ldr	r3, [pc, #56]	; (11dcc <cntr_stop+0x3c>)
   11d94:	7818      	ldrb	r0, [r3, #0]
   11d96:	b970      	cbnz	r0, 11db6 <cntr_stop+0x26>
   11d98:	4a0d      	ldr	r2, [pc, #52]	; (11dd0 <cntr_stop+0x40>)
   11d9a:	4b0e      	ldr	r3, [pc, #56]	; (11dd4 <cntr_stop+0x44>)
   11d9c:	9201      	str	r2, [sp, #4]
   11d9e:	9200      	str	r2, [sp, #0]
   11da0:	681c      	ldr	r4, [r3, #0]
   11da2:	490d      	ldr	r1, [pc, #52]	; (11dd8 <cntr_stop+0x48>)
   11da4:	4b0d      	ldr	r3, [pc, #52]	; (11ddc <cntr_stop+0x4c>)
   11da6:	480e      	ldr	r0, [pc, #56]	; (11de0 <cntr_stop+0x50>)
   11da8:	47a0      	blx	r4
   11daa:	4040      	eors	r0, r0
   11dac:	f380 8811 	msr	BASEPRI, r0
   11db0:	f04f 0004 	mov.w	r0, #4
   11db4:	df02      	svc	2

	if (--_refcount) {
   11db6:	3801      	subs	r0, #1
   11db8:	b2c0      	uxtb	r0, r0
   11dba:	7018      	strb	r0, [r3, #0]
   11dbc:	2301      	movs	r3, #1
   11dbe:	b918      	cbnz	r0, 11dc8 <cntr_stop+0x38>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   11dc0:	4a08      	ldr	r2, [pc, #32]	; (11de4 <cntr_stop+0x54>)
   11dc2:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   11dc4:	b002      	add	sp, #8
   11dc6:	bd10      	pop	{r4, pc}
		return 1;
   11dc8:	4618      	mov	r0, r3
   11dca:	e7fb      	b.n	11dc4 <cntr_stop+0x34>
   11dcc:	200014c9 	.word	0x200014c9
   11dd0:	00014891 	.word	0x00014891
   11dd4:	20003aa4 	.word	0x20003aa4
   11dd8:	00015639 	.word	0x00015639
   11ddc:	00017f0b 	.word	0x00017f0b
   11de0:	00017f15 	.word	0x00017f15
   11de4:	4000b000 	.word	0x4000b000

00011de8 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   11de8:	4b01      	ldr	r3, [pc, #4]	; (11df0 <cntr_cnt_get+0x8>)
   11dea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   11dee:	4770      	bx	lr
   11df0:	4000b000 	.word	0x4000b000

00011df4 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   11df4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11df8:	4b01      	ldr	r3, [pc, #4]	; (11e00 <cntr_cmp_set+0xc>)
   11dfa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   11dfe:	4770      	bx	lr
   11e00:	4000b000 	.word	0x4000b000

00011e04 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   11e04:	4b11      	ldr	r3, [pc, #68]	; (11e4c <do_ecb+0x48>)
{
   11e06:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   11e08:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   11e0a:	2500      	movs	r5, #0
   11e0c:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   11e0e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   11e10:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   11e14:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   11e18:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   11e1c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11e1e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   11e22:	b934      	cbnz	r4, 11e32 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11e24:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11e28:	b91c      	cbnz	r4, 11e32 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   11e2a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11e2e:	2c00      	cmp	r4, #0
   11e30:	d1f5      	bne.n	11e1e <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   11e32:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   11e34:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   11e38:	2c00      	cmp	r4, #0
   11e3a:	d1e8      	bne.n	11e0e <do_ecb+0xa>
   11e3c:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   11e40:	2e00      	cmp	r6, #0
   11e42:	d0e4      	beq.n	11e0e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   11e44:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   11e48:	bd70      	pop	{r4, r5, r6, pc}
   11e4a:	bf00      	nop
   11e4c:	4000e000 	.word	0x4000e000

00011e50 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   11e50:	b570      	push	{r4, r5, r6, lr}
   11e52:	b08c      	sub	sp, #48	; 0x30
   11e54:	460e      	mov	r6, r1
   11e56:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11e58:	4601      	mov	r1, r0
   11e5a:	2210      	movs	r2, #16
   11e5c:	4668      	mov	r0, sp
{
   11e5e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11e60:	f7f4 ff60 	bl	6d24 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   11e64:	2210      	movs	r2, #16
   11e66:	eb0d 0002 	add.w	r0, sp, r2
   11e6a:	4631      	mov	r1, r6
   11e6c:	f7f4 ff5a 	bl	6d24 <mem_rcopy>

	do_ecb(&ecb);
   11e70:	4668      	mov	r0, sp
   11e72:	f7ff ffc7 	bl	11e04 <do_ecb>

	if (cipher_text_le) {
   11e76:	b125      	cbz	r5, 11e82 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   11e78:	2210      	movs	r2, #16
   11e7a:	a908      	add	r1, sp, #32
   11e7c:	4628      	mov	r0, r5
   11e7e:	f7f4 ff51 	bl	6d24 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   11e82:	b124      	cbz	r4, 11e8e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   11e84:	2210      	movs	r2, #16
   11e86:	a908      	add	r1, sp, #32
   11e88:	4620      	mov	r0, r4
   11e8a:	f7ef fec9 	bl	1c20 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   11e8e:	b00c      	add	sp, #48	; 0x30
   11e90:	bd70      	pop	{r4, r5, r6, pc}
	...

00011e94 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   11e94:	4b07      	ldr	r3, [pc, #28]	; (11eb4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   11e96:	4a08      	ldr	r2, [pc, #32]	; (11eb8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   11e98:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   11e9c:	4907      	ldr	r1, [pc, #28]	; (11ebc <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   11e9e:	4a08      	ldr	r2, [pc, #32]	; (11ec0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   11ea0:	2800      	cmp	r0, #0
   11ea2:	bf14      	ite	ne
   11ea4:	4610      	movne	r0, r2
   11ea6:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11ea8:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   11eaa:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11eae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   11eb2:	4770      	bx	lr
   11eb4:	4001f000 	.word	0x4001f000
   11eb8:	40008140 	.word	0x40008140
   11ebc:	40001004 	.word	0x40001004
   11ec0:	40001000 	.word	0x40001000

00011ec4 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   11ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11ec6:	4e2c      	ldr	r6, [pc, #176]	; (11f78 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11ec8:	4f2c      	ldr	r7, [pc, #176]	; (11f7c <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11eca:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11ecc:	4b2c      	ldr	r3, [pc, #176]	; (11f80 <sw_switch.isra.9+0xbc>)
   11ece:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   11ed2:	b22b      	sxth	r3, r5
   11ed4:	00dc      	lsls	r4, r3, #3
   11ed6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11eda:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   11ede:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11ee2:	f105 040b 	add.w	r4, r5, #11
   11ee6:	b2e4      	uxtb	r4, r4
   11ee8:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   11eea:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   11eee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11ef2:	3fc0      	subs	r7, #192	; 0xc0
   11ef4:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   11ef8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   11efc:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   11f00:	2800      	cmp	r0, #0
   11f02:	d034      	beq.n	11f6e <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   11f04:	f24a 075a 	movw	r7, #41050	; 0xa05a
   11f08:	f649 4040 	movw	r0, #40000	; 0x9c40
   11f0c:	2a02      	cmp	r2, #2
   11f0e:	bf0c      	ite	eq
   11f10:	4602      	moveq	r2, r0
   11f12:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   11f14:	f242 47b8 	movw	r7, #9400	; 0x24b8
   11f18:	f241 504a 	movw	r0, #5450	; 0x154a
   11f1c:	2902      	cmp	r1, #2
   11f1e:	bf18      	it	ne
   11f20:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   11f22:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   11f26:	4401      	add	r1, r0
   11f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f2c:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11f30:	4a14      	ldr	r2, [pc, #80]	; (11f84 <sw_switch.isra.9+0xc0>)
   11f32:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   11f36:	009b      	lsls	r3, r3, #2
   11f38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11f3c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   11f40:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   11f44:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11f46:	bf8b      	itete	hi
   11f48:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   11f4c:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11f4e:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   11f50:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11f54:	bf88      	it	hi
   11f56:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   11f5a:	4b08      	ldr	r3, [pc, #32]	; (11f7c <sw_switch.isra.9+0xb8>)
   11f5c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11f60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   11f64:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   11f66:	f003 0301 	and.w	r3, r3, #1
   11f6a:	7033      	strb	r3, [r6, #0]
   11f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11f6e:	4a06      	ldr	r2, [pc, #24]	; (11f88 <sw_switch.isra.9+0xc4>)
   11f70:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   11f74:	212d      	movs	r1, #45	; 0x2d
   11f76:	e7de      	b.n	11f36 <sw_switch.isra.9+0x72>
   11f78:	200016ec 	.word	0x200016ec
   11f7c:	4001f000 	.word	0x4001f000
   11f80:	4000110c 	.word	0x4000110c
   11f84:	40001000 	.word	0x40001000
   11f88:	40001004 	.word	0x40001004

00011f8c <isr_radio>:
	if (sfp_radio_isr) {
   11f8c:	4b02      	ldr	r3, [pc, #8]	; (11f98 <isr_radio+0xc>)
   11f8e:	681b      	ldr	r3, [r3, #0]
   11f90:	b103      	cbz	r3, 11f94 <isr_radio+0x8>
		sfp_radio_isr();
   11f92:	4718      	bx	r3
   11f94:	4770      	bx	lr
   11f96:	bf00      	nop
   11f98:	200016e8 	.word	0x200016e8

00011f9c <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   11f9c:	4b06      	ldr	r3, [pc, #24]	; (11fb8 <radio_isr_set+0x1c>)
   11f9e:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   11fa0:	4b06      	ldr	r3, [pc, #24]	; (11fbc <radio_isr_set+0x20>)
   11fa2:	2210      	movs	r2, #16
   11fa4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11fa8:	4b05      	ldr	r3, [pc, #20]	; (11fc0 <radio_isr_set+0x24>)
   11faa:	2202      	movs	r2, #2
   11fac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   11fb0:	2001      	movs	r0, #1
   11fb2:	f7ef bc57 	b.w	1864 <_arch_irq_enable>
   11fb6:	bf00      	nop
   11fb8:	200016e8 	.word	0x200016e8
   11fbc:	40001000 	.word	0x40001000
   11fc0:	e000e100 	.word	0xe000e100

00011fc4 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11fcc:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11fce:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   11fd2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11fd6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   11fda:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   11fde:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   11fe2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   11fe6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   11fea:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   11fee:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   11ff2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   11ff6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   11ffa:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   11ffe:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   12002:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   12006:	4770      	bx	lr

00012008 <radio_reset>:
{
   12008:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1200a:	2001      	movs	r0, #1
   1200c:	f7ef fc3a 	bl	1884 <_arch_irq_disable>
	NRF_RADIO->POWER =
   12010:	4b08      	ldr	r3, [pc, #32]	; (12034 <radio_reset+0x2c>)
   12012:	2200      	movs	r2, #0
   12014:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   12018:	2201      	movs	r2, #1
   1201a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1201e:	4a06      	ldr	r2, [pc, #24]	; (12038 <radio_reset+0x30>)
   12020:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   12022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12026:	f023 0301 	bic.w	r3, r3, #1
   1202a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1202e:	6013      	str	r3, [r2, #0]
   12030:	bd08      	pop	{r3, pc}
   12032:	bf00      	nop
   12034:	40001000 	.word	0x40001000
   12038:	40001774 	.word	0x40001774

0001203c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1203c:	4b06      	ldr	r3, [pc, #24]	; (12058 <radio_phy_set+0x1c>)
	switch (phy) {
   1203e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   12040:	bf0c      	ite	eq
   12042:	2204      	moveq	r2, #4
   12044:	2203      	movne	r2, #3
   12046:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1204a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1204e:	f042 0201 	orr.w	r2, r2, #1
   12052:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   12056:	4770      	bx	lr
   12058:	40001000 	.word	0x40001000

0001205c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   1205c:	4b01      	ldr	r3, [pc, #4]	; (12064 <radio_tx_power_set+0x8>)
   1205e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   12062:	4770      	bx	lr
   12064:	40001000 	.word	0x40001000

00012068 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12068:	4b01      	ldr	r3, [pc, #4]	; (12070 <radio_freq_chan_set+0x8>)
   1206a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1206e:	4770      	bx	lr
   12070:	40001000 	.word	0x40001000

00012074 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12074:	4b07      	ldr	r3, [pc, #28]	; (12094 <radio_whiten_iv_set+0x20>)
   12076:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1207a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1207e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   12082:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   12086:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1208a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1208e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   12092:	4770      	bx	lr
   12094:	40001000 	.word	0x40001000

00012098 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12098:	4a0a      	ldr	r2, [pc, #40]	; (120c4 <radio_aa_set+0x2c>)
   1209a:	2300      	movs	r3, #0
   1209c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   120a0:	2301      	movs	r3, #1
   120a2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   120a6:	78c3      	ldrb	r3, [r0, #3]
   120a8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   120ac:	7843      	ldrb	r3, [r0, #1]
   120ae:	7881      	ldrb	r1, [r0, #2]
   120b0:	041b      	lsls	r3, r3, #16
   120b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   120b6:	7801      	ldrb	r1, [r0, #0]
   120b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   120bc:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   120c0:	4770      	bx	lr
   120c2:	bf00      	nop
   120c4:	40001000 	.word	0x40001000

000120c8 <radio_pkt_configure>:
	switch (phy) {
   120c8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   120cc:	2b02      	cmp	r3, #2
{
   120ce:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   120d0:	bf0c      	ite	eq
   120d2:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   120d6:	2400      	movne	r4, #0
	if (dc) {
   120d8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   120da:	f1c0 0308 	rsb	r3, r0, #8
   120de:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   120e2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   120e6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   120ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   120ee:	4a0b      	ldr	r2, [pc, #44]	; (1211c <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   120f0:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   120f4:	bf48      	it	mi
   120f6:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   120fa:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   120fc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   12100:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   12104:	4b06      	ldr	r3, [pc, #24]	; (12120 <radio_pkt_configure+0x58>)
   12106:	4003      	ands	r3, r0
   12108:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1210c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   12110:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   12114:	4319      	orrs	r1, r3
   12116:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   1211a:	bd10      	pop	{r4, pc}
   1211c:	40001000 	.word	0x40001000
   12120:	fef80000 	.word	0xfef80000

00012124 <radio_pkt_rx_set>:
   12124:	4b01      	ldr	r3, [pc, #4]	; (1212c <radio_pkt_rx_set+0x8>)
   12126:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1212a:	4770      	bx	lr
   1212c:	40001000 	.word	0x40001000

00012130 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   12130:	4b01      	ldr	r3, [pc, #4]	; (12138 <radio_pkt_tx_set+0x8>)
   12132:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12136:	4770      	bx	lr
   12138:	40001000 	.word	0x40001000

0001213c <radio_tx_ready_delay_get>:
	switch (phy) {
   1213c:	2802      	cmp	r0, #2
}
   1213e:	bf0c      	ite	eq
   12140:	2028      	moveq	r0, #40	; 0x28
   12142:	2029      	movne	r0, #41	; 0x29
   12144:	4770      	bx	lr

00012146 <radio_tx_chain_delay_get>:
}
   12146:	2001      	movs	r0, #1
   12148:	4770      	bx	lr

0001214a <radio_rx_ready_delay_get>:
}
   1214a:	2029      	movs	r0, #41	; 0x29
   1214c:	4770      	bx	lr

0001214e <radio_rx_chain_delay_get>:
	switch (phy) {
   1214e:	2802      	cmp	r0, #2
}
   12150:	bf0c      	ite	eq
   12152:	2006      	moveq	r0, #6
   12154:	200a      	movne	r0, #10
   12156:	4770      	bx	lr

00012158 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   12158:	4b01      	ldr	r3, [pc, #4]	; (12160 <radio_rx_enable+0x8>)
   1215a:	2201      	movs	r2, #1
   1215c:	605a      	str	r2, [r3, #4]
   1215e:	4770      	bx	lr
   12160:	40001000 	.word	0x40001000

00012164 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12164:	4b01      	ldr	r3, [pc, #4]	; (1216c <radio_tx_enable+0x8>)
   12166:	2201      	movs	r2, #1
   12168:	601a      	str	r2, [r3, #0]
   1216a:	4770      	bx	lr
   1216c:	40001000 	.word	0x40001000

00012170 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12170:	4a07      	ldr	r2, [pc, #28]	; (12190 <radio_disable+0x20>)
   12172:	f44f 6390 	mov.w	r3, #1152	; 0x480
   12176:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   1217a:	2301      	movs	r3, #1
   1217c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   1217e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12180:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12184:	2100      	movs	r1, #0
   12186:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   1218a:	6113      	str	r3, [r2, #16]
   1218c:	4770      	bx	lr
   1218e:	bf00      	nop
   12190:	4001f000 	.word	0x4001f000

00012194 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12194:	4b04      	ldr	r3, [pc, #16]	; (121a8 <radio_status_reset+0x14>)
   12196:	2200      	movs	r2, #0
   12198:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1219c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   121a0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   121a4:	4770      	bx	lr
   121a6:	bf00      	nop
   121a8:	40001000 	.word	0x40001000

000121ac <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   121ac:	4b03      	ldr	r3, [pc, #12]	; (121bc <radio_is_ready+0x10>)
   121ae:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   121b2:	3000      	adds	r0, #0
   121b4:	bf18      	it	ne
   121b6:	2001      	movne	r0, #1
   121b8:	4770      	bx	lr
   121ba:	bf00      	nop
   121bc:	40001000 	.word	0x40001000

000121c0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   121c0:	4b03      	ldr	r3, [pc, #12]	; (121d0 <radio_is_done+0x10>)
   121c2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   121c6:	3000      	adds	r0, #0
   121c8:	bf18      	it	ne
   121ca:	2001      	movne	r0, #1
   121cc:	4770      	bx	lr
   121ce:	bf00      	nop
   121d0:	40001000 	.word	0x40001000

000121d4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   121d4:	4b03      	ldr	r3, [pc, #12]	; (121e4 <radio_is_idle+0x10>)
   121d6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   121da:	fab0 f080 	clz	r0, r0
   121de:	0940      	lsrs	r0, r0, #5
   121e0:	4770      	bx	lr
   121e2:	bf00      	nop
   121e4:	40001000 	.word	0x40001000

000121e8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   121e8:	4b04      	ldr	r3, [pc, #16]	; (121fc <radio_crc_configure+0x14>)
   121ea:	f240 1203 	movw	r2, #259	; 0x103
   121ee:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   121f2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   121f6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   121fa:	4770      	bx	lr
   121fc:	40001000 	.word	0x40001000

00012200 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   12200:	4b03      	ldr	r3, [pc, #12]	; (12210 <radio_crc_is_valid+0x10>)
   12202:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12206:	3000      	adds	r0, #0
   12208:	bf18      	it	ne
   1220a:	2001      	movne	r0, #1
   1220c:	4770      	bx	lr
   1220e:	bf00      	nop
   12210:	40001000 	.word	0x40001000

00012214 <radio_pkt_empty_get>:
}
   12214:	4800      	ldr	r0, [pc, #0]	; (12218 <radio_pkt_empty_get+0x4>)
   12216:	4770      	bx	lr
   12218:	200015dc 	.word	0x200015dc

0001221c <radio_pkt_scratch_get>:
}
   1221c:	4800      	ldr	r0, [pc, #0]	; (12220 <radio_pkt_scratch_get+0x4>)
   1221e:	4770      	bx	lr
   12220:	200015e0 	.word	0x200015e0

00012224 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12224:	4b04      	ldr	r3, [pc, #16]	; (12238 <radio_switch_complete_and_rx+0x14>)
   12226:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   12228:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1222a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1222e:	4602      	mov	r2, r0
   12230:	4608      	mov	r0, r1
   12232:	f7ff be47 	b.w	11ec4 <sw_switch.isra.9>
   12236:	bf00      	nop
   12238:	40001000 	.word	0x40001000

0001223c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1223c:	4b03      	ldr	r3, [pc, #12]	; (1224c <radio_switch_complete_and_tx+0x10>)
   1223e:	2103      	movs	r1, #3
   12240:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   12244:	4601      	mov	r1, r0
   12246:	2001      	movs	r0, #1
   12248:	f7ff be3c 	b.w	11ec4 <sw_switch.isra.9>
   1224c:	40001000 	.word	0x40001000

00012250 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   12250:	4b05      	ldr	r3, [pc, #20]	; (12268 <radio_switch_complete_and_disable+0x18>)
   12252:	2203      	movs	r2, #3
   12254:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12258:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1225c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12260:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12264:	4770      	bx	lr
   12266:	bf00      	nop
   12268:	40001000 	.word	0x40001000

0001226c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1226c:	4a03      	ldr	r2, [pc, #12]	; (1227c <radio_rssi_measure+0x10>)
   1226e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   12272:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   12276:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   1227a:	4770      	bx	lr
   1227c:	40001000 	.word	0x40001000

00012280 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   12280:	4b01      	ldr	r3, [pc, #4]	; (12288 <radio_rssi_get+0x8>)
   12282:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   12286:	4770      	bx	lr
   12288:	40001000 	.word	0x40001000

0001228c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1228c:	4b02      	ldr	r3, [pc, #8]	; (12298 <radio_rssi_status_reset+0xc>)
   1228e:	2200      	movs	r2, #0
   12290:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   12294:	4770      	bx	lr
   12296:	bf00      	nop
   12298:	40001000 	.word	0x40001000

0001229c <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1229c:	4b03      	ldr	r3, [pc, #12]	; (122ac <radio_rssi_is_ready+0x10>)
   1229e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   122a2:	3000      	adds	r0, #0
   122a4:	bf18      	it	ne
   122a6:	2001      	movne	r0, #1
   122a8:	4770      	bx	lr
   122aa:	bf00      	nop
   122ac:	40001000 	.word	0x40001000

000122b0 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   122b0:	b530      	push	{r4, r5, lr}
   122b2:	2400      	movs	r4, #0
   122b4:	00a3      	lsls	r3, r4, #2
   122b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   122ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   122be:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   122c0:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   122c4:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   122c6:	8895      	ldrh	r5, [r2, #4]
   122c8:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   122cc:	2c08      	cmp	r4, #8
		bdaddr += 6;
   122ce:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   122d2:	d1ef      	bne.n	122b4 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   122d4:	4b02      	ldr	r3, [pc, #8]	; (122e0 <radio_filter_configure+0x30>)
   122d6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   122da:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   122de:	bd30      	pop	{r4, r5, pc}
   122e0:	40001000 	.word	0x40001000

000122e4 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   122e4:	4a03      	ldr	r2, [pc, #12]	; (122f4 <radio_filter_disable+0x10>)
   122e6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   122ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   122ee:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   122f2:	4770      	bx	lr
   122f4:	40001000 	.word	0x40001000

000122f8 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   122f8:	4b02      	ldr	r3, [pc, #8]	; (12304 <radio_filter_status_reset+0xc>)
   122fa:	2200      	movs	r2, #0
   122fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   12300:	4770      	bx	lr
   12302:	bf00      	nop
   12304:	40001000 	.word	0x40001000

00012308 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   12308:	4b03      	ldr	r3, [pc, #12]	; (12318 <radio_filter_has_match+0x10>)
   1230a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1230e:	3000      	adds	r0, #0
   12310:	bf18      	it	ne
   12312:	2001      	movne	r0, #1
   12314:	4770      	bx	lr
   12316:	bf00      	nop
   12318:	40001000 	.word	0x40001000

0001231c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1231c:	4b01      	ldr	r3, [pc, #4]	; (12324 <radio_filter_match_get+0x8>)
   1231e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   12322:	4770      	bx	lr
   12324:	40001000 	.word	0x40001000

00012328 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   12328:	4b04      	ldr	r3, [pc, #16]	; (1233c <radio_bc_configure+0x14>)
   1232a:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1232e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   12332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12336:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1233a:	4770      	bx	lr
   1233c:	40001000 	.word	0x40001000

00012340 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   12340:	4b05      	ldr	r3, [pc, #20]	; (12358 <radio_tmr_status_reset+0x18>)
   12342:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12346:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   1234a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1234e:	227f      	movs	r2, #127	; 0x7f
   12350:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12354:	4770      	bx	lr
   12356:	bf00      	nop
   12358:	4000b000 	.word	0x4000b000

0001235c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   1235c:	4b03      	ldr	r3, [pc, #12]	; (1236c <radio_tmr_tifs_set+0x10>)
   1235e:	4a04      	ldr	r2, [pc, #16]	; (12370 <radio_tmr_tifs_set+0x14>)
   12360:	781b      	ldrb	r3, [r3, #0]
   12362:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12366:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1236a:	4770      	bx	lr
   1236c:	200016ec 	.word	0x200016ec
   12370:	40009000 	.word	0x40009000

00012374 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12378:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1237c:	4c30      	ldr	r4, [pc, #192]	; (12440 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   1237e:	4d31      	ldr	r5, [pc, #196]	; (12444 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12380:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12384:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   12386:	bf88      	it	hi
   12388:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   1238c:	4b2e      	ldr	r3, [pc, #184]	; (12448 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   1238e:	4c2f      	ldr	r4, [pc, #188]	; (1244c <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   12390:	bf82      	ittt	hi
   12392:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   12396:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   1239a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   1239e:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   123a0:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   123a4:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   123a6:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   123a8:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   123ac:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   123ae:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   123b2:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   123b6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   123ba:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   123be:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   123c2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   123c6:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   123ca:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   123ce:	4920      	ldr	r1, [pc, #128]	; (12450 <radio_tmr_start+0xdc>)
   123d0:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   123d4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   123d8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   123dc:	f7ff fd5a 	bl	11e94 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   123e0:	4b1c      	ldr	r3, [pc, #112]	; (12454 <radio_tmr_start+0xe0>)
   123e2:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   123e4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   123e8:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   123ec:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   123f0:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   123f2:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   123f6:	3b74      	subs	r3, #116	; 0x74
   123f8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   123fc:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   12400:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12404:	f503 739a 	add.w	r3, r3, #308	; 0x134
   12408:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1240c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12410:	33c4      	adds	r3, #196	; 0xc4
   12412:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   12416:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1241a:	3bc0      	subs	r3, #192	; 0xc0
   1241c:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   12420:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12424:	33c8      	adds	r3, #200	; 0xc8
   12426:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1242a:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1242e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12432:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   12436:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   1243a:	4628      	mov	r0, r5
   1243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12440:	7ff0bdbf 	.word	0x7ff0bdbf
   12444:	000f4240 	.word	0x000f4240
   12448:	40008000 	.word	0x40008000
   1244c:	4000b000 	.word	0x4000b000
   12450:	4000b148 	.word	0x4000b148
   12454:	40009000 	.word	0x40009000

00012458 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   12458:	4a04      	ldr	r2, [pc, #16]	; (1246c <radio_tmr_stop+0x14>)
   1245a:	2301      	movs	r3, #1
   1245c:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   1245e:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   12460:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   12464:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   12466:	6113      	str	r3, [r2, #16]
   12468:	4770      	bx	lr
   1246a:	bf00      	nop
   1246c:	40008000 	.word	0x40008000

00012470 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   12470:	4b0c      	ldr	r3, [pc, #48]	; (124a4 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12472:	4a0d      	ldr	r2, [pc, #52]	; (124a8 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   12474:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12478:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1247c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12480:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12484:	3240      	adds	r2, #64	; 0x40
   12486:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   1248a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1248e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   12492:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   12496:	3a34      	subs	r2, #52	; 0x34
   12498:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   1249c:	2218      	movs	r2, #24
   1249e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   124a2:	4770      	bx	lr
   124a4:	40008000 	.word	0x40008000
   124a8:	40001104 	.word	0x40001104

000124ac <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   124ac:	4b0b      	ldr	r3, [pc, #44]	; (124dc <radio_tmr_aa_capture+0x30>)
   124ae:	4a0c      	ldr	r2, [pc, #48]	; (124e0 <radio_tmr_aa_capture+0x34>)
   124b0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   124b4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   124b8:	3240      	adds	r2, #64	; 0x40
   124ba:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   124be:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   124c2:	3a3c      	subs	r2, #60	; 0x3c
   124c4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   124c8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   124cc:	3240      	adds	r2, #64	; 0x40
   124ce:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   124d2:	220c      	movs	r2, #12
   124d4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   124d8:	4770      	bx	lr
   124da:	bf00      	nop
   124dc:	4001f000 	.word	0x4001f000
   124e0:	40001100 	.word	0x40001100

000124e4 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   124e4:	4b01      	ldr	r3, [pc, #4]	; (124ec <radio_tmr_aa_get+0x8>)
   124e6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   124ea:	4770      	bx	lr
   124ec:	40008000 	.word	0x40008000

000124f0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   124f0:	4b01      	ldr	r3, [pc, #4]	; (124f8 <radio_tmr_aa_save+0x8>)
   124f2:	6018      	str	r0, [r3, #0]
   124f4:	4770      	bx	lr
   124f6:	bf00      	nop
   124f8:	200016e4 	.word	0x200016e4

000124fc <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   124fc:	4b01      	ldr	r3, [pc, #4]	; (12504 <radio_tmr_aa_restore+0x8>)
   124fe:	6818      	ldr	r0, [r3, #0]
   12500:	4770      	bx	lr
   12502:	bf00      	nop
   12504:	200016e4 	.word	0x200016e4

00012508 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12508:	4b01      	ldr	r3, [pc, #4]	; (12510 <radio_tmr_ready_get+0x8>)
   1250a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1250e:	4770      	bx	lr
   12510:	40008000 	.word	0x40008000

00012514 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   12514:	4b06      	ldr	r3, [pc, #24]	; (12530 <radio_tmr_end_capture+0x1c>)
   12516:	4a07      	ldr	r2, [pc, #28]	; (12534 <radio_tmr_end_capture+0x20>)
   12518:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   1251c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12520:	323c      	adds	r2, #60	; 0x3c
   12522:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   12526:	2220      	movs	r2, #32
   12528:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1252c:	4770      	bx	lr
   1252e:	bf00      	nop
   12530:	4001f000 	.word	0x4001f000
   12534:	4000110c 	.word	0x4000110c

00012538 <radio_tmr_end_get>:
   12538:	4b01      	ldr	r3, [pc, #4]	; (12540 <radio_tmr_end_get+0x8>)
   1253a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1253e:	4770      	bx	lr
   12540:	40008000 	.word	0x40008000

00012544 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12544:	4b01      	ldr	r3, [pc, #4]	; (1254c <radio_tmr_tifs_base_get+0x8>)
   12546:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   1254a:	4770      	bx	lr
   1254c:	40008000 	.word	0x40008000

00012550 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12550:	4b16      	ldr	r3, [pc, #88]	; (125ac <radio_ccm_rx_pkt_set+0x5c>)
{
   12552:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12554:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12556:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12558:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1255c:	4e14      	ldr	r6, [pc, #80]	; (125b0 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1255e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12562:	4d14      	ldr	r5, [pc, #80]	; (125b4 <radio_ccm_rx_pkt_set+0x64>)
   12564:	2902      	cmp	r1, #2
   12566:	bf0c      	ite	eq
   12568:	4629      	moveq	r1, r5
   1256a:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1256c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12570:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   12574:	4810      	ldr	r0, [pc, #64]	; (125b8 <radio_ccm_rx_pkt_set+0x68>)
   12576:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1257a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1257e:	4a0f      	ldr	r2, [pc, #60]	; (125bc <radio_ccm_rx_pkt_set+0x6c>)
   12580:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12584:	490e      	ldr	r1, [pc, #56]	; (125c0 <radio_ccm_rx_pkt_set+0x70>)
   12586:	4a0f      	ldr	r2, [pc, #60]	; (125c4 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   12588:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1258c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12590:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12594:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   12598:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   1259c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   125a0:	2140      	movs	r1, #64	; 0x40
   125a2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   125a6:	2201      	movs	r2, #1
   125a8:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   125aa:	bd70      	pop	{r4, r5, r6, pc}
   125ac:	4000f000 	.word	0x4000f000
   125b0:	01000001 	.word	0x01000001
   125b4:	01010001 	.word	0x01010001
   125b8:	200015e0 	.word	0x200015e0
   125bc:	200014d0 	.word	0x200014d0
   125c0:	40001104 	.word	0x40001104
   125c4:	4001f000 	.word	0x4001f000

000125c8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   125c8:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   125ca:	4b0e      	ldr	r3, [pc, #56]	; (12604 <radio_ccm_tx_pkt_set+0x3c>)
   125cc:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   125ce:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   125d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   125d4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   125d8:	4c0b      	ldr	r4, [pc, #44]	; (12608 <radio_ccm_tx_pkt_set+0x40>)
   125da:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   125de:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   125e2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   125e6:	4809      	ldr	r0, [pc, #36]	; (1260c <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   125e8:	4909      	ldr	r1, [pc, #36]	; (12610 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   125ea:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   125ee:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   125f2:	2101      	movs	r1, #1
   125f4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   125f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   125fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   12600:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12602:	bd10      	pop	{r4, pc}
   12604:	4000f000 	.word	0x4000f000
   12608:	01010000 	.word	0x01010000
   1260c:	200015e0 	.word	0x200015e0
   12610:	200014d0 	.word	0x200014d0

00012614 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   12614:	4b0c      	ldr	r3, [pc, #48]	; (12648 <radio_ccm_is_done+0x34>)
   12616:	2202      	movs	r2, #2
   12618:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1261c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   12620:	b16a      	cbz	r2, 1263e <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   12622:	2202      	movs	r2, #2
   12624:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   12628:	4a08      	ldr	r2, [pc, #32]	; (1264c <radio_ccm_is_done+0x38>)
   1262a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1262e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   12632:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   12636:	fab0 f080 	clz	r0, r0
   1263a:	0940      	lsrs	r0, r0, #5
   1263c:	4770      	bx	lr
		__WFE();
   1263e:	bf20      	wfe
		__SEV();
   12640:	bf40      	sev
		__WFE();
   12642:	bf20      	wfe
   12644:	e7ea      	b.n	1261c <radio_ccm_is_done+0x8>
   12646:	bf00      	nop
   12648:	4000f000 	.word	0x4000f000
   1264c:	e000e100 	.word	0xe000e100

00012650 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   12650:	4b03      	ldr	r3, [pc, #12]	; (12660 <radio_ccm_mic_is_valid+0x10>)
   12652:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12656:	3000      	adds	r0, #0
   12658:	bf18      	it	ne
   1265a:	2001      	movne	r0, #1
   1265c:	4770      	bx	lr
   1265e:	bf00      	nop
   12660:	4000f000 	.word	0x4000f000

00012664 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   12664:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12666:	4c13      	ldr	r4, [pc, #76]	; (126b4 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12668:	4d13      	ldr	r5, [pc, #76]	; (126b8 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1266a:	2303      	movs	r3, #3
   1266c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   12670:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   12674:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12678:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   1267c:	3b01      	subs	r3, #1
   1267e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   12682:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   12684:	4b0d      	ldr	r3, [pc, #52]	; (126bc <radio_ar_configure+0x58>)
   12686:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1268a:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   1268c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   12690:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12694:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   12698:	f7ff fe46 	bl	12328 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   1269c:	4b08      	ldr	r3, [pc, #32]	; (126c0 <radio_ar_configure+0x5c>)
   1269e:	4a09      	ldr	r2, [pc, #36]	; (126c4 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   126a0:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   126a4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   126a8:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   126aa:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   126ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   126b2:	bd38      	pop	{r3, r4, r5, pc}
   126b4:	4000f000 	.word	0x4000f000
   126b8:	40001000 	.word	0x40001000
   126bc:	200014cc 	.word	0x200014cc
   126c0:	4001f000 	.word	0x4001f000
   126c4:	40001128 	.word	0x40001128

000126c8 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   126c8:	4b01      	ldr	r3, [pc, #4]	; (126d0 <radio_ar_match_get+0x8>)
   126ca:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   126ce:	4770      	bx	lr
   126d0:	4000f000 	.word	0x4000f000

000126d4 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   126d4:	4a04      	ldr	r2, [pc, #16]	; (126e8 <radio_ar_status_reset+0x14>)
   126d6:	2300      	movs	r3, #0
   126d8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   126dc:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   126e0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   126e4:	4770      	bx	lr
   126e6:	bf00      	nop
   126e8:	40001000 	.word	0x40001000

000126ec <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   126ec:	4b08      	ldr	r3, [pc, #32]	; (12710 <radio_ar_has_match+0x24>)
   126ee:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   126f2:	b160      	cbz	r0, 1270e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   126f4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   126f8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   126fc:	b138      	cbz	r0, 1270e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   126fe:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   12702:	b120      	cbz	r0, 1270e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12704:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12708:	fab0 f080 	clz	r0, r0
   1270c:	0940      	lsrs	r0, r0, #5
}
   1270e:	4770      	bx	lr
   12710:	40001000 	.word	0x40001000

00012714 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12714:	2901      	cmp	r1, #1
{
   12716:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12718:	d00e      	beq.n	12738 <mayfly_enable_cb+0x24>
   1271a:	4a0d      	ldr	r2, [pc, #52]	; (12750 <mayfly_enable_cb+0x3c>)
   1271c:	4b0d      	ldr	r3, [pc, #52]	; (12754 <mayfly_enable_cb+0x40>)
   1271e:	9201      	str	r2, [sp, #4]
   12720:	9200      	str	r2, [sp, #0]
   12722:	681c      	ldr	r4, [r3, #0]
   12724:	490c      	ldr	r1, [pc, #48]	; (12758 <mayfly_enable_cb+0x44>)
   12726:	4b0d      	ldr	r3, [pc, #52]	; (1275c <mayfly_enable_cb+0x48>)
   12728:	480d      	ldr	r0, [pc, #52]	; (12760 <mayfly_enable_cb+0x4c>)
   1272a:	47a0      	blx	r4
   1272c:	4040      	eors	r0, r0
   1272e:	f380 8811 	msr	BASEPRI, r0
   12732:	f04f 0004 	mov.w	r0, #4
   12736:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   12738:	2018      	movs	r0, #24
	if (enable) {
   1273a:	b122      	cbz	r2, 12746 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   1273c:	b002      	add	sp, #8
   1273e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(SWI4_IRQn);
   12742:	f7ef b88f 	b.w	1864 <_arch_irq_enable>
}
   12746:	b002      	add	sp, #8
   12748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(SWI4_IRQn);
   1274c:	f7ef b89a 	b.w	1884 <_arch_irq_disable>
   12750:	00014891 	.word	0x00014891
   12754:	20003aa4 	.word	0x20003aa4
   12758:	00015639 	.word	0x00015639
   1275c:	00017f40 	.word	0x00017f40
   12760:	00017f6f 	.word	0x00017f6f

00012764 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   12764:	b513      	push	{r0, r1, r4, lr}
	(void)caller_id;

	switch (callee_id) {
   12766:	b181      	cbz	r1, 1278a <mayfly_is_enabled+0x26>
   12768:	2901      	cmp	r1, #1
   1276a:	d014      	beq.n	12796 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   1276c:	4a0b      	ldr	r2, [pc, #44]	; (1279c <mayfly_is_enabled+0x38>)
   1276e:	4b0c      	ldr	r3, [pc, #48]	; (127a0 <mayfly_is_enabled+0x3c>)
   12770:	9201      	str	r2, [sp, #4]
   12772:	9200      	str	r2, [sp, #0]
   12774:	681c      	ldr	r4, [r3, #0]
   12776:	490b      	ldr	r1, [pc, #44]	; (127a4 <mayfly_is_enabled+0x40>)
   12778:	4b0b      	ldr	r3, [pc, #44]	; (127a8 <mayfly_is_enabled+0x44>)
   1277a:	480c      	ldr	r0, [pc, #48]	; (127ac <mayfly_is_enabled+0x48>)
   1277c:	47a0      	blx	r4
   1277e:	4040      	eors	r0, r0
   12780:	f380 8811 	msr	BASEPRI, r0
   12784:	f04f 0004 	mov.w	r0, #4
   12788:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1278a:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   1278c:	b002      	add	sp, #8
   1278e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return irq_is_enabled(SWI4_IRQn);
   12792:	f7ef b88b 	b.w	18ac <_arch_irq_is_enabled>
   12796:	2018      	movs	r0, #24
   12798:	e7f8      	b.n	1278c <mayfly_is_enabled+0x28>
   1279a:	bf00      	nop
   1279c:	00014891 	.word	0x00014891
   127a0:	20003aa4 	.word	0x20003aa4
   127a4:	00015639 	.word	0x00015639
   127a8:	00017f51 	.word	0x00017f51
   127ac:	00015597 	.word	0x00015597

000127b0 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   127b0:	4288      	cmp	r0, r1
   127b2:	d00a      	beq.n	127ca <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   127b4:	b918      	cbnz	r0, 127be <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   127b6:	1e4b      	subs	r3, r1, #1
   127b8:	4258      	negs	r0, r3
   127ba:	4158      	adcs	r0, r3
   127bc:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   127be:	2801      	cmp	r0, #1
   127c0:	d105      	bne.n	127ce <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   127c2:	fab1 f081 	clz	r0, r1
   127c6:	0940      	lsrs	r0, r0, #5
   127c8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   127ca:	2001      	movs	r0, #1
   127cc:	4770      	bx	lr
   127ce:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   127d0:	4770      	bx	lr
	...

000127d4 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   127d4:	b513      	push	{r0, r1, r4, lr}
   127d6:	4b0e      	ldr	r3, [pc, #56]	; (12810 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   127d8:	b181      	cbz	r1, 127fc <mayfly_pend+0x28>
   127da:	2901      	cmp	r1, #1
   127dc:	d014      	beq.n	12808 <mayfly_pend+0x34>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   127de:	4a0d      	ldr	r2, [pc, #52]	; (12814 <mayfly_pend+0x40>)
   127e0:	4b0d      	ldr	r3, [pc, #52]	; (12818 <mayfly_pend+0x44>)
   127e2:	9201      	str	r2, [sp, #4]
   127e4:	9200      	str	r2, [sp, #0]
   127e6:	681c      	ldr	r4, [r3, #0]
   127e8:	490c      	ldr	r1, [pc, #48]	; (1281c <mayfly_pend+0x48>)
   127ea:	4b0d      	ldr	r3, [pc, #52]	; (12820 <mayfly_pend+0x4c>)
   127ec:	480d      	ldr	r0, [pc, #52]	; (12824 <mayfly_pend+0x50>)
   127ee:	47a0      	blx	r4
   127f0:	4040      	eors	r0, r0
   127f2:	f380 8811 	msr	BASEPRI, r0
   127f6:	f04f 0004 	mov.w	r0, #4
   127fa:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   127fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12800:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   12804:	b002      	add	sp, #8
   12806:	bd10      	pop	{r4, pc}
   12808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1280c:	e7f8      	b.n	12800 <mayfly_pend+0x2c>
   1280e:	bf00      	nop
   12810:	e000e100 	.word	0xe000e100
   12814:	00014891 	.word	0x00014891
   12818:	20003aa4 	.word	0x20003aa4
   1281c:	00015639 	.word	0x00015639
   12820:	00017f63 	.word	0x00017f63
   12824:	00015597 	.word	0x00015597

00012828 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12828:	2803      	cmp	r0, #3
{
   1282a:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1282c:	d90e      	bls.n	1284c <hal_ticker_instance0_caller_id_get+0x24>
   1282e:	4a0e      	ldr	r2, [pc, #56]	; (12868 <hal_ticker_instance0_caller_id_get+0x40>)
   12830:	4b0e      	ldr	r3, [pc, #56]	; (1286c <hal_ticker_instance0_caller_id_get+0x44>)
   12832:	9201      	str	r2, [sp, #4]
   12834:	9200      	str	r2, [sp, #0]
   12836:	681c      	ldr	r4, [r3, #0]
   12838:	490d      	ldr	r1, [pc, #52]	; (12870 <hal_ticker_instance0_caller_id_get+0x48>)
   1283a:	4b0e      	ldr	r3, [pc, #56]	; (12874 <hal_ticker_instance0_caller_id_get+0x4c>)
   1283c:	480e      	ldr	r0, [pc, #56]	; (12878 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1283e:	47a0      	blx	r4
   12840:	4040      	eors	r0, r0
   12842:	f380 8811 	msr	BASEPRI, r0
   12846:	f04f 0004 	mov.w	r0, #4
   1284a:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1284c:	4b0b      	ldr	r3, [pc, #44]	; (1287c <hal_ticker_instance0_caller_id_get+0x54>)
   1284e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12850:	b940      	cbnz	r0, 12864 <hal_ticker_instance0_caller_id_get+0x3c>
   12852:	4a05      	ldr	r2, [pc, #20]	; (12868 <hal_ticker_instance0_caller_id_get+0x40>)
   12854:	4b05      	ldr	r3, [pc, #20]	; (1286c <hal_ticker_instance0_caller_id_get+0x44>)
   12856:	9201      	str	r2, [sp, #4]
   12858:	9200      	str	r2, [sp, #0]
   1285a:	681c      	ldr	r4, [r3, #0]
   1285c:	4904      	ldr	r1, [pc, #16]	; (12870 <hal_ticker_instance0_caller_id_get+0x48>)
   1285e:	4b05      	ldr	r3, [pc, #20]	; (12874 <hal_ticker_instance0_caller_id_get+0x4c>)
   12860:	4807      	ldr	r0, [pc, #28]	; (12880 <hal_ticker_instance0_caller_id_get+0x58>)
   12862:	e7ec      	b.n	1283e <hal_ticker_instance0_caller_id_get+0x16>

	return caller_id;
}
   12864:	b002      	add	sp, #8
   12866:	bd10      	pop	{r4, pc}
   12868:	00014891 	.word	0x00014891
   1286c:	20003aa4 	.word	0x20003aa4
   12870:	00015639 	.word	0x00015639
   12874:	00017f9f 	.word	0x00017f9f
   12878:	00017fe1 	.word	0x00017fe1
   1287c:	00017fdd 	.word	0x00017fdd
   12880:	00018022 	.word	0x00018022

00012884 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   12884:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12886:	3802      	subs	r0, #2
{
   12888:	461c      	mov	r4, r3
	switch (caller_id) {
   1288a:	2803      	cmp	r0, #3
   1288c:	d818      	bhi.n	128c0 <hal_ticker_instance0_sched+0x3c>
   1288e:	e8df f000 	tbb	[pc, r0]
   12892:	0d02      	.short	0x0d02
   12894:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   12896:	2903      	cmp	r1, #3
   12898:	d112      	bne.n	128c0 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1289a:	4b19      	ldr	r3, [pc, #100]	; (12900 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1289c:	2100      	movs	r1, #0
			m.param = instance;
   1289e:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   128a0:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   128a2:	b002      	add	sp, #8
   128a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   128a8:	f7f4 baca 	b.w	6e40 <mayfly_enqueue>
		switch (callee_id) {
   128ac:	2904      	cmp	r1, #4
   128ae:	d107      	bne.n	128c0 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   128b0:	4b14      	ldr	r3, [pc, #80]	; (12904 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   128b2:	2101      	movs	r1, #1
			m.param = instance;
   128b4:	609c      	str	r4, [r3, #8]
   128b6:	e7f3      	b.n	128a0 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   128b8:	2903      	cmp	r1, #3
   128ba:	d010      	beq.n	128de <hal_ticker_instance0_sched+0x5a>
   128bc:	2904      	cmp	r1, #4
   128be:	d013      	beq.n	128e8 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   128c0:	4a11      	ldr	r2, [pc, #68]	; (12908 <hal_ticker_instance0_sched+0x84>)
   128c2:	4b12      	ldr	r3, [pc, #72]	; (1290c <hal_ticker_instance0_sched+0x88>)
   128c4:	9201      	str	r2, [sp, #4]
   128c6:	9200      	str	r2, [sp, #0]
   128c8:	681c      	ldr	r4, [r3, #0]
   128ca:	4911      	ldr	r1, [pc, #68]	; (12910 <hal_ticker_instance0_sched+0x8c>)
   128cc:	4b11      	ldr	r3, [pc, #68]	; (12914 <hal_ticker_instance0_sched+0x90>)
   128ce:	4812      	ldr	r0, [pc, #72]	; (12918 <hal_ticker_instance0_sched+0x94>)
   128d0:	47a0      	blx	r4
   128d2:	4040      	eors	r0, r0
   128d4:	f380 8811 	msr	BASEPRI, r0
   128d8:	f04f 0004 	mov.w	r0, #4
   128dc:	df02      	svc	2
			m.param = instance;
   128de:	4b0f      	ldr	r3, [pc, #60]	; (1291c <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   128e0:	2100      	movs	r1, #0
			m.param = instance;
   128e2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   128e4:	2001      	movs	r0, #1
   128e6:	e7dc      	b.n	128a2 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   128e8:	4b0d      	ldr	r3, [pc, #52]	; (12920 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   128ea:	2101      	movs	r1, #1
			m.param = instance;
   128ec:	609c      	str	r4, [r3, #8]
   128ee:	e7f9      	b.n	128e4 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   128f0:	2904      	cmp	r1, #4
   128f2:	d1e5      	bne.n	128c0 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   128f4:	4b0b      	ldr	r3, [pc, #44]	; (12924 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   128f6:	2101      	movs	r1, #1
			m.param = instance;
   128f8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   128fa:	2003      	movs	r0, #3
   128fc:	e7d1      	b.n	128a2 <hal_ticker_instance0_sched+0x1e>
   128fe:	bf00      	nop
   12900:	20003e68 	.word	0x20003e68
   12904:	20003e78 	.word	0x20003e78
   12908:	00014891 	.word	0x00014891
   1290c:	20003aa4 	.word	0x20003aa4
   12910:	00015639 	.word	0x00015639
   12914:	00017fc2 	.word	0x00017fc2
   12918:	00015597 	.word	0x00015597
   1291c:	20003e88 	.word	0x20003e88
   12920:	20003e98 	.word	0x20003e98
   12924:	20003ea8 	.word	0x20003ea8

00012928 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   12928:	4601      	mov	r1, r0
   1292a:	2000      	movs	r0, #0
   1292c:	f7ff ba62 	b.w	11df4 <cntr_cmp_set>

00012930 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   12930:	4770      	bx	lr
	...

00012934 <net_buf_pool_get>:
}
   12934:	4b02      	ldr	r3, [pc, #8]	; (12940 <net_buf_pool_get+0xc>)
   12936:	2224      	movs	r2, #36	; 0x24
   12938:	fb02 3000 	mla	r0, r2, r0, r3
   1293c:	4770      	bx	lr
   1293e:	bf00      	nop
   12940:	20003fa8 	.word	0x20003fa8

00012944 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12944:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   12946:	4a05      	ldr	r2, [pc, #20]	; (1295c <net_buf_id+0x18>)
   12948:	2124      	movs	r1, #36	; 0x24
   1294a:	fb01 2303 	mla	r3, r1, r3, r2
   1294e:	6a1b      	ldr	r3, [r3, #32]
   12950:	1ac0      	subs	r0, r0, r3
}
   12952:	4b03      	ldr	r3, [pc, #12]	; (12960 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   12954:	10c0      	asrs	r0, r0, #3
}
   12956:	4358      	muls	r0, r3
   12958:	4770      	bx	lr
   1295a:	bf00      	nop
   1295c:	20003fa8 	.word	0x20003fa8
   12960:	aaaaaaab 	.word	0xaaaaaaab

00012964 <fixed_data_alloc>:
{
   12964:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12966:	4a0a      	ldr	r2, [pc, #40]	; (12990 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12968:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1296a:	2424      	movs	r4, #36	; 0x24
   1296c:	fb04 2303 	mla	r3, r4, r3, r2
	*size = min(fixed->data_size, *size);
   12970:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12972:	69db      	ldr	r3, [r3, #28]
   12974:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   12976:	6823      	ldr	r3, [r4, #0]
   12978:	429a      	cmp	r2, r3
   1297a:	bf94      	ite	ls
   1297c:	600a      	strls	r2, [r1, #0]
   1297e:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12980:	f7ff ffe0 	bl	12944 <net_buf_id>
   12984:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   12988:	fb02 3000 	mla	r0, r2, r0, r3
   1298c:	bd10      	pop	{r4, pc}
   1298e:	bf00      	nop
   12990:	20003fa8 	.word	0x20003fa8

00012994 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   12994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12998:	4605      	mov	r5, r0
   1299a:	9101      	str	r1, [sp, #4]
   1299c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1299e:	f001 f9dd 	bl	13d5c <_impl_k_uptime_get_32>
   129a2:	4607      	mov	r7, r0
	__asm__ volatile(
   129a4:	f04f 0320 	mov.w	r3, #32
   129a8:	f3ef 8811 	mrs	r8, BASEPRI
   129ac:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   129b0:	8aeb      	ldrh	r3, [r5, #22]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d042      	beq.n	12a3c <net_buf_alloc_len+0xa8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   129b6:	8aaa      	ldrh	r2, [r5, #20]
   129b8:	429a      	cmp	r2, r3
   129ba:	d92d      	bls.n	12a18 <net_buf_alloc_len+0x84>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   129bc:	2100      	movs	r1, #0
   129be:	4628      	mov	r0, r5
   129c0:	f000 febe 	bl	13740 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   129c4:	b340      	cbz	r0, 12a18 <net_buf_alloc_len+0x84>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   129c6:	f388 8811 	msr	BASEPRI, r8
   129ca:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   129cc:	9b01      	ldr	r3, [sp, #4]
   129ce:	2b00      	cmp	r3, #0
   129d0:	d041      	beq.n	12a56 <net_buf_alloc_len+0xc2>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   129d2:	1c73      	adds	r3, r6, #1
   129d4:	2b01      	cmp	r3, #1
   129d6:	d906      	bls.n	129e6 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   129d8:	f001 f9c0 	bl	13d5c <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   129dc:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   129de:	42b0      	cmp	r0, r6
   129e0:	bf94      	ite	ls
   129e2:	1a36      	subls	r6, r6, r0
   129e4:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   129e6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   129e8:	4f21      	ldr	r7, [pc, #132]	; (12a70 <net_buf_alloc_len+0xdc>)
   129ea:	2224      	movs	r2, #36	; 0x24
   129ec:	fb02 7303 	mla	r3, r2, r3, r7
   129f0:	a901      	add	r1, sp, #4
   129f2:	69db      	ldr	r3, [r3, #28]
   129f4:	681b      	ldr	r3, [r3, #0]
   129f6:	4632      	mov	r2, r6
   129f8:	681b      	ldr	r3, [r3, #0]
   129fa:	4620      	mov	r0, r4
   129fc:	4798      	blx	r3
   129fe:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   12a00:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   12a02:	bb48      	cbnz	r0, 12a58 <net_buf_alloc_len+0xc4>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   12a04:	79a0      	ldrb	r0, [r4, #6]
   12a06:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   12a0a:	4621      	mov	r1, r4
   12a0c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   12a10:	f000 fe77 	bl	13702 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   12a14:	462c      	mov	r4, r5
   12a16:	e01a      	b.n	12a4e <net_buf_alloc_len+0xba>
		uninit_count = pool->uninit_count--;
   12a18:	8ae8      	ldrh	r0, [r5, #22]
   12a1a:	1e43      	subs	r3, r0, #1
   12a1c:	82eb      	strh	r3, [r5, #22]
   12a1e:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   12a22:	8aac      	ldrh	r4, [r5, #20]
   12a24:	1a24      	subs	r4, r4, r0
   12a26:	6a28      	ldr	r0, [r5, #32]
   12a28:	2318      	movs	r3, #24
   12a2a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   12a2e:	4b10      	ldr	r3, [pc, #64]	; (12a70 <net_buf_alloc_len+0xdc>)
   12a30:	1aed      	subs	r5, r5, r3
   12a32:	4b10      	ldr	r3, [pc, #64]	; (12a74 <net_buf_alloc_len+0xe0>)
   12a34:	10ad      	asrs	r5, r5, #2
   12a36:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   12a38:	71a5      	strb	r5, [r4, #6]
		goto success;
   12a3a:	e7c7      	b.n	129cc <net_buf_alloc_len+0x38>
   12a3c:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12a40:	4631      	mov	r1, r6
   12a42:	4628      	mov	r0, r5
   12a44:	f000 fe7c 	bl	13740 <_impl_k_queue_get>
		return NULL;
   12a48:	4604      	mov	r4, r0
	if (!buf) {
   12a4a:	2800      	cmp	r0, #0
   12a4c:	d1be      	bne.n	129cc <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   12a4e:	4620      	mov	r0, r4
   12a50:	b002      	add	sp, #8
   12a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   12a56:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   12a58:	2301      	movs	r3, #1
   12a5a:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   12a5c:	2300      	movs	r3, #0
	buf->frags = NULL;
   12a5e:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   12a60:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   12a62:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   12a64:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   12a66:	6923      	ldr	r3, [r4, #16]
   12a68:	81e2      	strh	r2, [r4, #14]
   12a6a:	60a3      	str	r3, [r4, #8]
	return buf;
   12a6c:	e7ef      	b.n	12a4e <net_buf_alloc_len+0xba>
   12a6e:	bf00      	nop
   12a70:	20003fa8 	.word	0x20003fa8
   12a74:	38e38e39 	.word	0x38e38e39

00012a78 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12a78:	69c3      	ldr	r3, [r0, #28]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   12a7a:	685b      	ldr	r3, [r3, #4]
   12a7c:	460a      	mov	r2, r1
   12a7e:	6819      	ldr	r1, [r3, #0]
   12a80:	f7ff bf88 	b.w	12994 <net_buf_alloc_len>

00012a84 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   12a84:	b570      	push	{r4, r5, r6, lr}
   12a86:	4606      	mov	r6, r0
   12a88:	f000 fe5a 	bl	13740 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   12a8c:	4605      	mov	r5, r0
   12a8e:	b128      	cbz	r0, 12a9c <net_buf_get+0x18>
   12a90:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12a92:	7963      	ldrb	r3, [r4, #5]
   12a94:	f013 0301 	ands.w	r3, r3, #1
   12a98:	d102      	bne.n	12aa0 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   12a9a:	6023      	str	r3, [r4, #0]

	return buf;
}
   12a9c:	4628      	mov	r0, r5
   12a9e:	bd70      	pop	{r4, r5, r6, pc}
   12aa0:	2100      	movs	r1, #0
   12aa2:	4630      	mov	r0, r6
   12aa4:	f000 fe4c 	bl	13740 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   12aa8:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   12aaa:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   12aac:	f023 0301 	bic.w	r3, r3, #1
   12ab0:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12ab2:	4604      	mov	r4, r0
   12ab4:	e7ed      	b.n	12a92 <net_buf_get+0xe>

00012ab6 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12ab6:	6883      	ldr	r3, [r0, #8]
   12ab8:	4419      	add	r1, r3
   12aba:	6001      	str	r1, [r0, #0]
   12abc:	4770      	bx	lr

00012abe <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   12abe:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   12ac0:	460a      	mov	r2, r1
   12ac2:	6814      	ldr	r4, [r2, #0]
   12ac4:	b914      	cbnz	r4, 12acc <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   12ac6:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   12ac8:	f000 be20 	b.w	1370c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   12acc:	7953      	ldrb	r3, [r2, #5]
   12ace:	f043 0301 	orr.w	r3, r3, #1
   12ad2:	7153      	strb	r3, [r2, #5]
   12ad4:	4622      	mov	r2, r4
   12ad6:	e7f4      	b.n	12ac2 <net_buf_put+0x4>

00012ad8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12adc:	4d17      	ldr	r5, [pc, #92]	; (12b3c <net_buf_unref+0x64>)
   12ade:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12ae0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   12ae2:	2724      	movs	r7, #36	; 0x24
	while (buf) {
   12ae4:	b90c      	cbnz	r4, 12aea <net_buf_unref+0x12>
   12ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   12aea:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   12aec:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   12af0:	3b01      	subs	r3, #1
   12af2:	b2db      	uxtb	r3, r3
   12af4:	7123      	strb	r3, [r4, #4]
   12af6:	2b00      	cmp	r3, #0
   12af8:	d1f5      	bne.n	12ae6 <net_buf_unref+0xe>
		if (buf->__buf) {
   12afa:	6921      	ldr	r1, [r4, #16]
   12afc:	b159      	cbz	r1, 12b16 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   12afe:	7963      	ldrb	r3, [r4, #5]
   12b00:	079b      	lsls	r3, r3, #30
   12b02:	d407      	bmi.n	12b14 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12b04:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   12b06:	fb07 5303 	mla	r3, r7, r3, r5
   12b0a:	4620      	mov	r0, r4
   12b0c:	69db      	ldr	r3, [r3, #28]
   12b0e:	681b      	ldr	r3, [r3, #0]
   12b10:	689b      	ldr	r3, [r3, #8]
   12b12:	4798      	blx	r3
			buf->__buf = NULL;
   12b14:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   12b16:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   12b18:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   12b1a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   12b1e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   12b20:	699b      	ldr	r3, [r3, #24]
   12b22:	b11b      	cbz	r3, 12b2c <net_buf_unref+0x54>
			pool->destroy(buf);
   12b24:	4620      	mov	r0, r4
   12b26:	4798      	blx	r3
{
   12b28:	4644      	mov	r4, r8
   12b2a:	e7db      	b.n	12ae4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   12b2c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   12b30:	4621      	mov	r1, r4
   12b32:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   12b36:	f000 fde4 	bl	13702 <k_queue_prepend>
   12b3a:	e7f5      	b.n	12b28 <net_buf_unref+0x50>
   12b3c:	20003fa8 	.word	0x20003fa8

00012b40 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   12b40:	7903      	ldrb	r3, [r0, #4]
   12b42:	3301      	adds	r3, #1
   12b44:	7103      	strb	r3, [r0, #4]
	return buf;
}
   12b46:	4770      	bx	lr

00012b48 <net_buf_simple_add>:
	return buf->data + buf->len;
   12b48:	8883      	ldrh	r3, [r0, #4]
   12b4a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   12b4c:	4419      	add	r1, r3
   12b4e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   12b50:	18d0      	adds	r0, r2, r3
   12b52:	4770      	bx	lr

00012b54 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   12b54:	b430      	push	{r4, r5}
   12b56:	8883      	ldrh	r3, [r0, #4]
   12b58:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   12b5a:	189d      	adds	r5, r3, r2
   12b5c:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12b5e:	18e0      	adds	r0, r4, r3
}
   12b60:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12b62:	f7ef b85d 	b.w	1c20 <memcpy>

00012b66 <net_buf_simple_add_u8>:
   12b66:	8883      	ldrh	r3, [r0, #4]
   12b68:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   12b6a:	b510      	push	{r4, lr}
	buf->len += len;
   12b6c:	1c5c      	adds	r4, r3, #1
   12b6e:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   12b70:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   12b72:	18d0      	adds	r0, r2, r3
   12b74:	bd10      	pop	{r4, pc}

00012b76 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   12b76:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   12b78:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   12b7a:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   12b7c:	4411      	add	r1, r2
	buf->data -= len;
   12b7e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   12b80:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   12b82:	4618      	mov	r0, r3
   12b84:	4770      	bx	lr

00012b86 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   12b86:	8883      	ldrh	r3, [r0, #4]
   12b88:	1a5b      	subs	r3, r3, r1
   12b8a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   12b8c:	6803      	ldr	r3, [r0, #0]
   12b8e:	4419      	add	r1, r3
   12b90:	6001      	str	r1, [r0, #0]
}
   12b92:	4608      	mov	r0, r1
   12b94:	4770      	bx	lr

00012b96 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   12b96:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   12b98:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   12b9a:	2101      	movs	r1, #1
	val = buf->data[0];
   12b9c:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   12b9e:	f7ff fff2 	bl	12b86 <net_buf_simple_pull>

	return val;
}
   12ba2:	4610      	mov	r0, r2
   12ba4:	bd08      	pop	{r3, pc}

00012ba6 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   12ba6:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   12ba8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12baa:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   12bac:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12bae:	f7ff ffea 	bl	12b86 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   12bb2:	4610      	mov	r0, r2
   12bb4:	bd08      	pop	{r3, pc}

00012bb6 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   12bb6:	6802      	ldr	r2, [r0, #0]
   12bb8:	6880      	ldr	r0, [r0, #8]
}
   12bba:	1a10      	subs	r0, r2, r0
   12bbc:	4770      	bx	lr

00012bbe <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   12bbe:	6802      	ldr	r2, [r0, #0]
   12bc0:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12bc2:	88c3      	ldrh	r3, [r0, #6]
   12bc4:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   12bc6:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12bc8:	1a9b      	subs	r3, r3, r2
}
   12bca:	1a18      	subs	r0, r3, r0
   12bcc:	4770      	bx	lr

00012bce <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12bce:	6800      	ldr	r0, [r0, #0]
   12bd0:	6880      	ldr	r0, [r0, #8]
   12bd2:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12bd4:	b941      	cbnz	r1, 12be8 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   12bd6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   12bda:	fa21 f202 	lsr.w	r2, r1, r2
   12bde:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   12be2:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   12be4:	2000      	movs	r0, #0
   12be6:	4770      	bx	lr
		*value = gpio->IN;
   12be8:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   12bec:	e7f9      	b.n	12be2 <gpio_nrf5_read+0x14>

00012bee <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12bee:	6800      	ldr	r0, [r0, #0]
   12bf0:	6880      	ldr	r0, [r0, #8]
   12bf2:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12bf4:	b949      	cbnz	r1, 12c0a <gpio_nrf5_write+0x1c>
   12bf6:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   12bf8:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   12bfa:	b11b      	cbz	r3, 12c04 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   12bfc:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   12c00:	2000      	movs	r0, #0
   12c02:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   12c04:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   12c08:	e7fa      	b.n	12c00 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   12c0a:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   12c0e:	e7f7      	b.n	12c00 <gpio_nrf5_write+0x12>

00012c10 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12c10:	6883      	ldr	r3, [r0, #8]
   12c12:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   12c14:	b172      	cbz	r2, 12c34 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   12c16:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   12c18:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12c1a:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   12c1c:	b902      	cbnz	r2, 12c20 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   12c1e:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   12c20:	2000      	movs	r0, #0
   12c22:	4770      	bx	lr
	parent->next = child;
   12c24:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   12c26:	6858      	ldr	r0, [r3, #4]
   12c28:	4281      	cmp	r1, r0
	list->tail = node;
   12c2a:	bf08      	it	eq
   12c2c:	605a      	streq	r2, [r3, #4]
   12c2e:	e00d      	b.n	12c4c <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   12c30:	4602      	mov	r2, r0
   12c32:	6800      	ldr	r0, [r0, #0]
   12c34:	2800      	cmp	r0, #0
   12c36:	d0f3      	beq.n	12c20 <gpio_nrf5_manage_callback+0x10>
   12c38:	4281      	cmp	r1, r0
   12c3a:	d1f9      	bne.n	12c30 <gpio_nrf5_manage_callback+0x20>
   12c3c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   12c3e:	2a00      	cmp	r2, #0
   12c40:	d1f0      	bne.n	12c24 <gpio_nrf5_manage_callback+0x14>
   12c42:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12c44:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   12c46:	4291      	cmp	r1, r2
   12c48:	d100      	bne.n	12c4c <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   12c4a:	6058      	str	r0, [r3, #4]
	parent->next = child;
   12c4c:	2300      	movs	r3, #0
   12c4e:	600b      	str	r3, [r1, #0]
   12c50:	e7e6      	b.n	12c20 <gpio_nrf5_manage_callback+0x10>
	...

00012c54 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   12c54:	4b0c      	ldr	r3, [pc, #48]	; (12c88 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   12c56:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12c58:	4d0c      	ldr	r5, [pc, #48]	; (12c8c <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   12c5a:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12c5c:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   12c5e:	fa24 f203 	lsr.w	r2, r4, r3
   12c62:	07d2      	lsls	r2, r2, #31
   12c64:	d508      	bpl.n	12c78 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12c66:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   12c6a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   12c6e:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   12c72:	4282      	cmp	r2, r0
   12c74:	d100      	bne.n	12c78 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12c76:	b121      	cbz	r1, 12c82 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12c78:	3301      	adds	r3, #1
   12c7a:	2b08      	cmp	r3, #8
   12c7c:	d1ef      	bne.n	12c5e <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   12c7e:	f06f 0312 	mvn.w	r3, #18
}
   12c82:	4618      	mov	r0, r3
   12c84:	bd30      	pop	{r4, r5, pc}
   12c86:	bf00      	nop
   12c88:	20001724 	.word	0x20001724
   12c8c:	40006000 	.word	0x40006000

00012c90 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   12c90:	b570      	push	{r4, r5, r6, lr}
   12c92:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12c94:	460d      	mov	r5, r1
   12c96:	b9c9      	cbnz	r1, 12ccc <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12c98:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12c9a:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12c9c:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12c9e:	4610      	mov	r0, r2
   12ca0:	7919      	ldrb	r1, [r3, #4]
   12ca2:	f7ff ffd7 	bl	12c54 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12ca6:	2800      	cmp	r0, #0
   12ca8:	db12      	blt.n	12cd0 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   12caa:	68b2      	ldr	r2, [r6, #8]
   12cac:	2301      	movs	r3, #1
   12cae:	fa03 f404 	lsl.w	r4, r3, r4
   12cb2:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   12cb4:	f100 0140 	add.w	r1, r0, #64	; 0x40
   12cb8:	4a06      	ldr	r2, [pc, #24]	; (12cd4 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   12cba:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   12cbc:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   12cc0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   12cc4:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   12cc8:	4628      	mov	r0, r5
   12cca:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12ccc:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12cd0:	bd70      	pop	{r4, r5, r6, pc}
   12cd2:	bf00      	nop
   12cd4:	40006000 	.word	0x40006000

00012cd8 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   12cd8:	b570      	push	{r4, r5, r6, lr}
   12cda:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12cdc:	460d      	mov	r5, r1
   12cde:	b9b1      	cbnz	r1, 12d0e <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12ce0:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12ce2:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12ce4:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12ce6:	4610      	mov	r0, r2
   12ce8:	7919      	ldrb	r1, [r3, #4]
   12cea:	f7ff ffb3 	bl	12c54 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12cee:	2800      	cmp	r0, #0
   12cf0:	db0f      	blt.n	12d12 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   12cf2:	68b2      	ldr	r2, [r6, #8]
   12cf4:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   12cf6:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   12cfa:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   12cfe:	4b05      	ldr	r3, [pc, #20]	; (12d14 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   12d00:	ea22 0404 	bic.w	r4, r2, r4
   12d04:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   12d06:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   12d0a:	4628      	mov	r0, r5
   12d0c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12d0e:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12d12:	bd70      	pop	{r4, r5, r6, pc}
   12d14:	40006000 	.word	0x40006000

00012d18 <gpio_nrf5_config>:
{
   12d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12d1c:	6806      	ldr	r6, [r0, #0]
{
   12d1e:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12d20:	68b2      	ldr	r2, [r6, #8]
   12d22:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12d24:	b119      	cbz	r1, 12d2e <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   12d26:	f06f 0022 	mvn.w	r0, #34	; 0x22
   12d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12d2e:	f403 7240 	and.w	r2, r3, #768	; 0x300
   12d32:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   12d36:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   12d3a:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   12d3e:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12d42:	d058      	beq.n	12df6 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   12d44:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   12d48:	bf0c      	ite	eq
   12d4a:	2204      	moveq	r2, #4
   12d4c:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   12d4e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   12d52:	bf08      	it	eq
   12d54:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   12d56:	f013 0f01 	tst.w	r3, #1
   12d5a:	ea4f 0180 	mov.w	r1, r0, lsl #2
   12d5e:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 12e2c <gpio_nrf5_config+0x114>
   12d62:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   12d66:	d04f      	beq.n	12e08 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   12d68:	2a0c      	cmp	r2, #12
   12d6a:	d146      	bne.n	12dfa <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   12d6c:	2701      	movs	r7, #1
   12d6e:	40a7      	lsls	r7, r4
   12d70:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   12d74:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   12d76:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   12d7a:	f041 0103 	orr.w	r1, r1, #3
   12d7e:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   12d80:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   12d84:	f013 0002 	ands.w	r0, r3, #2
   12d88:	d049      	beq.n	12e1e <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   12d8a:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   12d8c:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   12d8e:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   12d92:	d5c8      	bpl.n	12d26 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   12d94:	065a      	lsls	r2, r3, #25
   12d96:	d43d      	bmi.n	12e14 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   12d98:	f013 0f04 	tst.w	r3, #4
   12d9c:	bf14      	ite	ne
   12d9e:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   12da2:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   12da6:	4e1f      	ldr	r6, [pc, #124]	; (12e24 <gpio_nrf5_config+0x10c>)
   12da8:	6837      	ldr	r7, [r6, #0]
   12daa:	4638      	mov	r0, r7
   12dac:	f7ed fa4a 	bl	244 <__popcountsi2>
   12db0:	2808      	cmp	r0, #8
   12db2:	d032      	beq.n	12e1a <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   12db4:	4641      	mov	r1, r8
   12db6:	4620      	mov	r0, r4
   12db8:	f7ff ff4c 	bl	12c54 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12dbc:	2800      	cmp	r0, #0
   12dbe:	da08      	bge.n	12dd2 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   12dc0:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   12dc2:	fa93 f0a3 	rbit	r0, r3
   12dc6:	2b00      	cmp	r3, #0
   12dc8:	fab0 f080 	clz	r0, r0
   12dcc:	bf08      	it	eq
   12dce:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   12dd2:	2301      	movs	r3, #1
   12dd4:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   12dd6:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   12dd8:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   12dda:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   12dde:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   12de0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   12de4:	4b10      	ldr	r3, [pc, #64]	; (12e28 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   12de6:	f044 0401 	orr.w	r4, r4, #1
   12dea:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   12dec:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   12df0:	2000      	movs	r0, #0
   12df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   12df6:	220c      	movs	r2, #12
   12df8:	e7a9      	b.n	12d4e <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   12dfa:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   12dfc:	bf02      	ittt	eq
   12dfe:	2701      	moveq	r7, #1
   12e00:	40a7      	lsleq	r7, r4
   12e02:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   12e06:	e7b5      	b.n	12d74 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   12e08:	4461      	add	r1, ip
   12e0a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   12e0e:	430a      	orrs	r2, r1
   12e10:	433a      	orrs	r2, r7
   12e12:	e7b5      	b.n	12d80 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   12e14:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   12e18:	e7c5      	b.n	12da6 <gpio_nrf5_config+0x8e>
			return -EIO;
   12e1a:	f06f 0004 	mvn.w	r0, #4
}
   12e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e22:	bf00      	nop
   12e24:	20001724 	.word	0x20001724
   12e28:	40006000 	.word	0x40006000
   12e2c:	00018060 	.word	0x00018060

00012e30 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   12e30:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   12e32:	2200      	movs	r2, #0
   12e34:	2105      	movs	r1, #5
   12e36:	2006      	movs	r0, #6
   12e38:	f7ee fd46 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   12e3c:	2006      	movs	r0, #6
   12e3e:	f7ee fd11 	bl	1864 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   12e42:	2000      	movs	r0, #0
   12e44:	bd08      	pop	{r3, pc}
	...

00012e48 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12e48:	2100      	movs	r1, #0
{
   12e4a:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   12e4c:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   12e4e:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   12e50:	2501      	movs	r5, #1
   12e52:	008b      	lsls	r3, r1, #2
   12e54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12e58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   12e5c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   12e60:	b140      	cbz	r0, 12e74 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   12e62:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   12e66:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   12e6a:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   12e6e:	fa05 f303 	lsl.w	r3, r5, r3
   12e72:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12e74:	3101      	adds	r1, #1
   12e76:	2908      	cmp	r1, #8
   12e78:	d1eb      	bne.n	12e52 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   12e7a:	4e08      	ldr	r6, [pc, #32]	; (12e9c <gpio_nrf5_port_isr+0x54>)
   12e7c:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   12e7e:	689d      	ldr	r5, [r3, #8]
   12e80:	681c      	ldr	r4, [r3, #0]
   12e82:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   12e84:	b14c      	cbz	r4, 12e9a <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   12e86:	68a3      	ldr	r3, [r4, #8]
   12e88:	421d      	tst	r5, r3
   12e8a:	d004      	beq.n	12e96 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   12e8c:	6863      	ldr	r3, [r4, #4]
   12e8e:	462a      	mov	r2, r5
   12e90:	4621      	mov	r1, r4
   12e92:	4630      	mov	r0, r6
   12e94:	4798      	blx	r3
	return node->next;
   12e96:	6824      	ldr	r4, [r4, #0]
   12e98:	e7f4      	b.n	12e84 <gpio_nrf5_port_isr+0x3c>
   12e9a:	bd70      	pop	{r4, r5, r6, pc}
   12e9c:	20003f48 	.word	0x20003f48

00012ea0 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12ea0:	4b03      	ldr	r3, [pc, #12]	; (12eb0 <uart_nrfx_err_check+0x10>)
   12ea2:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   12ea4:	b118      	cbz	r0, 12eae <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12ea6:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   12eaa:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   12eae:	4770      	bx	lr
   12eb0:	40002124 	.word	0x40002124

00012eb4 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12eb4:	4b07      	ldr	r3, [pc, #28]	; (12ed4 <uart_nrfx_poll_out+0x20>)
   12eb6:	2200      	movs	r2, #0
   12eb8:	601a      	str	r2, [r3, #0]
{
   12eba:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12ebc:	681a      	ldr	r2, [r3, #0]
   12ebe:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12ec0:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   12ec2:	4a05      	ldr	r2, [pc, #20]	; (12ed8 <uart_nrfx_poll_out+0x24>)
   12ec4:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12ec8:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   12eca:	2a00      	cmp	r2, #0
   12ecc:	d0fc      	beq.n	12ec8 <uart_nrfx_poll_out+0x14>
}
   12ece:	4608      	mov	r0, r1
   12ed0:	b002      	add	sp, #8
   12ed2:	4770      	bx	lr
   12ed4:	4000211c 	.word	0x4000211c
   12ed8:	40002000 	.word	0x40002000

00012edc <uart_nrfx_poll_in>:
   12edc:	4b08      	ldr	r3, [pc, #32]	; (12f00 <uart_nrfx_poll_in+0x24>)
   12ede:	681a      	ldr	r2, [r3, #0]
{
   12ee0:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   12ee2:	b152      	cbz	r2, 12efa <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12ee4:	2000      	movs	r0, #0
   12ee6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12ee8:	681b      	ldr	r3, [r3, #0]
   12eea:	9301      	str	r3, [sp, #4]
    (void)dummy;
   12eec:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   12eee:	4b05      	ldr	r3, [pc, #20]	; (12f04 <uart_nrfx_poll_in+0x28>)
   12ef0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   12ef4:	700b      	strb	r3, [r1, #0]
}
   12ef6:	b002      	add	sp, #8
   12ef8:	4770      	bx	lr
		return -1;
   12efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12efe:	e7fa      	b.n	12ef6 <uart_nrfx_poll_in+0x1a>
   12f00:	40002108 	.word	0x40002108
   12f04:	40002000 	.word	0x40002000

00012f08 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   12f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   12f0a:	4819      	ldr	r0, [pc, #100]	; (12f70 <uart_nrfx_init+0x68>)
   12f0c:	f000 f98c 	bl	13228 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   12f10:	6843      	ldr	r3, [r0, #4]
   12f12:	4604      	mov	r4, r0
   12f14:	681d      	ldr	r5, [r3, #0]
   12f16:	2206      	movs	r2, #6
   12f18:	f240 1301 	movw	r3, #257	; 0x101
   12f1c:	2100      	movs	r1, #0
   12f1e:	47a8      	blx	r5
   12f20:	6863      	ldr	r3, [r4, #4]
   12f22:	681d      	ldr	r5, [r3, #0]
   12f24:	2300      	movs	r3, #0
   12f26:	4619      	mov	r1, r3
   12f28:	2208      	movs	r2, #8
   12f2a:	4620      	mov	r0, r4
   12f2c:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   12f2e:	4b11      	ldr	r3, [pc, #68]	; (12f74 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12f30:	4911      	ldr	r1, [pc, #68]	; (12f78 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   12f32:	2208      	movs	r2, #8
   12f34:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   12f38:	2206      	movs	r2, #6
   12f3a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12f3e:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12f40:	4a0e      	ldr	r2, [pc, #56]	; (12f7c <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12f42:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   12f46:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   12f4a:	2204      	movs	r2, #4
   12f4c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12f50:	4a0b      	ldr	r2, [pc, #44]	; (12f80 <uart_nrfx_init+0x78>)
   12f52:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12f54:	6812      	ldr	r2, [r2, #0]
   12f56:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12f58:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12f5a:	4a0a      	ldr	r2, [pc, #40]	; (12f84 <uart_nrfx_init+0x7c>)
   12f5c:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12f5e:	6812      	ldr	r2, [r2, #0]
   12f60:	9200      	str	r2, [sp, #0]
    (void)dummy;
   12f62:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12f64:	2201      	movs	r2, #1
   12f66:	600a      	str	r2, [r1, #0]
   12f68:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   12f6a:	b003      	add	sp, #12
   12f6c:	bd30      	pop	{r4, r5, pc}
   12f6e:	bf00      	nop
   12f70:	000180c4 	.word	0x000180c4
   12f74:	40002000 	.word	0x40002000
   12f78:	40002008 	.word	0x40002008
   12f7c:	01d7e000 	.word	0x01d7e000
   12f80:	4000211c 	.word	0x4000211c
   12f84:	40002108 	.word	0x40002108

00012f88 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   12f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   12f8c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   12f8e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   12f90:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   12f92:	42a3      	cmp	r3, r4
	d = &rand[octets];
   12f94:	440a      	add	r2, r1
	s = &rng->rand[first];
   12f96:	4406      	add	r6, r0
	if (first <= last) {
   12f98:	d81f      	bhi.n	12fda <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   12f9a:	1ae4      	subs	r4, r4, r3
   12f9c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   12f9e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   12fa0:	bf3e      	ittt	cc
   12fa2:	1a64      	subcc	r4, r4, r1
   12fa4:	b2e7      	uxtbcc	r7, r4
   12fa6:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   12fa8:	4423      	add	r3, r4
		octets -= avail;
   12faa:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   12fae:	bf28      	it	cs
   12fb0:	2700      	movcs	r7, #0
		first += avail;
   12fb2:	b2db      	uxtb	r3, r3
		octets -= avail;
   12fb4:	b2c9      	uxtb	r1, r1
   12fb6:	4434      	add	r4, r6

		while (avail--) {
   12fb8:	42a6      	cmp	r6, r4
   12fba:	d109      	bne.n	12fd0 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   12fbc:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   12fbe:	7843      	ldrb	r3, [r0, #1]
   12fc0:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   12fc2:	bf82      	ittt	hi
   12fc4:	4b20      	ldrhi	r3, [pc, #128]	; (13048 <get+0xc0>)
   12fc6:	2201      	movhi	r2, #1
   12fc8:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   12fca:	4608      	mov	r0, r1
   12fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   12fd0:	f816 5b01 	ldrb.w	r5, [r6], #1
   12fd4:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12fd8:	e7ee      	b.n	12fb8 <get+0x30>
		avail = rng->count - first;
   12fda:	7805      	ldrb	r5, [r0, #0]
   12fdc:	1aed      	subs	r5, r5, r3
   12fde:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   12fe0:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   12fe2:	bf3f      	itttt	cc
   12fe4:	1a67      	subcc	r7, r4, r1
   12fe6:	19ed      	addcc	r5, r5, r7
   12fe8:	b2ef      	uxtbcc	r7, r5
   12fea:	460d      	movcc	r5, r1
			first += avail;
   12fec:	bf38      	it	cc
   12fee:	185b      	addcc	r3, r3, r1
		octets -= avail;
   12ff0:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   12ff4:	bf32      	itee	cc
   12ff6:	b2db      	uxtbcc	r3, r3
   12ff8:	4627      	movcs	r7, r4
			first = 0;
   12ffa:	2300      	movcs	r3, #0
		octets -= avail;
   12ffc:	b2c9      	uxtb	r1, r1
   12ffe:	4696      	mov	lr, r2
   13000:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   13004:	4566      	cmp	r6, ip
   13006:	d119      	bne.n	1303c <get+0xb4>
   13008:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   1300a:	2900      	cmp	r1, #0
   1300c:	d0d6      	beq.n	12fbc <get+0x34>
   1300e:	2c00      	cmp	r4, #0
   13010:	d0d4      	beq.n	12fbc <get+0x34>
			if (octets < last) {
   13012:	428c      	cmp	r4, r1
   13014:	bf8a      	itet	hi
   13016:	460b      	movhi	r3, r1
   13018:	4623      	movls	r3, r4
				remaining = last - octets;
   1301a:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   1301c:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   13020:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   13024:	bf8c      	ite	hi
   13026:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   13028:	2700      	movls	r7, #0
			octets -= last;
   1302a:	b2c9      	uxtb	r1, r1
   1302c:	18f4      	adds	r4, r6, r3
			while (last--) {
   1302e:	42a6      	cmp	r6, r4
   13030:	d0c4      	beq.n	12fbc <get+0x34>
				*(--d) = *s++;
   13032:	f816 5b01 	ldrb.w	r5, [r6], #1
   13036:	f802 5d01 	strb.w	r5, [r2, #-1]!
   1303a:	e7f8      	b.n	1302e <get+0xa6>
			*(--d) = *s++;
   1303c:	f816 8b01 	ldrb.w	r8, [r6], #1
   13040:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   13044:	e7de      	b.n	13004 <get+0x7c>
   13046:	bf00      	nop
   13048:	4000d000 	.word	0x4000d000

0001304c <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   1304c:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   1304e:	b1d0      	cbz	r0, 13086 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   13050:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   13052:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   13054:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   13056:	1c53      	adds	r3, r2, #1
   13058:	b2db      	uxtb	r3, r3
		last = 0;
   1305a:	42ab      	cmp	r3, r5
   1305c:	bf08      	it	eq
   1305e:	2300      	moveq	r3, #0
	if (last == rng->first) {
   13060:	42a3      	cmp	r3, r4
   13062:	d010      	beq.n	13086 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   13064:	b161      	cbz	r1, 13080 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   13066:	490a      	ldr	r1, [pc, #40]	; (13090 <isr+0x44>)
   13068:	4402      	add	r2, r0
   1306a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   1306e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   13070:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   13072:	3301      	adds	r3, #1
   13074:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   13076:	429d      	cmp	r5, r3
   13078:	bf08      	it	eq
   1307a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   1307c:	42a3      	cmp	r3, r4
   1307e:	d005      	beq.n	1308c <isr+0x40>
		return 0;
	}

	return -EBUSY;
   13080:	f06f 000f 	mvn.w	r0, #15
   13084:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   13086:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1308a:	bd30      	pop	{r4, r5, pc}
		return 0;
   1308c:	2000      	movs	r0, #0
}
   1308e:	bd30      	pop	{r4, r5, pc}
   13090:	4000d000 	.word	0x4000d000

00013094 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   13094:	07db      	lsls	r3, r3, #31
{
   13096:	b570      	push	{r4, r5, r6, lr}
   13098:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   1309a:	d507      	bpl.n	130ac <entropy_nrf5_get_entropy_isr+0x18>
   1309c:	4613      	mov	r3, r2
   1309e:	4a0d      	ldr	r2, [pc, #52]	; (130d4 <entropy_nrf5_get_entropy_isr+0x40>)
   130a0:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   130a2:	2500      	movs	r5, #0
	while (len) {
   130a4:	b94b      	cbnz	r3, 130ba <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   130a6:	6050      	str	r0, [r2, #4]

	return cnt;
   130a8:	4620      	mov	r0, r4
}
   130aa:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   130ac:	6880      	ldr	r0, [r0, #8]
   130ae:	460a      	mov	r2, r1
   130b0:	3044      	adds	r0, #68	; 0x44
   130b2:	b2e1      	uxtb	r1, r4
   130b4:	f7ff ff68 	bl	12f88 <get>
   130b8:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   130ba:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   130be:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   130c0:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   130c4:	2e00      	cmp	r6, #0
   130c6:	d0fb      	beq.n	130c0 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   130c8:	3b01      	subs	r3, #1
   130ca:	b29b      	uxth	r3, r3
   130cc:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   130d0:	54ce      	strb	r6, [r1, r3]
   130d2:	e7e7      	b.n	130a4 <entropy_nrf5_get_entropy_isr+0x10>
   130d4:	4000d000 	.word	0x4000d000

000130d8 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   130d8:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   130da:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   130dc:	2201      	movs	r2, #1
   130de:	4611      	mov	r1, r2
   130e0:	4620      	mov	r0, r4
   130e2:	f000 fddf 	bl	13ca4 <_impl_k_sem_init>
   130e6:	f104 001c 	add.w	r0, r4, #28
   130ea:	2201      	movs	r2, #1
   130ec:	2100      	movs	r1, #0
   130ee:	f000 fdd9 	bl	13ca4 <_impl_k_sem_init>
	rng->threshold = threshold;
   130f2:	2304      	movs	r3, #4
   130f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   130f8:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   130fa:	2500      	movs	r5, #0
	rng->threshold = threshold;
   130fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	rng->count = len;
   13100:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13102:	4b11      	ldr	r3, [pc, #68]	; (13148 <entropy_nrf5_init+0x70>)
	rng->count = len;
   13104:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
   13108:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   1310a:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
   1310e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
	rng->count = len;
   13112:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
	rng->first = rng->last = 0;
   13116:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
   1311a:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1311e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13122:	f042 0201 	orr.w	r2, r2, #1
   13126:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1312a:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   1312c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13130:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13132:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   13136:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13138:	462a      	mov	r2, r5
   1313a:	f7ee fbc5 	bl	18c8 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   1313e:	4630      	mov	r0, r6
   13140:	f7ee fb90 	bl	1864 <_arch_irq_enable>

	return 0;
}
   13144:	4628      	mov	r0, r5
   13146:	bd70      	pop	{r4, r5, r6, pc}
   13148:	4000d000 	.word	0x4000d000

0001314c <isr_rand>:
{
   1314c:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   1314e:	4b12      	ldr	r3, [pc, #72]	; (13198 <isr_rand+0x4c>)
   13150:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13154:	b1fb      	cbz	r3, 13196 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13156:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   13158:	2101      	movs	r1, #1
   1315a:	f105 0044 	add.w	r0, r5, #68	; 0x44
   1315e:	f7ff ff75 	bl	1304c <isr>
		if (ret != -EBUSY) {
   13162:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   13166:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   13168:	d00d      	beq.n	13186 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   1316a:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   1316e:	bf14      	ite	ne
   13170:	2100      	movne	r1, #0
   13172:	2101      	moveq	r1, #1
   13174:	f105 0038 	add.w	r0, r5, #56	; 0x38
   13178:	f7ff ff68 	bl	1304c <isr>
   1317c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1317e:	f105 001c 	add.w	r0, r5, #28
   13182:	f000 fda7 	bl	13cd4 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   13186:	4b04      	ldr	r3, [pc, #16]	; (13198 <isr_rand+0x4c>)
   13188:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   1318a:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   1318c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   13190:	bf1c      	itt	ne
   13192:	2201      	movne	r2, #1
   13194:	605a      	strne	r2, [r3, #4]
   13196:	bd38      	pop	{r3, r4, r5, pc}
   13198:	4000d000 	.word	0x4000d000

0001319c <entropy_nrf5_get_entropy>:
{
   1319c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   131a0:	6885      	ldr	r5, [r0, #8]
{
   131a2:	460f      	mov	r7, r1
   131a4:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   131a6:	f105 081c 	add.w	r8, r5, #28
	while (len) {
   131aa:	b914      	cbnz	r4, 131b2 <entropy_nrf5_get_entropy+0x16>
}
   131ac:	4620      	mov	r0, r4
   131ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   131b2:	2cff      	cmp	r4, #255	; 0xff
   131b4:	4623      	mov	r3, r4
   131b6:	bf28      	it	cs
   131b8:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   131ba:	1ae4      	subs	r4, r4, r3
   131bc:	b2de      	uxtb	r6, r3
   131be:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   131c0:	f105 0938 	add.w	r9, r5, #56	; 0x38
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   131c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   131c8:	4628      	mov	r0, r5
   131ca:	f000 fdab 	bl	13d24 <_impl_k_sem_take>
   131ce:	4631      	mov	r1, r6
   131d0:	463a      	mov	r2, r7
   131d2:	4648      	mov	r0, r9
   131d4:	f7ff fed8 	bl	12f88 <get>
   131d8:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   131da:	4628      	mov	r0, r5
   131dc:	f000 fd7a 	bl	13cd4 <_impl_k_sem_give>
			if (len8) {
   131e0:	2e00      	cmp	r6, #0
   131e2:	d0e2      	beq.n	131aa <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   131e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   131e8:	4640      	mov	r0, r8
   131ea:	f000 fd9b 	bl	13d24 <_impl_k_sem_take>
   131ee:	e7e9      	b.n	131c4 <entropy_nrf5_get_entropy+0x28>

000131f0 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   131f0:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   131f2:	4802      	ldr	r0, [pc, #8]	; (131fc <entropy_nrf_get_entropy_isr+0xc>)
   131f4:	460a      	mov	r2, r1
   131f6:	4619      	mov	r1, r3
   131f8:	f7ff bec6 	b.w	12f88 <get>
   131fc:	2000176c 	.word	0x2000176c

00013200 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   13200:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   13202:	4b08      	ldr	r3, [pc, #32]	; (13224 <_sys_device_do_config_level+0x24>)
   13204:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13208:	3001      	adds	r0, #1
   1320a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1320e:	4620      	mov	r0, r4
   13210:	42a8      	cmp	r0, r5
   13212:	f104 040c 	add.w	r4, r4, #12
   13216:	d300      	bcc.n	1321a <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   13218:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   1321a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1321e:	685b      	ldr	r3, [r3, #4]
   13220:	4798      	blx	r3
   13222:	e7f4      	b.n	1320e <_sys_device_do_config_level+0xe>
   13224:	000180e0 	.word	0x000180e0

00013228 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   13228:	4b10      	ldr	r3, [pc, #64]	; (1326c <device_get_binding+0x44>)
{
   1322a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1322c:	4c10      	ldr	r4, [pc, #64]	; (13270 <device_get_binding+0x48>)
{
   1322e:	4605      	mov	r5, r0
   13230:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   13232:	429c      	cmp	r4, r3
   13234:	d104      	bne.n	13240 <device_get_binding+0x18>
   13236:	4c0e      	ldr	r4, [pc, #56]	; (13270 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   13238:	42b4      	cmp	r4, r6
   1323a:	d109      	bne.n	13250 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   1323c:	2400      	movs	r4, #0
   1323e:	e012      	b.n	13266 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   13240:	6862      	ldr	r2, [r4, #4]
   13242:	b11a      	cbz	r2, 1324c <device_get_binding+0x24>
   13244:	6822      	ldr	r2, [r4, #0]
   13246:	6812      	ldr	r2, [r2, #0]
   13248:	42aa      	cmp	r2, r5
   1324a:	d00c      	beq.n	13266 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1324c:	340c      	adds	r4, #12
   1324e:	e7f0      	b.n	13232 <device_get_binding+0xa>
		if (!info->driver_api) {
   13250:	6863      	ldr	r3, [r4, #4]
   13252:	b90b      	cbnz	r3, 13258 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13254:	340c      	adds	r4, #12
   13256:	e7ef      	b.n	13238 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   13258:	6823      	ldr	r3, [r4, #0]
   1325a:	4628      	mov	r0, r5
   1325c:	6819      	ldr	r1, [r3, #0]
   1325e:	f7ee fcbd 	bl	1bdc <strcmp>
   13262:	2800      	cmp	r0, #0
   13264:	d1f6      	bne.n	13254 <device_get_binding+0x2c>
}
   13266:	4620      	mov	r0, r4
   13268:	bd70      	pop	{r4, r5, r6, pc}
   1326a:	bf00      	nop
   1326c:	20003f78 	.word	0x20003f78
   13270:	20003ec4 	.word	0x20003ec4

00013274 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   13274:	1c43      	adds	r3, r0, #1
   13276:	d003      	beq.n	13280 <_sys_power_save_idle_exit+0xc>
   13278:	4b03      	ldr	r3, [pc, #12]	; (13288 <_sys_power_save_idle_exit+0x14>)
   1327a:	681b      	ldr	r3, [r3, #0]
   1327c:	4298      	cmp	r0, r3
   1327e:	db01      	blt.n	13284 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   13280:	f7ee b8b4 	b.w	13ec <_timer_idle_exit>
   13284:	4770      	bx	lr
   13286:	bf00      	nop
   13288:	20003eb8 	.word	0x20003eb8

0001328c <idle>:
	return list->head == list;
   1328c:	4d0f      	ldr	r5, [pc, #60]	; (132cc <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1328e:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   13290:	4f0f      	ldr	r7, [pc, #60]	; (132d0 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13292:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   13296:	f04f 0220 	mov.w	r2, #32
   1329a:	f3ef 8311 	mrs	r3, BASEPRI
   1329e:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   132a2:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   132a4:	42b3      	cmp	r3, r6
   132a6:	d00a      	beq.n	132be <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   132a8:	b14b      	cbz	r3, 132be <idle+0x32>
   132aa:	691c      	ldr	r4, [r3, #16]
   132ac:	1c63      	adds	r3, r4, #1
   132ae:	d008      	beq.n	132c2 <idle+0x36>
   132b0:	683b      	ldr	r3, [r7, #0]
   132b2:	42a3      	cmp	r3, r4
   132b4:	dd05      	ble.n	132c2 <idle+0x36>
	_kernel.idle = ticks;
   132b6:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   132b8:	f7ee fb5e 	bl	1978 <k_cpu_idle>
   132bc:	e7eb      	b.n	13296 <idle+0xa>
   132be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   132c2:	4620      	mov	r0, r4
   132c4:	f7ee f874 	bl	13b0 <_timer_idle_enter>
   132c8:	e7f5      	b.n	132b6 <idle+0x2a>
   132ca:	bf00      	nop
   132cc:	20001988 	.word	0x20001988
   132d0:	20003eb8 	.word	0x20003eb8

000132d4 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   132d4:	4802      	ldr	r0, [pc, #8]	; (132e0 <_bss_zero+0xc>)
   132d6:	4a03      	ldr	r2, [pc, #12]	; (132e4 <_bss_zero+0x10>)
   132d8:	2100      	movs	r1, #0
   132da:	1a12      	subs	r2, r2, r0
   132dc:	f7ee bccc 	b.w	1c78 <memset>
   132e0:	20000000 	.word	0x20000000
   132e4:	20001a4c 	.word	0x20001a4c

000132e8 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   132e8:	4802      	ldr	r0, [pc, #8]	; (132f4 <_data_copy+0xc>)
   132ea:	4a03      	ldr	r2, [pc, #12]	; (132f8 <_data_copy+0x10>)
   132ec:	4903      	ldr	r1, [pc, #12]	; (132fc <_data_copy+0x14>)
   132ee:	1a12      	subs	r2, r2, r0
   132f0:	f7ee bc96 	b.w	1c20 <memcpy>
   132f4:	20003a68 	.word	0x20003a68
   132f8:	20004038 	.word	0x20004038
   132fc:	00018130 	.word	0x00018130

00013300 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   13300:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13302:	2002      	movs	r0, #2
   13304:	f7ff ff7c 	bl	13200 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   13308:	4807      	ldr	r0, [pc, #28]	; (13328 <bg_thread_main+0x28>)
   1330a:	f7ed fe3f 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1330e:	2003      	movs	r0, #3
   13310:	f7ff ff76 	bl	13200 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   13314:	f000 ff2e 	bl	14174 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   13318:	f7ed f9d2 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   1331c:	4a03      	ldr	r2, [pc, #12]	; (1332c <bg_thread_main+0x2c>)
   1331e:	7a13      	ldrb	r3, [r2, #8]
   13320:	f023 0301 	bic.w	r3, r3, #1
   13324:	7213      	strb	r3, [r2, #8]
   13326:	bd08      	pop	{r3, pc}
   13328:	000180fc 	.word	0x000180fc
   1332c:	200017f0 	.word	0x200017f0

00013330 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   13330:	b580      	push	{r7, lr}
   13332:	b086      	sub	sp, #24
   13334:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   13336:	f7ee f8e1 	bl	14fc <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1333a:	4b30      	ldr	r3, [pc, #192]	; (133fc <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1333c:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13340:	4b2f      	ldr	r3, [pc, #188]	; (13400 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   13342:	4d30      	ldr	r5, [pc, #192]	; (13404 <_Cstart+0xd4>)
   13344:	4e30      	ldr	r6, [pc, #192]	; (13408 <_Cstart+0xd8>)
   13346:	2400      	movs	r4, #0
   13348:	22e0      	movs	r2, #224	; 0xe0
   1334a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   1334e:	77dc      	strb	r4, [r3, #31]
   13350:	761c      	strb	r4, [r3, #24]
   13352:	765c      	strb	r4, [r3, #25]
   13354:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13358:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   1335c:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   1335e:	f7ee fa79 	bl	1854 <_FaultInit>
	_CpuIdleInit();
   13362:	f7ee fb03 	bl	196c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13366:	4620      	mov	r0, r4
   13368:	f7ff ff4a 	bl	13200 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1336c:	2001      	movs	r0, #1
   1336e:	f7ff ff47 	bl	13200 <_sys_device_do_config_level>
	_sched_init();
   13372:	f000 fc43 	bl	13bfc <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   13376:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   13378:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   1337a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1337e:	9304      	str	r3, [sp, #16]
   13380:	9403      	str	r4, [sp, #12]
   13382:	9402      	str	r4, [sp, #8]
   13384:	9401      	str	r4, [sp, #4]
   13386:	9400      	str	r4, [sp, #0]
   13388:	4b20      	ldr	r3, [pc, #128]	; (1340c <_Cstart+0xdc>)
   1338a:	4921      	ldr	r1, [pc, #132]	; (13410 <_Cstart+0xe0>)
   1338c:	4628      	mov	r0, r5
   1338e:	f000 fe99 	bl	140c4 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13392:	7a6b      	ldrb	r3, [r5, #9]
   13394:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13398:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1339c:	726a      	strb	r2, [r5, #9]
   1339e:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   133a0:	d102      	bne.n	133a8 <_Cstart+0x78>
   133a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   133a4:	3301      	adds	r3, #1
   133a6:	d024      	beq.n	133f2 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   133a8:	2301      	movs	r3, #1
   133aa:	4e1a      	ldr	r6, [pc, #104]	; (13414 <_Cstart+0xe4>)
   133ac:	9304      	str	r3, [sp, #16]
   133ae:	230f      	movs	r3, #15
   133b0:	9303      	str	r3, [sp, #12]
   133b2:	2300      	movs	r3, #0
   133b4:	9302      	str	r3, [sp, #8]
   133b6:	9301      	str	r3, [sp, #4]
   133b8:	9300      	str	r3, [sp, #0]
   133ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
   133be:	4b16      	ldr	r3, [pc, #88]	; (13418 <_Cstart+0xe8>)
   133c0:	4916      	ldr	r1, [pc, #88]	; (1341c <_Cstart+0xec>)
   133c2:	4630      	mov	r0, r6
   133c4:	f000 fe7e 	bl	140c4 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   133c8:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   133ca:	60e6      	str	r6, [r4, #12]
   133cc:	f023 0304 	bic.w	r3, r3, #4
   133d0:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   133d2:	4b13      	ldr	r3, [pc, #76]	; (13420 <_Cstart+0xf0>)
   133d4:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   133d6:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   133d8:	4b12      	ldr	r3, [pc, #72]	; (13424 <_Cstart+0xf4>)

	_current = main_thread;
   133da:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   133dc:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   133e0:	4c11      	ldr	r4, [pc, #68]	; (13428 <_Cstart+0xf8>)
   133e2:	4a0a      	ldr	r2, [pc, #40]	; (1340c <_Cstart+0xdc>)
   133e4:	f383 8809 	msr	PSP, r3
   133e8:	2100      	movs	r1, #0
   133ea:	f381 8811 	msr	BASEPRI, r1
   133ee:	4610      	mov	r0, r2
   133f0:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   133f2:	4628      	mov	r0, r5
   133f4:	f000 fb02 	bl	139fc <_add_thread_to_ready_q>
   133f8:	e7d6      	b.n	133a8 <_Cstart+0x78>
   133fa:	bf00      	nop
   133fc:	20003668 	.word	0x20003668
   13400:	e000ed00 	.word	0xe000ed00
   13404:	200017f0 	.word	0x200017f0
   13408:	20001988 	.word	0x20001988
   1340c:	00013301 	.word	0x00013301
   13410:	20002928 	.word	0x20002928
   13414:	20001780 	.word	0x20001780
   13418:	0001328d 	.word	0x0001328d
   1341c:	20002d28 	.word	0x20002d28
   13420:	2000199c 	.word	0x2000199c
   13424:	20002d28 	.word	0x20002d28
   13428:	00000899 	.word	0x00000899

0001342c <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1342c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1342e:	4c07      	ldr	r4, [pc, #28]	; (1344c <init_static_pools+0x20>)
   13430:	4d07      	ldr	r5, [pc, #28]	; (13450 <init_static_pools+0x24>)
   13432:	42ac      	cmp	r4, r5
   13434:	d301      	bcc.n	1343a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   13436:	2000      	movs	r0, #0
   13438:	bd38      	pop	{r3, r4, r5, pc}
   1343a:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   1343e:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13440:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   13442:	4620      	mov	r0, r4
   13444:	f7ed fa63 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   13448:	341c      	adds	r4, #28
   1344a:	e7f2      	b.n	13432 <init_static_pools+0x6>
   1344c:	20003f78 	.word	0x20003f78
   13450:	20003f78 	.word	0x20003f78

00013454 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   13454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   13458:	1e1d      	subs	r5, r3, #0
{
   1345a:	b085      	sub	sp, #20
   1345c:	4607      	mov	r7, r0
   1345e:	460c      	mov	r4, r1
   13460:	4692      	mov	sl, r2
	if (timeout > 0) {
   13462:	dd4c      	ble.n	134fe <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   13464:	f000 fc84 	bl	13d70 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13468:	f105 0309 	add.w	r3, r5, #9
   1346c:	220a      	movs	r2, #10
   1346e:	fbb3 f3f2 	udiv	r3, r3, r2
   13472:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   13476:	4b23      	ldr	r3, [pc, #140]	; (13504 <k_mem_pool_alloc+0xb0>)
   13478:	4e23      	ldr	r6, [pc, #140]	; (13508 <k_mem_pool_alloc+0xb4>)
   1347a:	1afb      	subs	r3, r7, r3
   1347c:	109b      	asrs	r3, r3, #2
   1347e:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   13480:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   13482:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   13486:	9400      	str	r4, [sp, #0]
   13488:	ab03      	add	r3, sp, #12
   1348a:	aa02      	add	r2, sp, #8
   1348c:	4651      	mov	r1, sl
   1348e:	4638      	mov	r0, r7
   13490:	f7ed fa88 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   13494:	f110 0f0b 	cmn.w	r0, #11
   13498:	d10b      	bne.n	134b2 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1349a:	9400      	str	r4, [sp, #0]
   1349c:	ab03      	add	r3, sp, #12
   1349e:	aa02      	add	r2, sp, #8
   134a0:	4651      	mov	r1, sl
   134a2:	4638      	mov	r0, r7
   134a4:	f7ed fa7e 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   134a8:	f110 0f0b 	cmn.w	r0, #11
   134ac:	bf08      	it	eq
   134ae:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   134b2:	7963      	ldrb	r3, [r4, #5]
   134b4:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   134b6:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   134b8:	f362 0303 	bfi	r3, r2, #0, #4
   134bc:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   134be:	6863      	ldr	r3, [r4, #4]
   134c0:	9a03      	ldr	r2, [sp, #12]
   134c2:	f362 331f 	bfi	r3, r2, #12, #20
   134c6:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   134c8:	b1b0      	cbz	r0, 134f8 <k_mem_pool_alloc+0xa4>
   134ca:	b1ad      	cbz	r5, 134f8 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   134cc:	f110 0f0c 	cmn.w	r0, #12
   134d0:	d112      	bne.n	134f8 <k_mem_pool_alloc+0xa4>
   134d2:	f04f 0320 	mov.w	r3, #32
   134d6:	f3ef 8011 	mrs	r0, BASEPRI
   134da:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   134de:	462a      	mov	r2, r5
   134e0:	4659      	mov	r1, fp
   134e2:	f000 fb39 	bl	13b58 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   134e6:	1c6b      	adds	r3, r5, #1
   134e8:	d0cd      	beq.n	13486 <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   134ea:	f000 fc41 	bl	13d70 <_tick_get>

			if (timeout < 0) {
   134ee:	ebb8 0500 	subs.w	r5, r8, r0
   134f2:	d5c8      	bpl.n	13486 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   134f4:	f06f 000a 	mvn.w	r0, #10
}
   134f8:	b005      	add	sp, #20
   134fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   134fe:	f04f 0800 	mov.w	r8, #0
   13502:	e7b8      	b.n	13476 <k_mem_pool_alloc+0x22>
   13504:	20003f78 	.word	0x20003f78
   13508:	b6db6db7 	.word	0xb6db6db7

0001350c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1350c:	b570      	push	{r4, r5, r6, lr}
   1350e:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   13510:	6802      	ldr	r2, [r0, #0]
   13512:	7841      	ldrb	r1, [r0, #1]
   13514:	4e13      	ldr	r6, [pc, #76]	; (13564 <k_mem_pool_free_id+0x58>)
   13516:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1351a:	00a4      	lsls	r4, r4, #2
   1351c:	0b12      	lsrs	r2, r2, #12
   1351e:	f001 010f 	and.w	r1, r1, #15
   13522:	1930      	adds	r0, r6, r4
   13524:	f7ed faf0 	bl	b08 <_sys_mem_pool_block_free>
   13528:	f04f 0320 	mov.w	r3, #32
   1352c:	f3ef 8511 	mrs	r5, BASEPRI
   13530:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   13534:	f104 0014 	add.w	r0, r4, #20
   13538:	4430      	add	r0, r6
   1353a:	f000 fb4f 	bl	13bdc <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   1353e:	b140      	cbz	r0, 13552 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13540:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   13544:	2b0d      	cmp	r3, #13
   13546:	d804      	bhi.n	13552 <k_mem_pool_free_id+0x46>
   13548:	b133      	cbz	r3, 13558 <k_mem_pool_free_id+0x4c>
   1354a:	4b07      	ldr	r3, [pc, #28]	; (13568 <k_mem_pool_free_id+0x5c>)
   1354c:	685b      	ldr	r3, [r3, #4]
   1354e:	051b      	lsls	r3, r3, #20
   13550:	d402      	bmi.n	13558 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13552:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   13556:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   13558:	4628      	mov	r0, r5
}
   1355a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   1355e:	f000 b9fb 	b.w	13958 <_reschedule>
   13562:	bf00      	nop
   13564:	20003f78 	.word	0x20003f78
   13568:	e000ed00 	.word	0xe000ed00

0001356c <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   1356c:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   1356e:	1d0a      	adds	r2, r1, #4
   13570:	d204      	bcs.n	1357c <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   13572:	2300      	movs	r3, #0
   13574:	4669      	mov	r1, sp
   13576:	f7ff ff6d 	bl	13454 <k_mem_pool_alloc>
   1357a:	b118      	cbz	r0, 13584 <k_mem_pool_malloc+0x18>
		return NULL;
   1357c:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   1357e:	b003      	add	sp, #12
   13580:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   13584:	2204      	movs	r2, #4
   13586:	eb0d 0102 	add.w	r1, sp, r2
   1358a:	9800      	ldr	r0, [sp, #0]
   1358c:	f7ee fb48 	bl	1c20 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   13590:	9800      	ldr	r0, [sp, #0]
   13592:	3004      	adds	r0, #4
   13594:	e7f3      	b.n	1357e <k_mem_pool_malloc+0x12>

00013596 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   13596:	b110      	cbz	r0, 1359e <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   13598:	3804      	subs	r0, #4
   1359a:	f7ff bfb7 	b.w	1350c <k_mem_pool_free_id>
   1359e:	4770      	bx	lr

000135a0 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   135a0:	4b03      	ldr	r3, [pc, #12]	; (135b0 <z_thread_malloc+0x10>)
   135a2:	689b      	ldr	r3, [r3, #8]
{
   135a4:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   135a6:	6e58      	ldr	r0, [r3, #100]	; 0x64
   135a8:	b108      	cbz	r0, 135ae <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   135aa:	f7ff bfdf 	b.w	1356c <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   135ae:	4770      	bx	lr
   135b0:	20001988 	.word	0x20001988

000135b4 <init_mutex_module>:

/*
 * Complete initialization of statically defined mutexes.
 */
static int init_mutex_module(struct device *dev)
{
   135b4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mutex *mutex;

	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   135b6:	4b0a      	ldr	r3, [pc, #40]	; (135e0 <init_mutex_module+0x2c>)
   135b8:	490a      	ldr	r1, [pc, #40]	; (135e4 <init_mutex_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_mutex, mutex);
   135ba:	4a0b      	ldr	r2, [pc, #44]	; (135e8 <init_mutex_module+0x34>)
	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   135bc:	428b      	cmp	r3, r1
   135be:	d301      	bcc.n	135c4 <init_mutex_module+0x10>
	}
	return 0;
}
   135c0:	2000      	movs	r0, #0
   135c2:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   135c4:	f04f 0420 	mov.w	r4, #32
   135c8:	f3ef 8011 	mrs	r0, BASEPRI
   135cc:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_mutex, mutex);
   135d0:	6814      	ldr	r4, [r2, #0]
   135d2:	615c      	str	r4, [r3, #20]
   135d4:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   135d6:	f380 8811 	msr	BASEPRI, r0
	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   135da:	3318      	adds	r3, #24
   135dc:	e7ee      	b.n	135bc <init_mutex_module+0x8>
   135de:	bf00      	nop
   135e0:	20003f94 	.word	0x20003f94
   135e4:	20003f94 	.word	0x20003f94
   135e8:	20001980 	.word	0x20001980

000135ec <init_queue_module>:

/*
 * Complete initialization of statically defined queues.
 */
static int init_queue_module(struct device *dev)
{
   135ec:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_queue *queue;

	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   135ee:	4b0a      	ldr	r3, [pc, #40]	; (13618 <init_queue_module+0x2c>)
   135f0:	490a      	ldr	r1, [pc, #40]	; (1361c <init_queue_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_queue, queue);
   135f2:	4a0b      	ldr	r2, [pc, #44]	; (13620 <init_queue_module+0x34>)
	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   135f4:	428b      	cmp	r3, r1
   135f6:	d301      	bcc.n	135fc <init_queue_module+0x10>
	}
	return 0;
}
   135f8:	2000      	movs	r0, #0
   135fa:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   135fc:	f04f 0420 	mov.w	r4, #32
   13600:	f3ef 8011 	mrs	r0, BASEPRI
   13604:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_queue, queue);
   13608:	6814      	ldr	r4, [r2, #0]
   1360a:	611c      	str	r4, [r3, #16]
   1360c:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1360e:	f380 8811 	msr	BASEPRI, r0
	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   13612:	3314      	adds	r3, #20
   13614:	e7ee      	b.n	135f4 <init_queue_module+0x8>
   13616:	bf00      	nop
   13618:	20003f94 	.word	0x20003f94
   1361c:	20003fa8 	.word	0x20003fa8
   13620:	20001984 	.word	0x20001984

00013624 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   13624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13626:	4605      	mov	r5, r0
   13628:	460f      	mov	r7, r1
   1362a:	4614      	mov	r4, r2
	__asm__ volatile(
   1362c:	f04f 0220 	mov.w	r2, #32
   13630:	f3ef 8611 	mrs	r6, BASEPRI
   13634:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   13638:	b1a3      	cbz	r3, 13664 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1363a:	2008      	movs	r0, #8
   1363c:	f7ff ffb0 	bl	135a0 <z_thread_malloc>
		if (!anode) {
   13640:	2800      	cmp	r0, #0
   13642:	d034      	beq.n	136ae <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   13644:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   13646:	6044      	str	r4, [r0, #4]
   13648:	6003      	str	r3, [r0, #0]
   1364a:	4604      	mov	r4, r0
   1364c:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   1364e:	b95f      	cbnz	r7, 13668 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   13650:	682a      	ldr	r2, [r5, #0]
   13652:	f003 0303 	and.w	r3, r3, #3
   13656:	4313      	orrs	r3, r2
   13658:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1365a:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   1365c:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1365e:	b973      	cbnz	r3, 1367e <queue_insert+0x5a>
	list->tail = node;
   13660:	606c      	str	r4, [r5, #4]
   13662:	e00c      	b.n	1367e <queue_insert+0x5a>
	node->next_and_flags = flags;
   13664:	6023      	str	r3, [r4, #0]
   13666:	e7f1      	b.n	1364c <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13668:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   1366a:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1366e:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   13672:	d114      	bne.n	1369e <queue_insert+0x7a>
   13674:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13676:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   13678:	b95a      	cbnz	r2, 13692 <queue_insert+0x6e>
	list->tail = node;
   1367a:	606c      	str	r4, [r5, #4]
	list->head = node;
   1367c:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   1367e:	2104      	movs	r1, #4
   13680:	f105 0008 	add.w	r0, r5, #8
   13684:	f001 f800 	bl	14688 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   13688:	4630      	mov	r0, r6
   1368a:	f000 f965 	bl	13958 <_reschedule>
	return 0;
   1368e:	2000      	movs	r0, #0
   13690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13692:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13694:	f003 0303 	and.w	r3, r3, #3
   13698:	4323      	orrs	r3, r4
   1369a:	6013      	str	r3, [r2, #0]
   1369c:	e7e0      	b.n	13660 <queue_insert+0x3c>
   1369e:	4313      	orrs	r3, r2
   136a0:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   136a2:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   136a4:	f002 0203 	and.w	r2, r2, #3
   136a8:	4314      	orrs	r4, r2
   136aa:	603c      	str	r4, [r7, #0]
   136ac:	e7e7      	b.n	1367e <queue_insert+0x5a>
			return -ENOMEM;
   136ae:	f06f 000b 	mvn.w	r0, #11
}
   136b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000136b4 <z_queue_node_peek>:
{
   136b4:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   136b6:	4604      	mov	r4, r0
   136b8:	b130      	cbz	r0, 136c8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   136ba:	6802      	ldr	r2, [r0, #0]
   136bc:	0793      	lsls	r3, r2, #30
   136be:	d003      	beq.n	136c8 <z_queue_node_peek+0x14>
		ret = anode->data;
   136c0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   136c2:	b109      	cbz	r1, 136c8 <z_queue_node_peek+0x14>
			k_free(anode);
   136c4:	f7ff ff67 	bl	13596 <k_free>
}
   136c8:	4620      	mov	r0, r4
   136ca:	bd10      	pop	{r4, pc}

000136cc <_impl_k_queue_init>:
	list->head = NULL;
   136cc:	2300      	movs	r3, #0
   136ce:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   136d0:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   136d2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   136d6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   136d8:	60c3      	str	r3, [r0, #12]
   136da:	f04f 0320 	mov.w	r3, #32
   136de:	f3ef 8211 	mrs	r2, BASEPRI
   136e2:	f383 8811 	msr	BASEPRI, r3
	SYS_TRACING_OBJ_INIT(k_queue, queue);
   136e6:	4b03      	ldr	r3, [pc, #12]	; (136f4 <_impl_k_queue_init+0x28>)
   136e8:	6819      	ldr	r1, [r3, #0]
   136ea:	6101      	str	r1, [r0, #16]
   136ec:	6018      	str	r0, [r3, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   136ee:	f382 8811 	msr	BASEPRI, r2
   136f2:	4770      	bx	lr
   136f4:	20001984 	.word	0x20001984

000136f8 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   136f8:	460a      	mov	r2, r1
   136fa:	2300      	movs	r3, #0
   136fc:	6841      	ldr	r1, [r0, #4]
   136fe:	f7ff bf91 	b.w	13624 <queue_insert>

00013702 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   13702:	2300      	movs	r3, #0
   13704:	460a      	mov	r2, r1
   13706:	4619      	mov	r1, r3
   13708:	f7ff bf8c 	b.w	13624 <queue_insert>

0001370c <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1370c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1370e:	f04f 0320 	mov.w	r3, #32
   13712:	f3ef 8511 	mrs	r5, BASEPRI
   13716:	f383 8811 	msr	BASEPRI, r3
   1371a:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   1371c:	b953      	cbnz	r3, 13734 <k_queue_append_list+0x28>
	list->head = node;
   1371e:	6001      	str	r1, [r0, #0]
	list->tail = node;
   13720:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   13722:	2104      	movs	r1, #4
   13724:	3008      	adds	r0, #8
   13726:	f000 ffaf 	bl	14688 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   1372a:	4628      	mov	r0, r5
}
   1372c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   13730:	f000 b912 	b.w	13958 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13734:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13736:	f004 0403 	and.w	r4, r4, #3
   1373a:	4321      	orrs	r1, r4
   1373c:	6019      	str	r1, [r3, #0]
   1373e:	e7ef      	b.n	13720 <k_queue_append_list+0x14>

00013740 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   13740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13744:	4604      	mov	r4, r0
   13746:	b086      	sub	sp, #24
   13748:	460d      	mov	r5, r1
   1374a:	f04f 0320 	mov.w	r3, #32
   1374e:	f3ef 8711 	mrs	r7, BASEPRI
   13752:	f383 8811 	msr	BASEPRI, r3
   13756:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   13758:	b182      	cbz	r2, 1377c <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1375a:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1375c:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1375e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13762:	428a      	cmp	r2, r1
	list->head = node;
   13764:	6003      	str	r3, [r0, #0]
	list->tail = node;
   13766:	bf08      	it	eq
   13768:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1376a:	2101      	movs	r1, #1
   1376c:	4610      	mov	r0, r2
   1376e:	f7ff ffa1 	bl	136b4 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13772:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   13776:	b006      	add	sp, #24
   13778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1377c:	b919      	cbnz	r1, 13786 <_impl_k_queue_get+0x46>
   1377e:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   13782:	2000      	movs	r0, #0
   13784:	e7f7      	b.n	13776 <_impl_k_queue_get+0x36>
   13786:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1378a:	2104      	movs	r1, #4
   1378c:	4603      	mov	r3, r0
   1378e:	eb0d 0001 	add.w	r0, sp, r1
   13792:	f000 fee2 	bl	1455a <k_poll_event_init>
	if (timeout != K_FOREVER) {
   13796:	1c6a      	adds	r2, r5, #1
   13798:	d002      	beq.n	137a0 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1379a:	f000 fadf 	bl	13d5c <_impl_k_uptime_get_32>
   1379e:	4606      	mov	r6, r0
{
   137a0:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   137a2:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   137a6:	1bea      	subs	r2, r5, r7
   137a8:	f36f 1307 	bfc	r3, #4, #4
   137ac:	2101      	movs	r1, #1
   137ae:	a801      	add	r0, sp, #4
   137b0:	f88d 3011 	strb.w	r3, [sp, #17]
   137b4:	f000 fee4 	bl	14580 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   137b8:	b108      	cbz	r0, 137be <_impl_k_queue_get+0x7e>
   137ba:	300b      	adds	r0, #11
   137bc:	d1e1      	bne.n	13782 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   137be:	f04f 0320 	mov.w	r3, #32
   137c2:	f3ef 8811 	mrs	r8, BASEPRI
   137c6:	f383 8811 	msr	BASEPRI, r3
   137ca:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   137cc:	b138      	cbz	r0, 137de <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   137ce:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   137d0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   137d2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   137d6:	4290      	cmp	r0, r2
	list->head = node;
   137d8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   137da:	bf08      	it	eq
   137dc:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   137de:	2101      	movs	r1, #1
   137e0:	f7ff ff68 	bl	136b4 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   137e4:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   137e8:	2800      	cmp	r0, #0
   137ea:	d1c4      	bne.n	13776 <_impl_k_queue_get+0x36>
   137ec:	1c6b      	adds	r3, r5, #1
   137ee:	d0d8      	beq.n	137a2 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   137f0:	f000 fab4 	bl	13d5c <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   137f4:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   137f6:	42bd      	cmp	r5, r7
   137f8:	dad3      	bge.n	137a2 <_impl_k_queue_get+0x62>
   137fa:	e7c2      	b.n	13782 <_impl_k_queue_get+0x42>

000137fc <sys_dlist_remove>:
	node->prev->next = node->next;
   137fc:	e890 000c 	ldmia.w	r0, {r2, r3}
   13800:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13802:	6802      	ldr	r2, [r0, #0]
   13804:	6053      	str	r3, [r2, #4]
   13806:	4770      	bx	lr

00013808 <_abort_timeout>:
{
   13808:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1380a:	6900      	ldr	r0, [r0, #16]
{
   1380c:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1380e:	1c43      	adds	r3, r0, #1
   13810:	d00e      	beq.n	13830 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13812:	4b08      	ldr	r3, [pc, #32]	; (13834 <_abort_timeout+0x2c>)
   13814:	699b      	ldr	r3, [r3, #24]
   13816:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   13818:	bf1f      	itttt	ne
   1381a:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1381c:	6913      	ldrne	r3, [r2, #16]
   1381e:	18c0      	addne	r0, r0, r3
   13820:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   13822:	4608      	mov	r0, r1
   13824:	f7ff ffea 	bl	137fc <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   13828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1382c:	610b      	str	r3, [r1, #16]
	return 0;
   1382e:	2000      	movs	r0, #0
}
   13830:	bd08      	pop	{r3, pc}
   13832:	bf00      	nop
   13834:	20001988 	.word	0x20001988

00013838 <_Swap>:
{
   13838:	b510      	push	{r4, lr}
   1383a:	4604      	mov	r4, r0
	_check_stack_sentinel();
   1383c:	f000 fc14 	bl	14068 <_check_stack_sentinel>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13840:	4b03      	ldr	r3, [pc, #12]	; (13850 <_Swap+0x18>)
   13842:	2200      	movs	r2, #0
	return __swap(key);
   13844:	4620      	mov	r0, r4
}
   13846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1384a:	601a      	str	r2, [r3, #0]
	return __swap(key);
   1384c:	f7ed be62 	b.w	1514 <__swap>
   13850:	200019bc 	.word	0x200019bc

00013854 <k_spin_lock.isra.11>:
	__asm__ volatile(
   13854:	f04f 0320 	mov.w	r3, #32
   13858:	f3ef 8011 	mrs	r0, BASEPRI
   1385c:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   13860:	4770      	bx	lr
	...

00013864 <update_cache>:
	return list->head == list;
   13864:	4b0d      	ldr	r3, [pc, #52]	; (1389c <update_cache+0x38>)
   13866:	4619      	mov	r1, r3
   13868:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1386c:	428a      	cmp	r2, r1
   1386e:	d000      	beq.n	13872 <update_cache+0xe>
	return th ? th : _current_cpu->idle_thread;
   13870:	b902      	cbnz	r2, 13874 <update_cache+0x10>
   13872:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   13874:	b970      	cbnz	r0, 13894 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   13876:	6899      	ldr	r1, [r3, #8]
   13878:	b161      	cbz	r1, 13894 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   1387a:	7a48      	ldrb	r0, [r1, #9]
   1387c:	06c0      	lsls	r0, r0, #27
   1387e:	d109      	bne.n	13894 <update_cache+0x30>
   13880:	6a48      	ldr	r0, [r1, #36]	; 0x24
   13882:	3001      	adds	r0, #1
   13884:	d106      	bne.n	13894 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   13886:	8948      	ldrh	r0, [r1, #10]
   13888:	287f      	cmp	r0, #127	; 0x7f
   1388a:	d903      	bls.n	13894 <update_cache+0x30>
	return thread == _idle_thread;
   1388c:	4804      	ldr	r0, [pc, #16]	; (138a0 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   1388e:	6800      	ldr	r0, [r0, #0]
   13890:	4281      	cmp	r1, r0
   13892:	d101      	bne.n	13898 <update_cache+0x34>
		_kernel.ready_q.cache = th;
   13894:	621a      	str	r2, [r3, #32]
   13896:	4770      	bx	lr
		_kernel.ready_q.cache = _current;
   13898:	6219      	str	r1, [r3, #32]
}
   1389a:	4770      	bx	lr
   1389c:	20001988 	.word	0x20001988
   138a0:	000180f8 	.word	0x000180f8

000138a4 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   138a4:	f990 000a 	ldrsb.w	r0, [r0, #10]
   138a8:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   138ac:	4298      	cmp	r0, r3
   138ae:	bfac      	ite	ge
   138b0:	2000      	movge	r0, #0
   138b2:	2001      	movlt	r0, #1
   138b4:	4770      	bx	lr
	...

000138b8 <_remove_thread_from_ready_q>:
{
   138b8:	b510      	push	{r4, lr}
   138ba:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   138bc:	f7ff ffca 	bl	13854 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   138c0:	7a4b      	ldrb	r3, [r1, #9]
   138c2:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   138c4:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   138c6:	d50d      	bpl.n	138e4 <_remove_thread_from_ready_q+0x2c>
	sys_dlist_remove(&thread->base.qnode_dlist);
   138c8:	4608      	mov	r0, r1
   138ca:	f7ff ff97 	bl	137fc <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   138ce:	7a4b      	ldrb	r3, [r1, #9]
   138d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   138d4:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   138d6:	4b05      	ldr	r3, [pc, #20]	; (138ec <_remove_thread_from_ready_q+0x34>)
   138d8:	6898      	ldr	r0, [r3, #8]
   138da:	1a43      	subs	r3, r0, r1
   138dc:	4258      	negs	r0, r3
   138de:	4158      	adcs	r0, r3
   138e0:	f7ff ffc0 	bl	13864 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   138e4:	f384 8811 	msr	BASEPRI, r4
   138e8:	bd10      	pop	{r4, pc}
   138ea:	bf00      	nop
   138ec:	20001988 	.word	0x20001988

000138f0 <_find_first_thread_to_unpend>:
{
   138f0:	b508      	push	{r3, lr}
   138f2:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   138f4:	f7ff ffae 	bl	13854 <k_spin_lock.isra.11>
	return list->head == list;
   138f8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   138fa:	429a      	cmp	r2, r3
   138fc:	bf08      	it	eq
   138fe:	2300      	moveq	r3, #0
   13900:	f380 8811 	msr	BASEPRI, r0
}
   13904:	4618      	mov	r0, r3
   13906:	bd08      	pop	{r3, pc}

00013908 <_unpend_thread_no_timeout>:
{
   13908:	b510      	push	{r4, lr}
   1390a:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   1390c:	f7ff ffa2 	bl	13854 <k_spin_lock.isra.11>
   13910:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13912:	4608      	mov	r0, r1
   13914:	f7ff ff72 	bl	137fc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13918:	7a4b      	ldrb	r3, [r1, #9]
   1391a:	f023 0302 	bic.w	r3, r3, #2
   1391e:	724b      	strb	r3, [r1, #9]
   13920:	f384 8811 	msr	BASEPRI, r4
   13924:	bd10      	pop	{r4, pc}

00013926 <_unpend_first_thread>:
{
   13926:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   13928:	2100      	movs	r1, #0
   1392a:	f7ff ffe1 	bl	138f0 <_find_first_thread_to_unpend>

	if (thread) {
   1392e:	4604      	mov	r4, r0
   13930:	b128      	cbz	r0, 1393e <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   13932:	f7ff ffe9 	bl	13908 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   13936:	f104 0014 	add.w	r0, r4, #20
   1393a:	f7ff ff65 	bl	13808 <_abort_timeout>
}
   1393e:	4620      	mov	r0, r4
   13940:	bd10      	pop	{r4, pc}

00013942 <_unpend_thread>:
{
   13942:	b510      	push	{r4, lr}
   13944:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   13946:	f7ff ffdf 	bl	13908 <_unpend_thread_no_timeout>
   1394a:	f104 0014 	add.w	r0, r4, #20
}
   1394e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13952:	f7ff bf59 	b.w	13808 <_abort_timeout>
	...

00013958 <_reschedule>:
   13958:	f3ef 8305 	mrs	r3, IPSR
   1395c:	2b0d      	cmp	r3, #13
   1395e:	d809      	bhi.n	13974 <_reschedule+0x1c>
   13960:	b11b      	cbz	r3, 1396a <_reschedule+0x12>
   13962:	4b07      	ldr	r3, [pc, #28]	; (13980 <_reschedule+0x28>)
   13964:	685b      	ldr	r3, [r3, #4]
   13966:	051b      	lsls	r3, r3, #20
   13968:	d504      	bpl.n	13974 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   1396a:	4b06      	ldr	r3, [pc, #24]	; (13984 <_reschedule+0x2c>)
   1396c:	689a      	ldr	r2, [r3, #8]
   1396e:	6a1b      	ldr	r3, [r3, #32]
   13970:	429a      	cmp	r2, r3
   13972:	d103      	bne.n	1397c <_reschedule+0x24>
   13974:	f380 8811 	msr	BASEPRI, r0
}
   13978:	2000      	movs	r0, #0
   1397a:	4770      	bx	lr
		return _Swap(key);
   1397c:	f7ff bf5c 	b.w	13838 <_Swap>
   13980:	e000ed00 	.word	0xe000ed00
   13984:	20001988 	.word	0x20001988

00013988 <k_sched_unlock>:
{
   13988:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   1398a:	f7ff ff63 	bl	13854 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   1398e:	4b0a      	ldr	r3, [pc, #40]	; (139b8 <k_sched_unlock+0x30>)
   13990:	689a      	ldr	r2, [r3, #8]
   13992:	7ad3      	ldrb	r3, [r2, #11]
   13994:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   13996:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   13998:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   1399a:	2001      	movs	r0, #1
   1399c:	f7ff ff62 	bl	13864 <update_cache>
   139a0:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   139a4:	f04f 0320 	mov.w	r3, #32
   139a8:	f3ef 8011 	mrs	r0, BASEPRI
   139ac:	f383 8811 	msr	BASEPRI, r3
}
   139b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   139b4:	f7ff bfd0 	b.w	13958 <_reschedule>
   139b8:	20001988 	.word	0x20001988

000139bc <_priq_dumb_add>:
{
   139bc:	b510      	push	{r4, lr}
	return list->head == list;
   139be:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   139c0:	4298      	cmp	r0, r3
   139c2:	bf08      	it	eq
   139c4:	2300      	moveq	r3, #0
   139c6:	b193      	cbz	r3, 139ee <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   139c8:	f991 400a 	ldrsb.w	r4, [r1, #10]
   139cc:	f993 200a 	ldrsb.w	r2, [r3, #10]
   139d0:	4294      	cmp	r4, r2
   139d2:	da06      	bge.n	139e2 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   139d4:	685a      	ldr	r2, [r3, #4]
   139d6:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   139d8:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   139da:	685a      	ldr	r2, [r3, #4]
   139dc:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   139de:	6059      	str	r1, [r3, #4]
   139e0:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   139e2:	6842      	ldr	r2, [r0, #4]
   139e4:	4293      	cmp	r3, r2
   139e6:	d002      	beq.n	139ee <_priq_dumb_add+0x32>
   139e8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   139ea:	2b00      	cmp	r3, #0
   139ec:	d1eb      	bne.n	139c6 <_priq_dumb_add+0xa>
	node->next = list;
   139ee:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   139f0:	6843      	ldr	r3, [r0, #4]
   139f2:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   139f4:	6843      	ldr	r3, [r0, #4]
   139f6:	6019      	str	r1, [r3, #0]
	list->tail = node;
   139f8:	6041      	str	r1, [r0, #4]
   139fa:	bd10      	pop	{r4, pc}

000139fc <_add_thread_to_ready_q>:
{
   139fc:	b538      	push	{r3, r4, r5, lr}
   139fe:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13a00:	f7ff ff28 	bl	13854 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13a04:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   13a06:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13a08:	4806      	ldr	r0, [pc, #24]	; (13a24 <_add_thread_to_ready_q+0x28>)
   13a0a:	f7ff ffd7 	bl	139bc <_priq_dumb_add>
	thread->base.thread_state |= states;
   13a0e:	7a63      	ldrb	r3, [r4, #9]
   13a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13a14:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13a16:	2000      	movs	r0, #0
   13a18:	f7ff ff24 	bl	13864 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13a1c:	f385 8811 	msr	BASEPRI, r5
   13a20:	bd38      	pop	{r3, r4, r5, pc}
   13a22:	bf00      	nop
   13a24:	200019ac 	.word	0x200019ac

00013a28 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13a28:	7a42      	ldrb	r2, [r0, #9]
   13a2a:	06d2      	lsls	r2, r2, #27
   13a2c:	d104      	bne.n	13a38 <_ready_thread+0x10>
   13a2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13a30:	3301      	adds	r3, #1
   13a32:	d101      	bne.n	13a38 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13a34:	f7ff bfe2 	b.w	139fc <_add_thread_to_ready_q>
   13a38:	4770      	bx	lr
	...

00013a3c <_add_timeout>:
{
   13a3c:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13a3e:	610b      	str	r3, [r1, #16]
{
   13a40:	4604      	mov	r4, r0
   13a42:	461d      	mov	r5, r3
	timeout->thread = thread;
   13a44:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13a46:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   13a48:	bb03      	cbnz	r3, 13a8c <_add_timeout+0x50>
	__asm__ volatile(
   13a4a:	f04f 0320 	mov.w	r3, #32
   13a4e:	f3ef 8611 	mrs	r6, BASEPRI
   13a52:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   13a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a5a:	610b      	str	r3, [r1, #16]
	if (thread) {
   13a5c:	b170      	cbz	r0, 13a7c <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   13a5e:	68cb      	ldr	r3, [r1, #12]
   13a60:	b113      	cbz	r3, 13a68 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   13a62:	f7ff ff51 	bl	13908 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   13a66:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13a68:	7a63      	ldrb	r3, [r4, #9]
   13a6a:	f023 0304 	bic.w	r3, r3, #4
   13a6e:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   13a70:	4620      	mov	r0, r4
   13a72:	f7ff ffd9 	bl	13a28 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13a76:	f386 8811 	msr	BASEPRI, r6
   13a7a:	bd70      	pop	{r4, r5, r6, pc}
   13a7c:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   13a80:	694b      	ldr	r3, [r1, #20]
   13a82:	b32b      	cbz	r3, 13ad0 <_add_timeout+0x94>
			timeout->func(timeout);
   13a84:	4608      	mov	r0, r1
}
   13a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   13a8a:	4718      	bx	r3
	return list->head == list;
   13a8c:	4a11      	ldr	r2, [pc, #68]	; (13ad4 <_add_timeout+0x98>)
   13a8e:	4610      	mov	r0, r2
   13a90:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13a94:	4283      	cmp	r3, r0
   13a96:	d10c      	bne.n	13ab2 <_add_timeout+0x76>
	node->next = list;
   13a98:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13a9a:	6993      	ldr	r3, [r2, #24]
   13a9c:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13a9e:	6993      	ldr	r3, [r2, #24]
   13aa0:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13aa2:	6191      	str	r1, [r2, #24]
   13aa4:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   13aa6:	1b64      	subs	r4, r4, r5
   13aa8:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   13aaa:	6994      	ldr	r4, [r2, #24]
   13aac:	42a3      	cmp	r3, r4
   13aae:	d0f3      	beq.n	13a98 <_add_timeout+0x5c>
   13ab0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	d0f0      	beq.n	13a98 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   13ab6:	690c      	ldr	r4, [r1, #16]
   13ab8:	691d      	ldr	r5, [r3, #16]
   13aba:	42ac      	cmp	r4, r5
   13abc:	dcf3      	bgt.n	13aa6 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   13abe:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13ac0:	1b2c      	subs	r4, r5, r4
   13ac2:	611c      	str	r4, [r3, #16]
   13ac4:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   13ac6:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13ac8:	685a      	ldr	r2, [r3, #4]
   13aca:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13acc:	6059      	str	r1, [r3, #4]
   13ace:	bd70      	pop	{r4, r5, r6, pc}
   13ad0:	bd70      	pop	{r4, r5, r6, pc}
   13ad2:	bf00      	nop
   13ad4:	20001988 	.word	0x20001988

00013ad8 <_move_thread_to_end_of_prio_q>:
{
   13ad8:	b538      	push	{r3, r4, r5, lr}
   13ada:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13adc:	f7ff feba 	bl	13854 <k_spin_lock.isra.11>
   13ae0:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13ae2:	4620      	mov	r0, r4
   13ae4:	f7ff fe8a 	bl	137fc <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13ae8:	4621      	mov	r1, r4
   13aea:	4806      	ldr	r0, [pc, #24]	; (13b04 <_move_thread_to_end_of_prio_q+0x2c>)
   13aec:	f7ff ff66 	bl	139bc <_priq_dumb_add>
	thread->base.thread_state |= states;
   13af0:	7a63      	ldrb	r3, [r4, #9]
   13af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13af6:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13af8:	2000      	movs	r0, #0
   13afa:	f7ff feb3 	bl	13864 <update_cache>
   13afe:	f385 8811 	msr	BASEPRI, r5
   13b02:	bd38      	pop	{r3, r4, r5, pc}
   13b04:	200019ac 	.word	0x200019ac

00013b08 <pend>:
{
   13b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b0a:	4605      	mov	r5, r0
   13b0c:	4614      	mov	r4, r2
   13b0e:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   13b10:	f7ff fed2 	bl	138b8 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   13b14:	7a6b      	ldrb	r3, [r5, #9]
   13b16:	f043 0302 	orr.w	r3, r3, #2
   13b1a:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   13b1c:	1c63      	adds	r3, r4, #1
   13b1e:	d012      	beq.n	13b46 <pend+0x3e>
	__asm__ volatile(
   13b20:	f04f 0320 	mov.w	r3, #32
   13b24:	f3ef 8711 	mrs	r7, BASEPRI
   13b28:	f383 8811 	msr	BASEPRI, r3
   13b2c:	230a      	movs	r3, #10
   13b2e:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13b30:	4632      	mov	r2, r6
   13b32:	fbb4 f3f3 	udiv	r3, r4, r3
   13b36:	f105 0114 	add.w	r1, r5, #20
   13b3a:	3301      	adds	r3, #1
   13b3c:	4628      	mov	r0, r5
   13b3e:	f7ff ff7d 	bl	13a3c <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b42:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   13b46:	b12e      	cbz	r6, 13b54 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   13b48:	4629      	mov	r1, r5
   13b4a:	4630      	mov	r0, r6
}
   13b4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   13b50:	f7ff bf34 	b.w	139bc <_priq_dumb_add>
   13b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00013b58 <_pend_current_thread>:
{
   13b58:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   13b5a:	4b05      	ldr	r3, [pc, #20]	; (13b70 <_pend_current_thread+0x18>)
{
   13b5c:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   13b5e:	6898      	ldr	r0, [r3, #8]
   13b60:	f7ff ffd2 	bl	13b08 <pend>
	return _Swap(key);
   13b64:	4620      	mov	r0, r4
}
   13b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _Swap(key);
   13b6a:	f7ff be65 	b.w	13838 <_Swap>
   13b6e:	bf00      	nop
   13b70:	20001988 	.word	0x20001988

00013b74 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13b74:	4b13      	ldr	r3, [pc, #76]	; (13bc4 <_is_thread_time_slicing+0x50>)
   13b76:	681b      	ldr	r3, [r3, #0]
   13b78:	2b00      	cmp	r3, #0
{
   13b7a:	b510      	push	{r4, lr}
   13b7c:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13b7e:	dd1f      	ble.n	13bc0 <_is_thread_time_slicing+0x4c>
   13b80:	8943      	ldrh	r3, [r0, #10]
   13b82:	2b7f      	cmp	r3, #127	; 0x7f
   13b84:	d81c      	bhi.n	13bc0 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   13b86:	4b10      	ldr	r3, [pc, #64]	; (13bc8 <_is_thread_time_slicing+0x54>)
   13b88:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13b8c:	681b      	ldr	r3, [r3, #0]
   13b8e:	4299      	cmp	r1, r3
   13b90:	db16      	blt.n	13bc0 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   13b92:	f7ff fe5f 	bl	13854 <k_spin_lock.isra.11>
	return list->head == list;
   13b96:	490d      	ldr	r1, [pc, #52]	; (13bcc <_is_thread_time_slicing+0x58>)
   13b98:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b9c:	428b      	cmp	r3, r1
   13b9e:	4604      	mov	r4, r0
   13ba0:	d00a      	beq.n	13bb8 <_is_thread_time_slicing+0x44>
		if (next) {
   13ba2:	b15b      	cbz	r3, 13bbc <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   13ba4:	f992 000a 	ldrsb.w	r0, [r2, #10]
   13ba8:	f993 300a 	ldrsb.w	r3, [r3, #10]
   13bac:	1ac3      	subs	r3, r0, r3
   13bae:	4258      	negs	r0, r3
   13bb0:	4158      	adcs	r0, r3
   13bb2:	f384 8811 	msr	BASEPRI, r4
	return ret;
   13bb6:	bd10      	pop	{r4, pc}
   13bb8:	2000      	movs	r0, #0
   13bba:	e7fa      	b.n	13bb2 <_is_thread_time_slicing+0x3e>
   13bbc:	4618      	mov	r0, r3
   13bbe:	e7f8      	b.n	13bb2 <_is_thread_time_slicing+0x3e>
		return 0;
   13bc0:	2000      	movs	r0, #0
}
   13bc2:	bd10      	pop	{r4, pc}
   13bc4:	20001860 	.word	0x20001860
   13bc8:	20001864 	.word	0x20001864
   13bcc:	20001988 	.word	0x20001988

00013bd0 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   13bd0:	4b01      	ldr	r3, [pc, #4]	; (13bd8 <_update_time_slice_before_swap+0x8>)
   13bd2:	2200      	movs	r2, #0
   13bd4:	601a      	str	r2, [r3, #0]
   13bd6:	4770      	bx	lr
   13bd8:	200019bc 	.word	0x200019bc

00013bdc <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   13bdc:	b538      	push	{r3, r4, r5, lr}
   13bde:	4605      	mov	r5, r0
	int need_sched = 0;
   13be0:	2000      	movs	r0, #0
	return list->head == list;
   13be2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13be4:	42a5      	cmp	r5, r4
   13be6:	d000      	beq.n	13bea <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   13be8:	b904      	cbnz	r4, 13bec <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   13bea:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   13bec:	4620      	mov	r0, r4
   13bee:	f7ff fea8 	bl	13942 <_unpend_thread>
		_ready_thread(th);
   13bf2:	4620      	mov	r0, r4
   13bf4:	f7ff ff18 	bl	13a28 <_ready_thread>
		need_sched = 1;
   13bf8:	2001      	movs	r0, #1
   13bfa:	e7f2      	b.n	13be2 <_unpend_all+0x6>

00013bfc <_sched_init>:
	list->head = (sys_dnode_t *)list;
   13bfc:	4b02      	ldr	r3, [pc, #8]	; (13c08 <_sched_init+0xc>)
   13bfe:	f103 0224 	add.w	r2, r3, #36	; 0x24
   13c02:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   13c04:	629a      	str	r2, [r3, #40]	; 0x28
   13c06:	4770      	bx	lr
   13c08:	20001988 	.word	0x20001988

00013c0c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   13c0c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   13c0e:	4c12      	ldr	r4, [pc, #72]	; (13c58 <_impl_k_yield+0x4c>)
   13c10:	4b12      	ldr	r3, [pc, #72]	; (13c5c <_impl_k_yield+0x50>)
   13c12:	68a2      	ldr	r2, [r4, #8]
   13c14:	681b      	ldr	r3, [r3, #0]
   13c16:	429a      	cmp	r2, r3
   13c18:	d00f      	beq.n	13c3a <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   13c1a:	f7ff fe1b 	bl	13854 <k_spin_lock.isra.11>
   13c1e:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13c20:	68a0      	ldr	r0, [r4, #8]
   13c22:	f7ff fdeb 	bl	137fc <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13c26:	68a1      	ldr	r1, [r4, #8]
   13c28:	f104 0024 	add.w	r0, r4, #36	; 0x24
   13c2c:	f7ff fec6 	bl	139bc <_priq_dumb_add>
			update_cache(1);
   13c30:	2001      	movs	r0, #1
   13c32:	f7ff fe17 	bl	13864 <update_cache>
   13c36:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   13c3a:	6a22      	ldr	r2, [r4, #32]
   13c3c:	68a3      	ldr	r3, [r4, #8]
   13c3e:	429a      	cmp	r2, r3
   13c40:	d009      	beq.n	13c56 <_impl_k_yield+0x4a>
	__asm__ volatile(
   13c42:	f04f 0320 	mov.w	r3, #32
   13c46:	f3ef 8011 	mrs	r0, BASEPRI
   13c4a:	f383 8811 	msr	BASEPRI, r3
		_Swap(irq_lock());
	}
#endif
}
   13c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_Swap(irq_lock());
   13c52:	f7ff bdf1 	b.w	13838 <_Swap>
   13c56:	bd38      	pop	{r3, r4, r5, pc}
   13c58:	20001988 	.word	0x20001988
   13c5c:	000180f8 	.word	0x000180f8

00013c60 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   13c60:	4b01      	ldr	r3, [pc, #4]	; (13c68 <_impl_k_current_get+0x8>)
   13c62:	6898      	ldr	r0, [r3, #8]
   13c64:	4770      	bx	lr
   13c66:	bf00      	nop
   13c68:	20001988 	.word	0x20001988

00013c6c <init_sem_module>:

/*
 * Complete initialization of statically defined semaphores.
 */
static int init_sem_module(struct device *dev)
{
   13c6c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_sem *sem;

	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   13c6e:	4b0a      	ldr	r3, [pc, #40]	; (13c98 <init_sem_module+0x2c>)
   13c70:	490a      	ldr	r1, [pc, #40]	; (13c9c <init_sem_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_sem, sem);
   13c72:	4a0b      	ldr	r2, [pc, #44]	; (13ca0 <init_sem_module+0x34>)
	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   13c74:	428b      	cmp	r3, r1
   13c76:	d301      	bcc.n	13c7c <init_sem_module+0x10>
	}
	return 0;
}
   13c78:	2000      	movs	r0, #0
   13c7a:	bd10      	pop	{r4, pc}
   13c7c:	f04f 0420 	mov.w	r4, #32
   13c80:	f3ef 8011 	mrs	r0, BASEPRI
   13c84:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_sem, sem);
   13c88:	6814      	ldr	r4, [r2, #0]
   13c8a:	619c      	str	r4, [r3, #24]
   13c8c:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13c8e:	f380 8811 	msr	BASEPRI, r0
	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   13c92:	331c      	adds	r3, #28
   13c94:	e7ee      	b.n	13c74 <init_sem_module+0x8>
   13c96:	bf00      	nop
   13c98:	20003f78 	.word	0x20003f78
   13c9c:	20003f94 	.word	0x20003f94
   13ca0:	200019b4 	.word	0x200019b4

00013ca4 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   13ca4:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   13ca8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   13caa:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   13cac:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13cae:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   13cb0:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   13cb2:	6143      	str	r3, [r0, #20]
	__asm__ volatile(
   13cb4:	f04f 0320 	mov.w	r3, #32
   13cb8:	f3ef 8211 	mrs	r2, BASEPRI
   13cbc:	f383 8811 	msr	BASEPRI, r3
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);
   13cc0:	4b03      	ldr	r3, [pc, #12]	; (13cd0 <_impl_k_sem_init+0x2c>)
   13cc2:	6819      	ldr	r1, [r3, #0]
   13cc4:	6181      	str	r1, [r0, #24]
   13cc6:	6018      	str	r0, [r3, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13cc8:	f382 8811 	msr	BASEPRI, r2
   13ccc:	4770      	bx	lr
   13cce:	bf00      	nop
   13cd0:	200019b4 	.word	0x200019b4

00013cd4 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   13cd4:	b570      	push	{r4, r5, r6, lr}
   13cd6:	4604      	mov	r4, r0
	__asm__ volatile(
   13cd8:	f04f 0320 	mov.w	r3, #32
   13cdc:	f3ef 8611 	mrs	r6, BASEPRI
   13ce0:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   13ce4:	f7ff fe1f 	bl	13926 <_unpend_first_thread>
	if (thread) {
   13ce8:	4605      	mov	r5, r0
   13cea:	b160      	cbz	r0, 13d06 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   13cec:	7a43      	ldrb	r3, [r0, #9]
   13cee:	06db      	lsls	r3, r3, #27
   13cf0:	d102      	bne.n	13cf8 <_impl_k_sem_give+0x24>
   13cf2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13cf4:	3301      	adds	r3, #1
   13cf6:	d012      	beq.n	13d1e <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13cf8:	2300      	movs	r3, #0
   13cfa:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   13cfc:	4630      	mov	r0, r6
}
   13cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   13d02:	f7ff be29 	b.w	13958 <_reschedule>
	sem->count += (sem->count != sem->limit);
   13d06:	68a3      	ldr	r3, [r4, #8]
   13d08:	68e2      	ldr	r2, [r4, #12]
   13d0a:	429a      	cmp	r2, r3
   13d0c:	bf18      	it	ne
   13d0e:	3301      	addne	r3, #1
   13d10:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   13d12:	2102      	movs	r1, #2
   13d14:	f104 0010 	add.w	r0, r4, #16
   13d18:	f000 fcb6 	bl	14688 <_handle_obj_poll_events>
   13d1c:	e7ee      	b.n	13cfc <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   13d1e:	f7ff fe6d 	bl	139fc <_add_thread_to_ready_q>
   13d22:	e7e9      	b.n	13cf8 <_impl_k_sem_give+0x24>

00013d24 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   13d24:	b410      	push	{r4}
   13d26:	460a      	mov	r2, r1
   13d28:	4604      	mov	r4, r0
   13d2a:	f04f 0320 	mov.w	r3, #32
   13d2e:	f3ef 8011 	mrs	r0, BASEPRI
   13d32:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   13d36:	68a3      	ldr	r3, [r4, #8]
   13d38:	b133      	cbz	r3, 13d48 <_impl_k_sem_take+0x24>
		sem->count--;
   13d3a:	3b01      	subs	r3, #1
   13d3c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13d3e:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   13d42:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   13d44:	bc10      	pop	{r4}
   13d46:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   13d48:	b921      	cbnz	r1, 13d54 <_impl_k_sem_take+0x30>
   13d4a:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   13d4e:	f06f 000f 	mvn.w	r0, #15
   13d52:	e7f7      	b.n	13d44 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13d54:	4621      	mov	r1, r4
}
   13d56:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13d58:	f7ff befe 	b.w	13b58 <_pend_current_thread>

00013d5c <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   13d5c:	4b03      	ldr	r3, [pc, #12]	; (13d6c <_impl_k_uptime_get_32+0x10>)
   13d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   13d62:	230a      	movs	r3, #10
   13d64:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   13d68:	4770      	bx	lr
   13d6a:	bf00      	nop
   13d6c:	200019c0 	.word	0x200019c0

00013d70 <_tick_get>:
	__asm__ volatile(
   13d70:	f04f 0220 	mov.w	r2, #32
   13d74:	f3ef 8311 	mrs	r3, BASEPRI
   13d78:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   13d7c:	4a02      	ldr	r2, [pc, #8]	; (13d88 <_tick_get+0x18>)
   13d7e:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13d82:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   13d86:	4770      	bx	lr
   13d88:	200019c0 	.word	0x200019c0

00013d8c <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   13d8c:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   13d8e:	f7ff ffef 	bl	13d70 <_tick_get>
   13d92:	240a      	movs	r4, #10
   13d94:	fba0 2304 	umull	r2, r3, r0, r4
   13d98:	fb04 3301 	mla	r3, r4, r1, r3
}
   13d9c:	4610      	mov	r0, r2
   13d9e:	4619      	mov	r1, r3
   13da0:	bd10      	pop	{r4, pc}
	...

00013da4 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   13da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13da8:	4607      	mov	r7, r0
   13daa:	b085      	sub	sp, #20
	__asm__ volatile(
   13dac:	f04f 0320 	mov.w	r3, #32
   13db0:	f3ef 8011 	mrs	r0, BASEPRI
   13db4:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   13db8:	4961      	ldr	r1, [pc, #388]	; (13f40 <_nano_sys_clock_tick_announce+0x19c>)
   13dba:	e9d1 4500 	ldrd	r4, r5, [r1]
   13dbe:	19e2      	adds	r2, r4, r7
   13dc0:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   13dc4:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13dc8:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   13dcc:	ae02      	add	r6, sp, #8
   13dce:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   13dd0:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   13dd2:	f04f 0320 	mov.w	r3, #32
   13dd6:	f3ef 8011 	mrs	r0, BASEPRI
   13dda:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13dde:	4c59      	ldr	r4, [pc, #356]	; (13f44 <_nano_sys_clock_tick_announce+0x1a0>)
   13de0:	4621      	mov	r1, r4
   13de2:	4602      	mov	r2, r0
   13de4:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13de8:	428b      	cmp	r3, r1
   13dea:	d000      	beq.n	13dee <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   13dec:	b9fb      	cbnz	r3, 13e2e <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13dee:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   13df2:	68a0      	ldr	r0, [r4, #8]
   13df4:	f7ff febe 	bl	13b74 <_is_thread_time_slicing>
   13df8:	b1b0      	cbz	r0, 13e28 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13dfa:	4a53      	ldr	r2, [pc, #332]	; (13f48 <_nano_sys_clock_tick_announce+0x1a4>)
   13dfc:	6811      	ldr	r1, [r2, #0]
   13dfe:	230a      	movs	r3, #10
   13e00:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   13e04:	4b51      	ldr	r3, [pc, #324]	; (13f4c <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13e06:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   13e08:	681b      	ldr	r3, [r3, #0]
   13e0a:	429f      	cmp	r7, r3
   13e0c:	db0c      	blt.n	13e28 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   13e0e:	2300      	movs	r3, #0
   13e10:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13e12:	f04f 0320 	mov.w	r3, #32
   13e16:	f3ef 8511 	mrs	r5, BASEPRI
   13e1a:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   13e1e:	68a0      	ldr	r0, [r4, #8]
   13e20:	f7ff fe5a 	bl	13ad8 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e24:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   13e28:	b005      	add	sp, #20
   13e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   13e2e:	4d48      	ldr	r5, [pc, #288]	; (13f50 <_nano_sys_clock_tick_announce+0x1ac>)
   13e30:	9501      	str	r5, [sp, #4]
   13e32:	2101      	movs	r1, #1
   13e34:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   13e36:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   13e3a:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   13e3c:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   13e40:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   13e42:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   13e44:	bfaa      	itet	ge
   13e46:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   13e4a:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   13e4e:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   13e52:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   13e54:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   13e56:	691d      	ldr	r5, [r3, #16]
   13e58:	4298      	cmp	r0, r3
   13e5a:	bf14      	ite	ne
   13e5c:	6818      	ldrne	r0, [r3, #0]
   13e5e:	2000      	moveq	r0, #0
   13e60:	b9d5      	cbnz	r5, 13e98 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   13e62:	e893 0220 	ldmia.w	r3, {r5, r9}
   13e66:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   13e6a:	681d      	ldr	r5, [r3, #0]
   13e6c:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   13e70:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   13e72:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   13e76:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   13e78:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   13e7a:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   13e7c:	f8c3 c010 	str.w	ip, [r3, #16]
   13e80:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   13e84:	f04f 0320 	mov.w	r3, #32
   13e88:	f3ef 8211 	mrs	r2, BASEPRI
   13e8c:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   13e90:	4603      	mov	r3, r0
   13e92:	2800      	cmp	r0, #0
   13e94:	d1d4      	bne.n	13e40 <_nano_sys_clock_tick_announce+0x9c>
   13e96:	e001      	b.n	13e9c <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   13e98:	2900      	cmp	r1, #0
   13e9a:	dcf1      	bgt.n	13e80 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e9c:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13ea0:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ea2:	42b0      	cmp	r0, r6
   13ea4:	d103      	bne.n	13eae <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   13ea6:	9a01      	ldr	r2, [sp, #4]
   13ea8:	2300      	movs	r3, #0
   13eaa:	6013      	str	r3, [r2, #0]
   13eac:	e7a1      	b.n	13df2 <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13eae:	2800      	cmp	r0, #0
   13eb0:	d0f9      	beq.n	13ea6 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   13eb2:	9b03      	ldr	r3, [sp, #12]
   13eb4:	4298      	cmp	r0, r3
   13eb6:	d102      	bne.n	13ebe <_nano_sys_clock_tick_announce+0x11a>
   13eb8:	f04f 0b00 	mov.w	fp, #0
   13ebc:	e001      	b.n	13ec2 <_nano_sys_clock_tick_announce+0x11e>
   13ebe:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13ec2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   13ec6:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   13eca:	e890 000c 	ldmia.w	r0, {r2, r3}
   13ece:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13ed0:	6802      	ldr	r2, [r0, #0]
   13ed2:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   13ed4:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   13ed6:	f04f 0320 	mov.w	r3, #32
   13eda:	f3ef 8811 	mrs	r8, BASEPRI
   13ede:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   13ee2:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   13ee6:	b1d6      	cbz	r6, 13f1e <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   13ee8:	68c3      	ldr	r3, [r0, #12]
   13eea:	b123      	cbz	r3, 13ef6 <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   13eec:	4630      	mov	r0, r6
   13eee:	f7ff fd0b 	bl	13908 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   13ef2:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13ef6:	7a73      	ldrb	r3, [r6, #9]
   13ef8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13efc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13f00:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13f02:	d102      	bne.n	13f0a <_nano_sys_clock_tick_announce+0x166>
   13f04:	6a73      	ldr	r3, [r6, #36]	; 0x24
   13f06:	3301      	adds	r3, #1
   13f08:	d015      	beq.n	13f36 <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13f0a:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13f0e:	f1bb 0f00 	cmp.w	fp, #0
   13f12:	d0c8      	beq.n	13ea6 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   13f14:	9b03      	ldr	r3, [sp, #12]
   13f16:	455b      	cmp	r3, fp
   13f18:	d108      	bne.n	13f2c <_nano_sys_clock_tick_announce+0x188>
   13f1a:	2300      	movs	r3, #0
   13f1c:	e008      	b.n	13f30 <_nano_sys_clock_tick_announce+0x18c>
   13f1e:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   13f22:	6943      	ldr	r3, [r0, #20]
   13f24:	2b00      	cmp	r3, #0
   13f26:	d0f2      	beq.n	13f0e <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   13f28:	4798      	blx	r3
   13f2a:	e7f0      	b.n	13f0e <_nano_sys_clock_tick_announce+0x16a>
   13f2c:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13f30:	4658      	mov	r0, fp
   13f32:	469b      	mov	fp, r3
   13f34:	e7c9      	b.n	13eca <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   13f36:	4630      	mov	r0, r6
   13f38:	f7ff fd60 	bl	139fc <_add_thread_to_ready_q>
   13f3c:	e7e5      	b.n	13f0a <_nano_sys_clock_tick_announce+0x166>
   13f3e:	bf00      	nop
   13f40:	200019c0 	.word	0x200019c0
   13f44:	20001988 	.word	0x20001988
   13f48:	200019bc 	.word	0x200019bc
   13f4c:	20001860 	.word	0x20001860
   13f50:	200019b8 	.word	0x200019b8

00013f54 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   13f54:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   13f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f5e:	4903      	ldr	r1, [pc, #12]	; (13f6c <k_sys_work_q_init+0x18>)
   13f60:	4803      	ldr	r0, [pc, #12]	; (13f70 <k_sys_work_q_init+0x1c>)
   13f62:	f000 f999 	bl	14298 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   13f66:	2000      	movs	r0, #0
   13f68:	bd08      	pop	{r3, pc}
   13f6a:	bf00      	nop
   13f6c:	20003668 	.word	0x20003668
   13f70:	200019c8 	.word	0x200019c8

00013f74 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13f74:	6903      	ldr	r3, [r0, #16]
   13f76:	1c5a      	adds	r2, r3, #1
   13f78:	d011      	beq.n	13f9e <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13f7a:	4a0a      	ldr	r2, [pc, #40]	; (13fa4 <_abort_timeout+0x30>)
   13f7c:	6992      	ldr	r2, [r2, #24]
   13f7e:	4290      	cmp	r0, r2
   13f80:	bf1f      	itttt	ne
   13f82:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13f84:	690a      	ldrne	r2, [r1, #16]
   13f86:	189b      	addne	r3, r3, r2
   13f88:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   13f8a:	e890 000c 	ldmia.w	r0, {r2, r3}
   13f8e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13f90:	6802      	ldr	r2, [r0, #0]
   13f92:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f98:	6103      	str	r3, [r0, #16]
	return 0;
   13f9a:	2000      	movs	r0, #0
   13f9c:	4770      	bx	lr
		return _INACTIVE;
   13f9e:	4618      	mov	r0, r3
}
   13fa0:	4770      	bx	lr
   13fa2:	bf00      	nop
   13fa4:	20001988 	.word	0x20001988

00013fa8 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13fa8:	7a42      	ldrb	r2, [r0, #9]
   13faa:	06d2      	lsls	r2, r2, #27
   13fac:	d104      	bne.n	13fb8 <_ready_thread+0x10>
   13fae:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13fb0:	3301      	adds	r3, #1
   13fb2:	d101      	bne.n	13fb8 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13fb4:	f7ff bd22 	b.w	139fc <_add_thread_to_ready_q>
   13fb8:	4770      	bx	lr
	...

00013fbc <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   13fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13fbe:	f04f 0320 	mov.w	r3, #32
   13fc2:	f3ef 8611 	mrs	r6, BASEPRI
   13fc6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13fca:	4a19      	ldr	r2, [pc, #100]	; (14030 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   13fcc:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13fce:	230a      	movs	r3, #10
   13fd0:	3109      	adds	r1, #9
   13fd2:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   13fd6:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13fd8:	6241      	str	r1, [r0, #36]	; 0x24
   13fda:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13fdc:	2300      	movs	r3, #0
   13fde:	6203      	str	r3, [r0, #32]
   13fe0:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13fe4:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13fe6:	f100 0514 	add.w	r5, r0, #20
   13fea:	d108      	bne.n	13ffe <schedule_new_thread.part.11+0x42>
	node->next = list;
   13fec:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   13fee:	6993      	ldr	r3, [r2, #24]
   13ff0:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   13ff2:	6993      	ldr	r3, [r2, #24]
   13ff4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13ff6:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ff8:	f386 8811 	msr	BASEPRI, r6
   13ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13ffe:	2b00      	cmp	r3, #0
   14000:	d0f4      	beq.n	13fec <schedule_new_thread.part.11+0x30>
   14002:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14006:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14008:	691f      	ldr	r7, [r3, #16]
   1400a:	42bc      	cmp	r4, r7
   1400c:	dc08      	bgt.n	14020 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   1400e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14010:	1b3c      	subs	r4, r7, r4
   14012:	611c      	str	r4, [r3, #16]
   14014:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   14016:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   14018:	685a      	ldr	r2, [r3, #4]
   1401a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   1401c:	605d      	str	r5, [r3, #4]
   1401e:	e7eb      	b.n	13ff8 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   14020:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   14022:	4573      	cmp	r3, lr
   14024:	6244      	str	r4, [r0, #36]	; 0x24
   14026:	d0e1      	beq.n	13fec <schedule_new_thread.part.11+0x30>
   14028:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1402a:	2b00      	cmp	r3, #0
   1402c:	d1eb      	bne.n	14006 <schedule_new_thread.part.11+0x4a>
   1402e:	e7dd      	b.n	13fec <schedule_new_thread.part.11+0x30>
   14030:	20001988 	.word	0x20001988

00014034 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   14034:	4770      	bx	lr
	...

00014038 <k_is_in_isr>:
   14038:	f3ef 8005 	mrs	r0, IPSR
   1403c:	280d      	cmp	r0, #13
   1403e:	d807      	bhi.n	14050 <k_is_in_isr+0x18>
   14040:	b138      	cbz	r0, 14052 <k_is_in_isr+0x1a>
   14042:	4b04      	ldr	r3, [pc, #16]	; (14054 <k_is_in_isr+0x1c>)
   14044:	6858      	ldr	r0, [r3, #4]
   14046:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1404a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   1404e:	4770      	bx	lr
   14050:	2001      	movs	r0, #1
}
   14052:	4770      	bx	lr
   14054:	e000ed00 	.word	0xe000ed00

00014058 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   14058:	4b02      	ldr	r3, [pc, #8]	; (14064 <_is_thread_essential+0xc>)
   1405a:	689b      	ldr	r3, [r3, #8]
   1405c:	7a18      	ldrb	r0, [r3, #8]
}
   1405e:	f000 0001 	and.w	r0, r0, #1
   14062:	4770      	bx	lr
   14064:	20001988 	.word	0x20001988

00014068 <_check_stack_sentinel>:
	if (_current->base.thread_state & _THREAD_DUMMY) {
   14068:	4b09      	ldr	r3, [pc, #36]	; (14090 <_check_stack_sentinel+0x28>)
   1406a:	689b      	ldr	r3, [r3, #8]
   1406c:	7a5a      	ldrb	r2, [r3, #9]
   1406e:	07d2      	lsls	r2, r2, #31
   14070:	d40d      	bmi.n	1408e <_check_stack_sentinel+0x26>
	stack = (u32_t *)_current->stack_info.start;
   14072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	if (*stack != STACK_SENTINEL) {
   14074:	681a      	ldr	r2, [r3, #0]
   14076:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   1407a:	d008      	beq.n	1408e <_check_stack_sentinel+0x26>
		*stack = STACK_SENTINEL;
   1407c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   14080:	601a      	str	r2, [r3, #0]
		_k_except_reason(_NANO_ERR_STACK_CHK_FAIL);
   14082:	4040      	eors	r0, r0
   14084:	f380 8811 	msr	BASEPRI, r0
   14088:	f04f 0002 	mov.w	r0, #2
   1408c:	df02      	svc	2
   1408e:	4770      	bx	lr
   14090:	20001988 	.word	0x20001988

00014094 <_impl_k_thread_start>:
{
   14094:	b510      	push	{r4, lr}
	__asm__ volatile(
   14096:	f04f 0320 	mov.w	r3, #32
   1409a:	f3ef 8411 	mrs	r4, BASEPRI
   1409e:	f383 8811 	msr	BASEPRI, r3
   140a2:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   140a4:	0759      	lsls	r1, r3, #29
   140a6:	d402      	bmi.n	140ae <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   140a8:	f384 8811 	msr	BASEPRI, r4
   140ac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   140ae:	f023 0304 	bic.w	r3, r3, #4
   140b2:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   140b4:	f7ff ff78 	bl	13fa8 <_ready_thread>
	_reschedule(key);
   140b8:	4620      	mov	r0, r4
}
   140ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   140be:	f7ff bc4b 	b.w	13958 <_reschedule>
	...

000140c4 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   140c4:	b530      	push	{r4, r5, lr}
   140c6:	b087      	sub	sp, #28
   140c8:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   140ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   140cc:	9504      	str	r5, [sp, #16]
   140ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   140d0:	9503      	str	r5, [sp, #12]
   140d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   140d4:	9502      	str	r5, [sp, #8]
   140d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   140d8:	9501      	str	r5, [sp, #4]
   140da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   140dc:	9500      	str	r5, [sp, #0]
   140de:	f7ed fc1b 	bl	1918 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   140e2:	4b04      	ldr	r3, [pc, #16]	; (140f4 <_setup_new_thread+0x30>)
   140e4:	689b      	ldr	r3, [r3, #8]
   140e6:	b913      	cbnz	r3, 140ee <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   140e8:	6663      	str	r3, [r4, #100]	; 0x64
}
   140ea:	b007      	add	sp, #28
   140ec:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   140ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   140f0:	e7fa      	b.n	140e8 <_setup_new_thread+0x24>
   140f2:	bf00      	nop
   140f4:	20001988 	.word	0x20001988

000140f8 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   140f8:	b570      	push	{r4, r5, r6, lr}
   140fa:	b086      	sub	sp, #24
   140fc:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   140fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14100:	9604      	str	r6, [sp, #16]
   14102:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14104:	9603      	str	r6, [sp, #12]
   14106:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14108:	9602      	str	r6, [sp, #8]
   1410a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1410c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1410e:	9601      	str	r6, [sp, #4]
   14110:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14112:	9600      	str	r6, [sp, #0]
   14114:	f7ff ffd6 	bl	140c4 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   14118:	1c6b      	adds	r3, r5, #1
   1411a:	d003      	beq.n	14124 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   1411c:	b92d      	cbnz	r5, 1412a <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   1411e:	4620      	mov	r0, r4
   14120:	f7ff ffb8 	bl	14094 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   14124:	4620      	mov	r0, r4
   14126:	b006      	add	sp, #24
   14128:	bd70      	pop	{r4, r5, r6, pc}
   1412a:	4629      	mov	r1, r5
   1412c:	4620      	mov	r0, r4
   1412e:	f7ff ff45 	bl	13fbc <schedule_new_thread.part.11>
   14132:	e7f7      	b.n	14124 <_impl_k_thread_create+0x2c>

00014134 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   14134:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   14136:	b510      	push	{r4, lr}
   14138:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1413a:	b103      	cbz	r3, 1413e <_k_thread_single_abort+0xa>
		thread->fn_abort();
   1413c:	4798      	blx	r3
   1413e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14140:	06da      	lsls	r2, r3, #27
   14142:	d106      	bne.n	14152 <_k_thread_single_abort+0x1e>
   14144:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14146:	3201      	adds	r2, #1
   14148:	d103      	bne.n	14152 <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   1414a:	4620      	mov	r0, r4
   1414c:	f7ff fbb4 	bl	138b8 <_remove_thread_from_ready_q>
   14150:	e00b      	b.n	1416a <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   14152:	079b      	lsls	r3, r3, #30
   14154:	d502      	bpl.n	1415c <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   14156:	4620      	mov	r0, r4
   14158:	f7ff fbd6 	bl	13908 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   1415c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1415e:	3301      	adds	r3, #1
   14160:	d003      	beq.n	1416a <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   14162:	f104 0014 	add.w	r0, r4, #20
   14166:	f7ff ff05 	bl	13f74 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   1416a:	7a63      	ldrb	r3, [r4, #9]
   1416c:	f043 0308 	orr.w	r3, r3, #8
   14170:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   14172:	bd10      	pop	{r4, pc}

00014174 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   14174:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14176:	4f21      	ldr	r7, [pc, #132]	; (141fc <_init_static_threads+0x88>)
   14178:	4d21      	ldr	r5, [pc, #132]	; (14200 <_init_static_threads+0x8c>)
{
   1417a:	b087      	sub	sp, #28
   1417c:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   1417e:	42bd      	cmp	r5, r7
   14180:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   14184:	d314      	bcc.n	141b0 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   14186:	4b1f      	ldr	r3, [pc, #124]	; (14204 <_init_static_threads+0x90>)
   14188:	689a      	ldr	r2, [r3, #8]
   1418a:	7ad3      	ldrb	r3, [r2, #11]
   1418c:	3b01      	subs	r3, #1
   1418e:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   14190:	f04f 0320 	mov.w	r3, #32
   14194:	f3ef 8511 	mrs	r5, BASEPRI
   14198:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   1419c:	4c18      	ldr	r4, [pc, #96]	; (14200 <_init_static_threads+0x8c>)
   1419e:	42b4      	cmp	r4, r6
   141a0:	d31f      	bcc.n	141e2 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   141a2:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   141a6:	b007      	add	sp, #28
   141a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   141ac:	f7ff bbec 	b.w	13988 <k_sched_unlock>
		_setup_new_thread(
   141b0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   141b4:	9304      	str	r3, [sp, #16]
   141b6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   141ba:	9303      	str	r3, [sp, #12]
   141bc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   141c0:	9302      	str	r3, [sp, #8]
   141c2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   141c6:	9301      	str	r3, [sp, #4]
   141c8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   141cc:	9300      	str	r3, [sp, #0]
   141ce:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   141d2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   141d4:	f7ff ff76 	bl	140c4 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   141d8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   141dc:	651d      	str	r5, [r3, #80]	; 0x50
   141de:	4625      	mov	r5, r4
   141e0:	e7cd      	b.n	1417e <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   141e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   141e4:	1c4b      	adds	r3, r1, #1
   141e6:	d003      	beq.n	141f0 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   141e8:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   141ea:	b919      	cbnz	r1, 141f4 <_init_static_threads+0x80>
   141ec:	f7ff ff52 	bl	14094 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   141f0:	342c      	adds	r4, #44	; 0x2c
   141f2:	e7d4      	b.n	1419e <_init_static_threads+0x2a>
   141f4:	f7ff fee2 	bl	13fbc <schedule_new_thread.part.11>
   141f8:	e7fa      	b.n	141f0 <_init_static_threads+0x7c>
   141fa:	bf00      	nop
   141fc:	20003f78 	.word	0x20003f78
   14200:	20003f78 	.word	0x20003f78
   14204:	20001988 	.word	0x20001988

00014208 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   14208:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   1420a:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   1420c:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   1420e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   14212:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   14214:	72c3      	strb	r3, [r0, #11]
   14216:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   14218:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   1421a:	61c3      	str	r3, [r0, #28]
	t->func = func;
   1421c:	6283      	str	r3, [r0, #40]	; 0x28
   1421e:	4770      	bx	lr

00014220 <k_work_submit_to_queue>:
{
   14220:	b500      	push	{lr}
   14222:	f101 0308 	add.w	r3, r1, #8
   14226:	f3bf 8f5b 	dmb	ish
   1422a:	e853 2f00 	ldrex	r2, [r3]
   1422e:	f042 0e01 	orr.w	lr, r2, #1
   14232:	e843 ec00 	strex	ip, lr, [r3]
   14236:	f1bc 0f00 	cmp.w	ip, #0
   1423a:	d1f6      	bne.n	1422a <k_work_submit_to_queue+0xa>
   1423c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14240:	07d3      	lsls	r3, r2, #31
   14242:	d403      	bmi.n	1424c <k_work_submit_to_queue+0x2c>
}
   14244:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14248:	f7ff ba56 	b.w	136f8 <k_queue_append>
   1424c:	f85d fb04 	ldr.w	pc, [sp], #4

00014250 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14250:	f1a0 010c 	sub.w	r1, r0, #12
   14254:	6980      	ldr	r0, [r0, #24]
   14256:	f7ff bfe3 	b.w	14220 <k_work_submit_to_queue>

0001425a <work_q_main>:
{
   1425a:	b510      	push	{r4, lr}
   1425c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1425e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14262:	4620      	mov	r0, r4
   14264:	f7ff fa6c 	bl	13740 <_impl_k_queue_get>
		if (!work) {
   14268:	4603      	mov	r3, r0
   1426a:	2800      	cmp	r0, #0
   1426c:	d0f7      	beq.n	1425e <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1426e:	3308      	adds	r3, #8
		handler = work->handler;
   14270:	6842      	ldr	r2, [r0, #4]
   14272:	f3bf 8f5b 	dmb	ish
   14276:	e853 1f00 	ldrex	r1, [r3]
   1427a:	f021 0e01 	bic.w	lr, r1, #1
   1427e:	e843 ec00 	strex	ip, lr, [r3]
   14282:	f1bc 0f00 	cmp.w	ip, #0
   14286:	d1f6      	bne.n	14276 <work_q_main+0x1c>
   14288:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   1428c:	07cb      	lsls	r3, r1, #31
   1428e:	d500      	bpl.n	14292 <work_q_main+0x38>
			handler(work);
   14290:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14292:	f7ff fcbb 	bl	13c0c <_impl_k_yield>
   14296:	e7e2      	b.n	1425e <work_q_main+0x4>

00014298 <k_work_q_start>:
{
   14298:	b5f0      	push	{r4, r5, r6, r7, lr}
   1429a:	b087      	sub	sp, #28
   1429c:	4604      	mov	r4, r0
   1429e:	461f      	mov	r7, r3
   142a0:	460d      	mov	r5, r1
   142a2:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   142a4:	f7ff fa12 	bl	136cc <_impl_k_queue_init>

   142a8:	2000      	movs	r0, #0
   142aa:	9005      	str	r0, [sp, #20]
   142ac:	9004      	str	r0, [sp, #16]
   142ae:	9002      	str	r0, [sp, #8]
   142b0:	9001      	str	r0, [sp, #4]
   142b2:	9703      	str	r7, [sp, #12]
   142b4:	9400      	str	r4, [sp, #0]
   142b6:	4b04      	ldr	r3, [pc, #16]	; (142c8 <k_work_q_start+0x30>)
   142b8:	4632      	mov	r2, r6
   142ba:	4629      	mov	r1, r5
   142bc:	f104 0014 	add.w	r0, r4, #20
   142c0:	f7ff ff1a 	bl	140f8 <_impl_k_thread_create>
}
   142c4:	b007      	add	sp, #28
   142c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142c8:	0001425b 	.word	0x0001425b

000142cc <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   142cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   142d0:	2300      	movs	r3, #0
   142d2:	61c2      	str	r2, [r0, #28]
	t->func = func;
   142d4:	4a04      	ldr	r2, [pc, #16]	; (142e8 <k_delayed_work_init+0x1c>)
   142d6:	6003      	str	r3, [r0, #0]
   142d8:	6041      	str	r1, [r0, #4]
   142da:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   142dc:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   142de:	6143      	str	r3, [r0, #20]
	t->func = func;
   142e0:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   142e2:	6243      	str	r3, [r0, #36]	; 0x24
   142e4:	4770      	bx	lr
   142e6:	bf00      	nop
   142e8:	00014251 	.word	0x00014251

000142ec <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   142ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   142ee:	f04f 0320 	mov.w	r3, #32
   142f2:	f3ef 8411 	mrs	r4, BASEPRI
   142f6:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   142fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   142fc:	b923      	cbnz	r3, 14308 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   142fe:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   14302:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   14306:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14308:	f3bf 8f5b 	dmb	ish
   1430c:	6883      	ldr	r3, [r0, #8]
   1430e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   14312:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14314:	f100 0508 	add.w	r5, r0, #8
   14318:	d533      	bpl.n	14382 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1431a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1431c:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   1431e:	2100      	movs	r1, #0
   14320:	2b00      	cmp	r3, #0
   14322:	d0ec      	beq.n	142fe <k_delayed_work_cancel+0x12>
   14324:	4298      	cmp	r0, r3
   14326:	d127      	bne.n	14378 <k_delayed_work_cancel+0x8c>
   14328:	6803      	ldr	r3, [r0, #0]
   1432a:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1432c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   14330:	b9c9      	cbnz	r1, 14366 <k_delayed_work_cancel+0x7a>
   14332:	42b8      	cmp	r0, r7
	list->head = node;
   14334:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   14336:	d100      	bne.n	1433a <k_delayed_work_cancel+0x4e>
	list->tail = node;
   14338:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1433a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1433c:	f003 0303 	and.w	r3, r3, #3
   14340:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   14342:	2300      	movs	r3, #0
   14344:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14346:	f3bf 8f5b 	dmb	ish
   1434a:	e855 2f00 	ldrex	r2, [r5]
   1434e:	f022 0201 	bic.w	r2, r2, #1
   14352:	e845 2100 	strex	r1, r2, [r5]
   14356:	2900      	cmp	r1, #0
   14358:	d1f7      	bne.n	1434a <k_delayed_work_cancel+0x5e>
   1435a:	f3bf 8f5b 	dmb	ish
   1435e:	f384 8811 	msr	BASEPRI, r4
	return 0;
   14362:	4618      	mov	r0, r3
   14364:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14366:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14368:	f006 0603 	and.w	r6, r6, #3
   1436c:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   1436e:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   14370:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14372:	bf08      	it	eq
   14374:	6051      	streq	r1, [r2, #4]
   14376:	e7e0      	b.n	1433a <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14378:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   1437a:	4619      	mov	r1, r3
   1437c:	f026 0303 	bic.w	r3, r6, #3
   14380:	e7ce      	b.n	14320 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14382:	69c1      	ldr	r1, [r0, #28]
   14384:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   14386:	f100 020c 	add.w	r2, r0, #12
   1438a:	d0da      	beq.n	14342 <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1438c:	4b08      	ldr	r3, [pc, #32]	; (143b0 <k_delayed_work_cancel+0xc4>)
   1438e:	699b      	ldr	r3, [r3, #24]
   14390:	429a      	cmp	r2, r3
   14392:	bf1f      	itttt	ne
   14394:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14396:	6913      	ldrne	r3, [r2, #16]
   14398:	185b      	addne	r3, r3, r1
   1439a:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   1439c:	6903      	ldr	r3, [r0, #16]
   1439e:	68c2      	ldr	r2, [r0, #12]
   143a0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   143a2:	68c2      	ldr	r2, [r0, #12]
   143a4:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   143a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143aa:	61c3      	str	r3, [r0, #28]
   143ac:	e7c9      	b.n	14342 <k_delayed_work_cancel+0x56>
   143ae:	bf00      	nop
   143b0:	20001988 	.word	0x20001988

000143b4 <k_delayed_work_submit_to_queue>:
{
   143b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143b6:	4607      	mov	r7, r0
   143b8:	460c      	mov	r4, r1
   143ba:	4615      	mov	r5, r2
	__asm__ volatile(
   143bc:	f04f 0320 	mov.w	r3, #32
   143c0:	f3ef 8611 	mrs	r6, BASEPRI
   143c4:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   143c8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   143ca:	b123      	cbz	r3, 143d6 <k_delayed_work_submit_to_queue+0x22>
   143cc:	4283      	cmp	r3, r0
   143ce:	d00b      	beq.n	143e8 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   143d0:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   143d4:	e00d      	b.n	143f2 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   143d6:	b138      	cbz	r0, 143e8 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   143d8:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   143da:	b96d      	cbnz	r5, 143f8 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   143dc:	4621      	mov	r1, r4
   143de:	4638      	mov	r0, r7
   143e0:	f7ff ff1e 	bl	14220 <k_work_submit_to_queue>
	err = 0;
   143e4:	2000      	movs	r0, #0
   143e6:	e004      	b.n	143f2 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   143e8:	4620      	mov	r0, r4
   143ea:	f7ff ff7f 	bl	142ec <k_delayed_work_cancel>
		if (err < 0) {
   143ee:	2800      	cmp	r0, #0
   143f0:	daf2      	bge.n	143d8 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   143f2:	f386 8811 	msr	BASEPRI, r6
}
   143f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   143f8:	220a      	movs	r2, #10
   143fa:	3509      	adds	r5, #9
   143fc:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   14400:	4a16      	ldr	r2, [pc, #88]	; (1445c <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   14402:	2300      	movs	r3, #0
   14404:	4611      	mov	r1, r2
   14406:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14408:	61a3      	str	r3, [r4, #24]
   1440a:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   1440e:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14410:	428b      	cmp	r3, r1
   14412:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14416:	61e5      	str	r5, [r4, #28]
   14418:	d106      	bne.n	14428 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   1441a:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   1441c:	6993      	ldr	r3, [r2, #24]
   1441e:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   14420:	6993      	ldr	r3, [r2, #24]
   14422:	601f      	str	r7, [r3, #0]
	list->tail = node;
   14424:	6197      	str	r7, [r2, #24]
   14426:	e7dd      	b.n	143e4 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14428:	2b00      	cmp	r3, #0
   1442a:	d0f6      	beq.n	1441a <k_delayed_work_submit_to_queue+0x66>
   1442c:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14430:	69e0      	ldr	r0, [r4, #28]
   14432:	691d      	ldr	r5, [r3, #16]
   14434:	42a8      	cmp	r0, r5
   14436:	dc08      	bgt.n	1444a <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   14438:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1443a:	1a28      	subs	r0, r5, r0
   1443c:	6118      	str	r0, [r3, #16]
   1443e:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   14440:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   14442:	685a      	ldr	r2, [r3, #4]
   14444:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   14446:	605f      	str	r7, [r3, #4]
   14448:	e7cc      	b.n	143e4 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   1444a:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   1444c:	4573      	cmp	r3, lr
   1444e:	61e0      	str	r0, [r4, #28]
   14450:	d0e3      	beq.n	1441a <k_delayed_work_submit_to_queue+0x66>
   14452:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14454:	2b00      	cmp	r3, #0
   14456:	d1eb      	bne.n	14430 <k_delayed_work_submit_to_queue+0x7c>
   14458:	e7df      	b.n	1441a <k_delayed_work_submit_to_queue+0x66>
   1445a:	bf00      	nop
   1445c:	20001988 	.word	0x20001988

00014460 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   14460:	2314      	movs	r3, #20
   14462:	b530      	push	{r4, r5, lr}
   14464:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   14468:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   1446a:	2900      	cmp	r1, #0
   1446c:	da00      	bge.n	14470 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   1446e:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   14470:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   14472:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   14474:	f003 030f 	and.w	r3, r3, #15
   14478:	2b02      	cmp	r3, #2
   1447a:	d003      	beq.n	14484 <clear_event_registrations+0x24>
   1447c:	2b04      	cmp	r3, #4
   1447e:	d001      	beq.n	14484 <clear_event_registrations+0x24>
   14480:	2b01      	cmp	r3, #1
   14482:	d104      	bne.n	1448e <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   14484:	6843      	ldr	r3, [r0, #4]
   14486:	6805      	ldr	r5, [r0, #0]
   14488:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   1448a:	6805      	ldr	r5, [r0, #0]
   1448c:	606b      	str	r3, [r5, #4]
   1448e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14492:	f04f 0320 	mov.w	r3, #32
   14496:	f3ef 8211 	mrs	r2, BASEPRI
   1449a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   1449e:	3901      	subs	r1, #1
   144a0:	3814      	subs	r0, #20
   144a2:	e7e2      	b.n	1446a <clear_event_registrations+0xa>

000144a4 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   144a4:	6883      	ldr	r3, [r0, #8]
{
   144a6:	b570      	push	{r4, r5, r6, lr}
   144a8:	4605      	mov	r5, r0
   144aa:	460e      	mov	r6, r1
	if (!event->poller) {
   144ac:	b1d3      	cbz	r3, 144e4 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   144ae:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   144b0:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   144b2:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   144b4:	7a63      	ldrb	r3, [r4, #9]
   144b6:	079a      	lsls	r2, r3, #30
   144b8:	d514      	bpl.n	144e4 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   144ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   144bc:	3302      	adds	r3, #2
   144be:	d01a      	beq.n	144f6 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   144c0:	4620      	mov	r0, r4
   144c2:	f7ff fa3e 	bl	13942 <_unpend_thread>
	_set_thread_return_value(thread,
   144c6:	2e00      	cmp	r6, #0
   144c8:	bf0c      	ite	eq
   144ca:	f06f 0303 	mvneq.w	r3, #3
   144ce:	2300      	movne	r3, #0
   144d0:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   144d2:	7a63      	ldrb	r3, [r4, #9]
   144d4:	06db      	lsls	r3, r3, #27
   144d6:	d105      	bne.n	144e4 <signal_poll_event+0x40>
   144d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   144da:	3301      	adds	r3, #1
   144dc:	d102      	bne.n	144e4 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   144de:	4620      	mov	r0, r4
   144e0:	f7ff fa8c 	bl	139fc <_add_thread_to_ready_q>
	event->state |= state;
   144e4:	7b6b      	ldrb	r3, [r5, #13]
   144e6:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   144ea:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   144ee:	2000      	movs	r0, #0
	event->state |= state;
   144f0:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   144f2:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   144f4:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   144f6:	f06f 000a 	mvn.w	r0, #10
}
   144fa:	bd70      	pop	{r4, r5, r6, pc}

000144fc <add_event>:
{
   144fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   144fe:	6803      	ldr	r3, [r0, #0]
   14500:	4298      	cmp	r0, r3
   14502:	4604      	mov	r4, r0
   14504:	460e      	mov	r6, r1
   14506:	4617      	mov	r7, r2
   14508:	d106      	bne.n	14518 <add_event+0x1c>
	node->next = list;
   1450a:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   1450c:	6863      	ldr	r3, [r4, #4]
   1450e:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   14510:	6863      	ldr	r3, [r4, #4]
   14512:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14514:	6066      	str	r6, [r4, #4]
   14516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14518:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   1451a:	2b00      	cmp	r3, #0
   1451c:	d0f5      	beq.n	1450a <add_event+0xe>
   1451e:	689b      	ldr	r3, [r3, #8]
   14520:	6811      	ldr	r1, [r2, #0]
   14522:	6818      	ldr	r0, [r3, #0]
   14524:	f7ff f9be 	bl	138a4 <_is_t1_higher_prio_than_t2>
   14528:	2800      	cmp	r0, #0
   1452a:	d1ee      	bne.n	1450a <add_event+0xe>
	return list->head == list;
   1452c:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1452e:	42ac      	cmp	r4, r5
   14530:	d0eb      	beq.n	1450a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14532:	2d00      	cmp	r5, #0
   14534:	d0e9      	beq.n	1450a <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   14536:	68ab      	ldr	r3, [r5, #8]
   14538:	6838      	ldr	r0, [r7, #0]
   1453a:	6819      	ldr	r1, [r3, #0]
   1453c:	f7ff f9b2 	bl	138a4 <_is_t1_higher_prio_than_t2>
   14540:	b130      	cbz	r0, 14550 <add_event+0x54>
		node->prev = insert_point->prev;
   14542:	686b      	ldr	r3, [r5, #4]
   14544:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   14546:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   14548:	686b      	ldr	r3, [r5, #4]
   1454a:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   1454c:	606e      	str	r6, [r5, #4]
   1454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   14550:	6863      	ldr	r3, [r4, #4]
   14552:	429d      	cmp	r5, r3
   14554:	d0d9      	beq.n	1450a <add_event+0xe>
   14556:	682d      	ldr	r5, [r5, #0]
   14558:	e7eb      	b.n	14532 <add_event+0x36>

0001455a <k_poll_event_init>:
{
   1455a:	b530      	push	{r4, r5, lr}
	event->type = type;
   1455c:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   1455e:	6103      	str	r3, [r0, #16]
	event->type = type;
   14560:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   14564:	7b81      	ldrb	r1, [r0, #14]
   14566:	f362 0100 	bfi	r1, r2, #0, #1
   1456a:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   1456c:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   1456e:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   14570:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   14574:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   14578:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1457a:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   1457c:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   1457e:	bd30      	pop	{r4, r5, pc}

00014580 <_impl_k_poll>:
{
   14580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14584:	4b3f      	ldr	r3, [pc, #252]	; (14684 <_impl_k_poll+0x104>)
{
   14586:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14588:	689b      	ldr	r3, [r3, #8]
   1458a:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   1458c:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1458e:	2301      	movs	r3, #1
{
   14590:	4607      	mov	r7, r0
   14592:	468a      	mov	sl, r1
   14594:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14596:	9301      	str	r3, [sp, #4]
   14598:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1459a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   1459e:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   145a0:	4556      	cmp	r6, sl
   145a2:	db10      	blt.n	145c6 <_impl_k_poll+0x46>
   145a4:	f04f 0320 	mov.w	r3, #32
   145a8:	f3ef 8611 	mrs	r6, BASEPRI
   145ac:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   145b0:	9c01      	ldr	r4, [sp, #4]
   145b2:	2c00      	cmp	r4, #0
   145b4:	d13f      	bne.n	14636 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   145b6:	4632      	mov	r2, r6
   145b8:	4629      	mov	r1, r5
   145ba:	4638      	mov	r0, r7
   145bc:	f7ff ff50 	bl	14460 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   145c0:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   145c4:	e040      	b.n	14648 <_impl_k_poll+0xc8>
	__asm__ volatile(
   145c6:	f04f 0320 	mov.w	r3, #32
   145ca:	f3ef 8b11 	mrs	fp, BASEPRI
   145ce:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   145d2:	7b62      	ldrb	r2, [r4, #13]
   145d4:	f002 030f 	and.w	r3, r2, #15
   145d8:	2b02      	cmp	r3, #2
   145da:	d003      	beq.n	145e4 <_impl_k_poll+0x64>
   145dc:	2b04      	cmp	r3, #4
   145de:	d004      	beq.n	145ea <_impl_k_poll+0x6a>
   145e0:	2b01      	cmp	r3, #1
   145e2:	d106      	bne.n	145f2 <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   145e4:	6921      	ldr	r1, [r4, #16]
   145e6:	6889      	ldr	r1, [r1, #8]
   145e8:	e001      	b.n	145ee <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   145ea:	6921      	ldr	r1, [r4, #16]
   145ec:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   145ee:	2900      	cmp	r1, #0
   145f0:	d13d      	bne.n	1466e <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   145f2:	f1b8 0f00 	cmp.w	r8, #0
   145f6:	d014      	beq.n	14622 <_impl_k_poll+0xa2>
   145f8:	9a01      	ldr	r2, [sp, #4]
   145fa:	b192      	cbz	r2, 14622 <_impl_k_poll+0xa2>
	switch (event->type) {
   145fc:	2b02      	cmp	r3, #2
   145fe:	d007      	beq.n	14610 <_impl_k_poll+0x90>
   14600:	2b04      	cmp	r3, #4
   14602:	d013      	beq.n	1462c <_impl_k_poll+0xac>
   14604:	2b01      	cmp	r3, #1
   14606:	d109      	bne.n	1461c <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   14608:	466a      	mov	r2, sp
   1460a:	4621      	mov	r1, r4
   1460c:	6920      	ldr	r0, [r4, #16]
   1460e:	e003      	b.n	14618 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   14610:	6920      	ldr	r0, [r4, #16]
   14612:	466a      	mov	r2, sp
   14614:	4621      	mov	r1, r4
   14616:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   14618:	f7ff ff70 	bl	144fc <add_event>
	event->poller = poller;
   1461c:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   14620:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14622:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   14626:	3601      	adds	r6, #1
   14628:	3414      	adds	r4, #20
   1462a:	e7b9      	b.n	145a0 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   1462c:	6920      	ldr	r0, [r4, #16]
   1462e:	466a      	mov	r2, sp
   14630:	4621      	mov	r1, r4
   14632:	3008      	adds	r0, #8
   14634:	e7f0      	b.n	14618 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   14636:	2300      	movs	r3, #0
   14638:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   1463a:	f1b8 0f00 	cmp.w	r8, #0
   1463e:	d107      	bne.n	14650 <_impl_k_poll+0xd0>
   14640:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   14644:	f06f 040a 	mvn.w	r4, #10
}
   14648:	4620      	mov	r0, r4
   1464a:	b005      	add	sp, #20
   1464c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14650:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   14652:	4642      	mov	r2, r8
   14654:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14656:	9102      	str	r1, [sp, #8]
   14658:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1465a:	f7ff fa7d 	bl	13b58 <_pend_current_thread>
   1465e:	4604      	mov	r4, r0
	__asm__ volatile(
   14660:	f04f 0320 	mov.w	r3, #32
   14664:	f3ef 8611 	mrs	r6, BASEPRI
   14668:	f383 8811 	msr	BASEPRI, r3
   1466c:	e7a3      	b.n	145b6 <_impl_k_poll+0x36>
	event->state |= state;
   1466e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   14672:	f363 1207 	bfi	r2, r3, #4, #4
   14676:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   14678:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   1467c:	f8cd 9004 	str.w	r9, [sp, #4]
   14680:	e7cf      	b.n	14622 <_impl_k_poll+0xa2>
   14682:	bf00      	nop
   14684:	20001988 	.word	0x20001988

00014688 <_handle_obj_poll_events>:
	return list->head == list;
   14688:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   1468a:	4298      	cmp	r0, r3
   1468c:	d007      	beq.n	1469e <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   1468e:	e893 0005 	ldmia.w	r3, {r0, r2}
   14692:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   14694:	6818      	ldr	r0, [r3, #0]
   14696:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   14698:	4618      	mov	r0, r3
   1469a:	f7ff bf03 	b.w	144a4 <signal_poll_event>
   1469e:	4770      	bx	lr

000146a0 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   146a0:	b538      	push	{r3, r4, r5, lr}
   146a2:	f04f 0320 	mov.w	r3, #32
   146a6:	f3ef 8511 	mrs	r5, BASEPRI
   146aa:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   146ae:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   146b0:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   146b2:	4298      	cmp	r0, r3
	signal->signaled = 1;
   146b4:	f04f 0101 	mov.w	r1, #1
   146b8:	6081      	str	r1, [r0, #8]
   146ba:	d00d      	beq.n	146d8 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   146bc:	e893 0005 	ldmia.w	r3, {r0, r2}
   146c0:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   146c2:	6818      	ldr	r0, [r3, #0]
   146c4:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   146c6:	4618      	mov	r0, r3
   146c8:	f7ff feec 	bl	144a4 <signal_poll_event>
   146cc:	4604      	mov	r4, r0

	_reschedule(key);
   146ce:	4628      	mov	r0, r5
   146d0:	f7ff f942 	bl	13958 <_reschedule>
	return rc;
}
   146d4:	4620      	mov	r0, r4
   146d6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   146d8:	f385 8811 	msr	BASEPRI, r5
		return 0;
   146dc:	2400      	movs	r4, #0
   146de:	e7f9      	b.n	146d4 <_impl_k_poll_signal+0x34>

000146e0 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   146e0:	4770      	bx	lr
